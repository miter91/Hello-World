=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: AI_ASSISTANT_ACCURACY CreateDate: 2021-10-22 16:03:47.247 ModifyDate: 2021-10-22 16:03:47.247 --- DEFINITION START --- -- ============================================= -- Author:		<Miter, Matej> -- Create date: <14/10/2021> -- Description:	<Stored procedure to manage all predictions for all AI_Asistant models --Saves first instances of predictions for particular exception into accuracy so we can later on be able to calculate model accuracy> -- ============================================= CREATE PROCEDURE [dbo].[AI_ASSISTANT_ACCURACY] AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON; 	 	IF OBJECT_ID('tempdb..#temp_all_models_yesterday_predictions', 'U') IS NOT NULL DROP TABLE #temp_all_models_yesterday_predictions 	SELECT  		CONCAT(ORD_NUM,'_11') as ID 	INTO #temp_all_models_yesterday_predictions 	FROM Vista_STAGING.dbo.VG_11_TIMELY_RELEASE_EQ_TABLE  	WHERE TIMELY_RELEASE_EXCEPTION = 1 and TRY_CAST(TR_CREATETIME as date) = DATEADD(DAY,-1,convert(varchar,getdate(),23))  	UNION   	SELECT  		CONCAT(TRANSACTION_NUMBER,'_607_CM') as ID  	FROM Vista_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE 	WHERE VG_607_MM = 1 and TRY_CAST(VG_607_CREATETIME_MM as date) = DATEADD(DAY,-1,convert(varchar,getdate(),23))  	UNION  	SELECT  		CONCAT(TRANSACTION_NUMBER,'_607_CM') as ID 	FROM Vista_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_RR_TABLE  	WHERE VG_607_RR = 1 and TRY_CAST(VG_607_CREATETIME_RR as date) = DATEADD(DAY,-1,convert(varchar,getdate(),23))  	UNION  	SELECT  		CONCAT(MULTI_FUND_ID,'_15',TOUCH_COUNT) as ID 	FROM Vista_STAGING.dbo.VG_15_AMENDMENT_FLAG_EQ_TABLE  	WHERE AMENDMENT_FLAG = 1 and TRY_CAST(AMENDMENT_FLAG_CREATETIME as date) = DATEADD(DAY,-1,convert(varchar,getdate(),23))  	UNION  	SELECT  		concat(MULTI_FUND_ID,'_10') as ID 	FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_FI_TABLE  	WHERE TIMELY_RECORDING_EXCEPTION = 1 and TRY_CAST(TREC_CREATETIME as date) = DATEADD(DAY,-1,convert(varchar,getdate(),23))  	UNION   	SELECT 		CONCAT(ORDER_ID,'_604_FX') as ID 	FROM Vista_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_FX_TABLE  	WHERE  VG_604 = 1 and TRY_CAST(vg_604_createtime as date) = DATEADD(DAY,-1,convert(varchar,getdate(),23))   	IF OBJECT_ID('VISTA_REPORTING.dbo.AI_ASSISTANT_PREDICTIVE_SCORES_ACCURACY', 'U') IS NOT NULL  	INSERT INTO VISTA_REPORTING.dbo.AI_ASSISTANT_PREDICTIVE_SCORES_ACCURACY  	SELECT * FROM  		(SELECT ps.* FROM 		(SELECT * FROM VISTA_REPORTING.dbo.AI_ASSISTANT_PREDICTIVE_SCORES where TRY_CAST(PREDICTION_DATE as date) = convert(varchar,getdate(),23)) ps 		INNER JOIN 		(SELECT * FROM #temp_all_models_yesterday_predictions) temp 		on 		ps.ID = temp.ID) AI_ASSISTANT_PREDICTIVE_SCORES_ACCURACY 	 	 	ELSE 		SELECT ps.* 		INTO VISTA_REPORTING.dbo.AI_ASSISTANT_PREDICTIVE_SCORES_ACCURACY 		FROM( 		SELECT * FROM VISTA_REPORTING.dbo.AI_ASSISTANT_PREDICTIVE_SCORES where TRY_CAST(PREDICTION_DATE as date) = convert(varchar,getdate(),23)) ps 		INNER JOIN 		(SELECT * FROM #temp_all_models_yesterday_predictions) temp 		on 		ps.ID = temp.ID  	 IF OBJECT_ID('tempdb..#temp_all_models_yesterday_predictions', 'U') IS NOT NULL DROP TABLE #temp_all_models_yesterday_predictions  END     --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: API_DATA_REFRESH CreateDate: 2019-10-18 08:39:49.200 ModifyDate: 2024-05-24 08:31:39.673 --- DEFINITION START --- -- ============================================= -- Author:		<da Costa, David> -- Create date: <10/07/2019> -- Description:	<Stored procedure to transform API data in STAGING and create  -- corresponding VISTA_REPORTING tables>  --2024-05-23 Matej Miter: --Random Jira number 123456763, to resolve problem with STG and Master table alignments. Adding new stored procedure  -- ============================================= CREATE PROCEDURE [dbo].[API_DATA_REFRESH]  AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;  	EXEC VISTA_REPORTING.dbo.WORKFLOW_TABLE_BACKUP 	EXEC VISTA_STAGING.dbo.DEALER_AND_DESK_REFRESH 	EXEC VISTA_STAGING.dbo.FX_RATES_REFRESH -- MUST BE RUN BEFORE TRADES/NAV 	EXEC VISTA_STAGING.dbo.ORDERS_REFRESH -- MUST BE RUN BEFORE ORDER_SPLIT & ORDERS_CROSS_REFRESH 	EXEC VISTA_STAGING.dbo.ORDERS_CROSS_REFRESH 	EXEC VISTA_STAGING.dbo.ORDER_SPLIT 	EXEC VISTA_STAGING.dbo.TRADES_REFRESH 	EXEC VISTA_STAGING.dbo.SECTOR_REFRESH 	EXEC VISTA_STAGING.dbo.ISSUERS_REFRESH 	EXEC VISTA_STAGING.dbo.INSTRUMENTS_REFRESH 	EXEC VISTA_STAGING.dbo.PLACEMENTS_REFRESH 	EXEC VISTA_STAGING.dbo.CREATE_PRIMARY_INST_TYPE 	EXEC VISTA_STAGING.dbo.QUOTES_REFRESH 	EXEC VISTA_STAGING.dbo.PORTFOLIO_REFRESH 	EXEC VISTA_STAGING.dbo.PORTFOLIO_GROUP_REFRESH 	EXEC VISTA_STAGING.dbo.PORTFOLIO_GROUP_TREASURY_REFRESH 	EXEC VISTA_STAGING.dbo.NAV_REFRESH 	EXEC VISTA_STAGING.dbo.CASH_TRADES_REFRESH 	EXEC VISTA_STAGING.dbo.CASH_ORDERS_REFRESH 	EXEC VISTA_STAGING.dbo.CASH_REFERENCE_RATES_REFRESH 	EXEC VISTA_STAGING.dbo.CASH_BANK_RATES_REFRESH 	EXEC VISTA_STAGING.dbo.CASH_MAPPED_BANKS_REFRESH 	EXEC VISTA_STAGING.dbo.FX_ORDERS_REFRESH 	--EXEC VISTA_STAGING.dbo.FX_QUOTES_REFRESH 	EXEC VISTA_STAGING.dbo.FX_TRADES_REFRESH 	EXEC VISTA_STAGING.dbo.FX_TRADES_CONCAT_REFRESH --Must be run after FX_TRADES_REFRESH 	EXEC VISTA_STAGING.DBO.FX_LOSING_BANKS_REFRESH 	EXEC VISTA_STAGING.DBO.FX_MAPPED_BANKS_REFRESH 	EXEC VISTA_STAGING.dbo.EXTERNAL_PRICING_DATA_EQDD 	EXEC VISTA_STAGING.dbo.EXTERNAL_PRICING_DATA_FIDD  	--Create one day processing tables 	IF OBJECT_ID('Vista_Reporting.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NULL  	CREATE TABLE Vista_Reporting.dbo.MASTER_TABLE_COMPLETION_TIMES ( 		TABLE_NAME NVARCHAR(MAX) NULL, 		START_TIME DATETIME NULL, 		END_TIME DATETIME NULL, 		TIME_TAKEN_SECONDS INT NULL, 		COMPLETION_DATE DATE NULL);  	EXEC VISTA_STAGING.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN_REFRESH 	EXEC VISTA_STAGING.dbo.ONE_DAY_PROCESSING_IDS_CASH_REFRESH 	EXEC VISTA_STAGING.dbo.ONE_DAY_PROCESSING_IDS_FX_REFRESH  	--Below is an additional check for Implementation Shortfall and High Low exceptions so we don't miss to show any processed data within dealers review tables in the frontend 	-- Additionally check for Order priority all dealing desks in order to align exceptions raised in staging area with master tables 	--EXEC VISTA_STAGING.dbo.IMPLEMENTATION_SHORTFALL_HIGH_LOW_ORDER_PRIORITY_CHECKS  	--123456763 	EXEC Vista_STAGING.dbo.ALADDIN_ONE_DAY_PROCESSING_RESOLVER 	--End of 123456763 END   --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: COMPLIANCE_SAMPLING_CASH CreateDate: 2019-10-18 08:39:49.257 ModifyDate: 2021-05-06 12:27:33.750 --- DEFINITION START ---  -- ============================================= -- Author:		<LIZZIE REYNOLDS> -- Create date: <2019-04-30> -- Description:	<Procedure to implement compliance sampling> -- =============================================  -- ***************VERSION CONTROL*************** -- 2018-05-23 WH - Procedure created. Currently it only takes a random sample set. -- 2018-06-07 WH - Sampling logic updated to use risk weighted sampling -- 2018-08-08 KR - Added Fair Allocation Exception -- 2018-09-24 DDC - Added extra code to populate the COMPLIANCE_AUDIT_TABLE evert time the script is run. -- 2019-04-30 ER - updated for DMG desk to remove reference to counterparty direction, G&H and have changed the level of the script to be based on MFID instead of PM order (multiple major changes) --					initial testing this seems to work but there could be unseen issues to be aware of . -- *********************************************  CREATE PROCEDURE [dbo].[COMPLIANCE_SAMPLING_CASH] --'2018-01-01 00:00:00.000','2018-12-12 00:00:00.000','WH test3' --exec VISTA_REPORTING.dbo.COMPLIANCE_SAMPLING_CASH '2019-03-01 00:00:00.000', '2019-05-30 00:00:00.000', 'ER_TEST110608' 	@Start_Date datetime, 	@End_Date datetime, 	@INSPECTION_NAME VARCHAR(MAX)  AS BEGIN  --DECLARE @Start_Date datetime, --@End_Date datetime, --@INSPECTION_NAME VARCHAR(MAX); -- --set @Start_Date = '2019-01-01 00:00:00.000' --set @End_Date = '2019-04-30 00:00:00.000' -- --set @INSPECTION_NAME = 'er_test_cash0708'  	--0. Test query to check parameters passed from OS are correct 	INSERT INTO VISTA_REPORTING.dbo.compliance_sampling_dates 	SELECT @Start_Date AS start_time, @End_Date AS end_time, @INSPECTION_NAME AS Inspection_Name,  	getdate() as [Sampled time] , 'CASH' as DEALING_DESK  	--1. Get all trades in the sample period FOR CASH MANAGER AND ALADDIN 	IF OBJECT_ID('tempdb..#ORDERS_AL_pop', 'U') IS NOT NULL DROP TABLE #ORDERS_AL_pop 	SELECT DISTINCT 		PM.ORD_NUM, 		T.TRD_TRADE_DATE, -- Use the TRD_TRADE_DATE 		PM.CUSIP, 		PM.SM_SEC_TYPE, 		PM.DEALING_DESK 	INTO #ORDERS_AL_pop 	FROM (SELECT DISTINCT ORD_NUM, CUSIP,  SM_SEC_TYPE, DEALING_DESK FROM VISTA_REPORTING.dbo.PM_ORDERS) PM 	LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.PM_ORD = PM.ORD_NUM 	LEFT JOIN (SELECT DISTINCT ORD_NUM, TRD_TRADE_DATE  FROM VISTA_REPORTING.dbo.TRADES) T ON T.ORD_NUM = OC.TRD_ORD 	WHERE CONVERT(DATE, TRD_TRADE_DATE) BETWEEN CONVERT(DATE,@Start_Date) AND CONVERT(DATE,@End_Date) AND PM.DEALING_DESK = 'CASH' 		  AND NOT EXISTS (SELECT soc.ORDER_ID FROM Vista_Reporting.dbo.SAMPLED_ORDERS_CASH_COMPLIANCE soc WHERE soc.ORDER_ID = pm.ORD_NUM)  	IF OBJECT_ID('tempdb..#ORDERS_CM_pop', 'U') IS NOT NULL DROP TABLE #ORDERS_CM_pop 	SELECT DISTINCT 		CO.ORDER_ID, 		CAST(CT.EXECUTED_DATETIME AS DATE) as TRD_TRADE_DATE, 		NULL AS CUSIP, 		CO.PRODUCT, 		'CASH' AS DEALING_DESK 	INTO #ORDERS_CM_pop 	FROM VISTA_REPORTING.DBO.CASH_ORDERS CO 	LEFT JOIN (SELECT DISTINCT ORDER_ID, EXECUTED_DATETIME FROM  VISTA_REPORTING.DBO.CASH_TRADES) CT ON CO.ORDER_ID = CT.ORDER_ID 	WHERE CONVERT(DATE, EXECUTED_DATETIME) BETWEEN CONVERT(DATE,@Start_Date) AND CONVERT(DATE,@End_Date)  	AND PRODUCT IN ('11', '12', '13', '11,12', 'DBV1', 'DVB1,ECG', 'F10', 'F25', 'ECG', 'REPO') -- AS IN BRD 		AND NOT EXISTS (SELECT soc.ORDER_ID FROM Vista_Reporting.dbo.SAMPLED_ORDERS_CASH_COMPLIANCE soc WHERE soc.ORDER_ID = co.ORDER_ID) 	 	IF OBJECT_ID('tempdb..#ORDERS_COMBINED_pop', 'U') IS NOT NULL DROP TABLE #ORDERS_COMBINED_pop 	SELECT DISTINCT  		AL.ORD_NUM AS ORDER_ID, 		AL.TRD_TRADE_DATE AS TRD_TRADE_DATE, 		AL.CUSIP, 		AL.SM_SEC_TYPE AS PRODUCT, 		AL.DEALING_DESK, 		'AL' AS SOURCE 	INTO #ORDERS_COMBINED_pop 	FROM #ORDERS_AL_pop AL 	UNION 	SELECT DISTINCT 		CM.ORDER_ID, 		CM.TRD_TRADE_DATE, 		NULL AS CUSIP, 		CM.PRODUCT, 		CM.DEALING_DESK, 		'CM' AS SOURCE 	FROM #ORDERS_CM_pop CM   	--2. Get the latest touch for each MFID so that we only look at the latest version of the MFID. 	IF OBJECT_ID('tempdb..#max_touch', 'U') IS NOT NULL DROP TABLE #max_touch  	SELECT  		MULTI_FUND_ID, 		MAX(TOUCH_COUNT) AS MAX_TOUCH 	INTO #max_touch 	FROM VISTA_REPORTING.dbo.TRADES 	GROUP BY MULTI_FUND_ID  		--2. Get the latest touch for each MFID so that we only look at the latest version of the MFID. 	IF OBJECT_ID('tempdb..#max_touch_PM', 'U') IS NOT NULL DROP TABLE #max_touch_PM 	SELECT  		ORD_NUM, 		MAX(TOUCH_COUNT) AS MAX_TOUCH 	INTO #max_touch_PM 	FROM VISTA_REPORTING.dbo.PM_ORDERS 	GROUP BY ORD_NUM  	IF OBJECT_ID('VISTA_REPORTING.dbo.SAMPLED_ORDERS_CASH_COMPLIANCE', 'U') IS NULL 	BEGIN 		CREATE TABLE VISTA_REPORTING.dbo.SAMPLED_ORDERS_CASH_COMPLIANCE ( 			ORDER_ID CHAR(12), 			SOURCE VARCHAR(2), 			SAMPLED_DATE DATETIME, 			INSPECTION_NAME VARCHAR(MAX), 			DEALING_DESK VARCHAR(20) 			) 	END 	  ----3. Join to FODB table to get price data. For each order we look at all bid/ask spreads on the trades for that order and take the maximum. ----ALADDIN --IF OBJECT_ID('tempdb..#temp_distinct_TRADES', 'U') IS NOT NULL DROP TABLE #temp_distinct_TRADES --SELECT   --	T.MULTI_FUND_ID, --	TP.DEALING_DESK, --	T.CUSIP,  --	--po.COMMENTS_VALUE, NEED TO UPDATE COMMENTS VALUE TO COME FROM TRADES FILE  --	T.COUNTERPARTY_CODE, --	dbg.UNIVERSAL_BID_PRICE, --	dbg.UNIVERSAL_ASK_PRICE, --	TP.TRD_TRADE_DATE, --	CASE  --		WHEN dbg.UNIVERSAL_ASK_PRICE = dbg.UNIVERSAL_BID_PRICE THEN 0 --		WHEN dbg.UNIVERSAL_BID_PRICE <> 0 THEN MAX(ABS((dbg.UNIVERSAL_ASK_PRICE-dbg.UNIVERSAL_BID_PRICE)/NULLIF(dbg.UNIVERSAL_BID_PRICE,0))) --Need to account for 0 bid price (will cause divide by zero errors). --		ELSE NULL  --	END AS BID_ASK_SPREAD  --INTO #temp_distinct_TRADES --FROM VISTA_REPORTING.dbo.TRADES T  --INNER JOIN #TRADES_AL_pop TP ON TP.MULTI_FUND_ID = T.MULTI_FUND_ID -- Only want to pull through orders in our sample period TO GET DMG DESK --INNER JOIN #max_touch mt ON mt.MULTI_FUND_ID = T.MULTI_FUND_ID AND  mt.MAX_TOUCH=T.TOUCH_COUNT --LEFT JOIN VISTA_REPORTING.dbo.REUTERS_PRICE_BENCHMARK_TABLE dbg ON dbg.MULTI_FUND_ID = T.MULTI_FUND_ID AND CONVERT(DATE, TP.TRD_TRADE_DATE) = CONVERT(DATE, dbg.TRD_TRADE_DATE) -- Confirmation from business required that we should be using the TRD_TRADE_DATE field --WHERE NOT EXISTS (SELECT MULTI_FUND_ID FROM VISTA_REPORTING.dbo.SAMPLED_TRADES_COMPLIANCE STC WHERE STC.MULTI_FUND_ID = T.MULTI_FUND_ID) --GROUP BY  --	T.MULTI_FUND_ID, --	TP.DEALING_DESK, --	T.CUSIP,  --	--po.COMMENTS_VALUE,  --	T.COUNTERPARTY_CODE, --	dbg.UNIVERSAL_BID_PRICE, --	dbg.UNIVERSAL_ASK_PRICE, --	TP.TRD_TRADE_DATE   --4. TAKE NET CONSIDERATION FOR EACH TRADE IF OBJECT_ID('tempdb..#temp_trades_table', 'U') IS NOT NULL DROP TABLE #temp_trades_table SELECT DISTINCT  	pm.ORD_NUM AS ORDER_ID, 	T.NET_CONSIDERATION_GBP AS SUM_NET_CONSIDERATION, 	'AL' AS SOURCE, 	CAST(MAX(SETTLE_DATE) AS DATE) AS MATURITY_DATE, 	CAST(TRD_TRADE_DATE AS DATE) AS VALUE_DATE INTO #TEMP_TRADES_TABLE FROM VISTA_REPORTING.DBO.PM_ORDERS pm LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON oc.PM_ORD = PM.ORD_NUM LEFT JOIN (SELECT DISTINCT ORD_NUM, NET_CONSIDERATION_GBP, T.MULTI_FUND_ID, TRD_TRADE_DATE AS TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES T INNER JOIN #max_touch MT ON T.MULTI_FUND_ID = MT.MULTI_FUND_ID AND T.TOUCH_COUNT = MT.MAX_TOUCH ) t ON t.ORD_NUM = oc.TRD_ORD  WHERE DEALING_DESK = 'CASH' 	  AND EXISTS (SELECT ocp.ORDER_ID FROM #ORDERS_COMBINED_pop ocp WHERE ocp.ORDER_ID = pm.ORD_NUM) GROUP BY PM.ORD_NUM, NET_CONSIDERATION_GBP, TRD_TRADE_DATE  UNION  SELECT DISTINCT  	ORDER_ID,   	isnull(INSTRUCTED_AMOUNT_GBP, 0.0) AS SUM_NET_CONSIDERATION, -- THIS NEEDS UPDATING WHEN WE GET MORE INFO FOR WHAT TO USE FOR NET CONSIDERATION 	'CM' AS SOURCE, 	CAST(MATURITY_DATE AS DATE), 	CAST(VALUE_DATE AS DATE) FROM VISTA_REPORTING.DBO.CASH_ORDERS CO WHERE PRODUCT IN ('11', '12', '13', '11,12', 'DBV1', 'DVB1,ECG', 'F10', 'F25', 'ECG', 'REPO') 	  AND EXISTS (SELECT ocp.ORDER_ID FROM #ORDERS_COMBINED_pop ocp WHERE ocp.ORDER_ID = co.ORDER_ID)   	/*****************************/ 				--ADD A SCORE FOR ALL INST TYPES 	/*****************************/      	--5. Do the ranking.    	IF OBJECT_ID('tempdb..#temp_NC_rank', 'U') IS NOT NULL DROP TABLE #temp_NC_rank 	SELECT DISTINCT  		T.ORDER_ID, 		'CASH' AS DEALING_DESK, 		T.SOURCE, 		--ISNULL(po.COMMENTS_VALUE, '') AS COMMENTS_VALUE, NEED TO WORK OUT WHAT COMMENTS TO INCLUDE HERE 		--T.COUNTERPARTY_CODE, WHAT SHOULD WE PUT HERE 		CASE WHEN T.SOURCE = 'AL' THEN PM.SM_SEC_TYPE WHEN T.SOURCE = 'CM' THEN CO.PRODUCT END AS PRODUCT, 		CASE 			WHEN T.SOURCE = 'AL' AND PM.SM_SEC_TYPE in ('CD', 'CP', 'TBILL') THEN 2 			WHEN T.SOURCE = 'CM' AND CO.PRODUCT in ('ECG', '11,12', 'DBV1,ECG', 'DBV1', 'REPO') THEN 1 			WHEN T.SOURCE = 'CM' AND CO.PRODUCT in ('11','12', '13', 'F25', 'F10') THEN 2 			ELSE 2 		END AS ASSET_TYPE_SCORE, 		CASE WHEN DATEDIFF(DAY,VALUE_DATE, MATURITY_DATE) <= 3 THEN 1  			WHEN DATEDIFF(DAY,VALUE_DATE, MATURITY_DATE) > 3 THEN 2 ELSE 1 END AS TERM_SCORE, 		T.SUM_NET_CONSIDERATION, 		--T.BID_ASK_SPREAD, NOT REQUIRED 		--DENSE_RANK() OVER (ORDER BY T.BID_ASK_SPREAD) AS BSA_RANK, -- ShouWe ld we be ordering by the BID_ASK_SPREAD descending? NOT REQUIRED FOR CASH 		DENSE_RANK() OVER (ORDER BY t.SUM_NET_CONSIDERATION) AS NC_RANK -- Should we be ordering by the SUM_NET_CONDSIDERATION descending?  	INTO #temp_NC_rank 	FROM #TEMP_TRADES_TABLE T 	LEFT JOIN (SELECT DISTINCT ORD_NUM, SM_SEC_TYPE FROM VISTA_REPORTING.dbo.PM_ORDERS) PM ON PM.ORD_NUM = T.ORDER_ID AND T.SOURCE = 'AL' 	LEFT JOIN ( SELECT DISTINCT ORDER_ID, PRODUCT FROM VISTA_REPORTING.DBO.CASH_ORDERS) CO ON T.SOURCE = 'CM' AND T.ORDER_ID = CO.ORDER_ID    	--DECLARE @MAX_BSA_RANK INT; 	DECLARE @MAX_NC_RANK INT; 	--SET @MAX_BSA_RANK = (SELECT MAX(BSA_RANK) FROM #temp_NC_rank); 	SET @MAX_NC_RANK = (SELECT MAX(NC_RANK) FROM #temp_NC_rank);  	--6. Do the risk scoring 	IF OBJECT_ID('tempdb..#temp_RANK_table', 'U') IS NOT NULL DROP TABLE #temp_RANK_table 	SELECT DISTINCT 		tnr.*, 		(1.0*tnr.NC_RANK/@MAX_NC_RANK) AS PERCENTAGE_NC_RANK,  										                   		CASE  			WHEN (1.0*tnr.NC_RANK/@MAX_NC_RANK) > 0.66 THEN 2  														   			ELSE 1 		END AS TRADE_VALUE_SCORE 	INTO #temp_RANK_table 	FROM #temp_NC_rank tnr  	 	--7. Bucket the orders into Elevated and Normal 	IF OBJECT_ID('tempdb..#pre_sample_table', 'U') IS NOT NULL DROP TABLE #pre_sample_table 	SELECT DISTINCT 		TRT.ORDER_ID, 		TRT.SOURCE, 		TRT.DEALING_DESK, 		MAX(TRT.ASSET_TYPE_SCORE  + TRT.TRADE_VALUE_SCORE + TRT.TERM_SCORE ) AS AGGREGATE_SCORE, --In case there are multiple records for a mfid, take the maximum score that we see 		CASE 			WHEN MAX(TRT.ASSET_TYPE_SCORE + TRT.TRADE_VALUE_SCORE + TRT.TERM_SCORE) >= 5 THEN 'ELEVATED' --In case there are multiple records for a mfid, take the maximum score that we see 			ELSE 'NORMAL' 		END AS RISK_TIER 	INTO #pre_sample_table 	FROM #temp_RANK_table TRT 	GROUP BY TRT.ORDER_ID, TRT.DEALING_DESK, TRT.SOURCE  	--8. Find required number of samples -2.5% of all orders. 	DECLARE @Total_Num_trades FLOAT; 	SET @Total_Num_trades = 2.5/100*(SELECT COUNT(DISTINCT ORDER_ID) FROM #pre_sample_table);   	--9. Get samples (80% of the 2.5% are from the elevated bucket. The rest come from the normal bucket). 	IF OBJECT_ID('tempdb..#Samples_elevated', 'U') IS NOT NULL DROP TABLE #Samples_elevated 	SELECT TOP (CONVERT(INT,(CEILING(@Total_Num_trades * 0.8)))) * 	INTO #Samples_elevated 	FROM #pre_sample_table 	WHERE RISK_TIER='ELEVATED'  	ORDER BY NEWID() -- new ID will randomly rank and taking top n will keep this randomness 	 	IF OBJECT_ID('tempdb..#Samples_normal', 'U') IS NOT NULL DROP TABLE #Samples_normal 	SELECT TOP (CONVERT(INT,(CEILING(@Total_Num_trades * 0.2)))) * 	INTO #Samples_normal 	FROM #pre_sample_table 	WHERE RISK_TIER='Normal'  	ORDER BY NEWID() -- new ID will randomly rank and taking top n will keep this randomness 	 	IF OBJECT_ID('tempdb..#Samples', 'U') IS NOT NULL DROP TABLE #Samples 	SELECT *  	INTO #Samples 	FROM #Samples_elevated 	UNION 	SELECT * FROM #Samples_normal  	/*****************************/ 		--PLACEHOLDER TO USE TO HELP TOP UP for < 100 samples 	/*****************************/  	--combine elevated and normal samples into one table 	IF OBJECT_ID('tempdb..#Samples_total', 'U') IS NOT NULL DROP TABLE #Samples_total 	SELECT ORDER_ID, SOURCE, DEALING_DESK, AGGREGATE_SCORE, RISK_TIER--, CP_DIRECTION_FLAG 	INTO #Samples_total 	FROM #Samples  	--if less than 100 samples, figure out how many more need to be sampled 	declare @total_trades int 	set @total_trades = (select COUNT(distinct ORDER_ID) from #Samples_total);  	-- A. USE THIS TO TOP UP TO X SAMPLES 	declare @total_top_up_amount int 	if @total_trades < 100  set @total_top_up_amount = 100 -@total_trades 	else set @total_top_up_amount = 0 	declare @elevated_top_up_amount int 	declare @normal_top_up_amount int 	set @elevated_top_up_amount = CEILING(0.8*@total_top_up_amount)  	set @normal_top_up_amount = floor(0.2*@total_top_up_amount)  	--grab the required number of samples from elevated bucket 	IF OBJECT_ID('tempdb..#topped_up_samples_elevated', 'U') IS NOT NULL DROP TABLE #topped_up_samples_elevated 	select top(@elevated_top_up_amount) el.*  	into #topped_up_samples_elevated 	from #pre_sample_table el 	left join #Samples s 	on el.ORDER_ID = s.ORDER_ID AND EL.SOURCE = S.SOURCE 	where s.ORDER_ID IS NULL AND el.RISK_TIER = 'ELEVATED' 	order by NEWID()   	--grab the required number of samples from normal bucket 	IF OBJECT_ID('tempdb..#topped_up_samples_normal', 'U') IS NOT NULL DROP TABLE #topped_up_samples_normal 	select top(@normal_top_up_amount) n.* 	into #topped_up_samples_normal 	from #pre_sample_table n 	left join #Samples s 	on n.ORDER_ID = s.ORDER_ID AND N.SOURCE = S.SOURCE 	where s.ORDER_ID IS NULL AND n.RISK_TIER = 'NORMAL' 	order by NEWID()   	--add new topped up samples to sample table 	insert into #Samples_total 	select ORDER_ID, SOURCE, DEALING_DESK, AGGREGATE_SCORE, RISK_TIER from #topped_up_samples_elevated 	insert into #Samples_total 	select ORDER_ID, SOURCE, DEALING_DESK, AGGREGATE_SCORE, RISK_TIER from #topped_up_samples_normal  	--add sampled order numbers to list of smapled orders 	IF OBJECT_ID('VISTA_REPORTING.dbo.SAMPLED_ORDERS_CASH_COMPLIANCE') IS NULL 	SELECT DISTINCT  		ORDER_ID, 		SOURCE,  		GETDATE() AS SAMPLED_DATE,  		@INSPECTION_NAME AS [INSPECTION NAME] , 		'CASH' AS DEALING_DESK 	INTO VISTA_REPORTING.dbo.SAMPLED_ORDERS_CASH_COMPLIANCE 	FROM #Samples_total 	ELSE  	INSERT INTO VISTA_REPORTING.dbo.SAMPLED_ORDERS_CASH_COMPLIANCE 	SELECT DISTINCT  		ORDER_ID, 		SOURCE,  		GETDATE() AS SAMPLED_DATE, 		@INSPECTION_NAME AS [INSPECTION NAME], 		'CASH' AS DEALING_DESK 	FROM #Samples_total  	/*****************************/ 		--Combine all samples 	/*****************************/ 	--10. Get all trades associated with the orders to sample 	IF OBJECT_ID('tempdb..#sample_trades_orders', 'U') IS NOT NULL DROP TABLE #sample_trades_orders 	SELECT DISTINCT  		S.ORDER_ID, 		CASE WHEN S.SOURCE = 'AL' THEN T.MULTI_FUND_ID WHEN S.SOURCE = 'CM' THEN CT.TRANSACTION_NUMBER END AS TRANSACTION_NUMBER, 		S.SOURCE, 		CASE WHEN S.SOURCE = 'AL' THEN oc.PM_ORD WHEN S.SOURCE = 'CM' THEN CT.ORDER_ID END AS PM_ORD, 		oc.TRD_ORD, 		s.DEALING_DESK, 		1 AS For_Sample 		--CP_DIRECTION_FLAG 	INTO #sample_trades_orders 	FROM #Samples_total S 	LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON S.ORDER_ID = oc.PM_ORD 	LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM FROM  VISTA_REPORTING.DBO.TRADES) T ON S.SOURCE = 'AL' AND T.ORD_NUM = OC.TRD_ORD 	LEFT JOIN (SELECT DISTINCT TRANSACTION_NUMBER, ORDER_ID FROM VISTA_REPORTING.DBO.CASH_TRADES) CT ON S.SOURCE = 'CM' AND S.ORDER_ID = CT.ORDER_ID  	 	--11. Create status table 	IF OBJECT_ID('tempdb..#ORDER_status', 'U') IS NOT NULL DROP TABLE #ORDER_status 	SELECT distinct 		ORDERS.SOURCE, 		ORDERS.ORDER_ID, 		sample.PM_ORD, 		ORDERS.DEALING_DESK, 		--ISNULL(sample.CP_DIRECTION_FLAG, 0) AS CP_DIRECTION_FLAG, 		CASE  			WHEN sample.For_Sample = 1 THEN '2C1' --Order level - Compliance Review Pending 		ELSE '2C2' 						   --Order level - Not sampled 		END AS Status, 		NULL AS FINAL_UPDATED_TIME 	INTO #ORDER_status 	FROM (SELECT DISTINCT ORDER_ID, DEALING_DESK, SOURCE FROM #ORDERS_combined_pop) ORDERS 	LEFT JOIN (SELECT DISTINCT ORDER_ID, PM_ORD, For_Sample FROM #sample_trades_orders) sample ON ORDERS.ORDER_ID = sample.ORDER_ID  	--11a. Put the orders into the status table 	IF OBJECT_ID('VISTA_REPORTING.dbo.COMPLIANCE_ORDERS_FINAL_STATUS_UPDATE_TABLE_CASH', 'U') IS NULL 	 	SELECT  		ORDER_ID, 		SOURCE, 		DEALING_DESK, 		STATUS, 		FINAL_UPDATED_TIME  	INTO VISTA_REPORTING.dbo.COMPLIANCE_ORDERS_FINAL_STATUS_UPDATE_TABLE_CASH 	FROM #ORDER_status  	MERGE VISTA_REPORTING.dbo.COMPLIANCE_ORDERS_FINAL_STATUS_UPDATE_TABLE_CASH AS T 	USING #ORDER_status AS S 	ON (T.ORDER_ID = S.ORDER_ID AND T.SOURCE = S.SOURCE ) 	WHEN MATCHED 		THEN  		UPDATE SET 			T.ORDER_ID=T.ORDER_ID, 			T.SOURCE = S.SOURCE, 			T.Status = (CASE  				WHEN T.Status = '2C2' THEN S.Status -- Not sampled previously - update to the current status 				WHEN T.Status IN ('2C1','2C3','2C4') THEN T.Status -- Has been sampled previously so we don't update the status 			END) 	WHEN NOT MATCHED  		THEN  		INSERT ( ORDER_ID, SOURCE, DEALING_DESK, STATUS, FINAL_UPDATED_TIME) 		VALUES (S.ORDER_ID, SOURCE, S.DEALING_DESK, S.STATUS, S.FINAL_UPDATED_TIME); 	  	--12. Put the trade exception level detail into the status table - is to be done for all exception types. 	IF OBJECT_ID('tempdb..#exceptions', 'U') IS NOT NULL DROP TABLE #exceptions	 	--PD 	SELECT DISTINCT  		OS.ORDER_ID, 		OS.SOURCE, 		CASE WHEN OS.SOURCE = 'CM' THEN  CT.TRANSACTION_NUMBER WHEN OS.SOURCE = 'AL' THEN T.MULTI_FUND_ID END AS TRANSACTION_NUMBER,  		--oc.TRD_ORD, 		'CASH' AS DEALING_DESK, 		vg.[VG_607_MM] AS [Exception_Value], 		vg.VG_607_CREATETIME_MM AS CREATE_TIME, 		CONVERT(VARCHAR(10),'BESTEXMM') AS Exception_Type, 		CASE WHEN vg.[VG_607_MM] = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	INTO #exceptions 	FROM #ORDER_status OS 	LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON OS.ORDER_ID = oc.pm_ord AND OS.SOURCE = 'AL' 	LEFT JOIN (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID FROM VISTA_REPORTING.DBO.TRADES) T ON T.ORD_NUM = OC.TRD_ORD AND OS.SOURCE = 'AL' 	LEFT JOIN (SELECT DISTINCT TRANSACTION_NUMBER, ORDER_ID FROM VISTA_REPORTING.DBO.CASH_TRADES) CT ON CT.ORDER_ID = OS.ORDER_ID AND OS.SOURCE = 'CM' 	LEFT JOIN VISTA_STAGING.DBO.VG_607_BEST_EXECUTION_CASH_MM_TABLE vg ON (vg.TRANSACTION_NUMBER = T.MULTI_FUND_ID AND vg.DATA_SOURCE = 'AL') OR (vg.DATA_SOURCE = 'CM' AND vg.TRANSACTION_NUMBER = CT.TRANSACTION_NUMBER) 		WHERE OS.Status = '2C1'	AND vg.TRANSACTION_NUMBER IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly). 	 	UNION 	SELECT DISTINCT  		OS.ORDER_ID, 		OS.SOURCE, 		CT.TRANSACTION_NUMBER,  		--oc.TRD_ORD, 		'CASH' AS DEALING_DESK, 		vg.[VG_607_RR] AS [Exception_Value], 		vg.VG_607_CREATETIME_RR AS CREATE_TIME, 		CONVERT(VARCHAR(10),'BESTEXRR') AS Exception_Type, 		CASE WHEN vg.[VG_607_RR] = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #ORDER_status OS 	LEFT JOIN (SELECT DISTINCT TRANSACTION_NUMBER, ORDER_ID FROM VISTA_REPORTING.DBO.CASH_TRADES) CT ON CT.ORDER_ID = OS.ORDER_ID AND OS.SOURCE = 'CM' 	LEFT JOIN VISTA_STAGING.DBO.VG_607_BEST_EXECUTION_CASH_RR_TABLE vg ON (vg.TRANSACTION_NUMBER = CT.TRANSACTION_NUMBER) 	WHERE OS.Status = '2C1'	AND vg.TRANSACTION_NUMBER IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly). 	UNION 	--coh  	SELECT DISTINCT  		OS.ORDER_ID, 		OS.SOURCE, 		CASE WHEN OS.SOURCE = 'AL' THEN T.MULTI_FUND_ID WHEN OS.SOURCE = 'CM' THEN CT.TRANSACTION_NUMBER END AS TRANSACTION_NUMBER, 		'CASH' AS DEALING_DESK, 		vg.VG_604 AS [Exception_Value], 		vg.VG_604_CREATETIME AS CREATE_TIME, 		CONVERT(VARCHAR(10),'COHMM') AS Exception_Type, 		CASE WHEN vg.VG_604 = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #ORDER_status OS 	LEFT JOIN vista_reporting.dbo.orders_cross oc ON oS.ORDER_ID = oc.pm_ord AND OS.SOURCE = 'AL' 	LEFT JOIN (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID FROM VISTA_REPORTING.DBO.TRADES) T ON T.ORD_NUM = OC.TRD_ORD 	LEFT JOIN (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER FROM VISTA_REPORTING.DBO.CASH_TRADES) CT ON CT.ORDER_ID = OS.ORDER_ID AND OS.SOURCE = 'CM' 	LEFT JOIN VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE vg ON OS.ORDER_ID = vg.ORDER_ID and os.SOURCE = vg.DATA_SOURCE 	WHERE os.Status = '2C1'	AND vg.ORDER_ID IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly). 	 	UNION 	SELECT DISTINCT  		OS.ORDER_ID, 		OS.SOURCE, 		null as transaction_number,-- CT.TRANSACTION_NUMBER, 		'CASH' AS DEALING_DESK, 		vg.VG_604 AS [Exception_Value], 		vg.VG_604_CREATETIME AS CREATE_TIME, 		CONVERT(VARCHAR(10),'COHRR') AS Exception_Type, 		CASE WHEN vg.VG_604 = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #ORDER_status OS 	LEFT JOIN (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER FROM VISTA_REPORTING.DBO.CASH_TRADES) CT ON CT.ORDER_ID = OS.ORDER_ID AND OS.SOURCE = 'CM' 	LEFT JOIN VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE vg ON OS.ORDER_ID = vg.ORDER_ID and os.SOURCE = vg.DATA_SOURCE 	WHERE os.Status = '2C1'	AND vg.ORDER_ID IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly). 	UNION 	SELECT DISTINCT  		OS.ORDER_ID, 		OS.SOURCE, 		null as transaction_number,-- CASE WHEN OS.SOURCE = 'AL' THEN T.MULTI_FUND_ID WHEN OS.SOURCE = 'CM' THEN CT.TRANSACTION_NUMBER END AS TRANSACTION_NUMBER, 		'CASH' AS DEALING_DESK, 		vg.VG_09 AS [Exception_Value], 		vg.VG_09_CREATETIME AS CREATE_TIME, 		CONVERT(VARCHAR(10),'TEXMM') AS Exception_Type, 		CASE WHEN vg.VG_09 = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #ORDER_status OS 	LEFT JOIN vista_reporting.dbo.orders_cross oc ON oS.ORDER_ID = oc.pm_ord AND OS.SOURCE = 'AL' 	LEFT JOIN (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID FROM VISTA_REPORTING.DBO.TRADES) T ON T.ORD_NUM = OC.TRD_ORD 	LEFT JOIN (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER FROM VISTA_REPORTING.DBO.CASH_TRADES) CT ON CT.ORDER_ID = OS.ORDER_ID AND OS.SOURCE = 'CM' 	LEFT JOIN VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_MM_TABLE vg ON OS.ORDER_ID = vg.ORDER_ID and os.SOURCE = vg.SOURCE 	WHERE os.Status = '2C1'	AND vg.ORDER_ID IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly).  	UNION 	SELECT DISTINCT  		OS.ORDER_ID, 		OS.SOURCE, 		null as transaction_Number, --CT.TRANSACTION_NUMBER, 		'CASH' AS DEALING_DESK, 		vg.VG_09 AS [Exception_Value], 		vg.VG_09_CREATETIME AS CREATE_TIME, 		CONVERT(VARCHAR(10),'TEXRR') AS Exception_Type, 		CASE WHEN vg.VG_09 = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #ORDER_status OS 	LEFT JOIN (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER FROM VISTA_REPORTING.DBO.CASH_TRADES) CT ON CT.ORDER_ID = OS.ORDER_ID AND OS.SOURCE = 'CM' 	LEFT JOIN VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_RR_TABLE vg ON OS.ORDER_ID = vg.ORDER_ID and os.SOURCE = vg.SOURCE 	WHERE os.Status = '2C1'	AND vg.ORDER_ID IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly). 	UNION 	--TRec  	SELECT DISTINCT  		OS.ORDER_ID, 		OS.SOURCE, 		CASE WHEN OS.SOURCE = 'CM' THEN  CT.TRANSACTION_NUMBER WHEN OS.SOURCE = 'AL' THEN T.MULTI_FUND_ID END AS TRANSACTION_NUMBER,  		'CASH' AS DEALING_DESK, 		vg.VG_10  AS [Exception_Value], 		vg.VG_10_CREATETIME AS CREATE_TIME, 		CONVERT(VARCHAR(10),'TRecMM') AS Exception_Type, 		CASE WHEN vg.VG_10 = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #ORDER_status OS 	LEFT JOIN vista_reporting.dbo.orders_cross oc ON oS.ORDER_ID = oc.pm_ord AND OS.SOURCE = 'AL' 	LEFT JOIN (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID FROM VISTA_REPORTING.DBO.TRADES) T ON T.ORD_NUM = OC.TRD_ORD 	LEFT JOIN (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER FROM VISTA_REPORTING.DBO.CASH_TRADES) CT ON CT.ORDER_ID = OS.ORDER_ID AND OS.SOURCE = 'CM' 	LEFT JOIN VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_cash_MM_TABLE vg ON (T.MULTI_FUND_ID = vg.transaction_number AND OS.SOURCE = 'AL') OR (CT.TRANSACTION_NUMBER = vg.TRANSACTION_NUMBER AND OS.SOURCE = 'CM') 	WHERE OS.Status = '2C1'	AND vg.transaction_number IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly). 	union  	SELECT DISTINCT  		OS.ORDER_ID, 		OS.SOURCE, 		CT.TRANSACTION_NUMBER, 		'CASH' AS DEALING_DESK, 		vg.VG_10  AS [Exception_Value], 		vg.VG_10_CREATETIME AS CREATE_TIME, 		CONVERT(VARCHAR(10),'TRecRR') AS Exception_Type, 		CASE WHEN vg.VG_10 = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #ORDER_status OS 	LEFT JOIN vista_reporting.dbo.orders_cross oc ON oS.ORDER_ID = oc.pm_ord AND OS.SOURCE = 'AL' 	LEFT JOIN (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID FROM VISTA_REPORTING.DBO.TRADES) T ON T.ORD_NUM = OC.TRD_ORD 	LEFT JOIN (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER FROM VISTA_REPORTING.DBO.CASH_TRADES) CT ON CT.ORDER_ID = OS.ORDER_ID AND OS.SOURCE = 'CM' 	LEFT JOIN VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_cash_rr_TABLE vg ON (T.MULTI_FUND_ID = vg.transaction_number AND OS.SOURCE = 'AL') OR (CT.TRANSACTION_NUMBER = vg.TRANSACTION_NUMBER AND OS.SOURCE = 'CM') 	WHERE OS.Status = '2C1'	AND vg.transaction_number IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly). 	 	  		UNION 	 	SELECT DISTINCT  		OS.ORDER_ID, 		OS.SOURCE, 		CASE WHEN OS.SOURCE = 'CM' THEN  CT.TRANSACTION_NUMBER WHEN OS.SOURCE = 'AL' THEN T.MULTI_FUND_ID END AS TRANSACTION_NUMBER,  		'CASH' AS DEALING_DESK, 		vg.VG_611  AS [Exception_Value], 		vg.VG_611_CREATETIME AS CREATE_TIME, 		CONVERT(VARCHAR(10),'OrderAggMM') AS Exception_Type, 		CASE WHEN vg.VG_611 = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #ORDER_status OS 	LEFT JOIN vista_reporting.dbo.orders_cross oc ON oS.ORDER_ID = oc.pm_ord AND OS.SOURCE = 'AL' 	LEFT JOIN (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID FROM VISTA_REPORTING.DBO.TRADES) T ON T.ORD_NUM = OC.TRD_ORD 	LEFT JOIN (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER FROM VISTA_REPORTING.DBO.CASH_TRADES) CT ON CT.ORDER_ID = OS.ORDER_ID AND OS.SOURCE = 'CM' 	LEFT JOIN VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_MM_TABLE vg ON (t.ORD_NUM = vg.ORDER_ID AND OS.SOURCE = 'AL') OR (CT.ORDER_ID = VG.ORDER_ID AND OS.SOURCE = 'CM') 	WHERE OS.Status = '2C1'	AND vg.ORDER_ID IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly). 	 	UNION  	SELECT DISTINCT  		OS.ORDER_ID, 		OS.SOURCE, 		CT.TRANSACTION_NUMBER, 		'CASH' AS DEALING_DESK, 		vg.VG_611  AS [Exception_Value], 		vg.VG_611_CREATETIME AS CREATE_TIME, 		CONVERT(VARCHAR(10),'OrderAggRR') AS Exception_Type, 		CASE WHEN vg.VG_611 = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #ORDER_status OS 	LEFT JOIN vista_reporting.dbo.orders_cross oc ON oS.ORDER_ID = oc.pm_ord AND OS.SOURCE = 'AL' 	LEFT JOIN (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID FROM VISTA_REPORTING.DBO.TRADES) T ON T.ORD_NUM = OC.TRD_ORD 	LEFT JOIN (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER FROM VISTA_REPORTING.DBO.CASH_TRADES) CT ON CT.ORDER_ID = OS.ORDER_ID AND OS.SOURCE = 'CM' 	LEFT JOIN VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_RR_TABLE vg ON (t.ORD_NUM = vg.ORDER_ID AND OS.SOURCE = 'AL') OR (CT.ORDER_ID = VG.ORDER_ID AND OS.SOURCE = 'CM') 	WHERE OS.Status = '2C1'	AND vg.ORDER_ID IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly). 	 	UNION  	SELECT DISTINCT  		OS.ORDER_ID, 		OS.SOURCE, 		CASE WHEN OS.SOURCE = 'CM' THEN  CT.TRANSACTION_NUMBER WHEN OS.SOURCE = 'AL' THEN T.MULTI_FUND_ID END AS TRANSACTION_NUMBER,  		'CASH' AS DEALING_DESK, 		vg.VG_612  AS [Exception_Value], 		vg.VG_612_CREATETIME AS CREATE_TIME, 		CONVERT(VARCHAR(10),'OrderAllMM') AS Exception_Type, 		CASE WHEN vg.VG_612 = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #ORDER_status OS 	LEFT JOIN vista_reporting.dbo.orders_cross oc ON oS.ORDER_ID = oc.pm_ord AND OS.SOURCE = 'AL' 	LEFT JOIN (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID FROM VISTA_REPORTING.DBO.TRADES) T ON T.ORD_NUM = OC.TRD_ORD 	LEFT JOIN (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER FROM VISTA_REPORTING.DBO.CASH_TRADES) CT ON CT.ORDER_ID = OS.ORDER_ID AND OS.SOURCE = 'CM' 	LEFT JOIN VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_MM_TABLE vg ON (T.MULTI_FUND_ID = vg.transaction_number AND OS.SOURCE = 'AL') OR (CT.TRANSACTION_NUMBER = vg.TRANSACTION_NUMBER AND OS.SOURCE = 'CM') 	WHERE OS.Status = '2C1'	AND vg.transaction_number IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly). 	union  	SELECT DISTINCT  		OS.ORDER_ID, 		OS.SOURCE, 		CT.TRANSACTION_NUMBER, 		'CASH' AS DEALING_DESK, 		vg.VG_612  AS [Exception_Value], 		vg.VG_612_CREATETIME AS CREATE_TIME, 		CONVERT(VARCHAR(10),'OrderAllRR') AS Exception_Type, 		CASE WHEN vg.VG_612 = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #ORDER_status OS 	LEFT JOIN vista_reporting.dbo.orders_cross oc ON oS.ORDER_ID = oc.pm_ord AND OS.SOURCE = 'AL' 	LEFT JOIN (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID FROM VISTA_REPORTING.DBO.TRADES) T ON T.ORD_NUM = OC.TRD_ORD 	LEFT JOIN (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER FROM VISTA_REPORTING.DBO.CASH_TRADES) CT ON CT.ORDER_ID = OS.ORDER_ID AND OS.SOURCE = 'CM' 	LEFT JOIN VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_RR_TABLE vg ON (T.MULTI_FUND_ID = vg.transaction_number AND OS.SOURCE = 'AL') OR (CT.TRANSACTION_NUMBER = vg.TRANSACTION_NUMBER AND OS.SOURCE = 'CM') 	WHERE OS.Status = '2C1'	AND vg.transaction_number IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly). 	  	IF OBJECT_ID('VISTA_REPORTING.dbo.INSPECTION_EXCEPTION_COUNT_CASH', 'U') IS NULL  	SELECT  		@INSPECTION_NAME AS INSPECTION_NAME, 		@Start_Date AS INSPECTION_START_DATE, 		@End_Date AS INSPECTION_END_DATE, 		GETDATE() AS INSPECTION_SAMPLE_DATE, 		'CASH' AS DEALING_DESK, 		Exception_Type,  		CASE  			WHEN Exception_Type in ('OrderAggRR', 'OrderAggMM') THEN	COUNT(DISTINCT ORDER_ID) 			ELSE COUNT(DISTINCT COALESCE(TRANSACTION_NUMBER, ORDER_ID)) 		END AS EXCEPTION_COUNT 	INTO VISTA_REPORTING.dbo.INSPECTION_EXCEPTION_COUNT_CASH 	FROM #exceptions 	WHERE Exception_Value >= 1 	GROUP BY Exception_Type 	 	ELSE  	INSERT INTO VISTA_REPORTING.dbo.INSPECTION_EXCEPTION_COUNT_CASH 	SELECT  		@INSPECTION_NAME, 		@Start_Date, 		@End_Date, 		GETDATE(), 		'CASH', 		Exception_Type,  		CASE  			WHEN Exception_Type in ('OrderAggRR', 'OrderAggMM') THEN	COUNT(DISTINCT ORDER_ID) 			ELSE COUNT(DISTINCT COALESCE(TRANSACTION_NUMBER, ORDER_ID)) 		END  	FROM #exceptions 	WHERE Exception_Value >= 1 	GROUP BY Exception_Type 		    	IF OBJECT_ID('VISTA_REPORTING.dbo.CASH_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE', 'U') IS NULL  	SELECT DISTINCT * 	INTO  VISTA_REPORTING.dbo.CASH_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE 	FROM  #exceptions 	 	MERGE VISTA_REPORTING.dbo.CASH_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE AS T 	USING #exceptions AS S  	ON (T.ORDER_ID = S.ORDER_ID 		AND T.SOURCE = S.SOURCE 		AND ISNULL(T.TRANSACTION_NUMBER,'-1') = ISNULL(S.TRANSACTION_NUMBER,'-1') 		AND ISNULL(T.TOUCH_COUNT,'-1') = ISNULL(S.TOUCH_COUNT,'-1') 		AND T.DEALING_DESK = S.DEALING_DESK 		AND T.Exception_Type = S.Exception_Type 		AND ISNULL(T.ROW_ID,'-1') = ISNULL(S.ROW_ID,'-1')) 	WHEN MATCHED 		THEN  		UPDATE SET -- Do nothing 			T.ORDER_ID = T.ORDER_ID 	WHEN NOT MATCHED  		THEN  		INSERT (ORDER_ID,		SOURCE,	TRANSACTION_NUMBER,		DEALING_DESK,	TOUCH_COUNT,		[Exception_Value],	Exception_Type,		Status,		FINAL_UPDATED_TIME, ROW_ID) 		VALUES (S.ORDER_ID,	S.SOURCE,	S.TRANSACTION_NUMBER,	S.DEALING_DESK,		S.TOUCH_COUNT,  S.[Exception_Value],	S.Exception_Type,	S.Status,	S.FINAL_UPDATED_TIME, S.ROW_ID);   	--Insert into COMPLIANCE_AUDIT_TABLE IF OBJECT_ID('tempdb..#temp_pre_audit', 'U') IS NOT NULL DROP TABLE #temp_pre_audit SELECT DISTINCT 	e.TRANSACTION_NUMBER, 	--e.TRD_ORD, 	e.ORDER_ID, 	e.Exception_Type as Exception_Type2, 	CASE  		WHEN e.Exception_Type = 'BESTEXMM' THEN 'Best Execution MM' 		WHEN e.Exception_Type = 'BESTEXRR' THEN 'Best Execution RR' 		WHEN e.Exception_Type = 'COHMM' THEN 'Client Order Handling MM' 		WHEN e.Exception_Type = 'COHRR' THEN 'Client Order Handling RR' 		WHEN e.Exception_Type = 'TEXMM' THEN 'Timely Execution MM' 		WHEN e.Exception_Type = 'TEXRR' THEN 'Timely Execution RR' 		WHEN e.Exception_Type = 'TRecMM' THEN 'Timely Recording MM' 		WHEN e.Exception_Type = 'TRecRR' THEN 'Timely Recording RR' 		WHEN e.Exception_Type = 'OrderAggMM' THEN 'Order Aggregation MM' 		WHEN e.Exception_Type = 'OrderAggRR' THEN 'Order Aggregation RR' 		WHEN e.Exception_Type = 'OrderAllMM' THEN 'Order Allocation MM' 		WHEN e.Exception_Type = 'OrderAllRR' THEN 'Order Allocation RR'  	END AS EXCEPTION_TYPE, 	CASE --do we want all these to be MFID when possible? please advise 		WHEN e.Exception_Type = 'BESTEXMM' THEN e.TRANSACTION_NUMBER 		WHEN e.Exception_Type = 'BESTEXRR' THEN e.TRANSACTION_NUMBER 		WHEN e.Exception_Type = 'COHMM' THEN e.ORDER_ID 		WHEN e.Exception_Type = 'COHRR' THEN e.ORDER_ID 		WHEN e.Exception_Type = 'TEXMM' THEN e.ORDER_ID 		WHEN e.Exception_Type = 'TEXRR' THEN e.ORDER_ID 		WHEN e.Exception_Type = 'TRecMM' THEN e.TRANSACTION_NUMBER 		WHEN e.Exception_Type = 'TRecRR' THEN e.TRANSACTION_NUMBER 		WHEN e.Exception_Type = 'OrderAggMM' THEN e.ORDER_ID 		WHEN e.Exception_Type = 'OrderAggRR' THEN e.ORDER_ID 		WHEN e.Exception_Type = 'OrderAllMM' THEN e.TRANSACTION_NUMBER 		WHEN e.Exception_Type = 'OrderAllRR' THEN e.TRANSACTION_NUMBER 	END AS ID, 	NULL AS REASON, 	NULL AS COMMENT, 	cs.STATUS, 	e.CREATE_TIME, 	e.DEALING_DESK, 	CASE WHEN e.SOURCE = 'CM' THEN CT.EXECUTED_DATETIME WHEN e.SOURCE = 'AL' THEN  t.EXECUTION_TIME END AS EXECUTION_TIME, 	e.FINAL_UPDATED_TIME, 	CASE		 		WHEN e.Exception_Type = 'BESTEXMM' then convert(datetime,bemm.CONFIRMED_DATE_TIME, 103) 		WHEN e.Exception_Type = 'BESTEXRR' then convert(datetime,co.INSTRUCTION_RECEIVED_TIME,103) 		WHEN e.Exception_Type = 'COHMM' THEN convert(datetime,cohmm.INSTRUCTION_RECEIVED_DATE_TIME,103) 		WHEN e.Exception_Type = 'COHRR' THEN convert(datetime,cohrr.INSTRUCTION_RECEIVED_DATE_TIME,103) 		WHEN e.Exception_Type = 'TEXMM' THEN convert(datetime,texmm.INSTRUCTION_RECEIVED_DATE_TIME,103) 		WHEN e.Exception_Type = 'TEXRR' THEN convert(datetime,texrr.INSTRUCTION_RECEIVED_DATE_TIME,103) 		WHEN e.Exception_Type = 'TRecMM' THEN convert(datetime,trecmm.INSTRUCTION_RECEIVED_DATE_TIME,103) 		WHEN e.Exception_Type = 'TRecRR' THEN convert(datetime,trecrr.INSTRUCTION_RECEIVED_DATE_TIME,103) 		WHEN e.Exception_Type = 'OrderAggMM' THEN convert(datetime,orderaggmm.INSTRUCTION_RECEIVED_DATE_TIME,103) 		WHEN e.Exception_Type = 'OrderAggRR' THEN convert(datetime,orderaggrr.INSTRUCTION_RECEIVED_DATE_TIME,103) 		WHEN e.Exception_Type = 'OrderAllMM' THEN convert(datetime,orderallmm.INSTRUCTION_RECEIVED_DATE_TIME,103) 		WHEN e.Exception_Type = 'OrderAllRR' THEN convert(datetime,orderallrr.INSTRUCTION_RECEIVED_DATE_TIME,103) 	END AS AUTH_TIME,  	cs.STATUS_CODE, 	CASE		 		WHEN e.Exception_Type = 'BESTEXMM' then bemm.DEALER_NAME 		WHEN e.Exception_Type = 'BESTEXRR' then berr.DEALER_NAME 		WHEN e.Exception_Type = 'COHMM' THEN cohmm.DEALER_NAME 		WHEN e.Exception_Type = 'COHRR' THEN cohrr.DEALER_NAME 		WHEN e.Exception_Type = 'TEXMM' THEN texmm.DEALER_NAME 		WHEN e.Exception_Type = 'TEXRR' THEN texrr.DEALER_NAME 		WHEN e.Exception_Type = 'TRecMM' THEN trecmm.DEALER_NAME 		WHEN e.Exception_Type = 'TRecRR' THEN trecrr.DEALER_NAME 		WHEN e.Exception_Type = 'OrderAggMM' THEN orderaggmm.DEALER_NAME 		WHEN e.Exception_Type = 'OrderAggRR' THEN orderaggrr.DEALER_NAME 		WHEN e.Exception_Type = 'OrderAllMM' THEN orderallmm.DEALER_NAME 		WHEN e.Exception_Type = 'OrderAllRR' THEN orderallrr.DEALER_NAME 	END AS TRD_TRADER, 	e.SOURCE INTO #temp_pre_audit FROM #exceptions e LEFT JOIN VISTA_REPORTING.dbo.COMPLIANCE_EXCEPTIONS_STATUS_TABLE cs ON cs.STATUS_CODE=e.Status LEFT JOIN VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE bemm ON bemm.TRANSACTION_NUMBER = e.TRANSACTION_NUMBER AND e.SOURCE = bemm.DATA_SOURCE LEFT JOIN VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_rr_TABLE berr ON berr.TRANSACTION_NUMBER = e.TRANSACTION_NUMBER AND e.SOURCE = berr.DATA_SOURCE LEFT JOIN VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE cohmm on cohmm.ORDER_ID = e.ORDER_ID and e.SOURCE = cohmm.DATA_SOURCE LEFT JOIN VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_rr_TABLE cohrr on cohrr.ORDER_ID = e.ORDER_ID and e.SOURCE = cohrr.DATA_SOURCE LEFT JOIN VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE texmm on texmm.ORDER_ID = e.ORDER_ID and e.SOURCE = texmm.DATA_SOURCE LEFT JOIN VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_RR_TABLE texrr on texrr.ORDER_ID = e.ORDER_ID and e.SOURCE = texrr.DATA_SOURCE LEFT JOIN VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE trecmm ON trecmm.TRANSACTION_NUMBER = e.TRANSACTION_NUMBER AND trecmm.DATA_SOURCE = e.SOURCE LEFT JOIN VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_RR_TABLE trecrr ON trecrr.TRANSACTION_NUMBER = e.TRANSACTION_NUMBER AND trecrr.DATA_SOURCE = e.SOURCE LEFT JOIN VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_MM_TABLE orderaggmm ON orderaggmm.ORDER_ID = e.ORDER_ID AND e.SOURCE = orderaggmm.DATA_SOURCE LEFT JOIN VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_RR_TABLE orderaggrr ON orderaggmm.ORDER_ID = e.ORDER_ID AND e.SOURCE = orderaggmm.DATA_SOURCE LEFT JOIN VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_MM_TABLE orderallmm ON orderallmm.TRANSACTION_NUMBER = e.TRANSACTION_NUMBER AND e.SOURCE = orderaggmm.DATA_SOURCE LEFT JOIN VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_RR_TABLE orderallrr ON orderallrr.TRANSACTION_NUMBER = e.TRANSACTION_NUMBER AND e.SOURCE = orderaggmm.DATA_SOURCE LEFT JOIN (SELECT DISTINCT TRANSACTION_NUMBER, EXECUTED_DATETIME, ORDER_ID FROM VISTA_REPORTING.DBO.CASH_TRADES) CT ON CT.TRANSACTION_NUMBER = e.TRANSACTION_NUMBER AND e.SOURCE = 'CM' LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, EXECUTION_TIME, FinalFlag FROM VISTA_REPORTING.dbo.TRADES) t ON t.MULTI_FUND_ID = e.TRANSACTION_NUMBER and t.FinalFlag = 1 AND e.SOURCE = 'AL' LEFT JOIN (select distinct ord_num, auth_time from VISTA_REPORTING.dbo.pm_ORDERS) pm ON pm.ORD_NUM = e.ORDER_ID and e.SOURCE = 'AL' LEFT JOIN (SELECT DISTINCT ORDER_ID, INSTRUCTION_RECEIVED_TIME FROM VISTA_REPORTING.DBO.CASH_ORDERS) CO ON (CO.ORDER_ID = e.ORDER_ID or ct.ORDER_ID = co.ORDER_ID)  AND e.SOURCE = 'CM'  -- -- IF OBJECT_ID('tempdb..#temp_audit_table', 'U') IS NOT NULL DROP TABLE #temp_audit_table SELECT  	TRANSACTION_NUMBER, 	ORDER_ID, 	EXCEPTION_TYPE, 	ID, 	REASON, 	COMMENT, 	STATUS, 	SOURCE, 	CREATE_TIME, 	DEALING_DESK, 	FINAL_UPDATED_TIME, 	STATUS_CODE,  	MIN(EXECUTION_TIME) AS EXECUTION_TIME, --In cases where the execution time changes, take the first 	MIN(AUTH_TIME) AS AUTH_TIME, --In cases where the auth time changes, take the first 	MIN(TRD_TRADER) AS TRD_TRADER --In cases where there are multiple traders, take the first -- WHY DOES THIS HAVE TO BE MIN? INTO #temp_audit_table FROM #temp_pre_audit GROUP BY 	TRANSACTION_NUMBER, 	ORDER_ID, 	EXCEPTION_TYPE, 	ID, 	REASON, 	COMMENT, 	STATUS, 	SOURCE, 	CREATE_TIME, 	DEALING_DESK, 	FINAL_UPDATED_TIME, 	STATUS_CODE  IF OBJECT_ID('VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_CASH', 'U') IS NULL  SELECT DISTINCT * INTO VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_CASH FROM #temp_audit_table  MERGE VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_CASH AS T USING #temp_audit_table AS S ON (ISNULL(T.TRANSACTION_NUMBER, '-1') = ISNULL(S.TRANSACTION_NUMBER, '-1') 	 AND ISNULL(T.ORDER_ID, '-1') = ISNULL(S.ORDER_ID, '-1') 	 AND T.SOURCE = S.SOURCE 	 AND T.DEALING_DESK = S.DEALING_DESK 	 AND T.Exception_Type = S.Exception_Type 	 AND ISNULL(T.ID,'-1')=ISNULL(S.ID,'-1')) WHEN MATCHED 	THEN  	UPDATE SET -- Do nothing 		T.TRANSACTION_NUMBER = T.TRANSACTION_NUMBER WHEN NOT MATCHED  	THEN  	INSERT (TRANSACTION_NUMBER, ORDER_ID, EXCEPTION_TYPE, ID, REASON, COMMENT, STATUS, SOURCE, CREATE_TIME, DEALING_DESK, FINAL_UPDATED_TIME, AUTH_TIME, STATUS_CODE, TRD_TRADER) 	VALUES (S.TRANSACTION_NUMBER, S.ORDER_ID, S.EXCEPTION_TYPE, S.ID, S.REASON, S.COMMENT, S.STATUS, S.SOURCE, S.CREATE_TIME, S.DEALING_DESK, S.FINAL_UPDATED_TIME, S.AUTH_TIME, S.STATUS_CODE, S.TRD_TRADER);   END   --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: COMPLIANCE_SAMPLING_DMG CreateDate: 2019-10-18 08:39:49.320 ModifyDate: 2021-05-06 12:27:33.830 --- DEFINITION START ---  -- ============================================= -- Author:		<LIZZIE REYNOLDS> -- Create date: <2019-04-30> -- Description:	<Procedure to implement compliance sampling> -- =============================================  -- ***************VERSION CONTROL*************** -- 2018-05-23 WH - Procedure created. Currently it only takes a random sample set. -- 2018-06-07 WH - Sampling logic updated to use risk weighted sampling -- 2018-08-08 KR - Added Fair Allocation Exception -- 2018-09-24 DDC - Added extra code to populate the COMPLIANCE_AUDIT_TABLE evert time the script is run. -- 2019-04-30 ER - updated for DMG desk to remove reference to counterparty direction, G&H and have changed the level of the script to be based on MFID instead of PM order (multiple major changes) --					initial testing this seems to work but there could be unseen issues to be aware of . -- *********************************************  CREATE PROCEDURE [dbo].[COMPLIANCE_SAMPLING_DMG] --'2018-01-01 00:00:00.000','2018-12-12 00:00:00.000','WH test3' --exec VISTA_REPORTING.dbo.COMPLIANCE_SAMPLING_dmg '2019-03-01 00:00:00.000', '2019-04-30 00:00:00.000', 'ER_TEST2' 	@Start_Date datetime, 	@End_Date datetime, 	@INSPECTION_NAME VARCHAR(MAX)  AS BEGIN  	--DECLARE @Start_Date datetime, 	--@End_Date datetime, 	--@INSPECTION_NAME VARCHAR(MAX);  	--set @Start_Date = '2018-05-01 00:00:00.000' 	--set @End_Date = '2020-07-16 00:00:00.000' 	--set @INSPECTION_NAME = 'DDC_dmg_16072020_2'  	--0. Test query to check parameters passed from OS are correct 	INSERT INTO VISTA_REPORTING.dbo.compliance_sampling_dates 	SELECT @Start_Date AS start_time, @End_Date AS end_time, @INSPECTION_NAME AS Inspection_Name,  	getdate() as [Sampled time] , 'DMG' as DEALING_DESK   	--1. Get all trades in the sample period  	IF OBJECT_ID('tempdb..#TRADES_pop', 'U') IS NOT NULL DROP TABLE #TRADES_pop 	SELECT DISTINCT 		T.MULTI_FUND_ID, 		T.TRD_TRADE_DATE, -- Use the TRD_TRADE_DATE 		T.CUSIP, 		PRIM.DEALING_DESK 	INTO #TRADES_pop 	FROM (SELECT DISTINCT MULTI_FUND_ID, TRD_TRADE_DATE, FUND, CUSIP, FinalFlag FROM VISTA_REPORTING.dbo.TRADES) T 	LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, DEALING_DESK FROM VISTA_REPORTING.DBO.PRIMARY_INST_TYPE_TABLE ) PRIM 	ON PRIM.MULTI_FUND_ID = T.MULTI_FUND_ID 	WHERE CONVERT(DATE, TRD_TRADE_DATE) BETWEEN CONVERT(DATE,@Start_Date) AND CONVERT(DATE,@End_Date) AND PRIM.DEALING_DESK = 'DMG'  	 	--2. Get the latest touch for each MFID so that we only look at the latest version of the MFID. 	IF OBJECT_ID('tempdb..#max_touch', 'U') IS NOT NULL DROP TABLE #max_touch  	SELECT  		MULTI_FUND_ID, 		MAX(TOUCH_COUNT) AS MAX_TOUCH 	INTO #max_touch 	FROM VISTA_REPORTING.dbo.TRADES 	GROUP BY MULTI_FUND_ID   	IF OBJECT_ID('VISTA_REPORTING.dbo.SAMPLED_TRADES_COMPLIANCE', 'U') IS NULL 	BEGIN 		CREATE TABLE VISTA_REPORTING.dbo.SAMPLED_TRADES_COMPLIANCE ( 			MULTI_FUND_ID CHAR(12), 			SAMPLED_DATE DATETIME, 			INSPECTION_NAME VARCHAR(MAX), 			DEALING_DESK VARCHAR(20) 			) 	END 	  	--3. Join to FODB table to get price data. For each order we look at all bid/ask spreads on the trades for that order and take the maximum. 	IF OBJECT_ID('tempdb..#temp_distinct_TRADES', 'U') IS NOT NULL DROP TABLE #temp_distinct_TRADES 	SELECT   		T.MULTI_FUND_ID, 		TP.DEALING_DESK, 		T.CUSIP,  		--po.COMMENTS_VALUE, NEED TO UPDATE COMMENTS VALUE TO COME FROM TRADES FILE  		T.COUNTERPARTY_CODE, 		dbg.UNIVERSAL_BID_PRICE, 		dbg.UNIVERSAL_ASK_PRICE, 		TP.TRD_TRADE_DATE, 		CASE  			WHEN dbg.UNIVERSAL_ASK_PRICE = dbg.UNIVERSAL_BID_PRICE THEN 0 			WHEN dbg.UNIVERSAL_BID_PRICE <> 0 THEN MAX(ABS((dbg.UNIVERSAL_ASK_PRICE-dbg.UNIVERSAL_BID_PRICE)/NULLIF(dbg.UNIVERSAL_BID_PRICE,0))) --Need to account for 0 bid price (will cause divide by zero errors). 			ELSE NULL  		END AS BID_ASK_SPREAD  	INTO #temp_distinct_TRADES 	FROM VISTA_REPORTING.dbo.TRADES T  	INNER JOIN #TRADES_pop TP ON TP.MULTI_FUND_ID = T.MULTI_FUND_ID -- Only want to pull through orders in our sample period TO GET DMG DESK 	INNER JOIN #max_touch mt ON mt.MULTI_FUND_ID = T.MULTI_FUND_ID AND  mt.MAX_TOUCH=T.TOUCH_COUNT 	LEFT JOIN VISTA_REPORTING.dbo.REUTERS_PRICE_BENCHMARK_TABLE dbg ON dbg.MULTI_FUND_ID = T.MULTI_FUND_ID AND CONVERT(DATE, TP.TRD_TRADE_DATE) = CONVERT(DATE, dbg.TRD_TRADE_DATE) -- Confirmation from business required that we should be using the TRD_TRADE_DATE field 	WHERE NOT EXISTS (SELECT MULTI_FUND_ID FROM VISTA_REPORTING.dbo.SAMPLED_TRADES_COMPLIANCE STC WHERE STC.MULTI_FUND_ID = T.MULTI_FUND_ID) 	GROUP BY  		T.MULTI_FUND_ID, 		TP.DEALING_DESK, 		T.CUSIP,  		--po.COMMENTS_VALUE,  		T.COUNTERPARTY_CODE, 		dbg.UNIVERSAL_BID_PRICE, 		dbg.UNIVERSAL_ASK_PRICE, 		TP.TRD_TRADE_DATE   	--4. TAKE NET CONSIDERATION FOR EACH TRADE 	IF OBJECT_ID('tempdb..#temp_trades_table', 'U') IS NOT NULL DROP TABLE #temp_trades_table 	SELECT DISTINCT  	T.MULTI_FUND_ID, 	T.NET_CONSIDERATION_GBP AS SUM_NET_CONSIDERATION 	INTO #TEMP_TRADES_TABLE 	FROM VISTA_REPORTING.DBO.TRADES T 	INNER JOIN #max_touch MT ON T.MULTI_FUND_ID = MT.MULTI_FUND_ID AND T.TOUCH_COUNT = MT.MAX_TOUCH  	/*****************************/ 				--ADD A SCORE FOR ALL INST TYPES 	/*****************************/      	--5. Do the ranking.    	IF OBJECT_ID('tempdb..#temp_NC_rank', 'U') IS NOT NULL DROP TABLE #temp_NC_rank 	SELECT DISTINCT  		T.MULTI_FUND_ID, 		T.DEALING_DESK, 		--ISNULL(po.COMMENTS_VALUE, '') AS COMMENTS_VALUE, NEED TO WORK OUT WHAT COMMENTS TO INCLUDE HERE 		T.COUNTERPARTY_CODE, 		pr.INST_TYPE, 		CASE 			WHEN pr.INST_TYPE in ('CDX', 'GOV') THEN 1 			WHEN pr.INST_TYPE in ('SCDS', 'ICDS', 'OIS', 'IRS', 'EQOPT', 'FXOPT') THEN 2 			WHEN pr.INST_TYPE IN ( 'IFS', 'TRS' ) THEN 3 			ELSE 3 		END AS ASSET_TYPE_SCORE, 		ttt.SUM_NET_CONSIDERATION, 		T.BID_ASK_SPREAD, 		DENSE_RANK() OVER (ORDER BY T.BID_ASK_SPREAD) AS BSA_RANK, -- ShouWe ld we be ordering by the BID_ASK_SPREAD descending?  		DENSE_RANK() OVER (ORDER BY ttt.SUM_NET_CONSIDERATION) AS NC_RANK -- Should we be ordering by the SUM_NET_CONDSIDERATION descending?  	INTO #temp_NC_rank 	FROM #temp_distinct_trades T 	LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID = T.MULTI_FUND_ID 	LEFT JOIN #temp_trades_table ttt ON ttt.MULTI_FUND_ID = T.MULTI_FUND_ID   	DECLARE @MAX_BSA_RANK INT; 	DECLARE @MAX_NC_RANK INT; 	SET @MAX_BSA_RANK = (SELECT MAX(BSA_RANK) FROM #temp_NC_rank); 	SET @MAX_NC_RANK = (SELECT MAX(NC_RANK) FROM #temp_NC_rank);  	--6. Do the risk scoring 	IF OBJECT_ID('tempdb..#temp_BECOH_table', 'U') IS NOT NULL DROP TABLE #temp_BECOH_table 	SELECT DISTINCT 		tnr.*, 		(1.0*tnr.BSA_RANK/@MAX_BSA_RANK) AS PERCENTAGE_BSA_RANK,   		(1.0*tnr.NC_RANK/@MAX_NC_RANK) AS PERCENTAGE_NC_RANK,  										                   		CASE  			WHEN (1.0*tnr.NC_RANK/@MAX_NC_RANK) > 0.66 THEN 2  														   			ELSE 1 		END AS TRADE_VALUE_SCORE 	INTO #temp_BECOH_table 	FROM #temp_NC_rank tnr  	 	--7. Bucket the orders into Elevated and Normal 	IF OBJECT_ID('tempdb..#pre_sample_table', 'U') IS NOT NULL DROP TABLE #pre_sample_table 	SELECT DISTINCT 		bdt.MULTI_FUND_ID, 		bdt.DEALING_DESK, 		--MAX(CP_DIRECTION_FLAG) AS CP_DIRECTION_FLAG, 		MAX(bdt.ASSET_TYPE_SCORE  + bdt.TRADE_VALUE_SCORE ) AS AGGREGATE_SCORE, --In case there are multiple records for a mfid, take the maximum score that we see 		CASE 			WHEN MAX(bdt.ASSET_TYPE_SCORE + bdt.TRADE_VALUE_SCORE) >= 4 THEN 'ELEVATED' --In case there are multiple records for a mfid, take the maximum score that we see 			ELSE 'NORMAL' 		END AS RISK_TIER 	INTO #pre_sample_table 	FROM #temp_BECOH_table bdt 	GROUP BY bdt.MULTI_FUND_ID, bdt.DEALING_DESK   	--8. Find required number of samples -50% of all orders. 	DECLARE @Total_Num_trades FLOAT; 	SET @Total_Num_trades = 50.0/100*(SELECT COUNT(DISTINCT MULTI_FUND_ID) FROM #pre_sample_table); 	  	--9. Get samples (80% of the 50% are from the elevated bucket. The rest come from the normal bucket). 	IF OBJECT_ID('tempdb..#Samples_elevated', 'U') IS NOT NULL DROP TABLE #Samples_elevated 	SELECT TOP (CONVERT(INT,(CEILING(@Total_Num_trades * 0.8)))) * 	INTO #Samples_elevated 	FROM #pre_sample_table 	WHERE RISK_TIER='ELEVATED'  	ORDER BY NEWID() -- new ID will randomly rank and taking top n will keep this randomness 	 	IF OBJECT_ID('tempdb..#Samples_normal', 'U') IS NOT NULL DROP TABLE #Samples_normal 	SELECT TOP (CONVERT(INT,(CEILING(@Total_Num_trades * 0.2)))) * 	INTO #Samples_normal 	FROM #pre_sample_table 	WHERE RISK_TIER='Normal'  	ORDER BY NEWID() -- new ID will randomly rank and taking top n will keep this randomness 	 	IF OBJECT_ID('tempdb..#Samples', 'U') IS NOT NULL DROP TABLE #Samples 	SELECT *  	INTO #Samples 	FROM #Samples_elevated 	UNION 	SELECT * FROM #Samples_normal    	/*****************************/ 		--PLACEHOLDER TO USE TO HELP TOP UP for < X samples, CURRENTLY NOT REQUIRED BUT ADD IN PART A IF REQUIRED. 	/*****************************/  	--combine elevated and normal samples into one table 	IF OBJECT_ID('tempdb..#Samples_total', 'U') IS NOT NULL DROP TABLE #Samples_total 	SELECT MULTI_FUND_ID, DEALING_DESK, AGGREGATE_SCORE, RISK_TIER--, CP_DIRECTION_FLAG 	INTO #Samples_total 	FROM #Samples  	--if less than 100 samples, figure out how many more need to be sampled 	declare @total_trades int 	set @total_trades = (select COUNT(distinct MULTI_FUND_ID) from #Samples_total); 	  	-- A. USE THIS TO TOP UP TO X SAMPLES 	declare @total_top_up_amount int -- have set this to include NO TOP UP TRADES, easily by changing @total_trades < x  @total_top_up_amount = x -@total_tradeschanged if they decide to do a top up. 	if @total_trades < @total_trades  set @total_top_up_amount = @total_trades -@total_trades 	else set @total_top_up_amount = 0 	declare @elevated_top_up_amount int 	declare @normal_top_up_amount int 	set @elevated_top_up_amount = CEILING(0.8*@total_top_up_amount)  	set @normal_top_up_amount = floor(0.2*@total_top_up_amount)  	--grab the required number of samples from elevated bucket 	IF OBJECT_ID('tempdb..#topped_up_samples_elevated', 'U') IS NOT NULL DROP TABLE #topped_up_samples_elevated 	select top(@elevated_top_up_amount) el.*  	into #topped_up_samples_elevated 	from #pre_sample_table el 	left join #Samples s 	on el.MULTI_FUND_ID = s.MULTI_FUND_ID 	where s.MULTI_FUND_ID IS NULL AND el.RISK_TIER = 'ELEVATED' 	order by NEWID()   	--grab the required number of samples from normal bucket 	IF OBJECT_ID('tempdb..#topped_up_samples_normal', 'U') IS NOT NULL DROP TABLE #topped_up_samples_normal 	select top(@normal_top_up_amount) n.* 	into #topped_up_samples_normal 	from #pre_sample_table n 	left join #Samples s 	on n.MULTI_FUND_ID = s.MULTI_FUND_ID 	where s.MULTI_FUND_ID IS NULL AND n.RISK_TIER = 'NORMAL' 	order by NEWID()   	--add new topped up samples to sample table 	insert into #Samples_total 	select MULTI_FUND_ID, DEALING_DESK, AGGREGATE_SCORE, RISK_TIER from #topped_up_samples_elevated 	insert into #Samples_total 	select MULTI_FUND_ID, DEALING_DESK, AGGREGATE_SCORE, RISK_TIER from #topped_up_samples_normal  	 	--add sampled order numbers to list of smapled orders 	IF OBJECT_ID('VISTA_REPORTING.dbo.SAMPLED_TRADES_COMPLIANCE') IS NULL 	SELECT DISTINCT  		MULTI_FUND_ID,  		GETDATE() AS SAMPLED_DATE,  		@INSPECTION_NAME AS [INSPECTION NAME] , 		'DMG' AS DEALING_DESK 	INTO VISTA_REPORTING.dbo.SAMPLED_TRADES_COMPLIANCE 	FROM #Samples_total 	ELSE  	INSERT INTO VISTA_REPORTING.dbo.SAMPLED_TRADES_COMPLIANCE 	SELECT DISTINCT  		MULTI_FUND_ID,  		GETDATE() AS SAMPLED_DATE, 		@INSPECTION_NAME AS [INSPECTION NAME], 		'DMG' AS DEALING_DESK 	FROM #Samples_total   	/*****************************/ 		--Combine all samples 	/*****************************/ 	--10. Get all trades associated with the orders to sample 	IF OBJECT_ID('tempdb..#sample_trades_orders', 'U') IS NOT NULL DROP TABLE #sample_trades_orders 	SELECT DISTINCT  		t.MULTI_FUND_ID, 		oc.PM_ORD, 		oc.TRD_ORD, 		s.DEALING_DESK, 		1 AS For_Sample 		--CP_DIRECTION_FLAG 	INTO #sample_trades_orders 	FROM VISTA_REPORTING.dbo.TRADES t 	LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON t.ORD_NUM = oc.TRD_ORD 	INNER JOIN #Samples_total s	ON t.MULTI_FUND_ID = s.MULTI_FUND_ID   	--11. Create status table 	IF OBJECT_ID('tempdb..#trade_status', 'U') IS NOT NULL DROP TABLE #trade_status 	SELECT distinct 		trades.MULTI_FUND_ID, 		sample.PM_ORD, 		trades.DEALING_DESK, 		--ISNULL(sample.CP_DIRECTION_FLAG, 0) AS CP_DIRECTION_FLAG, 		CASE  			WHEN sample.For_Sample = 1 THEN '2C1' --Order level - Compliance Review Pending 		ELSE '2C2' 						   --Order level - Not sampled 		END AS Status, 		NULL AS FINAL_UPDATED_TIME 	INTO #trade_status 	FROM (SELECT DISTINCT MULTI_FUND_ID, DEALING_DESK FROM #trades_pop) trades 	LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, PM_ORD, For_Sample FROM #sample_trades_orders) sample ON trades.MULTI_FUND_ID = sample.MULTI_FUND_ID  	--11a. Put the orders into the status table 	IF OBJECT_ID('VISTA_REPORTING.dbo.COMPLIANCE_TRADES_FINAL_STATUS_UPDATE_TABLE_DMG', 'U') IS NULL 	 	SELECT  		MULTI_FUND_ID, 		PM_ORD AS ORD_NUM, 		DEALING_DESK, 		STATUS, 		FINAL_UPDATED_TIME  	INTO VISTA_REPORTING.dbo.COMPLIANCE_TRADES_FINAL_STATUS_UPDATE_TABLE_DMG 	FROM #trade_status   	MERGE VISTA_REPORTING.dbo.COMPLIANCE_TRADES_FINAL_STATUS_UPDATE_TABLE_DMG AS T 	USING #trade_status AS S 	ON (T.MULTI_FUND_ID = S.MULTI_FUND_ID ) 	WHEN MATCHED 		THEN  		UPDATE SET 			T.MULTI_FUND_ID=T.MULTI_FUND_ID, 			T.ORD_NUM = S.PM_ORD, 			T.Status = (CASE  				WHEN T.Status = '2C2' THEN S.Status -- Not sampled previously - update to the current status 				WHEN T.Status IN ('2C1','2C3','2C4') THEN T.Status -- Has been sampled previously so we don't update the status 			END) 	WHEN NOT MATCHED  		THEN  		INSERT ( MULTI_FUND_ID, ORD_NUM, DEALING_DESK, STATUS, FINAL_UPDATED_TIME) 		VALUES (S.MULTI_FUND_ID, S.PM_ORD, S.DEALING_DESK, S.STATUS, S.FINAL_UPDATED_TIME); 	 	 	--12. Put the trade exception level detail into the status table - is to be done for all exception types. 	IF OBJECT_ID('tempdb..#exceptions', 'U') IS NOT NULL DROP TABLE #exceptions	 	--PD 	SELECT DISTINCT  		TS.PM_ORD,  		oc.TRD_ORD, 		TS.MULTI_FUND_ID, 		vg.DEALING_DESK, 		vg.[3QO_EXCEPTION] AS [Exception_Value], 		vg.CREATETIME AS CREATE_TIME, 		CONVERT(VARCHAR(10),'PD') AS Exception_Type, 		CASE WHEN vg.[3QO_EXCEPTION] = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	INTO #exceptions 	FROM #trade_status TS 	LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON TS.PM_ORD = oc.pm_ord 	LEFT JOIN VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_DMG_TABLE vg ON TS.MULTI_FUND_ID = vg.MULTI_FUND_ID 	WHERE TS.Status = '2C1'	AND vg.MULTI_FUND_ID IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly). 	UNION 	--NWQ 	SELECT DISTINCT  		TS.PM_ORD,  		oc.TRD_ORD, 		TS.MULTI_FUND_ID, 		vg.DEALING_DESK, 		vg.VG_07 AS [Exception_Value], 		vg.VG_07_CREATETIME AS CREATE_TIME, 		CONVERT(VARCHAR(10),'NWQ') AS Exception_Type, 		CASE WHEN vg.VG_07 = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #trade_status TS 	LEFT JOIN vista_reporting.dbo.orders_cross oc ON tS.PM_ORD = oc.pm_ord 	LEFT JOIN VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_DMG_TABLE vg ON TS.MULTI_FUND_ID = vg.MULTI_FUND_ID 	WHERE tS.Status = '2C1'	AND vg.MULTI_FUND_ID IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly). 	UNION 	--Timely Ex 	SELECT DISTINCT 		TS.PM_ORD,  		oc.TRD_ORD AS TRD_ORD, 		TS.MULTI_FUND_ID AS Multi_Fund_ID, 		vg.DEALING_DESK, 		max(vg.VG_09) AS [Exception_Value], 		min(vg.CREATETIME) AS CREATE_TIME, 		CONVERT(VARCHAR(10),'TEx') AS Exception_Type, 		CASE WHEN max(vg.VG_09) = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #trade_status TS 	LEFT JOIN VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_DMG_TABLE vg	ON TS.PM_ORD = vg.ORD_NUM 	LEFT JOIN vista_reporting.dbo.orders_cross oc ON vg.ORD_NUM = oc.pm_ord 	WHERE ts.Status = '2C1' 	GROUP BY ts.PM_ORD, vg.Dealing_Desk, ts.MULTI_FUND_ID, oc.TRD_ORD 	UNION 	--TRec 	SELECT DISTINCT  		ts.PM_ORD,  		oc.TRD_ORD, 		ts.MULTI_FUND_ID, 		vg.DEALING_DESK, 		vg.VG_10  AS [Exception_Value], 		vg.TREC_CREATETIME AS CREATE_TIME, 		CONVERT(VARCHAR(10),'TRec') AS Exception_Type, 		CASE WHEN vg.VG_10 = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #trade_status ts 	LEFT JOIN vista_reporting.dbo.orders_cross oc ON ts.PM_ORD = oc.pm_ord 	LEFT JOIN VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_DMG_TABLE vg ON ts.MULTI_FUND_ID = vg.MULTI_FUND_ID 	WHERE ts.Status = '2C1'	AND vg.MULTI_FUND_ID IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly). 	--UNION 	--Order Aggregation 	--SELECT DISTINCT  	--	ts.PM_ORD,  	--	oc.TRD_ORD, 	--	ts.MULTI_FUND_ID, 	--	vg.DEALING_DESK, 	--	vg.MERGE_EXCEPTION  AS [Exception_Value], 	--	vg.CREATETIME AS CREATE_TIME, 	--	CONVERT(VARCHAR(10),'OA') AS Exception_Type,      	--	CASE WHEN vg.MERGE_EXCEPTION = 0 THEN '2C1' ELSE '2C2' END AS Status, 	--	NULL AS FINAL_UPDATED_TIME, 	--	NULL AS TOUCH_COUNT, 	--	NULL AS ROW_ID 	--FROM #trade_status ts 	--left join vista_reporting.dbo.orders_cross oc 	--on ts.PM_ORD = oc.pm_ord 	--left join VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_DMG_TABLE vg 	--on concat(ts.PM_ORD,'_',ts.MULTI_FUND_ID) = vg.OA_ID 	--WHERE ts.Status = '2C1' 	--AND vg.OA_ID IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly). 	UNION 	--Order Priority 	SELECT DISTINCT 		ts.PM_ORD,  		t.ORD_NUM, 		ts.MULTI_FUND_ID, 		vg.DEALING_DESK, 		vg.ORDER_PRIORITY_EXCEPTION  AS [Exception_Value], 		vg.CREATETIME AS CREATE_TIME, 		CONVERT(VARCHAR(10),'OP') AS Exception_Type, 		CASE WHEN vg.ORDER_PRIORITY_EXCEPTION = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #trade_status ts 	left join VISTA_REPORTING.dbo.TRADES t on t.MULTI_FUND_ID = ts.MULTI_FUND_ID 	left join VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_DMG_TABLE vg on t.ORD_NUM= vg.ORD_NUM 	WHERE ts.Status = '2C1'  	--Amendments  	UNION 	SELECT DISTINCT  	ts.PM_ORD,  	oc.TRD_ORD, 	ts.MULTI_FUND_ID, 	ts.DEALING_DESK, 	AF.AMENDMENT_FLAG AS [Exception_Value], 	AF.AMENDMENT_FLAG_CREATETIME AS CREATE_TIME,  	CONVERT(VARCHAR(10),'AF') AS Exception_Type, 	CASE WHEN AF.AMENDMENT_FLAG  = 1 THEN '2C2' ELSE '2C1' END AS Status, 	NULL AS FINAL_UPDATED_TIME, 	T.TOUCH_COUNT, 	NULL AS ROW_ID 	FROM #trade_status ts  	LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON ts.PM_ORD = oc.pm_ord 	LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.MULTI_FUND_ID = ts.MULTI_FUND_ID  	LEFT JOIN VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_DMG_TABLE AF ON ts.MULTI_FUND_ID = AF.MULTI_FUND_ID AND T.TOUCH_COUNT = AF.TOUCH_COUNT 	WHERE ts.Status = '2C1'AND AF.TOUCH_COUNT IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly). 	-- Trades without orders 	--UNION 	--SELECT DISTINCT  	--ts.PM_ORD,  	--oc.TRD_ORD, 	--ts.MULTI_FUND_ID, 	--ts.DEALING_DESK, 	--two.VG_41 AS [Exception_Value], 	--two.VG_41_CREATETIME AS CREATE_TIME,  	--CONVERT(VARCHAR(10),'TwO') AS Exception_Type, 	--CASE WHEN two.VG_41  = 1 THEN '2C2' ELSE '2C1' END AS Status, 	--NULL AS FINAL_UPDATED_TIME, 	--T.TOUCH_COUNT, 	--NULL AS ROW_ID 	--FROM #trade_status ts  	--LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON ts.PM_ORD = oc.pm_ord 	--LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.MULTI_FUND_ID = ts.MULTI_FUND_ID  	--LEFT JOIN VISTA_STAGING.dbo.VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE two ON ts.MULTI_FUND_ID = two.MULTI_FUND_ID 	--WHERE ts.Status = '2C1'AND two.MULTI_FUND_ID IS NOT NULL 	  	IF OBJECT_ID('VISTA_REPORTING.dbo.INSPECTION_EXCEPTION_COUNT_DMG', 'U') IS NULL  	SELECT  		@INSPECTION_NAME AS INSPECTION_NAME, 		@Start_Date AS INSPECTION_START_DATE, 		@End_Date AS INSPECTION_END_DATE, 		GETDATE() AS INSPECTION_SAMPLE_DATE, 		'DMG' AS DEALING_DESK, 		(SELECT COUNT(DISTINCT MULTI_FUND_ID) FROM #exceptions) AS [Number_Trades_Sampled], 		Exception_Type,  		CASE 			WHEN Exception_Type in ('TEx') THEN COUNT(DISTINCT PM_ORD)  			WHEN Exception_Type in ('OP') THEN COUNT(DISTINCT TRD_ORD)  			WHEN Exception_Type in ('AF', 'NWQ', 'PD', 'TRec') THEN COUNT(DISTINCT MULTI_FUND_ID) 			ELSE COUNT(DISTINCT COALESCE(MULTI_FUND_ID, TRD_ORD, PM_ORD))   		END AS EXCEPTION_COUNT 	INTO VISTA_REPORTING.dbo.INSPECTION_EXCEPTION_COUNT_DMG 	FROM #exceptions 	WHERE Exception_Value >= 1 	GROUP BY Exception_Type 	 	ELSE  	INSERT INTO VISTA_REPORTING.dbo.INSPECTION_EXCEPTION_COUNT_DMG 	SELECT  		@INSPECTION_NAME, 		@Start_Date, 		@End_Date, 		GETDATE(), 		'DMG', 		(SELECT COUNT(DISTINCT MULTI_FUND_ID) FROM #exceptions) AS [Number_Trades_Sampled], 		Exception_Type,  		CASE 			WHEN Exception_Type in ('TEx') THEN COUNT(DISTINCT PM_ORD)  			WHEN Exception_Type in ('OP') THEN COUNT(DISTINCT TRD_ORD)  			WHEN Exception_Type in ('AF', 'NWQ', 'PD', 'TRec') THEN COUNT(DISTINCT MULTI_FUND_ID) 			ELSE COUNT(DISTINCT COALESCE(MULTI_FUND_ID, TRD_ORD, PM_ORD))  		END AS EXCEPTION_COUNT 	FROM #exceptions 	WHERE Exception_Value >= 1 	GROUP BY Exception_Type    	IF OBJECT_ID('VISTA_REPORTING.dbo.DMG_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE', 'U') IS NULL  	SELECT DISTINCT * 	INTO  VISTA_REPORTING.dbo.DMG_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE 	FROM  #exceptions   	MERGE VISTA_REPORTING.dbo.DMG_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE AS T 	USING #exceptions AS S 	ON (T.PM_ORD = S.PM_ORD 		AND ISNULL(T.TRD_ORD,'-1') = ISNULL(S.TRD_ORD,'-1') 		AND ISNULL(T.MULTI_FUND_ID,'-1') = ISNULL(S.MULTI_FUND_ID,'-1') 		AND ISNULL(T.TOUCH_COUNT,'-1') = ISNULL(S.TOUCH_COUNT,'-1') 		AND T.DEALING_DESK = S.DEALING_DESK 		AND T.Exception_Type = S.Exception_Type 		AND ISNULL(T.ROW_ID,'-1') = ISNULL(S.ROW_ID,'-1')) 	WHEN MATCHED 		THEN  		UPDATE SET -- Do nothing 			T.MULTI_FUND_ID = T.MULTI_FUND_ID 	WHEN NOT MATCHED  		THEN  		INSERT (PM_ORD,		TRD_ORD,	MULTI_FUND_ID,		DEALING_DESK,		TOUCH_COUNT,	[Exception_Value],		Exception_Type,		Status,		FINAL_UPDATED_TIME, ROW_ID) 		VALUES (S.PM_ORD,	S.TRD_ORD,	S.MULTI_FUND_ID,	S.DEALING_DESK,		S.TOUCH_COUNT,  S.[Exception_Value],	S.Exception_Type,	S.Status,	S.FINAL_UPDATED_TIME, S.ROW_ID);   	--Insert into COMPLIANCE_AUDIT_TABLE 	IF OBJECT_ID('tempdb..#temp_pre_audit', 'U') IS NOT NULL DROP TABLE #temp_pre_audit 	SELECT DISTINCT 		e.MULTI_FUND_ID, 		e.TRD_ORD, 		e.PM_ORD, 		e.Exception_Type as Exception_Type2, 		CASE  			WHEN e.Exception_Type = 'PD' THEN 'Quote Exception' 			--WHEN e.Exception_Type = 'OA' THEN 'Order Aggregation Exception' 			WHEN e.Exception_Type = 'AF' THEN 'Amendment Analysis' 			WHEN e.Exception_Type = 'TEx' THEN 'Timely Execution Exception' 			WHEN e.Exception_Type = 'NWQ' THEN 'NWQ Exception' 			WHEN e.Exception_Type = 'TRec' THEN 'Timely Recording Exception' 			WHEN e.Exception_Type = 'OP' THEN 'Order Priority Exception' 			--WHEN e.Exception_Type = 'TwO' THEN 'Trades without Orders' 		END AS EXCEPTION_TYPE, 		CASE --do we want all these to be MFID when possible? please advise 			WHEN e.Exception_Type = 'PD' THEN e.MULTI_FUND_ID 			--WHEN e.Exception_Type = 'OA' THEN e.MULTI_FUND_ID 			WHEN e.Exception_Type = 'AF' THEN e.MULTI_FUND_ID 			WHEN e.Exception_Type = 'TEx' THEN e.PM_ORD 			WHEN e.Exception_Type = 'NWQ' THEN e.MULTI_FUND_ID 			WHEN e.Exception_Type = 'TRec' THEN e.MULTI_FUND_ID 			WHEN e.Exception_Type = 'OP' THEN e.PM_ORD 			--WHEN e.Exception_Type = 'TwO' THEN e.MULTI_FUND_ID 		END AS ID, 		NULL AS REASON, 		NULL AS COMMENT, 		cs.STATUS, 		e.CREATE_TIME, 		e.DEALING_DESK, 		t.EXECUTION_TIME, 		e.FINAL_UPDATED_TIME, 		CASE		 			WHEN e.Exception_Type = 'PD' THEN trd.AUTH_TIME 			--WHEN e.Exception_Type = 'OA' THEN oa.AUTH_TIME 			WHEN e.Exception_Type = 'AF' THEN trd.AUTH_TIME 			WHEN e.Exception_Type = 'TEx' THEN tex.AUTH_TIME 			WHEN e.Exception_Type = 'NWQ' THEN trd.AUTH_TIME 			WHEN e.Exception_Type = 'TRec' THEN trd.AUTH_TIME 			WHEN e.Exception_Type = 'OP' THEN op.AUTH_TIME 			--WHEN e.Exception_Type = 'TwO' THEN trd.AUTH_TIME 		END AS AUTH_TIME, 		--t.CLIENT_EXECUTION_NUM, 		CASE		 			WHEN e.Exception_Type = 'PD' THEN t.PLACEMENT_NUM 			--WHEN e.Exception_Type = 'OA' THEN t.PLACEMENT_NUM 			WHEN e.Exception_Type = 'AF' THEN t.PLACEMENT_NUM 			WHEN e.Exception_Type = 'TEx' THEN t.PLACEMENT_NUM 			WHEN e.Exception_Type = 'NWQ' THEN t.PLACEMENT_NUM 			WHEN e.Exception_Type = 'TRec' THEN t.PLACEMENT_NUM 			WHEN e.Exception_Type = 'OP' THEN t.PLACEMENT_NUM 			--WHEN e.Exception_Type = 'TwO' THEN t.PLACEMENT_NUM 		END AS PLACEMENT_NUM, 		cs.STATUS_CODE, 		CASE		 			WHEN e.Exception_Type = 'PD' THEN pd.DEALER 			--WHEN e.Exception_Type = 'OA' THEN oa.DEALER 			WHEN e.Exception_Type = 'AF' THEN ma.DEALER 			WHEN e.Exception_Type = 'TEx' THEN tex.DEALER 			WHEN e.Exception_Type = 'NWQ' THEN nwq.DEALER 			WHEN e.Exception_Type = 'TRec' THEN trec.DEALER 			WHEN e.Exception_Type = 'OP' THEN op.Dealer 			--WHEN e.Exception_Type = 'TwO' THEN two.DEALER 		END AS TRD_TRADER 	INTO #temp_pre_audit 	FROM #exceptions e 	LEFT JOIN VISTA_REPORTING.dbo.COMPLIANCE_EXCEPTIONS_STATUS_TABLE cs ON cs.STATUS_CODE=e.Status 	LEFT JOIN VISTA_REPORTING.dbo.MASTER_VG_15_AMENDMENT_FLAG_DMG_TABLE ma ON ma.MFID=e.MULTI_FUND_ID AND e.TOUCH_COUNT=ma.TOUCH_COUNT 	LEFT JOIN VISTA_REPORTING.dbo.MASTER_MFID_VG_01_QUOTE_EXCEPTION_DMG_TABLE pd ON pd.MFID = e.MULTI_FUND_ID 	LEFT JOIN VISTA_REPORTING.dbo.MASTER_MFID_VG_07_NON_WINNING_QUOTE_DMG_TABLE nwq ON nwq.MFID = e.MULTI_FUND_ID 	LEFT JOIN VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_DMG_TABLE trec ON trec.MFID = e.MULTI_FUND_ID 	LEFT JOIN VISTA_REPORTING.dbo.MASTER_MFID_VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE two ON two.MFID = e.MULTI_FUND_ID 	LEFT JOIN VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE tex ON tex.[ORDER] = e.PM_ORD 	LEFT JOIN VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_13_ORDER_AGGREGATION_DMG_TABLE oa ON oa.[ORDER] = e.TRD_ORD 	LEFT JOIN VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE op ON op.[ORDER] = e.TRD_ORD 	LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.MULTI_FUND_ID = e.MULTI_FUND_ID and t.FinalFlag = 1 	LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS trd ON trd.ORD_NUM = t.ORD_NUM 	  	IF OBJECT_ID('tempdb..#temp_audit_table', 'U') IS NOT NULL DROP TABLE #temp_audit_table 	SELECT  		PM_ORD, 		TRD_ORD, 		MULTI_FUND_ID AS MFID, 		EXCEPTION_TYPE, 		ID, 		REASON, 		COMMENT, 		STATUS, 		CREATE_TIME, 		DEALING_DESK, 		FINAL_UPDATED_TIME, 		STATUS_CODE,  		MIN(EXECUTION_TIME) AS EXECUTION_TIME, --In cases where the execution time changes, take the first 		MIN(AUTH_TIME) AS AUTH_TIME, --In cases where the auth time changes, take the first 		MIN(PLACEMENT_NUM) AS PLACEMENT_NUM, --In cases where there are multiple placements, take the first 		MIN(TRD_TRADER) AS TRD_TRADER --In cases where there are multiple traders, take the first 	INTO #temp_audit_table 	FROM #temp_pre_audit 	GROUP BY 		PM_ORD, 		TRD_ORD, 		MULTI_FUND_ID, 		EXCEPTION_TYPE, 		ID, 		REASON, 		COMMENT, 		STATUS, 		CREATE_TIME, 		DEALING_DESK, 		FINAL_UPDATED_TIME, 		STATUS_CODE  	 	IF OBJECT_ID('VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_DMG', 'U') IS NULL  	SELECT DISTINCT * 	INTO VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_DMG 	FROM #temp_audit_table 	  	MERGE VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_DMG AS T 	USING #temp_audit_table AS S 	ON (T.PM_ORD = S.PM_ORD 		AND ISNULL(T.TRD_ORD,'-1') = ISNULL(S.TRD_ORD,'-1') 		AND ISNULL(T.MFID,'-1') = ISNULL(S.MFID,'-1') 		AND T.DEALING_DESK = S.DEALING_DESK 		AND T.Exception_Type = S.Exception_Type 		AND ISNULL(T.ID,'-1')=ISNULL(S.ID,'-1')) 	WHEN MATCHED 		THEN  		UPDATE SET -- Do nothing 			T.PM_ORD = T.PM_ORD 	WHEN NOT MATCHED  		THEN  		INSERT (MFID, TRD_ORD,	PM_ORD, EXCEPTION_TYPE, ID, REASON, COMMENT, STATUS, CREATE_TIME, DEALING_DESK, EXECUTION_TIME, FINAL_UPDATED_TIME, AUTH_TIME, PLACEMENT_NUM, STATUS_CODE, TRD_TRADER) 		VALUES (S.MFID, S.TRD_ORD,	S.PM_ORD, S.EXCEPTION_TYPE, S.ID, S.REASON, S.COMMENT, S.STATUS, S.CREATE_TIME, S.DEALING_DESK, S.EXECUTION_TIME, S.FINAL_UPDATED_TIME, S.AUTH_TIME, S.PLACEMENT_NUM, S.STATUS_CODE, S.TRD_TRADER);   END   --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: COMPLIANCE_SAMPLING_EQ CreateDate: 2019-10-18 08:39:49.397 ModifyDate: 2021-05-06 12:27:33.967 --- DEFINITION START ---  -- ============================================= -- Author:		<Ragi, Keerti> -- Create date: <2018-07-20> -- Description:	<Procedure to implement compliance sampling> -- =============================================  -- ***************VERSION CONTROL*************** -- 2018-07-20 KR - Procedure created.  -- 2018-08-08 KR - Added Fair Allocation Exception -- 2018-08-20 KR - Modified the SPROC to align the EQ sampling script to the FI script -- 2018-09-04 KR - Modified the SPROC to add new exception type codes. -- 2018-09-05 KR - Added a new column ROW_ID into the COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE table. -- 2018-09-05 KR - Added a new Asset Class SWAP and Trade Weighting to the SPROC. -- 2018-09-24 DDC - Added extra code to populate the COMPLIANCE_AUDIT_TABLE evert time the script is run. -- 2019-11-13 DDC - Optimisations to script added to try and bring execution time within the OS timeout period (30s) -- *********************************************  CREATE PROCEDURE [dbo].[COMPLIANCE_SAMPLING_EQ] --'2018-01-01 00:00:00.000','2018-08-02 00:00:00.000','wh_test1'  	@Start_Date datetime, 	@End_Date datetime, 	@INSPECTION_NAME VARCHAR(MAX)  AS BEGIN  	--0. Test query to check parameters passed from OS are correct 	INSERT INTO VISTA_REPORTING.dbo.compliance_sampling_dates 	SELECT @Start_Date AS start_time, @End_Date AS end_time, @INSPECTION_NAME AS Inspection_Name,  	getdate() as [Sampled time] , 'Equity' as DEALING_DESK   	--SET @INSPECTION_NAME = 'TEST_KIT'  	IF OBJECT_ID('tempdb..#temp_trade_table', 'U') IS NOT NULL DROP TABLE #temp_trade_table 	SELECT DISTINCT  		t.ORD_NUM,  		t.MULTI_FUND_ID,  		t.FUND, CUSIP,  		t.TRD_TRADE_DATE,  		t.FinalFlag, 		t.NET_CONSIDERATION_GBP 	INTO #temp_trade_table  	FROM VISTA_REPORTING.dbo.COMPLIANCE_TRADES_EQ t 	INNER JOIN VISTA_REPORTING.dbo.COMPLIANCE_ORDERS_CROSS_EQ oc ON oc.TRD_ORD=t.ORD_NUM 	WHERE CONVERT(DATE, TRD_TRADE_DATE) BETWEEN CONVERT(DATE,@Start_Date) AND CONVERT(DATE,@End_Date)   	--1. Get all trades in the sample period and tie to the associated PM Order. 	IF OBJECT_ID('tempdb..#orders_pop', 'U') IS NOT NULL DROP TABLE #orders_pop 	SELECT DISTINCT 		pm.ORD_NUM, 		oc.TRD_ORD,  		t.MULTI_FUND_ID, 		t.TRD_TRADE_DATE, -- Use the TRD_TRADE_DATE 		t.CUSIP, 		pm.DEALING_DESK 	INTO #orders_pop 	FROM VISTA_REPORTING.dbo.COMPLIANCE_PM_ORDERS_EQ pm 	LEFT JOIN VISTA_REPORTING.dbo.COMPLIANCE_ORDERS_DETAILS_EQ od ON pm.ORD_NUM = od.ORD_NUM 	LEFT JOIN VISTA_REPORTING.dbo.COMPLIANCE_ORDERS_CROSS_EQ oc ON pm.ORD_NUM = oc.PM_ORD 	LEFT JOIN #temp_trade_table t 	ON oc.TRD_ORD = t.ORD_NUM  AND t.FUND = od.ORD_DETAIL_FUND 	WHERE t.FinalFlag = 1 --Only want the lastest version of the trade in case the trade date has been updated. 		  AND CONVERT(DATE, TRD_TRADE_DATE) BETWEEN CONVERT(DATE,@Start_Date) AND CONVERT(DATE,@End_Date) 	--AND pm.DEALING_DESK = 'Equity'  	--2. Get the latest touch for each PM order so that we only look at the latest version of the PM order. 	IF OBJECT_ID('tempdb..#max_touch', 'U') IS NOT NULL DROP TABLE #max_touch  	SELECT  		po.ORD_NUM, 		MAX(po.TOUCH_COUNT) AS MAX_TOUCH 	INTO #max_touch 	FROM VISTA_REPORTING.dbo.COMPLIANCE_PM_ORDERS_EQ po 	--INNER JOIN #temp_pmo_table pmo ON pmo.ORD_NUM = po.ORD_NUM 	--WHERE DEALING_DESK = 'Equity' 	GROUP BY po.ORD_NUM  	IF OBJECT_ID('tempdb..#temp_distinct_orders', 'U') IS NOT NULL DROP TABLE #temp_distinct_orders 	SELECT  TOP 0 		po.ORD_NUM,  		o.DEALING_DESK, 		po.CUSIP,  		po.COMMENTS_VALUE,  		po.BROKER_CODE, 		dbg.UNIVERSAL_BID_PRICE, 		dbg.Trade_Weighting, 		dbg.UNIVERSAL_ASK_PRICE, 		o.TRD_TRADE_DATE, 		dbg.OPEN_INTEREST as MARKET_CAP, 		dbg.OPEN_INTEREST, 		CASE  			WHEN dbg.UNIVERSAL_ASK_PRICE = dbg.UNIVERSAL_BID_PRICE THEN 0 			WHEN dbg.UNIVERSAL_BID_PRICE <> 0 THEN MAX(ABS((dbg.UNIVERSAL_ASK_PRICE-dbg.UNIVERSAL_BID_PRICE)/NULLIF(dbg.UNIVERSAL_BID_PRICE,0))) --Need to account for 0 bid price (will cause divide by zero errors). 			ELSE NULL  		END AS BID_ASK_SPREAD  	INTO #temp_distinct_orders 	FROM VISTA_REPORTING.dbo.COMPLIANCE_PM_ORDERS_EQ po 	INNER JOIN #orders_pop o ON po.ORD_NUM = o.ORD_NUM -- Only want to pull through orders in our sample period 	INNER JOIN #max_touch mt ON mt.ORD_NUM=po.ORD_NUM AND mt.MAX_TOUCH=po.TOUCH_COUNT 	LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, TRD_TRADE_DATE, UNIVERSAL_BID_PRICE, UNIVERSAL_ASK_PRICE, Trade_Weighting, OPEN_INTEREST FROM VISTA_REPORTING.dbo.REUTERS_PRICE_BENCHMARK_TABLE) dbg ON dbg.MULTI_FUND_ID = o.MULTI_FUND_ID AND CONVERT(DATE, o.TRD_TRADE_DATE) = CONVERT(DATE, dbg.TRD_TRADE_DATE) -- Confirmation from business required that we should be using the TRD_TRADE_DATE field 	GROUP BY  		po.ORD_NUM,  		o.DEALING_DESK, 		po.CUSIP,  		po.COMMENTS_VALUE,  		po.BROKER_CODE, 		dbg.UNIVERSAL_BID_PRICE, 		dbg.Trade_Weighting, 		--dbg.Mid_Price, 		dbg.UNIVERSAL_ASK_PRICE, 		dbg.OPEN_INTEREST, 		--MARKET_CAP, 		o.TRD_TRADE_DATE;  	IF OBJECT_ID('VISTA_REPORTING.dbo.SAMPLED_ORDERS_COMPLIANCE', 'U') IS NULL 	BEGIN 	--3. Join to FODB table to get price data. For each order we look at all bid/ask spreads on the trades for that order and take the maximum. 	INSERT INTO #temp_distinct_orders 	SELECT   		po.ORD_NUM,  		o.DEALING_DESK, 		po.CUSIP,  		po.COMMENTS_VALUE,  		po.BROKER_CODE, 		dbg.UNIVERSAL_BID_PRICE, 		dbg.Trade_Weighting, 		--dbg.Mid_Price, 		dbg.UNIVERSAL_ASK_PRICE, 		o.TRD_TRADE_DATE, 		dbg.OPEN_INTEREST AS MARKET_CAP, 		dbg.OPEN_INTEREST, 		CASE  			WHEN dbg.UNIVERSAL_ASK_PRICE = dbg.UNIVERSAL_BID_PRICE THEN 0 			WHEN dbg.UNIVERSAL_BID_PRICE <> 0 THEN MAX(ABS((dbg.UNIVERSAL_ASK_PRICE-dbg.UNIVERSAL_BID_PRICE)/NULLIF(dbg.UNIVERSAL_BID_PRICE,0))) --Need to account for 0 bid price (will cause divide by zero errors). 			ELSE NULL  		END AS BID_ASK_SPREAD  	FROM VISTA_REPORTING.dbo.COMPLIANCE_PM_ORDERS_EQ po 	INNER JOIN #orders_pop o ON po.ORD_NUM = o.ORD_NUM -- Only want to pull through orders in our sample period 	INNER JOIN #max_touch mt ON mt.ORD_NUM=po.ORD_NUM AND mt.MAX_TOUCH=po.TOUCH_COUNT 	LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, TRD_TRADE_DATE, UNIVERSAL_BID_PRICE, UNIVERSAL_ASK_PRICE, Trade_Weighting, OPEN_INTEREST FROM VISTA_REPORTING.dbo.REUTERS_PRICE_BENCHMARK_TABLE) dbg ON dbg.MULTI_FUND_ID = o.MULTI_FUND_ID AND CONVERT(DATE, o.TRD_TRADE_DATE) = CONVERT(DATE, dbg.TRD_TRADE_DATE) -- Confirmation from business required that we should be using the TRD_TRADE_DATE field 	GROUP BY  		po.ORD_NUM,  		o.DEALING_DESK, 		po.CUSIP,  		po.COMMENTS_VALUE,  		po.BROKER_CODE, 		dbg.UNIVERSAL_BID_PRICE, 		dbg.Trade_Weighting, 		--dbg.Mid_Price, 		dbg.UNIVERSAL_ASK_PRICE, 		o.TRD_TRADE_DATE, 	--	MARKET_CAP, 		dbg.OPEN_INTEREST; 	END  	ELSE IF OBJECT_ID('VISTA_REPORTING.dbo.SAMPLED_ORDERS_COMPLIANCE', 'U') IS NOT NULL 	BEGIN 	--3. Join to FODB table to get price data. For each order we look at all bid/ask spreads on the trades for that order and take the maximum. 	INSERT INTO #temp_distinct_orders 	SELECT   		po.ORD_NUM,  		o.DEALING_DESK, 		po.CUSIP,  		po.COMMENTS_VALUE,  		po.BROKER_CODE, 		dbg.UNIVERSAL_BID_PRICE, 		dbg.Trade_Weighting, 		--dbg.Mid_Price, 		dbg.UNIVERSAL_ASK_PRICE, 		o.TRD_TRADE_DATE, 		--dbg.Issue_size as MARKET_CAP, 		dbg.OPEN_INTEREST, 		CASE  			WHEN dbg.UNIVERSAL_ASK_PRICE = dbg.UNIVERSAL_BID_PRICE THEN 0 			WHEN dbg.UNIVERSAL_BID_PRICE <> 0 THEN MAX(ABS((dbg.UNIVERSAL_ASK_PRICE-dbg.UNIVERSAL_BID_PRICE)/NULLIF(dbg.UNIVERSAL_BID_PRICE,0))) --Need to account for 0 bid price (will cause divide by zero errors). 			ELSE NULL  		END AS BID_ASK_SPREAD , 		dbg.OPEN_INTEREST AS MARKET_CAP 	FROM VISTA_REPORTING.dbo.PM_ORDERS po 	INNER JOIN #orders_pop o -- Only want to pull through orders in our sample period 	ON po.ORD_NUM = o.ORD_NUM 	INNER JOIN #max_touch mt ON mt.ORD_NUM=po.ORD_NUM AND mt.MAX_TOUCH=po.TOUCH_COUNT 	LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, TRD_TRADE_DATE, UNIVERSAL_BID_PRICE, UNIVERSAL_ASK_PRICE, Trade_Weighting, OPEN_INTEREST FROM VISTA_REPORTING.dbo.REUTERS_PRICE_BENCHMARK_TABLE) dbg ON dbg.MULTI_FUND_ID = o.MULTI_FUND_ID AND CONVERT(DATE, o.TRD_TRADE_DATE) = CONVERT(DATE, dbg.TRD_TRADE_DATE) -- Confirmation from business required that we should be using the TRD_TRADE_DATE field 	WHERE NOT EXISTS (SELECT 1 FROM VISTA_REPORTING.dbo.SAMPLED_ORDERS_COMPLIANCE soc WHERE soc.ORD_NUM = po.ORD_NUM) 	GROUP BY  		po.ORD_NUM,  		o.DEALING_DESK, 		po.CUSIP,  		po.COMMENTS_VALUE,  		po.BROKER_CODE, 		dbg.UNIVERSAL_BID_PRICE, 		dbg.Trade_Weighting, 		--dbg.Mid_Price, 		dbg.UNIVERSAL_ASK_PRICE, 		o.TRD_TRADE_DATE, 		dbg.OPEN_INTEREST 	END 		  	IF OBJECT_ID('tempdb..#temp_inst_type_table', 'U') IS NOT NULL DROP TABLE #temp_inst_type_table 	SELECT DISTINCT  		po.ORD_NUM, 		pr.INST_TYPE, 		pr.MULTI_FUND_ID, 		pr.PRIMARY_MARKET_ORDER_LEVEL 	INTO #temp_inst_type_table 	FROM #temp_distinct_orders po 	LEFT JOIN VISTA_REPORTING.dbo.COMPLIANCE_ORDERS_CROSS_EQ oc ON oc.PM_ORD = po.ORD_NUM 	LEFT JOIN VISTA_REPORTING.dbo.COMPLIANCE_PRIM_INST_EQ pr ON pr.ORD_NUM = oc.TRD_ORD  		 	--4. Find the total value of all trades for each order 	IF OBJECT_ID('tempdb..#temp_trades_table', 'U') IS NOT NULL DROP TABLE #temp_trades_table 	SELECT DISTINCT  		po.ORD_NUM,  		COALESCE(SUM(t.NET_CONSIDERATION_GBP), 0) AS SUM_NET_CONDSIDERATION 	INTO #temp_trades_table 	FROM #orders_pop po 	--LEFT JOIN (SELECT DISTINCT ORD_NUM, ORD_DETAIL_FUND FROM VISTA_STAGING.dbo.ORDERS_DETAIL) od ON po.ORD_NUM = od.ORD_NUM 	--LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON oc.PM_ORD = po.ORD_NUM 	INNER JOIN #temp_trade_table t ON t.ORD_NUM = po.TRD_ORD -- AND t.FUND = od.ORD_DETAIL_FUND 	WHERE t.FinalFlag = 1 	GROUP BY po.ORD_NUM  	/*****************************/ 				--EQUITIES 	/*****************************/ 	----5. Do the ranking. 	IF OBJECT_ID('tempdb..#temp_NC_rank_EQUITY_interim', 'U') IS NOT NULL DROP TABLE #temp_NC_rank_EQUITY_interim 	SELECT DISTINCT  		po.ORD_NUM,  		po.DEALING_DESK, 		ISNULL(po.COMMENTS_VALUE, '') AS COMMENTS_VALUE, 		po.BROKER_CODE, 		ti.INST_TYPE, 		ttt.SUM_NET_CONDSIDERATION, 		po.BID_ASK_SPREAD, 		CASE WHEN pb.[UNIVERSAL_ASK_PRICE] = 0 OR pb.[UNIVERSAL_ASK_PRICE] = NULL THEN NULL  		ELSE pb.[UNIVERSAL_BID_PRICE]/pb.[UNIVERSAL_ASK_PRICE] END AS SPREAD, 		PB.[Trade_Weighting], 		PB.[OPEN_INTEREST]--, 		--DENSE_RANK() OVER (ORDER BY po.BID_ASK_SPREAD) AS BSA_RANK, -- Should we be ordering by the BID_ASK_SPREAD descending?  		--DENSE_RANK() OVER (ORDER BY ttt.SUM_NET_CONDSIDERATION) AS NC_RANK, -- Should we be ordering by the SUM_NET_CONDSIDERATION descending?  		--DENSE_RANK() OVER (ORDER BY PB.[Trade_Weighting]) as TW_RANK 	INTO #temp_NC_rank_EQUITY_interim 	FROM #temp_distinct_orders po 	LEFT JOIN #temp_inst_type_table ti ON po.ORD_NUM=ti.ORD_NUM 	--LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON oc.PM_ORD = po.ORD_NUM 	--LEFT JOIN (SELECT DISTINCT ORD_NUM, PRIMARY_MARKET_ORDER_LEVEL, INST_TYPE , MULTI_FUND_ID FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr ON pr.ORD_NUM = oc.TRD_ORD 	LEFT JOIN #temp_trades_table ttt ON ttt.ORD_NUM = ti.ORD_NUM 	LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, UNIVERSAL_ASK_PRICE, UNIVERSAL_BID_PRICE, Trade_Weighting, OPEN_INTEREST FROM VISTA_REPORTING.[dbo].[REUTERS_PRICE_BENCHMARK_TABLE]) PB ON PB.[MULTI_FUND_ID]= ti.MULTI_FUND_ID 	WHERE ti.PRIMARY_MARKET_ORDER_LEVEL = 0  		  AND ti.INST_TYPE IN ('EQUITIES','ETF')  -- we do not want to include Primary Markets.  	IF OBJECT_ID('tempdb..#temp_NC_rank_EQUITY', 'U') IS NOT NULL DROP TABLE #temp_NC_rank_EQUITY 	SELECT 		*, 		DENSE_RANK() OVER (ORDER BY BID_ASK_SPREAD) AS BSA_RANK, -- Should we be ordering by the BID_ASK_SPREAD descending?  		DENSE_RANK() OVER (ORDER BY SUM_NET_CONDSIDERATION) AS NC_RANK, -- Should we be ordering by the SUM_NET_CONDSIDERATION descending?  		DENSE_RANK() OVER (ORDER BY [Trade_Weighting]) as TW_RANK 	INTO #temp_NC_rank_EQUITY 	FROM #temp_NC_rank_EQUITY_interim  	DECLARE @MAX_BSA_RANK INT; 	DECLARE @MAX_NC_RANK INT; 	DECLARE @MAX_TW_RANK INT; 	SET @MAX_BSA_RANK = (SELECT MAX(BSA_RANK) FROM #temp_NC_rank_EQUITY); 	SET @MAX_NC_RANK = (SELECT MAX(NC_RANK) FROM #temp_NC_rank_EQUITY); 	SET @MAX_TW_RANK= (SELECT MAX(TW_RANK) FROM #temp_NC_rank_EQUITY);  	--6. Do the risk scoring 	IF OBJECT_ID('tempdb..#temp_BECOH_EQUITY_table', 'U') IS NOT NULL DROP TABLE #temp_BECOH_EQUITY_table 	SELECT DISTINCT 		tnr.*,  		(1.0*tnr.BSA_RANK/@MAX_BSA_RANK) AS PERCENTAGE_BSA_RANK,  															  		CASE  			 			WHEN (1.0*tnr.BSA_RANK/@MAX_BSA_RANK) > 0.66 THEN 3 			WHEN (1.0*tnr.BSA_RANK/@MAX_BSA_RANK) < 0.66 THEN 1												 			ELSE 3 		END AS LIQUIDITY_SCORE,  		(1.0*tnr.TW_RANK/@MAX_TW_RANK) AS PERCENTAGE_TW_RANK,  															  		CASE  			WHEN (1.0*tnr.TW_RANK/@MAX_TW_RANK) > 0.66 THEN 2  			WHEN (1.0*tnr.TW_RANK/@MAX_TW_RANK) < 0.66 THEN 1 												 			ELSE 2 		END AS TRADE_SCORE,  		(1.0*tnr.NC_RANK/@MAX_NC_RANK) AS PERCENTAGE_NC_RANK,  										                   		CASE  			WHEN (1.0*tnr.NC_RANK/@MAX_NC_RANK) > 0.66 THEN 2  			WHEN (1.0*tnr.NC_RANK/@MAX_NC_RANK) < 0.66 THEN 1														   			ELSE 2 		END AS ORDER_VALUE_SCORE 	INTO #temp_BECOH_EQUITY_table 	FROM #temp_NC_rank_EQUITY tnr  	--7. Bucket the orders into Elevated and Normal 	IF OBJECT_ID('tempdb..#pre_sample_table_EQUITY', 'U') IS NOT NULL DROP TABLE #pre_sample_table_EQUITY 	SELECT DISTINCT 		bdt.ORD_NUM, 		bdt.DEALING_DESK, 		MAX(bdt.ORDER_VALUE_SCORE + bdt.LIQUIDITY_SCORE + bdt.TRADE_SCORE) AS AGGREGATE_SCORE, --In case there are multiple records for an ORD_NUM, take the maximum score that we see 		CASE 			WHEN MAX(bdt.TRADE_SCORE + bdt.ORDER_VALUE_SCORE + bdt.LIQUIDITY_SCORE) > 4 THEN 'ELEVATED' --In case there are multiple records for an ORD_NUM, take the maximum score that we see 			ELSE 'NORMAL' 		END AS RISK_TIER 	INTO #pre_sample_table_EQUITY 	FROM #temp_BECOH_EQUITY_table bdt 	GROUP BY bdt.ORD_NUM, bdt.DEALING_DESK  	 	--8a. Find thresholds 	DECLARE @Sample_percentage FLOAT 	SET @Sample_percentage = (SELECT MAX(SAMPLE_PERCENTAGE)  									 FROM Vista_Reporting.dbo.COMPLIANCE_SAMPLING_THRESHOLDS  									 WHERE TRD_LOCATION = 'ALL OTHER'  										   AND GETDATE() BETWEEN DATE_FROM AND DATE_TO 										   AND DEALING_DESK = 'Equity') 	DECLARE @Sample_size INT 	SET @Sample_size = (SELECT MAX(SAMPLE_SIZE)  									 FROM Vista_Reporting.dbo.COMPLIANCE_SAMPLING_THRESHOLDS  									 WHERE TRD_LOCATION = 'ALL OTHER'  										   AND GETDATE() BETWEEN DATE_FROM AND DATE_TO 										   AND DEALING_DESK = 'Equity')  	--8b. Find required number of samples - 2.5% of all orders. 	DECLARE @Total_Num_Orders FLOAT; 	SET @Total_Num_Orders = @Sample_percentage/100*(SELECT COUNT(DISTINCT ORD_NUM) FROM #pre_sample_table_EQUITY);  	--9. Get samples (80% from the elevated bucket AND 20% from the normal bucket). 	IF OBJECT_ID('tempdb..#Samples_elevated_EQUITY', 'U') IS NOT NULL DROP TABLE #Samples_elevated_EQUITY 	SELECT TOP (CONVERT(INT,(CEILING(@Total_Num_Orders * 0.8)))) * 	INTO #Samples_elevated_EQUITY 	FROM #pre_sample_table_EQUITY 	WHERE RISK_TIER='ELEVATED'  	ORDER BY NEWID() -- new ID will randomly rank and taking top n will keep this randomness  	IF OBJECT_ID('tempdb..#Samples_normal_EQUITY', 'U') IS NOT NULL DROP TABLE #Samples_normal_EQUITY 	SELECT TOP (CONVERT(INT,(CEILING(@Total_Num_Orders * 0.2)))) * 	INTO #Samples_normal_EQUITY 	FROM #pre_sample_table_EQUITY 	WHERE RISK_TIER='Normal'  	ORDER BY NEWID() -- new ID will randomly rank and taking top n will keep this randomness  	IF OBJECT_ID('tempdb..#Samples_EQUITY', 'U') IS NOT NULL DROP TABLE #Samples_EQUITY 	SELECT *  	INTO #Samples_EQUITY 	FROM #Samples_elevated_EQUITY 	UNION ALL 	SELECT * FROM #Samples_normal_EQUITY   	/*****************************/ 				--FUTURES 	/*****************************/      	--5. Do the ranking.    	IF OBJECT_ID('tempdb..#temp_NC_rank_FUTURES', 'U') IS NOT NULL DROP TABLE #temp_NC_rank_FUTURES 	SELECT DISTINCT  		po.ORD_NUM,  		po.DEALING_DESK, 		ISNULL(po.COMMENTS_VALUE, '') AS COMMENTS_VALUE, 		po.BROKER_CODE, 		ti.INST_TYPE, 		ttt.SUM_NET_CONDSIDERATION, 		po.BID_ASK_SPREAD, 		po.OPEN_INTEREST, 		DENSE_RANK() OVER (ORDER BY po.BID_ASK_SPREAD) AS BSA_RANK, -- ShouWe ld we be ordering by the BID_ASK_SPREAD descending?  		DENSE_RANK() OVER (ORDER BY ttt.SUM_NET_CONDSIDERATION) AS NC_RANK, -- Should we be ordering by the SUM_NET_CONDSIDERATION descending?  		DENSE_RANK() OVER (ORDER BY po.OPEN_INTEREST) AS OI_RANK 	INTO #temp_NC_rank_FUTURES 	FROM #temp_distinct_orders po 	LEFT JOIN #temp_inst_type_table ti ON po.ORD_NUM=ti.ORD_NUM 	--LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON oc.PM_ORD = po.ORD_NUM 	--LEFT JOIN (SELECT DISTINCT ORD_NUM, INST_TYPE, PRIMARY_MARKET_ORDER_LEVEL FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr ON pr.ORD_NUM = oc.TRD_ORD 	LEFT JOIN #temp_trades_table ttt ON ttt.ORD_NUM = ti.ORD_NUM 	WHERE ti.PRIMARY_MARKET_ORDER_LEVEL = 0 AND ti.INST_TYPE IN ('EQUITY FUTURES') -- This is only for EQUITY FUTURES. And we do not want to include Primary Markets.  	DECLARE @MAX_BSA_RANK_FUTURES INT; 	DECLARE @MAX_NC_RANK_FUTURES INT; 	DECLARE @MAX_OI_RANK_FUTURES INT; 	SET @MAX_BSA_RANK_FUTURES = (SELECT MAX(BSA_RANK) FROM #temp_NC_rank_FUTURES); 	SET @MAX_NC_RANK_FUTURES = (SELECT MAX(NC_RANK) FROM #temp_NC_rank_FUTURES); 	SET @MAX_OI_RANK_FUTURES = (SELECT MAX(OI_RANK) FROM #temp_NC_rank_FUTURES);  	--6. Do the risk scoring 	IF OBJECT_ID('tempdb..#temp_BECOH_FUTURES_table', 'U') IS NOT NULL DROP TABLE #temp_BECOH_FUTURES_table 	SELECT DISTINCT 		tnr.*, 		(1.0*tnr.BSA_RANK/@MAX_BSA_RANK_FUTURES) AS PERCENTAGE_BSA_RANK,  															  		CASE  			WHEN (1.0*tnr.BSA_RANK/@MAX_BSA_RANK_FUTURES) > 0.66 THEN 3 			WHEN (1.0*tnr.BSA_RANK/@MAX_BSA_RANK_FUTURES) < 0.66 THEN 1										 			ELSE 3 		END AS LIQUIDITY_SCORE,  		(1.0*tnr.OI_RANK/@MAX_OI_RANK_FUTURES) AS PERCENTAGE_MC_RANK,  															  		CASE  			WHEN (1.0*tnr.OI_RANK/@MAX_OI_RANK_FUTURES) < 0.33 THEN 2  			WHEN (1.0*tnr.OI_RANK/@MAX_OI_RANK_FUTURES) > 0.33 THEN 1 												 			ELSE 2 		END AS OPENINTEREST_SCORE,  		(1.0*tnr.NC_RANK/@MAX_NC_RANK_FUTURES) AS PERCENTAGE_NC_RANK,  										                   		CASE  			WHEN (1.0*tnr.NC_RANK/@MAX_NC_RANK_FUTURES) > 0.66 THEN 2  			WHEN (1.0*tnr.NC_RANK/@MAX_NC_RANK_FUTURES) < 0.66 THEN 1														   			ELSE 2 		END AS ORDER_VALUE_SCORE 	INTO #temp_BECOH_FUTURES_table 	FROM #temp_NC_rank_FUTURES tnr  		--7. Bucket the orders into Elevated and Normal 	IF OBJECT_ID('tempdb..#pre_sample_table_FUTURES', 'U') IS NOT NULL DROP TABLE #pre_sample_table_FUTURES 	SELECT DISTINCT 		bdt.ORD_NUM, 		bdt.DEALING_DESK, 		--MAX(CP_DIRECTION_FLAG) AS CP_DIRECTION_FLAG, 		MAX(bdt.OPENINTEREST_SCORE  + bdt.ORDER_VALUE_SCORE + bdt.LIQUIDITY_SCORE) AS AGGREGATE_SCORE, --In case there are multiple records for an ORD_NUM, take the maximum score that we see 		CASE 			WHEN MAX(bdt.OPENINTEREST_SCORE + bdt.ORDER_VALUE_SCORE + bdt.LIQUIDITY_SCORE) > 4 THEN 'ELEVATED' --In case there are multiple records for an ORD_NUM, take the maximum score that we see 			ELSE 'NORMAL' 		END AS RISK_TIER 	INTO #pre_sample_table_FUTURES 	FROM #temp_BECOH_FUTURES_table bdt 	GROUP BY bdt.ORD_NUM, bdt.DEALING_DESK 	 	/*****************************/ 				--OPTIONS 	/*****************************/      	--5. Do the ranking.    	IF OBJECT_ID('tempdb..#temp_NC_rank_OPTIONS', 'U') IS NOT NULL DROP TABLE #temp_NC_rank_OPTIONS 	SELECT DISTINCT  		po.ORD_NUM,  		po.DEALING_DESK, 		ISNULL(po.COMMENTS_VALUE, '') AS COMMENTS_VALUE, 		po.BROKER_CODE, 		ti.INST_TYPE, 		ttt.SUM_NET_CONDSIDERATION, 		po.BID_ASK_SPREAD, 		po.OPEN_INTEREST, 		DENSE_RANK() OVER (ORDER BY po.BID_ASK_SPREAD) AS BSA_RANK, -- ShouWe ld we be ordering by the BID_ASK_SPREAD descending?  		DENSE_RANK() OVER (ORDER BY ttt.SUM_NET_CONDSIDERATION) AS NC_RANK, -- Should we be ordering by the SUM_NET_CONDSIDERATION descending?  		DENSE_RANK() OVER (ORDER BY po.OPEN_INTEREST) AS OI_RANK 	INTO #temp_NC_rank_OPTIONS 	FROM #temp_distinct_orders po 	LEFT JOIN #temp_inst_type_table ti ON po.ORD_NUM=ti.ORD_NUM 	--LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON oc.PM_ORD = po.ORD_NUM 	--LEFT JOIN (SELECT DISTINCT ORD_NUM, INST_TYPE, PRIMARY_MARKET_ORDER_LEVEL FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr ON pr.ORD_NUM = oc.TRD_ORD 	LEFT JOIN #temp_trades_table ttt ON ttt.ORD_NUM = ti.ORD_NUM 	WHERE ti.PRIMARY_MARKET_ORDER_LEVEL = 0 AND ti.INST_TYPE IN ('ET Options')  -- This is only for ET Options. And we do not want to include Primary Markets.  	DECLARE @MAX_BSA_RANK_OPTIONS INT; 	DECLARE @MAX_NC_RANK_OPTIONS INT; 	DECLARE @MAX_OI_RANK_OPTIONS INT; 	SET @MAX_BSA_RANK_OPTIONS = (SELECT MAX(BSA_RANK) FROM #temp_NC_rank_OPTIONS); 	SET @MAX_NC_RANK_OPTIONS = (SELECT MAX(NC_RANK) FROM #temp_NC_rank_OPTIONS); 	SET @MAX_OI_RANK_OPTIONS = (SELECT MAX(OI_RANK) FROM #temp_NC_rank_OPTIONS);  	--6. Do the risk scoring 	IF OBJECT_ID('tempdb..#temp_BECOH_OPTIONS_table', 'U') IS NOT NULL DROP TABLE #temp_BECOH_OPTIONS_table 	SELECT DISTINCT 		tnr.*, 		(1.0*tnr.BSA_RANK/@MAX_BSA_RANK_OPTIONS) AS PERCENTAGE_BSA_RANK,  															  		CASE  			WHEN (1.0*tnr.BSA_RANK/@MAX_BSA_RANK_OPTIONS) > 0.66 THEN 3 			WHEN (1.0*tnr.BSA_RANK/@MAX_BSA_RANK_OPTIONS) < 0.66 THEN 1										 			ELSE 3 		END AS LIQUIDITY_SCORE,  		(1.0*tnr.OI_RANK/@MAX_OI_RANK_OPTIONS) AS PERCENTAGE_MC_RANK,  															  		CASE  			WHEN (1.0*tnr.OI_RANK/@MAX_OI_RANK_OPTIONS) < 0.33 THEN 2  			WHEN (1.0*tnr.OI_RANK/@MAX_OI_RANK_OPTIONS) > 0.33 THEN 1 												 			ELSE 2 		END AS OPENINTEREST_SCORE,  		(1.0*tnr.NC_RANK/@MAX_NC_RANK_OPTIONS) AS PERCENTAGE_NC_RANK,  										                   		CASE  			WHEN (1.0*tnr.NC_RANK/@MAX_NC_RANK_OPTIONS) > 0.66 THEN 2  			WHEN (1.0*tnr.NC_RANK/@MAX_NC_RANK_OPTIONS) < 0.66 THEN 1														   			ELSE 2 		END AS ORDER_VALUE_SCORE 	INTO #temp_BECOH_OPTIONS_table 	FROM #temp_NC_rank_OPTIONS tnr  		--7. Bucket the orders into Elevated and Normal 	IF OBJECT_ID('tempdb..#pre_sample_table_OPTIONS', 'U') IS NOT NULL DROP TABLE #pre_sample_table_OPTIONS 	SELECT DISTINCT 		bdt.ORD_NUM, 		bdt.DEALING_DESK, 		--MAX(CP_DIRECTION_FLAG) AS CP_DIRECTION_FLAG, 		MAX( bdt.ORDER_VALUE_SCORE + bdt.LIQUIDITY_SCORE + bdt.OPENINTEREST_SCORE) AS AGGREGATE_SCORE, --In case there are multiple records for an ORD_NUM, take the maximum score that we see 		CASE 			WHEN MAX(bdt.ORDER_VALUE_SCORE + bdt.LIQUIDITY_SCORE + bdt.OPENINTEREST_SCORE) > 4 THEN 'ELEVATED' --In case there are multiple records for an ORD_NUM, take the maximum score that we see 			ELSE 'NORMAL' 		END AS RISK_TIER 	INTO #pre_sample_table_OPTIONS 	FROM #temp_BECOH_OPTIONS_table bdt 	GROUP BY bdt.ORD_NUM, bdt.DEALING_DESK  	 	/*****************************/ 			--CONVERTIBLES 	/*****************************/      	--5. Do the ranking.    	IF OBJECT_ID('tempdb..#temp_NC_rank_CONVT', 'U') IS NOT NULL DROP TABLE #temp_NC_rank_CONVT 	SELECT DISTINCT  		po.ORD_NUM,  		po.DEALING_DESK, 		ISNULL(po.COMMENTS_VALUE, '') AS COMMENTS_VALUE, 		po.BROKER_CODE, 		ti.INST_TYPE, 		ttt.SUM_NET_CONDSIDERATION, 		po.BID_ASK_SPREAD, 		po.OPEN_INTEREST AS AMOUNTISSUED, 		DENSE_RANK() OVER (ORDER BY po.BID_ASK_SPREAD) AS BSA_RANK, -- ShouWe ld we be ordering by the BID_ASK_SPREAD descending?  		DENSE_RANK() OVER (ORDER BY ttt.SUM_NET_CONDSIDERATION) AS NC_RANK, -- Should we be ordering by the SUM_NET_CONDSIDERATION descending?  		DENSE_RANK() OVER (ORDER BY po.OPEN_INTEREST) AS AI_RANK 	INTO #temp_NC_rank_CONVT 	FROM #temp_distinct_orders po 	LEFT JOIN #temp_inst_type_table ti ON po.ORD_NUM=ti.ORD_NUM 	--LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON oc.PM_ORD = po.ORD_NUM 	--LEFT JOIN (SELECT DISTINCT ORD_NUM, INST_TYPE, PRIMARY_MARKET_ORDER_LEVEL FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr ON pr.ORD_NUM = oc.TRD_ORD 	LEFT JOIN #temp_trades_table ttt ON ttt.ORD_NUM = ti.ORD_NUM 	WHERE ti.PRIMARY_MARKET_ORDER_LEVEL = 0 AND ti.INST_TYPE IN ('CONV BOND')-- This is only for CONV BOND. And we do not want to include Primary Markets.  	DECLARE @MAX_BSA_RANK_CONVT INT; 	DECLARE @MAX_NC_RANK_CONVT INT; 	DECLARE @MAX_AI_RANK_CONVT INT; 	SET @MAX_BSA_RANK_CONVT = (SELECT MAX(BSA_RANK) FROM #temp_NC_rank_CONVT); 	SET @MAX_NC_RANK_CONVT = (SELECT MAX(NC_RANK) FROM #temp_NC_rank_CONVT); 	SET @MAX_AI_RANK_CONVT = (SELECT MAX(AI_RANK) FROM #temp_NC_rank_CONVT);  	--6. Do the risk scoring 	IF OBJECT_ID('tempdb..#temp_BECOH_CONVT_table', 'U') IS NOT NULL DROP TABLE #temp_BECOH_CONVT_table 	SELECT DISTINCT 		tnr.*, 		(1.0*tnr.BSA_RANK/@MAX_BSA_RANK_CONVT) AS PERCENTAGE_BSA_RANK,  															  		CASE  			WHEN (1.0*tnr.BSA_RANK/@MAX_BSA_RANK_CONVT) > 0.33 THEN 1 			WHEN (1.0*tnr.BSA_RANK/@MAX_BSA_RANK_CONVT) < 0.33 THEN 2										 			ELSE 2 		END AS LIQUIDITY_SCORE,  		(1.0*tnr.NC_RANK/@MAX_NC_RANK_CONVT) AS PERCENTAGE_NC_RANK,  										                   		CASE  			WHEN (1.0*tnr.NC_RANK/@MAX_NC_RANK_CONVT) > 0.66 THEN 3  			WHEN (1.0*tnr.NC_RANK/@MAX_NC_RANK_CONVT) < 0.66 THEN 1 														   			ELSE 3 		END AS ORDER_VALUE_SCORE 	INTO #temp_BECOH_CONVT_table 	FROM #temp_NC_rank_CONVT tnr  		--7. Bucket the orders into Elevated and Normal 	IF OBJECT_ID('tempdb..#pre_sample_table_CONVT', 'U') IS NOT NULL DROP TABLE #pre_sample_table_CONVT 	SELECT DISTINCT 		bdt.ORD_NUM, 		bdt.DEALING_DESK, 		--MAX(CP_DIRECTION_FLAG) AS CP_DIRECTION_FLAG, 		MAX(bdt.ORDER_VALUE_SCORE + bdt.LIQUIDITY_SCORE) AS AGGREGATE_SCORE, --In case there are multiple records for an ORD_NUM, take the maximum score that we see 		CASE 			WHEN MAX( bdt.ORDER_VALUE_SCORE + bdt.LIQUIDITY_SCORE) > 3 THEN 'ELEVATED' --In case there are multiple records for an ORD_NUM, take the maximum score that we see 			ELSE 'NORMAL' 		END AS RISK_TIER 	INTO #pre_sample_table_CONVT 	FROM #temp_BECOH_CONVT_table bdt 	GROUP BY bdt.ORD_NUM, bdt.DEALING_DESK  	/*****************************/ 			--SWAP 	/*****************************/      	--5. Do the ranking.    	IF OBJECT_ID('tempdb..#temp_NC_rank_SWAP', 'U') IS NOT NULL DROP TABLE #temp_NC_rank_SWAP 	SELECT DISTINCT  		po.ORD_NUM,  		po.DEALING_DESK, 		ISNULL(po.COMMENTS_VALUE, '') AS COMMENTS_VALUE, 		po.BROKER_CODE, 		ti.INST_TYPE, 		ttt.SUM_NET_CONDSIDERATION, 		po.BID_ASK_SPREAD, 		po.OPEN_INTEREST AS AMOUNTISSUED, 		DENSE_RANK() OVER (ORDER BY po.BID_ASK_SPREAD) AS BSA_RANK, -- ShouWe ld we be ordering by the BID_ASK_SPREAD descending?  		DENSE_RANK() OVER (ORDER BY ttt.SUM_NET_CONDSIDERATION) AS NC_RANK, -- Should we be ordering by the SUM_NET_CONDSIDERATION descending?  		DENSE_RANK() OVER (ORDER BY po.OPEN_INTEREST) AS AI_RANK 	INTO #temp_NC_rank_SWAP 	FROM #temp_distinct_orders po 	LEFT JOIN #temp_inst_type_table ti ON po.ORD_NUM=ti.ORD_NUM 	--LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON oc.PM_ORD = po.ORD_NUM 	--LEFT JOIN (SELECT DISTINCT ORD_NUM, INST_TYPE, PRIMARY_MARKET_ORDER_LEVEL FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr ON pr.ORD_NUM = oc.TRD_ORD 	LEFT JOIN #temp_trades_table ttt ON ttt.ORD_NUM = ti.ORD_NUM 	WHERE ti.PRIMARY_MARKET_ORDER_LEVEL = 0 AND ti.INST_TYPE IN ('TRS')-- This is only for TRS. And we do not want to include Primary Markets.  	DECLARE @MAX_BSA_RANK_SWAP INT; 	DECLARE @MAX_NC_RANK_SWAP INT; 	DECLARE @MAX_AI_RANK_SWAP INT; 	SET @MAX_BSA_RANK_SWAP = (SELECT MAX(BSA_RANK) FROM #temp_NC_rank_SWAP); 	SET @MAX_NC_RANK_SWAP = (SELECT MAX(NC_RANK) FROM #temp_NC_rank_SWAP); 	SET @MAX_AI_RANK_SWAP = (SELECT MAX(AI_RANK) FROM #temp_NC_rank_SWAP);  	--6. Do the risk scoring 	IF OBJECT_ID('tempdb..#temp_BECOH_SWAP_table', 'U') IS NOT NULL DROP TABLE #temp_BECOH_SWAP_table 	SELECT DISTINCT 		tns.*, 		(1.0*tns.BSA_RANK/@MAX_BSA_RANK_SWAP) AS PERCENTAGE_BSA_RANK,  															  		CASE  			WHEN (1.0*tns.BSA_RANK/@MAX_BSA_RANK_SWAP) > 0.33 THEN 1 			WHEN (1.0*tns.BSA_RANK/@MAX_BSA_RANK_SWAP) < 0.33 THEN 2										 			ELSE 2 		END AS LIQUIDITY_SCORE,  		(1.0*tns.NC_RANK/@MAX_NC_RANK_SWAP) AS PERCENTAGE_NC_RANK,  										                   		CASE  			WHEN (1.0*tns.NC_RANK/@MAX_NC_RANK_SWAP) > 0.66 THEN 3 			WHEN (1.0*tns.NC_RANK/@MAX_NC_RANK_SWAP) < 0.66 THEN 1 														   			ELSE 3 		END AS ORDER_VALUE_SCORE 	INTO #temp_BECOH_SWAP_table 	FROM #temp_NC_rank_SWAP tns  		--7. Bucket the orders into Elevated and Normal 	IF OBJECT_ID('tempdb..#pre_sample_table_SWAP', 'U') IS NOT NULL DROP TABLE #pre_sample_table_SWAP 	SELECT DISTINCT 		bds.ORD_NUM, 		bds.DEALING_DESK, 		--MAX(CP_DIRECTION_FLAG) AS CP_DIRECTION_FLAG, 		MAX(bds.ORDER_VALUE_SCORE + bds.LIQUIDITY_SCORE) AS AGGREGATE_SCORE, --In case there are multiple records for an ORD_NUM, take the maximum score that we see 		CASE 			WHEN MAX(bds.ORDER_VALUE_SCORE + bds.LIQUIDITY_SCORE) > 3 THEN 'ELEVATED' --In case there are multiple records for an ORD_NUM, take the maximum score that we see 			ELSE 'NORMAL' 		END AS RISK_TIER 	INTO #pre_sample_table_SWAP 	FROM #temp_BECOH_SWAP_table bds 	GROUP BY bds.ORD_NUM, bds.DEALING_DESK   	/*****************************/ 		--SAMPLING FOR FUTURES, OPTIONS, CONVERTIBLES AND SWAP 	/*****************************/  	IF OBJECT_ID('tempdb..#pre_sample_table_ALL','U') IS NOT NULL DROP TABLE #pre_sample_table_ALL  	SELECT * INTO #pre_sample_table_ALL 	FROM #pre_sample_table_FUTURES 	UNION ALL 	SELECT * FROM #pre_sample_table_OPTIONS 	UNION ALL 	SELECT * FROM #pre_sample_table_CONVT 	UNION ALL 	SELECT * FROM #pre_sample_table_SWAP   	--8. Find required number of samples - 2.5% of all orders. 	DECLARE @Total_Num_Orders_ALL FLOAT; 	SET @Total_Num_Orders_ALL = @Sample_percentage/100*(SELECT COUNT(DISTINCT ORD_NUM) FROM #pre_sample_table_ALL);   	--9. Get samples (80% of the 2.5% are from the elevated bucket. The rest come from the normal bucket). 	IF OBJECT_ID('tempdb..#Samples_elevated_ALL', 'U') IS NOT NULL DROP TABLE #Samples_elevated_ALL 	SELECT TOP (CONVERT(INT,(CEILING(@Total_Num_Orders_ALL * 0.8)))) * 	INTO #Samples_elevated_ALL 	FROM #pre_sample_table_ALL 	WHERE RISK_TIER='ELEVATED'  	ORDER BY NEWID() -- new ID will randomly rank and taking top n will keep this randomness  	IF OBJECT_ID('tempdb..#Samples_normal_ALL', 'U') IS NOT NULL DROP TABLE #Samples_normal_ALL 	SELECT TOP (CONVERT(INT,(CEILING(@Total_Num_Orders_ALL * 0.2)))) * 	INTO #Samples_normal_ALL 	FROM #pre_sample_table_ALL 	WHERE RISK_TIER='Normal'  	ORDER BY NEWID() -- new ID will randomly rank and taking top n will keep this randomness 	 	IF OBJECT_ID('tempdb..#Samples_FUTURES_OPTIONS_CONVT_SWAP', 'U') IS NOT NULL DROP TABLE #Samples_FUTURES_OPTIONS_CONVT_SWAP 	SELECT *  	INTO #Samples_FUTURES_OPTIONS_CONVT_SWAP 	FROM #Samples_elevated_ALL 	UNION ALL 	SELECT * FROM #Samples_normal_ALL  		 	/*****************************/ 		--TOP UP for < 100 samples 	/*****************************/  	--combine elevated and normal samples into one table 	IF OBJECT_ID('tempdb..#Samples', 'U') IS NOT NULL DROP TABLE #Samples 	SELECT ORD_NUM, DEALING_DESK, AGGREGATE_SCORE, RISK_TIER 	INTO #Samples 	FROM #Samples_EQUITY 	UNION ALL 	SELECT ORD_NUM, DEALING_DESK, AGGREGATE_SCORE, RISK_TIER 	FROM #Samples_FUTURES_OPTIONS_CONVT_SWAP 	 	--if less than 100 samples, figure out how many more need to be sampled 	declare @total_orders int 	set @total_orders = (select COUNT(distinct ord_num) from #Samples); 	 	declare @total_top_up_amount int 	if @total_orders < @Sample_size  set @total_top_up_amount = @Sample_size-@total_orders 	else set @total_top_up_amount = 0 	declare @elevated_top_up_amount int 	declare @normal_top_up_amount int 	set @elevated_top_up_amount = CEILING(0.8*@total_top_up_amount)  	set @normal_top_up_amount = floor(0.2*@total_top_up_amount)  	--grab the required number of samples from elevated bucket 	IF OBJECT_ID('tempdb..#topped_up_samples_elevated', 'U') IS NOT NULL DROP TABLE #topped_up_samples_elevated 	select top(@elevated_top_up_amount) el.*  	into #topped_up_samples_elevated 	from #pre_sample_table_EQUITY el 	LEFT JOIN #Samples s 	on el.ord_num = s.ORD_NUM 	where s.ORD_NUM IS NULL AND el.RISK_TIER = 'ELEVATED' 	order by NEWID()   	--grab the required number of samples from normal bucket 	IF OBJECT_ID('tempdb..#topped_up_samples_normal', 'U') IS NOT NULL DROP TABLE #topped_up_samples_normal 	select top(@normal_top_up_amount) n.* 	into #topped_up_samples_normal 	from #pre_sample_table_EQUITY n 	LEFT JOIN #Samples s 	on n.ord_num = s.ORD_NUM 	where s.ORD_NUM IS NULL AND n.RISK_TIER = 'NORMAL' 	order by NEWID()   	--add new topped up samples to sample table 	insert into #Samples 	select ORD_NUM, DEALING_DESK, AGGREGATE_SCORE, RISK_TIER from #topped_up_samples_elevated 	insert into #Samples 	select ORD_NUM, DEALING_DESK, AGGREGATE_SCORE, RISK_TIER from #topped_up_samples_normal  	--add sampled order numbers to list of smapled orders 	IF OBJECT_ID('VISTA_REPORTING.dbo.SAMPLED_ORDERS_COMPLIANCE') IS NULL 	SELECT DISTINCT  		ORD_NUM,  		GETDATE() AS SAMPLED_DATE,  		@INSPECTION_NAME AS [INSPECTION NAME], 		'Equity' AS DEALING_DESK  	INTO VISTA_REPORTING.dbo.SAMPLED_ORDERS_COMPLIANCE 	FROM #Samples  	ELSE  	INSERT INTO VISTA_REPORTING.dbo.SAMPLED_ORDERS_COMPLIANCE  	SELECT DISTINCT  		ORD_NUM,  		GETDATE() AS SAMPLED_DATE, 		@INSPECTION_NAME AS [INSPECTION NAME], 		'Equity' AS DEALING_DESK 	FROM #Samples  	/*****************************/ 		--Combine all samples 	/*****************************/ 	--10. Get all trades associated with the orders to sample 	IF OBJECT_ID('tempdb..#sample_trades_orders', 'U') IS NOT NULL DROP TABLE #sample_trades_orders 	SELECT DISTINCT  		t.MULTI_FUND_ID, 		oc.PM_ORD, 		oc.TRD_ORD, 		s.DEALING_DESK, 		1 AS For_Sample 		--CP_DIRECTION_FLAG 	INTO #sample_trades_orders 	FROM VISTA_REPORTING.dbo.COMPLIANCE_TRADES_EQ t 	LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc 	ON t.ORD_NUM = oc.TRD_ORD 	INNER JOIN 		#Samples s 	ON oc.PM_ORD = s.ORD_NUM 	--WHERE t.TRD_TRADE_DATE BETWEEN @Start_Date AND @End_Date -- Only pull through the trades for the order that are in the sample period. 	 	--11. Create status table 	IF OBJECT_ID('tempdb..#order_status', 'U') IS NOT NULL DROP TABLE #order_status 	SELECT distinct 		orders.ORD_NUM, 		orders.TRD_ORD, 		orders.MULTI_FUND_ID, 		orders.DEALING_DESK, 		--ISNULL(sample.CP_DIRECTION_FLAG, 0) AS CP_DIRECTION_FLAG, 		CASE  			WHEN sample.For_Sample = 1 THEN '2C1' --Order level - Compliance Review Pending 		ELSE '2C2' 						   --Order level - Not sampled 		END AS Status, 		NULL AS FINAL_UPDATED_TIME 	INTO #order_status 	FROM (SELECT DISTINCT ORD_NUM, TRD_ORD, MULTI_FUND_ID, DEALING_DESK FROM #orders_pop) orders 	LEFT JOIN (SELECT DISTINCT PM_ORD, For_Sample FROM #sample_trades_orders) sample 	ON orders.ORD_NUM = sample.PM_ORD   	IF OBJECT_ID('tempdb..#temp_comp_order_status', 'U') IS NOT NULL DROP TABLE #temp_comp_order_status 	SELECT DISTINCT  		ORD_NUM, 		DEALING_DESK, 		STATUS, 		FINAL_UPDATED_TIME  	INTO #temp_comp_order_status 	FROM #order_status   	--7. Put the orders into the status table 	IF OBJECT_ID('VISTA_REPORTING.dbo.COMPLIANCE_ORDER_FINAL_STATUS_UPDATE_TABLE', 'U') IS NULL  	SELECT  		ORD_NUM, 		DEALING_DESK, 		STATUS, 		FINAL_UPDATED_TIME  	INTO VISTA_REPORTING.dbo.COMPLIANCE_ORDER_FINAL_STATUS_UPDATE_TABLE 	FROM #temp_comp_order_status 	 	MERGE VISTA_REPORTING.dbo.COMPLIANCE_ORDER_FINAL_STATUS_UPDATE_TABLE AS T 	USING #temp_comp_order_status AS S 	ON (T.ORD_NUM = S.ORD_NUM ) 	WHEN MATCHED 		THEN  		UPDATE SET 			T.ord_num=T.ord_num, 			T.Status = (CASE  				WHEN T.Status = '2C2' THEN S.Status -- Not sampled previously - update to the current status 				WHEN T.Status IN ('2C1','2C3','2C4') THEN T.Status -- Has been sampled previously so we don't update the status 			END) 	WHEN NOT MATCHED  		THEN  		INSERT (ORD_NUM, DEALING_DESK, STATUS, FINAL_UPDATED_TIME) 		VALUES (S.ORD_NUM, S.DEALING_DESK, S.STATUS, S.FINAL_UPDATED_TIME); 	 	--DECLARE @MAX_TOUCH_COUNT INT 	--DECLARE @COMMENTS_VALUE VARCHAR(500) 	--DECLARE @BROKER_CODE VARCHAR(100)  	--SET @MAX_TOUCH_COUNT=(SELECT MAX(TOUCH_COUNT) FROM VISTA_REPORTING.dbo.PM_ORDERS) 	--SET @COMMENTS_VALUE = (SELECT COMMENTS_VALUE FROM VISTA_REPORTING.dbo.PM_ORDERS 	--WHERE TOUCH_COUNT=@MAX_TOUCH_COUNT) 	--SET @BROKER_CODE = (SELECT BROKER_CODE  FROM VISTA_REPORTING.dbo.PM_ORDERS 	--WHERE TOUCH_COUNT=@MAX_TOUCH_COUNT)   	IF OBJECT_ID('tempdb..#temp_eq_trades', 'U') IS NOT NULL DROP TABLE #temp_eq_trades 	SELECT DISTINCT  		t.MULTI_FUND_ID, 		t.ORD_NUM, 		t.FUND,  		t.FinalFlag,  		t.EXECUTION_TIME 	INTO #temp_eq_trades  	FROM VISTA_REPORTING.dbo.COMPLIANCE_TRADES_EQ t 	INNER JOIN Vista_Reporting.dbo.COMPLIANCE_PRIM_INST_EQ pr ON pr.MULTI_FUND_ID=t.MULTI_FUND_ID  																 AND pr.DEALING_DESK = 'Equity' 	WHERE t.FinalFlag = 1   	--12. Put the trade exception level detail into the status table - is to be done for all exception types. 	IF OBJECT_ID('tempdb..#exceptions', 'U') IS NOT NULL DROP TABLE #exceptions	 	--PD 	SELECT DISTINCT  		t.ORD_NUM AS PM_ORD,  		t.TRD_ORD, 		t.MULTI_FUND_ID, 		vg.DEALING_DESK, 		vg.QUOTE_EXCEPTION AS [Exception_Value], 		vg.QE_CREATE_TIME AS CREATE_TIME, 		CONVERT(VARCHAR(10),'PD') AS Exception_Type, 		CASE WHEN vg.QUOTE_EXCEPTION = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	INTO #exceptions 	FROM #order_status t 	--LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM vista_reporting.dbo.orders_cross) oc 	--on t.ord_num = oc.pm_ord 	--LEFT JOIN (SELECT DISTINCT ORD_NUM, ORD_DETAIL_FUND FROM VISTA_STAGING.dbo.ORDERS_DETAIL) od ON t.ORD_NUM = od.ORD_NUM 	--LEFT JOIN #temp_eq_trades trd on t.trd_ord = trd.ORD_NUM AND trd.FUND = od.ORD_DETAIL_FUND 	LEFT JOIN VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_EQ_TABLE vg on t.MULTI_FUND_ID = vg.MULTI_FUND_ID 	WHERE t.Status = '2C1' 		  AND vg.MULTI_FUND_ID IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly). 	UNION ALL 	--NWQ 	SELECT DISTINCT  		t.ORD_NUM AS PM_ORD,  		t.TRD_ORD, 		t.MULTI_FUND_ID, 		vg.DEALING_DESK, 		vg.NON_WINNING_QUOTE_EXCEPTION AS [Exception_Value], 		vg.NWQ_CREATEIME AS CREATE_TIME, 		CONVERT(VARCHAR(10),'NWQ') AS Exception_Type, 		CASE WHEN vg.NON_WINNING_QUOTE_EXCEPTION = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #order_status t 	--LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM vista_reporting.dbo.orders_cross) oc 	--on t.ord_num = oc.pm_ord 	--LEFT JOIN (SELECT DISTINCT ORD_NUM, ORD_DETAIL_FUND FROM VISTA_STAGING.dbo.ORDERS_DETAIL) od ON t.ORD_NUM = od.ORD_NUM 	--LEFT JOIN #temp_eq_trades trd on t.trd_ord = trd.ORD_NUM AND trd.FUND = od.ORD_DETAIL_FUND 	LEFT JOIN VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_EQ_TABLE vg on t.MULTI_FUND_ID = vg.MULTI_FUND_ID 	WHERE t.Status = '2C1' 		  AND vg.MULTI_FUND_ID IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly). 	UNION ALL 	--Timely Ex 	SELECT DISTINCT 		t.ORD_NUM AS PM_ORD,  		NULL AS TRD_ORD, 		NULL AS Multi_Fund_ID, 		vg.DEALING_DESK, 		max(vg.TIMELY_EXECUTION_EXCEPTION) AS [Exception_Value], 		min(vg.CREATETIME) AS CREATE_TIME, 		CONVERT(VARCHAR(10),'TEx') AS Exception_Type, 		CASE WHEN max(vg.TIMELY_EXECUTION_EXCEPTION) = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #order_status t 	LEFT JOIN VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_EQ_TABLE vg ON t.ORD_NUM = vg.ORD_NUM 	WHERE t.Status = '2C1' 	group by t.ORD_NUM, vg.Dealing_Desk 	UNION ALL 	--TRec 	SELECT DISTINCT  		t.ORD_NUM AS PM_ORD,  		t.TRD_ORD, 		t.MULTI_FUND_ID, 		vg.DEALING_DESK, 		vg.TIMELY_RECORDING_FLAG  AS [Exception_Value], 		vg.TREC_CREATETIME AS CREATE_TIME, 		CONVERT(VARCHAR(10),'TRec') AS Exception_Type, 		CASE WHEN vg.TIMELY_RECORDING_FLAG = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #order_status t 	--LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM vista_reporting.dbo.orders_cross) oc 	--on t.ord_num = oc.pm_ord 	--LEFT JOIN (SELECT DISTINCT ORD_NUM, ORD_DETAIL_FUND FROM VISTA_STAGING.dbo.ORDERS_DETAIL) od ON t.ORD_NUM = od.ORD_NUM 	--LEFT JOIN #temp_eq_trades trd on t.trd_ord = trd.ORD_NUM AND trd.FUND = od.ORD_DETAIL_FUND 	LEFT JOIN VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_EQ_TABLE vg on t.MULTI_FUND_ID = vg.MULTI_FUND_ID 	WHERE t.Status = '2C1' 		  AND vg.MULTI_FUND_ID IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly). 	UNION ALL 	--Order Aggregation 	SELECT DISTINCT  		t.ORD_NUM AS PM_ORD,  		t.TRD_ORD, 		t.MULTI_FUND_ID, 		vg.DEALING_DESK, 		vg.MERGE_EXCEPTION  AS [Exception_Value], 		vg.CREATETIME AS CREATE_TIME, 		CONVERT(VARCHAR(10),'OA') AS Exception_Type,      		CASE WHEN vg.MERGE_EXCEPTION = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #order_status t 	--LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM vista_reporting.dbo.orders_cross) oc 	--on t.ord_num = oc.pm_ord 	--LEFT JOIN (SELECT DISTINCT ORD_NUM, ORD_DETAIL_FUND FROM VISTA_STAGING.dbo.ORDERS_DETAIL) od ON t.ORD_NUM = od.ORD_NUM 	--LEFT JOIN vista_reporting.dbo.trades trd on t.trd_ord = trd.ORD_NUM AND trd.FUND = od.ORD_DETAIL_FUND 	LEFT JOIN VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_EQ_TABLE vg on t.TRD_ORD = vg.ORD_NUM 	WHERE t.Status = '2C1' 		  AND vg.OA_ID IS NOT NULL 		  AND CHARINDEX(t.TRD_ORD, vg.OA_ID) > 0  		  AND CHARINDEX(t.MULTI_FUND_ID, vg.OA_ID) > 5 -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly). 	UNION ALL 	--Order Priority 	SELECT DISTINCT 		t.ORD_NUM AS PM_ORD,  		t.TRD_ORD, 		NULL AS Multi_Fund_ID, 		vg.DEALING_DESK, 		vg.ORDER_PRIORITY_EXCEPTION  AS [Exception_Value], 		vg.CREATETIME AS CREATE_TIME, 		CONVERT(VARCHAR(10),'OP') AS Exception_Type, 		CASE WHEN vg.ORDER_PRIORITY_EXCEPTION = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #order_status t 	--LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM vista_reporting.dbo.orders_cross) oc 	--on t.ord_num = oc.pm_ord 	LEFT JOIN VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_EQ_TABLE vg on t.trd_ord = vg.ORD_NUM 	WHERE t.Status = '2C1' 	UNION ALL 	--CP Direction 	SELECT DISTINCT 		t.ORD_NUM AS PM_ORD,  		NULL AS TRD_ORD, 		NULL AS Multi_Fund_ID, 		t.DEALING_DESK, 		--t.CP_DIRECTION_FLAG AS [Exception_Value], 		CASE WHEN cd.[CP Alert String] IS NOT NULL THEN 1 ELSE 0 END AS [Exception_Value], 		NULL AS CREATE_TIME,  		CONVERT(VARCHAR(10),'CPDir') AS Exception_Type, 		CASE WHEN cd.[CP Alert String] IS NOT NULL THEN '2C2' ELSE '2C1' END AS Status, 		--CASE WHEN (@BROKER_CODE != NULL OR @COMMENTS_VALUE != NULL OR @COMMENTS_VALUE !='' )  THEN '2C1' 		--ELSE '2C2' END AS STATUS, 		--'2C1' AS STATUS, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #order_status t 	LEFT JOIN Vista_Reporting.dbo.COUNTERPARTY_DIRECTION_TABLE_EQ cd ON cd.ORD_NUM = t.ORD_NUM 	WHERE T.STATUS= '2C1' 	UNION ALL 	--GH 	SELECT DISTINCT  		t.ORD_NUM AS PM_ORD,  		NULL AS TRD_ORD, 		NULL AS MULTI_FUND_ID, 		t.DEALING_DESK, 		1 AS [Exception_Value], 		NULL AS CREATE_TIME,  		CONVERT(VARCHAR(10),'GH') AS Exception_Type, 		'2C2', 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #order_status t 	WHERE t.Status = '2C1' 	UNION ALL 	--Price Benchmark 	SELECT DISTINCT  		t.ORD_NUM AS PM_ORD,  		t.TRD_ORD, 		t.MULTI_FUND_ID, 		t.DEALING_DESK, 		pb.PRICE_BENCHMARK_FLAG AS [Exception_Value], 		NULL AS CREATE_TIME, 		CONVERT(VARCHAR(10),'PB') AS Exception_Type, 		CASE WHEN pb.PRICE_BENCHMARK_FLAG = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #order_status t 	--LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM vista_reporting.dbo.orders_cross) oc 	--on t.ord_num = oc.pm_ord 	--LEFT JOIN (SELECT DISTINCT ORD_NUM, ORD_DETAIL_FUND FROM VISTA_STAGING.dbo.ORDERS_DETAIL) od ON t.ORD_NUM = od.ORD_NUM 	--LEFT JOIN vista_reporting.dbo.trades trd on t.trd_ord = trd.ORD_NUM AND trd.FUND = od.ORD_DETAIL_FUND 	LEFT JOIN VISTA_REPORTING.dbo.REUTERS_PRICE_BENCHMARK_TABLE pb on t.MULTI_FUND_ID = pb.MULTI_FUND_ID 	WHERE t.Status = '2C1' 		  AND pb.MULTI_FUND_ID IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly). 	--Amendments  	UNION ALL 	SELECT DISTINCT  	t.ORD_NUM AS PM_ORD,  	t.TRD_ORD, 	t.MULTI_FUND_ID, 	t.DEALING_DESK, 	AF.AMENDMENT_FLAG AS [Exception_Value],  	AF.AMENDMENT_FLAG_CREATETIME AS CREATE_TIME, 	CONVERT(VARCHAR(10),'AF') AS Exception_Type, 	CASE WHEN AF.AMENDMENT_FLAG  = 1 THEN '2C2' ELSE '2C1' END AS Status, 	NULL AS FINAL_UPDATED_TIME, 	trd.TOUCH_COUNT, 	NULL AS ROW_ID 	FROM #order_status t 	--LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM vista_reporting.dbo.orders_cross) oc 	--on t.ord_num = oc.pm_ord 	LEFT JOIN (SELECT ORD_NUM, TOUCH_COUNT FROM Vista_Reporting.dbo.TRADES) trd on t.trd_ord = trd.ORD_NUM 	LEFT JOIN VISTA_STAGING.DBO.VG_15_AMENDMENT_FLAG_EQ_TABLE  AF ON t.MULTI_FUND_ID = AF.MULTI_FUND_ID AND trd.TOUCH_COUNT = AF.TOUCH_COUNT 	WHERE t.Status = '2C1' 		  AND AF.TOUCH_COUNT IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly). 	--Fair Allocation 	UNION ALL 	SELECT DISTINCT 	t.ORD_NUM AS PM_ORD, 	NULL AS TRD_ORD, 	NULL AS MULTI_FUND_ID, 	t.DEALING_DESK, 	1 AS [Exception_Value], 	NULL AS CREATE_TIME, 	CONVERT(VARCHAR(10),'FA') AS Exception_Type, 	'2C2', 	NULL AS FINAL_UPDATED_TIME, 	NULL AS TOUCH_COUNT, 	NULL AS ROW_ID 	FROM #order_status t 	WHERE t.Status = '2C1' 	--Timely Release 	UNION ALL 	SELECT DISTINCT 		t.ORD_NUM AS PM_ORD,  		NULL AS TRD_ORD, 		NULL AS Multi_Fund_ID, 		tr.DEALING_DESK, 		max(tr.TIMELY_RELEASE_EXCEPTION) AS [Exception_Value], 		MIN(tr.TR_CREATETIME) AS CREATE_TIME, 		CONVERT(VARCHAR(10),'TRel') AS Exception_Type, 		CASE WHEN max(tr.TIMELY_RELEASE_EXCEPTION) = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #order_status t 	LEFT JOIN VISTA_STAGING.dbo.VG_11_TIMELY_RELEASE_EQ_TABLE tr ON t.ORD_NUM = tr.ORD_NUM 	WHERE t.Status = '2C1' 	group by t.ORD_NUM, tr.Dealing_Desk 	--Implementation Shortfall 	UNION ALL 	SELECT DISTINCT 		t.ORD_NUM AS PM_ORD,  		t.TRD_ORD, 		NULL AS Multi_Fund_ID, 		im.DEALING_DESK, 		ISNULL(im.IM_EXCEPTION,0)  AS [Exception_Value], 		im.IM_CREATEDATE AS CREATE_TIME, 		CONVERT(VARCHAR(10),'IS') AS Exception_Type, 		CASE WHEN ISNULL(im.IM_EXCEPTION,0) = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		im.ID AS ROW_ID 	FROM #order_status t 	--LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM vista_reporting.dbo.orders_cross) oc 	--on t.ord_num = oc.pm_ord 	LEFT JOIN VISTA_STAGING.dbo.VG_IMPLEMENTATION_SHORTFALL_EQ_TABLE im on t.trd_ord = im.ORD_NUM 	WHERE t.Status = '2C1' 	UNION ALL 	--Outside High Low 	SELECT DISTINCT 		t.ORD_NUM AS PM_ORD,  		t.TRD_ORD, 		NULL AS Multi_Fund_ID, 		'Equity' AS DEALING_DESK, 		ISNULL(hl.HL_EXCEPTION,0)  AS [Exception_Value], 		hl.HL_CREATEDATE AS CREATE_TIME, 		CONVERT(VARCHAR(10),'HL') AS Exception_Type, 		CASE WHEN ISNULL(hl.HL_EXCEPTION,0) = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		hl.ID AS ROW_ID 	FROM #order_status t 	--LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM vista_reporting.dbo.orders_cross) oc 	--on t.ord_num = oc.pm_ord 	LEFT JOIN VISTA_STAGING.dbo.VG_MARKET_HIGH_LOW_TABLE hl on t.trd_ord = hl.ORD_NUM 	WHERE t.Status = '2C1' 	UNION ALL 	--Commission Report  	SELECT DISTINCT  		t.ORD_NUM AS PM_ORD,  		t.TRD_ORD, 		t.MULTI_FUND_ID, 		cr.DEALING_DESK, 		ISNULL(cr.COMMISSION_EXCEPTION,0) AS [Exception_Value], 		cr.CE_CREATE_TIME AS CREATE_TIME, 		CONVERT(VARCHAR(10),'Cmsn') AS Exception_Type, 		CASE WHEN ISNULL(cr.COMMISSION_EXCEPTION,0) = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #order_status t 	--LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM vista_reporting.dbo.orders_cross) oc 	--on t.ord_num = oc.pm_ord 	--LEFT JOIN (SELECT DISTINCT ORD_NUM, ORD_DETAIL_FUND FROM VISTA_STAGING.dbo.ORDERS_DETAIL) od ON t.ORD_NUM = od.ORD_NUM 	--LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, FUND FROM vista_reporting.dbo.trades) trd on t.trd_ord = trd.ORD_NUM AND trd.FUND = od.ORD_DETAIL_FUND 	LEFT JOIN VISTA_STAGING.dbo.VG_COMMISSION_EXCEPTION_EQ_TABLE cr 	on t.MULTI_FUND_ID = cr.MULTI_FUND_ID 	WHERE t.Status = '2C1' 	AND cr.MULTI_FUND_ID IS NOT NULL  	UNION ALL 	--Futures VWAP (raise every PM order that is sampled for inspection if it is a Futures order) 	SELECT DISTINCT 		t.ORD_NUM AS PM_ORD,  		NULL AS TRD_ORD, 		NULL AS MULTI_FUND_ID, 		p.DEALING_DESK, 		1 AS [Exception_Value], 		NULL AS CREATE_DATE, 		CONVERT(VARCHAR(10),'F_VWAP') AS Exception_Type, 		'2C2' AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #order_status t 	--LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM vista_reporting.dbo.orders_cross) oc 	--on t.ord_num = oc.pm_ord 	LEFT JOIN VISTA_REPORTING.dbo.COMPLIANCE_PRIM_INST_EQ p ON t.TRD_ORD = p.ORD_NUM 	WHERE  		t.Status = '2C1' 		AND p.INST_TYPE = 'EQUITY FUTURES' -- Only want Futures VWAP for Equity Futures asset type.   	IF OBJECT_ID('VISTA_REPORTING.dbo.INSPECTION_EXCEPTION_COUNT', 'U') IS NULL  	SELECT  		@INSPECTION_NAME AS INSPECTION_NAME, 		@Start_Date AS INSPECTION_START_DATE, 		@End_Date AS INSPECTION_END_DATE, 		GETDATE() AS INSPECTION_SAMPLE_DATE, 		'Equity' AS DEALING_DESK, 		(SELECT COUNT(DISTINCT MULTI_FUND_ID) FROM #exceptions) AS [Number_Trades_Sampled], 		Exception_Type,  		COUNT(DISTINCT COALESCE(MULTI_FUND_ID, TRD_ORD, PM_ORD)) AS EXCEPTION_COUNT 	INTO VISTA_REPORTING.dbo.INSPECTION_EXCEPTION_COUNT 	FROM #exceptions 	WHERE Exception_Value >= 1 	GROUP BY Exception_Type 	 	ELSE  	INSERT INTO VISTA_REPORTING.dbo.INSPECTION_EXCEPTION_COUNT 	SELECT  		@INSPECTION_NAME, 		@Start_Date, 		@End_Date, 		GETDATE(), 		'Equity', 		(SELECT COUNT(DISTINCT MULTI_FUND_ID) FROM #exceptions), 		Exception_Type,  		COUNT(DISTINCT COALESCE(MULTI_FUND_ID, TRD_ORD, PM_ORD)) 	FROM #exceptions 	WHERE Exception_Value >= 1 	GROUP BY Exception_Type  	 	IF OBJECT_ID('VISTA_REPORTING.dbo.COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE', 'U') IS NULL  	SELECT DISTINCT * 	INTO VISTA_REPORTING.dbo.COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE 	FROM #exceptions 	 	MERGE VISTA_REPORTING.dbo.COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE AS T 	USING #exceptions AS S 	ON (T.PM_ORD = S.PM_ORD 		AND ISNULL(T.TRD_ORD,'-1') = ISNULL(S.TRD_ORD,'-1') 		AND ISNULL(T.MULTI_FUND_ID,'-1') = ISNULL(S.MULTI_FUND_ID,'-1') 		AND ISNULL(T.TOUCH_COUNT,'-1') = ISNULL(S.TOUCH_COUNT,'-1') 		AND T.DEALING_DESK = S.DEALING_DESK 		AND T.Exception_Type = S.Exception_Type 		AND ISNULL(T.ROW_ID,'-1')=ISNULL(S.ROW_ID,'-1')) 	WHEN MATCHED 		THEN  		UPDATE SET -- Do nothing 			T.PM_ORD = T.PM_ORD 	WHEN NOT MATCHED  		THEN  		INSERT (PM_ORD,		TRD_ORD,	MULTI_FUND_ID,		TOUCH_COUNT,   DEALING_DESK,		[Exception_Value],		Exception_Type,		Status,		FINAL_UPDATED_TIME, ROW_ID) 		VALUES (S.PM_ORD,	S.TRD_ORD,	S.MULTI_FUND_ID,	S.TOUCH_COUNT, S.DEALING_DESK,		S.[Exception_Value],	S.Exception_Type,	S.Status,	S.FINAL_UPDATED_TIME, S.ROW_ID);   	IF OBJECT_ID('tempdb..#temp_ma_table', 'U') IS NOT NULL DROP TABLE #temp_ma_table 	SELECT DISTINCT  		tm.MULTI_FUND_ID,  		tm.TOUCH_COUNT,  		tm.TRADER,  		tm.PLACEMENT_NUM,  		tm.AUTH_TIME, 		op.Exception_Type  	INTO #temp_ma_table 	FROM VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE tm 	INNER JOIN #exceptions op ON op.MULTI_FUND_ID = tm.MULTI_FUND_ID  	WHERE tm.DEALING_DESK = 'Equity' AND op.Exception_Type = 'AF'   	IF OBJECT_ID('tempdb..#temp_mm_table', 'U') IS NOT NULL DROP TABLE #temp_mm_table 	SELECT DISTINCT  		tm.MULTI_FUND_ID AS ID,  		tm.DEALER,  		tm.PLACEMENT_NUM,  		tm.Auth_TIME,  		--tm.DEALING_DESK, 		op.Exception_Type  	INTO #temp_mm_table 	FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE tm 	INNER JOIN #exceptions op ON op.MULTI_FUND_ID = tm.MULTI_FUND_ID 	WHERE tm.DEALING_DESK = 'Equity' AND op.Exception_Type in ('PD', 'NWQ', 'TRec')   	IF OBJECT_ID('tempdb..#temp_mp_table', 'U') IS NOT NULL DROP TABLE #temp_mp_table 	SELECT DISTINCT  		tm.ORD_NUM AS ID,  		tm.DEALER,  		tm.PLACEMENT_NUM,  		tm.AUTH_TIME, 		op.Exception_Type 	INTO #temp_mp_table 	FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER tm  	INNER JOIN #exceptions op ON op.PM_ORD = tm.ORD_NUM	 	WHERE tm.DEALING_DESK = 'Equity' AND op.Exception_Type in ('TEx', 'TRel')   	IF OBJECT_ID('tempdb..#temp_mt_table', 'U') IS NOT NULL DROP TABLE #temp_mt_table 	SELECT DISTINCT  		tm.ORD_NUM AS ID,  		tm.DEALER,  		tm.PLACEMENT_NUM,  		tm.[Auth Time] AS AUTH_TIME, 		op.Exception_Type 	INTO #temp_mt_table 	FROM VISTA_REPORTING.dbo.MASTER_TRD_ORDER_TABLE tm 	INNER JOIN #exceptions op ON op.TRD_ORD = tm.ORD_NUM 	WHERE tm.DEALING_DESK = 'Equity' AND op.Exception_Type in ('OA')  	UNION ALL  	--IF OBJECT_ID('tempdb..#temp_mo_table', 'U') IS NOT NULL DROP TABLE #temp_mo_table 	SELECT DISTINCT  		tm.ORD_NUM,  		tm.Dealer,  		tm.Placement_Num,  		tm.[Auth Time], 		op.Exception_Type  	--INTO #temp_mo_table 	FROM VISTA_REPORTING.dbo.MASTER_ORDER_PRIORITY_TABLE tm 	INNER JOIN #exceptions op ON op.TRD_ORD = tm.ORD_NUM 	WHERE tm.DEALING_DESK = 'Equity' AND op.Exception_Type in ('OP')   	IF OBJECT_ID('tempdb..#temp_audit_table_temp', 'U') IS NOT NULL DROP TABLE #temp_audit_table_temp 	SELECT DISTINCT 		e.MULTI_FUND_ID, 		e.TRD_ORD, 		e.PM_ORD, 		'Commission Report' AS EXCEPTION_TYPE, 		e.MULTI_FUND_ID AS ID, 		NULL AS REASON, 		NULL AS COMMENT, 		cs.STATUS, 		e.CREATE_TIME, 		e.DEALING_DESK, 		t.EXECUTION_TIME, 		e.FINAL_UPDATED_TIME, 		ci.AUTH_TIME, 		NULL AS PLACEMENT_NUM, 		cs.STATUS_CODE, 		ci.Dealer AS TRD_TRADER 	INTO #temp_audit_table_temp 	FROM #exceptions e 	LEFT JOIN VISTA_REPORTING.dbo.COMPLIANCE_EXCEPTIONS_STATUS_TABLE cs ON cs.STATUS_CODE=e.Status 	INNER JOIN (SELECT ci.MULTI_FUND_ID, ci.AUTH_TIME, ci.Dealer  			   FROM VISTA_REPORTING.dbo.COMMISSIONS_INCREASE_EQ ci) ci ON ci.MULTI_FUND_ID=e.MULTI_FUND_ID AND e.Exception_Type = 'Cmsn' 	LEFT JOIN #temp_eq_trades t ON t.MULTI_FUND_ID = e.MULTI_FUND_ID  	UNION ALL  	SELECT DISTINCT 		e.MULTI_FUND_ID, 		e.TRD_ORD, 		e.PM_ORD, 		'Counterparty Direction' AS EXCEPTION_TYPE, 		e.PM_ORD AS ID, 		NULL AS REASON, 		NULL AS COMMENT, 		cs.STATUS, 		e.CREATE_TIME, 		e.DEALING_DESK, 		t.EXECUTION_TIME, 		e.FINAL_UPDATED_TIME, 		cd.AUTH_TIME, 		cd.PLACEMENT_NUM AS PLACEMENT_NUM, 		cs.STATUS_CODE, 		cd.Dealer AS TRD_TRADER 	FROM #exceptions e 	LEFT JOIN VISTA_REPORTING.dbo.COMPLIANCE_EXCEPTIONS_STATUS_TABLE cs ON cs.STATUS_CODE=e.Status 	INNER JOIN (SELECT cp.ORD_NUM, cp.AUTH_TIME, cp.PLACEMENT_NUM, cp.Dealer 			   FROM VISTA_REPORTING.dbo.COUNTERPARTY_DIRECTION_TABLE_EQ cp) cd ON cd.ORD_NUM=e.PM_ORD AND e.Exception_Type = 'CPDir' 	LEFT JOIN #temp_eq_trades t ON t.MULTI_FUND_ID = e.MULTI_FUND_ID  	UNION ALL  	SELECT DISTINCT 		e.MULTI_FUND_ID, 		e.TRD_ORD, 		e.PM_ORD, 		'Fair Allocation' AS EXCEPTION_TYPE, 		e.PM_ORD AS ID, 		NULL AS REASON, 		NULL AS COMMENT, 		cs.STATUS, 		e.CREATE_TIME, 		e.DEALING_DESK, 		t.EXECUTION_TIME, 		e.FINAL_UPDATED_TIME, 		fa.AUTH_TIME, 		NULL AS PLACEMENT_NUM, 		cs.STATUS_CODE, 		fa.Dealer AS TRD_TRADER 	FROM #exceptions e 	LEFT JOIN VISTA_REPORTING.dbo.COMPLIANCE_EXCEPTIONS_STATUS_TABLE cs ON cs.STATUS_CODE=e.Status 	INNER JOIN (SELECT f.PM_ORD, f.AUTH_TIME, f.Dealer, f.DEALING_DESK 			   FROM VISTA_REPORTING.dbo.FAIR_ALLOCATION f) fa ON fa.PM_ORD=e.PM_ORD AND fa.DEALING_DESK = 'Equity' AND e.Exception_Type = 'FA' 	LEFT JOIN #temp_eq_trades t ON t.MULTI_FUND_ID = e.MULTI_FUND_ID  	UNION ALL  	SELECT DISTINCT 		e.MULTI_FUND_ID, 		e.TRD_ORD, 		e.PM_ORD, 		'Futures_VWAP' AS EXCEPTION_TYPE, 		e.PM_ORD AS ID, 		NULL AS REASON, 		NULL AS COMMENT, 		cs.STATUS, 		e.CREATE_TIME, 		e.DEALING_DESK, 		t.EXECUTION_TIME, 		e.FINAL_UPDATED_TIME, 		fv.AUTH_TIME, 		NULL AS PLACEMENT_NUM, 		cs.STATUS_CODE, 		fv.Dealer AS TRD_TRADER 	FROM #exceptions e 	LEFT JOIN VISTA_REPORTING.dbo.COMPLIANCE_EXCEPTIONS_STATUS_TABLE cs ON cs.STATUS_CODE=e.Status 	INNER JOIN (SELECT vw.PM_ORD, vw.AUTH_TIME, vw.Dealer 			   FROM VISTA_REPORTING.dbo.Futures_VWAP_EQ vw) fv ON fv.PM_ORD=e.PM_ORD AND e.Exception_Type = 'F_VWAP' 	LEFT JOIN #temp_eq_trades t ON t.MULTI_FUND_ID = e.MULTI_FUND_ID  	UNION ALL  	SELECT DISTINCT 		e.MULTI_FUND_ID, 		e.TRD_ORD, 		e.PM_ORD, 		'Gifts & Hospitality' AS EXCEPTION_TYPE, 		e.PM_ORD AS ID, 		NULL AS REASON, 		NULL AS COMMENT, 		cs.STATUS, 		e.CREATE_TIME, 		e.DEALING_DESK, 		t.EXECUTION_TIME, 		e.FINAL_UPDATED_TIME, 		gh.AUTH_TIME, 		gh.PLACEMENT_NUM AS PLACEMENT_NUM, 		cs.STATUS_CODE, 		gh.Dealer AS TRD_TRADER 	FROM #exceptions e 	LEFT JOIN VISTA_REPORTING.dbo.COMPLIANCE_EXCEPTIONS_STATUS_TABLE cs ON cs.STATUS_CODE=e.Status 	INNER JOIN (SELECT g.PM_ORD, g.AUTH_TIME, g.PLACEMENT_NUM, g.Dealer 			   FROM VISTA_REPORTING.dbo.GIFTS_AND_HOSPITALITY_EQ g) gh ON gh.PM_ORD=e.PM_ORD AND e.Exception_Type = 'GH' 	LEFT JOIN #temp_eq_trades t ON t.MULTI_FUND_ID = e.MULTI_FUND_ID  	UNION ALL  	SELECT DISTINCT 		e.MULTI_FUND_ID, 		e.TRD_ORD, 		e.PM_ORD, 		'Implementation Shortfall Exception' AS EXCEPTION_TYPE, 		e.ROW_ID AS ID, 		NULL AS REASON, 		NULL AS COMMENT, 		cs.STATUS, 		e.CREATE_TIME, 		e.DEALING_DESK, 		t.EXECUTION_TIME, 		e.FINAL_UPDATED_TIME, 		im.AUTH_TIME, 		NULL AS PLACEMENT_NUM, 		cs.STATUS_CODE, 		im.Trader AS TRD_TRADER 	FROM #exceptions e 	LEFT JOIN VISTA_REPORTING.dbo.COMPLIANCE_EXCEPTIONS_STATUS_TABLE cs ON cs.STATUS_CODE=e.Status 	INNER JOIN (SELECT i.Row_ID, i.AUTH_TIME, i.Trader 			   FROM VISTA_REPORTING.dbo.IMPLEMENTATION_SHORTFALL_EQ i) im ON im.Row_ID=e.ROW_ID AND e.Exception_Type = 'IS' 	LEFT JOIN #temp_eq_trades t ON t.MULTI_FUND_ID = e.MULTI_FUND_ID  	UNION ALL  	SELECT DISTINCT 		e.MULTI_FUND_ID, 		e.TRD_ORD, 		e.PM_ORD, 		'Outside High Low' AS EXCEPTION_TYPE, 		e.ROW_ID AS ID, 		NULL AS REASON, 		NULL AS COMMENT, 		cs.STATUS, 		e.CREATE_TIME, 		e.DEALING_DESK, 		t.EXECUTION_TIME, 		e.FINAL_UPDATED_TIME, 		hl.AUTH_TIME, 		NULL AS PLACEMENT_NUM, 		cs.STATUS_CODE, 		hl.Trader AS TRD_TRADER 	FROM #exceptions e 	LEFT JOIN VISTA_REPORTING.dbo.COMPLIANCE_EXCEPTIONS_STATUS_TABLE cs ON cs.STATUS_CODE=e.Status 	INNER JOIN (SELECT h.ID, h.AUTH_TIME, h.Trader  			   FROM VISTA_REPORTING.dbo.MARKET_HIGH_LOW_EQ h) hl ON hl.ID=e.ROW_ID AND e.Exception_Type = 'HL' 	LEFT JOIN #temp_eq_trades t ON t.MULTI_FUND_ID = e.MULTI_FUND_ID  	UNION ALL  	SELECT DISTINCT 		e.MULTI_FUND_ID, 		e.TRD_ORD, 		e.PM_ORD, 		'Amendment Analysis' AS EXCEPTION_TYPE, 		e.MULTI_FUND_ID AS ID, 		NULL AS REASON, 		NULL AS COMMENT, 		cs.STATUS, 		e.CREATE_TIME, 		e.DEALING_DESK, 		t.EXECUTION_TIME, 		e.FINAL_UPDATED_TIME, 		ma.AUTH_TIME, 		ma.PLACEMENT_NUM AS PLACEMENT_NUM, 		cs.STATUS_CODE, 		ma.TRADER AS TRD_TRADER 	FROM #exceptions e 	LEFT JOIN VISTA_REPORTING.dbo.COMPLIANCE_EXCEPTIONS_STATUS_TABLE cs ON cs.STATUS_CODE=e.Status 	INNER JOIN #temp_ma_table ma ON ma.MULTI_FUND_ID=e.MULTI_FUND_ID AND e.TOUCH_COUNT=ma.TOUCH_COUNT AND e.Exception_Type = 'AF' 	LEFT JOIN #temp_eq_trades t ON t.MULTI_FUND_ID = e.MULTI_FUND_ID  	UNION ALL  	SELECT DISTINCT 		e.MULTI_FUND_ID, 		e.TRD_ORD, 		e.PM_ORD, 		CASE  			WHEN e.Exception_Type = 'PD' THEN 'Quote Exception' 			WHEN e.Exception_Type = 'PB' THEN 'Price Benchmark' 			WHEN e.Exception_Type = 'NWQ' THEN 'NWQ Exception' 			WHEN e.Exception_Type = 'TRec' THEN 'Timely Recording Exception' 			ELSE NULL 		END AS EXCEPTION_TYPE, 		e.MULTI_FUND_ID AS ID, 		NULL AS REASON, 		NULL AS COMMENT, 		cs.STATUS, 		e.CREATE_TIME, 		e.DEALING_DESK, 		t.EXECUTION_TIME, 		e.FINAL_UPDATED_TIME, 		mm.AUTH_TIME, 		mm.PLACEMENT_NUM, 		cs.STATUS_CODE, 		mm.Dealer 	FROM #exceptions e 	LEFT JOIN VISTA_REPORTING.dbo.COMPLIANCE_EXCEPTIONS_STATUS_TABLE cs ON cs.STATUS_CODE=e.Status 	LEFT JOIN #temp_mm_table mm ON mm.ID=e.MULTI_FUND_ID 	LEFT JOIN #temp_eq_trades t ON t.MULTI_FUND_ID = e.MULTI_FUND_ID 	WHERE ISNULL(e.Exception_Type, '') in ('PD', 'PB', 'NWQ', 'TRec')  	UNION ALL  	SELECT DISTINCT 		e.MULTI_FUND_ID, 		e.TRD_ORD, 		e.PM_ORD, 		CASE  			WHEN e.Exception_Type = 'OA' THEN 'Order Aggregation Exception' 			WHEN e.Exception_Type = 'OP' THEN 'Order Priority Exception' 			ELSE NULL 		END AS EXCEPTION_TYPE, 		CASE  			WHEN e.Exception_Type = 'OA' THEN e.MULTI_FUND_ID 			WHEN e.Exception_Type = 'OP' THEN e.TRD_ORD 			ELSE NULL 		END AS ID, 		NULL AS REASON, 		NULL AS COMMENT, 		cs.STATUS, 		e.CREATE_TIME, 		e.DEALING_DESK, 		t.EXECUTION_TIME, 		e.FINAL_UPDATED_TIME, 		mm2.AUTH_TIME, 		mm2.PLACEMENT_NUM, 		cs.STATUS_CODE, 		mm2.Dealer AS TRD_TRADER 	FROM #exceptions e 	LEFT JOIN VISTA_REPORTING.dbo.COMPLIANCE_EXCEPTIONS_STATUS_TABLE cs ON cs.STATUS_CODE=e.Status 	INNER JOIN #temp_mt_table mm2 ON mm2.ID=e.TRD_ORD AND mm2.Exception_Type = e.Exception_Type 	LEFT JOIN #temp_eq_trades t ON t.MULTI_FUND_ID = e.MULTI_FUND_ID  	UNION ALL  	SELECT DISTINCT 		e.MULTI_FUND_ID, 		e.TRD_ORD, 		e.PM_ORD, 		CASE  			WHEN e.Exception_Type = 'TEx' THEN 'Timely Execution Exception' 			WHEN e.Exception_Type = 'TRel' THEN 'Timely Release' 			ELSE NULL 		END AS EXCEPTION_TYPE, 		CASE  			WHEN e.Exception_Type = 'TEx' THEN e.PM_ORD 			WHEN e.Exception_Type = 'TRel' THEN e.PM_ORD 			ELSE NULL 		END AS ID, 		NULL AS REASON, 		NULL AS COMMENT, 		cs.STATUS, 		e.CREATE_TIME, 		e.DEALING_DESK, 		t.EXECUTION_TIME, 		e.FINAL_UPDATED_TIME, 		mm3.AUTH_TIME, 		mm3.PLACEMENT_NUM, 		cs.STATUS_CODE, 		mm3.Dealer AS TRD_TRADER 	FROM #exceptions e 	LEFT JOIN VISTA_REPORTING.dbo.COMPLIANCE_EXCEPTIONS_STATUS_TABLE cs ON cs.STATUS_CODE=e.Status 	INNER JOIN #temp_mp_table mm3 ON mm3.ID=e.PM_ORD AND mm3.Exception_Type = e.Exception_Type 	LEFT JOIN #temp_eq_trades t ON t.MULTI_FUND_ID = e.MULTI_FUND_ID   	IF OBJECT_ID('tempdb..#temp_audit_table', 'U') IS NOT NULL DROP TABLE #temp_audit_table 	SELECT  		PM_ORD, 		TRD_ORD, 		MULTI_FUND_ID, 		EXCEPTION_TYPE, 		ID, 		REASON, 		COMMENT, 		STATUS, 		CREATE_TIME, 		DEALING_DESK, 		FINAL_UPDATED_TIME, 		STATUS_CODE,  		MIN(EXECUTION_TIME) AS EXECUTION_TIME, --In cases where the execution time changes, take the first 		MIN(AUTH_TIME) AS AUTH_TIME, --In cases where the auth time changes, take the first 		MIN(PLACEMENT_NUM) AS PLACEMENT_NUM, --In cases where there are multiple placements, take the first 		MIN(TRD_TRADER) AS TRD_TRADER --In cases where there are multiple traders, take the first 	INTO #temp_audit_table 	FROM #temp_audit_table_temp 	GROUP BY 		PM_ORD, 		TRD_ORD, 		MULTI_FUND_ID, 		EXCEPTION_TYPE, 		ID, 		REASON, 		COMMENT, 		STATUS, 		CREATE_TIME, 		DEALING_DESK, 		FINAL_UPDATED_TIME, 		STATUS_CODE  	 	IF OBJECT_ID('VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE', 'U') IS NULL  	SELECT DISTINCT * 	INTO VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE 	FROM #temp_audit_table 	 	MERGE VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE AS T 	USING #temp_audit_table AS S 	ON (T.PM_ORD = S.PM_ORD 		AND ISNULL(T.TRD_ORD,'-1') = ISNULL(S.TRD_ORD,'-1') 		AND ISNULL(T.MULTIFUND,'-1') = ISNULL(S.MULTI_FUND_ID,'-1') 		AND T.DEALING_DESK = S.DEALING_DESK 		AND T.Exception_Type = S.Exception_Type 		AND ISNULL(T.ID,'-1')=ISNULL(S.ID,'-1')) 	WHEN MATCHED 		THEN  		UPDATE SET -- Do nothing 			T.PM_ORD = T.PM_ORD 	WHEN NOT MATCHED  		THEN  		INSERT (MULTIFUND, TRD_ORD,	PM_ORD, EXCEPTION_TYPE, ID, REASON, COMMENT, STATUS, CREATE_TIME, DEALING_DESK, EXECUTION_TIME, FINAL_UPDATED_TIME, AUTH_TIME, CLIENT_EXECUTION_NUM, PLACEMENT_NUM, STATUS_CODE, TRD_TRADER) 		VALUES (S.MULTI_FUND_ID, S.TRD_ORD,	S.PM_ORD, S.EXCEPTION_TYPE, S.ID, S.REASON, S.COMMENT, S.STATUS, S.CREATE_TIME, S.DEALING_DESK, S.EXECUTION_TIME, S.FINAL_UPDATED_TIME, S.AUTH_TIME, NULL, S.PLACEMENT_NUM, S.STATUS_CODE, S.TRD_TRADER);   	IF OBJECT_ID('tempdb..#temp_trade_table', 'U') IS NOT NULL DROP TABLE #temp_trade_table 	IF OBJECT_ID('tempdb..#orders_pop', 'U') IS NOT NULL DROP TABLE #orders_pop 	IF OBJECT_ID('tempdb..#max_touch', 'U') IS NOT NULL DROP TABLE #max_touch  	IF OBJECT_ID('tempdb..#temp_distinct_orders', 'U') IS NOT NULL DROP TABLE #temp_distinct_orders 	IF OBJECT_ID('tempdb..#temp_inst_type_table', 'U') IS NOT NULL DROP TABLE #temp_inst_type_table 	IF OBJECT_ID('tempdb..#temp_trades_table', 'U') IS NOT NULL DROP TABLE #temp_trades_table 	IF OBJECT_ID('tempdb..#temp_NC_rank_EQUITY_interim', 'U') IS NOT NULL DROP TABLE #temp_NC_rank_EQUITY_interim 	IF OBJECT_ID('tempdb..#temp_NC_rank_EQUITY', 'U') IS NOT NULL DROP TABLE #temp_NC_rank_EQUITY 	IF OBJECT_ID('tempdb..#temp_BECOH_EQUITY_table', 'U') IS NOT NULL DROP TABLE #temp_BECOH_EQUITY_table 	IF OBJECT_ID('tempdb..#pre_sample_table_EQUITY', 'U') IS NOT NULL DROP TABLE #pre_sample_table_EQUITY 	IF OBJECT_ID('tempdb..#Samples_elevated_EQUITY', 'U') IS NOT NULL DROP TABLE #Samples_elevated_EQUITY 	IF OBJECT_ID('tempdb..#Samples_normal_EQUITY', 'U') IS NOT NULL DROP TABLE #Samples_normal_EQUITY 	IF OBJECT_ID('tempdb..#Samples_EQUITY', 'U') IS NOT NULL DROP TABLE #Samples_EQUITY 	IF OBJECT_ID('tempdb..#temp_NC_rank_FUTURES', 'U') IS NOT NULL DROP TABLE #temp_NC_rank_FUTURES 	IF OBJECT_ID('tempdb..#temp_BECOH_FUTURES_table', 'U') IS NOT NULL DROP TABLE #temp_BECOH_FUTURES_table 	IF OBJECT_ID('tempdb..#pre_sample_table_FUTURES', 'U') IS NOT NULL DROP TABLE #pre_sample_table_FUTURES 	IF OBJECT_ID('tempdb..#temp_NC_rank_OPTIONS', 'U') IS NOT NULL DROP TABLE #temp_NC_rank_OPTIONS 	IF OBJECT_ID('tempdb..#temp_BECOH_OPTIONS_table', 'U') IS NOT NULL DROP TABLE #temp_BECOH_OPTIONS_table 	IF OBJECT_ID('tempdb..#pre_sample_table_OPTIONS', 'U') IS NOT NULL DROP TABLE #pre_sample_table_OPTIONS 	IF OBJECT_ID('tempdb..#temp_NC_rank_CONVT', 'U') IS NOT NULL DROP TABLE #temp_NC_rank_CONVT 	IF OBJECT_ID('tempdb..#temp_BECOH_CONVT_table', 'U') IS NOT NULL DROP TABLE #temp_BECOH_CONVT_table 	IF OBJECT_ID('tempdb..#pre_sample_table_CONVT', 'U') IS NOT NULL DROP TABLE #pre_sample_table_CONVT  	IF OBJECT_ID('tempdb..#temp_NC_rank_SWAP', 'U') IS NOT NULL DROP TABLE #temp_NC_rank_SWAP 	IF OBJECT_ID('tempdb..#temp_BECOH_SWAP_table', 'U') IS NOT NULL DROP TABLE #temp_BECOH_SWAP_table 	IF OBJECT_ID('tempdb..#pre_sample_table_SWAP', 'U') IS NOT NULL DROP TABLE #pre_sample_table_SWAP 	IF OBJECT_ID('tempdb..#pre_sample_table_ALL','U') IS NOT NULL DROP TABLE #pre_sample_table_ALL 	IF OBJECT_ID('tempdb..#Samples_elevated_ALL', 'U') IS NOT NULL DROP TABLE #Samples_elevated_ALL 	IF OBJECT_ID('tempdb..#Samples_normal_ALL', 'U') IS NOT NULL DROP TABLE #Samples_normal_ALL 	IF OBJECT_ID('tempdb..#Samples_FUTURES_OPTIONS_CONVT_SWAP', 'U') IS NOT NULL DROP TABLE #Samples_FUTURES_OPTIONS_CONVT_SWAP 	IF OBJECT_ID('tempdb..#Samples', 'U') IS NOT NULL DROP TABLE #Samples 	IF OBJECT_ID('tempdb..#topped_up_samples_elevated', 'U') IS NOT NULL DROP TABLE #topped_up_samples_elevated 	IF OBJECT_ID('tempdb..#topped_up_samples_normal', 'U') IS NOT NULL DROP TABLE #topped_up_samples_normal 	IF OBJECT_ID('tempdb..#sample_trades_orders', 'U') IS NOT NULL DROP TABLE #sample_trades_orders 	IF OBJECT_ID('tempdb..#order_status', 'U') IS NOT NULL DROP TABLE #order_status 	IF OBJECT_ID('tempdb..#temp_comp_order_status', 'U') IS NOT NULL DROP TABLE #temp_comp_order_status 	IF OBJECT_ID('tempdb..#temp_eq_trades', 'U') IS NOT NULL DROP TABLE #temp_eq_trades 	IF OBJECT_ID('tempdb..#exceptions', 'U') IS NOT NULL DROP TABLE #exceptions	 	IF OBJECT_ID('tempdb..#temp_ma_table', 'U') IS NOT NULL DROP TABLE #temp_ma_table 	IF OBJECT_ID('tempdb..#temp_mm_table', 'U') IS NOT NULL DROP TABLE #temp_mm_table 	IF OBJECT_ID('tempdb..#temp_mp_table', 'U') IS NOT NULL DROP TABLE #temp_mp_table 	IF OBJECT_ID('tempdb..#temp_mt_table', 'U') IS NOT NULL DROP TABLE #temp_mt_table 	IF OBJECT_ID('tempdb..#temp_audit_table_temp', 'U') IS NOT NULL DROP TABLE #temp_audit_table_temp 	IF OBJECT_ID('tempdb..#temp_audit_table', 'U') IS NOT NULL DROP TABLE #temp_audit_table  		 END;   --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: COMPLIANCE_SAMPLING_FI CreateDate: 2019-10-18 08:39:49.473 ModifyDate: 2021-05-06 12:27:34.117 --- DEFINITION START ---  -- ============================================= -- Author:		<Henderson, William> -- Create date: <2018-05-23> -- Description:	<Procedure to implement compliance sampling> -- =============================================  -- ***************VERSION CONTROL*************** -- 2018-05-23 WH - Procedure created. Currently it only takes a random sample set. -- 2018-06-07 WH - Sampling logic updated to use risk weighted sampling -- 2018-08-08 KR - Added Fair Allocation Exception -- 2018-09-24 DDC - Added extra code to populate the COMPLIANCE_AUDIT_TABLE evert time the script is run. -- *********************************************  CREATE PROCEDURE [dbo].[COMPLIANCE_SAMPLING_FI] --'2018-01-01 00:00:00.000','2018-12-12 00:00:00.000','WH test3'  	@Start_Date datetime, 	@End_Date datetime, 	@INSPECTION_NAME VARCHAR(MAX)  AS BEGIN 	 	--0. Test query to check parameters passed from OS are correct 	INSERT INTO VISTA_REPORTING.dbo.compliance_sampling_dates 	SELECT @Start_Date AS start_time, @End_Date AS end_time, @INSPECTION_NAME AS Inspection_Name,  	getdate() as [Sampled time] , 'Fixed Income' as DEALING_DESK   	IF OBJECT_ID('tempdb..#temp_oc_table', 'U') IS NOT NULL DROP TABLE #temp_oc_table 	SELECT DISTINCT  		PM_ORD, 		TRD_ORD 	INTO #temp_oc_table 	FROM Vista_Reporting.dbo.ORDERS_CROSS   	IF OBJECT_ID('tempdb..#temp_PM_ORDERS', 'U') IS NOT NULL DROP TABLE #temp_PM_ORDERS 	SELECT DISTINCT 		ORD_NUM, 		TOUCH_COUNT, 		DEALING_DESK, 		CUSIP,  		COMMENTS_VALUE,  		BROKER_CODE 	INTO #temp_PM_ORDERS 	FROM Vista_Reporting.dbo.PM_ORDERS 	WHERE DEALING_DESK = 'Fixed Income'   	IF OBJECT_ID('tempdb..#temp_pm_table', 'U') IS NOT NULL DROP TABLE #temp_pm_table 	SELECT DISTINCT 		pm.ORD_NUM, 		oc.TRD_ORD, 		pm.TOUCH_COUNT, 		pm.DEALING_DESK, 		pm.CUSIP,  		pm.COMMENTS_VALUE,  		pm.BROKER_CODE 	INTO #temp_pm_table 	FROM #temp_PM_ORDERS pm 	LEFT JOIN #temp_oc_table oc ON oc.PM_ORD=pm.ORD_NUM 	   	IF OBJECT_ID('tempdb..#temp_ord_detail_table', 'U') IS NOT NULL DROP TABLE #temp_ord_detail_table 	SELECT DISTINCT 		od.ORD_NUM,  		od.ORD_DETAIL_FUND 	INTO #temp_ord_detail_table 	FROM VISTA_STAGING.dbo.ORDERS_DETAIL od 	INNER JOIN #temp_pm_table tpt ON tpt.ORD_NUM=od.ORD_NUM   	IF OBJECT_ID('tempdb..#pre_temp_trades_table', 'U') IS NOT NULL DROP TABLE #pre_temp_trades_table 	SELECT DISTINCT  		t.ORD_NUM,  		t.MULTI_FUND_ID,  		t.FUND,  		t.CUSIP,  		t.FinalFlag,  		t.FinalFlagMFIDLevel,  		t.TRD_TRADE_DATE, 		t.NET_CONSIDERATION_GBP, 		t.EXECUTION_TIME 	INTO #pre_temp_trades_table	 	FROM VISTA_REPORTING.dbo.TRADES t 	WHERE CONVERT(DATE, TRD_TRADE_DATE) BETWEEN CONVERT(DATE,@Start_Date) AND CONVERT(DATE,@End_Date)   	--1. Get all trades in the sample period and tie to the associated PM Order. 	IF OBJECT_ID('tempdb..#orders_pop', 'U') IS NOT NULL DROP TABLE #orders_pop 	SELECT DISTINCT 		pm.ORD_NUM, 		pm.TRD_ORD,  		MULTI_FUND_ID, 		TRD_TRADE_DATE, -- Use the TRD_TRADE_DATE 		t.CUSIP, 		pm.DEALING_DESK 	INTO #orders_pop 	FROM #pre_temp_trades_table t 	LEFT JOIN #temp_pm_table pm ON pm.TRD_ORD = t.ORD_NUM 	LEFT JOIN #temp_ord_detail_table od ON pm.ORD_NUM = od.ORD_NUM AND t.FUND = od.ORD_DETAIL_FUND 	WHERE t.FinalFlagMFIDLevel = 1 --Only want the lastest version of the trade in case the trade date has been updated. 	AND CONVERT(DATE, TRD_TRADE_DATE) BETWEEN CONVERT(DATE, @Start_Date) AND CONVERT(DATE, @End_Date) 	AND pm.DEALING_DESK = 'Fixed Income'  	--2. Get the latest touch for each PM order so that we only look at the latest version of the PM order. 	IF OBJECT_ID('tempdb..#max_touch', 'U') IS NOT NULL DROP TABLE #max_touch  	SELECT  		ORD_NUM, 		MAX(TOUCH_COUNT) AS MAX_TOUCH 	INTO #max_touch 	FROM #temp_pm_table 	WHERE DEALING_DESK = 'Fixed Income' 	GROUP BY ORD_NUM  	IF OBJECT_ID('tempdb..#temp_distinct_orders', 'U') IS NOT NULL DROP TABLE #temp_distinct_orders 	SELECT  TOP 0 		po.ORD_NUM, 		po.TRD_ORD,  		o.DEALING_DESK, 		po.CUSIP,  		po.COMMENTS_VALUE,  		po.BROKER_CODE, 		dbg.UNIVERSAL_BID_PRICE, 		--dbg.Mid_Price, 		dbg.UNIVERSAL_ASK_PRICE, 		o.TRD_TRADE_DATE, 		CASE  			WHEN dbg.UNIVERSAL_ASK_PRICE = dbg.UNIVERSAL_BID_PRICE THEN 0 			WHEN dbg.UNIVERSAL_BID_PRICE <> 0 THEN MAX(ABS((dbg.UNIVERSAL_ASK_PRICE-dbg.UNIVERSAL_BID_PRICE)/NULLIF(dbg.UNIVERSAL_BID_PRICE,0))) --Need to account for 0 bid price (will cause divide by zero errors). 			ELSE NULL  		END AS BID_ASK_SPREAD  	INTO #temp_distinct_orders 	FROM #temp_pm_table po 	INNER JOIN #orders_pop o ON po.ORD_NUM = o.ORD_NUM -- Only want to pull through orders in our sample period 	INNER JOIN #max_touch mt ON mt.ORD_NUM=po.ORD_NUM AND mt.MAX_TOUCH=po.TOUCH_COUNT 	LEFT JOIN VISTA_REPORTING.dbo.REUTERS_PRICE_BENCHMARK_TABLE dbg ON dbg.MULTI_FUND_ID = o.MULTI_FUND_ID AND CONVERT(DATE, o.TRD_TRADE_DATE) = CONVERT(DATE, dbg.TRD_TRADE_DATE) -- Confirmation from business required that we should be using the TRD_TRADE_DATE field 	GROUP BY  		po.ORD_NUM, 		po.TRD_ORD,   		o.DEALING_DESK, 		po.CUSIP,  		po.COMMENTS_VALUE,  		po.BROKER_CODE, 		dbg.UNIVERSAL_BID_PRICE, 		--dbg.Mid_Price, 		dbg.UNIVERSAL_ASK_PRICE, 		o.TRD_TRADE_DATE;  	IF OBJECT_ID('VISTA_REPORTING.dbo.SAMPLED_ORDERS_COMPLIANCE', 'U') IS NULL 	BEGIN 	--3. Join to FODB table to get price data. For each order we look at all bid/ask spreads on the trades for that order and take the maximum. 	INSERT INTO #temp_distinct_orders 	SELECT   		po.ORD_NUM, 		po.TRD_ORD,  		o.DEALING_DESK, 		po.CUSIP,  		po.COMMENTS_VALUE,  		po.BROKER_CODE, 		dbg.UNIVERSAL_BID_PRICE, 		--dbg.Mid_Price, 		dbg.UNIVERSAL_ASK_PRICE, 		o.TRD_TRADE_DATE, 		CASE  			WHEN dbg.UNIVERSAL_ASK_PRICE = dbg.UNIVERSAL_BID_PRICE THEN 0 			WHEN dbg.UNIVERSAL_BID_PRICE <> 0 THEN MAX(ABS((dbg.UNIVERSAL_ASK_PRICE-dbg.UNIVERSAL_BID_PRICE)/NULLIF(dbg.UNIVERSAL_BID_PRICE,0))) --Need to account for 0 bid price (will cause divide by zero errors). 			ELSE NULL  		END AS BID_ASK_SPREAD 	FROM #temp_pm_table po 	INNER JOIN #orders_pop o ON po.ORD_NUM = o.ORD_NUM -- Only want to pull through orders in our sample period 	INNER JOIN #max_touch mt ON mt.ORD_NUM=po.ORD_NUM AND mt.MAX_TOUCH=po.TOUCH_COUNT 	LEFT JOIN VISTA_REPORTING.dbo.REUTERS_PRICE_BENCHMARK_TABLE dbg ON dbg.MULTI_FUND_ID = o.MULTI_FUND_ID AND CONVERT(DATE, o.TRD_TRADE_DATE) = CONVERT(DATE, dbg.TRD_TRADE_DATE) -- Confirmation from business required that we should be using the TRD_TRADE_DATE field 	GROUP BY  		po.ORD_NUM,  		po.TRD_ORD,  		o.DEALING_DESK, 		po.CUSIP,  		po.COMMENTS_VALUE,  		po.BROKER_CODE, 		dbg.UNIVERSAL_BID_PRICE, 		--dbg.Mid_Price, 		dbg.UNIVERSAL_ASK_PRICE, 		o.TRD_TRADE_DATE; 	END  	ELSE IF OBJECT_ID('VISTA_REPORTING.dbo.SAMPLED_ORDERS_COMPLIANCE', 'U') IS NOT NULL 	BEGIN 	--3. Join to FODB table to get price data. For each order we look at all bid/ask spreads on the trades for that order and take the maximum. 	INSERT INTO #temp_distinct_orders 	SELECT   		po.ORD_NUM, 		po.TRD_ORD,  		o.DEALING_DESK, 		po.CUSIP,  		po.COMMENTS_VALUE,  		po.BROKER_CODE, 		dbg.UNIVERSAL_BID_PRICE, 		--dbg.Mid_Price, 		dbg.UNIVERSAL_ASK_PRICE, 		o.TRD_TRADE_DATE, 		CASE  			WHEN dbg.UNIVERSAL_ASK_PRICE = dbg.UNIVERSAL_BID_PRICE THEN 0 			WHEN dbg.UNIVERSAL_BID_PRICE <> 0 THEN MAX(ABS((dbg.UNIVERSAL_ASK_PRICE-dbg.UNIVERSAL_BID_PRICE)/NULLIF(dbg.UNIVERSAL_BID_PRICE,0))) --Need to account for 0 bid price (will cause divide by zero errors). 			ELSE NULL  		END AS BID_ASK_SPREAD 	FROM #temp_pm_table po 	INNER JOIN #orders_pop o ON po.ORD_NUM = o.ORD_NUM -- Only want to pull through orders in our sample period 	INNER JOIN #max_touch mt ON mt.ORD_NUM=po.ORD_NUM AND mt.MAX_TOUCH=po.TOUCH_COUNT 	LEFT JOIN VISTA_REPORTING.dbo.REUTERS_PRICE_BENCHMARK_TABLE dbg ON dbg.MULTI_FUND_ID = o.MULTI_FUND_ID AND CONVERT(DATE, o.TRD_TRADE_DATE) = CONVERT(DATE, dbg.TRD_TRADE_DATE) -- Confirmation from business required that we should be using the TRD_TRADE_DATE field 	WHERE NOT EXISTS (SELECT 1 FROM VISTA_REPORTING.dbo.SAMPLED_ORDERS_COMPLIANCE soc WHERE soc.ORD_NUM = po.ORD_NUM) 	GROUP BY  		po.ORD_NUM,  		po.TRD_ORD, 		o.DEALING_DESK, 		po.CUSIP,  		po.COMMENTS_VALUE,  		po.BROKER_CODE, 		dbg.UNIVERSAL_BID_PRICE, 		--dbg.Mid_Price, 		dbg.UNIVERSAL_ASK_PRICE, 		o.TRD_TRADE_DATE 	END  		 	--4. Find the total value of all trades for each order 	IF OBJECT_ID('tempdb..#temp_trades_table', 'U') IS NOT NULL DROP TABLE #temp_trades_table 	SELECT DISTINCT  		po.ORD_NUM,  		COALESCE(SUM(t.NET_CONSIDERATION_GBP), 0) AS SUM_NET_CONDSIDERATION 	INTO #temp_trades_table 	FROM #temp_pm_table po 	LEFT JOIN #temp_ord_detail_table od ON po.ORD_NUM = od.ORD_NUM 	LEFT JOIN #pre_temp_trades_table t ON t.ORD_NUM = po.TRD_ORD AND t.FUND = od.ORD_DETAIL_FUND 	WHERE t.FinalFlagMFIDLevel = 1 	GROUP BY po.ORD_NUM  	/*****************************/ 				--BONDS 	/*****************************/ 	--5. Do the ranking. 	IF OBJECT_ID('tempdb..#temp_NC_rank_DEBT', 'U') IS NOT NULL DROP TABLE #temp_NC_rank_DEBT 	SELECT DISTINCT  		po.ORD_NUM,  		po.DEALING_DESK, 		ISNULL(po.COMMENTS_VALUE, '') AS COMMENTS_VALUE, 		po.BROKER_CODE, 		pr.INST_TYPE, 		CASE 			WHEN pr.INST_TYPE in ('GOVBIL', 'EM GOVBIL') THEN 1 			WHEN pr.INST_TYPE in ('ABS', 'RMBS', 'CMBS', 'CDO', 'PFD') THEN 3  			WHEN pr.INSTRUMENT_GRADE = 'IG' THEN 1 			WHEN pr.INSTRUMENT_GRADE = 'HY' THEN 3 			ELSE 3 		END AS ASSET_TYPE_SCORE, 		ttt.SUM_NET_CONDSIDERATION, 		po.BID_ASK_SPREAD, 		DENSE_RANK() OVER (ORDER BY po.BID_ASK_SPREAD) AS BSA_RANK, -- Should we be ordering by the BID_ASK_SPREAD descending?  		DENSE_RANK() OVER (ORDER BY ttt.SUM_NET_CONDSIDERATION) AS NC_RANK -- Should we be ordering by the SUM_NET_CONDSIDERATION descending?  	INTO #temp_NC_rank_DEBT 	FROM #temp_distinct_orders po 	LEFT JOIN (SELECT DISTINCT ORD_NUM, INST_TYPE, INSTRUMENT_GRADE, DEBT_DERIV, PRIMARY_MARKET_ORDER_LEVEL FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr ON pr.ORD_NUM = po.TRD_ORD 	LEFT JOIN #temp_trades_table ttt ON ttt.ORD_NUM = po.ORD_NUM 	WHERE pr.DEBT_DERIV = 'DEBT' and pr.PRIMARY_MARKET_ORDER_LEVEL = 0 -- This is only for debt. And we do not want to include Primary Markets.   	DECLARE @MAX_BSA_RANK INT; 	DECLARE @MAX_NC_RANK INT; 	SET @MAX_BSA_RANK = (SELECT MAX(BSA_RANK) FROM #temp_NC_rank_DEBT); 	SET @MAX_NC_RANK = (SELECT MAX(NC_RANK) FROM #temp_NC_rank_DEBT);  	--6. Do the risk scoring 	IF OBJECT_ID('tempdb..#temp_BECOH_debt_table', 'U') IS NOT NULL DROP TABLE #temp_BECOH_debt_table 	SELECT DISTINCT 		tnr.*, 		(1.0*tnr.BSA_RANK/@MAX_BSA_RANK) AS PERCENTAGE_BSA_RANK,  															  		CASE  			WHEN BID_ASK_SPREAD IS NULL THEN 2 -- If we don't get a bid/ask spread, default to 2. 			WHEN (1.0*tnr.BSA_RANK/@MAX_BSA_RANK) > 0.66 THEN 2  															 			ELSE 1 		END AS LIQUIDITY_SCORE, 		(1.0*tnr.NC_RANK/@MAX_NC_RANK) AS PERCENTAGE_NC_RANK,  										                   		CASE  			WHEN (1.0*tnr.NC_RANK/@MAX_NC_RANK) > 0.66 THEN 2  														   			ELSE 1 		END AS ORDER_VALUE_SCORE, 		CASE  			WHEN tnr.BROKER_CODE IS NOT NULL THEN 3 			WHEN (CHARINDEX('axe', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('run', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('bid', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('ask', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('offer', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('buying', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('selling', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('with', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('JP', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('JPM', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('Morgan', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('Gold', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('Sachs', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('Barclays', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('BRC', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('BARC', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('BC', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('SG', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('Societe', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('Credit', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('Suisse', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('Stanley', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('RBC', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('Royal', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('Bank', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('WF', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('Wells', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('Fargo', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('HSBC', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('HSBK', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('RBS', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('Citi', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('CG', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('DB', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('Deutsche', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('ML', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('Merril', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('Lynch', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('BNP', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('Paribas', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('BP', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('Commerz', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('JS', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('Jeff', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('Natixis', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('NX', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('Nomura', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('SAN', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('Danske', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('Cantor', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('ALLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('BALB', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('BAMP', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('BANC', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('BARP', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('BBLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('BBV', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('BCM', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('BILL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('BOLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('BPLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('BVLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('CALC', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('CALL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('CANA', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('CFLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('CGML', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('CHAL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('CILB', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('CIWM', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('COLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('COMM', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('CSFE', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('CSLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('DENL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('DEUP', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('DMGN', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('DMLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('DNBN', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('DNLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('DZBK', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('EULL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('EURC', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('EXA', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('FITZ', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('GARB', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('GLAS', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('GOLD', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('GOLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('GRDA', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('HENC', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('HSBK', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('HSBP', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('HSLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('HYLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('HYPO', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('ICIL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('ICLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('IKLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('ING', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('INGL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('JPLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('JPMS', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('KKLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('LIEL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('LLOP', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('LTLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('LTSB', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('LWLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('MADV', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('MAX', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('MELT', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('MITS', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('MIZ', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('MLSB', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('MSLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('MSTC', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('MTLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('MZLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('NATE', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('NDEA', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('NDLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('NMLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('NMRA', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('NTLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('PBS', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('RABN', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('RALL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('RBDS', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('RBLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('RBS', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('RBSP', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('RCLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('SALL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('SANT', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('SBP', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('SCB', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('SCLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('SCTB', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('SEAE', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('SFLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('SGLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('SGSA', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('SKAN', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('SKLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('SMLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('SOCP', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('STIF', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('STLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('STOR', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('TDS', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('TLC', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('TOR', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('TRAL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('UBLL', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('UBSA', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('USBT', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('WBC', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('WELF', tnr.COMMENTS_VALUE) > 0) THEN 3 			WHEN (CHARINDEX('WELL', tnr.COMMENTS_VALUE) > 0) THEN 3 			ELSE 1 		END AS DIRECTED_SCORE 	INTO #temp_BECOH_debt_table 	FROM #temp_NC_rank_DEBT tnr   	IF OBJECT_ID('tempdb..#temp_other_trades', 'U') IS NOT NULL DROP TABLE #temp_other_trades 	SELECT DISTINCT  		op.ORD_NUM 	INTO #temp_other_trades 	FROM #orders_pop op 	INNER JOIN Vista_Reporting.dbo.TRADES t ON t.ORD_NUM = op.TRD_ORD 	WHERE t.TRD_LOCATION != 'MGUS'   	IF OBJECT_ID('tempdb..#temp_us_trades', 'U') IS NOT NULL DROP TABLE #temp_us_trades 	SELECT DISTINCT  		op.ORD_NUM 	INTO #temp_us_trades 	FROM #orders_pop op 	INNER JOIN Vista_Reporting.dbo.TRADES t ON t.ORD_NUM = op.TRD_ORD 	WHERE t.TRD_LOCATION = 'MGUS' 		  AND NOT EXISTS (SELECT tot.ORD_NUM FROM #temp_other_trades tot WHERE tot.ORD_NUM=op.ORD_NUM)  	 	--7a. Bucket the orders into Elevated and Normal - Non US trades 	IF OBJECT_ID('tempdb..#pre_sample_table_DEBT_NON_US', 'U') IS NOT NULL DROP TABLE #pre_sample_table_DEBT_NON_US 	SELECT DISTINCT 		bdt.ORD_NUM, 		bdt.DEALING_DESK, 		MAX(CASE 			WHEN ISNULL(bdt.DIRECTED_SCORE, 1) = 3 THEN 1 			ELSE 0 		END) AS CP_DIRECTION_FLAG, 		MAX(bdt.ASSET_TYPE_SCORE + bdt.DIRECTED_SCORE + bdt.ORDER_VALUE_SCORE + bdt.LIQUIDITY_SCORE) AS AGGREGATE_SCORE, --In case there are multiple records for an ORD_NUM, take the maximum score that we see 		CASE 			WHEN MAX(bdt.ASSET_TYPE_SCORE + bdt.DIRECTED_SCORE + bdt.ORDER_VALUE_SCORE + bdt.LIQUIDITY_SCORE) > 5 THEN 'ELEVATED' --In case there are multiple records for an ORD_NUM, take the maximum score that we see 			ELSE 'NORMAL' 		END AS RISK_TIER 	INTO #pre_sample_table_DEBT_NON_US 	FROM #temp_BECOH_debt_table bdt 	WHERE EXISTS (SELECT tot.ORD_NUM FROM #temp_other_trades tot WHERE tot.ORD_NUM = bdt.ORD_NUM) 	GROUP BY bdt.ORD_NUM, bdt.DEALING_DESK  	--7b. Bucket the orders into Elevated and Normal - US trades 	IF OBJECT_ID('tempdb..#pre_sample_table_DEBT_US', 'U') IS NOT NULL DROP TABLE #pre_sample_table_DEBT_US 	SELECT DISTINCT 		bdt.ORD_NUM, 		bdt.DEALING_DESK, 		MAX(CASE 			WHEN ISNULL(bdt.DIRECTED_SCORE, 1) = 3 THEN 1 			ELSE 0 		END) AS CP_DIRECTION_FLAG, 		MAX(bdt.ASSET_TYPE_SCORE + bdt.DIRECTED_SCORE + bdt.ORDER_VALUE_SCORE + bdt.LIQUIDITY_SCORE) AS AGGREGATE_SCORE, --In case there are multiple records for an ORD_NUM, take the maximum score that we see 		CASE 			WHEN MAX(bdt.ASSET_TYPE_SCORE + bdt.DIRECTED_SCORE + bdt.ORDER_VALUE_SCORE + bdt.LIQUIDITY_SCORE) > 5 THEN 'ELEVATED' --In case there are multiple records for an ORD_NUM, take the maximum score that we see 			ELSE 'NORMAL' 		END AS RISK_TIER 	INTO #pre_sample_table_DEBT_US 	FROM #temp_BECOH_debt_table bdt 	WHERE EXISTS (SELECT tot.ORD_NUM FROM #temp_us_trades tot WHERE tot.ORD_NUM = bdt.ORD_NUM) 	GROUP BY bdt.ORD_NUM, bdt.DEALING_DESK  	--Find thresholds 	DECLARE @Sample_percentage_non_us FLOAT 	SET @Sample_percentage_non_us = (SELECT MAX(SAMPLE_PERCENTAGE)  									 FROM Vista_Reporting.dbo.COMPLIANCE_SAMPLING_THRESHOLDS  									 WHERE TRD_LOCATION = 'ALL OTHER'  										   AND GETDATE() BETWEEN DATE_FROM AND DATE_TO 										   AND DEALING_DESK = 'Fixed Income') 	DECLARE @Sample_size_non_us INT 	SET @Sample_size_non_us = (SELECT MAX(SAMPLE_SIZE)  									 FROM Vista_Reporting.dbo.COMPLIANCE_SAMPLING_THRESHOLDS  									 WHERE TRD_LOCATION = 'ALL OTHER'  										   AND GETDATE() BETWEEN DATE_FROM AND DATE_TO 										   AND DEALING_DESK = 'Fixed Income')  	DECLARE @Sample_percentage_us FLOAT 	SET @Sample_percentage_us = (SELECT MAX(SAMPLE_PERCENTAGE)  									 FROM Vista_Reporting.dbo.COMPLIANCE_SAMPLING_THRESHOLDS  									 WHERE TRD_LOCATION = 'MGUS'  										   AND GETDATE() BETWEEN DATE_FROM AND DATE_TO 										   AND DEALING_DESK = 'Fixed Income') 	DECLARE @Sample_size_us INT 	SET @Sample_size_us = (SELECT MAX(SAMPLE_SIZE)  									 FROM Vista_Reporting.dbo.COMPLIANCE_SAMPLING_THRESHOLDS  									 WHERE TRD_LOCATION = 'MGUS'  										   AND GETDATE() BETWEEN DATE_FROM AND DATE_TO 										   AND DEALING_DESK = 'Fixed Income')   	--8a. Find required number of samples from non US - 2.5% of all orders. 	DECLARE @Total_Num_Orders FLOAT; 	SET @Total_Num_Orders = ISNULL(@Sample_percentage_non_us/100*(SELECT COUNT(DISTINCT ORD_NUM) FROM #pre_sample_table_DEBT_NON_US), 0);  	--8b. Find required number of samples from US - 5% of all orders. 	DECLARE @Total_Num_Orders_US FLOAT; 	SET @Total_Num_Orders_US = ISNULL(@Sample_percentage_us/100*(SELECT COUNT(DISTINCT ORD_NUM) FROM #pre_sample_table_DEBT_US), 0);   	--9a. Get non-US samples (80% of the 2.5% are from the elevated bucket. The rest come from the normal bucket). 	IF OBJECT_ID('tempdb..#Samples_elevated_DEBT', 'U') IS NOT NULL DROP TABLE #Samples_elevated_DEBT 	SELECT TOP (CONVERT(INT,(CEILING(@Total_Num_Orders * 0.8)))) * 	INTO #Samples_elevated_DEBT 	FROM #pre_sample_table_DEBT_NON_US 	WHERE RISK_TIER='ELEVATED'  	ORDER BY NEWID() -- new ID will randomly rank and taking top n will keep this randomness  	IF OBJECT_ID('tempdb..#Samples_normal_DEBT', 'U') IS NOT NULL DROP TABLE #Samples_normal_DEBT 	SELECT TOP (CONVERT(INT,(CEILING(@Total_Num_Orders * 0.2)))) * 	INTO #Samples_normal_DEBT 	FROM #pre_sample_table_DEBT_NON_US 	WHERE RISK_TIER='Normal'  	ORDER BY NEWID() -- new ID will randomly rank and taking top n will keep this randomness   	--9b. Get US samples (80% of the 5% are from the elevated bucket. The rest come from the normal bucket). 	IF OBJECT_ID('tempdb..#Samples_elevated_DEBT_US', 'U') IS NOT NULL DROP TABLE #Samples_elevated_DEBT_US 	SELECT TOP (CONVERT(INT,(CEILING(@Total_Num_Orders_US * 0.8)))) * 	INTO #Samples_elevated_DEBT_US 	FROM #pre_sample_table_DEBT_US 	WHERE RISK_TIER='ELEVATED'  	ORDER BY NEWID() -- new ID will randomly rank and taking top n will keep this randomness  	IF OBJECT_ID('tempdb..#Samples_normal_DEBT_US', 'U') IS NOT NULL DROP TABLE #Samples_normal_DEBT_US 	SELECT TOP (CONVERT(INT,(CEILING(@Total_Num_Orders_US * 0.2)))) * 	INTO #Samples_normal_DEBT_US 	FROM #pre_sample_table_DEBT_US 	WHERE RISK_TIER='Normal'  	ORDER BY NEWID() -- new ID will randomly rank and taking top n will keep this randomness   	IF OBJECT_ID('tempdb..#Samples_DEBT', 'U') IS NOT NULL DROP TABLE #Samples_DEBT 	SELECT *  	INTO #Samples_DEBT 	FROM #Samples_elevated_DEBT 	UNION 	SELECT * FROM #Samples_normal_DEBT  	IF OBJECT_ID('tempdb..#Samples_DEBT_US', 'U') IS NOT NULL DROP TABLE #Samples_DEBT_US 	SELECT *  	INTO #Samples_DEBT_US 	FROM #Samples_elevated_DEBT_US 	UNION 	SELECT * FROM #Samples_normal_DEBT_US   	/*****************************/ 				--DERIVATIVES 	/*****************************/      	--5. Do the ranking.    	IF OBJECT_ID('tempdb..#temp_NC_rank_DERIV', 'U') IS NOT NULL DROP TABLE #temp_NC_rank_DERIV 	SELECT DISTINCT  		po.ORD_NUM,  		po.DEALING_DESK, 		ISNULL(po.COMMENTS_VALUE, '') AS COMMENTS_VALUE, 		po.BROKER_CODE, 		pr.INST_TYPE, 		CASE 			WHEN pr.INST_TYPE in ('IRFUT', 'BNDFUT', 'OPTFUT', 'ETD') THEN 1 			WHEN pr.INST_TYPE in ('IRS', 'BASIS', 'ZCS', 'IFS', 'ASWP', 'CCS', 'CASWP', 'SWAP', 'SCDS', 'ICDS') THEN 3 	 			ELSE 3 		END AS ASSET_TYPE_SCORE, 		ttt.SUM_NET_CONDSIDERATION, 		po.BID_ASK_SPREAD, 		DENSE_RANK() OVER (ORDER BY po.BID_ASK_SPREAD) AS BSA_RANK, -- ShouWe ld we be ordering by the BID_ASK_SPREAD descending?  		DENSE_RANK() OVER (ORDER BY ttt.SUM_NET_CONDSIDERATION) AS NC_RANK -- Should we be ordering by the SUM_NET_CONDSIDERATION descending?  	INTO #temp_NC_rank_DERIV 	FROM #temp_distinct_orders po 	LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.ORD_NUM = po.TRD_ORD 	LEFT JOIN #temp_trades_table ttt ON ttt.ORD_NUM = po.ORD_NUM 	WHERE pr.DEBT_DERIV = 'DERIV' and pr.PRIMARY_MARKET_ORDER_LEVEL = 0 -- This is only for debt. And we do not want to include Primary Markets.  	DECLARE @MAX_BSA_RANK_DERIV INT; 	DECLARE @MAX_NC_RANK_DERIV INT; 	SET @MAX_BSA_RANK_DERIV = (SELECT MAX(BSA_RANK) FROM #temp_NC_rank_DERIV); 	SET @MAX_NC_RANK_DERIV = (SELECT MAX(NC_RANK) FROM #temp_NC_rank_DERIV);  	--6. Do the risk scoring 	IF OBJECT_ID('tempdb..#temp_BECOH_deriv_table', 'U') IS NOT NULL DROP TABLE #temp_BECOH_deriv_table 	SELECT DISTINCT 		tnr.*, 		(1.0*tnr.BSA_RANK/@MAX_BSA_RANK_DERIV) AS PERCENTAGE_BSA_RANK,  															  		CASE  			WHEN BID_ASK_SPREAD IS NULL THEN 2 -- If we don't get a bid/ask spread, default to 2. 			WHEN (1.0*tnr.BSA_RANK/@MAX_BSA_RANK_DERIV) > 0.66 THEN 2  														 			ELSE 1 		END AS LIQUIDITY_SCORE, 		(1.0*tnr.NC_RANK/@MAX_NC_RANK_DERIV) AS PERCENTAGE_NC_RANK,  										                   		CASE  			WHEN (1.0*tnr.NC_RANK/@MAX_NC_RANK_DERIV) > 0.66 THEN 2  														   			ELSE 1 		END AS ORDER_VALUE_SCORE, 		CASE  			WHEN tnr.BROKER_CODE IS NOT NULL THEN 1 			WHEN (CHARINDEX('axe', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('run', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('bid', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('ask', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('offer', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('buying', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('selling', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('with', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('JP', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('JPM', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('Morgan', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('Gold', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('Sachs', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('Barclays', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('BRC', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('BARC', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('BC', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('SG', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('Societe', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('Credit', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('Suisse', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('Stanley', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('RBC', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('Royal', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('Bank', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('WF', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('Wells', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('Fargo', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('HSBC', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('HSBK', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('RBS', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('Citi', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('CG', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('DB', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('Deutsche', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('ML', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('Merril', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('Lynch', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('BNP', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('Paribas', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('BP', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('Commerz', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('JS', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('Jeff', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('Natixis', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('NX', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('Nomura', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('SAN', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('Danske', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('Cantor', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('ALLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('BALB', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('BAMP', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('BANC', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('BARP', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('BBLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('BBV', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('BCM', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('BILL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('BOLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('BPLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('BVLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('CALC', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('CALL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('CANA', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('CFLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('CGML', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('CHAL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('CILB', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('CIWM', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('COLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('COMM', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('CSFE', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('CSLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('DENL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('DEUP', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('DMGN', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('DMLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('DNBN', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('DNLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('DZBK', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('EULL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('EURC', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('EXA', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('FITZ', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('GARB', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('GLAS', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('GOLD', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('GOLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('GRDA', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('HENC', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('HSBK', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('HSBP', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('HSLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('HYLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('HYPO', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('ICIL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('ICLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('IKLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('ING', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('INGL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('JPLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('JPMS', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('KKLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('LIEL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('LLOP', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('LTLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('LTSB', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('LWLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('MADV', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('MAX', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('MELT', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('MITS', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('MIZ', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('MLSB', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('MSLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('MSTC', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('MTLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('MZLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('NATE', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('NDEA', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('NDLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('NMLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('NMRA', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('NTLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('PBS', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('RABN', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('RALL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('RBDS', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('RBLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('RBS', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('RBSP', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('RCLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('SALL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('SANT', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('SBP', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('SCB', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('SCLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('SCTB', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('SEAE', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('SFLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('SGLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('SGSA', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('SKAN', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('SKLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('SMLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('SOCP', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('STIF', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('STLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('STOR', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('TDS', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('TLC', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('TOR', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('TRAL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('UBLL', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('UBSA', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('USBT', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('WBC', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('WELF', tnr.COMMENTS_VALUE) > 0) THEN 1 			WHEN (CHARINDEX('WELL', tnr.COMMENTS_VALUE) > 0) THEN 1 			ELSE 0 		END AS CP_DIRECTION_FLAG 	INTO #temp_BECOH_deriv_table 	FROM #temp_NC_rank_DERIV tnr  	--7a. Bucket the non-US orders into Elevated and Normal 	IF OBJECT_ID('tempdb..#pre_sample_table_DERIV_NON_US', 'U') IS NOT NULL DROP TABLE #pre_sample_table_DERIV_NON_US 	SELECT DISTINCT 		bdt.ORD_NUM, 		bdt.DEALING_DESK, 		MAX(CP_DIRECTION_FLAG) AS CP_DIRECTION_FLAG, 		MAX(bdt.ASSET_TYPE_SCORE  + bdt.ORDER_VALUE_SCORE + bdt.LIQUIDITY_SCORE) AS AGGREGATE_SCORE, --In case there are multiple records for an ORD_NUM, take the maximum score that we see 		CASE 			WHEN MAX(bdt.ASSET_TYPE_SCORE + bdt.ORDER_VALUE_SCORE + bdt.LIQUIDITY_SCORE) >= 5 THEN 'ELEVATED' --In case there are multiple records for an ORD_NUM, take the maximum score that we see 			ELSE 'NORMAL' 		END AS RISK_TIER 	INTO #pre_sample_table_DERIV_NON_US 	FROM #temp_BECOH_deriv_table bdt 	WHERE EXISTS (SELECT tot.ORD_NUM FROM #temp_other_trades tot WHERE tot.ORD_NUM = bdt.ORD_NUM) 	GROUP BY bdt.ORD_NUM, bdt.DEALING_DESK  	--7b. Bucket the US orders into Elevated and Normal 	IF OBJECT_ID('tempdb..#pre_sample_table_DERIV_US', 'U') IS NOT NULL DROP TABLE #pre_sample_table_DERIV_US 	SELECT DISTINCT 		bdt.ORD_NUM, 		bdt.DEALING_DESK, 		MAX(CP_DIRECTION_FLAG) AS CP_DIRECTION_FLAG, 		MAX(bdt.ASSET_TYPE_SCORE  + bdt.ORDER_VALUE_SCORE + bdt.LIQUIDITY_SCORE) AS AGGREGATE_SCORE, --In case there are multiple records for an ORD_NUM, take the maximum score that we see 		CASE 			WHEN MAX(bdt.ASSET_TYPE_SCORE + bdt.ORDER_VALUE_SCORE + bdt.LIQUIDITY_SCORE) >= 5 THEN 'ELEVATED' --In case there are multiple records for an ORD_NUM, take the maximum score that we see 			ELSE 'NORMAL' 		END AS RISK_TIER 	INTO #pre_sample_table_DERIV_US 	FROM #temp_BECOH_deriv_table bdt 	WHERE EXISTS (SELECT tot.ORD_NUM FROM #temp_us_trades tot WHERE tot.ORD_NUM = bdt.ORD_NUM) 	GROUP BY bdt.ORD_NUM, bdt.DEALING_DESK   	--8a. Find required number of non-US samples - 2.5% of all orders. 	DECLARE @Total_Num_Orders_DERIV FLOAT; 	SET @Total_Num_Orders_DERIV = ISNULL(@Sample_percentage_non_us/100*(SELECT COUNT(DISTINCT ORD_NUM) FROM #pre_sample_table_DERIV_NON_US), 0);  	--8b. Find required number of US samples - 2.5% of all orders. 	DECLARE @Total_Num_Orders_DERIV_US FLOAT; 	SET @Total_Num_Orders_DERIV_US = ISNULL(@Sample_percentage_us/100*(SELECT COUNT(DISTINCT ORD_NUM) FROM #pre_sample_table_DERIV_US), 0);   	--9a. Get non-US samples (80% of the 2.5% are from the elevated bucket. The rest come from the normal bucket). 	IF OBJECT_ID('tempdb..#Samples_elevated_DERIV', 'U') IS NOT NULL DROP TABLE #Samples_elevated_DERIV 	SELECT TOP (CONVERT(INT,(CEILING(@Total_Num_Orders_DERIV * 0.8)))) * 	INTO #Samples_elevated_DERIV 	FROM #pre_sample_table_DERIV_NON_US 	WHERE RISK_TIER='ELEVATED'  	ORDER BY NEWID() -- new ID will randomly rank and taking top n will keep this randomness  	IF OBJECT_ID('tempdb..#Samples_normal_DERIV', 'U') IS NOT NULL DROP TABLE #Samples_normal_DERIV 	SELECT TOP (CONVERT(INT,(CEILING(@Total_Num_Orders_DERIV * 0.2)))) * 	INTO #Samples_normal_DERIV 	FROM #pre_sample_table_DERIV_NON_US 	WHERE RISK_TIER='Normal'  	ORDER BY NEWID() -- new ID will randomly rank and taking top n will keep this randomness  	--9b. Get non-US samples (80% of the 2.5% are from the elevated bucket. The rest come from the normal bucket). 	IF OBJECT_ID('tempdb..#Samples_elevated_DERIV_US', 'U') IS NOT NULL DROP TABLE #Samples_elevated_DERIV_US 	SELECT TOP (CONVERT(INT,(CEILING(@Total_Num_Orders_DERIV_US * 0.8)))) * 	INTO #Samples_elevated_DERIV_US 	FROM #pre_sample_table_DERIV_US 	WHERE RISK_TIER='ELEVATED'  	ORDER BY NEWID() -- new ID will randomly rank and taking top n will keep this randomness  	IF OBJECT_ID('tempdb..#Samples_normal_DERIV_US', 'U') IS NOT NULL DROP TABLE #Samples_normal_DERIV_US 	SELECT TOP (CONVERT(INT,(CEILING(@Total_Num_Orders_DERIV_US * 0.2)))) * 	INTO #Samples_normal_DERIV_US 	FROM #pre_sample_table_DERIV_US 	WHERE RISK_TIER='Normal'  	ORDER BY NEWID() -- new ID will randomly rank and taking top n will keep this randomness   	IF OBJECT_ID('tempdb..#Samples_DERIV', 'U') IS NOT NULL DROP TABLE #Samples_DERIV 	SELECT *  	INTO #Samples_DERIV 	FROM #Samples_elevated_DERIV 	UNION 	SELECT * FROM #Samples_normal_DERIV   	IF OBJECT_ID('tempdb..#Samples_DERIV_US', 'U') IS NOT NULL DROP TABLE #Samples_DERIV_US 	SELECT *  	INTO #Samples_DERIV_US 	FROM #Samples_elevated_DERIV_US 	UNION 	SELECT * FROM #Samples_normal_DERIV_US   	/*****************************/ 		--TOP UP for < 100 samples 	/*****************************/  	--combine elevated and normal non-US samples into one table 	IF OBJECT_ID('tempdb..#Samples', 'U') IS NOT NULL DROP TABLE #Samples 	SELECT ORD_NUM, DEALING_DESK, AGGREGATE_SCORE, RISK_TIER, CP_DIRECTION_FLAG 	INTO #Samples 	FROM #Samples_DEBT 	UNION 	SELECT ORD_NUM, DEALING_DESK, AGGREGATE_SCORE, RISK_TIER, CP_DIRECTION_FLAG 	FROM #Samples_DERIV  	--combine elevated and normal US samples into one table 	IF OBJECT_ID('tempdb..#Samples_US', 'U') IS NOT NULL DROP TABLE #Samples_US 	SELECT sdu.ORD_NUM, sdu.DEALING_DESK, sdu.AGGREGATE_SCORE, sdu.RISK_TIER, sdu.CP_DIRECTION_FLAG 	INTO #Samples_US 	FROM #Samples_DEBT_US sdu 	WHERE NOT EXISTS (SELECT s.ORD_NUM FROM #Samples s WHERE s.ORD_NUM = sdu.ORD_NUM) 	UNION 	SELECT su.ORD_NUM, su.DEALING_DESK, su.AGGREGATE_SCORE, su.RISK_TIER, su.CP_DIRECTION_FLAG 	FROM #Samples_DERIV_US su 	WHERE NOT EXISTS (SELECT s.ORD_NUM FROM #Samples s WHERE s.ORD_NUM = su.ORD_NUM)  	--if less than 100 non-US samples, figure out how many more need to be sampled 	declare @total_orders int 	set @total_orders = (select COUNT(distinct ord_num) from #Samples); 	 	declare @total_top_up_amount int 	if @total_orders < @Sample_size_non_us  set @total_top_up_amount = @Sample_size_non_us-@total_orders 	else set @total_top_up_amount = 0 	declare @elevated_top_up_amount int 	declare @normal_top_up_amount int 	set @elevated_top_up_amount = CEILING(0.8*@total_top_up_amount)  	set @normal_top_up_amount = floor(0.2*@total_top_up_amount)  	--grab the required number of non-US samples from elevated bucket 	IF OBJECT_ID('tempdb..#topped_up_samples_elevated', 'U') IS NOT NULL DROP TABLE #topped_up_samples_elevated 	select top(@elevated_top_up_amount) el.*  	into #topped_up_samples_elevated 	from #pre_sample_table_DEBT_NON_US el 	left join #Samples s 	on el.ord_num = s.ORD_NUM 	where s.ORD_NUM IS NULL AND el.RISK_TIER = 'ELEVATED' 	order by NEWID()   	--grab the required number of non-US samples from normal bucket 	IF OBJECT_ID('tempdb..#topped_up_samples_normal', 'U') IS NOT NULL DROP TABLE #topped_up_samples_normal 	select top(@normal_top_up_amount) n.* 	into #topped_up_samples_normal 	from #pre_sample_table_DEBT_NON_US n 	left join #Samples s 	on n.ord_num = s.ORD_NUM 	where s.ORD_NUM IS NULL AND n.RISK_TIER = 'NORMAL' 	order by NEWID()    	--if less than 50 US samples, figure out how many more need to be sampled 	declare @total_orders_US int 	set @total_orders_US = (select COUNT(distinct ord_num) from #Samples_US); 	 	declare @total_top_up_amount_US int 	if @total_orders_US < @Sample_size_us set @total_top_up_amount_US = @Sample_size_us - @total_orders_US 	else set @total_top_up_amount_US = 0 	declare @elevated_top_up_amount_US int 	declare @normal_top_up_amount_US int 	set @elevated_top_up_amount_US = CEILING(0.8*@total_top_up_amount_US)  	set @normal_top_up_amount_US = floor(0.2*@total_top_up_amount_US)  	--grab the required number of US samples from elevated bucket 	IF OBJECT_ID('tempdb..#topped_up_samples_elevated_US', 'U') IS NOT NULL DROP TABLE #topped_up_samples_elevated_US 	select top(@elevated_top_up_amount_US) el.*  	into #topped_up_samples_elevated_US 	from #pre_sample_table_DEBT_US el 	left join #Samples_US s on el.ord_num = s.ORD_NUM 	where s.ORD_NUM IS NULL AND el.RISK_TIER = 'ELEVATED' 		  AND NOT EXISTS (SELECT s.ORD_NUM FROM #Samples s WHERE s.ORD_NUM = el.ORD_NUM) 	order by NEWID()    	--grab the required number of US samples from normal bucket 	IF OBJECT_ID('tempdb..#topped_up_samples_normal_US', 'U') IS NOT NULL DROP TABLE #topped_up_samples_normal_US 	select top(@normal_top_up_amount_US) n.* 	into #topped_up_samples_normal_US 	from #pre_sample_table_DEBT_US n 	left join #Samples_US s 	on n.ord_num = s.ORD_NUM 	where s.ORD_NUM IS NULL AND n.RISK_TIER = 'NORMAL' 		  AND NOT EXISTS (SELECT s.ORD_NUM FROM #Samples s WHERE s.ORD_NUM = n.ORD_NUM) 	order by NEWID()   	 	--add new topped up non-US samples to sample table 	insert into #Samples 	select ORD_NUM, DEALING_DESK, AGGREGATE_SCORE, RISK_TIER, CP_DIRECTION_FLAG from #topped_up_samples_elevated 	insert into #Samples 	select ORD_NUM, DEALING_DESK, AGGREGATE_SCORE, RISK_TIER, CP_DIRECTION_FLAG from #topped_up_samples_normal  	--add new topped up US samples to sample table 	insert into #Samples_US 	select ORD_NUM, DEALING_DESK, AGGREGATE_SCORE, RISK_TIER, CP_DIRECTION_FLAG from #topped_up_samples_elevated_US 	insert into #Samples_US 	select ORD_NUM, DEALING_DESK, AGGREGATE_SCORE, RISK_TIER, CP_DIRECTION_FLAG from #topped_up_samples_normal_US   	--Combine both US and non-US sampled orders 	IF OBJECT_ID('tempdb..#Samples_combined', 'U') IS NOT NULL DROP TABLE #Samples_combined 	SELECT *  	INTO #Samples_combined 	FROM #Samples 	UNION 	SELECT *  	FROM #Samples_US   	--add sampled order numbers to list of smapled orders 	IF OBJECT_ID('VISTA_REPORTING.dbo.SAMPLED_ORDERS_COMPLIANCE') IS NULL 	SELECT DISTINCT  		ORD_NUM,  		GETDATE() AS SAMPLED_DATE,  		@INSPECTION_NAME AS [INSPECTION NAME] , 		'Fixed Income' AS DEALING_DESK 	INTO VISTA_REPORTING.dbo.SAMPLED_ORDERS_COMPLIANCE 	FROM #Samples_combined  	ELSE  	INSERT INTO VISTA_REPORTING.dbo.SAMPLED_ORDERS_COMPLIANCE 	SELECT DISTINCT  		ORD_NUM,  		GETDATE() AS SAMPLED_DATE, 		@INSPECTION_NAME AS [INSPECTION NAME], 		'Fixed Income' AS DEALING_DESK 	FROM #Samples_combined   	/*****************************/ 		--Combine all samples 	/*****************************/  	--10. Get all trades associated with the orders to sample 	IF OBJECT_ID('tempdb..#sample_trades_orders', 'U') IS NOT NULL DROP TABLE #sample_trades_orders 	SELECT DISTINCT  		t.MULTI_FUND_ID, 		oc.PM_ORD, 		oc.TRD_ORD, 		s.DEALING_DESK, 		1 AS For_Sample, 		CP_DIRECTION_FLAG 	INTO #sample_trades_orders 	FROM #pre_temp_trades_table t 	LEFT JOIN #temp_oc_table oc ON t.ORD_NUM = oc.TRD_ORD 	INNER JOIN #Samples_combined s ON oc.PM_ORD = s.ORD_NUM 	--WHERE t.TRD_TRADE_DATE BETWEEN @Start_Date AND @End_Date -- Only pull through the trades for the order that are in the sample period. 	  	--11. Create status table 	IF OBJECT_ID('tempdb..#order_status', 'U') IS NOT NULL DROP TABLE #order_status 	SELECT distinct 		ORD_NUM, 		orders.TRD_ORD, 		orders.DEALING_DESK, 		ISNULL(sample.CP_DIRECTION_FLAG, 0) AS CP_DIRECTION_FLAG, 		CASE  			WHEN sample.For_Sample = 1 THEN '2C1' --Order level - Compliance Review Pending 		ELSE '2C2' 						   --Order level - Not sampled 		END AS Status, 		NULL AS FINAL_UPDATED_TIME 	INTO #order_status 	FROM (SELECT DISTINCT ORD_NUM, TRD_ORD, DEALING_DESK FROM #orders_pop) orders 	LEFT JOIN (SELECT DISTINCT PM_ORD, For_Sample, CP_DIRECTION_FLAG FROM #sample_trades_orders) sample 	ON orders.ORD_NUM = sample.PM_ORD   	IF OBJECT_ID('tempdb..#temp_final_status_table', 'U') IS NOT NULL DROP TABLE #temp_final_status_table 	SELECT DISTINCT 		ORD_NUM, 		DEALING_DESK, 		STATUS, 		FINAL_UPDATED_TIME  	INTO #temp_final_status_table 	FROM #order_status   	--11a. Put the orders into the status table 	IF OBJECT_ID('VISTA_REPORTING.dbo.COMPLIANCE_ORDER_FINAL_STATUS_UPDATE_TABLE', 'U') IS NULL  	SELECT DISTINCT 		ORD_NUM, 		DEALING_DESK, 		STATUS, 		FINAL_UPDATED_TIME  	INTO VISTA_REPORTING.dbo.COMPLIANCE_ORDER_FINAL_STATUS_UPDATE_TABLE 	FROM #temp_final_status_table 	 	MERGE VISTA_REPORTING.dbo.COMPLIANCE_ORDER_FINAL_STATUS_UPDATE_TABLE AS T 	USING #temp_final_status_table AS S 	ON (T.ORD_NUM = S.ORD_NUM ) 	WHEN MATCHED 		THEN  		UPDATE SET 			T.ord_num=T.ord_num, 			T.Status = (CASE  				WHEN T.Status = '2C2' THEN S.Status -- Not sampled previously - update to the current status 				WHEN T.Status IN ('2C1','2C3','2C4') THEN T.Status -- Has been sampled previously so we don't update the status 			END) 	WHEN NOT MATCHED  		THEN  		INSERT (ORD_NUM, DEALING_DESK, STATUS, FINAL_UPDATED_TIME) 		VALUES (S.ORD_NUM, S.DEALING_DESK, S.STATUS, S.FINAL_UPDATED_TIME);   	--12. Put the trade exception level detail into the status table - is to be done for all exception types. 	IF OBJECT_ID('tempdb..#exceptions', 'U') IS NOT NULL DROP TABLE #exceptions 	 	--DECLARE @MAX_TOUCH_COUNT INT 	--DECLARE @COMMENTS_VALUE VARCHAR(500) 	--DECLARE @BROKER_CODE VARCHAR(100)  	--SET @MAX_TOUCH_COUNT=(SELECT MAX(TOUCH_COUNT) FROM VISTA_REPORTING.dbo.PM_ORDERS) 	--SET @COMMENTS_VALUE = (SELECT COMMENTS_VALUE FROM VISTA_REPORTING.dbo.PM_ORDERS 	--WHERE TOUCH_COUNT=@MAX_TOUCH_COUNT) 	--SET @BROKER_CODE = (SELECT BROKER_CODE  FROM VISTA_REPORTING.dbo.PM_ORDERS 	--WHERE TOUCH_COUNT=@MAX_TOUCH_COUNT)  	 	--PD 	SELECT DISTINCT  		t.ORD_NUM AS PM_ORD,  		t.TRD_ORD, 		trd.MULTI_FUND_ID, 		vg.DEALING_DESK, 		vg.QUOTE_EXCEPTION AS [Exception_Value], 		vg.CREATETIME AS CREATE_TIME, 		CONVERT(VARCHAR(10),'PD') AS Exception_Type, 		CASE WHEN vg.QUOTE_EXCEPTION = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	INTO #exceptions 	FROM #order_status t 	LEFT JOIN #temp_ord_detail_table od ON t.ORD_NUM = od.ORD_NUM 	LEFT JOIN #pre_temp_trades_table trd on t.trd_ord = trd.ORD_NUM AND trd.FUND = od.ORD_DETAIL_FUND 	LEFT JOIN VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI_TABLE vg 	on trd.MULTI_FUND_ID = vg.MULTI_FUND_ID 	WHERE t.Status = '2C1' 	AND vg.MULTI_FUND_ID IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly). 	UNION 	--NWQ 	SELECT DISTINCT  		t.ORD_NUM AS PM_ORD,  		t.TRD_ORD, 		trd.MULTI_FUND_ID, 		vg.DEALING_DESK, 		vg.NWQ_EXCEPTION AS [Exception_Value], 		vg.NWQ_CREATEIME AS CREATE_TIME, 		CONVERT(VARCHAR(10),'NWQ') AS Exception_Type, 		CASE WHEN vg.NWQ_EXCEPTION = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #order_status t  	LEFT JOIN #temp_ord_detail_table od ON t.ORD_NUM = od.ORD_NUM 	LEFT JOIN vista_reporting.dbo.trades trd ON t.trd_ord = trd.ORD_NUM AND trd.FUND = od.ORD_DETAIL_FUND 	LEFT JOIN VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_FI_TABLE vg on trd.MULTI_FUND_ID = vg.MULTI_FUND_ID 	WHERE t.Status = '2C1' AND vg.MULTI_FUND_ID IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly). 	UNION 	--Timely Ex 	SELECT DISTINCT 		t.ORD_NUM AS PM_ORD,  		NULL AS TRD_ORD, 		NULL AS Multi_Fund_ID, 		vg.DEALING_DESK, 		max(vg.TIMELY_EXECUTION_EXCEPTION) AS [Exception_Value], 		min(vg.CREATETIME) AS CREATE_TIME, 		CONVERT(VARCHAR(10),'TEx') AS Exception_Type, 		CASE WHEN max(vg.TIMELY_EXECUTION_EXCEPTION) = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #order_status t 	LEFT JOIN VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE vg 	ON t.ORD_NUM = vg.ORD_NUM 	WHERE t.Status = '2C1' 	group by t.ORD_NUM, vg.Dealing_Desk 	UNION 	--TRec 	SELECT DISTINCT  		t.ORD_NUM AS PM_ORD,  		t.TRD_ORD, 		trd.MULTI_FUND_ID, 		vg.DEALING_DESK, 		vg.TIMELY_RECORDING_EXCEPTION  AS [Exception_Value], 		vg.TREC_CREATETIME AS CREATE_TIME, 		CONVERT(VARCHAR(10),'TRec') AS Exception_Type, 		CASE WHEN vg.TIMELY_RECORDING_EXCEPTION = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #order_status t 	LEFT JOIN #temp_ord_detail_table od ON t.ORD_NUM = od.ORD_NUM 	LEFT JOIN vista_reporting.dbo.trades trd ON t.trd_ord = trd.ORD_NUM AND trd.FUND = od.ORD_DETAIL_FUND 	left join VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FI_TABLE vg ON trd.MULTI_FUND_ID = vg.MULTI_FUND_ID 	WHERE t.Status = '2C1' AND vg.MULTI_FUND_ID IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly). 	UNION 	--Order Aggregation 	SELECT DISTINCT  		t.ORD_NUM AS PM_ORD,  		t.TRD_ORD, 		trd.MULTI_FUND_ID, 		vg.DEALING_DESK, 		vg.MERGE_EXCEPTION  AS [Exception_Value], 		vg.CREATETIME AS CREATE_TIME, 		CONVERT(VARCHAR(10),'OA') AS Exception_Type,      		CASE WHEN vg.MERGE_EXCEPTION = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #order_status t 	LEFT JOIN #temp_ord_detail_table od ON t.ORD_NUM = od.ORD_NUM 	LEFT JOIN vista_reporting.dbo.trades trd ON t.trd_ord = trd.ORD_NUM AND trd.FUND = od.ORD_DETAIL_FUND 	LEFT JOIN VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_FI_TABLE vg	ON concat(trd.ORD_NUM,'_',trd.MULTI_FUND_ID) = vg.OA_ID 	WHERE t.Status = '2C1' AND vg.OA_ID IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly). 	UNION 	--Order Priority 	SELECT DISTINCT 		t.ORD_NUM AS PM_ORD,  		t.TRD_ORD, 		NULL AS Multi_Fund_ID, 		vg.DEALING_DESK, 		vg.ORDER_PRIORITY_EXCEPTION  AS [Exception_Value], 		vg.CREATETIME AS CREATE_TIME, 		CONVERT(VARCHAR(10),'OP') AS Exception_Type, 		CASE WHEN vg.ORDER_PRIORITY_EXCEPTION = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #order_status t 	LEFT JOIN VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_FI_TABLE vg 	ON t.trd_ord = vg.ORD_NUM 	WHERE t.Status = '2C1' 	UNION 	--CP Direction 	SELECT DISTINCT 		t.ORD_NUM AS PM_ORD,  		NULL AS TRD_ORD, 		NULL AS Multi_Fund_ID, 		t.DEALING_DESK, 		t.CP_DIRECTION_FLAG AS [Exception_Value], 		NULL AS CREATE_TIME, 		CONVERT(VARCHAR(10),'CPDir') AS Exception_Type, 		CASE WHEN t.CP_DIRECTION_FLAG = 1 THEN '2C2' ELSE '2C1' END AS Status, 		--CASE WHEN (@BROKER_CODE != NULL OR @COMMENTS_VALUE != NULL OR @COMMENTS_VALUE !='' )  THEN '2C1' 		--ELSE '2C2' END AS STATUS, 		--'2C1' AS STATUS, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #order_status t 	LEFT JOIN Vista_Reporting.dbo.COUNTERPARTY_DIRECTION_TABLE_FI cd ON cd.ORD_NUM = t.ORD_NUM 	WHERE T.STATUS= '2C1' 	UNION 	--G&H 	SELECT DISTINCT  		t.ORD_NUM AS PM_ORD,  		NULL AS TRD_ORD, 		NULL AS MULTI_FUND_ID, 		t.DEALING_DESK, 		1 AS [Exception_Value],  		NULL AS CREATE_TIME, 		CONVERT(VARCHAR(10),'GH') AS Exception_Type, 		'2C2', 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #order_status t 	WHERE t.Status = '2C1' 	UNION 	--Price Benchmark 	SELECT DISTINCT  		t.ORD_NUM AS PM_ORD,  		t.TRD_ORD, 		trd.MULTI_FUND_ID, 		t.DEALING_DESK, 		pb.PRICE_BENCHMARK_FLAG AS [Exception_Value],  		NULL AS CREATE_TIME, 		CONVERT(VARCHAR(10),'PB') AS Exception_Type, 		CASE WHEN pb.PRICE_BENCHMARK_FLAG = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #order_status t 	LEFT JOIN #temp_ord_detail_table od ON t.ORD_NUM = od.ORD_NUM 	LEFT JOIN vista_reporting.dbo.trades trd ON t.trd_ord = trd.ORD_NUM AND trd.FUND = od.ORD_DETAIL_FUND 	LEFT JOIN VISTA_REPORTING.dbo.REUTERS_PRICE_BENCHMARK_TABLE pb ON trd.MULTI_FUND_ID = pb.MULTI_FUND_ID 	WHERE t.Status = '2C1' 	AND pb.MULTI_FUND_ID IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly). 	--Amendments  	UNION 	SELECT DISTINCT  	t.ORD_NUM AS PM_ORD,  	t.TRD_ORD, 	trd.MULTI_FUND_ID, 	t.DEALING_DESK, 	AF.AMENDMENT_FLAG AS [Exception_Value], 	AF.AMENDMENT_FLAG_CREATETIME AS CREATE_TIME,  	CONVERT(VARCHAR(10),'AF') AS Exception_Type, 	CASE WHEN AF.AMENDMENT_FLAG  = 1 THEN '2C2' ELSE '2C1' END AS Status, 	NULL AS FINAL_UPDATED_TIME, 	TRD.TOUCH_COUNT, 	NULL AS ROW_ID 	FROM #order_status t 	LEFT JOIN #temp_ord_detail_table od ON t.ORD_NUM = od.ORD_NUM 	LEFT JOIN vista_reporting.dbo.trades trd ON t.trd_ord = trd.ORD_NUM AND trd.FUND = od.ORD_DETAIL_FUND 	LEFT JOIN VISTA_STAGING.DBO.VG_15_AMENDMENT_FLAG_FI_TABLE AF ON trd.MULTI_FUND_ID = AF.MULTI_FUND_ID 																	AND TRD.TOUCH_COUNT = AF.TOUCH_COUNT 	WHERE t.Status = '2C1' 	AND AF.TOUCH_COUNT IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly). 	--Fair Allocation 	UNION 	SELECT DISTINCT 	t.ORD_NUM AS PM_ORD, 	NULL AS TRD_ORD, 	NULL AS MULTI_FUND_ID, 	t.DEALING_DESK, 	1 AS [Exception_Value], 	NULL AS CREATE_TIME, 	CONVERT(VARCHAR(10),'FA') AS Exception_Type, 	'2C2', 	NULL AS FINAL_UPDATED_TIME, 	NULL AS TOUCH_COUNT, 	NULL AS ROW_ID 	FROM #order_status t 	WHERE t.Status = '2C1'  	IF OBJECT_ID('VISTA_REPORTING.dbo.INSPECTION_EXCEPTION_COUNT', 'U') IS NULL  	SELECT  		@INSPECTION_NAME AS INSPECTION_NAME, 		@Start_Date AS INSPECTION_START_DATE, 		@End_Date AS INSPECTION_END_DATE, 		GETDATE() AS INSPECTION_SAMPLE_DATE, 		'Fixed Income' AS DEALING_DESK, 		(SELECT COUNT(DISTINCT MULTI_FUND_ID) FROM #exceptions) AS [Number_Trades_Sampled], 		Exception_Type,  		COUNT(DISTINCT COALESCE(MULTI_FUND_ID, TRD_ORD, PM_ORD)) AS EXCEPTION_COUNT 	INTO VISTA_REPORTING.dbo.INSPECTION_EXCEPTION_COUNT 	FROM #exceptions 	WHERE Exception_Value >= 1 	GROUP BY Exception_Type  	ELSE  	INSERT INTO VISTA_REPORTING.dbo.INSPECTION_EXCEPTION_COUNT 	SELECT  		@INSPECTION_NAME AS INSPECTION_NAME, 		@Start_Date AS INSPECTION_START_DATE, 		@End_Date AS INSPECTION_END_DATE, 		GETDATE() AS INSPECTION_SAMPLE_DATE, 		'Fixed Income' AS DEALING_DESK, 		(SELECT COUNT(DISTINCT MULTI_FUND_ID) FROM #exceptions) AS [Number_Trades_Sampled], 		Exception_Type,  		COUNT(DISTINCT COALESCE(MULTI_FUND_ID, TRD_ORD, PM_ORD)) AS EXCEPTION_COUNT 	FROM #exceptions 	WHERE Exception_Value >= 1 	GROUP BY Exception_Type   	IF OBJECT_ID('VISTA_REPORTING.dbo.COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE', 'U') IS NULL  	SELECT DISTINCT * 	INTO VISTA_REPORTING.dbo.COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE 	FROM #exceptions 	 	MERGE VISTA_REPORTING.dbo.COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE AS T 	USING #exceptions AS S 	ON (T.PM_ORD = S.PM_ORD 		AND ISNULL(T.TRD_ORD,'-1') = ISNULL(S.TRD_ORD,'-1') 		AND ISNULL(T.MULTI_FUND_ID,'-1') = ISNULL(S.MULTI_FUND_ID,'-1') 		AND ISNULL(T.TOUCH_COUNT,'-1') = ISNULL(S.TOUCH_COUNT,'-1') 		AND T.DEALING_DESK = S.DEALING_DESK 		AND T.Exception_Type = S.Exception_Type 		AND ISNULL(T.ROW_ID,'-1') = ISNULL(S.ROW_ID,'-1')) 	WHEN MATCHED 		THEN  		UPDATE SET -- Do nothing 			T.PM_ORD = T.PM_ORD 	WHEN NOT MATCHED  		THEN  		INSERT (PM_ORD,		TRD_ORD,	MULTI_FUND_ID,		DEALING_DESK,		TOUCH_COUNT,	[Exception_Value],		Exception_Type,		Status,		FINAL_UPDATED_TIME, ROW_ID) 		VALUES (S.PM_ORD,	S.TRD_ORD,	S.MULTI_FUND_ID,	S.DEALING_DESK,		S.TOUCH_COUNT,  S.[Exception_Value],	S.Exception_Type,	S.Status,	S.FINAL_UPDATED_TIME, S.ROW_ID);   	--Insert into COMPLIANCE_AUDIT_TABLE 	IF OBJECT_ID('tempdb..#temp_audit_table_temp', 'U') IS NOT NULL DROP TABLE #temp_audit_table_temp 	SELECT DISTINCT 		e.MULTI_FUND_ID, 		e.TRD_ORD, 		e.PM_ORD, 		e.Exception_Type as Exception_Type2, 		CASE  			WHEN e.Exception_Type = 'FA' THEN 'Fair Allocation' 			WHEN e.Exception_Type = 'PD' THEN 'Quote Exception' 			WHEN e.Exception_Type = 'PB' THEN 'Price Benchmark' 			WHEN e.Exception_Type = 'OA' THEN 'Order Aggregation Exception' 			WHEN e.Exception_Type = 'AF' THEN 'Amendment Analysis' 			WHEN e.Exception_Type = 'CPDir' THEN 'Counterparty Direction' 			WHEN e.Exception_Type = 'TEx' THEN 'Timely Execution Exception' 			--WHEN e.Exception_Type = 'Cmsn' THEN 'Commission Report' 			WHEN e.Exception_Type = 'NWQ' THEN 'NWQ Exception' 			--WHEN e.Exception_Type = 'IS' THEN 'Implementation Shortfall Exception' 			WHEN e.Exception_Type = 'TRec' THEN 'Timely Recording Exception' 			WHEN e.Exception_Type = 'OP' THEN 'Order Priority Exception' 			WHEN e.Exception_Type = 'GH' THEN 'Gifts & Hospitality' 			WHEN e.Exception_Type = 'TRel' THEN 'Timely Release' 			--WHEN e.Exception_Type = 'HL' THEN 'Outside High Low' 			--WHEN e.Exception_Type = 'F_VWAP' THEN 'Futures_VWAP' 		END AS EXCEPTION_TYPE, 		CASE  			WHEN e.Exception_Type = 'FA' THEN e.PM_ORD 			WHEN e.Exception_Type = 'PD' THEN e.MULTI_FUND_ID 			WHEN e.Exception_Type = 'PB' THEN e.MULTI_FUND_ID 			WHEN e.Exception_Type = 'OA' THEN e.MULTI_FUND_ID 			WHEN e.Exception_Type = 'AF' THEN e.MULTI_FUND_ID 			WHEN e.Exception_Type = 'CPDir' THEN e.PM_ORD 			WHEN e.Exception_Type = 'TEx' THEN e.PM_ORD 			--WHEN e.Exception_Type = 'Cmsn' THEN e.MULTI_FUND_ID 			WHEN e.Exception_Type = 'NWQ' THEN e.MULTI_FUND_ID 			--WHEN e.Exception_Type = 'IS' THEN 'Implementation Shortfall Exception' 			WHEN e.Exception_Type = 'TRec' THEN e.MULTI_FUND_ID 			WHEN e.Exception_Type = 'OP' THEN e.TRD_ORD 			WHEN e.Exception_Type = 'GH' THEN e.PM_ORD 			WHEN e.Exception_Type = 'TRel' THEN e.PM_ORD 			--WHEN e.Exception_Type = 'HL' THEN 'Outside High Low' 			--WHEN e.Exception_Type = 'F_VWAP' THEN 'Futures_VWAP' 		END AS ID, 		NULL AS REASON, 		NULL AS COMMENT, 		cs.STATUS, 		e.CREATE_TIME, 		e.DEALING_DESK, 		t.EXECUTION_TIME, 		e.FINAL_UPDATED_TIME, 		CASE		 			WHEN e.Exception_Type = 'FA' THEN fa.AUTH_TIME 			WHEN e.Exception_Type = 'PD' THEN mm.AUTH_TIME 			WHEN e.Exception_Type = 'PB' THEN pb.AUTH_TIME 			WHEN e.Exception_Type = 'OA' THEN mt.[Auth Time] 			WHEN e.Exception_Type = 'AF' THEN ma.AUTH_TIME 			WHEN e.Exception_Type = 'CPDir' THEN cd.AUTH_TIME 			WHEN e.Exception_Type = 'TEx' THEN mp.AUTH_TIME 			--WHEN e.Exception_Type = 'Cmsn' THEN ci.AUTH_TIME 			WHEN e.Exception_Type = 'NWQ' THEN mm.AUTH_TIME 			--WHEN e.Exception_Type = 'IS' THEN im.AUTH_TIME 			WHEN e.Exception_Type = 'TRec' THEN mm.AUTH_TIME 			WHEN e.Exception_Type = 'OP' THEN mo.[Auth Time] 			WHEN e.Exception_Type = 'GH' THEN gh.AUTH_TIME 			WHEN e.Exception_Type = 'TRel' THEN mp.AUTH_TIME 			--WHEN e.Exception_Type = 'HL' THEN hl.AUTH_TIME 			--WHEN e.Exception_Type = 'F_VWAP' THEN NULL 		END AS AUTH_TIME, 		--t.CLIENT_EXECUTION_NUM, 		CASE		 			WHEN e.Exception_Type = 'FA' THEN NULL 			WHEN e.Exception_Type = 'PD' THEN CAST(mm.PLACEMENT_NUM AS VARCHAR) 			WHEN e.Exception_Type = 'PB' THEN NULL 			WHEN e.Exception_Type = 'OA' THEN CAST(mt.Placement_Num AS VARCHAR) 			WHEN e.Exception_Type = 'AF' THEN CAST(ma.PLACEMENT_NUM AS VARCHAR)  			WHEN e.Exception_Type = 'CPDir' THEN CAST(cd.PLACEMENT_NUM AS VARCHAR) 			WHEN e.Exception_Type = 'TEx' THEN CAST(mp.PLACEMENT_NUM AS VARCHAR) 			--WHEN e.Exception_Type = 'Cmsn' THEN NULL 			WHEN e.Exception_Type = 'NWQ' THEN CAST(mm.PLACEMENT_NUM AS VARCHAR) 			--WHEN e.Exception_Type = 'IS' THEN NULL 			WHEN e.Exception_Type = 'TRec' THEN CAST(mm.PLACEMENT_NUM AS VARCHAR) 			WHEN e.Exception_Type = 'OP' THEN CAST(mo.Placement_Num AS VARCHAR) 			WHEN e.Exception_Type = 'GH' THEN CAST(gh.PLACEMENT_NUM AS VARCHAR)  			WHEN e.Exception_Type = 'TRel' THEN CAST(mp.PLACEMENT_NUM AS VARCHAR) 			--WHEN e.Exception_Type = 'HL' THEN NULL 			--WHEN e.Exception_Type = 'F_VWAP' THEN NULL 		END AS PLACEMENT_NUM, 		cs.STATUS_CODE, 		CASE		 			WHEN e.Exception_Type = 'FA' THEN fa.Dealer 			WHEN e.Exception_Type = 'PD' THEN mm.Dealer 			WHEN e.Exception_Type = 'PB' THEN pb.TRD_TRADER 			WHEN e.Exception_Type = 'OA' THEN mt.Dealer 			WHEN e.Exception_Type = 'AF' THEN ma.TRADER 			WHEN e.Exception_Type = 'CPDir' THEN cd.Dealer 			WHEN e.Exception_Type = 'TEx' THEN mp.Dealer 			--WHEN e.Exception_Type = 'Cmsn' THEN ci.Dealer 			WHEN e.Exception_Type = 'NWQ' THEN mm.Dealer 			--WHEN e.Exception_Type = 'IS' THEN im.Trader 			WHEN e.Exception_Type = 'TRec' THEN mm.Dealer 			WHEN e.Exception_Type = 'OP' THEN mo.Dealer 			WHEN e.Exception_Type = 'GH' THEN gh.Dealer 			WHEN e.Exception_Type = 'TRel' THEN mp.Dealer 			--WHEN e.Exception_Type = 'HL' THEN hl.Trader 			--WHEN e.Exception_Type = 'F_VWAP' THEN fv.Dealer 		END AS TRD_TRADER 	INTO #temp_audit_table_temp 	FROM #exceptions e 	LEFT JOIN VISTA_REPORTING.dbo.COMPLIANCE_EXCEPTIONS_STATUS_TABLE cs ON cs.STATUS_CODE=e.Status 	LEFT JOIN VISTA_REPORTING.dbo.COUNTERPARTY_DIRECTION_TABLE_EQ cd ON cd.ORD_NUM=e.PM_ORD 	LEFT JOIN VISTA_REPORTING.dbo.FAIR_ALLOCATION fa ON fa.PM_ORD=e.PM_ORD  														AND fa.DEALING_DESK = 'Fixed Income' 	LEFT JOIN VISTA_REPORTING.dbo.GIFTS_AND_HOSPITALITY_FI gh ON gh.PM_ORD=e.PM_ORD 	LEFT JOIN VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE ma ON ma.MULTI_FUND_ID=e.MULTI_FUND_ID  																	AND e.TOUCH_COUNT=ma.TOUCH_COUNT  																	AND ma.DEALING_DESK = 'Fixed Income' 	LEFT JOIN VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE mm ON mm.MULTI_FUND_ID=e.MULTI_FUND_ID  																   AND mm.DEALING_DESK = 'Fixed Income' 	LEFT JOIN VISTA_REPORTING.dbo.MASTER_PM_ORDER mp ON mp.ORD_NUM=e.PM_ORD  														AND mp.DEALING_DESK = 'Fixed Income' 	LEFT JOIN VISTA_REPORTING.dbo.MASTER_TRD_ORDER_TABLE mt ON mt.ORD_NUM=e.TRD_ORD  															   AND mt.DEALING_DESK = 'Fixed Income' 	LEFT JOIN VISTA_REPORTING.dbo.PRICE_BENCHMARK_TABLE pb ON pb.MULTI_FUND_ID=e.MULTI_FUND_ID 	LEFT JOIN VISTA_REPORTING.dbo.MASTER_ORDER_PRIORITY_TABLE mo ON mo.ORD_NUM=e.TRD_ORD  																	AND mo.DEALING_DESK = 'Fixed Income' 	LEFT JOIN #pre_temp_trades_table t ON t.MULTI_FUND_ID = e.MULTI_FUND_ID and t.FinalFlag = 1  	IF OBJECT_ID('tempdb..#temp_audit_table', 'U') IS NOT NULL DROP TABLE #temp_audit_table 	SELECT  		PM_ORD, 		TRD_ORD, 		MULTI_FUND_ID, 		EXCEPTION_TYPE, 		ID, 		REASON, 		COMMENT, 		STATUS, 		CREATE_TIME, 		DEALING_DESK, 		FINAL_UPDATED_TIME, 		STATUS_CODE,  		MIN(EXECUTION_TIME) AS EXECUTION_TIME, --In cases where the execution time changes, take the first 		MIN(AUTH_TIME) AS AUTH_TIME, --In cases where the auth time changes, take the first 		CASE  			WHEN CHARINDEX('|', MIN(PLACEMENT_NUM)) != 0 THEN LEFT(MIN(PLACEMENT_NUM), CHARINDEX('|', MIN(PLACEMENT_NUM)) - 1) 			ELSE MIN(PLACEMENT_NUM)  		END AS PLACEMENT_NUM, --In cases where there are multiple placements, take the first  		MIN(TRD_TRADER) AS TRD_TRADER --In cases where there are multiple traders, take the first 	INTO #temp_audit_table 	FROM #temp_audit_table_temp 	GROUP BY 		PM_ORD, 		TRD_ORD, 		MULTI_FUND_ID, 		EXCEPTION_TYPE, 		ID, 		REASON, 		COMMENT, 		STATUS, 		CREATE_TIME, 		DEALING_DESK, 		FINAL_UPDATED_TIME, 		STATUS_CODE   	IF OBJECT_ID('VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE', 'U') IS NULL  	SELECT DISTINCT * 	INTO VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE 	FROM #temp_audit_table 	 	MERGE VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE AS T 	USING #temp_audit_table AS S 	ON (T.PM_ORD = S.PM_ORD 		AND ISNULL(T.TRD_ORD,'-1') = ISNULL(S.TRD_ORD,'-1') 		AND ISNULL(T.MULTIFUND,'-1') = ISNULL(S.MULTI_FUND_ID,'-1') 		AND T.DEALING_DESK = S.DEALING_DESK 		AND T.Exception_Type = S.Exception_Type 		AND ISNULL(T.ID,'-1')=ISNULL(S.ID,'-1')) 	WHEN MATCHED 		THEN  		UPDATE SET -- Do nothing 			T.PM_ORD = T.PM_ORD 	WHEN NOT MATCHED  		THEN  		INSERT (MULTIFUND, TRD_ORD,	PM_ORD, EXCEPTION_TYPE, ID, REASON, COMMENT, STATUS, CREATE_TIME, DEALING_DESK, EXECUTION_TIME, FINAL_UPDATED_TIME, AUTH_TIME, CLIENT_EXECUTION_NUM, PLACEMENT_NUM, STATUS_CODE, TRD_TRADER) 		VALUES (S.MULTI_FUND_ID, S.TRD_ORD,	S.PM_ORD, S.EXCEPTION_TYPE, S.ID, S.REASON, S.COMMENT, S.STATUS, S.CREATE_TIME, S.DEALING_DESK, S.EXECUTION_TIME, S.FINAL_UPDATED_TIME, S.AUTH_TIME, NULL, S.PLACEMENT_NUM, S.STATUS_CODE, S.TRD_TRADER);    IF OBJECT_ID('tempdb..#temp_oc_table', 'U') IS NOT NULL DROP TABLE #temp_oc_table IF OBJECT_ID('tempdb..#temp_PM_ORDERS', 'U') IS NOT NULL DROP TABLE #temp_PM_ORDERS IF OBJECT_ID('tempdb..#temp_pm_table', 'U') IS NOT NULL DROP TABLE #temp_pm_table IF OBJECT_ID('tempdb..#temp_ord_detail_table', 'U') IS NOT NULL DROP TABLE #temp_ord_detail_table IF OBJECT_ID('tempdb..#pre_temp_trades_table', 'U') IS NOT NULL DROP TABLE #pre_temp_trades_table IF OBJECT_ID('tempdb..#orders_pop', 'U') IS NOT NULL DROP TABLE #orders_pop IF OBJECT_ID('tempdb..#max_touch', 'U') IS NOT NULL DROP TABLE #max_touch  IF OBJECT_ID('tempdb..#temp_distinct_orders', 'U') IS NOT NULL DROP TABLE #temp_distinct_orders IF OBJECT_ID('tempdb..#temp_trades_table', 'U') IS NOT NULL DROP TABLE #temp_trades_table IF OBJECT_ID('tempdb..#temp_NC_rank_DEBT', 'U') IS NOT NULL DROP TABLE #temp_NC_rank_DEBT IF OBJECT_ID('tempdb..#temp_BECOH_debt_table', 'U') IS NOT NULL DROP TABLE #temp_BECOH_debt_table IF OBJECT_ID('tempdb..#pre_sample_table_DEBT', 'U') IS NOT NULL DROP TABLE #pre_sample_table_DEBT IF OBJECT_ID('tempdb..#Samples_elevated_DEBT', 'U') IS NOT NULL DROP TABLE #Samples_elevated_DEBT IF OBJECT_ID('tempdb..#Samples_normal_DEBT', 'U') IS NOT NULL DROP TABLE #Samples_normal_DEBT IF OBJECT_ID('tempdb..#Samples_DEBT', 'U') IS NOT NULL DROP TABLE #Samples_DEBT  IF OBJECT_ID('tempdb..#temp_NC_rank_DERIV', 'U') IS NOT NULL DROP TABLE #temp_NC_rank_DERIV IF OBJECT_ID('tempdb..#temp_BECOH_deriv_table', 'U') IS NOT NULL DROP TABLE #temp_BECOH_deriv_table IF OBJECT_ID('tempdb..#pre_sample_table_DERIV', 'U') IS NOT NULL DROP TABLE #pre_sample_table_DERIV IF OBJECT_ID('tempdb..#Samples_elevated_DERIV', 'U') IS NOT NULL DROP TABLE #Samples_elevated_DERIV IF OBJECT_ID('tempdb..#Samples_normal_DERIV', 'U') IS NOT NULL DROP TABLE #Samples_normal_DERIV IF OBJECT_ID('tempdb..#Samples_DERIV', 'U') IS NOT NULL DROP TABLE #Samples_DERIV IF OBJECT_ID('tempdb..#Samples', 'U') IS NOT NULL DROP TABLE #Samples IF OBJECT_ID('tempdb..#topped_up_samples_elevated', 'U') IS NOT NULL DROP TABLE #topped_up_samples_elevated IF OBJECT_ID('tempdb..#topped_up_samples_normal', 'U') IS NOT NULL DROP TABLE #topped_up_samples_normal IF OBJECT_ID('tempdb..#sample_trades_orders', 'U') IS NOT NULL DROP TABLE #sample_trades_orders IF OBJECT_ID('tempdb..#order_status', 'U') IS NOT NULL DROP TABLE #order_status IF OBJECT_ID('tempdb..#temp_final_status_table', 'U') IS NOT NULL DROP TABLE #temp_final_status_table IF OBJECT_ID('tempdb..#exceptions', 'U') IS NOT NULL DROP TABLE #exceptions IF OBJECT_ID('tempdb..#temp_audit_table_temp', 'U') IS NOT NULL DROP TABLE #temp_audit_table_temp IF OBJECT_ID('tempdb..#temp_audit_table', 'U') IS NOT NULL DROP TABLE #temp_audit_table IF OBJECT_ID('tempdb..#Samples_combined', 'U') IS NOT NULL DROP TABLE #Samples_combined  END;   --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: COMPLIANCE_SAMPLING_FX CreateDate: 2019-10-18 08:39:49.530 ModifyDate: 2021-05-06 12:27:34.223 --- DEFINITION START ---  -- ============================================= -- Author:		<LIZZIE REYNOLDS> -- Create date: <2019-04-30> -- Description:	<Procedure to implement compliance sampling> -- =============================================  -- ***************VERSION CONTROL*************** -- 2018-05-23 WH - Procedure created. Currently it only takes a random sample set. -- 2018-06-07 WH - Sampling logic updated to use risk weighted sampling -- 2018-08-08 KR - Added Fair Allocation Exception -- 2018-09-24 DDC - Added extra code to populate the COMPLIANCE_AUDIT_TABLE evert time the script is run. -- 2019-04-30 ER - updated for DMG desk to remove reference to counterparty direction, G&H and have changed the level of the script to be based on MFID instead of PM order (multiple major changes) --					initial testing this seems to work but there could be unseen issues to be aware of . -- *********************************************  CREATE PROCEDURE [dbo].[COMPLIANCE_SAMPLING_FX] --'2020-07-01 00:00:00.000','2020-12-12 00:00:00.000','DDC_test_26082020' --exec VISTA_REPORTING.dbo.COMPLIANCE_SAMPLING_FX '2018-03-01 00:00:00.000', '2019-06-30 00:00:00.000', 'ER_TEST29072' 	@Start_Date datetime, 	@End_Date datetime, 	@INSPECTION_NAME VARCHAR(MAX)   AS BEGIN  --DECLARE @Start_Date datetime, --@End_Date datetime, --@INSPECTION_NAME VARCHAR(MAX);  --set @Start_Date = '2020-07-01 00:00:00.000' --set @End_Date = '2020-08-26 00:00:00.000' --set @INSPECTION_NAME = 'DDC_test_26082020'  	--0. Test query to check parameters passed from OS are correct 	INSERT INTO VISTA_REPORTING.dbo.compliance_sampling_dates 	SELECT @Start_Date AS start_time, @End_Date AS end_time, @INSPECTION_NAME AS Inspection_Name,  	getdate() as [Sampled time] , 'FX' as DEALING_DESK  	--1. Get all trades in the sample period FOR FX MANAGER AND ALADDIN 	IF OBJECT_ID('tempdb..#ORDERS_AL_pop', 'U') IS NOT NULL DROP TABLE #ORDERS_AL_pop 	SELECT DISTINCT 		PM.ORD_NUM, 		T.TRD_TRADE_DATE, -- Use the TRD_TRADE_DATE 		PM.CUSIP, 		PM.SM_SEC_TYPE 	INTO #ORDERS_AL_pop 	FROM (SELECT DISTINCT ORD_NUM, CUSIP,  SM_SEC_TYPE, DEALING_DESK FROM VISTA_REPORTING.dbo.PM_ORDERS) PM 	LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.PM_ORD = PM.ORD_NUM 	LEFT JOIN (SELECT DISTINCT ORD_NUM, TRD_TRADE_DATE  FROM VISTA_REPORTING.dbo.TRADES) T ON T.ORD_NUM = OC.TRD_ORD 	WHERE CONVERT(DATE, TRD_TRADE_DATE) BETWEEN CONVERT(DATE,@Start_Date) AND CONVERT(DATE,@End_Date) AND PM.DEALING_DESK = 'FX' 		  AND NOT EXISTS (SELECT soc.ORDER_ID FROM Vista_Reporting.dbo.SAMPLED_ORDERS_FX_COMPLIANCE soc WHERE soc.ORDER_ID = pm.ORD_NUM)   	IF OBJECT_ID('tempdb..#ORDERS_FX_pop', 'U') IS NOT NULL DROP TABLE #ORDERS_FX_pop 	SELECT DISTINCT 		FXO.FXM_ORDER_ID AS ORDER_ID, 		CAST(FXT.EXECUTED_DATE_TIME AS DATE) as TRD_TRADE_DATE, 		NULL AS CUSIP, 		FXO.INSTRUCTION_TYPE 	INTO #ORDERS_FX_pop 	FROM VISTA_REPORTING.DBO.FX_ORDERS FXO 	LEFT JOIN (SELECT DISTINCT ORDER_ID, EXECUTED_DATE_TIME FROM  VISTA_REPORTING.DBO.FX_TRADES) FXT ON FXO.FXM_ORDER_ID = FXT.ORDER_ID 	WHERE CONVERT(DATE, EXECUTED_DATE_TIME) BETWEEN CONVERT(DATE,@Start_Date) AND CONVERT(DATE,@End_Date)  		  AND NOT EXISTS (SELECT soc.ORDER_ID FROM Vista_Reporting.dbo.SAMPLED_ORDERS_FX_COMPLIANCE soc WHERE soc.ORDER_ID = fxo.FXM_ORDER_ID) 	  	IF OBJECT_ID('tempdb..#ORDERS_COMBINED_pop', 'U') IS NOT NULL DROP TABLE #ORDERS_COMBINED_pop 	SELECT DISTINCT  		AL.ORD_NUM AS ORDER_ID, 		AL.TRD_TRADE_DATE AS TRD_TRADE_DATE, 		AL.CUSIP, 		AL.SM_SEC_TYPE AS PRODUCT, 		'FX' AS DEALING_DESK, 		'AL' AS SOURCE 	INTO #ORDERS_COMBINED_pop 	FROM #ORDERS_AL_pop AL 	UNION 	SELECT DISTINCT 		FX.ORDER_ID, 		FX.TRD_TRADE_DATE, 		NULL AS CUSIP, 		FX.INSTRUCTION_TYPE, 		'FX' AS DEALING_DESK, 		'FX' AS SOURCE 	FROM #ORDERS_FX_pop FX   	--2. Get the latest touch for each MFID so that we only look at the latest version of the MFID. 	IF OBJECT_ID('tempdb..#max_touch', 'U') IS NOT NULL DROP TABLE #max_touch  	SELECT  		MULTI_FUND_ID, 		MAX(TOUCH_COUNT) AS MAX_TOUCH 	INTO #max_touch 	FROM VISTA_REPORTING.dbo.TRADES 	GROUP BY MULTI_FUND_ID  		--2. Get the latest touch for each MFID so that we only look at the latest version of the MFID. 	IF OBJECT_ID('tempdb..#max_touch_PM', 'U') IS NOT NULL DROP TABLE #max_touch_PM 	SELECT  		ORD_NUM, 		MAX(TOUCH_COUNT) AS MAX_TOUCH 	INTO #max_touch_PM 	FROM VISTA_REPORTING.dbo.PM_ORDERS 	GROUP BY ORD_NUM  	IF OBJECT_ID('VISTA_REPORTING.dbo.SAMPLED_ORDERS_FX_COMPLIANCE', 'U') IS NULL 	BEGIN 		CREATE TABLE VISTA_REPORTING.dbo.SAMPLED_ORDERS_FX_COMPLIANCE ( 			ORDER_ID CHAR(12), 			SOURCE VARCHAR(2), 			SAMPLED_DATE DATETIME, 			INSPECTION_NAME VARCHAR(MAX), 			DEALING_DESK VARCHAR(20) 			) 	END  --TAKING SCORINGS FOR FX ORDERS IF OBJECT_ID('tempdb..#temp_scorings_fx', 'U') IS NOT NULL DROP TABLE #temp_scorings_fx SELECT DISTINCT 	OP.ORDER_ID, 	case when FXO.NOTIONAL_AMOUNT_GBP_FAR IS NULL THEN FXO.NOTIONAL_AMOUNT_GBP 	WHEN FXO.NOTIONAL_AMOUNT_FAR IS NOT NULL AND  FXO.NOTIONAL_AMOUNT_GBP = FXO.NOTIONAL_AMOUNT_GBP_FAR THEN FXO.NOTIONAL_AMOUNT_GBP 	WHEN FXO.NOTIONAL_AMOUNT_FAR IS NOT NULL AND FXO.NOTIONAL_AMOUNT_GBP != FXO.NOTIONAL_AMOUNT_GBP_FAR THEN FXO.NOTIONAL_AMOUNT_GBP_FAR END AS NOTIONAL_AMOUNT_GBP, 	'FX' AS SOURCE, 	case when FXT.BASE_CCY IS null then FXO.BUY_CCY else fxt.BASE_CCY end as BASE_CCY, 	CASE WHEN FXT.CONTRA_CCY IS NULL THEN FXO.SELL_CCY ELSE FXT.CONTRA_CCY END AS CONTRA_CCY, 	CONVERT(VARCHAR(30), FXT.EXC_SESSION_TYPE) AS EXC_SESSION_TYPE into #temp_scorings_fx FROM #ORDERS_COMBINED_pop OP LEFT JOIN VISTA_REPORTING.dbo.FX_ORDERS FXO ON FXO.FXM_ORDER_ID = OP.ORDER_ID left join VISTA_REPORTING.dbo.FX_TRADES FXT ON FXT.ORDER_ID = OP.ORDER_ID WHERE OP.SOURCE = 'FX'   IF OBJECT_ID('tempdb..#temp_currencies_FX', 'U') IS NOT NULL DROP TABLE #temp_currencies_FX SELECT 	TS.*, 	CASE WHEN BASE_CCY IN ('EUR', 'GBP', 'USD') AND CONTRA_CCY IN ('EUR', 'GBP', 'USD') THEN 1 	WHEN BASE_CCY IN ('EUR', 'GBP', 'USD', 'JPY', 'AUD', 'NZD', 'CAD', 'CHF', 'NOK', 'SEK') AND CONTRA_CCY IN ('JPY', 'AUD', 'NZD', 'CAD', 'CHF', 'NOK', 'SEK') THEN 2 	WHEN BASE_CCY IN ('JPY', 'AUD', 'NZD', 'CAD', 'CHF', 'NOK', 'SEK') AND CONTRA_CCY IN ('EUR', 'GBP', 'USD', 'JPY', 'AUD', 'NZD', 'CAD', 'CHF', 'NOK', 'SEK')  THEN 2 	ELSE 3 END AS CURRENCY_SCORE, 	CASE WHEN isnull(EXC_SESSION_TYPE, '') = 'Allocation' THEN 2 ELSE 1 END AS TRADING_METHOD_SCORE 	INTO #TEMP_CURRENCIES_FX FROM #temp_scorings_fx TS     --TAKING SCORINGS FOR ALADDIN ORDERS IF OBJECT_ID('tempdb..#temp_scorings_al', 'U') IS NOT NULL DROP TABLE #temp_scorings_al SELECT DISTINCT  	pm.ORD_NUM AS ORDER_ID, 	T.NET_CONSIDERATION_GBP AS SUM_NET_CONSIDERATION, 	'AL' AS SOURCE, 	SUBSTRING(SEC_DESC1, 1,3) AS BASE_CCY, 	SUBSTRING(SEC_DESC1, 7,3) AS CONTRA_CCY, 	CONVERT(VARCHAR(30),null) as EXC_SESSION_TYPE INTO #temp_scorings_al FROM VISTA_REPORTING.DBO.PM_ORDERS pm LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON oc.PM_ORD = PM.ORD_NUM LEFT JOIN (SELECT DISTINCT ORD_NUM, NET_CONSIDERATION_GBP, T.MULTI_FUND_ID FROM VISTA_REPORTING.dbo.TRADES T INNER JOIN #max_touch MT ON T.MULTI_FUND_ID = MT.MULTI_FUND_ID AND T.TOUCH_COUNT = MT.MAX_TOUCH ) t ON t.ORD_NUM = oc.TRD_ORD  WHERE DEALING_DESK = 'FX'  	  AND EXISTS (SELECT ocp.ORDER_ID FROM #ORDERS_COMBINED_pop ocp WHERE ocp.ORDER_ID = pm.ORD_NUM)   IF OBJECT_ID('tempdb..#temp_currencies_AL', 'U') IS NOT NULL DROP TABLE #temp_currencies_AL SELECT 	TS.*, 	CASE WHEN BASE_CCY IN ('EUR', 'GBP', 'USD') AND CONTRA_CCY IN ('EUR', 'GBP', 'USD') THEN 1 	WHEN BASE_CCY IN ('EUR', 'GBP', 'USD', 'JPY', 'AUD', 'NZD', 'CAD', 'CHF', 'NOK', 'SEK') AND CONTRA_CCY IN ('JPY', 'AUD', 'NZD', 'CAD', 'CHF', 'NOK', 'SEK') THEN 2 	WHEN BASE_CCY IN ('JPY', 'AUD', 'NZD', 'CAD', 'CHF', 'NOK', 'SEK') AND CONTRA_CCY IN ('EUR', 'GBP', 'USD', 'JPY', 'AUD', 'NZD', 'CAD', 'CHF', 'NOK', 'SEK')  THEN 2 	ELSE 3 END AS CURRENCY_SCORE, 	1 AS TRADING_METHOD_SCORE INTO #TEMP_CURRENCIES_AL FROM #temp_scorings_al TS   IF OBJECT_ID('tempdb..#UNION_RANKS', 'U') IS NOT NULL DROP TABLE #UNION_RANKS SELECT *, 	DENSE_RANK() OVER (ORDER BY NOTIONAL_AMOUNT_GBP) AS NC_RANK INTO #UNION_RANKS FROM #TEMP_CURRENCIES_FX UNION SELECT *, 	DENSE_RANK() OVER (ORDER BY SUM_NET_CONSIDERATION) AS NC_RANK FROM #TEMP_CURRENCIES_AL    	/*****************************/ 				--ADD A SCORE FOR ALL INST TYPES 	/*****************************/     	DECLARE @MAX_NC_RANK INT; 	SET @MAX_NC_RANK = (SELECT MAX(NC_RANK) FROM #UNION_RANKS);  	--6. Do the risk scoring 	IF OBJECT_ID('tempdb..#temp_RANK_table', 'U') IS NOT NULL DROP TABLE #temp_RANK_table 	SELECT DISTINCT 		tnr.*, 		(1.0*tnr.NC_RANK/@MAX_NC_RANK) AS PERCENTAGE_NC_RANK,  										                   		CASE  			WHEN (1.0*tnr.NC_RANK/@MAX_NC_RANK) > 0.66 THEN 2  														   			ELSE 1 		END AS TRADE_VALUE_SCORE 	INTO #temp_RANK_table 	FROM #UNION_RANKS tnr  	 	--7. Bucket the orders into Elevated and Normal 	IF OBJECT_ID('tempdb..#pre_sample_table', 'U') IS NOT NULL DROP TABLE #pre_sample_table 	SELECT DISTINCT 		TRT.ORDER_ID, 		TRT.SOURCE, 		'FX' AS DEALING_DESK, 		MAX(TRT.CURRENCY_SCORE + TRT.TRADING_METHOD_SCORE  + TRT.TRADE_VALUE_SCORE ) AS AGGREGATE_SCORE, --In case there are multiple records for a mfid, take the maximum score that we see 		CASE 			WHEN MAX(TRT.CURRENCY_SCORE + TRT.TRADING_METHOD_SCORE  + TRT.TRADE_VALUE_SCORE) >= 5 THEN 'ELEVATED' --In case there are multiple records for a mfid, take the maximum score that we see 			ELSE 'NORMAL' 		END AS RISK_TIER 	INTO #pre_sample_table 	FROM #temp_RANK_table TRT 	GROUP BY TRT.ORDER_ID, TRT.SOURCE   	--8. Find required number of samples -2.5% of all orders. 	DECLARE @Total_Num_trades FLOAT; 	SET @Total_Num_trades = 2.5/100*(SELECT COUNT(DISTINCT ORDER_ID) FROM #pre_sample_table);   	--9. Get samples (80% of the 2.5% are from the elevated bucket. The rest come from the normal bucket). 	IF OBJECT_ID('tempdb..#Samples_elevated', 'U') IS NOT NULL DROP TABLE #Samples_elevated 	SELECT TOP (CONVERT(INT,(CEILING(@Total_Num_trades * 0.8)))) * 	INTO #Samples_elevated 	FROM #pre_sample_table 	WHERE RISK_TIER='ELEVATED'  	ORDER BY NEWID() -- new ID will randomly rank and taking top n will keep this randomness 	 	IF OBJECT_ID('tempdb..#Samples_normal', 'U') IS NOT NULL DROP TABLE #Samples_normal 	SELECT TOP (CONVERT(INT,(CEILING(@Total_Num_trades * 0.2)))) * 	INTO #Samples_normal 	FROM #pre_sample_table 	WHERE RISK_TIER='Normal'  	ORDER BY NEWID() -- new ID will randomly rank and taking top n will keep this randomness 	 	IF OBJECT_ID('tempdb..#Samples', 'U') IS NOT NULL DROP TABLE #Samples 	SELECT *  	INTO #Samples 	FROM #Samples_elevated 	UNION 	SELECT * FROM #Samples_normal  	/*****************************/ 		--PLACEHOLDER TO USE TO HELP TOP UP for < 100 samples 	/*****************************/  	--combine elevated and normal samples into one table 	IF OBJECT_ID('tempdb..#Samples_total', 'U') IS NOT NULL DROP TABLE #Samples_total 	SELECT ORDER_ID, SOURCE, DEALING_DESK, AGGREGATE_SCORE, RISK_TIER--, CP_DIRECTION_FLAG 	INTO #Samples_total 	FROM #Samples  	--if less than 100 samples, figure out how many more need to be sampled 	declare @total_trades int 	set @total_trades = (select COUNT(distinct ORDER_ID) from #Samples_total);  	-- A. USE THIS TO TOP UP TO X SAMPLES 	declare @total_top_up_amount int 	if @total_trades < 100  set @total_top_up_amount = 100 -@total_trades 	else set @total_top_up_amount = 0 	declare @elevated_top_up_amount int 	declare @normal_top_up_amount int 	set @elevated_top_up_amount = CEILING(0.8*@total_top_up_amount)  	set @normal_top_up_amount = floor(0.2*@total_top_up_amount)  	--grab the required number of samples from elevated bucket 	IF OBJECT_ID('tempdb..#topped_up_samples_elevated', 'U') IS NOT NULL DROP TABLE #topped_up_samples_elevated 	select top(@elevated_top_up_amount) el.*  	into #topped_up_samples_elevated 	from #pre_sample_table el 	left join #Samples s 	on el.ORDER_ID = s.ORDER_ID AND EL.SOURCE = S.SOURCE 	where s.ORDER_ID IS NULL AND el.RISK_TIER = 'ELEVATED' 	order by NEWID()   	--grab the required number of samples from normal bucket 	IF OBJECT_ID('tempdb..#topped_up_samples_normal', 'U') IS NOT NULL DROP TABLE #topped_up_samples_normal 	select top(@normal_top_up_amount) n.* 	into #topped_up_samples_normal 	from #pre_sample_table n 	left join #Samples s 	on n.ORDER_ID = s.ORDER_ID AND N.SOURCE = S.SOURCE 	where s.ORDER_ID IS NULL AND n.RISK_TIER = 'NORMAL' 	order by NEWID()   	--add new topped up samples to sample table 	insert into #Samples_total 	select ORDER_ID, SOURCE, DEALING_DESK, AGGREGATE_SCORE, RISK_TIER from #topped_up_samples_elevated 	insert into #Samples_total 	select ORDER_ID, SOURCE, DEALING_DESK, AGGREGATE_SCORE, RISK_TIER from #topped_up_samples_normal  	--add sampled order numbers to list of smapled orders 	IF OBJECT_ID('VISTA_REPORTING.dbo.SAMPLED_ORDERS_FX_COMPLIANCE') IS NULL 	SELECT DISTINCT  		CAST(ORDER_ID AS varchar(200)) AS ORDER_ID, 		SOURCE,  		GETDATE() AS SAMPLED_DATE,  		@INSPECTION_NAME AS [INSPECTION NAME] , 		'FX' AS DEALING_DESK 	INTO VISTA_REPORTING.dbo.SAMPLED_ORDERS_FX_COMPLIANCE 	FROM #Samples_total 	ELSE  	INSERT INTO VISTA_REPORTING.dbo.SAMPLED_ORDERS_FX_COMPLIANCE 	SELECT DISTINCT  		CAST(ORDER_ID AS varchar(200)) AS ORDER_ID, 		SOURCE,  		GETDATE() AS SAMPLED_DATE, 		@INSPECTION_NAME AS [INSPECTION NAME], 		'FX' AS DEALING_DESK 	FROM #Samples_total  	/*****************************/ 		--Combine all samples 	/*****************************/ 	--10. Get all trades associated with the orders to sample 	IF OBJECT_ID('tempdb..#sample_trades_orders', 'U') IS NOT NULL DROP TABLE #sample_trades_orders 	SELECT DISTINCT  		S.ORDER_ID, 		CASE WHEN S.SOURCE = 'AL' THEN T.MULTI_FUND_ID WHEN S.SOURCE = 'FX' THEN FXT.TRADE_ID END AS TRANSACTION_NUMBER, 		S.SOURCE, 		CASE WHEN S.SOURCE = 'AL' THEN oc.PM_ORD WHEN S.SOURCE = 'FX' THEN FXT.ORDER_ID END AS PM_ORD, 		oc.TRD_ORD, 		s.DEALING_DESK, 		1 AS For_Sample 	INTO #sample_trades_orders 	FROM #Samples_total S 	LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON S.ORDER_ID = oc.PM_ORD AND S.SOURCE = 'AL' 	LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM FROM  VISTA_REPORTING.DBO.TRADES) T ON S.SOURCE = 'AL' AND T.ORD_NUM = OC.TRD_ORD 	LEFT JOIN (SELECT DISTINCT TRADE_ID, ORDER_ID FROM VISTA_REPORTING.DBO.FX_TRADES) FXT ON S.SOURCE = 'FX' AND S.ORDER_ID = FXT.ORDER_ID  	 	--11. Create status table 	IF OBJECT_ID('tempdb..#ORDER_status', 'U') IS NOT NULL DROP TABLE #ORDER_status 	SELECT distinct 		ORDERS.SOURCE, 		ORDERS.ORDER_ID, 		sample.PM_ORD, 		ORDERS.DEALING_DESK,		CASE  			WHEN sample.For_Sample = 1 THEN '2C1' --Order level - Compliance Review Pending 		ELSE '2C2' 						   --Order level - Not sampled 		END AS Status, 		NULL AS FINAL_UPDATED_TIME 	INTO #ORDER_status 	FROM (SELECT DISTINCT ORDER_ID, DEALING_DESK, SOURCE FROM #ORDERS_combined_pop) ORDERS 	LEFT JOIN (SELECT DISTINCT ORDER_ID, PM_ORD, For_Sample FROM #sample_trades_orders) sample ON ORDERS.ORDER_ID = sample.ORDER_ID  	--11a. Put the orders into the status table 	IF OBJECT_ID('VISTA_REPORTING.dbo.COMPLIANCE_ORDERS_FINAL_STATUS_UPDATE_TABLE_FX', 'U') IS NULL 	 	SELECT  		ORDER_ID, 		SOURCE, 		DEALING_DESK, 		STATUS, 		FINAL_UPDATED_TIME  	INTO VISTA_REPORTING.dbo.COMPLIANCE_ORDERS_FINAL_STATUS_UPDATE_TABLE_FX 	FROM #ORDER_status  	MERGE VISTA_REPORTING.dbo.COMPLIANCE_ORDERS_FINAL_STATUS_UPDATE_TABLE_FX AS T 	USING #ORDER_status AS S 	ON (T.ORDER_ID = S.ORDER_ID AND T.SOURCE = S.SOURCE ) 	WHEN MATCHED 		THEN  		UPDATE SET 			T.ORDER_ID=T.ORDER_ID, 			T.SOURCE = S.SOURCE, 			T.Status = (CASE  				WHEN T.Status = '2C2' THEN S.Status -- Not sampled previously - update to the current status 				WHEN T.Status IN ('2C1','2C3','2C4') THEN T.Status -- Has been sampled previously so we don't update the status 			END) 	WHEN NOT MATCHED  		THEN  		INSERT ( ORDER_ID, SOURCE, DEALING_DESK, STATUS, FINAL_UPDATED_TIME) 		VALUES (S.ORDER_ID, SOURCE, S.DEALING_DESK, S.STATUS, S.FINAL_UPDATED_TIME); 	 	  	--12. Put the trade exception level detail into the status table - is to be done for all exception types. 	IF OBJECT_ID('tempdb..#exceptions', 'U') IS NOT NULL DROP TABLE #exceptions	 	--COH 	SELECT DISTINCT  		OS.ORDER_ID, 		OS.SOURCE, 		CASE WHEN OS.SOURCE = 'FX' THEN  FXT.TRADE_ID WHEN OS.SOURCE = 'AL' THEN T.MULTI_FUND_ID END AS TRANSACTION_NUMBER,  		'FX' AS DEALING_DESK, 		vg.[VG_604] AS [Exception_Value], 		vg.VG_604_CREATETIME AS CREATE_TIME, 		CONVERT(VARCHAR(10),'COH') AS Exception_Type, 		CASE WHEN vg.[VG_604] = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	INTO #exceptions 	FROM #ORDER_status OS 	LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON OS.ORDER_ID = oc.pm_ord AND OS.SOURCE = 'AL' 	LEFT JOIN (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID FROM VISTA_REPORTING.DBO.TRADES) T ON T.ORD_NUM = OC.TRD_ORD AND OS.SOURCE = 'AL' 	LEFT JOIN (SELECT DISTINCT TRADE_ID, ORDER_ID FROM VISTA_REPORTING.DBO.FX_TRADES) FXT ON FXT.ORDER_ID = OS.ORDER_ID AND OS.SOURCE = 'FX' 	LEFT JOIN VISTA_STAGING.DBO.VG_604_CLIENT_ORDER_HANDLING_FX_TABLE vg ON (vg.ORDER_ID = T.ORD_NUM AND vg.DATA_SOURCE = 'AL') OR (vg.DATA_SOURCE = 'FX' AND vg.ORDER_ID = FXT.ORDER_ID) 		WHERE OS.Status = '2C1'	AND vg.ORDER_ID IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly). 	UNION 	--best ex 	SELECT DISTINCT  		OS.ORDER_ID, 		OS.SOURCE, 		CASE WHEN OS.SOURCE = 'FX' THEN  FXT.TRADE_ID WHEN OS.SOURCE = 'AL' THEN T.MULTI_FUND_ID END AS TRANSACTION_NUMBER,  		'FX' AS DEALING_DESK, 		vg.VG_607 AS [Exception_Value], 		vg.VG_607_CREATETIME AS CREATE_TIME, 		CONVERT(VARCHAR(10),'BestEx') AS Exception_Type, 		CASE WHEN vg.VG_607 = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #ORDER_status OS 	LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON OS.ORDER_ID = oc.pm_ord AND OS.SOURCE = 'AL' 	LEFT JOIN (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID FROM VISTA_REPORTING.DBO.TRADES) T ON T.ORD_NUM = OC.TRD_ORD AND OS.SOURCE = 'AL' 	LEFT JOIN (SELECT DISTINCT TRADE_ID, ORDER_ID FROM VISTA_REPORTING.DBO.FX_TRADES) FXT ON FXT.ORDER_ID = OS.ORDER_ID AND OS.SOURCE = 'FX' 	LEFT JOIN VISTA_STAGING.DBO.VG_607_BEST_EXECUTION_FX_TABLE vg ON (vg.TRADE_ID = T.MULTI_FUND_ID AND vg.DATA_SOURCE = 'AL') OR (vg.DATA_SOURCE = 'FX' AND vg.TRADE_ID = FXT.TRADE_ID) 		WHERE OS.Status = '2C1'	AND vg.TRADE_ID IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly). 	UNION 	SELECT DISTINCT  		OS.ORDER_ID, 		OS.SOURCE, 		CASE WHEN OS.SOURCE = 'FX' THEN  FXT.TRADE_ID WHEN OS.SOURCE = 'AL' THEN T.MULTI_FUND_ID END AS TRANSACTION_NUMBER,  		'FX' AS DEALING_DESK, 		vg.VG_10 AS [Exception_Value], 		vg.VG_10_CREATETIME AS CREATE_TIME, 		CONVERT(VARCHAR(10),'TRec') AS Exception_Type, 		CASE WHEN vg.VG_10 = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #ORDER_status OS 	LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON OS.ORDER_ID = oc.pm_ord AND OS.SOURCE = 'AL' 	LEFT JOIN (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID FROM VISTA_REPORTING.DBO.TRADES) T ON T.ORD_NUM = OC.TRD_ORD AND OS.SOURCE = 'AL' 	LEFT JOIN (SELECT DISTINCT TRADE_ID, ORDER_ID FROM VISTA_REPORTING.DBO.FX_TRADES) FXT ON FXT.ORDER_ID = OS.ORDER_ID AND OS.SOURCE = 'FX' 	LEFT JOIN VISTA_STAGING.DBO.VG_10_TIMELY_RECORDING_FX_TABLE vg ON (vg.TRADE_ID = T.MULTI_FUND_ID AND vg.SOURCE = 'AL') OR (vg.SOURCE = 'FX' AND vg.TRADE_ID = FXT.TRADE_ID) 		WHERE OS.Status = '2C1'	AND vg.TRADE_ID IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly). 	UNION 	-- Timely Ex 	SELECT DISTINCT  		OS.ORDER_ID, 		OS.SOURCE, 		CASE WHEN OS.SOURCE = 'FX' THEN  FXT.TRADE_ID WHEN OS.SOURCE = 'AL' THEN T.MULTI_FUND_ID END AS TRANSACTION_NUMBER,  		'FX' AS DEALING_DESK, 		vg.[VG_09] AS [Exception_Value], 		vg.VG_09_CREATETIME AS CREATE_TIME, 		CONVERT(VARCHAR(10),'TimEx') AS Exception_Type, 		CASE WHEN vg.[VG_09] = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #ORDER_status OS 	LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON OS.ORDER_ID = oc.pm_ord AND OS.SOURCE = 'AL' 	LEFT JOIN (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID FROM VISTA_REPORTING.DBO.TRADES) T ON T.ORD_NUM = OC.TRD_ORD AND OS.SOURCE = 'AL' 	LEFT JOIN (SELECT DISTINCT TRADE_ID, ORDER_ID FROM VISTA_REPORTING.DBO.FX_TRADES) FXT ON FXT.ORDER_ID = OS.ORDER_ID AND OS.SOURCE = 'FX' 	LEFT JOIN VISTA_STAGING.DBO.VG_09_TIMELY_EXECUTION_FX_TABLE vg ON (vg.ORDER_ID = T.ORD_NUM AND vg.SOURCE = 'AL') OR (vg.SOURCE = 'FX' AND vg.ORDER_ID = FXT.ORDER_ID) 		WHERE OS.Status = '2C1'	AND vg.ORDER_ID IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly). 	  	UNION 	 	SELECT DISTINCT  		OS.ORDER_ID, 		OS.SOURCE, 		CASE WHEN OS.SOURCE = 'FX' THEN  FXT.TRADE_ID WHEN OS.SOURCE = 'AL' THEN T.MULTI_FUND_ID END AS TRANSACTION_NUMBER,  		'FX' AS DEALING_DESK, 		vg.[VG_611] AS [Exception_Value], 		vg.VG_611_CREATETIME AS CREATE_TIME, 		CONVERT(VARCHAR(10),'OrderAgg') AS Exception_Type, 		CASE WHEN vg.[VG_611] = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #ORDER_status OS 	LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON OS.ORDER_ID = oc.pm_ord AND OS.SOURCE = 'AL' 	LEFT JOIN (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID FROM VISTA_REPORTING.DBO.TRADES) T ON T.ORD_NUM = OC.TRD_ORD AND OS.SOURCE = 'AL' 	LEFT JOIN (SELECT DISTINCT TRADE_ID, ORDER_ID FROM VISTA_REPORTING.DBO.FX_TRADES) FXT ON FXT.ORDER_ID = OS.ORDER_ID AND OS.SOURCE = 'FX' 	LEFT JOIN VISTA_STAGING.DBO.VG_611_ORDER_AGGREGATION_FX_TABLE vg ON (vg.ORDER_ID = T.ORD_NUM AND vg.DATA_SOURCE = 'AL') OR (vg.DATA_SOURCE = 'FX' AND vg.ORDER_ID = FXT.ORDER_ID) 		WHERE OS.Status = '2C1'	AND vg.ORDER_ID IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly). 	 	 	UNION 	 	SELECT DISTINCT  		OS.ORDER_ID, 		OS.SOURCE, 		CASE WHEN OS.SOURCE = 'FX' THEN  FXT.TRADE_ID WHEN OS.SOURCE = 'AL' THEN T.MULTI_FUND_ID END AS TRANSACTION_NUMBER,  		'FX' AS DEALING_DESK, 		vg.[VG_612] AS [Exception_Value], 		vg.VG_612_CREATETIME AS CREATE_TIME, 		CONVERT(VARCHAR(10),'OrderAll') AS Exception_Type, 		CASE WHEN vg.[VG_612] = 0 THEN '2C1' ELSE '2C2' END AS Status, 		NULL AS FINAL_UPDATED_TIME, 		NULL AS TOUCH_COUNT, 		NULL AS ROW_ID 	FROM #ORDER_status OS 	LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON OS.ORDER_ID = oc.pm_ord AND OS.SOURCE = 'AL' 	LEFT JOIN (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID FROM VISTA_REPORTING.DBO.TRADES) T ON T.ORD_NUM = OC.TRD_ORD AND OS.SOURCE = 'AL' 	LEFT JOIN (SELECT DISTINCT TRADE_ID, ORDER_ID FROM VISTA_REPORTING.DBO.FX_TRADES) FXT ON FXT.ORDER_ID = OS.ORDER_ID AND OS.SOURCE = 'FX' 	LEFT JOIN VISTA_STAGING.DBO.VG_612_ORDER_ALLOCATION_FX_TABLE vg ON (vg.TRANSACTION_NUMBER = T.MULTI_FUND_ID AND vg.DATA_SOURCE = 'AL')  																		OR (vg.DATA_SOURCE = 'FX' AND vg.TRANSACTION_NUMBER = FXT.TRADE_ID) 	WHERE OS.Status = '2C1'	AND vg.TRANSACTION_NUMBER IS NOT NULL -- Due to merged/split orders, we need to filter instances where there is no exception in th VG table (i.e. the join has not worked correctly).   	IF OBJECT_ID('VISTA_REPORTING.dbo.INSPECTION_EXCEPTION_COUNT_FX', 'U') IS NULL  	SELECT  		@INSPECTION_NAME AS INSPECTION_NAME, 		@Start_Date AS INSPECTION_START_DATE, 		@End_Date AS INSPECTION_END_DATE, 		GETDATE() AS INSPECTION_SAMPLE_DATE, 		'FX' AS DEALING_DESK, 		Exception_Type,  		CASE  			WHEN Exception_Type in ('COH', 'OrderAgg', 'TimEx') THEN	COUNT(DISTINCT ORDER_ID) 			ELSE COUNT(DISTINCT COALESCE(TRANSACTION_NUMBER, ORDER_ID)) 		END AS EXCEPTION_COUNT 	INTO VISTA_REPORTING.dbo.INSPECTION_EXCEPTION_COUNT_FX 	FROM #exceptions 	WHERE Exception_Value >= 1 	GROUP BY Exception_Type 	 	ELSE  	INSERT INTO VISTA_REPORTING.dbo.INSPECTION_EXCEPTION_COUNT_FX 	SELECT  		@INSPECTION_NAME, 		@Start_Date, 		@End_Date, 		GETDATE(), 		'FX', 		Exception_Type,  		CASE  			WHEN Exception_Type in ('COH', 'OrderAgg', 'TimEx') THEN	COUNT(DISTINCT ORDER_ID) 			ELSE COUNT(DISTINCT COALESCE(TRANSACTION_NUMBER, ORDER_ID)) 		END AS EXCEPTION_COUNT 	FROM #exceptions 	WHERE Exception_Value >= 1 	GROUP BY Exception_Type  	 	IF OBJECT_ID('VISTA_REPORTING.dbo.FX_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE', 'U') IS NULL  	SELECT DISTINCT * 	INTO  VISTA_REPORTING.dbo.FX_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE 	FROM  #exceptions 	 	MERGE VISTA_REPORTING.dbo.FX_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE AS T 	USING #exceptions AS S  	ON (T.ORDER_ID = S.ORDER_ID 		AND T.SOURCE = S.SOURCE 		AND ISNULL(T.TRANSACTION_NUMBER,'-1') = ISNULL(S.TRANSACTION_NUMBER,'-1') 		AND ISNULL(T.TOUCH_COUNT,'-1') = ISNULL(S.TOUCH_COUNT,'-1') 		AND T.DEALING_DESK = S.DEALING_DESK 		AND T.Exception_Type = S.Exception_Type 		AND ISNULL(T.ROW_ID,'-1') = ISNULL(S.ROW_ID,'-1')) 	WHEN MATCHED 		THEN  		UPDATE SET -- Do nothing 			T.ORDER_ID = T.ORDER_ID 	WHEN NOT MATCHED  		THEN  		INSERT (ORDER_ID,		SOURCE,	TRANSACTION_NUMBER,		DEALING_DESK,	TOUCH_COUNT,		[Exception_Value],	Exception_Type,		Status,		FINAL_UPDATED_TIME, ROW_ID) 		VALUES (S.ORDER_ID,	S.SOURCE,	S.TRANSACTION_NUMBER,	S.DEALING_DESK,		S.TOUCH_COUNT,  S.[Exception_Value],	S.Exception_Type,	S.Status,	S.FINAL_UPDATED_TIME, S.ROW_ID);    	--Insert into COMPLIANCE_AUDIT_TABLE IF OBJECT_ID('tempdb..#temp_pre_audit', 'U') IS NOT NULL DROP TABLE #temp_pre_audit SELECT DISTINCT 	e.TRANSACTION_NUMBER, 	--e.TRD_ORD, 	e.ORDER_ID, 	e.Exception_Type as Exception_Type2, 	CASE  		WHEN e.Exception_Type = 'BESTEX' THEN 'Best Execution' 		WHEN e.Exception_Type = 'TREC' THEN 'Timely Recording' 		WHEN e.Exception_Type = 'COH' THEN 'Client Order Handling' 		WHEN e.Exception_Type = 'TEX' THEN 'Timely Execution' 		WHEN e.Exception_Type = 'OrderAgg' THEN 'Order Aggregation' 		WHEN e.Exception_Type = 'OrderAll' THEN 'Order Allocation' 	END AS EXCEPTION_TYPE, 	CASE --do we want all these to be MFID when possible? please advise 		WHEN e.Exception_Type = 'BESTEX' THEN e.TRANSACTION_NUMBER 		WHEN e.Exception_Type = 'TREC' THEN e.TRANSACTION_NUMBER 		WHEN e.Exception_Type = 'COH' THEN e.ORDER_ID 		WHEN e.Exception_Type = 'TEX' THEN e.ORDER_ID 		WHEN e.Exception_Type = 'OrderAgg' THEN e.ORDER_ID 		WHEN e.Exception_Type = 'OrderAll' THEN e.TRANSACTION_NUMBER 	END AS ID, 	NULL AS REASON, 	NULL AS COMMENT, 	cs.STATUS, 	e.CREATE_TIME, 	e.DEALING_DESK, 	CASE WHEN e.SOURCE = 'FX' THEN FXT.EXECUTED_DATE_TIME WHEN e.SOURCE = 'AL' THEN  t.EXECUTION_TIME END AS EXECUTION_TIME, 	e.FINAL_UPDATED_TIME, 	CASE		 		WHEN e.Exception_Type = 'BESTEX' then convert(datetime,be.ORDER_RECEIVED_DATE_TIME,103) 		WHEN e.Exception_Type = 'TREC' then convert(datetime,TREx.ORDER_RECEIVED_DATE_TIME,103) 		WHEN e.Exception_Type = 'COH' THEN convert(datetime,coh.ORDER_RECEIVED_DATETIME,103) 		WHEN e.Exception_Type = 'TEX' THEN convert(datetime,tex.ACCEPTED_DATE_TIME,103) 		WHEN e.Exception_Type = 'OrderAgg' THEN convert(datetime,fxt.ACCEPTED_DATE_TIME,103) 		WHEN e.Exception_Type = 'OrderAll' THEN convert(datetime,orderall.ACCEPTED_DATE_TIME,103) 	END AS AUTH_TIME, 	cs.STATUS_CODE, 	CASE		 		WHEN e.Exception_Type = 'BESTEX' then be.DEALER_NAME 		WHEN e.Exception_Type = 'TREC' then be.DEALER_NAME 		WHEN e.Exception_Type = 'COH' THEN coh.DEALER_NAME 		WHEN e.Exception_Type = 'TEX' THEN tex.DEALER_NAME 		WHEN e.Exception_Type = 'OrderAgg' THEN orderagg.DEALER_NAME 		WHEN e.Exception_Type = 'OrderAll' THEN orderall.DEALER_NAME 	END AS TRD_TRADER, 	e.SOURCE INTO #temp_pre_audit FROM #exceptions e LEFT JOIN VISTA_REPORTING.dbo.COMPLIANCE_EXCEPTIONS_STATUS_TABLE cs ON cs.STATUS_CODE=e.Status LEFT JOIN VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE BE ON be.TRANSACTION_NUMBER = e.TRANSACTION_NUMBER AND e.SOURCE = BE.DATA_SOURCE LEFT JOIN VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE coh on coh.ORDER_ID = e.ORDER_ID and e.SOURCE = coh.DATA_SOURCE LEFT JOIN VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE tex on tex.ORDER_ID = e.ORDER_ID and e.SOURCE = tex.DATA_SOURCE LEFT JOIN VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE TREX ON TREX.TRANSACTION_NUMBER = e.TRANSACTION_NUMBER AND TREX.DATA_SOURCE = e.SOURCE LEFT JOIN VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_FX_TABLE orderagg ON orderagg.FX_ORDER_ID = e.ORDER_ID AND e.SOURCE = orderagg.DATA_SOURCE LEFT JOIN VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_FX_TABLE orderall ON orderall.TRADE_ID = e.TRANSACTION_NUMBER AND e.SOURCE = orderall.DATA_SOURCE LEFT JOIN (SELECT DISTINCT TRADE_ID, EXECUTED_DATE_TIME, ORDER_ID, ACCEPTED_DATE_TIME FROM VISTA_REPORTING.DBO.FX_TRADES) FXT ON FXT.TRADE_ID = e.TRANSACTION_NUMBER AND e.SOURCE = 'FX' LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, EXECUTION_TIME, FinalFlag FROM VISTA_REPORTING.dbo.TRADES) t ON t.MULTI_FUND_ID = e.TRANSACTION_NUMBER and t.FinalFlag = 1 AND e.SOURCE = 'AL' LEFT JOIN (select distinct ord_num, auth_time from VISTA_REPORTING.dbo.pm_ORDERS) pm ON pm.ORD_NUM = e.ORDER_ID and e.SOURCE = 'AL'   IF OBJECT_ID('tempdb..#temp_audit_table', 'U') IS NOT NULL DROP TABLE #temp_audit_table SELECT  	TRANSACTION_NUMBER, 	ORDER_ID, 	EXCEPTION_TYPE, 	ID, 	REASON, 	COMMENT, 	STATUS, 	SOURCE, 	CREATE_TIME, 	DEALING_DESK, 	FINAL_UPDATED_TIME, 	STATUS_CODE,  	MIN(EXECUTION_TIME) AS EXECUTION_TIME, --In cases where the execution time changes, take the first 	MIN(AUTH_TIME) AS AUTH_TIME, --In cases where the auth time changes, take the first 	MIN(TRD_TRADER) AS TRD_TRADER --In cases where there are multiple traders, take the first -- WHY DOES THIS HAVE TO BE MIN? INTO #temp_audit_table FROM #temp_pre_audit GROUP BY 	TRANSACTION_NUMBER, 	ORDER_ID, 	EXCEPTION_TYPE, 	ID, 	REASON, 	COMMENT, 	STATUS, 	SOURCE, 	CREATE_TIME, 	DEALING_DESK, 	FINAL_UPDATED_TIME, 	STATUS_CODE  IF OBJECT_ID('VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_FX', 'U') IS NULL  SELECT DISTINCT * INTO VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_FX FROM #temp_audit_table  MERGE VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_FX AS T USING #temp_audit_table AS S ON (ISNULL(T.TRANSACTION_NUMBER, '-1') = ISNULL(S.TRANSACTION_NUMBER, '-1') 	 AND ISNULL(T.ORDER_ID, '-1') = ISNULL(S.ORDER_ID, '-1') 	 AND T.SOURCE = S.SOURCE 	 AND T.DEALING_DESK = S.DEALING_DESK 	 AND T.Exception_Type = S.Exception_Type 	 AND ISNULL(T.ID,'-1')=ISNULL(S.ID,'-1')) WHEN MATCHED 	THEN  	UPDATE SET -- Do nothing 		T.TRANSACTION_NUMBER = T.TRANSACTION_NUMBER WHEN NOT MATCHED  	THEN  	INSERT (TRANSACTION_NUMBER, ORDER_ID, EXCEPTION_TYPE, ID, REASON, COMMENT, STATUS, SOURCE, CREATE_TIME, DEALING_DESK, FINAL_UPDATED_TIME, AUTH_TIME, STATUS_CODE, TRD_TRADER) 	VALUES (S.TRANSACTION_NUMBER, S.ORDER_ID, S.EXCEPTION_TYPE, S.ID, S.REASON, S.COMMENT, S.STATUS, S.SOURCE, S.CREATE_TIME, S.DEALING_DESK, S.FINAL_UPDATED_TIME, S.AUTH_TIME, S.STATUS_CODE, S.TRD_TRADER);  END   --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: COMPLIANCE_TABLES_REFRESH_EQ CreateDate: 2019-11-22 12:23:48.420 ModifyDate: 2019-11-22 12:24:06.860 --- DEFINITION START --- -- ============================================= -- Author:		<da Costa, David> -- Create date: <19/11/2019> -- Description:	<Stored procedure to refresh tables -- used in the compliance scripts for Equity dealing -- desk> -- ============================================= CREATE PROCEDURE [dbo].[COMPLIANCE_TABLES_REFRESH_EQ]  AS BEGIN  	IF OBJECT_ID('VISTA_REPORTING.dbo.COMPLIANCE_TRADES_EQ', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.COMPLIANCE_TRADES_EQ 	SELECT DISTINCT  		t.ORD_NUM,  		t.MULTI_FUND_ID,  		t.FUND, CUSIP,  		t.TRD_TRADE_DATE,  		t.FinalFlag, 		t.NET_CONSIDERATION_GBP, 		t.EXECUTION_TIME 	INTO VISTA_REPORTING.dbo.COMPLIANCE_TRADES_EQ 	FROM VISTA_REPORTING.dbo.TRADES t  	IF OBJECT_ID('VISTA_REPORTING.dbo.COMPLIANCE_PM_ORDERS_EQ', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.COMPLIANCE_PM_ORDERS_EQ 	SELECT DISTINCT  		ORD_NUM, 		CUSIP, 		COMMENTS_VALUE, 		BROKER_CODE, 		DEALING_DESK, 		TOUCH_COUNT 	INTO VISTA_REPORTING.dbo.COMPLIANCE_PM_ORDERS_EQ 	FROM Vista_Reporting.dbo.PM_ORDERS 	WHERE DEALING_DESK = 'Equity'  	IF OBJECT_ID('VISTA_REPORTING.dbo.COMPLIANCE_PRIM_INST_EQ', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.COMPLIANCE_PRIM_INST_EQ 	SELECT DISTINCT  		ORD_NUM, 		MULTI_FUND_ID, 		INST_TYPE, 		DEALING_DESK, 		PRIMARY_MARKET_ORDER_LEVEL 	INTO VISTA_REPORTING.dbo.COMPLIANCE_PRIM_INST_EQ 	FROM Vista_Reporting.dbo.PRIMARY_INST_TYPE_TABLE 	WHERE DEALING_DESK = 'Equity'  	IF OBJECT_ID('VISTA_REPORTING.dbo.COMPLIANCE_ORDERS_DETAILS_EQ', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.COMPLIANCE_ORDERS_DETAILS_EQ 	SELECT DISTINCT  		pmo.ORD_NUM,  		od.ORD_DETAIL_FUND 	INTO VISTA_REPORTING.dbo.COMPLIANCE_ORDERS_DETAILS_EQ 	FROM VISTA_REPORTING.dbo.COMPLIANCE_PM_ORDERS_EQ pmo  	INNER JOIN VISTA_STAGING.dbo.ORDERS_DETAIL od ON od.ORD_NUM=pmo.ORD_NUM  	IF OBJECT_ID('VISTA_REPORTING.dbo.COMPLIANCE_ORDERS_CROSS_EQ', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.COMPLIANCE_ORDERS_CROSS_EQ 	SELECT DISTINCT  		pmo.ORD_NUM AS PM_ORD,  		oc.TRD_ORD  	INTO VISTA_REPORTING.dbo.COMPLIANCE_ORDERS_CROSS_EQ 	FROM VISTA_REPORTING.dbo.COMPLIANCE_PM_ORDERS_EQ pmo 	INNER JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD=pmo.ORD_NUM  END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: COUNTERPARTY_DIRECTION_REFERENCE CreateDate: 2019-10-18 08:39:49.580 ModifyDate: 2021-03-12 20:35:30.913 --- DEFINITION START ---   -- ============================================= -- Author:		<da Costa, David> -- Create date: <2019-05-08> -- Description:	<Reference table of concatenated values for Counterparty Selection scripts> -- =============================================  -- ***************VERSION CONTROL*************** -- 2019-05-08 DDC: Created stored procedure -- 2020-04-06 MN : Added the #population temp table and had final table pull from there -- *********************************************   CREATE PROCEDURE [dbo].[COUNTERPARTY_DIRECTION_REFERENCE]  AS BEGIN 	 	-- SET NOCOUNT ON added to prevent extra result sets FROM 	-- interfering with SELECT statements. 	SET NOCOUNT ON;  	IF OBJECT_ID('tempdb..#population', 'U') IS NOT NULL DROP TABLE #population 	SELECT  DISTINCT 			pm.ORD_NUM, 			t.TRD_COUNTERPARTY, 			t.MULTI_FUND_ID, 			t.TRD_TRADER, 			t.TRD_TRADE_DATE, 			t.EXECUTION_TIME, 			t.TRD_PRICE, 			t.NET_CONSIDERATION, 			pm.COMMENTS_VALUE 	INTO #population 	FROM VISTA_REPORTING.dbo.PM_ORDERS pm 	LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD=pm.ORD_NUM 	INNER JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM=oc.TRD_ORD 	WHERE pm.DEALING_DESK in ('Equity', 'Fixed Income') 			 									   	--Create a table with all the concatenated from the TRADES table. 	IF OBJECT_ID('VISTA_REPORTING.dbo.COUNTERPARTY_DIRECTION_REFERENCE_TABLE', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.COUNTERPARTY_DIRECTION_REFERENCE_TABLE 	SELECT DISTINCT 		po.ORD_NUM, 		STUFF(( 			SELECT DISTINCT 				' | ' + LTRIM(RTRIM(pm.TRD_COUNTERPARTY)) 			FROM #population pm 			WHERE pm.ORD_NUM=po.ORD_NUM 				  AND pm.TRD_COUNTERPARTY IS NOT NULL 			FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS CP_CONCAT, --Concatenate all TRD_COUNTERPARTY codes for the PM ORD_NUM 		STUFF(( 			SELECT DISTINCT 				' | ' + LTRIM(RTRIM(pm.MULTI_FUND_ID)) 			FROM #population pm 			WHERE pm.ORD_NUM=po.ORD_NUM 			FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS MF_CONCAT, --Concatenate all MULTI_FUND_IDs for the PM ORD_NUM 		STUFF(( 			SELECT DISTINCT 				' | ' + LTRIM(RTRIM(pm.TRD_TRADER)) 			FROM #population pm 			WHERE pm.ORD_NUM=po.ORD_NUM 				  AND pm.TRD_TRADER IS NOT NULL 			FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS TRADER_CONCAT, --Concatenate all TRADER initials for the PM ORD_NUM 		STUFF(( 			SELECT DISTINCT 				' | ' + LTRIM(RTRIM(CONVERT(VARCHAR,pm.TRD_TRADE_DATE,103))) 			FROM #population pm 			WHERE pm.ORD_NUM=po.ORD_NUM 				  AND pm.TRD_TRADE_DATE IS NOT NULL 			FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS TRADE_DATE_CONCAT, --Concatenate all Trade Dates for the PM ORD_NUM 		STUFF(( 			SELECT DISTINCT 				' | ' + LTRIM(RTRIM(CONCAT(CONVERT(VARCHAR,pm.EXECUTION_TIME,103),' ',CONVERT(VARCHAR,pm.EXECUTION_TIME,108)))) 			FROM #population pm 			WHERE pm.ORD_NUM=po.ORD_NUM 				  AND pm.EXECUTION_TIME IS NOT NULL 			FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS EX_TIME_CONCAT, --Concatenate all EXECUTION_TIMES for that PM ORD_NUM 		STUFF(( 			SELECT DISTINCT 				' | ' + LTRIM(RTRIM(CONVERT(DECIMAL(18,2),pm.TRD_PRICE))) 			FROM #population pm 			WHERE pm.ORD_NUM=po.ORD_NUM 				  AND pm.TRD_PRICE IS NOT NULL 			FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS PRICE_CONCAT, --Concatenate all TRD_PRICE for that PM ORD_NUM 		STUFF(( 			SELECT DISTINCT 				' | ' + LTRIM(RTRIM(format(pm.NET_CONSIDERATION,'N2'))) 			FROM #population pm 			WHERE pm.ORD_NUM=po.ORD_NUM 				  AND pm.NET_CONSIDERATION IS NOT NULL 			FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS NET_CONS_CONCAT, --Concatenate all NET_CONSIDERATIONS for that PM ORD_NUM 		STUFF(( 			SELECT DISTINCT 				' | ' + LTRIM(RTRIM(pm.COMMENTS_VALUE)) 			FROM #population pm 			WHERE pm.ORD_NUM=po.ORD_NUM 				  AND pm.COMMENTS_VALUE IS NOT NULL 			FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS COMMENTS_VALUE_CONCAT --Concatenate all latest comments for that PM ORD_NUM 	INTO VISTA_REPORTING.dbo.COUNTERPARTY_DIRECTION_REFERENCE_TABLE 	FROM #population po END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: DMC_CASH_AGGREGATOR CreateDate: 2019-10-18 08:39:49.650 ModifyDate: 2025-01-15 15:43:46.053 --- DEFINITION START --- -- ============================================= -- Author:		<Samad, Mehreen> -- Create date: <26/06/2019> -- Description:	 -- <Generates AGGREGATOR Report data as well as  -- Cancelled Orders/Trades Report data for CASH.> -- =============================================  -- ***************VERSION CONTROL*************** --2022-01-27, Matej Miter; Created for Jira: --SURVG-563 - New Cash Report Instructor to dealer 2022  --2025-01-15 Matej Miter: Created for Jira: --SURVG-973 -- For Order Allocation adding Cash Aduit table in Join to be able to get proper reasons from exception reason table -- *********************************************  CREATE PROCEDURE [dbo].[DMC_CASH_AGGREGATOR]  	-- Add the parameters for the stored procedure here 	@Start_day		INT, 	@Start_Month	INT, 	@Start_Year		INT, 	@End_Day		INT,  	@End_Month		INT, 	@End_Year		INT, 	@REPORT_NAME	VARCHAR(MAX)  AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;      -- Insert statements for procedure here 	DECLARE @Start_Date	DATETIME; 	SET		@Start_Date = CONVERT(DATE,CONCAT(@Start_Year,'-',@Start_Month,'-', @Start_day)); --Turn the input start month parameter into a date  	DECLARE @End_Date0	DATETIME; 	DECLARE @End_Date	DATETIME; 	SET		@End_Date0  = CONVERT(DATETIME,CONCAT(@End_Year,'-',@End_Month, '-', @End_Day));  --Turn the input end month parameter into a date   	SET		@End_Date	= DATEADD(SECOND,86399,@End_Date0); --To make it for 23:59:59 that day. May need to update this for milliseconds.   --Add the metadata to a table so we keep a history of all reports run IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_CASH_REPORTS_METADATA', 'U') IS NULL SELECT 	DATEPART(DAY,@Start_Date) AS [START_DAY], 	DATEPART(MONTH, @Start_Date) AS [START_MONTH], 	DATEPART(YEAR, @Start_Date) AS [START_YEAR], 	DATEPART(DAY,@End_Date)	AS [END_DAY], 	DATEPART(MONTH, @End_Date) AS [END_MONTH], 	DATEPART(YEAR, @End_Date) AS [END_YEAR], 	CONVERT(VARCHAR(70),'CASH_AGGREGATOR') AS [DMC_Report], 	@REPORT_NAME AS [Report_Name], 	GETDATE() AS [Run_Date] INTO VISTA_REPORTING.dbo.DMC_CASH_REPORTS_METADATA ELSE INSERT INTO VISTA_REPORTING.dbo.DMC_CASH_REPORTS_METADATA SELECT 	DATEPART(DAY,@Start_Date) AS [START_DAY], 	DATEPART(MONTH, @Start_Date) AS [START_MONTH], 	DATEPART(YEAR, @Start_Date) AS [START_YEAR], 	DATEPART(DAY,@End_Date)	AS [END_DAY], 	DATEPART(MONTH, @End_Date) AS [END_MONTH], 	DATEPART(YEAR, @End_Date) AS [END_YEAR], 	'CASH_AGGREGATOR' AS [DMC_Report], 	@REPORT_NAME AS [Report_Name], 	GETDATE() AS [Run_Date]   -- Get all system generated narrations for CASH Exceptions IF OBJECT_ID('tempdb..#system_reasons', 'U') IS  NOT NULL DROP TABLE #system_reasons SELECT DISTINCT 	ert.ID, 	COALESCE(ct.TRANSACTION_NUMBER, ct2.TRANSACTION_NUMBER) AS TRANSACTION_NUMBER, 	CASE 		WHEN CHARINDEX('_10_', ert.ID) > 0 THEN ct.TIMELY_RECORDING_EXCEPTION_NARRATION 		WHEN CHARINDEX('_607_', ert.ID) > 0	THEN ct.BEST_EXECUTION_RR_NARRATION 		WHEN CHARINDEX('_608_', ert.ID) > 0 THEN ct.TA_KNOCKBACK_NARRATION 		WHEN CHARINDEX('_9_', ert.ID) > 0 THEN COALESCE(ct2.TIMELY_EXECUTION_EXCEPTION_NARRATION, co.TIMELY_ACKNOWLEDGEMENT_NARRATION) 		WHEN CHARINDEX('_602_', ert.ID) > 0 THEN co.HOLDOVER_REASON_NARRATION 		WHEN  CHARINDEX('_604_', ert.ID) > 0 THEN co.SEQUENCE_EXCEPTION_NARRATION 		ELSE NULL 	END AS SYSTEM_NARRATION INTO #system_reasons FROM Vista_Reporting.dbo.EXCEPTION_REASON_TABLE ert LEFT JOIN Vista_Reporting.dbo.CASH_TRADES ct ON CAST(ct.TRANSACTION_NUMBER AS VARCHAR) = LEFT(ID, CHARINDEX('_', ID) - 1)  LEFT JOIN Vista_Reporting.dbo.CASH_TRADES ct2 ON CAST(ct2.ORDER_ID AS VARCHAR) = LEFT(ID, CHARINDEX('_', ID) - 1)  LEFT JOIN Vista_Reporting.dbo.CASH_ORDERS co ON CAST(co.ORDER_ID AS VARCHAR) = LEFT(ID, CHARINDEX('_', ID) - 1)  WHERE CHARINDEX('_CM', ert.ID) > 0   -- Remove NULLS IF OBJECT_ID('tempdb..#system_reasons_no_null', 'U') IS  NOT NULL DROP TABLE #system_reasons_no_null SELECT * INTO #system_reasons_no_null FROM #system_reasons WHERE NULLIF(SYSTEM_NARRATION, '') IS NOT NULL   -- 1A Reasons -- Selecting reasons from exception reason table -- Include cases where the STATUS is valid and the REASON is populated and take system  -- generated narration for cases where the SG COMMENT field is blank or NULL IF OBJECT_ID('tempdb..#step1', 'U') IS  NOT NULL DROP TABLE #step1 SELECT DISTINCT 	e.[ID], 	e.[REASON], 	COALESCE(ct.TRANSACTION_NUMBER, ct2.TRANSACTION_NUMBER) AS TRANSACTION_NUMBER, 	COALESCE(NULLIF(e.[COMMENT], ''), srn.SYSTEM_NARRATION) AS COMMENT, 	e.[STATUS], 	e.[TOUCH_COUNT] INTO #step1 FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE e inner join (SELECT 				[ID], 				MAX(touch_count) as [MAX_TOUCH], 				MAX(CREATED) as [MAX_CREATE_TIME] 			FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE 			WHERE [STATUS] in ('For Review','With Dealer','With Reviewer','C&A Review Request') and NULLIF([REASON],'') is not null 			--the above condition around status ensures that we only consider exceptions coming from the Dealing Desk 			--only dealing desk has the ability to flag false positive exceptions 			GROUP BY [ID]) a on a.[ID] = e.[ID] and a.[MAX_TOUCH] = e.[TOUCH_COUNT] AND a.[MAX_CREATE_TIME] = e.[CREATED] LEFT JOIN Vista_Reporting.dbo.CASH_TRADES ct ON CAST(ct.TRANSACTION_NUMBER AS VARCHAR) = LEFT(e.ID, CHARINDEX('_', e.ID) - 1) LEFT JOIN Vista_Reporting.dbo.CASH_TRADES ct2 ON CAST(ct2.ORDER_ID AS VARCHAR) = LEFT(e.ID, CHARINDEX('_', e.ID) - 1)  LEFT JOIN #system_reasons_no_null srn ON srn.ID = e.ID   -- Select the system generated narration for cases where the STATUS is valid however the REASON is NULL or blank -- In this case there is no hierachy and by defailt the system generated narration is taken -- Exclude IDs from #step1 IF OBJECT_ID('tempdb..#step2', 'U') IS  NOT NULL DROP TABLE #step2 SELECT DISTINCT 	e.[ID],  	e.[REASON], 	sr.TRANSACTION_NUMBER, 	sr.SYSTEM_NARRATION AS [COMMENT], 	e.[STATUS], 	e.[TOUCH_COUNT] INTO #step2 FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE e inner join (SELECT 				[ID], 				MAX(touch_count) as [MAX_TOUCH], 				MAX(CREATED) as [MAX_CREATE_TIME] 			FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE 			WHERE [STATUS] in ('For Review','With Dealer','With Reviewer','C&A Review Request') and NULLIF(REASON, '') IS NULL 			GROUP BY [ID]) a  on a.[ID] = e.[ID] and a.[MAX_TOUCH] = e.[TOUCH_COUNT] AND a.[MAX_CREATE_TIME] = e.[CREATED] LEFT JOIN #system_reasons_no_null sr ON sr.ID = a.ID WHERE e.ID NOT IN (SELECT ID FROM #step1)   IF OBJECT_ID('tempdb..#vista_reason', 'U') IS  NOT NULL DROP TABLE #vista_reason SELECT * INTO #vista_reason FROM #step1 UNION SELECT * FROM #step2   -- 1B Reasons IF OBJECT_ID('tempdb..#max_reason_cm', 'U') IS  NOT NULL DROP TABLE #max_reason_cm -- The below table is used to identify the last Reason (populated by C&M Team) SELECT DISTINCT 	e.[ID],  	e.[REASON], 	e.[COMMENT], 	e.[STATUS] INTO #max_reason_cm FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE e inner join (SELECT  				[ID], 				MAX(TOUCH_COUNT) as [MAX_TOUCH]  			FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE  			WHERE [STATUS] in ('Pre Sampling','With C&A Reviewer','Under Review','Review in Process','Post Sampling')  			GROUP BY [ID] ) a  on a.[ID] = e.[ID] and a.[MAX_TOUCH] = e.[TOUCH_COUNT]  -- ================================================================================================= /* EXCEPTION RATIONALE TABLE FOR AGGREGATOR */ -- =================================================================================================  IF OBJECT_ID('tempdb..#max_touch_trades', 'U') IS NOT NULL DROP TABLE #max_touch_trades SELECT DISTINCT  	MULTI_FUND_ID,  	MAX(TOUCH_COUNT) AS MAX_TOUCH  INTO #max_touch_trades FROM VISTA_REPORTING.dbo.TRADES  GROUP BY MULTI_FUND_ID   IF OBJECT_ID('tempdb..#temp_exception_table', 'U') IS NOT NULL DROP TABLE #temp_exception_table SELECT *  INTO #temp_exception_table FROM (SELECT DISTINCT 		'10_RR' as [EXCEPTION_TYPE_ID], 		CONCAT(timrec.[TRANSACTION_NUMBER],'_10_',timrec.[SOURCE]) as EXCEPTION_ID, 		ct.[ORDER_ID], 		timrec.[TRANSACTION_NUMBER], 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN timrec.[VG_10] = 1  			THEN  				CASE  					WHEN NULLIF(e.[REASON],'') is null and ct.[TIMELY_RECORDING_EXCEPTION_REASON] is not null THEN CAST(ct.[TIMELY_RECORDING_EXCEPTION_REASON] as varchar(500)) 				ELSE COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale') 				END 		ELSE NULL 		END AS [1A_RATIONALE], 		timrec.[VG_10] as [EXCEPTION_VALUE], 		CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE])) as [DATE], 		ct.[PRODUCT_TYPE], 		timrec.[SOURCE] as [DATA_SOURCE], 		CASE WHEN mast.[TRANSACTION_STATUS] in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_CASH_RR_TABLE timrec 	left join #vista_reason e  	on CONCAT(timrec.[TRANSACTION_NUMBER],'_10_',timrec.[SOURCE]) = e.[ID] 	left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, TRANSACTION_STATUS FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_RR_TABLE) mast 	on timrec.[TRANSACTION_NUMBER] = mast.[TRANSACTION_NUMBER] 	left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, TIMELY_RECORDING_EXCEPTION_REASON, PRODUCT_TYPE, TRADE_DATE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.[TRANSACTION_NUMBER] = timrec.[TRANSACTION_NUMBER] AND timrec.[SOURCE] = 'CM' 	WHERE ct.[TRADE_DATE] between @Start_Date and @End_Date  	UNION  	SELECT DISTINCT 		'10_MM' as [EXCEPTION_TYPE_ID], 		CONCAT(timrec.[TRANSACTION_NUMBER],'_10_',timrec.[SOURCE]) as EXCEPTION_ID, 		CASE  			WHEN timrec.[SOURCE] = 'CM' THEN ct.[ORDER_ID] 			WHEN timrec.[SOURCE] = 'AL' THEN oc.[PM_ORD] 		ELSE NULL 		END AS ORDER_ID, 		timrec.[TRANSACTION_NUMBER], 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN timrec.[VG_10] = 1  			THEN  				CASE  					WHEN NULLIF(e.[REASON],'') is null and ct.[TIMELY_RECORDING_EXCEPTION_REASON] is not null THEN CAST(ct.[TIMELY_RECORDING_EXCEPTION_REASON] as varchar(500)) 				ELSE COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale') 				END 		ELSE NULL 		END AS [1A_RATIONALE], 		timrec.[VG_10] as [EXCEPTION_VALUE], 		CASE 			WHEN timrec.[SOURCE] = 'CM' THEN CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE]))  			ELSE CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		END AS [DATE], 		CASE 			WHEN timrec.[SOURCE] = 'AL' THEN 'Cash Products' 		ELSE ct.[PRODUCT_TYPE] 		END AS PRODUCT_TYPE, 		timrec.[SOURCE] as [DATA_SOURCE], 		CASE WHEN mast.[TRANSACTION_STATUS] in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_CASH_MM_TABLE timrec 	left join #vista_reason e  	on CONCAT(timrec.[TRANSACTION_NUMBER],'_10_',timrec.[SOURCE]) = e.[ID] 	left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, TRANSACTION_STATUS FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE) mast 	on timrec.[TRANSACTION_NUMBER] = mast.[TRANSACTION_NUMBER] 	left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, TIMELY_RECORDING_EXCEPTION_REASON,PRODUCT_TYPE, TRADE_DATE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.[TRANSACTION_NUMBER] = timrec.[TRANSACTION_NUMBER] AND timrec.[SOURCE] = 'CM' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[MULTI_FUND_ID] = timrec.[TRANSACTION_NUMBER] AND timrec.[SOURCE] = 'AL' 	left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc 	on oc.[TRD_ORD] = t.[ORD_NUM] 	WHERE COALESCE(ct.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date  	UNION  	SELECT DISTINCT 		'607_RR' as [EXCEPTION_TYPE_ID], 		CONCAT(bestex.[TRANSACTION_NUMBER],'_607_',bestex.[DATA_SOURCE]) as EXCEPTION_ID, 		ct.[ORDER_ID], 		bestex.[TRANSACTION_NUMBER], 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN bestex.[VG_607_RR] = 1  			THEN  				CASE  					WHEN NULLIF(e.[REASON],'') is null and ISNULL(ct.[BEST_EXECUTION_RR_EXCEPTION_REASON],0) is not null THEN CAST(ct.[BEST_EXECUTION_RR_EXCEPTION_REASON] as varchar(500))		 				ELSE COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale') 				END 		ELSE NULL 		END AS [1A_RATIONALE], 		bestex.[VG_607_RR] as [EXCEPTION_VALUE], 		CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE])) as [DATE], 		ct.[PRODUCT_TYPE], 		bestex.[DATA_SOURCE], 		CASE WHEN mast.[TRANSACTION_STATUS] in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_RR_TABLE bestex 	left join #vista_reason e  	on CONCAT(bestex.[TRANSACTION_NUMBER],'_607_',bestex.[DATA_SOURCE]) = e.[ID] 	left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, TRANSACTION_STATUS FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR_TABLE) mast 	on bestex.[TRANSACTION_NUMBER] = mast.[TRANSACTION_NUMBER] 	left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, BEST_EXECUTION_RR_EXCEPTION_REASON, PRODUCT_TYPE, TRADE_DATE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.[TRANSACTION_NUMBER] = bestex.[TRANSACTION_NUMBER] AND bestex.[DATA_SOURCE] = 'CM' 	WHERE ct.[TRADE_DATE] between @Start_Date and @End_Date  	UNION  	SELECT DISTINCT 		'607_MM_QE' as [EXCEPTION_TYPE_ID], 		CONCAT(bestex.[TRANSACTION_NUMBER],'_607_',bestex.[DATA_SOURCE]) as EXCEPTION_ID, 		CASE  			WHEN bestex.[DATA_SOURCE] = 'CM' THEN ct.[ORDER_ID] 			WHEN bestex.[DATA_SOURCE] = 'AL' THEN oc.[PM_ORD] 		ELSE NULL 		END AS ORDER_ID, 		bestex.[TRANSACTION_NUMBER], 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN bestex.[B3Q_EXCEPTION] = 1  			THEN COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale') --No Best Ex MM Reason given in CM, is that fine? 		ELSE NULL 		END AS [1A_RATIONALE], 		bestex.[B3Q_EXCEPTION] as [EXCEPTION_VALUE], 		CASE 			WHEN bestex.[DATA_SOURCE] = 'CM' THEN CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE]))  			ELSE CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		END AS [DATE], 		CASE 			WHEN bestex.[DATA_SOURCE] = 'AL' THEN 'Cash Products' 		ELSE ct.[PRODUCT_TYPE] 		END AS PRODUCT_TYPE, 		bestex.[DATA_SOURCE], 		CASE WHEN mast.[TRANSACTION_STATUS] in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE bestex 	left join #vista_reason e  	on CONCAT(bestex.[TRANSACTION_NUMBER],'_607_',bestex.[DATA_SOURCE]) = e.[ID] 	left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, TRANSACTION_STATUS FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE) mast 	on bestex.[TRANSACTION_NUMBER] = mast.[TRANSACTION_NUMBER] 	left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, PRODUCT_TYPE, TRADE_DATE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.[TRANSACTION_NUMBER] = bestex.[TRANSACTION_NUMBER] AND bestex.[DATA_SOURCE] = 'CM' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[MULTI_FUND_ID] = bestex.[TRANSACTION_NUMBER] AND bestex.[DATA_SOURCE] = 'AL' 	left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc 	on oc.[TRD_ORD] = t.[ORD_NUM] 	WHERE COALESCE(ct.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date  	UNION  	SELECT DISTINCT 		'607_MM_NWQ' as [EXCEPTION_TYPE_ID], 		CONCAT(bestex.[TRANSACTION_NUMBER],'_607_',bestex.[DATA_SOURCE]) as EXCEPTION_ID, 		CASE  			WHEN bestex.[DATA_SOURCE] = 'CM' THEN ct.[ORDER_ID] 			WHEN bestex.[DATA_SOURCE] = 'AL' THEN oc.[PM_ORD] 		ELSE NULL 		END AS ORDER_ID, 		bestex.[TRANSACTION_NUMBER], 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN bestex.[NWQ_EXCEPTION] = 1  			THEN COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale') --No Best Ex MM Reason given in CM, is that fine? 		ELSE NULL 		END AS [1A_RATIONALE], 		bestex.[NWQ_EXCEPTION] as [EXCEPTION_VALUE], 		CASE 			WHEN bestex.[DATA_SOURCE] = 'CM' THEN CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE]))  			ELSE CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		END AS [DATE], 		CASE 			WHEN bestex.[DATA_SOURCE] = 'AL' THEN 'Cash Products' 		ELSE ct.[PRODUCT_TYPE] 		END AS PRODUCT_TYPE, 		bestex.[DATA_SOURCE], 		CASE WHEN mast.[TRANSACTION_STATUS] in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE bestex 	left join #vista_reason e  	on CONCAT(bestex.[TRANSACTION_NUMBER],'_607_',bestex.[DATA_SOURCE]) = e.[ID] 	left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, TRANSACTION_STATUS FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE) mast 	on bestex.[TRANSACTION_NUMBER] = mast.[TRANSACTION_NUMBER] 	left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, PRODUCT_TYPE, TRADE_DATE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.[TRANSACTION_NUMBER] = bestex.[TRANSACTION_NUMBER] AND bestex.[DATA_SOURCE] = 'CM' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[MULTI_FUND_ID] = bestex.[TRANSACTION_NUMBER] AND bestex.[DATA_SOURCE] = 'AL' 	left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc 	on oc.[TRD_ORD] = t.[ORD_NUM] 	WHERE COALESCE(ct.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date  	UNION  	SELECT DISTINCT 		'607_MM_DRR' as [EXCEPTION_TYPE_ID], 		CONCAT(crr.[TRANSACTION_NUMBER],'_607_',crr.[DATA_SOURCE]) as EXCEPTION_ID, 		ct.[ORDER_ID], 		crr.[TRANSACTION_NUMBER], 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN crr.CRR_EXCEPTION = 1 AND crr.NWQ_EXCEPTION = 0 AND crr.B3Q_EXCEPTION = 0 THEN COALESCE(NULLIF(e.[REASON],''), 'Unassigned Rationale') 			WHEN crr.CRR_EXCEPTION = 1 AND (crr.NWQ_EXCEPTION = 1 OR crr.B3Q_EXCEPTION = 1) THEN 'Reviewed under Best Execution' 		ELSE NULL 		END AS [1A_RATIONALE], 		crr.CRR_EXCEPTION as [EXCEPTION_VALUE], 		CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE])) as [DATE], 		'Cash Products' as [PRODUCT_TYPE], 		crr.[DATA_SOURCE],  		CASE WHEN mast.[TRANSACTION_STATUS] in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE crr 	left join #vista_reason e  	on CONCAT(crr.[TRANSACTION_NUMBER],'_609_',crr.[DATA_SOURCE]) = e.[ID] --This joins on 609 as that is the original VG number the exception was raised with 	left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, TRANSACTION_STATUS FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE) mast 	on crr.[TRANSACTION_NUMBER] = mast.[TRANSACTION_NUMBER] 	left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, PRODUCT_TYPE, TRADE_DATE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.[TRANSACTION_NUMBER] = crr.[TRANSACTION_NUMBER] AND crr.[DATA_SOURCE] = 'CM' 	WHERE ct.[TRADE_DATE] between @Start_Date and @End_Date 	  		-----------------------------New Exception Report (Instructor to Trader)------------------------------------------------------------- 	 	--SURVG-563 	UNION  	SELECT DISTINCT 		'613_RR' as [EXCEPTION_TYPE_ID], 		CONCAT(instdeal.[TRANSACTION_NUMBER],'_613_',instdeal.[SOURCE]) as EXCEPTION_ID, 		ct.[ORDER_ID], 		instdeal.[TRANSACTION_NUMBER], 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN instdeal.[VG_613] = 1 THEN COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale') 		ELSE NULL 		END AS [1A_RATIONALE], 		instdeal.[VG_613] as [EXCEPTION_VALUE], 		CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE])) as [DATE], 		ct.[PRODUCT_TYPE], 		instdeal.[SOURCE] as [DATA_SOURCE], 		CASE WHEN mast.[TRANSACTION_STATUS] in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE instdeal 	left join #vista_reason e  	on CONCAT(instdeal.[TRANSACTION_NUMBER],'_613_',instdeal.[SOURCE]) = e.[ID] 	left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, TRANSACTION_STATUS FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE) mast 	on instdeal.[TRANSACTION_NUMBER] = mast.[TRANSACTION_NUMBER] 	left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, BEST_EXECUTION_RR_EXCEPTION_REASON, PRODUCT_TYPE, TRADE_DATE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.[TRANSACTION_NUMBER] = instdeal.[TRANSACTION_NUMBER] AND instdeal.[SOURCE] = 'CM' 	WHERE ct.[TRADE_DATE]  between @Start_Date and @End_Date   	UNION   	 	SELECT DISTINCT 		'613_MM' as [EXCEPTION_TYPE_ID], 		CONCAT(instdeal.[TRANSACTION_NUMBER],'_613_',instdeal.[SOURCE]) as EXCEPTION_ID, 		CASE  			WHEN instdeal.[SOURCE] = 'CM' THEN ct.[ORDER_ID] 			WHEN instdeal.[SOURCE] = 'AL' THEN oc.[PM_ORD] 		ELSE NULL 		END AS ORDER_ID, 		instdeal.[TRANSACTION_NUMBER], 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN instdeal.[VG_613] = 1 THEN COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale') 		ELSE NULL 		END AS [1A_RATIONALE], 		instdeal.[VG_613] as [EXCEPTION_VALUE], 		CASE 			WHEN instdeal.[SOURCE] = 'CM' THEN CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE]))  			ELSE CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		END AS [DATE], 		CASE 			WHEN instdeal.[SOURCE] = 'AL' THEN 'Cash Products' 		ELSE ct.[PRODUCT_TYPE] 		END AS PRODUCT_TYPE, 		instdeal.[SOURCE] as [DATA_SOURCE], 		CASE WHEN mast.[TRANSACTION_STATUS] in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE instdeal 	left join #vista_reason e  	on CONCAT(instdeal.[TRANSACTION_NUMBER],'_613_',instdeal.[SOURCE]) = e.[ID] 	left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, TRANSACTION_STATUS FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE) mast 	on instdeal.[TRANSACTION_NUMBER] = mast.[TRANSACTION_NUMBER] 	left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, PRODUCT_TYPE, TRADE_DATE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.[TRANSACTION_NUMBER] = instdeal.[TRANSACTION_NUMBER] AND instdeal.[SOURCE] = 'CM' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[MULTI_FUND_ID] = instdeal.[TRANSACTION_NUMBER] AND instdeal.[SOURCE] = 'AL' 	left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc 	on oc.[TRD_ORD] = t.[ORD_NUM] 	WHERE COALESCE(ct.[TRADE_DATE],t.[TRD_TRADE_DATE])  between @Start_Date and @End_Date 	--End of SURVG-563 	 	------------------------------------------------------------------------------------------------------------------------- 	UNION 	 	SELECT DISTINCT 		'609' as [EXCEPTION_TYPE_ID], 		CONCAT(crr.[TRANSACTION_NUMBER],'_609_',crr.[DATA_SOURCE]) as EXCEPTION_ID, 		ct.[ORDER_ID], 		crr.[TRANSACTION_NUMBER], 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN crr.[VG_609_CRR] = 1 THEN COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale') 		ELSE NULL 		END AS [1A_RATIONALE], 		crr.[VG_609_CRR] as [EXCEPTION_VALUE], 		CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE])) as [DATE], 		'Cash Products' as [PRODUCT_TYPE], 		crr.[DATA_SOURCE],  		CASE WHEN mast.[TRANSACTION_STATUS] in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE crr 	left join #vista_reason e  	on CONCAT(crr.[TRANSACTION_NUMBER],'_609_',crr.[DATA_SOURCE]) = e.[ID] 	left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, TRANSACTION_STATUS FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE) mast 	on crr.[TRANSACTION_NUMBER] = mast.[TRANSACTION_NUMBER] 	left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, PRODUCT_TYPE, TRADE_DATE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.[TRANSACTION_NUMBER] = crr.[TRANSACTION_NUMBER] AND crr.[DATA_SOURCE] = 'CM' 	WHERE ct.[TRADE_DATE] between @Start_Date and @End_Date  	UNION  	SELECT DISTINCT 		'608' as [EXCEPTION_TYPE_ID], 		CONCAT(tkb.[TRANSACTION_NUMBER],'_608_',tkb.[DATA_SOURCE]) as EXCEPTION_ID, 		ct.[ORDER_ID], 		tkb.[TRANSACTION_NUMBER], 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN tkb.[VG_608] = 1  			THEN 				CASE 					WHEN NULLIF(e.[REASON],'') is null and ct.[TA_KNOCKBACK_EXCEPTION_REASON] is not null THEN CAST(ct.[TA_KNOCKBACK_EXCEPTION_REASON] as varchar(500))	 				ELSE COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale') 				END 		ELSE NULL 		END AS [1A_RATIONALE], 		tkb.[VG_608] as [EXCEPTION_VALUE], 		CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE])) as [DATE], 		'Cash Products' as [PRODUCT_TYPE], 		tkb.[DATA_SOURCE],  		0 as TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_608_TA_KNOCKBACK_CASH_TABLE tkb 	left join #vista_reason e  	on CONCAT(tkb.[TRANSACTION_NUMBER],'_608_',tkb.[DATA_SOURCE]) = e.[ID] 	left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, TRANSACTION_STATUS FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_608_TA_KNOCKBACK_CASH_TABLE) mast 	on tkb.[TRANSACTION_NUMBER] = mast.[TRANSACTION_NUMBER] 	left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, TA_KNOCKBACK_EXCEPTION_REASON, PRODUCT_TYPE, TRADE_DATE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.[TRANSACTION_NUMBER] = tkb.[TRANSACTION_NUMBER]  	WHERE ct.[TRADE_DATE] between @Start_Date and @End_Date  	UNION  	SELECT DISTINCT 		'610' as [EXCEPTION_TYPE_ID], 		CONCAT(tbills.[MULTI_FUND_ID],'_610_',tbills.[DATA_SOURCE]) as EXCEPTION_ID, 		oc.[PM_ORD] as ORDER_ID, 		tbills.[MULTI_FUND_ID] as TRANSACTION_NUMBER, 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN tbills.[VG_610] = 1  			THEN  				CASE 					WHEN NULLIF(e.[REASON],'') is null and mast.[TRANSACTION_STATUS] = 'C'	THEN 'Cancellation' 					WHEN NULLIF(e.[REASON],'') is null and mast.[TRANSACTION_STATUS] != 'C' THEN mast.[CD_CP_CANCELLATION_REASON] 				ELSE COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale') 				END 		ELSE NULL 		END AS [1A_RATIONALE], 		tbills.[VG_610] as [EXCEPTION_VALUE], 		CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) as [DATE], 		'Cash Products' as [PRODUCT_TYPE], 		tbills.[DATA_SOURCE],  		0 as TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_610_TBILLS_CP_CD_CASH_TABLE tbills 	left join #vista_reason e  	on CONCAT(tbills.[MULTI_FUND_ID],'_610_',tbills.[DATA_SOURCE]) = e.[ID] 	left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, TRANSACTION_STATUS, CD_CP_CANCELLATION_REASON FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE) mast 	on tbills.[MULTI_FUND_ID] = mast.[TRANSACTION_NUMBER] 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[MULTI_FUND_ID] = tbills.[MULTI_FUND_ID]  	left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc 	on t.[ORD_NUM] = oc.[TRD_ORD] 	WHERE t.[TRD_TRADE_DATE] between @Start_Date and @End_Date  	UNION  	SELECT DISTINCT 		'604_RR' as [EXCEPTION_TYPE_ID], 		 CONCAT(coh.[ORDER_ID],'_604_',coh.[DATA_SOURCE]) as EXCEPTION_ID, 		coh.[ORDER_ID], 		ct.[TRANSACTION_NUMBER], 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN coh.[VG_604] = 1  			THEN  				CASE 					WHEN NULLIF(e.[REASON],'') is null and co.[SEQUENCE_EXCEPTION_REASON] is not null THEN CAST(co.[SEQUENCE_EXCEPTION_REASON] as varchar(500))	 				ELSE COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale') 				END 		ELSE NULL 		END AS [1A_RATIONALE], 		coh.[VG_604] as [EXCEPTION_VALUE], 		CONCAT(YEAR(co.[TRADE_DATE]), ' - ', MONTH(co.[TRADE_DATE])) as [DATE], 		COALESCE(ct.[PRODUCT_TYPE],co.[PRODUCT_TYPE]) as [PRODUCT_TYPE], 		coh.[DATA_SOURCE], 		CASE WHEN mast.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') or co.[INSTRUCTION_STATUS_DECODE] in ('Deleted-Agreed Initiator') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE coh 	left join #vista_reason e  	on CONCAT(coh.[ORDER_ID],'_604_',coh.[DATA_SOURCE]) = e.[ID] 	left join (SELECT DISTINCT ORDER_ID, DEALER_NAME, INSTRUCTION_STATUS FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE) mast 	on coh.[ORDER_ID] = mast.[ORDER_ID] 	left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, PRODUCT_TYPE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.[ORDER_ID] = coh.[ORDER_ID]  	left join (SELECT DISTINCT ORDER_ID, SEQUENCE_EXCEPTION_REASON, TRADE_DATE, PRODUCT_TYPE, INSTRUCTION_STATUS_DECODE FROM VISTA_REPORTING.dbo.CASH_ORDERS) co 	on co.[ORDER_ID] = coh.[ORDER_ID] 	WHERE co.[TRADE_DATE] between @Start_Date and @End_Date  	UNION  	SELECT DISTINCT 		'604_MM' as [EXCEPTION_TYPE_ID], 		CONCAT(coh.[ORDER_ID],'_604_',coh.[DATA_SOURCE]) as EXCEPTION_ID, 		coh.[ORDER_ID], 		CASE  			WHEN coh.[DATA_SOURCE] = 'CM' THEN ct.[TRANSACTION_NUMBER] 			WHEN coh.[DATA_SOURCE] = 'AL' THEN t.[MULTI_FUND_ID] 		ELSE NULL 		END AS [TRANSACTION_NUMBER], 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN coh.[VG_604] = 1  			THEN  				CASE 					WHEN NULLIF(e.[REASON],'') is null and co.[SEQUENCE_EXCEPTION_REASON] is not null THEN CAST(co.[SEQUENCE_EXCEPTION_REASON] as varchar(500))	 				ELSE COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale') 				END 		ELSE NULL 		END AS [1A_RATIONALE], 		coh.[VG_604] as [EXCEPTION_VALUE], 		CASE 			WHEN coh.[DATA_SOURCE] = 'CM' THEN CONCAT(YEAR(co.[TRADE_DATE]), ' - ', MONTH(co.[TRADE_DATE]))  			ELSE CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])) 		END AS [DATE], 		CASE 			WHEN coh.[DATA_SOURCE] = 'AL' THEN 'Cash Products' 		ELSE COALESCE(ct.[PRODUCT_TYPE],co.[PRODUCT_TYPE]) 		END AS PRODUCT_TYPE, 		coh.[DATA_SOURCE], 		CASE WHEN mast.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') or co.[INSTRUCTION_STATUS_DECODE] in ('Deleted-Agreed Initiator') or pm.[STATUS] = 'C' THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE coh 	left join #vista_reason e  	on CONCAT(coh.[ORDER_ID],'_604_',coh.[DATA_SOURCE]) = e.[ID]  	left join (SELECT DISTINCT ORDER_ID, DEALER_NAME, INSTRUCTION_STATUS FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE) mast 	on coh.[ORDER_ID] = mast.[ORDER_ID] 	left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, PRODUCT_TYPE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.[ORDER_ID] = coh.[ORDER_ID] and coh.[DATA_SOURCE] = 'CM' 	left join (SELECT DISTINCT ORDER_ID, SEQUENCE_EXCEPTION_REASON, TRADE_DATE, PRODUCT_TYPE, INSTRUCTION_STATUS_DECODE FROM VISTA_REPORTING.dbo.CASH_ORDERS) co 	on coh.[ORDER_ID] = co.[ORDER_ID] and coh.[DATA_SOURCE] = 'CM' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[ORD_NUM] = coh.[ORDER_ID] and coh.[DATA_SOURCE] = 'AL' 	left join (SELECT DISTINCT ORD_NUM, OPEN_DATE, [STATUS] FROM VISTA_REPORTING.dbo.PM_ORDERS) pm 	on coh.[ORDER_ID] = pm.[ORD_NUM] and coh.[DATA_SOURCE] = 'AL' 	WHERE COALESCE(co.[TRADE_DATE],pm.[OPEN_DATE]) between @Start_Date and @End_Date  	UNION  	SELECT DISTINCT 		'9_RR' as [EXCEPTION_TYPE_ID], 		CONCAT(timex.[ORDER_ID],'_9_',timex.[SOURCE]) as EXCEPTION_ID, 		timex.[ORDER_ID], 		ct.[TRANSACTION_NUMBER], 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN timex.[VG_09] > 0 			THEN  				CASE 					WHEN NULLIF(e.[REASON],'') is null and ct.[TIMELY_EXECUTION_EXCEPTION_REASON] is not null		THEN CAST(ct.[TIMELY_EXECUTION_EXCEPTION_REASON] as varchar(500))	 					WHEN NULLIF(e.[REASON],'') is null and co.[TIMELY_ACKNOWLEDGEMENT_EXCEPTION_REASON] is not null THEN CAST(co.[TIMELY_ACKNOWLEDGEMENT_EXCEPTION_REASON] as varchar(500))	 				ELSE COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale') 				END 		ELSE NULL 		END AS [1A_RATIONALE], 		timex.[VG_09] as [EXCEPTION_VALUE], 		CONCAT(YEAR(co.[TRADE_DATE]), ' - ', MONTH(co.[TRADE_DATE])) as [DATE], 		COALESCE(ct.[PRODUCT_TYPE],co.[PRODUCT_TYPE]) as [PRODUCT_TYPE], 		timex.[SOURCE] as [DATA_SOURCE], 		CASE WHEN mast.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') or co.[INSTRUCTION_STATUS_DECODE] in ('Deleted-Agreed Initiator') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_RR_TABLE timex 	left join #vista_reason e  	on CONCAT(timex.[ORDER_ID],'_9_',timex.[SOURCE]) = e.[ID] 	left join (SELECT DISTINCT ORDER_ID, DEALER_NAME, INSTRUCTION_STATUS FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_RR_TABLE) mast 	on timex.[ORDER_ID] = mast.[ORDER_ID] 	left join (SELECT DISTINCT ct.ORDER_ID, TRANSACTION_NUMBER, PRODUCT_TYPE, ctr.TIMELY_EXECUTION_EXCEPTION_REASON FROM VISTA_REPORTING.dbo.CASH_TRADES ct  			   outer apply (SELECT TOP 1 ORDER_ID, TIMELY_EXECUTION_EXCEPTION_REASON FROM Vista_REPORTING.dbo.CASH_TRADES ctr where TIMELY_EXECUTION_EXCEPTION_REASON is not null and ct.ORDER_ID = ctr.ORDER_ID) ctr) ct 	on ct.[ORDER_ID] = timex.[ORDER_ID] 	left join (SELECT DISTINCT ORDER_ID, TIMELY_ACKNOWLEDGEMENT_EXCEPTION_REASON, TRADE_DATE, PRODUCT_TYPE, INSTRUCTION_STATUS_DECODE FROM VISTA_REPORTING.dbo.CASH_ORDERS) co 	on co.[ORDER_ID] = timex.[ORDER_ID]  	WHERE co.[TRADE_DATE] between @Start_Date and @End_Date  	UNION  	SELECT DISTINCT 		'9_MM' as [EXCEPTION_TYPE_ID], 		CONCAT(timex.[ORDER_ID],'_9_',timex.[SOURCE]) as EXCEPTION_ID, 		timex.[ORDER_ID], 		CASE  			WHEN timex.[SOURCE] = 'CM' THEN ct.[TRANSACTION_NUMBER] 			WHEN timex.[SOURCE] = 'AL' THEN t.[MULTI_FUND_ID] 		ELSE NULL 		END AS [TRANSACTION_NUMBER], 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN timex.[VG_09] = 1  			THEN  				CASE 					WHEN NULLIF(e.[REASON],'') is null and ct.[TIMELY_EXECUTION_EXCEPTION_REASON] is not null		THEN CAST(ct.[TIMELY_EXECUTION_EXCEPTION_REASON] as varchar(500))	 					WHEN NULLIF(e.[REASON],'') is null and co.[TIMELY_ACKNOWLEDGEMENT_EXCEPTION_REASON] is not null THEN CAST(co.[TIMELY_ACKNOWLEDGEMENT_EXCEPTION_REASON] as varchar(500))	 				ELSE COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale') 				END 		ELSE NULL 		END AS [1A_RATIONALE], 		timex.[VG_09] as [EXCEPTION_VALUE], 		CASE 			WHEN timex.[SOURCE] = 'CM' THEN CONCAT(YEAR(co.[TRADE_DATE]), ' - ', MONTH(co.[TRADE_DATE]))  			ELSE CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])) 		END AS [DATE], 		CASE 			WHEN timex.[SOURCE] = 'AL' THEN 'Cash Products' 		ELSE COALESCE(ct.[PRODUCT_TYPE],co.[PRODUCT_TYPE]) 		END AS PRODUCT_TYPE, 		timex.[SOURCE] as [DATA_SOURCE], 		CASE WHEN mast.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') or co.[INSTRUCTION_STATUS_DECODE] in ('Deleted-Agreed Initiator') or pm.[STATUS] = 'C' THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_MM_TABLE timex 	left join #vista_reason e  	on CONCAT(timex.[ORDER_ID],'_9_',timex.[SOURCE]) = e.[ID] 	left join (SELECT DISTINCT ORDER_ID, DEALER_NAME, TRANSACTION_STATUS, INSTRUCTION_STATUS FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE) mast 	on timex.[ORDER_ID] = mast.[ORDER_ID] 	left join (SELECT DISTINCT ct.ORDER_ID, TRANSACTION_NUMBER, PRODUCT_TYPE, ctr.TIMELY_EXECUTION_EXCEPTION_REASON FROM VISTA_REPORTING.dbo.CASH_TRADES ct  			   outer apply (SELECT TOP 1 ORDER_ID, TIMELY_EXECUTION_EXCEPTION_REASON FROM Vista_REPORTING.dbo.CASH_TRADES ctr where TIMELY_EXECUTION_EXCEPTION_REASON is not null and ct.ORDER_ID = ctr.ORDER_ID) ctr) ct 	on ct.[ORDER_ID] = timex.[ORDER_ID] and timex.[SOURCE] = 'CM' 	left join (SELECT DISTINCT ORDER_ID, TIMELY_ACKNOWLEDGEMENT_EXCEPTION_REASON, TRADE_DATE, PRODUCT_TYPE, INSTRUCTION_STATUS_DECODE FROM VISTA_REPORTING.dbo.CASH_ORDERS) co 	on timex.[ORDER_ID] = co.[ORDER_ID] and timex.[SOURCE] = 'CM' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[ORD_NUM] = timex.[ORDER_ID] and timex.[SOURCE] = 'AL' 	left join (SELECT DISTINCT ORD_NUM, OPEN_DATE, [STATUS] FROM VISTA_REPORTING.dbo.PM_ORDERS) pm 	on timex.[ORDER_ID] = pm.[ORD_NUM] and timex.[SOURCE] = 'AL' 	WHERE COALESCE(co.[TRADE_DATE],pm.[OPEN_DATE]) between @Start_Date and @End_Date  	UNION  	SELECT DISTINCT 		'602' as [EXCEPTION_TYPE_ID], 		CONCAT(eod.[ORDER_ID],'_602_',eod.[DATA_SOURCE]) as EXCEPTION_ID, 		eod.[ORDER_ID], 		CASE  			WHEN eod.[DATA_SOURCE] = 'CM' THEN ct.[TRANSACTION_NUMBER] 			WHEN eod.[DATA_SOURCE] = 'AL' THEN t.[MULTI_FUND_ID] 		ELSE NULL 		END AS [TRANSACTION_NUMBER], 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN eod.[VG_602] > 0 			THEN  				CASE 					WHEN NULLIF(e.[REASON],'') is null and co.[HOLDOVER_REASON] is not null THEN CAST(co.[HOLDOVER_REASON] as varchar(500))	 				ELSE COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale') 				END 		ELSE NULL 		END AS [1A_RATIONALE], 		eod.[VG_602] as [EXCEPTION_VALUE], 		CASE 			WHEN eod.[DATA_SOURCE] = 'CM' THEN CONCAT(YEAR(co.[TRADE_DATE]), ' - ', MONTH(co.[TRADE_DATE]))  			ELSE CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])) 		END AS [DATE], 		CASE 			WHEN eod.[DATA_SOURCE] = 'AL' THEN 'Cash Products' 		ELSE COALESCE(ct.[PRODUCT_TYPE],co.[PRODUCT_TYPE]) 		END AS PRODUCT_TYPE, 		eod.[DATA_SOURCE], 		CASE WHEN mast.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') or co.[INSTRUCTION_STATUS_DECODE] in ('Deleted-Agreed Initiator') or pm.[STATUS] = 'C' THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_CASH_TABLE eod 	left join #vista_reason e  	on CONCAT(eod.[ORDER_ID],'_602_',eod.[DATA_SOURCE]) = e.[ID] 	left join (SELECT DISTINCT ORDER_ID, DEALER_NAME, INSTRUCTION_STATUS FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_CASH_TABLE) mast 	on eod.[ORDER_ID] = mast.[ORDER_ID] 	left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, PRODUCT_TYPE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.[ORDER_ID] = eod.[ORDER_ID] and eod.[DATA_SOURCE] = 'CM'  	left join (SELECT DISTINCT ORDER_ID, HOLDOVER_REASON, TRADE_DATE, PRODUCT_TYPE, INSTRUCTION_STATUS_DECODE FROM VISTA_REPORTING.dbo.CASH_ORDERS) co 	on co.[ORDER_ID] = eod.[ORDER_ID] and eod.[DATA_SOURCE] = 'CM' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[ORD_NUM] = eod.[ORDER_ID] and eod.[DATA_SOURCE] = 'AL' 	left join (SELECT DISTINCT ORD_NUM, OPEN_DATE, [STATUS] FROM VISTA_REPORTING.dbo.PM_ORDERS) pm 	on eod.[ORDER_ID] = pm.[ORD_NUM] and eod.[DATA_SOURCE] = 'AL' 	WHERE COALESCE(co.[TRADE_DATE],pm.[OPEN_DATE]) between @Start_Date and @End_Date  	UNION  	SELECT DISTINCT 		'601' as [EXCEPTION_TYPE_ID], 		CONCAT(ISNULL(ooh.[ORDER_ID],0),'_',ISNULL(ooh.[TRANSACTION_NUMBER],0), '_601_',ooh.[SOURCE]) as EXCEPTION_ID, 		ooh.[ORDER_ID], 		ooh.[TRANSACTION_NUMBER], 		COALESCE(mast.[DEALER_NAME],mast2.[DEALER_NAME]) as DEALER, 		CASE  			WHEN ooh.[VG_601] > 0 THEN COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale') 		ELSE NULL 		END AS [1A_RATIONALE], 		ooh.[VG_601] as [EXCEPTION_VALUE], 		CASE 			WHEN ooh.[SOURCE] = 'CM' and ooh.[ORDER_ID] is not null THEN CONCAT(YEAR(co.[TRADE_DATE]), ' - ', MONTH(co.[TRADE_DATE]))  			WHEN ooh.[SOURCE] = 'CM' and ooh.[ORDER_ID] is null		THEN CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE]))  			WHEN ooh.[SOURCE] = 'AL' and ooh.[ORDER_ID] is not null THEN CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])) 			WHEN ooh.[SOURCE] = 'AL' and ooh.[ORDER_ID] is null		THEN CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		END AS [DATE], 		CASE 			WHEN ooh.[SOURCE] = 'AL' THEN 'Cash Products' 		ELSE COALESCE(ct.[PRODUCT_TYPE],co.[PRODUCT_TYPE]) 		END AS PRODUCT_TYPE, 		ooh.[SOURCE] as [DATA_SOURCE], 		CASE WHEN mast.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') 			   or mast2.[TRANSACTION_STATUS] in ('C', 'Cancelled', 'Deleted') 			   or co.[INSTRUCTION_STATUS_DECODE] in ('Deleted-Agreed Initiator') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_601_OUT_OF_HOURS_CASH_TABLE ooh 	left join #vista_reason e  	on CONCAT(ISNULL(ooh.[ORDER_ID],0),'_',ISNULL(ooh.[TRANSACTION_NUMBER],0), '_601_',ooh.[SOURCE]) = e.[ID] 	left join (SELECT DISTINCT ORDER_ID, DEALER_NAME, INSTRUCTION_STATUS, TRANSACTION_STATUS FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_CASH_TABLE) mast 	on ooh.[ORDER_ID] = mast.[ORDER_ID] 	left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, INSTRUCTION_STATUS, TRANSACTION_STATUS FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_CASH_TABLE) mast2 	on ooh.[TRANSACTION_NUMBER] = mast2.[TRANSACTION_NUMBER] 	left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, PRODUCT_TYPE, TRADE_DATE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.[TRANSACTION_NUMBER] = ooh.[TRANSACTION_NUMBER] and ooh.[TRANSACTION_NUMBER] is not null and ooh.[SOURCE] = 'CM' 	left join (SELECT DISTINCT ORDER_ID, TRADE_DATE, PRODUCT_TYPE, INSTRUCTED_BY, INSTRUCTION_STATUS_DECODE FROM VISTA_REPORTING.dbo.CASH_ORDERS) co 	on ooh.[ORDER_ID] = co.[ORDER_ID] and ooh.[ORDER_ID] is not null and ooh.[SOURCE] = 'CM' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[MULTI_FUND_ID] = ooh.[TRANSACTION_NUMBER] and ooh.[SOURCE] = 'AL' 	left join (SELECT DISTINCT ORD_NUM, OPEN_DATE, TRADER, PM FROM VISTA_REPORTING.dbo.PM_ORDERS) pm 	on ooh.[ORDER_ID] = pm.[ORD_NUM] and ooh.[SOURCE] = 'AL'  	WHERE COALESCE(co.[TRADE_DATE],pm.[OPEN_DATE],ct.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date  	UNION  	SELECT DISTINCT 		'603' as [EXCEPTION_TYPE_ID], 		CONCAT(lt.[ORDER_ID],'_603_',lt.[SOURCE]) as EXCEPTION_ID, 		lt.[ORDER_ID], 		CASE  			WHEN lt.[SOURCE] = 'CM' THEN ct.[TRANSACTION_NUMBER] 			WHEN lt.[SOURCE] = 'AL' THEN t.[MULTI_FUND_ID] 		ELSE NULL 		END AS [TRANSACTION_NUMBER], 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN lt.[EXCEPTION_FLAG] > 0 THEN COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale') 		ELSE NULL 		END AS [1A_RATIONALE], 		lt.[EXCEPTION_FLAG] as [EXCEPTION_VALUE], 		CASE 			WHEN lt.[SOURCE] = 'CM' THEN CONCAT(YEAR(co.[TRADE_DATE]), ' - ', MONTH(co.[TRADE_DATE]))  			ELSE CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])) 		END AS [DATE], 		CASE 			WHEN lt.[SOURCE] = 'AL' THEN 'Cash Products' 		ELSE COALESCE(ct.[PRODUCT_TYPE],co.[PRODUCT_TYPE]) 		END AS PRODUCT_TYPE, 		lt.[SOURCE] as [DATA_SOURCE], 		CASE WHEN mast.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') or co.[INSTRUCTION_STATUS_DECODE] in ('Deleted-Agreed Initiator') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_603_LARGE_TRADES_CASH_TABLE lt 	left join #vista_reason e  	on CONCAT(lt.[ORDER_ID],'_603_',lt.[SOURCE]) = e.[ID] 	left join (SELECT DISTINCT ORDER_ID, DEALER_NAME, INSTRUCTION_STATUS FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_CASH_TABLE) mast 	on lt.[ORDER_ID] = mast.[ORDER_ID] 	left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, PRODUCT_TYPE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.[ORDER_ID] = lt.[ORDER_ID] and lt.[SOURCE] = 'CM'  	left join (SELECT DISTINCT ORDER_ID, TRADE_DATE, PRODUCT_TYPE, INSTRUCTION_STATUS_DECODE FROM VISTA_REPORTING.dbo.CASH_ORDERS) co 	on co.[ORDER_ID] = lt.[ORDER_ID] and lt.[SOURCE] = 'CM' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[ORD_NUM] = lt.[ORDER_ID] and lt.[SOURCE] = 'AL' 	left join (SELECT DISTINCT ORD_NUM, OPEN_DATE FROM VISTA_REPORTING.dbo.PM_ORDERS) pm 	on lt.[ORDER_ID] = pm.[ORD_NUM] and lt.[SOURCE] = 'AL' 	WHERE COALESCE(co.[TRADE_DATE],pm.[OPEN_DATE]) between @Start_Date and @End_Date  	UNION  	SELECT DISTINCT 		'611_RR' as [EXCEPTION_TYPE_ID], 		CONCAT(oar.ORDER_ID,'_611_',oar.[DATA_SOURCE]) as EXCEPTION_ID, 		ct.[ORDER_ID], 		CASE  			WHEN oar.DATA_SOURCE = 'CM' THEN ct.[TRANSACTION_NUMBER] 			WHEN oar.DATA_SOURCE = 'AL' THEN t.[MULTI_FUND_ID] 		ELSE NULL 		END AS [TRANSACTION_NUMBER], 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN oar.VG_611 > 0 THEN COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale') 		ELSE NULL 		END AS [1A_RATIONALE], 		oar.VG_611 as [EXCEPTION_VALUE], 		CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE])) as [DATE], 		ct.[PRODUCT_TYPE], 		oar.[DATA_SOURCE], 		CASE WHEN mast.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') 			   or co.[INSTRUCTION_STATUS_DECODE] in ('Deleted-Agreed Initiator') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_RR_TABLE oar 	left join #vista_reason e  	on CONCAT(oar.ORDER_ID,'_611_',oar.[DATA_SOURCE]) = e.[ID] 	left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, ORDER_ID, INSTRUCTION_STATUS FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_RR_TABLE) mast 	on oar.ORDER_ID = mast.ORDER_ID 	left join (SELECT DISTINCT ORDER_ID, TRADE_DATE, PRODUCT_TYPE, INSTRUCTED_BY, INSTRUCTION_STATUS_DECODE FROM VISTA_REPORTING.dbo.CASH_ORDERS) co 	on oar.[ORDER_ID] = co.[ORDER_ID] and oar.[ORDER_ID] is not null and oar.DATA_SOURCE = 'CM' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[ORD_NUM] = oar.[ORDER_ID] and oar.DATA_SOURCE = 'AL' 	left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, PRODUCT_TYPE, TRADE_DATE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.ORDER_ID = oar.ORDER_ID AND oar.[DATA_SOURCE] = 'CM' 	WHERE ct.[TRADE_DATE] between @Start_Date and @End_Date  	UNION  	SELECT DISTINCT 		'611_MM' as [EXCEPTION_TYPE_ID], 		CONCAT(oam.ORDER_ID,'_611_',oam.[DATA_SOURCE]) as EXCEPTION_ID, 		ct.[ORDER_ID], 		CASE  			WHEN oam.DATA_SOURCE = 'CM' THEN ct.[TRANSACTION_NUMBER] 			WHEN oam.DATA_SOURCE = 'AL' THEN t.[MULTI_FUND_ID] 		ELSE NULL 		END AS [TRANSACTION_NUMBER], 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN oam.VG_611 > 0 THEN COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale') 		ELSE NULL 		END AS [1A_RATIONALE], 		oam.VG_611 as [EXCEPTION_VALUE], 		CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE])) as [DATE], 		ct.[PRODUCT_TYPE], 		oam.[DATA_SOURCE], 		CASE WHEN mast.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') 			   or co.[INSTRUCTION_STATUS_DECODE] in ('Deleted-Agreed Initiator') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_MM_TABLE oam 	left join #vista_reason e  	on CONCAT(oam.ORDER_ID,'_611_',oam.[DATA_SOURCE]) = e.[ID] 	left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, ORDER_ID, INSTRUCTION_STATUS FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_MM_TABLE) mast 	on oam.ORDER_ID = mast.ORDER_ID 	left join (SELECT DISTINCT ORDER_ID, TRADE_DATE, PRODUCT_TYPE, INSTRUCTED_BY, INSTRUCTION_STATUS_DECODE FROM VISTA_REPORTING.dbo.CASH_ORDERS) co 	on oam.[ORDER_ID] = co.[ORDER_ID] and oam.[ORDER_ID] is not null and oam.DATA_SOURCE = 'CM' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[ORD_NUM] = oam.[ORDER_ID] and oam.DATA_SOURCE = 'AL' 	left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, PRODUCT_TYPE, TRADE_DATE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.ORDER_ID = oam.ORDER_ID AND oam.[DATA_SOURCE] = 'CM' 	WHERE ct.[TRADE_DATE] between @Start_Date and @End_Date  	UNION --SURVG-973 	SELECT DISTINCT 		'612_RR' as [EXCEPTION_TYPE_ID], 		CONCAT(ct.ORDER_ID,'_',oar.TRANSACTION_NUMBER,'_612_',oar.[DATA_SOURCE]) as EXCEPTION_ID, 		ct.[ORDER_ID], 		CASE  			WHEN oar.DATA_SOURCE = 'CM' THEN ct.[TRANSACTION_NUMBER] 			WHEN oar.DATA_SOURCE = 'AL' THEN t.[MULTI_FUND_ID] 		ELSE NULL 		END AS [TRANSACTION_NUMBER], 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN oar.VG_612 > 0 THEN COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale') 		ELSE NULL 		END AS [1A_RATIONALE], 		oar.VG_612 as [EXCEPTION_VALUE], 		CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE])) as [DATE], 		ct.[PRODUCT_TYPE], 		oar.[DATA_SOURCE], 		CASE WHEN mast.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') 		   or co.[INSTRUCTION_STATUS_DECODE] in ('Deleted-Agreed Initiator') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_RR_TABLE oar 	left join (select * from VISTA_REPORTING.dbo.AUDIT_TABLE_CASH where exception_type = 'Order Allocation') ac 	on oar.TRANSACTION_NUMBER = ac.TRANSACTION_NUMBER 	left join #vista_reason e  	on ac.ID = e.[ID] 	left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, ORDER_ID, INSTRUCTION_STATUS FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_RR_TABLE) mast 	on oar.TRANSACTION_NUMBER = mast.TRANSACTION_NUMBER 	left join (SELECT DISTINCT ORDER_ID, TRADE_DATE, PRODUCT_TYPE, INSTRUCTED_BY, INSTRUCTION_STATUS_DECODE FROM VISTA_REPORTING.dbo.CASH_ORDERS) co 	on mast.ORDER_ID = co.ORDER_ID and mast.TRANSACTION_NUMBER is not null and oar.DATA_SOURCE = 'CM' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES) t  	on t.MULTI_FUND_ID = oar.TRANSACTION_NUMBER and oar.DATA_SOURCE = 'AL' 	left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, PRODUCT_TYPE, TRADE_DATE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.TRANSACTION_NUMBER = oar.TRANSACTION_NUMBER AND oar.[DATA_SOURCE] = 'CM' 	WHERE ct.[TRADE_DATE] between @Start_Date and @End_Date 	 	UNION  	SELECT DISTINCT 		'612_MM' as [EXCEPTION_TYPE_ID], 		CONCAT(ct.ORDER_ID,'_',oam.TRANSACTION_NUMBER,'_612_',oam.[DATA_SOURCE]) as EXCEPTION_ID, 		ct.[ORDER_ID], 		CASE  			WHEN oam.DATA_SOURCE = 'CM' THEN ct.[TRANSACTION_NUMBER] 			WHEN oam.DATA_SOURCE = 'AL' THEN t.[MULTI_FUND_ID] 		ELSE NULL 		END AS [TRANSACTION_NUMBER], 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN oam.VG_612 > 0 THEN COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale') 		ELSE NULL 		END AS [1A_RATIONALE], 		oam.VG_612 as [EXCEPTION_VALUE], 		CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE])) as [DATE], 		ct.[PRODUCT_TYPE], 		oam.[DATA_SOURCE], 		CASE WHEN mast.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') 			   or co.[INSTRUCTION_STATUS_DECODE] in ('Deleted-Agreed Initiator') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_MM_TABLE oam 	left join (select * from VISTA_REPORTING.dbo.AUDIT_TABLE_CASH where exception_type = 'Order Allocation') ac 	on oam.TRANSACTION_NUMBER = ac.TRANSACTION_NUMBER 	left join #vista_reason e  	on ac.ID = e.[ID] 	left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, ORDER_ID, INSTRUCTION_STATUS FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_RR_TABLE) mast 	on oam.TRANSACTION_NUMBER = mast.TRANSACTION_NUMBER 	left join (SELECT DISTINCT ORDER_ID, TRADE_DATE, PRODUCT_TYPE, INSTRUCTED_BY, INSTRUCTION_STATUS_DECODE FROM VISTA_REPORTING.dbo.CASH_ORDERS) co 	on mast.ORDER_ID = co.ORDER_ID and mast.TRANSACTION_NUMBER is not null and oam.DATA_SOURCE = 'CM' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES) t  	on t.MULTI_FUND_ID = oam.TRANSACTION_NUMBER and oam.DATA_SOURCE = 'AL' 	left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, PRODUCT_TYPE, TRADE_DATE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.TRANSACTION_NUMBER = oam.TRANSACTION_NUMBER AND oam.[DATA_SOURCE] = 'CM' 	WHERE ct.[TRADE_DATE] between @Start_Date and @End_Date ) temp_exception --End of SURVG-973  IF OBJECT_ID('tempdb..#temp_max_req_orders', 'U') IS NOT NULL DROP TABLE #temp_max_req_orders SELECT  	ORDER_ID, 	MAX(API_REQUESTED_DATE) AS MAX_API_REQ INTO #temp_max_req_orders FROM VISTA_REPORTING.dbo.CASH_ORDERS GROUP BY ORDER_ID  IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades SELECT  	TRANSACTION_NUMBER, 	MAX(API_REQUESTED_DATE) AS MAX_API_REQ INTO #temp_max_req_trades FROM VISTA_REPORTING.dbo.CASH_TRADES GROUP BY TRANSACTION_NUMBER  IF OBJECT_ID('tempdb..#MAX_TOUCH_T', 'U') IS NOT NULL DROP TABLE #MAX_TOUCH_T SELECT DISTINCT  	MULTI_FUND_ID,  	MAX(TOUCH_COUNT) AS MAX_TOUCH  INTO #MAX_TOUCH_T FROM VISTA_REPORTING.DBO.TRADES GROUP BY MULTI_FUND_ID  IF OBJECT_ID('tempdb..#MAX_TOUCH_PM', 'U') IS NOT NULL DROP TABLE #MAX_TOUCH_PM SELECT DISTINCT  	ORD_NUM,  	MAX(TOUCH_COUNT) AS MAX_TOUCH  INTO #MAX_TOUCH_PM FROM VISTA_REPORTING.DBO.PM_ORDERS GROUP BY ORD_NUM   IF OBJECT_ID('tempdb..#temp_exception_final', 'U') IS NOT NULL DROP TABLE #temp_exception_final SELECT DISTINCT 	ex.[DEALER] as DEALER_NAME, 	CASE  		WHEN ex.[EXCEPTION_TYPE_ID] = '9_RR'		THEN 'Timely Execution RR' 		WHEN ex.[EXCEPTION_TYPE_ID] = '9_MM'		THEN 'Timely Execution MM' 		WHEN ex.[EXCEPTION_TYPE_ID] = '10_RR'		THEN 'Timely Recording RR' 		WHEN ex.[EXCEPTION_TYPE_ID] = '10_MM'		THEN 'Timely Recording MM' 		WHEN ex.[EXCEPTION_TYPE_ID] = '601'			THEN 'Out of Hours' 		WHEN ex.[EXCEPTION_TYPE_ID] = '602'			THEN 'EOD Holdovers' 		WHEN ex.[EXCEPTION_TYPE_ID] = '603'			THEN 'Large Trades' 		WHEN ex.[EXCEPTION_TYPE_ID] = '604_RR'		THEN 'Client Order Handling RR' 		WHEN ex.[EXCEPTION_TYPE_ID] = '604_MM'		THEN 'Client Order Handling MM' 		--SURVG-563----------------- 		WHEN ex.[EXCEPTION_TYPE_ID] = '613_RR'		THEN 'Instructor to Dealer RR' 		WHEN ex.[EXCEPTION_TYPE_ID] = '613_MM'		THEN 'Instructor to Dealer MM' 		--End of SURVG-563---------------- 		WHEN ex.[EXCEPTION_TYPE_ID] = '607_RR'		THEN 'Best Execution RR' 		WHEN ex.[EXCEPTION_TYPE_ID] = '607_MM_QE'	THEN 'Best Execution MM B3Q' 		WHEN ex.[EXCEPTION_TYPE_ID] = '607_MM_NWQ'	THEN 'Best Execution MM NWQ' 		WHEN ex.[EXCEPTION_TYPE_ID] = '607_MM_DRR'	THEN 'Best Execution MM DRR' 		WHEN ex.[EXCEPTION_TYPE_ID] = '608'			THEN 'TA Knockback' 		WHEN ex.[EXCEPTION_TYPE_ID] = '609'			THEN 'Deposits Reference Rate' 		WHEN ex.[EXCEPTION_TYPE_ID] = '610'			THEN 'CD, CP, TBills, Cancellations & Amendments' 		WHEN ex.[EXCEPTION_TYPE_ID] = '611_RR'		THEN 'Order Aggregation RR' 		WHEN ex.[EXCEPTION_TYPE_ID] = '611_MM'		THEN 'Order Aggregation MM' 		WHEN ex.[EXCEPTION_TYPE_ID] = '612_RR'		THEN 'Order Allocation RR' 		WHEN ex.[EXCEPTION_TYPE_ID] = '612_MM'		THEN 'Order Allocation MM' 	END AS [EXCEPTION], 	ex.[EXCEPTION_VALUE], 	COALESCE(ooh.[ORDER_EXCEPTION],ooh2.[ORDER_EXCEPTION]) as ORDER_EXCEPTION, 	COALESCE(ooh.[TRADE_EXCEPTION],ooh2.[TRADE_EXCEPTION]) as TRADE_EXCEPTION, 	e_c.[COMMENT], 	CASE  		WHEN ex.[EXCEPTION_VALUE] = 1 and ex.[1A_RATIONALE] = '' THEN 'Unassigned Rationale' 	ELSE ex.[1A_RATIONALE] 	END AS [1A_RATIONALE], 	COALESCE(ct.[CLIENT_FUND_OR_POOL_CODE],co.[CLIENT_FUND_OR_POOL_CODE]) as CLIENT_FUND_POOL_CODE, 	COALESCE(ct.[PRODUCT],pr.[INST_TYPE]) as PRODUCT, 	COALESCE(co.[INSTRUCTED_CURRENCY],pm.[CURRENCY]) as INSTRUCTED_CURRENCY, 	COALESCE(co.[INSTRUCTED_AMOUNT],pm.[FACE]) as INSTRUCTED_AMOUNT, 	COALESCE(ct.[DEALT_AMOUNT],t.[TRD_ORIG_FACE]) as DEALT_AMOUNT, 	COALESCE(ct.[BANK],t.[TRD_EX_BROKER_CODE],t.[TRD_COUNTERPARTY]) as BANK, 	COALESCE(ct.[EXECUTED_RATE],t.[TRD_PRICE]) as EXECUTED_RATE, 	COALESCE(mast_bestexmm.[LOSING_BANKS],mast_bestexrr.[LOSING_BANKS]) as [LOSING_BANKS], 	COALESCE(mast_bestexmm.[LOSING_RATES],mast_bestexrr.[LOSING_RATES]) as [LOSING_RATES], 	COALESCE(mast_bestexmm.[NO_OF_QUOTES],mast_bestexrr.[NO_OF_QUOTES]) as [NO_OF_QUOTES], 	COALESCE(mast_bestexmm.[STATIC_BANK_COUNT],mast_bestexrr.[STATIC_BANK_COUNT]) as [STATIC_BANK_COUNT], 	COALESCE(ct.[TRADE_DATE],t.[TRD_TRADE_DATE]) as TRADE_DATE, 	COALESCE(ct.[VALUE_DATE],t.[TRD_TRADE_DATE]) as VALUE_DATE, 	COALESCE(ct.[MATURITY_DATE],t.[TRD_SETTLE_DATE]) as MATURITY_DATE, 	ct.[TERM], 	CASE 		WHEN ex.[DATA_SOURCE] = 'CM' THEN DATEDIFF(DAY,ct.[VALUE_DATE],ct.[MATURITY_DATE]) 		WHEN ex.[DATA_SOURCE] = 'AL' THEN DATEDIFF(DAY,t.[TRD_TRADE_DATE],t.[TRD_TRADE_DATE]) 	END AS NO_OF_DAYS, 	ct.[TRANSACTION_TYPE], 	COALESCE(co.[CUSTOM_INSTRUCTION],pm.[COMMENTS_VALUE]) as CUSTOM_INSTRUCTION, 	COALESCE(ct.[BASE_FUND_CODE],co.[BASE_FUND_CODE]) as BASE_FUND_CODE, 	CASE 		WHEN ex.[DATA_SOURCE] = 'AL' THEN 			CASE  				WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP' 				WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG' 				WHEN (pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM' 			ELSE NULL 			END 		WHEN ex.[DATA_SOURCE] = 'CM' THEN ct.[BUSINESS_GROUP] 	ELSE NULL 	END AS [BUSINESS_GROUP], --Guessing the logic is same as DMG? 	COALESCE(co.[INSTRUCTED_BY],pm.[PM]) as INSTRUCTED_BY, 	COALESCE(co.[ACCEPTED_BY],pm.[TRADER]) as ACCEPTED_BY, 	COALESCE(co.[OMQ_DATE_TIME],pm.[AUTH_TIME]) as OMQ_DATE_TIME, 	COALESCE(co.[INSTRUCTION_RECEIVED_TIME],pm.[AUTH_TIME]) as INSTRUCTION_RECEIVED_TIME, 	COALESCE(ct.[EXECUTED_DATETIME],t.[EXECUTION_TIME]) as EXECUTED_DATE_TIME, 	COALESCE(ct.[UPLOADED_DATE_TIME],t.[TRD_ENTRY_TIME]) as UPLOADED_DATE_TIME, 	lt2.[EXCEPTION_FLAG] as LARGE_TRADE_EXCEPTION, 	co.[INSTRUCTION_CANCEL_REASON], 	co.[CANCELLED_BY], 	COALESCE(co.[INSTRUCTION_STATUS_DECODE],pm.[STATUS]) as INSTRUCTION_STATUS, 	COALESCE(ct.[TRANSACTION_STATUS_DECODE],t.[TRD_STATUS]) as TRANSACTION_STATUS, 	ex.[ORDER_ID], 	ex.[TRANSACTION_NUMBER], 	COALESCE(ct.[PRODUCT_TYPE],co.[PRODUCT_TYPE],'Cash Products') as PRODUCT_TYPE, 	ex.[EXCEPTION_TYPE_ID], 	ex.[EXCEPTION_ID], 	ex.[DATE], 	@REPORT_NAME as REPORT_NAME, 	GETDATE() as REPORT_DATE, 	ex.[DATA_SOURCE] INTO #temp_exception_final FROM #temp_exception_table ex left join (SELECT DISTINCT ct.TRANSACTION_NUMBER, EXECUTED_DATETIME, BANK, EXECUTED_RATE, UPLOADED_DATE_TIME, BUSINESS_GROUP, PRODUCT_TYPE, PRODUCT, DEALT_AMOUNT,  						   TRADE_DATE, VALUE_DATE, MATURITY_DATE, TERM, CLIENT_FUND_OR_POOL_CODE, BASE_FUND_CODE, TRANSACTION_TYPE, TRANSACTION_STATUS_DECODE, API_REQUESTED_DATE, PULL_DATE FROM VISTA_REPORTING.dbo.CASH_TRADES ct 						   inner join #temp_max_req_trades req on req.MAX_API_REQ = ct.API_REQUESTED_DATE and req.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER) ct on ex.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER] and ex.[TRANSACTION_NUMBER] is not null and ex.[DATA_SOURCE] = 'CM' left join (SELECT DISTINCT co.ORDER_ID, OMQ_DATE_TIME, INSTRUCTION_RECEIVED_TIME, INSTRUCTION_CANCEL_REASON, CANCELLED_BY, PRODUCT_TYPE, INSTRUCTED_CURRENCY,  						   INSTRUCTED_AMOUNT, CLIENT_FUND_OR_POOL_CODE, BASE_FUND_CODE, INSTRUCTED_BY, CUSTOM_INSTRUCTION, ACCEPTED_BY, INSTRUCTION_STATUS_DECODE, co.API_REQUESTED_DATE, PULL_DATE FROM VISTA_REPORTING.dbo.CASH_ORDERS co 						   inner join #temp_max_req_orders req on req.ORDER_ID = co.ORDER_ID and req.MAX_API_REQ = co.API_REQUESTED_DATE) co on ex.[ORDER_ID] = co.[ORDER_ID] and ex.[ORDER_ID] is not null and ex.[DATA_SOURCE] = 'CM' left join (SELECT DISTINCT t.MULTI_FUND_ID, FUND, EXECUTION_TIME, TRD_COUNTERPARTY, TRD_EX_BROKER_CODE, TRD_PRICE, TRD_ENTRY_TIME, TRD_ORIG_FACE,  						   TRD_TRADE_DATE, TRD_SETTLE_DATE, TRD_STATUS, TOUCH_COUNT, PULL_DATE FROM VISTA_REPORTING.dbo.TRADES t 						   inner join #max_touch_trades mtt on t.MULTI_FUND_ID = mtt.MULTI_FUND_ID and t.TOUCH_COUNT = mtt.MAX_TOUCH) t on ex.[TRANSACTION_NUMBER] = t.[MULTI_FUND_ID] and ex.[TRANSACTION_NUMBER] is not null and ex.[DATA_SOURCE] = 'AL' left join (SELECT DISTINCT FUND_ID, PORTFOLIO_GROUP_NAME FROM VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY) pgt on t.[FUND] = pgt.[FUND_ID] left join (SELECT DISTINCT MULTI_FUND_ID, INST_TYPE FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr on t.[MULTI_FUND_ID] = pr.[MULTI_FUND_ID] left join (SELECT DISTINCT pm.ORD_NUM, AUTH_TIME, CURRENCY, FACE, PM, COMMENTS_VALUE, TRADER, [STATUS], TOUCH_COUNT FROM VISTA_REPORTING.dbo.PM_ORDERS pm 						   inner join #MAX_TOUCH_PM mtt on mtt.ORD_NUM = pm.ORD_NUM and mtt.MAX_TOUCH = pm.TOUCH_COUNT) pm on ex.[ORDER_ID] = pm.[ORD_NUM] and ex.[ORDER_ID] is not null and ex.[DATA_SOURCE] = 'AL' left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, ORDER_EXCEPTION, TRADE_EXCEPTION FROM VISTA_STAGING.dbo.VG_601_OUT_OF_HOURS_CASH_TABLE) ooh on (ex.[EXCEPTION_TYPE_ID] = '601' and ex.[ORDER_ID] = ooh.[ORDER_ID] and ooh.[ORDER_ID] is not null)  left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, ORDER_EXCEPTION, TRADE_EXCEPTION FROM VISTA_STAGING.dbo.VG_601_OUT_OF_HOURS_CASH_TABLE) ooh2 on (ex.[EXCEPTION_TYPE_ID] = '601' and ex.[TRANSACTION_NUMBER] = ooh2.[TRANSACTION_NUMBER] and ooh2.[TRANSACTION_NUMBER] is not null)  left join (SELECT DISTINCT TRANSACTION_NUMBER, EXCEPTION_FLAG FROM VISTA_STAGING.dbo.VG_603T_LARGE_TRADES_CASH_TABLE) lt2 on (ex.[TRANSACTION_NUMBER] = lt2.[TRANSACTION_NUMBER]) left join (SELECT DISTINCT TRANSACTION_NUMBER, LOSING_BANKS, LOSING_RATES, NO_OF_QUOTES, STATIC_BANK_COUNT FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE) mast_bestexmm on (ex.[TRANSACTION_NUMBER] = mast_bestexmm.[TRANSACTION_NUMBER]) and EXCEPTION_TYPE_ID not in ('9_RR','10_RR','604_RR','607_RR') left join (SELECT DISTINCT TRANSACTION_NUMBER, LOSING_BANKS, LOSING_RATES, NO_OF_QUOTES, STATIC_BANK_COUNT FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR_TABLE) mast_bestexrr on (ex.[TRANSACTION_NUMBER] = mast_bestexrr.[TRANSACTION_NUMBER]) and EXCEPTION_TYPE_ID in ('9_RR','10_RR','604_RR','607_RR') left join (SELECT DISTINCT ID, TRANSACTION_NUMBER, COMMENT FROM #vista_reason) e_c on e_c.[ID] = ex.[EXCEPTION_ID] and e_c.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER WHERE ex.TRADE_STATUS_FLAG != 1   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_CASH_AGGREGATOR_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_CASH_AGGREGATOR_DATA 	FROM #temp_exception_final ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_CASH_AGGREGATOR_DATA 	SELECT * 	FROM #temp_exception_final  IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes           WHERE name = N'DMC_CASH_AGG_DATA')    DROP INDEX DMC_CASH_AGG_DATA  ON VISTA_REPORTING.[dbo].DMC_CASH_AGGREGATOR_DATA  CREATE NONCLUSTERED INDEX DMC_CASH_AGG_DATA ON VISTA_REPORTING.[dbo].DMC_CASH_AGGREGATOR_DATA (REPORT_DATE, EXCEPTION) INCLUDE (REPORT_NAME)  IF OBJECT_ID('tempdb..#temp_exception_cancelled', 'U') IS NOT NULL DROP TABLE #temp_exception_cancelled	 SELECT DISTINCT 	ex.[DEALER_NAME] as DEALER_NAME, 	CASE  		WHEN ex.[INSTRUCTION_STATUS] in ('Cancelled','Deleted-Agreed Initiator', 'C') THEN 1 	ELSE 0 	END AS CANCELLED_ORDER_EXCEPTION_FLAG, 	CASE  		WHEN ex.[TRANSACTION_STATUS] in ('C','Cancelled','Deleted') THEN 1 	ELSE 0 	END AS CANCELLED_TRADE_EXCEPTION_FLAG, 	CASE  		WHEN ex.[INSTRUCTION_STATUS] in ('Cancelled','Deleted-Agreed Initiator', 'C') OR ex.[TRANSACTION_STATUS] in ('C','Cancelled','Deleted') 		THEN  			CASE 				WHEN NULLIF(e.[REASON],'') is null and ct.[CANCEL_REASON] is not null			  THEN CAST(ct.[CANCEL_REASON] as varchar(500))	 				WHEN NULLIF(e.[REASON],'') is null and co.[INSTRUCTION_CANCEL_REASON] is not null THEN CAST(co.[INSTRUCTION_CANCEL_REASON] as varchar(500))	 			ELSE NULLIF(e.[REASON],'') 			END 	ELSE NULL 	END AS [CANCELLED_RATIONALE], 	co.[CANCELLED_BY], 	COALESCE(ct.[CLIENT_FUND_OR_POOL_CODE],co.[CLIENT_FUND_OR_POOL_CODE]) as CLIENT_FUND_POOL_CODE, 	COALESCE(ct.[PRODUCT],pr.[INST_TYPE]) as PRODUCT, 	COALESCE(co.[INSTRUCTED_CURRENCY],pm.[CURRENCY]) as INSTRUCTED_CURRENCY, 	COALESCE(co.[INSTRUCTED_AMOUNT],pm.[FACE]) as INSTRUCTED_AMOUNT, 	COALESCE(ct.[DEALT_AMOUNT],t.[TRD_ORIG_FACE]) as DEALT_AMOUNT, 	COALESCE(ct.[BANK],t.[TRD_EX_BROKER_CODE],t.[TRD_COUNTERPARTY]) as BANK, 	COALESCE(ct.[EXECUTED_RATE],t.[TRD_PRICE]) as EXECUTED_RATE, 	ex.[ORDER_EXCEPTION]  as ORDER_EXCEPTION, 	ex.[TRADE_EXCEPTION]  as TRADE_EXCEPTION, 	co.[INSTRUCTION_CANCEL_REASON], 	COALESCE(ct.[TRADE_DATE],t.[TRD_TRADE_DATE]) as TRADE_DATE, 	COALESCE(ct.[VALUE_DATE],t.[TRD_TRADE_DATE]) as VALUE_DATE, 	COALESCE(ct.[MATURITY_DATE],t.[TRD_SETTLE_DATE]) as MATURITY_DATE, 	ct.[TERM], 	CASE 		WHEN ex.[DATA_SOURCE] = 'CM' THEN DATEDIFF(DAY,ct.[VALUE_DATE],ct.[MATURITY_DATE]) 		WHEN ex.[DATA_SOURCE] = 'AL' THEN DATEDIFF(DAY,t.[TRD_TRADE_DATE],t.[TRD_TRADE_DATE]) 	END AS NO_OF_DAYS, 	ct.[TRANSACTION_TYPE], 	COALESCE(co.[CUSTOM_INSTRUCTION],pm.[COMMENTS_VALUE]) as CUSTOM_INSTRUCTION, 	COALESCE(ct.[BASE_FUND_CODE],co.[BASE_FUND_CODE]) as BASE_FUND_CODE, 	CASE 		WHEN ex.[DATA_SOURCE] = 'AL' THEN 			CASE  				WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP' 				WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG' 				WHEN (pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM' 			ELSE NULL 			END 		WHEN ex.[DATA_SOURCE] = 'CM' THEN ct.[BUSINESS_GROUP] 	ELSE NULL 	END AS [BUSINESS_GROUP], --Guessing the logic is same as DMG? 	COALESCE(co.[INSTRUCTED_BY],pm.[PM]) as INSTRUCTED_BY, 	COALESCE(co.[ACCEPTED_BY],pm.[TRADER]) as ACCEPTED_BY, 	COALESCE(co.[OMQ_DATE_TIME],pm.[AUTH_TIME]) as OMQ_DATE_TIME, 	COALESCE(co.[INSTRUCTION_RECEIVED_TIME],pm.[AUTH_TIME]) as INSTRUCTION_RECEIVED_TIME, 	COALESCE(ct.[EXECUTED_DATETIME],t.[EXECUTION_TIME]) as EXECUTED_DATE_TIME, 	COALESCE(ct.[UPLOADED_DATE_TIME],t.[TRD_ENTRY_TIME]) as UPLOADED_DATE_TIME, 	COALESCE(co.[INSTRUCTION_STATUS_DECODE],pm.[STATUS]) as INSTRUCTION_STATUS, 	COALESCE(ct.[TRANSACTION_STATUS_DECODE],t.[TRD_STATUS]) as TRANSACTION_STATUS, 	ex.[ORDER_ID], 	ex.[TRANSACTION_NUMBER], 	COALESCE(CAST(ct.[PRODUCT_TYPE] as VARCHAR(30)),CAST(co.[PRODUCT_TYPE] as VARCHAR(30)),'Cash Products') as PRODUCT_TYPE, 	ex.[EXCEPTION_VALUE], 	ex.[DATE], 	@REPORT_NAME as REPORT_NAME, 	GETDATE() as REPORT_DATE, 	ex.[DATA_SOURCE] INTO #temp_exception_cancelled FROM #temp_exception_final ex left join #vista_reason e  on CONCAT(ISNULL(ORDER_ID,0),'_',ISNULL(ex.TRANSACTION_NUMBER,0),'_',ex.[EXCEPTION_TYPE_ID],'_',ex.[DATA_SOURCE]) = e.[ID]  left join (SELECT DISTINCT ORDER_ID, ct.TRANSACTION_NUMBER, CANCEL_REASON, EXECUTED_DATETIME, BANK, EXECUTED_RATE, UPLOADED_DATE_TIME, BUSINESS_GROUP, ct.API_REQUESTED_DATE, 						   PRODUCT_TYPE, PRODUCT, DEALT_AMOUNT, TRADE_DATE, VALUE_DATE, MATURITY_DATE, CLIENT_FUND_OR_POOL_CODE, BASE_FUND_CODE, TRANSACTION_TYPE, TERM, TRANSACTION_STATUS_DECODE FROM VISTA_REPORTING.dbo.CASH_TRADES ct 						   inner join #temp_max_req_trades req on req.MAX_API_REQ = ct.API_REQUESTED_DATE and req.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER) ct on ex.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER] and ex.[TRANSACTION_NUMBER] is not null and ex.[DATA_SOURCE] = 'CM' left join (SELECT DISTINCT co.ORDER_ID, INSTRUCTION_STATUS_DECODE, INSTRUCTION_CANCEL_REASON, OMQ_DATE_TIME, INSTRUCTION_RECEIVED_TIME, CANCELLED_BY, co.API_REQUESTED_DATE, 		   PRODUCT_TYPE, INSTRUCTED_CURRENCY, INSTRUCTED_AMOUNT, CLIENT_FUND_OR_POOL_CODE, BASE_FUND_CODE, INSTRUCTED_BY, CUSTOM_INSTRUCTION, ACCEPTED_BY FROM VISTA_REPORTING.dbo.CASH_ORDERS co 		   inner join #temp_max_req_orders req on req.ORDER_ID = co.ORDER_ID and req.MAX_API_REQ = co.API_REQUESTED_DATE) co on ex.[ORDER_ID] = co.[ORDER_ID] and ex.[ORDER_ID] is not null and ex.[DATA_SOURCE] = 'CM' left join (SELECT DISTINCT t.MULTI_FUND_ID, FUND, EXECUTION_TIME, TRD_COUNTERPARTY, TRD_EX_BROKER_CODE, TRD_PRICE, TRD_ENTRY_TIME, TRD_ORIG_FACE,  		   TRD_TRADE_DATE, TRD_SETTLE_DATE, TRD_STATUS, TOUCH_COUNT, PULL_DATE FROM VISTA_REPORTING.dbo.TRADES t 		   inner join #max_touch_trades mtt on t.MULTI_FUND_ID = mtt.MULTI_FUND_ID and t.TOUCH_COUNT = mtt.MAX_TOUCH) t on ex.[TRANSACTION_NUMBER] = t.[MULTI_FUND_ID] and ex.[TRANSACTION_NUMBER] is not null and ex.[DATA_SOURCE] = 'AL' left join (SELECT DISTINCT FUND_ID, PORTFOLIO_GROUP_NAME FROM VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY) pgt on t.[FUND] = pgt.[FUND_ID] left join (SELECT DISTINCT MULTI_FUND_ID, INST_TYPE FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr on t.[MULTI_FUND_ID] = pr.[MULTI_FUND_ID] left join (SELECT DISTINCT pm.ORD_NUM, [STATUS], AUTH_TIME, CURRENCY, FACE, PM, TRADER, COMMENTS_VALUE, TOUCH_COUNT FROM VISTA_REPORTING.dbo.PM_ORDERS pm 		   inner join #MAX_TOUCH_PM mtt on mtt.ORD_NUM = pm.ORD_NUM and mtt.MAX_TOUCH = pm.TOUCH_COUNT) pm on pm.[ORD_NUM] = co.[ORDER_ID] and ex.[ORDER_ID] is not null and ex.[DATA_SOURCE] = 'AL' left join VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd  on (tdd.[INITIALS] = ex.[DEALER_NAME] and ex.[DATA_SOURCE] = 'AL' AND CAST(t.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE))  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_CASH_CANCELLED_AGGREGATOR_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_CASH_CANCELLED_AGGREGATOR_DATA 	FROM #temp_exception_cancelled ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_CASH_CANCELLED_AGGREGATOR_DATA 	SELECT * 	FROM #temp_exception_cancelled  END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: DMC_CASH_AGGREGATOR_1B CreateDate: 2019-10-18 08:39:49.707 ModifyDate: 2022-03-04 17:43:17.397 --- DEFINITION START --- -- ============================================= -- Author:		<Samad, Mehreen> -- Create date: <26/06/2019> -- Description:	 -- <Generates AGGREGATOR 1B Report data as well as  -- Cancelled Orders/Trades Report data for CASH.> -- =============================================  -- ***************VERSION CONTROL*************** --2022-01-27, Matej Miter; Created for Jira: --SURVG-563 - New Cash Report Instructor to dealer 2022 -- *********************************************  CREATE PROCEDURE [dbo].[DMC_CASH_AGGREGATOR_1B]  	-- Add the parameters for the stored procedure here  	@Start_day		INT, 	@Start_Month	INT, 	@Start_Year		INT, 	@End_Day		INT,  	@End_Month		INT, 	@End_Year		INT, 	@REPORT_NAME	VARCHAR(MAX)  AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;      -- Insert statements for procedure here  	DECLARE @Start_Date	DATETIME; 	SET		@Start_Date = CONVERT(DATE,CONCAT(@Start_Year,'-',@Start_Month,'-', @Start_day)); --Turn the input start month parameter into a date  	DECLARE @End_Date0	DATETIME; 	DECLARE @End_Date	DATETIME; 	SET		@End_Date0  = CONVERT(DATETIME,CONCAT(@End_Year,'-',@End_Month, '-', @End_Day));  --Turn the input end month parameter into a date   	SET		@End_Date	= DATEADD(SECOND,86399,@End_Date0); --To make it for 23:59:59 that day. May need to update this for milliseconds.   ----Add the metadata to a table so we keep a history of all reports run IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_CASH_REPORTS_METADATA', 'U') IS NULL SELECT 	DATEPART(DAY,@Start_Date) AS [START_DAY], 	DATEPART(MONTH, @Start_Date) AS [START_MONTH], 	DATEPART(YEAR, @Start_Date) AS [START_YEAR], 	DATEPART(DAY,@End_Date)	AS [END_DAY], 	DATEPART(MONTH, @End_Date) AS [END_MONTH], 	DATEPART(YEAR, @End_Date) AS [END_YEAR], 	CONVERT(VARCHAR(70),'CASH_AGGREGATOR_1B') AS [DMC_Report], 	@REPORT_NAME AS [Report_Name], 	GETDATE() AS [Run_Date] INTO VISTA_REPORTING.dbo.DMC_CASH_REPORTS_METADATA ELSE INSERT INTO VISTA_REPORTING.dbo.DMC_CASH_REPORTS_METADATA SELECT 	DATEPART(DAY,@Start_Date) AS [START_DAY], 	DATEPART(MONTH, @Start_Date) AS [START_MONTH], 	DATEPART(YEAR, @Start_Date) AS [START_YEAR], 	DATEPART(DAY,@End_Date)	AS [END_DAY], 	DATEPART(MONTH, @End_Date) AS [END_MONTH], 	DATEPART(YEAR, @End_Date) AS [END_YEAR], 	'CASH_AGGREGATOR_1B' AS [DMC_Report], 	@REPORT_NAME AS [Report_Name], 	GETDATE() AS [Run_Date]   --1B Reasons IF OBJECT_ID('tempdb..#max_reason_cm', 'U') IS  NOT NULL DROP TABLE #max_reason_cm --The below table is used to identify the last Reason (populated by C&M Team) SELECT DISTINCT 	e.[ID],  	e.[REASON], 	e.[STATUS] INTO #max_reason_cm FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE e inner join (SELECT  				[ID], 				MAX(TOUCH_COUNT) as [MAX_TOUCH]  			FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE 			WHERE [STATUS] in ('Pre Sampling','With C&A Reviewer','Under Review','Review in Process','Post Sampling') 			GROUP BY [ID] ) a  on a.[ID] = e.[ID] and a.[MAX_TOUCH] = e.[TOUCH_COUNT]  -- ================================================================================================= /* EXCEPTION RATIONALE TABLE FOR 1B REPORTS */ -- =================================================================================================  IF OBJECT_ID('tempdb..#temp_exception_table_b', 'U') IS NOT NULL DROP TABLE #temp_exception_table_b SELECT *  INTO #temp_exception_table_b FROM (SELECT DISTINCT 		'10_RR' as [EXCEPTION_TYPE_ID], 		CAST(timrec.[TRANSACTION_NUMBER] as varchar(50)) as EXCEPTION_ID, 		ct.[ORDER_ID], 		timrec.[TRANSACTION_NUMBER], 		ct.[DEALER_NAME_DECODE] as DEALER, 		ex.[REASON] as [1B_RATIONALE], 		MAX(CASE 				WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  			ELSE 0  			END) AS [CM_Reviewed], 		timrec.[VG_10] as [EXCEPTION_VALUE], 		CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE])) as [DATE], 		ct.[PRODUCT_TYPE], 		timrec.[SOURCE] as [DATA_SOURCE] 	FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_CASH_RR_TABLE timrec 	left join #max_reason_cm ex  	on CONCAT(timrec.[TRANSACTION_NUMBER],'_10_',timrec.[SOURCE]) = ex.[ID] 	left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'CASH' and [STATUS] in ('2C1', '2C2')) fsu 	on CONCAT(timrec.[TRANSACTION_NUMBER],'_10_',timrec.[SOURCE]) = fsu.[ID] 	left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, TIMELY_RECORDING_EXCEPTION_REASON, PRODUCT_TYPE, TRADE_DATE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.[TRANSACTION_NUMBER] = timrec.[TRANSACTION_NUMBER] AND timrec.[SOURCE] = 'CM' 	WHERE timrec.[VG_10] = 1 and ct.[TRADE_DATE] between @Start_Date and @End_Date 	GROUP BY ct.[ORDER_ID], 			 timrec.[TRANSACTION_NUMBER], 			 ct.[DEALER_NAME_DECODE], 			 timrec.[VG_10], 			 ex.[REASON], 			 CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE])), 			 ct.[PRODUCT_TYPE], 			 timrec.[SOURCE]   	UNION  	SELECT DISTINCT 		'10_MM' as [EXCEPTION_TYPE_ID], 		CAST(timrec.[TRANSACTION_NUMBER] as varchar(50)) as EXCEPTION_ID, 		CASE  			WHEN timrec.[SOURCE] = 'CM' THEN ct.[ORDER_ID] 			WHEN timrec.[SOURCE] = 'AL' THEN oc.[PM_ORD] 		ELSE NULL 		END AS ORDER_ID, 		timrec.[TRANSACTION_NUMBER], 		CASE  			WHEN timrec.[SOURCE] = 'CM' THEN ct.[DEALER_NAME_DECODE] 			WHEN timrec.[SOURCE] = 'AL' THEN t.[TRD_TRADER] 		ELSE NULL 		END AS DEALER, 		ex.[REASON] as [1B_RATIONALE], 		MAX(CASE 				WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  			ELSE 0  			END) AS [CM_Reviewed], 		timrec.[VG_10] as [EXCEPTION_VALUE], 		CASE 			WHEN timrec.[SOURCE] = 'CM' THEN CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE]))  			ELSE CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		END AS [DATE], 		CASE 			WHEN timrec.[SOURCE] = 'AL' THEN 'Cash Products' 		ELSE ct.[PRODUCT_TYPE] 		END AS PRODUCT_TYPE, 		timrec.[SOURCE] as [DATA_SOURCE] 	FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_CASH_MM_TABLE timrec 	left join #max_reason_cm ex  	on CONCAT(timrec.[TRANSACTION_NUMBER],'_10_',timrec.[SOURCE]) = ex.[ID] 	left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'CASH' and [STATUS] in ('2C1', '2C2')) fsu 	on CONCAT(timrec.[TRANSACTION_NUMBER],'_10_',timrec.[SOURCE]) = fsu.[ID] 	left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, TIMELY_RECORDING_EXCEPTION_REASON,PRODUCT_TYPE, TRADE_DATE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.[TRANSACTION_NUMBER] = timrec.[TRANSACTION_NUMBER] AND timrec.[SOURCE] = 'CM' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[MULTI_FUND_ID] = timrec.[TRANSACTION_NUMBER] AND timrec.[SOURCE] = 'AL' 	left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc 	on oc.[TRD_ORD] = t.[ORD_NUM] 	WHERE timrec.[VG_10] = 1 and COALESCE(ct.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date 	GROUP BY ct.[ORDER_ID], 			 oc.[PM_ORD], 			 timrec.[TRANSACTION_NUMBER], 			 t.[TRD_TRADER], 			 ct.[DEALER_NAME_DECODE], 			 timrec.[VG_10], 			 ex.[REASON], 			 CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE])), 			 CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])), 			 ct.[PRODUCT_TYPE], 			 timrec.[SOURCE]  	UNION  	SELECT DISTINCT 		'607_RR' as [EXCEPTION_TYPE_ID], 		CAST(bestex.[TRANSACTION_NUMBER] as varchar(50)) as EXCEPTION_ID, 		ct.[ORDER_ID], 		bestex.[TRANSACTION_NUMBER], 		ct.[DEALER_NAME_DECODE] as DEALER, 		ex.[REASON] as [1B_RATIONALE], 		MAX(CASE 				WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  			ELSE 0  			END) AS [CM_Reviewed], 		bestex.[VG_607_RR] as [EXCEPTION_VALUE], 		CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE])) as [DATE], 		ct.[PRODUCT_TYPE], 		bestex.[DATA_SOURCE] 	FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_RR_TABLE bestex 	left join #max_reason_cm ex  	on CONCAT(bestex.[TRANSACTION_NUMBER],'_607_',bestex.[DATA_SOURCE]) = ex.[ID] 	left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'CASH' and [STATUS] in ('2C1', '2C2')) fsu 	on CONCAT(bestex.[TRANSACTION_NUMBER],'_607_',bestex.[DATA_SOURCE]) = fsu.[ID] 	left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, BEST_EXECUTION_RR_EXCEPTION_REASON, PRODUCT_TYPE, TRADE_DATE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.[TRANSACTION_NUMBER] = bestex.[TRANSACTION_NUMBER] AND bestex.[DATA_SOURCE] = 'CM' 	WHERE bestex.[VG_607_RR] =1 and ct.[TRADE_DATE] between @Start_Date and @End_Date 	GROUP BY ct.[ORDER_ID], 			 bestex.[TRANSACTION_NUMBER], 			 ct.[DEALER_NAME_DECODE], 			 bestex.[VG_607_RR], 			 ex.[REASON], 			 CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE])), 			 ct.[PRODUCT_TYPE], 			 bestex.[DATA_SOURCE]  	UNION  	SELECT DISTINCT 		'607_MM_QE' as [EXCEPTION_TYPE_ID], 		CAST(bestex.[TRANSACTION_NUMBER] as varchar(50)) as EXCEPTION_ID, 		CASE  			WHEN bestex.[DATA_SOURCE] = 'CM' THEN ct.[ORDER_ID] 			WHEN bestex.[DATA_SOURCE] = 'AL' THEN oc.[PM_ORD] 		ELSE NULL 		END AS ORDER_ID, 		bestex.[TRANSACTION_NUMBER], 		CASE  			WHEN bestex.[DATA_SOURCE] = 'CM' THEN ct.[DEALER_NAME_DECODE] 			WHEN bestex.[DATA_SOURCE] = 'AL' THEN t.[TRD_TRADER] 		ELSE NULL 		END AS DEALER, 		ex.[REASON] as [1B_RATIONALE], 		MAX(CASE 				WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  			ELSE 0  			END) AS [CM_Reviewed], 		bestex.[B3Q_EXCEPTION] as [EXCEPTION_VALUE], 		CASE 			WHEN bestex.[DATA_SOURCE] = 'CM' THEN CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE]))  			ELSE CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		END AS [DATE], 		CASE 			WHEN bestex.[DATA_SOURCE] = 'AL' THEN 'Cash Products' 		ELSE ct.[PRODUCT_TYPE] 		END AS PRODUCT_TYPE, 		bestex.[DATA_SOURCE] 	FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE bestex 	left join #max_reason_cm ex  	on CONCAT(bestex.[TRANSACTION_NUMBER],'_607_',bestex.[DATA_SOURCE]) = ex.[ID] 	left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'CASH' and [STATUS] in ('2C1', '2C2')) fsu 	on CONCAT(bestex.[TRANSACTION_NUMBER],'_607_',bestex.[DATA_SOURCE]) = fsu.[ID] 	left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, PRODUCT_TYPE, TRADE_DATE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.[TRANSACTION_NUMBER] = bestex.[TRANSACTION_NUMBER] AND bestex.[DATA_SOURCE] = 'CM' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[MULTI_FUND_ID] = bestex.[TRANSACTION_NUMBER] AND bestex.[DATA_SOURCE] = 'AL' 	left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc 	on oc.[TRD_ORD] = t.[ORD_NUM] 	WHERE bestex.[B3Q_EXCEPTION] = 1 and COALESCE(ct.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date 	GROUP BY ct.[ORDER_ID], 			 oc.[PM_ORD], 			 bestex.[TRANSACTION_NUMBER], 			 t.[TRD_TRADER], 			 ct.[DEALER_NAME_DECODE], 			 bestex.[B3Q_EXCEPTION], 			 ex.[REASON], 			 CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE])), 			 CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])), 			 ct.[PRODUCT_TYPE], 			 bestex.[DATA_SOURCE]  	UNION  	SELECT DISTINCT 		'607_MM_NWQ' as [EXCEPTION_TYPE_ID], 		CAST(bestex.[TRANSACTION_NUMBER] as varchar(50)) as EXCEPTION_ID, 		CASE  			WHEN bestex.[DATA_SOURCE] = 'CM' THEN ct.[ORDER_ID] 			WHEN bestex.[DATA_SOURCE] = 'AL' THEN oc.[PM_ORD] 		ELSE NULL 		END AS ORDER_ID, 		bestex.[TRANSACTION_NUMBER], 		CASE  			WHEN bestex.[DATA_SOURCE] = 'CM' THEN ct.[DEALER_NAME_DECODE] 			WHEN bestex.[DATA_SOURCE] = 'AL' THEN t.[TRD_TRADER] 		ELSE NULL 		END AS DEALER, 		ex.[REASON] as [1B_RATIONALE], 		MAX(CASE 				WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  			ELSE 0  			END) AS [CM_Reviewed], 		bestex.[NWQ_EXCEPTION] as [EXCEPTION_VALUE], 		CASE 			WHEN bestex.[DATA_SOURCE] = 'CM' THEN CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE]))  			ELSE CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		END AS [DATE], 		CASE 			WHEN bestex.[DATA_SOURCE] = 'AL' THEN 'Cash Products' 		ELSE ct.[PRODUCT_TYPE] 		END AS PRODUCT_TYPE, 		bestex.[DATA_SOURCE] 	FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE bestex 	left join #max_reason_cm ex  	on CONCAT(bestex.[TRANSACTION_NUMBER],'_607_',bestex.[DATA_SOURCE]) = ex.[ID] 	left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'CASH' and [STATUS] in ('2C1', '2C2')) fsu 	on CONCAT(bestex.[TRANSACTION_NUMBER],'_607_',bestex.[DATA_SOURCE]) = fsu.[ID] 	left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, PRODUCT_TYPE, TRADE_DATE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.[TRANSACTION_NUMBER] = bestex.[TRANSACTION_NUMBER] AND bestex.[DATA_SOURCE] = 'CM' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[MULTI_FUND_ID] = bestex.[TRANSACTION_NUMBER] AND bestex.[DATA_SOURCE] = 'AL' 	left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc 	on oc.[TRD_ORD] = t.[ORD_NUM] 	WHERE bestex.[NWQ_EXCEPTION] = 1 and COALESCE(ct.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date 	GROUP BY ct.[ORDER_ID], 			 oc.[PM_ORD], 			 bestex.[TRANSACTION_NUMBER], 			 t.[TRD_TRADER], 			 ct.[DEALER_NAME_DECODE], 			 bestex.[NWQ_EXCEPTION], 			 ex.[REASON], 			 CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE])), 			 CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])), 			 ct.[PRODUCT_TYPE], 			 bestex.[DATA_SOURCE]   	--------------New Exception Report Instructor to Dealer------------------------------------------------------------------------------------ --SURVG-563  UNION  	SELECT DISTINCT 		'613_RR' as [EXCEPTION_TYPE_ID], 		CAST(instdeal.[TRANSACTION_NUMBER] as varchar(50)) as EXCEPTION_ID, 		ct.[ORDER_ID], 		instdeal.[TRANSACTION_NUMBER], 		ct.[DEALER_NAME_DECODE] as DEALER, 		ex.[REASON] as [1B_RATIONALE], 		MAX(CASE 				WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  			ELSE 0  			END) AS [CM_Reviewed], 		instdeal.[VG_613] as [EXCEPTION_VALUE], 		CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE])) as [DATE], 		ct.[PRODUCT_TYPE], 		instdeal.[SOURCE] as [DATA_SOURCE] 	FROM VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE instdeal 	left join #max_reason_cm ex  	on CONCAT(instdeal.[TRANSACTION_NUMBER],'_613_',instdeal.[SOURCE]) = ex.[ID] 	left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'CASH' and [STATUS] in ('2C1', '2C2')) fsu 	on CONCAT(instdeal.[TRANSACTION_NUMBER],'_613_',instdeal.[SOURCE]) = fsu.[ID] 	left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, PRODUCT_TYPE, TRADE_DATE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.[TRANSACTION_NUMBER] = instdeal.[TRANSACTION_NUMBER] AND instdeal.[SOURCE] = 'CM' 	WHERE instdeal.[VG_613] =1 and ct.[TRADE_DATE] between @Start_Date and @End_Date 	GROUP BY ct.[ORDER_ID], 			 instdeal.[TRANSACTION_NUMBER], 			 ct.[DEALER_NAME_DECODE], 			 instdeal.[VG_613], 			 ex.[REASON], 			 CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE])), 			 ct.[PRODUCT_TYPE], 			 instdeal.[SOURCE]   UNION  	SELECT DISTINCT 		'613_MM' as [EXCEPTION_TYPE_ID], 		CAST(instdeal.[TRANSACTION_NUMBER] as varchar(50)) as EXCEPTION_ID, 		CASE  			WHEN instdeal.[SOURCE] = 'CM' THEN ct.[ORDER_ID] 			WHEN instdeal.[SOURCE] = 'AL' THEN oc.[PM_ORD] 		ELSE NULL 		END AS ORDER_ID, 		instdeal.[TRANSACTION_NUMBER], 		CASE  			WHEN instdeal.[SOURCE] = 'CM' THEN ct.[DEALER_NAME_DECODE] 			WHEN instdeal.[SOURCE] = 'AL' THEN t.[TRD_TRADER] 		ELSE NULL 		END AS DEALER, 		ex.[REASON] as [1B_RATIONALE], 		MAX(CASE 				WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  			ELSE 0  			END) AS [CM_Reviewed], 		instdeal.[VG_613] as [EXCEPTION_VALUE], 		CASE 			WHEN instdeal.[SOURCE] = 'CM' THEN CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE]))  			ELSE CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		END AS [DATE], 		CASE 			WHEN instdeal.[SOURCE] = 'AL' THEN 'Cash Products' 		ELSE ct.[PRODUCT_TYPE] 		END AS PRODUCT_TYPE, 		instdeal.[SOURCE] as [DATA_SOURCE] 	FROM VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE instdeal 	left join #max_reason_cm ex  	on CONCAT(instdeal.[TRANSACTION_NUMBER],'_613_',instdeal.[SOURCE]) = ex.[ID] 	left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'CASH' and [STATUS] in ('2C1', '2C2')) fsu 	on CONCAT(instdeal.[TRANSACTION_NUMBER],'_613_',instdeal.[SOURCE]) = fsu.[ID] 	left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, PRODUCT_TYPE, TRADE_DATE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.[TRANSACTION_NUMBER] = instdeal.[TRANSACTION_NUMBER] AND instdeal.[SOURCE] = 'CM' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[MULTI_FUND_ID] = instdeal.[TRANSACTION_NUMBER] AND instdeal.[SOURCE] = 'AL' 	left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc 	on oc.[TRD_ORD] = t.[ORD_NUM] 	WHERE instdeal.[VG_613] =1 and COALESCE(ct.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date 	GROUP BY ct.[ORDER_ID], 			 oc.[PM_ORD], 			 instdeal.[TRANSACTION_NUMBER], 			 t.[TRD_TRADER], 			 ct.[DEALER_NAME_DECODE], 			 instdeal.[VG_613], 			 ex.[REASON], 			 CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE])), 			 CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])), 			 ct.[PRODUCT_TYPE], 			 instdeal.[SOURCE]  --End of SURVG-563--------------------------------------------------------------------------------------------- 	--UNION  	--SELECT DISTINCT 	--	'609' as [EXCEPTION_TYPE_ID], 	--	CAST(crr.[TRANSACTION_NUMBER] as varchar(50)) as EXCEPTION_ID, 	--	ct.[ORDER_ID], 	--	crr.[TRANSACTION_NUMBER], 	--	ct.[DEALER_NAME_DECODE] as DEALER, 	--	ex.[REASON] as [1B_RATIONALE], 	--	MAX(CASE 	--			WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  	--		ELSE 0  	--		END) AS [CM_Reviewed], 	--	crr.[VG_609_CRR] as [EXCEPTION_VALUE], 	--	CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE])) as [DATE], 	--	'Cash Products' as [PRODUCT_TYPE], 	--	crr.[DATA_SOURCE] 	--FROM VISTA_STAGING.dbo.VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE crr 	--left join #max_reason_cm ex  	--on CONCAT(crr.[TRANSACTION_NUMBER],'_609_',crr.[DATA_SOURCE]) = ex.[ID] 	--left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'CASH' and [STATUS] in ('2C1', '2C2')) fsu 	--on CONCAT(crr.[TRANSACTION_NUMBER],'_609_',crr.[DATA_SOURCE]) = fsu.[ID] 	--left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, PRODUCT_TYPE, TRADE_DATE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	--on ct.[TRANSACTION_NUMBER] = crr.[TRANSACTION_NUMBER] AND crr.[DATA_SOURCE] = 'CM' 	--WHERE crr.[VG_609_CRR] = 1 and ct.[TRADE_DATE] between @Start_Date and @End_Date 	--GROUP BY ct.[ORDER_ID], 	--		 crr.[TRANSACTION_NUMBER], 	--		 ct.[DEALER_NAME_DECODE], 	--		 crr.[VG_609_CRR], 	--		 ex.[REASON], 	--		 CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE])), 	--		 crr.[DATA_SOURCE]  	UNION  	SELECT DISTINCT 		'608' as [EXCEPTION_TYPE_ID], 		CAST(tkb.[TRANSACTION_NUMBER] as varchar(50)) as EXCEPTION_ID, 		ct.[ORDER_ID], 		tkb.[TRANSACTION_NUMBER], 		ct.[DEALER_NAME_DECODE] as DEALER, 		ex.[REASON] as [1B_RATIONALE], 		MAX(CASE 				WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  			ELSE 0  			END) AS [CM_Reviewed], 		tkb.[VG_608] as [EXCEPTION_VALUE], 		CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE])) as [DATE], 		'Cash Products' as [PRODUCT_TYPE], 		tkb.[DATA_SOURCE] 	FROM VISTA_STAGING.dbo.VG_608_TA_KNOCKBACK_CASH_TABLE tkb 	left join #max_reason_cm ex  	on CONCAT(tkb.[TRANSACTION_NUMBER],'_608_',tkb.[DATA_SOURCE]) = ex.[ID] 	left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'CASH' and [STATUS] in ('2C1', '2C2')) fsu 	on CONCAT(tkb.[TRANSACTION_NUMBER],'_608_',tkb.[DATA_SOURCE]) = fsu.[ID] 	left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, TA_KNOCKBACK_EXCEPTION_REASON, PRODUCT_TYPE, TRADE_DATE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.[TRANSACTION_NUMBER] = tkb.[TRANSACTION_NUMBER]  	WHERE tkb.[VG_608] = 1 and ct.[TRADE_DATE] between @Start_Date and @End_Date 	GROUP BY ct.[ORDER_ID], 			 tkb.[TRANSACTION_NUMBER], 			 ct.[DEALER_NAME_DECODE], 			 ex.[REASON], 			 tkb.[VG_608], 			 CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE])), 			 tkb.[DATA_SOURCE]  	UNION  	SELECT DISTINCT 		'610' as [EXCEPTION_TYPE_ID], 		CAST(tbills.[MULTI_FUND_ID] as varchar(50)) as EXCEPTION_ID, 		oc.[PM_ORD] as ORDER_ID, 		tbills.[MULTI_FUND_ID] as TRANSACTION_NUMBER, 		t.[TRD_TRADER] as DEALER, 		ex.[REASON] as [1B_RATIONALE], 		MAX(CASE 				WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  			ELSE 0  			END) AS [CM_Reviewed], 		tbills.[VG_610] as [EXCEPTION_VALUE], 		CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) as [DATE], 		'Cash Products' as [PRODUCT_TYPE], --No Aladdin equivalent in mapping table 		tbills.[DATA_SOURCE] 	FROM VISTA_STAGING.dbo.VG_610_TBILLS_CP_CD_CASH_TABLE tbills 	left join #max_reason_cm ex  	on CONCAT(tbills.[MULTI_FUND_ID],'_610_',tbills.[DATA_SOURCE]) = ex.[ID] 	left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'CASH' and [STATUS] in ('2C1', '2C2')) fsu 	on CONCAT(tbills.[MULTI_FUND_ID],'_610_',tbills.[DATA_SOURCE]) = fsu.[ID] 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[MULTI_FUND_ID] = tbills.[MULTI_FUND_ID]  	left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc 	on t.[ORD_NUM] = oc.[TRD_ORD] 	WHERE tbills.[VG_610] = 1 and t.[TRD_TRADE_DATE] between @Start_Date and @End_Date 	GROUP BY oc.[PM_ORD], 			 tbills.[MULTI_FUND_ID], 			 t.[TRD_TRADER], 			 ex.[REASON], 			 tbills.[VG_610], 			 CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])), 			 tbills.[DATA_SOURCE]  	UNION  	SELECT DISTINCT 		'604_RR' as [EXCEPTION_TYPE_ID], 		CAST(coh.[ORDER_ID] as varchar(50)) as EXCEPTION_ID, 		coh.[ORDER_ID], 		ct.[TRANSACTION_NUMBER], 		ct.[DEALER_NAME_DECODE] as DEALER, 		ex.[REASON] as [1B_RATIONALE], 		MAX(CASE 				WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  			ELSE 0  			END) AS [CM_Reviewed], 		coh.[VG_604] as [EXCEPTION_VALUE], 		CONCAT(YEAR(co.[TRADE_DATE]), ' - ', MONTH(co.[TRADE_DATE])) as [DATE], 		COALESCE(ct.[PRODUCT_TYPE],co.[PRODUCT_TYPE]) as [PRODUCT_TYPE], 		coh.[DATA_SOURCE] 	FROM VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE coh 	left join #max_reason_cm ex  	on CONCAT(coh.[ORDER_ID],'_604_',coh.[DATA_SOURCE]) = ex.[ID] 	left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'CASH' and [STATUS] in ('2C1', '2C2')) fsu 	on CONCAT(coh.[ORDER_ID],'_604_',coh.[DATA_SOURCE]) = fsu.[ID] 	left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, PRODUCT_TYPE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.[ORDER_ID] = coh.[ORDER_ID]  	left join (SELECT DISTINCT ORDER_ID, SEQUENCE_EXCEPTION_REASON, TRADE_DATE, PRODUCT_TYPE FROM VISTA_REPORTING.dbo.CASH_ORDERS) co 	on co.[ORDER_ID] = coh.[ORDER_ID] 	WHERE coh.[VG_604] = 1 and co.[TRADE_DATE] between @Start_Date and @End_Date 	GROUP BY coh.[ORDER_ID], 			 ct.[TRANSACTION_NUMBER], 			 ct.[DEALER_NAME_DECODE], 			 ex.[REASON], 			 coh.[VG_604], 			 CONCAT(YEAR(co.[TRADE_DATE]), ' - ', MONTH(co.[TRADE_DATE])), 			 ct.[PRODUCT_TYPE], 			 co.[PRODUCT_TYPE], 			 coh.[DATA_SOURCE]  	UNION  	SELECT DISTINCT 		'604_MM' as [EXCEPTION_TYPE_ID], 		CAST(coh.[ORDER_ID] as varchar(50)) as EXCEPTION_ID, 		coh.[ORDER_ID], 		CASE  			WHEN coh.[DATA_SOURCE] = 'CM' THEN ct.[TRANSACTION_NUMBER] 			WHEN coh.[DATA_SOURCE] = 'AL' THEN t.[MULTI_FUND_ID] 		ELSE NULL 		END AS [TRANSACTION_NUMBER], 		CASE  			WHEN coh.[DATA_SOURCE] = 'CM' THEN ct.[DEALER_NAME_DECODE] 			WHEN coh.[DATA_SOURCE] = 'AL' THEN t.[TRD_TRADER] 		ELSE NULL 		END AS DEALER, 		ex.[REASON] as [1B_RATIONALE], 		MAX(CASE 				WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  			ELSE 0  			END) AS [CM_Reviewed], 		coh.[VG_604] as [EXCEPTION_VALUE], 		CASE 			WHEN coh.[DATA_SOURCE] = 'CM' THEN CONCAT(YEAR(co.[TRADE_DATE]), ' - ', MONTH(co.[TRADE_DATE]))  			ELSE CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])) 		END AS [DATE], 		CASE 			WHEN coh.[DATA_SOURCE] = 'AL' THEN 'Cash Products' 		ELSE COALESCE(ct.[PRODUCT_TYPE],co.[PRODUCT_TYPE]) 		END AS PRODUCT_TYPE, 		coh.[DATA_SOURCE] 	FROM VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE coh 	left join #max_reason_cm ex  	on CONCAT(coh.[ORDER_ID],'_604_',coh.[DATA_SOURCE]) = ex.[ID] 	left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'CASH' and [STATUS] in ('2C1', '2C2')) fsu 	on CONCAT(coh.[ORDER_ID],'_604_',coh.[DATA_SOURCE]) = fsu.[ID] 	left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, PRODUCT_TYPE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.[ORDER_ID] = coh.[ORDER_ID] and coh.[DATA_SOURCE] = 'CM' 	left join (SELECT DISTINCT ORDER_ID, SEQUENCE_EXCEPTION_REASON, TRADE_DATE, PRODUCT_TYPE FROM VISTA_REPORTING.dbo.CASH_ORDERS) co 	on coh.[ORDER_ID] = co.[ORDER_ID] and coh.[DATA_SOURCE] = 'CM' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[ORD_NUM] = coh.[ORDER_ID] and coh.[DATA_SOURCE] = 'AL' 	left join (SELECT DISTINCT ORD_NUM, OPEN_DATE FROM VISTA_REPORTING.dbo.PM_ORDERS) pm 	on coh.[ORDER_ID] = pm.[ORD_NUM] and coh.[DATA_SOURCE] = 'AL' 	WHERE coh.[VG_604] = 1 and COALESCE(co.[TRADE_DATE],pm.[OPEN_DATE]) between @Start_Date and @End_Date 	GROUP BY coh.[ORDER_ID], 			 ct.[TRANSACTION_NUMBER], 			 t.[MULTI_FUND_ID], 			 ct.[DEALER_NAME_DECODE], 			 t.[TRD_TRADER], 			 ex.[REASON], 			 coh.[VG_604], 			 CONCAT(YEAR(co.[TRADE_DATE]), ' - ', MONTH(co.[TRADE_DATE])), 			 CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])), 			 ct.[PRODUCT_TYPE], 			 co.[PRODUCT_TYPE], 			 coh.[DATA_SOURCE]  	UNION  	SELECT DISTINCT 		'9_RR' as [EXCEPTION_TYPE_ID], 		CAST(timex.[ORDER_ID] as varchar(50)) as EXCEPTION_ID, 		timex.[ORDER_ID], 		ct.[TRANSACTION_NUMBER], 		ct.[DEALER_NAME_DECODE] as DEALER, 		ex.[REASON] as [1B_RATIONALE], 		MAX(CASE 				WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  			ELSE 0  			END) AS [CM_Reviewed], 		timex.[VG_09] as [EXCEPTION_VALUE], 		CONCAT(YEAR(co.[TRADE_DATE]), ' - ', MONTH(co.[TRADE_DATE])) as [DATE], 		COALESCE(ct.[PRODUCT_TYPE],co.[PRODUCT_TYPE]) as [PRODUCT_TYPE], 		timex.[SOURCE] as [DATA_SOURCE] 	FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_RR_TABLE timex 	left join #max_reason_cm ex  	on CONCAT(timex.[ORDER_ID],'_9_',timex.[SOURCE]) = ex.[ID] 	left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'CASH' and [STATUS] in ('2C1', '2C2')) fsu 	on CONCAT(timex.[ORDER_ID],'_9_',timex.[SOURCE]) = fsu.[ID] 	left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, PRODUCT_TYPE, TIMELY_EXECUTION_EXCEPTION_REASON FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.[ORDER_ID] = timex.[ORDER_ID]  	left join (SELECT DISTINCT ORDER_ID, TIMELY_ACKNOWLEDGEMENT_EXCEPTION_REASON, TRADE_DATE, PRODUCT_TYPE FROM VISTA_REPORTING.dbo.CASH_ORDERS) co 	on co.[ORDER_ID] = timex.[ORDER_ID] 	WHERE timex.[VG_09] = 1 and co.[TRADE_DATE] between @Start_Date and @End_Date 	GROUP BY timex.[ORDER_ID], 			 ct.[TRANSACTION_NUMBER], 			 ct.[DEALER_NAME_DECODE], 			 ex.[REASON], 			 timex.[VG_09], 			 CONCAT(YEAR(co.[TRADE_DATE]), ' - ', MONTH(co.[TRADE_DATE])), 			 ct.[PRODUCT_TYPE], 			 co.[PRODUCT_TYPE], 			 timex.[SOURCE]  	UNION  	SELECT DISTINCT 		'9_MM' as [EXCEPTION_TYPE_ID], 		CAST(timex.[ORDER_ID] as varchar(50)) as EXCEPTION_ID, 		timex.[ORDER_ID], 		CASE  			WHEN timex.[SOURCE] = 'CM' THEN ct.[TRANSACTION_NUMBER] 			WHEN timex.[SOURCE] = 'AL' THEN t.[MULTI_FUND_ID] 		ELSE NULL 		END AS [TRANSACTION_NUMBER], 		CASE  			WHEN timex.[SOURCE] = 'CM' THEN ct.[DEALER_NAME_DECODE] 			WHEN timex.[SOURCE] = 'AL' THEN t.[TRD_TRADER] 		ELSE NULL 		END AS DEALER, 		ex.[REASON] as [1B_RATIONALE], 		MAX(CASE 				WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  			ELSE 0  			END) AS [CM_Reviewed], 		timex.[VG_09] as [EXCEPTION_VALUE], 		CASE 			WHEN timex.[SOURCE] = 'CM' THEN CONCAT(YEAR(co.[TRADE_DATE]), ' - ', MONTH(co.[TRADE_DATE]))  			ELSE CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])) 		END AS [DATE], 		CASE 			WHEN timex.[SOURCE] = 'AL' THEN 'Cash Products' 		ELSE COALESCE(ct.[PRODUCT_TYPE],co.[PRODUCT_TYPE]) 		END AS PRODUCT_TYPE, 		timex.[SOURCE] as [DATA_SOURCE] 	FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_MM_TABLE timex 	left join #max_reason_cm ex  	on CONCAT(timex.[ORDER_ID],'_9_',timex.[SOURCE]) = ex.[ID] 	left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'CASH' and [STATUS] in ('2C1', '2C2')) fsu 	on CONCAT(timex.[ORDER_ID],'_9_',timex.[SOURCE]) = fsu.[ID] 	left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, TIMELY_EXECUTION_EXCEPTION_REASON, PRODUCT_TYPE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.[ORDER_ID] = timex.[ORDER_ID] and timex.[SOURCE] = 'CM' 	left join (SELECT DISTINCT ORDER_ID, TIMELY_ACKNOWLEDGEMENT_EXCEPTION_REASON, TRADE_DATE, PRODUCT_TYPE FROM VISTA_REPORTING.dbo.CASH_ORDERS) co 	on timex.[ORDER_ID] = co.[ORDER_ID] and timex.[SOURCE] = 'CM' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[ORD_NUM] = timex.[ORDER_ID] and timex.[SOURCE] = 'AL' 	left join (SELECT DISTINCT ORD_NUM, OPEN_DATE FROM VISTA_REPORTING.dbo.PM_ORDERS) pm 	on timex.[ORDER_ID] = pm.[ORD_NUM] and timex.[SOURCE] = 'AL' 	WHERE timex.[VG_09] = 1 and COALESCE(co.[TRADE_DATE],pm.[OPEN_DATE]) between @Start_Date and @End_Date 	GROUP BY timex.[ORDER_ID], 			 ct.[TRANSACTION_NUMBER], 			 t.[MULTI_FUND_ID], 			 ct.[DEALER_NAME_DECODE], 			 t.[TRD_TRADER], 			 ex.[REASON], 			 timex.[VG_09], 			 CONCAT(YEAR(co.[TRADE_DATE]), ' - ', MONTH(co.[TRADE_DATE])), 			 CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])), 			 ct.[PRODUCT_TYPE], 			 co.[PRODUCT_TYPE], 			 timex.[SOURCE]  	UNION  	SELECT DISTINCT 		'602' as [EXCEPTION_TYPE_ID], 		CAST(eod.[ORDER_ID] as varchar(50)) as EXCEPTION_ID, 		eod.[ORDER_ID], 		CASE  			WHEN eod.[DATA_SOURCE] = 'CM' THEN ct.[TRANSACTION_NUMBER] 			WHEN eod.[DATA_SOURCE] = 'AL' THEN t.[MULTI_FUND_ID] 		ELSE NULL 		END AS [TRANSACTION_NUMBER], 		CASE  			WHEN eod.[DATA_SOURCE] = 'CM' THEN ct.[DEALER_NAME_DECODE] 			WHEN eod.[DATA_SOURCE] = 'AL' THEN t.[TRD_TRADER] 		ELSE NULL 		END AS DEALER, 		ex.[REASON] as [1B_RATIONALE], 		MAX(CASE 				WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  			ELSE 0  			END) AS [CM_Reviewed], 		eod.[VG_602] as [EXCEPTION_VALUE], 		CASE 			WHEN eod.[DATA_SOURCE] = 'CM' THEN CONCAT(YEAR(co.[TRADE_DATE]), ' - ', MONTH(co.[TRADE_DATE]))  			ELSE CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])) 		END AS [DATE], 		CASE 			WHEN eod.[DATA_SOURCE] = 'AL' THEN 'Cash Products' 		ELSE COALESCE(ct.[PRODUCT_TYPE],co.[PRODUCT_TYPE]) 		END AS PRODUCT_TYPE, 		eod.[DATA_SOURCE] 	FROM VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_CASH_TABLE eod 	left join #max_reason_cm ex  	on CONCAT(eod.[ORDER_ID],'_602_',eod.[DATA_SOURCE]) = ex.[ID] 	left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'CASH' and [STATUS] in ('2C1', '2C2')) fsu 	on CONCAT(eod.[ORDER_ID],'_602_',eod.[DATA_SOURCE]) = fsu.[ID] 	left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, PRODUCT_TYPE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.[ORDER_ID] = eod.[ORDER_ID] and eod.[DATA_SOURCE] = 'CM'  	left join (SELECT DISTINCT ORDER_ID, HOLDOVER_REASON, TRADE_DATE, PRODUCT_TYPE FROM VISTA_REPORTING.dbo.CASH_ORDERS) co 	on co.[ORDER_ID] = eod.[ORDER_ID] and eod.[DATA_SOURCE] = 'CM' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[ORD_NUM] = eod.[ORDER_ID] and eod.[DATA_SOURCE] = 'AL' 	left join (SELECT DISTINCT ORD_NUM, OPEN_DATE FROM VISTA_REPORTING.dbo.PM_ORDERS) pm 	on eod.[ORDER_ID] = pm.[ORD_NUM] and eod.[DATA_SOURCE] = 'AL' 	WHERE eod.[VG_602] = 1 and COALESCE(co.[TRADE_DATE],pm.[OPEN_DATE]) between @Start_Date and @End_Date 	GROUP BY eod.[ORDER_ID], 			 ct.[TRANSACTION_NUMBER], 			 t.[MULTI_FUND_ID], 			 ct.[DEALER_NAME_DECODE], 			 t.[TRD_TRADER], 			 ex.[REASON], 			 eod.[VG_602], 			 CONCAT(YEAR(co.[TRADE_DATE]), ' - ', MONTH(co.[TRADE_DATE])), 			 CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])), 			 ct.[PRODUCT_TYPE], 			 co.[PRODUCT_TYPE], 			 eod.[DATA_SOURCE]  	UNION  	SELECT DISTINCT 		'601' as [EXCEPTION_TYPE_ID], 		CONCAT(ISNULL(ooh.[ORDER_ID],0),'_',ISNULL(ooh.[TRANSACTION_NUMBER],0)) as EXCEPTION_ID, 		ooh.[ORDER_ID], 		ooh.[TRANSACTION_NUMBER], 		CASE  			WHEN ooh.[SOURCE] = 'CM' THEN ct.[DEALER_NAME_DECODE] 			WHEN ooh.[SOURCE] = 'AL' THEN t.[TRD_TRADER] 		ELSE NULL 		END AS DEALER, 		ex.[REASON] as [1B_RATIONALE], 		MAX(CASE 				WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  			ELSE 0  			END) AS [CM_Reviewed], 		ooh.[VG_601] as [EXCEPTION_VALUE], 		CASE 			WHEN ooh.[SOURCE] = 'CM' and ooh.[ORDER_ID] is not null THEN CONCAT(YEAR(co.[TRADE_DATE]), ' - ', MONTH(co.[TRADE_DATE]))  			WHEN ooh.[SOURCE] = 'CM' and ooh.[ORDER_ID] is null		THEN CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE]))  			WHEN ooh.[SOURCE] = 'AL' and ooh.[ORDER_ID] is not null THEN CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])) 			WHEN ooh.[SOURCE] = 'AL' and ooh.[ORDER_ID] is null		THEN CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		END AS [DATE], 		CASE 			WHEN ooh.[SOURCE] = 'AL' THEN 'Cash Products' 		ELSE COALESCE(ct.[PRODUCT_TYPE],co.[PRODUCT_TYPE]) 		END AS PRODUCT_TYPE, 		ooh.[SOURCE] as [DATA_SOURCE] 	FROM VISTA_STAGING.dbo.VG_601_OUT_OF_HOURS_CASH_TABLE ooh 	left join #max_reason_cm ex  	on CONCAT(ISNULL(ooh.[ORDER_ID],0),'_',ISNULL(ooh.[TRANSACTION_NUMBER],0), '_601_',ooh.[SOURCE]) = ex.[ID] 	left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'CASH' and [STATUS] in ('2C1', '2C2')) fsu 	on CONCAT(ISNULL(ooh.[ORDER_ID],0),'_',ISNULL(ooh.[TRANSACTION_NUMBER],0), '_601_',ooh.[SOURCE]) = fsu.[ID] 	left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, PRODUCT_TYPE, TRADE_DATE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.[TRANSACTION_NUMBER] = ooh.[TRANSACTION_NUMBER] and ooh.[TRANSACTION_NUMBER] is not null and ooh.[SOURCE] = 'CM' 	left join (SELECT DISTINCT ORDER_ID, TRADE_DATE, PRODUCT_TYPE FROM VISTA_REPORTING.dbo.CASH_ORDERS) co 	on ooh.[ORDER_ID] = co.[ORDER_ID] and ooh.[ORDER_ID] is not null and ooh.[SOURCE] = 'CM' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[ORD_NUM] = ooh.[ORDER_ID] and ooh.[SOURCE] = 'AL' 	left join (SELECT DISTINCT ORD_NUM, OPEN_DATE FROM VISTA_REPORTING.dbo.PM_ORDERS) pm 	on ooh.[ORDER_ID] = pm.[ORD_NUM] and ooh.[SOURCE] = 'AL' 	WHERE ooh.[VG_601] = 1 and COALESCE(co.[TRADE_DATE],pm.[OPEN_DATE],ct.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date 	GROUP BY ooh.[ORDER_ID], 			 ooh.[TRANSACTION_NUMBER], 			 ct.[DEALER_NAME_DECODE], 			 t.[TRD_TRADER], 			 ex.[REASON], 			 ooh.[VG_601], 			 CONCAT(YEAR(co.[TRADE_DATE]), ' - ', MONTH(co.[TRADE_DATE])), 			 CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])), 			 CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE])), 			 CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])), 			 ct.[PRODUCT_TYPE], 			 co.[PRODUCT_TYPE], 			 ooh.[SOURCE] 	--Last 3 report commented out due to request from Macgregor 28/05/2020 	--UNION  	--SELECT DISTINCT 	--	'603' as [EXCEPTION_TYPE_ID], 	--	CAST(lt.[ORDER_ID] as varchar(50)) as EXCEPTION_ID, 	--	lt.[ORDER_ID], 	--	CASE  	--		WHEN lt.[SOURCE] = 'CM' THEN ct.[TRANSACTION_NUMBER] 	--		WHEN lt.[SOURCE] = 'AL' THEN t.[MULTI_FUND_ID] 	--	ELSE NULL 	--	END AS [TRANSACTION_NUMBER], 	--	CASE  	--		WHEN lt.[SOURCE] = 'CM' THEN ct.[DEALER_NAME_DECODE] 	--		WHEN lt.[SOURCE] = 'AL' THEN t.[TRD_TRADER] 	--	ELSE NULL 	--	END AS DEALER, 	--	ex.[REASON] as [1B_RATIONALE], 	--	MAX(CASE 	--			WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  	--		ELSE 0  	--		END) AS [CM_Reviewed], 	--	lt.[EXCEPTION_FLAG] as [EXCEPTION_VALUE], 	--	CASE 	--		WHEN lt.[SOURCE] = 'CM' THEN CONCAT(YEAR(co.[TRADE_DATE]), ' - ', MONTH(co.[TRADE_DATE]))  	--		ELSE CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])) 	--	END AS [DATE], 	--	CASE 	--		WHEN lt.[SOURCE] = 'AL' THEN 'Cash Products' 	--	ELSE COALESCE(ct.[PRODUCT_TYPE],co.[PRODUCT_TYPE]) 	--	END AS PRODUCT_TYPE, 	--	lt.[SOURCE] as [DATA_SOURCE] 	--FROM VISTA_STAGING.dbo.VG_603_LARGE_TRADES_CASH_TABLE lt 	--left join #max_reason_cm ex  	--on CONCAT(lt.[ORDER_ID],'_603_',lt.[SOURCE]) = ex.[ID] 	--left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'CASH' and [STATUS] in ('2C1', '2C2')) fsu 	--on CONCAT(lt.[ORDER_ID],'_603_',lt.[SOURCE]) = fsu.[ID] 	--left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, PRODUCT_TYPE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	--on ct.[ORDER_ID] = lt.[ORDER_ID] and lt.[SOURCE] = 'CM'  	--left join (SELECT DISTINCT ORDER_ID, TRADE_DATE, PRODUCT_TYPE FROM VISTA_REPORTING.dbo.CASH_ORDERS) co 	--on co.[ORDER_ID] = lt.[ORDER_ID] and lt.[SOURCE] = 'CM' 	--left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES) t  	--on t.[ORD_NUM] = lt.[ORDER_ID] and lt.[SOURCE] = 'AL' 	--left join (SELECT DISTINCT ORD_NUM, OPEN_DATE FROM VISTA_REPORTING.dbo.PM_ORDERS) pm 	--on lt.[ORDER_ID] = pm.[ORD_NUM] and lt.[SOURCE] = 'AL' 	--WHERE lt.[EXCEPTION_FLAG] = 1 and COALESCE(co.[TRADE_DATE],pm.[OPEN_DATE]) between @Start_Date and @End_Date 	--GROUP BY lt.[ORDER_ID], 	--		 ct.[TRANSACTION_NUMBER], 	--		 t.[MULTI_FUND_ID], 	--		 ct.[DEALER_NAME_DECODE], 	--		 t.[TRD_TRADER], 	--		 ex.[REASON], 	--		 lt.[EXCEPTION_FLAG], 	--		 CONCAT(YEAR(co.[TRADE_DATE]), ' - ', MONTH(co.[TRADE_DATE])), 	--		 CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])), 	--		 lt.[SOURCE], 	--		 ct.[PRODUCT_TYPE], 	--		 co.[PRODUCT_TYPE]  	--UNION  	--SELECT DISTINCT 	--	'16' as [EXCEPTION_TYPE_ID], 	--	CAST(gh.[MULTI_FUND_ID] as varchar(50)) as EXCEPTION_ID, 	--	gh.[ORD_NUM], 	--	gh.[MULTI_FUND_ID] as [TRANSACTION_NUMBER], 	--	CASE  	--		WHEN gh.[DATA_SOURCE] = 'CM' THEN ct.[DEALER_NAME_DECODE] 	--		WHEN gh.[DATA_SOURCE] = 'AL' THEN t.[TRD_TRADER] 	--	ELSE NULL 	--	END AS DEALER, 	--	ex.[REASON] as [1B_RATIONALE], 	--	MAX(CASE 	--			WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  	--		ELSE 0  	--		END) AS [CM_Reviewed], 	--	gh.[VG_16] as [EXCEPTION_VALUE], 	--	CASE 	--		WHEN gh.[DATA_SOURCE] = 'CM' THEN CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE]))  	--		ELSE CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 	--	END AS [DATE], 	--	CASE 	--		WHEN gh.[DATA_SOURCE] = 'AL' THEN 'Cash Products' 	--	ELSE ct.PRODUCT_TYPE 	--	END AS PRODUCT_TYPE, 	--	gh.[DATA_SOURCE] as [DATA_SOURCE] 	--FROM VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE gh 	--left join #max_reason_cm ex  	--on CONCAT(gh.[MULTI_FUND_ID],'_16_',gh.[DATA_SOURCE]) = ex.[ID] 	--left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'CASH' and [STATUS] in ('2C1', '2C2')) fsu 	--on CONCAT(gh.[MULTI_FUND_ID],'_16_',gh.[DATA_SOURCE]) = fsu.[ID] 	--left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, PRODUCT_TYPE, TRADE_DATE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	--on ct.[TRANSACTION_NUMBER] = gh.[MULTI_FUND_ID] AND gh.[DATA_SOURCE] = 'CM' 	--left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES) t  	--on t.[MULTI_FUND_ID] = gh.[MULTI_FUND_ID] AND gh.[DATA_SOURCE] = 'AL' 	--WHERE gh.[VG_16] = 1 and COALESCE(ct.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date 	--GROUP BY ct.[ORDER_ID], 	--		 gh.[ORD_NUM], 	--		 gh.[MULTI_FUND_ID], 	--		 t.[TRD_TRADER], 	--		 ct.[DEALER_NAME_DECODE], 	--		 gh.[VG_16], 	--		 ex.[REASON], 	--		 CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE])), 	--		 CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])), 	--		 ct.[PRODUCT_TYPE], 	--		 gh.[DATA_SOURCE]  	--UNION  	--SELECT DISTINCT 	--	'17' as [EXCEPTION_TYPE_ID], 	--	CAST(cpt.[ORD_NUM] as varchar(50)) as EXCEPTION_ID, 	--	cpt.[ORD_NUM], 	--	CASE  	--		WHEN cpt.[DATA_SOURCE] = 'CM' THEN ct.[TRANSACTION_NUMBER] 	--		WHEN cpt.[DATA_SOURCE] = 'AL' THEN t.[MULTI_FUND_ID] 	--	ELSE NULL 	--	END AS [TRANSACTION_NUMBER], 	--	CASE  	--		WHEN cpt.[DATA_SOURCE] = 'CM' THEN ct.[DEALER_NAME_DECODE] 	--		WHEN cpt.[DATA_SOURCE] = 'AL' THEN t.[TRD_TRADER] 	--	ELSE NULL 	--	END AS DEALER, 	--	ex.[REASON] as [1B_RATIONALE], 	--	MAX(CASE 	--			WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  	--		ELSE 0  	--		END) AS [CM_Reviewed], 	--	cpt.[VG_17] as [EXCEPTION_VALUE], 	--	CASE 	--		WHEN cpt.[DATA_SOURCE] = 'CM' THEN CONCAT(YEAR(co.[TRADE_DATE]), ' - ', MONTH(co.[TRADE_DATE]))  	--		ELSE CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])) 	--	END AS [DATE], 	--	CASE 	--		WHEN cpt.[DATA_SOURCE] = 'AL' THEN 'Cash Products' 	--	ELSE COALESCE(ct.[PRODUCT_TYPE],co.[PRODUCT_TYPE]) 	--	END AS PRODUCT_TYPE, 	--	cpt.[DATA_SOURCE] as [DATA_SOURCE] 	--FROM VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE cpt 	--left join #max_reason_cm ex  	--on CONCAT(cpt.[ORD_NUM],'_17_',cpt.[DATA_SOURCE]) = ex.[ID] 	--left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'CASH' and [STATUS] in ('2C1', '2C2')) fsu 	--on CONCAT(cpt.[ORD_NUM],'_17_',cpt.[DATA_SOURCE]) = fsu.[ID] 	--left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME_DECODE, PRODUCT_TYPE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	--on ct.[ORDER_ID] = cpt.[ORD_NUM] and cpt.[DATA_SOURCE] = 'CM'  	--left join (SELECT DISTINCT ORDER_ID, TRADE_DATE, PRODUCT_TYPE FROM VISTA_REPORTING.dbo.CASH_ORDERS) co 	--on co.[ORDER_ID] = cpt.[ORD_NUM] and cpt.[DATA_SOURCE] = 'CM' 	--left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES) t  	--on t.[ORD_NUM] = cpt.[ORD_NUM] and cpt.[DATA_SOURCE] = 'AL' 	--left join (SELECT DISTINCT ORD_NUM, OPEN_DATE FROM VISTA_REPORTING.dbo.PM_ORDERS) pm 	--on cpt.[ORD_NUM] = pm.[ORD_NUM] and cpt.[DATA_SOURCE] = 'AL' 	--WHERE cpt.[VG_17] = 1 and COALESCE(co.[TRADE_DATE],pm.[OPEN_DATE]) between @Start_Date and @End_Date 	--GROUP BY cpt.[ORD_NUM], 	--		 ct.[TRANSACTION_NUMBER], 	--		 t.[MULTI_FUND_ID], 	--		 ct.[DEALER_NAME_DECODE], 	--		 t.[TRD_TRADER], 	--		 ex.[REASON], 	--		 cpt.[VG_17], 	--		 CONCAT(YEAR(co.[TRADE_DATE]), ' - ', MONTH(co.[TRADE_DATE])), 	--		 CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])), 	--		 cpt.[DATA_SOURCE], 	--		 ct.[PRODUCT_TYPE], 	--		 co.[PRODUCT_TYPE]   	UNION  	SELECT DISTINCT 		'611_RR' as [EXCEPTION_TYPE_ID], 		CAST(oar.[ORDER_ID] as varchar(50)) as EXCEPTION_ID, 		oar.[ORDER_ID], 		CASE  			WHEN oar.DATA_SOURCE = 'CM' THEN ct.[TRANSACTION_NUMBER] 			WHEN oar.DATA_SOURCE = 'AL' THEN t.[MULTI_FUND_ID] 		ELSE NULL 		END AS [TRANSACTION_NUMBER], 		CASE  			WHEN oar.DATA_SOURCE = 'CM' THEN ct.[DEALER_NAME_DECODE] 			WHEN oar.DATA_SOURCE = 'AL' THEN t.[TRD_TRADER] 		ELSE NULL 		END AS DEALER, 		ex.[REASON] as [1B_RATIONALE], 		MAX(CASE 				WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  			ELSE 0  			END) AS [CM_Reviewed], 		oar.[VG_611] as [EXCEPTION_VALUE], 		CASE 			WHEN oar.DATA_SOURCE = 'CM' and oar.[ORDER_ID] is not null THEN CONCAT(YEAR(co.[TRADE_DATE]), ' - ', MONTH(co.[TRADE_DATE]))  			WHEN oar.DATA_SOURCE = 'CM' and oar.[ORDER_ID] is null		THEN CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE]))  			WHEN oar.DATA_SOURCE = 'AL' and oar.[ORDER_ID] is not null THEN CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])) 			WHEN oar.DATA_SOURCE = 'AL' and oar.[ORDER_ID] is null		THEN CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		END AS [DATE], 		CASE 			WHEN oar.DATA_SOURCE = 'AL' THEN 'Cash Products' 		ELSE COALESCE(ct.[PRODUCT_TYPE],co.[PRODUCT_TYPE]) 		END AS PRODUCT_TYPE, 		oar.DATA_SOURCE 	FROM VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_RR_TABLE oar 	left join #max_reason_cm ex  	on CONCAT(ISNULL(oar.[ORDER_ID],0),'_611_',oar.DATA_SOURCE) = ex.[ID] 	left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'CASH' and [STATUS] in ('2C1', '2C2')) fsu 	on CONCAT(ISNULL(oar.[ORDER_ID],0),'_611_',oar.DATA_SOURCE) = fsu.[ID] 	left join (SELECT DISTINCT ORDER_ID, DEALER_NAME_DECODE, PRODUCT_TYPE, TRADE_DATE, TRANSACTION_NUMBER FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.[ORDER_ID] = oar.[ORDER_ID] and oar.[ORDER_ID] is not null and oar.DATA_SOURCE = 'CM' 	left join (SELECT DISTINCT ORDER_ID, TRADE_DATE, PRODUCT_TYPE FROM VISTA_REPORTING.dbo.CASH_ORDERS) co 	on oar.[ORDER_ID] = co.[ORDER_ID] and oar.[ORDER_ID] is not null and oar.DATA_SOURCE = 'CM' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[ORD_NUM] = oar.[ORDER_ID] and oar.DATA_SOURCE = 'AL' 	left join (SELECT DISTINCT ORD_NUM, OPEN_DATE FROM VISTA_REPORTING.dbo.PM_ORDERS) pm 	on oar.[ORDER_ID] = pm.[ORD_NUM] and oar.DATA_SOURCE = 'AL' 	WHERE oar.[VG_611] = 1 and COALESCE(co.[TRADE_DATE],pm.[OPEN_DATE],ct.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date 	GROUP BY oar.[ORDER_ID], 			-- oar.[TRANSACTION_NUMBER], 			 ct.[DEALER_NAME_DECODE], 			 t.[TRD_TRADER], 			 ex.[REASON], 			 oar.[VG_611], 			 CONCAT(YEAR(co.[TRADE_DATE]), ' - ', MONTH(co.[TRADE_DATE])), 			 CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])), 			 CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE])), 			 CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])), 			 ct.[PRODUCT_TYPE], 			 co.[PRODUCT_TYPE], 			 oar.DATA_SOURCE, 			 ct.[TRANSACTION_NUMBER], 			 t.[MULTI_FUND_ID]  	UNION  	SELECT DISTINCT 		'611_MM' as [EXCEPTION_TYPE_ID], 		CAST(oar.[ORDER_ID] as varchar(50)) as EXCEPTION_ID, 		oar.[ORDER_ID], 		CASE  			WHEN oar.DATA_SOURCE = 'CM' THEN ct.[TRANSACTION_NUMBER] 			WHEN oar.DATA_SOURCE = 'AL' THEN t.[MULTI_FUND_ID] 		ELSE NULL 		END AS [TRANSACTION_NUMBER], 		CASE  			WHEN oar.DATA_SOURCE = 'CM' THEN ct.[DEALER_NAME_DECODE] 			WHEN oar.DATA_SOURCE = 'AL' THEN t.[TRD_TRADER] 		ELSE NULL 		END AS DEALER, 		ex.[REASON] as [1B_RATIONALE], 		MAX(CASE 				WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  			ELSE 0  			END) AS [CM_Reviewed], 		oar.[VG_611] as [EXCEPTION_VALUE], 		CASE 			WHEN oar.DATA_SOURCE = 'CM' and oar.[ORDER_ID] is not null THEN CONCAT(YEAR(co.[TRADE_DATE]), ' - ', MONTH(co.[TRADE_DATE]))  			WHEN oar.DATA_SOURCE = 'CM' and oar.[ORDER_ID] is null		THEN CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE]))  			WHEN oar.DATA_SOURCE = 'AL' and oar.[ORDER_ID] is not null THEN CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])) 			WHEN oar.DATA_SOURCE = 'AL' and oar.[ORDER_ID] is null		THEN CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		END AS [DATE], 		CASE 			WHEN oar.DATA_SOURCE = 'AL' THEN 'Cash Products' 		ELSE COALESCE(ct.[PRODUCT_TYPE],co.[PRODUCT_TYPE]) 		END AS PRODUCT_TYPE, 		oar.DATA_SOURCE 	FROM VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_MM_TABLE oar 	left join #max_reason_cm ex  	on CONCAT(ISNULL(oar.[ORDER_ID],0),'_611_',oar.DATA_SOURCE) = ex.[ID] 	left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'CASH' and [STATUS] in ('2C1', '2C2')) fsu 	on CONCAT(ISNULL(oar.[ORDER_ID],0),'_611_',oar.DATA_SOURCE) = fsu.[ID] 	left join (SELECT DISTINCT ORDER_ID, DEALER_NAME_DECODE, PRODUCT_TYPE, TRADE_DATE, TRANSACTION_NUMBER FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.[ORDER_ID] = oar.[ORDER_ID] and oar.[ORDER_ID] is not null and oar.DATA_SOURCE = 'CM' 	left join (SELECT DISTINCT ORDER_ID, TRADE_DATE, PRODUCT_TYPE FROM VISTA_REPORTING.dbo.CASH_ORDERS) co 	on oar.[ORDER_ID] = co.[ORDER_ID] and oar.[ORDER_ID] is not null and oar.DATA_SOURCE = 'CM' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[ORD_NUM] = oar.[ORDER_ID] and oar.DATA_SOURCE = 'AL' 	left join (SELECT DISTINCT ORD_NUM, OPEN_DATE FROM VISTA_REPORTING.dbo.PM_ORDERS) pm 	on oar.[ORDER_ID] = pm.[ORD_NUM] and oar.DATA_SOURCE = 'AL' 	WHERE oar.[VG_611] = 1 and COALESCE(co.[TRADE_DATE],pm.[OPEN_DATE],ct.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date 	GROUP BY oar.[ORDER_ID], 			-- oar.[TRANSACTION_NUMBER], 			 ct.[DEALER_NAME_DECODE], 			 t.[TRD_TRADER], 			 ex.[REASON], 			 oar.[VG_611], 			 CONCAT(YEAR(co.[TRADE_DATE]), ' - ', MONTH(co.[TRADE_DATE])), 			 CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])), 			 CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE])), 			 CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])), 			 ct.[PRODUCT_TYPE], 			 co.[PRODUCT_TYPE], 			 oar.DATA_SOURCE, 			 ct.[TRANSACTION_NUMBER], 			 t.[MULTI_FUND_ID]  	UNION  	SELECT DISTINCT 		'612_RR' as [EXCEPTION_TYPE_ID], 		CAST(oar.TRANSACTION_NUMBER as varchar(50)) as EXCEPTION_ID, 		CASE  			WHEN oar.DATA_SOURCE = 'CM' THEN co.ORDER_ID 			WHEN oar.DATA_SOURCE = 'AL' THEN pm.ORD_NUM 		ELSE NULL 		END AS ORDER_ID, 		oar.TRANSACTION_NUMBER, 		CASE  			WHEN oar.DATA_SOURCE = 'CM' THEN ct.[DEALER_NAME_DECODE] 			WHEN oar.DATA_SOURCE = 'AL' THEN t.[TRD_TRADER] 		ELSE NULL 		END AS DEALER, 		ex.[REASON] as [1B_RATIONALE], 		MAX(CASE 				WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  			ELSE 0  			END) AS [CM_Reviewed], 		oar.[VG_612] as [EXCEPTION_VALUE], 		CASE 			WHEN oar.DATA_SOURCE = 'CM' and oar.TRANSACTION_NUMBER is not null THEN CONCAT(YEAR(co.[TRADE_DATE]), ' - ', MONTH(co.[TRADE_DATE]))  			WHEN oar.DATA_SOURCE = 'CM' and oar.TRANSACTION_NUMBER is null		THEN CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE]))  			WHEN oar.DATA_SOURCE = 'AL' and oar.TRANSACTION_NUMBER is not null THEN CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])) 			WHEN oar.DATA_SOURCE = 'AL' and oar.TRANSACTION_NUMBER is null		THEN CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		END AS [DATE], 		CASE 			WHEN oar.DATA_SOURCE = 'AL' THEN 'Cash Products' 		ELSE COALESCE(ct.[PRODUCT_TYPE],co.[PRODUCT_TYPE]) 		END AS PRODUCT_TYPE, 		oar.[DATA_SOURCE] 	FROM VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_RR_TABLE oar 	left join #max_reason_cm ex  	on CONCAT(ISNULL(oar.TRANSACTION_NUMBER,0),'_',ISNULL(oar.TRANSACTION_NUMBER,0), '_612_',oar.DATA_SOURCE) = ex.[ID] 	left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'CASH' and [STATUS] in ('2C1', '2C2')) fsu 	on CONCAT(ISNULL(oar.TRANSACTION_NUMBER,0),'_',ISNULL(oar.TRANSACTION_NUMBER,0), '_612_',oar.DATA_SOURCE) = fsu.[ID] 	left join (SELECT DISTINCT ORDER_ID, DEALER_NAME_DECODE, PRODUCT_TYPE, TRADE_DATE, TRANSACTION_NUMBER FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.TRANSACTION_NUMBER = oar.TRANSACTION_NUMBER and oar.TRANSACTION_NUMBER is not null and oar.DATA_SOURCE = 'CM' 	left join (SELECT DISTINCT ORDER_ID, TRADE_DATE, PRODUCT_TYPE FROM VISTA_REPORTING.dbo.CASH_ORDERS) co 	on oar.TRANSACTION_NUMBER = co.[ORDER_ID] and oar.TRANSACTION_NUMBER is not null and oar.DATA_SOURCE = 'CM' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[ORD_NUM] = oar.TRANSACTION_NUMBER and oar.DATA_SOURCE = 'AL' 	left join (SELECT DISTINCT ORD_NUM, OPEN_DATE FROM VISTA_REPORTING.dbo.PM_ORDERS) pm 	on oar.TRANSACTION_NUMBER = pm.[ORD_NUM] and oar.DATA_SOURCE = 'AL' 	WHERE oar.[VG_612] = 1 and COALESCE(co.[TRADE_DATE],pm.[OPEN_DATE],ct.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date 	GROUP BY oar.TRANSACTION_NUMBER, 			-- oar.[TRANSACTION_NUMBER], 			 ct.[DEALER_NAME_DECODE], 			 t.[TRD_TRADER], 			 ex.[REASON], 			 oar.[VG_612], 			 CONCAT(YEAR(co.[TRADE_DATE]), ' - ', MONTH(co.[TRADE_DATE])), 			 CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])), 			 CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE])), 			 CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])), 			 ct.[PRODUCT_TYPE], 			 co.[PRODUCT_TYPE], 			 oar.DATA_SOURCE, 			 oar.TRANSACTION_NUMBER, 			 co.ORDER_ID, 			 pm.ORD_NUM  	UNION  	SELECT DISTINCT 		'612_MM' as [EXCEPTION_TYPE_ID], 		CAST(oar.TRANSACTION_NUMBER as varchar(50)) as EXCEPTION_ID, 		CASE  			WHEN oar.DATA_SOURCE = 'CM' THEN co.ORDER_ID 			WHEN oar.DATA_SOURCE = 'AL' THEN pm.ORD_NUM 		ELSE NULL 		END AS ORDER_ID, 		oar.TRANSACTION_NUMBER, 		CASE  			WHEN oar.DATA_SOURCE = 'CM' THEN ct.[DEALER_NAME_DECODE] 			WHEN oar.DATA_SOURCE = 'AL' THEN t.[TRD_TRADER] 		ELSE NULL 		END AS DEALER, 		ex.[REASON] as [1B_RATIONALE], 		MAX(CASE 				WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  			ELSE 0  			END) AS [CM_Reviewed], 		oar.[VG_612] as [EXCEPTION_VALUE], 		CASE 			WHEN oar.DATA_SOURCE = 'CM' and oar.TRANSACTION_NUMBER is not null THEN CONCAT(YEAR(co.[TRADE_DATE]), ' - ', MONTH(co.[TRADE_DATE]))  			WHEN oar.DATA_SOURCE = 'CM' and oar.TRANSACTION_NUMBER is null		THEN CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE]))  			WHEN oar.DATA_SOURCE = 'AL' and oar.TRANSACTION_NUMBER is not null THEN CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])) 			WHEN oar.DATA_SOURCE = 'AL' and oar.TRANSACTION_NUMBER is null		THEN CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		END AS [DATE], 		CASE 			WHEN oar.DATA_SOURCE = 'AL' THEN 'Cash Products' 		ELSE COALESCE(ct.[PRODUCT_TYPE],co.[PRODUCT_TYPE]) 		END AS PRODUCT_TYPE, 		oar.[DATA_SOURCE] 	FROM VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_MM_TABLE oar 	left join #max_reason_cm ex  	on CONCAT(ISNULL(oar.TRANSACTION_NUMBER,0),'_',ISNULL(oar.TRANSACTION_NUMBER,0), '_612_',oar.DATA_SOURCE) = ex.[ID] 	left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'CASH' and [STATUS] in ('2C1', '2C2')) fsu 	on CONCAT(ISNULL(oar.TRANSACTION_NUMBER,0),'_',ISNULL(oar.TRANSACTION_NUMBER,0), '_612_',oar.DATA_SOURCE) = fsu.[ID] 	left join (SELECT DISTINCT ORDER_ID, DEALER_NAME_DECODE, PRODUCT_TYPE, TRADE_DATE, TRANSACTION_NUMBER FROM VISTA_REPORTING.dbo.CASH_TRADES) ct  	on ct.TRANSACTION_NUMBER = oar.TRANSACTION_NUMBER and oar.TRANSACTION_NUMBER is not null and oar.DATA_SOURCE = 'CM' 	left join (SELECT DISTINCT ORDER_ID, TRADE_DATE, PRODUCT_TYPE FROM VISTA_REPORTING.dbo.CASH_ORDERS) co 	on oar.TRANSACTION_NUMBER = co.[ORDER_ID] and oar.TRANSACTION_NUMBER is not null and oar.DATA_SOURCE = 'CM' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[ORD_NUM] = oar.TRANSACTION_NUMBER and oar.DATA_SOURCE = 'AL' 	left join (SELECT DISTINCT ORD_NUM, OPEN_DATE FROM VISTA_REPORTING.dbo.PM_ORDERS) pm 	on oar.TRANSACTION_NUMBER = pm.[ORD_NUM] and oar.DATA_SOURCE = 'AL' 	WHERE oar.[VG_612] = 1 and COALESCE(co.[TRADE_DATE],pm.[OPEN_DATE],ct.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date 	GROUP BY oar.TRANSACTION_NUMBER, 			-- oar.[TRANSACTION_NUMBER], 			 ct.[DEALER_NAME_DECODE], 			 t.[TRD_TRADER], 			 ex.[REASON], 			 oar.[VG_612], 			 CONCAT(YEAR(co.[TRADE_DATE]), ' - ', MONTH(co.[TRADE_DATE])), 			 CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])), 			 CONCAT(YEAR(ct.[TRADE_DATE]), ' - ', MONTH(ct.[TRADE_DATE])), 			 CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])), 			 ct.[PRODUCT_TYPE], 			 co.[PRODUCT_TYPE], 			 oar.DATA_SOURCE, 			 oar.TRANSACTION_NUMBER, 			 co.ORDER_ID, 			 pm.ORD_NUM  	 ) temp_exception_b   IF OBJECT_ID('tempdb..#temp_exception_final_b', 'U') IS NOT NULL DROP TABLE #temp_exception_final_b SELECT DISTINCT 	ex.[EXCEPTION_ID], 	ex.[ORDER_ID], 	ex.[TRANSACTION_NUMBER], 	--COALESCE(co.[OMQ_DATE_TIME],pm.[AUTH_TIME]) as OMQ_DATE_TIME, 	--COALESCE(co.[INSTRUCTION_RECEIVED_TIME],pm.[AUTH_TIME]) as INSTRUCTION_RECEIVED_TIME, 	--COALESCE(ct.[EXECUTED_DATETIME],t.[EXECUTION_TIME]) as EXECUTED_DATE_TIME, 	--co.[INSTRUCTION_CANCEL_REASON], 	--co.[CANCELLED_BY], 	--COALESCE(ct.[BANK],t.[TRD_EX_BROKER_CODE],t.[TRD_COUNTERPARTY]) as BANK, 	--COALESCE(ct.[EXECUTED_RATE],t.[TRD_PRICE]) as EXECUTED_RATE, 	--COALESCE(ct.[UPLOADED_DATE_TIME],t.[TRD_ENTRY_TIME]) as UPLOADED_DATE_TIME, 	CASE 		WHEN ex.[DATA_SOURCE] = 'AL' THEN 			CASE  				WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP' 				WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG' 				WHEN (pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM' 			ELSE NULL 			END 		WHEN ex.[DATA_SOURCE] = 'CM' THEN ct.[BUSINESS_GROUP] 	ELSE NULL 	END AS [BUSINESS_GROUP], --Guessing the logic is same as DMG? 	COALESCE(ct.[PRODUCT_TYPE],co.[PRODUCT_TYPE],'Cash Products') as PRODUCT_TYPE, 	COALESCE(ct.[PRODUCT],pr.[INST_TYPE]) as PRODUCT, 	COALESCE(tdd.[FULL_NAME],ex.[DEALER]) as DEALER_NAME, 	--COALESCE(co.[INSTRUCTED_CURRENCY],pm.[CURRENCY]) as CURRENCY, 	--COALESCE(co.[INSTRUCTED_AMOUNT],pm.[FACE]) as INSTRUCTED_AMOUNT, 	--COALESCE(ct.[DEALT_AMOUNT],t.[TRD_ORIG_FACE]) as DEALT_AMOUNT, 	--COALESCE(ct.[TRADE_DATE],t.[TRD_TRADE_DATE]) as TRADE_DATE, 	--COALESCE(ct.[VALUE_DATE],t.[TRD_TRADE_DATE]) as VALUE_DATE, 	--COALESCE(ct.[MATURITY_DATE],t.[TRD_SETTLE_DATE]) as MATURITY_DATE, 	--ct.[TERM], 	CASE  		WHEN ex.[EXCEPTION_VALUE] = 1 and NULLIF(ex.[1B_RATIONALE],'') is null THEN 'Unassigned Rationale' 	ELSE ex.[1B_RATIONALE] 	END AS [1B_RATIONALE], 	ex.[CM_Reviewed], 	ex.[EXCEPTION_VALUE], 	CASE 		WHEN ex.[EXCEPTION_TYPE_ID] = '9_RR'		THEN 'Timely Execution RR' 		WHEN ex.[EXCEPTION_TYPE_ID] = '9_MM'		THEN 'Timely Execution MM' 		WHEN ex.[EXCEPTION_TYPE_ID] = '10_RR'		THEN 'Timely Recording RR' 		WHEN ex.[EXCEPTION_TYPE_ID] = '10_MM'		THEN 'Timely Recording MM' 		WHEN ex.[EXCEPTION_TYPE_ID] = '601'			THEN 'Out of Hours' 		WHEN ex.[EXCEPTION_TYPE_ID] = '602'			THEN 'EOD Holdovers' 		WHEN ex.[EXCEPTION_TYPE_ID] = '603'			THEN 'Large Trades' 		WHEN ex.[EXCEPTION_TYPE_ID] = '604_RR'		THEN 'Client Order Handling RR' 		WHEN ex.[EXCEPTION_TYPE_ID] = '604_MM'		THEN 'Client Order Handling MM' 		WHEN ex.[EXCEPTION_TYPE_ID] = '607_RR'		THEN 'Best Execution RR' 		WHEN ex.[EXCEPTION_TYPE_ID] = '607_MM_QE'	THEN 'Best Execution MM B3Q' 		WHEN ex.[EXCEPTION_TYPE_ID] = '607_MM_NWQ'	THEN 'Best Execution MM NWQ' 		--SURVG-563 		WHEN ex.[EXCEPTION_TYPE_ID] = '613_RR'		THEN 'Instructor to Dealer RR' 		WHEN ex.[EXCEPTION_TYPE_ID] = '613_MM'	THEN 'Instructor to Dealer MM' 		--End of SURVG-563 		WHEN ex.[EXCEPTION_TYPE_ID] = '608'			THEN 'TA Knockback' 	--	WHEN ex.[EXCEPTION_TYPE_ID] = '609'			THEN 'Deposits Reference Rate' 		WHEN ex.[EXCEPTION_TYPE_ID] = '610'			THEN 'CD, CP, TBills, Cancellations & Amendments' 		WHEN ex.[EXCEPTION_TYPE_ID] = '16'			THEN 'Gifts & Hospitality' 		WHEN ex.[EXCEPTION_TYPE_ID] = '17'			THEN 'Counterparty Direction' 		WHEN ex.[EXCEPTION_TYPE_ID] = '611_RR'		THEN 'Order Aggregation RR' 		WHEN ex.[EXCEPTION_TYPE_ID] = '611_MM'		THEN 'Order Aggregation MM' 		WHEN ex.[EXCEPTION_TYPE_ID] = '612_RR'		THEN 'Order Allocation RR' 		WHEN ex.[EXCEPTION_TYPE_ID] = '612_MM'		THEN 'Order Allocation MM' 	END AS [EXCEPTION], 	ex.[EXCEPTION_TYPE_ID], 	ex.[DATE], 	@REPORT_NAME as REPORT_NAME, 	GETDATE() as REPORT_DATE, 	ex.[DATA_SOURCE] INTO #temp_exception_final_b FROM #temp_exception_table_b ex left join (SELECT DISTINCT TRANSACTION_NUMBER, EXECUTED_DATETIME, BANK, EXECUTED_RATE, UPLOADED_DATE_TIME, BUSINESS_GROUP, PRODUCT_TYPE, PRODUCT, DEALT_AMOUNT, TRADE_DATE, VALUE_DATE, MATURITY_DATE, TERM FROM VISTA_REPORTING.dbo.CASH_TRADES) ct on ex.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER] and ex.[TRANSACTION_NUMBER] is not null and ex.[DATA_SOURCE] = 'CM' left join (SELECT DISTINCT ORDER_ID, OMQ_DATE_TIME, INSTRUCTION_RECEIVED_TIME, INSTRUCTION_CANCEL_REASON, CANCELLED_BY, PRODUCT_TYPE, INSTRUCTED_CURRENCY, INSTRUCTED_AMOUNT FROM VISTA_REPORTING.dbo.CASH_ORDERS) co on ex.[ORDER_ID] = co.[ORDER_ID] and ex.[ORDER_ID] is not null and ex.[DATA_SOURCE] = 'CM' left join (SELECT DISTINCT MULTI_FUND_ID, FUND, EXECUTION_TIME, TRD_COUNTERPARTY, TRD_EX_BROKER_CODE, TRD_PRICE, TRD_ENTRY_TIME, TRD_ORIG_FACE, TRD_TRADE_DATE, TRD_SETTLE_DATE, PULL_DATE FROM VISTA_REPORTING.dbo.TRADES) t on ex.[TRANSACTION_NUMBER] = t.[MULTI_FUND_ID] and ex.[TRANSACTION_NUMBER] is not null and ex.[DATA_SOURCE] = 'AL' left join (SELECT DISTINCT FUND_ID, PORTFOLIO_GROUP_NAME FROM VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY) pgt on t.[FUND] = pgt.[FUND_ID] left join (SELECT DISTINCT MULTI_FUND_ID, INST_TYPE FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr on t.[MULTI_FUND_ID] = pr.[MULTI_FUND_ID] left join (SELECT DISTINCT ORD_NUM, AUTH_TIME, CURRENCY, FACE FROM VISTA_REPORTING.dbo.PM_ORDERS) pm on ex.[ORDER_ID] = pm.[ORD_NUM] and ex.[ORDER_ID] is not null and ex.[DATA_SOURCE] = 'AL' left join VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd  on (tdd.[INITIALS] = ex.[DEALER] and ex.[DATA_SOURCE] = 'AL' AND CAST(t.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE))   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_CASH_AGGREGATOR_1B_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_CASH_AGGREGATOR_1B_DATA 	FROM #temp_exception_final_b ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_CASH_AGGREGATOR_1B_DATA 	SELECT * 	FROM #temp_exception_final_b  END    --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: DMC_DMG_CM_COBS_EXCEPTIONS CreateDate: 2019-10-18 08:39:49.753 ModifyDate: 2020-07-17 16:46:16.447 --- DEFINITION START --- -- ============================================= -- Author:		<Samad, Mehreen> -- Create date: <17/06/2019> -- Description:	 -- <Generate DMC reports for DMG COBS Exceptions  -- Summary Statistics. This stored procedure takes  -- a start month, end month and report name as  -- input parameters and generates the reports for  -- these months.> -- =============================================  -- ***************VERSION CONTROL***************  -- *********************************************  CREATE PROCEDURE [dbo].[DMC_DMG_CM_COBS_EXCEPTIONS]  	-- Add the parameters for the stored procedure here  	@Start_day		INT, 	@Start_Month	INT, 	@Start_Year		INT, 	@End_Day		INT,  	@End_Month		INT, 	@End_Year		INT, 	@REPORT_NAME	VARCHAR(MAX)  AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;      -- Insert statements for procedure here  	DECLARE @Start_Date	DATETIME; 		SET	@Start_Date = CONVERT(DATE,CONCAT(@Start_Year,'-',@Start_Month,'-', @Start_day)); --Turn the input start month parameter into a date  	DECLARE @End_Date0	DATETIME; 	DECLARE @End_Date	DATETIME; 		SET	@End_Date0  = CONVERT(DATETIME,CONCAT(@End_Year,'-',@End_Month, '-', @End_Day));  --Turn the input end month parameter into a date   		SET	@End_Date	= DATEADD(SECOND,86399,@End_Date0); --To make it for 23:59:59 that day. May need to update this for milliseconds.    ----Add the metadata to a table so we keep a history of all reports run IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_DMG_REPORTS_METADATA', 'U') IS NULL SELECT 	DATEPART(DAY,@Start_Date) AS [START_DAY], 	DATEPART(MONTH, @Start_Date) AS [START_MONTH], 	DATEPART(YEAR, @Start_Date) AS [START_YEAR], 	DATEPART(DAY,@End_Date)	AS [END_DAY], 	DATEPART(MONTH, @End_Date) AS [END_MONTH], 	DATEPART(YEAR, @End_Date) AS [END_YEAR], 	CONVERT(VARCHAR(70),'DMG_CM_COBS_EXCEPTION') AS [DMC_Report], 	@REPORT_NAME AS [Report_Name], 	GETDATE() AS [Run_Date] INTO VISTA_REPORTING.dbo.DMC_DMG_REPORTS_METADATA  ELSE INSERT INTO VISTA_REPORTING.dbo.DMC_DMG_REPORTS_METADATA SELECT 	DATEPART(DAY,@Start_Date) AS [START_DAY], 	DATEPART(MONTH, @Start_Date) AS [START_MONTH], 	DATEPART(YEAR, @Start_Date) AS [START_YEAR], 	DATEPART(DAY,@End_Date)	AS [END_DAY], 	DATEPART(MONTH, @End_Date) AS [END_MONTH], 	DATEPART(YEAR, @End_Date) AS [END_YEAR], 	'DMG_CM_COBS_EXCEPTION' AS [DMC_Report], 	@REPORT_NAME AS [Report_Name], 	GETDATE() AS [Run_Date]  --Selecting reasons from exception reason table IF OBJECT_ID('tempdb..#max_reason', 'U') IS  NOT NULL DROP TABLE #max_reason --The below table is used to identify False Positives from Dealing Desk SELECT DISTINCT 	e.[ID],  	e.[REASON], 	e.[STATUS], 	e.[TOUCH_COUNT] INTO #max_reason FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE e inner join (SELECT 				[ID], 				MAX(TOUCH_COUNT) as [MAX_TOUCH], 				MAX(CREATED) as [MAX_CREATE_TIME] 			FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE 			WHERE [STATUS] in ('For Review','With Dealer','With Reviewer','C&A Review Request') 			--the above condition around status ensures that we only consider exceptions coming from the Dealing Desk 			--only dealing desk has the ability to flag false positive exceptions 			GROUP BY [ID]) a  on a.[ID] = e.[ID] and a.[MAX_TOUCH] = e.[TOUCH_COUNT] AND a.[MAX_CREATE_TIME] = e.[CREATED]   IF OBJECT_ID('tempdb..#max_reason_cm', 'U') IS  NOT NULL DROP TABLE #max_reason_cm --The below table is used to identify the last Reason (populated by C&M Team) SELECT DISTINCT 	e.[ID],  	e.[REASON], 	e.[STATUS] INTO #max_reason_cm FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE e inner join (SELECT  				[ID], 				MAX(TOUCH_COUNT) as [MAX_TOUCH]  			FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE 			WHERE [STATUS] in ('Pre Sampling','With C&A Reviewer','Under Review','Review in Process','Post Sampling') 			GROUP BY [ID] ) a  on a.[ID] = e.[ID] and a.[MAX_TOUCH] = e.[TOUCH_COUNT]  -- ================================================================================================= /* COBS SUMMARY TABLE	*/ -- =================================================================================================  IF OBJECT_ID('tempdb..#temp_exception_table', 'U') IS NOT NULL DROP TABLE #temp_exception_table SELECT *  INTO #temp_exception_table FROM  	(SELECT DISTINCT 		qe.[MULTI_FUND_ID] AS EXCEPTION_ID, 		'1' AS EXCEPTION_TYPE_ID, 		qe.[VG_01] AS EXCEPTION_VALUE, 		ex.[REASON], 		fsu.[STATUS], 		CONCAT(YEAR(qe.[CREATETIME]), ' - ', MONTH(qe.[CREATETIME])) AS [DATE], 		MAX(CASE  				WHEN fsu.[STATUS] like '%2C%' 				 AND ex.[REASON] <> 'Not sampled for testing'  				THEN 1  			ELSE 0  			END) AS [CM_Reviewed] 	FROM VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_DMG_TABLE qe  	left join #max_reason_cm ex  	on CONCAT(qe.[MULTI_FUND_ID],'_1') = ex.[ID] 	left join #max_reason rsn  	on CONCAT(qe.[MULTI_FUND_ID],'_1') = rsn.[ID] 	left join VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE fsu 	on CONCAT(qe.[MULTI_FUND_ID],'_1') = fsu.[ID] 	WHERE qe.[VG_01] = 1 and qe.[CREATETIME] between @Start_Date and @End_Date 	GROUP BY qe.[MULTI_FUND_ID], 			 qe.[VG_01], 			 ex.[REASON], 			 fsu.[STATUS], 			 CONCAT(YEAR(qe.[CREATETIME]), ' - ', MONTH(qe.[CREATETIME])) 	UNION  	SELECT DISTINCT 		nwq.[MULTI_FUND_ID] AS EXCEPTION_ID, 		'7' AS EXCEPTION_TYPE_ID, 		nwq.[VG_07] AS EXCEPTION_VALUE, 		ex.[REASON], 		fsu.[STATUS], 		CONCAT(YEAR(nwq.[VG_07_CREATETIME]), ' - ', MONTH(nwq.[VG_07_CREATETIME])) AS [DATE], 		MAX(CASE  				WHEN fsu.[STATUS] like '%2C%' 				 AND ex.[REASON] <> 'Not sampled for testing'  				THEN 1  			ELSE 0  			END) AS [CM_Reviewed] 	FROM VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_DMG_TABLE nwq 	left join #max_reason_cm ex  	on CONCAT(nwq.[MULTI_FUND_ID],'_7') = ex.[ID] 	left join #max_reason rsn  	on CONCAT(nwq.[MULTI_FUND_ID],'_7') = rsn.[ID] 	left join VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE fsu 	on CONCAT(nwq.[MULTI_FUND_ID],'_7') = fsu.[ID] 	WHERE nwq.[VG_07] = 1 and nwq.[VG_07_CREATETIME] between @Start_Date and @End_Date 	GROUP BY nwq.[MULTI_FUND_ID], 			 nwq.[VG_07], 			 ex.[REASON], 			 fsu.[STATUS], 			 CONCAT(YEAR(nwq.[VG_07_CREATETIME]), ' - ', MONTH(nwq.[VG_07_CREATETIME])) 	UNION  	SELECT DISTINCT 		timexec.[ORD_NUM] AS EXCEPTION_ID, 		'9' AS EXCEPTION_TYPE_ID, 		timexec.[VG_09] AS EXCEPTION_VALUE, 		ex.[REASON], 		fsu.[STATUS], 		CONCAT(YEAR(timexec.[CREATETIME]), ' - ', MONTH(timexec.[CREATETIME])) AS [DATE], 		MAX(CASE  				WHEN fsu.[STATUS] like '%2C%'  				 AND ex.[REASON] <> 'Not sampled for testing'  				THEN 1  			ELSE 0  			END) AS [CM_Reviewed] 	FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_DMG_TABLE timexec 	left join #max_reason_cm ex  	on CONCAT(timexec.[ORD_NUM],'_9',timexec.[Exception_Type],timexec.[VG_09]) = ex.[ID] 	left join #max_reason rsn  	on CONCAT(timexec.[ORD_NUM],'_9') = rsn.[ID] 	left join VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE fsu 	on CONCAT(timexec.[ORD_NUM],'_9',timexec.[Exception_Type],timexec.[VG_09]) = fsu.[ID] 	WHERE timexec.[VG_09] != 0 and timexec.[CREATETIME] between @Start_Date and @End_Date 	GROUP BY timexec.[ORD_NUM], 			 timexec.[VG_09], 			 ex.[REASON], 			 fsu.[STATUS], 			 CONCAT(YEAR(timexec.[CREATETIME]), ' - ', MONTH(timexec.[CREATETIME])) 	UNION  	SELECT DISTINCT 		timrec.[MULTI_FUND_ID] AS EXCEPTION_ID, 		'10' AS EXCEPTION_TYPE_ID, 		timrec.[VG_10] AS EXCEPTION_VALUE, 		ex.[REASON], 		fsu.[STATUS], 		CONCAT(YEAR(timrec.[TREC_CREATETIME]), ' - ', MONTH(timrec.[TREC_CREATETIME])) AS [DATE], 		MAX(CASE  				WHEN fsu.[STATUS] like '%2C%'  				 AND ex.[REASON] <> 'Not sampled for testing'  				THEN 1  			ELSE 0  			END) AS [CM_Reviewed] 	FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_DMG_TABLE timrec 	left join #max_reason_cm ex  	on CONCAT(timrec.[MULTI_FUND_ID],'_10') = ex.[ID] 	left join #max_reason rsn  	on CONCAT(timrec.[MULTI_FUND_ID],'_10') = rsn.[ID] 	left join VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE fsu 	on CONCAT(timrec.[MULTI_FUND_ID],'_10') = fsu.[ID] 	WHERE timrec.[VG_10] > 0 and timrec.[TREC_CREATETIME] between @Start_Date and @End_Date 	GROUP BY timrec.[MULTI_FUND_ID], 			 timrec.[VG_10], 			 ex.[REASON], 			 fsu.[STATUS], 			 CONCAT(YEAR(timrec.[TREC_CREATETIME]), ' - ', MONTH(timrec.[TREC_CREATETIME])) 	UNION  	SELECT DISTINCT 		op.ORD_NUM AS EXCEPTION_ID, 		'14' AS EXCEPTION_TYPE_ID, 		OP.ORDER_PRIORITY_EXCEPTION AS EXCEPTION_VALUE, 		ex.[REASON], 		fsu.[STATUS], 		CONCAT(YEAR(op.CREATETIME), ' - ', MONTH(op.CREATETIME)) AS [DATE], 		MAX(CASE  				WHEN fsu.[STATUS] like '%2C%'  				 AND ex.[REASON] <> 'Not sampled for testing'  				THEN 1  			ELSE 0  			END) AS [CM_Reviewed] 	FROM VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_DMG_TABLE op  	left join #max_reason_cm ex on CONCAT(op.ORD_NUM,'_14') = ex.ID  	left join #max_reason rsn on CONCAT(op.ORD_NUM,'_14') = rsn.ID 	left join VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE fsu on CONCAT(op.ORD_NUM,'_14') = fsu.ID 	WHERE op.ORDER_PRIORITY_EXCEPTION = 1  		  and op.CREATETIME between @Start_Date and @End_Date 	GROUP BY op.ORD_NUM, 			 op.ORDER_PRIORITY_EXCEPTION, 			 ex.[REASON], 			 fsu.[STATUS], 			 CONCAT(YEAR(op.CREATETIME), ' - ', MONTH(op.CREATETIME))  	UNION  	SELECT DISTINCT 		CONCAT(amm.[MULTI_FUND_ID], amm.[TOUCH_COUNT]) AS EXCEPTION_ID, 		'15' AS EXCEPTION_TYPE_ID, 		amm.[AMENDMENT_FLAG] AS EXCEPTION_VALUE, 		ex.[REASON], 		fsu.[STATUS], 		CONCAT(YEAR(amm.[AMENDMENT_FLAG_CREATETIME]), ' - ', MONTH(amm.[AMENDMENT_FLAG_CREATETIME])) AS [DATE], 		MAX(CASE  				WHEN fsu.[STATUS] like '%2C%'  				 AND ex.[REASON] <> 'Not sampled for testing'  				THEN 1  			ELSE 0  			END) AS [CM_Reviewed] 	FROM VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_DMG_TABLE amm 	left join #max_reason_cm ex  	on CONCAT(amm.[MULTI_FUND_ID],'_15',amm.[TOUCH_COUNT]) = ex.ID  	left join #max_reason rsn  	on CONCAT(amm.[MULTI_FUND_ID],'_15',amm.[TOUCH_COUNT]) = rsn.ID 	left join VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE fsu 	on CONCAT(amm.[MULTI_FUND_ID],'_15',amm.[TOUCH_COUNT]) = fsu.ID 	WHERE AMENDMENT_FLAG = 1 and amm.[AMENDMENT_FLAG_CREATETIME] between @Start_Date and @End_Date 	GROUP BY CONCAT(amm.[MULTI_FUND_ID], amm.[TOUCH_COUNT]), 			 amm.[AMENDMENT_FLAG], 			 ex.[REASON], 			 fsu.[STATUS], 			 CONCAT(YEAR(amm.[AMENDMENT_FLAG_CREATETIME]), ' - ', MONTH(amm.[AMENDMENT_FLAG_CREATETIME])) 	UNION  	SELECT DISTINCT 		trwo.[MULTI_FUND_ID] AS EXCEPTION_ID, 		'41' AS EXCEPTION_TYPE_ID, 		trwo.[VG_41] AS EXCEPTION_VALUE, 		ex.[REASON], 		fsu.[STATUS], 		CONCAT(YEAR(trwo.[VG_41_CREATETIME]), ' - ', MONTH(trwo.[VG_41_CREATETIME])) AS [DATE], 		MAX(CASE  				WHEN fsu.[STATUS] like '%2C%'  				 AND ex.[REASON] <> 'Not sampled for testing'  				THEN 1  			ELSE 0  			END) AS [CM_Reviewed] 	FROM VISTA_STAGING.dbo.VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE trwo 	left join #max_reason_cm ex  	on CONCAT(trwo.[MULTI_FUND_ID],'_41') = ex.ID  	left join #max_reason rsn  	on CONCAT(trwo.[MULTI_FUND_ID],'_41') = rsn.ID 	left join VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE fsu 	on CONCAT(trwo.[MULTI_FUND_ID],'_41') = fsu.ID 	WHERE trwo.[VG_41] = 1 and trwo.[VG_41_CREATETIME] between @Start_Date and @End_Date 	GROUP BY trwo.[MULTI_FUND_ID], 			 trwo.[VG_41], 			 ex.[REASON], 			 fsu.[STATUS], 			 CONCAT(YEAR(trwo.[VG_41_CREATETIME]), ' - ', MONTH(trwo.[VG_41_CREATETIME])) 	UNION  	SELECT DISTINCT 		gh.[MULTI_FUND_ID] AS EXCEPTION_ID, 		'16' AS EXCEPTION_TYPE_ID, 		gh.[VG_16] AS EXCEPTION_VALUE, 		ex.[REASON], 		fsu.[STATUS], 		CONCAT(YEAR(gh.[VG_16_CREATETIME]), ' - ', MONTH(gh.[VG_16_CREATETIME])) AS [DATE], 		MAX(CASE  				WHEN fsu.[STATUS] like '%2C%'   				 AND ex.[REASON] <> 'Not sampled for testing'  				THEN 1  			ELSE 0  			END) AS [CM_Reviewed] 	FROM VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE gh 	left join #max_reason_cm ex  	on CONCAT(gh.[MULTI_FUND_ID],'_16') = ex.ID  	left join #max_reason rsn  	on CONCAT(gh.[MULTI_FUND_ID],'_16') = rsn.ID 	left join VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE fsu 	on CONCAT(gh.[MULTI_FUND_ID],'_16') = fsu.ID 	WHERE gh.[VG_16] = 1 and gh.[VG_16_CREATETIME] between @Start_Date and @End_Date 	GROUP BY gh.[MULTI_FUND_ID], 			 gh.[VG_16], 			 ex.[REASON], 			 fsu.[STATUS], 			 CONCAT(YEAR(gh.[VG_16_CREATETIME]), ' - ', MONTH(gh.[VG_16_CREATETIME])) 	UNION  	SELECT DISTINCT 		cp.[ORD_NUM] AS EXCEPTION_ID, 		'17' AS EXCEPTION_TYPE_ID, 		cp.[VG_17] AS EXCEPTION_VALUE, 		ex.[REASON], 		fsu.[STATUS], 		CONCAT(YEAR(cp.[CREATETIME]), ' - ', MONTH(cp.[CREATETIME])) AS [DATE], 		MAX(CASE  				WHEN fsu.[STATUS] like '%2C%'  				 AND ex.[REASON] <> 'Not sampled for testing'  				THEN 1  			ELSE 0  			END) AS [CM_Reviewed] 	FROM VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE cp 	left join #max_reason_cm ex  	on CONCAT(cp.[ORD_NUM],'_17') = ex.ID  	left join #max_reason rsn  	on CONCAT(cp.[ORD_NUM],'_17') = rsn.ID 	left join VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE fsu 	on CONCAT(cp.[ORD_NUM],'_17') = fsu.ID 	WHERE cp.[VG_17] = 1 and cp.[CREATETIME] between @Start_Date and @End_Date 	GROUP BY cp.[ORD_NUM], 			 cp.[VG_17], 			 ex.[REASON], 			 fsu.[STATUS], 			 CONCAT(YEAR(cp.[CREATETIME]), ' - ', MONTH(cp.[CREATETIME]))  	) temp_exception  IF OBJECT_ID('tempdb..#temp_COBS_table', 'U') IS NOT NULL DROP TABLE #temp_COBS_table SELECT  	CASE  		WHEN tempex.[EXCEPTION_TYPE_ID] = '1'  THEN 'Quote Exception' 		WHEN tempex.[EXCEPTION_TYPE_ID] = '7'  THEN 'Non-Winning Quote' 		WHEN tempex.[EXCEPTION_TYPE_ID] = '9'  THEN 'Timely Execution' 		WHEN tempex.[EXCEPTION_TYPE_ID] = '10' THEN 'Timely Recording' 		--WHEN tempex.[EXCEPTION_TYPE_ID] = '13' THEN 'Order Aggregation' 		WHEN tempex.[EXCEPTION_TYPE_ID] = '14' THEN 'Order Priority' 		WHEN tempex.[EXCEPTION_TYPE_ID] = '15' THEN 'Amendments' 		WHEN tempex.[EXCEPTION_TYPE_ID] = '41' THEN 'Trades Without Orders' 		WHEN tempex.[EXCEPTION_TYPE_ID] = '16' THEN 'Gifts & Hospitality' 		WHEN tempex.[EXCEPTION_TYPE_ID] = '17' THEN 'Counterparty Direction' 	ELSE NULL 	END AS COBS_RULE, 	tempex.[EXCEPTION_ID], 	tempex.[REASON], 	tempex.[DATE] as TRADE_DATE, 	tempex.[CM_Reviewed], 	@REPORT_NAME AS [Report_Name] INTO #temp_COBS_table FROM #temp_exception_table tempex   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_DMG_COBS_EXCEPTIONS', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_DMG_COBS_EXCEPTIONS 	from #temp_COBS_table ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_DMG_COBS_EXCEPTIONS 	SELECT * 	from #temp_COBS_table  END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: DMC_DMG_COUNTERPARTY_SELECTION CreateDate: 2019-10-18 08:39:49.800 ModifyDate: 2019-11-06 18:18:15.023 --- DEFINITION START --- -- ============================================= -- Author:		<ELIZABETH REYNOLDS> -- Create date: <04.04.2019> -- Description:	 -- <Generate DMC reports for COUNTERPARTY SELECTION --	This stored procedure takes a start DATE, end DATE and report name  --	as input parameters and generates the reports for these DATES. -- > -- =============================================   -- ***************VERSION CONTROL*************** -- 21/06/2019 - MS: Added in Notional Value -- ********************************************* CREATE PROCEDURE  [dbo].[DMC_DMG_COUNTERPARTY_SELECTION]    @Start_day INT, @Start_Month INT, @Start_Year INT, @End_Day INT,  @End_Month INT, @End_Year INT, @REPORT_NAME VARCHAR(MAX) -- AS -- DECLARE @Start_Date DATETIME; SET @Start_Date = CONVERT(DATE,CONCAT(@Start_Year,'-',@Start_Month,'-', @Start_day)); --Turn the input start month parameter into a date  DECLARE @End_Date0 DATETIME; DECLARE @End_Date DATETIME; SET @End_Date0 = CONVERT(DATETIME,CONCAT(@End_Year,'-',@End_Month, '-', @End_Day));  --Turn the input end month parameter into a date   SET @End_Date = DATEADD(second,86399,@End_Date0);-- to make it for 23:59:59 that day. May need to update this for milliseconds.  --Add the metadata to a table so we keep a history of all reports run IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_DMG_REPORTS_METADATA', 'U') IS NULL 	SELECT 		DATEPART(DAY,@Start_Date) AS [START_DAY], 		DATEPART(MONTH, @Start_Date) AS [START_MONTH], 		DATEPART(YEAR, @Start_Date) AS [START_YEAR], 		DATEPART(DAY,@End_Date)	AS [END_DAY], 		DATEPART(MONTH, @End_Date) AS [END_MONTH], 		DATEPART(YEAR, @End_Date) AS [END_YEAR], 		CONVERT(VARCHAR(70),'DMG_COUNTERPARTY_SELECTION') AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date] 	INTO VISTA_REPORTING.dbo.DMC_DMG_REPORTS_METADATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_DMG_REPORTS_METADATA 	SELECT 		DATEPART(DAY,@Start_Date) AS [START_DAY], 		DATEPART(MONTH, @Start_Date) AS [START_MONTH], 		DATEPART(YEAR, @Start_Date) AS [START_YEAR], 		DATEPART(DAY,@End_Date)	AS [END_DAY], 		DATEPART(MONTH, @End_Date) AS [END_MONTH], 		DATEPART(YEAR, @End_Date) AS [END_YEAR], 		'DMG_COUNTERPARTY_SELECTION' AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date]   IF OBJECT_ID('TEMPDB..#ALL_RECORDS', 'U') IS NOT NULL DROP TABLE #ALL_RECORDS SELECT DISTINCT 	MFID.MFID AS MULTI_FUND_ID,  	COALESCE(MFID.EX_CPTY,MFID.CPTY) AS TRD_COUNTERPARTY,  	MFID.EXCEPTION_FLAG AS VG_07,  	MFID.CREATE_DATE AS VG_07_CREATETIME,  	MFID.[Exec_Date],  	T.TRD_STATUS, 	ABS(t.TRD_ORIG_FACE) as TRD_ORIG_FACE, 	PL.VENUE, 	c.COUNTERPARTY_CODE, 	c.COUNTERPARTY_NAME INTO #ALL_RECORDS FROM VISTA_REPORTING.DBO.MASTER_MFID_VG_07_NON_WINNING_QUOTE_DMG_TABLE MFID  LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, TRD_STATUS, TRD_ORIG_FACE, FinalFlag FROM VISTA_REPORTING.DBO.TRADES) T ON T.MULTI_FUND_ID = MFID.MFID LEFT JOIN VISTA_REPORTING.DBO.PLACEMENTS PL ON PL.MULTI_FUND_ID = MFID.MFID LEFT JOIN VISTA_REPORTING.dbo.COUNTERPARTIES c ON c.TRD_COUNTERPARTY = COALESCE(MFID.EX_CPTY,MFID.CPTY) WHERE ISNULL(T.TRD_STATUS, '') != 'C'  	  AND MFID.[Exec_Date] BETWEEN @Start_Date AND @End_Date 	  AND T.FinalFlag = 1   --IF OBJECT_ID('tempdb..#results', 'U') IS NOT NULL DROP TABLE #results --SELECT DISTINCT --	ar.MULTI_FUND_ID, --	ar.TRD_COUNTERPARTY, --	c.COUNTERPARTY_NAME,  --	c.COUNTERPARTY_CODE, --	CASE WHEN ar.VENUE is null THEN 'BILATERAL' ELSE 'TRADEWEB' END AS VENUE, --	CASE WHEN ar.VG_07 = 1 THEN 1 ELSE NULL END AS EXCEPTIONS, --	CASE WHEN ar.VG_07 = 0 THEN 1 ELSE NULL END AS NON_EXCEPTIONS --INTO #results --FROM #ALL_RECORDS ar --LEFT JOIN VISTA_REPORTING.dbo.COUNTERPARTIES c ON c.TRD_COUNTERPARTY = ar.TRD_COUNTERPARTY --GROUP BY ar.multi_fund_id,  --		 ar.TRD_COUNTERPARTY,  --		 ar.VG_07,  --		 ar.VENUE,  --		 c.COUNTERPARTY_NAME, --		 c.COUNTERPARTY_CODE   --IF OBJECT_ID('tempdb..#non_exceptions', 'U') IS NOT NULL DROP TABLE #non_exceptions --SELECT DISTINCT --	T.MULTI_FUND_ID, --	COUNTERPARTY_NAME, --	VENUE --INTO #non_exceptions --FROM (SELECT * FROM #results WHERE NON_EXCEPTIONS is not null) t   IF OBJECT_ID('VISTA_REPORTING.DBO.DMC_DMG_COUNTERPARTY_SELECTION_NON_EXCEPTIONS', 'U') IS NULL  SELECT DISTINCT 	ar.MULTI_FUND_ID, 	c.COUNTERPARTY_NAME, 	CASE WHEN ar.VENUE is null THEN 'BILATERAL' ELSE 'TRADEWEB' END AS VENUE, 	ar.TRD_ORIG_FACE as NOTIONAL_VALUE, 	@REPORT_NAME as REPORT_NAME, 	GETDATE() as REPORT_DATE INTO VISTA_REPORTING.dbo.DMC_DMG_COUNTERPARTY_SELECTION_NON_EXCEPTIONS FROM #ALL_RECORDS ar LEFT JOIN VISTA_REPORTING.dbo.QUOTES q ON q.MULTI_FUND_ID = ar.MULTI_FUND_ID AND q.BROKER = ar.COUNTERPARTY_CODE LEFT JOIN VISTA_REPORTING.dbo.COUNTERPARTIES c ON c.COUNTERPARTY_CODE = q.BROKER  --WHERE ar.VG_07 = 0  ELSE INSERT INTO VISTA_REPORTING.dbo.DMC_DMG_COUNTERPARTY_SELECTION_NON_EXCEPTIONS SELECT DISTINCT 	ar.MULTI_FUND_ID, 	c.COUNTERPARTY_NAME, 	CASE WHEN ar.VENUE is null THEN 'BILATERAL' ELSE 'TRADEWEB' END AS VENUE, 	ar.TRD_ORIG_FACE as NOTIONAL_VALUE, 	@REPORT_NAME as REPORT_NAME, 	GETDATE() as REPORT_DATE FROM #ALL_RECORDS ar  LEFT JOIN VISTA_REPORTING.dbo.QUOTES q ON q.MULTI_FUND_ID = ar.MULTI_FUND_ID AND q.BROKER = ar.COUNTERPARTY_CODE LEFT JOIN VISTA_REPORTING.dbo.COUNTERPARTIES c ON c.COUNTERPARTY_CODE = q.BROKER ----WHERE ar.VG_07 = 0   --if OBJECT_ID('tempdb..#exceptions', 'U') is not null drop table #exceptions --	select distinct --	t.multi_fund_id, --	COUNTERPARTY_NAME, --	VENUE --	into #exceptions --	from (select * from #results where EXCEPTIONS is not null) t 	  IF OBJECT_ID('VISTA_REPORTING.DBO.DMC_DMG_COUNTERPARTY_SELECTION_EXCEPTIONS', 'U') IS NULL  SELECT DISTINCT 	ar.MULTI_FUND_ID, 	c.COUNTERPARTY_NAME, 	CASE WHEN ar.VENUE is null THEN 'BILATERAL' ELSE 'TRADEWEB' END AS VENUE, 	ar.TRD_ORIG_FACE as NOTIONAL_VALUE, 	@REPORT_NAME as REPORT_NAME, 	GETDATE() as REPORT_DATE INTO VISTA_REPORTING.dbo.DMC_DMG_COUNTERPARTY_SELECTION_EXCEPTIONS FROM #ALL_RECORDS ar LEFT JOIN VISTA_REPORTING.dbo.QUOTES q ON q.MULTI_FUND_ID = ar.MULTI_FUND_ID AND q.BROKER != ar.COUNTERPARTY_CODE LEFT JOIN VISTA_REPORTING.dbo.COUNTERPARTIES c ON c.COUNTERPARTY_CODE = q.BROKER WHERE q.QUOTE_ORIGIN = 'QUOTE' --WHERE ar.VG_07 = 1   ELSE INSERT INTO VISTA_REPORTING.DBO.DMC_DMG_COUNTERPARTY_SELECTION_EXCEPTIONS SELECT DISTINCT 	ar.MULTI_FUND_ID, 	c.COUNTERPARTY_NAME, 	CASE WHEN ar.VENUE is null THEN 'BILATERAL' ELSE 'TRADEWEB' END AS VENUE, 	ar.TRD_ORIG_FACE as NOTIONAL_VALUE, 	@REPORT_NAME as REPORT_NAME, 	GETDATE() as REPORT_DATE FROM #ALL_RECORDS ar LEFT JOIN VISTA_REPORTING.dbo.QUOTES q ON q.MULTI_FUND_ID = ar.MULTI_FUND_ID AND q.BROKER != ar.COUNTERPARTY_CODE LEFT JOIN VISTA_REPORTING.dbo.COUNTERPARTIES c ON c.COUNTERPARTY_CODE = q.BROKER WHERE q.QUOTE_ORIGIN = 'QUOTE' --WHERE ar.VG_07 = 1   IF OBJECT_ID('tempdb..#shows', 'U') IS NOT NULL DROP TABLE #shows SELECT DISTINCT 	c.COUNTERPARTY_NAME, 	ISNULL(sum(case when ar.venue IS NOT NULL then 1 else 0 end),0) as TRADEWEB, 	ISNULL(sum(case when ar.venue IS NULL then 1 else 0 end),0) as BILATERAL, 	ISNULL(sum(case when ar.venue IS NULL then 1 else 0 end),0)+ ISNULL(sum(case when ar.venue IS NOT NULL then 1 else 0 end),0) as TOTAL, 	ISNULL(sum(case when ar.venue IS NOT NULL then ar.TRD_ORIG_FACE else 0 end),0) as TRADEWEB_VALUE, 	ISNULL(sum(case when ar.venue IS NULL then ar.TRD_ORIG_FACE else 0 end),0) as BILATERAL_VALUE, 	ISNULL(sum(case when ar.venue IS NULL then ar.TRD_ORIG_FACE else 0 end),0)+ ISNULL(sum(case when ar.venue IS NOT NULL then ar.TRD_ORIG_FACE else 0 end),0) as TOTAL_VALUE INTO #shows FROM #ALL_RECORDS ar  LEFT JOIN VISTA_REPORTING.dbo.QUOTES q ON q.MULTI_FUND_ID = ar.MULTI_FUND_ID AND q.BROKER = ar.COUNTERPARTY_CODE LEFT JOIN VISTA_REPORTING.dbo.COUNTERPARTIES c ON c.COUNTERPARTY_CODE = q.BROKER WHERE q.QUOTE_ORIGIN = 'TRADE' --WHERE ar.VG_07 = 1 GROUP BY c.COUNTERPARTY_NAME   	--select distinct 	----multi_fund_id,  	--COUNTERPARTY_NAME, 	--ISNULL(sum(case when venue = 'tradeweb' then 1 else 0 end),0) as TRADEWEB, 	--ISNULL(sum(case when venue = 'bilateral' then 1 else 0 end),0) as BILATERAL, 	--ISNULL(sum(case when venue = 'bilateral' then 1 else 0 end),0)+ ISNULL(sum(case when venue = 'tradeweb' then venue else 0 end),0) as TOTAL 	----INTO #shows 	--from #exceptions  	--group by COUNTERPARTY_NAME  	----multi_fund_id,   IF OBJECT_ID('tempdb..#noshows', 'U') IS NOT NULL DROP TABLE #noshows SELECT DISTINCT 	c.COUNTERPARTY_NAME, 	ISNULL(sum(case when ar.venue IS NOT NULL then 1 else 0 end),0) as TRADEWEB, 	ISNULL(sum(case when ar.venue IS NULL then 1 else 0 end),0) as BILATERAL, 	ISNULL(sum(case when ar.venue IS NULL then 1 else 0 end),0)+ ISNULL(sum(case when ar.venue IS NOT NULL then 1 else 0 end),0) as TOTAL, 	ISNULL(sum(case when ar.venue IS NOT NULL then ar.TRD_ORIG_FACE else 0 end),0) as TRADEWEB_VALUE, 	ISNULL(sum(case when ar.venue IS NULL then ar.TRD_ORIG_FACE else 0 end),0) as BILATERAL_VALUE, 	ISNULL(sum(case when ar.venue IS NULL then ar.TRD_ORIG_FACE else 0 end),0)+ ISNULL(sum(case when ar.venue IS NOT NULL then ar.TRD_ORIG_FACE else 0 end),0) as TOTAL_VALUE INTO #noshows FROM #ALL_RECORDS ar  LEFT JOIN VISTA_REPORTING.dbo.QUOTES q ON q.MULTI_FUND_ID = ar.MULTI_FUND_ID AND q.BROKER != ar.COUNTERPARTY_CODE LEFT JOIN VISTA_REPORTING.dbo.COUNTERPARTIES c ON c.COUNTERPARTY_CODE = q.BROKER WHERE q.QUOTE_ORIGIN = 'QUOTE' --WHERE ar.VG_07 = 0 GROUP BY c.COUNTERPARTY_NAME   	--select distinct  	----multi_fund_id, 	--COUNTERPARTY_NAME, 	--ISNULL(sum(case when venue = 'tradeweb' then 1 else 0 end),0) as TRADEWEB, 	--ISNULL(sum(case when venue = 'bilateral' then 1 else 0 end),0) as BILATERAL, 	--ISNULL(sum(case when venue = 'bilateral' then 1 else 0 end),0)+ ISNULL(sum(case when venue = 'tradeweb' then venue else 0 end),0) as TOTAL  	----INTO #noshows 	--from #non_exceptions 	--group by COUNTERPARTY_NAME 	----multi_fund_id,  -- -- --  IF OBJECT_ID('VISTA_REPORTING.DBO.DMC_DMG_COUNTERPARTY_SELECTION_SHOWS', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.DBO.DMC_DMG_COUNTERPARTY_SELECTION_SHOWS select distinct  	--S.MULTI_FUND_ID, 	COALESCE(S.COUNTERPARTY_NAME, NS.COUNTERPARTY_NAME) AS COUNTERPARTY_NAME, 	CASE WHEN S.TRADEWEB IS NULL AND NS.TRADEWEB IS NOT NULL THEN 0 		ELSE 100.0*ISNULL(S.TRADEWEB,0)/NULLIF((ISNULL(S.TRADEWEB,0) + ISNULL(NS.TRADEWEB,0)),0) END  		AS TRADEWEB, 	CASE WHEN S.BILATERAL IS NULL AND NS.BILATERAL IS NOT NULL THEN 0 		ELSE 100.0*ISNULL(S.BILATERAL,0)/NULLIF((ISNULL(S.BILATERAL,0) +ISNULL(NS.BILATERAL,0)),0) END 		AS BILATERAL, 	CASE WHEN S.TOTAL IS NULL AND NS.TOTAL IS NOT NULL THEN 0 		ELSE 100.0*ISNULL(S.TOTAL,0)/NULLIF((ISNULL(S.TOTAL,0) +ISNULL(NS.TOTAL,0)),0) END 		AS TOTAL, 	CASE WHEN S.TRADEWEB_VALUE IS NULL AND NS.TRADEWEB_VALUE IS NOT NULL THEN 0 		ELSE 100.0*ISNULL(S.TRADEWEB_VALUE,0)/NULLIF((ISNULL(S.TRADEWEB_VALUE,0) + ISNULL(NS.TRADEWEB_VALUE,0)),0) END  		AS TRADEWEB_VALUE, 	CASE WHEN S.BILATERAL_VALUE IS NULL AND NS.BILATERAL_VALUE IS NOT NULL THEN 0 		ELSE 100.0*ISNULL(S.BILATERAL_VALUE,0)/NULLIF((ISNULL(S.BILATERAL_VALUE,0) +ISNULL(NS.BILATERAL_VALUE,0)),0) END 		AS BILATERAL_VALUE, 	CASE WHEN S.TOTAL_VALUE IS NULL AND NS.TOTAL_VALUE IS NOT NULL THEN 0 		ELSE 100.0*ISNULL(S.TOTAL_VALUE,0)/NULLIF((ISNULL(S.TOTAL_VALUE,0) +ISNULL(NS.TOTAL_VALUE,0)),0) END 		AS TOTAL_VALUE, 		@REPORT_NAME AS REPORT_NAME INTO VISTA_REPORTING.DBO.DMC_DMG_COUNTERPARTY_SELECTION_SHOWS from #shows S FULL OUTER JOIN #noshows NS ON S.COUNTERPARTY_NAME = NS.COUNTERPARTY_NAME GROUP BY S.COUNTERPARTY_NAME,  	--S.MULTI_FUND_ID,  	NS.COUNTERPARTY_NAME,  	S.TRADEWEB,  	S.BILATERAL,  	NS.TRADEWEB,  	NS.BILATERAL,  	S.TOTAL,  	NS.TOTAL, 	S.TRADEWEB_VALUE,  	S.BILATERAL_VALUE,  	NS.TRADEWEB_VALUE,  	NS.BILATERAL_VALUE,  	S.TOTAL_VALUE,  	NS.TOTAL_VALUE   --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: DMC_DMG_EXCEPTION_RATIONALE CreateDate: 2019-10-18 08:39:49.853 ModifyDate: 2020-07-17 16:46:16.523 --- DEFINITION START --- -- ============================================= -- Author:		<Samad, Mehreen> -- Create date: <17/04/2019> -- Description:	 -- <Generate DMC reports for EXCEPTION RATIONALE.  -- Produces 5 tables; Exception Summary, Trades  -- Summary broken down by exception type, business  -- group and then aggregated by rationale. Timely  -- Rec, NWQ, Quote Exception & Trades without Orders  -- in one table, Timely Excetion in one table,  -- Ammendments in one table and Order Agg & Order  -- Priority in one table due to different level of  -- exception. This stored procedure takes a start date,  -- end date and report name as input parameters and  -- generates the reports for these dates.> -- =============================================  -- ***************VERSION CONTROL*************** -- 07/05/2019 - MS:	 Added input parameter for --					 Report Name and field for  --					 report date. -- 08/05/2019 - MS:	 Added Business Group column. -- *********************************************  CREATE PROCEDURE [dbo].[DMC_DMG_EXCEPTION_RATIONALE]  	-- Add the parameters for the stored procedure here  	@Start_day		INT, 	@Start_Month	INT, 	@Start_Year		INT, 	@End_Day		INT,  	@End_Month		INT, 	@End_Year		INT, 	@REPORT_NAME	VARCHAR(MAX)  AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;      -- Insert statements for procedure here  	DECLARE @Start_Date	DATETIME; 	SET		@Start_Date = CONVERT(DATE,CONCAT(@Start_Year,'-',@Start_Month,'-', @Start_day)); --Turn the input start month parameter into a date  	DECLARE @End_Date0	DATETIME; 	DECLARE @End_Date	DATETIME; 	SET		@End_Date0  = CONVERT(DATETIME,CONCAT(@End_Year,'-',@End_Month, '-', @End_Day));  --Turn the input end month parameter into a date   	SET		@End_Date	= DATEADD(SECOND,86399,@End_Date0); --To make it for 23:59:59 that day. May need to update this for milliseconds.   ----Add the metadata to a table so we keep a history of all reports run IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_DMG_REPORTS_METADATA', 'U') IS NULL SELECT 	DATEPART(DAY,@Start_Date) AS [START_DAY], 	DATEPART(MONTH, @Start_Date) AS [START_MONTH], 	DATEPART(YEAR, @Start_Date) AS [START_YEAR], 	DATEPART(DAY,@End_Date)	AS [END_DAY], 	DATEPART(MONTH, @End_Date) AS [END_MONTH], 	DATEPART(YEAR, @End_Date) AS [END_YEAR], 	CONVERT(VARCHAR(70),'DMG_EXCEPTION_RATIONALE') AS [DMC_Report], 	@REPORT_NAME AS [Report_Name], 	GETDATE() AS [Run_Date] INTO VISTA_REPORTING.dbo.DMC_DMG_REPORTS_METADATA ELSE INSERT INTO VISTA_REPORTING.dbo.DMC_DMG_REPORTS_METADATA SELECT 	DATEPART(DAY,@Start_Date) AS [START_DAY], 	DATEPART(MONTH, @Start_Date) AS [START_MONTH], 	DATEPART(YEAR, @Start_Date) AS [START_YEAR], 	DATEPART(DAY,@End_Date)	AS [END_DAY], 	DATEPART(MONTH, @End_Date) AS [END_MONTH], 	DATEPART(YEAR, @End_Date) AS [END_YEAR], 	'DMG_EXCEPTION_RATIONALE' AS [DMC_Report], 	@REPORT_NAME AS [Report_Name], 	GETDATE() AS [Run_Date]   --Selecting reasons from exception reason table IF OBJECT_ID('tempdb..#vista_reason', 'U') IS  NOT NULL DROP TABLE #vista_reason SELECT DISTINCT 	e.[ID],  	e.[REASON], 	e.[STATUS], 	e.[TOUCH_COUNT] INTO #vista_reason FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE e inner join (SELECT 				[ID], 				MAX(touch_count) as [MAX_TOUCH], 				MAX(CREATED) as [MAX_CREATE_TIME] 			FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE 			WHERE [STATUS] in ('For Review','With Dealer','With Reviewer','C&A Review Request') 			--the above condition around status ensures that we only consider exceptions coming from the Dealing Desk 			--only dealing desk has the ability to flag false positive exceptions 			GROUP BY [ID]) a  on a.[ID] = e.[ID] and a.[MAX_TOUCH] = e.[TOUCH_COUNT] AND a.[MAX_CREATE_TIME] = e.[CREATED]   -- ================================================================================================= /* EXCEPTION SUMMARY TABLE	*/ -- =================================================================================================  IF OBJECT_ID('tempdb..#temp_exception_table', 'U') IS NOT NULL DROP TABLE #temp_exception_table SELECT *  INTO #temp_exception_table FROM (SELECT DISTINCT 		'1' as [EXCEPTION_TYPE_ID], 		qe.[MULTI_FUND_ID] as [EXCEPTION_ID], 		pgt.[PORTFOLIO_GROUP_NAME], 		CASE  			WHEN NULLIF(e.[REASON],'') is null and qe.[B3Q_RATIONALE] is not null THEN qe.[B3Q_RATIONALE]	 			WHEN ISNULL(e.[REASON],'') = '' THEN 'Other'  		ELSE e.[REASON] 		END AS RATIONALE, 		qe.[VG_01] as [EXCEPTION_VALUE], 		CONCAT(YEAR(qe.[CREATETIME]), ' - ', MONTH(qe.[CREATETIME])) as [DATE] 	 FROM VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_DMG_TABLE qe 	 left join #vista_reason e  	 on CONCAT(qe.[MULTI_FUND_ID],'_1') = e.[ID] 	 left join (SELECT DISTINCT MULTI_FUND_ID, TRD_ORIG_FACE, FUND FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag =1) t  	 on t.[MULTI_FUND_ID] = qe.[MULTI_FUND_ID] 	 left join VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY pgt 	 on t.[FUND] = pgt.[FUND_ID] 	 WHERE qe.[VG_01] > 0 and qe.CREATETIME between @Start_Date and @End_Date  	 UNION  	 SELECT DISTINCT 		'7' as [EXCEPTION_TYPE_ID], 		nwq.[MULTI_FUND_ID] as [EXCEPTION_ID], 		pgt.[PORTFOLIO_GROUP_NAME], 		CASE  			WHEN NULLIF(e.[REASON],'') is null and nwq.[NWQ_RATIONALE] is not null THEN nwq.[NWQ_RATIONALE]			 			WHEN ISNULL(e.[REASON],'') = '' THEN 'Other'  		ELSE e.[REASON] 		END AS RATIONALE, 		nwq.[VG_07] as [EXCEPTION_VALUE], 		CONCAT(YEAR(nwq.[VG_07_CREATETIME]), ' - ', MONTH(nwq.[VG_07_CREATETIME])) as [DATE] 	 FROM VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_DMG_TABLE nwq 	 left join #vista_reason e  	 on CONCAT(nwq.[MULTI_FUND_ID],'_7') = e.[ID] 	 left join (SELECT DISTINCT MULTI_FUND_ID, TRD_ORIG_FACE, FUND FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag =1) t  	 on t.[MULTI_FUND_ID] = nwq.[MULTI_FUND_ID] 	 left join VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY pgt 	 on t.[FUND] = pgt.[FUND_ID] 	 WHERE nwq.[VG_07] > 0 and nwq.[VG_07_CREATETIME] between @Start_Date and @End_Date 	  	 UNION  	 SELECT DISTINCT 		'9' as [EXCEPTION_TYPE_ID], 		timexec.[ORD_NUM] as [EXCEPTION_ID], 		pgt.[PORTFOLIO_GROUP_NAME], 		CASE  			WHEN ISNULL(e.[REASON],'') = '' THEN 'Other'  		ELSE e.[REASON] 		END AS RATIONALE, 		timexec.[VG_09] as [EXCEPTION_VALUE], 		CONCAT(YEAR(timexec.[CREATETIME]), ' - ', MONTH(timexec.[CREATETIME])) as [DATE] 	 FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_DMG_TABLE timexec 	 left join #vista_reason e  	 on CONCAT(timexec.[ORD_NUM],'_9') = e.[ID] 	 left join VISTA_REPORTING.dbo.ORDERS_CROSS oc  	 on oc.[PM_ORD] = timexec.[ORD_NUM] 	 left join (SELECT DISTINCT ORD_NUM, TRD_ORIG_FACE, FUND FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag =1) t  	 on t.[ORD_NUM] = oc.[TRD_ORD] 	 left join VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY pgt 	 on t.[FUND] = pgt.[FUND_ID] 	 WHERE timexec.[VG_09] > 0 and timexec.[CREATETIME] between @Start_Date and @End_Date 	 	 UNION  	 SELECT DISTINCT 		'10' as [EXCEPTION_TYPE_ID], 		timrec.[MULTI_FUND_ID] as [EXCEPTION_ID], 		pgt.[PORTFOLIO_GROUP_NAME], 		CASE  			WHEN ISNULL(e.[REASON],'') = '' THEN 'Other'  		ELSE e.[REASON] 		END AS RATIONALE, 		timrec.[VG_10] as [EXCEPTION_VALUE], 		CONCAT(YEAR(timrec.[TREC_CREATETIME]), ' - ', MONTH(timrec.[TREC_CREATETIME])) as [DATE] 	 FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_DMG_TABLE timrec 	 left join #vista_reason e  	 on CONCAT(timrec.[MULTI_FUND_ID],'_10') = e.[ID] 	 left join (SELECT DISTINCT MULTI_FUND_ID, TRD_ORIG_FACE, FUND FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag =1) t  	 on t.[MULTI_FUND_ID] = timrec.[MULTI_FUND_ID] 	 left join VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY pgt 	 on t.[FUND] = pgt.[FUND_ID] 	 WHERE timrec.[VG_10] > 0 and timrec.[TREC_CREATETIME] between @Start_Date and @End_Date 	  	 UNION 	 --Commenting this out as DMG do not need to to be reviewed 	 --SELECT DISTINCT 		--'13' as [EXCEPTION_TYPE_ID], 		--ordagg.[ORD_NUM] as [EXCEPTION_ID], 		--pgt.[PORTFOLIO_GROUP_NAME], 		--CASE  		--	WHEN ISNULL(e.[REASON],'') = '' THEN 'Other'  		--ELSE e.[REASON] 		--END AS RATIONALE, 		--ordagg.[MERGE_EXCEPTION] as [EXCEPTION_VALUE], 		--CONCAT(YEAR(ordagg.[CREATETIME]), ' - ', MONTH(ordagg.[CREATETIME])) as [DATE] 	 --FROM VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_DMG_TABLE ordagg 	 --left join #vista_reason e  	 --on CONCAT(ordagg.[ORD_NUM],'_13') = e.[ID] 	 --left join VISTA_REPORTING.dbo.ORDERS_CROSS oc  	 --on oc.[PM_ORD] = ordagg.[ORD_NUM] 	 --left join (SELECT DISTINCT ORD_NUM, TRD_ORIG_FACE, FUND FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag =1) t  	 --on t.[ORD_NUM] = oc.[TRD_ORD] 	 --left join VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY pgt 	 --on t.[FUND] = pgt.[FUND_ID] 	 --WHERE ordagg.[MERGE_EXCEPTION] > 0 and ordagg.[CREATETIME] between @Start_Date and @End_Date  	 --UNION  	 SELECT DISTINCT 		'14' as [EXCEPTION_TYPE_ID], 		ordprio.[ORD_NUM] as [EXCEPTION_ID], 		pgt.[PORTFOLIO_GROUP_NAME], 		CASE  			WHEN ISNULL(e.[REASON],'') = '' THEN 'Other'  		ELSE e.[REASON] 		END AS RATIONALE, 		ordprio.ORDER_PRIORITY_EXCEPTION as [EXCEPTION_VALUE], 		CONCAT(YEAR(ordprio.[CREATETIME]), ' - ', MONTH(ordprio.[CREATETIME])) as [DATE] 	 FROM VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_DMG_TABLE ordprio 	 left join #vista_reason e  on CONCAT(ordprio.[ORD_NUM],'_14') = e.[ID] 	 --left join VISTA_REPORTING.dbo.ORDERS_CROSS oc  on oc.TRD_ORD = ordprio.[ORD_NUM] 	 left join (SELECT DISTINCT ORD_NUM, TRD_ORIG_FACE, FUND FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag =1) t  on t.[ORD_NUM] = ordprio.ORD_NUM 	 left join VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY pgt on t.[FUND] = pgt.[FUND_ID] 	 WHERE ordprio.ORDER_PRIORITY_EXCEPTION > 0 and ordprio.[CREATETIME] between @Start_Date and @End_Date  	 UNION  	 SELECT DISTINCT 		'15' as [EXCEPTION_TYPE_ID], 		CONCAT(amm.[MULTI_FUND_ID], amm.[TOUCH_COUNT]) AS EXCEPTION_ID, 		pgt.[PORTFOLIO_GROUP_NAME], 		CASE  			WHEN NULLIF(e.[REASON],'') is null and amm.[trd_amend_type] is not null THEN amm.[trd_amend_type]	 			WHEN ISNULL(e.[REASON],'') = '' THEN 'Other'  		ELSE e.[REASON] 		END AS RATIONALE, 		amm.[VG_15] as [EXCEPTION_VALUE], 		CONCAT(YEAR(amm.[EXCEPTION_FLAG_CREATETIME]), ' - ', MONTH(amm.[EXCEPTION_FLAG_CREATETIME])) as [DATE] 	 FROM VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_DMG_TABLE amm 	 left join #vista_reason e  	 on CONCAT(amm.[MULTI_FUND_ID],'_15',e.TOUCH_COUNT) = e.[ID] 	 left join (SELECT DISTINCT MULTI_FUND_ID, TRD_ORIG_FACE, FUND FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag =1) t  	 on t.[MULTI_FUND_ID] = amm.[MULTI_FUND_ID] 	 left join VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY pgt 	 on t.[FUND] = pgt.[FUND_ID] 	 WHERE amm.[VG_15] > 0 and amm.[EXCEPTION_FLAG_CREATETIME] between @Start_Date and @End_Date  	 UNION  	 SELECT DISTINCT 		'41' as [EXCEPTION_TYPE_ID], 		trwo.[MULTI_FUND_ID] as [EXCEPTION_ID], 		pgt.[PORTFOLIO_GROUP_NAME], 		CASE  			WHEN ISNULL(e.[REASON],'') = '' THEN 'Other'  		ELSE e.[REASON] 		END AS RATIONALE, 		trwo.[VG_41] as [EXCEPTION_VALUE], 		CONCAT(YEAR(trwo.[VG_41_CREATETIME]), ' - ', MONTH(trwo.[VG_41_CREATETIME])) as [DATE] 	 FROM VISTA_STAGING.dbo.VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE trwo 	 left join #vista_reason e  	 on CONCAT(trwo.[MULTI_FUND_ID],'_41') = e.[ID] 	 left join (SELECT DISTINCT MULTI_FUND_ID, TRD_ORIG_FACE, FUND FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag =1) t  	 on t.[MULTI_FUND_ID] = trwo.[MULTI_FUND_ID] 	 left join VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY pgt 	 on t.[FUND] = pgt.[FUND_ID] 	 WHERE trwo.[VG_41] > 0 and trwo.[VG_41_CREATETIME] between @Start_Date and @End_Date  	 ) temp_exception  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_DMG_EXCEPTION_RATIONALE_SUMMARY_DATA', 'U') IS NULL   SELECT  	[EXCEPTION_TYPE_ID], 	[EXCEPTION_ID], 	CASE 		WHEN [PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP' 		WHEN [PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG' 		WHEN ([PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR [PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM' 	ELSE NULL 	END AS [BUSINESS_GROUP], 	CASE 		WHEN EXCEPTION_TYPE_ID = '1'	THEN 'Quote Exception' 		WHEN EXCEPTION_TYPE_ID = '7'	THEN 'Non-Winning Quote' 		WHEN EXCEPTION_TYPE_ID = '9'	THEN 'Timely Execution' 		WHEN EXCEPTION_TYPE_ID = '10'	THEN 'Timely Recording' 		--WHEN EXCEPTION_TYPE_ID = '13'	THEN 'Order Aggregation' 		WHEN EXCEPTION_TYPE_ID = '14'	THEN 'Order Priority' 		WHEN EXCEPTION_TYPE_ID = '15'	THEN 'Amendment Analysis' 		WHEN EXCEPTION_TYPE_ID = '41'	THEN 'Trades Without Orders' 	END AS [EXCEPTION], 	[RATIONALE], 	[EXCEPTION_VALUE], 	[DATE], 	@REPORT_NAME as REPORT_NAME, 	GETDATE() as REPORT_DATE INTO VISTA_REPORTING.dbo.DMC_DMG_EXCEPTION_RATIONALE_SUMMARY_DATA FROM #temp_exception_table  ELSE  INSERT INTO VISTA_REPORTING.dbo.DMC_DMG_EXCEPTION_RATIONALE_SUMMARY_DATA SELECT  	[EXCEPTION_TYPE_ID], 	[EXCEPTION_ID], 	CASE 		WHEN [PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP' 		WHEN [PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG' 		WHEN ([PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR [PORTFOLIO_GROUP_NAME] = 'MG_PCAP')	THEN 'MAGIM' 	ELSE NULL 	END AS [BUSINESS_GROUP], 	CASE 		WHEN EXCEPTION_TYPE_ID = '1'	THEN 'Quote Exception' 		WHEN EXCEPTION_TYPE_ID = '7'	THEN 'Non-Winning Quote' 		WHEN EXCEPTION_TYPE_ID = '9'	THEN 'Timely Execution' 		WHEN EXCEPTION_TYPE_ID = '10'	THEN 'Timely Recording' 		--WHEN EXCEPTION_TYPE_ID = '13'	THEN 'Order Aggregation' 		WHEN EXCEPTION_TYPE_ID = '14'	THEN 'Order Priority' 		WHEN EXCEPTION_TYPE_ID = '15'	THEN 'Amendment Analysis' 		WHEN EXCEPTION_TYPE_ID = '41'	THEN 'Trades Without Orders' 	END AS [EXCEPTION], 	[RATIONALE], 	[EXCEPTION_VALUE], 	[DATE], 	@REPORT_NAME as REPORT_NAME, 	GETDATE() as REPORT_DATE FROM #temp_exception_table   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_DMG_EXCEPTION_RATIONALE_SUMMARY', 'U') IS NULL  SELECT DISTINCT 	--EXCEPTION_TYPE_ID, 	CASE 		WHEN EXCEPTION_TYPE_ID = '1'	THEN 'Quote Exception' 		WHEN EXCEPTION_TYPE_ID = '7'	THEN 'Non-Winning Quote' 		WHEN EXCEPTION_TYPE_ID = '9'	THEN 'Timely Execution' 		WHEN EXCEPTION_TYPE_ID = '10'	THEN 'Timely Recording' 		--WHEN EXCEPTION_TYPE_ID = '13'	THEN 'Order Aggregation' 		WHEN EXCEPTION_TYPE_ID = '14'	THEN 'Order Priority' 		WHEN EXCEPTION_TYPE_ID = '15'	THEN 'Amendment Analysis' 		WHEN EXCEPTION_TYPE_ID = '41'	THEN 'Trades Without Orders' 	END AS [EXCEPTION], 	CASE 		WHEN [PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP' 		WHEN [PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG' 		WHEN ([PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR [PORTFOLIO_GROUP_NAME] = 'MG_PCAP')	THEN 'MAGIM' 	ELSE NULL 	END AS [BUSINESS_GROUP], 	[RATIONALE] as EXCEPTION_RATIONALE, 	COUNT(DISTINCT EXCEPTION_ID) AS EXCEPTION_COUNT, 	[DATE] INTO VISTA_REPORTING.dbo.DMC_DMG_EXCEPTION_RATIONALE_SUMMARY FROM #temp_exception_table GROUP BY 	[EXCEPTION_TYPE_ID], 	[PORTFOLIO_GROUP_NAME], 	[RATIONALE], 	[DATE]  ELSE  INSERT INTO VISTA_REPORTING.dbo.DMC_DMG_EXCEPTION_RATIONALE_SUMMARY SELECT DISTINCT 	--EXCEPTION_TYPE_ID, 	CASE 		WHEN EXCEPTION_TYPE_ID = '1'	THEN 'Quote Exception' 		WHEN EXCEPTION_TYPE_ID = '7'	THEN 'Non-Winning Quote' 		WHEN EXCEPTION_TYPE_ID = '9'	THEN 'Timely Execution' 		WHEN EXCEPTION_TYPE_ID = '10'	THEN 'Timely Recording' 		--WHEN EXCEPTION_TYPE_ID = '13'	THEN 'Order Aggregation' 		WHEN EXCEPTION_TYPE_ID = '14'	THEN 'Order Priority' 		WHEN EXCEPTION_TYPE_ID = '15'	THEN 'Amendment Analysis' 		WHEN EXCEPTION_TYPE_ID = '41'	THEN 'Trades Without Orders' 	END AS [EXCEPTION], 	CASE 		WHEN [PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP' 		WHEN [PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG' 		WHEN ([PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR [PORTFOLIO_GROUP_NAME] = 'MG_PCAP')	THEN 'MAGIM' 	ELSE NULL 	END AS [BUSINESS_GROUP], 	[RATIONALE] as EXCEPTION_RATIONALE, 	COUNT(DISTINCT EXCEPTION_ID) AS EXCEPTION_COUNT, 	[DATE] FROM #temp_exception_table GROUP BY 	[EXCEPTION_TYPE_ID], 	[PORTFOLIO_GROUP_NAME], 	[RATIONALE], 	[DATE]   -- ================================================================================================= /* TRADE SUMMARY TABLES */ -- =================================================================================================  IF OBJECT_ID('tempdb..#timrectemp', 'U') IS NOT NULL DROP TABLE #timrectemp SELECT DISTINCT 	timrec.[MULTI_FUND_ID], 	pgt.[PORTFOLIO_GROUP_NAME], 	CASE  		WHEN timrec.[VG_10] = 1  		THEN  			CASE  				WHEN ISNULL(e.[REASON],'')='' THEN 'Other' 				ELSE e.[REASON] 			END 	ELSE NULL 	END AS [TIMELY_RECORDING_REASON] INTO #timrectemp FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_DMG_TABLE timrec left join #vista_reason e  on CONCAT(timrec.[MULTI_FUND_ID],'_10') = e.[ID] left join (SELECT DISTINCT MULTI_FUND_ID, TRD_ORIG_FACE, FUND FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag =1) t  on t.[MULTI_FUND_ID] = timrec.[MULTI_FUND_ID] left join VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY pgt on t.[FUND] = pgt.[FUND_ID] WHERE VG_10 = 1 and timrec.[TREC_CREATETIME] between @Start_Date and @End_Date  IF OBJECT_ID('tempdb..#nwqtemp', 'U') IS NOT NULL DROP TABLE #nwqtemp SELECT DISTINCT 	nwq.[MULTI_FUND_ID], 	pgt.[PORTFOLIO_GROUP_NAME], 	CASE  		WHEN nwq.[VG_07] = 1  		THEN  			CASE  				WHEN NULLIF(e.[REASON],'') is null and nwq.[NWQ_RATIONALE] is not null THEN nwq.[NWQ_RATIONALE]			 				WHEN ISNULL(e.[REASON],'') = '' THEN 'Other' 				ELSE e.[REASON] 			END 	ELSE NULL 	END AS [NON_WINNING_QUOTE_REASON] INTO #nwqtemp FROM VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_DMG_TABLE nwq left join #vista_reason e  on CONCAT(nwq.[MULTI_FUND_ID],'_7') = e.[ID] left join (SELECT DISTINCT MULTI_FUND_ID, TRD_ORIG_FACE, FUND FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag =1) t  on t.[MULTI_FUND_ID] = nwq.[MULTI_FUND_ID] left join VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY pgt on t.[FUND] = pgt.[FUND_ID] WHERE VG_07 = 1 and nwq.[VG_07_CREATETIME] between @Start_Date and @End_Date   IF OBJECT_ID('tempdb..#qetemp', 'U') IS NOT NULL DROP TABLE #qetemp SELECT DISTINCT 	qe.[MULTI_FUND_ID], 	pgt.[PORTFOLIO_GROUP_NAME], 	CASE  		WHEN qe.[VG_01] = 1  		THEN  			CASE  				WHEN NULLIF(e.[REASON],'') is null and qe.[B3Q_RATIONALE] is not null THEN qe.[B3Q_RATIONALE]	 				WHEN ISNULL(e.[REASON],'') = '' THEN 'Other'  				ELSE e.[REASON] 			END 	ELSE NULL 	END AS [QUOTE_EXCEPTION_REASON] INTO #qetemp FROM VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_DMG_TABLE qe left join #vista_reason e  on CONCAT(qe.[MULTI_FUND_ID],'_1') = e.[ID] left join (SELECT DISTINCT MULTI_FUND_ID, TRD_ORIG_FACE, FUND FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag =1) t  on t.[MULTI_FUND_ID] = qe.[MULTI_FUND_ID] left join VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY pgt on t.[FUND] = pgt.[FUND_ID] WHERE VG_01 = 1 and qe.CREATETIME between @Start_Date and @End_Date   IF OBJECT_ID('tempdb..#trwotemp', 'U') IS NOT NULL DROP TABLE #trwotemp SELECT DISTINCT 	trwo.[MULTI_FUND_ID], 	pgt.[PORTFOLIO_GROUP_NAME], 	CASE  		WHEN trwo.[VG_41] = 1  		THEN  			CASE  				WHEN ISNULL(e.[REASON],'')='' THEN 'Other' 				ELSE e.[REASON] 			END 	ELSE NULL 	END AS [TRADES_WITHOUT_ORDERS_REASON] INTO #trwotemp FROM VISTA_STAGING.dbo.VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE trwo left join #vista_reason e  on CONCAT(trwo.[MULTI_FUND_ID],'_41') = e.[ID] left join (SELECT DISTINCT MULTI_FUND_ID, TRD_ORIG_FACE, FUND FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag =1) t  on t.[MULTI_FUND_ID] = trwo.[MULTI_FUND_ID] left join VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY pgt on t.[FUND] = pgt.[FUND_ID] WHERE VG_41 = 1 and trwo.[VG_41_CREATETIME] between @Start_Date and @End_Date  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_DMG_EXCEPTION_RATIONALE_TRADES', 'U') IS NULL  SELECT  	t.[MULTI_FUND_ID], 	TIMELY_RECORDING_REASON = STUFF(( 						SELECT ', ' + TIMELY_RECORDING_REASON 						FROM #timrectemp b 						WHERE timrec.MULTI_FUND_ID = b.MULTI_FUND_ID 						FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''), 	NON_WINNING_QUOTE_REASON = STUFF(( 						SELECT ', ' + NON_WINNING_QUOTE_REASON 						FROM #nwqtemp b 						WHERE nwq.MULTI_FUND_ID = b.MULTI_FUND_ID 						FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''), 	QUOTE_EXCEPTION_REASON = STUFF(( 						SELECT ', ' + QUOTE_EXCEPTION_REASON 						FROM #qetemp b 						WHERE qe.MULTI_FUND_ID = b.MULTI_FUND_ID 						FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''), 	TRADES_WITHOUT_ORDERS_REASON = STUFF(( 						SELECT ', ' + TRADES_WITHOUT_ORDERS_REASON 						FROM #trwotemp b 						WHERE trwo.MULTI_FUND_ID = b.MULTI_FUND_ID 						FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''), 	@REPORT_NAME as REPORT_NAME, 	GETDATE() as REPORT_DATE INTO VISTA_REPORTING.dbo.DMC_DMG_EXCEPTION_RATIONALE_TRADES FROM VISTA_REPORTING.dbo.TRADES t left join #timrectemp timrec on t.[MULTI_FUND_ID] = timrec.[MULTI_FUND_ID] left join #nwqtemp nwq on t.[MULTI_FUND_ID] = nwq.[MULTI_FUND_ID] left join #qetemp qe on t.[MULTI_FUND_ID] = qe.[MULTI_FUND_ID] left join #trwotemp trwo on t.[MULTI_FUND_ID] = trwo.[MULTI_FUND_ID] WHERE COALESCE(timrec.[TIMELY_RECORDING_REASON],nwq.[NON_WINNING_QUOTE_REASON],qe.[QUOTE_EXCEPTION_REASON],trwo.[TRADES_WITHOUT_ORDERS_REASON]) is not null GROUP BY t.[MULTI_FUND_ID], 		 timrec.MULTI_FUND_ID,  		 nwq.MULTI_FUND_ID, 		 qe.MULTI_FUND_ID, 		 trwo.MULTI_FUND_ID ELSE  INSERT INTO VISTA_REPORTING.dbo.DMC_DMG_EXCEPTION_RATIONALE_TRADES SELECT  	t.[MULTI_FUND_ID], 	TIMELY_RECORDING_REASON = STUFF(( 						SELECT ', ' + TIMELY_RECORDING_REASON 						FROM #timrectemp b 						WHERE timrec.MULTI_FUND_ID = b.MULTI_FUND_ID 						FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''), 	NON_WINNING_QUOTE_REASON = STUFF(( 						SELECT ', ' + NON_WINNING_QUOTE_REASON 						FROM #nwqtemp b 						WHERE nwq.MULTI_FUND_ID = b.MULTI_FUND_ID 						FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''), 	QUOTE_EXCEPTION_REASON = STUFF(( 						SELECT ', ' + QUOTE_EXCEPTION_REASON 						FROM #qetemp b 						WHERE qe.MULTI_FUND_ID = b.MULTI_FUND_ID 						FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''), 	TRADES_WITHOUT_ORDERS_REASON = STUFF(( 						SELECT ', ' + TRADES_WITHOUT_ORDERS_REASON 						FROM #trwotemp b 						WHERE trwo.MULTI_FUND_ID = b.MULTI_FUND_ID 						FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''), 	@REPORT_NAME as REPORT_NAME, 	GETDATE() as REPORT_DATE FROM VISTA_REPORTING.dbo.TRADES t left join #timrectemp timrec on t.[MULTI_FUND_ID] = timrec.[MULTI_FUND_ID] left join #nwqtemp nwq on t.[MULTI_FUND_ID] = nwq.[MULTI_FUND_ID] left join #qetemp qe on t.[MULTI_FUND_ID] = qe.[MULTI_FUND_ID] left join #trwotemp trwo on t.[MULTI_FUND_ID] = trwo.[MULTI_FUND_ID] WHERE COALESCE(timrec.[TIMELY_RECORDING_REASON],nwq.[NON_WINNING_QUOTE_REASON],qe.[QUOTE_EXCEPTION_REASON],trwo.[TRADES_WITHOUT_ORDERS_REASON]) is not null GROUP BY t.[MULTI_FUND_ID], 		 timrec.MULTI_FUND_ID,  		 nwq.MULTI_FUND_ID, 		 qe.MULTI_FUND_ID, 		 trwo.MULTI_FUND_ID   IF OBJECT_ID('tempdb..#timexectemp', 'U') IS NOT NULL DROP TABLE #timexectemp SELECT DISTINCT  	oc.[PM_ORD], 	timexec.[ORD_NUM], 	CASE  		WHEN timexec.[VG_09] = 1  		THEN  			CASE  				WHEN ISNULL(e.[REASON],'')='' THEN 'Other' 				ELSE e.[REASON] 			END 	ELSE NULL 	END AS [TIMELY_EXECUTION_REASON] INTO #timexectemp FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_DMG_TABLE timexec  left join #vista_reason e on CONCAT(timexec.[ORD_NUM],'_9') = e.[ID] left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on timexec.[ORD_NUM] = oc.[TRD_ORD] WHERE VG_09 = 1 and timexec.[CREATETIME] between @Start_Date and @End_Date   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_DMG_EXCEPTION_RATIONALE_TRADES_TIMELY_EXECUTION', 'U') IS NULL  SELECT  	timexec.[PM_ORD], 	timexec.[ORD_NUM], 	TIMELY_EXECUTION_REASON = STUFF(( 						SELECT ', ' + TIMELY_EXECUTION_REASON 						FROM #timexectemp b 						WHERE timexec.ORD_NUM = b.ORD_NUM 						FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''), 	@REPORT_NAME as REPORT_NAME, 	GETDATE() as REPORT_DATE INTO VISTA_REPORTING.dbo.DMC_DMG_EXCEPTION_RATIONALE_TRADES_TIMELY_EXECUTION FROM #timexectemp timexec GROUP BY timexec.PM_ORD, timexec.ORD_NUM  ELSE  INSERT INTO VISTA_REPORTING.dbo.DMC_DMG_EXCEPTION_RATIONALE_TRADES_TIMELY_EXECUTION SELECT  	timexec.[PM_ORD], 	timexec.[ORD_NUM], 	TIMELY_EXECUTION_REASON = STUFF(( 						SELECT ', ' + TIMELY_EXECUTION_REASON 						FROM #timexectemp b 						WHERE timexec.ORD_NUM = b.ORD_NUM 						FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''), 	@REPORT_NAME as REPORT_NAME, 	GETDATE() as REPORT_DATE FROM #timexectemp timexec GROUP BY timexec.PM_ORD, timexec.ORD_NUM   IF OBJECT_ID('tempdb..#ammtemp', 'U') IS NOT NULL DROP TABLE #ammtemp SELECT DISTINCT  	CONCAT(amm.[MULTI_FUND_ID], amm.[TOUCH_COUNT]) AS [MULTI_FUND_ID], 	CASE  		WHEN amm.[VG_15] = 1  		THEN  			CASE  				WHEN ISNULL(e.[REASON],'')='' THEN 'Other' 				ELSE e.[REASON] 			END 	ELSE NULL 	END AS [AMENDMENT_FLAG_REASON] INTO #ammtemp FROM VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_DMG_TABLE amm left join #vista_reason e  on CONCAT(amm.[MULTI_FUND_ID],'_15',e.[TOUCH_COUNT]) = e.[ID] WHERE VG_15 = 1 and amm.[EXCEPTION_FLAG_CREATETIME] between @Start_Date and @End_Date   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_DMG_EXCEPTION_RATIONALE_TRADES_AMENDMENTS', 'U') IS NULL  SELECT  	amm.[MULTI_FUND_ID], 	AMENDMENT_FLAG_REASON = STUFF(( 						SELECT ', ' + AMENDMENT_FLAG_REASON 						FROM #ammtemp b 						WHERE amm.MULTI_FUND_ID = b.MULTI_FUND_ID 						FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''), 	@REPORT_NAME as REPORT_NAME, 	GETDATE() as REPORT_DATE INTO VISTA_REPORTING.dbo.DMC_DMG_EXCEPTION_RATIONALE_TRADES_AMENDMENTS FROM #ammtemp amm GROUP BY amm.MULTI_FUND_ID  ELSE   INSERT INTO VISTA_REPORTING.dbo.DMC_DMG_EXCEPTION_RATIONALE_TRADES_AMENDMENTS SELECT  	amm.[MULTI_FUND_ID], 	AMENDMENT_FLAG_REASON = STUFF(( 						SELECT ', ' + AMENDMENT_FLAG_REASON 						FROM #ammtemp b 						WHERE amm.MULTI_FUND_ID = b.MULTI_FUND_ID 						FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''), 	@REPORT_NAME as REPORT_NAME, 	GETDATE() as REPORT_DATE FROM #ammtemp amm GROUP BY amm.MULTI_FUND_ID   --IF OBJECT_ID('tempdb..#ordaggtemp', 'U') IS NOT NULL DROP TABLE #ordaggtemp --SELECT DISTINCT --	ordagg.[ORD_NUM], --	CASE  --		WHEN ordagg.[MERGE_EXCEPTION] = 1  --		THEN  --			CASE  --				WHEN ISNULL(e.[REASON],'') = '' THEN 'Other'  --				ELSE e.[REASON] --			END  --	ELSE NULL --	END AS [ORDER_AGGREGATION_REASON] --INTO #ordaggtemp --FROM VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_DMG_TABLE ordagg --left join #vista_reason e  --on CONCAT(ordagg.[ORD_NUM],'_13') = e.[ID] --WHERE ordagg.[MERGE_EXCEPTION] > 0 and ordagg.[CREATETIME] between @Start_Date and @End_Date  IF OBJECT_ID('tempdb..#ordpriotemp', 'U') IS NOT NULL DROP TABLE #ordpriotemp SELECT DISTINCT 	oc.PM_ORD AS ORD_NUM, 	ordprio.[ORD_NUM] AS TRD_ORD, 	CASE  		WHEN ordprio.[ORDER_PRIORITY_EXCEPTION] = 1  		THEN  			CASE  				WHEN ISNULL(e.[REASON],'') = '' THEN 'Other'  				ELSE e.[REASON] 			END  	ELSE NULL 	END AS [ORDER_PRIORITY_REASON] INTO #ordpriotemp FROM VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_DMG_TABLE ordprio left join #vista_reason e on CONCAT(ordprio.[ORD_NUM],'_14') = e.[ID] left join VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = ordprio.ORD_NUM WHERE ordprio.[ORDER_PRIORITY_EXCEPTION] > 0 and ordprio.[CREATETIME] between @Start_Date and @End_Date  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_DMG_EXCEPTION_RATIONALE_TRADES_ORD_AGG_PRIO', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.DMC_DMG_EXCEPTION_RATIONALE_TRADES_ORD_AGG_PRIO SELECT  	ordprio.ORD_NUM AS PM_ORD, 	t.[ORD_NUM], 	--ORDER_AGGREGATION_REASON = STUFF(( 	--					SELECT ', ' + ORDER_AGGREGATION_REASON 	--					FROM #ordaggtemp b 	--					WHERE ordagg.ORD_NUM = b.ORD_NUM 	--					FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''), 	ORDER_PRIORITY_REASON = STUFF(( 						SELECT ', ' + ORDER_PRIORITY_REASON 						FROM #ordpriotemp b 						WHERE ordprio.ORD_NUM = b.ORD_NUM 						FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''), 	@REPORT_NAME as REPORT_NAME, 	GETDATE() as REPORT_DATE INTO VISTA_REPORTING.dbo.DMC_DMG_EXCEPTION_RATIONALE_TRADES_ORD_AGG_PRIO FROM VISTA_REPORTING.dbo.TRADES t --left join #ordaggtemp ordagg --on t.[ORD_NUM] = ordagg.[ORD_NUM] left join #ordpriotemp ordprio on t.[ORD_NUM] = ordprio.TRD_ORD WHERE ordprio.[ORDER_PRIORITY_REASON] is not null GROUP BY t.ORD_NUM, 		 --ordagg.ORD_NUM,  		 ordprio.ORD_NUM  END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: DMC_DMG_TRADES_SUMMARY CreateDate: 2019-10-18 08:39:49.917 ModifyDate: 2020-07-17 16:46:16.603 --- DEFINITION START --- -- ============================================= -- Author:		<Samad, Mehreen> -- Create date: <10/04/2019> -- Description:	 -- <Generate DMC reports for TRADES SUMMARY.  -- Produces 4 tables; Trades by Asset Type, Trades -- by Exception, Notional Value of Trades by Asset  -- Type & Notional Value of Trades by Exception.  -- This stored procedure takes a start date, end  -- date AND report name as input parameters AND  -- generates the reports for these dates.> -- =============================================  -- ***************VERSION CONTROL*************** -- 07/05/2019 - MS:	 Added input parameter for --					 Report Name AND field for  --					 report date. -- 08/05/2019 - MS:	 Added Business Group column. -- *********************************************  CREATE PROCEDURE [dbo].[DMC_DMG_TRADES_SUMMARY]  	-- Add the parameters for the stored procedure here  	@Start_day		INT, 	@Start_Month	INT, 	@Start_Year		INT, 	@End_Day		INT,  	@End_Month		INT, 	@End_Year		INT, 	@REPORT_NAME	VARCHAR(MAX)  AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;      -- Insert statements for procedure here  	DECLARE @Start_Date	DATETIME; 		SET	@Start_Date = CONVERT(DATE,CONCAT(@Start_Year,'-',@Start_Month,'-', @Start_day)); --Turn the input start month parameter into a date  	DECLARE @End_Date0	DATETIME; 	DECLARE @End_Date	DATETIME; 		SET	@End_Date0  = CONVERT(DATETIME,CONCAT(@End_Year,'-',@End_Month, '-', @End_Day));  --Turn the input end month parameter into a date   		SET	@End_Date	= DATEADD(SECOND,86399,@End_Date0); --To make it for 23:59:59 that day. May need to update this for milliseconds.    ----Add the metadata to a table so we keep a history of all reports run IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_DMG_REPORTS_METADATA', 'U') IS NULL SELECT 	DATEPART(DAY,@Start_Date) AS [START_DAY], 	DATEPART(MONTH, @Start_Date) AS [START_MONTH], 	DATEPART(YEAR, @Start_Date) AS [START_YEAR], 	DATEPART(DAY,@End_Date)	AS [END_DAY], 	DATEPART(MONTH, @End_Date) AS [END_MONTH], 	DATEPART(YEAR, @End_Date) AS [END_YEAR], 	CONVERT(VARCHAR(70),'DMG_TRADES_SUMMARY') AS [DMC_Report], 	@REPORT_NAME AS [Report_Name], 	GETDATE() AS [Run_Date] INTO VISTA_REPORTING.dbo.DMC_DMG_REPORTS_METADATA ELSE INSERT INTO VISTA_REPORTING.dbo.DMC_DMG_REPORTS_METADATA SELECT 	DATEPART(DAY,@Start_Date) AS [START_DAY], 	DATEPART(MONTH, @Start_Date) AS [START_MONTH], 	DATEPART(YEAR, @Start_Date) AS [START_YEAR], 	DATEPART(DAY,@End_Date)	AS [END_DAY], 	DATEPART(MONTH, @End_Date) AS [END_MONTH], 	DATEPART(YEAR, @End_Date) AS [END_YEAR], 	'DMG_TRADES_SUMMARY' AS [DMC_Report], 	@REPORT_NAME AS [Report_Name], 	GETDATE() AS [Run_Date]   -- ============================================================================== /* NUMBER OF TRADES TABLE */ -- ==============================================================================  IF OBJECT_ID('tempdb..#temp', 'U') IS NOT NULL DROP TABLE #temp SELECT DISTINCT 	t.[MULTI_FUND_ID], 	pgt.[PORTFOLIO_GROUP_NAME], 	pr.[INST_TYPE], 	CONCAT(YEAR(t.[EXECUTION_TIME]), ' - ', MONTH(t.[EXECUTION_TIME])) as [DATE], 	pr.[DEALING_DESK] INTO #temp FROM Vista_Reporting.dbo.TRADES t left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr on t.[MULTI_FUND_ID] = pr.[MULTI_FUND_ID] left join VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY pgt on t.[FUND] = pgt.[FUND_ID] WHERE pr.DEALING_DESK = 'DMG' AND t.[EXECUTION_TIME] BETWEEN @Start_Date AND @End_Date 	AND t.FinalFlag=1 	AND ISNULL(t.TRD_STATUS, '') != 'C'   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_DMG_TRADES_SUMMARY_BY_INST_TYPE_DATA', 'U') IS NULL SELECT DISTINCT 	[MULTI_FUND_ID], 	CASE 		WHEN [PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP' 		WHEN [PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG' 		WHEN ([PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR [PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM' 	ELSE NULL 	END AS [BUSINESS_GROUP], 	[INST_TYPE], 	[DATE], 	@REPORT_NAME as REPORT_NAME, 	GETDATE() as REPORT_DATE INTO VISTA_REPORTING.dbo.DMC_DMG_TRADES_SUMMARY_BY_INST_TYPE_DATA FROM #temp  ELSE  INSERT INTO VISTA_REPORTING.dbo.DMC_DMG_TRADES_SUMMARY_BY_INST_TYPE_DATA SELECT DISTINCT 	[MULTI_FUND_ID], 	CASE 		WHEN [PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP' 		WHEN [PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG' 		WHEN ([PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR [PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM' 	ELSE NULL 	END AS [BUSINESS_GROUP], 	[INST_TYPE], 	[DATE], 	@REPORT_NAME as REPORT_NAME, 	GETDATE() as REPORT_DATE FROM #temp   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_DMG_TRADES_SUMMARY_BY_INST_TYPE', 'U') IS NULL  SELECT DISTINCT 	INST_TYPE, 	CASE 		WHEN [PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN COUNT(DISTINCT [MULTI_FUND_ID]) 	ELSE null 	END AS PRUCAP, 	CASE 		WHEN [PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN COUNT(DISTINCT [MULTI_FUND_ID]) 	ELSE null 	END AS PPMG, 	CASE 		WHEN ([PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR [PORTFOLIO_GROUP_NAME] = 'MG_PCAP')	THEN COUNT(DISTINCT [MULTI_FUND_ID]) 	ELSE null 	END AS MAGIM, 	COUNT(DISTINCT MULTI_FUND_ID) as TOTAL_TRADE_COUNT, 	[DATE] INTO VISTA_REPORTING.dbo.DMC_DMG_TRADES_SUMMARY_BY_INST_TYPE FROM #temp GROUP BY INST_TYPE,  		 PORTFOLIO_GROUP_NAME, 		 [DATE]  ELSE  INSERT INTO VISTA_REPORTING.dbo.DMC_DMG_TRADES_SUMMARY_BY_INST_TYPE SELECT DISTINCT 	INST_TYPE, 	CASE 		WHEN [PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN COUNT(DISTINCT [MULTI_FUND_ID]) 	ELSE null 	END AS PRUCAP, 	CASE 		WHEN [PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN COUNT(DISTINCT [MULTI_FUND_ID]) 	ELSE null 	END AS PPMG, 	CASE 		WHEN ([PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR [PORTFOLIO_GROUP_NAME] = 'MG_PCAP')	THEN COUNT(DISTINCT [MULTI_FUND_ID]) 	ELSE null 	END AS MAGIM, 	COUNT(DISTINCT MULTI_FUND_ID) as TOTAL_TRADE_COUNT, 	[DATE] FROM #temp GROUP BY INST_TYPE,  		 PORTFOLIO_GROUP_NAME, 		 [DATE]  -- ============================================================================== /* COBS EXCEPTIONS BY NUMBER OF TRADES TABLE */ -- ==============================================================================  IF OBJECT_ID('tempdb..#temp_exception_table', 'U') IS NOT NULL DROP TABLE #temp_exception_table SELECT *  INTO #temp_exception_table FROM (SELECT DISTINCT 		'1' as [EXCEPTION_TYPE_ID], 		qe.[MULTI_FUND_ID] as [EXCEPTION_ID], 		pgt.[PORTFOLIO_GROUP_NAME], 		qe.[VG_01] as [EXCEPTION_VALUE], 		CONCAT(YEAR(qe.[CREATETIME]), ' - ', MONTH(qe.[CREATETIME])) as [DATE] 	 FROM VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_DMG_TABLE qe 	 left join (SELECT DISTINCT MULTI_FUND_ID, TRD_ORIG_FACE, FUND FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag =1) t  	 on t.[MULTI_FUND_ID] = qe.[MULTI_FUND_ID] 	 left join VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY pgt 	 on t.[FUND] = pgt.[FUND_ID] 	 WHERE qe.[VG_01] > 0 AND qe.[CREATETIME] BETWEEN @Start_Date AND @End_Date  	 UNION  	 SELECT DISTINCT 		'7' as [EXCEPTION_TYPE_ID], 		nwq.[MULTI_FUND_ID] as [EXCEPTION_ID], 		pgt.[PORTFOLIO_GROUP_NAME], 		nwq.[VG_07] as [EXCEPTION_VALUE], 		CONCAT(YEAR(nwq.[VG_07_CREATETIME]), ' - ', MONTH(nwq.[VG_07_CREATETIME])) as [DATE] 	 FROM VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_DMG_TABLE nwq 	 left join (SELECT DISTINCT MULTI_FUND_ID, TRD_ORIG_FACE, FUND FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag =1) t  	 on t.[MULTI_FUND_ID] = nwq.[MULTI_FUND_ID] 	 left join VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY pgt 	 on t.[FUND] = pgt.[FUND_ID] 	 WHERE nwq.[VG_07] > 0 AND nwq.[VG_07_CREATETIME] BETWEEN @Start_Date AND @End_Date 	  	 UNION  	 SELECT DISTINCT 		'9' as [EXCEPTION_TYPE_ID], 		timexec.[ORD_NUM] as [EXCEPTION_ID], 		pgt.[PORTFOLIO_GROUP_NAME], 		timexec.[VG_09] as [EXCEPTION_VALUE], 		CONCAT(YEAR(timexec.[CREATETIME]), ' - ', MONTH(timexec.[CREATETIME])) as [DATE] 	 FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_DMG_TABLE timexec 	 left join VISTA_REPORTING.dbo.ORDERS_CROSS oc  	 on oc.[PM_ORD] = timexec.[ORD_NUM] 	 left join (SELECT DISTINCT ORD_NUM, TRD_ORIG_FACE, FUND FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag =1) t  	 on t.[ORD_NUM] = oc.[TRD_ORD] 	 left join VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY pgt 	 on t.[FUND] = pgt.[FUND_ID] 	 WHERE timexec.[VG_09] > 0 AND timexec.[CREATETIME] BETWEEN @Start_Date AND @End_Date 	 	 UNION  	 SELECT DISTINCT 		'10' as [EXCEPTION_TYPE_ID], 		timrec.[MULTI_FUND_ID] as [EXCEPTION_ID], 		pgt.[PORTFOLIO_GROUP_NAME], 		timrec.[VG_10] as [EXCEPTION_VALUE], 		CONCAT(YEAR(timrec.[TREC_CREATETIME]), ' - ', MONTH(timrec.[TREC_CREATETIME])) as [DATE] 	 FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_DMG_TABLE timrec 	 left join (SELECT DISTINCT MULTI_FUND_ID, TRD_ORIG_FACE, FUND FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag =1) t  	 on t.[MULTI_FUND_ID] = timrec.[MULTI_FUND_ID] 	 left join VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY pgt 	 on t.[FUND] = pgt.[FUND_ID] 	 WHERE timrec.[VG_10] > 0 AND timrec.[TREC_CREATETIME] BETWEEN @Start_Date AND @End_Date 	  	 --UNION  	 --SELECT DISTINCT 		--'13' as [EXCEPTION_TYPE_ID], 		--ordagg.[ORD_NUM] as [EXCEPTION_ID], 		--pgt.[PORTFOLIO_GROUP_NAME], 		--ordagg.[MERGE_EXCEPTION] as [EXCEPTION_VALUE], 		--CONCAT(YEAR(ordagg.[CREATETIME]), ' - ', MONTH(ordagg.[CREATETIME])) as [DATE] 	 --FROM VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_DMG_TABLE ordagg 	 --left join VISTA_REPORTING.dbo.ORDERS_CROSS oc  	 --on oc.[PM_ORD] = ordagg.[ORD_NUM] 	 --left join (SELECT DISTINCT ORD_NUM, TRD_ORIG_FACE, FUND FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag =1) t  	 --on t.[ORD_NUM] = oc.[TRD_ORD] 	 --left join VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY pgt 	 --on t.[FUND] = pgt.[FUND_ID] 	 --WHERE ordagg.[MERGE_EXCEPTION] > 0 AND ordagg.[CREATETIME] BETWEEN @Start_Date AND @End_Date  	 UNION  	 SELECT DISTINCT 		'14' as [EXCEPTION_TYPE_ID], 		ordprio.[ORD_NUM] as [EXCEPTION_ID], 		pgt.[PORTFOLIO_GROUP_NAME], 		ordprio.[ORDER_PRIORITY_EXCEPTION] as [EXCEPTION_VALUE], 		CONCAT(YEAR(ordprio.[CREATETIME]), ' - ', MONTH(ordprio.[CREATETIME])) as [DATE] 	 FROM VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_DMG_TABLE ordprio 	 --left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on oc.[PM_ORD] = ordprio.[ORD_NUM] 	 left join (SELECT DISTINCT ORD_NUM, TRD_ORIG_FACE, FUND FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag =1) t  on t.[ORD_NUM] = ordprio.ORD_NUM 	 left join VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY pgt on t.[FUND] = pgt.[FUND_ID] 	 WHERE ordprio.[ORDER_PRIORITY_EXCEPTION] > 0 AND ordprio.[CREATETIME] BETWEEN @Start_Date AND @End_Date  	 UNION  	 SELECT DISTINCT 		'15' as [EXCEPTION_TYPE_ID], 		CONCAT(amm.[MULTI_FUND_ID],amm.[TOUCH_COUNT]) as [EXCEPTION_ID], 		pgt.[PORTFOLIO_GROUP_NAME], 		amm.[VG_15] as [EXCEPTION_VALUE], 		CONCAT(YEAR(amm.[EXCEPTION_FLAG_CREATETIME]), ' - ', MONTH(amm.[EXCEPTION_FLAG_CREATETIME])) as [DATE] 	 FROM VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_DMG_TABLE amm 	 left join (SELECT DISTINCT MULTI_FUND_ID, TRD_ORIG_FACE, FUND FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag =1) t  	 on t.[MULTI_FUND_ID] = amm.[MULTI_FUND_ID] 	 left join VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY pgt 	 on t.[FUND] = pgt.[FUND_ID] 	 WHERE amm.[VG_15] > 0 AND amm.[EXCEPTION_FLAG_CREATETIME] BETWEEN @Start_Date AND @End_Date  	 UNION  	 SELECT DISTINCT 		'41' as [EXCEPTION_TYPE_ID], 		trwo.[MULTI_FUND_ID] as [EXCEPTION_ID], 		pgt.[PORTFOLIO_GROUP_NAME], 		trwo.[VG_41] as [EXCEPTION_VALUE], 		CONCAT(YEAR(trwo.[VG_41_CREATETIME]), ' - ', MONTH(trwo.[VG_41_CREATETIME])) as [DATE] 	 FROM VISTA_STAGING.dbo.VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE trwo 	 left join (SELECT DISTINCT MULTI_FUND_ID, TRD_ORIG_FACE, FUND FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag =1) t  	 on t.[MULTI_FUND_ID] = trwo.[MULTI_FUND_ID] 	 left join VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY pgt 	 on t.[FUND] = pgt.[FUND_ID] 	 WHERE trwo.[VG_41] > 0 AND trwo.[VG_41_CREATETIME] BETWEEN @Start_Date AND @End_Date  	 ) temp_exception  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_DMG_TRADES_SUMMARY_BY_EXCEPTIONS_DATA', 'U') IS NULL  SELECT DISTINCT 	[EXCEPTION_TYPE_ID], 	[EXCEPTION_ID], 	CASE 		WHEN [PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP' 		WHEN [PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG' 		WHEN ([PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR [PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM' 	ELSE NULL 	END AS [BUSINESS_GROUP], 	CASE 		WHEN EXCEPTION_TYPE_ID = '1'	THEN 'Quote Exception' 		WHEN EXCEPTION_TYPE_ID = '7'	THEN 'Non-Winning Quote' 		WHEN EXCEPTION_TYPE_ID = '9'	THEN 'Timely Execution' 		WHEN EXCEPTION_TYPE_ID = '10'	THEN 'Timely Recording' 		--WHEN EXCEPTION_TYPE_ID = '13'	THEN 'Order Aggregation' 		WHEN EXCEPTION_TYPE_ID = '14'	THEN 'Order Priority' 		WHEN EXCEPTION_TYPE_ID = '15'	THEN 'Amendment Analysis' 		WHEN EXCEPTION_TYPE_ID = '41'	THEN 'Trades Without Orders' 	END AS [EXCEPTION_TYPE], 	[EXCEPTION_VALUE], 	[DATE], 	@REPORT_NAME as REPORT_NAME, 	GETDATE() as REPORT_DATE INTO VISTA_REPORTING.dbo.DMC_DMG_TRADES_SUMMARY_BY_EXCEPTIONS_DATA FROM #temp_exception_table  ELSE  INSERT INTO VISTA_REPORTING.dbo.DMC_DMG_TRADES_SUMMARY_BY_EXCEPTIONS_DATA SELECT DISTINCT 	[EXCEPTION_TYPE_ID], 	[EXCEPTION_ID], 	CASE 		WHEN [PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP' 		WHEN [PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG' 		WHEN ([PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR [PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM' 	ELSE NULL 	END AS [BUSINESS_GROUP], 	CASE 		WHEN EXCEPTION_TYPE_ID = '1'	THEN 'Quote Exception' 		WHEN EXCEPTION_TYPE_ID = '7'	THEN 'Non-Winning Quote' 		WHEN EXCEPTION_TYPE_ID = '9'	THEN 'Timely Execution' 		WHEN EXCEPTION_TYPE_ID = '10'	THEN 'Timely Recording' 		--WHEN EXCEPTION_TYPE_ID = '13'	THEN 'Order Aggregation' 		WHEN EXCEPTION_TYPE_ID = '14'	THEN 'Order Priority' 		WHEN EXCEPTION_TYPE_ID = '15'	THEN 'Amendment Analysis' 		WHEN EXCEPTION_TYPE_ID = '41'	THEN 'Trades Without Orders' 	END AS [EXCEPTION_TYPE], 	[EXCEPTION_VALUE], 	[DATE], 	@REPORT_NAME as REPORT_NAME, 	GETDATE() as REPORT_DATE FROM #temp_exception_table   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_DMG_TRADES_SUMMARY_BY_EXCEPTIONS', 'U') IS NULL SELECT DISTINCT 	CASE 		WHEN EXCEPTION_TYPE_ID = '1'	THEN 'Quote Exception' 		WHEN EXCEPTION_TYPE_ID = '7'	THEN 'Non-Winning Quote' 		WHEN EXCEPTION_TYPE_ID = '9'	THEN 'Timely Execution' 		WHEN EXCEPTION_TYPE_ID = '10'	THEN 'Timely Recording' 		--WHEN EXCEPTION_TYPE_ID = '13'	THEN 'Order Aggregation' 		WHEN EXCEPTION_TYPE_ID = '14'	THEN 'Order Priority' 		WHEN EXCEPTION_TYPE_ID = '15'	THEN 'Amendment Analysis' 		WHEN EXCEPTION_TYPE_ID = '41'	THEN 'Trades Without Orders' 	END AS [EXCEPTION_TYPE], 	CASE 		WHEN [PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN COUNT(DISTINCT EXCEPTION_ID) 	ELSE null 	END AS PRUCAP, 	CASE 		WHEN [PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN COUNT(DISTINCT EXCEPTION_ID) 	ELSE null 	END AS PPMG, 	CASE 		WHEN ([PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR [PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN COUNT(DISTINCT EXCEPTION_ID) 	ELSE null 	END AS MAGIM, 	COUNT(DISTINCT EXCEPTION_ID) AS TOTAL_EXCEPTION_COUNT, 	[DATE] INTO VISTA_REPORTING.dbo.DMC_DMG_TRADES_SUMMARY_BY_EXCEPTIONS FROM #temp_exception_table GROUP BY 	[EXCEPTION_TYPE_ID], 	[PORTFOLIO_GROUP_NAME], 	[DATE]  ELSE  INSERT INTO VISTA_REPORTING.dbo.DMC_DMG_TRADES_SUMMARY_BY_EXCEPTIONS SELECT DISTINCT 	CASE 		WHEN EXCEPTION_TYPE_ID = '1'	THEN 'Quote Exception' 		WHEN EXCEPTION_TYPE_ID = '7'	THEN 'Non-Winning Quote' 		WHEN EXCEPTION_TYPE_ID = '9'	THEN 'Timely Execution' 		WHEN EXCEPTION_TYPE_ID = '10'	THEN 'Timely Recording' 		--WHEN EXCEPTION_TYPE_ID = '13'	THEN 'Order Aggregation' 		WHEN EXCEPTION_TYPE_ID = '14'	THEN 'Order Priority' 		WHEN EXCEPTION_TYPE_ID = '15'	THEN 'Amendment Analysis' 		WHEN EXCEPTION_TYPE_ID = '41'	THEN 'Trades Without Orders' 	END AS [EXCEPTION_TYPE], 	CASE 		WHEN [PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN COUNT(DISTINCT EXCEPTION_ID) 	ELSE null 	END AS PRUCAP, 	CASE 		WHEN [PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN COUNT(DISTINCT EXCEPTION_ID) 	ELSE null 	END AS PPMG, 	CASE 		WHEN ([PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR [PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN COUNT(DISTINCT EXCEPTION_ID) 	ELSE null 	END AS MAGIM, 	COUNT(DISTINCT EXCEPTION_ID) AS TOTAL_EXCEPTION_COUNT, 	[DATE] FROM #temp_exception_table GROUP BY 	[EXCEPTION_TYPE_ID], 	[PORTFOLIO_GROUP_NAME], 	[DATE]  -- ============================================================================== /* NOTIONAL OF TRADES TABLE */ -- ==============================================================================  IF OBJECT_ID('tempdb..#temp_n', 'U') IS NOT NULL DROP TABLE #temp_n SELECT DISTINCT 	t.[MULTI_FUND_ID], 	pgt.[PORTFOLIO_GROUP_NAME], 	ABS(TRD_ORIG_FACE) as [NOTIONAL_VALUE], 	pr.[INST_TYPE], 	CONCAT(YEAR(t.[EXECUTION_TIME]), ' - ', MONTH(t.[EXECUTION_TIME])) as [DATE] INTO #temp_n FROM VISTA_REPORTING.dbo.TRADES t left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr on t.[MULTI_FUND_ID] = pr.[MULTI_FUND_ID] left join VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY pgt on t.[FUND] = pgt.[FUND_ID] WHERE pr.DEALING_DESK = 'DMG' AND t.[EXECUTION_TIME] BETWEEN @Start_Date AND @End_Date 	AND t.FinalFlag = 1  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_DMG_TRADES_SUMMARY_NOTIONAL_BY_INST_TYPE_DATA', 'U') IS NULL  SELECT DISTINCT 	[MULTI_FUND_ID], 	CASE 		WHEN [PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP' 		WHEN [PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG' 		WHEN ([PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR [PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM' 	ELSE NULL 	END AS [BUSINESS_GROUP], 	CONVERT(DECIMAL(38,2),(CONVERT(DECIMAL(18,2), ROUND((NOTIONAL_VALUE/1000000),2)))) AS [NOTIONAL_VALUE], 	[INST_TYPE], 	[DATE], 	@REPORT_NAME as REPORT_NAME, 	GETDATE() as REPORT_DATE INTO VISTA_REPORTING.dbo.DMC_DMG_TRADES_SUMMARY_NOTIONAL_BY_INST_TYPE_DATA FROM #temp_n  ELSE INSERT INTO VISTA_REPORTING.dbo.DMC_DMG_TRADES_SUMMARY_NOTIONAL_BY_INST_TYPE_DATA SELECT DISTINCT 	[MULTI_FUND_ID], 	CASE 		WHEN [PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP' 		WHEN [PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG' 		WHEN ([PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR [PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM' 	ELSE NULL 	END AS [BUSINESS_GROUP], 	CONVERT(DECIMAL(38,2),(CONVERT(DECIMAL(18,2), ROUND((NOTIONAL_VALUE/1000000),2)))) AS [NOTIONAL_VALUE], 	[INST_TYPE], 	[DATE], 	@REPORT_NAME as REPORT_NAME, 	GETDATE() as REPORT_DATE FROM #temp_n   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_DMG_TRADES_SUMMARY_NOTIONAL_BY_INST_TYPE', 'U') IS NULL SELECT DISTINCT 	INST_TYPE, 	CASE 		WHEN [PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN CONVERT(DECIMAL(18,2), ROUND((SUM(NOTIONAL_VALUE)/1000000),2)) 	ELSE null 	END AS PRUCAP, 	CASE 		WHEN [PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN CONVERT(DECIMAL(18,2), ROUND((SUM(NOTIONAL_VALUE)/1000000),2)) 	ELSE null 	END AS PPMG, 	CASE 		WHEN ([PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR [PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN CONVERT(DECIMAL(18,2), ROUND((SUM(NOTIONAL_VALUE)/1000000),2)) 	ELSE null 	END AS MAGIM, 	CONVERT(DECIMAL(38,2),(CONVERT(DECIMAL(18,2), ROUND((SUM(NOTIONAL_VALUE)/1000000),2)))) as TOTAL_NOTIONAL_VALUE, 	[DATE] INTO VISTA_REPORTING.dbo.DMC_DMG_TRADES_SUMMARY_NOTIONAL_BY_INST_TYPE FROM #temp_n GROUP BY INST_TYPE, 		 [PORTFOLIO_GROUP_NAME],  		 [DATE]  ELSE  INSERT INTO VISTA_REPORTING.dbo.DMC_DMG_TRADES_SUMMARY_NOTIONAL_BY_INST_TYPE  SELECT DISTINCT 	INST_TYPE, 	CASE 		WHEN [PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN CONVERT(DECIMAL(18,2), ROUND((SUM(NOTIONAL_VALUE)/1000000),2)) 	ELSE null 	END AS PRUCAP, 	CASE 		WHEN [PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN CONVERT(DECIMAL(18,2), ROUND((SUM(NOTIONAL_VALUE)/1000000),2)) 	ELSE null 	END AS PPMG, 	CASE 		WHEN ([PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR [PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN CONVERT(DECIMAL(18,2), ROUND((SUM(NOTIONAL_VALUE)/1000000),2)) 	ELSE null 	END AS MAGIM, 	CONVERT(DECIMAL(38,2),(CONVERT(DECIMAL(18,2), ROUND((SUM(NOTIONAL_VALUE)/1000000),2)))) as TOTAL_NOTIONAL_VALUE, 	[DATE] FROM #temp_n GROUP BY INST_TYPE, 		 [PORTFOLIO_GROUP_NAME],  		 [DATE]   -- ============================================================================== /* COBS EXCEPTIONS BY NUMBER OF TRADES TABLE */ -- ==============================================================================  IF OBJECT_ID('tempdb..#tempn_exception_table', 'U') IS NOT NULL DROP TABLE #tempn_exception_table SELECT *  INTO #tempn_exception_table FROM (SELECT DISTINCT 		'1' as [EXCEPTION_TYPE_ID], 		qe.[MULTI_FUND_ID] as [EXCEPTION_ID], 		pgt.[PORTFOLIO_GROUP_NAME], 		ABS(t.TRD_ORIG_FACE) as NOTIONAL_VALUE, 		qe.[VG_01] as [EXCEPTION_VALUE], 		CONCAT(YEAR(qe.[CREATETIME]), ' - ', MONTH(qe.[CREATETIME])) as [DATE] 	 FROM VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_DMG_TABLE qe 	 left join (select distinct multi_fund_id, trd_orig_face, FUND from VISTA_REPORTING.dbo.TRADES where FinalFlag =1) t on t.MULTI_FUND_ID = qe.MULTI_FUND_ID 	 left join VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY pgt 	 on t.[FUND] = pgt.[FUND_ID] 	 WHERE qe.[VG_01] > 0 AND qe.[CREATETIME] BETWEEN @Start_Date AND @End_Date  	 UNION  	 SELECT DISTINCT 		'7' as [EXCEPTION_TYPE_ID], 		nwq.[MULTI_FUND_ID] as [EXCEPTION_ID], 		pgt.[PORTFOLIO_GROUP_NAME], 		ABS(t.TRD_ORIG_FACE) as [NOTIONAL_VALUE], 		nwq.[VG_07] as [EXCEPTION_VALUE], 		CONCAT(YEAR(nwq.[VG_07_CREATETIME]), ' - ', MONTH(nwq.[VG_07_CREATETIME])) as [DATE] 	 FROM VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_DMG_TABLE nwq 	 left join (select distinct multi_fund_id, trd_orig_face, FUND from VISTA_REPORTING.dbo.TRADES where FinalFlag =1) t on t.MULTI_FUND_ID = NWQ.MULTI_FUND_ID 	 left join VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY pgt 	 on t.[FUND] = pgt.[FUND_ID] 	 WHERE nwq.[VG_07] > 0 AND nwq.[VG_07_CREATETIME] BETWEEN @Start_Date AND @End_Date 	  	 UNION  	 SELECT DISTINCT 		'9' as [EXCEPTION_TYPE_ID], 		timexec.[ORD_NUM] as [EXCEPTION_ID], 		pgt.[PORTFOLIO_GROUP_NAME], 		ABS(t.TRD_ORIG_FACE) as [NOTIONAL_VALUE], 		MIN(timexec.[VG_09]) as [EXCEPTION_VALUE], 		CONCAT(YEAR(timexec.[CREATETIME]), ' - ', MONTH(timexec.[CREATETIME])) as [DATE] 	 FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_DMG_TABLE timexec 	 left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on oc.PM_ORD = timexec.ORD_NUM 	 left join (select distinct  trd_orig_face, ORD_NUM, FUND from VISTA_REPORTING.dbo.TRADES where FinalFlag =1) t on t.ORD_NUM = oc.TRD_ORD 	 left join VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY pgt 	 on t.[FUND] = pgt.[FUND_ID] 	 WHERE timexec.[VG_09] > 0 AND timexec.[CREATETIME] BETWEEN @Start_Date AND @End_Date 	 GROUP BY  		timexec.[ORD_NUM], 		pgt.[PORTFOLIO_GROUP_NAME], 		ABS(t.TRD_ORIG_FACE), 		CONCAT(YEAR(timexec.[CREATETIME]), ' - ', MONTH(timexec.[CREATETIME]))  	 UNION  	 SELECT DISTINCT 		'10' as [EXCEPTION_TYPE_ID], 		timrec.[MULTI_FUND_ID] as [EXCEPTION_ID], 		pgt.[PORTFOLIO_GROUP_NAME], 		ABS(t.TRD_ORIG_FACE) as [NOTIONAL_VALUE], 		timrec.[VG_10] as [EXCEPTION_VALUE], 		CONCAT(YEAR(timrec.[TREC_CREATETIME]), ' - ', MONTH(timrec.[TREC_CREATETIME])) as [DATE] 	 FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_DMG_TABLE timrec 	 left join (select distinct multi_fund_id, trd_orig_face, FUND from VISTA_REPORTING.dbo.TRADES where FinalFlag =1) t on t.MULTI_FUND_ID = timrec.MULTI_FUND_ID 	 left join VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY pgt 	 on t.[FUND] = pgt.[FUND_ID] 	 WHERE timrec.[VG_10] > 0 AND timrec.[TREC_CREATETIME] BETWEEN @Start_Date AND @End_Date 	  	 UNION  	 --SELECT DISTINCT 		--'13' as [EXCEPTION_TYPE_ID], 		--ordagg.[ORD_NUM] as [EXCEPTION_ID], 		--pgt.[PORTFOLIO_GROUP_NAME], 		--ABS(t.TRD_ORIG_FACE) as [NOTIONAL_VALUE], 		--ordagg.[MERGE_EXCEPTION] as [EXCEPTION_VALUE], 		--CONCAT(YEAR(ordagg.[CREATETIME]), ' - ', MONTH(ordagg.[CREATETIME])) as [DATE] 	 --FROM VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_DMG_TABLE ordagg 	 --left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on oc.PM_ORD = ordagg.ORD_NUM 	 --left join (select distinct ord_num, trd_orig_face, FUND from VISTA_REPORTING.dbo.TRADES where FinalFlag =1) t on t.ORD_NUM = oc.TRD_ORD 	 --left join VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY pgt 	 --on t.[FUND] = pgt.[FUND_ID] 	 --WHERE ordagg.[MERGE_EXCEPTION] > 0 AND ordagg.[CREATETIME] BETWEEN @Start_Date AND @End_Date  	 --UNION  	 SELECT DISTINCT 		'14' as [EXCEPTION_TYPE_ID], 		ordprio.[ORD_NUM] as [EXCEPTION_ID], 		pgt.[PORTFOLIO_GROUP_NAME], 		ABS(t.TRD_ORIG_FACE) as [NOTIONAL_VALUE], 		ordprio.[ORDER_PRIORITY_EXCEPTION] as [EXCEPTION_VALUE], 		CONCAT(YEAR(ordprio.[CREATETIME]), ' - ', MONTH(ordprio.[CREATETIME])) as [DATE] 	 FROM VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_DMG_TABLE ordprio 	 --left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on oc.PM_ORD = ordprio.ORD_NUM 	 left join (select distinct ORD_NUM, trd_orig_face, FUND from VISTA_REPORTING.dbo.TRADES where FinalFlag =1) t on t.ORD_NUM = ordprio.ORD_NUM 	 left join VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY pgt 	 on t.[FUND] = pgt.[FUND_ID] 	 WHERE ordprio.[ORDER_PRIORITY_EXCEPTION] > 0 AND ordprio.[CREATETIME] BETWEEN @Start_Date AND @End_Date  	 UNION  	 SELECT DISTINCT 		'15' as [EXCEPTION_TYPE_ID], 		CONCAT(amm.[MULTI_FUND_ID],amm.[TOUCH_COUNT]) as [EXCEPTION_ID], 		pgt.[PORTFOLIO_GROUP_NAME], 		ABS(t.TRD_ORIG_FACE) as [NOTIONAL_VALUE], 		amm.[VG_15] as [EXCEPTION_VALUE], 		CONCAT(YEAR(amm.[EXCEPTION_FLAG_CREATETIME]), ' - ', MONTH(amm.[EXCEPTION_FLAG_CREATETIME])) as [DATE] 	 FROM VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_DMG_TABLE amm 	 left join (select distinct multi_fund_id, trd_orig_face, FUND from VISTA_REPORTING.dbo.TRADES where FinalFlag =1) t on t.MULTI_FUND_ID = amm.MULTI_FUND_ID 	 left join VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY pgt 	 on t.[FUND] = pgt.[FUND_ID] 	 WHERE amm.[VG_15] > 0 AND amm.[EXCEPTION_FLAG_CREATETIME] BETWEEN @Start_Date AND @End_Date  	 UNION  	 SELECT DISTINCT 		'41' as [EXCEPTION_TYPE_ID], 		trwo.[MULTI_FUND_ID] as [EXCEPTION_ID], 		pgt.[PORTFOLIO_GROUP_NAME], 		ABS(t.TRD_ORIG_FACE) as [NOTIONAL_VALUE], 		trwo.[VG_41] as [EXCEPTION_VALUE], 		CONCAT(YEAR(trwo.[VG_41_CREATETIME]), ' - ', MONTH(trwo.[VG_41_CREATETIME])) as [DATE] 	 FROM VISTA_STAGING.dbo.VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE trwo 	 left join (select distinct multi_fund_id, trd_orig_face, FUND from VISTA_REPORTING.dbo.TRADES where FinalFlag =1) t on t.MULTI_FUND_ID = trwo.MULTI_FUND_ID 	 left join VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY pgt 	 on t.[FUND] = pgt.[FUND_ID] 	 WHERE trwo.[VG_41] > 0 AND trwo.[VG_41_CREATETIME] BETWEEN @Start_Date AND @End_Date  	 ) tempn_exception  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_DMG_TRADES_SUMMARY_NOTIONAL_BY_EXCEPTION_DATA', 'U') IS NULL  SELECT DISTINCT 	[EXCEPTION_TYPE_ID], 	[EXCEPTION_ID], 	CASE 		WHEN [PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP' 		WHEN [PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG' 		WHEN ([PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR [PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM' 	ELSE NULL 	END AS [BUSINESS_GROUP], 	CASE 		WHEN EXCEPTION_TYPE_ID = '1'	THEN 'Quote Exception' 		WHEN EXCEPTION_TYPE_ID = '7'	THEN 'Non-Winning Quote' 		WHEN EXCEPTION_TYPE_ID = '9'	THEN 'Timely Execution' 		WHEN EXCEPTION_TYPE_ID = '10'	THEN 'Timely Recording' 		--WHEN EXCEPTION_TYPE_ID = '13'	THEN 'Order Aggregation' 		WHEN EXCEPTION_TYPE_ID = '14'	THEN 'Order Priority' 		WHEN EXCEPTION_TYPE_ID = '15'	THEN 'Amendment Analysis' 		WHEN EXCEPTION_TYPE_ID = '41'	THEN 'Trades Without Orders' 	END AS [EXCEPTION_TYPE], 	CONVERT(DECIMAL(38,2),(CONVERT(DECIMAL(18,2), ROUND((NOTIONAL_VALUE/1000000),2)))) AS [NOTIONAL_VALUE], 	[EXCEPTION_VALUE], 	[DATE], 	@REPORT_NAME as REPORT_NAME, 	GETDATE() as REPORT_DATE INTO VISTA_REPORTING.dbo.DMC_DMG_TRADES_SUMMARY_NOTIONAL_BY_EXCEPTION_DATA FROM #tempn_exception_table  ELSE  INSERT INTO VISTA_REPORTING.dbo.DMC_DMG_TRADES_SUMMARY_NOTIONAL_BY_EXCEPTION_DATA SELECT DISTINCT 	[EXCEPTION_TYPE_ID], 	[EXCEPTION_ID], 	CASE 		WHEN [PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP' 		WHEN [PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG' 		WHEN ([PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR [PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM' 	ELSE NULL 	END AS [BUSINESS_GROUP], 	CASE 		WHEN EXCEPTION_TYPE_ID = '1'	THEN 'Quote Exception' 		WHEN EXCEPTION_TYPE_ID = '7'	THEN 'Non-Winning Quote' 		WHEN EXCEPTION_TYPE_ID = '9'	THEN 'Timely Execution' 		WHEN EXCEPTION_TYPE_ID = '10'	THEN 'Timely Recording' 		--WHEN EXCEPTION_TYPE_ID = '13'	THEN 'Order Aggregation' 		WHEN EXCEPTION_TYPE_ID = '14'	THEN 'Order Priority' 		WHEN EXCEPTION_TYPE_ID = '15'	THEN 'Amendment Analysis' 		WHEN EXCEPTION_TYPE_ID = '41'	THEN 'Trades Without Orders' 	END AS [EXCEPTION_TYPE], 	CONVERT(DECIMAL(38,2),(CONVERT(DECIMAL(18,2), ROUND((NOTIONAL_VALUE/1000000),2)))) AS [NOTIONAL_VALUE], 	[EXCEPTION_VALUE], 	[DATE], 	@REPORT_NAME as REPORT_NAME, 	GETDATE() as REPORT_DATE FROM #tempn_exception_table   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_DMG_TRADES_SUMMARY_NOTIONAL_BY_EXCEPTION', 'U') IS NULL  SELECT DISTINCT 	CASE 		WHEN EXCEPTION_TYPE_ID = '1'	THEN 'Quote Exception' 		WHEN EXCEPTION_TYPE_ID = '7'	THEN 'Non-Winning Quote' 		WHEN EXCEPTION_TYPE_ID = '9'	THEN 'Timely Execution' 		WHEN EXCEPTION_TYPE_ID = '10'	THEN 'Timely Recording' 		--WHEN EXCEPTION_TYPE_ID = '13'	THEN 'Order Aggregation' 		WHEN EXCEPTION_TYPE_ID = '14'	THEN 'Order Priority' 		WHEN EXCEPTION_TYPE_ID = '15'	THEN 'Amendment Analysis' 		WHEN EXCEPTION_TYPE_ID = '41'	THEN 'Trades Without Orders' 	END AS [EXCEPTION_TYPE], 	CASE 		WHEN [PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN CONVERT(DECIMAL(18,2), ROUND((SUM(NOTIONAL_VALUE)/1000000),2)) 	ELSE null 	END AS PRUCAP, 	CASE 		WHEN [PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN CONVERT(DECIMAL(18,2), ROUND((SUM(NOTIONAL_VALUE)/1000000),2)) 	ELSE null 	END AS PPMG, 	CASE 		WHEN ([PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR [PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN CONVERT(DECIMAL(18,2), ROUND((SUM(NOTIONAL_VALUE)/1000000),2)) 	ELSE null 	END AS MAGIM, 	CONVERT(DECIMAL(38,2),(CONVERT(DECIMAL(18,2), ROUND((SUM(NOTIONAL_VALUE)/1000000),2))))  as TOTAL_NOTIONAL_VALUE, 	[DATE] INTO VISTA_REPORTING.dbo.DMC_DMG_TRADES_SUMMARY_NOTIONAL_BY_EXCEPTION FROM #tempn_exception_table GROUP BY 	[EXCEPTION_TYPE_ID], 	[PORTFOLIO_GROUP_NAME], 	[DATE]  ELSE  INSERT INTO VISTA_REPORTING.dbo.DMC_DMG_TRADES_SUMMARY_NOTIONAL_BY_EXCEPTION SELECT DISTINCT 	CASE 		WHEN EXCEPTION_TYPE_ID = '1'	THEN 'Quote Exception' 		WHEN EXCEPTION_TYPE_ID = '7'	THEN 'Non-Winning Quote' 		WHEN EXCEPTION_TYPE_ID = '9'	THEN 'Timely Execution' 		WHEN EXCEPTION_TYPE_ID = '10'	THEN 'Timely Recording' 		--WHEN EXCEPTION_TYPE_ID = '13'	THEN 'Order Aggregation' 		WHEN EXCEPTION_TYPE_ID = '14'	THEN 'Order Priority' 		WHEN EXCEPTION_TYPE_ID = '15'	THEN 'Amendment Analysis' 		WHEN EXCEPTION_TYPE_ID = '41'	THEN 'Trades Without Orders' 	END AS [EXCEPTION_TYPE], 	CASE 		WHEN [PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN CONVERT(DECIMAL(18,2), ROUND((SUM(NOTIONAL_VALUE)/1000000),2)) 	ELSE null 	END AS PRUCAP, 	CASE 		WHEN [PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN CONVERT(DECIMAL(18,2), ROUND((SUM(NOTIONAL_VALUE)/1000000),2)) 	ELSE null 	END AS PPMG, 	CASE 		WHEN ([PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR [PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN CONVERT(DECIMAL(18,2), ROUND((SUM(NOTIONAL_VALUE)/1000000),2)) 	ELSE null 	END AS MAGIM, 	CONVERT(DECIMAL(38,2),(CONVERT(DECIMAL(18,2), ROUND((SUM(NOTIONAL_VALUE)/1000000),2))))  as TOTAL_NOTIONAL_VALUE, 	[DATE] FROM #tempn_exception_table GROUP BY 	[EXCEPTION_TYPE_ID], 	[PORTFOLIO_GROUP_NAME], 	[DATE]  END   --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: DMC_EQ_COBS_SUMMARY_STATS CreateDate: 2019-10-18 08:39:49.963 ModifyDate: 2022-04-06 13:28:18.997 --- DEFINITION START --- -- ============================================= -- Author:		<Ayiba Cesario> -- Create date: <09/08/2018> -- Description:	<Generate DMC reports for EQ COBS Exeptions Summary Statistics. --	This stored procedure takes a start month, end month and report name  --	as input parameters and generates the reports for these months.> -- =============================================  --================================================= -- 2018-09-06 KR - Added a new condition for implementation shortfall to only count exceptions SD is equal to '2SD'  --2022-04-06 Matej Miter - Removing Implementation Shortfall exceptions from DMC report as per latest request from the Client on 1st of May 2021 --=================================================  CREATE PROCEDURE [dbo].[DMC_EQ_COBS_SUMMARY_STATS] 	@Start_Month INT, 	@Start_Year INT, 	@End_Month INT, 	@End_Year INT, 	@REPORT_NAME VARCHAR(MAX) AS   BEGIN  DECLARE @Start_Date DATETIME; SET @Start_Date = CONVERT(DATE,CONCAT(@Start_Year,'-',@Start_Month,'-01')); --Turn the input start month parameter into a date (using the first day of the month) DECLARE @End_Date0 DATETIME; DECLARE @End_Date DATETIME; SET @End_Date0 = EOMONTH(CONVERT(DATETIME,CONCAT(@End_Year,'-',@End_Month,'-01')));  --Turn the input end month parameter into a date (using the last day of the month)  SET @End_Date = DATEADD(second,86399,@End_Date0);  --Add the metadata to a table so we keep a history of all reports run IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_REPORTS_METADATA', 'U') IS NULL 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		CONVERT(VARCHAR(50),'EQCM_COBS_SUMMARY_STATS') AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date] 	INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		'EQCM_COBS_SUMMARY_STATS' AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date]   ----4.1.1	Report 1: Equities Dealing Desk Controls and Issues Monitor - COBS Exceptions - Summary Statistics --IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table --SELECT DISTINCT --	CASE  --		WHEN CHARINDEX('_1', er.ID) > 0 AND LEN(er.ID) > 4 THEN LEFT(er.ID, CHARINDEX(' ', er.ID)-1) --		WHEN CHARINDEX('_7', er.ID) > 0 AND LEN(er.ID) > 4 THEN LEFT(er.ID, CHARINDEX(' ', er.ID)-1) --		WHEN CHARINDEX('_9', er.ID) > 0 AND LEN(er.ID) > 4 THEN LEFT(er.ID, CHARINDEX(' ', er.ID)-1) --	END AS EXTRACTED_ID, --	CASE  --		WHEN CHARINDEX('_7', er.ID) > 0 AND LEN(er.ID) > 4 THEN '7' --		WHEN CHARINDEX('_9', er.ID) > 0 AND LEN(er.ID) > 4 THEN '9' --		WHEN CHARINDEX('_10', er.ID) > 0 AND LEN(er.ID) > 4 THEN '10' --		WHEN CHARINDEX('_11', er.ID) > 0 AND LEN(er.ID) > 4 THEN '11' --		WHEN CHARINDEX('_13', er.ID) > 0 AND LEN(er.ID) > 4 THEN '13' --		WHEN CHARINDEX('_14', er.ID) > 0 AND LEN(er.ID) > 4 THEN '14' --		WHEN CHARINDEX('_15', er.ID) > 0 AND LEN(er.ID) > 4 THEN '15' --		WHEN CHARINDEX('_1', er.ID) > 0 AND LEN(er.ID) > 4 THEN '1' --	END AS EXCEPTION_ID, --	er.[STATUS] --INTO #temp_status_table --FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE er --WHERE er.ID != ''   IF OBJECT_ID('tempdb..#temp_trades', 'U') IS NOT NULL DROP TABLE #temp_trades SELECT DISTINCT 	oc.PM_ORD, 	t.ORD_NUM, 	t.CLIENT_EXECUTION_NUM, 	t.MULTI_FUND_ID, 	pr.INST_TYPE, 	pr.COUNTRY, 	MAX(t.TRD_TRADE_DATE) AS MAX_TRD_TRADE_DATE INTO #temp_trades FROM VISTA_REPORTING.dbo.TRADES t LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON oc.TRD_ORD=t.ORD_NUM LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, INST_TYPE, COUNTRY FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr ON t.MULTI_FUND_ID = pr.MULTI_FUND_ID --Thanos: Coded out the below clause as we should be looking at all trades and then capture the exceptions based on createtime. Applying -- specific data ranges to trade date might potentially lead to under-reporting --where t.TRD_TRADE_DATE between @Start_Date and @End_Date GROUP BY 	oc.PM_ORD, 	t.ORD_NUM, 	t.CLIENT_EXECUTION_NUM, 	t.MULTI_FUND_ID, 	pr.INST_TYPE, 	pr.COUNTRY  	IF OBJECT_ID('tempdb..#temp_ex_reason', 'U') IS NOT NULL DROP TABLE #temp_ex_reason SELECT DISTINCT  	ID,  	REASON,  	COMMENT  INTO #temp_ex_reason FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE  IF OBJECT_ID('tempdb..#temp_exception_table', 'U') IS NOT NULL DROP TABLE #temp_exception_table SELECT *  INTO #temp_exception_table FROM ( 	SELECT DISTINCT 	qe.MULTI_FUND_ID AS EXCEPTION_ID, 	t.INST_TYPE, 	--t.COUNTRY, 	'1' AS EXCEPTION_TYPE_ID, 	qe.QUOTE_EXCEPTION AS EXCEPTION_VALUE, 	--Thanos: Changed the below to look at create time 	CONCAT(YEAR(qe.QE_CREATE_TIME), ' - ', MONTH(qe.QE_CREATE_TIME)) AS [DATE], 	MAX(CASE WHEN ex.REASON in ('Tested and exception noted', 'Tested and no issues noted') OR ex.COMMENT IN ('Tested and exception noted', 'Tested and no issues noted') THEN 1 ELSE 0 END) AS [CM_Reviewed] 	FROM #temp_trades t  	INNER JOIN VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_EQ_TABLE qe ON qe.MULTI_FUND_ID=t.MULTI_FUND_ID 	LEFT JOIN #temp_ex_reason ex ON t.MULTI_FUND_ID + '_1' = ex.ID 	WHERE QUOTE_EXCEPTION = 1 and qe.QE_CREATE_TIME between @Start_Date and @End_Date 	GROUP BY 	qe.MULTI_FUND_ID, 	t.INST_TYPE, 	--t.COUNTRY, 	qe.QUOTE_EXCEPTION, 	CONCAT(YEAR(qe.QE_CREATE_TIME), ' - ', MONTH(qe.QE_CREATE_TIME))  	UNION  	SELECT DISTINCT 		qe.MULTI_FUND_ID AS EXCEPTION_ID, 		t.INST_TYPE, 		--t.COUNTRY, 		'7' AS EXCEPTION_TYPE_ID, 		qe.NON_WINNING_QUOTE_EXCEPTION AS EXCEPTION_VALUE, 		CONCAT(YEAR(qe.NWQ_CREATEIME), ' - ', MONTH(qe.NWQ_CREATEIME)) AS [DATE], 		MAX(CASE WHEN ex.REASON in ('Tested and exception noted', 'Tested and no issues noted') OR ex.COMMENT IN ('Tested and exception noted', 'Tested and no issues noted') THEN 1 ELSE 0 END) AS [CM_Reviewed] 	FROM #temp_trades t  	INNER JOIN VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_EQ_TABLE qe ON qe.MULTI_FUND_ID=t.MULTI_FUND_ID 	--Thanos: This is NWQ so the join should be with '_7' rathen than '_1' 	LEFT JOIN #temp_ex_reason ex ON t.MULTI_FUND_ID + '_7' = ex.ID 	--Thanos: Added the below condition around Createtime 	WHERE NON_WINNING_QUOTE_EXCEPTION = 1 and qe.NWQ_CREATEIME between @Start_Date and @End_Date 	GROUP BY 		qe.MULTI_FUND_ID, 		t.INST_TYPE, 		--t.COUNTRY, 		qe.NON_WINNING_QUOTE_EXCEPTION, 		CONCAT(YEAR(qe.NWQ_CREATEIME), ' - ', MONTH(qe.NWQ_CREATEIME))  	UNION  	SELECT DISTINCT 		concat(p.ORD_NUM,TIMELY_EXECUTION_EXCEPTION) AS EXCEPTION_ID, 		t.INST_TYPE, 		--t.COUNTRY, 		'9' AS EXCEPTION_TYPE_ID, 		1 AS EXCEPTION_VALUE, -- Default to 1 so that we don't double count the same order being raised multiple times. 		MIN(CONCAT(YEAR(qe.CREATETIME), ' - ', MONTH(qe.CREATETIME))) AS [DATE], --Put the exception into the first month that it was flagged. 		MAX(CASE WHEN ex.REASON in ('Tested and exception noted', 'Tested and no issues noted') OR ex.COMMENT IN ('Tested and exception noted', 'Tested and no issues noted') THEN 1 ELSE 0 END) AS [CM_Reviewed] 	FROM VISTA_REPORTING.dbo.PM_ORDERS p 	LEFT JOIN #temp_trades t ON t.PM_ORD=p.ORD_NUM  	INNER JOIN VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_EQ_TABLE qe ON qe.ORD_NUM=p.ORD_NUM 	LEFT JOIN #temp_ex_reason ex ON CONCAT(qe.ORD_NUM, '_9',qe.TIMELY_EXECUTION_EXCEPTION) = ex.ID 	WHERE TIMELY_EXECUTION_EXCEPTION > 0 and qe.CREATETIME between @Start_Date and @End_Date 	GROUP BY  		concat(p.ORD_NUM,TIMELY_EXECUTION_EXCEPTION) , 		t.INST_TYPE 		--t.COUNTRY,  	UNION 	 	SELECT DISTINCT 		qe.MULTI_FUND_ID AS EXCEPTION_ID, 		t.INST_TYPE, 		--t.COUNTRY, 		'10' AS EXCEPTION_TYPE_ID, 		qe.TIMELY_RECORDING_FLAG AS EXCEPTION_VALUE, 		CONCAT(YEAR(qe.TREC_CREATETIME), ' - ', MONTH(qe.TREC_CREATETIME)) AS [DATE], 		MAX(CASE WHEN ex.REASON in ('Tested and exception noted', 'Tested and no issues noted') OR ex.COMMENT IN ('Tested and exception noted', 'Tested and no issues noted') THEN 1 ELSE 0 END) AS [CM_Reviewed] 	FROM #temp_trades t  	INNER JOIN VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_EQ_TABLE qe ON qe.MULTI_FUND_ID=t.MULTI_FUND_ID 	LEFT JOIN #temp_ex_reason ex ON CONCAT(qe.MULTI_FUND_ID, '_10') = ex.ID 	WHERE qe.TIMELY_RECORDING_FLAG > 0 and qe.TREC_CREATETIME between @Start_Date and @End_Date 	GROUP BY 		qe.MULTI_FUND_ID, 		t.INST_TYPE, 		--t.COUNTRY, 		qe.TIMELY_RECORDING_FLAG, 		CONCAT(YEAR(qe.TREC_CREATETIME), ' - ', MONTH(qe.TREC_CREATETIME))    	UNION  	SELECT DISTINCT 		t.PM_ORD AS EXCEPTION_ID, 		--t.ORD_NUM, 		t.INST_TYPE, 		--t.COUNTRY, 		'11' AS EXCEPTION_TYPE_ID, 		qe.TIMELY_RELEASE_EXCEPTION AS EXCEPTION_VALUE, 		CONCAT(YEAR(qe.TR_CREATETIME), ' - ', MONTH(qe.TR_CREATETIME)) AS [DATE], 		MAX(CASE WHEN ex.REASON in ('Tested and exception noted', 'Tested and no issues noted') OR ex.COMMENT IN ('Tested and exception noted', 'Tested and no issues noted') THEN 1 ELSE 0 END) AS [CM_Reviewed] 	FROM #temp_trades t  	INNER JOIN VISTA_STAGING.dbo.VG_11_TIMELY_RELEASE_EQ_TABLE qe ON qe.ORD_NUM=t.PM_ORD 	LEFT JOIN #temp_ex_reason ex ON t.PM_ORD + '_11' = ex.ID  	WHERE qe.TIMELY_RELEASE_EXCEPTION = 1 and qe.TR_CREATETIME between @Start_Date and @End_Date 	GROUP BY 		t.PM_ORD, 		--t.ORD_NUM, 		t.INST_TYPE, 		--t.COUNTRY, 		qe.TIMELY_RELEASE_EXCEPTION, 		CONCAT(YEAR(qe.TR_CREATETIME), ' - ', MONTH(qe.TR_CREATETIME)) 	UNION  	SELECT DISTINCT 		qe.OA_ID AS EXCEPTION_ID, 		t.INST_TYPE, 		--t.COUNTRY, 		'13' AS EXCEPTION_TYPE_ID, 		qe.MERGE_EXCEPTION AS EXCEPTION_VALUE, 		CONCAT(YEAR(qe.CREATETIME), ' - ', MONTH(qe.CREATETIME)) AS [DATE], 		MAX(CASE WHEN ex.REASON in ('Tested and exception noted', 'Tested and no issues noted') OR ex.COMMENT IN ('Tested and exception noted', 'Tested and no issues noted') THEN 1 ELSE 0 END) AS [CM_Reviewed] 	FROM #temp_trades t 	INNER JOIN VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_EQ_TABLE qe ON qe.OA_ID=CONCAT(t.ORD_NUM,'_',t.MULTI_FUND_ID) 	LEFT JOIN #temp_ex_reason ex ON CONCAT(t.ORD_NUM,'_',t.MULTI_FUND_ID,'_13') = ex.ID  	WHERE qe.MERGE_EXCEPTION = 1 and qe.CREATETIME between @Start_Date and @End_Date 	GROUP BY qe.OA_ID, 	t.INST_TYPE, 	qe.MERGE_EXCEPTION, 	CONCAT(YEAR(qe.CREATETIME), ' - ', MONTH(qe.CREATETIME))  	UNION  	SELECT DISTINCT 		t.ORD_NUM AS EXCEPTION_ID, 		t.INST_TYPE, 		--t.COUNTRY, 		'14' AS EXCEPTION_TYPE_ID, 		qe.ORDER_PRIORITY_EXCEPTION AS EXCEPTION_VALUE, 		CONCAT(YEAR(qe.CREATETIME), ' - ', MONTH(qe.CREATETIME)) AS [DATE], 		MAX(CASE WHEN ex.REASON in ('Tested and exception noted', 'Tested and no issues noted') OR ex.COMMENT IN ('Tested and exception noted', 'Tested and no issues noted') THEN 1 ELSE 0 END) AS [CM_Reviewed] 	FROM #temp_trades t 	INNER JOIN VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_EQ_TABLE qe ON qe.ORD_NUM=t.ORD_NUM 	LEFT JOIN #temp_ex_reason ex ON CONCAT(t.ORD_NUM,'_14') = ex.ID  	WHERE qe.ORDER_PRIORITY_EXCEPTION = 1 and qe.CREATETIME between @Start_Date and @End_Date 	GROUP BY 		t.ORD_NUM, 		t.INST_TYPE, 		qe.ORDER_PRIORITY_EXCEPTION, 		CONCAT(YEAR(qe.CREATETIME), ' - ', MONTH(qe.CREATETIME)) 	UNION  	SELECT DISTINCT 		qe.MULTI_FUND_ID AS EXCEPTION_ID, 		t.INST_TYPE, 		--t.COUNTRY, 		'15' AS EXCEPTION_TYPE_ID, 		qe.AMENDMENT_FLAG AS EXCEPTION_VALUE, 		CONCAT(YEAR(qe.AMENDMENT_FLAG_CREATETIME), ' - ', MONTH(qe.AMENDMENT_FLAG_CREATETIME)) AS [DATE], 		MAX(CASE WHEN ex.REASON in ('Tested and exception noted', 'Tested and no issues noted') OR ex.COMMENT IN ('Tested and exception noted', 'Tested and no issues noted') THEN 1 ELSE 0 END) AS [CM_Reviewed] 	FROM #temp_trades t  	INNER JOIN VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_EQ_TABLE qe ON qe.MULTI_FUND_ID=t.MULTI_FUND_ID 	LEFT JOIN #temp_ex_reason ex ON CONCAT(t.MULTI_FUND_ID,'_15',qe.TOUCH_COUNT) = ex.ID  	LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, TOUCH_COUNT, CancellationFlag, TRD_AMEND_TYPE FROM VISTA_REPORTING.dbo.TRADES) t2 ON qe.MULTI_FUND_ID = t2.MULTI_FUND_ID AND qe.TOUCH_COUNT = t2.TOUCH_COUNT 	WHERE AMENDMENT_FLAG > 0 AND  cancellationflag <> 1 and qe.AMENDMENT_FLAG_CREATETIME between @Start_Date and @End_Date 	GROUP BY 		qe.MULTI_FUND_ID, 		t.INST_TYPE, 		qe.AMENDMENT_FLAG, 		CONCAT(YEAR(qe.AMENDMENT_FLAG_CREATETIME), ' - ', MONTH(qe.AMENDMENT_FLAG_CREATETIME))  	UNION 	/* 	SELECT DISTINCT 		t.ORD_NUM AS EXCEPTION_ID, 		t.INST_TYPE, 		--t.COUNTRY, 		'IS' AS EXCEPTION_TYPE_ID, 		iseq.IM_EXCEPTION AS EXCEPTION_VALUE, 		CONCAT(YEAR(iseq.IM_CREATEDATE), ' - ', MONTH(iseq.IM_CREATEDATE)) AS [DATE], 		MAX(CASE WHEN ex.REASON in ('Tested and exception noted', 'Tested and no issues noted') OR ex.COMMENT IN ('Tested and exception noted', 'Tested and no issues noted') THEN 1 ELSE 0 END) AS [CM_Reviewed] 	FROM #temp_trades t 	INNER JOIN VISTA_REPORTING.dbo.IMPLEMENTATION_SHORTFALL_EQ iseq ON iseq.ORDER_ID=t.ORD_NUM 	LEFT JOIN #temp_ex_reason ex ON CONCAT(t.ORD_NUM,'_IS') = ex.ID  	LEFT JOIN VISTA_STAGING.dbo.Markit_ISReport rpt ON iseq.[Row_ID] = rpt.ID 	WHERE iseq.IM_EXCEPTION > 0 and iseq.IM_CREATEDATE between @Start_Date and @End_Date 	AND iseq.SD='2SD'  --Only consider exceptions that are above 2SD 	GROUP BY  		t.ORD_NUM, 		t.INST_TYPE, 		iseq.IM_EXCEPTION, 		CONCAT(YEAR(iseq.IM_CREATEDATE), ' - ', MONTH(iseq.IM_CREATEDATE))		  	UNION 	*/  	SELECT DISTINCT 		t.MULTI_FUND_ID AS EXCEPTION_ID, 		t.INST_TYPE, 		--t.COUNTRY, 		'40' AS EXCEPTION_TYPE_ID, 		es.SETTLEMENT_EXCEPTION AS EXCEPTION_VALUE, 		CONCAT(YEAR(es.SETTLEMENT_CREATEDATE), ' - ', MONTH(es.SETTLEMENT_CREATEDATE)) AS [DATE], 		MAX(CASE WHEN ex.REASON in ('Tested and exception noted', 'Tested and no issues noted') OR ex.COMMENT IN ('Tested and exception noted', 'Tested and no issues noted') THEN 1 ELSE 0 END) AS [CM_Reviewed] 	FROM #temp_trades t 	INNER JOIN VISTA_STAGING.dbo.VG_40_EXTENDED_SETTLEMENT_EXCEPTION_TABLE es ON es.MULTI_FUND_ID=t.MULTI_FUND_ID 	LEFT JOIN #temp_ex_reason ex ON CONCAT(t.MULTI_FUND_ID,'_40') = ex.ID  	WHERE es.SETTLEMENT_EXCEPTION > 0 and es.SETTLEMENT_CREATEDATE between @Start_Date and @End_Date 	GROUP BY 		t.MULTI_FUND_ID, 		t.INST_TYPE, 		es.SETTLEMENT_EXCEPTION, 		CONCAT(YEAR(es.SETTLEMENT_CREATEDATE), ' - ', MONTH(es.SETTLEMENT_CREATEDATE)) )temp   IF OBJECT_ID('tempdb..#temp_count_table', 'U') IS NOT NULL DROP TABLE #temp_count_table SELECT DISTINCT 	CASE 		WHEN tet.EXCEPTION_TYPE_ID = '1' THEN 'Quote Exception' 		WHEN tet.EXCEPTION_TYPE_ID = '7' THEN 'Non-Winning Quote' 		WHEN tet.EXCEPTION_TYPE_ID = '9'  THEN 'Timely Execution' 		WHEN tet.EXCEPTION_TYPE_ID = '10' THEN 'Timely Recording' 		WHEN tet.EXCEPTION_TYPE_ID = '11' THEN 'Timely Release' 		WHEN tet.EXCEPTION_TYPE_ID = '13' THEN 'Aggregation' 		WHEN tet.EXCEPTION_TYPE_ID = '14' THEN 'Sequential Orders' 		WHEN tet.EXCEPTION_TYPE_ID = '15' THEN 'Amendments' 		--WHEN tet.EXCEPTION_TYPE_ID = 'IS' THEN 'Implementation Shortfall' 		WHEN tet.EXCEPTION_TYPE_ID = '40' THEN 'Equity trades instructed > T+5' 	END AS AREA, 	CASE  		WHEN tet.EXCEPTION_TYPE_ID = '1' THEN 'No. of exceptions' 		WHEN tet.EXCEPTION_TYPE_ID = '7' THEN INST_TYPE 		WHEN tet.EXCEPTION_TYPE_ID = '9'   THEN 'No. of exceptions' 		WHEN tet.EXCEPTION_TYPE_ID = '10' THEN 'No. of exceptions' 		WHEN tet.EXCEPTION_TYPE_ID = '11' THEN 'No. of exceptions' 		WHEN tet.EXCEPTION_TYPE_ID = '13' THEN 'No. of exceptions' 		WHEN tet.EXCEPTION_TYPE_ID = '14' THEN 'No. of exceptions' 		WHEN tet.EXCEPTION_TYPE_ID = '15' THEN 'No. of Amendments made during the month' 		--WHEN tet.EXCEPTION_TYPE_ID = 'IS' THEN 'No. of exceptions' 		WHEN tet.EXCEPTION_TYPE_ID = '40' THEN 'No. of exceptions' 	END AS [TYPE], 	COUNT(DISTINCT tet.EXCEPTION_ID) AS TOTAL_POP, 	SUM([CM_Reviewed]) AS [CM_Reviewed], 	--CASE WHEN STATUS in ('Pre Sampling', 'With C&A Reviewer') THEN COUNT(EXECUTION_ID_1) ELSE 0 END AS TOTAL_POP, 	--tet.COUNTRY, 	tet.[DATE] as trade_date, 	EOMONTH(CONVERT(DATE,CONCAT(tet.[DATE],'-01'))) AS [Date], 	@REPORT_NAME AS [Report_Name] 	--COUNT(EXCEPTION_ID) AS EXECUTION_ID_COUNT INTO #temp_count_table FROM #temp_exception_table tet GROUP BY 	CASE 		WHEN tet.EXCEPTION_TYPE_ID = '1' THEN 'Quote Exception' 		WHEN tet.EXCEPTION_TYPE_ID = '7' THEN 'Non-Winning Quote' 		WHEN tet.EXCEPTION_TYPE_ID = '9'  THEN 'Timely Execution' 		WHEN tet.EXCEPTION_TYPE_ID = '10' THEN 'Timely Recording' 		WHEN tet.EXCEPTION_TYPE_ID = '11' THEN 'Timely Release' 		WHEN tet.EXCEPTION_TYPE_ID = '13' THEN 'Aggregation' 		WHEN tet.EXCEPTION_TYPE_ID = '14' THEN 'Sequential Orders' 		WHEN tet.EXCEPTION_TYPE_ID = '15' THEN 'Amendments' 		--WHEN tet.EXCEPTION_TYPE_ID = 'IS' THEN 'Implementation Shortfall' 		WHEN tet.EXCEPTION_TYPE_ID = '40' THEN 'Equity trades instructed > T+5' 	END, 	CASE  		WHEN tet.EXCEPTION_TYPE_ID = '1' THEN 'No. of exceptions' 		WHEN tet.EXCEPTION_TYPE_ID = '7' THEN INST_TYPE 		WHEN tet.EXCEPTION_TYPE_ID = '9'   THEN 'No. of exceptions' 		WHEN tet.EXCEPTION_TYPE_ID = '10' THEN 'No. of exceptions' 		WHEN tet.EXCEPTION_TYPE_ID = '11' THEN 'No. of exceptions' 		WHEN tet.EXCEPTION_TYPE_ID = '13' THEN 'No. of exceptions' 		WHEN tet.EXCEPTION_TYPE_ID = '14' THEN 'No. of exceptions' 		WHEN tet.EXCEPTION_TYPE_ID = '15' THEN 'No. of Amendments made during the month' 		--WHEN tet.EXCEPTION_TYPE_ID = 'IS' THEN 'No. of exceptions' 		WHEN tet.EXCEPTION_TYPE_ID = '40' THEN 'No. of exceptions' 	END, 	tet.[DATE], 	EOMONTH(CONVERT(DATE,CONCAT(tet.[DATE],'-01')))    IF OBJECT_ID('tempdb..#temp_dealing_desk_controls', 'U') IS NOT NULL DROP TABLE #temp_dealing_desk_controls SELECT DISTINCT 	AREA, 	TYPE, 	trade_date, 	SUM(TOTAL_POP) AS [VALUE], 	'NO_EXCEPTIONS_IN_SCOPE' AS [IN_SCOPE/REVIEWED], 	[Date], 	@REPORT_NAME AS [Report_Name] INTO #temp_dealing_desk_controls  FROM #temp_count_table  GROUP BY  	AREA, 	TYPE, 	trade_date, 	[Date]  	union  	SELECT DISTINCT 	AREA, 	TYPE, 	trade_date, 	SUM([CM_Reviewed]) AS [VALUE], 	'NO_EXCEPTIONS_REVIEWED' AS [IN_SCOPE/REVIEWED], 	[Date], 	@REPORT_NAME AS [Report_Name] FROM #temp_count_table  GROUP BY  	AREA, 	TYPE, 	trade_date, 	[Date]  		 IF OBJECT_ID('tempdb..#temp_cancel_table', 'U') IS NOT NULL DROP TABLE #temp_cancel_table SELECT DISTINCT 	MULTI_FUND_ID, 	MIN(AMENDMENT_FLAG_CREATETIME) AS CANCEL_TIME, 	MAX(CASE WHEN ex.REASON in ('Tested and exception noted', 'Tested and no issues noted') OR ex.COMMENT IN ('Tested and exception noted', 'Tested and no issues noted') THEN 1 ELSE 0 END) AS [CM_Reviewed], 	@REPORT_NAME AS [Report_Name] INTO #temp_cancel_table FROM VISTA_REPORTING.[dbo].[MASTER_AMENDMENT_FLAG_TABLE] a LEFT JOIN VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE ex ON CONCAT(a.MULTI_FUND_ID,'_15',a.TOUCH_COUNT) = ex.ID  WHERE Amendment_Cancellation = 'Cancellation' AND DEALING_DESK ='Equity' and AMENDMENT_FLAG_CREATETIME between @Start_Date and @End_Date GROUP BY MULTI_FUND_ID   IF OBJECT_ID('tempdb..#temp_cancel_table2', 'U') IS NOT NULL DROP TABLE #temp_cancel_table2 SELECT DISTINCT 	'Post Trade Cancellations' AS [AREA], 	'No. of Cancellations made during the month' AS [TYPE], 	CONCAT(YEAR(CANCEL_TIME), ' - ', MONTH(CANCEL_TIME)) AS EXCEPTION_DATE, 	COUNT(MULTI_FUND_ID) AS [VALUE], 	'NO_EXCEPTIONS_IN_SCOPE' AS [IN_SCOPE/REVIEWED], 	EOMONTH(CANCEL_TIME) AS [Date], 	@REPORT_NAME AS [Report_Name] INTO #temp_cancel_table2 FROM #temp_cancel_table GROUP BY CONCAT(YEAR(CANCEL_TIME), ' - ', MONTH(CANCEL_TIME)), EOMONTH(CANCEL_TIME)  UNION  SELECT DISTINCT 	'Post Trade Cancellations' AS [AREA], 	'No. of Cancellations made during the month' AS [TYPE], 	CONCAT(YEAR(CANCEL_TIME), ' - ', MONTH(CANCEL_TIME)) AS EXCEPTION_DATE, 	COUNT(CASE WHEN [CM_Reviewed] = 1 THEN MULTI_FUND_ID ELSE NULL END) AS [VALUE], 	'NO_EXCEPTIONS_REVIEWED' AS [IN_SCOPE/REVIEWED], 	EOMONTH(CANCEL_TIME) AS [Date], 	@REPORT_NAME AS [Report_Name] FROM #temp_cancel_table GROUP BY CONCAT(YEAR(CANCEL_TIME), ' - ', MONTH(CANCEL_TIME)), EOMONTH(CANCEL_TIME)   IF OBJECT_ID('tempdb..#temp_finaltable', 'U') IS NOT NULL DROP TABLE #temp_finaltable SELECT *  into #temp_finaltable FROM ( 	SELECT * FROM #temp_dealing_desk_controls 	UNION  	SELECT * FROM #temp_cancel_table2 )tmp  --declare @current_month int, --@current_year int, --@current_date date --set @current_month = @Start_Month  --set @current_year = @Start_Year --set @current_date = CONVERT(DATE,CONCAT(@current_year,'-',@current_month,'-01')) --while @current_date between @Start_Date and @End_Date --begin --	insert into #temp_finaltable values --	('','',CONCAT(@current_year,' - ',@current_month),'', '',EOMONTH(@current_date),@REPORT_NAME) --	set @current_month += 1 --	set @current_date = CONVERT(DATE,CONCAT(@current_year,'-',@current_month,'-01')) --end   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_EQ_COBS_SUMMARY_STATS_TABLE', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_EQ_COBS_SUMMARY_STATS_TABLE 	from #temp_finaltable ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_EQ_COBS_SUMMARY_STATS_TABLE 	SELECT * 	from #temp_finaltable  IF OBJECT_ID('tempdb..#temp_count_table_DATA', 'U') IS NOT NULL DROP TABLE #temp_count_table_DATA SELECT DISTINCT 	CASE 		WHEN tet.EXCEPTION_TYPE_ID = '1' THEN 'Quote Exception' 		WHEN tet.EXCEPTION_TYPE_ID = '7' THEN 'Non-Winning Quote' 		WHEN tet.EXCEPTION_TYPE_ID = '9'  THEN 'Timely Execution' 		WHEN tet.EXCEPTION_TYPE_ID = '10' THEN 'Timely Recording' 		WHEN tet.EXCEPTION_TYPE_ID = '11' THEN 'Timely Release' 		WHEN tet.EXCEPTION_TYPE_ID = '13' THEN 'Aggregation' 		WHEN tet.EXCEPTION_TYPE_ID = '14' THEN 'Sequential Orders' 		WHEN tet.EXCEPTION_TYPE_ID = '15' THEN 'Amendments' 		--WHEN tet.EXCEPTION_TYPE_ID = 'IS' THEN 'Implementation Shortfall' 		WHEN tet.EXCEPTION_TYPE_ID = '40' THEN 'Equity trades instructed > T+5' 	END AS AREA, 	CASE  		WHEN tet.EXCEPTION_TYPE_ID = '1' THEN 'No. of exceptions' 		WHEN tet.EXCEPTION_TYPE_ID = '7' THEN INST_TYPE 		WHEN tet.EXCEPTION_TYPE_ID = '9'   THEN 'No. of exceptions' 		WHEN tet.EXCEPTION_TYPE_ID = '10' THEN 'No. of exceptions' 		WHEN tet.EXCEPTION_TYPE_ID = '11' THEN 'No. of exceptions' 		WHEN tet.EXCEPTION_TYPE_ID = '13' THEN 'No. of exceptions' 		WHEN tet.EXCEPTION_TYPE_ID = '14' THEN 'No. of exceptions' 		WHEN tet.EXCEPTION_TYPE_ID = '15' THEN 'No. of Amendments made during the month' 		--WHEN tet.EXCEPTION_TYPE_ID = 'IS' THEN 'No. of exceptions' 		WHEN tet.EXCEPTION_TYPE_ID = '40' THEN 'No. of exceptions' 	END AS [TYPE], 	tet.EXCEPTION_ID, 	[CM_Reviewed], 	--CASE WHEN STATUS in ('Pre Sampling', 'With C&A Reviewer') THEN COUNT(EXECUTION_ID_1) ELSE 0 END AS TOTAL_POP, 	--tet.COUNTRY, 	tet.[DATE] as trade_date, 	EOMONTH(CONVERT(DATE,CONCAT(tet.[DATE],'-01'))) AS [Date], 	@REPORT_NAME AS [Report_Name] 	--COUNT(EXCEPTION_ID) AS EXECUTION_ID_COUNT INTO #temp_count_table_DATA FROM #temp_exception_table tet   IF OBJECT_ID('tempdb..#temp_dealing_desk_controls_DATA', 'U') IS NOT NULL DROP TABLE #temp_dealing_desk_controls_DATA SELECT DISTINCT 	AREA, 	TYPE, 	trade_date, 	EXCEPTION_ID, 	[CM_Reviewed], 	[Date], 	@REPORT_NAME AS [Report_Name] INTO #temp_dealing_desk_controls_DATA FROM #temp_count_table_DATA  		 IF OBJECT_ID('tempdb..#temp_cancel_table_DATA', 'U') IS NOT NULL DROP TABLE #temp_cancel_table_DATA SELECT DISTINCT 	MULTI_FUND_ID, 	MIN(AMENDMENT_FLAG_CREATETIME) AS CANCEL_TIME, 	MAX(CASE WHEN ex.REASON in ('Tested and exception noted', 'Tested and no issues noted') OR ex.COMMENT IN ('Tested and exception noted', 'Tested and no issues noted') THEN 1 ELSE 0 END) AS [CM_Reviewed], 	@REPORT_NAME AS [Report_Name] INTO #temp_cancel_table_DATA FROM VISTA_REPORTING.[dbo].[MASTER_AMENDMENT_FLAG_TABLE] a LEFT JOIN VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE ex ON CONCAT(a.MULTI_FUND_ID,'_15',a.TOUCH_COUNT) = ex.ID  WHERE Amendment_Cancellation = 'Cancellation' AND DEALING_DESK ='Equity' and AMENDMENT_FLAG_CREATETIME between @Start_Date and @End_Date GROUP BY MULTI_FUND_ID   IF OBJECT_ID('tempdb..#temp_cancel_table2_DATA', 'U') IS NOT NULL DROP TABLE #temp_cancel_table2_DATA SELECT DISTINCT 	'Post Trade Cancellations' AS [AREA], 	'No. of Cancellations made during the month' AS [TYPE], 	CONCAT(YEAR(CANCEL_TIME), ' - ', MONTH(CANCEL_TIME)) AS EXCEPTION_DATE, 	MULTI_FUND_ID, 	[CM_Reviewed], 	EOMONTH(CANCEL_TIME) AS [Date], 	@REPORT_NAME AS [Report_Name] into  #temp_cancel_table2_DATA FROM #temp_cancel_table_DATA  IF OBJECT_ID('tempdb..#temp_finaltable_DATA', 'U') IS NOT NULL DROP TABLE #temp_finaltable_DATA SELECT *  into #temp_finaltable_DATA FROM ( 	SELECT * FROM #temp_dealing_desk_controls_DATA 	UNION  	SELECT * FROM #temp_cancel_table2_DATA )tmp   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_EQ_COBS_SUMMARY_STATS_TABLE_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_EQ_COBS_SUMMARY_STATS_TABLE_DATA 	from #temp_finaltable_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_EQ_COBS_SUMMARY_STATS_TABLE_DATA 	SELECT * 	from #temp_finaltable_DATA  END   --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: DMC_EQ_DEALING_STATS CreateDate: 2019-10-18 08:39:50.027 ModifyDate: 2020-11-28 00:08:28.697 --- DEFINITION START --- -- ============================================= -- Author:		<Henderson, Will> -- Create date: <2018-07-17> -- Description:	 -- <Generate DMC reports for EQ Dealing Statistics. --	This stored procedure takes a start month, end month and report name  --	as input parameters and generates the reports for these months. -- > -- =============================================   -- ***************VERSION CONTROL*************** -- 2018-07-17 - WH: Created base script -- ********************************************* CREATE PROCEDURE  [dbo].[DMC_EQ_DEALING_STATS]  	@Start_Month INT, 	@Start_Year INT, 	@End_Month INT, 	@End_Year INT, 	@REPORT_NAME VARCHAR(MAX) AS  DECLARE @Start_Date DATETIME; SET @Start_Date = CONVERT(DATE,CONCAT(@Start_Year,'-',@Start_Month,'-01')); --Turn the input start month parameter into a date (using the first day of the month) DECLARE @End_Date0 DATETIME; DECLARE @End_Date DATETIME; SET @End_Date0 = EOMONTH(CONVERT(DATETIME,CONCAT(@End_Year,'-',@End_Month,'-01')));  --Turn the input end month parameter into a date (using the last day of the month)  SET @End_Date = DATEADD(second,86399,@End_Date0);  --Add the metadata to a table so we keep a history of all reports run IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_REPORTS_METADATA', 'U') IS NULL 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		CONVERT(VARCHAR(50),'EQDD_dealing_Stats') AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date] 	INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		'EQDD_dealing_Stats' AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date]  --Number of orders IF OBJECT_ID('tempdb..#temp_DMC_EQ_STATS_ORDERS_BY_ASSET_TYPE', 'U') IS NOT NULL DROP TABLE #temp_DMC_EQ_STATS_ORDERS_BY_ASSET_TYPE 	select  		count(distinct oc.PM_ORD) AS [Num Orders], 		case  			when inst_type = 'EQUITIES' then 'Equities' 			when inst_type = 'EQUITY FUTURES' then 'Equity Futures' 			when inst_type = 'ET OPTIONS' then 'ET Options' 			when inst_type = 'CONV BOND' then 'Convertible Bonds' 			when inst_type = 'ETF' then 'Exchange Traded Funds' 			when inst_type = 'TRS' then 'TRS' 			else 'Equities' --Default any missing orders to Equity 		end AS [Asset Type], 		concat(month([Trade Date]), '-',DATEPART(YY,[Trade Date] )) as [Month Year], 		EOMONTH([Trade Date]) AS [Date], 		@REPORT_NAME AS [Report_Name] 	INTO #temp_DMC_EQ_STATS_ORDERS_BY_ASSET_TYPE 	from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE m 	LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc 	ON m.[Order] = oc.TRD_ORD 	where DEALING_DESK = 'Equity' 		AND [Trade Date] BETWEEN @Start_Date AND @End_Date 	group by 		concat(month([Trade Date]), '-',DATEPART(YY,[Trade Date] )), 		EOMONTH([Trade Date]), 		case  			when inst_type = 'EQUITIES' then 'Equities' 			when inst_type = 'EQUITY FUTURES' then 'Equity Futures' 			when inst_type = 'ET OPTIONS' then 'ET Options' 			when inst_type = 'CONV BOND' then 'Convertible Bonds' 			when inst_type = 'ETF' then 'Exchange Traded Funds' 			when inst_type = 'TRS' then 'TRS' 			else 'Equities' --Default any missing orders to Equity 		end  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_EQ_STATS_ORDERS_BY_ASSET_TYPE', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_ORDERS_BY_ASSET_TYPE 	from #temp_DMC_EQ_STATS_ORDERS_BY_ASSET_TYPE ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_ORDERS_BY_ASSET_TYPE 	SELECT * 	from #temp_DMC_EQ_STATS_ORDERS_BY_ASSET_TYPE  --Number of orders IF OBJECT_ID('tempdb..#temp_DMC_EQ_STATS_ORDERS_BY_ASSET_TYPE_DATA', 'U') IS NOT NULL DROP TABLE #temp_DMC_EQ_STATS_ORDERS_BY_ASSET_TYPE_DATA 	select  		oc.PM_ORD, 		case  			when inst_type = 'EQUITIES' then 'Equities' 			when inst_type = 'EQUITY FUTURES' then 'Equity Futures' 			when inst_type = 'ET OPTIONS' then 'ET Options' 			when inst_type = 'CONV BOND' then 'Convertible Bonds' 			when inst_type = 'ETF' then 'Exchange Traded Funds' 			when inst_type = 'TRS' then 'TRS' 			else 'Equities' --Default any missing orders to Equity 		end AS [Asset Type], 		concat(month([Trade Date]), '-',DATEPART(YY,[Trade Date] )) as [Month Year], 		EOMONTH([Trade Date]) AS [Date], 		@REPORT_NAME AS [Report_Name] 	INTO #temp_DMC_EQ_STATS_ORDERS_BY_ASSET_TYPE_DATA 	from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE m 	LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc 	ON m.[Order] = oc.TRD_ORD 	where DEALING_DESK = 'Equity' 		AND [Trade Date] BETWEEN @Start_Date AND @End_Date  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_EQ_STATS_ORDERS_BY_ASSET_TYPE_DATA', 'U') IS NULL 	SELECT DISTINCT * 	INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_ORDERS_BY_ASSET_TYPE_DATA 	from #temp_DMC_EQ_STATS_ORDERS_BY_ASSET_TYPE_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_ORDERS_BY_ASSET_TYPE_DATA 	SELECT DISTINCT * 	from #temp_DMC_EQ_STATS_ORDERS_BY_ASSET_TYPE_DATA  -------Number of trades through FIX IF OBJECT_ID('tempdb..#temp_DMC_EQ_STATS_ORDERS_BY_FIX', 'U') IS NOT NULL DROP TABLE #temp_DMC_EQ_STATS_ORDERS_BY_FIX 	select  		count(distinct  			CASE  				WHEN p.Venue =  'FIXEMSX'	THEN oc.PM_ORD -- business requirements state to count the number of orders (not the number of trades) 				ELSE NULL 			END) AS [Value], 		'Trades through FIX' as [Type], 		concat(month([Trade Date]), '-',DATEPART(YY, [Trade Date])) AS [Month Year], 		EOMONTH([Trade Date]) AS [Date], 		@REPORT_NAME AS [Report_Name] 	INTO #temp_DMC_EQ_STATS_ORDERS_BY_FIX 	from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE m  	left join VISTA_REPORTING.dbo.PLACEMENTS p on m.MULTI_FUND_ID = p.MULTI_FUND_ID 	LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON m.[Order] = oc.TRD_ORD 	where m.DEALING_DESK = 'Equity' 	AND [Trade Date] BETWEEN @Start_Date AND @End_Date 	group by  		concat(month([Trade Date]), '-',DATEPART(YY, [Trade Date])),  		EOMONTH([Trade Date])   		union  	select	 		100.0*count(distinct  			CASE  				WHEN p.Venue =  'FIXEMSX'	THEN oc.PM_ORD -- business requirements state to count the number of orders (not the number of trades) 				ELSE NULL 			END)/ 			count(distinct m.PM_ORD) AS [Value], 			'Trades through FIX %' as [Type], 		concat(month([Trade Date]), '-',DATEPART(YY, [Trade Date])) AS [Month Year], 		EOMONTH([Trade Date]) AS [Date], 		@REPORT_NAME AS [Report_Name] 	from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE m  	left join VISTA_REPORTING.dbo.PLACEMENTS p on m.MULTI_FUND_ID = p.MULTI_FUND_ID 	LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON m.[Order] = oc.TRD_ORD 	where m.DEALING_DESK = 'Equity' 	AND [Trade Date] BETWEEN @Start_Date AND @End_Date 	group by  		concat(month([Trade Date]), '-',DATEPART(YY, [Trade Date])),  		EOMONTH([Trade Date])   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_EQ_STATS_ORDERS_BY_FIX', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_ORDERS_BY_FIX 	from #temp_DMC_EQ_STATS_ORDERS_BY_FIX ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_ORDERS_BY_FIX 	SELECT * 	from #temp_DMC_EQ_STATS_ORDERS_BY_FIX   IF OBJECT_ID('tempdb..#temp_DMC_EQ_STATS_ORDERS_BY_FIX_DATA', 'U') IS NOT NULL DROP TABLE #temp_DMC_EQ_STATS_ORDERS_BY_FIX_DATA 	select  		CASE WHEN p.Venue =  'FIXEMSX'	THEN 1 else 0 end as FIXEMSX, 		oc.PM_ORD, -- business requirements state to count the number of orders (not the number of trades 		'Trades through FIX' as [Type], 		concat(month([Trade Date]), '-',DATEPART(YY, [Trade Date])) AS [Month Year], 		EOMONTH([Trade Date]) AS [Date], 		@REPORT_NAME AS [Report_Name] 	INTO #temp_DMC_EQ_STATS_ORDERS_BY_FIX_DATA 	from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE m  	left join VISTA_REPORTING.dbo.PLACEMENTS p on m.MULTI_FUND_ID = p.MULTI_FUND_ID 	LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON m.[Order] = oc.TRD_ORD 	where m.DEALING_DESK = 'Equity' 	AND [Trade Date] BETWEEN @Start_Date AND @End_Date   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_EQ_STATS_ORDERS_BY_FIX_DATA', 'U') IS NULL 	SELECT DISTINCT * 	INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_ORDERS_BY_FIX_DATA 	from #temp_DMC_EQ_STATS_ORDERS_BY_FIX_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_ORDERS_BY_FIX_DATA 	SELECT DISTINCT * 	from #temp_DMC_EQ_STATS_ORDERS_BY_FIX_DATA   --Create a table with the total value of the trade, the month year and the year quarter for that trade. This is done to remove duplicates. SELECT  	MULTI_FUND_ID, 	concat(month(TRD_TRADE_DATE), '-',DATEPART(YY, TRD_TRADE_DATE)) AS [Month Year], 	TRD_TRADE_DATE, 	SUM(NET_CONSIDERATION_GBP) AS NET_CONSIDERATION_GBP, 	SUM(ABS(TRD_PRICE * TRD_ORIG_FACE * 1.0*CONTRACT_SIZE/GBP_INDEX_RATE)) AS [Futures_Value] INTO #temp_nc FROM VISTA_REPORTING.dbo.TRADES t WHERE FinalFlag = 1 GROUP BY  	MULTI_FUND_ID,  	concat(month(TRD_TRADE_DATE), '-',DATEPART(YY, TRD_TRADE_DATE)), 	TRD_TRADE_DATE  ---- Net consideration GBP broken down by Asset class and month IF OBJECT_ID('tempdb..#temp_DMC_EQ_STATS_NET_CON_BY_ASSET_TYPE', 'U') IS NOT NULL DROP TABLE #temp_DMC_EQ_STATS_NET_CON_BY_ASSET_TYPE 	select  		CASE WHEN inst_type <> 'EQUITY FUTURES' THEN sum(abs(nc.NET_CONSIDERATION_GBP))  			WHEN INST_TYPE = 'EQUITY FUTURES' THEN SUM(Futures_Value) 		END AS [Net_Consideration_GBP], 			case  			when inst_type = 'EQUITIES' then 'Equities' 			when inst_type = 'EQUITY FUTURES' then 'Equity Futures' 			when inst_type = 'ET OPTIONS' then 'ET Options' 			when inst_type = 'CONV BOND' then 'Convertible Bonds' 			when inst_type = 'ETF' then 'Exchange Traded Funds' 			when inst_type = 'TRS' then 'TRS' 			 end as [Asset Type], 		  [Month Year], 		  EOMONTH(TRD_TRADE_DATE) AS [Date], 		@REPORT_NAME AS [Report_Name] 	INTO #temp_DMC_EQ_STATS_NET_CON_BY_ASSET_TYPE 	from (SELECT DISTINCT MULTI_FUND_ID, INST_TYPE, DEALING_DESK FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) p 	LEFT JOIN #temp_nc nc ON p.MULTI_FUND_ID = nc.MULTI_FUND_ID 	where DEALING_DESK = 'Equity' 	AND TRD_TRADE_DATE BETWEEN @Start_Date AND @End_Date 	group by 		 		case  			when inst_type = 'EQUITIES' then 'Equities' 			when inst_type = 'EQUITY FUTURES' then 'Equity Futures' 			when inst_type = 'ET OPTIONS' then 'ET Options' 			when inst_type = 'CONV BOND' then 'Convertible Bonds' 			when inst_type = 'ETF' then 'Exchange Traded Funds' 			when inst_type = 'TRS' then 'TRS' 		end, 		INST_TYPE, 		[Month Year], 		EOMONTH(TRD_TRADE_DATE)  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_EQ_STATS_NET_CON_BY_ASSET_TYPE', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_NET_CON_BY_ASSET_TYPE 	from #temp_DMC_EQ_STATS_NET_CON_BY_ASSET_TYPE ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_NET_CON_BY_ASSET_TYPE 	SELECT * 	from #temp_DMC_EQ_STATS_NET_CON_BY_ASSET_TYPE   ---- Net consideration GBP broken down by Asset class and month IF OBJECT_ID('tempdb..#temp_DMC_EQ_STATS_NET_CON_BY_ASSET_TYPE_DATA', 'U') IS NOT NULL DROP TABLE #temp_DMC_EQ_STATS_NET_CON_BY_ASSET_TYPE_DATA 	select  		CASE WHEN inst_type <> 'EQUITY FUTURES' THEN cast(nc.NET_CONSIDERATION_GBP as varchar(50)) 			WHEN INST_TYPE = 'EQUITY FUTURES' THEN cast( Futures_Value as varchar(50)) 		END AS [Net_Consideration_GBP], 			case  			when inst_type = 'EQUITIES' then 'Equities' 			when inst_type = 'EQUITY FUTURES' then 'Equity Futures' 			when inst_type = 'ET OPTIONS' then 'ET Options' 			when inst_type = 'CONV BOND' then 'Convertible Bonds' 			when inst_type = 'ETF' then 'Exchange Traded Funds' 			when inst_type = 'TRS' then 'TRS' 			 end as [Asset Type], 		  [Month Year], 		  EOMONTH(TRD_TRADE_DATE) AS [Date], 		@REPORT_NAME AS [Report_Name] 	INTO #temp_DMC_EQ_STATS_NET_CON_BY_ASSET_TYPE_DATA 	from (SELECT DISTINCT MULTI_FUND_ID, INST_TYPE, DEALING_DESK FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) p 	LEFT JOIN #temp_nc nc ON p.MULTI_FUND_ID = nc.MULTI_FUND_ID 	where DEALING_DESK = 'Equity' 	AND TRD_TRADE_DATE BETWEEN @Start_Date AND @End_Date  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_EQ_STATS_NET_CON_BY_ASSET_TYPE_DATA', 'U') IS NULL 	SELECT DISTINCT * 	INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_NET_CON_BY_ASSET_TYPE_DATA 	from #temp_DMC_EQ_STATS_NET_CON_BY_ASSET_TYPE_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_NET_CON_BY_ASSET_TYPE_DATA 	SELECT DISTINCT * 	from #temp_DMC_EQ_STATS_NET_CON_BY_ASSET_TYPE_DATA   -----Programme Trades IF OBJECT_ID('tempdb..#temp_DMC_EQ_STATS_PROGRAM_TRADES', 'U') IS NOT NULL DROP TABLE #temp_DMC_EQ_STATS_PROGRAM_TRADES 	select  		COUNT(DISTINCT trd.ORD_GROUP) AS [Value], 		'Num_Trades' as [Type], 		nc.[Month Year], 		EOMONTH(TRD_TRADE_DATE) AS [Date], 		@REPORT_NAME AS [Report_Name] 	INTO #temp_DMC_EQ_STATS_PROGRAM_TRADES 	from (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, INST_TYPE, DEALING_DESK, EXECUTION_TYPE FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) p  	LEFT JOIN #temp_nc nc on p.MULTI_FUND_ID = nc.MULTI_FUND_ID 	LEFT JOIN (SELECT DISTINCT ORD_NUM, MAX(ORD_GROUP) AS ORD_GROUP FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd ON p.ORD_NUM = trd.ORD_NUM 	where	   		p.DEALING_DESK = 'Equity' 		--and p.EXECUTION_TYPE = 'P'  		and trd.ORD_GROUP is not null 		and p.INST_TYPE <> 'EQUITY FUTURES' 		AND TRD_TRADE_DATE BETWEEN @Start_Date AND @End_Date 	group by  		nc.[Month Year], 		EOMONTH(TRD_TRADE_DATE)  		union  		select  		COUNT(DISTINCT oc.PM_ORD) AS [Value], 		'Num_Orders' as [Type], 		nc.[Month Year], 		EOMONTH(TRD_TRADE_DATE) AS [Date], 		@REPORT_NAME AS [Report_Name] 	from (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, INST_TYPE, DEALING_DESK, EXECUTION_TYPE FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) p  	LEFT JOIN #temp_nc nc on p.MULTI_FUND_ID = nc.MULTI_FUND_ID 	LEFT JOIN (SELECT DISTINCT ORD_NUM, MAX(ORD_GROUP) AS ORD_GROUP FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd ON p.ORD_NUM = trd.ORD_NUM 	LEFT JOIN (SELECT DISTINCT TRD_ORD, PM_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON trd.ORD_NUM = oc.TRD_ORD 	where	   		p.DEALING_DESK = 'Equity' 		--and p.EXECUTION_TYPE = 'P'  		and trd.ORD_GROUP is not null 		and p.INST_TYPE <> 'EQUITY FUTURES' 		AND TRD_TRADE_DATE BETWEEN @Start_Date AND @End_Date 	group by  		nc.[Month Year], 		EOMONTH(TRD_TRADE_DATE)  		union  	select 		SUM(abs(nc.net_consideration_gbp)) AS [Value], 		'Net_Consideration_GBP' as [Type], 		nc.[Month Year], 		EOMONTH(TRD_TRADE_DATE) AS [Date], 		@REPORT_NAME AS [Report_Name] 	from (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, INST_TYPE, DEALING_DESK, EXECUTION_TYPE FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) p  	LEFT JOIN #temp_nc nc on p.MULTI_FUND_ID = nc.MULTI_FUND_ID 	LEFT JOIN (SELECT DISTINCT ORD_NUM, MAX(ORD_GROUP) AS ORD_GROUP FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd ON p.ORD_NUM = trd.ORD_NUM 	where	   		p.DEALING_DESK = 'Equity' 		--and p.EXECUTION_TYPE = 'P'  		and trd.ORD_GROUP is not null 		and p.INST_TYPE <> 'EQUITY FUTURES' 		AND TRD_TRADE_DATE BETWEEN @Start_Date AND @End_Date 	group by 		nc.[Month Year], 		EOMONTH(TRD_TRADE_DATE)  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_EQ_STATS_PROGRAM_TRADES', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_PROGRAM_TRADES 	from #temp_DMC_EQ_STATS_PROGRAM_TRADES ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_PROGRAM_TRADES 	SELECT * 	from #temp_DMC_EQ_STATS_PROGRAM_TRADES  -----Programme Trades IF OBJECT_ID('tempdb..#temp_DMC_EQ_STATS_PROGRAM_TRADES_DATA', 'U') IS NOT NULL DROP TABLE #temp_DMC_EQ_STATS_PROGRAM_TRADES_DATA 	select  		cast(trd.ORD_GROUP as varchar(50)) as ID_value, 		'TRD ORD_GROUP' as [Type], 		nc.[Month Year], 		EOMONTH(TRD_TRADE_DATE) AS [Date], 		@REPORT_NAME AS [Report_Name] 	INTO #temp_DMC_EQ_STATS_PROGRAM_TRADES_DATA 	from (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, INST_TYPE, DEALING_DESK, EXECUTION_TYPE FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) p  	LEFT JOIN #temp_nc nc on p.MULTI_FUND_ID = nc.MULTI_FUND_ID 	LEFT JOIN (SELECT DISTINCT ORD_NUM, MAX(ORD_GROUP) AS ORD_GROUP FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd ON p.ORD_NUM = trd.ORD_NUM 	where	   		p.DEALING_DESK = 'Equity' 		--and p.EXECUTION_TYPE = 'P'  		and trd.ORD_GROUP is not null 		and p.INST_TYPE <> 'EQUITY FUTURES' 		AND TRD_TRADE_DATE BETWEEN @Start_Date AND @End_Date 	  		union  		select  		cast(oc.PM_ORD as varchar(50)) as ID_value, 		'PM Order Number' as [Type], 		nc.[Month Year], 		EOMONTH(TRD_TRADE_DATE) AS [Date], 		@REPORT_NAME AS [Report_Name] 	from (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, INST_TYPE, DEALING_DESK, EXECUTION_TYPE FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) p  	LEFT JOIN #temp_nc nc on p.MULTI_FUND_ID = nc.MULTI_FUND_ID 	LEFT JOIN (SELECT DISTINCT ORD_NUM, MAX(ORD_GROUP) AS ORD_GROUP FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd ON p.ORD_NUM = trd.ORD_NUM 	LEFT JOIN (SELECT DISTINCT TRD_ORD, PM_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON trd.ORD_NUM = oc.TRD_ORD 	where	   		p.DEALING_DESK = 'Equity' 		--and p.EXECUTION_TYPE = 'P'  		and trd.ORD_GROUP is not null 		and p.INST_TYPE <> 'EQUITY FUTURES' 		AND TRD_TRADE_DATE BETWEEN @Start_Date AND @End_Date  		union  		select  		cast(nc.net_consideration_gbp as varchar(50)) as ID_value, 		'Net_Consideration_GBP' as [Type], 		nc.[Month Year], 		EOMONTH(TRD_TRADE_DATE) AS [Date], 		@REPORT_NAME AS [Report_Name] 	from (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, INST_TYPE, DEALING_DESK, EXECUTION_TYPE FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) p  	LEFT JOIN #temp_nc nc on p.MULTI_FUND_ID = nc.MULTI_FUND_ID 	LEFT JOIN (SELECT DISTINCT ORD_NUM, MAX(ORD_GROUP) AS ORD_GROUP FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd ON p.ORD_NUM = trd.ORD_NUM 	where	   		p.DEALING_DESK = 'Equity' 		--and p.EXECUTION_TYPE = 'P'  		and trd.ORD_GROUP is not null 		and p.INST_TYPE <> 'EQUITY FUTURES' 		AND TRD_TRADE_DATE BETWEEN @Start_Date AND @End_Date   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_EQ_STATS_PROGRAM_TRADES_DATA', 'U') IS NULL 	SELECT DISTINCT  * 	INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_PROGRAM_TRADES_DATA 	from #temp_DMC_EQ_STATS_PROGRAM_TRADES_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_PROGRAM_TRADES_DATA 	SELECT DISTINCT * 	from #temp_DMC_EQ_STATS_PROGRAM_TRADES_DATA  --% of Turnover  IF OBJECT_ID('tempdb..#temp_DMC_EQ_STATS_PERCENT_TURNOVER', 'U') IS NOT NULL DROP TABLE #temp_DMC_EQ_STATS_PERCENT_TURNOVER 	select 100.00*sum(DISTINCT case when --p.EXECUTION_TYPE = 'P' and 								   ORD_GROUP is not null 								   and p.INST_TYPE <> 'EQUITY FUTURES' then abs(nc.net_consideration_gbp) else 0 end) 								   /NULLIF(sum(DISTINCT CASE WHEN nc_tot.[Asset Type] = 'EQUITIES' THEN abs(nc_tot.net_consideration_gbp) ELSE 0 END),0) AS [Percent], 				  nc.[Month Year], 				EOMONTH(TRD_TRADE_DATE) AS [Date], 				@REPORT_NAME AS [Report_Name] 	INTO #temp_DMC_EQ_STATS_PERCENT_TURNOVER 	from (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, INST_TYPE, DEALING_DESK, EXECUTION_TYPE FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) p  	LEFT JOIN #temp_nc nc on p.MULTI_FUND_ID = nc.MULTI_FUND_ID 	LEFT JOIN (SELECT DISTINCT ORD_NUM, ORD_GROUP FROM VISTA_REPORTING.dbo.TRD_ORDERS) trd ON p.ORD_NUM = trd.ORD_NUM 	LEFT JOIN #temp_DMC_EQ_STATS_NET_CON_BY_ASSET_TYPE nc_tot ON nc.[Month Year] = nc_tot.[Month Year] 	where	   		p.DEALING_DESK = 'Equity' 		AND TRD_TRADE_DATE BETWEEN @Start_Date AND @End_Date 	group by  		nc.[Month Year], 		EOMONTH(TRD_TRADE_DATE)  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_EQ_STATS_PERCENT_TURNOVER', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_PERCENT_TURNOVER 	from #temp_DMC_EQ_STATS_PERCENT_TURNOVER ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_PERCENT_TURNOVER 	SELECT * 	from #temp_DMC_EQ_STATS_PERCENT_TURNOVER  --% of Turnover  IF OBJECT_ID('tempdb..#temp_DMC_EQ_STATS_PERCENT_TURNOVER_DATA', 'U') IS NOT NULL DROP TABLE #temp_DMC_EQ_STATS_PERCENT_TURNOVER_DATA 	select  				ORD_GROUP , 				p.INST_TYPE , 				nc.net_consideration_gbp, 				nc_tot.[Asset Type], 				nc.[Month Year], 				EOMONTH(TRD_TRADE_DATE) AS [Date], 				@REPORT_NAME AS [Report_Name] 	INTO #temp_DMC_EQ_STATS_PERCENT_TURNOVER_DATA 	from (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, INST_TYPE, DEALING_DESK, EXECUTION_TYPE FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) p  	LEFT JOIN #temp_nc nc on p.MULTI_FUND_ID = nc.MULTI_FUND_ID 	LEFT JOIN (SELECT DISTINCT ORD_NUM, ORD_GROUP FROM VISTA_REPORTING.dbo.TRD_ORDERS) trd ON p.ORD_NUM = trd.ORD_NUM 	LEFT JOIN #temp_DMC_EQ_STATS_NET_CON_BY_ASSET_TYPE nc_tot ON nc.[Month Year] = nc_tot.[Month Year] 	where	   		p.DEALING_DESK = 'Equity' 		AND TRD_TRADE_DATE BETWEEN @Start_Date AND @End_Date   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_EQ_STATS_PERCENT_TURNOVER_DATA', 'U') IS NULL 	SELECT DISTINCT * 	INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_PERCENT_TURNOVER_DATA 	from #temp_DMC_EQ_STATS_PERCENT_TURNOVER_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_PERCENT_TURNOVER_DATA 	SELECT DISTINCT * 	from #temp_DMC_EQ_STATS_PERCENT_TURNOVER_DATA  -----Algo Trades IF OBJECT_ID('tempdb..#temp_DMC_EQ_STATS_ALGO_TRADES', 'U') IS NOT NULL DROP TABLE #temp_DMC_EQ_STATS_ALGO_TRADES 	select  		count(distinct t.multi_fund_id) AS [Value], 		'Num_Trades' as [Type], 		nc.[Month Year], 		EOMONTH(TRD_TRADE_DATE) AS [Date], 		@REPORT_NAME AS [Report_Name] 	INTO  #temp_DMC_EQ_STATS_ALGO_TRADES 	from (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, TRD_EX_DESK_TYPE FROM VISTA_REPORTING.dbo.TRADES) t 	left join #temp_nc nc ON t.MULTI_FUND_ID = nc.MULTI_FUND_ID 	left join (SELECT DISTINCT MULTI_FUND_ID, DEALING_DESK FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) p on t.MULTI_FUND_ID = p.MULTI_FUND_ID 	left join (SELECT DISTINCT ORD_NUM FROM VISTA_REPORTING.dbo.TRD_ORDERS) trd_ord ON t.ORD_NUM = trd_ord.ORD_NUM 	where	   		p.DEALING_DESK = 'Equity' 		and t.TRD_EX_DESK_TYPE LIKE 'Algo%' 		AND TRD_TRADE_DATE BETWEEN @Start_Date AND @End_Date 	group by  		nc.[Month Year], 		EOMONTH(TRD_TRADE_DATE)  		union  		select  		count(distinct oc.PM_ORD) AS [Value], 		'Num_Orders' as [Type], 		nc.[Month Year], 		EOMONTH(TRD_TRADE_DATE) AS [Date], 		@REPORT_NAME AS [Report_Name] 	from (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, TRD_EX_DESK_TYPE FROM VISTA_REPORTING.dbo.TRADES) t 	left join #temp_nc nc ON t.MULTI_FUND_ID = nc.MULTI_FUND_ID 	left join (SELECT DISTINCT MULTI_FUND_ID, DEALING_DESK FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) p on t.MULTI_FUND_ID = p.MULTI_FUND_ID 	left join (SELECT DISTINCT ORD_NUM FROM VISTA_REPORTING.dbo.TRD_ORDERS) trd_ord ON t.ORD_NUM = trd_ord.ORD_NUM 	left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc on trd_ord.ORD_NUM = oc.TRD_ORD 	where	   		p.DEALING_DESK = 'Equity' 		and t.TRD_EX_DESK_TYPE LIKE 'Algo%' 		AND TRD_TRADE_DATE BETWEEN @Start_Date AND @End_Date 	group by  		nc.[Month Year], 		EOMONTH(TRD_TRADE_DATE)  		union  		select  		sum(abs(nc.net_consideration_gbp)) AS [Value], 		'Net_Consideration_GBP' as [Type], 		nc.[Month Year], 		EOMONTH(TRD_TRADE_DATE) AS [Date], 		@REPORT_NAME AS [Report_Name] 	from (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, TRD_EX_DESK_TYPE FROM VISTA_REPORTING.dbo.TRADES) t 	left join #temp_nc nc ON t.MULTI_FUND_ID = nc.MULTI_FUND_ID 	left join (SELECT DISTINCT MULTI_FUND_ID, DEALING_DESK FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) p on t.MULTI_FUND_ID = p.MULTI_FUND_ID 	left join (SELECT DISTINCT ORD_NUM FROM VISTA_REPORTING.dbo.TRD_ORDERS) trd_ord ON t.ORD_NUM = trd_ord.ORD_NUM 	where	   		p.DEALING_DESK = 'Equity' 		and t.TRD_EX_DESK_TYPE LIKE 'Algo%' 		AND TRD_TRADE_DATE BETWEEN @Start_Date AND @End_Date 	group by  		nc.[Month Year], 		EOMONTH(TRD_TRADE_DATE) 		 IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_EQ_STATS_ALGO_TRADES', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_ALGO_TRADES 	from #temp_DMC_EQ_STATS_ALGO_TRADES ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_ALGO_TRADES 	SELECT * 	from #temp_DMC_EQ_STATS_ALGO_TRADES  -----Algo Trades IF OBJECT_ID('tempdb..#temp_DMC_EQ_STATS_ALGO_TRADES_DATA', 'U') IS NOT NULL DROP TABLE #temp_DMC_EQ_STATS_ALGO_TRADES_DATA 	select  		t.multi_fund_id as ID_value, 		'Num_Trades' as [Type], 		nc.[Month Year], 		EOMONTH(TRD_TRADE_DATE) AS [Date], 		@REPORT_NAME AS [Report_Name] 	INTO  #temp_DMC_EQ_STATS_ALGO_TRADES_DATA 	from (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, TRD_EX_DESK_TYPE FROM VISTA_REPORTING.dbo.TRADES) t 	left join #temp_nc nc ON t.MULTI_FUND_ID = nc.MULTI_FUND_ID 	left join (SELECT DISTINCT MULTI_FUND_ID, DEALING_DESK FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) p on t.MULTI_FUND_ID = p.MULTI_FUND_ID 	left join (SELECT DISTINCT ORD_NUM FROM VISTA_REPORTING.dbo.TRD_ORDERS) trd_ord ON t.ORD_NUM = trd_ord.ORD_NUM 	where	   		p.DEALING_DESK = 'Equity' 		and t.TRD_EX_DESK_TYPE LIKE 'Algo%' 		AND TRD_TRADE_DATE BETWEEN @Start_Date AND @End_Date  		union  		select  		oc.PM_ORD as ID_value, 		'Num_Orders' as [Type], 		nc.[Month Year], 		EOMONTH(TRD_TRADE_DATE) AS [Date], 		@REPORT_NAME AS [Report_Name] 	from (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, TRD_EX_DESK_TYPE FROM VISTA_REPORTING.dbo.TRADES) t 	left join #temp_nc nc ON t.MULTI_FUND_ID = nc.MULTI_FUND_ID 	left join (SELECT DISTINCT MULTI_FUND_ID, DEALING_DESK FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) p on t.MULTI_FUND_ID = p.MULTI_FUND_ID 	left join (SELECT DISTINCT ORD_NUM FROM VISTA_REPORTING.dbo.TRD_ORDERS) trd_ord ON t.ORD_NUM = trd_ord.ORD_NUM 	left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc on trd_ord.ORD_NUM = oc.TRD_ORD 	where	   		p.DEALING_DESK = 'Equity' 		and t.TRD_EX_DESK_TYPE LIKE 'Algo%' 		AND TRD_TRADE_DATE BETWEEN @Start_Date AND @End_Date  		union  		select  		abs(nc.net_consideration_gbp) as ID_value, 		'Net_Consideration_GBP' as [Type], 		nc.[Month Year], 		EOMONTH(TRD_TRADE_DATE) AS [Date], 		@REPORT_NAME AS [Report_Name] 	from (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, TRD_EX_DESK_TYPE FROM VISTA_REPORTING.dbo.TRADES) t 	left join #temp_nc nc ON t.MULTI_FUND_ID = nc.MULTI_FUND_ID 	left join (SELECT DISTINCT MULTI_FUND_ID, DEALING_DESK FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) p on t.MULTI_FUND_ID = p.MULTI_FUND_ID 	left join (SELECT DISTINCT ORD_NUM FROM VISTA_REPORTING.dbo.TRD_ORDERS) trd_ord ON t.ORD_NUM = trd_ord.ORD_NUM 	where	   		p.DEALING_DESK = 'Equity' 		and t.TRD_EX_DESK_TYPE LIKE 'Algo%' 		AND TRD_TRADE_DATE BETWEEN @Start_Date AND @End_Date 		 IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_EQ_STATS_ALGO_TRADES_DATA', 'U') IS NULL 	SELECT DISTINCT * 	INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_ALGO_TRADES_DATA 	from #temp_DMC_EQ_STATS_ALGO_TRADES_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_ALGO_TRADES_DATA 	SELECT DISTINCT * 	from #temp_DMC_EQ_STATS_ALGO_TRADES_DATA  --% of Turnover  IF OBJECT_ID('tempdb..#temp_DMC_EQ_STATS_ALGO_PERCENT_TURNOVER', 'U') IS NOT NULL DROP TABLE #temp_DMC_EQ_STATS_ALGO_PERCENT_TURNOVER 	select (100.00*sum(case when TRD_EX_DESK_TYPE LIKE 'Algo%' then abs(nc.net_consideration_gbp) else null end) 								   /NULLIF(sum(CASE WHEN p.INST_TYPE = 'EQUITIES' THEN abs(nc.net_consideration_gbp) ELSE NULL END),0)) AS [Percent], 				  nc.[Month Year], 				  EOMONTH(TRD_TRADE_DATE) AS [Date], 				@REPORT_NAME AS [Report_Name] 	INTO  #temp_DMC_EQ_STATS_ALGO_PERCENT_TURNOVER 	from (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, TRD_EX_DESK_TYPE FROM VISTA_REPORTING.dbo.TRADES) t 	left join #temp_nc nc ON t.MULTI_FUND_ID = nc.MULTI_FUND_ID 	left join (SELECT DISTINCT MULTI_FUND_ID, INST_TYPE, DEALING_DESK FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) p on t.MULTI_FUND_ID = p.MULTI_FUND_ID 	WHERE  		p.DEALING_DESK = 'Equity' 		AND TRD_TRADE_DATE BETWEEN @Start_Date AND @End_Date 	group by  		nc.[Month Year], 		EOMONTH(TRD_TRADE_DATE)  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_EQ_STATS_ALGO_PERCENT_TURNOVER', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_ALGO_PERCENT_TURNOVER 	from #temp_DMC_EQ_STATS_ALGO_PERCENT_TURNOVER ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_ALGO_PERCENT_TURNOVER 	SELECT * 	from #temp_DMC_EQ_STATS_ALGO_PERCENT_TURNOVER  --% of Turnover  IF OBJECT_ID('tempdb..#temp_DMC_EQ_STATS_ALGO_PERCENT_TURNOVER_DATA', 'U') IS NOT NULL DROP TABLE #temp_DMC_EQ_STATS_ALGO_PERCENT_TURNOVER_DATA 	select  				  TRD_EX_DESK_TYPE , 				  nc.net_consideration_gbp, 				  p.INST_TYPE, 				  nc.[Month Year], 				  EOMONTH(TRD_TRADE_DATE) AS [Date], 				@REPORT_NAME AS [Report_Name] 	INTO  #temp_DMC_EQ_STATS_ALGO_PERCENT_TURNOVER_DATA 	from (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, TRD_EX_DESK_TYPE FROM VISTA_REPORTING.dbo.TRADES) t 	left join #temp_nc nc ON t.MULTI_FUND_ID = nc.MULTI_FUND_ID 	left join (SELECT DISTINCT MULTI_FUND_ID, INST_TYPE, DEALING_DESK FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) p on t.MULTI_FUND_ID = p.MULTI_FUND_ID 	WHERE  		p.DEALING_DESK = 'Equity' 		AND TRD_TRADE_DATE BETWEEN @Start_Date AND @End_Date  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_EQ_STATS_ALGO_PERCENT_TURNOVER_DATA', 'U') IS NULL 	SELECT DISTINCT * 	INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_ALGO_PERCENT_TURNOVER_DATA 	from #temp_DMC_EQ_STATS_ALGO_PERCENT_TURNOVER_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_ALGO_PERCENT_TURNOVER_DATA 	SELECT DISTINCT * 	from #temp_DMC_EQ_STATS_ALGO_PERCENT_TURNOVER_DATA   --Number of Funds Participating  IF OBJECT_ID('tempdb..#temp_DMC_EQ_STATS_NUM_FUNDS_PARTICIPATING', 'U') IS NOT NULL DROP TABLE #temp_DMC_EQ_STATS_NUM_FUNDS_PARTICIPATING 	select count(distinct fund) aS [Num_funds], 		   concat(month(TRD_TRADE_DATE), '-',DATEPART(YY, TRD_TRADE_DATE)) AS [Month Year], 		   EOMONTH(TRD_TRADE_DATE) AS [Date], 		   @REPORT_NAME AS [Report_Name] 	INTO  #temp_DMC_EQ_STATS_NUM_FUNDS_PARTICIPATING 	from VISTA_REPORTING.dbo.trades t 	LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS trd_ord 	ON t.ORD_NUM = trd_ord.ORD_NUM 	where trd_ord.dealing_desk = 'Equity' 	AND TRD_TRADE_DATE BETWEEN @Start_Date AND @End_Date 	group by  		concat(month(TRD_TRADE_DATE), '-',DATEPART(YY, TRD_TRADE_DATE)), 		EOMONTH(TRD_TRADE_DATE)  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_EQ_STATS_NUM_FUNDS_PARTICIPATING', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_NUM_FUNDS_PARTICIPATING 	from #temp_DMC_EQ_STATS_NUM_FUNDS_PARTICIPATING ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_NUM_FUNDS_PARTICIPATING 	SELECT * 	from #temp_DMC_EQ_STATS_NUM_FUNDS_PARTICIPATING  --Number of Funds Participating  IF OBJECT_ID('tempdb..#temp_DMC_EQ_STATS_NUM_FUNDS_PARTICIPATING_DATA', 'U') IS NOT NULL DROP TABLE #temp_DMC_EQ_STATS_NUM_FUNDS_PARTICIPATING_DATA 	select fund, 		   concat(month(TRD_TRADE_DATE), '-',DATEPART(YY, TRD_TRADE_DATE)) AS [Month Year], 		   EOMONTH(TRD_TRADE_DATE) AS [Date], 		   @REPORT_NAME AS [Report_Name] 	INTO  #temp_DMC_EQ_STATS_NUM_FUNDS_PARTICIPATING_DATA 	from VISTA_REPORTING.dbo.trades t 	LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS trd_ord 	ON t.ORD_NUM = trd_ord.ORD_NUM 	where trd_ord.dealing_desk = 'Equity' 	AND TRD_TRADE_DATE BETWEEN @Start_Date AND @End_Date  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_EQ_STATS_NUM_FUNDS_PARTICIPATING_DATA', 'U') IS NULL 	SELECT DISTINCT * 	INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_NUM_FUNDS_PARTICIPATING_DATA 	from #temp_DMC_EQ_STATS_NUM_FUNDS_PARTICIPATING_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_NUM_FUNDS_PARTICIPATING_DATA 	SELECT DISTINCT * 	from #temp_DMC_EQ_STATS_NUM_FUNDS_PARTICIPATING_DATA  --Number of IPOs IF OBJECT_ID('tempdb..#temp_DMC_EQ_STATS_NUM_IPOS', 'U') IS NOT NULL DROP TABLE #temp_DMC_EQ_STATS_NUM_IPOS 	select count(distinct t.multi_fund_id) AS [Num_Trades], 		   concat(month(TRD_TRADE_DATE), '-',DATEPART(YY, TRD_TRADE_DATE)) AS [Month Year], 		   EOMONTH(TRD_TRADE_DATE) AS [Date], 		   @REPORT_NAME AS [Report_Name] 	INTO  #temp_DMC_EQ_STATS_NUM_IPOS 	from VISTA_REPORTING.dbo.TRADES t 	LEFT JOIN VISTA_REPORTING.dbo.master_multi_fund_id_table mst 	ON t.MULTI_FUND_ID = mst.MULTI_FUND_ID 	where dealing_desk = 'Equity' 		  and PRIMARY_MARKET = 1 		  AND TRD_TRADE_DATE BETWEEN @Start_Date AND @End_Date 	group by  		concat(month(TRD_TRADE_DATE), '-',DATEPART(YY, TRD_TRADE_DATE)) , 		EOMONTH(TRD_TRADE_DATE)   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_EQ_STATS_NUM_IPOS', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_NUM_IPOS 	from #temp_DMC_EQ_STATS_NUM_IPOS ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_NUM_IPOS 	SELECT * 	from #temp_DMC_EQ_STATS_NUM_IPOS  --Number of IPOs IF OBJECT_ID('tempdb..#temp_DMC_EQ_STATS_NUM_IPOS_DATA', 'U') IS NOT NULL DROP TABLE #temp_DMC_EQ_STATS_NUM_IPOS_DATA 	select t.multi_fund_id, 		   concat(month(TRD_TRADE_DATE), '-',DATEPART(YY, TRD_TRADE_DATE)) AS [Month Year], 		   EOMONTH(TRD_TRADE_DATE) AS [Date], 		   @REPORT_NAME AS [Report_Name] 	INTO  #temp_DMC_EQ_STATS_NUM_IPOS_DATA 	from VISTA_REPORTING.dbo.TRADES t 	LEFT JOIN VISTA_REPORTING.dbo.master_multi_fund_id_table mst 	ON t.MULTI_FUND_ID = mst.MULTI_FUND_ID 	where dealing_desk = 'Equity' 		  and PRIMARY_MARKET = 1 		  AND TRD_TRADE_DATE BETWEEN @Start_Date AND @End_Date  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_EQ_STATS_NUM_IPOS_DATA', 'U') IS NULL 	SELECT DISTINCT * 	INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_NUM_IPOS_DATA 	from #temp_DMC_EQ_STATS_NUM_IPOS_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_NUM_IPOS_DATA 	SELECT DISTINCT * 	from #temp_DMC_EQ_STATS_NUM_IPOS_DATA 	  ---- Number of Funds involved in IPO trades  IF OBJECT_ID('tempdb..#temp_DMC_EQ_STATS_NUM_IPOS_FUNDS', 'U') IS NOT NULL DROP TABLE #temp_DMC_EQ_STATS_NUM_IPOS_FUNDS 	select count(distinct t.fund) AS [Num_Funds], 		   concat(month(TRD_TRADE_DATE), '-',DATEPART(YY, TRD_TRADE_DATE)) AS [Month Year], 		   EOMONTH(TRD_TRADE_DATE) AS [Date], 		   @REPORT_NAME AS [Report_Name] 	INTO  #temp_DMC_EQ_STATS_NUM_IPOS_FUNDS 	from VISTA_REPORTING.dbo.TRADES t 	LEFT JOIN VISTA_REPORTING.dbo.master_multi_fund_id_table mst 	ON t.MULTI_FUND_ID = mst.MULTI_FUND_ID 	where dealing_desk = 'Equity' 		  and PRIMARY_MARKET = 1 		  AND TRD_TRADE_DATE BETWEEN @Start_Date AND @End_Date 	group by  		concat(month(TRD_TRADE_DATE), '-',DATEPART(YY, TRD_TRADE_DATE)), 		EOMONTH(TRD_TRADE_DATE)  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_EQ_STATS_NUM_IPOS_FUNDS', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_NUM_IPOS_FUNDS 	from #temp_DMC_EQ_STATS_NUM_IPOS_FUNDS ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_NUM_IPOS_FUNDS 	SELECT * 	from #temp_DMC_EQ_STATS_NUM_IPOS_FUNDS  ---- Number of Funds involved in IPO trades  IF OBJECT_ID('tempdb..#temp_DMC_EQ_STATS_NUM_IPOS_FUNDS_DATA', 'U') IS NOT NULL DROP TABLE #temp_DMC_EQ_STATS_NUM_IPOS_FUNDS_DATA 	select t.fund, 		   concat(month(TRD_TRADE_DATE), '-',DATEPART(YY, TRD_TRADE_DATE)) AS [Month Year], 		   EOMONTH(TRD_TRADE_DATE) AS [Date], 		   @REPORT_NAME AS [Report_Name] 	INTO  #temp_DMC_EQ_STATS_NUM_IPOS_FUNDS_DATA 	from VISTA_REPORTING.dbo.TRADES t 	LEFT JOIN VISTA_REPORTING.dbo.master_multi_fund_id_table mst 	ON t.MULTI_FUND_ID = mst.MULTI_FUND_ID 	where dealing_desk = 'Equity' 		  and PRIMARY_MARKET = 1 		  AND TRD_TRADE_DATE BETWEEN @Start_Date AND @End_Date  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_EQ_STATS_NUM_IPOS_FUNDS_DATA', 'U') IS NULL 	SELECT DISTINCT * 	INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_NUM_IPOS_FUNDS_DATA 	from #temp_DMC_EQ_STATS_NUM_IPOS_FUNDS_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_NUM_IPOS_FUNDS_DATA 	SELECT DISTINCT * 	from #temp_DMC_EQ_STATS_NUM_IPOS_FUNDS_DATA ----Number of Crossings  IF OBJECT_ID('tempdb..#temp_DMC_EQ_STATS_NUM_CROSSINGS', 'U') IS NOT NULL DROP TABLE #temp_DMC_EQ_STATS_NUM_CROSSINGS 	select  		count(*) AS [Num_Crossings], 		concat(month( a.[Date]), '-',DATEPART(YY, a.[Date])) as [Month_Year] , 		EOMONTH([Date]) AS [Date], 		@REPORT_NAME AS [Report_Name] 	INTO  #temp_DMC_EQ_STATS_NUM_CROSSINGS 	from  	( 		select distinct  			CUSIP,  			Px,  			convert(date, [Exec Date]) as [Date]   	from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE m 	left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE i on m.MULTI_FUND_ID = i.MULTI_FUND_ID  	where  		i.INTERFUND_TRANSFER = 1			-- Only want Interfund Xfrs 		and m.DEALING_DESK = 'Equity'	-- Only want EQ 		and m.Side = 'Buy'				--Choose one side to look at as we don't want to double count both sides as per business requirement. 	) a 	WHERE [Date] BETWEEN @Start_Date AND @End_Date 	group by  		concat(month( a.[Date]), '-',DATEPART(YY, a.[Date])), 		EOMONTH([Date])  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_EQ_STATS_NUM_CROSSINGS', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_NUM_CROSSINGS 	from #temp_DMC_EQ_STATS_NUM_CROSSINGS ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_NUM_CROSSINGS 	SELECT * 	from #temp_DMC_EQ_STATS_NUM_CROSSINGS  ----Number of Crossings  IF OBJECT_ID('tempdb..#temp_DMC_EQ_STATS_NUM_CROSSINGS_DATA', 'U') IS NOT NULL DROP TABLE #temp_DMC_EQ_STATS_NUM_CROSSINGS_DATA 	select distinct  		CUSIP,  		Px,  		convert(date, [Exec Date]) as [Exec Date],  	 		concat(month(m.[Exec Date]), '-',DATEPART(YY, m.[Exec Date])) as [Month_Year] , 		EOMONTH(m.[Exec Date]) AS [Date], 		@REPORT_NAME AS [Report_Name] 	INTO  #temp_DMC_EQ_STATS_NUM_CROSSINGS_DATA 	from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE m 	left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE i on m.MULTI_FUND_ID = i.MULTI_FUND_ID  	WHERE m.[Exec Date] BETWEEN @Start_Date AND @End_Date 		and i.INTERFUND_TRANSFER = 1			-- Only want Interfund Xfrs 		and m.DEALING_DESK = 'Equity'	-- Only want EQ 		and m.Side = 'Buy'	  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_EQ_STATS_NUM_CROSSINGS_DATA', 'U') IS NULL 	SELECT DISTINCT * 	INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_NUM_CROSSINGS_DATA 	from #temp_DMC_EQ_STATS_NUM_CROSSINGS_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_NUM_CROSSINGS_DATA 	SELECT DISTINCT * 	from #temp_DMC_EQ_STATS_NUM_CROSSINGS_DATA  ---------Directed Orders IF OBJECT_ID('tempdb..#temp_DMC_EQ_STATS_DIRECTED_ORDERS', 'U') IS NOT NULL DROP TABLE #temp_DMC_EQ_STATS_DIRECTED_ORDERS 	SELECT  		COUNT(DISTINCT ORD_NUM) AS [Num_Orders], 		concat(month(AUTH_TIME), '-',DATEPART(YY, AUTH_TIME)) AS [Month Year], 		EOMONTH(AUTH_TIME) AS [Date], 		@REPORT_NAME AS [Report_Name] 	INTO #temp_DMC_EQ_STATS_DIRECTED_ORDERS 	FROM VISTA_REPORTING.dbo.PM_ORDERS  	WHERE  		DEALING_DESK = 'Equity' 		AND Broker_Code IS NOT NULL 		AND AUTH_TIME BETWEEN @Start_Date AND @End_Date 	group by  		concat(month(AUTH_TIME), '-',DATEPART(YY, AUTH_TIME)), 		EOMONTH(AUTH_TIME)   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_EQ_STATS_DIRECTED_ORDERS', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_DIRECTED_ORDERS 	from #temp_DMC_EQ_STATS_DIRECTED_ORDERS ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_DIRECTED_ORDERS 	SELECT * 	from #temp_DMC_EQ_STATS_DIRECTED_ORDERS   ---------Directed Orders IF OBJECT_ID('tempdb..#temp_DMC_EQ_STATS_DIRECTED_ORDERS_DATA', 'U') IS NOT NULL DROP TABLE #temp_DMC_EQ_STATS_DIRECTED_ORDERS_DATA 	SELECT  		ORD_NUM, 		concat(month(AUTH_TIME), '-',DATEPART(YY, AUTH_TIME)) AS [Month Year], 		EOMONTH(AUTH_TIME) AS [Date], 		@REPORT_NAME AS [Report_Name] 	INTO #temp_DMC_EQ_STATS_DIRECTED_ORDERS_DATA 	FROM VISTA_REPORTING.dbo.PM_ORDERS  	WHERE  		DEALING_DESK = 'Equity' 		AND Broker_Code IS NOT NULL 		AND AUTH_TIME BETWEEN @Start_Date AND @End_Date  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_EQ_STATS_DIRECTED_ORDERS_DATA', 'U') IS NULL 	SELECT DISTINCT * 	INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_DIRECTED_ORDERS_DATA	 	from #temp_DMC_EQ_STATS_DIRECTED_ORDERS_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_EQ_STATS_DIRECTED_ORDERS_DATA 	SELECT DISTINCT * 	from #temp_DMC_EQ_STATS_DIRECTED_ORDERS_DATA  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: DMC_EQ_POST_TRADE_AMENDMENTS CreateDate: 2019-10-18 08:39:50.063 ModifyDate: 2019-10-18 08:39:50.063 --- DEFINITION START --- -- ============================================= -- Author:		<Ayiba Cesario> -- Create date: <09/08/2018> -- Description:	<Generate DMC reports for EQ Post Trade Amendments. --	This stored procedure takes a start month, end month and report name  --	as input parameters and generates the reports for these months.> -- ============================================= CREATE PROCEDURE [dbo].[DMC_EQ_POST_TRADE_AMENDMENTS] 	@Start_Month INT, 	@Start_Year INT, 	@End_Month INT, 	@End_Year INT, 	@REPORT_NAME VARCHAR(MAX)   AS BEGIN  DECLARE @Start_Date DATETIME; SET @Start_Date = CONVERT(DATE,CONCAT(@Start_Year,'-',@Start_Month,'-01')); --Turn the input start month parameter into a date (using the first day of the month) DECLARE @End_Date0 DATETIME; DECLARE @End_Date DATETIME; SET @End_Date0 = EOMONTH(CONVERT(DATETIME,CONCAT(@End_Year,'-',@End_Month,'-01')));  --Turn the input end month parameter into a date (using the last day of the month)  SET @End_Date = DATEADD(second,86399,@End_Date0);  --Add the metadata to a table so we keep a history of all reports run IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_REPORTS_METADATA', 'U') IS NULL 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		CONVERT(VARCHAR(50),'EQCM_Post_Trade_Amendments') AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date] 	INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		'EQCM_Post_Trade_Amendments' AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date]  --IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table --SELECT DISTINCT --	CASE  --		WHEN CHARINDEX('_1', er.ID) > 0 AND LEN(er.ID) > 4 THEN LEFT(er.ID, CHARINDEX(' ', er.ID)-1) --		WHEN CHARINDEX('_7', er.ID) > 0 AND LEN(er.ID) > 4 THEN LEFT(er.ID, CHARINDEX(' ', er.ID)-1) --		WHEN CHARINDEX('_9', er.ID) > 0 AND LEN(er.ID) > 4 THEN LEFT(er.ID, CHARINDEX(' ', er.ID)-1) --	END AS EXTRACTED_ID, --	CASE  --		WHEN CHARINDEX('_7', er.ID) > 0 AND LEN(er.ID) > 4 THEN '7' --		WHEN CHARINDEX('_9', er.ID) > 0 AND LEN(er.ID) > 4 THEN '9' --		WHEN CHARINDEX('_10', er.ID) > 0 AND LEN(er.ID) > 4 THEN '10' --		WHEN CHARINDEX('_11', er.ID) > 0 AND LEN(er.ID) > 4 THEN '11' --		WHEN CHARINDEX('_13', er.ID) > 0 AND LEN(er.ID) > 4 THEN '13' --		WHEN CHARINDEX('_14', er.ID) > 0 AND LEN(er.ID) > 4 THEN '14' --		WHEN CHARINDEX('_15', er.ID) > 0 AND LEN(er.ID) > 4 THEN '15' --		WHEN CHARINDEX('_1', er.ID) > 0 AND LEN(er.ID) > 4 THEN '1' --	END AS EXCEPTION_ID, --	er.[STATUS] --INTO #temp_status_table --FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE er --WHERE er.ID != ''   IF OBJECT_ID('tempdb..#temp_trades', 'U') IS NOT NULL DROP TABLE #temp_trades SELECT DISTINCT 	oc.PM_ORD, 	t.ORD_NUM, 	t.MULTI_FUND_ID, 	t.TOUCH_COUNT, 	TRD_AMEND_TYPE, 	pr.INST_TYPE, 	MAX(t.TRD_TRADE_DATE) AS MAX_TRD_TRADE_DATE INTO #temp_trades FROM VISTA_REPORTING.dbo.TRADES t LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON oc.TRD_ORD=t.ORD_NUM LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, INST_TYPE FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr ON t.MULTI_FUND_ID = pr.MULTI_FUND_ID --and TRD_TRADE_DATE between @Start_Date and @End_Date GROUP BY 	oc.PM_ORD, 	t.ORD_NUM, 	t.MULTI_FUND_ID, 	t.TOUCH_COUNT, 	TRD_AMEND_TYPE, 	pr.INST_TYPE  IF OBJECT_ID('tempdb..#temp_exception_table', 'U') IS NOT NULL DROP TABLE #temp_exception_table SELECT DISTINCT 	t.TRD_AMEND_TYPE, 	qe.MULTI_FUND_ID, 	t.TOUCH_COUNT, 	CONCAT(YEAR(qe.AMENDMENT_FLAG_CREATETIME), ' - ', MONTH(qe.AMENDMENT_FLAG_CREATETIME)) AS [DATE], 	MAX(CASE WHEN ex.REASON in ('Tested and exception noted', 'Tested and no issues noted') OR ex.COMMENT IN ('Tested and exception noted', 'Tested and no issues noted') THEN 1 ELSE 0 END) AS [CM_Reviewed] INTO #temp_exception_table FROM #temp_trades t  INNER JOIN VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_EQ_TABLE qe ON qe.MULTI_FUND_ID=t.MULTI_FUND_ID AND qe.TOUCH_COUNT = t.TOUCH_COUNT LEFT JOIN VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE ex ON CONCAT(qe.MULTI_FUND_ID,'_15',qe.TOUCH_COUNT) = ex.ID WHERE qe.AMENDMENT_Flag = 1 AND qe.AMENDMENT_FLAG_CREATETIME between @Start_Date and @End_Date and t.TRD_AMEND_TYPE is not null GROUP BY  	t.TRD_AMEND_TYPE, 	qe.MULTI_FUND_ID, 	CONCAT(YEAR(qe.AMENDMENT_FLAG_CREATETIME), ' - ', MONTH(qe.AMENDMENT_FLAG_CREATETIME)), 	t.TOUCH_COUNT  IF OBJECT_ID('tempdb..#temp_finaltable', 'U') IS NOT NULL DROP TABLE #temp_finaltable SELECT  	TRD_AMEND_TYPE, 	[Date] as Amendment_Date, 	COUNT(DISTINCT e.MULTI_FUND_ID) AS [Value], 	'Total' as [Total_or_Checked]	, 	EOMONTH(CONVERT(DATE,CONCAT([DATE],'-01'))) AS [Date], 	@report_name AS [Report_Name] into #temp_finaltable FROM #temp_exception_table e GROUP BY 	TRD_AMEND_TYPE, 	[Date], 	EOMONTH(CONVERT(DATE,CONCAT([DATE],'-01'))) union SELECT  	TRD_AMEND_TYPE, 	[Date] as Amendment_Date, 	COUNT(DISTINCT CASE WHEN [CM_Reviewed] = 1 THEN MULTI_FUND_ID ELSE NULL END) AS [Value]	, 	'Checked' as [Total_or_Checked], 	EOMONTH(CONVERT(DATE,CONCAT([DATE],'-01'))) AS [Date], 	@report_name AS [Report_Name] FROM #temp_exception_table e GROUP BY 	TRD_AMEND_TYPE, 	[Date], 	EOMONTH(CONVERT(DATE,CONCAT([DATE],'-01'))) --SELECT  --	tet.TRD_AMEND_TYPE, --	tst.STATUS, --	COUNT(tet.EXCEPTION_ID) AS TOTAL_POP, --	COUNT(tet.EXCEPTION_ID) - (CASE WHEN tst.STATUS = 'Not sampled for testing' THEN COUNT(tet.EXCEPTION_ID) ELSE 0 END) AS CHECKED --FROM #temp_exception_table tet --LEFT JOIN VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE tst ON  --WHERE TRD_AMEND_TYPE IS NOT NULL -- AND tet.EXCEPTION_TYPE_ID like '15%' AND tr.DEALING_DESK = 'Equity' --GROUP BY --	tet.TRD_AMEND_TYPE, --	tst.STATUS  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_POST_TRADE_AMENDMENTS_TABLE', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_POST_TRADE_AMENDMENTS_TABLE 	from  #temp_finaltable ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_POST_TRADE_AMENDMENTS_TABLE 	SELECT * 	from  #temp_finaltable   IF OBJECT_ID('tempdb..#temp_finaltable_DATA', 'U') IS NOT NULL DROP TABLE #temp_finaltable_DATA SELECT  	TRD_AMEND_TYPE, 	[Date] as Amendment_Date, 	e.MULTI_FUND_ID, 	CM_Reviewed	, 	EOMONTH(CONVERT(DATE,CONCAT([DATE],'-01'))) AS [Date], 	@report_name AS [Report_Name] into #temp_finaltable_DATA FROM #temp_exception_table e  --SELECT  --	tet.TRD_AMEND_TYPE, --	tst.STATUS, --	COUNT(tet.EXCEPTION_ID) AS TOTAL_POP, --	COUNT(tet.EXCEPTION_ID) - (CASE WHEN tst.STATUS = 'Not sampled for testing' THEN COUNT(tet.EXCEPTION_ID) ELSE 0 END) AS CHECKED --FROM #temp_exception_table tet --LEFT JOIN VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE tst ON  --WHERE TRD_AMEND_TYPE IS NOT NULL -- AND tet.EXCEPTION_TYPE_ID like '15%' AND tr.DEALING_DESK = 'Equity' --GROUP BY --	tet.TRD_AMEND_TYPE, --	tst.STATUS  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_POST_TRADE_AMENDMENTS_TABLE_DATA', 'U') IS NULL 	SELECT distinct * 	INTO VISTA_REPORTING.dbo.DMC_POST_TRADE_AMENDMENTS_TABLE_DATA 	from  #temp_finaltable_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_POST_TRADE_AMENDMENTS_TABLE_DATA 	SELECT  distinct * 	from  #temp_finaltable_DATA  END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: DMC_EQ_Structure_and_Data_Arrangement CreateDate: 2019-10-18 08:39:50.113 ModifyDate: 2022-04-06 13:28:10.193 --- DEFINITION START --- -- ============================================= -- Author:		<Ayiba Cesario> -- Create date: <09/08/2018> -- Description:	<Generate DMC reports for EQ Controls and Issues Structure and Data Arrangement. --	This stored procedure takes a start month, end month and report name  --	as input parameters and generates the reports for these months.> -- =============================================  --================================================= -- 2018-09-06 KR - Added a new condition for implementation shortfall to only count exceptions SD is equal to '2SD'  --2022-04-06 Matej Miter - Removing Implementation Shortfall exceptions from DMC report as per latest request from the Client on 1st of May 2021  --=================================================   CREATE PROCEDURE [dbo].[DMC_EQ_Structure_and_Data_Arrangement] 	-- Add the parameters for the stored procedure here 	@Start_Month INT, 	@Start_Year INT, 	@End_Month INT, 	@End_Year INT, 	@REPORT_NAME VARCHAR(MAX) AS BEGIN     -- Insert statements for procedure here DECLARE @Start_Date DATETIME; SET @Start_Date = CONVERT(DATE,CONCAT(@Start_Year,'-',@Start_Month,'-01')); --Turn the input start month parameter into a date (using the first day of the month) DECLARE @End_Date0 DATETIME; DECLARE @End_Date DATETIME; SET @End_Date0 = EOMONTH(CONVERT(DATETIME,CONCAT(@End_Year,'-',@End_Month,'-01')));  --Turn the input end month parameter into a date (using the last day of the month)  SET @End_Date = DATEADD(second,86399,@End_Date0);  --Add the metadata to a table so we keep a history of all reports run IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_REPORTS_METADATA', 'U') IS NULL 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		CONVERT(VARCHAR(50),'EQDD_Structure_and_Data_Arrangement') AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date] 	INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		'EQDD_Structure_and_Data_Arrangement' AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date]  -- 1.4.1	Report 2: Current Equities Dealing Desk Controls and Issues Monitor Structure & Data Arrangement IF OBJECT_ID('tempdb..#temp_trades', 'U') IS NOT NULL DROP TABLE #temp_trades SELECT DISTINCT 	oc.PM_ORD, 	t.ORD_NUM, 	t.CLIENT_EXECUTION_NUM, 	t.MULTI_FUND_ID, 	pr.INST_TYPE, 	pr.COUNTRY, 	MAX(t.TRD_TRADE_DATE) AS MAX_TRD_TRADE_DATE INTO #temp_trades FROM VISTA_REPORTING.dbo.TRADES t LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS)  oc ON oc.TRD_ORD=t.ORD_NUM LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, INST_TYPE, COUNTRY FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr ON t.MULTI_FUND_ID = pr.MULTI_FUND_ID --where t.trd_trade_date between @Start_Date AND @End_Date GROUP BY 	oc.PM_ORD, 	t.ORD_NUM, 	t.CLIENT_EXECUTION_NUM, 	t.MULTI_FUND_ID, 	pr.INST_TYPE, 	pr.COUNTRY  IF OBJECT_ID('tempdb..#temp_exception_table', 'U') IS NOT NULL DROP TABLE #temp_exception_table SELECT *  INTO #temp_exception_table FROM ( 	SELECT DISTINCT 		qe.MULTI_FUND_ID AS EXCEPTION_ID, 		t.INST_TYPE, 		--t.COUNTRY, 		'1' AS EXCEPTION_TYPE_ID, 		qe.QUOTE_EXCEPTION AS EXCEPTION_VALUE, 		CONCAT(YEAR(qe.QE_CREATE_TIME), ' - ', MONTH(qe.QE_CREATE_TIME)) AS [DATE] 	FROM #temp_trades t  	INNER JOIN VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_EQ_TABLE qe ON qe.MULTI_FUND_ID=t.MULTI_FUND_ID 	WHERE QUOTE_EXCEPTION > 0 and qe.QE_CREATE_TIME between @Start_Date and @End_Date 	UNION  	SELECT DISTINCT 		qe.MULTI_FUND_ID AS EXCEPTION_ID, 		t.INST_TYPE, 		--t.COUNTRY, 		'7' AS EXCEPTION_TYPE_ID, 		qe.NON_WINNING_QUOTE_EXCEPTION AS EXCEPTION_VALUE, 		CONCAT(YEAR(qe.NWQ_CREATEIME), ' - ', MONTH(qe.NWQ_CREATEIME)) AS [DATE] 	FROM #temp_trades t  	INNER JOIN VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_EQ_TABLE qe ON qe.MULTI_FUND_ID=t.MULTI_FUND_ID 	WHERE NON_WINNING_QUOTE_EXCEPTION > 0 and qe.NWQ_CREATEIME between @Start_Date and @End_Date 	UNION  	SELECT DISTINCT 		qe.MULTI_FUND_ID AS EXCEPTION_ID, 		t.INST_TYPE, 		--t.COUNTRY, 		'10' AS EXCEPTION_TYPE_ID, 		qe.TIMELY_RECORDING_FLAG AS EXCEPTION_VALUE, 		CONCAT(YEAR(qe.TREC_CREATETIME), ' - ', MONTH(qe.TREC_CREATETIME)) AS [DATE] 	FROM #temp_trades t  	INNER JOIN VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_EQ_TABLE qe ON qe.MULTI_FUND_ID=t.MULTI_FUND_ID 	WHERE TIMELY_RECORDING_FLAG > 0 and qe.TREC_CREATETIME between @Start_Date and @End_Date 	UNION  	SELECT DISTINCT 		qe.MULTI_FUND_ID AS EXCEPTION_ID, 		t.INST_TYPE, 		--t.COUNTRY, 		'15' AS EXCEPTION_TYPE_ID, 		qe.AMENDMENT_FLAG AS EXCEPTION_VALUE, 		CONCAT(YEAR(qe.AMENDMENT_FLAG_CREATETIME), ' - ', MONTH(qe.AMENDMENT_FLAG_CREATETIME)) AS [DATE] 	FROM #temp_trades t  	INNER JOIN VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_EQ_TABLE qe ON qe.MULTI_FUND_ID=t.MULTI_FUND_ID 	LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, TOUCH_COUNT, CancellationFlag, TRD_AMEND_TYPE FROM VISTA_REPORTING.dbo.TRADES) t2 ON qe.MULTI_FUND_ID = t2.MULTI_FUND_ID AND qe.TOUCH_COUNT = t2.TOUCH_COUNT 	WHERE AMENDMENT_FLAG > 0 AND  cancellationflag <> 1 and qe.AMENDMENT_FLAG_CREATETIME between @Start_Date and @End_Date 	UNION  	SELECT DISTINCT 		concat(p.ORD_NUM,TIMELY_EXECUTION_EXCEPTION) AS EXCEPTION_ID, 		t.INST_TYPE, 		--t.COUNTRY, 		'9' AS EXCEPTION_TYPE_ID, 		1 AS EXCEPTION_VALUE, -- Do not double count multiple raisings of an order 		MIN(CONCAT(YEAR(qe.CREATETIME), ' - ', MONTH(qe.CREATETIME))) AS [DATE] --Put the exception into the first month that it was flagged. 	FROM VISTA_REPORTING.dbo.PM_ORDERS p 	LEFT JOIN #temp_trades t ON t.PM_ORD=p.ORD_NUM  	INNER JOIN VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_EQ_TABLE qe ON qe.ORD_NUM=p.ORD_NUM 	WHERE  TIMELY_EXECUTION_EXCEPTION > 0 and qe.CREATETIME between @Start_Date and @End_Date 	GROUP BY  		concat(p.ORD_NUM,TIMELY_EXECUTION_EXCEPTION), 		t.INST_TYPE 	UNION  	SELECT DISTINCT 		p.ORD_NUM AS EXCEPTION_ID, 		t.INST_TYPE, 		--t.COUNTRY, 		'11' AS EXCEPTION_TYPE_ID, 		qe.TIMELY_RELEASE_EXCEPTION AS EXCEPTION_VALUE, 		CONCAT(YEAR(qe.TR_CREATETIME), ' - ', MONTH(qe.TR_CREATETIME)) AS [DATE] 	FROM VISTA_REPORTING.dbo.PM_ORDERS p 	LEFT JOIN #temp_trades t ON t.PM_ORD=p.ORD_NUM  	INNER JOIN VISTA_STAGING.dbo.VG_11_TIMELY_RELEASE_EQ_TABLE qe ON qe.ORD_NUM=p.ORD_NUM 	WHERE t.MAX_TRD_TRADE_DATE IS NOT NULL 	AND TIMELY_RELEASE_EXCEPTION > 0 and qe.TR_CREATETIME between @Start_Date and @End_Date 	UNION  	SELECT DISTINCT 		qe.OA_ID AS EXCEPTION_ID, 		t.INST_TYPE, 		--t.COUNTRY, 		'13' AS EXCEPTION_TYPE_ID, 		qe.MERGE_EXCEPTION AS EXCEPTION_VALUE, 		CONCAT(YEAR(qe.CREATETIME), ' - ', MONTH(qe.CREATETIME)) AS [DATE] 	FROM #temp_trades t 	INNER JOIN VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_EQ_TABLE qe ON qe.OA_ID=CONCAT(t.ORD_NUM,'_',t.MULTI_FUND_ID) 	WHERE MERGE_EXCEPTION > 0 and qe.CREATETIME between @Start_Date and @End_Date 	UNION  	SELECT DISTINCT 		t.ORD_NUM AS EXCEPTION_ID, 		t.INST_TYPE, 		--t.COUNTRY, 		'14' AS EXCEPTION_TYPE_ID, 		qe.ORDER_PRIORITY_EXCEPTION AS EXCEPTION_VALUE, 		CONCAT(YEAR(qe.CREATETIME), ' - ', MONTH(qe.CREATETIME)) AS [DATE] 	FROM #temp_trades t 	INNER JOIN VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_EQ_TABLE qe ON qe.ORD_NUM=t.ORD_NUM 	WHERE ORDER_PRIORITY_EXCEPTION > 0 and qe.CREATETIME between @Start_Date and @End_Date 	UNION  	SELECT DISTINCT 		t.ORD_NUM AS EXCEPTION_ID, 		t.INST_TYPE, 		--t.COUNTRY, 		'HL' AS EXCEPTION_TYPE_ID, 		hl.HL_EXCEPTION AS EXCEPTION_VALUE, 		CONCAT(YEAR(hl.HL_CREATEDATE), ' - ', MONTH(hl.HL_CREATEDATE)) AS [DATE] 	FROM #temp_trades t 	INNER JOIN VISTA_STAGING.dbo.VG_MARKET_HIGH_LOW_TABLE hl ON hl.ORD_NUM=t.ORD_NUM 	WHERE hl.HL_EXCEPTION > 0 and hl.HL_CREATEDATE between @Start_Date and @End_Date 	 	UNION 	/* 	SELECT DISTINCT 		t.ORD_NUM AS EXCEPTION_ID, 		t.INST_TYPE, 		--t.COUNTRY, 		'IS' AS EXCEPTION_TYPE_ID, 		iseq.IM_EXCEPTION AS EXCEPTION_VALUE, 		CONCAT(YEAR(iseq.IM_CREATEDATE), ' - ', MONTH(iseq.IM_CREATEDATE)) AS [DATE] 	FROM #temp_trades t 	INNER JOIN VISTA_REPORTING.dbo.IMPLEMENTATION_SHORTFALL_EQ iseq ON iseq.ORDER_ID=t.ORD_NUM 	LEFT JOIN VISTA_STAGING.dbo.Markit_ISReport rpt ON iseq.[Row_ID] = rpt.ID 	WHERE iseq.IM_EXCEPTION > 0 and iseq.IM_CREATEDATE between @Start_Date and @End_Date 	AND iseq.SD='2SD'  	UNION 	*/  	SELECT DISTINCT 		t.MULTI_FUND_ID AS EXCEPTION_ID, 		t.INST_TYPE, 		--t.COUNTRY, 		'CI' AS EXCEPTION_TYPE_ID, 		ce.COMMISSION_EXCEPTION AS EXCEPTION_VALUE, 		CONCAT(YEAR(ce.CE_CREATE_TIME), ' - ', MONTH(ce.CE_CREATE_TIME)) AS [DATE] 	FROM #temp_trades t 	INNER JOIN VISTA_STAGING.dbo.VG_COMMISSION_EXCEPTION_EQ_TABLE ce ON ce.MULTI_FUND_ID=t.MULTI_FUND_ID 	WHERE ce.COMMISSION_EXCEPTION > 0 and ce.CE_CREATE_TIME between @Start_Date and @End_Date  	UNION  	SELECT DISTINCT 		t.MULTI_FUND_ID AS EXCEPTION_ID, 		t.INST_TYPE, 		--t.COUNTRY, 		'40' AS EXCEPTION_TYPE_ID, 		es.SETTLEMENT_EXCEPTION AS EXCEPTION_VALUE, 		CONCAT(YEAR(es.SETTLEMENT_CREATEDATE), ' - ', MONTH(es.SETTLEMENT_CREATEDATE)) AS [DATE] 	FROM #temp_trades t 	INNER JOIN VISTA_STAGING.dbo.VG_40_EXTENDED_SETTLEMENT_EXCEPTION_TABLE es ON es.MULTI_FUND_ID=t.MULTI_FUND_ID 	WHERE es.SETTLEMENT_EXCEPTION > 0 and es.SETTLEMENT_CREATEDATE between @Start_Date and @End_Date  )temp   IF OBJECT_ID('tempdb..#temp_count_table', 'U') IS NOT NULL DROP TABLE #temp_count_table SELECT DISTINCT 	CASE 		WHEN EXCEPTION_TYPE_ID = '1' THEN 'Quote Exception' 		WHEN EXCEPTION_TYPE_ID = '7' THEN 'Non-Winning Quote' 		WHEN EXCEPTION_TYPE_ID = '9'  THEN 'Timely Execution' 		WHEN EXCEPTION_TYPE_ID = '10' THEN 'Timely Recording' 		WHEN EXCEPTION_TYPE_ID = '11' THEN 'Timely Release' 		WHEN EXCEPTION_TYPE_ID = '13' THEN 'Aggregation' 		WHEN EXCEPTION_TYPE_ID = '14' THEN 'Sequential Orders' 		WHEN EXCEPTION_TYPE_ID = '15' THEN 'Amendments' 		WHEN EXCEPTION_TYPE_ID = 'HL' THEN 'Outside High/Low' 		--WHEN EXCEPTION_TYPE_ID = 'IS' THEN 'Implementation Shortfall' 		WHEN EXCEPTION_TYPE_ID = 'CI' THEN 'Commission Rates Increase' 		WHEN EXCEPTION_TYPE_ID = '40' THEN 'Equity trades instructed > T+5' 	END AS AREA, 	CASE  		WHEN EXCEPTION_TYPE_ID = '1' THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '7' THEN INST_TYPE 		WHEN EXCEPTION_TYPE_ID = '9' THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '10' THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '11' THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '13' THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '14' THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '15' THEN 'No. of Amendments made during the month' 		WHEN EXCEPTION_TYPE_ID = 'HL' THEN 'No. of exceptions' 		--WHEN EXCEPTION_TYPE_ID = 'IS' THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = 'CI' THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '40' THEN 'No. of exceptions' 	END AS [TYPE], 	COUNT(DISTINCT EXCEPTION_ID) AS TOTAL_POP, 	--CASE WHEN STATUS in ('Pre Sampling', 'With C&A Reviewer') THEN COUNT(EXECUTION_ID_1) ELSE 0 END AS TOTAL_POP, 	--CASE WHEN STATUS = 'Not sampled for testing' THEN COUNT(EXECUTION_ID_1) ELSE 0 END AS NOT_SAMPLED,  	--COUNTRY, 	[DATE] 	--COUNT(EXCEPTION_ID) AS EXECUTION_ID_COUNT INTO #temp_count_table FROM #temp_exception_table GROUP BY 	CASE 		WHEN EXCEPTION_TYPE_ID = '1' THEN 'Quote Exception' 		WHEN EXCEPTION_TYPE_ID = '7' THEN 'Non-Winning Quote' 		WHEN EXCEPTION_TYPE_ID = '9'  THEN 'Timely Execution' 		WHEN EXCEPTION_TYPE_ID = '10' THEN 'Timely Recording' 		WHEN EXCEPTION_TYPE_ID = '11' THEN 'Timely Release' 		WHEN EXCEPTION_TYPE_ID = '13' THEN 'Aggregation' 		WHEN EXCEPTION_TYPE_ID = '14' THEN 'Sequential Orders' 		WHEN EXCEPTION_TYPE_ID = '15' THEN 'Amendments' 		WHEN EXCEPTION_TYPE_ID = 'HL' THEN 'Outside High/Low' 		--WHEN EXCEPTION_TYPE_ID = 'IS' THEN 'Implementation Shortfall' 		WHEN EXCEPTION_TYPE_ID = 'CI' THEN 'Commission Rates Increase' 		WHEN EXCEPTION_TYPE_ID = '40' THEN 'Equity trades instructed > T+5' 	END , 	CASE  		WHEN EXCEPTION_TYPE_ID = '1' THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '7' THEN INST_TYPE 		WHEN EXCEPTION_TYPE_ID = '9' THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '10' THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '11' THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '13' THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '14' THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '15' THEN 'No. of Amendments made during the month' 		WHEN EXCEPTION_TYPE_ID = 'HL' THEN 'No. of exceptions' 		--WHEN EXCEPTION_TYPE_ID = 'IS' THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = 'CI' THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '40' THEN 'No. of exceptions' 	END , 	[DATE]   IF OBJECT_ID('tempdb..#temp_dealing_desk_controls', 'U') IS NOT NULL DROP TABLE #temp_dealing_desk_controls SELECT DISTINCT 	AREA, 	TYPE, 	[DATE] AS Exception_Date, 	SUM(TOTAL_POP) AS NO_EXCEPTIONS_IN_SCOPE, 	'' AS DMC_TICKED INTO #temp_dealing_desk_controls FROM #temp_count_table GROUP BY  	AREA, 	TYPE, 	[DATE]   IF OBJECT_ID('tempdb..#temp_cancel_table', 'U') IS NOT NULL DROP TABLE #temp_cancel_table SELECT DISTINCT 	MULTI_FUND_ID, 	MIN(AMENDMENT_FLAG_CREATETIME) AS CANCEL_TIME INTO #temp_cancel_table FROM VISTA_REPORTING.[dbo].[MASTER_AMENDMENT_FLAG_TABLE] WHERE Amendment_Cancellation = 'Cancellation' and DEALING_DESK = 'Equity' and AMENDMENT_FLAG_CREATETIME between @Start_Date and @End_Date GROUP BY MULTI_FUND_ID   IF OBJECT_ID('tempdb..#temp_cancel_table2', 'U') IS NOT NULL DROP TABLE #temp_cancel_table2 SELECT DISTINCT 	'Post Trade Cancellations' AS [AREA], 	'No. of Cancellations made during the month' AS [TYPE], 	CONCAT(YEAR(CANCEL_TIME), ' - ', MONTH(CANCEL_TIME)) AS EXCEPTION_DATE, 	COUNT(MULTI_FUND_ID) AS NO_EXCEPTIONS_IN_SCOPE, 	'' AS DMC_TICKED INTO #temp_cancel_table2 FROM #temp_cancel_table GROUP BY CONCAT(YEAR(CANCEL_TIME), ' - ', MONTH(CANCEL_TIME))  SELECT *, EOMONTH(convert(date, concat([Exception_Date],'-01'))) AS [Date], @REPORT_NAME AS [Report_Name]  into #temp_finaltable FROM ( 	SELECT * FROM #temp_dealing_desk_controls 	UNION  	SELECT * FROM #temp_cancel_table2 )tmp  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_EQ_CM_STRUCTURE_DATA_ARRANGEMENT_TABLE', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_EQ_CM_STRUCTURE_DATA_ARRANGEMENT_TABLE 	from #temp_finaltable ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_EQ_CM_STRUCTURE_DATA_ARRANGEMENT_TABLE 	SELECT * 	from #temp_finaltable   	 IF OBJECT_ID('tempdb..#temp_count_table_DATA', 'U') IS NOT NULL DROP TABLE #temp_count_table_DATA SELECT DISTINCT 	CASE 		WHEN EXCEPTION_TYPE_ID = '1' THEN 'Quote Exception' 		WHEN EXCEPTION_TYPE_ID = '7' THEN 'Non-Winning Quote' 		WHEN EXCEPTION_TYPE_ID = '9'  THEN 'Timely Execution' 		WHEN EXCEPTION_TYPE_ID = '10' THEN 'Timely Recording' 		WHEN EXCEPTION_TYPE_ID = '11' THEN 'Timely Release' 		WHEN EXCEPTION_TYPE_ID = '13' THEN 'Aggregation' 		WHEN EXCEPTION_TYPE_ID = '14' THEN 'Sequential Orders' 		WHEN EXCEPTION_TYPE_ID = '15' THEN 'Amendments' 		WHEN EXCEPTION_TYPE_ID = 'HL' THEN 'Outside High/Low' 		--WHEN EXCEPTION_TYPE_ID = 'IS' THEN 'Implementation Shortfall' 		WHEN EXCEPTION_TYPE_ID = 'CI' THEN 'Commission Rates Increase' 		WHEN EXCEPTION_TYPE_ID = '40' THEN 'Equity trades instructed > T+5' 	END AS AREA, 	CASE  		WHEN EXCEPTION_TYPE_ID = '1' THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '7' THEN INST_TYPE 		WHEN EXCEPTION_TYPE_ID = '9' THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '10' THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '11' THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '13' THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '14' THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '15' THEN 'No. of Amendments made during the month' 		WHEN EXCEPTION_TYPE_ID = 'HL' THEN 'No. of exceptions' 		--WHEN EXCEPTION_TYPE_ID = 'IS' THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = 'CI' THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '40' THEN 'No. of exceptions' 	END AS [TYPE], 	EXCEPTION_ID, 	--CASE WHEN STATUS in ('Pre Sampling', 'With C&A Reviewer') THEN COUNT(EXECUTION_ID_1) ELSE 0 END AS TOTAL_POP, 	--CASE WHEN STATUS = 'Not sampled for testing' THEN COUNT(EXECUTION_ID_1) ELSE 0 END AS NOT_SAMPLED,  	--COUNTRY, 	[DATE] 	--COUNT(EXCEPTION_ID) AS EXECUTION_ID_COUNT INTO #temp_count_table_DATA FROM #temp_exception_table   IF OBJECT_ID('tempdb..#temp_dealing_desk_controls_DATA', 'U') IS NOT NULL DROP TABLE #temp_dealing_desk_controls_DATA SELECT DISTINCT 	AREA, 	TYPE, 	[DATE] AS Exception_Date, 	EXCEPTION_ID, 	'' AS DMC_TICKED INTO #temp_dealing_desk_controls_DATA FROM #temp_count_table_DATA   IF OBJECT_ID('tempdb..#temp_cancel_table_DATA', 'U') IS NOT NULL DROP TABLE #temp_cancel_table_DATA SELECT DISTINCT 	MULTI_FUND_ID, 	MIN(AMENDMENT_FLAG_CREATETIME) AS CANCEL_TIME INTO #temp_cancel_table_DATA FROM VISTA_REPORTING.[dbo].[MASTER_AMENDMENT_FLAG_TABLE] WHERE Amendment_Cancellation = 'Cancellation' and DEALING_DESK = 'Equity' and AMENDMENT_FLAG_CREATETIME between @Start_Date and @End_Date GROUP BY MULTI_FUND_ID   IF OBJECT_ID('tempdb..#temp_cancel_table2_DATA', 'U') IS NOT NULL DROP TABLE #temp_cancel_table2_DATA SELECT DISTINCT 	'Post Trade Cancellations' AS [AREA], 	'No. of Cancellations made during the month' AS [TYPE], 	CONCAT(YEAR(CANCEL_TIME), ' - ', MONTH(CANCEL_TIME)) AS EXCEPTION_DATE, 	MULTI_FUND_ID as EXCEPTION_ID, 	'' AS DMC_TICKED INTO #temp_cancel_table2_DATA FROM #temp_cancel_table_DATA   SELECT *, EOMONTH(convert(date, concat([Exception_Date],'-01'))) AS [Date], @REPORT_NAME AS [Report_Name]  into #temp_finaltable_DATA FROM ( 	SELECT * FROM #temp_dealing_desk_controls_DATA 	UNION  	SELECT * FROM #temp_cancel_table2_DATA )tmp  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_EQ_CM_STRUCTURE_DATA_ARRANGEMENT_TABLE_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_EQ_CM_STRUCTURE_DATA_ARRANGEMENT_TABLE_DATA 	from #temp_finaltable_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_EQ_CM_STRUCTURE_DATA_ARRANGEMENT_TABLE_DATA 	SELECT * 	from #temp_finaltable_DATA   END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: DMC_EQDD_RATIONALE CreateDate: 2019-10-18 08:39:50.170 ModifyDate: 2022-04-06 13:28:02.557 --- DEFINITION START --- -- ============================================= -- Author:		<Athanasios Pertsinis> -- Create date: <13/08/2018> -- Description:	<Total exceptions for each report split by the latest Reason --				 selected by the Head of the Dealing Desk.> -- =============================================  --================================================= -- 2018-09-06 KR - Added a new condition for implementation shortfall to only count exceptions SD is equal to '2SD' --2018-09-25 WH  - Changed statuses in max reason table because of a move from 'Status To' to 'Status From'  --2022-04-06 Matej Miter - Removing Implementation Shortfall exceptions from DMC report as per latest request from the Client on 1st of May 2021 --=================================================  CREATE PROCEDURE [dbo].[DMC_EQDD_RATIONALE] 	-- Add the parameters for the stored procedure here 	@Start_Month INT, 	@Start_Year INT, 	@End_Month INT, 	@End_Year INT, 	@REPORT_NAME VARCHAR(MAX) AS BEGIN     -- Insert statements for procedure here DECLARE @Start_Date DATETIME; SET @Start_Date = CONVERT(DATE,CONCAT(@Start_Year,'-',@Start_Month,'-01')); --Turn the input start month parameter into a date (using the first day of the month) DECLARE @End_Date0 DATETIME; DECLARE @End_Date DATETIME; SET @End_Date0 = EOMONTH(CONVERT(DATETIME,CONCAT(@End_Year,'-',@End_Month,'-01')));  --Turn the input end month parameter into a date (using the last day of the month)  SET @End_Date = DATEADD(second,86399,@End_Date0);   --Add the metadata to a table so we keep a history of all reports run IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_REPORTS_METADATA', 'U') IS NULL 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		CONVERT(VARCHAR(50),'EQDD_Rationale') AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date] 	INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		'EQDD_Rationale' AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date]   -- EQDD Report: Exceptions split by Rationale IF OBJECT_ID('tempdb..#temp_trades', 'U') IS NOT NULL DROP TABLE #temp_trades SELECT DISTINCT 	oc.PM_ORD, 	t.ORD_NUM, 	t.CLIENT_EXECUTION_NUM, 	t.MULTI_FUND_ID, 	pr.INST_TYPE, 	pr.COUNTRY, 	MAX(t.TRD_TRADE_DATE) AS MAX_TRD_TRADE_DATE INTO #temp_trades FROM VISTA_REPORTING.dbo.TRADES t LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON oc.TRD_ORD=t.ORD_NUM LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON t.MULTI_FUND_ID = pr.MULTI_FUND_ID --where t.trd_trade_date between @Start_Date AND @End_Date GROUP BY 	oc.PM_ORD, 	t.ORD_NUM, 	t.CLIENT_EXECUTION_NUM, 	t.MULTI_FUND_ID, 	pr.INST_TYPE, 	pr.COUNTRY   IF OBJECT_ID('tempdb..#Max_Reason', 'U') IS  NOT NULL DROP TABLE #Max_Reason --The below table is used to identify False Positives from Dealing Desk select distinct  	e.ID,  	e.REASON , 	e.STATUS into #Max_Reason from VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE e inner join ( 	select  		ID, 		MAX(touch_count) as [Max_touch], 		MAX(CREATED) AS MAX_CREATE_TIME 		from VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE 		where status in ('For Review','With Dealer','With Reviewer','C&A Review Request') 		--the above condition around status ensures that we only consider exceptions coming from the Dealing Desk 		--only dealing desk has the ability to flag false positive exceptions 	group by ID ) a  on a.ID = e.ID and a.Max_touch = e.TOUCH_COUNT AND a.MAX_CREATE_TIME=e.CREATED   IF OBJECT_ID('tempdb..#temp_exception_table', 'U') IS NOT NULL DROP TABLE #temp_exception_table SELECT *  INTO #temp_exception_table FROM ( 	SELECT DISTINCT 		qe.MULTI_FUND_ID AS EXCEPTION_ID, 		case when ISNULL(e.Reason,'') = '' then 'N/A' 			 else e.REASON 		end as Rationale, 		'1' AS EXCEPTION_TYPE_ID, 		qe.QUOTE_EXCEPTION AS EXCEPTION_VALUE, 		CONCAT(YEAR(qe.QE_CREATE_TIME), ' - ', MONTH(qe.QE_CREATE_TIME)) AS [DATE] 	FROM #temp_trades t  	INNER JOIN VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_EQ_TABLE qe ON qe.MULTI_FUND_ID=t.MULTI_FUND_ID 	LEFT JOIN #MAX_REASON e on concat(t.multi_fund_id,'_1') = e.ID 	WHERE QUOTE_EXCEPTION > 0 and qe.QE_CREATE_TIME between @Start_Date and @End_Date 	UNION  	SELECT DISTINCT 		qe.MULTI_FUND_ID AS EXCEPTION_ID, 		case when ISNULL(e.Reason,'') = '' then 'N/A' 			 else e.REASON 		end as Rationale, 		'7' AS EXCEPTION_TYPE_ID, 		qe.NON_WINNING_QUOTE_EXCEPTION AS EXCEPTION_VALUE, 		CONCAT(YEAR(qe.NWQ_CREATEIME), ' - ', MONTH(qe.NWQ_CREATEIME)) AS [DATE] 	FROM #temp_trades t  	INNER JOIN VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_EQ_TABLE qe ON qe.MULTI_FUND_ID=t.MULTI_FUND_ID 	LEFT JOIN #MAX_REASON e on concat(t.multi_fund_id,'_7') = e.ID 	WHERE NON_WINNING_QUOTE_EXCEPTION > 0 and qe.NWQ_CREATEIME between @Start_Date and @End_Date 	UNION  	SELECT DISTINCT 		qe.MULTI_FUND_ID AS EXCEPTION_ID, 		case when ISNULL(e.Reason,'') = '' then 'N/A' 			 else e.REASON 		end as Rationale, 		'10' AS EXCEPTION_TYPE_ID, 		qe.TIMELY_RECORDING_FLAG AS EXCEPTION_VALUE, 		CONCAT(YEAR(qe.TREC_CREATETIME), ' - ', MONTH(qe.TREC_CREATETIME)) AS [DATE] 	FROM #temp_trades t  	INNER JOIN VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_EQ_TABLE qe ON qe.MULTI_FUND_ID=t.MULTI_FUND_ID 	LEFT JOIN #MAX_REASON e on concat(t.multi_fund_id,'_10') = e.ID 	WHERE TIMELY_RECORDING_FLAG > 0 and qe.TREC_CREATETIME between @Start_Date and @End_Date 	UNION  	SELECT DISTINCT 		qe.MULTI_FUND_ID AS EXCEPTION_ID, 		case when ISNULL(e.Reason,'') = '' then 'N/A' 			 else e.REASON 		end as Rationale, 		'15' AS EXCEPTION_TYPE_ID, 		qe.AMENDMENT_FLAG AS EXCEPTION_VALUE, 		CONCAT(YEAR(qe.AMENDMENT_FLAG_CREATETIME), ' - ', MONTH(qe.AMENDMENT_FLAG_CREATETIME)) AS [DATE] 	FROM #temp_trades t  	INNER JOIN VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_EQ_TABLE qe ON qe.MULTI_FUND_ID=t.MULTI_FUND_ID 	LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, TOUCH_COUNT, CancellationFlag, TRD_AMEND_TYPE FROM VISTA_REPORTING.dbo.TRADES) t2 ON qe.MULTI_FUND_ID = t2.MULTI_FUND_ID AND qe.TOUCH_COUNT = t2.TOUCH_COUNT 	LEFT JOIN #MAX_REASON e on concat(t.multi_fund_id,'_15',qe.TOUCH_COUNT) = e.ID 	INNER JOIN (SELECT  					MULTI_FUND_ID,  					CONCAT(YEAR(AMENDMENT_FLAG_CREATETIME), ' - ', MONTH(AMENDMENT_FLAG_CREATETIME)) AS [DATE], 					MIN(AMENDMENT_FLAG_CREATETIME) AS MIN_CREATETIME      --this step is necessary to extract the first ammendment in the month 				FROM VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_EQ_TABLE  				GROUP BY  					MULTI_FUND_ID, 					CONCAT(YEAR(AMENDMENT_FLAG_CREATETIME), ' - ', MONTH(AMENDMENT_FLAG_CREATETIME)) 				) qe2 ON qe2.MULTI_FUND_ID=t.MULTI_FUND_ID  						 AND qe2.MIN_CREATETIME=qe.AMENDMENT_FLAG_CREATETIME 						 AND qe2.DATE=CONCAT(YEAR(qe.AMENDMENT_FLAG_CREATETIME), ' - ', MONTH(qe.AMENDMENT_FLAG_CREATETIME)) 	WHERE AMENDMENT_FLAG > 0 AND  cancellationflag <> 1 and qe.AMENDMENT_FLAG_CREATETIME between @Start_Date and @End_Date 	UNION  	SELECT DISTINCT 		concat(p.ORD_NUM, TIMELY_EXECUTION_EXCEPTION) AS EXCEPTION_ID, 		case when ISNULL(e.Reason,'') = '' then 'N/A' 			 else e.REASON 		end as Rationale, 		'9' AS EXCEPTION_TYPE_ID, 		1 AS EXCEPTION_VALUE, -- Do not double count multiple raisings of an order 		MIN(CONCAT(YEAR(qe.CREATETIME), ' - ', MONTH(qe.CREATETIME))) AS [DATE] 	FROM VISTA_REPORTING.dbo.PM_ORDERS p 	LEFT JOIN #temp_trades t ON t.PM_ORD=p.ORD_NUM  	INNER JOIN VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_EQ_TABLE qe ON qe.ORD_NUM=p.ORD_NUM 	INNER JOIN (SELECT ORD_NUM, MIN(CREATETIME) AS MIN_CREATETIME      --this step is necessary to extract the first comment  				FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_EQ_TABLE --as there are multiple exceptions raised for TIMELY_RECORDING 				GROUP BY ORD_NUM) qe2 ON qe2.ORD_NUM=p.ORD_NUM AND qe2.MIN_CREATETIME=qe.CREATETIME 	LEFT JOIN #MAX_REASON e on concat(p.ord_num,'_9',qe.TIMELY_EXECUTION_EXCEPTION) = e.ID 	WHERE TIMELY_EXECUTION_EXCEPTION > 0 and qe.CREATETIME between @Start_Date and @End_Date 	GROUP BY concat(p.ORD_NUM, TIMELY_EXECUTION_EXCEPTION), e.REASON   	UNION  	SELECT DISTINCT 		p.ORD_NUM AS EXCEPTION_ID, 		case when ISNULL(e.Reason,'') = '' then 'N/A' 			 else e.REASON 		end as Rationale, 		'11' AS EXCEPTION_TYPE_ID, 		qe.TIMELY_RELEASE_EXCEPTION AS EXCEPTION_VALUE, 		CONCAT(YEAR(qe.TR_CREATETIME), ' - ', MONTH(qe.TR_CREATETIME)) AS [DATE] 	FROM VISTA_REPORTING.dbo.PM_ORDERS p 	LEFT JOIN #temp_trades t ON t.PM_ORD=p.ORD_NUM  	INNER JOIN VISTA_STAGING.dbo.VG_11_TIMELY_RELEASE_EQ_TABLE qe ON qe.ORD_NUM=p.ORD_NUM 	LEFT JOIN #Max_Reason e on concat(qe.ORD_NUM,'_11') = e.ID 	WHERE t.MAX_TRD_TRADE_DATE IS NOT NULL 	AND TIMELY_RELEASE_EXCEPTION > 0 and qe.TR_CREATETIME between @Start_Date and @End_Date 	UNION  	SELECT DISTINCT 		qe.oa_id AS EXCEPTION_ID, 		case when ISNULL(e.Reason,'') = '' then 'N/A' 			 else e.REASON 		end as Rationale, 		'13' AS EXCEPTION_TYPE_ID, 		qe.MERGE_EXCEPTION AS EXCEPTION_VALUE, 		CONCAT(YEAR(qe.CREATETIME), ' - ', MONTH(qe.CREATETIME)) AS [DATE] 	FROM #temp_trades t 	INNER JOIN VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_EQ_TABLE qe ON qe.ORD_NUM=t.ORD_NUM 	LEFT JOIN #Max_Reason e on concat(qe.oa_id,'_13') = e.ID 	WHERE MERGE_EXCEPTION > 0 and qe.CREATETIME between @Start_Date and @End_Date 	UNION  	SELECT DISTINCT 		t.ORD_NUM AS EXCEPTION_ID, 		case when ISNULL(e.Reason,'') = '' then 'N/A' 			 else e.REASON 		end as Rationale, 		'14' AS EXCEPTION_TYPE_ID, 		qe.ORDER_PRIORITY_EXCEPTION AS EXCEPTION_VALUE, 		CONCAT(YEAR(qe.CREATETIME), ' - ', MONTH(qe.CREATETIME)) AS [DATE] 	FROM #temp_trades t 	INNER JOIN VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_EQ_TABLE qe ON qe.ORD_NUM=t.ORD_NUM 	LEFT JOIN #Max_Reason e on concat(qe.ORD_NUM,'_14') = e.ID 	WHERE ORDER_PRIORITY_EXCEPTION > 0 and qe.CREATETIME between @Start_Date and @End_Date 	UNION  	SELECT DISTINCT 		qe.MULTI_FUND_ID AS EXCEPTION_ID, 		case when ISNULL(e.Reason,'') = '' then 'N/A' 			 else e.REASON 		end as Rationale, 		'25' AS EXCEPTION_TYPE_ID, 		qe.IT_FLAG AS EXCEPTION_VALUE, 		CONCAT(YEAR(qe.IT_FLAG_CREATETIME), ' - ', MONTH(qe.IT_FLAG_CREATETIME)) AS [DATE] 	FROM #temp_trades t  	INNER JOIN vista_staging.dbo.VG_25_INTERFUND_TRANSFER_EQ_TABLE qe ON qe.MULTI_FUND_ID=t.MULTI_FUND_ID 	LEFT JOIN #MAX_REASON e on concat(t.multi_fund_id,'_25') = e.ID 	WHERE IT_FLAG > 0 and qe.IT_FLAG_CREATETIME between @Start_Date and @End_Date 	 	UNION  	SELECT DISTINCT 		hl.ORD_NUM AS EXCEPTION_ID, 		case when ISNULL(e.Reason,'') = '' then 'N/A' 			 else e.REASON 		end as Rationale, 		'HL' AS EXCEPTION_TYPE_ID, 		hl.HL_EXCEPTION AS EXCEPTION_VALUE, 		CONCAT(YEAR(hl.HL_CREATEDATE), ' - ', MONTH(hl.HL_CREATEDATE)) AS [DATE] 	FROM #temp_trades t  	INNER JOIN VISTA_STAGING.dbo.VG_MARKET_HIGH_LOW_TABLE hl ON hl.ORD_NUM=t.ORD_NUM 	LEFT JOIN #MAX_REASON e on concat(hl.ORD_NUM,'_',hl.ID,'_HL') = e.ID 	WHERE hl.HL_EXCEPTION > 0 and hl.HL_CREATEDATE between @Start_Date and @End_Date  	UNION 	/* 	SELECT DISTINCT 		CONVERT(VARCHAR(100),ie.ORDER_ID) AS EXCEPTION_ID, 		case when ISNULL(e.Reason,'') = '' then 'N/A' 			 else e.REASON 		end as Rationale, 		'IS' AS EXCEPTION_TYPE_ID, 		ie.IM_EXCEPTION AS EXCEPTION_VALUE, 		CONCAT(YEAR(ie.IM_CREATEDATE), ' - ', MONTH(ie.IM_CREATEDATE)) AS [DATE] 	FROM #temp_trades t  	INNER JOIN VISTA_REPORTING.dbo.IMPLEMENTATION_SHORTFALL_EQ ie ON ie.ORDER_ID=t.ORD_NUM 	LEFT JOIN #MAX_REASON e on concat(ie.Order_ID,'_',ie.Row_ID,'_IS') = e.ID 	LEFT JOIN VISTA_STAGING.dbo.Markit_ISReport rpt ON ie.[Row_ID] = rpt.ID 	WHERE ie.IM_EXCEPTION > 0 and ie.IM_CREATEDATE between @Start_Date and @End_Date 	AND ie.SD='2SD'   	UNION 	*/  	SELECT DISTINCT 		ci.MULTI_FUND_ID AS EXCEPTION_ID, 		case when ISNULL(e.Reason,'') = '' then 'N/A' 			 else e.REASON 		end as Rationale, 		'CI' AS EXCEPTION_TYPE_ID, 		ci.COMMISSION_EXCEPTION AS EXCEPTION_VALUE, 		CONCAT(YEAR(ci.CE_CREATE_TIME), ' - ', MONTH(ci.CE_CREATE_TIME)) AS [DATE] 	FROM #temp_trades t  	INNER JOIN VISTA_STAGING.dbo.VG_COMMISSION_EXCEPTION_EQ_TABLE ci ON ci.MULTI_FUND_ID=t.MULTI_FUND_ID 	LEFT JOIN #MAX_REASON e on concat(t.multi_fund_id,'_CI') = e.ID 	WHERE ci.COMMISSION_EXCEPTION > 0 and ci.CE_CREATE_TIME between @Start_Date and @End_Date   	UNION  	SELECT DISTINCT 		es.MULTI_FUND_ID AS EXCEPTION_ID, 		case when ISNULL(e.Reason,'') = '' then 'N/A' 			 else e.REASON 		end as Rationale, 		'40' AS EXCEPTION_TYPE_ID, 		es.SETTLEMENT_EXCEPTION AS EXCEPTION_VALUE, 		CONCAT(YEAR(es.SETTLEMENT_CREATEDATE), ' - ', MONTH(es.SETTLEMENT_CREATEDATE)) AS [DATE] 	FROM #temp_trades t  	INNER JOIN VISTA_STAGING.dbo.VG_40_EXTENDED_SETTLEMENT_EXCEPTION_TABLE es ON es.MULTI_FUND_ID=t.MULTI_FUND_ID 	LEFT JOIN #MAX_REASON e on concat(t.multi_fund_id,'_40') = e.ID 	WHERE es.SETTLEMENT_EXCEPTION > 0 and es.SETTLEMENT_CREATEDATE between @Start_Date and @End_Date   )temp   IF OBJECT_ID('tempdb..#temp_count_table', 'U') IS NOT NULL DROP TABLE #temp_count_table SELECT DISTINCT 	EXCEPTION_TYPE_ID, 	CASE 		WHEN EXCEPTION_TYPE_ID = '1'	THEN 'Quote Exception' 		WHEN EXCEPTION_TYPE_ID = '7'	THEN 'Non-Winning Quote' 		WHEN EXCEPTION_TYPE_ID = '9'	THEN 'Timely Execution' 		WHEN EXCEPTION_TYPE_ID = '10'	THEN 'Timely Recording' 		WHEN EXCEPTION_TYPE_ID = '11'	THEN 'Timely Release' 		WHEN EXCEPTION_TYPE_ID = '13'	THEN 'Aggregation' 		WHEN EXCEPTION_TYPE_ID = '14'	THEN 'Sequential Orders' 		WHEN EXCEPTION_TYPE_ID = '15'	THEN 'Amendments' 		WHEN EXCEPTION_TYPE_ID = '25'	THEN 'Interfund Transfers' 		WHEN EXCEPTION_TYPE_ID = 'HL'	THEN 'Outside High/Low' 		--WHEN EXCEPTION_TYPE_ID = 'IS'	THEN 'Implementation Shortfall' 		WHEN EXCEPTION_TYPE_ID = 'CI'	THEN 'Commission Rates Increase' 		WHEN EXCEPTION_TYPE_ID = '40'	THEN 'Equity trades instructed > T+5' 	END AS AREA, 	CASE  		WHEN EXCEPTION_TYPE_ID = '1'	THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '7'	THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '9'	THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '10'	THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '11'	THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '13'	THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '14'	THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '15'	THEN 'No. of Amendments made during the month' 		WHEN EXCEPTION_TYPE_ID = '25'	THEN 'No. of Interfund Transfers' 		WHEN EXCEPTION_TYPE_ID = 'HL'	THEN 'No. of exceptions' 		--WHEN EXCEPTION_TYPE_ID = 'IS'   THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = 'CI'	THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '40'	THEN 'No. of exceptions' 	END AS [TYPE], 	COUNT(DISTINCT EXCEPTION_ID) AS TOTAL_POP, 	Rationale, 	[DATE] INTO #temp_count_table FROM #temp_exception_table GROUP BY 	EXCEPTION_TYPE_ID, 	Rationale, 	[DATE]   IF OBJECT_ID('tempdb..#temp_dealing_desk_controls', 'U') IS NOT NULL DROP TABLE #temp_dealing_desk_controls SELECT DISTINCT 	AREA, 	TYPE, 	Rationale, 	[DATE] AS Exception_Date, 	SUM(TOTAL_POP) AS NO_EXCEPTIONS_IN_SCOPE, 	'' AS DMC_TICKED INTO #temp_dealing_desk_controls FROM #temp_count_table GROUP BY  	AREA, 	TYPE, 	[DATE], 	Rationale   IF OBJECT_ID('tempdb..#temp_cancel_table', 'U') IS NOT NULL DROP TABLE #temp_cancel_table SELECT DISTINCT 	ma.MULTI_FUND_ID, 	MIN(ma.AMENDMENT_FLAG_CREATETIME) AS CANCEL_TIME, 	mr.REASON INTO #temp_cancel_table  FROM VISTA_REPORTING.[dbo].[MASTER_AMENDMENT_FLAG_TABLE] ma LEFT JOIN #Max_Reason mr ON mr.ID = CONCAT(ma.MULTI_FUND_ID, '_15', ma.TOUCH_COUNT) WHERE Amendment_Cancellation = 'Cancellation' and DEALING_DESK = 'Equity'  	  and AMENDMENT_FLAG_CREATETIME between @Start_Date and @End_Date GROUP BY MULTI_FUND_ID, mr.REASON   IF OBJECT_ID('tempdb..#temp_cancel_table2', 'U') IS NOT NULL DROP TABLE #temp_cancel_table2 SELECT DISTINCT 	'Post Trade Cancellations' AS [AREA], 	'No. of Cancellations made during the month' AS [TYPE], 	CASE  		WHEN REASON = '' THEN 'N/A' 		ELSE REASON 	END AS Rationale, 	CONCAT(YEAR(CANCEL_TIME), ' - ', MONTH(CANCEL_TIME)) AS EXCEPTION_DATE, 	COUNT(MULTI_FUND_ID) AS NO_EXCEPTIONS_IN_SCOPE, 	'' AS DMC_TICKED INTO #temp_cancel_table2 FROM #temp_cancel_table GROUP BY CONCAT(YEAR(CANCEL_TIME), ' - ', MONTH(CANCEL_TIME)), REASON   IF OBJECT_ID('tempdb..#temp_finaltable', 'U') IS NOT NULL DROP TABLE #temp_finaltable SELECT *, EOMONTH(convert(date, concat([Exception_Date],'-01'))) AS [Date], @REPORT_NAME AS [Report_Name]  into #temp_finaltable FROM ( 	SELECT * FROM #temp_dealing_desk_controls 	UNION  	SELECT * FROM #temp_cancel_table2 )tmp   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_EQ_DD_RATIONALE_TABLE', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_EQ_DD_RATIONALE_TABLE 	from #temp_finaltable ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_EQ_DD_RATIONALE_TABLE 	SELECT * 	from #temp_finaltable   IF OBJECT_ID('tempdb..#temp_count_table_DATA', 'U') IS NOT NULL DROP TABLE #temp_count_table_DATA SELECT DISTINCT 	EXCEPTION_TYPE_ID, 	CASE 		WHEN EXCEPTION_TYPE_ID = '1'	THEN 'Quote Exception' 		WHEN EXCEPTION_TYPE_ID = '7'	THEN 'Non-Winning Quote' 		WHEN EXCEPTION_TYPE_ID = '9'	THEN 'Timely Execution' 		WHEN EXCEPTION_TYPE_ID = '10'	THEN 'Timely Recording' 		WHEN EXCEPTION_TYPE_ID = '11'	THEN 'Timely Release' 		WHEN EXCEPTION_TYPE_ID = '13'	THEN 'Aggregation' 		WHEN EXCEPTION_TYPE_ID = '14'	THEN 'Sequential Orders' 		WHEN EXCEPTION_TYPE_ID = '15'	THEN 'Amendments' 		WHEN EXCEPTION_TYPE_ID = '25'	THEN 'Interfund Transfers' 		WHEN EXCEPTION_TYPE_ID = 'HL'	THEN 'Outside High/Low' 		--WHEN EXCEPTION_TYPE_ID = 'IS'	THEN 'Implementation Shortfall' 		WHEN EXCEPTION_TYPE_ID = 'CI'	THEN 'Commission Rates Increase' 		WHEN EXCEPTION_TYPE_ID = '40'	THEN 'Equity trades instructed > T+5' 	END AS AREA, 	CASE  		WHEN EXCEPTION_TYPE_ID = '1'	THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '7'	THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '9'	THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '10'	THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '11'	THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '13'	THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '14'	THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '15'	THEN 'No. of Amendments made during the month' 		WHEN EXCEPTION_TYPE_ID = '25'	THEN 'No. of Interfund Transfers' 		WHEN EXCEPTION_TYPE_ID = 'HL'	THEN 'No. of exceptions' 		--WHEN EXCEPTION_TYPE_ID = 'IS'   THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = 'CI'	THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '40'	THEN 'No. of exceptions' 	END AS [TYPE], 	EXCEPTION_ID, 	Rationale, 	[DATE] INTO #temp_count_table_DATA FROM #temp_exception_table   IF OBJECT_ID('tempdb..#temp_dealing_desk_controls_DATA', 'U') IS NOT NULL DROP TABLE #temp_dealing_desk_controls_DATA SELECT DISTINCT 	AREA, 	TYPE, 	Rationale, 	[DATE] AS Exception_Date, 	EXCEPTION_ID as MULTI_FUND_ID, 	'' AS DMC_TICKED INTO #temp_dealing_desk_controls_DATA FROM #temp_count_table_DATA   IF OBJECT_ID('tempdb..#temp_cancel_table_DATA', 'U') IS NOT NULL DROP TABLE #temp_cancel_table_DATA SELECT DISTINCT 	ma.MULTI_FUND_ID, 	MIN(ma.AMENDMENT_FLAG_CREATETIME) AS CANCEL_TIME, 	mr.REASON INTO #temp_cancel_table_DATA FROM VISTA_REPORTING.[dbo].[MASTER_AMENDMENT_FLAG_TABLE] ma LEFT JOIN #Max_Reason mr ON mr.ID = CONCAT(ma.MULTI_FUND_ID, '_15', ma.TOUCH_COUNT) WHERE Amendment_Cancellation = 'Cancellation' and DEALING_DESK = 'Equity'  	  and AMENDMENT_FLAG_CREATETIME between @Start_Date and @End_Date GROUP BY MULTI_FUND_ID, mr.REASON   IF OBJECT_ID('tempdb..#temp_cancel_table2_DATA', 'U') IS NOT NULL DROP TABLE #temp_cancel_table2_DATA SELECT DISTINCT 	'Post Trade Cancellations' AS [AREA], 	'No. of Cancellations made during the month' AS [TYPE], 	CASE  		WHEN REASON = '' THEN 'N/A' 		ELSE REASON 	END AS Rationale, 	CONCAT(YEAR(CANCEL_TIME), ' - ', MONTH(CANCEL_TIME)) AS EXCEPTION_DATE, 	MULTI_FUND_ID as MULTI_FUND_ID, 	'' AS DMC_TICKED INTO #temp_cancel_table2_DATA FROM #temp_cancel_table_DATA    IF OBJECT_ID('tempdb..#temp_finaltable_DATA', 'U') IS NOT NULL DROP TABLE #temp_finaltable_DATA SELECT *, EOMONTH(convert(date, concat([Exception_Date],'-01'))) AS [Date], @REPORT_NAME AS [Report_Name]  into #temp_finaltable_DATA FROM ( 	SELECT * FROM #temp_dealing_desk_controls_DATA 	UNION  	SELECT * FROM #temp_cancel_table2_DATA )tmp   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_EQ_DD_RATIONALE_TABLE_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_EQ_DD_RATIONALE_TABLE_DATA 	from #temp_finaltable_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_EQ_DD_RATIONALE_TABLE_DATA 	SELECT * 	from #temp_finaltable_DATA END   --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: DMC_FI_TIMELY_EX_AVERAGES CreateDate: 2019-10-18 08:39:50.213 ModifyDate: 2020-01-22 14:29:32.307 --- DEFINITION START --- -- ============================================= -- Author:		<Michael Nasra> -- Create date: <14/10/2019> -- Description:	<Calculates the average Timely Execution values -- across all instrument types for a certain time period> -- -- Changes: -- MN - 22-01-2020 - Changed INST_TYPE to INST_GROUP to reduce granularity of report as requested. -- ============================================= CREATE PROCEDURE [dbo].[DMC_FI_TIMELY_EX_AVERAGES] 	@Start_Month INT, 	@Start_Year INT, 	@End_Month INT, 	@End_Year INT, 	@REPORT_NAME VARCHAR(MAX) AS  BEGIN  DECLARE @Start_Date DATETIME; SET @Start_Date = CONVERT(DATE,CONCAT(@Start_Year,'-',@Start_Month,'-01')); --Turn the input start month parameter into a date (using the first day of the month) DECLARE @End_Date0 DATETIME; DECLARE @End_Date DATETIME; SET @End_Date0 = EOMONTH(CONVERT(DATETIME,CONCAT(@End_Year,'-',@End_Month,'-01')));  --Turn the input end month parameter into a date (using the last day of the month)  SET @End_Date = DATEADD(second,86399,@End_Date0);  --Add the metadata to a table so we keep a history of all reports run IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_REPORTS_METADATA', 'U') IS NULL 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		CONVERT(VARCHAR(50),'DMC_FI_TIMELY_EX_AVERAGES') AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date] 	INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		'DMC_FI_TIMELY_EX_AVERAGES' AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date]  IF OBJECT_ID('tempdb..#oc_pop', 'U') IS NOT NULL DROP TABLE #oc_pop select distinct PM_ORD, TRD_ORD into #oc_pop from Vista_Reporting.dbo.ORDERS_CROSS where PM_ORD in (select ord_num from VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE)  IF OBJECT_ID('tempdb..#trades_pop', 'U') IS NOT NULL DROP TABLE #trades_pop select tr.execution_time, 	   tr.ORD_NUM, 	   pr.INST_TYPE into #trades_pop from vista_reporting.dbo.trades tr left join (select  			pr.INST_TYPE 			,pr.ORD_NUM 			,DEALING_DESK 			from vista_reporting.dbo.primary_inst_type_table pr  			where pr.DEALING_DESK = 'Fixed Income' 			and pr.PRIMARY_MARKET = 0 			and pr.TWEB_CLOSE_DEALING = 0 			and pr.[1615_DEALING] = 0 			and pr.INTERFUND_TRANSFER = 0 			and pr.FUTURE_ROLLS = 0) pr on tr.ord_num = pr.ord_num where tr.EXECUTION_TIME is not null   IF OBJECT_ID('tempdb..#population', 'U') IS NOT NULL DROP TABLE #population select distinct vg.ORD_NUM 	,ref.INST_GROUP 	,vg.REBASED_AUTH_TIME 	,tp.EXECUTION_TIME 	,datediff(second,vg.rebased_auth_time, tp.execution_time) as DIFFERENCE_IN_SECONDS 	,ref.THRESHOLD_MINS 	into #population 	from VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE vg 	INNER join #oc_pop oc on oc.PM_ORD = vg.ORD_NUM 	inner join #trades_pop tp on tp.ORD_NUM = oc.TRD_ORD 	inner join VISTA_STAGING.dbo.REF_FI_TIMELY_EX_THRESHOLD ref on ref.INST_TYPE = tp.INST_TYPE and REBASED_AUTH_TIME between ref.DATE_FROM and ref.DATE_TO 	where datediff(second,vg.rebased_auth_time, tp.execution_time) between 0 and 36000 --Exculde cases where the difference is more than 10 hours 	and REBASED_AUTH_TIME between @Start_Date and @End_Date  	 --Creates a table that has all combinations of INST_TYPE and months betwen start and end date --This is so that a NULL can be displayed in the case there is no values for that combination IF OBJECT_ID('tempdb..#temp_all_month_inst_type_combos', 'U') IS NOT NULL DROP TABLE #temp_all_month_inst_type_combos SELECT  DATEADD(MONTH, x.number, @start_date) AS MonthName, 		t.INST_GROUP INTO    #temp_all_month_inst_type_combos FROM    master.dbo.spt_values x cross join (select distinct t.INST_GROUP from #population t) t   WHERE   x.type = 'P'         AND     x.number <= DATEDIFF(MONTH, @start_date, @end_date)  IF OBJECT_ID('tempdb..#average_by_month_and_inst', 'U') IS NOT NULL DROP TABLE #average_by_month_and_inst select distinct CONVERT(VARCHAR(8), DATEADD(SECOND, abs(avg(p.DIFFERENCE_IN_SECONDS)), '19000101'), 8) as AVERAGE_DIFFERENCE ,p.INST_GROUP ,p.THRESHOLD_MINS ,CONCAT(YEAR(p.REBASED_AUTH_TIME), ' - ', MONTH(p.REBASED_AUTH_TIME)) AS Month_Year into #average_by_month_and_inst  from #population p  group by  p.INST_GROUP ,p.THRESHOLD_MINS ,CONCAT(YEAR(p.REBASED_AUTH_TIME), ' - ', MONTH(p.REBASED_AUTH_TIME))    IF OBJECT_ID('tempdb..#average_by_month_and_inst_all', 'U') IS NOT NULL DROP TABLE #average_by_month_and_inst_all select  CONCAT(YEAR(a.MonthName), ' - ', MONTH(a.MonthName)) as Month_Year ,t.AVERAGE_DIFFERENCE ,a.INST_GROUP ,p.THRESHOLD_MINS ,0 as ALL_INST_TYPES into #average_by_month_and_inst_all from #temp_all_month_inst_type_combos a left join #average_by_month_and_inst t on CONCAT(YEAR(a.MonthName), ' - ', MONTH(a.MonthName)) = t.Month_Year and a.INST_GROUP = t.INST_GROUP left join (select distinct INST_GROUP, THRESHOLD_MINS from #population) p on p.INST_GROUP = a.INST_GROUP  --Creates a table that has all combinations of thresholds and months betwen start and end date --This is so that a NULL can be displayed in the case there is no values for that combination IF OBJECT_ID('tempdb..#temp_all_month_threshold_combos', 'U') IS NOT NULL DROP TABLE #average_by_month_and_inst_all SELECT  DATEADD(MONTH, x.number, @start_date) AS MonthName, 		t.THRESHOLD_MINS INTO    #temp_all_month_threshold_combos FROM    master.dbo.spt_values x cross join (select distinct t.THRESHOLD_MINS from #population t) t   WHERE   x.type = 'P'         AND     x.number <= DATEDIFF(MONTH, @start_date, @end_date)  IF OBJECT_ID('tempdb..#average_by_threshold', 'U') IS NOT NULL DROP TABLE #average_by_threshold select  CONCAT(YEAR(t.MonthName), ' - ', MONTH(t.MonthName)) as Month_Year ,CONVERT(VARCHAR(8), DATEADD(SECOND, abs(avg(DIFFERENCE_IN_SECONDS)), '19000101'), 8) as AVERAGE_DIFFERENCE ,'ALL' as INST_GROUP ,t.THRESHOLD_MINS ,1 as ALL_INST_TYPES into #average_by_threshold from #temp_all_month_threshold_combos t left join #population p on p.THRESHOLD_MINS = t.THRESHOLD_MINS  and CONCAT(YEAR(p.REBASED_AUTH_TIME), ' - ', MONTH(p.REBASED_AUTH_TIME)) = CONCAT(YEAR(t.MonthName), ' - ', MONTH(t.MonthName)) group by  t.THRESHOLD_MINS , CONCAT(YEAR(t.MonthName), ' - ', MONTH(t.MonthName))  IF OBJECT_ID('tempdb..#average_all_final', 'U') IS NOT NULL DROP TABLE #average_all_final select *, @REPORT_NAME as REPORT_NAME into #average_all_final from #average_by_threshold 	UNION ALL SELECT *, @REPORT_NAME as REPORT_NAME FROM #average_by_month_and_inst_all  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FI_TIMELY_EX_AVERAGES_TABLE_DATA', 'U') IS NULL 	SELECT ORD_NUM, 	@REPORT_NAME as REPORT_NAME 	INTO VISTA_REPORTING.dbo.DMC_FI_TIMELY_EX_AVERAGES_TABLE_DATA 	from #population ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_FI_TIMELY_EX_AVERAGES_TABLE_DATA 	SELECT ORD_NUM, 	@REPORT_NAME as REPORT_NAME 	from #population  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FI_TIMELY_EX_AVERAGES_TABLE', 'U') IS NULL 	SELECT MONTH_YEAR, 		   AVERAGE_DIFFERENCE, 		   INST_GROUP as INST_TYPE, 		   THRESHOLD_MINS, 		   ALL_INST_TYPES, 		   REPORT_NAME 	INTO VISTA_REPORTING.dbo.DMC_FI_TIMELY_EX_AVERAGES_TABLE 	from #average_all_final ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_FI_TIMELY_EX_AVERAGES_TABLE 	SELECT MONTH_YEAR, 		   AVERAGE_DIFFERENCE, 		   INST_GROUP as INST_TYPE, 		   THRESHOLD_MINS, 		   ALL_INST_TYPES, 		   REPORT_NAME 	from #average_all_final  END --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: DMC_FICM_CLIENT_ORDER_HANDLING_TIMELY_EX CreateDate: 2019-10-18 08:39:50.257 ModifyDate: 2019-10-18 08:39:50.257 --- DEFINITION START --- -- ============================================= -- Author:		<Ayiba Cesario> -- Create date: <09/08/2018> -- Description:	<Generate DMC reports for FI C&M Client Order Handling Timely Execution. --	This stored procedure takes a start month, end month and report name  --	as input parameters and generates the reports for these months.> -- =============================================  --=========================== --2018-09-25 WH - changed the statuses in the #max_reason table as we have moved to using 'Status From' and not 'Status To' --=========================== CREATE PROCEDURE [dbo].[DMC_FICM_CLIENT_ORDER_HANDLING_TIMELY_EX] 	@Start_Month INT, 	@Start_Year INT, 	@End_Month INT, 	@End_Year INT, 	@REPORT_NAME VARCHAR(MAX) AS  BEGIN  DECLARE @Start_Date DATETIME; SET @Start_Date = CONVERT(DATE,CONCAT(@Start_Year,'-',@Start_Month,'-01')); --Turn the input start month parameter into a date (using the first day of the month) DECLARE @End_Date0 DATETIME; DECLARE @End_Date DATETIME; SET @End_Date0 = EOMONTH(CONVERT(DATETIME,CONCAT(@End_Year,'-',@End_Month,'-01')));  --Turn the input end month parameter into a date (using the last day of the month)  SET @End_Date = DATEADD(second,86399,@End_Date0);  --Add the metadata to a table so we keep a history of all reports run IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_REPORTS_METADATA', 'U') IS NULL 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		CONVERT(VARCHAR(50),'FICM_Client_Order_Handling_Timely_Ex') AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date] 	INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		'FICM_Client_Order_Handling_Timely_Ex' AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date]  -- 5.1.6	Report 3: Client Order Handling: – Timely Execution Requirements   -----Use the latest REASON to determine if an exception is a false positive IF OBJECT_ID('tempdb..#Max_Reason', 'U') IS  NOT NULL DROP TABLE #Max_Reason select distinct  	e.ID,  	e.REASON , 	e.STATUS into #Max_Reason from VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE e inner join ( 	select  		ID, 		MAX(touch_count) as [Max_touch]  		from VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE 		where status in ('For Review','With Dealer','With Reviewer','C&A Review Request') 		--the above condition around status ensures that we only consider exceptions coming from the Dealing Desk 		--only dealing desk has the ability to flag false positive exceptions 	group by ID ) a  on a.ID = e.ID and a.Max_touch = e.TOUCH_COUNT  --Classify orders as Intra first and then Inter as one order might be both inter and intra.  IF OBJECT_ID('tempdb..#step1', 'U') IS  NOT NULL DROP TABLE #step1 select	distinct  		ord_num, 		TIMELY_EXECUTION_EXCEPTION, 		Exception_Type, 		case when Exception_Type = 'Intra' then 1 else 0 end as [Intra_Flag]  into #step1 from VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE te where TIMELY_EXECUTION_EXCEPTION > 0 ORDER BY ORD_NUM  --Take the max -i.e. use Intra first and then Inter  IF OBJECT_ID('tempdb..#step2', 'U') IS NOT NULL DROP TABLE #step2 SELECT	ord_num,  		MAX([Intra_Flag]) AS [New Exception type] 		--MAX(CASE WHEN [Intra_Flag] = 1 THEN 1 ELSE TIMELY_EXECUTION_EXCEPTION END) AS [NEW TIMELY_EXECUTION_EXCEPTION] INTO #step2 FROM #step1 GROUP BY ORD_NUM  -- For Intra set Timely execution exception to 1; for the rest set to max, i.e. can go up to 160 IF OBJECT_ID('tempdb..#timex', 'U') IS NOT NULL DROP TABLE #timex SELECT st2.ord_num, 	MIN(CASE WHEN [New Exception type] = 1 THEN 1 ELSE TIMELY_EXECUTION_EXCEPTION END) AS [NEW TIMELY_EXECUTION_EXCEPTION]  INTO #timex FROM #step2 st2 INNER JOIN #STEP1 st1 ON ST2.ORD_NUM = ST1.ORD_NUM AND ST2.[New Exception type] = st1.[Intra_Flag] group by st2.ord_num  -- Left join to step2 to get [New Exception type]  IF OBJECT_ID('tempdb..#step3', 'U') IS NOT NULL DROP TABLE #step3 select	tim.*, 		st2.[New Exception type], 		case when  [New Exception type] = 1 then 'Intra' else 'Inter' end as [Exception type desc] INTO #step3		 from #timex tim left join #step2 st2 on tim.ORD_NUM = st2.ORD_NUM    IF OBJECT_ID('tempdb..#step4', 'U') IS NOT NULL DROP TABLE #step4 select st3.* into #step4 from #step3 st3 inner join #step1 st1 on st3.ord_num = st1.ORD_NUM and st3.[Exception type desc] = st1.Exception_Type  			and st3.[NEW TIMELY_EXECUTION_EXCEPTION] = st1.TIMELY_EXECUTION_EXCEPTION   --Use the VG level table to determine exceptions. Join to excepotion reason table to discount false positives IF OBJECT_ID('tempdb..#orders', 'U') IS  NOT NULL DROP TABLE #orders SELECT  	ex.ORD_NUM,--concat(ex.ORD_NUM, ex.[Exception type desc], ex.[NEW TIMELY_EXECUTION_EXCEPTION]) as ord_num, 	MAX(CASE WHEN [Exception type desc] = 'Intra' THEN 1 ELSE 0 END) AS [Outside_Threshold_Exception], 	MAX(CASE WHEN [Exception type desc] = 'Inter' THEN 1 ELSE 0 END) AS [Unfilled_Exception], 	CONCAT(YEAR(MIN(te.CREATETIME)), ' - ', MONTH(MIN(te.CREATETIME))) AS Month_Year, 	MAX(CASE WHEN rsn.REASON = 'False Positive' THEN 1 ELSE 0 END) AS False_Positive INTO #orders FROM #step4 ex LEFT JOIN #Max_Reason rsn 	ON CONCAT(ex.ORD_NUM, '_9',[Exception type desc],[NEW TIMELY_EXECUTION_EXCEPTION]) = rsn.ID left join VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE te  on te.ORD_NUM = ex.ORD_NUM AND te.Exception_Type = ex.[Exception type desc] AND te.TIMELY_EXECUTION_EXCEPTION = ex.[NEW TIMELY_EXECUTION_EXCEPTION] where te.CREATETIME between @Start_Date and @End_Date GROUP BY 	ex.ORD_NUM 	--concat(ex.ORD_NUM, ex.[Exception type desc], ex.[NEW TIMELY_EXECUTION_EXCEPTION]) 	--having MAX(CASE WHEN Exception_Type = 'Intra' THEN 1 ELSE 0 END) = 1 or MAX(CASE WHEN Exception_Type = 'Inter' THEN 1 ELSE 0 END)  = 1 --Group up exceptions into categories IF OBJECT_ID('tempdb..#temp_final_table', 'U') IS  NOT NULL DROP TABLE #temp_final_table SELECT  	COUNT(DISTINCT CASE WHEN [Outside_Threshold_Exception] = 1 AND False_Positive = 0 THEN ORD_NUM ELSE NULL END) AS [Outside_Threshold_Exception], 	COUNT(DISTINCT CASE WHEN [Unfilled_Exception] = 1 AND False_Positive = 0 THEN ORD_NUM ELSE NULL END) AS [Unfilled_Exception], 	Month_Year, 	EOMONTH(convert(date, CONCAT(Month_Year, '-01'))) AS [Date], 	@REPORT_NAME AS [Report_Name] into #temp_final_table FROM  	#orders GROUP BY 	Month_Year, 	EOMONTH(convert(date, CONCAT(Month_Year, '-01')))  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_ORDER_HANDLING_TIMELY_EX_TABLE', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_ORDER_HANDLING_TIMELY_EX_TABLE 	from #temp_final_table ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_ORDER_HANDLING_TIMELY_EX_TABLE 	SELECT * 	from #temp_final_table  IF OBJECT_ID('tempdb..#temp_final_table_data', 'U') IS  NOT NULL DROP TABLE #temp_final_table_data SELECT  	ORD_NUM, 	CASE WHEN [Outside_Threshold_Exception] is not null AND False_Positive = 0 THEN [Outside_Threshold_Exception] ELSE NULL END AS [Outside_Threshold_Exception], 	CASE WHEN [Unfilled_Exception] is not null AND False_Positive = 0 THEN [Unfilled_Exception] ELSE NULL END AS [Unfilled_Exception], 	Month_Year, 	EOMONTH(convert(date, CONCAT(Month_Year, '-01'))) AS [Date], 	@REPORT_NAME AS [Report_Name] into #temp_final_table_data FROM #orders  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_ORDER_HANDLING_TIMELY_EX_TABLE_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_ORDER_HANDLING_TIMELY_EX_TABLE_DATA 	from #temp_final_table_data ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_ORDER_HANDLING_TIMELY_EX_TABLE_DATA 	SELECT * 	from #temp_final_table_data  END   --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: DMC_FICM_COBS_EXCEPTIONS CreateDate: 2019-10-18 08:39:50.330 ModifyDate: 2020-01-09 09:52:37.767 --- DEFINITION START --- -- ============================================= -- Author:		<Ayiba Cesario> -- Create date: <09/08/2018> -- Description:	<Generate DMC reports for FI COBS Exceptions Summary Statistics. --	This stored procedure takes a start month, end month and report name  --	as input parameters and generates the reports for these months.> -- =============================================   --=========================== --2018-09-25 WH - changed the statuses in the #max_reason and #max_reason_CM tables as we have moved to using 'Status From' and not 'Status To' --2020-01-08 MN - Changed the way a reviewed exception is determined by looking at final status update table instead of exception reason table --=========================== CREATE PROCEDURE [dbo].[DMC_FICM_COBS_EXCEPTIONS]  	@Start_Month INT, 	@Start_Year INT, 	@End_Month INT, 	@End_Year INT, 	@REPORT_NAME VARCHAR(MAX) AS  BEGIN  DECLARE @Start_Date DATETIME; SET @Start_Date = CONVERT(DATE,CONCAT(@Start_Year,'-',@Start_Month,'-01')); --Turn the input start month parameter into a date (using the first day of the month) DECLARE @End_Date0 DATETIME; DECLARE @End_Date DATETIME; SET @End_Date0 = EOMONTH(CONVERT(DATETIME,CONCAT(@End_Year,'-',@End_Month,'-01')));  --Turn the input end month parameter into a date (using the last day of the month)  SET @End_Date = DATEADD(second,86399,@End_Date0);  --Add the metadata to a table so we keep a history of all reports run IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_REPORTS_METADATA', 'U') IS NULL 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		CONVERT(VARCHAR(50),'FICM_COBS_Exceptions') AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date] 	INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		'FICM_COBS_Exceptions' AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date]  -- 5.1.2	Report 1: Fixed Income Dealing Desk Controls and Issues Monitor - COBS Exceptions – Requirements  --IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table --SELECT DISTINCT --	CASE  --		WHEN CHARINDEX('_1', er.ID) > 0 AND LEN(er.ID) > 4 THEN LEFT(er.ID, CHARINDEX(' ', er.ID)-1) --		WHEN CHARINDEX('_7', er.ID) > 0 AND LEN(er.ID) > 4 THEN LEFT(er.ID, CHARINDEX(' ', er.ID)-1) --		WHEN CHARINDEX('_9', er.ID) > 0 AND LEN(er.ID) > 4 THEN LEFT(er.ID, CHARINDEX(' ', er.ID)-1) --	END AS EXTRACTED_ID, --	CASE  --		WHEN CHARINDEX('_7', er.ID) > 0 AND LEN(er.ID) > 4 THEN '7' --		WHEN CHARINDEX('_9', er.ID) > 0 AND LEN(er.ID) > 4 THEN '9' --		WHEN CHARINDEX('_10', er.ID) > 0 AND LEN(er.ID) > 4 THEN '10' --		WHEN CHARINDEX('_13', er.ID) > 0 AND LEN(er.ID) > 4 THEN '13' --		WHEN CHARINDEX('_14', er.ID) > 0 AND LEN(er.ID) > 4 THEN '14' --		WHEN CHARINDEX('_15', er.ID) > 0 AND LEN(er.ID) > 4 THEN '15' --		WHEN CHARINDEX('_1', er.ID) > 0 AND LEN(er.ID) > 4 THEN '1' --	END AS EXCEPTION_ID, --	er.[STATUS] --INTO #temp_status_table --FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE er --WHERE er.ID != ''   --IF OBJECT_ID('tempdb..#temp_trades', 'U') IS NOT NULL DROP TABLE #temp_trades --SELECT DISTINCT --	oc.PM_ORD, --	t.ORD_NUM, --	t.CLIENT_EXECUTION_NUM, --	t.MULTI_FUND_ID, --	t.TOUCH_COUNT, --	pr.INST_TYPE, --	pr.COUNTRY, --	MAX(t.TRD_TRADE_DATE) AS MAX_TRD_TRADE_DATE --INTO #temp_trades --FROM VISTA_REPORTING.dbo.TRADES t --LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD=t.ORD_NUM --LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON t.MULTI_FUND_ID = pr.MULTI_FUND_ID --GROUP BY --	oc.PM_ORD, --	t.ORD_NUM, --	t.CLIENT_EXECUTION_NUM, --	t.MULTI_FUND_ID, --	t.TOUCH_COUNT, --	pr.INST_TYPE, --	pr.COUNTRY  IF OBJECT_ID('tempdb..#Max_Reason', 'U') IS  NOT NULL DROP TABLE #Max_Reason --The below table is used to identify False Positives from Dealing Desk select distinct  	e.ID,  	e.REASON , 	e.STATUS into #Max_Reason from VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE e inner join ( 	select  		ID, 		MAX(touch_count) as [Max_touch]  		from VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE 		where status in ('For Review','With Dealer','With Reviewer','C&A Review Request') 		--the above condition around status ensures that we only consider exceptions coming from the Dealing Desk 		--only dealing desk has the ability to flag false positive exceptions 	group by ID ) a  on a.ID = e.ID and a.Max_touch = e.TOUCH_COUNT  IF OBJECT_ID('tempdb..#Max_Reason_CM', 'U') IS  NOT NULL DROP TABLE #Max_Reason_CM --The below table is used to identify the last Reason (populated by C&M Team) select distinct  	e.ID,  	e.REASON , 	e.STATUS into #Max_Reason_CM from VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE e inner join ( 	select  		ID, 		MAX(touch_count) as [Max_touch]  		from VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE 		WHERE STATUS IN ('Pre Sampling','With C&A Reviewer','Under Review','Review in Process','Post Sampling') 	group by ID ) a  on a.ID = e.ID and a.Max_touch = e.TOUCH_COUNT  --For Timely Execution, we only want to look at the first raising of an exception for each order. The following series of temp tables does this.  	--Classify orders as Intra first and then Inter as one order might be both inter and intra.  	IF OBJECT_ID('tempdb..#step1', 'U') IS  NOT NULL DROP TABLE #step1 	select	distinct  			ord_num, 			TIMELY_EXECUTION_EXCEPTION, 			Exception_Type, 			case when Exception_Type = 'Intra' then 1 else 0 end as [Intra_Flag] 	into #step1 	from VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE te 	where TIMELY_EXECUTION_EXCEPTION > 0 	ORDER BY ORD_NUM  	--Take the max -i.e. use Intra first and then Inter  	IF OBJECT_ID('tempdb..#step2', 'U') IS NOT NULL DROP TABLE #step2 	SELECT	ord_num,  			MAX([Intra_Flag]) AS [New Exception type] 			--MAX(CASE WHEN [Intra_Flag] = 1 THEN 1 ELSE TIMELY_EXECUTION_EXCEPTION END) AS [NEW TIMELY_EXECUTION_EXCEPTION] 	INTO #step2 	FROM #step1 	GROUP BY ORD_NUM  	-- For Intra set Timely execution exception to 1; for the rest set to max, i.e. can go up to 160 	IF OBJECT_ID('tempdb..#timex', 'U') IS NOT NULL DROP TABLE #timex 	SELECT st2.ord_num, 		MIN(CASE WHEN [New Exception type] = 1 THEN 1 ELSE TIMELY_EXECUTION_EXCEPTION END) AS [NEW TIMELY_EXECUTION_EXCEPTION]  	INTO #timex 	FROM #step2 st2 	INNER JOIN #STEP1 st1 ON ST2.ORD_NUM = ST1.ORD_NUM AND ST2.[New Exception type] = st1.[Intra_Flag] 	group by st2.ord_num  	-- Left join to step2 to get [New Exception type]  	IF OBJECT_ID('tempdb..#step3', 'U') IS NOT NULL DROP TABLE #step3 	select	tim.*, 			st2.[New Exception type], 			case when  [New Exception type] = 1 then 'Intra' else 'Inter' end as [Exception type desc] 	INTO #step3		 	from #timex tim 	left join #step2 st2 on tim.ORD_NUM = st2.ORD_NUM    	IF OBJECT_ID('tempdb..#step4', 'U') IS NOT NULL DROP TABLE #step4 	select st3.* into #step4 from #step3 st3 	inner join #step1 st1 on st3.ord_num = st1.ORD_NUM and st3.[Exception type desc] = st1.Exception_Type  				and st3.[NEW TIMELY_EXECUTION_EXCEPTION] = st1.TIMELY_EXECUTION_EXCEPTION   	--Use the VG level table to determine exceptions. Join to excepotion reason table to discount false positives 	IF OBJECT_ID('tempdb..#orders', 'U') IS  NOT NULL DROP TABLE #orders 	SELECT  		ex.ORD_NUM, 		CONCAT(YEAR(MIN(te.CREATETIME)), ' - ', MONTH(MIN(te.CREATETIME))) AS Month_Year, 		MAX(CASE WHEN rsn.REASON = 'False Positive' THEN 1 ELSE 0 END) AS False_Positive, 		MAX(CASE WHEN fsut.Status IN ('2C1','2C2') AND cm.REASON <> 'Not sampled for testing' THEN 1 ELSE 0 END) AS [CM_Reviewed] 	INTO #orders 	FROM #step4 ex 	LEFT JOIN #Max_Reason rsn 		ON CONCAT(ex.ORD_NUM, '_9',[Exception type desc],[NEW TIMELY_EXECUTION_EXCEPTION]) = rsn.ID 	LEFT JOIN #Max_Reason_CM cm 		ON CONCAT(ex.ORD_NUM, '_9',[Exception type desc],[NEW TIMELY_EXECUTION_EXCEPTION]) = cm.ID 	left join (select ID, fsut.STATUS from Vista_Reporting.dbo.FINAL_STATUS_UPDATE_TABLE fsut where DEALING_DESK = 'Fixed Income') fsut  		on CONCAT(ex.ORD_NUM, '_9',[Exception type desc],[NEW TIMELY_EXECUTION_EXCEPTION]) = fsut.id 	left join VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE te  	on te.ORD_NUM = ex.ORD_NUM AND te.Exception_Type = ex.[Exception type desc] AND te.TIMELY_EXECUTION_EXCEPTION = ex.[NEW TIMELY_EXECUTION_EXCEPTION] 	where te.CREATETIME between @Start_Date and @End_Date 	GROUP BY 		ex.ORD_NUM 		--having MAX(CASE WHEN Exception_Type = 'Intra' THEN 1 ELSE 0 END) = 1 or MAX(CASE WHEN Exception_Type = 'Inter' THEN 1 ELSE 0 END)  = 1   IF OBJECT_ID('tempdb..#temp_exception_table', 'U') IS NOT NULL DROP TABLE #temp_exception_table SELECT *  INTO #temp_exception_table FROM ( 	SELECT DISTINCT 		qe.MULTI_FUND_ID AS EXCEPTION_ID, 		'1' AS EXCEPTION_TYPE_ID, 		qe.QUOTE_EXCEPTION AS EXCEPTION_VALUE, 		--Thanos: Changed to Createtime from max_trd_trade_date 		CONCAT(YEAR(qe.CREATETIME), ' - ', MONTH(qe.CREATETIME)) AS [DATE], 		MAX(CASE WHEN fsut.Status IN ('2C1','2C2') AND ex.REASON <> 'Not sampled for testing' THEN 1 ELSE 0 END) AS [CM_Reviewed] 	FROM  VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI_TABLE qe  	--Thanos: Changed the below table from vista_reporting.dbo.exception_reason_table to #max_reason_cm 	LEFT JOIN #Max_Reason_CM ex ON qe.MULTI_FUND_ID + '_1' = ex.ID 	LEFT JOIN #Max_Reason rsn ON qe.MULTI_FUND_ID + '_1' = rsn.ID 	left join (select ID, fsut.STATUS from Vista_Reporting.dbo.FINAL_STATUS_UPDATE_TABLE fsut where DEALING_DESK = 'Fixed Income') fsut  		on qe.MULTI_FUND_ID + '_1' = fsut.id 	WHERE QUOTE_EXCEPTION = 1 	AND ISNULL(rsn.Reason,'') <> 'False Positive' and qe.CREATETIME between @Start_Date and @End_Date 	GROUP BY 		qe.MULTI_FUND_ID, 		qe.QUOTE_EXCEPTION, 		CONCAT(YEAR(qe.CREATETIME), ' - ', MONTH(qe.CREATETIME)) 	UNION  	SELECT DISTINCT 		qe.MULTI_FUND_ID AS EXCEPTION_ID, 		'7' AS EXCEPTION_TYPE_ID, 		qe.NWQ_EXCEPTION AS EXCEPTION_VALUE, 		--Thanos: Changed to Createtime from max_trd_trade_date 		CONCAT(YEAR(qe.NWQ_CREATEIME), ' - ', MONTH(qe.NWQ_CREATEIME)) AS [DATE], 		MAX(CASE WHEN fsut.Status IN ('2C1','2C2') AND ex.REASON <> 'Not sampled for testing' THEN 1 ELSE 0 END) AS [CM_Reviewed] 	FROM VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_FI_TABLE qe 	--Thanos: Changed the below table from vista_reporting.dbo.exception_reason_table to #max_reason_cm 	LEFT JOIN #Max_Reason_CM ex ON qe.MULTI_FUND_ID + '_7' = ex.ID 	--Thanos: Added the below condition to remove False positives 	LEFT JOIN #Max_Reason rsn ON qe.MULTI_FUND_ID + '_7' = rsn.ID 	left join (select ID, fsut.STATUS from Vista_Reporting.dbo.FINAL_STATUS_UPDATE_TABLE fsut where DEALING_DESK = 'Fixed Income') fsut  		on qe.MULTI_FUND_ID + '_7' = fsut.id 	WHERE NWQ_EXCEPTION = 1 AND ISNULL(rsn.Reason,'') <> 'False Positive' and qe.NWQ_CREATEIME between @Start_Date and @End_Date 	GROUP BY 		qe.MULTI_FUND_ID, 		qe.NWQ_EXCEPTION, 		CONCAT(YEAR(qe.NWQ_CREATEIME), ' - ', MONTH(qe.NWQ_CREATEIME))  	UNION  	--For Timely Execution we use the temp tables created above as this only looks to the first instance of an exception being raised. 	SELECT DISTINCT 		ORD_NUM AS EXCEPTION_ID, 		'9' AS EXCEPTION_TYPE_ID, 		1 AS EXCEPTION_VALUE, -- Default to 1 so that we don't double count the same order being raised multiple times. 		--Thanos: Changed the below to Createtime from Auth_Time 		MONTH_YEAR AS [DATE], --Put the exception into the first month that it was flagged. 		[CM_Reviewed] 	FROM #orders 	WHERE False_Positive = 0 		--concat(p.ORD_NUM, qe.Exception_Type, qe.TIMELY_EXECUTION_EXCEPTION) 	  	UNION  	SELECT DISTINCT 		qe.MULTI_FUND_ID AS EXCEPTION_ID, 		'10' AS EXCEPTION_TYPE_ID, 		TIMELY_RECORDING_EXCEPTION AS EXCEPTION_VALUE, -- Default to 1 so that we don't double count the same order being raised multiple times. 		--Thanos: Changed from Trade Date to Createtime 		CONCAT(YEAR(qe.TREC_CREATETIME), ' - ', MONTH(qe.TREC_CREATETIME)) AS [DATE], --Put the exception into the first month that it was flagged. 		MAX(CASE WHEN fsut.Status IN ('2C1','2C2') AND ex.REASON <> 'Not sampled for testing' THEN 1 ELSE 0 END) AS [CM_Reviewed] 	FROM  VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FI_TABLE qe 	LEFT JOIN #Max_Reason_CM ex ON CONCAT(qe.MULTI_FUND_ID, '_10') = ex.ID 	--Thanos: Added condition around False Positives 	LEFT JOIN #Max_Reason rsn ON CONCAT(qe.MULTI_FUND_ID, '_10') = rsn.ID 	left join (select ID, fsut.STATUS from Vista_Reporting.dbo.FINAL_STATUS_UPDATE_TABLE fsut where DEALING_DESK = 'Fixed Income') fsut  		on CONCAT(qe.MULTI_FUND_ID, '_10') = fsut.id 	WHERE TIMELY_RECORDING_EXCEPTION > 0 AND ISNULL(rsn.Reason,'') <> 'False Positive' and qe.TREC_CREATETIME between @Start_Date and @End_Date 	GROUP BY 		qe.MULTI_FUND_ID, 		TIMELY_RECORDING_EXCEPTION, 		CONCAT(YEAR(qe.TREC_CREATETIME), ' - ', MONTH(qe.TREC_CREATETIME)) 	 	UNION  	SELECT DISTINCT 		qe.oa_id AS EXCEPTION_ID, 		'13' AS EXCEPTION_TYPE_ID, 		qe.MERGE_EXCEPTION AS EXCEPTION_VALUE, 		--Thanos: Changed from max_trd_trade_date to Createtime 		CONCAT(YEAR(qe.CREATETIME), ' - ', MONTH(qe.CREATETIME)) AS [DATE], 		MAX(CASE WHEN fsut.Status IN ('2C1','2C2') AND ex.REASON <> 'Not sampled for testing' THEN 1 ELSE 0 END) AS [CM_Reviewed] 	FROM VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_FI_TABLE qe 	LEFT JOIN #Max_Reason_CM ex ON CONCAT(qe.OA_ID,'_13') = ex.ID 	--Thanos: Added condition around False Positives 	LEFT JOIN #Max_Reason rsn ON CONCAT(qe.OA_ID,'_13') = rsn.ID 	left join (select ID, fsut.STATUS from Vista_Reporting.dbo.FINAL_STATUS_UPDATE_TABLE fsut where DEALING_DESK = 'Fixed Income') fsut  		on CONCAT(qe.OA_ID,'_13') = fsut.id 	WHERE MERGE_EXCEPTION = 1 AND ISNULL(rsn.Reason,'') <> 'False Positive' and qe.CREATETIME between @Start_Date and @End_Date 	GROUP BY  		qe.oa_id, 		qe.MERGE_EXCEPTION, 		CONCAT(YEAR(qe.CREATETIME), ' - ', MONTH(qe.CREATETIME)) 		 	UNION  	SELECT DISTINCT 		qe.ORD_NUM AS EXCEPTION_ID, 		'14' AS EXCEPTION_TYPE_ID, 		qe.ORDER_PRIORITY_EXCEPTION AS EXCEPTION_VALUE, 		--Thanos: Changed from max_trd_trade_date to Createtime 		CONCAT(YEAR(qe.CREATETIME), ' - ', MONTH(qe.CREATETIME)) AS [DATE], 		MAX(CASE WHEN fsut.Status IN ('2C1','2C2')AND ex.REASON <> 'Not sampled for testing' THEN 1 ELSE 0 END) AS [CM_Reviewed] 	FROM VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_FI_TABLE qe 	LEFT JOIN #Max_Reason_CM ex ON CONCAT(qe.ORD_NUM,'_14') = ex.ID  	--Thanos: Added condition around False Positives 	LEFT JOIN #Max_Reason rsn ON CONCAT(qe.ORD_NUM,'_14') = rsn.ID 	left join (select ID, fsut.STATUS from Vista_Reporting.dbo.FINAL_STATUS_UPDATE_TABLE fsut where DEALING_DESK = 'Fixed Income') fsut  		on CONCAT(qe.ORD_NUM,'_14') = fsut.id  	WHERE ORDER_PRIORITY_EXCEPTION = 1 AND ISNULL(rsn.Reason,'') <> 'False Positive' and qe.CREATETIME between @Start_Date and @End_Date 	GROUP BY 		qe.ORD_NUM, 		qe.ORDER_PRIORITY_EXCEPTION, 		CONCAT(YEAR(qe.CREATETIME), ' - ', MONTH(qe.CREATETIME))  	UNION  	SELECT DISTINCT 		CONCAT(qe.MULTI_FUND_ID, qe.TOUCH_COUNT) AS EXCEPTION_ID, 		'15' AS EXCEPTION_TYPE_ID, 		qe.AMENDMENT_FLAG AS EXCEPTION_VALUE, 		--Thanos: Changed from max_trd_trade_date to Createtime 		CONCAT(YEAR(qe.AMENDMENT_FLAG_CREATETIME), ' - ', MONTH(qe.AMENDMENT_FLAG_CREATETIME)) AS [DATE], 		MAX(CASE WHEN fsut.Status IN ('2C1','2C2') AND ex.REASON <> 'Not sampled for testing' THEN 1 ELSE 0 END) AS [CM_Reviewed] 	FROM VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_FI_TABLE qe 	LEFT JOIN #Max_Reason_CM ex ON CONCAT(qe.MULTI_FUND_ID,'_15',qe.TOUCH_COUNT) = ex.ID  	--Thanos: Added condition around False Positives 	LEFT JOIN #Max_Reason rsn ON CONCAT(qe.MULTI_FUND_ID,'_15',qe.TOUCH_COUNT) = rsn.ID 		left join (select ID, fsut.STATUS from Vista_Reporting.dbo.FINAL_STATUS_UPDATE_TABLE fsut where DEALING_DESK = 'Fixed Income') fsut  		on CONCAT(qe.MULTI_FUND_ID,'_15',qe.TOUCH_COUNT) = fsut.id 	WHERE AMENDMENT_FLAG = 1 AND ISNULL(rsn.Reason,'') <> 'False Positive' and qe.AMENDMENT_FLAG_CREATETIME between @Start_Date and @End_Date 	GROUP BY  		CONCAT(qe.MULTI_FUND_ID, qe.TOUCH_COUNT), 		qe.AMENDMENT_FLAG, 		CONCAT(YEAR(qe.AMENDMENT_FLAG_CREATETIME), ' - ', MONTH(qe.AMENDMENT_FLAG_CREATETIME)) )temp   IF OBJECT_ID('tempdb..#temp_COBS_table', 'U') IS NOT NULL DROP TABLE #temp_COBS_table SELECT  	CASE  		WHEN tet.EXCEPTION_TYPE_ID = '1' THEN 'PDP Quote Exception' 		WHEN tet.EXCEPTION_TYPE_ID = '7' THEN 'Non-Winning Quote' 		WHEN tet.EXCEPTION_TYPE_ID = '9'  THEN 'Timely Execution' 		WHEN tet.EXCEPTION_TYPE_ID = '10' THEN 'Timely Recording' 		WHEN tet.EXCEPTION_TYPE_ID = '13' THEN 'Order Aggregation' 		WHEN tet.EXCEPTION_TYPE_ID = '14' THEN 'Order Priority' 		WHEN tet.EXCEPTION_TYPE_ID = '15' THEN 'Amendments' 		ELSE NULL 	END AS COBS_RULE, 	tet.[DATE], 	COUNT(tet.EXCEPTION_ID) AS NO_EXCEPTIONS_IN_SCOPE, 	SUM(CM_Reviewed) AS NO_EXCEPTIONS_REVIEWED INTO #temp_COBS_table FROM #temp_exception_table tet --LEFT JOIN #temp_status_table tst ON tst.EXTRACTED_ID = tet.EXCEPTION_ID AND tst.EXCEPTION_ID=tet.EXCEPTION_TYPE_ID GROUP BY  	CASE  		WHEN tet.EXCEPTION_TYPE_ID = '1' THEN 'PDP Quote Exception' 		WHEN tet.EXCEPTION_TYPE_ID = '7' THEN 'Non-Winning Quote' 		WHEN tet.EXCEPTION_TYPE_ID = '9'  THEN 'Timely Execution' 		WHEN tet.EXCEPTION_TYPE_ID = '10' THEN 'Timely Recording' 		WHEN tet.EXCEPTION_TYPE_ID = '13' THEN 'Order Aggregation' 		WHEN tet.EXCEPTION_TYPE_ID = '14' THEN 'Order Priority' 		WHEN tet.EXCEPTION_TYPE_ID = '15' THEN 'Amendments' 		ELSE NULL 	END, 	tet.[DATE] ORDER BY  	COBS_RULE, DATE  IF OBJECT_ID('tempdb..#temp_final_table', 'U') IS NOT NULL DROP TABLE #temp_final_table SELECT  	COBS_RULE, 	[DATE] as Trade_Date, 	SUM(NO_EXCEPTIONS_IN_SCOPE) AS NO_EXCEPTIONS_IN_SCOPE, 	SUM(NO_EXCEPTIONS_REVIEWED) AS NO_EXCEPTIONS_REVIEWED, 	CASE  		WHEN SUM(NO_EXCEPTIONS_IN_SCOPE) = 0 THEN 100.0 -- Guard against divide by zero errors 		ELSE (SUM(NO_EXCEPTIONS_REVIEWED)*100.0/SUM(NO_EXCEPTIONS_IN_SCOPE))  	END AS REVIEWED_PERCENTAGE, 	EOMONTH(CONVERT(DATE,CONCAT([DATE],'-01'))) AS [Date], 	@REPORT_NAME AS [Report_Name] into #temp_final_table FROM #temp_COBS_table WHERE COBS_RULE IS NOT NULL  GROUP BY 	COBS_RULE, 	[DATE], 	EOMONTH(CONVERT(DATE,CONCAT([DATE],'-01')))  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FI_COBS_EXCEPTIONS', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_FI_COBS_EXCEPTIONS 	from #temp_final_table ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_FI_COBS_EXCEPTIONS 	SELECT * 	from #temp_final_table   IF OBJECT_ID('tempdb..#temp_COBS_table_data', 'U') IS NOT NULL DROP TABLE #temp_COBS_table_data SELECT  	CASE  		WHEN tet.EXCEPTION_TYPE_ID = '1' THEN 'PDP Quote Exception' 		WHEN tet.EXCEPTION_TYPE_ID = '7' THEN 'Non-Winning Quote' 		WHEN tet.EXCEPTION_TYPE_ID = '9'  THEN 'Timely Execution' 		WHEN tet.EXCEPTION_TYPE_ID = '10' THEN 'Timely Recording' 		WHEN tet.EXCEPTION_TYPE_ID = '13' THEN 'Order Aggregation' 		WHEN tet.EXCEPTION_TYPE_ID = '14' THEN 'Order Priority' 		WHEN tet.EXCEPTION_TYPE_ID = '15' THEN 'Amendments' 		ELSE NULL 	END AS COBS_RULE, 	tet.[DATE], 	tet.EXCEPTION_ID, 	CM_Reviewed INTO #temp_COBS_table_data FROM #temp_exception_table tet --LEFT JOIN #temp_status_table tst ON tst.EXTRACTED_ID = tet.EXCEPTION_ID AND tst.EXCEPTION_ID=tet.EXCEPTION_TYPE_ID ORDER BY  	COBS_RULE, DATE  IF OBJECT_ID('tempdb..#temp_final_table_data', 'U') IS NOT NULL DROP TABLE #temp_final_table_data SELECT  	COBS_RULE, 	[DATE] as Trade_Date, 	EXCEPTION_ID, 	CM_Reviewed, 	--CASE  	--	WHEN SUM(NO_EXCEPTIONS_IN_SCOPE) = 0 THEN 100.0 -- Guard against divide by zero errors 	--	ELSE (SUM(NO_EXCEPTIONS_REVIEWED)*100.0/SUM(NO_EXCEPTIONS_IN_SCOPE))  	--END AS REVIEWED_PERCENTAGE, 	EOMONTH(CONVERT(DATE,CONCAT([DATE],'-01'))) AS [Date], 	@REPORT_NAME AS [Report_Name] into #temp_final_table_data FROM #temp_COBS_table_data WHERE COBS_RULE IS NOT NULL   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FI_COBS_EXCEPTIONS_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_FI_COBS_EXCEPTIONS_DATA 	from #temp_final_table_data ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_FI_COBS_EXCEPTIONS_DATA 	SELECT * 	from #temp_final_table_data     END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: DMC_FICM_DEALER_BY_DEALER_ANALYSIS CreateDate: 2019-10-18 08:39:50.377 ModifyDate: 2019-10-18 08:39:50.377 --- DEFINITION START --- -- ============================================= -- Author:		<Ayiba Cesario> -- Create date: <09/08/2018> -- Description:	<Generate DMC reports for FI C&M Dealer by Dealer Analysis. --	This stored procedure takes a start month, end month and report name  --	as input parameters and generates the reports for these months.> -- ============================================= CREATE PROCEDURE [dbo].[DMC_FICM_DEALER_BY_DEALER_ANALYSIS]  	@Start_Month INT, 	@Start_Year INT, 	@End_Month INT, 	@End_Year INT, 	@REPORT_NAME VARCHAR(MAX) AS  BEGIN  DECLARE @Start_Date DATETIME; SET @Start_Date = CONVERT(DATE,CONCAT(@Start_Year,'-',@Start_Month,'-01')); --Turn the input start month parameter into a date (using the first day of the month) DECLARE @End_Date0 DATETIME; DECLARE @End_Date DATETIME; SET @End_Date0 = EOMONTH(CONVERT(DATETIME,CONCAT(@End_Year,'-',@End_Month,'-01')));  --Turn the input end month parameter into a date (using the last day of the month)  SET @End_Date = DATEADD(second,86399,@End_Date0);   --Create table with MAX() TOUCH_COUNT for each TRD ORD_NUM IF OBJECT_ID('tempdb..#max_trd_touch', 'U') IS NOT NULL DROP TABLE #max_trd_touch SELECT 	ORD_NUM, 	MAX(TOUCH_COUNT) AS MAX_TOUCH INTO #max_trd_touch FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM   --Add the metadata to a table so we keep a history of all reports run IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_REPORTS_METADATA', 'U') IS NULL 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		CONVERT(VARCHAR(50),'FICM_Dealer_Dealer_Analysis') AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date] 	INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		'FICM_Dealer_Dealer_Analysis' AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date]   --5.1.8	Report 4: Dealer by Dealer analysis – Requirements IF OBJECT_ID('tempdb..#temp_monthly_orders', 'U') IS NOT NULL DROP TABLE #temp_monthly_orders SELECT DISTINCT 	CONCAT(YEAR(t.TRD_TRADE_DATE), ' - ', MONTH(t.TRD_TRADE_DATE)) AS [DATE],  	COUNT(DISTINCT tr.ORD_NUM) AS Dealer_Orders, 	tr.TRADER_FULL_NAME INTO #temp_monthly_orders FROM (SELECT tr1.ORD_NUM, tr1.TRADER_FULL_NAME, tr1.DEALING_DESK FROM VISTA_REPORTING.dbo.TRD_ORDERS tr1 		INNER JOIN #max_trd_touch mt ON mt.ORD_NUM = tr1.ORD_NUM AND mt.MAX_TOUCH = tr1.TOUCH_COUNT) tr LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM=tr.ORD_NUM WHERE t.TRD_TRADE_DATE IS NOT NULL AND tr.Dealing_Desk = 'Fixed Income' AND tr.TRADER_FULL_NAME IS NOT NULL and t.TRD_TRADE_DATE between @Start_Date and @End_Date GROUP BY 	CONCAT(YEAR(t.TRD_TRADE_DATE), ' - ', MONTH(t.TRD_TRADE_DATE)), 	tr.TRADER_FULL_NAME  IF OBJECT_ID('tempdb..#temp_dealer_by_dealer', 'U') IS NOT NULL DROP TABLE #temp_dealer_by_dealer SELECT DISTINCT 	tmp_a.TRADER_FULL_NAME, 	tmp_a.[DATE] as Trade_Date, 	(tmp_a.Dealer_Orders*100.0)/tmp_b.ORD_NUMs AS 'ORDERS_PERCENT', 	EOMONTH(CONVERT(DATE,CONCAT(tmp_a.[DATE],'-01'))) AS [Date], 	@REPORT_NAME AS [Report_Name] INTO #temp_dealer_by_dealer FROM #temp_monthly_orders tmp_a LEFT JOIN ( 		SELECT  			[Date], 			SUM(Dealer_Orders) AS ORD_NUMs 		FROM #temp_monthly_orders  		GROUP BY 			[Date] 		) tmp_b ON tmp_a.[Date] = tmp_b.[Date]   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_DEALER_BY_DEALER_ANALYSIS_TABLE', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_DEALER_BY_DEALER_ANALYSIS_TABLE 	from #temp_dealer_by_dealer ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_DEALER_BY_DEALER_ANALYSIS_TABLE 	SELECT * 	from #temp_dealer_by_dealer   --5.1.8	Report 4: Dealer by Dealer analysis – Requirements IF OBJECT_ID('tempdb..#temp_monthly_orders_data', 'U') IS NOT NULL DROP TABLE #temp_monthly_orders_data SELECT DISTINCT 	CONCAT(YEAR(t.TRD_TRADE_DATE), ' - ', MONTH(t.TRD_TRADE_DATE)) AS [DATE],  	tr.ORD_NUM, 	tr.TRADER_FULL_NAME INTO #temp_monthly_orders_data FROM (SELECT tr1.ORD_NUM, tr1.TRADER_FULL_NAME, tr1.DEALING_DESK FROM VISTA_REPORTING.dbo.TRD_ORDERS tr1 		INNER JOIN #max_trd_touch mt ON mt.ORD_NUM = tr1.ORD_NUM AND mt.MAX_TOUCH = tr1.TOUCH_COUNT) tr LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM=tr.ORD_NUM WHERE t.TRD_TRADE_DATE IS NOT NULL AND tr.Dealing_Desk = 'Fixed Income' AND tr.TRADER_FULL_NAME IS NOT NULL and t.TRD_TRADE_DATE between @Start_Date and @End_Date  IF OBJECT_ID('tempdb..#temp_dealer_by_dealer_data', 'U') IS NOT NULL DROP TABLE #temp_dealer_by_dealer_data SELECT DISTINCT 	tmp_a.TRADER_FULL_NAME, 	tmp_a.[DATE] as Trade_Date, 	tmp_a.ORD_NUM, 	EOMONTH(CONVERT(DATE,CONCAT(tmp_a.[DATE],'-01'))) AS [Date], 	@REPORT_NAME AS [Report_Name] INTO #temp_dealer_by_dealer_data FROM #temp_monthly_orders_data tmp_a    IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_DEALER_BY_DEALER_ANALYSIS_TABLE_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_DEALER_BY_DEALER_ANALYSIS_TABLE_DATA 	from #temp_dealer_by_dealer_data ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_DEALER_BY_DEALER_ANALYSIS_TABLE_DATA 	SELECT * 	from #temp_dealer_by_dealer_data   END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: DMC_FICM_DEALER_DEALER_BY_ASSET_SUBTYPE CreateDate: 2019-10-18 08:39:50.430 ModifyDate: 2019-10-18 08:39:50.430 --- DEFINITION START --- -- ============================================= -- Author:		<Ayiba Cesario> -- Create date: <09/08/2018> -- Description:	<Generate DMC reports for FI C&M Dealer by Dealer Analysis by Asset Sub-Type. --	This stored procedure takes a start month, end month and report name  --	as input parameters and generates the reports for these months.> -- ============================================= CREATE PROCEDURE [dbo].[DMC_FICM_DEALER_DEALER_BY_ASSET_SUBTYPE]  	@Start_Month INT, 	@Start_Year INT, 	@End_Month INT, 	@End_Year INT, 	@REPORT_NAME VARCHAR(MAX) 	 AS  BEGIN  DECLARE @Start_Date DATETIME; SET @Start_Date = CONVERT(DATE,CONCAT(@Start_Year,'-',@Start_Month,'-01')); --Turn the input start month parameter into a date (using the first day of the month) DECLARE @End_Date0 DATETIME; DECLARE @End_Date DATETIME; SET @End_Date0 = EOMONTH(CONVERT(DATETIME,CONCAT(@End_Year,'-',@End_Month,'-01')));  --Turn the input end month parameter into a date (using the last day of the month)  SET @End_Date = DATEADD(second,86399,@End_Date0);  --Create table with MAX() TOUCH_COUNT for each TRD ORD_NUM IF OBJECT_ID('tempdb..#max_trd_touch', 'U') IS NOT NULL DROP TABLE #max_trd_touch SELECT 	ORD_NUM, 	MAX(TOUCH_COUNT) AS MAX_TOUCH INTO #max_trd_touch FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM   --Add the metadata to a table so we keep a history of all reports run IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_REPORTS_METADATA', 'U') IS NULL 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		CONVERT(VARCHAR(50),'FICM_Dealer_Dealer_Asset_Subtype') AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date] 	INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		'FICM_Dealer_Dealer_Asset_Subtype' AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date]  --5.1.10 Dealer by Dealer Analysis – Asset Sub-Type Breakdown Requirements IF OBJECT_ID('tempdb..#temp_monthly_orders_by_asset', 'U') IS NOT NULL DROP TABLE #temp_monthly_orders_by_asset SELECT DISTINCT 	CONCAT(YEAR(t.TRD_TRADE_DATE), ' - ', MONTH(t.TRD_TRADE_DATE)) AS [DATE],  	tr.TRADER_FULL_NAME, 	COUNT(DISTINCT tr.ORD_NUM) AS TOTAL_MONTH_ORDERS, 	CASE  		WHEN pr.INST_TYPE IN ('GOV','GOVBIL','IGOV','SSA') THEN 'Government Bonds' 		WHEN pr.INST_TYPE IN ('IG CORP','CORP') THEN 'Investment Grade Corporate' 		WHEN pr.INST_TYPE IN ('HY CORP','NR CORP') THEN 'High Yield Corporate' 		WHEN pr.INST_TYPE IN ('EM CORP', 'EM GOV','EM GOVBIL') THEN 'Emerging Markets' 		WHEN pr.INST_TYPE IN ('COV') THEN 'Covered Bonds' 		WHEN pr.INST_TYPE IN ('SCDS','ICDS') THEN 'Credit Default Swap' 		WHEN pr.INST_TYPE IN ('ABS','CMBS','RMBS','MBS','ARM') THEN 'Asset/Mortgage Backed Securities' 		WHEN pr.INST_TYPE IN ('CDO') THEN 'Collateralised Debt Obligation' 		WHEN pr.INST_TYPE IN ('BNDFUT', 'IRFUT','ETD') THEN 'ETD Future' 		WHEN pr.INST_TYPE IN ('IRS','SWAP','ASWP','OPTFUT','BASIS','ZCS','IFS','CCS','CASWP') THEN 'OTC Derivatives' 		WHEN pr.INST_TYPE = 'PFD' THEN 'PFD' 		WHEN pr.INST_TYPE IN ('CMO') THEN 'Collateralised Mortgage Obligations' 		ELSE pr.INST_TYPE 	END AS INST_TYPE INTO #temp_monthly_orders_by_asset FROM (SELECT DISTINCT  tr1.ORD_NUM, tr1.TRADER_FULL_NAME, tr1.DEALING_DESK FROM VISTA_REPORTING.dbo.TRD_ORDERS tr1 		INNER JOIN #max_trd_touch mt ON mt.ORD_NUM = tr1.ORD_NUM AND mt.MAX_TOUCH = tr1.TOUCH_COUNT) tr LEFT JOIN (SELECT DISTINCT ORD_NUM, TRD_TRADE_DATE, MULTI_FUND_ID FROM VISTA_REPORTING.dbo.TRADES) t ON t.ORD_NUM=tr.ORD_NUM LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, INST_TYPE FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr ON pr.MULTI_FUND_ID = t.MULTI_FUND_ID WHERE t.TRD_TRADE_DATE IS NOT NULL AND tr.TRADER_FULL_NAME IS NOT NULL AND tr.Dealing_Desk = 'Fixed Income' 		and t.TRD_TRADE_DATE between @Start_Date and @End_Date GROUP BY 	CONCAT(YEAR(t.TRD_TRADE_DATE), ' - ', MONTH(t.TRD_TRADE_DATE)), 	tr.TRADER_FULL_NAME, 		CASE  		WHEN pr.INST_TYPE IN ('GOV','GOVBIL','IGOV','SSA') THEN 'Government Bonds' 		WHEN pr.INST_TYPE IN ('IG CORP','CORP') THEN 'Investment Grade Corporate' 		WHEN pr.INST_TYPE IN ('HY CORP','NR CORP') THEN 'High Yield Corporate' 		WHEN pr.INST_TYPE IN ('EM CORP', 'EM GOV','EM GOVBIL') THEN 'Emerging Markets' 		WHEN pr.INST_TYPE IN ('COV') THEN 'Covered Bonds' 		WHEN pr.INST_TYPE IN ('SCDS','ICDS') THEN 'Credit Default Swap' 		WHEN pr.INST_TYPE IN ('ABS','CMBS','RMBS','MBS','ARM') THEN 'Asset/Mortgage Backed Securities' 		WHEN pr.INST_TYPE IN ('CDO') THEN 'Collateralised Debt Obligation' 		WHEN pr.INST_TYPE IN ('BNDFUT', 'IRFUT','ETD') THEN 'ETD Future' 		WHEN pr.INST_TYPE IN ('IRS','SWAP','ASWP','OPTFUT','BASIS','ZCS','IFS','CCS','CASWP') THEN 'OTC Derivatives' 		WHEN pr.INST_TYPE = 'PFD' THEN 'PFD' 		WHEN pr.INST_TYPE IN ('CMO') THEN 'Collateralised Mortgage Obligations' 		ELSE pr.INST_TYPE 	END    IF OBJECT_ID('tempdb..#temp_dealer_by_asset', 'U') IS NOT NULL DROP TABLE #temp_dealer_by_asset SELECT  	tma_tr.TRADER_FULL_NAME, 	tma_tr.INST_TYPE, 	tma_tr.[DATE] as Trade_Date, 	(100.0*tma_tr.TOTAL_MONTH_ORDERS)/tma.Total_Orders AS 'ORDERS_PERCENT', 	EOMONTH(CONVERT(DATE,CONCAT(tma_tr.[DATE],'-01'))) AS [Date], 	@REPORT_NAME AS [Report_Name] INTO #temp_dealer_by_asset FROM #temp_monthly_orders_by_asset tma_tr LEFT JOIN ( 		SELECT  			DATE,  			INST_TYPE, 			SUM(TOTAL_MONTH_ORDERS) AS Total_Orders  		FROM #temp_monthly_orders_by_asset 		GROUP BY Date, INST_TYPE 		) tma ON tma.DATE=tma_tr.Date AND tma_tr.INST_TYPE = tma.INST_TYPE  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_DEALER_DEALER_BY_ASSET_SUBTYPE', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_DEALER_DEALER_BY_ASSET_SUBTYPE 	from #temp_dealer_by_asset ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_DEALER_DEALER_BY_ASSET_SUBTYPE 	SELECT * 	from #temp_dealer_by_asset   IF OBJECT_ID('tempdb..#temp_monthly_orders_by_asset_data', 'U') IS NOT NULL DROP TABLE #temp_monthly_orders_by_asset_data SELECT DISTINCT 	CONCAT(YEAR(t.TRD_TRADE_DATE), ' - ', MONTH(t.TRD_TRADE_DATE)) AS [DATE],  	tr.TRADER_FULL_NAME, 	tr.ORD_NUM, 	CASE  		WHEN pr.INST_TYPE IN ('GOV','GOVBIL','IGOV','SSA') THEN 'Government Bonds' 		WHEN pr.INST_TYPE IN ('IG CORP','CORP') THEN 'Investment Grade Corporate' 		WHEN pr.INST_TYPE IN ('HY CORP','NR CORP') THEN 'High Yield Corporate' 		WHEN pr.INST_TYPE IN ('EM CORP', 'EM GOV','EM GOVBIL') THEN 'Emerging Markets' 		WHEN pr.INST_TYPE IN ('COV') THEN 'Covered Bonds' 		WHEN pr.INST_TYPE IN ('SCDS','ICDS') THEN 'Credit Default Swap' 		WHEN pr.INST_TYPE IN ('ABS','CMBS','RMBS','MBS','ARM') THEN 'Asset/Mortgage Backed Securities' 		WHEN pr.INST_TYPE IN ('CDO') THEN 'Collateralised Debt Obligation' 		WHEN pr.INST_TYPE IN ('BNDFUT', 'IRFUT','ETD') THEN 'ETD Future' 		WHEN pr.INST_TYPE IN ('IRS','SWAP','ASWP','OPTFUT','BASIS','ZCS','IFS','CCS','CASWP') THEN 'OTC Derivatives' 		WHEN pr.INST_TYPE = 'PFD' THEN 'PFD' 		WHEN pr.INST_TYPE IN ('CMO') THEN 'Collateralised Mortgage Obligations' 		ELSE pr.INST_TYPE 	END AS INST_TYPE INTO #temp_monthly_orders_by_asset_data FROM (SELECT DISTINCT  tr1.ORD_NUM, tr1.TRADER_FULL_NAME, tr1.DEALING_DESK FROM VISTA_REPORTING.dbo.TRD_ORDERS tr1 			INNER JOIN #max_trd_touch mt ON mt.ORD_NUM = tr1.ORD_NUM AND mt.MAX_TOUCH = tr1.TOUCH_COUNT) tr LEFT JOIN (SELECT DISTINCT ORD_NUM, TRD_TRADE_DATE, MULTI_FUND_ID FROM VISTA_REPORTING.dbo.TRADES) t ON t.ORD_NUM=tr.ORD_NUM LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, INST_TYPE FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr ON pr.MULTI_FUND_ID = t.MULTI_FUND_ID WHERE t.TRD_TRADE_DATE IS NOT NULL AND tr.TRADER_FULL_NAME IS NOT NULL AND tr.Dealing_Desk = 'Fixed Income' 		and t.TRD_TRADE_DATE between @Start_Date and @End_Date  IF OBJECT_ID('tempdb..#temp_dealer_by_asset_data', 'U') IS NOT NULL DROP TABLE #temp_dealer_by_asset_data SELECT  	tma_tr.TRADER_FULL_NAME, 	tma_tr.INST_TYPE, 	tma_tr.[DATE] as Trade_Date, 	tma_tr.ORD_NUM, 	EOMONTH(CONVERT(DATE,CONCAT(tma_tr.[DATE],'-01'))) AS [Date], 	@REPORT_NAME AS [Report_Name] INTO #temp_dealer_by_asset_data FROM #temp_monthly_orders_by_asset_data tma_tr  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_DEALER_DEALER_BY_ASSET_SUBTYPE_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_DEALER_DEALER_BY_ASSET_SUBTYPE_DATA 	from #temp_dealer_by_asset_data ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_DEALER_DEALER_BY_ASSET_SUBTYPE_DATA 	SELECT * 	from #temp_dealer_by_asset_data   END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: DMC_FICM_PDP_EXCEPTIONS CreateDate: 2019-10-18 08:39:50.493 ModifyDate: 2019-10-18 08:39:50.493 --- DEFINITION START --- -- ============================================= -- Author:		<Ayiba Cesario> -- Create date: <09/08/2018> -- Description:	<Generate DMC reports for FI C&M Price Discovery Policy Exceptions. --	This stored procedure takes a start month, end month and report name  --	as input parameters and generates the reports for these months.> -- ============================================= --=========================== --2018-09-25 WH - changed the statuses in the #max_reason table as we have moved to using 'Status From' and not 'Status To' --===========================  CREATE PROCEDURE [dbo].[DMC_FICM_PDP_EXCEPTIONS]  	@Start_Month INT, 	@Start_Year INT, 	@End_Month INT, 	@End_Year INT, 	@REPORT_NAME VARCHAR(MAX) AS  BEGIN  DECLARE @Start_Date DATETIME; SET @Start_Date = CONVERT(DATE,CONCAT(@Start_Year,'-',@Start_Month,'-01')); --Turn the input start month parameter into a date (using the first day of the month) DECLARE @End_Date0 DATETIME; DECLARE @End_Date DATETIME; SET @End_Date0 = EOMONTH(CONVERT(DATETIME,CONCAT(@End_Year,'-',@End_Month,'-01')));  --Turn the input end month parameter into a date (using the last day of the month)  SET @End_Date = DATEADD(second,86399,@End_Date0);  --Add the metadata to a table so we keep a history of all reports run IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_REPORTS_METADATA', 'U') IS NULL 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		CONVERT(VARCHAR(50),'FICM_PDP_Exceptions') AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date] 	INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		'FICM_PDP_Exceptions' AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date]  -- 5.1.3	Report 2: Best Execution: Price Discovery Policy (PDP) Exceptions (all instruments)   -----Use the latest REASON to determine if an exception is a false positive IF OBJECT_ID('tempdb..#Max_Reason', 'U') IS  NOT NULL DROP TABLE #Max_Reason select distinct  	e.ID,  	e.REASON , 	e.STATUS into #Max_Reason from VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE e inner join ( 	select  		ID, 		MAX(touch_count) as [Max_touch]  		from VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE 		where status in ('For Review','With Dealer','With Reviewer','C&A Review Request') 		--the above condition around status ensures that we only consider exceptions coming from the Dealing Desk 		--only dealing desk has the ability to flag false positive exceptions 	group by ID ) a  on a.ID = e.ID and a.Max_touch = e.TOUCH_COUNT  IF OBJECT_ID('tempdb..#temp_pdp_table', 'U') IS  NOT NULL DROP TABLE #temp_pdp_table  SELECT *  INTO #temp_pdp_table FROM ( 	SELECT 		'Total  Number of Trade Executions' AS EXCEPTION_NAME, 		CONCAT(YEAR(t.TRD_TRADE_DATE), ' - ', MONTH(t.TRD_TRADE_DATE)) AS [EXCEPTION_DATE], 		EOMONTH(t.TRD_TRADE_DATE) as [Date1], 		COUNT(DISTINCT t.MULTI_FUND_ID) AS [EXCEPTION_SUM] 	FROM VISTA_REPORTING.dbo.TRADES t 	LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS tr ON tr.ORD_NUM=t.ORD_NUM 	WHERE tr.DEALING_DESK = 'Fixed Income' --and TRD_TRADE_DATE between @Start_Date and @End_Date 	GROUP BY 		CONCAT(YEAR(t.TRD_TRADE_DATE), ' - ', MONTH(t.TRD_TRADE_DATE)), 		EOMONTH(t.TRD_TRADE_DATE)  	UNION  	SELECT 		'Trades with fewer than 3 quotes obtained' AS EXCEPTION_NAME, 		--Thanos: Changed below from trd_trade date to Createtime 		CONCAT(YEAR(qe.[3QO_CREATETIME]), ' - ', MONTH(qe.[3QO_CREATETIME])) AS [EXCEPTION_DATE], 		EOMONTH(qe.[3QO_CREATETIME]) as [Date1], 		--SUM([3QO_EXCEPTION]) AS [EXCEPTION_SUM] 		COUNT(DISTINCT qe.MULTI_FUND_ID) AS [EXCEPTION_SUM] 	FROM VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI_TABLE qe 	WHERE qe.[3QO_EXCEPTION] = 1 and qe.[3QO_CREATETIME] between @Start_Date and @End_Date 	GROUP BY 		CONCAT(YEAR(qe.[3QO_CREATETIME]), ' - ', MONTH(qe.[3QO_CREATETIME])), 		EOMONTH(qe.[3QO_CREATETIME])  	UNION  	SELECT 		'Trades with fewer than 3 approaches' AS EXCEPTION_NAME, 		--Thanos: Changed below from trd_trade date to Createtime 		CONCAT(YEAR(qe.[3QR_CREATETIME]), ' - ', MONTH(qe.[3QR_CREATETIME])) AS [EXCEPTION_DATE], 		EOMONTH(qe.[3QR_CREATETIME]) as [Date1], 		--SUM([3QO_EXCEPTION]) AS [EXCEPTION_SUM] 		COUNT(DISTINCT qe.MULTI_FUND_ID) AS [EXCEPTION_SUM] 	FROM VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI_TABLE qe 	WHERE [3QR_EXCEPTION] = 1 and qe.[3QR_CREATETIME] between @Start_Date and @End_Date 	GROUP BY 		CONCAT(YEAR(qe.[3QR_CREATETIME]), ' - ', MONTH(qe.[3QR_CREATETIME])), 		EOMONTH(qe.[3QR_CREATETIME])   	UNION  	SELECT 		'PDP quote exceptions' AS EXCEPTION_NAME, 		--Thanos: Changed below from trd_trade date to Createtime 		CONCAT(YEAR(qe.CREATETIME), ' - ', MONTH(qe.CREATETIME)) AS [EXCEPTION_DATE], 		EOMONTH(qe.CREATETIME) as [Date1], 		COUNT(DISTINCT qe.MULTI_FUND_ID) AS [EXCEPTION_SUM] 	FROM VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI_TABLE qe 	LEFT JOIN #Max_Reason rsn ON qe.MULTI_FUND_ID + '_1' = rsn.ID 	WHERE QUOTE_EXCEPTION = 1 	AND ISNULL(rsn.Reason,'') <> 'False Positive' 	and qe.CREATETIME between @Start_Date and @End_Date 	GROUP BY 		CONCAT(YEAR(qe.CREATETIME), ' - ', MONTH(qe.CREATETIME)), 		EOMONTH(qe.CREATETIME)    	UNION   	SELECT 		'PDP quote exceptions with fewer than 3 approaches' AS EXCEPTION_NAME, 		--Thanos: Changed below from trd_trade date to Createtime 		CONCAT(YEAR(qe.CREATETIME), ' - ', MONTH(qe.CREATETIME)) AS [EXCEPTION_DATE], 		EOMONTH(qe.CREATETIME) as [Date1], 		--SUM([3QO_EXCEPTION]) AS [EXCEPTION_SUM] 		COUNT(DISTINCT qe.MULTI_FUND_ID) AS [EXCEPTION_SUM] 	FROM VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI_TABLE qe 	LEFT JOIN #Max_Reason rsn ON qe.MULTI_FUND_ID + '_1' = rsn.ID 	WHERE QUOTE_EXCEPTION = 1 AND [3QR_EXCEPTION] = 1 	AND ISNULL(rsn.Reason,'') <> 'False Positive' 	and qe.CREATETIME between @Start_Date and @End_Date 	GROUP BY 		CONCAT(YEAR(qe.CREATETIME), ' - ', MONTH(qe.CREATETIME)), 		EOMONTH(qe.CREATETIME) ) tmp  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FI_PDP_EXCEPTIONS', 'U') IS NULL 	SELECT EXCEPTION_NAME, 	EXCEPTION_DATE, 	EXCEPTION_SUM, 	EOMONTH([Date1]) AS [Date], 	@REPORT_NAME AS [Report_Name] 	INTO VISTA_REPORTING.dbo.DMC_FI_PDP_EXCEPTIONS 	from #temp_pdp_table ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_FI_PDP_EXCEPTIONS 	SELECT EXCEPTION_NAME, 	EXCEPTION_DATE, 	EXCEPTION_SUM, 	EOMONTH([Date1]) AS [Date], 	@REPORT_NAME AS [Report_Name] 	from #temp_pdp_table   IF OBJECT_ID('tempdb..#temp_pdp_table_data', 'U') IS  NOT NULL DROP TABLE #temp_pdp_table_data  SELECT *  INTO #temp_pdp_table_data FROM ( 	SELECT 		'Total  Number of Trade Executions' AS EXCEPTION_NAME, 		CONCAT(YEAR(t.TRD_TRADE_DATE), ' - ', MONTH(t.TRD_TRADE_DATE)) AS [EXCEPTION_DATE], 		EOMONTH(t.TRD_TRADE_DATE) as [Date1], 		t.MULTI_FUND_ID 	FROM VISTA_REPORTING.dbo.TRADES t 	LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS tr ON tr.ORD_NUM=t.ORD_NUM 	WHERE tr.DEALING_DESK = 'Fixed Income' --and TRD_TRADE_DATE between @Start_Date and @End_Date  	UNION  	SELECT 		'Trades with fewer than 3 quotes obtained' AS EXCEPTION_NAME, 		--Thanos: Changed below from trd_trade date to Createtime 		CONCAT(YEAR(qe.[3QO_CREATETIME]), ' - ', MONTH(qe.[3QO_CREATETIME])) AS [EXCEPTION_DATE], 		EOMONTH(qe.[3QO_CREATETIME]) as [Date1], 		--SUM([3QO_EXCEPTION]) AS [EXCEPTION_SUM] 		qe.MULTI_FUND_ID 	FROM VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI_TABLE qe 	WHERE qe.[3QO_EXCEPTION] = 1 and qe.[3QO_CREATETIME] between @Start_Date and @End_Date   	UNION  	SELECT 		'Trades with fewer than 3 approaches' AS EXCEPTION_NAME, 		--Thanos: Changed below from trd_trade date to Createtime 		CONCAT(YEAR(qe.[3QR_CREATETIME]), ' - ', MONTH(qe.[3QR_CREATETIME])) AS [EXCEPTION_DATE], 		EOMONTH(qe.[3QR_CREATETIME]) as [Date1], 		--SUM([3QO_EXCEPTION]) AS [EXCEPTION_SUM] 		qe.MULTI_FUND_ID 	FROM VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI_TABLE qe 	WHERE [3QR_EXCEPTION] = 1 and qe.[3QR_CREATETIME] between @Start_Date and @End_Date   	UNION  	SELECT 		'PDP quote exceptions' AS EXCEPTION_NAME, 		--Thanos: Changed below from trd_trade date to Createtime 		CONCAT(YEAR(qe.CREATETIME), ' - ', MONTH(qe.CREATETIME)) AS [EXCEPTION_DATE], 		EOMONTH(qe.CREATETIME) as [Date1], 		qe.MULTI_FUND_ID 	FROM VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI_TABLE qe 	LEFT JOIN #Max_Reason rsn ON qe.MULTI_FUND_ID + '_1' = rsn.ID 	WHERE QUOTE_EXCEPTION = 1 	AND ISNULL(rsn.Reason,'') <> 'False Positive' 	and qe.CREATETIME between @Start_Date and @End_Date  	UNION   	SELECT 		'PDP quote exceptions with fewer than 3 approaches' AS EXCEPTION_NAME, 		--Thanos: Changed below from trd_trade date to Createtime 		CONCAT(YEAR(qe.CREATETIME), ' - ', MONTH(qe.CREATETIME)) AS [EXCEPTION_DATE], 		EOMONTH(qe.CREATETIME) as [Date1], 		--SUM([3QO_EXCEPTION]) AS [EXCEPTION_SUM] 		qe.MULTI_FUND_ID 	FROM VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI_TABLE qe 	LEFT JOIN #Max_Reason rsn ON qe.MULTI_FUND_ID + '_1' = rsn.ID 	WHERE QUOTE_EXCEPTION = 1 AND [3QR_EXCEPTION] = 1 	AND ISNULL(rsn.Reason,'') <> 'False Positive' 	and qe.CREATETIME between @Start_Date and @End_Date  ) tmp  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FI_PDP_EXCEPTIONS_DATA', 'U') IS NULL 	SELECT EXCEPTION_NAME, 	EXCEPTION_DATE, 	MULTI_FUND_ID, 	EOMONTH([Date1]) AS [Date], 	@REPORT_NAME AS [Report_Name] 	INTO VISTA_REPORTING.dbo.DMC_FI_PDP_EXCEPTIONS_DATA 	from #temp_pdp_table_data ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_FI_PDP_EXCEPTIONS_DATA 	SELECT EXCEPTION_NAME, 	EXCEPTION_DATE, 	MULTI_FUND_ID, 	EOMONTH([Date1]) AS [Date], 	@REPORT_NAME AS [Report_Name] 	from #temp_pdp_table_data  END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: DMC_FIDD_6_MONTH_AMENDS CreateDate: 2019-10-18 08:39:50.533 ModifyDate: 2019-10-18 08:39:50.533 --- DEFINITION START --- -- ============================================= -- Author:		<Ayiba Cesario> -- Create date: <09/08/2017> -- Description:	<Generate DMC reports for FI Dealer Amendments 6 Month Analysis. --	This stored procedure takes a start month, end month and report name  --	as input parameters and generates the reports for these months.> -- =============================================  --=========================== --2018-09-25 WH - changed the statuses in the #max_reason table as we have moved to using 'Status From' and not 'Status To' --=========================== CREATE PROCEDURE [dbo].[DMC_FIDD_6_MONTH_AMENDS] 	@Start_Month INT, 	@Start_Year INT, 	@End_Month INT, 	@End_Year INT, 	@REPORT_NAME VARCHAR(MAX) AS  BEGIN  DECLARE @Start_Date DATETIME; SET @Start_Date = CONVERT(DATE,CONCAT(@Start_Year,'-',@Start_Month,'-01')); --Turn the input start month parameter into a date (using the first day of the month) DECLARE @End_Date0 DATETIME; DECLARE @End_Date DATETIME; SET @End_Date0 = EOMONTH(CONVERT(DATETIME,CONCAT(@End_Year,'-',@End_Month,'-01')));  --Turn the input end month parameter into a date (using the last day of the month)  SET @End_Date = DATEADD(second,86399,@End_Date0);  --Add the metadata to a table so we keep a history of all reports run IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_REPORTS_METADATA', 'U') IS NULL 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		CONVERT(VARCHAR(50),'FIDD_6_Month_Amends') AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date] 	INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		'FIDD_6_Month_Amends' AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date]  -----Use the latest REASON to determine if an exception is a false positive select distinct  	e.ID,  	e.REASON , 	e.STATUS into #Max_Reason from VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE e inner join ( 	select  		ID, 		MAX(touch_count) as [Max_touch]  		from VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE 		where status in ('For Review','With Dealer','With Reviewer','C&A Review Request') 		--the above condition around status ensures that we only consider exceptions coming from the Dealing Desk 		--only dealing desk has the ability to flag false positive exceptions 	group by ID ) a  on a.ID = e.ID and a.Max_touch = e.TOUCH_COUNT  -- Report 4: Dealer Amends 6 Month Analysis IF OBJECT_ID('tempdb..#temp_mth_tot_amend2', 'U') IS NOT NULL DROP TABLE #temp_mth_tot_amend2 SELECT DISTINCT 	t.MULTI_FUND_ID, 	--t.TOUCH_COUNT, 	pr.DEBT_DERIV, 	--pr.INST_TYPE, 	t.TRD_AMEND_TYPE, 	--t.TRD_TRADE_DATE, Thanos: No need to look at trd_trade_date anymore 	a.AMENDMENT_FLAG_CREATETIME, 	--Thanos: Changed the below from trd_trade_date to AMENDMENT_FLAG_CREATETIME 	concat(datepart(month, 	a.AMENDMENT_FLAG_CREATETIME) , ' ', datepart(year, 	a.AMENDMENT_FLAG_CREATETIME) ) as month_year, 	MIN(a.AMENDMENT_FLAG_CREATETIME) AS MIN_TRADE, 	MAX(a.AMENDMENT_FLAG_CREATETIME) AS MAX_TRADE, 	a.amendment_flag, 	CASE  		WHEN dd.MG_USER_ID IS NULL THEN t.TRD_TRADER 		ELSE dd.MG_USER_ID 	END AS DEALER 	--t.TRD_MODIFIED_BY 	--tr.ORDER_REASON_DECODE INTO #temp_mth_tot_amend2 FROM VISTA_REPORTING.dbo.TRADES t LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID = t.MULTI_FUND_ID LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS tr ON tr.ORD_NUM = t.ORD_NUM LEFT JOIN VISTA_REPORTING.dbo.DEALER_AND_DESK dd ON dd.INITIALS = t.TRD_TRADER left join VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_FI_TABLE a on a.multi_fund_id = t.MULTI_FUND_ID and a.touch_count = t.TOUCH_COUNT --Thanos: Adding max reason so that we can remove False Positives in the where condition below left join #max_reason e on concat(t.multi_fund_id,'_15',t.touch_count) = e.ID  WHERE ((CHARINDEX('Brkr -', t.TRD_AMEND_TYPE) > 0)  			OR (CHARINDEX('Dlr -', t.TRD_AMEND_TYPE) > 0)  			OR (CHARINDEX('Syst -', t.TRD_AMEND_TYPE) > 0)  			OR (CHARINDEX('Other', t.TRD_AMEND_TYPE) > 0)  			OR t.TRD_AMEND_TYPE = 'Order Change'  			OR t.TRD_AMEND_TYPE IS NULL)  		AND a.amendment_flag > 0 		AND ISNULL(pr.DEBT_DERIV,'') in ('DEBT', 'DERIV') 		--Thanos: Added condition for False Positives 		AND ISNULL(E.REASON,'') not in ('False Positive') 		--Thanos: Changed the below from trd_trade_date to AMENDMENT_FLAG_CREATETIME 		and a.AMENDMENT_FLAG_CREATETIME between @Start_Date and @End_Date GROUP BY 	t.MULTI_FUND_ID, 	--t.TOUCH_COUNT, 	pr.DEBT_DERIV, 	--pr.INST_TYPE, 	t.TRD_AMEND_TYPE, 	--t.TRD_TRADE_DATE, 	a.AMENDMENT_FLAG_CREATETIME, 	a.amendment_flag, 	dd.MG_USER_ID, 	t.TRD_TRADER 	 IF OBJECT_ID('tempdb..#temp_6month_amends', 'U') IS NOT NULL DROP TABLE #temp_6month_amends SELECT DISTINCT 	DEBT_DERIV AS [SYSTEM], 	--INST_TYPE AS [ASSET_TYPE], 	TRD_AMEND_TYPE, 	DEALER, 	month_year, 	CASE             		 WHEN (CHARINDEX('Dlr -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DEBT' THEN 'Dealer Error' 		 WHEN (CHARINDEX('Brkr -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DEBT' THEN 'Broker Error' 		 WHEN (CHARINDEX('Syst -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DEBT' THEN 'System/Data Error' 		 WHEN TRD_AMEND_TYPE IS NULL AND DEBT_DERIV = 'DERIV' THEN 'Not Classified' 		 WHEN (CHARINDEX('Other', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DERIV' THEN 'Other' 		 WHEN (CHARINDEX('Dlr -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DERIV' THEN 'Dealer Error' 		 WHEN (CHARINDEX('Syst -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DERIV' THEN 'System/Data Error' 		 WHEN TRD_AMEND_TYPE = 'Order Change' AND DEBT_DERIV = 'DERIV' THEN 'Fund Manager' 	END AS [CATEGORY_GROUP], 	(SUM(Amendment_Flag)) AS [AMEND_CANC_COUNT], 	--Thanos: Changed the below from trd_trade_date to AMENDMENT_FLAG_CREATETIME 	EOMONTH(AMENDMENT_FLAG_CREATETIME) AS [Date], 	@REPORT_NAME AS [Report_Name] into #temp_6month_amends FROM #temp_mth_tot_amend2 mta1 WHERE AMENDMENT_FLAG_CREATETIME BETWEEN MIN_TRADE AND MAX_TRADE GROUP BY  	DEBT_DERIV, 	--INST_TYPE, 	TRD_AMEND_TYPE, 	DEALER, 	month_year, 	EOMONTH(AMENDMENT_FLAG_CREATETIME)  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_6_MONTH_AMENDS_TABLE', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_6_MONTH_AMENDS_TABLE 	from #temp_6month_amends ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_6_MONTH_AMENDS_TABLE 	SELECT * 	from #temp_6month_amends   IF OBJECT_ID('tempdb..#temp_6month_amends_data', 'U') IS NOT NULL DROP TABLE #temp_6month_amends_data SELECT DISTINCT 	DEBT_DERIV AS [SYSTEM], 	--INST_TYPE AS [ASSET_TYPE], 	TRD_AMEND_TYPE, 	DEALER, 	month_year, 	CASE             		 WHEN (CHARINDEX('Dlr -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DEBT' THEN 'Dealer Error' 		 WHEN (CHARINDEX('Brkr -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DEBT' THEN 'Broker Error' 		 WHEN (CHARINDEX('Syst -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DEBT' THEN 'System/Data Error' 		 WHEN TRD_AMEND_TYPE IS NULL AND DEBT_DERIV = 'DERIV' THEN 'Not Classified' 		 WHEN (CHARINDEX('Other', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DERIV' THEN 'Other' 		 WHEN (CHARINDEX('Dlr -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DERIV' THEN 'Dealer Error' 		 WHEN (CHARINDEX('Syst -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DERIV' THEN 'System/Data Error' 		 WHEN TRD_AMEND_TYPE = 'Order Change' AND DEBT_DERIV = 'DERIV' THEN 'Fund Manager' 	END AS [CATEGORY_GROUP], 	MULTI_FUND_ID, 	--Thanos: Changed the below from trd_trade_date to AMENDMENT_FLAG_CREATETIME 	EOMONTH(AMENDMENT_FLAG_CREATETIME) AS [Date], 	@REPORT_NAME AS [Report_Name] into #temp_6month_amends_data FROM #temp_mth_tot_amend2 mta1 WHERE AMENDMENT_FLAG_CREATETIME BETWEEN MIN_TRADE AND MAX_TRADE  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_6_MONTH_AMENDS_TABLE_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_6_MONTH_AMENDS_TABLE_DATA 	from #temp_6month_amends_data ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_6_MONTH_AMENDS_TABLE_DATA 	SELECT * 	from #temp_6month_amends_data  END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: DMC_FIDD_AMENDMENTS_BY_AMEND_GROUP CreateDate: 2019-10-18 08:39:50.570 ModifyDate: 2019-10-18 08:39:50.570 --- DEFINITION START --- -- ============================================= -- Author:		<Ayiba Cesario> -- Create date: <09/08/2018> -- Description:	<Generate DMC reports for FI Amendments by Amend Group. --	This stored procedure takes a start month, end month and report name  --	as input parameters and generates the reports for these months.> -- =============================================  --=========================== --2018-09-25 WH - changed the statuses in the #max_reason table as we have moved to using 'Status From' and not 'Status To' --=========================== CREATE PROCEDURE [dbo].[DMC_FIDD_AMENDMENTS_BY_AMEND_GROUP]  	@Start_Month INT, 	@Start_Year INT, 	@End_Month INT, 	@End_Year INT, 	@REPORT_NAME VARCHAR(MAX) AS  BEGIN  DECLARE @Start_Date DATETIME; SET @Start_Date = CONVERT(DATE,CONCAT(@Start_Year,'-',@Start_Month,'-01')); --Turn the input start month parameter into a date (using the first day of the month) DECLARE @End_Date0 DATETIME; DECLARE @End_Date DATETIME; SET @End_Date0 = EOMONTH(CONVERT(DATETIME,CONCAT(@End_Year,'-',@End_Month,'-01')));  --Turn the input end month parameter into a date (using the last day of the month)  SET @End_Date = DATEADD(second,86399,@End_Date0);  --Add the metadata to a table so we keep a history of all reports run IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_REPORTS_METADATA', 'U') IS NULL 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		CONVERT(VARCHAR(50),'FIDD_Amendments_By_Group') AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date] 	INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		'FIDD_Amendments_By_Group' AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date]   -----Use the latest REASON to determine if an exception is a false positive select distinct  	e.ID,  	e.REASON , 	e.STATUS into #Max_Reason from VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE e inner join ( 	select  		ID, 		MAX(touch_count) as [Max_touch]  		from VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE 		where status in ('For Review','With Dealer','With Reviewer','C&A Review Request') 		--the above condition around status ensures that we only consider exceptions coming from the Dealing Desk 		--only dealing desk has the ability to flag false positive exceptions 	group by ID ) a  on a.ID = e.ID and a.Max_touch = e.TOUCH_COUNT  -- Report 2: Amendments by Amend Group IF OBJECT_ID('tempdb..#temp_mth_tot_amend', 'U') IS NOT NULL DROP TABLE #temp_mth_tot_amend SELECT DISTINCT 	t.MULTI_FUND_ID, 	--t.TOUCH_COUNT, 	pr.DEBT_DERIV, 	--pr.INST_TYPE, 	t.TRD_AMEND_TYPE, 	--t.TRD_TRADE_DATE,  Thanos: No need to look at trd_trade_date anymore 	a.AMENDMENT_FLAG_CREATETIME, 	a.AMENDMENT_FLAG INTO #temp_mth_tot_amend FROM VISTA_REPORTING.dbo.TRADES t LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID = t.MULTI_FUND_ID left join VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_FI_TABLE a on a.MULTI_FUND_ID = t.MULTI_FUND_ID and a.TOUCH_COUNT = t.TOUCH_COUNT --Thanos: Adding max reason so that we can remove False Positives in the where condition below left join #max_reason e on concat(t.multi_fund_id,'_15',t.touch_count) = e.ID   WHERE ((CHARINDEX('Brkr -', t.TRD_AMEND_TYPE) > 0)  			OR (CHARINDEX('Dlr -', t.TRD_AMEND_TYPE) > 0)  			OR (CHARINDEX('Syst -', t.TRD_AMEND_TYPE) > 0)  			OR (CHARINDEX('Other', t.TRD_AMEND_TYPE) > 0)  			OR t.TRD_AMEND_TYPE = 'Order Change'  			OR t.TRD_AMEND_TYPE IS NULL)  		AND a.AMENDMENT_FLAG > 0 		AND ISNULL(pr.DEBT_DERIV,'') in ('DEBT', 'DERIV') 		--Thanos: Added condition for False Positives 		AND ISNULL(E.REASON,'') not in ('False Positive') 		AND pr.DEALING_DESK = 'Fixed Income' 		--Thanos: Changed the below from trd_trade_date to AMENDMENT_FLAG_CREATETIME 		and a.AMENDMENT_FLAG_CREATETIME between @Start_Date and @End_Date  IF OBJECT_ID('tempdb..#temp_amends_by_group', 'U') IS NOT NULL DROP TABLE #temp_amends_by_group SELECT DISTINCT 	DEBT_DERIV AS [SYSTEM], 	--INST_TYPE AS [ASSET_TYPE], 	--TRD_AMEND_TYPE, 	CASE             		 WHEN (CHARINDEX('Dlr -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DEBT' THEN 'Dealer Error' 		 WHEN (CHARINDEX('Brkr -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DEBT' THEN 'Broker Error' 		 WHEN (CHARINDEX('Syst -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DEBT' THEN 'System/Data Error' 		 WHEN TRD_AMEND_TYPE IS NULL AND DEBT_DERIV = 'DERIV' THEN 'Not Classified' 		 WHEN (CHARINDEX('Other', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DERIV' THEN 'Other' 		 WHEN (CHARINDEX('Dlr -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DERIV' THEN 'Dealer Error' 		 WHEN (CHARINDEX('Syst -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DERIV' THEN 'System/Data Error' 		 WHEN TRD_AMEND_TYPE = 'Order Change' AND DEBT_DERIV = 'DERIV' THEN 'Fund Manager' 	END AS [CATEGORY_GROUP],  	--Thanos: Changed the below from trd_trade_date to AMENDMENT_FLAG_CREATETIME 	CONCAT(YEAR(AMENDMENT_FLAG_CREATETIME), ' - ', MONTH(AMENDMENT_FLAG_CREATETIME)) AS [TRADE_DATE], 	(SUM(amendment_flag)) AS [AMEND_CANC_COUNT],  	--Thanos: Changed the below from trd_trade_date to AMENDMENT_FLAG_CREATETIME 	EOMONTH(AMENDMENT_FLAG_CREATETIME) AS [Date], 	@REPORT_NAME AS [Report_Name] into #temp_amends_by_group FROM #temp_mth_tot_amend mta1 GROUP BY  	DEBT_DERIV, 	--INST_TYPE, 	--TRD_AMEND_TYPE, 	CASE             		 WHEN (CHARINDEX('Dlr -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DEBT' THEN 'Dealer Error' 		 WHEN (CHARINDEX('Brkr -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DEBT' THEN 'Broker Error' 		 WHEN (CHARINDEX('Syst -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DEBT' THEN 'System/Data Error' 		 WHEN TRD_AMEND_TYPE IS NULL AND DEBT_DERIV = 'DERIV' THEN 'Not Classified' 		 WHEN (CHARINDEX('Other', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DERIV' THEN 'Other' 		 WHEN (CHARINDEX('Dlr -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DERIV' THEN 'Dealer Error' 		 WHEN (CHARINDEX('Syst -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DERIV' THEN 'System/Data Error' 		 WHEN TRD_AMEND_TYPE = 'Order Change' AND DEBT_DERIV = 'DERIV' THEN 'Fund Manager' 	END, 	--Thanos: Changed the below from trd_trade_date to AMENDMENT_FLAG_CREATETIME 	CONCAT(YEAR(AMENDMENT_FLAG_CREATETIME), ' - ', MONTH(AMENDMENT_FLAG_CREATETIME)), 	EOMONTH(AMENDMENT_FLAG_CREATETIME)  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_DEALER_AMENDS_BY_GROUP', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_DEALER_AMENDS_BY_GROUP 	from #temp_amends_by_group ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_DEALER_AMENDS_BY_GROUP 	SELECT * 	from #temp_amends_by_group   IF OBJECT_ID('tempdb..#temp_amends_by_group_DATA', 'U') IS NOT NULL DROP TABLE #temp_amends_by_group_DATA SELECT DISTINCT 	DEBT_DERIV AS [SYSTEM], 	--INST_TYPE AS [ASSET_TYPE], 	--TRD_AMEND_TYPE, 	CASE             		 WHEN (CHARINDEX('Dlr -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DEBT' THEN 'Dealer Error' 		 WHEN (CHARINDEX('Brkr -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DEBT' THEN 'Broker Error' 		 WHEN (CHARINDEX('Syst -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DEBT' THEN 'System/Data Error' 		 WHEN TRD_AMEND_TYPE IS NULL AND DEBT_DERIV = 'DERIV' THEN 'Not Classified' 		 WHEN (CHARINDEX('Other', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DERIV' THEN 'Other' 		 WHEN (CHARINDEX('Dlr -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DERIV' THEN 'Dealer Error' 		 WHEN (CHARINDEX('Syst -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DERIV' THEN 'System/Data Error' 		 WHEN TRD_AMEND_TYPE = 'Order Change' AND DEBT_DERIV = 'DERIV' THEN 'Fund Manager' 	END AS [CATEGORY_GROUP],  	--Thanos: Changed the below from trd_trade_date to AMENDMENT_FLAG_CREATETIME 	CONCAT(YEAR(AMENDMENT_FLAG_CREATETIME), ' - ', MONTH(AMENDMENT_FLAG_CREATETIME)) AS [TRADE_DATE], 	MULTI_FUND_ID,  	--Thanos: Changed the below from trd_trade_date to AMENDMENT_FLAG_CREATETIME 	EOMONTH(AMENDMENT_FLAG_CREATETIME) AS [Date], 	@REPORT_NAME AS [Report_Name] into #temp_amends_by_group_DATA FROM #temp_mth_tot_amend mta1   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_DEALER_AMENDS_BY_GROUP_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_DEALER_AMENDS_BY_GROUP_DATA 	from #temp_amends_by_group_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_DEALER_AMENDS_BY_GROUP_DATA 	SELECT * 	from #temp_amends_by_group_DATA   END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: DMC_FIDD_DEALER_AMENDS_UDF CreateDate: 2019-10-18 08:39:50.617 ModifyDate: 2020-07-17 16:46:16.660 --- DEFINITION START --- -- ============================================= -- Author:		<Ayiba Cesario> -- Create date: <09/08/2018> -- Description:	<Generate DMC reports for FI Dealer Amends Breakdown by UDF. --	This stored procedure takes a start month, end month and report name  --	as input parameters and generates the reports for these months.> -- ============================================= --=========================== --2018-09-25 WH - changed the statuses in the #max_reason table as we have moved to using 'Status From' and not 'Status To' --===========================  CREATE PROCEDURE [dbo].[DMC_FIDD_DEALER_AMENDS_UDF] 	@Start_Month INT, 	@Start_Year INT, 	@End_Month INT, 	@End_Year INT, 	@REPORT_NAME VARCHAR(MAX) AS  BEGIN  DECLARE @Start_Date DATETIME; SET @Start_Date = CONVERT(DATE,CONCAT(@Start_Year,'-',@Start_Month,'-01')); --Turn the input start month parameter into a date (using the first day of the month) DECLARE @End_Date0 DATETIME; DECLARE @End_Date DATETIME; SET @End_Date0 = EOMONTH(CONVERT(DATETIME,CONCAT(@End_Year,'-',@End_Month,'-01')));  --Turn the input end month parameter into a date (using the last day of the month)  SET @End_Date = DATEADD(second,86399,@End_Date0);   --Add the metadata to a table so we keep a history of all reports run IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_REPORTS_METADATA', 'U') IS NULL 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		CONVERT(VARCHAR(50),'FIDD_Dealer_Amends_UDF') AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date] 	INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		'FIDD_Dealer_Amends_UDF' AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date]  -----Use the latest REASON to determine if an exception is a false positive select distinct  	e.ID,  	e.REASON , 	e.STATUS into #Max_Reason from VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE e inner join ( 	select  		ID, 		MAX(touch_count) as [Max_touch]  		from VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE 		where status in ('For Review','With Dealer','With Reviewer','C&A Review Request') 		--the above condition around status ensures that we only consider exceptions coming from the Dealing Desk 		--only dealing desk has the ability to flag false positive exceptions 	group by ID ) a  on a.ID = e.ID and a.Max_touch = e.TOUCH_COUNT  --Report 3: Dealer Amends Breakdown by UDF Selection Month End  IF OBJECT_ID('tempdb..#temp_mth_tot_amend', 'U') IS NOT NULL DROP TABLE #temp_mth_tot_amend SELECT DISTINCT 	t.MULTI_FUND_ID, 	pr.DEBT_DERIV, 	--pr.INST_TYPE, 	t.TRD_AMEND_TYPE, 	--t.TRD_TRADE_DATE, Thanos: No need to look at trd_trade_date anymore 	a.AMENDMENT_FLAG_CREATETIME, 	a.AMENDMENT_FLAG, 	CASE  		WHEN dd.MG_USER_ID IS NULL THEN t.TRD_TRADER 		ELSE dd.MG_USER_ID 	END AS DEALER 	--t.TRD_MODIFIED_BY 	--tr.ORDER_REASON_DECODE INTO #temp_mth_tot_amend FROM VISTA_REPORTING.dbo.TRADES t LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID = t.MULTI_FUND_ID --LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS tr ON tr.ORD_NUM = t.ORD_NUM LEFT JOIN VISTA_REPORTING.dbo.DEALER_AND_DESK dd ON dd.INITIALS = t.TRD_TRADER --Thanos: Added the below join to ensure consistency around all Amendment Reports and to get create time left join VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_FI_TABLE a on a.multi_fund_id = t.MULTI_FUND_ID and a.touch_count = t.TOUCH_COUNT --Thanos: Adding max reason so that we can remove False Positives in the where condition below left join #max_reason e on concat(t.multi_fund_id,'_15',t.touch_count) = e.ID  WHERE ((CHARINDEX('Brkr -', t.TRD_AMEND_TYPE) > 0)  			OR (CHARINDEX('Dlr -', t.TRD_AMEND_TYPE) > 0)  			OR (CHARINDEX('Syst -', t.TRD_AMEND_TYPE) > 0)  			OR (CHARINDEX('Other', t.TRD_AMEND_TYPE) > 0)  			OR t.TRD_AMEND_TYPE = 'Order Change'  			OR t.TRD_AMEND_TYPE IS NULL)  		AND a.AMENDMENT_FLAG > 0 		AND ISNULL(pr.DEBT_DERIV,'') in ('DEBT', 'DERIV') 		--Thanos: Added condition for False Positives 		AND ISNULL(E.REASON,'') not in ('False Positive') 		--Thanos: Changed the below from trd_trade_date to AMENDMENT_FLAG_CREATETIME 		and a.AMENDMENT_FLAG_CREATETIME between @Start_Date and @End_Date  IF OBJECT_ID('tempdb..#temp_UDF', 'U') IS NOT NULL DROP TABLE #temp_UDF SELECT DISTINCT 	DEBT_DERIV AS [SYSTEM], 	--INST_TYPE AS [ASSET_TYPE], 	TRD_AMEND_TYPE, 	DEALER, 	CASE             		 WHEN (CHARINDEX('Dlr -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DEBT' THEN 'Dealer Error' 		 WHEN (CHARINDEX('Brkr -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DEBT' THEN 'Broker Error' 		 WHEN (CHARINDEX('Syst -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DEBT' THEN 'System/Data Error' 		 WHEN TRD_AMEND_TYPE IS NULL AND DEBT_DERIV = 'DERIV' THEN 'Not Classified' 		 WHEN (CHARINDEX('Other', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DERIV' THEN 'Other' 		 WHEN (CHARINDEX('Dlr -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DERIV' THEN 'Dealer Error' 		 WHEN (CHARINDEX('Syst -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DERIV' THEN 'System/Data Error' 		 WHEN TRD_AMEND_TYPE = 'Order Change' AND DEBT_DERIV = 'DERIV' THEN 'Fund Manager' 	END AS [CATEGORY_GROUP], 	--Thanos: Changed the below from trd_trade_date to AMENDMENT_FLAG_CREATETIME 	CONCAT(YEAR(AMENDMENT_FLAG_CREATETIME), ' - ', MONTH(AMENDMENT_FLAG_CREATETIME)) AS [TRADE_DATE], 	SUM(AMENDMENT_FLAG) AS [AMEND_CANC_COUNT], 	--Thanos: Changed the below from trd_trade_date to AMENDMENT_FLAG_CREATETIME 	EOMONTH(AMENDMENT_FLAG_CREATETIME) AS [Date], 	@REPORT_NAME AS [Report_Name] into #temp_UDF FROM #temp_mth_tot_amend mta1 GROUP BY  	DEBT_DERIV, 	--INST_TYPE, 	TRD_AMEND_TYPE, 	DEALER, 	CASE             		 WHEN (CHARINDEX('Dlr -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DEBT' THEN 'Dealer Error' 		 WHEN (CHARINDEX('Brkr -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DEBT' THEN 'Broker Error' 		 WHEN (CHARINDEX('Syst -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DEBT' THEN 'System/Data Error' 		 WHEN TRD_AMEND_TYPE IS NULL AND DEBT_DERIV = 'DERIV' THEN 'Not Classified' 		 WHEN (CHARINDEX('Other', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DERIV' THEN 'Other' 		 WHEN (CHARINDEX('Dlr -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DERIV' THEN 'Dealer Error' 		 WHEN (CHARINDEX('Syst -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DERIV' THEN 'System/Data Error' 		 WHEN TRD_AMEND_TYPE = 'Order Change' AND DEBT_DERIV = 'DERIV' THEN 'Fund Manager' 	END, 	--Thanos: Changed the below from trd_trade_date to AMENDMENT_FLAG_CREATETIME 	CONCAT(YEAR(AMENDMENT_FLAG_CREATETIME), ' - ', MONTH(AMENDMENT_FLAG_CREATETIME)), 	EOMONTH(AMENDMENT_FLAG_CREATETIME)  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_DEALER_AMENDS_UDF_TABLE', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_DEALER_AMENDS_UDF_TABLE 	from #temp_UDF ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_DEALER_AMENDS_UDF_TABLE 	SELECT * 	from #temp_UDF    IF OBJECT_ID('tempdb..#temp_UDF_DATA', 'U') IS NOT NULL DROP TABLE #temp_UDF_DATA SELECT DISTINCT 	DEBT_DERIV AS [SYSTEM], 	--INST_TYPE AS [ASSET_TYPE], 	TRD_AMEND_TYPE, 	DEALER, 	CASE             		 WHEN (CHARINDEX('Dlr -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DEBT' THEN 'Dealer Error' 		 WHEN (CHARINDEX('Brkr -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DEBT' THEN 'Broker Error' 		 WHEN (CHARINDEX('Syst -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DEBT' THEN 'System/Data Error' 		 WHEN TRD_AMEND_TYPE IS NULL AND DEBT_DERIV = 'DERIV' THEN 'Not Classified' 		 WHEN (CHARINDEX('Other', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DERIV' THEN 'Other' 		 WHEN (CHARINDEX('Dlr -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DERIV' THEN 'Dealer Error' 		 WHEN (CHARINDEX('Syst -', TRD_AMEND_TYPE) > 0) AND DEBT_DERIV = 'DERIV' THEN 'System/Data Error' 		 WHEN TRD_AMEND_TYPE = 'Order Change' AND DEBT_DERIV = 'DERIV' THEN 'Fund Manager' 	END AS [CATEGORY_GROUP], 	--Thanos: Changed the below from trd_trade_date to AMENDMENT_FLAG_CREATETIME 	CONCAT(YEAR(AMENDMENT_FLAG_CREATETIME), ' - ', MONTH(AMENDMENT_FLAG_CREATETIME)) AS [TRADE_DATE], 	MULTI_FUND_ID, 	--Thanos: Changed the below from trd_trade_date to AMENDMENT_FLAG_CREATETIME 	EOMONTH(AMENDMENT_FLAG_CREATETIME) AS [Date], 	@REPORT_NAME AS [Report_Name] into #temp_UDF_DATA FROM #temp_mth_tot_amend mta1  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_DEALER_AMENDS_UDF_TABLE_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_DEALER_AMENDS_UDF_TABLE_DATA 	from #temp_UDF_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_DEALER_AMENDS_UDF_TABLE_DATA 	SELECT * 	from #temp_UDF_DATA END   --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: DMC_FIDD_DEALING_EXCEPTIONS CreateDate: 2019-10-18 08:39:50.737 ModifyDate: 2019-10-18 08:39:50.737 --- DEFINITION START --- -- ============================================= -- Author:		<Ayiba Cesario> -- Create date: <09/08/2018> -- Description:	<Generate DMC reports for FI Dealing Exceptions. --	This stored procedure takes a start month, end month and Report_Name  --	as input parameters and generates the reports for these months.> -- =============================================  --=========================== --2018-09-25 WH - changed the statuses in the #max_reason table as we have moved to using 'Status From' and not 'Status To' --=========================== CREATE PROCEDURE [dbo].[DMC_FIDD_DEALING_EXCEPTIONS]   	@Start_Month INT, 	@Start_Year INT, 	@End_Month INT, 	@End_Year INT, 	@REPORT_NAME VARCHAR(MAX)  AS BEGIN DECLARE @Start_Date DATETIME; SET @Start_Date = CONVERT(DATE,CONCAT(@Start_Year,'-',@Start_Month,'-01')); --Turn the input start month parameter into a date (using the first day of the month) DECLARE @End_Date0 DATETIME; DECLARE @End_Date DATETIME; SET @End_Date0 = EOMONTH(CONVERT(DATETIME,CONCAT(@End_Year,'-',@End_Month,'-01')));  --Turn the input end month parameter into a date (using the last day of the month)  SET @End_Date = DATEADD(second,86399,@End_Date0);  --Add the metadata to a table so we keep a history of all reports run IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_REPORTS_METADATA', 'U') IS NULL 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		CONVERT(VARCHAR(50),'FIDD_Dealing_Exceptions') AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date] 	INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		'FIDD_Dealing_Exceptions' AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date]  -----Use the latest REASON to determine if an exception is a false positive IF OBJECT_ID('tempdb..#Max_Reason', 'U') IS  NOT NULL DROP TABLE #Max_Reason select distinct  	e.ID,  	e.REASON , 	e.STATUS into #Max_Reason from VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE e inner join ( 	select  		ID, 		MAX(touch_count) as [Max_touch]  		from VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE 		where status in ('For Review','With Dealer','With Reviewer','C&A Review Request') 		--the above condition around status ensures that we only consider exceptions coming from the Dealing Desk 		--only dealing desk has the ability to flag false positive exceptions 	group by ID ) a  on a.ID = e.ID and a.Max_touch = e.TOUCH_COUNT  -----FIDD Cash bond trades that are not a PD exception as a % of population (minus false positives), split by asset class -- numerator by create date IF OBJECT_ID('tempdb..#TEMP_CREATETIME', 'U') IS NOT NULL DROP TABLE #TEMP_CREATETIME SELECT 1.0*count(distinct case when VG_01 = 1 AND ISNULL(e.REASON,'') != 'False Positive'                                                                          then m.multi_fund_id else null end) AS [No_of_Exceptions], 			case  				when p.inst_type = 'GOVBIL'                       then 'Government bills'               when p.inst_type in ('GOV', 'IGOV',  'GOVBIL')                       then 'Government bonds' 			  when p.inst_type in ('EM GOV', 'EM GOVBIL', 'EM CORP')                       then 'EM'               when p.inst_type in ('RMBS', 'CMBS', 'CDO', 'ABS', 'MBS', ' ARM')                       then 'Securitised'               when p.inst_type = 'SSA'                       then 'SSA bonds'               when p.inst_type = 'HY Corp'                         AND p.TRD_CURRENCY IN ('EUR','GBP')                        then 'European HY Corporates'               when (p.inst_type = 'HY Corp'                         AND p.TRD_CURRENCY NOT IN ('EUR','GBP','USD'))                          or (p.inst_type in ('IG CORP', 'NR CORP') AND TRD_CURRENCY IN ('EUR','GBP'))                          or (p.ORDER_INST_TYPE = 'CORP' and TRD_CURRENCY != 'USD')                        then 'European IG Corporates & Other' 			  when (p.inst_type in ('HY CORP', 'IG CORP', 'NR CORP','CORP') OR p.ORDER_INST_TYPE = 'CORP') and p.TRD_CURRENCY = 'USD'                                        then 'USD Corporates'               when p.inst_type in ('COV')                                         then 'Covered Bonds'                when p.inst_type = 'PFD'                                        then 'Pref. Shares' 	 end as [Cash Trade Type], 	CONCAT(YEAR(vg_01_CREATETIME), ' - ', MONTH(vg_01_CREATETIME)) as [Month_Year] 	INTO #TEMP_CREATETIME from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE m left join #Max_Reason e  	on m.MULTI_FUND_ID+'_1' = e.ID left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p  	on m.MULTI_FUND_ID = p.MULTI_FUND_ID where  	m.DEALING_DESK = 'Fixed Income'   -- Only conisder FI 	AND p.DEBT_DERIV = 'DEBT'		  -- Only want Bond trades     AND p.PRIMARY_MARKET = 0 		  -- Do not want primary market trades     AND p.INTERFUND_TRANSFER = 0	  -- Do not want interfund xfr     AND p.TWEB_CLOSE_DEALING = 0 	  -- Do not want TWEB Close 	AND p.[1615_DEALING] = 0 		  -- Do not want 1615 Dealing 	and VG_01_CREATETIME between @Start_Date and @End_Date group by  			case  				when p.inst_type = 'GOVBIL'                       then 'Government bills'               when p.inst_type in ('GOV', 'IGOV',  'GOVBIL')                       then 'Government bonds' 			  when p.inst_type in ('EM GOV', 'EM GOVBIL', 'EM CORP')                       then 'EM'               when p.inst_type in ('RMBS', 'CMBS', 'CDO', 'ABS', 'MBS', ' ARM')                       then 'Securitised'               when p.inst_type = 'SSA'                       then 'SSA bonds'               when p.inst_type = 'HY Corp'                         AND p.TRD_CURRENCY IN ('EUR','GBP')                        then 'European HY Corporates'               when (p.inst_type = 'HY Corp'                         AND p.TRD_CURRENCY NOT IN ('EUR','GBP','USD'))                          or (p.inst_type in ('IG CORP', 'NR CORP') AND TRD_CURRENCY IN ('EUR','GBP'))                          or (p.ORDER_INST_TYPE = 'CORP' and TRD_CURRENCY != 'USD')                        then 'European IG Corporates & Other' 			  when (p.inst_type in ('HY CORP', 'IG CORP', 'NR CORP','CORP') OR p.ORDER_INST_TYPE = 'CORP') and p.TRD_CURRENCY = 'USD'                                        then 'USD Corporates'               when p.inst_type in ('COV')                                         then 'Covered Bonds'                when p.inst_type = 'PFD'                                        then 'Pref. Shares' 	 end , 	CONCAT(YEAR(vg_01_CREATETIME), ' - ', MONTH(vg_01_CREATETIME)),  	EOMONTH(vg_01_CREATETIME)    -----FIDD Cash bond trades that are not a PD exception as a % of population (minus false positives), split by asset class -- denominator by trade date IF OBJECT_ID('tempdb..#Temp_trade_date', 'U') IS NOT NULL DROP TABLE #Temp_trade_date select 			count(distinct m.multi_fund_id) AS [Total_Pop],     			EOMONTH([Trade Date]) as [TRADE date],                                      	case  when p.inst_type = 'GOVBIL'                       then 'Government bills'               when p.inst_type in ('GOV', 'IGOV',  'GOVBIL')                       then 'Government bonds' 			  when p.inst_type in ('EM GOV', 'EM GOVBIL', 'EM CORP')                       then 'EM'               when p.inst_type in ('RMBS', 'CMBS', 'CDO', 'ABS', 'MBS', ' ARM')                       then 'Securitised'               when p.inst_type = 'SSA'                       then 'SSA bonds'               when p.inst_type = 'HY Corp'                         AND p.TRD_CURRENCY IN ('EUR','GBP')                        then 'European HY Corporates'               when (p.inst_type = 'HY Corp'                         AND p.TRD_CURRENCY NOT IN ('EUR','GBP','USD'))                          or (p.inst_type in ('IG CORP', 'NR CORP') AND TRD_CURRENCY IN ('EUR','GBP'))                          or (p.ORDER_INST_TYPE = 'CORP' and TRD_CURRENCY != 'USD')                        then 'European IG Corporates & Other' 			  when (p.inst_type in ('HY CORP', 'IG CORP', 'NR CORP','CORP') OR p.ORDER_INST_TYPE = 'CORP') and p.TRD_CURRENCY = 'USD'                                        then 'USD Corporates'               when p.inst_type in ('COV')                                         then 'Covered Bonds'                when p.inst_type = 'PFD'                                        then 'Pref. Shares' 	 end as [Cash Trade Type], 	CONCAT(YEAR([Trade Date]), ' - ', MONTH([Trade Date])) as [Month_Year] into #Temp_trade_date from (SELECT DISTINCT MULTI_FUND_ID, [Trade Date], DEALING_DESK FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE) m left join #Max_Reason e  	on m.MULTI_FUND_ID+'_1' = e.ID left join (SELECT DISTINCT MULTI_FUND_ID, ORDER_INST_TYPE, INST_TYPE, DEBT_DERIV, PRIMARY_MARKET,INTERFUND_TRANSFER, TWEB_CLOSE_DEALING, [1615_DEALING], TRD_CURRENCY  FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) p  	on m.MULTI_FUND_ID = p.MULTI_FUND_ID where  	m.DEALING_DESK = 'Fixed Income'   -- Only conisder FI 	AND p.DEBT_DERIV = 'DEBT'		  -- Only want Bond trades     AND p.PRIMARY_MARKET = 0 		  -- Do not want primary market trades     AND p.INTERFUND_TRANSFER = 0	  -- Do not want interfund xfr     AND p.TWEB_CLOSE_DEALING = 0 	  -- Do not want TWEB Close 	AND p.[1615_DEALING] = 0 		  -- Do not want 1615 Dealing 	and [Trade Date] between @Start_Date and @End_Date group by  	case  when p.inst_type = 'GOVBIL'                       then 'Government bills'               when p.inst_type in ('GOV', 'IGOV',  'GOVBIL')                       then 'Government bonds' 			  when p.inst_type in ('EM GOV', 'EM GOVBIL', 'EM CORP')                       then 'EM'               when p.inst_type in ('RMBS', 'CMBS', 'CDO', 'ABS', 'MBS', ' ARM')                       then 'Securitised'               when p.inst_type = 'SSA'                       then 'SSA bonds'               when p.inst_type = 'HY Corp'                         AND p.TRD_CURRENCY IN ('EUR','GBP')                        then 'European HY Corporates'               when (p.inst_type = 'HY Corp'                         AND p.TRD_CURRENCY NOT IN ('EUR','GBP','USD'))                          or (p.inst_type in ('IG CORP', 'NR CORP') AND TRD_CURRENCY IN ('EUR','GBP'))                          or (p.ORDER_INST_TYPE = 'CORP' and TRD_CURRENCY != 'USD')                        then 'European IG Corporates & Other' 			  when (p.inst_type in ('HY CORP', 'IG CORP', 'NR CORP','CORP') OR p.ORDER_INST_TYPE = 'CORP') and p.TRD_CURRENCY = 'USD'                                        then 'USD Corporates'               when p.inst_type in ('COV')                                         then 'Covered Bonds'                when p.inst_type = 'PFD'                                        then 'Pref. Shares' 	 end , 	CONCAT(YEAR([Trade Date]), ' - ', MONTH([Trade Date])) , 	EOMONTH([Trade Date])  -----FIDD Cash bond trades that are not a PD exception as a % of population (minus false positives), split by asset class  --Thanos Rebuild: need to use trade population first and then do a left join to exceptions.  --Doing this will ensure that we get trade data for Apr-18 where no exceptions exist IF OBJECT_ID('tempdb..#temp_notPD_asset', 'U') IS NOT NULL DROP TABLE #temp_notPD_asset select  	case  		when c.No_of_Exceptions > t.Total_Pop	then 0.0 -- set to zero percent in the extreme scenario where exceptions are higher than the no of trades 		when t.Total_Pop = 0					then 100.0 		else 100.0-coalesce((100.0*c.No_of_Exceptions/t.Total_Pop),0)  	end as [Percent_Not_PDP_Not_FP], 	t.[Cash Trade Type], 	t.Month_Year, 	EOMONTH([Trade Date]) AS [Date], 	@REPORT_NAME AS [Report_Name] into #temp_notPD_asset from #Temp_trade_date t left join #TEMP_CREATETIME c on t.[Cash Trade Type] = c.[Cash Trade Type] and t.Month_Year = c.Month_Year  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_NOT_PD_BY_ASSET_CLASS', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_NOT_PD_BY_ASSET_CLASS 	from #temp_notPD_asset ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_NOT_PD_BY_ASSET_CLASS 	SELECT * 	from #temp_notPD_asset   -----FIDD Cash bond trades that are not a PD exception as a % of population (minus false positives), split by asset class -- numerator by create date IF OBJECT_ID('tempdb..#TEMP_CREATETIME_DATA', 'U') IS NOT NULL DROP TABLE #TEMP_CREATETIME_DATA SELECT  m.multi_fund_id, 		VG_01, 		e.REASON, 			case  				when p.inst_type = 'GOVBIL'                       then 'Government bills'               when p.inst_type in ('GOV', 'IGOV',  'GOVBIL')                       then 'Government bonds' 			  when p.inst_type in ('EM GOV', 'EM GOVBIL', 'EM CORP')                       then 'EM'               when p.inst_type in ('RMBS', 'CMBS', 'CDO', 'ABS', 'MBS', ' ARM')                       then 'Securitised'               when p.inst_type = 'SSA'                       then 'SSA bonds'               when p.inst_type = 'HY Corp'                         AND p.TRD_CURRENCY IN ('EUR','GBP')                        then 'European HY Corporates'               when (p.inst_type = 'HY Corp'                         AND p.TRD_CURRENCY NOT IN ('EUR','GBP','USD'))                          or (p.inst_type in ('IG CORP', 'NR CORP') AND TRD_CURRENCY IN ('EUR','GBP'))                          or (p.ORDER_INST_TYPE = 'CORP' and TRD_CURRENCY != 'USD')                        then 'European IG Corporates & Other' 			  when (p.inst_type in ('HY CORP', 'IG CORP', 'NR CORP','CORP') OR p.ORDER_INST_TYPE = 'CORP') and p.TRD_CURRENCY = 'USD'                                        then 'USD Corporates'               when p.inst_type in ('COV')                                         then 'Covered Bonds'                when p.inst_type = 'PFD'                                        then 'Pref. Shares' 	 end as [Cash Trade Type], 	CONCAT(YEAR(vg_01_CREATETIME), ' - ', MONTH(vg_01_CREATETIME)) as [Month_Year] 	INTO #TEMP_CREATETIME_DATA from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE m left join #Max_Reason e  	on m.MULTI_FUND_ID+'_1' = e.ID left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p  	on m.MULTI_FUND_ID = p.MULTI_FUND_ID where  	m.DEALING_DESK = 'Fixed Income'   -- Only conisder FI 	AND p.DEBT_DERIV = 'DEBT'		  -- Only want Bond trades     AND p.PRIMARY_MARKET = 0 		  -- Do not want primary market trades     AND p.INTERFUND_TRANSFER = 0	  -- Do not want interfund xfr     AND p.TWEB_CLOSE_DEALING = 0 	  -- Do not want TWEB Close 	AND p.[1615_DEALING] = 0 		  -- Do not want 1615 Dealing 	and VG_01_CREATETIME between @Start_Date and @End_Date  -----FIDD Cash bond trades that are not a PD exception as a % of population (minus false positives), split by asset class -- denominator by trade date IF OBJECT_ID('tempdb..#Temp_trade_date_DATA', 'U') IS NOT NULL DROP TABLE #Temp_trade_date_DATA select 			m.multi_fund_id, 			VG_01, 			e.REASON,    			EOMONTH([Trade Date]) as [TRADE date],                                      	case  when p.inst_type = 'GOVBIL'                       then 'Government bills'               when p.inst_type in ('GOV', 'IGOV',  'GOVBIL')                       then 'Government bonds' 			  when p.inst_type in ('EM GOV', 'EM GOVBIL', 'EM CORP')                       then 'EM'               when p.inst_type in ('RMBS', 'CMBS', 'CDO', 'ABS', 'MBS', ' ARM')                       then 'Securitised'               when p.inst_type = 'SSA'                       then 'SSA bonds'               when p.inst_type = 'HY Corp'                         AND p.TRD_CURRENCY IN ('EUR','GBP')                        then 'European HY Corporates'               when (p.inst_type = 'HY Corp'                         AND p.TRD_CURRENCY NOT IN ('EUR','GBP','USD'))                          or (p.inst_type in ('IG CORP', 'NR CORP') AND TRD_CURRENCY IN ('EUR','GBP'))                          or (p.ORDER_INST_TYPE = 'CORP' and TRD_CURRENCY != 'USD')                        then 'European IG Corporates & Other' 			  when (p.inst_type in ('HY CORP', 'IG CORP', 'NR CORP','CORP') OR p.ORDER_INST_TYPE = 'CORP') and p.TRD_CURRENCY = 'USD'                                        then 'USD Corporates'               when p.inst_type in ('COV')                                         then 'Covered Bonds'                when p.inst_type = 'PFD'                                        then 'Pref. Shares' 	 end as [Cash Trade Type], 	CONCAT(YEAR([Trade Date]), ' - ', MONTH([Trade Date])) as [Month_Year] into #Temp_trade_date_DATA from (SELECT DISTINCT MULTI_FUND_ID, [Trade Date], DEALING_DESK, VG_01 FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE) m left join #Max_Reason e  	on m.MULTI_FUND_ID+'_1' = e.ID left join (SELECT DISTINCT MULTI_FUND_ID, ORDER_INST_TYPE, INST_TYPE, DEBT_DERIV, PRIMARY_MARKET,INTERFUND_TRANSFER, TWEB_CLOSE_DEALING, [1615_DEALING], TRD_CURRENCY  FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) p  	on m.MULTI_FUND_ID = p.MULTI_FUND_ID where  	m.DEALING_DESK = 'Fixed Income'   -- Only conisder FI 	AND p.DEBT_DERIV = 'DEBT'		  -- Only want Bond trades     AND p.PRIMARY_MARKET = 0 		  -- Do not want primary market trades     AND p.INTERFUND_TRANSFER = 0	  -- Do not want interfund xfr     AND p.TWEB_CLOSE_DEALING = 0 	  -- Do not want TWEB Close 	AND p.[1615_DEALING] = 0 		  -- Do not want 1615 Dealing 	and [Trade Date] between @Start_Date and @End_Date  -----FIDD Cash bond trades that are not a PD exception as a % of population (minus false positives), split by asset class  --Thanos Rebuild: need to use trade population first and then do a left join to exceptions.  --Doing this will ensure that we get trade data for Apr-18 where no exceptions exist IF OBJECT_ID('tempdb..#temp_notPD_asset_DATA', 'U') IS NOT NULL DROP TABLE #temp_notPD_asset_DATA select  	t.MULTI_FUND_ID, 	t.REASON, 	t.vg_01 as EXCEPTION_FLAG, 	t.[Cash Trade Type], 	t.Month_Year, 	EOMONTH([Trade Date]) AS [Date], 	@REPORT_NAME AS [Report_Name] into #temp_notPD_asset_DATA from #Temp_trade_date_DATA t left join #TEMP_CREATETIME c on t.[Cash Trade Type] = c.[Cash Trade Type] and t.Month_Year = c.Month_Year  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_NOT_PD_BY_ASSET_CLASS_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_NOT_PD_BY_ASSET_CLASS_DATA 	from #temp_notPD_asset_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_NOT_PD_BY_ASSET_CLASS_DATA 	SELECT * 	from #temp_notPD_asset_DATA  -----(a) % not PDP exceptions (excluding false positives), (b) not Below 3 Quotes Requested, (c) not Below 3 quotes obtained, for FIDD Secondary Cash bond trades  --VG 01 execptions IF OBJECT_ID('tempdb..#bnd_PD_exceptions', 'U') IS NOT NULL DROP TABLE #bnd_PD_exceptions select 	count(distinct  					case  						when VG_01 = 1 and ISNULL(e.REASON,'') != 'False Positive'         							then m.multi_fund_id  						else null  					end) as [no_of_exceptions], --Number of PD exceptions 	count(distinct  			case  				when (VG_01 = 1 and ISNULL(e.REASON,'') != 'False Positive') AND  f.[STATUS] NOT IN ('1A1','1A2','1A3') --If the final status is not in this list, the exception has passed the front desk.  					then m.multi_fund_id  				else null  			end) AS [no_of_Reviewed], -- Number of PDP exceptions (minus False Positives) 	CONCAT(YEAR(VG_01_CREATETIME), ' - ', MONTH(VG_01_CREATETIME)) as [Month_Year]    into #bnd_PD_exceptions from (SELECT DISTINCT MULTI_FUND_ID, VG_01, VG_01_CREATETIME, DEALING_DESK FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE) m left join #Max_Reason e  	on m.MULTI_FUND_ID+'_1' = e.ID left join VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE f 	on m.MULTI_FUND_ID+'_1' = f.ID left join (SELECT DISTINCT MULTI_FUND_ID, DEBT_DERIV, PRIMARY_MARKET, INTERFUND_TRANSFER, TWEB_CLOSE_DEALING, [1615_DEALING] FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) p  	on m.MULTI_FUND_ID = p.MULTI_FUND_ID where  	m.DEALING_DESK = 'Fixed Income'   -- Only conisder FI 	AND p.DEBT_DERIV = 'DEBT'		  -- Only want Bond trades     AND p.PRIMARY_MARKET = 0 		  -- Do not want primary market trades     AND p.INTERFUND_TRANSFER = 0	  -- Do not want interfund xfr     AND p.TWEB_CLOSE_DEALING = 0 	  -- Do not want TWEB Close 	AND p.[1615_DEALING] = 0 		  -- Do not want 1615 Dealing 	and VG_01_CREATETIME between @Start_Date and @End_Date GROUP BY 	CONCAT(YEAR(VG_01_CREATETIME), ' - ', MONTH(VG_01_CREATETIME))  -----(a) % not PDP exceptions (excluding false positives), (b) not Below 3 Quotes Requested, (c) not Below 3 quotes obtained, for FIDD Secondary Cash bond trades  --3QR Exceptions IF OBJECT_ID('tempdb..#bnd_3qr', 'U') IS NOT NULL DROP TABLE #bnd_3qr select 	count(distinct  					case  						when VG_01_3QR = 1   							then m.multi_fund_id 						else null  					end) AS [no_of_exceptions], --no of 3qr exceptions 	CONCAT(YEAR(VG_01_3QR_CREATETIME), ' - ', MONTH(VG_01_3QR_CREATETIME)) as [Month_Year]    into #bnd_3qr from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE m left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p  	on m.MULTI_FUND_ID = p.MULTI_FUND_ID where  	m.DEALING_DESK = 'Fixed Income'   -- Only conisder FI 	AND p.DEBT_DERIV = 'DEBT'		  -- Only want Bond trades     AND p.PRIMARY_MARKET = 0 		  -- Do not want primary market trades     AND p.INTERFUND_TRANSFER = 0	  -- Do not want interfund xfr     AND p.TWEB_CLOSE_DEALING = 0 	  -- Do not want TWEB Close 	AND p.[1615_DEALING] = 0 		  -- Do not want 1615 Dealing 	and VG_01_3QR_CREATETIME between @Start_Date and @End_Date GROUP BY 	CONCAT(YEAR(VG_01_3QR_CREATETIME), ' - ', MONTH(VG_01_3QR_CREATETIME))  -----(a) % not PDP exceptions (excluding false positives), (b) not Below 3 Quotes Requested, (c) not Below 3 quotes obtained, for FIDD Secondary Cash bond trades  --3QO Exceptions IF OBJECT_ID('tempdb..#bnd_3qo', 'U') IS NOT NULL DROP TABLE #bnd_3qo  select 	count(distinct  			case  				when VG_01_3QO = 1  					then m.multi_fund_id  				else null  			end) AS [BND 3QO Exceptions], -- Number of Below 3 Quotes obtained exceptions 	CONCAT(YEAR(VG_01_3QO_CREATETIME), ' - ', MONTH(VG_01_3QO_CREATETIME)) as [Month_Year]   into #bnd_3qo  from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE m left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p  	on m.MULTI_FUND_ID = p.MULTI_FUND_ID where  	m.DEALING_DESK = 'Fixed Income'   -- Only conisder FI 	AND p.DEBT_DERIV = 'DEBT'		  -- Only want Bond trades     AND p.PRIMARY_MARKET = 0 		  -- Do not want primary market trades     AND p.INTERFUND_TRANSFER = 0	  -- Do not want interfund xfr     AND p.TWEB_CLOSE_DEALING = 0 	  -- Do not want TWEB Close 	AND p.[1615_DEALING] = 0 		  -- Do not want 1615 Dealing  	and VG_01_3QO_CREATETIME between @Start_Date and @End_Date GROUP BY 	CONCAT(YEAR(VG_01_3QO_CREATETIME), ' - ', MONTH(VG_01_3QO_CREATETIME))  	 -----(a) % not PDP exceptions (excluding false positives), (b) not Below 3 Quotes Requested, (c) not Below 3 quotes obtained, for FIDD Secondary Cash bond trades  --total number of trades IF OBJECT_ID('tempdb..#bnd_total_pop', 'U') IS NOT NULL DROP TABLE #bnd_total_pop select 		count(distinct m.multi_fund_id) AS [Total_pop], --total number of trades 	CONCAT(YEAR([Trade Date]), ' - ', MONTH([Trade Date])) as [Month_Year]    into #bnd_total_pop from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE m left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p  	on m.MULTI_FUND_ID = p.MULTI_FUND_ID where  	m.DEALING_DESK = 'Fixed Income'   -- Only conisder FI 	AND p.DEBT_DERIV = 'DEBT'		  -- Only want Bond trades     AND p.PRIMARY_MARKET = 0 		  -- Do not want primary market trades     AND p.INTERFUND_TRANSFER = 0	  -- Do not want interfund xfr     AND p.TWEB_CLOSE_DEALING = 0 	  -- Do not want TWEB Close 	AND p.[1615_DEALING] = 0 		  -- Do not want 1615 Dealing 	and [Trade Date] between @Start_Date and @End_Date GROUP BY 	CONCAT(YEAR([Trade Date]), ' - ', MONTH([Trade Date]))  -----(a) % not PDP exceptions (excluding false positives), (b) not Below 3 Quotes Requested, (c) not Below 3 quotes obtained, for FIDD Secondary Cash bond trades   -- Thanos Rebuild IF OBJECT_ID('tempdb..#not_pd_pre_union', 'U') IS NOT NULL DROP TABLE #not_pd_pre_union select 	case  		when e.no_of_exceptions > t.Total_pop then 0.0 -- set to zero in the extreme scenario where exceptions are higher than the no of trades 		when t.Total_pop = 0 then 100.0 		else 100.0-coalesce((100.0*e.no_of_exceptions/t.Total_pop),0)  	end as [BND Percent not PDP],	 	case  		when r.no_of_exceptions > t.Total_pop then 0.0 -- set to zero in the extreme scenario where exceptions are higher than the no of trades 		when t.Total_pop = 0 then 100.0 		else 100.0-coalesce((100.0*r.no_of_exceptions/t.Total_pop),0)  	end as [BND Percent 3 Quotes Requested], 	case  		when o.[BND 3QO Exceptions] > t.Total_pop then 0 -- set to one in the extreme scenario where exceptions are higher than the no of trades 		when t.Total_pop = 0 then 100.0 		else 100.0-coalesce((100.0*o.[BND 3QO Exceptions]/t.Total_pop),0)  	end as [BND Percent 3 Quotes Obtained], 	coalesce(e.[no_of_Reviewed],0) as [BND PDP Exceptions Reviewed], 	coalesce(r.no_of_exceptions,0) as [BND 3QR Exceptions], 	coalesce(o.[BND 3QO Exceptions],0) as [BND 3QO Exceptions], 	t.Month_Year, 	EOMONTH(CONVERT(date,concat(t.month_year, '-01'))) AS [Date], 	@REPORT_NAME AS [Report_Name]   INTO #not_pd_pre_union from #bnd_total_pop t left join #bnd_PD_exceptions e on t.Month_Year = e.Month_Year left join #bnd_3qr r on t.Month_Year = r.Month_Year left join #bnd_3qo o on t.Month_Year = o.month_year  IF OBJECT_ID('tempdb..#temp_notPD_type', 'U') IS NOT NULL DROP TABLE #temp_notPD_type select  [BND Percent not PDP] as [Value], 'BND Percent not PDP' as [Type], Month_Year, [Date], Report_Name into #temp_notPD_type from #not_pd_pre_union   union   select [BND Percent 3 Quotes Requested] as [Value], 'BND Percent 3 Quotes Requested' as [Type], Month_Year, [Date], Report_Name from #not_pd_pre_union  union  select [BND Percent 3 Quotes Obtained] as [Value], 'BND Percent 3 Quotes Obtained' as [Type], Month_Year, [Date], Report_Name from #not_pd_pre_union  union   select [BND PDP Exceptions Reviewed] as [Value], 'BND PDP Exceptions Reviewed' as [Type], Month_Year, [Date], Report_Name from #not_pd_pre_union  union   select [BND 3QR Exceptions] as [Value], 'BND 3QR Exceptions' as [Type], Month_Year, [Date], Report_Name from #not_pd_pre_union  union  select [BND 3QO Exceptions] as [Value], 'BND 3QO Exceptions' as [Type], Month_Year, [Date], Report_Name from #not_pd_pre_union  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_NOT_PD_BY_EXCEPTION_TYPE', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_NOT_PD_BY_EXCEPTION_TYPE 	from #temp_notPD_type ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_NOT_PD_BY_EXCEPTION_TYPE 	SELECT * 	from #temp_notPD_type   IF OBJECT_ID('tempdb..#bnd_PD_exceptions_DATA', 'U') IS NOT NULL DROP TABLE #bnd_PD_exceptions_DATA select 	m.multi_fund_id, 	m.VG_01_3QR, 	m.VG_01_3QO, 	m.VG_01, 	e.REASON, 	case  		when f.[STATUS] NOT IN ('1A1','1A2','1A3') then 1  		else 0  	end as IS_REVIEWED, -- Number of PDP exceptions (minus False Positives) 	CONCAT(YEAR(VG_01_CREATETIME), ' - ', MONTH(VG_01_CREATETIME)) as [Month_Year], 	@REPORT_NAME as [Report_Name] into #bnd_PD_exceptions_DATA from (SELECT DISTINCT MULTI_FUND_ID, VG_01_CREATETIME, DEALING_DESK, VG_01_3QR, VG_01_3QO, VG_01 FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE) m left join #Max_Reason e  	on m.MULTI_FUND_ID+'_1' = e.ID left join VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE f 	on m.MULTI_FUND_ID+'_1' = f.ID left join (SELECT DISTINCT MULTI_FUND_ID, DEBT_DERIV, PRIMARY_MARKET, INTERFUND_TRANSFER, TWEB_CLOSE_DEALING, [1615_DEALING] FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) p  	on m.MULTI_FUND_ID = p.MULTI_FUND_ID where  	m.DEALING_DESK = 'Fixed Income'   -- Only conisder FI 	AND p.DEBT_DERIV = 'DEBT'		  -- Only want Bond trades     AND p.PRIMARY_MARKET = 0 		  -- Do not want primary market trades     AND p.INTERFUND_TRANSFER = 0	  -- Do not want interfund xfr     AND p.TWEB_CLOSE_DEALING = 0 	  -- Do not want TWEB Close 	AND p.[1615_DEALING] = 0 		  -- Do not want 1615 Dealing 	and VG_01_CREATETIME between @Start_Date and @End_Date  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_NOT_PD_BY_EXCEPTION_TYPE_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_NOT_PD_BY_EXCEPTION_TYPE_DATA 	from #bnd_PD_exceptions_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_NOT_PD_BY_EXCEPTION_TYPE_DATA 	SELECT * 	from #bnd_PD_exceptions_DATA   -----FIDD CDS trades --numerator by create date IF OBJECT_ID('tempdb..#cds_pd_exceptions', 'U') IS NOT NULL DROP TABLE #cds_pd_exceptions select  	count(distinct 				case  					when VG_01 = 1 and ISNULL(e.REASON,'') != 'False Positive'        						then m.multi_fund_id  					else null  				end) PD_exceptions,                                          	 case  		when m.INST_TYPE = 'SCDS' 		    then 'SCDS' 		when (m.INST_TYPE = 'ICDS' and p.ICDS_DETAIL = 'ITRAXX EUROPE MAIN') OR (m.INST_TYPE = 'ICDS' and p.ICDS_DETAIL = 'CDX NA IG') 		    then 'iTraxx Main & CDX IG' 		when (m.INST_TYPE = 'ICDS' and p.ICDS_DETAIL IS NOT NULL) OR (m.INST_TYPE = 'ICDS' and p.ICDS_DETAIL = 'CDX NA HY') 		    then 'iTraxx Xover & CDX HY' 		when m.INST_TYPE in ('ICDS', 'SCDS') 		then 'CDS Other' 	end as [CDS Trade Type], 	CONCAT(YEAR(VG_01_CREATETIME), ' - ', MONTH(VG_01_CREATETIME)) as [Month_Year] into #cds_pd_exceptions from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE m left join #Max_Reason e  	on m.MULTI_FUND_ID+'_1' = e.ID left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p  	on m.MULTI_FUND_ID = p.MULTI_FUND_ID where  	m.DEALING_DESK = 'Fixed Income'   -- Only conisder FI 	AND p.INST_TYPE IN ('SCDS','ICDS') -- Only want CDS     AND p.PRIMARY_MARKET = 0 		  -- Do not want primary market trades     AND p.INTERFUND_TRANSFER = 0	  -- Do not want interfund xfr     AND p.TWEB_CLOSE_DEALING = 0 	  -- Do not want TWEB Close 	AND p.[1615_DEALING] = 0 		  -- Do not want 1615 Dealing 	and VG_01_CREATETIME between @Start_Date and @End_Date group by  	 case  		when m.INST_TYPE = 'SCDS' 		    then 'SCDS' 		when (m.INST_TYPE = 'ICDS' and p.ICDS_DETAIL = 'ITRAXX EUROPE MAIN') OR (m.INST_TYPE = 'ICDS' and p.ICDS_DETAIL = 'CDX NA IG') 		    then 'iTraxx Main & CDX IG' 		when (m.INST_TYPE = 'ICDS' and p.ICDS_DETAIL IS NOT NULL) OR (m.INST_TYPE = 'ICDS' and p.ICDS_DETAIL = 'CDX NA HY') 		    then 'iTraxx Xover & CDX HY' 		when m.INST_TYPE in ('ICDS', 'SCDS') 		then 'CDS Other' 	end, 	CONCAT(YEAR(VG_01_CREATETIME), ' - ', MONTH(VG_01_CREATETIME))    -----FIDD CDS trades --denominator by trade date IF OBJECT_ID('tempdb..#cds_total_trades', 'U') IS NOT NULL DROP TABLE #cds_total_trades select  	count(distinct m.multi_fund_id) AS [total_pop],  	EOMONTH([Trade Date]) AS [Trade Date],                                         	 case  		when m.INST_TYPE = 'SCDS' 		    then 'SCDS' 		when (m.INST_TYPE = 'ICDS' and p.ICDS_DETAIL = 'ITRAXX EUROPE MAIN') OR (m.INST_TYPE = 'ICDS' and p.ICDS_DETAIL = 'CDX NA IG') 		    then 'iTraxx Main & CDX IG' 		when (m.INST_TYPE = 'ICDS' and p.ICDS_DETAIL IS NOT NULL) OR (m.INST_TYPE = 'ICDS' and p.ICDS_DETAIL = 'CDX NA HY') 		    then 'iTraxx Xover & CDX HY' 		when m.INST_TYPE in ('ICDS', 'SCDS') 		then 'CDS Other' 	end as [CDS Trade Type], 	CONCAT(YEAR([Trade Date]), ' - ', MONTH([Trade Date])) as [Month_Year] into #cds_total_trades from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE m left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p  	on m.MULTI_FUND_ID = p.MULTI_FUND_ID where  	m.DEALING_DESK = 'Fixed Income'   -- Only conisder FI 	AND p.INST_TYPE IN ('SCDS','ICDS') -- Only want CDS     AND p.PRIMARY_MARKET = 0 		  -- Do not want primary market trades     AND p.INTERFUND_TRANSFER = 0	  -- Do not want interfund xfr     AND p.TWEB_CLOSE_DEALING = 0 	  -- Do not want TWEB Close 	AND p.[1615_DEALING] = 0 		  -- Do not want 1615 Dealing 	and [Trade Date] between @Start_Date and @End_Date group by  	 case  		when m.INST_TYPE = 'SCDS' 		    then 'SCDS' 		when (m.INST_TYPE = 'ICDS' and p.ICDS_DETAIL = 'ITRAXX EUROPE MAIN') OR (m.INST_TYPE = 'ICDS' and p.ICDS_DETAIL = 'CDX NA IG') 		    then 'iTraxx Main & CDX IG' 		when (m.INST_TYPE = 'ICDS' and p.ICDS_DETAIL IS NOT NULL) OR (m.INST_TYPE = 'ICDS' and p.ICDS_DETAIL = 'CDX NA HY') 		    then 'iTraxx Xover & CDX HY' 		when m.INST_TYPE in ('ICDS', 'SCDS') 		then 'CDS Other' 	end, 	CONCAT(YEAR([Trade Date]), ' - ', MONTH([Trade Date])), EOMONTH([Trade Date])  -----FIDD CDS trades  --Thanos Rebuild IF OBJECT_ID('tempdb..#temp_CDS_ASSET', 'U') IS NOT NULL DROP TABLE #temp_CDS_ASSET select  	case  		when e.PD_exceptions > t.total_pop	then 0.0 --set to zero percent in the extreme scenario where exceptions are higher than the no of trades 		when t.total_pop = 0				then 100.0 		else 100.0-coalesce((100.0*e.PD_exceptions/t.total_pop),0)  	end as [Percent_Not_PDP_Not_FP], 	t.[CDS Trade Type], 	t.Month_Year, 	EOMONTH([Trade Date]) AS [Date], 	@REPORT_NAME AS [Report_Name] into #temp_CDS_ASSET from #cds_total_trades t left join #cds_pd_exceptions e on e.Month_Year = t.Month_Year and e.[CDS Trade Type]=t.[CDS Trade Type]  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FIDD_CDS_BY_ASSET_CLASS', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_FIDD_CDS_BY_ASSET_CLASS 	from #temp_CDS_ASSET ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_FIDD_CDS_BY_ASSET_CLASS 	SELECT * 	from #temp_CDS_ASSET -----FIDD CDS trades --numerator by create date  IF OBJECT_ID('tempdb..#cds_pd_exceptions_DATA', 'U') IS NOT NULL DROP TABLE #cds_pd_exceptions_DATA select  	m.multi_fund_id,     	m.VG_01, 	e.REASON,     m.[trade date],                        	 case  		when m.INST_TYPE = 'SCDS' 		    then 'SCDS' 		when (m.INST_TYPE = 'ICDS' and p.ICDS_DETAIL = 'ITRAXX EUROPE MAIN') OR (m.INST_TYPE = 'ICDS' and p.ICDS_DETAIL = 'CDX NA IG') 		    then 'iTraxx Main & CDX IG' 		when (m.INST_TYPE = 'ICDS' and p.ICDS_DETAIL IS NOT NULL) OR (m.INST_TYPE = 'ICDS' and p.ICDS_DETAIL = 'CDX NA HY') 		    then 'iTraxx Xover & CDX HY' 		when m.INST_TYPE in ('ICDS', 'SCDS') 		then 'CDS Other' 	end as [CDS Trade Type], 	CONCAT(YEAR(VG_01_CREATETIME), ' - ', MONTH(VG_01_CREATETIME)) as [Month_Year] into #cds_pd_exceptions_DATA from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE m left join #Max_Reason e  	on m.MULTI_FUND_ID+'_1' = e.ID left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p  	on m.MULTI_FUND_ID = p.MULTI_FUND_ID where  	m.DEALING_DESK = 'Fixed Income'   -- Only conisder FI 	AND p.INST_TYPE IN ('SCDS','ICDS') -- Only want CDS     AND p.PRIMARY_MARKET = 0 		  -- Do not want primary market trades     AND p.INTERFUND_TRANSFER = 0	  -- Do not want interfund xfr     AND p.TWEB_CLOSE_DEALING = 0 	  -- Do not want TWEB Close 	AND p.[1615_DEALING] = 0 		  -- Do not want 1615 Dealing 	and VG_01_CREATETIME between @Start_Date and @End_Date 	and VG_01 = 1 and ISNULL(e.REASON,'') != 'False Positive'    --Thanos Rebuild IF OBJECT_ID('tempdb..#temp_CDS_ASSET_DATA', 'U') IS NOT NULL DROP TABLE #temp_CDS_ASSET_DATA select  	t.multi_fund_id,     	t.VG_01, 	t.REASON,    	t.[CDS Trade Type], 	t.Month_Year, 	EOMONTH([Trade Date]) AS [Date], 	@REPORT_NAME AS [Report_Name] into #temp_CDS_ASSET_DATA from #cds_pd_exceptions_DATA t IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FIDD_CDS_BY_ASSET_CLASS_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_FIDD_CDS_BY_ASSET_CLASS_DATA 	from #temp_CDS_ASSET_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_FIDD_CDS_BY_ASSET_CLASS_DATA 	SELECT * 	from #temp_CDS_ASSET_DATA  ----- FIDD CDS:  	--(a) Number not raised for review,  	--(b) % not Below 3 Quotes Requested,  	--(c) % not Below 3 quotes obtained,  	--(d) Number PDP reviewed,  	--(e) Number PDP raised for review,  	--(f) Number below 3 quotes requested 	--(g) Number below 3 quotes obtained --no of pd exceptions IF OBJECT_ID('tempdb..#CDS_VG_01', 'U') IS NOT NULL DROP TABLE #CDS_VG_01 select 	count(distinct  					case  						when VG_01 = 1 and ISNULL(e.REASON,'') != 'False Positive' 							then m.multi_fund_id 						else null  					end) AS [PD_exceptions],  	count(distinct  			case  				when  VG_01 = 1 and ISNULL(e.REASON,'') != 'False Positive'  AND f.[STATUS] NOT IN ('1A1','1A2','1A3') --If the final status is not in this list, the exception has passed the front desk. 					then m.multi_fund_id  				else null  			end) AS [CDS PD Exceptions Reviewed], -- Number of PDP reviewed 			-- Thanos: Added the reason condition around [CDS PD Exceptions Reviewed] 															 	CONCAT(YEAR(VG_01_CREATETIME), ' - ', MONTH(VG_01_CREATETIME)) as [Month_Year]    into #CDS_VG_01 from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE m left join #Max_Reason e  	on m.MULTI_FUND_ID+'_1' = e.ID left join VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE f 	on m.MULTI_FUND_ID+'_1' = f.ID left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p  	on m.MULTI_FUND_ID = p.MULTI_FUND_ID where  	m.DEALING_DESK = 'Fixed Income'   -- Only conisder FI 	AND p.INST_TYPE IN ('SCDS','ICDS') -- Only want CDS     AND p.PRIMARY_MARKET = 0 		  -- Do not want primary market trades     AND p.INTERFUND_TRANSFER = 0	  -- Do not want interfund xfr     AND p.TWEB_CLOSE_DEALING = 0 	  -- Do not want TWEB Close 	AND p.[1615_DEALING] = 0 		  -- Do not want 1615 Dealing 	and VG_01_CREATETIME between @Start_Date and @End_Date GROUP BY 	CONCAT(YEAR(VG_01_CREATETIME), ' - ', MONTH(VG_01_CREATETIME))  ----- FIDD CDS:  	--(a) Number not raised for review,  	--(b) % not Below 3 Quotes Requested,  	--(c) % not Below 3 quotes obtained,  	--(d) Number PDP reviewed,  	--(e) Number PDP raised for review,  	--(f) Number below 3 quotes requested 	--(g) Number below 3 quotes obtained -- 3QR exceptions IF OBJECT_ID('tempdb..#CDS_3QR', 'U') IS NOT NULL DROP TABLE #CDS_3QR select 	count(distinct  					case  						when VG_01_3QR = 1 							then m.multi_fund_id 						else null  					end) AS [No_of_3QR_exceptions], -- Percent not below 3 Quotes Requested 	CONCAT(YEAR(VG_01_3QR_CREATETIME), ' - ', MONTH(VG_01_3QR_CREATETIME)) as [Month_Year]    into #CDS_3QR from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE m left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p  	on m.MULTI_FUND_ID = p.MULTI_FUND_ID where  	m.DEALING_DESK = 'Fixed Income'   -- Only conisder FI 	AND p.INST_TYPE IN ('SCDS','ICDS') -- Only want CDS     AND p.PRIMARY_MARKET = 0 		  -- Do not want primary market trades     AND p.INTERFUND_TRANSFER = 0	  -- Do not want interfund xfr     AND p.TWEB_CLOSE_DEALING = 0 	  -- Do not want TWEB Close 	AND p.[1615_DEALING] = 0 		  -- Do not want 1615 Dealing 	and VG_01_3QR_CREATETIME between @Start_Date and @End_Date GROUP BY 	CONCAT(YEAR(VG_01_3QR_CREATETIME), ' - ', MONTH(VG_01_3QR_CREATETIME)) 	 ----- FIDD CDS:  	--(a) Number not raised for review,  	--(b) % not Below 3 Quotes Requested,  	--(c) % not Below 3 quotes obtained,  	--(d) Number PDP reviewed,  	--(e) Number PDP raised for review,  	--(f) Number below 3 quotes requested 	--(g) Number below 3 quotes obtained --3QO exceptions IF OBJECT_ID('tempdb..#CDS_3QO', 'U') IS NOT NULL DROP TABLE #CDS_3QO select 	1.0*count(distinct  					case  						when VG_01_3QO = 1 							then m.multi_fund_id 						else null  					end) AS [CDS 3QO Exceptions], -- Number below 3 Quotes Obtained 	CONCAT(YEAR(VG_01_3QO_CREATETIME), ' - ', MONTH(VG_01_3QO_CREATETIME)) as [Month_Year]    into #CDS_3QO from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE m left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p  	on m.MULTI_FUND_ID = p.MULTI_FUND_ID where  	m.DEALING_DESK = 'Fixed Income'   -- Only conisder FI 	AND p.INST_TYPE IN ('SCDS','ICDS') -- Only want CDS     AND p.PRIMARY_MARKET = 0 		  -- Do not want primary market trades     AND p.INTERFUND_TRANSFER = 0	  -- Do not want interfund xfr     AND p.TWEB_CLOSE_DEALING = 0 	  -- Do not want TWEB Close 	AND p.[1615_DEALING] = 0 		  -- Do not want 1615 Dealing 	and VG_01_3QO_CREATETIME between @Start_Date and @End_Date GROUP BY 	CONCAT(YEAR(VG_01_3QO_CREATETIME), ' - ', MONTH(VG_01_3QO_CREATETIME))  ----- FIDD CDS:  	--(a) Number not raised for review,  	--(b) % not Below 3 Quotes Requested,  	--(c) % not Below 3 quotes obtained,  	--(d) Number PDP reviewed,  	--(e) Number PDP raised for review,  	--(f) Number below 3 quotes requested 	--(g) Number below 3 quotes obtained --total trades IF OBJECT_ID('tempdb..#CDS_total', 'U') IS NOT NULL DROP TABLE #CDS_total select 	count(distinct m.multi_fund_id) AS [Total_pop],  	CONCAT(YEAR([Trade Date]), ' - ', MONTH([Trade Date])) as [Month_Year]    into #CDS_total from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE m left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p  	on m.MULTI_FUND_ID = p.MULTI_FUND_ID where  	m.DEALING_DESK = 'Fixed Income'   -- Only conisder FI 	AND p.INST_TYPE IN ('SCDS','ICDS') -- Only want CDS     AND p.PRIMARY_MARKET = 0 		  -- Do not want primary market trades     AND p.INTERFUND_TRANSFER = 0	  -- Do not want interfund xfr     AND p.TWEB_CLOSE_DEALING = 0 	  -- Do not want TWEB Close 	AND p.[1615_DEALING] = 0 		  -- Do not want 1615 Dealing 	and [Trade Date] between @Start_Date and @End_Date GROUP BY 	CONCAT(YEAR([Trade Date]), ' - ', MONTH([Trade Date]))  ----- FIDD CDS:  	--(a) Number not raised for review,  	--(b) % not Below 3 Quotes Requested,  	--(c) % not Below 3 quotes obtained,  	--(d) Number PDP reviewed,  	--(e) Number PDP raised for review,  	--(f) Number below 3 quotes requested 	--(g) Number below 3 quotes obtained  	 --Thanos Rebuild IF OBJECT_ID('tempdb..#CDS_PRE_UNION', 'U') IS NOT NULL DROP TABLE #CDS_PRE_UNION select  	case  		when V.[PD_exceptions] > t.total_pop then 0.0 -- set to zero in the extreme scenario where exceptions are higher than no of trades         when t.Total_pop = 0				 then 100.0 		else 100.0-coalesce((100.0*V.[PD_exceptions]/t.total_pop),0)  	end as [CDS Percent not PDP], 	case  		when r.No_of_3QR_exceptions > t.total_pop then 0.0 -- set to zero in the extreme scenario where exceptions are higher than no of trades 		when t.Total_pop = 0				 then 100.0 		else 100.0-coalesce((100.0*r.No_of_3QR_exceptions/t.total_pop),0)  	end as [CDS Percent 3 Quotes Requested], 	case  		when o.[CDS 3QO Exceptions] > t.total_pop then 0.0 -- set to zero in the extreme scenario where exceptions are higher than no of trades 		when t.Total_pop = 0				 then 100.0 		else 100.0-coalesce((100.0*o.[CDS 3QO Exceptions]/t.total_pop),0)  	end as [CDS Percent 3 Quotes Obtained], 	coalesce(V.[cds pd exceptions reviewed],0) as [CDS PD Exceptions Reviewed], 	coalesce(r.[No_of_3QR_exceptions], 0) as [CDS 3QR Exceptions], 	coalesce(o.[CDS 3QO Exceptions], 0) as [CDS 3QO Exceptions], 	t.Month_Year, 	EOMONTH(CONVERT(date,concat(t.month_year,'-01'))) AS [Date], 	@REPORT_NAME AS [Report_Name]   INTO #CDS_PRE_UNION from #CDS_total t  left join #CDS_VG_01 v on v.[Month_Year] = t.month_year left join #CDS_3QR r on r.Month_Year = t.Month_Year left join #CDS_3QO o on o.Month_Year = t.Month_Year  IF OBJECT_ID('tempdb..#temp_CDS_type', 'U') IS NOT NULL DROP TABLE #temp_CDS_type select  	[CDS Percent not PDP] as [Value], 	'CDS Percent not PDP' as [Type], 	Month_Year, 	[Date], 	Report_Name into #temp_CDS_type from #CDS_PRE_UNION  union  select  	[CDS Percent 3 Quotes Requested] as [Value], 	'CDS Percent 3 Quotes Requested' as [Type], 	Month_Year, 	[Date], 	Report_Name from #CDS_PRE_UNION  union  select  	[CDS Percent 3 Quotes Obtained] as [Value], 	'CDS Percent 3 Quotes Obtained' as [Type], 	Month_Year, 	[Date], 	Report_Name from #CDS_PRE_UNION  union  select  	[CDS PD Exceptions Reviewed] as [Value], 	'CDS PD Exceptions Reviewed' as [Type], 	Month_Year, 	[Date], 	Report_Name from #CDS_PRE_UNION  union  select  	[CDS 3QR Exceptions] as [Value], 	'CDS 3QR Exceptions' as [Type], 	Month_Year, 	[Date], 	Report_Name from #CDS_PRE_UNION  union  select  	[CDS 3QO Exceptions] as [Value], 	'CDS 3QO Exceptions' as [Type], 	Month_Year, 	[Date], 	Report_Name from #CDS_PRE_UNION  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_CDS_BY_EXCEPTION_TYPE', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_CDS_BY_EXCEPTION_TYPE 	from #temp_CDS_type ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_CDS_BY_EXCEPTION_TYPE 	SELECT * 	from #temp_CDS_type   IF OBJECT_ID('tempdb..#CDS_VG_01_DATA', 'U') IS NOT NULL DROP TABLE #CDS_VG_01_DATA select 	m.multi_fund_id,  	case  		when f.[STATUS] NOT IN ('1A1','1A2','1A3') then 1  		else 0  	end as IS_REVIEWED, 	VG_01_3QR, 	VG_01_3QO,  	 -- Number of PDP exceptions (minus False Positives) 	CONCAT(YEAR(VG_01_CREATETIME), ' - ', MONTH(VG_01_CREATETIME)) as [Month_Year], 	@REPORT_NAME as [Report_Name]  into #CDS_VG_01_DATA from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE m left join #Max_Reason e  	on m.MULTI_FUND_ID+'_1' = e.ID left join VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE f 	on m.MULTI_FUND_ID+'_1' = f.ID left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p  	on m.MULTI_FUND_ID = p.MULTI_FUND_ID where  	m.DEALING_DESK = 'Fixed Income'   -- Only conisder FI 	AND p.INST_TYPE IN ('SCDS','ICDS') -- Only want CDS     AND p.PRIMARY_MARKET = 0 		  -- Do not want primary market trades     AND p.INTERFUND_TRANSFER = 0	  -- Do not want interfund xfr     AND p.TWEB_CLOSE_DEALING = 0 	  -- Do not want TWEB Close 	AND p.[1615_DEALING] = 0 		  -- Do not want 1615 Dealing 	and VG_01_CREATETIME between @Start_Date and @End_Date  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_CDS_BY_EXCEPTION_TYPE_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_CDS_BY_EXCEPTION_TYPE_DATA 	from #CDS_VG_01_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_CDS_BY_EXCEPTION_TYPE_DATA 	SELECT * 	from #CDS_VG_01_DATA  -----FIDD SWAP trades that are not a PD exception as a % of population (minus false positives), split by asset class -- numerator by create date  IF OBJECT_ID('tempdb..#temp_swap_createtime', 'U') IS NOT NULL DROP TABLE #temp_swap_createtime SELECT 1.0*count(distinct case when VG_01 = 1 AND ISNULL(e.REASON,'') != 'False Positive'                                                                          then m.multi_fund_id else null end) AS [No_of_Exceptions],                                         	p.inst_type as [CDS Trade Type], 	CONCAT(YEAR(VG_01_CREATETIME), ' - ', MONTH(VG_01_CREATETIME)) as [Month_Year] 	into #temp_swap_createtime from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE m  left join #Max_Reason e  	on m.MULTI_FUND_ID+'_1' = e.ID left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p  	on m.MULTI_FUND_ID = p.MULTI_FUND_ID where  	m.DEALING_DESK = 'Fixed Income'   -- Only conisder FI 	AND p.INST_TYPE IN ('IRS','BASIS','ZCS','IFS','ASWP','CCS','CASWP', 'SWAP') -- Want to exclude SCDS and ICDS     AND p.PRIMARY_MARKET = 0 		  -- Do not want primary market trades     AND p.INTERFUND_TRANSFER = 0	  -- Do not want interfund xfr     AND p.TWEB_CLOSE_DEALING = 0 	  -- Do not want TWEB Close 	AND p.[1615_DEALING] = 0 		  -- Do not want 1615 Dealing 	and VG_01_CREATETIME between @Start_Date and @End_Date group by  p.inst_type, 	CONCAT(YEAR(VG_01_CREATETIME), ' - ', MONTH(VG_01_CREATETIME))  -----FIDD SWAP trades that are not a PD exception as a % of population (minus false positives), split by asset class --denominator by trade date IF OBJECT_ID('tempdb..#temp_swap_trade_date', 'U') IS NOT NULL DROP TABLE #temp_swap_trade_date select  count(distinct m.multi_fund_id) AS [Total_Pop], 	EOMONTH([Trade Date]) AS [Trade Date],                                          		p.inst_type as [CDS Trade Type],                                         	CONCAT(YEAR([Trade Date]), ' - ', MONTH([Trade Date])) as [Month_Year] into #temp_swap_trade_date from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE m  left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p  	on m.MULTI_FUND_ID = p.MULTI_FUND_ID where  	m.DEALING_DESK = 'Fixed Income'   -- Only conisder FI 	AND p.INST_TYPE IN ('IRS','BASIS','ZCS','IFS','ASWP','CCS','CASWP', 'SWAP') -- Want to exclude SCDS and ICDS     AND p.PRIMARY_MARKET = 0 		  -- Do not want primary market trades     AND p.INTERFUND_TRANSFER = 0	  -- Do not want interfund xfr     AND p.TWEB_CLOSE_DEALING = 0 	  -- Do not want TWEB Close 	AND p.[1615_DEALING] = 0 		  -- Do not want 1615 Dealing 	and [Trade Date] between @Start_Date and @End_Date group by  p.inst_type, 	CONCAT(YEAR([Trade Date]), ' - ', MONTH([Trade Date])), EOMONTH([Trade Date])  -----FIDD SWAP trades that are not a PD exception as a % of population (minus false positives), split by asset class -- numerator by create date total swaps IF OBJECT_ID('tempdb..#temp_swap_createtime_total', 'U') IS NOT NULL DROP TABLE #temp_swap_createtime_total SELECT 1.0*count(distinct case when VG_01 = 1 AND ISNULL(e.REASON,'') != 'False Positive'                                                                          then m.multi_fund_id else null end) AS [No_of_Exceptions],                                         'Total Swaps' as [CDS Trade Type], 	CONCAT(YEAR(VG_01_CREATETIME), ' - ', MONTH(VG_01_CREATETIME)) as [Month_Year] 	into #temp_swap_createtime_total from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE m  left join #Max_Reason e  	on m.MULTI_FUND_ID+'_1' = e.ID left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p  	on m.MULTI_FUND_ID = p.MULTI_FUND_ID where  	m.DEALING_DESK = 'Fixed Income'   -- Only conisder FI 	AND p.INST_TYPE IN ('IRS','BASIS','ZCS','IFS','ASWP','CCS','CASWP', 'SWAP') -- Want to exclude SCDS and ICDS     AND p.PRIMARY_MARKET = 0 		  -- Do not want primary market trades     AND p.INTERFUND_TRANSFER = 0	  -- Do not want interfund xfr     AND p.TWEB_CLOSE_DEALING = 0 	  -- Do not want TWEB Close 	AND p.[1615_DEALING] = 0 		  -- Do not want 1615 Dealing 	and VG_01_CREATETIME between @Start_Date and @End_Date group by  	CONCAT(YEAR(VG_01_CREATETIME), ' - ', MONTH(VG_01_CREATETIME))  -----FIDD SWAP trades that are not a PD exception as a % of population (minus false positives), split by asset class --denominator by trade date total swaps IF OBJECT_ID('tempdb..#temp_swap_trade_date_total', 'U') IS NOT NULL DROP TABLE #temp_swap_trade_date_total select  count(distinct m.multi_fund_id) AS [Total_Pop], 	EOMONTH([Trade Date]) AS [Trade Date],                                          		'Total Swaps' as [CDS Trade Type],                                         	CONCAT(YEAR([Trade Date]), ' - ', MONTH([Trade Date])) as [Month_Year] into #temp_swap_trade_date_total from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE m  left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p  	on m.MULTI_FUND_ID = p.MULTI_FUND_ID where  	m.DEALING_DESK = 'Fixed Income'   -- Only conisder FI 	AND p.INST_TYPE IN ('IRS','BASIS','ZCS','IFS','ASWP','CCS','CASWP', 'SWAP') -- Want to exclude SCDS and ICDS     AND p.PRIMARY_MARKET = 0 		  -- Do not want primary market trades     AND p.INTERFUND_TRANSFER = 0	  -- Do not want interfund xfr     AND p.TWEB_CLOSE_DEALING = 0 	  -- Do not want TWEB Close 	AND p.[1615_DEALING] = 0 		  -- Do not want 1615 Dealing 	and [Trade Date] between @Start_Date and @End_Date group by  	CONCAT(YEAR([Trade Date]), ' - ', MONTH([Trade Date])), EOMONTH([Trade Date])  -----FIDD SWAP trades that are not a PD exception as a % of population (minus false positives), split by asset class --Thanos Rebuild: need to use trade population first and then do a left join to exceptions.  --Doing this will ensure that we get trade data for Apr-18 where no exceptions exist IF OBJECT_ID('tempdb..#temp_swap', 'U') IS NOT NULL DROP TABLE #temp_swap select  	case  		when c.No_of_Exceptions > t.Total_Pop	then 0.0 -- set to zero percent in the extreme scenario where exceptions are higher than the no of trades  		when t.Total_Pop = 0					then 100.0 		else 100.0-coalesce((100.0*c.No_of_Exceptions/t.Total_Pop),0)  	end as [Percent_Not_PDP_Not_FP], 	t.[CDS Trade Type], 	t.Month_Year, 	EOMONTH([Trade Date]) AS [Date], 	@REPORT_NAME AS [Report_Name] into #temp_swap from #temp_swap_trade_date t left join #temp_swap_createtime c on t.[CDS Trade Type] = c.[CDS Trade Type]and t.Month_Year = c.Month_Year union select  	case  		when cc.No_of_Exceptions > tt.Total_Pop then 0.0 -- set to zero percent in the extreme scenario where exceptions are higher than the no of trades 		when tt.Total_Pop = 0					then 100.0 		else 100.0-coalesce((100.0*cc.No_of_Exceptions/tt.Total_Pop),0)  	end as [Percent_Not_PDP_Not_FP], 	tt.[CDS Trade Type], 	tt.Month_Year, 	EOMONTH([Trade Date]) AS [Date], 	@REPORT_NAME AS [Report_Name] from #temp_swap_trade_date_total tt left join #temp_swap_createtime_total cc on tt.[CDS Trade Type] = cc.[CDS Trade Type]and tt.Month_Year = cc.Month_Year  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_SWAP_BY_TYPE', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_SWAP_BY_TYPE 	from #temp_swap ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_SWAP_BY_TYPE 	SELECT * 	from #temp_swap  IF OBJECT_ID('tempdb..#temp_swap_createtime_DATA', 'U') IS NOT NULL DROP TABLE #temp_swap_createtime_DATA select 	m.multi_fund_id, 	vg_01,                                         	p.inst_type as [CDS Trade Type], 	e.REASON, 	m.[Trade Date], 	CONCAT(YEAR(VG_01_CREATETIME), ' - ', MONTH(VG_01_CREATETIME)) as [Month_Year] 	into #temp_swap_createtime_DATA from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE m  left join #Max_Reason e  	on m.MULTI_FUND_ID+'_1' = e.ID left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p  	on m.MULTI_FUND_ID = p.MULTI_FUND_ID where  	m.DEALING_DESK = 'Fixed Income'   -- Only conisder FI 	AND p.INST_TYPE IN ('IRS','BASIS','ZCS','IFS','ASWP','CCS','CASWP', 'SWAP') -- Want to exclude SCDS and ICDS     AND p.PRIMARY_MARKET = 0 		  -- Do not want primary market trades     AND p.INTERFUND_TRANSFER = 0	  -- Do not want interfund xfr     AND p.TWEB_CLOSE_DEALING = 0 	  -- Do not want TWEB Close 	AND p.[1615_DEALING] = 0 		  -- Do not want 1615 Dealing 	and VG_01_CREATETIME between @Start_Date and @End_Date   -----FIDD SWAP trades that are not a PD exception as a % of population (minus false positives), split by asset class --Thanos Rebuild: need to use trade population first and then do a left join to exceptions.  --Doing this will ensure that we get trade data for Apr-18 where no exceptions exist IF OBJECT_ID('tempdb..#temp_swap_DATA', 'U') IS NOT NULL DROP TABLE #temp_swap_DATA select  	t.multi_fund_id, 	t.vg_01, 	t.REASON,                                      	t.[CDS Trade Type], 	t.Month_Year, 	EOMONTH([Trade Date]) AS [Date], 	@REPORT_NAME AS [Report_Name] into #temp_swap_DATA from #temp_swap_createtime_DATA t  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_SWAP_BY_TYPE_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_SWAP_BY_TYPE_DATA 	from #temp_swap_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_SWAP_BY_TYPE_DATA 	SELECT * 	from #temp_swap_DATA   --VG 01 EXCEPTIONS IF OBJECT_ID('tempdb..#TEMP_vg01_CREATETIME', 'U') IS NOT NULL DROP TABLE #TEMP_vg01_CREATETIME select  	1.0*count(distinct 				case  					when VG_01 = 1 AND ISNULL(e.Reason,'') != 'False Positive' 						then m.multi_fund_id  					else null  				end) AS [VG_01_EXCEPTIONS],  			--Thanos: Added false positive condition - cross check with business reqs			 		  		count(distinct  			case  				when  VG_01 = 1 AND ISNULL(e.Reason,'') != 'False Positive' AND f.[STATUS] NOT IN ('1A1','1A2','1A3') --If the final status is not in this list, the exception has passed the front desk. 					then m.multi_fund_id  				else null  			end) AS [SWAP PD Exceptions Reviewed], 			--Thanos: Added false positive condition - cross check with business reqs 	CONCAT(YEAR(VG_01_CREATETIME), ' - ', MONTH(VG_01_CREATETIME)) as [Month_Year] INTO #TEMP_vg01_CREATETIME from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE m left join #Max_Reason e  	on m.MULTI_FUND_ID+'_1' = e.ID left join VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE f 	on m.MULTI_FUND_ID+'_1' = f.ID left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p  	on m.MULTI_FUND_ID = p.MULTI_FUND_ID where  	m.DEALING_DESK = 'Fixed Income'   -- Only conisder FI 	AND p.INST_TYPE IN ('IRS','BASIS','ZCS','IFS','ASWP','CCS','CASWP', 'SWAP') -- Want to exclude SCDS and ICDS     AND p.PRIMARY_MARKET = 0 		  -- Do not want primary market trades     AND p.INTERFUND_TRANSFER = 0	  -- Do not want interfund xfr     AND p.TWEB_CLOSE_DEALING = 0 	  -- Do not want TWEB Close 	AND p.[1615_DEALING] = 0 		  -- Do not want 1615 Dealing 	and VG_01_CREATETIME between @Start_Date and @End_Date GROUP BY CONCAT(YEAR(VG_01_CREATETIME), ' - ', MONTH(VG_01_CREATETIME))  --3QO EXCEPTIONS IF OBJECT_ID('tempdb..#TEMP_3QO_CREATETIME', 'U') IS NOT NULL DROP TABLE #TEMP_3QO_CREATETIME select  	1.0*count(distinct 				case  					when VG_01_3QO = 1      						then m.multi_fund_id  					else null  				end) AS [3QO_EXCEPTION],  		count(distinct  					case  						when VG_01_3QO = 1 							then m.multi_fund_id 						else null  					end) AS [SWAP 3QO Exceptions], -- Number below 3 Quotes Obtained  	CONCAT(YEAR(VG_01_3QO_CREATETIME), ' - ', MONTH(VG_01_3QO_CREATETIME)) as [Month_Year] INTO #TEMP_3QO_CREATETIME from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE m left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p  	on m.MULTI_FUND_ID = p.MULTI_FUND_ID where  	m.DEALING_DESK = 'Fixed Income'   -- Only conisder FI 	AND p.INST_TYPE IN ('IRS','BASIS','ZCS','IFS','ASWP','CCS','CASWP', 'SWAP') -- Want to exclude SCDS and ICDS     AND p.PRIMARY_MARKET = 0 		  -- Do not want primary market trades     AND p.INTERFUND_TRANSFER = 0	  -- Do not want interfund xfr     AND p.TWEB_CLOSE_DEALING = 0 	  -- Do not want TWEB Close 	AND p.[1615_DEALING] = 0 		  -- Do not want 1615 Dealing 	and VG_01_3QO_CREATETIME between @Start_Date and @End_Date GROUP BY CONCAT(YEAR(VG_01_3QO_CREATETIME), ' - ', MONTH(VG_01_3QO_CREATETIME))  --3QR EXCEPTIONS IF OBJECT_ID('tempdb..#TEMP_3QR_CREATETIME', 'U') IS NOT NULL DROP TABLE #TEMP_3QR_CREATETIME SELECT  	1.0*count(distinct 				case  					when VG_01_3QR = 1      						then m.multi_fund_id  					else null  				end) AS [3QR_EXCEPTIONS],  		count(distinct  					case  						when VG_01_3QR = 1 							then m.multi_fund_id 						else null  					end) AS [SWAP 3QR Exceptions], 	CONCAT(YEAR(VG_01_3QR_CREATETIME), ' - ', MONTH(VG_01_3QR_CREATETIME)) as [Month_Year] INTO #TEMP_3QR_CREATETIME from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE m left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p  	on m.MULTI_FUND_ID = p.MULTI_FUND_ID where  	m.DEALING_DESK = 'Fixed Income'   -- Only conisder FI 	AND p.INST_TYPE IN ('IRS','BASIS','ZCS','IFS','ASWP','CCS','CASWP', 'SWAP') -- Want to exclude SCDS and ICDS     AND p.PRIMARY_MARKET = 0 		  -- Do not want primary market trades     AND p.INTERFUND_TRANSFER = 0	  -- Do not want interfund xfr     AND p.TWEB_CLOSE_DEALING = 0 	  -- Do not want TWEB Close 	AND p.[1615_DEALING] = 0 		  -- Do not want 1615 Dealing 	and VG_01_3QR_CREATETIME between @Start_Date and @End_Date GROUP BY CONCAT(YEAR(VG_01_3QR_CREATETIME), ' - ', MONTH(VG_01_3QR_CREATETIME))  --TOTAL TRADES IF OBJECT_ID('tempdb..#TEMP_SWAP_TOTAL', 'U') IS NOT NULL DROP TABLE #TEMP_SWAP_TOTAL SELECT count(distinct m.multi_fund_id) AS TOTAL_POP, CONCAT(YEAR([Trade Date]), ' - ', MONTH([Trade Date])) as [Month_Year] INTO #TEMP_SWAP_TOTAL from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE m left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p  	on m.MULTI_FUND_ID = p.MULTI_FUND_ID where  	m.DEALING_DESK = 'Fixed Income'   -- Only conisder FI 	AND p.INST_TYPE IN ('IRS','BASIS','ZCS','IFS','ASWP','CCS','CASWP', 'SWAP') -- Want to exclude SCDS and ICDS     AND p.PRIMARY_MARKET = 0 		  -- Do not want primary market trades     AND p.INTERFUND_TRANSFER = 0	  -- Do not want interfund xfr     AND p.TWEB_CLOSE_DEALING = 0 	  -- Do not want TWEB Close 	AND p.[1615_DEALING] = 0 		  -- Do not want 1615 Dealing 	and [Trade Date] between @Start_Date and @End_Date GROUP BY CONCAT(YEAR([Trade Date]), ' - ', MONTH([Trade Date]))  --FIDD SWAP trades that are not a PD exception as a % of population (minus false positives), split by asset class -- Thanos Rebuild: Cater for the extreme scenario where exceptions are higher than no of trades IF OBJECT_ID('tempdb..#swap_pre_union', 'U') IS NOT NULL DROP TABLE #swap_pre_union SELECT  	CASE  		WHEN VG_01_EXCEPTIONS > T.TOTAL_POP THEN 0.0 -- set to zero percent in the extreme scenario where exceptions are higher than the no of trades  		WHEN T.TOTAL_POP = 0				THEN 100.0 		ELSE 100.0-COALESCE((100.0*VG_01_EXCEPTIONS/T.TOTAL_POP), 0)  	END AS [SWAP Percent Not PDP], 	CASE  		WHEN QO.[3QO_EXCEPTION] > T.TOTAL_POP	THEN 0.0 -- set to zero percent in the extreme scenario where exceptions are higher than the no of trades  		WHEN T.TOTAL_POP = 0					THEN 100.0 		ELSE 100.0-COALESCE((100.0*QO.[3QO_EXCEPTION]/T.TOTAL_POP),0)  	END AS [SWAP Percent 3 Quotes Obtained],	 	CASE  		WHEN QR.[3QR_EXCEPTIONS] > T.TOTAL_POP	THEN 0.0 -- set to zero percent in the extreme scenario where exceptions are higher than the no of trades  		WHEN T.TOTAL_POP = 0					THEN 100.0 		ELSE 100.0-COALESCE((100.0*QR.[3QR_EXCEPTIONS]/T.TOTAL_POP),0)  	END AS [SWAP Percent 3 Quotes Requested],	 	COALESCE(VG.[SWAP PD Exceptions Reviewed],0) AS [SWAP PD Exceptions Reviewed], 	COALESCE(QR.[SWAP 3QR Exceptions],0)AS [SWAP 3QR Exceptions], 	COALESCE(QO.[SWAP 3QO Exceptions],0) AS [SWAP 3QO Exceptions], 	T.Month_Year, 	EOMONTH(CONVERT(date,concat(t.month_year, '-01'))) AS [Date], 	@REPORT_NAME AS [Report_Name] INTO #swap_pre_union FROM #TEMP_SWAP_TOTAL T LEFT JOIN #TEMP_vg01_CREATETIME VG ON T.Month_Year = VG.Month_Year LEFT JOIN #TEMP_3QO_CREATETIME QO ON T.Month_Year = QO.Month_Year LEFT JOIN #TEMP_3QR_CREATETIME QR ON T.Month_Year = QR.Month_Year   IF OBJECT_ID('tempdb..#temp_swap_class', 'U') IS NOT NULL DROP TABLE #temp_swap_class select 	[SWAP Percent Not PDP] as [Value], 	'SWAP Percent Not PDP' as [Type], 	Month_Year, 	[Date], 	Report_Name into #temp_swap_class from #swap_pre_union  union   select 	[SWAP Percent 3 Quotes Obtained] as [Value], 	'SWAP Percent 3 Quotes Obtained' as [Type], 	Month_Year, 	[Date], 	Report_Name from #swap_pre_union  union   select 	[SWAP Percent 3 Quotes Requested] as [Value], 	'SWAP Percent 3 Quotes Requested' as [Type], 	Month_Year, 	[Date], 	Report_Name from #swap_pre_union  union   select 	[SWAP PD Exceptions Reviewed] as [Value], 	'SWAP PD Exceptions Reviewed' as [Type], 	Month_Year, 	[Date], 	Report_Name from #swap_pre_union  union   select 	[SWAP 3QR Exceptions] as [Value], 	'SWAP 3QR Exceptions' as [Type], 	Month_Year, 	[Date], 	Report_Name from #swap_pre_union  union   select 	[SWAP 3QO Exceptions] as [Value], 	'SWAP 3QO Exceptions' as [Type], 	Month_Year, 	[Date], 	Report_Name from #swap_pre_union  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_SWAP_BY_ASSET_CLASS', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_SWAP_BY_ASSET_CLASS 	from #temp_swap_class ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_SWAP_BY_ASSET_CLASS 	SELECT * 	from #temp_swap_class  --VG 01 EXCEPTIONS IF OBJECT_ID('tempdb..#TEMP_vg01_CREATETIME_DATA', 'U') IS NOT NULL DROP TABLE #TEMP_vg01_CREATETIME_DATA select  	m.VG_01, 	m.VG_01_3QO, 	m.VG_01_3QR, 	e.Reason, 	m.multi_fund_id,  	case  		when f.[STATUS] NOT IN ('1A1','1A2','1A3') then 1  		else 0  	end as IS_REVIEWED, 	CONCAT(YEAR(VG_01_CREATETIME), ' - ', MONTH(VG_01_CREATETIME)) as [Month_Year], 	@REPORT_NAME as [Report_Name] INTO #TEMP_vg01_CREATETIME_DATA from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE m left join #Max_Reason e  	on m.MULTI_FUND_ID+'_1' = e.ID left join VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE f 	on m.MULTI_FUND_ID+'_1' = f.ID left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p  	on m.MULTI_FUND_ID = p.MULTI_FUND_ID where  	m.DEALING_DESK = 'Fixed Income'   -- Only conisder FI 	AND p.INST_TYPE IN ('IRS','BASIS','ZCS','IFS','ASWP','CCS','CASWP', 'SWAP') -- Want to exclude SCDS and ICDS     AND p.PRIMARY_MARKET = 0 		  -- Do not want primary market trades     AND p.INTERFUND_TRANSFER = 0	  -- Do not want interfund xfr     AND p.TWEB_CLOSE_DEALING = 0 	  -- Do not want TWEB Close 	AND p.[1615_DEALING] = 0 		  -- Do not want 1615 Dealing 	and VG_01_CREATETIME between @Start_Date and @End_Date  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_SWAP_BY_ASSET_CLASS_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_SWAP_BY_ASSET_CLASS_DATA 	from #TEMP_vg01_CREATETIME_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_SWAP_BY_ASSET_CLASS_DATA 	SELECT * 	from #TEMP_vg01_CREATETIME_DATA  ----Number of trades that have raised a NWQ Exception IF OBJECT_ID('tempdb..#temp_nwq', 'U') IS NOT NULL DROP TABLE #temp_nwq select  	count(distinct  			case  				when VG_07 = 1 and ISNULL(e.REASON,'') != 'False Positive' 					then m.multi_fund_id  				else null  			end) AS [Num_NWQ_exceptions],                            	case  		when p.DEBT_DERIV = 'Debt' 			then 'Cash Bonds' 		WHEN m.INST_TYPE IN ('SCDS','ICDS') 			then 'CDS' 		WHEN m.INST_TYPE IN ('IRS', 'BASIS', 'ZCS', 'IFS', 'ASWP', 'CCS', 'CASWP', 'SWAP') 			THEN 'Swaps' 	end as [Trade Type],     CONCAT(YEAR(VG_07_CREATETIME), ' - ', MONTH(VG_07_CREATETIME)) as [Month_Year], 	EOMONTH(VG_07_CREATETIME) AS [Date], 	@REPORT_NAME AS [Report_Name] into #temp_nwq from (SELECT DISTINCT MULTI_FUND_ID, INST_TYPE, DEALING_DESK, VG_07, VG_07_CREATETIME FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE) m left join #Max_Reason e  	on m.MULTI_FUND_ID+'_7' = e.ID left join (SELECT DISTINCT MULTI_FUND_ID, DEBT_DERIV FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) p  	on m.MULTI_FUND_ID = p.MULTI_FUND_ID where  	m.DEALING_DESK = 'Fixed Income'    	AND (p.DEBT_DERIV = 'Debt' OR m.INST_TYPE IN ('SCDS','ICDS','IRS', 'BASIS', 'ZCS', 'IFS', 'ASWP', 'CCS', 'CASWP', 'SWAP')) 	and VG_07_CREATETIME between @start_date and @end_date group by  	CONCAT(YEAR(VG_07_CREATETIME), ' - ', MONTH(VG_07_CREATETIME)), 	case  		when p.DEBT_DERIV = 'Debt' 			then 'Cash Bonds' 		WHEN m.INST_TYPE IN ('SCDS','ICDS') 			then 'CDS' 		WHEN m.INST_TYPE IN ('IRS', 'BASIS', 'ZCS', 'IFS', 'ASWP', 'CCS', 'CASWP', 'SWAP') 			THEN 'Swaps' 	end, 	EOMONTH(VG_07_CREATETIME)   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_NWQ_EXCEPTIONS', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_NWQ_EXCEPTIONS 	from #temp_nwq ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_NWQ_EXCEPTIONS 	SELECT * 	from #temp_nwq   IF OBJECT_ID('tempdb..#temp_nwq_DATA', 'U') IS NOT NULL DROP TABLE #temp_nwq_DATA select  	m.MULTI_FUND_ID, 	m.vg_07, 	e.reason,                          	case  		when p.DEBT_DERIV = 'Debt' 			then 'Cash Bonds' 		WHEN m.INST_TYPE IN ('SCDS','ICDS') 			then 'CDS' 		WHEN m.INST_TYPE IN ('IRS', 'BASIS', 'ZCS', 'IFS', 'ASWP', 'CCS', 'CASWP', 'SWAP') 			THEN 'Swaps' 	end as [Trade Type],     CONCAT(YEAR(VG_07_CREATETIME), ' - ', MONTH(VG_07_CREATETIME)) as [Month_Year], 	EOMONTH(VG_07_CREATETIME) AS [Date], 	@REPORT_NAME AS [Report_Name] into #temp_nwq_DATA from (SELECT DISTINCT MULTI_FUND_ID, INST_TYPE, DEALING_DESK, VG_07, VG_07_CREATETIME FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE) m left join #Max_Reason e  	on m.MULTI_FUND_ID+'_7' = e.ID left join (SELECT DISTINCT MULTI_FUND_ID, DEBT_DERIV FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) p  	on m.MULTI_FUND_ID = p.MULTI_FUND_ID where  	m.DEALING_DESK = 'Fixed Income'    	AND (p.DEBT_DERIV = 'Debt' OR m.INST_TYPE IN ('SCDS','ICDS','IRS', 'BASIS', 'ZCS', 'IFS', 'ASWP', 'CCS', 'CASWP', 'SWAP')) 	and VG_07_CREATETIME between @start_date and @end_date  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_NWQ_EXCEPTIONS_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_NWQ_EXCEPTIONS_DATA 	from #temp_nwq_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_NWQ_EXCEPTIONS_DATA 	SELECT * 	from #temp_nwq_DATA  ---------FIDD Timely Ex counts -- Tim Ex: First Step: Calculate the number of orders Authorised IF OBJECT_ID('tempdb..#temp_tim_ex_total_authorised', 'U') IS NOT NULL DROP TABLE #temp_tim_ex_total_authorised SELECT  	COUNT(DISTINCT CASE WHEN pm.AUTH_TIME IS NOT NULL THEN pm.ORD_NUM ELSE NULL END) AS [Num_Orders_Authorised],     CONCAT(YEAR(pm.AUTH_TIME), ' - ', MONTH(pm.AUTH_TIME)) as [Month_Year]  into #temp_tim_ex_total_authorised FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER pm LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc 	ON pm.ORD_NUM = oc.PM_ORD LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p 	ON oc.TRD_ORD = p.ORD_NUM WHERE pm.DEALING_DESK = 'Fixed Income' 	AND pm.INTERFUND_TRANSFER = 'N' 	AND pm.PRIMARY_MARKET = 0 -- Exclude Primary Market Bond. Do not need to filter to Bond here as only Bonds can be primary market. 	AND ISNULL(p.FUTURE_ROLLS,0) = 0 	and pm.AUTH_TIME between @Start_Date and @End_Date GROUP BY  	CONCAT(YEAR(pm.AUTH_TIME), ' - ', MONTH(pm.AUTH_TIME))  --Tim Ex: Step Two: Create a tim_ex_creatime - This is the min of all different exceptions IF OBJECT_ID('tempdb..#temp_tim_ex_exceptions_v1', 'U') IS NOT NULL DROP TABLE #temp_tim_ex_exceptions_v1 select  	ORD_NUM, 	case  		when MIN(pm.vg_09_policy_createtime)  is not null then MIN(pm.vg_09_policy_createtime) 		when MIN(pm.vg_09_5_day_createtime)   is not null then MIN(pm.vg_09_5_day_createtime) 		when MIN(pm.vg_09_10_day_createtime)  is not null then MIN(pm.vg_09_10_day_createtime) 		when MIN(pm.vg_09_20_day_createtime)  is not null then MIN(pm.vg_09_20_day_createtime) 		when MIN(pm.vg_09_40_day_createtime)  is not null then MIN(pm.vg_09_40_day_createtime) 		when MIN(pm.vg_09_80_day_createtime)  is not null then MIN(pm.vg_09_80_day_createtime) 		when MIN(pm.vg_09_160_day_createtime) is not null then MIN(pm.vg_09_160_day_createtime) 		else null  	end as tim_ex_createtime , 	MAX(pm.Exception_Type) AS [Exception_Type], -- This takes Intra as precedence over Inter due to alphabetic ordering. 	case  		when MIN(pm.vg_09_policy_createtime)  is not null then 1 		when MIN(pm.vg_09_5_day_createtime)   is not null then 5 		when MIN(pm.vg_09_10_day_createtime)  is not null then 10 		when MIN(pm.vg_09_20_day_createtime)  is not null then 20 		when MIN(pm.vg_09_40_day_createtime)  is not null then 40 		when MIN(pm.vg_09_80_day_createtime)  is not null then 80 		when MIN(pm.vg_09_160_day_createtime) is not null then 160 		else null  	end as [Exception_Value] into #temp_tim_ex_exceptions_v1 from vista_reporting.dbo.MASTER_PM_ORDER pm   WHERE pm.DEALING_DESK = 'Fixed Income' 	AND pm.INTERFUND_TRANSFER = 'N' 	AND pm.PRIMARY_MARKET = 0 GROUP BY 	ORD_NUM  --Tim Ex: Step Three: Calculate the number of exceptions IF OBJECT_ID('tempdb..#temp_tim_ex_exceptions_v2', 'U') IS NOT NULL DROP TABLE #temp_tim_ex_exceptions_v2 SELECT  	1.00*COUNT(DISTINCT 			CASE 				WHEN ISNULL(Exception_Type,'') = 'Inter' and ISNULL(e.REASON,'') != 'False Positive'-- Thanos: We need to exclude false positives   					THEN te1.ORD_NUM 				ELSE NULL 			END) AS [Unfilled on day], 	1.00*COUNT(DISTINCT 			CASE 				WHEN Exception_Type IS NOT NULL and ISNULL(e.REASON,'') != 'False Positive'-- Thanos: We need to exclude false positives   					THEN te1.ORD_NUM 				ELSE NULL 			END) AS [All exceptions],     CONCAT(YEAR(te1.tim_ex_createtime), ' - ', MONTH(te1.tim_ex_createtime)) as [Month_Year]  into #temp_tim_ex_exceptions_v2 FROM #temp_tim_ex_exceptions_v1 te1 LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc 	ON te1.ORD_NUM = oc.PM_ORD		 LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p 	ON oc.TRD_ORD = p.ORD_NUM left join #Max_Reason e  	on e.ID = CONCAT(te1.ORD_NUM,'_9',Exception_Type,Exception_Value) --LEFT JOIN #max_reason e Thanos: Need to exclude false positives, not sure around the best way to join 	--on te1.ORD_NUM+'_9' = e.ID WHERE  	ISNULL(p.FUTURE_ROLLS,0) = 0 	and tim_ex_createtime between @Start_Date and @End_Date GROUP BY  	CONCAT(YEAR(te1.tim_ex_createtime), ' - ', MONTH(te1.tim_ex_createtime))  --Tim Ex: Step Four: Join all tables together and calculate the necessary values IF OBJECT_ID('tempdb..#TIMEX_PRE_UNION', 'U') IS NOT NULL DROP TABLE #TIMEX_PRE_UNION select  	auth.Num_Orders_Authorised, 	--exc.[Exceptions on day], 	--exc.[All exceptions], 	case  		when exc.[Unfilled on day] > auth.Num_Orders_Authorised then 0.0 -- set to zero in the extreme scenario where exceptions are higher than no of orders 		when auth.Num_Orders_Authorised = 0						then 0.0 		else 100.0-coalesce((100.0*exc.[Unfilled on day]/auth.Num_Orders_Authorised),0)  	end as [Percent_Filled_on_day], 	case  		when exc.[All exceptions] > auth.Num_Orders_Authorised	then 0.0 -- set to zero in the extreme scenario where exceptions are higher than no of orders 		when auth.Num_Orders_Authorised = 0						then 0.0 		else 100.0-coalesce((100.0*exc.[All exceptions]/auth.Num_Orders_Authorised),0)  	end as [Percent_Filled_within_threshold], 	auth.Month_Year, 	EOMONTH(CONVERT(DATE,CONCAT(auth.Month_Year,'-01'))) AS [Date], 	@REPORT_NAME AS [Report_Name] INTO #TIMEX_PRE_UNION	 from #temp_tim_ex_total_authorised auth left join #temp_tim_ex_exceptions_v2 exc  	on auth.Month_Year = exc.Month_Year  IF OBJECT_ID('tempdb..#temp_timely_ex', 'U') IS NOT NULL DROP TABLE #temp_timely_ex select 	Num_Orders_Authorised as [Value], 	'Orders Authorised' as [Type], 	Month_Year, 	[Date], 	Report_Name into #temp_timely_ex from #TIMEX_PRE_UNION  union  select 	[Percent_Filled_on_day] as [Value], 	'% Filled on day' as [Type], 	Month_Year, 	[Date], 	Report_Name from #TIMEX_PRE_UNION  union  select 	[Percent_Filled_within_threshold] as [Value], 	'% Filled within threshold' as [Type], 	Month_Year, 	[Date], 	Report_Name from #TIMEX_PRE_UNION   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_TIMELY_EX_EXCEPTIONS', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_TIMELY_EX_EXCEPTIONS 	from #temp_timely_ex ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_TIMELY_EX_EXCEPTIONS 	SELECT * 	from #temp_timely_ex   IF OBJECT_ID('tempdb..#temp_tim_ex_total_authorised_DATA', 'U') IS NOT NULL DROP TABLE #temp_tim_ex_total_authorised_DATA SELECT  	pm.ORD_NUM, 	pm.AUTH_TIME,     CONCAT(YEAR(pm.AUTH_TIME), ' - ', MONTH(pm.AUTH_TIME)) as [Month_Year]  into #temp_tim_ex_total_authorised_DATA FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER pm LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc 	ON pm.ORD_NUM = oc.PM_ORD LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p 	ON oc.TRD_ORD = p.ORD_NUM WHERE pm.DEALING_DESK = 'Fixed Income' 	AND pm.INTERFUND_TRANSFER = 'N' 	AND pm.PRIMARY_MARKET = 0 -- Exclude Primary Market Bond. Do not need to filter to Bond here as only Bonds can be primary market. 	AND ISNULL(p.FUTURE_ROLLS,0) = 0 	and pm.AUTH_TIME between @Start_Date and @End_Date   --Tim Ex: Step Two: Create a tim_ex_creatime - This is the min of all different exceptions IF OBJECT_ID('tempdb..#temp_tim_ex_exceptions_v1_DATA', 'U') IS NOT NULL DROP TABLE #temp_tim_ex_exceptions_v1_DATA select  	ORD_NUM, 	case  		when MIN(pm.vg_09_policy_createtime)  is not null then MIN(pm.vg_09_policy_createtime) 		when MIN(pm.vg_09_5_day_createtime)   is not null then MIN(pm.vg_09_5_day_createtime) 		when MIN(pm.vg_09_10_day_createtime)  is not null then MIN(pm.vg_09_10_day_createtime) 		when MIN(pm.vg_09_20_day_createtime)  is not null then MIN(pm.vg_09_20_day_createtime) 		when MIN(pm.vg_09_40_day_createtime)  is not null then MIN(pm.vg_09_40_day_createtime) 		when MIN(pm.vg_09_80_day_createtime)  is not null then MIN(pm.vg_09_80_day_createtime) 		when MIN(pm.vg_09_160_day_createtime) is not null then MIN(pm.vg_09_160_day_createtime) 		else null  	end as tim_ex_createtime , 	MAX(pm.Exception_Type) AS [Exception_Type], -- This takes Intra as precedence over Inter due to alphabetic ordering. 	case  		when MIN(pm.vg_09_policy_createtime)  is not null then 1 		when MIN(pm.vg_09_5_day_createtime)   is not null then 5 		when MIN(pm.vg_09_10_day_createtime)  is not null then 10 		when MIN(pm.vg_09_20_day_createtime)  is not null then 20 		when MIN(pm.vg_09_40_day_createtime)  is not null then 40 		when MIN(pm.vg_09_80_day_createtime)  is not null then 80 		when MIN(pm.vg_09_160_day_createtime) is not null then 160 		else null  	end as [Exception_Value] into #temp_tim_ex_exceptions_v1_DATA from vista_reporting.dbo.MASTER_PM_ORDER pm   WHERE pm.DEALING_DESK = 'Fixed Income' 	AND pm.INTERFUND_TRANSFER = 'N' 	AND pm.PRIMARY_MARKET = 0 GROUP BY 	ORD_NUM --Tim Ex: Step Two: Create a tim_ex_creatime - This is the min of all different exceptions IF OBJECT_ID('tempdb..#temp_tim_ex_DATA', 'U') IS NOT NULL DROP TABLE #temp_tim_ex_DATA select  	t.ORD_NUM, 	t.AUTH_TIME, 	t.MONTH_YEAR, 	g.tim_ex_createtime, 	g.[Exception_Type], 	g.[Exception_Value], 	@REPORT_NAME as [Report_Name] 	into #temp_tim_ex_DATA 	from #temp_tim_ex_total_authorised_DATA t 	left join #temp_tim_ex_exceptions_v1 g on t.ORD_NUM = g.ORD_NUM  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_TIMELY_EX_EXCEPTIONS_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_TIMELY_EX_EXCEPTIONS_DATA 	from #temp_tim_ex_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_TIMELY_EX_EXCEPTIONS_DATA 	SELECT * 	from #temp_tim_ex_DATA   ----Count of each exception type  IF OBJECT_ID('tempdb..#temp_exceptions', 'U') IS NOT NULL DROP TABLE #temp_exceptions select  'Timely Recording' AS [Exception_Type],               count(distinct MULTI_FUND_ID) AS [Value],               CONCAT(YEAR(mf.VG_10_CREATETIME), ' - ', MONTH(mf.VG_10_CREATETIME)) as [Month_Year], 			  EOMONTH(mf.VG_10_CREATETIME) AS [Date], 			  @REPORT_NAME AS [Report_Name] into #temp_exceptions from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE mf left join #Max_Reason e on mf.MULTI_FUND_ID+'_10' = e.ID where  	mf.VG_10 = 1 and  	mf.DEALING_DESK = 'Fixed Income' and  	ISNULL(e.reason,'') != 'False Positive'  and  	mf.VG_10_CREATETIME between @start_date and @end_date group by CONCAT(YEAR(mf.VG_10_CREATETIME), ' - ', MONTH(mf.VG_10_CREATETIME)), EOMONTH(mf.VG_10_CREATETIME) union  select  'Order Aggregation',               count(distinct oa_id),               CONCAT(YEAR(trd.VG_13_CREATETIME), ' - ', MONTH(trd.VG_13_CREATETIME)) as [Month_Year], 			  EOMONTH(trd.VG_13_CREATETIME) AS [Date], 			  @REPORT_NAME AS [Report_Name] from VISTA_REPORTING.dbo.MASTER_TRD_ORDER_TABLE trd left join #Max_Reason e on trd.oa_id+'_13' = e.ID where 	trd.VG_13 = 1 and  	trd.DEALING_DESK = 'Fixed Income' and  	ISNULL(e.reason,'') != 'False Positive' and  	trd.VG_13_CREATETIME between @start_date and @end_date group by CONCAT(YEAR(trd.VG_13_CREATETIME), ' - ', MONTH(trd.VG_13_CREATETIME)), EOMONTH(trd.VG_13_CREATETIME) union  select  'Order Priority',               count(distinct ORD_NUM),               CONCAT(YEAR(op.VG_14_CREATETIME), ' - ', MONTH(op.VG_14_CREATETIME)) as [Month_Year], 			  EOMONTH(op.VG_14_CREATETIME) AS [Date], 			  @REPORT_NAME AS [Report_Name] from VISTA_REPORTING.dbo.MASTER_ORDER_PRIORITY_TABLE op left join #Max_Reason e on op.ord_num+'_14' = e.ID where 	op.VG_14 = 1 and  	op.DEALING_DESK = 'Fixed Income' and  	ISNULL(e.reason,'') != 'False Positive' and  	op.VG_14_CREATETIME between @start_date and @end_date group by CONCAT(YEAR(op.VG_14_CREATETIME), ' - ', MONTH(op.VG_14_CREATETIME)), EOMONTH(op.VG_14_CREATETIME)  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_EXCEPTIONS_COUNT', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_EXCEPTIONS_COUNT 	from #temp_exceptions ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_EXCEPTIONS_COUNT 	SELECT * 	from #temp_exceptions  ----Count of each exception type  IF OBJECT_ID('tempdb..#temp_exceptions_DATA', 'U') IS NOT NULL DROP TABLE #temp_exceptions_DATA select distinct 'Timely Recording' AS [Exception_Type],               MULTI_FUND_ID,               CONCAT(YEAR(mf.VG_10_CREATETIME), ' - ', MONTH(mf.VG_10_CREATETIME)) as [Month_Year], 			  EOMONTH(mf.VG_10_CREATETIME) AS [Date], 			  @REPORT_NAME AS [Report_Name] into #temp_exceptions_DATA from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE mf left join #Max_Reason e on mf.MULTI_FUND_ID+'_10' = e.ID where  	mf.VG_10 = 1 and  	mf.DEALING_DESK = 'Fixed Income' and  	ISNULL(e.reason,'') != 'False Positive'  and  	mf.VG_10_CREATETIME between @start_date and @end_date union  select distinct 'Order Aggregation',                oa_id,               CONCAT(YEAR(trd.VG_13_CREATETIME), ' - ', MONTH(trd.VG_13_CREATETIME)) as [Month_Year], 			  EOMONTH(trd.VG_13_CREATETIME) AS [Date], 			  @REPORT_NAME AS [Report_Name] from VISTA_REPORTING.dbo.MASTER_TRD_ORDER_TABLE trd left join #Max_Reason e on trd.oa_id+'_13' = e.ID where 	trd.VG_13 = 1 and  	trd.DEALING_DESK = 'Fixed Income' and  	ISNULL(e.reason,'') != 'False Positive' and  	trd.VG_13_CREATETIME between @start_date and @end_date union  select distinct 'Order Priority',                ORD_NUM,               CONCAT(YEAR(op.VG_14_CREATETIME), ' - ', MONTH(op.VG_14_CREATETIME)) as [Month_Year], 			  EOMONTH(op.VG_14_CREATETIME) AS [Date], 			  @REPORT_NAME AS [Report_Name] from VISTA_REPORTING.dbo.MASTER_ORDER_PRIORITY_TABLE op left join #Max_Reason e on op.ord_num+'_14' = e.ID where 	op.VG_14 = 1 and  	op.DEALING_DESK = 'Fixed Income' and  	ISNULL(e.reason,'') != 'False Positive' and  	op.VG_14_CREATETIME between @start_date and @end_date  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_EXCEPTIONS_COUNT_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_EXCEPTIONS_COUNT_DATA 	from #temp_exceptions_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_EXCEPTIONS_COUNT_DATA 	SELECT * 	from #temp_exceptions_DATA  ----- Number and % of Amendments --number of amendments IF OBJECT_ID('tempdb..#amend_count', 'U') IS NOT NULL DROP TABLE #amend_count select  	count(distinct case when  ISNULL(e.reason,'') != 'False Positive' then m.MULTI_FUND_ID --Everything is an amendment in this table, but want to remove False positives 					    else null end) as [Num_Amends],                       	case  		when p.DEBT_DERIV = 'Debt' then 'Cash Bonds' 		when p.INST_TYPE IN ('SCDS','ICDS') then 'CDS' 		when p.INST_TYPE IN ('IRFUT','BNDFUT','OPTFUT','ETD') then 'ETD' 		when p.INST_TYPE IN ('IRS', 'BASIS', 'ZCS', 'IFS', 'ASWP', 'CCS', 'CASWP', 'SWAP') then 'SWAPS' 	 end AS [Asset Type] ,     CONCAT(YEAR(AMENDMENT_FLAG_CREATETIME), ' - ', MONTH(AMENDMENT_FLAG_CREATETIME)) as [Month_Year] into #amend_count from   VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE m left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p 	on m.MULTI_FUND_ID = p.MULTI_FUND_ID -- Thanos: Added condition for False Positives left join #max_reason e on concat(m.MULTI_FUND_ID,'_15',m.TOUCH_COUNT) = e.ID left join (SELECT DISTINCT MULTI_FUND_ID, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES WHERE FINALFlag = 1) t ON p.MULTI_FUND_ID = t.MULTI_FUND_ID where                       	p.DEALING_DESK = 'Fixed Income'     	and p.PRIMARY_MARKET = 0  	and p.INTERFUND_TRANSFER = 0 	and p.TWEB_CLOSE_DEALING = 0  	AND (p.DEBT_DERIV = 'Debt' OR p.INST_TYPE IN ('SCDS','ICDS','IRFUT','BNDFUT','OPTFUT','ETD','IRS', 'BASIS', 'ZCS', 'IFS', 'ASWP', 'CCS', 'CASWP', 'SWAP')) 	and AMENDMENT_FLAG_CREATETIME between @Start_Date and @End_Date group by 	CONCAT(YEAR(AMENDMENT_FLAG_CREATETIME), ' - ', MONTH(AMENDMENT_FLAG_CREATETIME)), 	case  		when p.DEBT_DERIV = 'Debt' then 'Cash Bonds' 		when p.INST_TYPE IN ('SCDS','ICDS') then 'CDS' 		when p.INST_TYPE IN ('IRFUT','BNDFUT','OPTFUT','ETD') then 'ETD' 		when p.INST_TYPE IN ('IRS', 'BASIS', 'ZCS', 'IFS', 'ASWP', 'CCS', 'CASWP', 'SWAP') then 'SWAPS' 		 end  ----- Number and % of Amendments --total number of trades IF OBJECT_ID('tempdb..#amend_trd_count', 'U') IS NOT NULL DROP TABLE #amend_trd_count select  	count( distinct p.multi_fund_id) as [no_of_trades], 	 	case  		when p.DEBT_DERIV = 'Debt' then 'Cash Bonds' 		when p.INST_TYPE IN ('SCDS','ICDS') then 'CDS' 		when p.INST_TYPE IN ('IRFUT','BNDFUT','OPTFUT','ETD') then 'ETD' 		when p.INST_TYPE IN ('IRS', 'BASIS', 'ZCS', 'IFS', 'ASWP', 'CCS', 'CASWP', 'SWAP') then 'SWAPS' 	 end AS [Asset Type] ,     CONCAT(YEAR(TRD_TRADE_DATE), ' - ', MONTH(TRD_TRADE_DATE)) as [Month_Year] into #amend_trd_count from (SELECT DISTINCT MULTI_FUND_ID, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES WHERE FINALFlag = 1) t LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p 	on t.MULTI_FUND_ID = p.MULTI_FUND_ID where                       	p.DEALING_DESK = 'Fixed Income'     	and p.PRIMARY_MARKET = 0  	and p.INTERFUND_TRANSFER = 0 	and p.TWEB_CLOSE_DEALING = 0  	AND (p.DEBT_DERIV = 'Debt' OR p.INST_TYPE IN ('SCDS','ICDS','IRFUT','BNDFUT','OPTFUT','ETD','IRS', 'BASIS', 'ZCS', 'IFS', 'ASWP', 'CCS', 'CASWP', 'SWAP')) 	and TRD_TRADE_DATE between @Start_Date and @End_Date group by 	CONCAT(YEAR(TRD_TRADE_DATE), ' - ', MONTH(TRD_TRADE_DATE)), 	case  		when p.DEBT_DERIV = 'Debt' then 'Cash Bonds' 		when p.INST_TYPE IN ('SCDS','ICDS') then 'CDS' 		when p.INST_TYPE IN ('IRFUT','BNDFUT','OPTFUT','ETD') then 'ETD' 		when p.INST_TYPE IN ('IRS', 'BASIS', 'ZCS', 'IFS', 'ASWP', 'CCS', 'CASWP', 'SWAP') then 'SWAPS' 		 end  ----- Number and % of Amendments IF OBJECT_ID('tempdb..#temp_amendments', 'U') IS NOT NULL DROP TABLE #temp_amendments select  	a.Num_Amends, 	CASE  		WHEN a.Num_Amends > t.no_of_trades then 100.00 -- set to 1 in the extreme scenario where amends are higher than no of trades 		WHEN t.no_of_trades= 0 THEN 0.00 		ELSE  			100.0*a.Num_Amends/  				t.no_of_trades 	END AS [Percent_Amends], 	t.[Asset Type], 	t.Month_Year, 	EOMONTH(CONVERT(DATE,CONCAT(t.Month_Year,'-01'))) AS [Date], 	@REPORT_NAME AS [Report_Name] into #temp_amendments from #amend_trd_count t left join #amend_count a on a.[Asset Type]=t.[Asset Type] AND a.Month_Year = t.Month_Year   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_NO_AND_PERCENT_AMENDMENTS', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_NO_AND_PERCENT_AMENDMENTS 	from #temp_amendments ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_NO_AND_PERCENT_AMENDMENTS 	SELECT * 	from #temp_amendments  ----- Number and % of Amendments --number of amendments IF OBJECT_ID('tempdb..#amend_count_DATA', 'U') IS NOT NULL DROP TABLE #amend_count_DATA select  	e.reason, 	m.MULTI_FUND_ID,                     	case  		when p.DEBT_DERIV = 'Debt' then 'Cash Bonds' 		when p.INST_TYPE IN ('SCDS','ICDS') then 'CDS' 		when p.INST_TYPE IN ('IRFUT','BNDFUT','OPTFUT','ETD') then 'ETD' 		when p.INST_TYPE IN ('IRS', 'BASIS', 'ZCS', 'IFS', 'ASWP', 'CCS', 'CASWP', 'SWAP') then 'SWAPS' 	 end AS [Asset Type] ,     CONCAT(YEAR(AMENDMENT_FLAG_CREATETIME), ' - ', MONTH(AMENDMENT_FLAG_CREATETIME)) as [Month_Year] into #amend_count_DATA from   VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE m left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p 	on m.MULTI_FUND_ID = p.MULTI_FUND_ID -- Thanos: Added condition for False Positives left join #max_reason e on concat(m.MULTI_FUND_ID,'_15',m.TOUCH_COUNT) = e.ID left join (SELECT DISTINCT MULTI_FUND_ID, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES WHERE FINALFlag = 1) t ON p.MULTI_FUND_ID = t.MULTI_FUND_ID where                       	p.DEALING_DESK = 'Fixed Income'     	and p.PRIMARY_MARKET = 0  	and p.INTERFUND_TRANSFER = 0 	and p.TWEB_CLOSE_DEALING = 0  	AND (p.DEBT_DERIV = 'Debt' OR p.INST_TYPE IN ('SCDS','ICDS','IRFUT','BNDFUT','OPTFUT','ETD','IRS', 'BASIS', 'ZCS', 'IFS', 'ASWP', 'CCS', 'CASWP', 'SWAP')) 	and AMENDMENT_FLAG_CREATETIME between @Start_Date and @End_Date  IF OBJECT_ID('tempdb..#temp_amendments_DATA', 'U') IS NOT NULL DROP TABLE #temp_amendments_DATA select  	t.reason, 	t.MULTI_FUND_ID, 	t.[Asset Type], 	t.Month_Year, 	EOMONTH(CONVERT(DATE,CONCAT(t.Month_Year,'-01'))) AS [Date], 	@REPORT_NAME AS [Report_Name] into #temp_amendments_DATA from #amend_count_DATA t left join #amend_count a on a.[Asset Type]=t.[Asset Type] AND a.Month_Year = t.Month_Year   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_NO_AND_PERCENT_AMENDMENTS_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_NO_AND_PERCENT_AMENDMENTS_DATA 	from #temp_amendments_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_NO_AND_PERCENT_AMENDMENTS_DATA 	SELECT * 	from #temp_amendments_DATA  -- AP 17072018: Timely Recording new split  --Step 1: Get the required population IF OBJECT_ID('tempdb..#tr_step1', 'U') IS NOT NULL DROP TABLE #tr_step1 select distinct  			mf.MULTI_FUND_ID, 			tr.trd_auth_time,  			tr.execution_time, 			mf.vg_10_createtime, 			case  				when  CONVERT(date, TRD_AUTH_TIME) = CONVERT(date,EXECUTION_TIME) -- this relates to intraday exceptions 				then 1  				else 0 			end as flag into #tr_step1  from vista_reporting.dbo.MASTER_MULTI_FUND_ID_TABLE mf  inner join vista_reporting.dbo.trades tr on mf.MULTI_FUND_ID = tr.MULTI_FUND_ID  left join #Max_Reason e  ON CONCAT(mf.MULTI_FUND_ID,'_10') = e.ID where  	mf.dealing_desk = 'Fixed Income' and  	vg_10 = 1 and  	ISNULL(e.REASON,'') != 'False Positive' and 	tr.trd_auth_time = mf.[Entry Date] and  	tr.EXECUTION_TIME = mf.[Exec Date]  and -- used these to get back to the correct population 	mf.vg_10_CREATETIME between @Start_Date and @End_Date   --Step 2: Create Summary Table IF OBJECT_ID('tempdb..#temp_timely_recording', 'U') IS NOT NULL DROP TABLE #temp_timely_recording select   	'Timely Recording' AS [Exception_Type],     count(distinct MULTI_FUND_ID) AS [Value],      CONCAT(YEAR(vg_10_createtime), ' - ', MONTH(vg_10_createtime)) as [Month_Year], 	 flag, 	 EOMONTH(vg_10_createtime) AS [Date], 	 @REPORT_NAME AS [Report_Name] into #temp_timely_recording from #tr_step1 group by  	flag,  	CONCAT(YEAR(vg_10_createtime), ' - ', MONTH(vg_10_createtime)),  	EOMONTH(vg_10_createtime)    IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FI_TIMELY_RECORDING_TABLE', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_FI_TIMELY_RECORDING_TABLE 	from #temp_timely_recording ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_FI_TIMELY_RECORDING_TABLE 	SELECT * 	from #temp_timely_recording   --Step 2: Create Summary Table IF OBJECT_ID('tempdb..#temp_timely_recording_DATA', 'U') IS NOT NULL DROP TABLE #temp_timely_recording_DATA select   distinct 	'Timely Recording' AS [Exception_Type],      MULTI_FUND_ID,      CONCAT(YEAR(vg_10_createtime), ' - ', MONTH(vg_10_createtime)) as [Month_Year], 	 flag, 	 EOMONTH(vg_10_createtime) AS [Date], 	 @REPORT_NAME AS [Report_Name] into #temp_timely_recording_DATA from #tr_step1  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FI_TIMELY_RECORDING_TABLE_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_FI_TIMELY_RECORDING_TABLE_DATA 	from #temp_timely_recording_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_FI_TIMELY_RECORDING_TABLE_DATA 	SELECT * 	from #temp_timely_recording_DATA   -- Step 1: Get the required population and join on instruments table to be able to classify them correctly IF OBJECT_ID('tempdb..#op_step1', 'U') IS NOT NULL DROP TABLE #op_step1 select distinct op.ord_num, 				case  					when p.DEBT_DERIV = 'Debt' then 'Cash Bonds' 					when p.INST_TYPE IN ('SCDS','ICDS') then 'CDS' 					when p.INST_TYPE IN ('IRFUT','BNDFUT','OPTFUT','ETD') then 'ETD' 					when p.INST_TYPE IN ('IRS', 'BASIS', 'ZCS', 'IFS', 'ASWP', 'CCS', 'CASWP', 'SWAP') then 'SWAPS' 				 end AS [Asset Type], 				 VG_14_CREATETIME into #op_step1 from vista_reporting.dbo.MASTER_ORDER_PRIORITY_TABLE op inner join vista_reporting.dbo.PRIMARY_INST_TYPE_TABLE p on op.ORD_NUM = p.ORD_NUM left join #Max_Reason e on CONCAT(op.ORD_NUM,'_14') = e.ID where  	op.VG_14 = 1 and  	ISNULL(e.REASON,'') != 'False Positive' and 	op.dealing_desk = 'Fixed Income' and  	op.VG_14_CREATETIME between @Start_Date and @End_Date  -- Step 2: Create Summary Table IF OBJECT_ID('tempdb..#temp_order_priority', 'U') IS NOT NULL DROP TABLE #temp_order_priority select  'Order Priority' AS [Exception_Type],               count(distinct ORD_NUM) AS [Value], 			  [Asset Type],               CONCAT(YEAR(VG_14_CREATETIME), ' - ', MONTH(VG_14_CREATETIME)) as [Month_Year], 			  EOMONTH(VG_14_CREATETIME) AS [Date], 			  @REPORT_NAME AS [Report_Name] into #temp_order_priority from #op_step1 group by CONCAT(YEAR(VG_14_CREATETIME), ' - ', MONTH(VG_14_CREATETIME)),[Asset Type], EOMONTH(VG_14_CREATETIME)  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FI_ORDER_PRIORITY_TABLE', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_FI_ORDER_PRIORITY_TABLE 	from #temp_order_priority ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_FI_ORDER_PRIORITY_TABLE 	SELECT * 	from #temp_order_priority   -- Step 1: Get the required population and join on instruments table to be able to classify them correctly IF OBJECT_ID('tempdb..#op_step1_DATA', 'U') IS NOT NULL DROP TABLE #op_step1_DATA select distinct op.ord_num, 				case  					when p.DEBT_DERIV = 'Debt' then 'Cash Bonds' 					when p.INST_TYPE IN ('SCDS','ICDS') then 'CDS' 					when p.INST_TYPE IN ('IRFUT','BNDFUT','OPTFUT','ETD') then 'ETD' 					when p.INST_TYPE IN ('IRS', 'BASIS', 'ZCS', 'IFS', 'ASWP', 'CCS', 'CASWP', 'SWAP') then 'SWAPS' 				 end AS [Asset Type], 				 VG_14_CREATETIME into #op_step1_DATA from vista_reporting.dbo.MASTER_ORDER_PRIORITY_TABLE op inner join vista_reporting.dbo.PRIMARY_INST_TYPE_TABLE p on op.ORD_NUM = p.ORD_NUM left join #Max_Reason e on CONCAT(op.ORD_NUM,'_14') = e.ID where  	op.VG_14 = 1 and  	ISNULL(e.REASON,'') != 'False Positive' and 	op.dealing_desk = 'Fixed Income' and  	op.VG_14_CREATETIME between @Start_Date and @End_Date  -- Step 2: Create Summary Table IF OBJECT_ID('tempdb..#temp_order_priority_DATA', 'U') IS NOT NULL DROP TABLE #temp_order_priority_DATA select  'Order Priority' AS [Exception_Type],               ORD_NUM, 			  [Asset Type],               CONCAT(YEAR(VG_14_CREATETIME), ' - ', MONTH(VG_14_CREATETIME)) as [Month_Year], 			  EOMONTH(VG_14_CREATETIME) AS [Date], 			  @REPORT_NAME AS [Report_Name] into #temp_order_priority_DATA from #op_step1_DATA   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FI_ORDER_PRIORITY_TABLE_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_FI_ORDER_PRIORITY_TABLE_DATA 	from #temp_order_priority_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_FI_ORDER_PRIORITY_TABLE_DATA 	SELECT * 	from #temp_order_priority_DATA  -- Step 1: Get the required info IF OBJECT_ID('tempdb..#oa_step1', 'U') IS NOT NULL DROP TABLE #oa_step1 select	distinct oa_id, 		VG_13_CREATETIME, 		case  			when e.REASON = 'PM Target' then 'PM Target' 		    when e.REASON = 'Specified trade date/time' then 'Trade date/time specified' 			when e.REASON = 'Contingent Package' then 'Package' 			else 'Other' 		end as [Reason Split]  into  #oa_step1 from VISTA_REPORTING.dbo.MASTER_TRD_ORDER_TABLE oa left join #Max_Reason e ON CONCAT(oa.oa_id,'_13') = e.ID where  	VG_13 = 1 and  	ISNULL(e.REASON,'') != 'False Positive' and 	DEALING_DESK = 'Fixed Income' and  	VG_13_CREATETIME between @Start_Date and @End_Date  --Step 2: Create Summary Table IF OBJECT_ID('tempdb..#temp_order_agg', 'U') IS NOT NULL DROP TABLE #temp_order_agg  select  'Order Aggregation' as [Exception_Type],               count(distinct oa_id) as [Value], 			  [Reason Split] ,               CONCAT(YEAR(VG_13_CREATETIME), ' - ', MONTH(VG_13_CREATETIME)) as [Month_Year], 			  EOMONTH(VG_13_CREATETIME) AS [Date], 			  @REPORT_NAME AS [Report_Name] into #temp_order_agg from #oa_step1 group by  	CONCAT(YEAR(VG_13_CREATETIME), ' - ', MONTH(VG_13_CREATETIME)),  	[Reason Split],  	EOMONTH(VG_13_CREATETIME)   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FI_ORDER_AGG_TABLE', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_FI_ORDER_AGG_TABLE 	from #temp_order_agg ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_FI_ORDER_AGG_TABLE 	SELECT * 	from #temp_order_agg   	-- Step 1: Get the required info IF OBJECT_ID('tempdb..#oa_step1_DATA', 'U') IS NOT NULL DROP TABLE #oa_step1_DATA select distinct 		oa_id, 		VG_13_CREATETIME, 		case  			when e.REASON = 'PM Target' then 'PM Target' 		    when e.REASON = 'Specified trade date/time' then 'Trade date/time specified' 			when e.REASON = 'Contingent Package' then 'Package' 			else 'Other' 		end as [Reason Split]  into  #oa_step1_DATA from VISTA_REPORTING.dbo.MASTER_TRD_ORDER_TABLE oa left join #Max_Reason e ON CONCAT(oa.oa_id,'_13') = e.ID where  	VG_13 = 1 and  	ISNULL(e.REASON,'') != 'False Positive' and 	DEALING_DESK = 'Fixed Income' and  	VG_13_CREATETIME between @Start_Date and @End_Date  --Step 2: Create Summary Table IF OBJECT_ID('tempdb..#temp_order_agg_DATA', 'U') IS NOT NULL DROP TABLE #temp_order_agg_DATA select  'Order Aggregation' as [Exception_Type],               oa_id as ID, 			  [Reason Split] ,               CONCAT(YEAR(VG_13_CREATETIME), ' - ', MONTH(VG_13_CREATETIME)) as [Month_Year], 			  EOMONTH(VG_13_CREATETIME) AS [Date], 			  @REPORT_NAME AS [Report_Name] into #temp_order_agg_DATA from #oa_step1_DATA  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FI_ORDER_AGG_TABLE_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_FI_ORDER_AGG_TABLE_DATA 	from #temp_order_agg_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_FI_ORDER_AGG_TABLE_DATA 	SELECT * 	from #temp_order_agg_DATA   -- Thanos: FI Timely Execution: Same split as the Number of Authorised above; however this focuses on Orders Acknowledged -- The difference is that the pm_order should be picked up by a dealer; this happens once a trd_ord id is created IF OBJECT_ID('tempdb..#temp_orders_ackn', 'U') IS NOT NULL DROP TABLE #temp_orders_ackn select  	count(distinct CASE WHEN pm.[Active Date] IS NOT NULL THEN pm.ord_num ELSE NULL END) as 'Orders Acknowledged', 	CONCAT(YEAR(MAX(pm.AUTH_TIME)), ' - ', MONTH(MAX(pm.AUTH_TIME))) AS Month_Year , 	EOMONTH(pm.AUTH_TIME) AS AUTH_TIME into #temp_orders_ackn FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER pm LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc 	ON pm.ORD_NUM = oc.PM_ORD LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p 	ON oc.TRD_ORD = p.ORD_NUM WHERE pm.DEALING_DESK = 'Fixed Income' 	AND pm.INTERFUND_TRANSFER = 'N' 	AND pm.PRIMARY_MARKET = 0  	AND ISNULL(p.FUTURE_ROLLS,0) = 0 	and pm.AUTH_TIME between @Start_Date and @End_Date group by CONCAT(YEAR(pm.AUTH_TIME), ' - ', MONTH(pm.AUTH_TIME)), EOMONTH(pm.AUTH_TIME)  -- Join to the number of exceptions from the previous split - i.e. same exceptions from the Tim Ex split for orders auth IF OBJECT_ID('tempdb..#TIMEX_ACK_PRE_UNION', 'U') IS NOT NULL DROP TABLE #TIMEX_ACK_PRE_UNION select  	ackn.[Orders Acknowledged], 	--exc.[Exceptions on day], 	--exc.[All exceptions], 	case 		 when exc.[Unfilled on day] > ackn.[Orders Acknowledged]	then 0.0 -- set to zero in the extreme scenario where exceptions are higher than no of orders 		 when ackn.[Orders Acknowledged] = 0						then 0.0 		 else 100.0-coalesce((100.0*exc.[Unfilled on day]/ackn.[Orders Acknowledged]),0)  	end as [Percent_Filled_on_day], 	case  		when exc.[All exceptions] > ackn.[Orders Acknowledged]		then 0.0 -- set to zero in the extreme scenario where exceptions are higher than no of orders 		 when ackn.[Orders Acknowledged] = 0						then 0.0 		 else 100.0-coalesce((100.0*exc.[All exceptions]/ackn.[Orders Acknowledged]),0)  	end as [Percent_Filled_within_threshold], 	ackn.Month_Year, 	EOMONTH(CONVERT(DATE,CONCAT(ackn.Month_Year,'-01'))) AS [Date], 	@REPORT_NAME AS [Report_Name]  INTO #TIMEX_ACK_PRE_UNION from #temp_orders_ackn ackn left join #temp_tim_ex_exceptions_v2 exc  	on ackn.Month_Year = exc.Month_Year  IF OBJECT_ID('tempdb..#Temp_timely_ex_ack', 'U') IS NOT NULL DROP TABLE #Temp_timely_ex_ack select 	[Orders Acknowledged] as [Value], 	'Orders Acknowledged' as [Type], 	Month_Year, 	[Date], 	Report_Name into #Temp_timely_ex_ack from #TIMEX_ACK_PRE_UNION  union  select 	[Percent_Filled_on_day] as [Value], 	'% Filled on Day' as [Type], 	Month_Year, 	[Date], 	Report_Name from #TIMEX_ACK_PRE_UNION  union  select 	[Percent_Filled_within_threshold] as [Value], 	'% Filled Within Threshold' as [Type], 	Month_Year, 	[Date], 	Report_Name from #TIMEX_ACK_PRE_UNION  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FI_TIMELY_EX_ACKNOWLEDGED', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_FI_TIMELY_EX_ACKNOWLEDGED 	from #Temp_timely_ex_ack ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_FI_TIMELY_EX_ACKNOWLEDGED 	SELECT * 	from #Temp_timely_ex_ack   IF OBJECT_ID('tempdb..#temp_orders_ackn_DATA', 'U') IS NOT NULL DROP TABLE #temp_orders_ackn_DATA select  	pm.[Active Date], 	pm.ord_num, 	CONCAT(YEAR(pm.AUTH_TIME), ' - ', MONTH(pm.AUTH_TIME)) AS Month_Year , 	EOMONTH(pm.AUTH_TIME) AS AUTH_TIME into #temp_orders_ackn_DATA FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER pm LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc 	ON pm.ORD_NUM = oc.PM_ORD LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p 	ON oc.TRD_ORD = p.ORD_NUM WHERE pm.DEALING_DESK = 'Fixed Income' 	AND pm.INTERFUND_TRANSFER = 'N' 	AND pm.PRIMARY_MARKET = 0  	AND ISNULL(p.FUTURE_ROLLS,0) = 0 	and pm.AUTH_TIME between @Start_Date and @End_Date  -- Join to the number of exceptions from the previous split - i.e. same exceptions from the Tim Ex split for orders auth IF OBJECT_ID('tempdb..#TIMEX_ACK_PRE_UNION_DATA', 'U') IS NOT NULL DROP TABLE #TIMEX_ACK_PRE_UNION_DATA select  	ackn.[Active Date], 	ackn.ord_num, 	ackn.Month_Year, 	EOMONTH(CONVERT(DATE,CONCAT(ackn.Month_Year,'-01'))) AS [Date], 	@REPORT_NAME AS [Report_Name]  INTO #TIMEX_ACK_PRE_UNION_DATA from #temp_orders_ackn_DATA ackn left join #temp_tim_ex_exceptions_v2 exc  	on ackn.Month_Year = exc.Month_Year  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FI_TIMELY_EX_ACKNOWLEDGED_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_FI_TIMELY_EX_ACKNOWLEDGED_DATA 	from #TIMEX_ACK_PRE_UNION_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_FI_TIMELY_EX_ACKNOWLEDGED_DATA 	SELECT * 	from #TIMEX_ACK_PRE_UNION_DATA   END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: DMC_FIDD_DEALING_VOLS CreateDate: 2019-10-18 08:39:50.823 ModifyDate: 2020-04-21 20:02:27.787 --- DEFINITION START --- -- ============================================= -- Author:		<Ayiba Cesario> -- Create date: <09/08/2018> -- Description:	<Generate DMC reports for FI Dealing Volumes. --	This stored procedure takes a start month, end month and report name  --	as input parameters and generates the reports for these months.> -- =============================================   CREATE PROCEDURE [dbo].[DMC_FIDD_DEALING_VOLS]  	@Start_Month INT, 	@Start_Year INT, 	@End_Month INT, 	@End_Year INT, 	@REPORT_NAME VARCHAR(MAX) AS BEGIN  DECLARE @Start_Date DATETIME; SET @Start_Date = CONVERT(DATE,CONCAT(@Start_Year,'-',@Start_Month,'-01')); --Turn the input start month parameter into a date (using the first day of the month) DECLARE @End_Date0 DATETIME; DECLARE @End_Date DATETIME; SET @End_Date0 = EOMONTH(CONVERT(DATETIME,CONCAT(@End_Year,'-',@End_Month,'-01')));  --Turn the input end month parameter into a date (using the last day of the month)  SET @End_Date = DATEADD(second,86399,@End_Date0);  --Add the metadata to a table so we keep a history of all reports run IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_REPORTS_METADATA', 'U') IS NULL 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		convert(varchar(50),'FIDD_Dealing_Vols') AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date] 	INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		'FIDD_Dealing_Vols' AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date]  --Remove persistent tables when starting this query IF OBJECT_ID('tempdb..#temp_volumes1', 'U') IS NOT NULL DROP TABLE #temp_volumes1 IF OBJECT_ID('tempdb..#temp_FIX1', 'U') IS NOT NULL DROP TABLE #temp_FIX1 IF OBJECT_ID('tempdb..#temp_FIDD_VOLUMES', 'U') IS NOT NULL DROP TABLE #temp_FIDD_VOLUMES IF OBJECT_ID('tempdb..#temp_fix_percent', 'U') IS NOT NULL DROP TABLE #temp_fix_percent IF OBJECT_ID('tempdb..#temp_if', 'U') IS NOT NULL DROP TABLE #temp_if IF OBJECT_ID('tempdb..#temp_FIDD_VOLUMES_DATA', 'U') IS NOT NULL DROP TABLE #temp_FIDD_VOLUMES_DATA    ---Report 1 FIDD Dealing volumes  --- # of FIDD Executions  select distinct m.multi_fund_id,           m2.net_consideration_GBP , 		  [ETD_Notional], 		  [CDS_Notional], 		  Num_Contracts,           case                when i.INST_TYPE = 'GOVBIL'                       and i.PRIMARY_MARKET = 1                       then 'Government bills - Primary'               when i.INST_TYPE in ('GOV', 'IGOV', 'SSA', 'GOVBIL')                       and i.PRIMARY_MARKET = 1                       then 'Government & SSA bonds - Primary'               when i.INST_TYPE in ('IG CORP', 'HY CORP', 'NR CORP', 'COV', 'CORP')                       and i.PRIMARY_MARKET = 1                       then 'Corporates & Covered - Primary'               when i.INST_TYPE in ('EM GOV', 'EM GOVBIL', 'EM CORP')                       and i.PRIMARY_MARKET = 1                       then 'EM - Primary'               when i.INST_TYPE in ('RMBS', 'CMBS', 'CDO', 'ABS', 'MBS', ' ARM')                       and i.PRIMARY_MARKET = 1                       then 'Securitised - Primary'               when i.INST_TYPE = 'GOVBIL'                       then 'Government bills - Secondary'               when i.INST_TYPE in ('GOV', 'IGOV',  'GOVBIL')                       then 'Government bonds - Secondary' 			  when i.INST_TYPE in ('EM GOV', 'EM GOVBIL', 'EM CORP')                       then 'EM - Secondary'               when i.INST_TYPE in ('RMBS', 'CMBS', 'CDO', 'ABS', 'MBS', ' ARM')                       then 'Securitised - Secondary'               when i.INST_TYPE = 'SSA'                       then 'SSA bonds - Secondary'               when i.INST_TYPE = 'HY Corp'                         AND i.TRD_CURRENCY IN ('EUR','GBP')                        then 'European HY Corporates - Secondary'               when (i.INST_TYPE = 'HY Corp'                         AND i.TRD_CURRENCY NOT IN ('EUR','GBP','USD'))                          or (i.INST_TYPE in ('IG CORP', 'NR CORP') AND TRD_CURRENCY IN ('EUR','GBP'))                          or (i.ORDER_INST_TYPE = 'CORP' and TRD_CURRENCY != 'USD')                        then 'European IG Corporates & Other - Secondary' 			  when (i.INST_TYPE in ('HY CORP', 'IG CORP', 'NR CORP','CORP') OR i.ORDER_INST_TYPE = 'CORP') and i.TRD_CURRENCY = 'USD'                                        then 'USD Corporates - Secondary'               when i.INST_TYPE in ('COV')                                         then 'Covered Bonds - Secondary'                when i.INST_TYPE = 'PFD'                                        then 'Pref. Shares - Secondary'               when i.INST_TYPE = 'SCDS'                                        and TRD_CURRENCY = 'EUR'                                        then 'SCDS EUR'               when i.INST_TYPE = 'SCDS'                                        and TRD_CURRENCY = 'USD'                                        then 'SCDS USD'               when i.INST_TYPE = 'ICDS'                                        and i.ICDS_DETAIL = 'ITRAXX EUROPE MAIN'                                        then 'iTraxx Europe'               when i.INST_TYPE = 'ICDS'                                        and i.ICDS_DETAIL = 'ITRAXX EUROPE CROSSOVER'                                        then 'iTraxx Crossover'               when i.INST_TYPE = 'ICDS'                                        and i.ICDS_DETAIL = 'CDX NA IG'                                        then 'CDX NA IG'               when i.INST_TYPE = 'ICDS'                                        and i.ICDS_DETAIL = 'CDX NA HY'                                        then 'CDX NA HY'               when i.INST_TYPE in ('ICDS', 'SCDS')                                        then 'CDS Other'               when i.INST_TYPE in ('IRFUT')                                        and ISNULL(Trd_purpose,'') <> 'MG004'                                        then 'Interest Rate Futures'               when i.INST_TYPE in ('BNDFUT')                                        and ISNULL(Trd_purpose,'') <> 'MG004'                                        then 'Bond Futures'               when i.INST_TYPE in ('OPTFUT')                                        and ISNULL(Trd_purpose,'') <> 'MG004'                                        then 'Option Futures'               when i.INST_TYPE in ('ETD')                                        and ISNULL(Trd_purpose,'') <> 'MG004'                                        then 'ETD Not Rollover'               when i.INST_TYPE in ('IRFUT','BNDFUT','OPTFUT','ETD')                                        and Trd_purpose = 'MG004'                                        then 'ETD Rollover'               when i.INST_TYPE in ('IRS','BASIS','ZCS','SWAP')                                        then 'IRS'               when i.INST_TYPE = 'IFS'                                        then 'IFS'               when i.INST_TYPE = 'ASWP'                                        then 'ASWP'               when i.INST_TYPE in ('CCS','CASWP')                                        then 'Cross Currency'               end AS [Asset Type],               CONCAT(YEAR([Trade Date]), ' - ', MONTH([Trade Date])) as [Month_Year], 			  [Trade Date],          case                when i.DEBT_DERIV = 'DEBT' THEN 'Cash Bonds' 			  WHEN i.INST_TYPE IN ('SCDS','ICDS') THEN 'Credit Default Swaps' 			  WHEN i.INST_TYPE in ('IRFUT','BNDFUT','OPTFUT','ETD') and ISNULL(Trd_purpose,'') <> 'MG004' THEN 'ETD' 			  WHEN i.INST_TYPE in ('IRFUT','BNDFUT','OPTFUT','ETD') and ISNULL(Trd_purpose,'') = 'MG004' THEN 'ETD rollover' 			  --WHEN i.INST_TYPE in ('IRFUT','BNDFUT','OPTFUT','ETD') THEN 'ETD' 			  WHEN i.INST_TYPE in ('IRS','BASIS','ZCS','SWAP','IFS','ASWP','CCS','CASWP') THEN 'OTC Swaps' 		end AS [Asset Group], 		CASE 			WHEN i.PRIMARY_MARKET = 1 THEN 'Y' 			ELSE 'N' 		END AS Primary_Market  INTO #temp_volumes1 from (SELECT DISTINCT MULTI_FUND_ID,  [Trade Date], DEALING_DESK FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE) m left join (SELECT DISTINCT MULTI_FUND_ID,   TRD_PURPOSE, INST_TYPE, DEBT_DERIV, PRIMARY_MARKET, ICDS_DETAIL, TRD_CURRENCY, ORDER_INST_TYPE FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) i on m.MULTI_FUND_ID = i.MULTI_FUND_ID  left join (SELECT DISTINCT MULTI_FUND_ID,  				ABS(NET_CONSIDERATION_GBP)  AS NET_CONSIDERATION_GBP,  				FUND,  				1.0*ABS(TRD_ORIG_FACE) * CONTRACT_SIZE  /GBP_INDEX_RATE AS [ETD_Notional] 				, 1.0*ABS(TRD_ORIG_FACE) / GBP_INDEX_RATE AS [CDS_Notional] 				, 1.0*ABS(TRD_ORIG_FACE)  AS Num_Contracts -- WH: This is not the number of tickets. This is the number of contracts. 			FROM VISTA_REPORTING.dbo.TRADES  			WHERE FinalFlag = 1 			) m2 ON m.MULTI_FUND_ID = m2.MULTI_FUND_ID where m.DEALING_DESK = 'Fixed Income' and [Trade Date] between @Start_Date and @End_Date  SELECT  	COUNT(DISTINCT MULTI_FUND_ID) AS Num_Trades, 	SUM(Num_Contracts) AS Num_Contracts, 	SUM( 		CASE  			WHEN [Asset Group] = 'Cash Bonds'							THEN NET_CONSIDERATION_GBP 			WHEN [Asset Group] IN ('ETD','ETD Rollover')				THEN [ETD_Notional] 			WHEN [Asset Group] IN ('Credit Default Swaps','OTC Swaps')	THEN [CDS_Notional] 		END) AS Net_Consideration_GBP,   	[Asset Group],  	[Asset Type],  	[Primary_Market],  	[Month_Year], 	EOMONTH([Trade Date]) AS [Date], 	@REPORT_NAME AS [Report_Name]  INTO #temp_FIDD_VOLUMES FROM #temp_volumes1 GROUP BY  [Asset Group], [Asset Type], [Primary_Market], [Month_Year],  EOMONTH([Trade Date])  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FIDD_VOLUMES', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_FIDD_VOLUMES 	from #temp_FIDD_VOLUMES ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_FIDD_VOLUMES 	SELECT * 	from #temp_FIDD_VOLUMES  IF OBJECT_ID('tempdb..#temp_FIDD_ordered', 'U') IS NOT NULL DROP TABLE #temp_FIDD_ordered SELECT  	st.[INDEX], 	st.[Asset Type], 	st.[Asset Group], 	t.[Num_Trades],     t.[Num_Contracts],     t.[Net_Consideration_GBP],     t.[Primary_Market],     t.[Month_Year],     t.[Date],     @REPORT_NAME AS [Report_Name]  INTO #temp_FIDD_ordered FROM [VISTA_REPORTING].[dbo].[DMC_FIDD_STATIC_VOLUMES_ORDER] st left join #temp_FIDD_VOLUMES t  on st.[Asset Group] = t.[Asset Group] and st.[Asset Type] = t.[Asset Type] order by st.[INDEX]  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FIDD_VOLUMES_ORDERED', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_FIDD_VOLUMES_ORDERED 	from #temp_FIDD_ordered ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_FIDD_VOLUMES_ORDERED 	SELECT * 	from #temp_FIDD_ordered  SELECT  	*, 	EOMONTH([Trade Date]) AS [Date], 	@REPORT_NAME AS [Report_Name]  INTO #temp_FIDD_VOLUMES_DATA FROM #temp_volumes1   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FIDD_VOLUMES_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_FIDD_VOLUMES_DATA 	from #temp_FIDD_VOLUMES_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_FIDD_VOLUMES_DATA 	SELECT * 	from #temp_FIDD_VOLUMES_DATA   -- % of Electronic Trades for FIDD Report 1 -- need to include face amt as %   SELECT DISTINCT 	m.MULTI_FUND_ID, 	m2.NET_CONSIDERATION_GBP,  	m2.TRD_ORIG_FACE, 	m.PLATFORM, 	case  	       when m.INST_TYPE in ('GOV','IGOV','GOVBIL','EM GOV','EM GOVBIL') 	               and m.PRIMARY_MARKET = 0 	               and i.INTERFUND_TRANSFER = 0 	               then '% government debt' 	       when i.DEBT_DERIV in ('Debt','Equity') 	               and (m.INST_TYPE not in ('GOV','IGOV','GOVBIL','EM GOV','EM GOVBIL')  	                or m.INST_TYPE = 'PFD') 	               and m.PRIMARY_MARKET = 0 	               and i.INTERFUND_TRANSFER = 0 	               then '% non-government debt' 	       when m.INST_TYPE in ('IRFUT','BNDFUT','OPTFUT','ETD') 	               then 'ETD' 	       when m.INST_TYPE in ('ICDS','SCDS') 	               then 'CDS' 	       when m.INST_TYPE in ('IRS','Basis','ZCS','IFS','ASWP','CCS','CASWP','SWAP') 	               then 'non-CDS' 	  end AS [Asset Type], CONCAT(YEAR([Trade Date]), ' - ', MONTH([Trade Date])) as [Month_Year], [Trade Date] INTO #temp_FIX1 from (SELECT DISTINCT MULTI_FUND_ID, INST_TYPE, PRIMARY_MARKET, PLATFORM, [Trade Date], DEALING_DESK FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE WHERE DEALING_DESK = 'Fixed Income') m left join (SELECT DISTINCT MULTI_FUND_ID, INTERFUND_TRANSFER, DEBT_DERIV FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) i on m.MULTI_FUND_ID = i.MULTI_FUND_ID  left join (SELECT DISTINCT MULTI_FUND_ID, ABS(NET_CONSIDERATION_GBP)  AS NET_CONSIDERATION_GBP, FUND, ABS(TRD_ORIG_FACE) AS TRD_ORIG_FACE FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) m2 ON m.MULTI_FUND_ID = m2.MULTI_FUND_ID where m.DEALING_DESK = 'Fixed income' and [Trade Date] between @Start_Date and @End_Date 	and case --we are only considering these asset groupings, so filter out anything that would fall in the ELSE bucket. 	       when m.INST_TYPE in ('GOV','IGOV','GOVBIL','EM GOV','EM GOVBIL') 	               and m.PRIMARY_MARKET = 0 	               and i.INTERFUND_TRANSFER = 0 	               then 1 	       when i.DEBT_DERIV in ('Debt','Equity') 	               and (m.INST_TYPE not in ('GOV','IGOV','GOVBIL','EM GOV','EM GOVBIL')  	                or m.INST_TYPE = 'PFD') 	               and m.PRIMARY_MARKET = 0 	               and i.INTERFUND_TRANSFER = 0 	               then 1 	       when m.INST_TYPE in ('IRFUT','BNDFUT','OPTFUT','ETD') 	               then 1 	       when m.INST_TYPE in ('ICDS','SCDS') 	               then 1 	       when m.INST_TYPE in ('IRS','Basis','ZCS','IFS','ASWP','CCS','CASWP','SWAP') 	               then 1 	  end = 1   select 100.0*(count(distinct                        case                              when ISNULL([Platform],'') not in ('Manual','Manual Pl')                               then MULTI_FUND_ID                               else null                              end))/               (count(distinct MULTI_FUND_ID) ) AS [Percentage], 			  count(distinct                        case                              when ISNULL([Platform],'') not in ('Manual','Manual Pl')                               then MULTI_FUND_ID                               else null                              end) as [Numerator], 				count(distinct MULTI_FUND_ID) as [Denominator], 		'Trade' as [Type], 		'FIX' AS [Fix], 		[Asset Type], 		Month_Year, 		EOMONTH([Trade Date]) AS [Date], 		@REPORT_NAME AS [Report_Name] INTO #temp_fix_percent from #temp_FIX1 where [Trade Date] between @Start_Date and @End_Date GROUP BY [Asset Type], Month_Year, EOMONTH([Trade Date])  union  select 	  100.0*(SUM(                       case                              when ISNULL([Platform],'') not in ('Manual','Manual Pl')                               then TRD_ORIG_FACE                               else null                              end))/               (SUM( TRD_ORIG_FACE) ) AS [Percentage], 			  		SUM(                       case                              when ISNULL([Platform],'') not in ('Manual','Manual Pl')                               then TRD_ORIG_FACE                               else null                              end) as [Numerator], 							 SUM( TRD_ORIG_FACE) as [Denominator], 		'Contracts' as [Type], 		'FIX' AS [Fix], 		[Asset Type], 		Month_Year, 		EOMONTH([Trade Date]) AS [Date], 		@REPORT_NAME AS [Report_Name] from #temp_FIX1 where [Trade Date] between @Start_Date and @End_Date GROUP BY [Asset Type], Month_Year, EOMONTH([Trade Date])   union  select 		100.0*(SUM(                        case                              when ISNULL([Platform],'') not in ('Manual','Manual Pl')                               then ABS(NET_CONSIDERATION_GBP)                              else 0                              end))/               (nullif(SUM(ABS(NET_CONSIDERATION_GBP)),0)) AS [Percentage], 			  		SUM(                        case                              when ISNULL([Platform],'') not in ('Manual','Manual Pl')                               then ABS(NET_CONSIDERATION_GBP)                              else 0                              end) as [Numerator], 							 nullif(SUM(ABS(NET_CONSIDERATION_GBP)),0) as [Denominator], 		'Net Consideration' as [Type], 		'FIX' AS [Fix], 		[Asset Type], 		Month_Year, 		EOMONTH([Trade Date]) AS [Date], 		@REPORT_NAME AS [Report_Name] from #temp_FIX1 where [Trade Date] between @Start_Date and @End_Date GROUP BY [Asset Type], Month_Year, EOMONTH([Trade Date])   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FIX_PERCENT', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_FIX_PERCENT  	from #temp_fix_percent ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_FIX_PERCENT 	SELECT * 	from #temp_fix_percent   select [Platform], 	MULTI_FUND_ID, 		[Asset Type], 		Month_Year, 		EOMONTH([Trade Date]) AS [Date], 		@REPORT_NAME AS [Report_Name] INTO #temp_fix_percent_DATA from #temp_FIX1 where [Trade Date] between @Start_Date and @End_Date   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FIX_PERCENT_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_FIX_PERCENT_DATA 	from #temp_fix_percent_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_FIX_PERCENT_DATA 	SELECT * 	from #temp_fix_percent_DATA   IF OBJECT_ID('tempdb..#MFID_inv_Desk', 'U') IS NOT NULL DROP TABLE #MFID_inv_Desk 	SELECT DISTINCT  		t.MULTI_FUND_ID,  		p.ancestor 	INTO #MFID_inv_Desk 	FROM VISTA_REPORTING.dbo.TRADES t 	LEFT JOIN VISTA_STAGING.dbo.PORTFOLIO_GROUP_CLOSURE_TABLE p 	ON t.PORTFOLIOS_PORTFOLIO_NAME = p.descendant 	WHERE p.ancestor IN ('MG_INSTI','MG_INTER','MG_RET_FI','MG_ATCRED')    	---- Interfund Transfer section of Report 1  	IF OBJECT_ID('tempdb..#temp_if', 'U') IS NOT NULL DROP TABLE #temp_if 	select  		count(t.MULTI_FUND_ID) AS Num_Trades, 		count(t.Fund) AS Num_Funds, 		coalesce(trim(inv.ancestor),'Other') as [Inv Desk], 		CONCAT(YEAR([Trade Date]), ' - ', MONTH([Trade Date])) as [Month_Year], 		'InterFund Transfers' AS [InterFund_Transfers], 		EOMONTH([Trade Date]) AS [Date], 		@REPORT_NAME AS [Report_Name] 	INTO #temp_if 	from (SELECT DISTINCT MULTI_FUND_ID, [Trade Date] FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE) m 	left join #MFID_inv_Desk inv on inv.MULTI_FUND_ID = m.MULTI_FUND_ID 	left join (SELECT DISTINCT MULTI_FUND_ID, FinalFlag, Fund FROM  VISTA_REPORTING.dbo.TRADES) t ON m.MULTI_FUND_ID = t.MULTI_FUND_ID 	left join (SELECT DISTINCT MULTI_FUND_ID, INTERFUND_TRANSFER, DEALING_DESK FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) i on t.MULTI_FUND_ID = i.MULTI_FUND_ID  	where i.INTERFUND_TRANSFER = 1 and i.DEALING_DESK = 'Fixed Income' AND t.FinalFlag = 1 and [Trade Date] between @Start_Date and @End_Date 	group by  		coalesce(trim(inv.ancestor),'Other'), 		CONCAT(YEAR([Trade Date]), ' - ', MONTH([Trade Date])), 		EOMONTH([Trade Date])   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FIDD_IF', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_FIDD_IF 	from #temp_if ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_FIDD_IF 	SELECT * 	from #temp_if    	---- Interfund Transfer section of Report 1   	IF OBJECT_ID('tempdb..#temp_if_DATA', 'U') IS NOT NULL DROP TABLE #temp_if_DATA 	select  		t.MULTI_FUND_ID, 		t.Fund, 		coalesce(trim(inv.ancestor),'Other') as [Inv Desk], 		CONCAT(YEAR([Trade Date]), ' - ', MONTH([Trade Date])) as [Month_Year], 		'InterFund Transfers' AS [InterFund_Transfers], 		EOMONTH([Trade Date]) AS [Date], 		@REPORT_NAME AS [Report_Name] 	INTO #temp_if_DATA 	from (SELECT DISTINCT MULTI_FUND_ID, [Trade Date] FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE) m 	left join #MFID_inv_Desk inv on inv.MULTI_FUND_ID = m.MULTI_FUND_ID 	left join (SELECT DISTINCT MULTI_FUND_ID, FinalFlag, Fund FROM  VISTA_REPORTING.dbo.TRADES) t ON m.MULTI_FUND_ID = t.MULTI_FUND_ID 	left join (SELECT DISTINCT MULTI_FUND_ID, INTERFUND_TRANSFER, DEALING_DESK FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) i on t.MULTI_FUND_ID = i.MULTI_FUND_ID  	where i.INTERFUND_TRANSFER = 1 and i.DEALING_DESK = 'Fixed Income' AND t.FinalFlag = 1 and [Trade Date] between @Start_Date and @End_Date  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FIDD_IF_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_FIDD_IF_DATA 	from #temp_if_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_FIDD_IF_DATA 	SELECT * 	from #temp_if_DATA  END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: DMC_FIDD_MONTHLY_AMENDMENTS_PERCENT CreateDate: 2019-10-18 08:39:51.003 ModifyDate: 2019-10-18 08:39:51.003 --- DEFINITION START --- -- ============================================= -- Author:		<Ayiba Cesario> -- Create date: <09/08/2018> -- Description:	<Generate DMC reports for FI Monthly Amendment Percentages. --	This stored procedure takes a start month, end month and report name  --	as input parameters and generates the reports for these months.> -- ============================================= --=========================== --2018-09-25 WH - changed the statuses in the #max_reason table as we have moved to using 'Status From' and not 'Status To' --===========================  CREATE PROCEDURE [dbo].[DMC_FIDD_MONTHLY_AMENDMENTS_PERCENT] 	@Start_Month INT, 	@Start_Year INT, 	@End_Month INT, 	@End_Year INT, 	@REPORT_NAME VARCHAR(MAX) AS  BEGIN  DECLARE @Start_Date DATETIME; SET @Start_Date = CONVERT(DATE,CONCAT(@Start_Year,'-',@Start_Month,'-01')); --Turn the input start month parameter into a date (using the first day of the month) DECLARE @End_Date0 DATETIME; DECLARE @End_Date DATETIME; SET @End_Date0 = EOMONTH(CONVERT(DATETIME,CONCAT(@End_Year,'-',@End_Month,'-01')));  --Turn the input end month parameter into a date (using the last day of the month)  SET @End_Date = DATEADD(second,86399,@End_Date0);  --Add the metadata to a table so we keep a history of all reports run IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_REPORTS_METADATA', 'U') IS NULL 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		CONVERT(VARCHAR(50),'FIDD_Monthly_Amendments_Percent') AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date] 	INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		'FIDD_Monthly_Amendments_Percent' AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date]  -----Use the latest REASON to determine if an exception is a false positive select distinct  	e.ID,  	e.REASON , 	e.STATUS into #Max_Reason from VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE e inner join ( 	select  		ID, 		MAX(touch_count) as [Max_touch]  		from VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE 		where status in ('For Review','With Dealer','With Reviewer','C&A Review Request') 		--the above condition around status ensures that we only consider exceptions coming from the Dealing Desk 		--only dealing desk has the ability to flag false positive exceptions 	group by ID ) a  on a.ID = e.ID and a.Max_touch = e.TOUCH_COUNT  -- 3.2 Report 1: Monthly Total Amendments % of Trade Volume  IF OBJECT_ID('tempdb..#temp_trades_table', 'U') IS NOT NULL DROP TABLE #temp_trades_table SELECT DISTINCT  	t.MULTI_FUND_ID,  	t.TOUCH_COUNT, 	--t.TRD_TRADE_DATE, 	--Thanos: change below to look at AMENDMENT_FLAG_CREATETIME 	a.AMENDMENT_FLAG_CREATETIME, 	CONCAT(YEAR(AMENDMENT_FLAG_CREATETIME), '-', MONTH(AMENDMENT_FLAG_CREATETIME)) AS TRADE_MONTH, 	pr.DEBT_DERIV, 	a.AMENDMENT_FLAG INTO #temp_trades_table FROM (SELECT DISTINCT MULTI_FUND_ID, TOUCH_COUNT, TRD_TRADE_DATE, CancellationFlag, Amendment_Cancellation FROM VISTA_REPORTING.dbo.TRADES) t LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID = t.MULTI_FUND_ID left join VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_FI_TABLE a on a.MULTI_FUND_ID = t.MULTI_FUND_ID and a.TOUCH_COUNT = t.TOUCH_COUNT --Thanos: Adding max reason so that we can remove False Positives in the where condition below left join #max_reason e on concat(t.multi_fund_id,'_15',t.touch_count) = e.ID WHERE a.AMENDMENT_FLAG > 0  AND pr.DEALING_DESK = 'Fixed Income'  --Thanos: Added condition for False Positives AND ISNULL(E.REASON,'') not in ('False Positive') --Thanos: change below to look at AMENDMENT_FLAG_CREATETIME AND a.AMENDMENT_FLAG_CREATETIME between @Start_Date and @End_Date   IF OBJECT_ID('tempdb..#temp_trades_table_fin', 'U') IS NOT NULL DROP TABLE #temp_trades_table_fin SELECT   	MULTI_FUND_ID,  	TRADE_MONTH, 	DEBT_DERIV, 	MAX(case when AMENDMENT_FLAG = 1 then 1 else 0 end) AS [AmendmentFlag] INTO #temp_trades_table_fin FROM #temp_trades_table   GROUP BY 	 	MULTI_FUND_ID,  	TRADE_MONTH, 	DEBT_DERIV     		  IF OBJECT_ID('tempdb..#temp_amends_table', 'U') IS NOT NULL DROP TABLE #temp_amends_table SELECT   	COUNT(DISTINCT MULTI_FUND_ID) AS MULTI_FUND_ID,  	TRADE_MONTH, 	DEBT_DERIV, 	COUNT(DISTINCT CASE WHEN AmendmentFlag = 1 THEN MULTI_FUND_ID ELSE NULL END) AS [AmendmentFlag] INTO #temp_amends_table FROM #temp_trades_table_fin GROUP BY 	 	TRADE_MONTH, 	DEBT_DERIV   IF OBJECT_ID('tempdb..#temp_trade_month', 'U') IS NOT NULL DROP TABLE #temp_trade_month --Thanos: Denominator looks at total trades so should be grouped by trd_trade_date rather than create time SELECT DISTINCT 	COUNT(DISTINCT t.MULTI_FUND_ID) AS MF_COUNT, 	pr.DEBT_DERIV, 	CONCAT(YEAR(t.TRD_TRADE_DATE), '-', MONTH(t.TRD_TRADE_DATE)) AS TRADE_MONTH INTO #temp_trade_month FROM VISTA_REPORTING.dbo.TRADES t LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID = t.MULTI_FUND_ID WHERE ISNULL(pr.DEBT_DERIV,'') in ('DEBT', 'DERIV') and TRD_TRADE_DATE between @Start_Date and @End_Date GROUP BY CONCAT(YEAR(t.TRD_TRADE_DATE), '-', MONTH(t.TRD_TRADE_DATE)), pr.DEBT_DERIV   IF OBJECT_ID('tempdb..#temp_monthly_amendments', 'U') IS NOT NULL DROP TABLE #temp_monthly_amendments SELECT DISTINCT 	tm.TRADE_MONTH, 	tm1.MF_COUNT AS LZ_TOTAL_VOLUME, 	(SUM(tt1.AmendmentFlag)) AS LZ_TOTAL_AMENDS, 	100.0*((SUM(tt1.AmendmentFlag) )*1.0)/tm1.MF_COUNT AS LZ_PERCENTAGE, 	tm2.MF_COUNT AS TF_TOTAL_VOLUME, 	(SUM(tt2.AmendmentFlag)) AS TF_TOTAL_AMENDS, 	100.0*((SUM(tt2.AmendmentFlag))*1.0)/tm2.MF_COUNT AS TF_PERCENTAGE, 	EOMONTH(CONVERT(DATE,CONCAT(tm.TRADE_MONTH,'-01'))) AS [Date], 	@REPORT_NAME AS [Report_Name] into #temp_monthly_amendments FROM #temp_trade_month tm LEFT JOIN #temp_trade_month tm1 ON tm1.TRADE_MONTH=tm.TRADE_MONTH AND tm1.DEBT_DERIV='DEBT' LEFT JOIN #temp_trade_month tm2 ON tm2.TRADE_MONTH=tm.TRADE_MONTH AND tm2.DEBT_DERIV='DERIV' LEFT JOIN #temp_amends_table tt1 ON tt1.TRADE_MONTH=tm.TRADE_MONTH AND tt1.DEBT_DERIV = 'DEBT' AND tm.DEBT_DERIV = tt1.DEBT_DERIV LEFT JOIN #temp_amends_table tt2 ON tt2.TRADE_MONTH=tm.TRADE_MONTH AND tt2.DEBT_DERIV = 'DERIV' AND tm.DEBT_DERIV = tt2.DEBT_DERIV GROUP BY tm.TRADE_MONTH, tm1.MF_COUNT, tm2.MF_COUNT, EOMONTH(CONVERT(DATE,CONCAT(tm.TRADE_MONTH,'-01')))    IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FI_MONTHLY_AMENDMENTS_PERCENT_TABLE', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_FI_MONTHLY_AMENDMENTS_PERCENT_TABLE 	from #temp_monthly_amendments ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_FI_MONTHLY_AMENDMENTS_PERCENT_TABLE 	SELECT * 	from #temp_monthly_amendments   IF OBJECT_ID('tempdb..#temp_amends_table_DATA', 'U') IS NOT NULL DROP TABLE #temp_amends_table_DATA SELECT   	MULTI_FUND_ID,  	TRADE_MONTH, 	DEBT_DERIV, 	AmendmentFlag, 	EOMONTH(CONVERT(DATE,CONCAT(TRADE_MONTH,'-01'))) AS [Date], 	@REPORT_NAME AS [Report_Name] INTO #temp_amends_table_DATA FROM #temp_trades_table_fin   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FI_MONTHLY_AMENDMENTS_PERCENT_TABLE_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_FI_MONTHLY_AMENDMENTS_PERCENT_TABLE_DATA 	from #temp_amends_table_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_FI_MONTHLY_AMENDMENTS_PERCENT_TABLE_DATA 	SELECT * 	from #temp_amends_table_DATA  END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: DMC_FIDD_RATIONALE CreateDate: 2019-10-18 08:39:51.063 ModifyDate: 2019-10-18 08:39:51.063 --- DEFINITION START --- -- ============================================= -- Author:		<Athanasios Pertsinis> -- Create date: <13/08/2018> -- Description:	<Total exceptions for each report split by the latest Reason --				 selected by the Head of the Dealing Desk.> -- ============================================= --=========================== --2018-09-25 WH - changed the statuses in the #max_reason table as we have moved to using 'Status From' and not 'Status To' --===========================  CREATE PROCEDURE [dbo].[DMC_FIDD_RATIONALE] 	-- Add the parameters for the stored procedure here 	@Start_Month INT, 	@Start_Year INT, 	@End_Month INT, 	@End_Year INT, 	@REPORT_NAME VARCHAR(MAX) AS BEGIN      -- Insert statements for procedure here DECLARE @Start_Date DATETIME; SET @Start_Date = CONVERT(DATE,CONCAT(@Start_Year,'-',@Start_Month,'-01')); --Turn the input start month parameter into a date (using the first day of the month) DECLARE @End_Date0 DATETIME; DECLARE @End_Date DATETIME; SET @End_Date0 = EOMONTH(CONVERT(DATETIME,CONCAT(@End_Year,'-',@End_Month,'-01')));  --Turn the input end month parameter into a date (using the last day of the month)  SET @End_Date = DATEADD(second,86399,@End_Date0);  --Add the metadata to a table so we keep a history of all reports run IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_REPORTS_METADATA', 'U') IS NULL 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		CONVERT(VARCHAR(50),'FIDD_Rationale') AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date] 	INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_REPORTS_METADATA 	SELECT 		@Start_Date AS [Start_Month], 		@End_Date	AS [End_Month], 		'FIDD_Rationale' AS [DMC_Report], 		@REPORT_NAME AS [Report_Name], 		GETDATE() AS [Run_Date]   -- FIDD Report: Exceptions split by Rationale IF OBJECT_ID('tempdb..#temp_trades', 'U') IS NOT NULL DROP TABLE #temp_trades SELECT DISTINCT 	oc.PM_ORD, 	t.ORD_NUM, 	t.CLIENT_EXECUTION_NUM, 	t.MULTI_FUND_ID, 	pr.INST_TYPE, 	pr.COUNTRY, 	MAX(t.TRD_TRADE_DATE) AS MAX_TRD_TRADE_DATE INTO #temp_trades FROM (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, CLIENT_EXECUTION_NUM, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES) t LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON oc.TRD_ORD=t.ORD_NUM LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, INST_TYPE, COUNTRY FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr ON t.MULTI_FUND_ID = pr.MULTI_FUND_ID --where t.trd_trade_date between @Start_Date AND @End_Date GROUP BY 	oc.PM_ORD, 	t.ORD_NUM, 	t.CLIENT_EXECUTION_NUM, 	t.MULTI_FUND_ID, 	pr.INST_TYPE, 	pr.COUNTRY   IF OBJECT_ID('tempdb..#Max_Reason', 'U') IS  NOT NULL DROP TABLE #Max_Reason --The below table is used to identify False Positives from Dealing Desk select distinct  	e.ID,  	e.REASON , 	e.STATUS into #Max_Reason from VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE e inner join ( 	select  		ID, 		MAX(touch_count) as [Max_touch], 		MAX(CREATED) AS MAX_CREATE_TIME 		from VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE 		where status in ('For Review','With Dealer','With Reviewer','C&A Review Request') 		--the above condition around status ensures that we only consider exceptions coming from the Dealing Desk 		--only dealing desk has the ability to flag false positive exceptions 	group by ID ) a  on a.ID = e.ID and a.Max_touch = e.TOUCH_COUNT AND a.MAX_CREATE_TIME=e.CREATED  --For Timely Execution, we are only interested in the first time an order is raised as an exception (aligns to FICM Order Handling Report). The next few steps achieve this.  	--Classify orders as Intra first and then Inter as one order might be both inter and intra.  	IF OBJECT_ID('tempdb..#step1', 'U') IS  NOT NULL DROP TABLE #step1 	select	distinct  			ord_num, 			TIMELY_EXECUTION_EXCEPTION, 			Exception_Type, 			case when Exception_Type = 'Intra' then 1 else 0 end as [Intra_Flag] 	into #step1 	from VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE te 	where TIMELY_EXECUTION_EXCEPTION > 0 	ORDER BY ORD_NUM  	--Take the max -i.e. use Intra first and then Inter  	IF OBJECT_ID('tempdb..#step2', 'U') IS NOT NULL DROP TABLE #step2 	SELECT	ord_num,  			MAX([Intra_Flag]) AS [New Exception type] 			--MAX(CASE WHEN [Intra_Flag] = 1 THEN 1 ELSE TIMELY_EXECUTION_EXCEPTION END) AS [NEW TIMELY_EXECUTION_EXCEPTION] 	INTO #step2 	FROM #step1 	GROUP BY ORD_NUM  	-- For Intra set Timely execution exception to 1; for the rest set to max, i.e. can go up to 160 	IF OBJECT_ID('tempdb..#timex', 'U') IS NOT NULL DROP TABLE #timex 	SELECT st2.ord_num, 		MIN(CASE WHEN [New Exception type] = 1 THEN 1 ELSE TIMELY_EXECUTION_EXCEPTION END) AS [NEW TIMELY_EXECUTION_EXCEPTION]  	INTO #timex 	FROM #step2 st2 	INNER JOIN #STEP1 st1 ON ST2.ORD_NUM = ST1.ORD_NUM AND ST2.[New Exception type] = st1.[Intra_Flag] 	group by st2.ord_num  	-- Left join to step2 to get [New Exception type]  	IF OBJECT_ID('tempdb..#step3', 'U') IS NOT NULL DROP TABLE #step3 	select	tim.*, 			st2.[New Exception type], 			case when  [New Exception type] = 1 then 'Intra' else 'Inter' end as [Exception type desc] 	INTO #step3		 	from #timex tim 	left join #step2 st2 on tim.ORD_NUM = st2.ORD_NUM    	IF OBJECT_ID('tempdb..#step4', 'U') IS NOT NULL DROP TABLE #step4 	select st3.* into #step4 from #step3 st3 	inner join #step1 st1 on st3.ord_num = st1.ORD_NUM and st3.[Exception type desc] = st1.Exception_Type  				and st3.[NEW TIMELY_EXECUTION_EXCEPTION] = st1.TIMELY_EXECUTION_EXCEPTION   	--Use the VG level table to determine exceptions. Join to excepotion reason table to discount false positives 	IF OBJECT_ID('tempdb..#orders', 'U') IS  NOT NULL DROP TABLE #orders 	SELECT  		ex.ORD_NUM, 		CONCAT(YEAR(MIN(te.CREATETIME)), ' - ', MONTH(MIN(te.CREATETIME))) AS Month_Year, 		MAX(CASE WHEN rsn.REASON = 'False Positive' THEN 1 ELSE 0 END) AS False_Positive, 		rsn.REASON 	INTO #orders 	FROM #step4 ex 	LEFT JOIN #Max_Reason rsn 		ON CONCAT(ex.ORD_NUM, '_9',[Exception type desc],[NEW TIMELY_EXECUTION_EXCEPTION]) = rsn.ID 	left join VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE te  	on te.ORD_NUM = ex.ORD_NUM AND te.Exception_Type = ex.[Exception type desc] AND te.TIMELY_EXECUTION_EXCEPTION = ex.[NEW TIMELY_EXECUTION_EXCEPTION] 	where te.CREATETIME between @Start_Date and @End_Date 	GROUP BY 		ex.ORD_NUM, rsn.REASON	   IF OBJECT_ID('tempdb..#temp_exception_table', 'U') IS NOT NULL DROP TABLE #temp_exception_table SELECT *  INTO #temp_exception_table FROM ( 	SELECT DISTINCT 		qe.MULTI_FUND_ID AS EXCEPTION_ID, 		case when ISNULL(e.Reason,'') = '' then 'N/A' 			 else e.REASON 		end as Rationale, 		'1' AS EXCEPTION_TYPE_ID, 		qe.QUOTE_EXCEPTION AS EXCEPTION_VALUE, 		CONCAT(YEAR(qe.CREATETIME), ' - ', MONTH(qe.CREATETIME)) AS [DATE] 	FROM #temp_trades t  	INNER JOIN VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI_TABLE qe ON qe.MULTI_FUND_ID=t.MULTI_FUND_ID 	LEFT JOIN #MAX_REASON e on concat(t.multi_fund_id,'_1') = e.ID 	WHERE QUOTE_EXCEPTION > 0 and ISNULL(e.Reason,'') <> 'False Positive' and qe.CREATETIME between @Start_Date and @End_Date 	UNION  	SELECT DISTINCT 		qe.MULTI_FUND_ID AS EXCEPTION_ID, 		case when ISNULL(e.Reason,'') = '' then 'N/A' 			 else e.REASON 		end as Rationale, 		'7' AS EXCEPTION_TYPE_ID, 		qe.NWQ_EXCEPTION AS EXCEPTION_VALUE, 		CONCAT(YEAR(qe.NWQ_CREATEIME), ' - ', MONTH(qe.NWQ_CREATEIME)) AS [DATE] 	FROM #temp_trades t  	INNER JOIN VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_FI_TABLE qe ON qe.MULTI_FUND_ID=t.MULTI_FUND_ID 	LEFT JOIN #MAX_REASON e on concat(t.multi_fund_id,'_7') = e.ID 	WHERE NWQ_EXCEPTION > 0 and ISNULL(e.Reason,'') <> 'False Positive' and qe.NWQ_CREATEIME between @Start_Date and @End_Date 	UNION  	SELECT DISTINCT 		qe.MULTI_FUND_ID AS EXCEPTION_ID, 		case when ISNULL(e.Reason,'') = '' then 'N/A' 			 else e.REASON 		end as Rationale, 		'10' AS EXCEPTION_TYPE_ID, 		qe.TIMELY_RECORDING_EXCEPTION AS EXCEPTION_VALUE, 		CONCAT(YEAR(qe.TREC_CREATETIME), ' - ', MONTH(qe.TREC_CREATETIME)) AS [DATE] 	FROM #temp_trades t  	INNER JOIN VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FI_TABLE qe ON qe.MULTI_FUND_ID=t.MULTI_FUND_ID 	LEFT JOIN #MAX_REASON e on concat(t.multi_fund_id,'_10') = e.ID 	WHERE TIMELY_RECORDING_EXCEPTION > 0 and ISNULL(e.Reason,'') <> 'False Positive' and qe.TREC_CREATETIME between @Start_Date and @End_Date 	UNION  	SELECT DISTINCT 		qe.MULTI_FUND_ID AS EXCEPTION_ID, 		LTRIM(max(case when qe2.MULTI_FUND_ID IS NOT NULL AND ISNULL(e.Reason,'') <> '' then e.REASON 			 else ' N/A' 		end)) as Rationale, -- We only take the reason associated with the first time this order was raised, otherwise we may get duplication of orders across REASONs. 		'15' AS EXCEPTION_TYPE_ID, 		qe.AMENDMENT_FLAG AS EXCEPTION_VALUE, 		(CONCAT(YEAR(qe.AMENDMENT_FLAG_CREATETIME), ' - ', MONTH(qe.AMENDMENT_FLAG_CREATETIME))) AS [DATE] 	FROM #temp_trades t  	INNER JOIN VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_FI_TABLE qe ON qe.MULTI_FUND_ID=t.MULTI_FUND_ID 	LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, TOUCH_COUNT, CancellationFlag, TRD_AMEND_TYPE FROM VISTA_REPORTING.dbo.TRADES) t2 ON qe.MULTI_FUND_ID = t2.MULTI_FUND_ID AND qe.TOUCH_COUNT = t2.TOUCH_COUNT 	LEFT JOIN #MAX_REASON e on concat(t.multi_fund_id,'_15',qe.TOUCH_COUNT) = e.ID 	LEFT JOIN (SELECT  					MULTI_FUND_ID,  					CONCAT(YEAR(AMENDMENT_FLAG_CREATETIME), ' - ', MONTH(AMENDMENT_FLAG_CREATETIME)) AS [DATE], 					MIN(AMENDMENT_FLAG_CREATETIME) AS MIN_CREATETIME      --this step is necessary to extract the first ammendment in the month 				FROM VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_FI_TABLE  				GROUP BY  					MULTI_FUND_ID, 					CONCAT(YEAR(AMENDMENT_FLAG_CREATETIME), ' - ', MONTH(AMENDMENT_FLAG_CREATETIME)) 				) qe2 ON qe2.MULTI_FUND_ID=t.MULTI_FUND_ID  						 AND qe2.MIN_CREATETIME=qe.AMENDMENT_FLAG_CREATETIME 						 AND qe2.DATE=CONCAT(YEAR(qe.AMENDMENT_FLAG_CREATETIME), ' - ', MONTH(qe.AMENDMENT_FLAG_CREATETIME)) 	WHERE AMENDMENT_FLAG > 0 AND ISNULL(e.Reason,'') <> 'False Positive' and qe.AMENDMENT_FLAG_CREATETIME between @Start_Date and @End_Date and cancellationflag <> 1  	GROUP BY qe.MULTI_FUND_ID, qe.AMENDMENT_FLAG, CONCAT(YEAR(qe.AMENDMENT_FLAG_CREATETIME), ' - ', MONTH(qe.AMENDMENT_FLAG_CREATETIME)) 	UNION  	--For Timely Execution we use the temp tables created above as this only looks to the first instance of an exception being raised. 	SELECT DISTINCT 		ORD_NUM AS EXCEPTION_ID, 		LTRIM(max(case when ORD_NUM IS NOT NULL AND ISNULL(Reason,'') <> '' then REASON 			 else ' N/A' 		end)) as Rationale, -- We only take the reason associated with the first time this order was raised, otherwise we may get duplication of orders across REASONs. 		'9' AS EXCEPTION_TYPE_ID, 		1 AS EXCEPTION_VALUE, -- Default to 1 so that we don't double count the same order being raised multiple times. 		--Thanos: Changed the below to Createtime from Auth_Time 		MONTH_YEAR AS [DATE] --Put the exception into the first month that it was flagged. 	FROM #orders 	WHERE False_Positive = 0 	GROUP BY ORD_NUM, MONTH_YEAR  	UNION  	SELECT DISTINCT 		qe.oa_id AS EXCEPTION_ID, 		case when ISNULL(e.Reason,'') = '' then 'N/A' 			 else e.REASON 		end as Rationale, 		'13' AS EXCEPTION_TYPE_ID, 		qe.MERGE_EXCEPTION AS EXCEPTION_VALUE, 		CONCAT(YEAR(qe.CREATETIME), ' - ', MONTH(qe.CREATETIME)) AS [DATE] 	FROM #temp_trades t 	INNER JOIN VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_FI_TABLE qe ON qe.ORD_NUM=t.ORD_NUM 	LEFT JOIN #Max_Reason e on concat(qe.oa_id,'_13') = e.ID 	WHERE MERGE_EXCEPTION > 0 and ISNULL(e.Reason,'') <> 'False Positive' and qe.CREATETIME between @Start_Date and @End_Date 	UNION  	SELECT DISTINCT 		qe.ORD_NUM AS EXCEPTION_ID, 		case when ISNULL(e.Reason,'') = '' then 'N/A' 			 else e.REASON 		end as Rationale, 		'14' AS EXCEPTION_TYPE_ID, 		qe.ORDER_PRIORITY_EXCEPTION AS EXCEPTION_VALUE, 		CONCAT(YEAR(qe.CREATETIME), ' - ', MONTH(qe.CREATETIME)) AS [DATE] 	FROM #temp_trades t 	INNER JOIN VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_FI_TABLE qe ON qe.ORD_NUM=t.ORD_NUM 	LEFT JOIN #Max_Reason e on concat(qe.ORD_NUM,'_14') = e.ID 	WHERE ORDER_PRIORITY_EXCEPTION > 0 and ISNULL(e.Reason,'') <> 'False Positive' and qe.CREATETIME between @Start_Date and @End_Date 	UNION  	SELECT DISTINCT 		qe.MULTI_FUND_ID AS EXCEPTION_ID, 		case when ISNULL(e.Reason,'') = '' then 'N/A' 			 else e.REASON 		end as Rationale, 		'25' AS EXCEPTION_TYPE_ID, 		qe.IT_FLAG AS EXCEPTION_VALUE, 		CONCAT(YEAR(qe.IT_FLAG_CREATETIME), ' - ', MONTH(qe.IT_FLAG_CREATETIME)) AS [DATE] 	FROM #temp_trades t  	INNER JOIN vista_staging.dbo.VG_25_INTERFUND_TRANSFER_FI_TABLE qe ON qe.MULTI_FUND_ID=t.MULTI_FUND_ID 	LEFT JOIN #MAX_REASON e on concat(t.multi_fund_id,'_25') = e.ID 	WHERE IT_FLAG > 0 and ISNULL(e.Reason,'') <> 'False Positive' and qe.IT_FLAG_CREATETIME between @Start_Date and @End_Date )temp   IF OBJECT_ID('tempdb..#temp_count_table', 'U') IS NOT NULL DROP TABLE #temp_count_table SELECT DISTINCT 	EXCEPTION_TYPE_ID, 	CASE 		WHEN EXCEPTION_TYPE_ID = '1'	THEN 'Quote Exception' 		WHEN EXCEPTION_TYPE_ID = '7'	THEN 'Non-Winning Quote' 		WHEN EXCEPTION_TYPE_ID = '9'	THEN 'Timely Execution' 		WHEN EXCEPTION_TYPE_ID = '10'	THEN 'Timely Recording' 		--WHEN EXCEPTION_TYPE_ID = '11'	THEN 'Timely Release' --No FI timely Release table 		WHEN EXCEPTION_TYPE_ID = '13'	THEN 'Aggregation' 		WHEN EXCEPTION_TYPE_ID = '14'	THEN 'Sequential Orders' 		WHEN EXCEPTION_TYPE_ID = '15'	THEN 'Amendments' 		WHEN EXCEPTION_TYPE_ID = '25'	THEN 'Interfund Transfers' 	END AS AREA, 	CASE  		WHEN EXCEPTION_TYPE_ID = '1'	THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '7'	THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '9'	THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '10'	THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '11'	THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '13'	THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '14'	THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '15'	THEN 'No. of Amendments made during the month' 		WHEN EXCEPTION_TYPE_ID = '25'	THEN 'No. of Interfund Transfers' 	END AS [TYPE], 	COUNT(DISTINCT EXCEPTION_ID) AS TOTAL_POP, 	Rationale, 	[DATE] INTO #temp_count_table FROM #temp_exception_table GROUP BY 	EXCEPTION_TYPE_ID, 	Rationale, 	[DATE]   IF OBJECT_ID('tempdb..#temp_dealing_desk_controls', 'U') IS NOT NULL DROP TABLE #temp_dealing_desk_controls SELECT DISTINCT 	AREA, 	TYPE, 	Rationale, 	[DATE] AS Exception_Date, 	SUM(TOTAL_POP) AS NO_EXCEPTIONS_IN_SCOPE, 	'' AS DMC_TICKED INTO #temp_dealing_desk_controls FROM #temp_count_table GROUP BY  	AREA, 	TYPE, 	[DATE], 	Rationale   IF OBJECT_ID('tempdb..#temp_cancel_table', 'U') IS NOT NULL DROP TABLE #temp_cancel_table SELECT DISTINCT 	ma.MULTI_FUND_ID, 	MIN(ma.AMENDMENT_FLAG_CREATETIME) AS CANCEL_TIME, 	mr.REASON INTO #temp_cancel_table  FROM VISTA_REPORTING.[dbo].[MASTER_AMENDMENT_FLAG_TABLE] ma LEFT JOIN #Max_Reason mr ON mr.ID = CONCAT(ma.MULTI_FUND_ID, '_15', ma.TOUCH_COUNT) WHERE Amendment_Cancellation = 'Cancellation' and DEALING_DESK = 'Fixed Income'  	  and AMENDMENT_FLAG_CREATETIME between @Start_Date and @End_Date GROUP BY MULTI_FUND_ID, mr.REASON   IF OBJECT_ID('tempdb..#temp_cancel_table2', 'U') IS NOT NULL DROP TABLE #temp_cancel_table2 SELECT DISTINCT 	'Post Trade Cancellations' AS [AREA], 	'No. of Cancellations made during the month' AS [TYPE], 	CASE  		WHEN REASON = '' THEN 'N/A' 		ELSE REASON 	END AS Rationale, 	CONCAT(YEAR(CANCEL_TIME), ' - ', MONTH(CANCEL_TIME)) AS EXCEPTION_DATE, 	COUNT(MULTI_FUND_ID) AS NO_EXCEPTIONS_IN_SCOPE, 	'' AS DMC_TICKED INTO #temp_cancel_table2 FROM #temp_cancel_table GROUP BY CONCAT(YEAR(CANCEL_TIME), ' - ', MONTH(CANCEL_TIME)), REASON   IF OBJECT_ID('tempdb..#temp_finaltable', 'U') IS NOT NULL DROP TABLE #temp_finaltable SELECT *, EOMONTH(convert(date, concat([Exception_Date],'-01'))) AS [Date], @REPORT_NAME AS [Report_Name]  into #temp_finaltable FROM ( 	SELECT * FROM #temp_dealing_desk_controls 	UNION  	SELECT * FROM #temp_cancel_table2 )tmp   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FI_DD_RATIONALE_TABLE', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_FI_DD_RATIONALE_TABLE 	from #temp_finaltable ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_FI_DD_RATIONALE_TABLE 	SELECT * 	from #temp_finaltable  IF OBJECT_ID('tempdb..#temp_count_table_DATA', 'U') IS NOT NULL DROP TABLE #temp_count_table_DATA SELECT DISTINCT 	EXCEPTION_TYPE_ID, 	CASE 		WHEN EXCEPTION_TYPE_ID = '1'	THEN 'Quote Exception' 		WHEN EXCEPTION_TYPE_ID = '7'	THEN 'Non-Winning Quote' 		WHEN EXCEPTION_TYPE_ID = '9'	THEN 'Timely Execution' 		WHEN EXCEPTION_TYPE_ID = '10'	THEN 'Timely Recording' 		--WHEN EXCEPTION_TYPE_ID = '11'	THEN 'Timely Release' --No FI timely Release table 		WHEN EXCEPTION_TYPE_ID = '13'	THEN 'Aggregation' 		WHEN EXCEPTION_TYPE_ID = '14'	THEN 'Sequential Orders' 		WHEN EXCEPTION_TYPE_ID = '15'	THEN 'Amendments' 		WHEN EXCEPTION_TYPE_ID = '25'	THEN 'Interfund Transfers' 	END AS AREA, 	CASE  		WHEN EXCEPTION_TYPE_ID = '1'	THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '7'	THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '9'	THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '10'	THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '11'	THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '13'	THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '14'	THEN 'No. of exceptions' 		WHEN EXCEPTION_TYPE_ID = '15'	THEN 'No. of Amendments made during the month' 		WHEN EXCEPTION_TYPE_ID = '25'	THEN 'No. of Interfund Transfers' 	END AS [TYPE], 	EXCEPTION_ID, 	Rationale, 	[DATE] INTO #temp_count_table_DATA FROM #temp_exception_table    IF OBJECT_ID('tempdb..#temp_dealing_desk_controls_DATA', 'U') IS NOT NULL DROP TABLE #temp_dealing_desk_controls_DATA SELECT DISTINCT 	AREA, 	TYPE, 	Rationale, 	[DATE] AS Exception_Date, 	EXCEPTION_ID, 	'' AS DMC_TICKED INTO #temp_dealing_desk_controls_DATA FROM #temp_count_table_DATA    IF OBJECT_ID('tempdb..#temp_cancel_table2_DATA', 'U') IS NOT NULL DROP TABLE #temp_cancel_table2_DATA SELECT DISTINCT 	'Post Trade Cancellations' AS [AREA], 	'No. of Cancellations made during the month' AS [TYPE], 	CASE  		WHEN REASON = '' THEN 'N/A' 		ELSE REASON 	END AS Rationale, 	CONCAT(YEAR(CANCEL_TIME), ' - ', MONTH(CANCEL_TIME)) AS EXCEPTION_DATE, 	MULTI_FUND_ID, 	'' AS DMC_TICKED INTO #temp_cancel_table2_DATA FROM #temp_cancel_table   IF OBJECT_ID('tempdb..#temp_finaltable_DATA', 'U') IS NOT NULL DROP TABLE #temp_finaltable_DATA SELECT *, EOMONTH(convert(date, concat([Exception_Date],'-01'))) AS [Date], @REPORT_NAME AS [Report_Name]  into #temp_finaltable_DATA FROM ( 	SELECT * FROM #temp_dealing_desk_controls_DATA 	UNION  	SELECT * FROM #temp_cancel_table2_DATA )tmp   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FI_DD_RATIONALE_TABLE_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_FI_DD_RATIONALE_TABLE_DATA 	from #temp_finaltable_DATA ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_FI_DD_RATIONALE_TABLE_DATA 	SELECT * 	from #temp_finaltable_DATA  END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: DMC_FX_AGGREGATOR CreateDate: 2019-10-18 08:39:51.130 ModifyDate: 2022-03-04 17:48:12.017 --- DEFINITION START --- -- ============================================= -- Author:		<Samad, Mehreen> -- Create date: <31/07/2019> -- Description:	 -- <Generates AGGREGATOR Report data as well as  -- Cancelled Orders/Trades Report data for FX.> -- =============================================  -- ***************VERSION CONTROL*************** -- MN: 03-02-2020 - Split out Spot Ref Rate into FWD and SPOT similar to how it is done for best ex  --2022-01-27, Matej Miter; Created for Jira: --SURVG-563 - New Fx Report Instructor to dealer 2022 -- *********************************************  CREATE PROCEDURE [dbo].[DMC_FX_AGGREGATOR]  	-- Add the parameters for the stored procedure here  	@Start_day		INT, 	@Start_Month	INT, 	@Start_Year		INT, 	@End_Day		INT,  	@End_Month		INT, 	@End_Year		INT, 	@REPORT_NAME	VARCHAR(MAX)  AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;      -- Insert statements for procedure here  	DECLARE @Start_Date	DATETIME; 	SET		@Start_Date = CONVERT(DATE,CONCAT(@Start_Year,'-',@Start_Month,'-', @Start_day)); --Turn the input start month parameter into a date  	DECLARE @End_Date0	DATETIME; 	DECLARE @End_Date	DATETIME; 	SET		@End_Date0  = CONVERT(DATETIME,CONCAT(@End_Year,'-',@End_Month, '-', @End_Day));  --Turn the input end month parameter into a date   	SET		@End_Date	= DATEADD(SECOND,86399,@End_Date0); --To make it for 23:59:59 that day. May need to update this for milliseconds.    --Add the metadata to a table so we keep a history of all reports run IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FX_REPORTS_METADATA', 'U') IS NULL SELECT 	DATEPART(DAY,@Start_Date) AS [START_DAY], 	DATEPART(MONTH, @Start_Date) AS [START_MONTH], 	DATEPART(YEAR, @Start_Date) AS [START_YEAR], 	DATEPART(DAY,@End_Date)	AS [END_DAY], 	DATEPART(MONTH, @End_Date) AS [END_MONTH], 	DATEPART(YEAR, @End_Date) AS [END_YEAR], 	CONVERT(VARCHAR(70),'FX_AGGREGATOR') AS [DMC_Report], 	@REPORT_NAME AS [Report_Name], 	GETDATE() AS [Run_Date] INTO VISTA_REPORTING.dbo.DMC_FX_REPORTS_METADATA ELSE INSERT INTO VISTA_REPORTING.dbo.DMC_FX_REPORTS_METADATA SELECT 	DATEPART(DAY,@Start_Date) AS [START_DAY], 	DATEPART(MONTH, @Start_Date) AS [START_MONTH], 	DATEPART(YEAR, @Start_Date) AS [START_YEAR], 	DATEPART(DAY,@End_Date)	AS [END_DAY], 	DATEPART(MONTH, @End_Date) AS [END_MONTH], 	DATEPART(YEAR, @End_Date) AS [END_YEAR], 	'FX_AGGREGATOR' AS [DMC_Report], 	@REPORT_NAME AS [Report_Name], 	GETDATE() AS [Run_Date]   -- Get all system generated narrations for FX Exceptions IF OBJECT_ID('tempdb..#system_reasons', 'U') IS  NOT NULL DROP TABLE #system_reasons SELECT DISTINCT 	ert.ID, 	COALESCE(fxt.TRADE_ID, fxt2.TRADE_ID) AS TRADE_ID, 	CASE 		WHEN CHARINDEX('_10_', ID) > 0 THEN fxt.TIMELY_RECORDING_REASON_NARRATION													    		WHEN CHARINDEX('_607_', ID) > 0 and mst.NWQ_EXCEPTION = 'Exception' THEN fxt.PRICE_REASON_NARRATION 								    		WHEN CHARINDEX('_607_', ID) > 0 and mst.B3Q_EXCEPTION = 'Exception' THEN fxt.THREE_BANK_QUOTES_EXCEPTION_REASON_NARRATION										    		WHEN (CHARINDEX('_607_', ID) > 0 OR CHARINDEX('_501_', ID) > 0)  and mst.SRR_EXCEPTION = 'Exception' THEN fxt.SPOT_TOLERANCE_REASON_NARRATION													    		WHEN CHARINDEX('_608_', ID) > 0 THEN fxt.CANCEL_REASON_NARRATION															    		WHEN CHARINDEX('_604_', ID) > 0 THEN fxo.SEQUENCE_EXCEPTION_REASON_NARRATION												    		WHEN CHARINDEX('_9_', ID) > 0 THEN COALESCE(fxt2.TIMELY_EXECUTION_REASON_NARRATION, fxo.TIMELY_EXC_REASON_NOT_ACK_NARRATION)								    		WHEN CHARINDEX('_602_', ID) > 0THEN fxo.HOLDOVER_REASON_NARRATION 		ELSE NULL 	END AS SYSTEM_NARRATION, -- Extract system based narration where available 	CASE  		WHEN CHARINDEX('_9_', ID) > 0 THEN '9' 		WHEN CHARINDEX('_10_', ID) > 0 THEN '10' 		WHEN CHARINDEX('_500_', ID) > 0 THEN '500' 		WHEN CHARINDEX('_501_', ID) > 0 THEN '501' 		WHEN CHARINDEX('_601_', ID) > 0 THEN '601' 		WHEN CHARINDEX('_602_', ID) > 0 THEN '602' 		WHEN CHARINDEX('_603_', ID) > 0 THEN '603' 		WHEN CHARINDEX('_604_', ID) > 0 THEN '604' 		WHEN (COALESCE(fxt.INSTRUCTION_TYPE,mst.PRODUCT) != 'SPOT'  			  OR COALESCE(fxt.INSTRUCTION_TYPE,mst.PRODUCT) is null)  			  AND mst.NWQ_EXCEPTION = 'Exception'  			  AND CHARINDEX('_607_', ID) > 0 THEN '607_NWQ_FWD' 		WHEN COALESCE(fxt.INSTRUCTION_TYPE,mst.PRODUCT) = 'SPOT' 			  			  AND mst.NWQ_EXCEPTION = 'Exception'  			  AND CHARINDEX('_607_', ID) > 0 THEN '607_NWQ_SPOT' 		WHEN (COALESCE(fxt.INSTRUCTION_TYPE,mst.PRODUCT) != 'SPOT'  			  OR COALESCE(fxt.INSTRUCTION_TYPE,mst.PRODUCT) is null)  			  AND mst.B3Q_EXCEPTION = 'Exception'  			  AND CHARINDEX('_607_', ID) > 0 THEN '607_QE_FWD' 		WHEN COALESCE(fxt.INSTRUCTION_TYPE,mst.PRODUCT) = 'SPOT' 			  			  AND mst.B3Q_EXCEPTION = 'Exception'  			  AND CHARINDEX('_607_', ID) > 0 THEN '607_QE_SPOT' 		WHEN COALESCE(fxt.INSTRUCTION_TYPE,mst.PRODUCT) = 'SPOT' 			  AND ((CHARINDEX('_607_', ID) > 0) OR (CHARINDEX('_501_', ID) > 0))  			  			  AND mst.SRR_EXCEPTION = 'Exception' THEN '607_SRR_SPOT' 		WHEN (COALESCE(fxt.INSTRUCTION_TYPE,mst.PRODUCT) != 'SPOT'  			  OR COALESCE(fxt.INSTRUCTION_TYPE,mst.PRODUCT) is null) 			  AND ((CHARINDEX('_607_', ID) > 0) OR (CHARINDEX('_501_', ID) > 0)) 			  			  AND mst.SRR_EXCEPTION = 'Exception' THEN '607_SRR_FWD' 		WHEN CHARINDEX('_608_', ID) > 0 THEN '608' 		WHEN CHARINDEX('_611_', ID) > 0 THEN '611' 		WHEN CHARINDEX('_612_', ID) > 0 THEN '612'		 END AS EXCEPTION_TYPE_ID -- ID matching the EXCEPTION_TYPE_ID from #temp_exception_table enabling the COM<MENT/NARRATION to be joined at the end INTO #system_reasons FROM Vista_Reporting.dbo.EXCEPTION_REASON_TABLE ert LEFT JOIN Vista_Reporting.dbo.FX_TRADES fxt ON CAST(fxt.TRADE_ID AS VARCHAR) = LEFT(ID, CHARINDEX('_', ID) - 1)  LEFT JOIN Vista_Reporting.dbo.FX_TRADES fxt2 ON CAST(fxt2.ORDER_ID AS VARCHAR) = LEFT(ID, CHARINDEX('_', ID) - 1)  LEFT JOIN Vista_Reporting.dbo.FX_ORDERS fxo ON CAST(fxo.FXM_ORDER_ID AS VARCHAR) = LEFT(ID, CHARINDEX('_', ID) - 1)  LEFT JOIN Vista_Reporting.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE mst ON mst.TRANSACTION_NUMBER = fxt.TRADE_ID WHERE CHARINDEX('_FX', ert.ID) > 0  UNION ALL  -- This is to handle edge cases where there are both NWQ and B3Q Exceptions -- due to the order of the CASE statement without this table you would only  -- get the system narration for NWQ. SELECT DISTINCT 	ert.ID, 	COALESCE(fxt.TRADE_ID, fxt2.TRADE_ID) AS TRADE_ID, 	CASE 		WHEN CHARINDEX('_10_', ID) > 0 THEN fxt.TIMELY_RECORDING_REASON_NARRATION													    		--WHEN CHARINDEX('_607_', ID) > 0 and mst.NWQ_EXCEPTION = 'Exception' THEN fxt.PRICE_REASON_NARRATION 								    		WHEN CHARINDEX('_607_', ID) > 0 and mst.B3Q_EXCEPTION = 'Exception' THEN fxt.THREE_BANK_QUOTES_EXCEPTION_REASON_NARRATION										    		WHEN (CHARINDEX('_607_', ID) > 0 OR CHARINDEX('_501_', ID) > 0)  and mst.SRR_EXCEPTION = 'Exception' THEN fxt.SPOT_TOLERANCE_REASON_NARRATION													    		WHEN CHARINDEX('_608_', ID) > 0 THEN fxt.CANCEL_REASON_NARRATION															    		WHEN CHARINDEX('_604_', ID) > 0 THEN fxo.SEQUENCE_EXCEPTION_REASON_NARRATION												    		WHEN CHARINDEX('_9_', ID) > 0 THEN COALESCE(fxt2.TIMELY_EXECUTION_REASON_NARRATION, fxo.TIMELY_EXC_REASON_NOT_ACK_NARRATION)								    		WHEN CHARINDEX('_602_', ID) > 0THEN fxo.HOLDOVER_REASON_NARRATION 		ELSE NULL 	END AS SYSTEM_NARRATION, 	CASE  		WHEN CHARINDEX('_9_', ID) > 0 THEN '9' 		WHEN CHARINDEX('_10_', ID) > 0 THEN '10' 		WHEN CHARINDEX('_500_', ID) > 0 THEN '500' 		WHEN CHARINDEX('_501_', ID) > 0 THEN '501' 		WHEN CHARINDEX('_601_', ID) > 0 THEN '601' 		WHEN CHARINDEX('_602_', ID) > 0 THEN '602' 		WHEN CHARINDEX('_603_', ID) > 0 THEN '603' 		WHEN CHARINDEX('_604_', ID) > 0 THEN '604' 		WHEN (COALESCE(fxt.INSTRUCTION_TYPE,mst.PRODUCT) != 'SPOT'  			  OR COALESCE(fxt.INSTRUCTION_TYPE,mst.PRODUCT) is null)  			  AND mst.NWQ_EXCEPTION = 'Exception'  			  AND CHARINDEX('_607_', ID) > 0 THEN '607_NWQ_FWD' 		WHEN COALESCE(fxt.INSTRUCTION_TYPE,mst.PRODUCT) = 'SPOT' 			  			  AND mst.NWQ_EXCEPTION = 'Exception'  			  AND CHARINDEX('_607_', ID) > 0 THEN '607_NWQ_SPOT' 		WHEN (COALESCE(fxt.INSTRUCTION_TYPE,mst.PRODUCT) != 'SPOT'  			  OR COALESCE(fxt.INSTRUCTION_TYPE,mst.PRODUCT) is null)  			  AND mst.B3Q_EXCEPTION = 'Exception'  			  AND CHARINDEX('_607_', ID) > 0 THEN '607_QE_FWD' 		WHEN COALESCE(fxt.INSTRUCTION_TYPE,mst.PRODUCT) = 'SPOT' 			  			  AND mst.B3Q_EXCEPTION = 'Exception'  			  AND CHARINDEX('_607_', ID) > 0 THEN '607_QE_SPOT' 		WHEN COALESCE(fxt.INSTRUCTION_TYPE,mst.PRODUCT) = 'SPOT' 			  AND ((CHARINDEX('_607_', ID) > 0) OR (CHARINDEX('_501_', ID) > 0))  			  			  AND mst.SRR_EXCEPTION = 'Exception' THEN '607_SRR_SPOT' 		WHEN (COALESCE(fxt.INSTRUCTION_TYPE,mst.PRODUCT) != 'SPOT'  			  OR COALESCE(fxt.INSTRUCTION_TYPE,mst.PRODUCT) is null) 			  AND ((CHARINDEX('_607_', ID) > 0) OR (CHARINDEX('_501_', ID) > 0)) 			  			  AND mst.SRR_EXCEPTION = 'Exception' THEN '607_SRR_FWD' 		WHEN CHARINDEX('_608_', ID) > 0 THEN '608' 		WHEN CHARINDEX('_611_', ID) > 0 THEN '611' 		WHEN CHARINDEX('_612_', ID) > 0 THEN '612'	 	END AS EXCEPTION_TYPE_ID FROM Vista_Reporting.dbo.EXCEPTION_REASON_TABLE ert LEFT JOIN Vista_Reporting.dbo.FX_TRADES fxt ON CAST(fxt.TRADE_ID AS VARCHAR) = LEFT(ID, CHARINDEX('_', ID) - 1)  LEFT JOIN Vista_Reporting.dbo.FX_TRADES fxt2 ON CAST(fxt2.ORDER_ID AS VARCHAR) = LEFT(ID, CHARINDEX('_', ID) - 1)  LEFT JOIN Vista_Reporting.dbo.FX_ORDERS fxo ON CAST(fxo.FXM_ORDER_ID AS VARCHAR) = LEFT(ID, CHARINDEX('_', ID) - 1)  LEFT JOIN Vista_Reporting.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE mst ON mst.TRANSACTION_NUMBER = fxt.TRADE_ID WHERE CHARINDEX('_FX', ert.ID) > 0 AND mst.NWQ_EXCEPTION = 'Exception' AND mst.B3Q_EXCEPTION = 'Exception'   --1A Reasons --Selecting reasons from exception reason table -- Include cases where the STATUS is valid and the REASON is populated and take system  -- generated narration for cases where the SG COMMENT field is blank or NULL IF OBJECT_ID('tempdb..#step1', 'U') IS  NOT NULL DROP TABLE #step1 SELECT DISTINCT 	e.[ID],  	e.[REASON], 	COALESCE(fxt.TRADE_ID, fxt2.TRADE_ID) AS TRANSACTION_NUMBER, 	COALESCE(NULLIF(e.[COMMENT], ''), srn.SYSTEM_NARRATION) AS COMMENT, 	e.[STATUS], 	e.[TOUCH_COUNT], 	srn.EXCEPTION_TYPE_ID INTO #step1 FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE e inner join (SELECT 				[ID], 				MAX(touch_count) as [MAX_TOUCH], 				MAX(CREATED) as [MAX_CREATE_TIME] 			FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE 			WHERE [STATUS] in ('For Review','With Dealer','With Reviewer','C&A Review Request') and NULLIF([REASON],'') is not null 			--the above condition around status ensures that we only consider exceptions coming from the Dealing Desk 			--only dealing desk has the ability to flag false positive exceptions 			GROUP BY [ID]) a on a.[ID] = e.[ID] and a.[MAX_TOUCH] = e.[TOUCH_COUNT] AND a.[MAX_CREATE_TIME] = e.[CREATED] LEFT JOIN Vista_Reporting.dbo.FX_TRADES fxt ON CAST(fxt.TRADE_ID AS VARCHAR) = LEFT(e.ID, CHARINDEX('_', e.ID) - 1) LEFT JOIN Vista_Reporting.dbo.FX_TRADES fxt2 ON CAST(fxt2.ORDER_ID AS VARCHAR) = LEFT(e.ID, CHARINDEX('_', e.ID) - 1) LEFT JOIN #system_reasons srn ON srn.ID = e.ID    -- Select the system generated narration for cases where the STATUS is valid however the REASON is NULL or blank -- In this case there is no hierachy and by defailt the system generated narration is taken -- Exclude IDs from #step1 IF OBJECT_ID('tempdb..#step2', 'U') IS  NOT NULL DROP TABLE #step2 SELECT DISTINCT 	e.[ID],  	e.[REASON], 	sr.TRADE_ID, 	sr.SYSTEM_NARRATION AS [COMMENT], 	e.[STATUS], 	e.[TOUCH_COUNT], 	sr.EXCEPTION_TYPE_ID INTO #step2 FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE e inner join (SELECT 				[ID], 				MAX(touch_count) as [MAX_TOUCH], 				MAX(CREATED) as [MAX_CREATE_TIME] 			FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE 			WHERE [STATUS] in ('For Review','With Dealer','With Reviewer','C&A Review Request') and NULLIF(REASON, '') IS NULL 			GROUP BY [ID]) a  on a.[ID] = e.[ID] and a.[MAX_TOUCH] = e.[TOUCH_COUNT] AND a.[MAX_CREATE_TIME] = e.[CREATED] LEFT JOIN #system_reasons sr ON sr.ID = a.ID WHERE e.ID NOT IN (SELECT ID FROM #step1)   IF OBJECT_ID('tempdb..#vista_reason', 'U') IS  NOT NULL DROP TABLE #vista_reason SELECT * INTO #vista_reason FROM #step1 UNION SELECT * FROM #step2   --1B Reasons IF OBJECT_ID('tempdb..#max_reason_cm', 'U') IS  NOT NULL DROP TABLE #max_reason_cm --The below table is used to identify the last Reason (populated by C&M Team) SELECT DISTINCT 	e.[ID],  	e.[REASON], 	e.[COMMENT], 	e.[STATUS] INTO #max_reason_cm FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE e inner join (SELECT  				[ID], 				MAX(TOUCH_COUNT) as [MAX_TOUCH]  			FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE 			WHERE [STATUS] in ('Pre Sampling','With C&A Reviewer','Under Review','Review in Process','Post Sampling') 			GROUP BY [ID] ) a  on a.[ID] = e.[ID] and a.[MAX_TOUCH] = e.[TOUCH_COUNT]  -- ================================================================================================= /* EXCEPTION RATIONALE TABLE FOR AGGREGATOR */ -- =================================================================================================  IF OBJECT_ID('tempdb..#temp_fx_trades', 'U') IS NOT NULL DROP TABLE #temp_fx_trades SELECT DISTINCT  	fxt.ORDER_ID, 	fxt.TRADE_ID, 	fxt.TRADE_DATE, 	fxt.TIMELY_RECORDING_REASON, 	fxt.SPOT_TOLERANCE_REASON, 	fxt.CANCEL_REASON, 	fxt.TIMELY_EXECUTION_REASON, 	fxt.INSTRUCTION_TYPE INTO #temp_fx_trades	 FROM VISTA_REPORTING.dbo.FX_TRADES fxt  IF OBJECT_ID('tempdb..#temp_fx_orders', 'U') IS NOT NULL DROP TABLE #temp_fx_orders SELECT DISTINCT  	fxo.FXM_ORDER_ID, 	fxo.ORDER_TRADE_DATE, 	fxo.SEQUENCE_EXCEPTION_REASON, 	fxo.TIMELY_EXC_REASON_NOT_ACK, 	fxo.INSTRUCTION_STATUS, 	fxo.HOLDOVER_REASON INTO #temp_fx_orders FROM VISTA_REPORTING.dbo.FX_ORDERS fxo  IF OBJECT_ID('tempdb..#temp_al_trades', 'U') IS NOT NULL DROP TABLE #temp_al_trades SELECT DISTINCT  	t.ORD_NUM, 	t.MULTI_FUND_ID, 	t.TRD_TRADE_DATE INTO #temp_al_trades	 FROM VISTA_REPORTING.dbo.TRADES t  IF OBJECT_ID('tempdb..#temp_al_oc', 'U') IS NOT NULL DROP TABLE #temp_al_oc SELECT DISTINCT  	oc.PM_ORD, 	oc.TRD_ORD INTO #temp_al_oc	 FROM VISTA_REPORTING.dbo.ORDERS_CROSS oc  IF OBJECT_ID('tempdb..#temp_al_pm', 'U') IS NOT NULL DROP TABLE #temp_al_pm SELECT DISTINCT  	pm.ORD_NUM, 	pm.OPEN_DATE, 	pm.[STATUS] INTO #temp_al_pm FROM VISTA_REPORTING.dbo.PM_ORDERS pm   IF OBJECT_ID('tempdb..#temp_exception_table', 'U') IS NOT NULL DROP TABLE #temp_exception_table SELECT *  INTO #temp_exception_table FROM (SELECT DISTINCT 		'10' as [EXCEPTION_TYPE_ID], 		CONCAT(timrec.[TRADE_ID],'_10_',timrec.[SOURCE]) as EXCEPTION_ID, 		CASE  			WHEN timrec.[SOURCE] = 'FX' THEN fxt.[ORDER_ID] 			WHEN timrec.[SOURCE] = 'AL' THEN oc.[PM_ORD] 		ELSE NULL 		END AS ORDER_ID, 		timrec.[TRADE_ID] as [TRANSACTION_NUMBER], 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN timrec.[VG_10] = 1  			THEN  				CASE  					WHEN NULLIF(e.[REASON],'') is null and fxt.[TIMELY_RECORDING_REASON] is not null THEN CAST(fxt.[TIMELY_RECORDING_REASON] as varchar(500)) 				ELSE COALESCE(e.[REASON],'Unassigned Rationale') 				END 		ELSE NULL 		END AS [1A_RATIONALE], 		timrec.[VG_10] as [EXCEPTION_VALUE], 		CASE 			WHEN timrec.[SOURCE] = 'FX' THEN CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE]))  			ELSE CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		END AS [DATE], 		timrec.[SOURCE] as [DATA_SOURCE], 		CASE WHEN mast.[TRADE_STATUS] in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FX_TABLE timrec 	left join #vista_reason e  	on CONCAT(timrec.[TRADE_ID],'_10_',timrec.[SOURCE]) = e.[ID] 	left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, TRADE_STATUS FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE) mast 	on timrec.[TRADE_ID] = mast.[TRANSACTION_NUMBER] 	left join  #temp_fx_trades fxt  	on fxt.[TRADE_ID] = timrec.[TRADE_ID] AND timrec.[SOURCE] = 'FX' 	left join #temp_al_trades t  	on t.[MULTI_FUND_ID] = timrec.[TRADE_ID] AND timrec.[SOURCE] = 'AL' 	left join #temp_al_oc oc 	on oc.[TRD_ORD] = t.[ORD_NUM] 	WHERE COALESCE(fxt.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date  	UNION  	SELECT DISTINCT 		'607_QE_SPOT' as [EXCEPTION_TYPE_ID], 		CONCAT(bestex.[TRADE_ID],'_607_',bestex.[DATA_SOURCE]) as EXCEPTION_ID, 		CASE  			WHEN bestex.[DATA_SOURCE] = 'FX' THEN fxt.[ORDER_ID] 			WHEN bestex.[DATA_SOURCE] = 'AL' THEN oc.[PM_ORD] 		ELSE NULL 		END AS ORDER_ID, 		bestex.[TRADE_ID] as TRANSACTION_NUMBER, 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN bestex.[B3Q_EXCEPTION] = 1  			THEN  				CASE  					WHEN NULLIF(e.[REASON],'') is null and mast.[NUMBER_OF_QUOTES_EXCEPTION_REASON] is not null THEN CAST(mast.[NUMBER_OF_QUOTES_EXCEPTION_REASON] as varchar(500)) 				ELSE COALESCE(e.[REASON],'Unassigned Rationale') 				END 		ELSE NULL 		END AS [1A_RATIONALE], 		bestex.[B3Q_EXCEPTION] as [EXCEPTION_VALUE], 		CASE 			WHEN bestex.[DATA_SOURCE] = 'FX' THEN CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE]))  			ELSE CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		END AS [DATE], 		bestex.[DATA_SOURCE], 		CASE WHEN mast.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE bestex 	left join #vista_reason e  	on CONCAT(bestex.[TRADE_ID],'_607_',bestex.[DATA_SOURCE]) = e.[ID] 	left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, INSTRUCTION_STATUS, NUMBER_OF_QUOTES_EXCEPTION_REASON, PRODUCT FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE) mast 	on bestex.[TRADE_ID] = mast.[TRANSACTION_NUMBER] 	left join #temp_fx_trades fxt  	on fxt.[TRADE_ID] = bestex.[TRADE_ID] AND bestex.[DATA_SOURCE] = 'FX' 	left join #temp_al_trades t  	on t.[MULTI_FUND_ID] = bestex.[TRADE_ID] AND bestex.[DATA_SOURCE] = 'AL' 	left join #temp_al_oc oc 	on oc.[TRD_ORD] = t.[ORD_NUM] 	WHERE COALESCE(fxt.INSTRUCTION_TYPE,mast.PRODUCT) = 'SPOT' and (COALESCE(fxt.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date)  	UNION  	SELECT DISTINCT 		'607_QE_FWD' as [EXCEPTION_TYPE_ID], 		CONCAT(bestex.[TRADE_ID],'_607_',bestex.[DATA_SOURCE]) as EXCEPTION_ID, 		CASE  			WHEN bestex.[DATA_SOURCE] = 'FX' THEN fxt.[ORDER_ID] 			WHEN bestex.[DATA_SOURCE] = 'AL' THEN oc.[PM_ORD] 		ELSE NULL 		END AS ORDER_ID, 		bestex.[TRADE_ID] as TRANSACTION_NUMBER, 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN bestex.[B3Q_EXCEPTION] = 1  			THEN  				CASE  					WHEN NULLIF(e.[REASON],'') is null and mast.[NUMBER_OF_QUOTES_EXCEPTION_REASON] is not null THEN CAST(mast.[NUMBER_OF_QUOTES_EXCEPTION_REASON] as varchar(500)) 				ELSE COALESCE(e.[REASON],'Unassigned Rationale') 				END 		ELSE NULL 		END AS [1A_RATIONALE], 		bestex.[B3Q_EXCEPTION] as [EXCEPTION_VALUE], 		CASE 			WHEN bestex.[DATA_SOURCE] = 'FX' THEN CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE]))  			ELSE CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		END AS [DATE], 		bestex.[DATA_SOURCE], 		CASE WHEN mast.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE bestex 	left join #vista_reason e  	on CONCAT(bestex.[TRADE_ID],'_607_',bestex.[DATA_SOURCE]) = e.[ID] 	left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, INSTRUCTION_STATUS, NUMBER_OF_QUOTES_EXCEPTION_REASON, PRODUCT FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE) mast 	on bestex.[TRADE_ID] = mast.[TRANSACTION_NUMBER] 	left join #temp_fx_trades fxt  	on fxt.[TRADE_ID] = bestex.[TRADE_ID] AND bestex.[DATA_SOURCE] = 'FX' 	left join #temp_al_trades t  	on t.[MULTI_FUND_ID] = bestex.[TRADE_ID] AND bestex.[DATA_SOURCE] = 'AL' 	left join #temp_al_oc oc 	on oc.[TRD_ORD] = t.[ORD_NUM] 	WHERE (COALESCE(fxt.INSTRUCTION_TYPE,mast.PRODUCT) != 'SPOT' or COALESCE(fxt.INSTRUCTION_TYPE,mast.PRODUCT) is null) and (COALESCE(fxt.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date) 	 	UNION  	SELECT DISTINCT 		'607_NWQ_SPOT' as [EXCEPTION_TYPE_ID], 		CONCAT(bestex.[TRADE_ID],'_607_',bestex.[DATA_SOURCE]) as EXCEPTION_ID, 		CASE  			WHEN bestex.[DATA_SOURCE] = 'FX' THEN fxt.[ORDER_ID] 			WHEN bestex.[DATA_SOURCE] = 'AL' THEN oc.[PM_ORD] 		ELSE NULL 		END AS ORDER_ID, 		bestex.[TRADE_ID] as TRANSACTION_NUMBER, 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN bestex.[NWQ_EXCEPTION] = 1  			THEN  				CASE  					WHEN NULLIF(e.[REASON],'') is null and mast.[NWQ_REASON] is not null THEN CAST(mast.[NWQ_REASON] as varchar(500)) 				ELSE COALESCE(e.[REASON],'Unassigned Rationale') 				END 		ELSE NULL 		END AS [1A_RATIONALE], 		bestex.[NWQ_EXCEPTION] as [EXCEPTION_VALUE], 		CASE 			WHEN bestex.[DATA_SOURCE] = 'FX' THEN CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE]))  			ELSE CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		END AS [DATE], 		bestex.[DATA_SOURCE], 		CASE WHEN mast.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE bestex 	left join #vista_reason e  	on CONCAT(bestex.[TRADE_ID],'_607_',bestex.[DATA_SOURCE]) = e.[ID] 	left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, INSTRUCTION_STATUS, NWQ_REASON, PRODUCT FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE) mast 	on bestex.[TRADE_ID] = mast.[TRANSACTION_NUMBER] 	left join #temp_fx_trades fxt  	on fxt.[TRADE_ID] = bestex.[TRADE_ID] AND bestex.[DATA_SOURCE] = 'FX' 	left join #temp_al_trades t  	on t.[MULTI_FUND_ID] = bestex.[TRADE_ID] AND bestex.[DATA_SOURCE] = 'AL' 	left join #temp_al_oc oc 	on oc.[TRD_ORD] = t.[ORD_NUM] 	WHERE COALESCE(fxt.INSTRUCTION_TYPE,mast.PRODUCT) = 'SPOT' and (COALESCE(fxt.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date)  	UNION  	SELECT DISTINCT 		'607_NWQ_FWD' as [EXCEPTION_TYPE_ID], 		CONCAT(bestex.[TRADE_ID],'_607_',bestex.[DATA_SOURCE]) as EXCEPTION_ID, 		CASE  			WHEN bestex.[DATA_SOURCE] = 'FX' THEN fxt.[ORDER_ID] 			WHEN bestex.[DATA_SOURCE] = 'AL' THEN oc.[PM_ORD] 		ELSE NULL 		END AS ORDER_ID, 		bestex.[TRADE_ID] as TRANSACTION_NUMBER, 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN bestex.[NWQ_EXCEPTION] = 1  			THEN  				CASE  					WHEN NULLIF(e.[REASON],'') is null and mast.[NWQ_REASON] is not null THEN CAST(mast.[NWQ_REASON] as varchar(500)) 				ELSE COALESCE(e.[REASON],'Unassigned Rationale') 				END 		ELSE NULL 		END AS [1A_RATIONALE], 		bestex.[NWQ_EXCEPTION] as [EXCEPTION_VALUE], 		CASE 			WHEN bestex.[DATA_SOURCE] = 'FX' THEN CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE]))  			ELSE CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		END AS [DATE], 		bestex.[DATA_SOURCE], 		CASE WHEN mast.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE bestex 	left join #vista_reason e  	on CONCAT(bestex.[TRADE_ID],'_607_',bestex.[DATA_SOURCE]) = e.[ID] 	left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, INSTRUCTION_STATUS, NWQ_REASON, PRODUCT FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE) mast 	on bestex.[TRADE_ID] = mast.[TRANSACTION_NUMBER] 	left join #temp_fx_trades fxt  	on fxt.[TRADE_ID] = bestex.[TRADE_ID] AND bestex.[DATA_SOURCE] = 'FX' 	left join #temp_al_trades t  	on t.[MULTI_FUND_ID] = bestex.[TRADE_ID] AND bestex.[DATA_SOURCE] = 'AL' 	left join #temp_al_oc oc 	on oc.[TRD_ORD] = t.[ORD_NUM] 	WHERE (COALESCE(fxt.INSTRUCTION_TYPE,mast.PRODUCT) != 'SPOT' or COALESCE(fxt.INSTRUCTION_TYPE,mast.PRODUCT) is null) and (COALESCE(fxt.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date)  	UNION  	SELECT DISTINCT 		'607_SRR_SPOT' as [EXCEPTION_TYPE_ID], 		CONCAT(bestex.[TRADE_ID],'_501_',bestex.[DATA_SOURCE]) as EXCEPTION_ID, --This joins on 501 as that was the original SRR VG NUMBER 		CASE  			WHEN bestex.[DATA_SOURCE] = 'FX' THEN fxt.[ORDER_ID] 			WHEN bestex.[DATA_SOURCE] = 'AL' THEN oc.[PM_ORD] 		ELSE NULL 		END AS ORDER_ID, 		bestex.[TRADE_ID] as TRANSACTION_NUMBER, 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN bestex.SRR_EXCEPTION = 1 			THEN  				CASE  					WHEN NULLIF(e.[REASON],'') is null and fxt.SPOT_TOLERANCE_REASON is not null THEN CAST(fxt.SPOT_TOLERANCE_REASON as varchar(500)) 					WHEN (bestex.NWQ_EXCEPTION = 1 OR bestex.B3Q_EXCEPTION = 1) AND fxt.SPOT_TOLERANCE_REASON is null THEN 'Reviewed under Best Execution' 					ELSE COALESCE(e.[REASON], 'Unassigned Rationale') 				END 		ELSE NULL 		END AS [1A_RATIONALE], 		bestex.SRR_EXCEPTION as [EXCEPTION_VALUE], 		CASE 			WHEN bestex.[DATA_SOURCE] = 'FX' THEN CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE]))  			ELSE CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		END AS [DATE], 		bestex.[DATA_SOURCE], 		CASE WHEN mast.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE bestex 	left join #vista_reason e  	on CONCAT(bestex.[TRADE_ID],'_501_',bestex.[DATA_SOURCE]) = e.[ID] --This joins on 501 as that was the original SRR VG NUMBER 	left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, INSTRUCTION_STATUS, NWQ_REASON, PRODUCT FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE) mast on bestex.[TRADE_ID] = mast.[TRANSACTION_NUMBER] 	left join #temp_fx_trades fxt on fxt.[TRADE_ID] = bestex.[TRADE_ID] AND bestex.[DATA_SOURCE] = 'FX' 	left join #temp_al_trades t on t.[MULTI_FUND_ID] = bestex.[TRADE_ID] AND bestex.[DATA_SOURCE] = 'AL' 	left join #temp_al_oc oc on oc.[TRD_ORD] = t.[ORD_NUM] 	WHERE COALESCE(fxt.INSTRUCTION_TYPE,mast.PRODUCT) = 'SPOT' and (COALESCE(fxt.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date)  	UNION  	SELECT DISTINCT 		'607_SRR_FWD' as [EXCEPTION_TYPE_ID], 		CONCAT(bestex.[TRADE_ID],'_501_',bestex.[DATA_SOURCE]) as EXCEPTION_ID, --This joins on 501 as that was the original SRR VG NUMBER 		CASE  			WHEN bestex.[DATA_SOURCE] = 'FX' THEN fxt.[ORDER_ID] 			WHEN bestex.[DATA_SOURCE] = 'AL' THEN oc.[PM_ORD] 		ELSE NULL 		END AS ORDER_ID, 		bestex.[TRADE_ID] as TRANSACTION_NUMBER, 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN bestex.SRR_EXCEPTION = 1 			THEN  				CASE  					WHEN NULLIF(e.[REASON],'') is null and fxt.SPOT_TOLERANCE_REASON is not null THEN CAST(fxt.SPOT_TOLERANCE_REASON as varchar(500)) 					WHEN (bestex.NWQ_EXCEPTION = 1 OR bestex.B3Q_EXCEPTION = 1) AND fxt.SPOT_TOLERANCE_REASON is null THEN 'Reviewed under Best Execution' 					ELSE COALESCE(e.[REASON], 'Unassigned Rationale') 				END 		ELSE NULL 		END AS [1A_RATIONALE], 		bestex.SRR_EXCEPTION as [EXCEPTION_VALUE], 		CASE 			WHEN bestex.[DATA_SOURCE] = 'FX' THEN CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE]))  			ELSE CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		END AS [DATE], 		bestex.[DATA_SOURCE], 		CASE WHEN mast.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE bestex 	left join #vista_reason e on CONCAT(bestex.[TRADE_ID],'_501_',bestex.[DATA_SOURCE]) = e.[ID] --This joins on 501 as that was the original SRR VG NUMBER 	left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, INSTRUCTION_STATUS, NWQ_REASON, PRODUCT FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE) mast 	on bestex.[TRADE_ID] = mast.[TRANSACTION_NUMBER] 	left join #temp_fx_trades fxt on fxt.[TRADE_ID] = bestex.[TRADE_ID] AND bestex.[DATA_SOURCE] = 'FX' 	left join #temp_al_trades t on t.[MULTI_FUND_ID] = bestex.[TRADE_ID] AND bestex.[DATA_SOURCE] = 'AL' 	left join #temp_al_oc oc on oc.[TRD_ORD] = t.[ORD_NUM] 	WHERE (COALESCE(fxt.INSTRUCTION_TYPE,mast.PRODUCT) != 'SPOT' or COALESCE(fxt.INSTRUCTION_TYPE,mast.PRODUCT) is null) and (COALESCE(fxt.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date)  	UNION 	 	SELECT DISTINCT 		'501' as [EXCEPTION_TYPE_ID], 		CONCAT(srr.[TRADE_ID],'_501_',srr.[SOURCE]) as EXCEPTION_ID, 		CASE  			WHEN srr.[SOURCE] = 'FX' THEN fxt.[ORDER_ID] 			WHEN srr.[SOURCE] = 'AL' THEN oc.[PM_ORD] 		ELSE NULL 		END AS ORDER_ID, 		srr.[TRADE_ID] as TRANSACTION_NUMBER, 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN srr.[VG_501] = 1  			THEN 			CASE 				WHEN NULLIF(e.[REASON],'') is null and fxt.[SPOT_TOLERANCE_REASON] is not null THEN CAST(fxt.[SPOT_TOLERANCE_REASON] as varchar(500))	 			ELSE COALESCE(e.[REASON],'Unassigned Rationale') 			END 		ELSE NULL 		END AS [1A_RATIONALE], 		srr.[VG_501] as [EXCEPTION_VALUE], 		CASE 			WHEN srr.[SOURCE] = 'FX' THEN CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE])) 			ELSE CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		END AS [DATE], 		srr.[SOURCE], 		CASE WHEN mast.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_501_SPOT_REFERENCE_RATE_FX_TABLE srr 	left join #vista_reason e  	on CONCAT(srr.[TRADE_ID],'_501_',srr.[SOURCE]) = e.[ID] 	left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, INSTRUCTION_STATUS FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE) mast 	on srr.[TRADE_ID] = mast.[TRANSACTION_NUMBER] 	left join #temp_fx_trades fxt  	on fxt.[TRADE_ID] = srr.[TRADE_ID] AND srr.[SOURCE] = 'FX' 	left join #temp_al_trades t  	on t.[MULTI_FUND_ID] = srr.[TRADE_ID] AND srr.[SOURCE] = 'AL' 	left join #temp_al_oc oc 	on oc.[TRD_ORD] = t.[ORD_NUM] 	WHERE COALESCE(fxt.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date 	 	--SURVG-563------------------------------------------------- 	 	 	UNION 	 	SELECT DISTINCT 		'613' as [EXCEPTION_TYPE_ID], 		CONCAT(srr.[TRADE_ID],'_613_',srr.[SOURCE]) as EXCEPTION_ID, 		CASE  			WHEN srr.[SOURCE] = 'FX' THEN fxt.[ORDER_ID] 			WHEN srr.[SOURCE] = 'AL' THEN oc.[PM_ORD] 		ELSE NULL 		END AS ORDER_ID, 		srr.[TRADE_ID] as TRANSACTION_NUMBER, 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN srr.[VG_613] = 1  			THEN 			CASE 				WHEN NULLIF(e.[REASON],'') is null and fxt.[CANCEL_REASON] is not null THEN CAST(fxt.[CANCEL_REASON] as varchar(500))	 				ELSE COALESCE(e.[REASON],'Unassigned Rationale') 				END 		ELSE NULL 		END AS [1A_RATIONALE], 		srr.[VG_613] as [EXCEPTION_VALUE], 		CASE 			WHEN srr.[SOURCE] = 'FX' THEN CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE])) 			ELSE CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		END AS [DATE], 		srr.[SOURCE], 		CASE WHEN mast.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE srr 	left join #vista_reason e  	on CONCAT(srr.[TRADE_ID],'_501_',srr.[SOURCE]) = e.[ID] 	left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, INSTRUCTION_STATUS FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE) mast 	on srr.[TRADE_ID] = mast.[TRANSACTION_NUMBER] 	left join #temp_fx_trades fxt  	on fxt.[TRADE_ID] = srr.[TRADE_ID] AND srr.[SOURCE] = 'FX' 	left join #temp_al_trades t  	on t.[MULTI_FUND_ID] = srr.[TRADE_ID] AND srr.[SOURCE] = 'AL' 	left join #temp_al_oc oc 	on oc.[TRD_ORD] = t.[ORD_NUM] 	WHERE COALESCE(fxt.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date 	 	 	--End of SURVG-563---------------------------------------------------------------------------------------- 	--UNION 	-- 	--SELECT DISTINCT 	--	'501_FWD' as [EXCEPTION_TYPE_ID], 	--	CONCAT(srr.[TRADE_ID],'_501_',srr.[SOURCE]) as EXCEPTION_ID, 	--	CASE  	--		WHEN srr.[SOURCE] = 'FX' THEN fxt.[ORDER_ID] 	--		WHEN srr.[SOURCE] = 'AL' THEN oc.[PM_ORD] 	--	ELSE NULL 	--	END AS ORDER_ID, 	--	srr.[TRADE_ID] as TRANSACTION_NUMBER, 	--	mast.[DEALER_NAME] as DEALER, 	--	CASE  	--		WHEN srr.[VG_501] = 1  	--		THEN 	--		CASE 	--			WHEN NULLIF(e.[REASON],'') is null and fxt.[SPOT_TOLERANCE_REASON] is not null THEN CAST(fxt.[SPOT_TOLERANCE_REASON] as varchar(500))	 	--		ELSE COALESCE(e.[REASON],'Unassigned Rationale') 	--		END 	--	ELSE NULL 	--	END AS [1A_RATIONALE], 	--	srr.[VG_501] as [EXCEPTION_VALUE], 	--	CASE 	--		WHEN srr.[SOURCE] = 'FX' THEN CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE])) 	--		ELSE CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 	--	END AS [DATE], 	--	srr.[SOURCE], 	--	CASE WHEN mast.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	--FROM VISTA_STAGING.dbo.VG_501_SPOT_REFERENCE_RATE_FX_TABLE srr 	--left join #vista_reason e  	--on CONCAT(srr.[TRADE_ID],'_501_',srr.[SOURCE]) = e.[ID] 	--left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, INSTRUCTION_STATUS FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE) mast 	--on srr.[TRADE_ID] = mast.[TRANSACTION_NUMBER] 	--left join #temp_fx_trades fxt  	--on fxt.[TRADE_ID] = srr.[TRADE_ID] AND srr.[SOURCE] = 'FX' 	--left join #temp_al_trades t  	--on t.[MULTI_FUND_ID] = srr.[TRADE_ID] AND srr.[SOURCE] = 'AL' 	--left join #temp_al_oc oc 	--on oc.[TRD_ORD] = t.[ORD_NUM] 	--WHERE COALESCE(fxt.INSTRUCTION_TYPE,'FWD') != 'SPOT' and COALESCE(fxt.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date 	-- 	--UNION 	-- 	--SELECT DISTINCT 	--	'501_SPOT' as [EXCEPTION_TYPE_ID], 	--	CONCAT(srr.[TRADE_ID],'_501_',srr.[SOURCE]) as EXCEPTION_ID, 	--	CASE  	--		WHEN srr.[SOURCE] = 'FX' THEN fxt.[ORDER_ID] 	--		WHEN srr.[SOURCE] = 'AL' THEN oc.[PM_ORD] 	--	ELSE NULL 	--	END AS ORDER_ID, 	--	srr.[TRADE_ID] as TRANSACTION_NUMBER, 	--	mast.[DEALER_NAME] as DEALER, 	--	CASE  	--		WHEN srr.[VG_501] = 1  	--		THEN 	--		CASE 	--			WHEN NULLIF(e.[REASON],'') is null and fxt.[SPOT_TOLERANCE_REASON] is not null THEN CAST(fxt.[SPOT_TOLERANCE_REASON] as varchar(500))	 	--		ELSE COALESCE(e.[REASON],'Unassigned Rationale') 	--		END 	--	ELSE NULL 	--	END AS [1A_RATIONALE], 	--	srr.[VG_501] as [EXCEPTION_VALUE], 	--	CASE 	--		WHEN srr.[SOURCE] = 'FX' THEN CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE])) 	--		ELSE CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 	--	END AS [DATE], 	--	srr.[SOURCE], 	--	CASE WHEN mast.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	--FROM VISTA_STAGING.dbo.VG_501_SPOT_REFERENCE_RATE_FX_TABLE srr 	--left join #vista_reason e  	--on CONCAT(srr.[TRADE_ID],'_501_',srr.[SOURCE]) = e.[ID] 	--left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, INSTRUCTION_STATUS FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE) mast 	--on srr.[TRADE_ID] = mast.[TRANSACTION_NUMBER] 	--left join #temp_fx_trades fxt  	--on fxt.[TRADE_ID] = srr.[TRADE_ID] AND srr.[SOURCE] = 'FX' 	--left join #temp_al_trades t  	--on t.[MULTI_FUND_ID] = srr.[TRADE_ID] AND srr.[SOURCE] = 'AL' 	--left join #temp_al_oc oc 	--on oc.[TRD_ORD] = t.[ORD_NUM] 	--WHERE COALESCE(fxt.INSTRUCTION_TYPE,'FWD') = 'SPOT' and COALESCE(fxt.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date  	UNION  	SELECT DISTINCT 		'608' as [EXCEPTION_TYPE_ID], 		CONCAT(tkb.[FXM_ORDER_ID],'_608_',tkb.[DATA_SOURCE]) as EXCEPTION_ID, 		tkb.[FXM_ORDER_ID] as ORDER_ID, 		CASE 			WHEN tkb.[DATA_SOURCE] = 'FX' THEN fxt.[TRADE_ID] 			WHEN tkb.[DATA_SOURCE] = 'AL' THEN t.[MULTI_FUND_ID] 		ELSE NULL 		END AS TRANSACTION_NUMBER, 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN tkb.[VG_608] = 1  			THEN 				CASE 					WHEN NULLIF(e.[REASON],'') is null and fxt.[CANCEL_REASON] is not null THEN CAST(fxt.[CANCEL_REASON] as varchar(500))	 				ELSE COALESCE(e.[REASON],'Unassigned Rationale') 				END 		ELSE NULL 		END AS [1A_RATIONALE], 		tkb.[VG_608] as [EXCEPTION_VALUE], 		CASE 			WHEN tkb.[DATA_SOURCE] = 'FX' THEN CONCAT(YEAR(fxo.[ORDER_TRADE_DATE]), ' - ', MONTH(fxo.[ORDER_TRADE_DATE]))  			ELSE CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])) 		END AS [DATE], 		tkb.[DATA_SOURCE], 		0 AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_608_TA_KNOCKBACK_FX_TABLE tkb 	left join #vista_reason e  	on CONCAT(tkb.[FXM_ORDER_ID],'_608_',[DATA_SOURCE]) = e.[ID] 	left join (SELECT DISTINCT ORDER_ID, DEALER_NAME, INSTRUCTION_STATUS, PM_ORDER_STATUS FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE) mast 	on tkb.[FXM_ORDER_ID] = mast.[ORDER_ID] 	left join #temp_fx_trades fxt  	on fxt.[ORDER_ID] = tkb.[FXM_ORDER_ID] AND tkb.[DATA_SOURCE] = 'FX' 	left join #temp_fx_orders fxo 	on fxo.[FXM_ORDER_ID] = tkb.[FXM_ORDER_ID] AND tkb.[DATA_SOURCE] = 'FX' 	left join #temp_al_trades t  	on t.[ORD_NUM] = tkb.[FXM_ORDER_ID] AND tkb.[DATA_SOURCE] = 'AL' 	left join #temp_al_pm pm 	on tkb.[FXM_ORDER_ID] = pm.[ORD_NUM] and tkb.[DATA_SOURCE] = 'AL' 	WHERE COALESCE(fxo.[ORDER_TRADE_DATE],pm.[OPEN_DATE]) between @Start_Date and @End_Date  	UNION  	SELECT DISTINCT 		'500' as [EXCEPTION_TYPE_ID], 		CONCAT(dl.[ORDER_ID],'_500_',dl.[SOURCE]) as EXCEPTION_ID, 		dl.[ORDER_ID] as ORDER_ID, 		CASE 			WHEN dl.[SOURCE] = 'FX' THEN fxt.[TRADE_ID] 			WHEN dl.[SOURCE] = 'AL' THEN t.[MULTI_FUND_ID] 		ELSE NULL 		END AS TRANSACTION_NUMBER, 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN dl.[VG_500] = 1 THEN COALESCE(e.[REASON],'Unassigned Rationale') 		ELSE NULL 		END AS [1A_RATIONALE], 		dl.[VG_500] as [EXCEPTION_VALUE], 		CASE 			WHEN dl.[SOURCE] = 'FX' THEN CONCAT(YEAR(fxo.[ORDER_TRADE_DATE]), ' - ', MONTH(fxo.[ORDER_TRADE_DATE]))  			ELSE CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])) 		END AS [DATE], 		dl.[SOURCE], 		CASE WHEN (mast.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted')) or (mast.[PM_ORDER_STATUS] in ('C', 'Cancelled', 'Deleted')) THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_500_DEALER_LIMIT_FX_TABLE dl 	left join #vista_reason e  	on CONCAT(dl.[ORDER_ID],'_500_',[SOURCE]) = e.[ID] 	left join (SELECT DISTINCT ORDER_ID, DEALER_NAME, INSTRUCTION_STATUS, PM_ORDER_STATUS FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE) mast 	on dl.[ORDER_ID] = mast.[ORDER_ID] 	left join #temp_fx_trades fxt  	on fxt.[ORDER_ID] = dl.[ORDER_ID] AND dl.[SOURCE] = 'FX' 	left join #temp_fx_orders fxo 	on fxo.[FXM_ORDER_ID] = dl.[ORDER_ID] AND dl.[SOURCE] = 'FX' 	left join #temp_al_trades t  	on t.[ORD_NUM] = dl.[ORDER_ID] AND dl.[SOURCE] = 'AL' 	left join #temp_al_pm pm 	on dl.[ORDER_ID] = pm.[ORD_NUM] and dl.[SOURCE] = 'AL' 	WHERE COALESCE(fxo.[ORDER_TRADE_DATE],pm.[OPEN_DATE]) between @Start_Date and @End_Date  	UNION  	SELECT DISTINCT 		'604' as [EXCEPTION_TYPE_ID], 		 CONCAT(coh.[ORDER_ID],'_604_',coh.[DATA_SOURCE]) as EXCEPTION_ID, 		coh.[ORDER_ID], 		CASE  			WHEN coh.[DATA_SOURCE] = 'FX' THEN fxt.[TRADE_ID] 			WHEN coh.[DATA_SOURCE] = 'AL' THEN t.[MULTI_FUND_ID] 		ELSE NULL 		END AS [TRANSACTION_NUMBER], 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN coh.[VG_604] = 1  			THEN  				CASE 					WHEN NULLIF(e.[REASON],'') is null and fxo.[SEQUENCE_EXCEPTION_REASON] is not null THEN CAST(fxo.[SEQUENCE_EXCEPTION_REASON] as varchar(500)) 					WHEN NULLIF(e.[REASON],'') is null and fxo.[SEQUENCE_EXCEPTION_REASON] is null and coh.FROZEN_BY is not NULL THEN 'Freeze/Release' 					ELSE COALESCE(e.[REASON],'Unassigned Rationale') 				END 		ELSE NULL 		END AS [1A_RATIONALE], 		coh.[VG_604] as [EXCEPTION_VALUE], 		CASE 			WHEN coh.[DATA_SOURCE] = 'FX' THEN CONCAT(YEAR(fxo.[ORDER_TRADE_DATE]), ' - ', MONTH(fxo.[ORDER_TRADE_DATE]))  			ELSE CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])) 		END AS [DATE], 		coh.[DATA_SOURCE], 		CASE WHEN mast.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_FX_TABLE coh 	left join #vista_reason e  	on CONCAT(coh.[ORDER_ID],'_604_',coh.[DATA_SOURCE]) = e.[ID]  	left join (SELECT DISTINCT ORDER_ID, DEALER_NAME, INSTRUCTION_STATUS FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE) mast 	on coh.[ORDER_ID] = mast.[ORDER_ID] 	left join #temp_fx_trades fxt  	on fxt.[ORDER_ID] = coh.[ORDER_ID] and coh.[DATA_SOURCE] = 'FX' 	left join #temp_fx_orders fxo 	on coh.[ORDER_ID] = fxo.[FXM_ORDER_ID] and coh.[DATA_SOURCE] = 'FX' 	left join #temp_al_trades t  	on t.[ORD_NUM] = coh.[ORDER_ID] and coh.[DATA_SOURCE] = 'AL' 	left join #temp_al_pm pm 	on coh.[ORDER_ID] = pm.[ORD_NUM] and coh.[DATA_SOURCE] = 'AL' 	WHERE COALESCE(fxo.[ORDER_TRADE_DATE],pm.[OPEN_DATE]) between @Start_Date and @End_Date  	UNION  	SELECT DISTINCT 		'9' as [EXCEPTION_TYPE_ID], 		CONCAT(timex.[ORDER_ID],'_9_',timex.[SOURCE]) as EXCEPTION_ID, 		timex.[ORDER_ID], 		CASE  			WHEN timex.[SOURCE] = 'FX' THEN fxt.[TRADE_ID] 			WHEN timex.[SOURCE] = 'AL' THEN t.[MULTI_FUND_ID] 		ELSE NULL 		END AS [TRANSACTION_NUMBER], 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN timex.[VG_09] = 1  			THEN  				CASE 					WHEN NULLIF(e.[REASON],'') is null and fxt.[TIMELY_EXECUTION_REASON] is not null   THEN CAST(fxt.[TIMELY_EXECUTION_REASON] as varchar(500))	 					WHEN NULLIF(e.[REASON],'') is null and fxo.[TIMELY_EXC_REASON_NOT_ACK] is not null THEN CAST(fxo.[TIMELY_EXC_REASON_NOT_ACK] as varchar(500))	 				ELSE COALESCE(e.[REASON],'Unassigned Rationale') 				END 		ELSE NULL 		END AS [1A_RATIONALE], 		timex.[VG_09] as [EXCEPTION_VALUE], 		CASE 			WHEN timex.[SOURCE] = 'FX' THEN CONCAT(YEAR(fxo.[ORDER_TRADE_DATE]), ' - ', MONTH(fxo.[ORDER_TRADE_DATE]))  			ELSE CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])) 		END AS [DATE], 		timex.[SOURCE] as [DATA_SOURCE], 		CASE WHEN COALESCE(fxo.[INSTRUCTION_STATUS],pm.[STATUS]) in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FX_TABLE timex 	left join #vista_reason e  	on CONCAT(timex.[ORDER_ID],'_9_',timex.[SOURCE]) = e.[ID] 	left join (SELECT DISTINCT ORDER_ID, DEALER_NAME, TRADE_STATUS FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE) mast 	on timex.[ORDER_ID] = mast.[ORDER_ID] 	left join (SELECT DISTINCT fxt.ORDER_ID, TRADE_ID, fxtr.TIMELY_EXECUTION_REASON FROM #temp_fx_trades fxt 			   outer apply (SELECT TOP 1 ORDER_ID, TIMELY_EXECUTION_REASON FROM #temp_fx_trades fxtr WHERE TIMELY_EXECUTION_REASON is not null and fxt.ORDER_ID = fxtr.ORDER_ID) fxtr) fxt 	on fxt.[ORDER_ID] = timex.[ORDER_ID] and timex.[SOURCE] = 'FX' 	left join #temp_fx_orders fxo 	on timex.[ORDER_ID] = fxo.[FXM_ORDER_ID] and timex.[SOURCE] = 'FX' 	left join #temp_al_trades t  	on t.[ORD_NUM] = timex.[ORDER_ID] and timex.[SOURCE] = 'AL' 	left join #temp_al_pm pm 	on timex.[ORDER_ID] = pm.[ORD_NUM] and timex.[SOURCE] = 'AL'  	WHERE COALESCE(fxo.[ORDER_TRADE_DATE],pm.[OPEN_DATE]) between @Start_Date and @End_Date 	 	UNION  	SELECT DISTINCT 		'602' as [EXCEPTION_TYPE_ID], 		CONCAT(eod.[FXM_ORDER_ID],'_602_',eod.[DATA_SOURCE]) as EXCEPTION_ID, 		eod.[FXM_ORDER_ID], 		CASE  			WHEN eod.[DATA_SOURCE] = 'FX' THEN fxt.[TRADE_ID] 			WHEN eod.[DATA_SOURCE] = 'AL' THEN t.[MULTI_FUND_ID] 		ELSE NULL 		END AS [TRANSACTION_NUMBER], 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN eod.[VG_602] > 0 			THEN  				CASE 					WHEN NULLIF(e.[REASON],'') is null and fxo.[HOLDOVER_REASON] is not null THEN CAST(fxo.[HOLDOVER_REASON] as varchar(500))	 				ELSE COALESCE(e.[REASON],'Unassigned Rationale') 				END 		ELSE NULL 		END AS [1A_RATIONALE], 		eod.[VG_602] as [EXCEPTION_VALUE], 		CASE 			WHEN eod.[DATA_SOURCE] = 'FX' THEN CONCAT(YEAR(fxo.[ORDER_TRADE_DATE]), ' - ', MONTH(fxo.[ORDER_TRADE_DATE]))  			ELSE CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])) 		END AS [DATE], 		eod.[DATA_SOURCE], 		CASE WHEN (mast.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted')) or (mast.[PM_ORDER_STATUS] in ('C', 'Cancelled', 'Deleted')) THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_FX_TABLE eod 	left join #vista_reason e  	on CONCAT(eod.[FXM_ORDER_ID],'_602_',eod.[DATA_SOURCE]) = e.[ID] 	left join (SELECT DISTINCT ORDER_ID, DEALER_NAME, INSTRUCTION_STATUS, PM_ORDER_STATUS FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE) mast 	on eod.[FXM_ORDER_ID] = mast.[ORDER_ID] 	left join #temp_fx_trades fxt  	on fxt.[ORDER_ID] = eod.[FXM_ORDER_ID] and eod.[DATA_SOURCE] = 'FX'  	left join #temp_fx_orders fxo 	on fxo.[FXM_ORDER_ID] = eod.[FXM_ORDER_ID] and eod.[DATA_SOURCE] = 'FX' 	left join #temp_al_trades t  	on t.[ORD_NUM] = eod.[FXM_ORDER_ID] and eod.[DATA_SOURCE] = 'AL' 	left join #temp_al_pm pm 	on eod.[FXM_ORDER_ID] = pm.[ORD_NUM] and eod.[DATA_SOURCE] = 'AL' 	WHERE COALESCE(fxo.[ORDER_TRADE_DATE],pm.[OPEN_DATE]) between @Start_Date and @End_Date  	UNION  	SELECT DISTINCT 		'601' as [EXCEPTION_TYPE_ID], 		CONCAT(ISNULL(ooh.[ORDER_ID],0),'_',ISNULL(ooh.[TRADE_ID],0),'_601_',ooh.[SOURCE]) as EXCEPTION_ID, 		ooh.[ORDER_ID], 		ooh.[TRADE_ID] as [TRANSACTION_NUMBER], 		COALESCE(mast.[DEALER_NAME],mast2.[DEALER_NAME]) as DEALER, 		CASE  			WHEN ooh.[VG_601] > 0 THEN COALESCE(e.[REASON],'Unassigned Rationale') 		ELSE NULL 		END AS [1A_RATIONALE], 		ooh.[VG_601] as [EXCEPTION_VALUE], 		CASE 			WHEN ooh.[SOURCE] = 'FX' and ooh.[ORDER_ID] is not null THEN CONCAT(YEAR(fxo.[ORDER_TRADE_DATE]), ' - ', MONTH(fxo.[ORDER_TRADE_DATE]))  			WHEN ooh.[SOURCE] = 'FX' and ooh.[ORDER_ID] is null		THEN CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE]))  			WHEN ooh.[SOURCE] = 'AL' and ooh.[ORDER_ID] is not null THEN CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])) 			WHEN ooh.[SOURCE] = 'AL' and ooh.[ORDER_ID] is null		THEN CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		ELSE NULL 		END AS [DATE], 		ooh.[SOURCE], 		CASE WHEN (mast.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted')) or (mast.[TRADE_STATUS] in ('C', 'Cancelled', 'Deleted')) THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_601_OUT_OF_HOURS_FX_TABLE ooh 	left join #vista_reason e  	on CONCAT(ISNULL(ooh.[ORDER_ID],0),'_',ISNULL(ooh.[TRADE_ID],0),'_601_',ooh.[SOURCE]) = e.[ID] 	left join (SELECT DISTINCT ORDER_ID, DEALER_NAME, TRADE_STATUS, INSTRUCTION_STATUS FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE) mast 	on ooh.[ORDER_ID] = mast.[ORDER_ID] 	left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE) mast2 	on ooh.[TRADE_ID] = mast2.[TRANSACTION_NUMBER] 	left join #temp_fx_trades fxt  	on fxt.[TRADE_ID] = ooh.[TRADE_ID] and ooh.[SOURCE] = 'FX' 	left join #temp_fx_orders fxo 	on fxo.[FXM_ORDER_ID] = ooh.[ORDER_ID] and ooh.[SOURCE] = 'FX' 	left join #temp_al_trades t  	on t.[MULTI_FUND_ID] = ooh.[TRADE_ID] and ooh.[SOURCE] = 'AL' 	left join #temp_al_pm pm 	on ooh.[ORDER_ID] = pm.[ORD_NUM] and ooh.[SOURCE] = 'AL' 	WHERE COALESCE(fxo.[ORDER_TRADE_DATE],pm.[OPEN_DATE],fxt.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date  	UNION  	SELECT DISTINCT 		'603' as [EXCEPTION_TYPE_ID], 		CONCAT(lt.[ORDER_ID],'_603_',lt.[SOURCE]) as EXCEPTION_ID, 		lt.[ORDER_ID], 		CASE  			WHEN lt.[SOURCE] = 'FX' THEN fxt.[TRADE_ID] 			WHEN lt.[SOURCE] = 'AL' THEN t.[MULTI_FUND_ID] 		ELSE NULL 		END AS [TRANSACTION_NUMBER], 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN lt.[VG_603] > 0 THEN COALESCE(e.[REASON],'Unassigned Rationale') 		ELSE NULL 		END AS [1A_RATIONALE], 		lt.[VG_603] as [EXCEPTION_VALUE], 		CASE 			WHEN lt.[SOURCE] = 'FX' THEN CONCAT(YEAR(fxo.[ORDER_TRADE_DATE]), ' - ', MONTH(fxo.[ORDER_TRADE_DATE]))  			ELSE CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])) 		END AS [DATE], 		lt.[SOURCE] as [DATA_SOURCE], 		CASE WHEN (mast.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted')) or (mast.[TRADE_STATUS] in ('C', 'Cancelled', 'Deleted')) THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_603_LARGE_TRADES_FX_TABLE lt 	left join #vista_reason e  	on CONCAT(lt.[ORDER_ID],'_603_',lt.[SOURCE]) = e.[ID] 	left join (SELECT DISTINCT ORDER_ID, DEALER_NAME, INSTRUCTION_STATUS, TRADE_STATUS FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE) mast 	on lt.[ORDER_ID] = mast.[ORDER_ID] 	left join #temp_fx_trades fxt  	on fxt.[ORDER_ID] = lt.[ORDER_ID] and lt.[SOURCE] = 'FX'  	left join #temp_fx_orders fxo 	on fxo.[FXM_ORDER_ID] = lt.[ORDER_ID] and lt.[SOURCE] = 'FX' 	left join #temp_al_trades t  	on t.[ORD_NUM] = lt.[ORDER_ID] and lt.[SOURCE] = 'AL' 	left join #temp_al_pm pm 	on lt.[ORDER_ID] = pm.[ORD_NUM] and lt.[SOURCE] = 'AL' 	WHERE COALESCE(fxo.[ORDER_TRADE_DATE],pm.[OPEN_DATE]) between @Start_Date and @End_Date  	UNION  	SELECT DISTINCT 		'611' as [EXCEPTION_TYPE_ID], 		CONCAT(ISNULL(vg.[ORDER_ID],0),'_611_',vg.DATA_SOURCE) as EXCEPTION_ID, 		vg.[ORDER_ID], 		mast.TRADE_ID AS TRANSACTION_NUMBER, 		COALESCE(mast.[DEALER_NAME],mast2.[DEALER_NAME]) as DEALER, 		CASE  			WHEN vg.[VG_611] > 0 THEN COALESCE(e.[REASON],'Unassigned Rationale') 		ELSE NULL 		END AS [1A_RATIONALE], 		vg.[VG_611] as [EXCEPTION_VALUE], 		CASE 			WHEN vg.DATA_SOURCE = 'FX' and vg.[ORDER_ID] is not null THEN CONCAT(YEAR(fxo.[ORDER_TRADE_DATE]), ' - ', MONTH(fxo.[ORDER_TRADE_DATE]))  			WHEN vg.DATA_SOURCE = 'FX' and vg.[ORDER_ID] is null		THEN CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE]))  			WHEN vg.DATA_SOURCE = 'AL' and vg.[ORDER_ID] is not null THEN CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])) 			WHEN vg.DATA_SOURCE = 'AL' and vg.[ORDER_ID] is null		THEN CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		ELSE NULL 		END AS [DATE], 		vg.DATA_SOURCE, 		CASE WHEN (mast.[TRADE_STATUS] in ('C', 'Cancelled', 'Deleted')) THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_FX_TABLE vg 	left join (SELECT DISTINCT FX_ORDER_ID, DEALER_NAME, TRADE_STATUS, TRADE_ID FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_FX_TABLE) mast 	on vg.[ORDER_ID] = mast.FX_ORDER_ID 	left join #vista_reason e  	on CONCAT(ISNULL(vg.[ORDER_ID],0),'_611_',vg.[DATA_SOURCE]) = e.[ID] 	left join (SELECT DISTINCT TRADE_ID, FX_ORDER_ID, DEALER_NAME FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_FX_TABLE) mast2 	on vg.ORDER_ID = mast2.FX_ORDER_ID 	left join #temp_fx_trades fxt  	on fxt.ORDER_ID = vg.ORDER_ID and vg.DATA_SOURCE = 'FX' 	left join #temp_fx_orders fxo 	on fxo.[FXM_ORDER_ID] = vg.[ORDER_ID] and vg.DATA_SOURCE = 'FX' 	left join #temp_al_trades t  	on t.ORD_NUM = vg.ORDER_ID and vg.DATA_SOURCE = 'AL' 	left join #temp_al_pm pm 	on vg.[ORDER_ID] = pm.[ORD_NUM] and vg.DATA_SOURCE = 'AL' 	WHERE COALESCE(fxo.[ORDER_TRADE_DATE],pm.[OPEN_DATE],fxt.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date  	UNION  	SELECT DISTINCT 		'612' as [EXCEPTION_TYPE_ID], 		CONCAT(ISNULL(mast.FX_ORDER_ID,0),'_',ISNULL(vg.TRANSACTION_NUMBER,0),'_612_',vg.DATA_SOURCE) as EXCEPTION_ID, 		mast.FX_ORDER_ID AS ORDER_ID, 		vg.TRANSACTION_NUMBER, 		COALESCE(mast.[DEALER_NAME],mast2.[DEALER_NAME]) as DEALER, 		CASE  			WHEN vg.[VG_612] > 0 THEN COALESCE(e.[REASON],'Unassigned Rationale') 		ELSE NULL 		END AS [1A_RATIONALE], 		vg.[VG_612] as [EXCEPTION_VALUE], 		CASE 			WHEN vg.DATA_SOURCE = 'FX' and vg.TRANSACTION_NUMBER is not null THEN CONCAT(YEAR(fxo.[ORDER_TRADE_DATE]), ' - ', MONTH(fxo.[ORDER_TRADE_DATE]))  			WHEN vg.DATA_SOURCE = 'FX' and vg.TRANSACTION_NUMBER is null		THEN CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE]))  			WHEN vg.DATA_SOURCE = 'AL' and vg.TRANSACTION_NUMBER is not null THEN CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])) 			WHEN vg.DATA_SOURCE = 'AL' and vg.TRANSACTION_NUMBER is null		THEN CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		ELSE NULL 		END AS [DATE], 		vg.DATA_SOURCE, 		CASE WHEN (mast.[TRADE_STATUS] in ('C', 'Cancelled', 'Deleted')) THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_FX_TABLE vg 	left join (SELECT DISTINCT FX_ORDER_ID, DEALER_NAME, TRADE_STATUS, TRADE_ID FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_FX_TABLE) mast 	on vg.TRANSACTION_NUMBER = mast.TRADE_ID 	left join #vista_reason e  	on CONCAT(ISNULL(mast.FX_ORDER_ID,0),'_',ISNULL(vg.TRANSACTION_NUMBER,0),'_612_',vg.[DATA_SOURCE]) = e.[ID] 	left join (SELECT DISTINCT TRADE_ID, FX_ORDER_ID, DEALER_NAME FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_FX_TABLE) mast2 	on vg.TRANSACTION_NUMBER = mast2.TRADE_ID 	left join #temp_fx_trades fxt  	on fxt.TRADE_ID = vg.TRANSACTION_NUMBER and vg.DATA_SOURCE = 'FX' 	left join #temp_fx_orders fxo 	on fxt.ORDER_ID = fxo.FXM_ORDER_ID and vg.DATA_SOURCE = 'FX' 	left join #temp_al_trades t  	on t.MULTI_FUND_ID = vg.TRANSACTION_NUMBER and vg.DATA_SOURCE = 'AL' 	left join #temp_al_pm pm 	on fxt.ORDER_ID = pm.[ORD_NUM] and vg.DATA_SOURCE = 'AL' 	WHERE COALESCE(fxo.[ORDER_TRADE_DATE],pm.[OPEN_DATE],fxt.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date   	 ) temp_exception  IF OBJECT_ID('tempdb..#temp_max_req_orders', 'U') IS NOT NULL DROP TABLE #temp_max_req_orders SELECT  	FXM_ORDER_ID, 	MAX(API_REQUESTED_DATE) AS MAX_API_REQ INTO #temp_max_req_orders FROM VISTA_REPORTING.dbo.FX_ORDERS GROUP BY FXM_ORDER_ID  IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades SELECT  	TRADE_ID, 	MAX(API_REQUESTED_DATE) AS MAX_API_REQ INTO #temp_max_req_trades FROM VISTA_REPORTING.dbo.FX_TRADES GROUP BY TRADE_ID  IF OBJECT_ID('tempdb..#MAX_TOUCH_T', 'U') IS NOT NULL DROP TABLE #MAX_TOUCH_T SELECT DISTINCT  	MULTI_FUND_ID,  	MAX(TOUCH_COUNT) AS MAX_TOUCH  INTO #MAX_TOUCH_T FROM VISTA_REPORTING.DBO.TRADES GROUP BY MULTI_FUND_ID  IF OBJECT_ID('tempdb..#MAX_TOUCH_PM', 'U') IS NOT NULL DROP TABLE #MAX_TOUCH_PM SELECT DISTINCT  	ORD_NUM,  	MAX(TOUCH_COUNT) AS MAX_TOUCH  INTO #MAX_TOUCH_PM FROM VISTA_REPORTING.DBO.PM_ORDERS GROUP BY ORD_NUM   -- Create temp table with data to be inserted into the MASTER table in VISTA_REPORTING IF OBJECT_ID('tempdb..#temp_exception_final', 'U') IS NOT NULL DROP TABLE #temp_exception_final SELECT DISTINCT	 	ex.[DEALER] as DEALER_NAME, 	fxo.[CLIENT_FUND], 	COALESCE(fxt.[EXECUTED_BANK],pl.[BROKER]) as EXECUTED_BANK, 	CASE 		WHEN ex.[EXCEPTION_TYPE_ID] = '9'			 THEN 'Timely Execution' 		WHEN ex.[EXCEPTION_TYPE_ID] = '10'			 THEN 'Timely Recording' 		WHEN ex.[EXCEPTION_TYPE_ID] = '500'			 THEN 'Dealer Limit' 		--WHEN ex.[EXCEPTION_TYPE_ID] = '501_FWD'	     THEN 'Spot Reference Rate Forward' 		--WHEN ex.[EXCEPTION_TYPE_ID] = '501_SPOT'	 THEN 'Spot Reference Rate Spot' 		--SURVG-563---------------- 		WHEN ex.[EXCEPTION_TYPE_ID] = '613'			 THEN 'Instructor to Dealer' 		--End of SURVG-563---------------- 		WHEN ex.[EXCEPTION_TYPE_ID] = '501'			 THEN 'Spot Reference Rate' 		WHEN ex.[EXCEPTION_TYPE_ID] = '601'			 THEN 'Out of Hours' 		WHEN ex.[EXCEPTION_TYPE_ID] = '602'			 THEN 'EOD Holdovers' 		WHEN ex.[EXCEPTION_TYPE_ID] = '603'			 THEN 'Large Trades' 		WHEN ex.[EXCEPTION_TYPE_ID] = '604'			 THEN 'Client Order Handling' 		WHEN ex.[EXCEPTION_TYPE_ID] = '607_QE_SPOT'	 THEN 'Best Execution B3Q Spot' 		WHEN ex.[EXCEPTION_TYPE_ID] = '607_QE_FWD'	 THEN 'Best Execution B3Q Forward' 		WHEN ex.[EXCEPTION_TYPE_ID] = '607_NWQ_SPOT' THEN 'Best Execution NWQ Spot' 		WHEN ex.[EXCEPTION_TYPE_ID] = '607_NWQ_FWD'	 THEN 'Best Execution NWQ Forward'		 		WHEN ex.[EXCEPTION_TYPE_ID] = '607_SRR_SPOT' THEN 'Best Execution SRR Spot' 		WHEN ex.[EXCEPTION_TYPE_ID] = '607_SRR_FWD'	 THEN 'Best Execution SRR Forward' 		WHEN ex.[EXCEPTION_TYPE_ID] = '608'			 THEN 'Order Request Return' 		WHEN ex.[EXCEPTION_TYPE_ID] = '611'			 THEN 'Order Aggregation' 		WHEN ex.[EXCEPTION_TYPE_ID] = '612'			 THEN 'Order Allocation' 	END AS [EXCEPTION], 	ex.[EXCEPTION_VALUE], 	COALESCE(ooh.[ORDER_EXCEPTION],ooh2.[ORDER_EXCEPTION]) as ORDER_EXCEPTION, 	COALESCE(ooh.[TRADE_EXCEPTION],ooh2.[TRADE_EXCEPTION]) as TRADE_EXCEPTION, 	lt2.[EXCEPTION_FLAG] as LARGE_TRADE_EXCEPTION, 	e_c.[COMMENT], 	CASE  		WHEN ex.[EXCEPTION_VALUE] = 1 and NULLIF(ex.[1A_RATIONALE],'') is null THEN 'Unassigned Rationale' 	ELSE ex.[1A_RATIONALE] 	END AS [1A_RATIONALE], 	COALESCE(fxo.[AUTH_TIME],pm.[AUTH_TIME]) as AUTHORISED_DATE_TIME, 	COALESCE(fxo.[INSTRUCTION_RECEIVED_DATE_TIME],pm.[AUTH_TIME]) as ORDER_RECEIVED_DATE_TIME, 	COALESCE(fxt.[MARKET_ARRIVAL_DATE_TIME],t.[EXECUTION_TIME]) as MARKET_ARRIVAL_DATE_TIME, 	COALESCE(fxt.[ACCEPTED_DATE_TIME],pm.[ACTIVE_TIME]) as ACCEPTED_DATE_TIME, 	COALESCE(fxt.[EXECUTED_DATE_TIME],t.[EXECUTION_TIME]) as EXECUTED_DATE_TIME, 	COALESCE(fxo.[FM_COMMENTS],pm.[COMMENTS_VALUE]) as FM_COMMENTS, 	fxo.[MARKER], 	COALESCE(fxo.[TRADE_PURPOSE],t.[TRD_PURPOSE]) as TRADE_PURPOSE, 	(fxt.[NR_LEG_PRODUCT] + ISNULL(' | ' + fxt.[FR_LEG_PRODUCT],'')) as PRODUCT, 	fxo.[SWAP_TYPE], 	COALESCE(fxo.[INSTRUCTION_TYPE],pm.[SM_SEC_TYPE],t.[SM_SEC_TYPE]) as INSTRUCTION_TYPE, 	(fxo.[ACTION1]		+ ISNULL( ' | ' + fxo.[ACTION2],'')) as [ACTION],  	(fxo.[NOTIONAL_CCY] + ISNULL( ' | ' + fxo.[NOTIONAL_CCY_FAR],'')) as [INSTRUCTED_CURRENCY], 	(CAST(CONVERT(DECIMAL(38,2),fxo.[NOTIONAL_AMOUNT]) as varchar(50)) + ISNULL(' | ' + CAST(CONVERT(DECIMAL(38,2),fxo.[NOTIONAL_AMOUNT_FAR]) as varchar(50)),'')) as [INSTRUCTED_AMOUNT], 	(fxo.[BUY_CCY]		+ ISNULL( ' | ' + fxo.[BUY_CCY_LEG2],'')) as [BUY_CURRENCY], 	(fxo.[SELL_CCY]		+ ISNULL( ' | ' + fxo.[SELL_CCY_LEG2],'')) as [SELL_CURRENCY], 	COALESCE(fxt.[TRADE_DATE],t.[TRD_TRADE_DATE]) as TRADE_DATE, 	CASE 		WHEN ex.[DATA_SOURCE] = 'FX' THEN (CAST(fxo.[VALUE_DATE_NEAR] as varchar(50)) + ISNULL(' | ' + CAST(fxo.[VALUE_DATE_FAR] as varchar(50)),''))  		WHEN ex.[DATA_SOURCE] = 'AL' THEN (CONVERT(VARCHAR(50),pm.[SETTLE_DATE])	  + ISNULL(' | ' + CONVERT(VARCHAR(50),pm.[MATURITY]),''))  	ELSE NULL 	END AS [VALUE_DATE], 	CASE 		WHEN ex.[DATA_SOURCE] = 'FX' THEN (CAST(fxt.[EXECUTED_AMOUNT] as varchar(50)) + ISNULL(' | ' + CAST(fxt.[EXECUTED_AMOUNT_FAR] as varchar(50)),'')) 		WHEN ex.[DATA_SOURCE] = 'AL' THEN CAST(pm.[FILL_AMT] as varchar(50)) 	ELSE NULL 	END AS [EXECUTED_AMOUNT], 	CASE 		WHEN ex.[DATA_SOURCE] = 'FX' THEN (CAST(fxt.[EXECUTED_RATE] as varchar(50)) + ISNULL(' | ' + CAST(fxt.[EXECUTED_RATE_FAR] as varchar(50)),'')) 		WHEN ex.[DATA_SOURCE] = 'AL' THEN CAST(COALESCE(pl.[AVG_PRICE],t.[FX_PRICE]) as varchar(50))  	ELSE NULL 	END AS [ALL_IN_RATE], 	(CAST(fxt.[SPOT_RATE] as varchar(50))	   + ISNULL(' | ' + CAST(fxt.[SPOT_RATE_FAR] as varchar(50)),'')) as SPOT_RATE, 	(CAST(fxt.[FORWARD_POINTS] as varchar(50)) + ISNULL(' | ' + CAST(fxt.[FORWARD_POINTS_FAR] as varchar(50)),'')) as FORWARD_POINTS, 	fxt.[MAPPED_BANK_COUNT] as STATIC_BANKS_COUNT, 	mast_bestex.[STATIC_BANKS], 	mast_bestex.[LOSING_BANKS_COUNT], 	mast_bestex.[LOSING_BANKS], 	COALESCE(fxo.[BASE_FUND],t.[PORTFOLIOS_PORTFOLIO_NAME]) as BASE_FUND, 	CASE 		WHEN ex.[DATA_SOURCE] = 'AL' THEN 			CASE  				WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP' 				WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG' 				WHEN (pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM' 			ELSE NULL 			END 		WHEN ex.[DATA_SOURCE] = 'FX' THEN fxo.[BUSINESS_GROUP] 	ELSE NULL 	END AS [BUSINESS_GROUP],  	COALESCE(fxo.[PM],fxo.[INSTRUCTED_BY]) as INSTRUCTED_BY, 	COALESCE(fxo.[CREATED_FROM],'Aladdin') as ORDER_SOURCE, 	COALESCE(fxo.[TRADE_VENUE],pl.[VENUE]) as PLACEMENT_VENUE, 	fxt.[EXC_SESSION_TYPE] as SESSION_TYPE, 	fxt.[ORDER_STRATEGY] as NETTING_STRATEGY_USED, 	fxt.[EXC_SESSION_ID] as SESSION_ID, 	(CAST(fxo.[FIXING_DATE] as varchar(50))	+ ISNULL( ' | ' + CAST(fxo.[FIXING_DATE_LEG2] as varchar(50)),'')) as [FIXING_DATE], 	fxt.[SWAP_POINTS], 	COALESCE(fxo.[NET_EXPOSURE_ORDER],fxt.[NET_EXPOSURE_TRADE]) as NET_EXPOSURE, 	ex.[ORDER_ID], 	ex.[TRANSACTION_NUMBER], 	COALESCE(fxo.[ORD_NUM],fxo.[FXM_ORDER_ID]) as PM_ORDER_ID, 	fxo.[ALADDIN_COMMON_ID] as ALADDIN_COMMON_IDENTIFIER, 	COALESCE(fxo.[INSTRUCTION_STATUS],pl.[STATUS]) as INSTRUCTION_STATUS, 	COALESCE(fxt.[TRADE_STATUS],t.[TRD_STATUS]) as TRADE_STATUS, 	pm.[STATUS] as PM_ORDER_STATUS, 	fxt.[ACCEPTED_BY] as TAKEN_OVER_BY, 	ex.[DATA_SOURCE], 	ex.[DATE], 	@REPORT_NAME as REPORT_NAME, 	GETDATE() as REPORT_DATE, 	ex.[EXCEPTION_ID], 	ex.[EXCEPTION_TYPE_ID] INTO #temp_exception_final FROM #temp_exception_table ex left join (SELECT DISTINCT fxt.TRADE_ID, EXECUTED_DATE_TIME, EXECUTED_BANK, EXECUTED_RATE, EXECUTED_RATE_FAR, ACCEPTED_BY, FORWARD_POINTS, FORWARD_POINTS_FAR, ACCEPTED_DATE_TIME,  						   TRADE_DATE, MARKET_ARRIVAL_DATE_TIME, TRADE_STATUS, EXECUTED_AMOUNT, EXECUTED_AMOUNT_FAR, NET_EXPOSURE_TRADE, SPOT_RATE, SPOT_RATE_FAR, SWAP_POINTS,  						   SWAP_TYPE, EXC_SESSION_ID, EXC_SESSION_TYPE, ORDER_STRATEGY, NR_LEG_PRODUCT, FR_LEG_PRODUCT, MAPPED_BANK_COUNT, API_REQUESTED_DATE, PULL_DATE FROM VISTA_REPORTING.dbo.FX_TRADES fxt 						   inner join #temp_max_req_trades req on req.MAX_API_REQ = fxt.API_REQUESTED_DATE and req.TRADE_ID = fxt.TRADE_ID) fxt on ex.[TRANSACTION_NUMBER] = fxt.[TRADE_ID] and ex.[TRANSACTION_NUMBER] is not null and ex.[DATA_SOURCE] = 'FX' left join (SELECT DISTINCT fxo.FXM_ORDER_ID, ORD_NUM, ALADDIN_COMMON_ID, AUTH_TIME, BASE_FUND, INSTRUCTION_RECEIVED_DATE_TIME, INSTRUCTION_STATUS, BUSINESS_GROUP,  						   CLIENT_FUND, FM_COMMENTS, CREATED_FROM, TRADE_PURPOSE, PM, MARKER, INSTRUCTION_TYPE, ACTION1, ACTION2, NOTIONAL_CCY, NOTIONAL_CCY_FAR, 						   BUY_CCY, BUY_CCY_LEG2, SELL_CCY, SELL_CCY_LEG2, NOTIONAL_AMOUNT, NOTIONAL_AMOUNT_FAR, VALUE_DATE_FAR, VALUE_DATE_NEAR, FIXING_DATE,  						   FIXING_DATE_LEG2, TRADE_VENUE, INSTRUCTED_BY, NET_EXPOSURE_ORDER, SWAP_TYPE, API_REQUESTED_DATE, PULL_DATE FROM VISTA_REPORTING.dbo.FX_ORDERS fxo 						   inner join #temp_max_req_orders req on req.FXM_ORDER_ID = fxo.FXM_ORDER_ID and req.MAX_API_REQ = fxo.API_REQUESTED_DATE) fxo on ex.[ORDER_ID] = fxo.[FXM_ORDER_ID] and ex.[ORDER_ID] is not null and ex.[DATA_SOURCE] = 'FX' left join (SELECT DISTINCT t.MULTI_FUND_ID, FUND, EXECUTION_TIME, TRD_COUNTERPARTY, TRD_EX_BROKER_CODE, TRD_PRICE, SM_SEC_TYPE, TRD_ORIG_FACE,  						   TRD_TRADE_DATE, TRD_SETTLE_DATE, TRD_STATUS, TRD_PURPOSE, PORTFOLIOS_PORTFOLIO_NAME, FX_PRICE, TOUCH_COUNT PULL_DATE FROM VISTA_REPORTING.dbo.TRADES t 						   inner join #MAX_TOUCH_T mtt on t.MULTI_FUND_ID = mtt.MULTI_FUND_ID and t.TOUCH_COUNT = mtt.MAX_TOUCH) t on ex.[TRANSACTION_NUMBER] = t.[MULTI_FUND_ID] and ex.[TRANSACTION_NUMBER] is not null and ex.[DATA_SOURCE] = 'AL' left join (SELECT DISTINCT FUND_ID, PORTFOLIO_GROUP_NAME FROM VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY) pgt on t.[FUND] = pgt.[FUND_ID] left join (SELECT DISTINCT MULTI_FUND_ID, INST_TYPE FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr on t.[MULTI_FUND_ID] = pr.[MULTI_FUND_ID] left join (SELECT DISTINCT pm.ORD_NUM, AUTH_TIME, CURRENCY, FACE, [STATUS], ACTIVE_TIME, COMMENTS_VALUE, OPEN_DATE, SM_SEC_TYPE, SETTLE_DATE, MATURITY, FILL_AMT, TOUCH_COUNT, PULL_DATE FROM VISTA_REPORTING.dbo.PM_ORDERS pm 						   inner join #MAX_TOUCH_PM mtt on mtt.ORD_NUM = pm.ORD_NUM and mtt.MAX_TOUCH = pm.TOUCH_COUNT) pm on ex.[ORDER_ID] = pm.[ORD_NUM] and ex.[ORDER_ID] is not null and ex.[DATA_SOURCE] = 'AL' left join (SELECT DISTINCT ORD_NUM, PLACEMENT_NUM, [STATUS], QUANTITY, [BROKER], AVG_PRICE, VENUE FROM VISTA_REPORTING.dbo.PLACEMENTS) pl  on pm.[ORD_NUM] = pl.[ORD_NUM] left join (SELECT PLACEMENT_NUM, REQUEST_ID FROM VISTA_STAGING.dbo.REQUEST_LOOKUP) r  on pl.[PLACEMENT_NUM] = r.[PLACEMENT_NUM] left join (SELECT DISTINCT ORDER_ID, TRADE_ID, ORDER_EXCEPTION, TRADE_EXCEPTION FROM VISTA_STAGING.dbo.VG_601_OUT_OF_HOURS_FX_TABLE) ooh on (ex.[EXCEPTION_TYPE_ID] = '601' and ex.[ORDER_ID] = ooh.[ORDER_ID] and ooh.[ORDER_ID] is not null)  left join (SELECT DISTINCT ORDER_ID, TRADE_ID, ORDER_EXCEPTION, TRADE_EXCEPTION FROM VISTA_STAGING.dbo.VG_601_OUT_OF_HOURS_FX_TABLE) ooh2 on (ex.[EXCEPTION_TYPE_ID] = '601' and ex.[TRANSACTION_NUMBER] = ooh2.[TRADE_ID] and ooh2.[TRADE_ID] is not null)  left join (SELECT DISTINCT TRANSACTION_NUMBER, EXCEPTION_FLAG FROM VISTA_STAGING.dbo.VG_603T_LARGE_TRADES_FX_TABLE) lt2 on (ex.[TRANSACTION_NUMBER] = lt2.[TRANSACTION_NUMBER]) left join (SELECT DISTINCT TRANSACTION_NUMBER, STATIC_BANKS, LOSING_BANKS_COUNT, LOSING_BANKS FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE) mast_bestex on (ex.[TRANSACTION_NUMBER] = mast_bestex.[TRANSACTION_NUMBER])  left join (SELECT DISTINCT ID, TRANSACTION_NUMBER, COMMENT, EXCEPTION_TYPE_ID FROM #vista_reason) e_c on e_c.[ID] = ex.[EXCEPTION_ID] AND e_c.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER AND e_c.EXCEPTION_TYPE_ID = ex.EXCEPTION_TYPE_ID WHERE ex.TRADE_STATUS_FLAG != 1   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FX_AGGREGATOR_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_FX_AGGREGATOR_DATA 	FROM #temp_exception_final ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_FX_AGGREGATOR_DATA 	SELECT * 	FROM #temp_exception_final  --IF OBJECT_ID('tempdb..#temp_exception_cancelled', 'U') IS NOT NULL DROP TABLE #temp_exception_cancelled	 --SELECT DISTINCT --	ex.[ORDER_ID], --	ex.[TRANSACTION_NUMBER],  --	COALESCE(fxo.[OMQ_DATE_TIME],pm.[AUTH_TIME]) as OMQ_DATE_TIME, --	COALESCE(fxo.[INSTRUCTION_RECEIVED_TIME],pm.[AUTH_TIME]) as INSTRUCTION_RECEIVED_TIME, --	COALESCE(fxt.[EXECUTED_DATETIME],t.[EXECUTION_TIME]) as EXECUTED_DATE_TIME, --	fxo.[INSTRUCTION_CANCEL_REASON], --	fxo.[CANCELLED_BY], --	COALESCE(fxt.[BANK],t.[TRD_EX_BROKER_CODE],t.[TRD_COUNTERPARTY]) as BANK, --	COALESCE(fxt.[EXECUTED_RATE],t.[TRD_PRICE]) as EXECUTED_RATE, --	COALESCE(fxt.[UPLOADED_DATE_TIME],t.[TRD_ENTRY_TIME]) as UPLOADED_DATE_TIME, --	CASE --		WHEN ex.[DATA_SOURCE] = 'AL' THEN --			CASE  --				WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP' --				WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG' --				WHEN (pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM' --			ELSE NULL --			END --		WHEN ex.[DATA_SOURCE] = 'FX' THEN fxt.[BUSINESS_GROUP] --	ELSE NULL --	END AS [BUSINESS_GROUP], --Guessing the logic is same as DMG? --	COALESCE(fxt.[PRODUCT_TYPE],fxo.[PRODUCT_TYPE],'FX Products') as PRODUCT_TYPE, --	COALESCE(fxt.[PRODUCT],pr.[INST_TYPE]) as PRODUCT, --	ex.[DEALER_NAME], --	COALESCE(fxo.[INSTRUCTED_CURRENCY],pm.[CURRENCY]) as CURRENCY, --	COALESCE(fxo.[INSTRUCTED_AMOUNT],pm.[FACE]) as INSTRUCTED_AMOUNT, --	COALESCE(fxt.[DEALT_AMOUNT],t.[TRD_ORIG_FACE]) as DEALT_AMOUNT, --	COALESCE(fxt.[TRADE_DATE],t.[TRD_TRADE_DATE]) as TRADE_DATE, --	COALESCE(fxt.[VALUE_DATE],t.[TRD_TRADE_DATE]) as VALUE_DATE, --	COALESCE(fxt.[MATURITY_DATE],t.[TRD_SETTLE_DATE]) as MATURITY_DATE, --	fxt.[TERM], --	CASE  --		WHEN fxo.[INSTRUCTION_STATUS_DECODE] = 'Cancelled' OR pm.[STATUS] = 'C' --		THEN  --			CASE --				WHEN NULLIF(e.[REASON],'') is null and fxt.[CANCEL_REASON] is not null			  THEN CAST(fxt.[CANCEL_REASON] as varchar(50))	 --				WHEN NULLIF(e.[REASON],'') is null and fxo.[INSTRUCTION_CANCEL_REASON] is not null THEN CAST(fxo.[INSTRUCTION_CANCEL_REASON] as varchar(50))	 --			ELSE e.[REASON] --			END --	ELSE NULL --	END AS [CANCELLED_RATIONALE], --	CASE  --		WHEN fxo.[INSTRUCTION_STATUS_DECODE] = 'Cancelled' OR pm.[STATUS] = 'C' THEN 1 --	ELSE 0 --	END AS CANCELLED_EXCEPTION_FLAG, --	ex.[EXCEPTION_VALUE], --	ex.[DATE], --	@REPORT_NAME as REPORT_NAME, --	GETDATE() as REPORT_DATE, --	ex.[DATA_SOURCE] --INTO #temp_exception_cancelled --FROM #temp_exception_final ex --left join #vista_reason e  --on CONCAT(ISNULL(ORDER_ID,0),'_',ISNULL(TRANSACTION_NUMBER,0),'_',ex.[EXCEPTION_TYPE_ID],'_',ex.[DATA_SOURCE]) = e.[ID]  --left join (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, CANCEL_REASON, EXECUTED_DATETIME, BANK, EXECUTED_RATE, UPLOADED_DATE_TIME, BUSINESS_GROUP, PRODUCT_TYPE, PRODUCT, DEALT_AMOUNT, TRADE_DATE, VALUE_DATE, MATURITY_DATE, TERM FROM VISTA_REPORTING.dbo.FX_TRADES) ct --on ex.[TRANSACTION_NUMBER] = fxt.[TRANSACTION_NUMBER] and ex.[TRANSACTION_NUMBER] is not null and ex.[DATA_SOURCE] = 'FX' --left join (SELECT DISTINCT ORDER_ID, INSTRUCTION_STATUS_DECODE, INSTRUCTION_CANCEL_REASON, OMQ_DATE_TIME, INSTRUCTION_RECEIVED_TIME, CANCELLED_BY, PRODUCT_TYPE, INSTRUCTED_CURRENCY, INSTRUCTED_AMOUNT FROM VISTA_REPORTING.dbo.FX_ORDERS) co --on ex.[ORDER_ID] = fxo.[ORDER_ID] and ex.[ORDER_ID] is not null and ex.[DATA_SOURCE] = 'FX' --left join (SELECT DISTINCT MULTI_FUND_ID, FUND, EXECUTION_TIME, TRD_COUNTERPARTY, TRD_EX_BROKER_CODE, TRD_PRICE, TRD_ENTRY_TIME, TRD_ORIG_FACE, TRD_TRADE_DATE, TRD_SETTLE_DATE FROM VISTA_REPORTING.dbo.TRADES) t --on ex.[TRANSACTION_NUMBER] = t.[MULTI_FUND_ID] and ex.[TRANSACTION_NUMBER] is not null and ex.[DATA_SOURCE] = 'AL' --left join (SELECT DISTINCT FUND_ID, PORTFOLIO_GROUP_NAME FROM VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY) pgt --on t.[FUND] = pgt.[FUND_ID] --left join (SELECT DISTINCT MULTI_FUND_ID, INST_TYPE FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr --on t.[MULTI_FUND_ID] = pr.[MULTI_FUND_ID] --left join (SELECT DISTINCT ORD_NUM, [STATUS], AUTH_TIME, CURRENCY, FACE FROM VISTA_REPORTING.dbo.PM_ORDERS) pm --on pm.[ORD_NUM] = fxo.[ORDER_ID] and ex.[ORDER_ID] is not null and ex.[DATA_SOURCE] = 'AL'   --IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FX_CANCELLED_AGGREGATOR_DATA', 'U') IS NULL --	SELECT * --	INTO VISTA_REPORTING.dbo.DMC_FX_CANCELLED_AGGREGATOR_DATA --	FROM #temp_exception_cancelled --ELSE --	INSERT INTO VISTA_REPORTING.dbo.DMC_FX_CANCELLED_AGGREGATOR_DATA --	SELECT * --	FROM #temp_exception_cancelled   END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: DMC_FX_AGGREGATOR_1B CreateDate: 2019-10-18 08:39:51.190 ModifyDate: 2022-03-04 17:50:15.170 --- DEFINITION START --- -- ============================================= -- Author:		<Samad, Mehreen> -- Create date: <26/06/2019> -- Description:	 -- <Generates AGGREGATOR 1B Report data as well as  -- Cancelled Orders/Trades Report data for FX.> -- =============================================  -- ***************VERSION CONTROL*************** --2022-01-27, Matej Miter; Created for Jira: --SURVG-563 - New Fx Report Instructor to dealer 2022 -- *********************************************  CREATE PROCEDURE [dbo].[DMC_FX_AGGREGATOR_1B]  	-- Add the parameters for the stored procedure here  	@Start_day		INT, 	@Start_Month	INT, 	@Start_Year		INT, 	@End_Day		INT,  	@End_Month		INT, 	@End_Year		INT, 	@REPORT_NAME	VARCHAR(MAX)  AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;      -- Insert statements for procedure here  	DECLARE @Start_Date	DATETIME; 	SET		@Start_Date = CONVERT(DATE,CONCAT(@Start_Year,'-',@Start_Month,'-', @Start_day)); --Turn the input start month parameter into a date  	DECLARE @End_Date0	DATETIME; 	DECLARE @End_Date	DATETIME; 	SET		@End_Date0  = CONVERT(DATETIME,CONCAT(@End_Year,'-',@End_Month, '-', @End_Day));  --Turn the input end month parameter into a date   	SET		@End_Date	= DATEADD(SECOND,86399,@End_Date0); --To make it for 23:59:59 that day. May need to update this for milliseconds.   ----Add the metadata to a table so we keep a history of all reports run IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FX_REPORTS_METADATA', 'U') IS NULL SELECT 	DATEPART(DAY,@Start_Date) AS [START_DAY], 	DATEPART(MONTH, @Start_Date) AS [START_MONTH], 	DATEPART(YEAR, @Start_Date) AS [START_YEAR], 	DATEPART(DAY,@End_Date)	AS [END_DAY], 	DATEPART(MONTH, @End_Date) AS [END_MONTH], 	DATEPART(YEAR, @End_Date) AS [END_YEAR], 	CONVERT(VARCHAR(70),'FX_AGGREGATOR_1B') AS [DMC_Report], 	@REPORT_NAME AS [Report_Name], 	GETDATE() AS [Run_Date] INTO VISTA_REPORTING.dbo.DMC_FX_REPORTS_METADATA ELSE INSERT INTO VISTA_REPORTING.dbo.DMC_FX_REPORTS_METADATA SELECT 	DATEPART(DAY,@Start_Date) AS [START_DAY], 	DATEPART(MONTH, @Start_Date) AS [START_MONTH], 	DATEPART(YEAR, @Start_Date) AS [START_YEAR], 	DATEPART(DAY,@End_Date)	AS [END_DAY], 	DATEPART(MONTH, @End_Date) AS [END_MONTH], 	DATEPART(YEAR, @End_Date) AS [END_YEAR], 	'FX_AGGREGATOR_1B' AS [DMC_Report], 	@REPORT_NAME AS [Report_Name], 	GETDATE() AS [Run_Date]  --1A Reasons --Selecting reasons from exception reason table IF OBJECT_ID('tempdb..#vista_reason', 'U') IS  NOT NULL DROP TABLE #vista_reason SELECT DISTINCT 	e.[ID],  	e.[REASON], 	e.[STATUS], 	e.[TOUCH_COUNT] INTO #vista_reason FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE e inner join (SELECT 				[ID], 				MAX(touch_count) as [MAX_TOUCH], 				MAX(CREATED) as [MAX_CREATE_TIME] 			FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE 			WHERE [STATUS] in ('For Review','With Dealer','With Reviewer','C&A Review Request') 			--the above condition around status ensures that we only consider exceptions coming from the Dealing Desk 			--only dealing desk has the ability to flag false positive exceptions 			GROUP BY [ID]) a  on a.[ID] = e.[ID] and a.[MAX_TOUCH] = e.[TOUCH_COUNT] AND a.[MAX_CREATE_TIME] = e.[CREATED]  --1B Reasons IF OBJECT_ID('tempdb..#max_reason_cm', 'U') IS  NOT NULL DROP TABLE #max_reason_cm --The below table is used to identify the last Reason (populated by C&M Team) SELECT DISTINCT 	e.[ID],  	e.[REASON], 	e.[STATUS] INTO #max_reason_cm FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE e inner join (SELECT  				[ID], 				MAX(TOUCH_COUNT) as [MAX_TOUCH]  			FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE 			WHERE [STATUS] in ('Pre Sampling','With C&A Reviewer','Under Review','Review in Process','Post Sampling') 			GROUP BY [ID] ) a  on a.[ID] = e.[ID] and a.[MAX_TOUCH] = e.[TOUCH_COUNT]  -- ================================================================================================= /* EXCEPTION RATIONALE TABLE FOR 1B REPORTS */ -- =================================================================================================  IF OBJECT_ID('tempdb..#temp_exception_table_b', 'U') IS NOT NULL DROP TABLE #temp_exception_table_b SELECT *  INTO #temp_exception_table_b FROM (SELECT DISTINCT 		'10' as [EXCEPTION_TYPE_ID], 		timrec.[TRADE_ID] as EXCEPTION_ID, 		CASE  			WHEN timrec.[SOURCE] = 'FX' THEN fxt.[ORDER_ID] 			WHEN timrec.[SOURCE] = 'AL' THEN oc.[PM_ORD] 		ELSE NULL 		END AS ORDER_ID, 		timrec.[TRADE_ID] as TRANSACTION_NUMBER, 		CASE  			WHEN timrec.[SOURCE] = 'FX' THEN fxt.[DEALT_BY] 			WHEN timrec.[SOURCE] = 'AL' THEN t.[TRD_TRADER] 		ELSE NULL 		END AS DEALER, 		CASE  			WHEN timrec.[VG_10] = 1 THEN COALESCE(ex.[REASON],'Unassigned Rationale') 		ELSE NULL 		END AS [1B_RATIONALE], 		MAX(CASE 				WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  			ELSE 0  			END) AS [CM_Reviewed], 		timrec.[VG_10] as [EXCEPTION_VALUE], 		CASE 			WHEN timrec.[SOURCE] = 'FX' THEN CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE]))  			ELSE CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		END AS [DATE], 		timrec.[SOURCE] as [DATA_SOURCE] 	FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FX_TABLE timrec 	left join #vista_reason e  	on CONCAT(timrec.[TRADE_ID],'_10_',timrec.[SOURCE]) = e.[ID] 	left join #max_reason_cm ex  	on CONCAT(timrec.[TRADE_ID],'_10_',timrec.[SOURCE]) = ex.[ID] 	left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'FX' and [STATUS] in ('2C1', '2C2')) fsu 	on CONCAT(timrec.[TRADE_ID],'_10_',timrec.[SOURCE]) = fsu.[ID] 	left join (SELECT DISTINCT ORDER_ID, TRADE_ID, DEALT_BY, TIMELY_RECORDING_REASON, TRADE_DATE FROM VISTA_REPORTING.dbo.FX_TRADES) fxt  	on fxt.[TRADE_ID] = timrec.[TRADE_ID] AND timrec.[SOURCE] = 'FX' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[MULTI_FUND_ID] = timrec.[TRADE_ID] AND timrec.[SOURCE] = 'AL' 	left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc 	on oc.[TRD_ORD] = t.[ORD_NUM] 	WHERE timrec.[VG_10] = 1 and COALESCE(fxt.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date 	GROUP BY fxt.[ORDER_ID], 			 oc.[PM_ORD], 			 timrec.[TRADE_ID], 			 t.[TRD_TRADER], 			 fxt.[DEALT_BY], 			 timrec.[VG_10], 			 ex.[REASON], 			 CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE])), 			 CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])), 			 timrec.[SOURCE]  	UNION  	SELECT DISTINCT 		'607_QE_SPOT' as [EXCEPTION_TYPE_ID], 		bestex.[TRADE_ID] as EXCEPTION_ID, 		CASE  			WHEN bestex.[DATA_SOURCE] = 'FX' THEN fxt.[ORDER_ID] 			WHEN bestex.[DATA_SOURCE] = 'AL' THEN oc.[PM_ORD] 		ELSE NULL 		END AS ORDER_ID, 		bestex.[TRADE_ID], 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN bestex.[B3Q_EXCEPTION] = 1 THEN COALESCE(ex.[REASON],'Unassigned Rationale') 		ELSE NULL 		END AS [1B_RATIONALE], 		MAX(CASE 				WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  			ELSE 0  			END) AS [CM_Reviewed], 		bestex.[B3Q_EXCEPTION] as [EXCEPTION_VALUE], 		CASE 			WHEN bestex.[DATA_SOURCE] = 'FX' THEN CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE]))  			ELSE CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		END AS [DATE], 		bestex.[DATA_SOURCE] 	FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE bestex 	left join #vista_reason e  	on CONCAT(bestex.[TRADE_ID],'_607_',bestex.[DATA_SOURCE]) = e.[ID] 	left join #max_reason_cm ex  	on CONCAT(bestex.[TRADE_ID],'_607_',bestex.[DATA_SOURCE]) = ex.[ID] 	left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'FX' and [STATUS] in ('2C1', '2C2')) fsu 	on CONCAT(bestex.[TRADE_ID],'_607_',bestex.[DATA_SOURCE]) = fsu.[ID] 	left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, PRODUCT FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE) mast 	on bestex.[TRADE_ID] = mast.[TRANSACTION_NUMBER] 	left join (SELECT DISTINCT ORDER_ID, TRADE_ID, TRADE_DATE, INSTRUCTION_TYPE FROM VISTA_REPORTING.dbo.FX_TRADES) fxt  	on fxt.[TRADE_ID] = bestex.[TRADE_ID] AND bestex.[DATA_SOURCE] = 'FX' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[MULTI_FUND_ID] = bestex.[TRADE_ID] AND bestex.[DATA_SOURCE] = 'AL' 	left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc 	on oc.[TRD_ORD] = t.[ORD_NUM] 	WHERE bestex.[B3Q_EXCEPTION] = 1 and COALESCE(fxt.INSTRUCTION_TYPE,mast.PRODUCT) = 'SPOT' and (COALESCE(fxt.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date) 	GROUP BY fxt.[ORDER_ID], 			 oc.[PM_ORD], 			 bestex.[TRADE_ID], 			 mast.[DEALER_NAME], 			 bestex.[B3Q_EXCEPTION], 			 ex.[REASON], 			 CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE])), 			 CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])), 			 bestex.[DATA_SOURCE]  	UNION  	SELECT DISTINCT 		'607_QE_FWD' as [EXCEPTION_TYPE_ID], 		bestex.[TRADE_ID] as EXCEPTION_ID, 		CASE  			WHEN bestex.[DATA_SOURCE] = 'FX' THEN fxt.[ORDER_ID] 			WHEN bestex.[DATA_SOURCE] = 'AL' THEN oc.[PM_ORD] 		ELSE NULL 		END AS ORDER_ID, 		bestex.[TRADE_ID], 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN bestex.[B3Q_EXCEPTION] = 1 THEN COALESCE(ex.[REASON],'Unassigned Rationale') 		ELSE NULL 		END AS [1B_RATIONALE], 		MAX(CASE 				WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  			ELSE 0  			END) AS [CM_Reviewed], 		bestex.[B3Q_EXCEPTION] as [EXCEPTION_VALUE], 		CASE 			WHEN bestex.[DATA_SOURCE] = 'FX' THEN CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE]))  			ELSE CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		END AS [DATE], 		bestex.[DATA_SOURCE] 	FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE bestex 	left join #vista_reason e  	on CONCAT(bestex.[TRADE_ID],'_607_',bestex.[DATA_SOURCE]) = e.[ID] 	left join #max_reason_cm ex  	on CONCAT(bestex.[TRADE_ID],'_607_',bestex.[DATA_SOURCE]) = ex.[ID] 	left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'FX' and [STATUS] in ('2C1', '2C2')) fsu 	on CONCAT(bestex.[TRADE_ID],'_607_',bestex.[DATA_SOURCE]) = fsu.[ID] 	left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, PRODUCT FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE) mast 	on bestex.[TRADE_ID] = mast.[TRANSACTION_NUMBER] 	left join (SELECT DISTINCT ORDER_ID, TRADE_ID, TRADE_DATE, INSTRUCTION_TYPE FROM VISTA_REPORTING.dbo.FX_TRADES) fxt  	on fxt.[TRADE_ID] = bestex.[TRADE_ID] AND bestex.[DATA_SOURCE] = 'FX' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[MULTI_FUND_ID] = bestex.[TRADE_ID] AND bestex.[DATA_SOURCE] = 'AL' 	left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc 	on oc.[TRD_ORD] = t.[ORD_NUM] 	WHERE bestex.[B3Q_EXCEPTION] = 1 and (COALESCE(fxt.INSTRUCTION_TYPE,mast.PRODUCT) != 'SPOT' or COALESCE(fxt.INSTRUCTION_TYPE,mast.PRODUCT) is null) and (COALESCE(fxt.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date) 	GROUP BY fxt.[ORDER_ID], 			 oc.[PM_ORD], 			 bestex.[TRADE_ID], 			 mast.[DEALER_NAME], 			 bestex.[B3Q_EXCEPTION], 			 ex.[REASON], 			 CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE])), 			 CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])), 			 bestex.[DATA_SOURCE]  	UNION  	SELECT DISTINCT 		'607_NWQ_SPOT' as [EXCEPTION_TYPE_ID], 		bestex.[TRADE_ID] as EXCEPTION_ID, 		CASE  			WHEN bestex.[DATA_SOURCE] = 'FX' THEN fxt.[ORDER_ID] 			WHEN bestex.[DATA_SOURCE] = 'AL' THEN oc.[PM_ORD] 		ELSE NULL 		END AS ORDER_ID, 		bestex.[TRADE_ID], 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN bestex.[NWQ_EXCEPTION] = 1 THEN COALESCE(ex.[REASON],'Unassigned Rationale') 		ELSE NULL 		END AS [1B_RATIONALE], 		MAX(CASE 				WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  			ELSE 0  			END) AS [CM_Reviewed], 		bestex.[NWQ_EXCEPTION] as [EXCEPTION_VALUE], 		CASE 			WHEN bestex.[DATA_SOURCE] = 'FX' THEN CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE]))  			ELSE CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		END AS [DATE], 		bestex.[DATA_SOURCE] 	FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE bestex 	left join #vista_reason e  	on CONCAT(bestex.[TRADE_ID],'_607_',bestex.[DATA_SOURCE]) = e.[ID] 	left join #max_reason_cm ex  	on CONCAT(bestex.[TRADE_ID],'_607_',bestex.[DATA_SOURCE]) = ex.[ID] 	left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'FX' and [STATUS] in ('2C1', '2C2')) fsu 	on CONCAT(bestex.[TRADE_ID],'_607_',bestex.[DATA_SOURCE]) = fsu.[ID] 	left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, PRODUCT FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE) mast 	on bestex.[TRADE_ID] = mast.[TRANSACTION_NUMBER] 	left join (SELECT DISTINCT ORDER_ID, TRADE_ID, TRADE_DATE, INSTRUCTION_TYPE FROM VISTA_REPORTING.dbo.FX_TRADES) fxt  	on fxt.[TRADE_ID] = bestex.[TRADE_ID] AND bestex.[DATA_SOURCE] = 'FX' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[MULTI_FUND_ID] = bestex.[TRADE_ID] AND bestex.[DATA_SOURCE] = 'AL' 	left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc 	on oc.[TRD_ORD] = t.[ORD_NUM] 	WHERE bestex.[NWQ_EXCEPTION] = 1 and COALESCE(fxt.INSTRUCTION_TYPE,mast.PRODUCT) = 'SPOT' and (COALESCE(fxt.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date) 	GROUP BY fxt.[ORDER_ID], 			 oc.[PM_ORD], 			 bestex.[TRADE_ID], 			 mast.[DEALER_NAME], 			 bestex.[NWQ_EXCEPTION], 			 ex.[REASON], 			 CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE])), 			 CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])), 			 bestex.[DATA_SOURCE]  	UNION  	SELECT DISTINCT 		'607_NWQ_FWD' as [EXCEPTION_TYPE_ID], 		bestex.[TRADE_ID] as EXCEPTION_ID, 		CASE  			WHEN bestex.[DATA_SOURCE] = 'FX' THEN fxt.[ORDER_ID] 			WHEN bestex.[DATA_SOURCE] = 'AL' THEN oc.[PM_ORD] 		ELSE NULL 		END AS ORDER_ID, 		bestex.[TRADE_ID], 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN bestex.[NWQ_EXCEPTION] = 1 THEN COALESCE(ex.[REASON],'Unassigned Rationale') 		ELSE NULL 		END AS [1B_RATIONALE], 		MAX(CASE 				WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  			ELSE 0  			END) AS [CM_Reviewed], 		bestex.[NWQ_EXCEPTION] as [EXCEPTION_VALUE], 		CASE 			WHEN bestex.[DATA_SOURCE] = 'FX' THEN CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE]))  			ELSE CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		END AS [DATE], 		bestex.[DATA_SOURCE] 	FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE bestex 	left join #vista_reason e  	on CONCAT(bestex.[TRADE_ID],'_607_',bestex.[DATA_SOURCE]) = e.[ID] 	left join #max_reason_cm ex  	on CONCAT(bestex.[TRADE_ID],'_607_',bestex.[DATA_SOURCE]) = ex.[ID] 	left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'FX' and [STATUS] in ('2C1', '2C2')) fsu 	on CONCAT(bestex.[TRADE_ID],'_607_',bestex.[DATA_SOURCE]) = fsu.[ID] 	left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, PRODUCT FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE) mast 	on bestex.[TRADE_ID] = mast.[TRANSACTION_NUMBER] 	left join (SELECT DISTINCT ORDER_ID, TRADE_ID, TRADE_DATE, INSTRUCTION_TYPE FROM VISTA_REPORTING.dbo.FX_TRADES) fxt  	on fxt.[TRADE_ID] = bestex.[TRADE_ID] AND bestex.[DATA_SOURCE] = 'FX' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[MULTI_FUND_ID] = bestex.[TRADE_ID] AND bestex.[DATA_SOURCE] = 'AL' 	left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc 	on oc.[TRD_ORD] = t.[ORD_NUM] 	WHERE bestex.[NWQ_EXCEPTION] = 1  and (COALESCE(fxt.INSTRUCTION_TYPE,mast.PRODUCT) != 'SPOT' or COALESCE(fxt.INSTRUCTION_TYPE,mast.PRODUCT) is null) and (COALESCE(fxt.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date) 	GROUP BY fxt.[ORDER_ID], 			 oc.[PM_ORD], 			 bestex.[TRADE_ID], 			 mast.[DEALER_NAME], 			 bestex.[NWQ_EXCEPTION], 			 ex.[REASON], 			 CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE])), 			 CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])), 			 bestex.[DATA_SOURCE]  	----------------------------New Report Instructor to Dealer---------------------------------------------- --SURVG-563  	UNION  	SELECT DISTINCT 		'613' as [EXCEPTION_TYPE_ID], 		instdeal.[TRADE_ID] as EXCEPTION_ID, 		CASE  			WHEN instdeal.[SOURCE] = 'FX' THEN fxt.[ORDER_ID] 			WHEN instdeal.[SOURCE] = 'AL' THEN oc.[PM_ORD] 		ELSE NULL 		END AS ORDER_ID, 		instdeal.[TRADE_ID], 		mast.[DEALER_NAME] as DEALER, 		CASE  			WHEN instdeal.[VG_613] = 1 THEN COALESCE(ex.[REASON],'Unassigned Rationale') 		ELSE NULL 		END AS [1B_RATIONALE], 		MAX(CASE 				WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  			ELSE 0  			END) AS [CM_Reviewed], 		instdeal.[VG_613] as [EXCEPTION_VALUE], 		CASE 			WHEN instdeal.[SOURCE] = 'FX' THEN CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE]))  			ELSE CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		END AS [DATE], 		instdeal.[SOURCE] 	FROM VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE instdeal 	left join #vista_reason e  	on CONCAT(instdeal.[TRADE_ID],'_613_',instdeal.[SOURCE]) = e.[ID] 	left join #max_reason_cm ex  	on CONCAT(instdeal.[TRADE_ID],'_613_',instdeal.[SOURCE]) = ex.[ID] 	left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'FX' and [STATUS] in ('2C1', '2C2')) fsu 	on CONCAT(instdeal.[TRADE_ID],'_613_',instdeal.[SOURCE]) = fsu.[ID] 	left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, PRODUCT FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE) mast 	on instdeal.[TRADE_ID] = mast.[TRANSACTION_NUMBER] 	left join (SELECT DISTINCT ORDER_ID, TRADE_ID, TRADE_DATE, INSTRUCTION_TYPE FROM VISTA_REPORTING.dbo.FX_TRADES) fxt  	on fxt.[TRADE_ID] = instdeal.[TRADE_ID] AND instdeal.[SOURCE] = 'FX' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[MULTI_FUND_ID] = instdeal.[TRADE_ID] AND instdeal.[SOURCE] = 'AL' 	left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc 	on oc.[TRD_ORD] = t.[ORD_NUM] 	WHERE instdeal.[VG_613] = 1 and (COALESCE(fxt.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date) 	GROUP BY fxt.[ORDER_ID], 			 oc.[PM_ORD], 			 instdeal.[TRADE_ID], 			 mast.[DEALER_NAME], 			 instdeal.[VG_613], 			 ex.[REASON], 			 CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE])), 			 CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])), 			 instdeal.[SOURCE] 			  --end of SURVG-563 ------------------------------------------------------------------------------------------------------- 	--Last 3 report commented out due to request from Ryan Macgregor 28/05/2020 	--UNION  	--SELECT DISTINCT 	--	'501' as [EXCEPTION_TYPE_ID], 	--	srr.[TRADE_ID] as EXCEPTION_ID, 	--	CASE  	--		WHEN srr.[SOURCE] = 'FX' THEN fxt.[ORDER_ID] 	--		WHEN srr.[SOURCE] = 'AL' THEN oc.[PM_ORD] 	--	ELSE NULL 	--	END AS ORDER_ID, 	--	srr.[TRADE_ID], 	--	CASE  	--		WHEN srr.[SOURCE] = 'FX' THEN fxt.[DEALT_BY] 	--		WHEN srr.[SOURCE] = 'AL' THEN t.[TRD_TRADER] 	--	ELSE NULL 	--	END AS DEALER, 	--	CASE  	--		WHEN srr.[VG_501] = 1 THEN COALESCE(ex.[REASON],'Unassigned Rationale') 	--	ELSE NULL 	--	END AS [1B_RATIONALE], 	--	MAX(CASE 	--			WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  	--		ELSE 0  	--		END) AS [CM_Reviewed], 	--	srr.[VG_501] as [EXCEPTION_VALUE], 	--	CASE 	--		WHEN srr.[SOURCE] = 'FX' THEN CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE]))  	--		ELSE CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 	--	END AS [DATE], 	--	srr.[SOURCE] 	--FROM VISTA_STAGING.dbo.VG_501_SPOT_REFERENCE_RATE_FX_TABLE srr 	--left join #vista_reason e  	--on CONCAT(srr.[TRADE_ID],'_501_',srr.[SOURCE]) = e.[ID] 	--left join #max_reason_cm ex  	--on CONCAT(srr.[TRADE_ID],'_501_',srr.[SOURCE]) = ex.[ID] 	--left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'FX' and [STATUS] in ('2C1', '2C2')) fsu 	--on CONCAT(srr.[TRADE_ID],'_501_',srr.[SOURCE]) = fsu.[ID] 	--left join (SELECT DISTINCT ORDER_ID, TRADE_ID, DEALT_BY, TRADE_DATE FROM VISTA_REPORTING.dbo.FX_TRADES) fxt 	--on fxt.[TRADE_ID] = srr.[TRADE_ID] AND srr.[SOURCE] = 'FX' 	--left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES) t  	--on t.[MULTI_FUND_ID] = srr.[TRADE_ID] AND srr.[SOURCE] = 'AL' 	--left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc 	--on oc.[TRD_ORD] = t.[ORD_NUM] 	--WHERE srr.[VG_501] = 1 and COALESCE(fxt.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date 	--GROUP BY fxt.[ORDER_ID], 	--		 oc.[PM_ORD], 	--		 srr.[TRADE_ID], 	--		 fxt.[DEALT_BY], 	--		 t.[TRD_TRADER], 	--		 srr.[VG_501], 	--		 ex.[REASON], 	--		 CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE])), 	--		 CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])), 	--		 srr.[SOURCE]  	UNION  	SELECT DISTINCT 		'608' as [EXCEPTION_TYPE_ID], 		tkb.[FXM_ORDER_ID] as EXCEPTION_ID, 		tkb.[FXM_ORDER_ID], 		CASE 			WHEN tkb.[DATA_SOURCE] = 'FX' THEN fxt.[TRADE_ID] 			WHEN tkb.[DATA_SOURCE] = 'AL' THEN t.[MULTI_FUND_ID] 		ELSE NULL 		END AS TRANSACTION_NUMBER, 		CASE  			WHEN tkb.[DATA_SOURCE] = 'FX' THEN COALESCE(fxt.[DEALT_BY],fxo.[INSTRUCTED_BY]) 			WHEN tkb.[DATA_SOURCE] = 'AL' THEN COALESCE(t.[TRD_TRADER],pm.[TRADER],pm.[PM]) 		ELSE NULL 		END AS DEALER, 		CASE  			WHEN tkb.[VG_608] = 1 THEN COALESCE(ex.[REASON],'Unassigned Rationale') 		ELSE NULL 		END AS [1B_RATIONALE], 		MAX(CASE 				WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  			ELSE 0  			END) AS [CM_Reviewed], 		tkb.[VG_608] as [EXCEPTION_VALUE], 		CASE 			WHEN tkb.[DATA_SOURCE] = 'FX' THEN CONCAT(YEAR(fxo.[ORDER_TRADE_DATE]), ' - ', MONTH(fxo.[ORDER_TRADE_DATE]))  			ELSE CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])) 		END AS [DATE],		 		tkb.[DATA_SOURCE] 	FROM VISTA_STAGING.dbo.VG_608_TA_KNOCKBACK_FX_TABLE tkb 	left join #vista_reason e  	on CONCAT(tkb.[FXM_ORDER_ID],'_608_',tkb.[DATA_SOURCE]) = e.[ID] 	left join #max_reason_cm ex  	on CONCAT(tkb.[FXM_ORDER_ID],'_608_',tkb.[DATA_SOURCE]) = ex.[ID] 	left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'FX' and [STATUS] in ('2C1', '2C2')) fsu 	on CONCAT(tkb.[FXM_ORDER_ID],'_608_',tkb.[DATA_SOURCE]) = fsu.[ID] 	left join (SELECT DISTINCT ORDER_ID, TRADE_ID, DEALT_BY, TRADE_DATE FROM VISTA_REPORTING.dbo.FX_TRADES) fxt  	on fxt.[ORDER_ID] = tkb.[FXM_ORDER_ID] and tkb.[DATA_SOURCE] = 'FX' 	left join (SELECT DISTINCT FXM_ORDER_ID, ORDER_TRADE_DATE, INSTRUCTED_BY FROM VISTA_REPORTING.dbo.FX_ORDERS) fxo 	on fxo.[FXM_ORDER_ID] = tkb.[FXM_ORDER_ID] and tkb.[DATA_SOURCE] = 'FX' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[ORD_NUM] = tkb.[FXM_ORDER_ID] AND tkb.[DATA_SOURCE] = 'AL' 	left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc 	on oc.[TRD_ORD] = t.[ORD_NUM] 	left join (SELECT DISTINCT ORD_NUM, OPEN_DATE, TRADER, PM FROM VISTA_REPORTING.dbo.PM_ORDERS) pm 	on pm.[ORD_NUM] = tkb.[FXM_ORDER_ID] and tkb.[DATA_SOURCE] = 'AL' 	WHERE tkb.[VG_608] = 1 and COALESCE(fxo.[ORDER_TRADE_DATE],pm.[OPEN_DATE]) between @Start_Date and @End_Date 	GROUP BY tkb.[FXM_ORDER_ID], 			 fxt.[TRADE_ID], 			 t.[MULTI_FUND_ID], 			 fxt.[DEALT_BY], 			 fxo.[INSTRUCTED_BY], 			 t.[TRD_TRADER], 			 pm.[TRADER], 			 pm.[PM], 			 ex.[REASON], 			 tkb.[VG_608], 			 CONCAT(YEAR(fxo.[ORDER_TRADE_DATE]), ' - ', MONTH(fxo.[ORDER_TRADE_DATE])), 			 CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])), 			 tkb.[DATA_SOURCE]  	UNION  	SELECT DISTINCT 		'500' as [EXCEPTION_TYPE_ID], 		dl.[ORDER_ID] as EXCEPTION_ID, 		dl.[ORDER_ID] as ORDER_ID, 		CASE 			WHEN dl.[SOURCE] = 'FX' THEN fxt.[TRADE_ID] 			WHEN dl.[SOURCE] = 'AL' THEN t.[MULTI_FUND_ID] 		ELSE NULL 		END AS TRANSACTION_NUMBER, 		CASE  			WHEN dl.[SOURCE] = 'FX' THEN fxt.[DEALT_BY] 			WHEN dl.[SOURCE] = 'AL' THEN t.[TRD_TRADER] 		ELSE NULL 		END AS DEALER, 		CASE  			WHEN dl.[VG_500] = 1 THEN COALESCE(ex.[REASON],'Unassigned Rationale') 		ELSE NULL 		END AS [1B_RATIONALE], 		MAX(CASE 				WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  			ELSE 0  			END) AS [CM_Reviewed], 		dl.[VG_500] as [EXCEPTION_VALUE], 		CASE 			WHEN dl.[SOURCE] = 'FX' THEN CONCAT(YEAR(fxo.[ORDER_TRADE_DATE]), ' - ', MONTH(fxo.[ORDER_TRADE_DATE]))  			ELSE CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])) 		END AS [DATE],	 		dl.[SOURCE] 	FROM VISTA_STAGING.dbo.VG_500_DEALER_LIMIT_FX_TABLE dl 	left join #vista_reason e  	on CONCAT(dl.[ORDER_ID],'_500_',dl.[SOURCE]) = e.[ID] 	left join #max_reason_cm ex  	on CONCAT(dl.[ORDER_ID],'_500_',dl.[SOURCE]) = ex.[ID] 	left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'FX' and [STATUS] in ('2C1', '2C2')) fsu 	on CONCAT(dl.[ORDER_ID],'_500_',dl.[SOURCE]) = fsu.[ID] 	left join (SELECT DISTINCT ORDER_ID, TRADE_ID, DEALT_BY, TRADE_DATE FROM VISTA_REPORTING.dbo.FX_TRADES) fxt  	on fxt.[ORDER_ID] = dl.[ORDER_ID] and dl.[SOURCE] = 'FX' 	left join (SELECT DISTINCT FXM_ORDER_ID, ORDER_TRADE_DATE, INSTRUCTED_BY FROM VISTA_REPORTING.dbo.FX_ORDERS) fxo 	on fxo.[FXM_ORDER_ID] = dl.[ORDER_ID] and dl.[SOURCE] = 'FX' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[ORD_NUM] = dl.[ORDER_ID] and dl.[SOURCE] = 'AL' 	left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc 	on t.[ORD_NUM] = oc.[TRD_ORD] 	left join (SELECT DISTINCT ORD_NUM, OPEN_DATE, TRADER, PM FROM VISTA_REPORTING.dbo.PM_ORDERS) pm 	on pm.[ORD_NUM] = dl.[ORDER_ID] and dl.[SOURCE] = 'AL' 	WHERE dl.[VG_500] = 1 and COALESCE(fxo.[ORDER_TRADE_DATE],pm.[OPEN_DATE]) between @Start_Date and @End_Date 	GROUP BY dl.[ORDER_ID], 			 fxt.[TRADE_ID], 			 t.[MULTI_FUND_ID], 			 t.[TRD_TRADER], 			 fxt.[DEALT_BY], 			 ex.[REASON], 			 dl.[VG_500], 			 CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])), 			 CONCAT(YEAR(fxo.[ORDER_TRADE_DATE]), ' - ', MONTH(fxo.[ORDER_TRADE_DATE])), 			 dl.[SOURCE]  	UNION  	SELECT DISTINCT 		'604' as [EXCEPTION_TYPE_ID], 		coh.[ORDER_ID] as EXCEPTION_ID, 		coh.[ORDER_ID], 		CASE  			WHEN coh.[DATA_SOURCE] = 'FX' THEN fxt.[TRADE_ID] 			WHEN coh.[DATA_SOURCE] = 'AL' THEN t.[MULTI_FUND_ID] 		ELSE NULL 		END AS [TRANSACTION_NUMBER], 		CASE  			WHEN coh.[DATA_SOURCE] = 'FX' THEN COALESCE(fxt.[DEALT_BY],fxo.[INSTRUCTED_BY]) 			WHEN coh.[DATA_SOURCE] = 'AL' THEN COALESCE(t.[TRD_TRADER],pm.[TRADER],pm.[PM]) 		ELSE NULL 		END AS DEALER, 		CASE  			WHEN coh.[VG_604] = 1 THEN COALESCE(ex.[REASON],'Unassigned Rationale') 		ELSE NULL 		END AS [1B_RATIONALE], 		MAX(CASE 				WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  			ELSE 0  			END) AS [CM_Reviewed], 		coh.[VG_604] as [EXCEPTION_VALUE], 		CASE 			WHEN coh.[DATA_SOURCE] = 'FX' THEN CONCAT(YEAR(fxo.[ORDER_TRADE_DATE]), ' - ', MONTH(fxo.[ORDER_TRADE_DATE]))  			ELSE CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])) 		END AS [DATE], 		coh.[DATA_SOURCE] 	FROM VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_FX_TABLE coh 	left join #vista_reason e  	on CONCAT(coh.[ORDER_ID],'_604_',coh.[DATA_SOURCE]) = e.[ID]  	left join #max_reason_cm ex  	on CONCAT(coh.[ORDER_ID],'_604_',coh.[DATA_SOURCE]) = ex.[ID] 	left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'FX' and [STATUS] in ('2C1', '2C2')) fsu 	on CONCAT(coh.[ORDER_ID],'_604_',coh.[DATA_SOURCE]) = fsu.[ID] 	left join (SELECT DISTINCT ORDER_ID, TRADE_ID, DEALT_BY FROM VISTA_REPORTING.dbo.FX_TRADES) fxt  	on fxt.[ORDER_ID] = coh.[ORDER_ID] and coh.[DATA_SOURCE] = 'FX' 	left join (SELECT DISTINCT FXM_ORDER_ID, SEQUENCE_EXCEPTION_REASON, ORDER_TRADE_DATE, INSTRUCTED_BY FROM VISTA_REPORTING.dbo.FX_ORDERS) fxo 	on coh.[ORDER_ID] = fxo.[FXM_ORDER_ID] and coh.[DATA_SOURCE] = 'FX' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[ORD_NUM] = coh.[ORDER_ID] and coh.[DATA_SOURCE] = 'AL' 	left join (SELECT DISTINCT ORD_NUM, OPEN_DATE, TRADER, PM FROM VISTA_REPORTING.dbo.PM_ORDERS) pm 	on coh.[ORDER_ID] = pm.[ORD_NUM] and coh.[DATA_SOURCE] = 'AL' 	WHERE coh.[VG_604] = 1 and COALESCE(fxo.[ORDER_TRADE_DATE],pm.[OPEN_DATE]) between @Start_Date and @End_Date 	GROUP BY coh.[ORDER_ID], 			 fxt.[TRADE_ID], 			 t.[MULTI_FUND_ID], 			 fxt.[DEALT_BY], 			 fxo.[INSTRUCTED_BY], 			 t.[TRD_TRADER], 			 pm.[TRADER], 			 pm.[PM], 			 ex.[REASON], 			 coh.[VG_604], 			 CONCAT(YEAR(fxo.[ORDER_TRADE_DATE]), ' - ', MONTH(fxo.[ORDER_TRADE_DATE])), 			 CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])), 			 coh.[DATA_SOURCE]  	 	UNION  	SELECT DISTINCT 		'9' as [EXCEPTION_TYPE_ID], 		timex.[ORDER_ID] as EXCEPTION_ID, 		timex.[ORDER_ID], 		CASE  			WHEN timex.[SOURCE] = 'FX' THEN fxt.[TRADE_ID] 			WHEN timex.[SOURCE] = 'AL' THEN t.[MULTI_FUND_ID] 		ELSE NULL 		END AS [TRANSACTION_NUMBER], 		CASE  			WHEN timex.[SOURCE] = 'FX' THEN fxt.[DEALT_BY] 			WHEN timex.[SOURCE] = 'AL' THEN t.[TRD_TRADER] 		ELSE NULL 		END AS DEALER, 		CASE  			WHEN timex.[VG_09] = 1 THEN COALESCE(ex.[REASON],'Unassigned Rationale') 		ELSE NULL 		END AS [1B_RATIONALE], 		MAX(CASE 				WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  			ELSE 0  			END) AS [CM_Reviewed], 		timex.[VG_09] as [EXCEPTION_VALUE], 		CASE 			WHEN timex.[SOURCE] = 'FX' THEN CONCAT(YEAR(fxo.[ORDER_TRADE_DATE]), ' - ', MONTH(fxo.[ORDER_TRADE_DATE]))  			ELSE CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])) 		END AS [DATE], 		timex.[SOURCE] as [DATA_SOURCE] 	FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FX_TABLE timex 	left join #vista_reason e  	on CONCAT(timex.[ORDER_ID],'_9_',timex.[SOURCE]) = e.[ID] 	left join #max_reason_cm ex  	on CONCAT(timex.[ORDER_ID],'_9_',timex.[SOURCE]) = ex.[ID] 	left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'FX' and [STATUS] in ('2C1', '2C2')) fsu 	on CONCAT(timex.[ORDER_ID],'_9_',timex.[SOURCE]) = fsu.[ID] 	left join (SELECT DISTINCT ORDER_ID, TRADE_ID, DEALT_BY FROM VISTA_REPORTING.dbo.FX_TRADES) fxt  	on fxt.[ORDER_ID] = timex.[ORDER_ID] and timex.[SOURCE] = 'FX' 	left join (SELECT DISTINCT FXM_ORDER_ID, ORDER_TRADE_DATE FROM VISTA_REPORTING.dbo.FX_ORDERS) fxo 	on timex.[ORDER_ID] = fxo.[FXM_ORDER_ID] and timex.[SOURCE] = 'FX' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[ORD_NUM] = timex.[ORDER_ID] and timex.[SOURCE] = 'AL' 	left join (SELECT DISTINCT ORD_NUM, OPEN_DATE FROM VISTA_REPORTING.dbo.PM_ORDERS) pm 	on timex.[ORDER_ID] = pm.[ORD_NUM] and timex.[SOURCE] = 'AL' 	WHERE timex.[VG_09] = 1 and COALESCE(fxo.[ORDER_TRADE_DATE],pm.[OPEN_DATE]) between @Start_Date and @End_Date 	GROUP BY timex.[ORDER_ID], 			 fxt.[TRADE_ID], 			 t.[MULTI_FUND_ID], 			 fxt.[DEALT_BY], 			 t.[TRD_TRADER], 			 ex.[REASON], 			 timex.[VG_09], 			 CONCAT(YEAR(fxo.[ORDER_TRADE_DATE]), ' - ', MONTH(fxo.[ORDER_TRADE_DATE])), 			 CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])), 			 timex.[SOURCE]  	UNION  	SELECT DISTINCT 		'602' as [EXCEPTION_TYPE_ID], 		eod.[FXM_ORDER_ID] as EXCEPTION_ID, 		eod.[FXM_ORDER_ID] as ORDER_ID, 		CASE  			WHEN eod.[DATA_SOURCE] = 'FX' THEN fxt.[TRADE_ID] 			WHEN eod.[DATA_SOURCE] = 'AL' THEN t.[MULTI_FUND_ID] 		ELSE NULL 		END AS [TRADE_ID], 		CASE  			WHEN eod.[DATA_SOURCE] = 'FX' THEN COALESCE(fxt.[DEALT_BY],fxo.[INSTRUCTED_BY]) 			WHEN eod.[DATA_SOURCE] = 'AL' THEN COALESCE(t.[TRD_TRADER],pm.[TRADER],pm.[PM]) 		ELSE NULL 		END AS DEALER, 		CASE  			WHEN eod.[VG_602] = 1 THEN COALESCE(ex.[REASON],'Unassigned Rationale') 		ELSE NULL 		END AS [1B_RATIONALE], 		MAX(CASE 				WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  			ELSE 0  			END) AS [CM_Reviewed], 		eod.[VG_602] as [EXCEPTION_VALUE], 		CASE 			WHEN eod.[DATA_SOURCE] = 'FX' THEN CONCAT(YEAR(fxo.[ORDER_TRADE_DATE]), ' - ', MONTH(fxo.[ORDER_TRADE_DATE]))  			ELSE CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])) 		END AS [DATE], 		eod.[DATA_SOURCE] 	FROM VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_FX_TABLE eod 	left join #vista_reason e  	on CONCAT(eod.[FXM_ORDER_ID],'_602_',eod.[DATA_SOURCE]) = e.[ID] 	left join #max_reason_cm ex  	on CONCAT(eod.[FXM_ORDER_ID],'_602_',eod.[DATA_SOURCE]) = ex.[ID] 	left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'FX' and [STATUS] in ('2C1', '2C2')) fsu 	on CONCAT(eod.[FXM_ORDER_ID],'_602_',eod.[DATA_SOURCE]) = fsu.[ID] 	left join (SELECT DISTINCT ORDER_ID, TRADE_ID, DEALT_BY FROM VISTA_REPORTING.dbo.FX_TRADES) fxt  	on fxt.[ORDER_ID] = eod.[FXM_ORDER_ID] and eod.[DATA_SOURCE] = 'FX'  	left join (SELECT DISTINCT FXM_ORDER_ID, HOLDOVER_REASON, ORDER_TRADE_DATE, INSTRUCTED_BY FROM VISTA_REPORTING.dbo.FX_ORDERS) fxo 	on fxo.[FXM_ORDER_ID] = eod.[FXM_ORDER_ID] and eod.[DATA_SOURCE] = 'FX' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[ORD_NUM] = eod.[FXM_ORDER_ID] and eod.[DATA_SOURCE] = 'AL' 	left join (SELECT DISTINCT ORD_NUM, OPEN_DATE, TRADER, PM FROM VISTA_REPORTING.dbo.PM_ORDERS) pm 	on eod.[FXM_ORDER_ID] = pm.[ORD_NUM] and eod.[DATA_SOURCE] = 'AL' 	WHERE eod.[VG_602] = 1 and COALESCE(fxo.[ORDER_TRADE_DATE],pm.[OPEN_DATE]) between @Start_Date and @End_Date 	GROUP BY eod.[FXM_ORDER_ID], 			 fxt.[TRADE_ID], 			 t.[MULTI_FUND_ID], 			 fxt.[DEALT_BY], 			 fxo.[INSTRUCTED_BY], 			 t.[TRD_TRADER], 			 pm.[TRADER], 			 pm.[PM], 			 ex.[REASON], 			 eod.[VG_602], 			 CONCAT(YEAR(fxo.[ORDER_TRADE_DATE]), ' - ', MONTH(fxo.[ORDER_TRADE_DATE])), 			 CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])), 			 eod.[DATA_SOURCE]  	UNION  	SELECT DISTINCT 		'601' as [EXCEPTION_TYPE_ID], 		CONCAT(ISNULL(ooh.[ORDER_ID],0),'_',ISNULL(ooh.[TRADE_ID],0)) as EXCEPTION_ID, 		ooh.[ORDER_ID], 		ooh.[TRADE_ID] as TRANSACTION_NUMBER, 		CASE  			WHEN ooh.[SOURCE] = 'FX' THEN COALESCE(fxt.[DEALT_BY],fxt2.[DEALT_BY],fxo.[INSTRUCTED_BY]) 			WHEN ooh.[SOURCE] = 'AL' THEN COALESCE(t.[TRD_TRADER],t2.[TRD_TRADER],pm.[TRADER],pm.[PM]) 		ELSE NULL 		END AS DEALER, 		CASE  			WHEN ooh.[VG_601] = 1 THEN COALESCE(ex.[REASON],'Unassigned Rationale') 		ELSE NULL 		END AS [1B_RATIONALE], 		MAX(CASE 				WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  			ELSE 0  			END) AS [CM_Reviewed], 		ooh.[VG_601] as [EXCEPTION_VALUE], 		CASE 			WHEN ooh.[SOURCE] = 'FX' and ooh.[ORDER_ID] is not null THEN CONCAT(YEAR(fxo.[ORDER_TRADE_DATE]), ' - ', MONTH(fxo.[ORDER_TRADE_DATE]))  			WHEN ooh.[SOURCE] = 'FX' and ooh.[ORDER_ID] is null		THEN CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE]))  			WHEN ooh.[SOURCE] = 'AL' and ooh.[ORDER_ID] is not null THEN CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])) 			WHEN ooh.[SOURCE] = 'AL' and ooh.[ORDER_ID] is null		THEN CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		ELSE NULL 		END AS [DATE], 		ooh.[SOURCE] as [DATA_SOURCE] 	FROM VISTA_STAGING.dbo.VG_601_OUT_OF_HOURS_FX_TABLE ooh 	left join #vista_reason e  	on CONCAT(ISNULL(ooh.[ORDER_ID],0),'_',ISNULL(ooh.[TRADE_ID],0), '_601_',ooh.[SOURCE]) = e.[ID] 	left join #max_reason_cm ex  	on CONCAT(ISNULL(ooh.[ORDER_ID],0),'_',ISNULL(ooh.[TRADE_ID],0), '_601_',ooh.[SOURCE]) = ex.[ID] 	left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'FX' and [STATUS] in ('2C1', '2C2')) fsu 	on CONCAT(ISNULL(ooh.[ORDER_ID],0),'_',ISNULL(ooh.[TRADE_ID],0), '_601_',ooh.[SOURCE]) = fsu.[ID] 	left join (SELECT DISTINCT ORDER_ID, TRADE_ID, DEALT_BY, TRADE_DATE FROM VISTA_REPORTING.dbo.FX_TRADES) fxt  	on fxt.[TRADE_ID] = ooh.[TRADE_ID] and ooh.[SOURCE] = 'FX' 	left join (SELECT DISTINCT ORDER_ID, TRADE_ID, DEALT_BY, TRADE_DATE FROM VISTA_REPORTING.dbo.FX_TRADES) fxt2   	on fxt2.[ORDER_ID] = ooh.[ORDER_ID] and ooh.[SOURCE] = 'FX'  	left join (SELECT DISTINCT [FXM_ORDER_ID], HOLDOVER_REASON, ORDER_TRADE_DATE, INSTRUCTED_BY FROM VISTA_REPORTING.dbo.FX_ORDERS) fxo 	on fxo.[FXM_ORDER_ID] = ooh.[ORDER_ID] and ooh.[SOURCE] = 'FX' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES) t  	on t.[MULTI_FUND_ID] = ooh.[TRADE_ID] and ooh.[SOURCE] = 'AL' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES) t2 	on t2.[ORD_NUM] = ooh.[ORDER_ID] and ooh.[SOURCE] = 'AL' 	left join (SELECT DISTINCT ORD_NUM, OPEN_DATE, TRADER, PM FROM VISTA_REPORTING.dbo.PM_ORDERS) pm 	on ooh.[ORDER_ID] = pm.[ORD_NUM] and ooh.[SOURCE] = 'AL' 	WHERE ooh.[VG_601] = 1 and COALESCE(fxo.[ORDER_TRADE_DATE],pm.[OPEN_DATE],fxt.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date 	GROUP BY ooh.[ORDER_ID], 			 ooh.[TRADE_ID], 			 fxt.[DEALT_BY], 			 fxt2.[DEALT_BY], 			 fxo.[INSTRUCTED_BY], 			 t.[TRD_TRADER], 			 t2.[TRD_TRADER], 			 pm.[TRADER], 			 pm.[PM], 			 ex.[REASON], 			 ooh.[VG_601], 			 CONCAT(YEAR(fxo.[ORDER_TRADE_DATE]), ' - ', MONTH(fxo.[ORDER_TRADE_DATE])), 			 CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])), 			 CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE])),  			 CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])), 			 ooh.[SOURCE]  --	UNION  	--SELECT DISTINCT 	--	'603' as [EXCEPTION_TYPE_ID], 	--	lt.[ORDER_ID] as EXCEPTION_ID, 	--	lt.[ORDER_ID], 	--	CASE  	--		WHEN lt.[SOURCE] = 'FX' THEN fxt.[TRADE_ID] 	--		WHEN lt.[SOURCE] = 'AL' THEN t.[MULTI_FUND_ID] 	--	ELSE NULL 	--	END AS [TRADE_ID], 	--	CASE  	--		WHEN lt.[SOURCE] = 'FX' THEN COALESCE(fxt.[DEALT_BY],fxo.[INSTRUCTED_BY]) 	--		WHEN lt.[SOURCE] = 'AL' THEN COALESCE(t.[TRD_TRADER],pm.[TRADER],pm.[PM]) 	--	ELSE NULL 	--	END AS DEALER, 	--	CASE  	--		WHEN lt.[VG_603] = 1 THEN COALESCE(ex.[REASON],'Unassigned Rationale') 	--	ELSE NULL 	--	END AS [1B_RATIONALE], 	--	MAX(CASE 	--			WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  	--		ELSE 0  	--		END) AS [CM_Reviewed], 	--	lt.[VG_603] as [EXCEPTION_VALUE], 	--	CASE 	--		WHEN lt.[SOURCE] = 'FX' THEN CONCAT(YEAR(fxo.[ORDER_TRADE_DATE]), ' - ', MONTH(fxo.[ORDER_TRADE_DATE]))  	--		ELSE CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])) 	--	END AS [DATE], 	--	lt.[SOURCE] as [DATA_SOURCE] 	--FROM VISTA_STAGING.dbo.VG_603_LARGE_TRADES_FX_TABLE lt 	--left join #vista_reason e  	--on CONCAT(lt.[ORDER_ID],'_603_',lt.[SOURCE]) = e.[ID] 	--left join #max_reason_cm ex  	--on CONCAT(lt.[ORDER_ID],'_603_',lt.[SOURCE]) = ex.[ID] 	--left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'FX' and [STATUS] in ('2C1', '2C2')) fsu 	--on CONCAT(lt.[ORDER_ID],'_603_',lt.[SOURCE]) = fsu.[ID] 	--left join (SELECT DISTINCT ORDER_ID, TRADE_ID, DEALT_BY FROM VISTA_REPORTING.dbo.FX_TRADES) fxt  	--on fxt.[ORDER_ID] = lt.[ORDER_ID] and lt.[SOURCE] = 'FX'  	--left join (SELECT DISTINCT FXM_ORDER_ID, ORDER_TRADE_DATE, INSTRUCTED_BY FROM VISTA_REPORTING.dbo.FX_ORDERS) fxo 	--on fxo.[FXM_ORDER_ID] = lt.[ORDER_ID] and lt.[SOURCE] = 'FX' 	--left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES) t  	--on t.[ORD_NUM] = lt.[ORDER_ID] and lt.[SOURCE] = 'AL' 	--left join (SELECT DISTINCT ORD_NUM, OPEN_DATE, TRADER, PM FROM VISTA_REPORTING.dbo.PM_ORDERS) pm 	--on lt.[ORDER_ID] = pm.[ORD_NUM] and lt.[SOURCE] = 'AL' 	--WHERE lt.[VG_603] = 1 and COALESCE(fxo.[ORDER_TRADE_DATE],pm.[OPEN_DATE]) between @Start_Date and @End_Date 	--GROUP BY lt.[ORDER_ID], 	--		 fxt.[TRADE_ID], 	--		 t.[MULTI_FUND_ID], 	--		 fxt.[DEALT_BY], 	--		 fxo.[INSTRUCTED_BY], 	--		 t.[TRD_TRADER], 	--		 pm.[TRADER], 	--		 pm.[PM], 	--		 ex.[REASON], 	--		 lt.[VG_603], 	--		 CONCAT(YEAR(fxo.[ORDER_TRADE_DATE]), ' - ', MONTH(fxo.[ORDER_TRADE_DATE])), 	--		 CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])), 	--		 lt.[SOURCE]  	--UNION  	--SELECT DISTINCT 	--	'16' as [EXCEPTION_TYPE_ID], 	--	gh.[TRADE_ID] as EXCEPTION_ID, 	--	gh.[FXM_ORDER_ID] as ORDER_ID, 	--	gh.[TRADE_ID], 	--	CASE  	--		WHEN gh.[DATA_SOURCE] = 'FX' THEN fxt.[DEALT_BY] 	--		WHEN gh.[DATA_SOURCE] = 'AL' THEN t.[TRD_TRADER] 	--	ELSE NULL 	--	END AS DEALER, 	--	CASE  	--		WHEN gh.[VG_16] = 1 THEN COALESCE(ex.[REASON],'Unassigned Rationale') 	--	ELSE NULL 	--	END AS [1B_RATIONALE], 	--	MAX(CASE 	--			WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  	--		ELSE 0  	--		END) AS [CM_Reviewed], 	--	gh.[VG_16] as [EXCEPTION_VALUE], 	--	CASE 	--		WHEN gh.[DATA_SOURCE] = 'FX' THEN CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE]))  	--		ELSE CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 	--	END AS [DATE], 	--	gh.[DATA_SOURCE] 	--FROM VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE gh 	--left join #vista_reason e  	--on CONCAT(gh.[TRADE_ID],'_16_',gh.[DATA_SOURCE]) = e.[ID] 	--left join #max_reason_cm ex  	--on CONCAT(gh.[TRADE_ID],'_16_',gh.[DATA_SOURCE]) = ex.[ID] 	--left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'FX' and [STATUS] in ('2C1', '2C2')) fsu 	--on CONCAT(gh.[TRADE_ID],'_16_',gh.[DATA_SOURCE]) = fsu.[ID] 	--left join (SELECT DISTINCT ORDER_ID, TRADE_ID, DEALT_BY, TRADE_DATE FROM VISTA_REPORTING.dbo.FX_TRADES) fxt  	--on fxt.[TRADE_ID] = gh.[TRADE_ID] AND gh.[DATA_SOURCE] = 'FX' 	--left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES) t  	--on t.[MULTI_FUND_ID] = gh.[TRADE_ID] AND gh.[DATA_SOURCE] = 'AL' 	--WHERE gh.[VG_16] = 1 and COALESCE(fxt.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date 	--GROUP BY gh.[FXM_ORDER_ID], 	--		 gh.[TRADE_ID], 	--		 t.[TRD_TRADER], 	--		 fxt.[DEALT_BY], 	--		 gh.[VG_16], 	--		 ex.[REASON], 	--		 CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE])), 	--		 CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])), 	--		 gh.[DATA_SOURCE]  	--UNION  	--SELECT DISTINCT 	--	'17' as [EXCEPTION_TYPE_ID], 	--	cpt.[ORDER_ID] as EXCEPTION_ID, 	--	cpt.[ORDER_ID], 	--	CASE  	--		WHEN cpt.[DATA_SOURCE] = 'FX' THEN fxt.[TRADE_ID] 	--		WHEN cpt.[DATA_SOURCE] = 'AL' THEN t.[MULTI_FUND_ID] 	--	ELSE NULL 	--	END AS [TRADE_ID], 	--	CASE  	--		WHEN cpt.[DATA_SOURCE] = 'FX' THEN COALESCE(fxt.[DEALT_BY],fxo.[INSTRUCTED_BY]) 	--		WHEN cpt.[DATA_SOURCE] = 'AL' THEN COALESCE(t.[TRD_TRADER],pm.[TRADER],pm.[PM]) 	--	ELSE NULL 	--	END AS DEALER, 	--	CASE  	--		WHEN cpt.[VG_17] = 1 THEN COALESCE(ex.[REASON],'Unassigned Rationale') 	--	ELSE NULL 	--	END AS [1B_RATIONALE], 	--	MAX(CASE 	--			WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  	--		ELSE 0  	--		END) AS [CM_Reviewed], 	--	cpt.[VG_17] as [EXCEPTION_VALUE], 	--	CASE 	--		WHEN cpt.[DATA_SOURCE] = 'FX' THEN CONCAT(YEAR(fxo.[ORDER_TRADE_DATE]), ' - ', MONTH(fxo.[ORDER_TRADE_DATE]))  	--		ELSE CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])) 	--	END AS [DATE], 	--	cpt.[DATA_SOURCE] as [DATA_SOURCE] 	--FROM VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE cpt 	--left join #vista_reason e  	--on CONCAT(cpt.[ORDER_ID],'_17_',cpt.[DATA_SOURCE]) = e.[ID] 	--left join #max_reason_cm ex  	--on CONCAT(cpt.[ORDER_ID],'_17_',cpt.[DATA_SOURCE]) = ex.[ID] 	--left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'FX' and [STATUS] in ('2C1', '2C2')) fsu 	--on CONCAT(cpt.[ORDER_ID],'_17_',cpt.[DATA_SOURCE]) = fsu.[ID] 	--left join (SELECT DISTINCT ORDER_ID, TRADE_ID, DEALT_BY FROM VISTA_REPORTING.dbo.FX_TRADES) fxt  	--on fxt.[ORDER_ID] = cpt.[ORDER_ID] and cpt.[DATA_SOURCE] = 'FX'  	--left join (SELECT DISTINCT FXM_ORDER_ID, ORDER_TRADE_DATE, INSTRUCTED_BY FROM VISTA_REPORTING.dbo.FX_ORDERS) fxo 	--on fxo.[FXM_ORDER_ID] = cpt.[ORDER_ID] and cpt.[DATA_SOURCE] = 'FX' 	--left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES) t  	--on t.[ORD_NUM] = cpt.[ORDER_ID] and cpt.[DATA_SOURCE] = 'AL' 	--left join (SELECT DISTINCT ORD_NUM, OPEN_DATE, TRADER, PM FROM VISTA_REPORTING.dbo.PM_ORDERS) pm 	--on cpt.[ORDER_ID] = pm.[ORD_NUM] and cpt.[DATA_SOURCE] = 'AL' 	--WHERE cpt.[VG_17] = 1 and COALESCE(fxo.[ORDER_TRADE_DATE],pm.[OPEN_DATE]) between @Start_Date and @End_Date 	--GROUP BY cpt.[ORDER_ID], 	--		 fxt.[TRADE_ID], 	--		 t.[MULTI_FUND_ID], 	--		 fxt.[DEALT_BY], 	--		 fxo.[INSTRUCTED_BY], 	--		 t.[TRD_TRADER], 	--		 pm.[TRADER], 	--		 pm.[PM], 	--		 ex.[REASON], 	--		 cpt.[VG_17], 	--		 CONCAT(YEAR(fxo.[ORDER_TRADE_DATE]), ' - ', MONTH(fxo.[ORDER_TRADE_DATE])), 	--		 CONCAT(YEAR(pm.[OPEN_DATE]), ' - ', MONTH(pm.[OPEN_DATE])), 	--		 cpt.[DATA_SOURCE]  	UNION  	SELECT DISTINCT 		'611' as [EXCEPTION_TYPE_ID], 		CONCAT(oaf.ORDER_ID,'_611_',oaf.DATA_SOURCE) as EXCEPTION_ID, 		oaf.ORDER_ID, 		CASE  			WHEN oaf.DATA_SOURCE = 'FX' THEN fxt.TRADE_ID 			WHEN oaf.DATA_SOURCE = 'AL' THEN oc.TRD_ORD 		ELSE NULL 		END as TRANSACTION_NUMBER, 		CASE  			WHEN oaf.DATA_SOURCE = 'FX' THEN fxt.[DEALT_BY] 			WHEN oaf.DATA_SOURCE = 'AL' THEN t.[TRD_TRADER] 		ELSE NULL 		END AS DEALER, 		CASE  			WHEN oaf.[VG_611] = 1 THEN COALESCE(ex.[REASON],'Unassigned Rationale') 		ELSE NULL 		END AS [1B_RATIONALE], 		MAX(CASE 				WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  			ELSE 0  			END) AS [CM_Reviewed], 		oaf.[VG_611] as [EXCEPTION_VALUE], 		CASE 			WHEN oaf.[DATA_SOURCE] = 'FX' THEN CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE]))  			ELSE CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		END AS [DATE], 		oaf.[DATA_SOURCE] 	FROM VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_FX_TABLE oaf 	left join #vista_reason e  	on CONCAT(oaf.ORDER_ID,'_611_',oaf.DATA_SOURCE) = e.[ID] 	left join #max_reason_cm ex  	on CONCAT(oaf.ORDER_ID,'_611_',oaf.DATA_SOURCE) = ex.[ID] 	left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'FX' and [STATUS] in ('2C1', '2C2')) fsu 	on CONCAT(oaf.ORDER_ID,'_611_',oaf.DATA_SOURCE) = fsu.[ID] 	left join (SELECT DISTINCT ORDER_ID, TRADE_ID, DEALT_BY, TIMELY_RECORDING_REASON, TRADE_DATE FROM VISTA_REPORTING.dbo.FX_TRADES) fxt  	on fxt.ORDER_ID = oaf.ORDER_ID AND oaf.DATA_SOURCE = 'FX' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES) t  	on t.ORD_NUM = oaf.ORDER_ID AND oaf.DATA_SOURCE = 'AL' 	left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc 	on oc.[TRD_ORD] = t.[ORD_NUM] 	WHERE oaf.[VG_611] = 1 and COALESCE(fxt.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date 	GROUP BY fxt.[ORDER_ID], 			 oc.[PM_ORD], 			 t.[TRD_TRADER], 			 fxt.[DEALT_BY], 			 oaf.[VG_611], 			 ex.[REASON], 			 CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE])), 			 CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])), 			 oaf.DATA_SOURCE, 			 oaf.ORDER_ID, 			 fxt.TRADE_ID, 			 oc.TRD_ORD  	UNION  	SELECT DISTINCT 		'612' as [EXCEPTION_TYPE_ID], 		CONCAT(oaf.TRANSACTION_NUMBER, '_612_', oaf.DATA_SOURCE) as EXCEPTION_ID, 		CASE  			WHEN oaf.DATA_SOURCE = 'FX' THEN fxt.ORDER_ID 			WHEN oaf.DATA_SOURCE = 'AL' THEN oc.PM_ORD 		ELSE NULL 		END as ORDER_ID, 		oaf.TRANSACTION_NUMBER, 		CASE  			WHEN oaf.DATA_SOURCE = 'FX' THEN fxt.[DEALT_BY] 			WHEN oaf.DATA_SOURCE = 'AL' THEN t.[TRD_TRADER] 		ELSE NULL 		END AS DEALER, 		CASE  			WHEN oaf.[VG_612] = 1 THEN COALESCE(ex.[REASON],'Unassigned Rationale') 		ELSE NULL 		END AS [1B_RATIONALE], 		MAX(CASE 				WHEN ISNULL(ex.[REASON],'') <> 'Not sampled for testing' and fsu.[STATUS] is not null THEN 1  			ELSE 0  			END) AS [CM_Reviewed], 		oaf.[VG_612] as [EXCEPTION_VALUE], 		CASE 			WHEN oaf.[DATA_SOURCE] = 'FX' THEN CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE]))  			ELSE CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])) 		END AS [DATE], 		oaf.[DATA_SOURCE] 	FROM VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_FX_TABLE oaf 	left join #vista_reason e  	on CONCAT(oaf.TRANSACTION_NUMBER,'_612_',oaf.DATA_SOURCE) = e.[ID] 	left join #max_reason_cm ex  	on CONCAT(oaf.TRANSACTION_NUMBER,'_612_',oaf.DATA_SOURCE) = ex.[ID] 	left join (SELECT DISTINCT ID, [STATUS] FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE WHERE DEALING_DESK = 'FX' and [STATUS] in ('2C1', '2C2')) fsu 	on CONCAT(oaf.TRANSACTION_NUMBER,'_612_',oaf.DATA_SOURCE) = fsu.[ID] 	left join (SELECT DISTINCT ORDER_ID, TRADE_ID, DEALT_BY, TIMELY_RECORDING_REASON, TRADE_DATE FROM VISTA_REPORTING.dbo.FX_TRADES) fxt  	on fxt.TRADE_ID = oaf.TRANSACTION_NUMBER AND oaf.DATA_SOURCE = 'FX' 	left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, TRD_TRADER, TRD_TRADE_DATE FROM VISTA_REPORTING.dbo.TRADES) t  	on t.MULTI_FUND_ID = oaf.TRANSACTION_NUMBER AND oaf.DATA_SOURCE = 'AL' 	left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc 	on oc.[TRD_ORD] = t.[ORD_NUM] 	WHERE oaf.[VG_612] = 1 and COALESCE(fxt.[TRADE_DATE],t.[TRD_TRADE_DATE]) between @Start_Date and @End_Date 	GROUP BY fxt.[ORDER_ID], 			 oc.[PM_ORD], 			 t.[TRD_TRADER], 			 fxt.[DEALT_BY], 			 oaf.[VG_612], 			 ex.[REASON], 			 CONCAT(YEAR(fxt.[TRADE_DATE]), ' - ', MONTH(fxt.[TRADE_DATE])), 			 CONCAT(YEAR(t.[TRD_TRADE_DATE]), ' - ', MONTH(t.[TRD_TRADE_DATE])), 			 oaf.DATA_SOURCE, 			 fxt.ORDER_ID, 			 oc.PM_ORD, 			 oaf.TRANSACTION_NUMBER  	 ) temp_exception_b   IF OBJECT_ID('tempdb..#temp_exception_final_b', 'U') IS NOT NULL DROP TABLE #temp_exception_final_b SELECT DISTINCT 	ex.[EXCEPTION_ID], 	ex.[ORDER_ID], 	ex.[TRANSACTION_NUMBER], 	CASE 		WHEN ex.[DATA_SOURCE] = 'AL' THEN 			CASE  				WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP' 				WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG' 				WHEN (pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM' 			ELSE NULL 			END 		WHEN ex.[DATA_SOURCE] = 'FX' THEN fxo.[BUSINESS_GROUP] 	ELSE NULL 	END AS [BUSINESS_GROUP], 	COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],ex.[DEALER]) as DEALER_NAME, 	CASE  		WHEN ex.[EXCEPTION_VALUE] = 1 and ex.[1B_RATIONALE] = '' THEN 'Unassigned Rationale' 	ELSE ex.[1B_RATIONALE] 	END AS [1B_RATIONALE], 	ex.[CM_Reviewed], 	ex.[EXCEPTION_VALUE], 	CASE 		WHEN ex.[EXCEPTION_TYPE_ID] = '9'			 THEN 'Timely Execution' 		WHEN ex.[EXCEPTION_TYPE_ID] = '10'			 THEN 'Timely Recording' 		WHEN ex.[EXCEPTION_TYPE_ID] = '500'			 THEN 'Dealer Limit' 	--	WHEN ex.[EXCEPTION_TYPE_ID] = '501'			 THEN 'Spot Reference Rate' 		WHEN ex.[EXCEPTION_TYPE_ID] = '601'			 THEN 'Out of Hours' 		WHEN ex.[EXCEPTION_TYPE_ID] = '602'			 THEN 'EOD Holdovers' 		WHEN ex.[EXCEPTION_TYPE_ID] = '603'			 THEN 'Large Trades' 		WHEN ex.[EXCEPTION_TYPE_ID] = '604'			 THEN 'Client Order Handling' 		WHEN ex.[EXCEPTION_TYPE_ID] = '607_QE_SPOT'	 THEN 'Best Execution B3Q Spot' 		WHEN ex.[EXCEPTION_TYPE_ID] = '607_QE_FWD'	 THEN 'Best Execution B3Q Forward' 		WHEN ex.[EXCEPTION_TYPE_ID] = '607_NWQ_SPOT' THEN 'Best Execution NWQ Spot' 		WHEN ex.[EXCEPTION_TYPE_ID] = '607_NWQ_FWD'	 THEN 'Best Execution NWQ Forward' 		--SURVG-563 		WHEN ex.[EXCEPTION_TYPE_ID] = '613'	 THEN 'Instructor to Dealer' 		--End of SURVG-563 		WHEN ex.[EXCEPTION_TYPE_ID] = '608'			 THEN 'Order Request Return' 		WHEN ex.[EXCEPTION_TYPE_ID] = '16'			 THEN 'Gifts & Hospitality' 		WHEN ex.[EXCEPTION_TYPE_ID] = '17'			 THEN 'Counterparty Direction' 		WHEN ex.[EXCEPTION_TYPE_ID] = '611'			 THEN 'Order Aggregation' 		WHEN ex.[EXCEPTION_TYPE_ID] = '612'			 THEN 'Order Allocation' 	END AS [EXCEPTION], 	ex.[EXCEPTION_TYPE_ID], 	ex.[DATE], 	@REPORT_NAME as REPORT_NAME, 	GETDATE() as REPORT_DATE, 	ex.[DATA_SOURCE] INTO #temp_exception_final_b FROM #temp_exception_table_b ex left join (SELECT DISTINCT TRADE_ID, EXECUTED_DATE_TIME, TRADE_DATE, PULL_DATE FROM VISTA_REPORTING.dbo.FX_TRADES) fxt on ex.[TRANSACTION_NUMBER] = fxt.[TRADE_ID] and ex.[TRANSACTION_NUMBER] is not null and ex.[DATA_SOURCE] = 'FX' left join (SELECT DISTINCT FXM_ORDER_ID, INSTRUCTED_BY, BUSINESS_GROUP, PULL_DATE FROM VISTA_REPORTING.dbo.FX_ORDERS) fxo on ex.[ORDER_ID] = fxo.[FXM_ORDER_ID] and ex.[ORDER_ID] is not null and ex.[DATA_SOURCE] = 'FX' left join (SELECT DISTINCT MULTI_FUND_ID, FUND, EXECUTION_TIME, TRD_COUNTERPARTY, TRD_EX_BROKER_CODE, TRD_PRICE, TRD_ENTRY_TIME, TRD_ORIG_FACE, TRD_TRADE_DATE, TRD_SETTLE_DATE, PULL_DATE FROM VISTA_REPORTING.dbo.TRADES) t on ex.[TRANSACTION_NUMBER] = t.[MULTI_FUND_ID] and ex.[TRANSACTION_NUMBER] is not null and ex.[DATA_SOURCE] = 'AL' left join (SELECT DISTINCT FUND_ID, PORTFOLIO_GROUP_NAME FROM VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY) pgt on t.[FUND] = pgt.[FUND_ID] left join (SELECT DISTINCT MULTI_FUND_ID, INST_TYPE FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr on t.[MULTI_FUND_ID] = pr.[MULTI_FUND_ID] left join (SELECT DISTINCT ORD_NUM, AUTH_TIME, CURRENCY, FACE, PULL_DATE FROM VISTA_REPORTING.dbo.PM_ORDERS) pm on ex.[ORDER_ID] = pm.[ORD_NUM] and ex.[ORDER_ID] is not null and ex.[DATA_SOURCE] = 'AL' left join VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd  on (tdd.[INITIALS] = ex.[DEALER] and ex.[DATA_SOURCE] = 'AL' AND CAST(COALESCE(t.[PULL_DATE],pm.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)) left join VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd2 on (tdd2.[MG_USER_ID] = ex.[DEALER] and ex.[DATA_SOURCE] = 'FX' AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE))   IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FX_AGGREGATOR_1B_DATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.DMC_FX_AGGREGATOR_1B_DATA 	FROM #temp_exception_final_b ELSE 	INSERT INTO VISTA_REPORTING.dbo.DMC_FX_AGGREGATOR_1B_DATA 	SELECT * 	FROM #temp_exception_final_b   IF EXISTS (SELECT name FROM sys.indexes               WHERE name = N'DMC_FX_AGG_1B_DATA')        DROP INDEX DMC_FX_AGG_1B_DATA  	ON VISTA_REPORTING.dbo.DMC_FX_AGGREGATOR_1B_DATA   CREATE NONCLUSTERED INDEX DMC_FX_AGG_1B_DATA 	ON VISTA_REPORTING.dbo.DMC_FX_AGGREGATOR_1B_DATA (TRANSACTION_NUMBER, ORDER_ID, EXCEPTION_TYPE_ID) 	INCLUDE (REPORT_NAME)  END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: EXCEPTIONS_AGG_MASTER_EQ_FI_LL CreateDate: 2019-10-18 08:39:51.233 ModifyDate: 2020-02-05 14:39:06.157 --- DEFINITION START --- -- ============================================= -- Author:		<da Costa, David> -- Create date: <10/07/2019> -- Description:	<Stored procedure to calculate all the exceptions  -- across EQ, FI and LL desks, create respective MASTER tables  -- for frontend and generate additional compliance tables> -- ============================================= CREATE PROCEDURE [dbo].[EXCEPTIONS_AGG_MASTER_EQ_FI_LL]  AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;  	--AGGREGATE TABLES 	EXEC VISTA_STAGING.dbo.MULTI_FUND_EXCEPTION 	EXEC VISTA_STAGING.dbo.TRD_ORDER_LEVEL_EXCEPTION_TABLE 	EXEC VISTA_STAGING.dbo.ORDER_LEVEL_EXCEPTION  	--MASTER TABLES 	EXEC VISTA_STAGING.dbo.MASTER_MULTI_FUND_ID_TABLE 	EXEC VISTA_STAGING.dbo.MASTER_TRD_ORDER_TABLE 	EXEC VISTA_STAGING.dbo.MASTER_ORDER_PRIORITY_TABLE 	EXEC VISTA_STAGING.dbo.MASTER_AMENDMENT_FLAG_TABLE 	EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE 	EXEC VISTA_STAGING.dbo.MASTER_CLIENT_EXECUTION_TABLE 	EXEC VISTA_STAGING.DBO.MASTER_INV_DESK  	-- COMISSION INCREASE 	EXEC VISTA_STAGING.dbo.COMMISSIONS_INCREASE_EQ  	--IMPLEMENTATION SHORTFALL 	EXEC VISTA_STAGING.DBO.IMPLEMENTATION_SHORTFALL_EQ  END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: EXCEPTIONS_EXEC_SUMMARY_AND_CONVERSION CreateDate: 2019-10-18 08:39:51.290 ModifyDate: 2021-01-27 21:24:52.437 --- DEFINITION START --- -- ============================================= -- Author:		<da Costa, David> -- Create date: <10/07/2019> -- Description:	<Stored procedure to calculate all the exceptions  -- across FX desk and create respective MASTER tables  -- for frontend> -- =============================================  CREATE PROCEDURE [dbo].[EXCEPTIONS_EXEC_SUMMARY_AND_CONVERSION]  AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;  	--DATETIME CONVERSION 	EXEC VISTA_STAGING.dbo.DATETIME_CONVERSION_PROCEDURE  	--MASTER EXCEPTION COUNT 	EXEC VISTA_REPORTING.dbo.MASTER_EXCEPTION_COUNT  	--MASTER EXEC SUMMARY 	EXEC VISTA_REPORTING.dbo.MASTER_EXECUTIVE_SUMMARY  	--OPERATIONAL EFFICIENCY 	EXEC Vista_Staging.dbo.OPERATIONAL_EFFICIENCY_REFRESH  	--WORKFLOW EXEPTION SUMMARY 	EXEC VISTA_REPORTING.dbo.WORKFLOW_EXCEPTION_SUMMARY  	--CREATE INDEXES 	IF EXISTS (SELECT name FROM sys.indexes               WHERE name = N'fsu_idx1')        DROP INDEX fsu_idx1  	ON VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE   	CREATE NONCLUSTERED INDEX fsu_idx1 	ON VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE  	(ID, DEALING_DESK)  	IF EXISTS (SELECT name FROM sys.indexes               WHERE name = N'ert_idx1')        DROP INDEX ert_idx1  	ON VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE   	CREATE NONCLUSTERED INDEX ert_idx1 	ON VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE  	(ID)  	--REBUILD MASTER INDEXES 	EXEC Vista_Reporting.dbo.REBUILD_MASTER_INDEXES  END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: EXCEPTIONS_MASTER_CASH CreateDate: 2019-10-18 08:39:51.347 ModifyDate: 2022-03-04 16:55:01.223 --- DEFINITION START --- -- ============================================= -- Author:		<da Costa, David> -- Create date: <10/07/2019> -- Description:	<Stored procedure to calculate all the exceptions  -- across CASH desk and create respective MASTER tables  -- for frontend>  -- ***************VERSION CONTROL*************** --2022-01-27, Matej Miter; Created for Jira: --SURVG-563 - New Cash Report Instructor to dealer 2022  -- ============================================= CREATE PROCEDURE [dbo].[EXCEPTIONS_MASTER_CASH]  AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;  	--CASH 	EXEC VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH 	EXEC VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_CASH 	EXEC VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_CASH 	EXEC VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_CASH 	EXEC VISTA_STAGING.dbo.VG_601_OUT_OF_HOURS_CASH 	EXEC VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_CASH 	EXEC VISTA_STAGING.dbo.VG_603_LARGE_TRADES_CASH 	EXEC VISTA_STAGING.dbo.VG_603T_LARGE_TRADES_CASH --Used to calculate trade level exceptions for MI purposes in the aggregator (does not have a workflow) 	EXEC VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH 	EXEC VISTA_STAGING.dbo.VG_608_TA_KNOCKBACK_CASH 	EXEC VISTA_STAGING.dbo.VG_609_DEPOSITS_REFERENCE_RATE_CASH 	EXEC VISTA_STAGING.dbo.VG_610_TBILLS_CP_CD_CASH 	EXEC VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH 	EXEC VISTA_STAGING.dbo.VG_19_PT_TBILLS_CP_CD_CASH 	EXEC VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH 	EXEC VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH 	--SURVG-563 	EXEC VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH 	--End of SURVG-563  	--MASTER TABLES CASH 	EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_10_TIMELY_RECORDING_CASH 	EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_16_GIFTS_AND_HOSPITALITY_CASH 	EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_607_BEST_EXECUTION_CASH 	EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_608_TA_KNOCKBACK_CASH 	EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_609_DEPOSITS_REFERENCE_RATE_CASH 	EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_610_TBILLS_CP_CD_CASH 	EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_09_TIMELY_EXECUTION_CASH 	EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_17_COUNTERPARTY_DIRECTION_CASH 	EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_601_OUT_OF_HOURS_CASH 	EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_602_EOD_HOLDOVERS_CASH 	EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_603_LARGE_TRADES_CASH 	EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_604_CLIENT_ORDER_HANDLING_CASH 	EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_611_ORDER_AGGREGATION_CASH 	EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_612_ORDER_ALLOCATION_CASH 	--SURVG-563 	EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_613_INSTRUCTOR_TO_DEALER_CASH 	--End of SURVG-563   END     --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: EXCEPTIONS_MASTER_COMPLIANCE CreateDate: 2019-10-18 08:39:51.383 ModifyDate: 2020-04-16 17:08:52.257 --- DEFINITION START --- -- ============================================= -- Author:		<da Costa, David> -- Create date: <10/07/2019> -- Description:	<Stored procedure to calculate all the exceptions  -- across EQ, FI and LL desks, create respective MASTER tables  -- for frontend and generate additional compliance tables> -- ============================================= CREATE PROCEDURE [dbo].[EXCEPTIONS_MASTER_COMPLIANCE]  AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;  	--DEALER RISK 	EXEC VISTA_STAGING.dbo.DEALER_RISK  	--FUTURE_VWAP 	EXEC VISTA_STAGING.dbo.FUTURES_VWAP_EQ  	--COUTERPARTY HIT RATE TABLES 	EXEC VISTA_STAGING.dbo.LZ_DATA_SOURCE_TABLE 	EXEC VISTA_STAGING.dbo.THINKFOLIO_DATA_SOURCE_TABLE  	--LLDOM MI stored procedures 	EXEC VISTA_STAGING.dbo.[LLDOM_DEALING_ACTIVITY_SUMMARY]  	--COUNTERPARTY HIT RATE 	EXEC VISTA_STAGING.[dbo].[COUNTERPARTY_HIT_RATE]   	--FAIR ALLOCATION 	EXEC VISTA_STAGING.dbo.FAIR_ALLOCATION  	--COUNTERPARTY_DIRECTION 	EXEC VISTA_REPORTING.dbo.COUNTERPARTY_DIRECTION_REFERENCE 	EXEC VISTA_REPORTING.dbo.MASTER_COUNTERPARTY_DIRECTION_TABLE_FI 	EXEC VISTA_REPORTING.dbo.MASTER_COUNTERPARTY_DIRECTION_TABLE_EQ 	EXEC VISTA_STAGING.dbo.COUNTERPARTY_DIRECTION_TABLE_EQ 	EXEC VISTA_STAGING.dbo.COUNTERPARTY_DIRECTION_TABLE_FI_PROC   	--PRICE BENCHMARK 	EXEC VISTA_STAGING.dbo.REUTERS_PRICE_BENCHMARK 	EXEC VISTA_STAGING.dbo.PRICE_BENCHMARK_TABLE  	--GIFTS AND HOSPITALITY 	EXEC VISTA_STAGING.dbo.GIFTS_AND_HOSPITALITY_EQ 	EXEC VISTA_STAGING.dbo.GIFTS_AND_HOSPITALITY_EQ_PROC 	EXEC VISTA_STAGING.dbo.GIFTS_AND_HOSPITALITY_FI 	EXEC VISTA_STAGING.dbo.GIFTS_AND_HOSPITALITY_FI_PROC  	--Refresh Compliance tables 	EXEC VISTA_REPORTING.dbo.COMPLIANCE_TABLES_REFRESH_EQ 		  END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: EXCEPTIONS_MASTER_DMG CreateDate: 2019-10-18 08:39:51.430 ModifyDate: 2019-10-18 08:39:51.430 --- DEFINITION START --- -- ============================================= -- Author:		<da Costa, David> -- Create date: <10/07/2019> -- Description:	<Stored procedure to calculate all the exceptions  -- across DMG desk, create respective MASTER tables  -- for frontend and generate additional compliance tables> -- ============================================= CREATE PROCEDURE [dbo].[EXCEPTIONS_MASTER_DMG]  AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;  	--DMG 	EXEC VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_DMG 	EXEC VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_DMG 	EXEC VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_DMG 	EXEC VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_DMG 	EXEC VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_DMG 	EXEC VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_DMG 	EXEC VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_DMG 	EXEC VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_DMG 	EXEC VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_DMG 	EXEC VISTA_STAGING.dbo.VG_41_TRADES_WITHOUT_ORDERS_DMG 	EXEC VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_DMG 	EXEC VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_DMG  	--MASTER TABLES DMG 	EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_01_QUOTE_EXCEPTION_DMG 	EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_07_NON_WINNING_QUOTE_DMG 	EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_10_TIMELY_RECORDING_DMG 	EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_16_GIFTS_AND_HOSPITALITY_DMG 	EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_25_INTERFUND_TRANSFER_DMG 	EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_41_TRADES_WITHOUT_ORDERS_DMG 	EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_09_TIMELY_EXECUTION_DMG 	EXEC VISTA_STAGING.dbo.MASTER_TRD_ORDER_VG_13_ORDER_AGGREGATION_DMG 	EXEC VISTA_STAGING.dbo.MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG 	EXEC VISTA_STAGING.dbo.MASTER_VG_15_AMENDMENT_FLAG_TABLE_DMG 	EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_17_COUNTERPARTY_DIRECTION_DMG   END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: EXCEPTIONS_MASTER_EQ_FI_LL CreateDate: 2019-10-18 08:39:51.467 ModifyDate: 2020-02-04 11:20:29.630 --- DEFINITION START --- -- ============================================= -- Author:		<da Costa, David> -- Create date: <10/07/2019> -- Description:	<Stored procedure to calculate all the exceptions  -- across EQ, FI and LL desks, create respective MASTER tables  -- for frontend and generate additional compliance tables> -- ============================================= CREATE PROCEDURE [dbo].[EXCEPTIONS_MASTER_EQ_FI_LL]  AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;  	--EQUITIES 	EXEC VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_EQ 	EXEC VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_EQ 	EXEC VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_EQ 	EXEC VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_EQ 	EXEC VISTA_STAGING.dbo.VG_10_NAV_CUT_OFF_EQ 	EXEC VISTA_STAGING.dbo.VG_11_TIMELY_RELEASE_EQ 	EXEC VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_EQ 	EXEC VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EQ 	EXEC VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_EQ 	EXEC VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_EQ 	EXEC VISTA_STAGING.dbo.VG_40_EXTENDED_SETTLEMENT_EXCEPTION 	EXEC VISTA_STAGING.[dbo].[VG_COMMISSION_EXCEPTION_EQ] 	EXEC VISTA_STAGING.[dbo].[VG_IMPLEMENTATION_SHORTFALL_EXCEPTION_EQ] 	EXEC VISTA_STAGING.[dbo].[VG_MARKET_HIGH_LOW_EXCEPTION_EQ]  	--FIXED INCOME 	EXEC VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI 	EXEC VISTA_STAGING.[dbo].[VG_06_NEW_ISSUE_ORDER_FLIPPING_FI]  	EXEC VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_FI 	EXEC VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_FI 	EXEC VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI 	EXEC VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FI 	EXEC VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_FI 	EXEC VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_FI 	EXEC VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_FI 	EXEC VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_FI  	--LEVERAGED LOANS 	EXEC VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_LL 	EXEC VISTA_STAGING.[dbo].[VG_06_NEW_ISSUE_ORDER_FLIPPING_LL]  	EXEC VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_LL 	EXEC VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_LL 	EXEC VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_LL 	EXEC VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_LL 	EXEC VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_LL 	EXEC VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_LL 	EXEC VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_LL 	EXEC VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_LL  	--AGGREGATE TABLES 	EXEC VISTA_STAGING.dbo.MULTI_FUND_EXCEPTION 	EXEC VISTA_STAGING.dbo.TRD_ORDER_LEVEL_EXCEPTION_TABLE 	EXEC VISTA_STAGING.dbo.ORDER_LEVEL_EXCEPTION  	--MASTER TABLES 	EXEC VISTA_STAGING.dbo.MASTER_MULTI_FUND_ID_TABLE 	EXEC VISTA_STAGING.dbo.MASTER_TRD_ORDER_TABLE 	EXEC VISTA_STAGING.dbo.MASTER_ORDER_PRIORITY_TABLE 	EXEC VISTA_STAGING.dbo.MASTER_AMENDMENT_FLAG_TABLE 	EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE 	EXEC VISTA_STAGING.dbo.MASTER_CLIENT_EXECUTION_TABLE 	EXEC VISTA_STAGING.DBO.MASTER_INV_DESK  	--DEALER RISK 	EXEC VISTA_STAGING.dbo.DEALER_RISK  	--COUTERPARTY HIT RATE TABLES 	EXEC VISTA_STAGING.dbo.LZ_DATA_SOURCE_TABLE 	EXEC VISTA_STAGING.dbo.THINKFOLIO_DATA_SOURCE_TABLE  	--LLDOM MI stored procedures 	EXEC VISTA_STAGING.dbo.[LLDOM_DEALING_ACTIVITY_SUMMARY]  	--REUTERS PRICE BENCHMARKING 	EXEC VISTA_STAGING.dbo.REUTERS_PRICE_BENCHMARK  	--COUNTERPARTY HIT RATE 	EXEC VISTA_STAGING.[dbo].[COUNTERPARTY_HIT_RATE]   	--FAIR ALLOCATION 	EXEC VISTA_STAGING.dbo.FAIR_ALLOCATION  	--COMMISSIONS INCREASE 	EXEC VISTA_STAGING.dbo.COMMISSIONS_INCREASE_EQ  	--COUNTERPARTY_DIRECTION 	EXEC VISTA_STAGING.dbo.COUNTERPARTY_DIRECTION_TABLE_EQ 	EXEC VISTA_STAGING.dbo.COUNTERPARTY_DIRECTION_TABLE_FI_PROC  	EXEC VISTA_REPORTING.dbo.COUNTERPARTY_DIRECTION_REFERENCE 	EXEC VISTA_REPORTING.dbo.MASTER_COUNTERPARTY_DIRECTION_TABLE_FI 	EXEC VISTA_REPORTING.dbo.MASTER_COUNTERPARTY_DIRECTION_TABLE_EQ  	--PRICE BENCHMARK 	EXEC VISTA_STAGING.dbo.REUTERS_PRICE_BENCHMARK 	EXEC VISTA_STAGING.dbo.PRICE_BENCHMARK_TABLE  	--GIFTS AND HOSPITALITY 	EXEC VISTA_STAGING.dbo.GIFTS_AND_HOSPITALITY_EQ 	EXEC VISTA_STAGING.dbo.GIFTS_AND_HOSPITALITY_EQ_PROC 	EXEC VISTA_STAGING.dbo.GIFTS_AND_HOSPITALITY_FI 	EXEC VISTA_STAGING.dbo.GIFTS_AND_HOSPITALITY_FI_PROC 		 	--IMPLEMENTATION SHORTFALL 	EXEC VISTA_STAGING.DBO.IMPLEMENTATION_SHORTFALL_EQ   END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: EXCEPTIONS_MASTER_FX CreateDate: 2019-10-18 08:39:51.510 ModifyDate: 2022-03-04 16:53:16.197 --- DEFINITION START --- -- ============================================= -- Author:		<da Costa, David> -- Create date: <10/07/2019> -- Description:	<Stored procedure to calculate all the exceptions  -- across FX desk and create respective MASTER tables  -- for frontend>  -- ***************VERSION CONTROL***************  --2022-01-27, Matej Miter; Created for Jira: --SURVG-563 - New Fx Report Instructor to dealer 2022 -- ============================================= CREATE PROCEDURE [dbo].[EXCEPTIONS_MASTER_FX]  AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;  	--FX 	EXEC VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FX 	EXEC VISTA_STAGING.dbo.VG_500_DEALER_LIMIT_FX 	EXEC VISTA_STAGING.dbo.VG_501_SPOT_REFERENCE_RATE_FX 	EXEC VISTA_STAGING.dbo.VG_601_OUT_OF_HOURS_FX 	EXEC VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_FX 	EXEC VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX 	EXEC VISTA_STAGING.dbo.VG_608_TA_KNOCKBACK_FX 	EXEC VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX 	EXEC VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_FX  	EXEC VISTA_STAGING.dbo.VG_603_LARGE_TRADES_FX 	EXEC VISTA_STAGING.dbo.VG_603T_LARGE_TRADES_FX	 --Used to calculate trade level exceptions for MI purposes in the aggregator (does not have a workflow) 	EXEC VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_FX 	EXEC VISTA_STAGING.DBO.VG_10_TIMELY_RECORDING_FX 	EXEC VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_FX 	EXEC VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_FX 	--SURVG-563 	EXEC Vista_Staging.dbo.VG_613_INSTRUCTOR_TO_DEALER_FX 	--End of SURVG-563  	--MASTER TABLES FX 	EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_16_GIFTS_AND_HOSPITALITY_FX 	EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_501_SPOT_REFERENCE_RATE_FX 	EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_607_BEST_EXECUTION_FX 	EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_09_TIMELY_EXECUTION_FX 	EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_17_COUNTERPARTY_DIRECTION_FX 	EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_500_DEALER_LIMIT_FX 	EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_601_OUT_OF_HOURS_FX 	EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_602_EOD_HOLDOVERS_FX 	EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_603_LARGE_TRADES_FX 	EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_604_CLIENT_ORDER_HANDLING_FX 	EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_608_TA_KNOCKBACK_FX 	EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_10_TIMELY_RECORDING_FX 	EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_611_ORDER_AGGREGATION_FX 	EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_612_ORDER_ALLOCATION_FX 	--SURVG-563 	EXEC Vista_Staging.dbo.MASTER_MFID_TABLE_VG_613_INSTRUCTOR_TO_DEALER_FX 	--End of SURVG-563 	EXEC VISTA_STAGING.dbo.MASTER_PT_AMENDMENT_FLAG_TABLE END   --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: EXCEPTIONS_STAGING_EQ CreateDate: 2019-10-18 08:39:51.550 ModifyDate: 2020-02-04 10:56:04.040 --- DEFINITION START --- -- ============================================= -- Author:		<da Costa, David> -- Create date: <10/07/2019> -- Description:	<Stored procedure to calculate all the exceptions  -- across EQ, FI and LL desks, create respective MASTER tables  -- for frontend and generate additional compliance tables> -- ============================================= CREATE PROCEDURE [dbo].[EXCEPTIONS_STAGING_EQ]  AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;  	--EQUITIES 	EXEC VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_EQ 	EXEC VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_EQ 	EXEC VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_EQ 	EXEC VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_EQ 	EXEC VISTA_STAGING.dbo.VG_10_NAV_CUT_OFF_EQ 	EXEC VISTA_STAGING.dbo.VG_11_TIMELY_RELEASE_EQ 	EXEC VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_EQ 	EXEC VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EQ 	EXEC VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_EQ 	EXEC VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_EQ 	EXEC VISTA_STAGING.dbo.VG_40_EXTENDED_SETTLEMENT_EXCEPTION 	EXEC VISTA_STAGING.[dbo].[VG_IMPLEMENTATION_SHORTFALL_EXCEPTION_EQ] 	EXEC VISTA_STAGING.[dbo].[VG_MARKET_HIGH_LOW_EXCEPTION_EQ] 	EXEC VISTA_STAGING.dbo.VG_COMMISSION_EXCEPTION_EQ		 	EXEC VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_EQ  END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: EXCEPTIONS_STAGING_FI CreateDate: 2019-10-18 08:39:51.590 ModifyDate: 2019-10-18 08:39:51.590 --- DEFINITION START --- -- ============================================= -- Author:		<da Costa, David> -- Create date: <10/07/2019> -- Description:	<Stored procedure to calculate all the exceptions  -- across EQ, FI and LL desks, create respective MASTER tables  -- for frontend and generate additional compliance tables> -- ============================================= CREATE PROCEDURE [dbo].[EXCEPTIONS_STAGING_FI]  AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;  	--FIXED INCOME 	EXEC VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI 	EXEC VISTA_STAGING.[dbo].[VG_06_NEW_ISSUE_ORDER_FLIPPING_FI]  	EXEC VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_FI 	EXEC VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_FI 	EXEC VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI 	EXEC VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FI 	EXEC VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_FI 	EXEC VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_FI 	EXEC VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_FI 	EXEC VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_FI 	EXEC VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_FI  END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: EXCEPTIONS_STAGING_LL CreateDate: 2019-10-18 08:39:51.623 ModifyDate: 2019-10-18 08:39:51.623 --- DEFINITION START --- -- ============================================= -- Author:		<da Costa, David> -- Create date: <10/07/2019> -- Description:	<Stored procedure to calculate all the exceptions  -- across EQ, FI and LL desks, create respective MASTER tables  -- for frontend and generate additional compliance tables> -- ============================================= CREATE PROCEDURE [dbo].[EXCEPTIONS_STAGING_LL]  AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;   	--LEVERAGED LOANS 	EXEC VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_LL 	EXEC VISTA_STAGING.[dbo].[VG_06_NEW_ISSUE_ORDER_FLIPPING_LL]  	EXEC VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_LL 	EXEC VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_LL 	EXEC VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_LL 	EXEC VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_LL 	EXEC VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_LL 	EXEC VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_LL 	EXEC VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_LL 	EXEC VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_LL 	EXEC VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_LL    END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: MASTER_COUNTERPARTY_DIRECTION_TABLE_EQ CreateDate: 2019-10-18 08:39:51.680 ModifyDate: 2020-07-03 20:51:17.670 --- DEFINITION START ---   -- ============================================= -- Author:		<Henderson, William> -- Create date: <2018-07-12> -- Description:	<Build a master table for the Counterparty direction table for Fixed Income> -- =============================================  -- ***************VERSION CONTROL*************** -- 2018-02-16 WH: Created stored procedure -- 2019-05-08 DDC: Amended script ot use a reference table thus mitigating timeout issues in the front end -- *********************************************    CREATE PROCEDURE [dbo].[MASTER_COUNTERPARTY_DIRECTION_TABLE_EQ]   AS BEGIN 	  	-- SET NOCOUNT ON added to prevent extra result sets FROM 	-- interfering with SELECT statements. 	SET NOCOUNT ON;  	DECLARE @START_TIME as datetime 	SET @START_TIME = GETDATE()  	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;  	IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids 	SELECT DISTINCT  		oc.PM_ORD AS ORD_NUM, 		oc.TRD_ORD, 		t.MULTI_FUND_ID 	INTO #distinct_ids 	FROM VISTA_REPORTING.dbo.ORDERS_CROSS oc  	LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM = oc.TRD_ORD 	WHERE EXISTS (SELECT pm.ORD_NUM FROM Vista_Reporting.dbo.PM_ORDERS pm WHERE pm.ORD_NUM = oc.PM_ORD AND pm.DEALING_DESK = 'Equity')  		 	IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_COUNTERPARTY_DIR_TABLE_EQ', 'U') IS NOT NULL 	DELETE FROM #distinct_ids where NOT EXISTS (SELECT od.PM_ORD 											   FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od 											   WHERE od.PM_ORD = #distinct_ids.ORD_NUM)   	IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table 	SELECT DISTINCT 		pmo.ORD_NUM, 		oc.TRD_ORD, 		t.PLACEMENT_NUM, 		t.CLIENT_EXECUTION_NUM, 		pmo.AUTH_TIME, 		--t.EXECUTION_TIME, 		soc.SAMPLED_DATE as CREATE_TIME, 		pmo.PM AS FM, 		CONVERT(VARCHAR(50), pmo.Side) AS Side, 		c.MF_CONCAT AS MULTI_FUND_ID, 		c.TRADER_CONCAT AS [Dealer], 		c.CP_CONCAT as [Executed CP], 		c.TRADE_DATE_CONCAT as [Trade Date], 		c.EX_TIME_CONCAT as [Execution Time], 		c.PRICE_CONCAT as [Price], 		c.NET_CONS_CONCAT as [Size], 		t.EXECUTION_TIME, 		pmo.BROKER_CODE, 		pmo.DEALING_DESK AS DEALING_DESK, 		c.COMMENTS_VALUE_CONCAT AS [General Comment], 		MAX(case 			WHEN (CHARINDEX('axe', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "axe"' 			WHEN (CHARINDEX('run', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "run"' 			WHEN (CHARINDEX('bid', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "bid"' 			WHEN (CHARINDEX('ask', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "ask"' 			WHEN (CHARINDEX('offer', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "offer"' 			WHEN (CHARINDEX('buying', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "buying"' 			WHEN (CHARINDEX('selling', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "selling"' 			WHEN (CHARINDEX('with', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "with"' 			WHEN (CHARINDEX('JP', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "JP"' 			WHEN (CHARINDEX('JPM', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "JPM"' 			WHEN (CHARINDEX('Morgan', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Morgan"' 			WHEN (CHARINDEX('Gold', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Gold"' 			WHEN (CHARINDEX('Sachs', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Sachs"' 			WHEN (CHARINDEX('Barclays', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Barclays"' 			WHEN (CHARINDEX('BRC', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "BRC"' 			WHEN (CHARINDEX('BARC', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "BARC"' 			WHEN (CHARINDEX('BC', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "BC"' 			WHEN (CHARINDEX('SG', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "SG"' 			WHEN (CHARINDEX('Societe', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Societe"' 			WHEN (CHARINDEX('Credit', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Credit"' 			WHEN (CHARINDEX('Suisse', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Suisse"' 			WHEN (CHARINDEX('Stanley', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Stanley"' 			WHEN (CHARINDEX('RBC', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "RBC"' 			WHEN (CHARINDEX('Royal', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Royal"' 			WHEN (CHARINDEX('Bank', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Bank"' 			WHEN (CHARINDEX('WF', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "WF"' 			WHEN (CHARINDEX('Wells', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Wells"' 			WHEN (CHARINDEX('Fargo', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Fargo"' 			WHEN (CHARINDEX('HSBC', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "HSBC"' 			WHEN (CHARINDEX('HSBK', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "HSBK"' 			WHEN (CHARINDEX('RBS', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "RBS"' 			WHEN (CHARINDEX('Citi', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Citi"' 			WHEN (CHARINDEX('CG', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "CG"' 			WHEN (CHARINDEX('DB', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "DB"' 			WHEN (CHARINDEX('Deutsche', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Deutsche"' 			WHEN (CHARINDEX('ML', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "ML"' 			WHEN (CHARINDEX('Merril', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Merril"' 			WHEN (CHARINDEX('Lynch', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Lynch"' 			WHEN (CHARINDEX('BNP', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "BNP"' 			WHEN (CHARINDEX('Paribas', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Paribas"' 			WHEN (CHARINDEX('BP', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "BP"' 			WHEN (CHARINDEX('Commerz', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Commerz"' 			WHEN (CHARINDEX('JS', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "JS"' 			WHEN (CHARINDEX('Jeff', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Jeff"' 			WHEN (CHARINDEX('Natixis', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Natixis"' 			WHEN (CHARINDEX('NX', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "NX"' 			WHEN (CHARINDEX('Nomura', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Nomura"' 			WHEN (CHARINDEX('SAN', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "SAN"' 			WHEN (CHARINDEX('Danske', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Danske"' 			WHEN (CHARINDEX('Cantor', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Cantor"' 			WHEN (CHARINDEX('ALLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "ALLL"' 			WHEN (CHARINDEX('BALB', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "BALB"' 			WHEN (CHARINDEX('BAMP', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "BAMP"' 			WHEN (CHARINDEX('BANC', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "BANC"' 			WHEN (CHARINDEX('BARP', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "BARP"' 			WHEN (CHARINDEX('BBLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "BBLL"' 			WHEN (CHARINDEX('BBV', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "BBV"' 			WHEN (CHARINDEX('BCM', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "BCM"' 			WHEN (CHARINDEX('BILL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "BILL"' 			WHEN (CHARINDEX('BOLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "BOLL"' 			WHEN (CHARINDEX('BPLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "BPLL"' 			WHEN (CHARINDEX('BVLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "BVLL"' 			WHEN (CHARINDEX('CALC', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "CALC"' 			WHEN (CHARINDEX('CALL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "CALL"' 			WHEN (CHARINDEX('CANA', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "CANA"' 			WHEN (CHARINDEX('CFLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "CFLL"' 			WHEN (CHARINDEX('CGML', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "CGML"' 			WHEN (CHARINDEX('CHAL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "CHAL"' 			WHEN (CHARINDEX('CILB', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "CILB"' 			WHEN (CHARINDEX('CIWM', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "CIWM"' 			WHEN (CHARINDEX('COLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "COLL"' 			WHEN (CHARINDEX('COMM', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "COMM"' 			WHEN (CHARINDEX('CSFE', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "CSFE"' 			WHEN (CHARINDEX('CSLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "CSLL"' 			WHEN (CHARINDEX('DENL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "DENL"' 			WHEN (CHARINDEX('DEUP', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "DEUP"' 			WHEN (CHARINDEX('DMGN', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "DMGN"' 			WHEN (CHARINDEX('DMLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "DMLL"' 			WHEN (CHARINDEX('DNBN', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "DNBN"' 			WHEN (CHARINDEX('DNLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "DNLL"' 			WHEN (CHARINDEX('DZBK', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "DZBK"' 			WHEN (CHARINDEX('EULL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "EULL"' 			WHEN (CHARINDEX('EURC', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "EURC"' 			WHEN (CHARINDEX('EXA', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "EXA"' 			WHEN (CHARINDEX('FITZ', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "FITZ"' 			WHEN (CHARINDEX('GARB', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "GARB"' 			WHEN (CHARINDEX('GLAS', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "GLAS"' 			WHEN (CHARINDEX('GOLD', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "GOLD"' 			WHEN (CHARINDEX('GOLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "GOLL"' 			WHEN (CHARINDEX('GRDA', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "GRDA"' 			WHEN (CHARINDEX('HENC', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "HENC"' 			WHEN (CHARINDEX('HSBP', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "HSBP"' 			WHEN (CHARINDEX('HSLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "HSLL"' 			WHEN (CHARINDEX('HYLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "HYLL"' 			WHEN (CHARINDEX('HYPO', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "HYPO"' 			WHEN (CHARINDEX('ICIL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "ICIL"' 			WHEN (CHARINDEX('ICLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "ICLL"' 			WHEN (CHARINDEX('IKLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "IKLL"' 			WHEN (CHARINDEX('ING', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "ING"' 			WHEN (CHARINDEX('INGL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "INGL"' 			WHEN (CHARINDEX('JPLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "JPLL"' 			WHEN (CHARINDEX('JPMS', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "JPMS"' 			WHEN (CHARINDEX('KKLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "KKLL"' 			WHEN (CHARINDEX('LIEL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "LIEL"' 			WHEN (CHARINDEX('LLOP', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "LLOP"' 			WHEN (CHARINDEX('LTLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "LTLL"' 			WHEN (CHARINDEX('LTSB', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "LTSB"' 			WHEN (CHARINDEX('LWLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "LWLL"' 			WHEN (CHARINDEX('MADV', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "MADV"' 			WHEN (CHARINDEX('MAX', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "MAX"' 			WHEN (CHARINDEX('MELT', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "MELT"' 			WHEN (CHARINDEX('MITS', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "MITS"' 			WHEN (CHARINDEX('MIZ', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "MIZ"' 			WHEN (CHARINDEX('MLSB', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "MLSB"' 			WHEN (CHARINDEX('MSLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "MSLL"' 			WHEN (CHARINDEX('MSTC', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "MSTC"' 			WHEN (CHARINDEX('MTLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "MTLL"' 			WHEN (CHARINDEX('MZLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "MZLL"' 			WHEN (CHARINDEX('NATE', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "NATE"' 			WHEN (CHARINDEX('NDEA', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "NDEA"' 			WHEN (CHARINDEX('NDLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "NDLL"' 			WHEN (CHARINDEX('NMLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "NMLL"' 			WHEN (CHARINDEX('NMRA', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "NMRA"' 			WHEN (CHARINDEX('NTLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "NTLL"' 			WHEN (CHARINDEX('PBS', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "PBS"' 			WHEN (CHARINDEX('RABN', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "RABN"' 			WHEN (CHARINDEX('RALL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "RALL"' 			WHEN (CHARINDEX('RBDS', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "RBDS"' 			WHEN (CHARINDEX('RBLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "RBLL"' 			WHEN (CHARINDEX('RBSP', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "RBSP"' 			WHEN (CHARINDEX('RCLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "RCLL"' 			WHEN (CHARINDEX('SALL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "SALL"' 			WHEN (CHARINDEX('SANT', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "SANT"' 			WHEN (CHARINDEX('SBP', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "SBP"' 			WHEN (CHARINDEX('SCB', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "SCB"' 			WHEN (CHARINDEX('SCLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "SCLL"' 			WHEN (CHARINDEX('SCTB', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "SCTB"' 			WHEN (CHARINDEX('SEAE', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "SEAE"' 			WHEN (CHARINDEX('SFLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "SFLL"' 			WHEN (CHARINDEX('SGLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "SGLL"' 			WHEN (CHARINDEX('SGSA', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "SGSA"' 			WHEN (CHARINDEX('SKAN', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "SKAN"' 			WHEN (CHARINDEX('SKLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "SKLL"' 			WHEN (CHARINDEX('SMLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "SMLL"' 			WHEN (CHARINDEX('SOCP', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "SOCP"' 			WHEN (CHARINDEX('STIF', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "STIF"' 			WHEN (CHARINDEX('STLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "STLL"' 			WHEN (CHARINDEX('STOR', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "STOR"' 			WHEN (CHARINDEX('TDS', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "TDS"' 			WHEN (CHARINDEX('TLC', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "TLC"' 			WHEN (CHARINDEX('TOR', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "TOR"' 			WHEN (CHARINDEX('TRAL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "TRAL"' 			WHEN (CHARINDEX('UBLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "UBLL"' 			WHEN (CHARINDEX('UBSA', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "UBSA"' 			WHEN (CHARINDEX('USBT', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "USBT"' 			WHEN (CHARINDEX('WBC', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "WBC"' 			WHEN (CHARINDEX('WELF', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "WELF"' 			WHEN (CHARINDEX('WELL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "WELL"' 			WHEN (CHARINDEX('CPDir', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "CPDir"' 			WHEN pmo.BROKER_CODE IS NOT NULL THEN 'Broker Code is populated' 		end) as [CP Alert String] 		--COMMENTS_VALUE as [General Comment]		 		INTO #temp_final_master_table 		from (SELECT DISTINCT  				a.ORD_NUM, 				a.PM, 				a.BROKER_CODE, 				a.COMMENTS_VALUE, 				a.AUTH_TIME, 				a.TRAN_TYPE AS Side, 				DEALING_DESK 			  FROM VISTA_REPORTING.dbo.PM_ORDERS a 			  INNER JOIN (SELECT ORD_NUM, MAX(TOUCH_COUNT) AS MAX_TOUCH FROM VISTA_REPORTING.dbo.PM_ORDERS GROUP BY ORD_NUM) b 			  ON a.ORD_NUM = b.ORD_NUM AND a.TOUCH_COUNT = b.MAX_TOUCH) pmo 		LEFT JOIN VISTA_REPORTING.dbo.COUNTERPARTY_DIRECTION_REFERENCE_TABLE c ON pmo.ORD_NUM = c.ORD_NUM 		LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON pmo.ORD_NUM = oc.PM_ORD 		LEFT JOIN (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, PLACEMENT_NUM, CLIENT_EXECUTION_NUM, EXECUTION_TIME FROM VISTA_REPORTING.dbo.TRADES) t ON oc.TRD_ORD = t.ORD_NUM 		LEFT JOIN [VISTA_REPORTING].[dbo].[SAMPLED_ORDERS_COMPLIANCE] soc ON soc.ORD_NUM = pmo.ORD_NUM  		WHERE pmo.DEALING_DESK='Equity' AND EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = pmo.ORD_NUM) 		GROUP BY  			pmo.ORD_NUM, 			oc.TRD_ORD, 			t.PLACEMENT_NUM, 			t.CLIENT_EXECUTION_NUM, 			pmo.AUTH_TIME, 			--t.EXECUTION_TIME, 			soc.SAMPLED_DATE , 			pmo.PM , 			CONVERT(VARCHAR(50), pmo.Side) , 			c.MF_CONCAT , 			c.TRADER_CONCAT , 			c.CP_CONCAT , 			c.TRADE_DATE_CONCAT , 			c.EX_TIME_CONCAT , 			c.PRICE_CONCAT , 			c.NET_CONS_CONCAT, 			t.EXECUTION_TIME,  			pmo.BROKER_CODE, 			pmo.DEALING_DESK , 			c.COMMENTS_VALUE_CONCAT 			--WHERE Status IN ('2C2','2C4')	   	IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_COUNTERPARTY_DIR_TABLE_EQ', 'U') IS NOT NULL 	DELETE FROM VISTA_REPORTING.dbo.MASTER_COUNTERPARTY_DIR_TABLE_EQ 	WHERE ORD_NUM IN (SELECT DISTINCT ORD_NUM FROM #distinct_ids)   	IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_COUNTERPARTY_DIR_TABLE_EQ', 'U') IS NOT NULL 	INSERT INTO VISTA_REPORTING.dbo.MASTER_COUNTERPARTY_DIR_TABLE_EQ 	SELECT * 	FROM #temp_final_master_table  	ELSE  	SELECT * 	INTO VISTA_REPORTING.dbo.MASTER_COUNTERPARTY_DIR_TABLE_EQ 	FROM #temp_final_master_table 	  	IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes               WHERE name = N'master_cpty_dir_eq_idx1')        DROP INDEX master_cpty_dir_eq_idx1  	ON VISTA_REPORTING.[dbo].MASTER_COUNTERPARTY_DIR_TABLE_EQ  	CREATE NONCLUSTERED INDEX master_cpty_dir_eq_idx1 ON VISTA_REPORTING.[dbo].MASTER_COUNTERPARTY_DIR_TABLE_EQ (ORD_NUM)  	 	IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes               WHERE name = N'master_cpty_dir_eq_idx2')        DROP INDEX master_cpty_dir_eq_idx2  	ON VISTA_REPORTING.[dbo].MASTER_COUNTERPARTY_DIR_TABLE_EQ  	CREATE NONCLUSTERED INDEX master_cpty_dir_eq_idx2 ON VISTA_REPORTING.[dbo].MASTER_COUNTERPARTY_DIR_TABLE_EQ (TRD_ORD)  	 	IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes               WHERE name = N'master_cpty_dir_eq_idx3')        DROP INDEX master_cpty_dir_eq_idx3  	ON VISTA_REPORTING.[dbo].MASTER_COUNTERPARTY_DIR_TABLE_EQ  	CREATE NONCLUSTERED INDEX master_cpty_dir_eq_idx3 ON VISTA_REPORTING.[dbo].MASTER_COUNTERPARTY_DIR_TABLE_EQ (PLACEMENT_NUM)   	IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes               WHERE name = N'master_cpty_dir_eq_idx4')        DROP INDEX master_cpty_dir_eq_idx4  	ON VISTA_REPORTING.[dbo].MASTER_COUNTERPARTY_DIR_TABLE_EQ  	CREATE NONCLUSTERED INDEX master_cpty_dir_eq_idx4 ON VISTA_REPORTING.[dbo].MASTER_COUNTERPARTY_DIR_TABLE_EQ (CLIENT_EXECUTION_NUM) 	 	 	IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes               WHERE name = N'master_cpty_dir_eq_idx5')        DROP INDEX master_cpty_dir_eq_idx5  	ON VISTA_REPORTING.[dbo].MASTER_COUNTERPARTY_DIR_TABLE_EQ  	CREATE NONCLUSTERED INDEX master_cpty_dir_eq_idx5 ON VISTA_REPORTING.[dbo].MASTER_COUNTERPARTY_DIR_TABLE_EQ (CREATE_TIME)	 	  	IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids 	IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table  	 	ALTER INDEX ALL ON  VISTA_REPORTING.[dbo].MASTER_COUNTERPARTY_DIR_TABLE_EQ REBUILD		   	IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL 	INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES( 	'MASTER_COUNTERPARTY_DIR_TABLE_EQ', --TABLE_NAME 	@START_TIME, --START_TIME 	GETDATE(), --END_TIME 	DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS 	CAST(GETDATE() as date)) --COMPLETION_DATE   END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: MASTER_COUNTERPARTY_DIRECTION_TABLE_FI CreateDate: 2019-10-18 08:39:51.737 ModifyDate: 2021-05-07 13:22:37.427 --- DEFINITION START ---   -- ============================================= -- Author:		<Henderson, William> -- Create date: <2018-07-12> -- Description:	<Build a master table for the Counterparty direction table for Fixed Income> -- =============================================  -- ***************VERSION CONTROL*************** -- 2018-02-16 WH: Created stored procedure -- 2019-05-08 DDC: Amended script ot use a reference table thus mitigating timeout issues in the front end -- 2020-04-06 MN: Optimised script by consolidating joins -- *********************************************   CREATE PROCEDURE [dbo].[MASTER_COUNTERPARTY_DIRECTION_TABLE_FI]  AS BEGIN 	 	-- SET NOCOUNT ON added to prevent extra result sets FROM 	-- interfering with SELECT statements. 	SET NOCOUNT ON;  	DECLARE @START_TIME as datetime 	SET @START_TIME = GETDATE()  	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;  	IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids 	SELECT DISTINCT  		oc.PM_ORD AS ORD_NUM, 		oc.TRD_ORD, 		t.MULTI_FUND_ID 	INTO #distinct_ids 	FROM VISTA_REPORTING.dbo.ORDERS_CROSS oc  	LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM = oc.TRD_ORD 	WHERE EXISTS (SELECT pm.ORD_NUM FROM Vista_Reporting.dbo.PM_ORDERS pm WHERE pm.ORD_NUM = oc.PM_ORD AND pm.DEALING_DESK = 'Fixed Income')  		 	IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_COUNTERPARTY_DIR_TABLE_FI', 'U') IS NOT NULL 	DELETE FROM #distinct_ids where NOT EXISTS (SELECT od.PM_ORD 											   FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od 											   WHERE od.PM_ORD = #distinct_ids.ORD_NUM) 	 	IF OBJECT_ID('tempdb..#Latest_temp_trades', 'U') IS NOT NULL DROP TABLE #Latest_temp_trades 	SELECT DISTINCT 		ORD_NUM,  		t.MULTI_FUND_ID,  		book_amt.[Booked Amt] AS [Booked Amt], 		TRD_COUPON, 		TRD_YIELD, 		TRD_PRICING_SPREAD, 		TRD_COUNTERPARTY, 		ISNULL(p.Venue,'Manual') AS Venue, 		CASE 			WHEN prim.TWEB_CLOSE_DEALING = 1 THEN 'TWEB Close' 			WHEN prim.[1615_DEALING] = 1 THEN '1615 Dealing' 			WHEN t.ACTIVITY_TYPE = 'MG.FI 1. Proces' THEN 'VPT' 		END AS [Method], 		t.PLACEMENT_NUM,  		CLIENT_EXECUTION_NUM,  		EXECUTION_TIME  	INTO #Latest_temp_trades 	FROM VISTA_REPORTING.dbo.TRADES t 	LEFT JOIN (SELECT Venue, PLACEMENT_NUM FROM VISTA_REPORTING.dbo.PLACEMENTS) p ON t.PLACEMENT_NUM = p.PLACEMENT_NUM 	left join (SELECT MULTI_FUND_ID, TWEB_CLOSE_DEALING, [1615_DEALING] FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) prim on t.MULTI_FUND_ID = prim.MULTI_FUND_ID 	LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, SUM(ABS(TRD_ORIG_FACE)) as [Booked Amt]  FROM VISTA_REPORTING.dbo.TRADES GROUP BY MULTI_FUND_ID) book_amt on book_amt.MULTI_FUND_ID = t.MULTI_FUND_ID 	WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)   	IF OBJECT_ID('tempdb..#concat_ord', 'U') IS NOT NULL DROP TABLE #concat_ord 	SELECT  		ORD_NUM,				 		STUFF(( 		  SELECT '| ' + CAST(FORMAT([Booked amt],'N2') AS VARCHAR(50))  		  FROM (SELECT DISTINCT ORD_NUM, [Booked amt] FROM #Latest_temp_trades) Results 		  WHERE (t.ORD_NUM = Results.ORD_NUM)  		  FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)') 			,1,2,'') AS Booked_amt_concat, 		STUFF(( 		  SELECT '| ' + CAST(Venue AS VARCHAR(50))  		  FROM (SELECT DISTINCT ORD_NUM, Venue FROM #Latest_temp_trades) Results 		  WHERE (t.ORD_NUM = Results.ORD_NUM)  		  FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)') 		,1,2,'') AS Venue_concat	 	INTO #concat_ord 	FROM (SELECT DISTINCT ORD_NUM FROM #Latest_temp_trades) t 	GROUP BY ORD_NUM   	IF OBJECT_ID('tempdb..#temp_pmords', 'U') IS NOT NULL DROP TABLE #temp_pmords 	SELECT DISTINCT  			a.ORD_NUM, 			a.PM, 			a.BROKER_CODE, 			a.COMMENTS_VALUE, 			a.AUTH_TIME, 			a.TRAN_TYPE AS Side, 			a.DEALING_DESK, 			a.FACE 	INTO #temp_pmords 	FROM VISTA_REPORTING.dbo.PM_ORDERS a 	INNER JOIN (SELECT ORD_NUM, MAX(TOUCH_COUNT) AS MAX_TOUCH  				FROM VISTA_REPORTING.dbo.PM_ORDERS  				GROUP BY ORD_NUM) b ON a.ORD_NUM = b.ORD_NUM AND a.TOUCH_COUNT = b.MAX_TOUCH 				WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = a.ORD_NUM) 						AND a.DEALING_DESK = 'Fixed Income'   	IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table 	select distinct 		pmo.ORD_NUM, 		oc.TRD_ORD, 		t.PLACEMENT_NUM, 		t.CLIENT_EXECUTION_NUM, 		pmo.AUTH_TIME, 		--t.EXECUTION_TIME, 		soc.SAMPLED_DATE as CREATE_TIME, 		pmo.PM AS FM, 		CONVERT(VARCHAR(50), pmo.Side) AS Side, 		c.MF_CONCAT AS MULTI_FUND_ID, 		c.TRADER_CONCAT AS [Dealer], 		c.CP_CONCAT as [Executed CP], 		c.TRADE_DATE_CONCAT as [Trade Date], 		c.EX_TIME_CONCAT as [Execution Time], 		c.PRICE_CONCAT as [Price], 		c.NET_CONS_CONCAT as [Size], 		pmo.BROKER_CODE, 		pmo.DEALING_DESK AS DEALING_DESK, 		c.COMMENTS_VALUE_CONCAT AS [General Comment], 		MIN(t.EXECUTION_TIME) AS EXECUTION_TIME, 		max(case 			WHEN (CHARINDEX('axe', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "axe"' 			WHEN (CHARINDEX('run', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "run"' 			WHEN (CHARINDEX('bid', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "bid"' 			WHEN (CHARINDEX('ask', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "ask"' 			WHEN (CHARINDEX('offer', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "offer"' 			WHEN (CHARINDEX('buying', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "buying"' 			WHEN (CHARINDEX('selling', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "selling"' 			WHEN (CHARINDEX('with', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "with"' 			WHEN (CHARINDEX('JP', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "JP"' 			WHEN (CHARINDEX('JPM', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "JPM"' 			WHEN (CHARINDEX('Morgan', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Morgan"' 			WHEN (CHARINDEX('Gold', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Gold"' 			WHEN (CHARINDEX('Sachs', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Sachs"' 			WHEN (CHARINDEX('Barclays', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Barclays"' 			WHEN (CHARINDEX('BRC', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "BRC"' 			WHEN (CHARINDEX('BARC', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "BARC"' 			WHEN (CHARINDEX('BC', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "BC"' 			WHEN (CHARINDEX('SG', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "SG"' 			WHEN (CHARINDEX('Societe', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Societe"' 			WHEN (CHARINDEX('Credit', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Credit"' 			WHEN (CHARINDEX('Suisse', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Suisse"' 			WHEN (CHARINDEX('Stanley', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Stanley"' 			WHEN (CHARINDEX('RBC', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "RBC"' 			WHEN (CHARINDEX('Royal', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Royal"' 			WHEN (CHARINDEX('Bank', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Bank"' 			WHEN (CHARINDEX('WF', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "WF"' 			WHEN (CHARINDEX('Wells', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Wells"' 			WHEN (CHARINDEX('Fargo', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Fargo"' 			WHEN (CHARINDEX('HSBC', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "HSBC"' 			WHEN (CHARINDEX('HSBK', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "HSBK"' 			WHEN (CHARINDEX('RBS', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "RBS"' 			WHEN (CHARINDEX('Citi', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Citi"' 			WHEN (CHARINDEX('CG', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "CG"' 			WHEN (CHARINDEX('DB', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "DB"' 			WHEN (CHARINDEX('Deutsche', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Deutsche"' 			WHEN (CHARINDEX('ML', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "ML"' 			WHEN (CHARINDEX('Merril', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Merril"' 			WHEN (CHARINDEX('Lynch', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Lynch"' 			WHEN (CHARINDEX('BNP', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "BNP"' 			WHEN (CHARINDEX('Paribas', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Paribas"' 			WHEN (CHARINDEX('BP', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "BP"' 			WHEN (CHARINDEX('Commerz', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Commerz"' 			WHEN (CHARINDEX('JS', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "JS"' 			WHEN (CHARINDEX('Jeff', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Jeff"' 			WHEN (CHARINDEX('Natixis', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Natixis"' 			WHEN (CHARINDEX('NX', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "NX"' 			WHEN (CHARINDEX('Nomura', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Nomura"' 			WHEN (CHARINDEX('SAN', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "SAN"' 			WHEN (CHARINDEX('Danske', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Danske"' 			WHEN (CHARINDEX('Cantor', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "Cantor"' 			WHEN (CHARINDEX('ALLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "ALLL"' 			WHEN (CHARINDEX('BALB', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "BALB"' 			WHEN (CHARINDEX('BAMP', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "BAMP"' 			WHEN (CHARINDEX('BANC', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "BANC"' 			WHEN (CHARINDEX('BARP', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "BARP"' 			WHEN (CHARINDEX('BBLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "BBLL"' 			WHEN (CHARINDEX('BBV', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "BBV"' 			WHEN (CHARINDEX('BCM', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "BCM"' 			WHEN (CHARINDEX('BILL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "BILL"' 			WHEN (CHARINDEX('BOLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "BOLL"' 			WHEN (CHARINDEX('BPLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "BPLL"' 			WHEN (CHARINDEX('BVLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "BVLL"' 			WHEN (CHARINDEX('CALC', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "CALC"' 			WHEN (CHARINDEX('CALL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "CALL"' 			WHEN (CHARINDEX('CANA', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "CANA"' 			WHEN (CHARINDEX('CFLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "CFLL"' 			WHEN (CHARINDEX('CGML', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "CGML"' 			WHEN (CHARINDEX('CHAL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "CHAL"' 			WHEN (CHARINDEX('CILB', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "CILB"' 			WHEN (CHARINDEX('CIWM', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "CIWM"' 			WHEN (CHARINDEX('COLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "COLL"' 			WHEN (CHARINDEX('COMM', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "COMM"' 			WHEN (CHARINDEX('CSFE', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "CSFE"' 			WHEN (CHARINDEX('CSLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "CSLL"' 			WHEN (CHARINDEX('DENL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "DENL"' 			WHEN (CHARINDEX('DEUP', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "DEUP"' 			WHEN (CHARINDEX('DMGN', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "DMGN"' 			WHEN (CHARINDEX('DMLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "DMLL"' 			WHEN (CHARINDEX('DNBN', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "DNBN"' 			WHEN (CHARINDEX('DNLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "DNLL"' 			WHEN (CHARINDEX('DZBK', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "DZBK"' 			WHEN (CHARINDEX('EULL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "EULL"' 			WHEN (CHARINDEX('EURC', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "EURC"' 			WHEN (CHARINDEX('EXA', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "EXA"' 			WHEN (CHARINDEX('FITZ', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "FITZ"' 			WHEN (CHARINDEX('GARB', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "GARB"' 			WHEN (CHARINDEX('GLAS', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "GLAS"' 			WHEN (CHARINDEX('GOLD', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "GOLD"' 			WHEN (CHARINDEX('GOLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "GOLL"' 			WHEN (CHARINDEX('GRDA', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "GRDA"' 			WHEN (CHARINDEX('HENC', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "HENC"' 			WHEN (CHARINDEX('HSBP', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "HSBP"' 			WHEN (CHARINDEX('HSLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "HSLL"' 			WHEN (CHARINDEX('HYLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "HYLL"' 			WHEN (CHARINDEX('HYPO', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "HYPO"' 			WHEN (CHARINDEX('ICIL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "ICIL"' 			WHEN (CHARINDEX('ICLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "ICLL"' 			WHEN (CHARINDEX('IKLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "IKLL"' 			WHEN (CHARINDEX('ING', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "ING"' 			WHEN (CHARINDEX('INGL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "INGL"' 			WHEN (CHARINDEX('JPLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "JPLL"' 			WHEN (CHARINDEX('JPMS', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "JPMS"' 			WHEN (CHARINDEX('KKLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "KKLL"' 			WHEN (CHARINDEX('LIEL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "LIEL"' 			WHEN (CHARINDEX('LLOP', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "LLOP"' 			WHEN (CHARINDEX('LTLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "LTLL"' 			WHEN (CHARINDEX('LTSB', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "LTSB"' 			WHEN (CHARINDEX('LWLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "LWLL"' 			WHEN (CHARINDEX('MADV', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "MADV"' 			WHEN (CHARINDEX('MAX', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "MAX"' 			WHEN (CHARINDEX('MELT', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "MELT"' 			WHEN (CHARINDEX('MITS', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "MITS"' 			WHEN (CHARINDEX('MIZ', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "MIZ"' 			WHEN (CHARINDEX('MLSB', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "MLSB"' 			WHEN (CHARINDEX('MSLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "MSLL"' 			WHEN (CHARINDEX('MSTC', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "MSTC"' 			WHEN (CHARINDEX('MTLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "MTLL"' 			WHEN (CHARINDEX('MZLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "MZLL"' 			WHEN (CHARINDEX('NATE', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "NATE"' 			WHEN (CHARINDEX('NDEA', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "NDEA"' 			WHEN (CHARINDEX('NDLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "NDLL"' 			WHEN (CHARINDEX('NMLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "NMLL"' 			WHEN (CHARINDEX('NMRA', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "NMRA"' 			WHEN (CHARINDEX('NTLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "NTLL"' 			WHEN (CHARINDEX('PBS', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "PBS"' 			WHEN (CHARINDEX('RABN', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "RABN"' 			WHEN (CHARINDEX('RALL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "RALL"' 			WHEN (CHARINDEX('RBDS', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "RBDS"' 			WHEN (CHARINDEX('RBLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "RBLL"' 			WHEN (CHARINDEX('RBSP', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "RBSP"' 			WHEN (CHARINDEX('RCLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "RCLL"' 			WHEN (CHARINDEX('SALL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "SALL"' 			WHEN (CHARINDEX('SANT', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "SANT"' 			WHEN (CHARINDEX('SBP', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "SBP"' 			WHEN (CHARINDEX('SCB', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "SCB"' 			WHEN (CHARINDEX('SCLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "SCLL"' 			WHEN (CHARINDEX('SCTB', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "SCTB"' 			WHEN (CHARINDEX('SEAE', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "SEAE"' 			WHEN (CHARINDEX('SFLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "SFLL"' 			WHEN (CHARINDEX('SGLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "SGLL"' 			WHEN (CHARINDEX('SGSA', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "SGSA"' 			WHEN (CHARINDEX('SKAN', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "SKAN"' 			WHEN (CHARINDEX('SKLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "SKLL"' 			WHEN (CHARINDEX('SMLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "SMLL"' 			WHEN (CHARINDEX('SOCP', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "SOCP"' 			WHEN (CHARINDEX('STIF', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "STIF"' 			WHEN (CHARINDEX('STLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "STLL"' 			WHEN (CHARINDEX('STOR', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "STOR"' 			WHEN (CHARINDEX('TDS', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "TDS"' 			WHEN (CHARINDEX('TLC', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "TLC"' 			WHEN (CHARINDEX('TOR', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "TOR"' 			WHEN (CHARINDEX('TRAL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "TRAL"' 			WHEN (CHARINDEX('UBLL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "UBLL"' 			WHEN (CHARINDEX('UBSA', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "UBSA"' 			WHEN (CHARINDEX('USBT', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "USBT"' 			WHEN (CHARINDEX('WBC', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "WBC"' 			WHEN (CHARINDEX('WELF', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "WELF"' 			WHEN (CHARINDEX('WELL', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "WELL"' 			WHEN (CHARINDEX('CPDir', c.COMMENTS_VALUE_CONCAT) > 0) THEN 'Comment contains "CPDir"' 			WHEN pmo.BROKER_CODE IS NOT NULL THEN 'Broker Code is populated' 		end) as [CP Alert String], 		CONVERT(DECIMAL(18,2),ABS(pmo.FACE)) AS [Ord Amt], 		conc_ord.Booked_amt_concat AS  [Booked Amt], 		p.INST_TYPE, 		CONVERT(DECIMAL(18,2),t.TRD_PRICING_SPREAD) as [Spread], 		CASE 			WHEN p.DEALING_DESK='Fixed Income' 			THEN		 				CASE  					WHEN p.SM_SEC_GROUP = 'SWAP' AND p.SM_SEC_TYPE IN ('SWAP','CSWAP') THEN CONVERT(DECIMAL(18,2),t.TRD_COUPON) 					WHEN p.DEBT_DERIV = 'DEBT' THEN CONVERT(DECIMAL(18,2),t.TRD_YIELD) 				END 			--WHEN pr.DEALING_DESK='Equity' 			--THEN CONVERT(DECIMAL(18,2),lst_trd.TRD_YIELD) 			--WHEN pr.DEALING_DESK='Leveraged Finance' 			--THEN CONVERT(DECIMAL(18,2),lst_trd.TRD_YIELD) 			END AS [Rate], 		conc_ord.[Venue_Concat] AS [Platform], 		t.Method, 		p.PRIMARY_MARKET_ORDER_LEVEL AS PRIMARY_MARKET 		--COMMENTS_VALUE as [General Comment]		 	INTO #temp_final_master_table 	FROM #temp_pmords pmo 	LEFT JOIN (SELECT cd.* FROM VISTA_REPORTING.dbo.COUNTERPARTY_DIRECTION_REFERENCE_TABLE cd 				WHERE EXISTS (SELECT di.TRD_ORD FROM #distinct_ids di WHERE di.ORD_NUM = cd.ORD_NUM)) c ON pmo.ORD_NUM = c.ORD_NUM 	LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc on pmo.ORD_NUM = oc.PM_ORD 	LEFT JOIN #Latest_temp_trades t ON oc.TRD_ORD=t.ORD_NUM 	LEFT JOIN (SELECT * FROM [VISTA_REPORTING].[dbo].[SAMPLED_ORDERS_COMPLIANCE] so 				WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = so.ORD_NUM)) soc on soc.ORD_NUM = pmo.ORD_NUM 	LEFT JOIN #concat_ord conc_ord ON conc_ord.ORD_NUM=t.ORD_NUM 	LEFT JOIN (SELECT DISTINCT pr.ORD_NUM, pr.INST_TYPE, pr.SM_SEC_GROUP, pr.SM_SEC_TYPE, pr.DEBT_DERIV, pr.PRIMARY_MARKET_ORDER_LEVEL, pr.DEALING_DESK  				FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr 				WHERE EXISTS (SELECT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = pr.ORD_NUM)) p ON p.ORD_NUM = oc.TRD_ORD 	--WHERE pmo.DEALING_DESK = 'Fixed Income'  	GROUP BY  	pmo.ORD_NUM, 	oc.TRD_ORD, 	t.PLACEMENT_NUM, 	t.CLIENT_EXECUTION_NUM, 	pmo.AUTH_TIME, 	--t.EXECUTION_TIME, 	soc.SAMPLED_DATE, 	pmo.PM , 	CONVERT(VARCHAR(50), pmo.Side) , 	c.MF_CONCAT , 	c.TRADER_CONCAT , 	c.CP_CONCAT , 	c.TRADE_DATE_CONCAT , 	c.EX_TIME_CONCAT , 	c.PRICE_CONCAT , 	c.NET_CONS_CONCAT , 	pmo.BROKER_CODE, 	pmo.DEALING_DESK , 	c.COMMENTS_VALUE_CONCAT, 	pmo.FACE, 	conc_ord.Booked_amt_concat, 	p.INST_TYPE, 	t.TRD_PRICING_SPREAD, 	p.DEALING_DESK, 	p.SM_SEC_GROUP, 	p.SM_SEC_TYPE, 	p.DEBT_DERIV, 	t.TRD_COUPON, 	t.TRD_YIELD, 	conc_ord.[Venue_Concat], 	t.Method, 	p.PRIMARY_MARKET_ORDER_LEVEL 	--COMMENTS_VALUE as [General Comment]		 	--WHERE Status IN ('2C2','2C4')    	IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_COUNTERPARTY_DIR_TABLE_FI', 'U') IS NOT NULL 	DELETE FROM VISTA_REPORTING.dbo.MASTER_COUNTERPARTY_DIR_TABLE_FI 	WHERE ORD_NUM IN (SELECT DISTINCT ORD_NUM FROM #distinct_ids)   	IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_COUNTERPARTY_DIR_TABLE_FI', 'U') IS NOT NULL 	INSERT INTO VISTA_REPORTING.dbo.MASTER_COUNTERPARTY_DIR_TABLE_FI 	SELECT * 	FROM #temp_final_master_table  	ELSE  	SELECT * 	INTO VISTA_REPORTING.dbo.MASTER_COUNTERPARTY_DIR_TABLE_FI 	FROM #temp_final_master_table 	  	IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes               WHERE name = N'master_cpty_dir_fi_idx1')        DROP INDEX master_cpty_dir_fi_idx1  	ON VISTA_REPORTING.[dbo].MASTER_COUNTERPARTY_DIR_TABLE_FI  	CREATE NONCLUSTERED INDEX master_cpty_dir_fi_idx1 ON VISTA_REPORTING.[dbo].MASTER_COUNTERPARTY_DIR_TABLE_FI (ORD_NUM)   	IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes               WHERE name = N'master_cpty_dir_fi_idx2')        DROP INDEX master_cpty_dir_fi_idx2  	ON VISTA_REPORTING.[dbo].MASTER_COUNTERPARTY_DIR_TABLE_FI  	CREATE NONCLUSTERED INDEX master_cpty_dir_fi_idx2 ON VISTA_REPORTING.[dbo].MASTER_COUNTERPARTY_DIR_TABLE_FI (TRD_ORD)  	 	IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes               WHERE name = N'master_cpty_dir_fi_idx3')        DROP INDEX master_cpty_dir_fi_idx3  	ON VISTA_REPORTING.[dbo].MASTER_COUNTERPARTY_DIR_TABLE_FI  	CREATE NONCLUSTERED INDEX master_cpty_dir_fi_idx3 ON VISTA_REPORTING.[dbo].MASTER_COUNTERPARTY_DIR_TABLE_FI (PLACEMENT_NUM)   	IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes               WHERE name = N'master_cpty_dir_fi_idx4')        DROP INDEX master_cpty_dir_fi_idx4  	ON VISTA_REPORTING.[dbo].MASTER_COUNTERPARTY_DIR_TABLE_FI  	CREATE NONCLUSTERED INDEX master_cpty_dir_fi_idx4 ON VISTA_REPORTING.[dbo].MASTER_COUNTERPARTY_DIR_TABLE_FI (CLIENT_EXECUTION_NUM) 	 	 	IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes               WHERE name = N'master_cpty_dir_fi_idx5')        DROP INDEX master_cpty_dir_fi_idx5  	ON VISTA_REPORTING.[dbo].MASTER_COUNTERPARTY_DIR_TABLE_FI  	CREATE NONCLUSTERED INDEX master_cpty_dir_fi_idx5 ON VISTA_REPORTING.[dbo].MASTER_COUNTERPARTY_DIR_TABLE_FI (CREATE_TIME)	 	 	 	ALTER INDEX ALL ON  VISTA_REPORTING.[dbo].MASTER_COUNTERPARTY_DIR_TABLE_FI REBUILD		  	 	IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL 	INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES( 	'MASTER_COUNTERPARTY_DIR_TABLE_FI', --TABLE_NAME 	@START_TIME, --START_TIME 	GETDATE(), --END_TIME 	DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS 	CAST(GETDATE() as date)) --COMPLETION_DATE   END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: MASTER_EXCEPTION_COUNT CreateDate: 2019-10-18 08:39:51.820 ModifyDate: 2022-03-04 17:08:14.590 --- DEFINITION START --- -- ============================================= -- Author:		<Samad, Mehreen> -- Create date: <02/10/2019> -- Description:	 -- <Generates Master Exception Count tbale used  -- for front end purposes.> -- =============================================  -- ***************VERSION CONTROL***************  --2022-01-27, Matej Miter; Created for Jira: --SURVG-563 - New Fx/Cash Report Instructor to dealer 2022  --2022-02-22: Matej Miter created for Jira: --T-0-19375 - adding missing Exception type counts into this table to update frontend counter in the master executive area  -- *********************************************  CREATE PROCEDURE [dbo].[MASTER_EXCEPTION_COUNT]  	-- Add the parameters for the stored procedure here  AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;      -- Insert statements for procedure here   --Creating all Cash tables temp (for trades at trade/order level) IF OBJECT_ID('tempdb..#cash_tables', 'U') IS NOT NULL DROP TABLE #cash_tables SELECT         cash_tables.[ID],        'Cash' as [DEALING_DESK], 	   cash_tables.[DEALER_NAME], 	   cash_tables.[Exception_Type],        CASE              WHEN Exception_Type = 'Timely Execution MM' or Exception_Type = 'Timely Execution RR'				THEN CONCAT(ID,'_9_',cash_tables.[DATA_SOURCE])              WHEN Exception_Type = 'Timely Recording MM' or Exception_Type = 'Timely Recording RR'				THEN CONCAT(ID,'_10_',cash_tables.[DATA_SOURCE])              WHEN Exception_Type = 'EOD Holdovers'																THEN CONCAT(ID,'_602_',cash_tables.[DATA_SOURCE])              WHEN Exception_Type = 'Large Trades'																THEN CONCAT(ID,'_603_',cash_tables.[DATA_SOURCE])              WHEN Exception_Type = 'Client Order Handling MM' or Exception_Type = 'Client Order Handling RR'	THEN CONCAT(ID,'_604_',cash_tables.[DATA_SOURCE])                WHEN Exception_Type = 'Best Execution MM'	or Exception_Type = 'Best Execution RR'			        THEN CONCAT(ID,'_607_',cash_tables.[DATA_SOURCE])              WHEN Exception_Type = 'TA Knockback'																THEN CONCAT(ID,'_608_',cash_tables.[DATA_SOURCE])              WHEN Exception_Type = 'Deposits Reference Rate'													THEN CONCAT(ID,'_609_',cash_tables.[DATA_SOURCE])              WHEN Exception_Type = 'Counterparty Direction'														THEN CONCAT(ID,'_17_',cash_tables.[DATA_SOURCE])              WHEN Exception_Type = 'Gifts and Hospitality'														THEN CONCAT(ID,'_16_',cash_tables.[DATA_SOURCE]) 			  --T-0-19375 			 WHEN Exception_Type = 'Order Aggregation MM' or Exception_Type = 'Order Aggregation RR'	        THEN CONCAT(ID,'_611_',cash_tables.[DATA_SOURCE]) 			 WHEN Exception_Type = 'Order Allocation MM' or Exception_Type = 'Order Allocation RR'				THEN CONCAT(ID,'_612_',cash_tables.[DATA_SOURCE]) 			 -- End of T-0-19375 			 --SURVG-563 			 WHEN Exception_Type = 'Instructor to Dealer MM' or Exception_Type = 'Instructor to Dealer RR'		THEN CONCAT(ID,'_613_',cash_tables.[DATA_SOURCE]) 			 --End of SURVG-563              WHEN Exception_Type = 'CP, CD, TBills, Cancellations & Amendments'									THEN CONCAT(ID,'_610',tbills.[TOUCH_COUNT])        ELSE CONCAT(ID,'_?')        END AS ID_VG_NUMBER INTO #cash_tables FROM (SELECT                  CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) as [ID], 			  ex.[DEALER_NAME],              'Timely Recording RR' as [Exception_Type],              ex.[DATA_SOURCE]        FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_RR_TABLE ex 	   WHERE ex.[EXCEPTION_FLAG] = 1                UNION ALL         SELECT                 CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) as [ID], 			  ex.[DEALER_NAME],              'Timely Recording MM' as [Exception_Type],              ex.[DATA_SOURCE]        FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE ex 	   WHERE ex.[EXCEPTION_FLAG] = 1         UNION ALL         SELECT                 CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) as [ID], 			  ex.[DEALER_NAME],              'Best Execution RR' as [Exception_Type],              ex.[DATA_SOURCE]        FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR_TABLE ex 	   WHERE ex.[EXCEPTION_FLAG] = 1         	   UNION ALL         SELECT                 CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) as [ID], 			  ex.[DEALER_NAME],              'Best Execution MM' as [Exception_Type],              ex.[DATA_SOURCE]        FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE ex 	   WHERE ex.[EXCEPTION_FLAG] = 1          --SURVG-563 	    	   UNION ALL         SELECT                 CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) as [ID], 			  ex.[DEALER_NAME],              'Instructor to Dealer RR' as [Exception_Type],              ex.[SOURCE] as [DATA_SOURCE]        FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE ex 	   WHERE ex.[EXCEPTION_FLAG] = 1         	   UNION ALL         SELECT                 CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) as [ID], 			  ex.[DEALER_NAME],              'Instructor to Dealer MM' as [Exception_Type],              ex.[SOURCE] as [DATA_SOURCE]        FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE ex 	   WHERE ex.[EXCEPTION_FLAG] = 1  	   --end of SURVG-563  	   UNION ALL         SELECT                 CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) as [ID], 			  ex.[DEALER_NAME],              'TA Knockback' as [Exception_Type],              ex.[DATA_SOURCE]        FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_608_TA_KNOCKBACK_CASH_TABLE ex 	   WHERE ex.[EXCEPTION_FLAG] = 1         UNION ALL         SELECT                 CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) as [ID], 			  ex.[DEALER_NAME],              'Deposits Reference Rate' as [Exception_Type],              ex.[DATA_SOURCE]        FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE ex 	   WHERE ex.[EXCEPTION_FLAG] = 1         UNION ALL         SELECT                 CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) as [ID], 			  ex.[DEALER_NAME],              'CP, CD, TBills, Cancellations & Amendments' as [Exception_Type],              ex.[DATA_SOURCE]        FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE ex 	   WHERE ex.[EXCEPTION_FLAG] = 1         UNION ALL         SELECT                CAST(ex.[ORDER_ID] AS VARCHAR(50)) as [ID], 			 ex.[DEALER_NAME],              'Large Trades' as [Exception_Type],              ex.[DATA_SOURCE]        FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_CASH_TABLE ex 	   WHERE ex.[EXCEPTION_FLAG] = 1         UNION ALL         SELECT                CAST(ex.[ORDER_ID] AS VARCHAR(50)) as [ID], 			 ex.[DEALER_NAME],              'Timely Execution RR' as [Exception_Type],              ex.[DATA_SOURCE]        FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_RR_TABLE ex 	   WHERE ex.[EXCEPTION_FLAG] = 1         UNION ALL         SELECT                CAST(ex.[ORDER_ID] AS VARCHAR(50)) as [ID], 			 ex.[DEALER_NAME],              'Timely Execution MM' as [Exception_Type],              ex.[DATA_SOURCE]        FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE ex 	   WHERE ex.[EXCEPTION_FLAG] = 1         UNION ALL         SELECT                CAST(ex.[ORDER_ID] AS VARCHAR(50)) as [ID], 			 ex.[DEALER_NAME],              'EOD Holdovers' as [Exception_Type],              ex.[DATA_SOURCE]        FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_CASH_TABLE ex 	   WHERE ex.[EXCEPTION_FLAG] = 1         UNION ALL         SELECT                CAST(ex.[ORDER_ID] AS VARCHAR(50)) as [ID], 			 ex.[DEALER_NAME],              'Client Order Handling RR' as [Exception_Type],              ex.[DATA_SOURCE]        FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE ex 	   WHERE ex.[EXCEPTION_FLAG] = 1         UNION ALL         SELECT                CAST(ex.[ORDER_ID] AS VARCHAR(50)) as [ID], 			 ex.[DEALER_NAME],              'Client Order Handling MM' as [Exception_Type],              ex.[DATA_SOURCE]        FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE ex 	   WHERE ex.[EXCEPTION_FLAG] = 1         UNION ALL         SELECT                 CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) as [ID], 			  ex.[DEALER_NAME],              'Gifts and Hospitality' as [Exception_Type],              ex.[DATA_SOURCE]        FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE ex        WHERE ex.[EXCEPTION_FLAG] = 1         UNION ALL         SELECT                CAST(ex.[ORDER_ID] AS VARCHAR(50)) as [ID], 			 ex.[DEALER_NAME],              'Counterparty Direction' as [Exception_Type],              ex.[DATA_SOURCE]        FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE ex 	   WHERE ex.[EXCEPTION_FLAG] = 1         	   --T-0-19375 - Adding Order Aggregation and Order Allocation Reports into count 	    UNION ALL         SELECT                CAST(ex.[ORDER_ID] AS VARCHAR(50)) as [ID], 			 ex.[DEALER_NAME],              'Order Aggregation RR' as [Exception_Type],              ex.[DATA_SOURCE]        FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_RR_TABLE ex 	   WHERE ex.[EXCEPTION] = 1         UNION ALL         SELECT                CAST(ex.[ORDER_ID] AS VARCHAR(50)) as [ID], 			 ex.[DEALER_NAME],              'Order Aggregation MM' as [Exception_Type],              ex.[DATA_SOURCE]        FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_MM_TABLE ex 	   WHERE ex.[EXCEPTION] = 1 	    	   UNION ALL         SELECT                 CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) as [ID], 			  ex.[DEALER_NAME],              'Order Allocation RR' as [Exception_Type],              ex.[DATA_SOURCE]        FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_RR_TABLE ex 	   WHERE ex.[EXCEPTION] = 1         	   UNION ALL         SELECT                 CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) as [ID], 			  ex.[DEALER_NAME],              'Order Allocation MM' as [Exception_Type],              ex.[DATA_SOURCE]        FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_MM_TABLE ex 	   WHERE ex.[EXCEPTION] = 1 	    	   --End of  T-0-19375 	    	   ) cash_tables  left join (SELECT DISTINCT  TRANSACTION_NUMBER, TOUCH_COUNT FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE) tbills on tbills.[TRANSACTION_NUMBER] = cash_tables.[ID] and cash_tables.[Exception_Type] = 'CP, CD, TBills, Cancellations & Amendments'   --Creating all Cash tables temp (for trades at order AND trade level) IF OBJECT_ID('tempdb..#cash_tables_2', 'U') IS NOT NULL DROP TABLE #cash_tables_2 SELECT   	cash_tables_2.[ID], 	'Cash' as [DEALING_DESK], 	cash_tables_2.[DEALER_NAME], 	cash_tables_2.[Exception_Type], 	CASE 		WHEN Exception_Type = 'Out of Hours' THEN CONCAT(ID,'_601_',cash_tables_2.[DATA_SOURCE]) 	ELSE CONCAT(ID,'_?') 	END AS ID_VG_NUMBER INTO #cash_tables_2 FROM (SELECT   		CONCAT(ISNULL(ex.ORDER_ID,0),'_',ISNULL(ex.TRANSACTION_NUMBER,0)) as [ID], 		ex.[DEALER_NAME], 		'Out of Hours' as [Exception_Type], 		ex.[DATA_SOURCE] 	FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_CASH_TABLE ex 	WHERE ex.[EXCEPTION_FLAG] = 1 	) cash_tables_2   --Creating all FX tables temp (for trades at trade/order level) IF OBJECT_ID('tempdb..#fx_tables', 'U') IS NOT NULL DROP TABLE #fx_tables SELECT  	fx_tables.[ID], 	'FX' as [DEALING_DESK], 	fx_tables.[DEALER_NAME], 	fx_tables.[Exception_Type], 	CASE 		WHEN Exception_Type = 'Timely Execution'			THEN CONCAT(ID,'_9_',fx_tables.[DATA_SOURCE]) 		WHEN Exception_Type = 'Timely Recording'			THEN CONCAT(ID,'_10_',fx_tables.[DATA_SOURCE]) 		WHEN Exception_Type = 'Dealer Limit'				THEN CONCAT(ID,'_500_',fx_tables.[DATA_SOURCE]) 		WHEN Exception_Type = 'Spot Reference Rate'			THEN CONCAT(ID,'_501_',fx_tables.[DATA_SOURCE]) 		WHEN Exception_Type = 'EOD Holdovers'				THEN CONCAT(ID,'_602_',fx_tables.[DATA_SOURCE]) 		WHEN Exception_Type = 'Large Trades'				THEN CONCAT(ID,'_603_',fx_tables.[DATA_SOURCE]) 		WHEN Exception_Type = 'Client Order Handling'		THEN CONCAT(ID,'_604_',fx_tables.[DATA_SOURCE])   		WHEN Exception_Type = 'Best Execution'				THEN CONCAT(ID,'_607_',fx_tables.[DATA_SOURCE]) 		WHEN Exception_Type = 'Order Request Return'		THEN CONCAT(ID,'_608_',fx_tables.[DATA_SOURCE]) 		WHEN Exception_Type = 'Counterparty Direction'		THEN CONCAT(ID,'_17_',fx_tables.[DATA_SOURCE]) 		WHEN Exception_Type = 'Gifts and Hospitality'		THEN CONCAT(ID,'_16_',fx_tables.[DATA_SOURCE]) 		--T-0-19375 		WHEN Exception_Type = 'Order Aggregation'		    THEN CONCAT(ID,'_611_',fx_tables.[DATA_SOURCE]) 		WHEN Exception_Type = 'Order Allocation'		    THEN CONCAT(ID,'_612_',fx_tables.[DATA_SOURCE]) 		--End of  T-0-19375 		--SURVG-563 		WHEN Exception_Type = 'Instructor to Dealer'		THEN CONCAT(ID,'_613_',fx_tables.[DATA_SOURCE]) 		--end of SURVG-563 	ELSE CONCAT(ID,'_?') 	END AS ID_VG_NUMBER INTO #fx_tables FROM (SELECT   		CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) as [ID], 		ex.[DEALER_NAME], 		'Spot Reference Rate' as [Exception_Type], 		ex.[DATA_SOURCE] 	FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE ex 	WHERE ex.[EXCEPTION_FLAG] = 1  	UNION ALL  	SELECT   		CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) as [ID], 		ex.[DEALER_NAME], 		'Best Execution' as [Exception_Type], 		ex.[DATA_SOURCE] 	FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE ex 	WHERE ex.[EXCEPTION_FLAG] = 1  	UNION ALL 	--SURVG-563 	 	SELECT   		CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) as [ID], 		ex.[DEALER_NAME], 		'Instructor to Dealer' as [Exception_Type], 		ex.[SOURCE] as [DATA_SOURCE] 	FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE ex 	WHERE ex.[EXCEPTION_FLAG] = 1  	 	--end of SURVG-563 	UNION ALL  	SELECT   		CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) as [ID], 		ex.[DEALER_NAME], 		'Timely Recording' as [Exception_Type], 		ex.[DATA_SOURCE] 	FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE ex 	WHERE ex.[EXCEPTION_FLAG] = 1  	UNION ALL  	SELECT   		CAST(ex.[ORDER_ID] AS VARCHAR(50)) as [ID], 		ex.[DEALER_NAME], 		'Order Request Return' as [Exception_Type], 		ex.[DATA_SOURCE] 	FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE ex 	WHERE ex.[EXCEPTION_FLAG] = 1  	UNION ALL  	SELECT   		CAST(ex.[ORDER_ID] AS VARCHAR(50)) as [ID], 		ex.[DEALER_NAME], 		'Large Trades' as [Exception_Type], 		ex.[DATA_SOURCE] 	FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE ex 	WHERE ex.[EXCEPTION_FLAG] = 1  	UNION ALL  	SELECT   		CAST(ex.[ORDER_ID] AS VARCHAR(50)) as [ID], 		ex.[DEALER_NAME], 		'Timely Execution' as [Exception_Type], 		ex.[DATA_SOURCE] 	FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE ex 	WHERE ex.[EXCEPTION_FLAG] = 1  	UNION ALL  	SELECT   		CAST(ex.[ORDER_ID] AS VARCHAR(50)) as [ID], 		ex.[DEALER_NAME], 		'EOD Holdovers' as [Exception_Type], 		ex.[DATA_SOURCE] 	FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE ex 	WHERE ex.[EXCEPTION_FLAG] = 1  	UNION ALL  	SELECT   		CAST(ex.[ORDER_ID] AS VARCHAR(50)) as [ID], 		ex.[DEALER_NAME], 		'Dealer Limit' as [Exception_Type], 		ex.[DATA_SOURCE] 	FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE ex 	WHERE ex.[EXCEPTION_FLAG] = 1  	UNION ALL  	SELECT           CAST(ex.[ORDER_ID] AS VARCHAR(50)) as [ID], 		ex.[DEALER_NAME],         'Client Order Handling' as [Exception_Type],         ex.[DATA_SOURCE]     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE ex 	WHERE ex.[EXCEPTION_FLAG] = 1  	UNION ALL  	SELECT   		CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) as [ID], 		ex.[TRADER_NAME] as DEALER_NAME, 		'Gifts and Hospitality' as [Exception_Type], 		ex.[DATA_SOURCE] 	FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE ex 	WHERE ex.[EXCEPTION_FLAG] = 1  	UNION ALL  	SELECT   		CAST(ex.[ORDER_ID] AS VARCHAR(50)) as [ID], 		ex.[TRADER_NAME] as DEALER_NAME, 		'Counterparty Direction' as [Exception_Type], 		ex.[DATA_SOURCE] 	FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_FX_TABLE ex 	WHERE ex.[EXCEPTION_FLAG] = 1  	--T-0-19375 	UNION ALL  	SELECT           CAST(ex.[FX_ORDER_ID] AS VARCHAR(50)) as [ID], 		ex.[DEALER_NAME],         'Order Aggregation' as [Exception_Type],         ex.[DATA_SOURCE]     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_FX_TABLE ex 	WHERE ex.[EXCEPTION] = 1  	UNION ALL  	SELECT   		CAST(ex.[TRADE_ID] AS VARCHAR(50)) as [ID], 		ex.[DEALER_NAME], 		'Order Allocation' as [Exception_Type], 		ex.[DATA_SOURCE] 	FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_FX_TABLE ex 	WHERE ex.[EXCEPTION] = 1  	--End of T-0-19375 	) fx_tables   --Creating all FX tables temp (for trades at order AND trade level) IF OBJECT_ID('tempdb..#fx_tables_2', 'U') IS NOT NULL DROP TABLE #fx_tables_2 SELECT   	fx_tables_2.[ID], 	'FX' as [DEALING_DESK], 	fx_tables_2.[DEALER_NAME], 	fx_tables_2.[Exception_Type], 	CASE 		WHEN Exception_Type = 'Out of Hours'	THEN CONCAT(ID,'_601_',fx_tables_2.[DATA_SOURCE]) 	ELSE CONCAT(ID,'_?') 	END AS ID_VG_NUMBER INTO #fx_tables_2 FROM (SELECT   		CONCAT(ISNULL(ex.ORDER_ID,0),'_',ISNULL(ex.TRANSACTION_NUMBER,0)) as [ID], 		ex.[DEALER_NAME], 		'Out of Hours' as [Exception_Type], 		ex.[DATA_SOURCE] 	FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE ex 	WHERE ex.[EXCEPTION_FLAG] = 1 	) fx_tables_2    IF OBJECT_ID('tempdb..#temp', 'U') IS NOT NULL DROP TABLE #temp SELECT  	tbl.[ID], 	tbl.[Dealing_Desk], 	dd.[DEALER_FULL_NAME] as DEALER_NAME, 	tbl.[Exception_Type], 	CASE 		WHEN tbl.Exception_Type = 'Timely Execution Exceptions'      THEN CONCAT(ID,'_9',timex.AUX) 		WHEN tbl.Exception_Type = 'Timely Execution'  		 and tbl.Dealing_Desk in ('Fixed Income','Leveraged Finance')  		 and timex2.DEALING_DESK in ('Fixed Income','Leveraged Finance')  																	 THEN CONCAT(ID,'_9',timex2.Exception_Type,timex2.TIMELY_EXECUTION_EXCEPTION) 		WHEN tbl.Exception_Type = 'Timely Execution'  		 and tbl.Dealing_Desk = 'Equity'  		 and timex2.DEALING_DESK = 'Equity'							 THEN CONCAT(ID,'_9',timex2.TIMELY_EXECUTION_EXCEPTION) 		WHEN tbl.Exception_Type = 'Order Priority Exceptions'        THEN CONCAT(ID,'_14') 		WHEN tbl.Exception_Type = 'Quote Exceptions'			     THEN CONCAT(ID,'_1') 		WHEN tbl.Exception_Type = 'Order Aggregation Exceptions'     THEN CONCAT(ID,'_13') 		WHEN tbl.Exception_Type = 'NWQ Exceptions'                   THEN CONCAT(ID,'_7') 		WHEN tbl.Exception_Type = 'Timely Recording Exceptions'      THEN CONCAT(ID,'_10') 		WHEN tbl.Exception_Type = 'Timely Recording'				 THEN CONCAT(ID,'_10') 		WHEN tbl.Exception_Type = 'Interfund Transfer Exceptions'    THEN CONCAT(ID,'_25') 		WHEN tbl.Exception_Type = 'Trades Without Orders Exceptions' THEN CONCAT(ID,'_41') 		WHEN tbl.Exception_Type = 'Amendments'						 THEN ID 		WHEN tbl.Exception_Type = 'Order Inflation'					 THEN CONCAT(ID,'_8')   		WHEN tbl.Exception_Type = 'Follow On Activity'				 THEN ID 		WHEN tbl.Exception_Type = 'Timely Release Exceptions'		 THEN CONCAT(ID,'_11')  		WHEN tbl.Exception_Type = 'Counterparty Direction'THEN CONCAT(ID,'_17') 		WHEN tbl.Exception_Type = 'Gifts and Hospitality'			 THEN CONCAT(ID,'_16') 		WHEN tbl.Exception_Type = 'Implementation Shortfall'		 THEN CONCAT(ID,'_IS') 		WHEN tbl.Exception_Type = 'High Low'					     THEN CONCAT(ID,'_HL') 		WHEN tbl.Exception_Type = 'Commission Increase'				 THEN CONCAT(ID,'_CI') 		WHEN tbl.Exception_Type = 'Extended Settlement'				 THEN CONCAT(ID,'_40') 	ELSE CONCAT(ID,'_?') 	END AS ID_VG_NUMBER INTO #temp  FROM (SELECT [order]								   as [ID],'DMG' as [Dealing_Desk],[DEALER], 'Timely Execution Exceptions'      as [Exception_Type]  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE WHERE EXCEPTION_FLAG = 1 	  UNION ALL																																					 					 	  SELECT vgop_dmg.[OP_ID]						   as [ID],'DMG' as [Dealing_Desk],[DEALER], 'Order Priority Exceptions'        as [Exception_Type]  FROM VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE op_dmg  	  left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc on oc.PM_ORD = op_dmg.[ORDER]																											 	  left join (SELECT DISTINCT OP_ID, [Trade]  FROM VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_DMG_TABLE) vgop_dmg on vgop_dmg.OP_ID = oc.TRD_ORD		 	  WHERE op_dmg.EXCEPTION_FLAG = 1																	 	  UNION ALL																																																						 	  SELECT COALESCE(vgoa_dmg2.[OA_ID],vgoa_dmg.OA_ID)as [ID],'DMG' as [Dealing_Desk],[DEALER], 'Order Aggregation Exceptions'     as [Exception_Type]  FROM VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_13_ORDER_AGGREGATION_DMG_TABLE oa_dmg  	  left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc on oc.PM_ORD = oa_dmg.[ORDER]									 	  left join (SELECT DISTINCT OA_ID, ORD_NUM, [Trade] FROM VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_DMG_TABLE) vgoa_dmg on vgoa_dmg.ORD_NUM = oc.TRD_ORD and vgoa_dmg.Trade is null	 	  left join (SELECT DISTINCT OA_ID, ORD_NUM, [Trade] FROM VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_DMG_TABLE) vgoa_dmg2 on vgoa_dmg2.ORD_NUM = oc.TRD_ORD and vgoa_dmg2.Trade is not null and vgoa_dmg2.Trade = oa_dmg.MFID 	  WHERE oa_dmg.EXCEPTION_FLAG = 1 	  UNION ALL																															 	  SELECT [MFID]									   as [ID],'DMG' as [Dealing_Desk],[DEALER], 'Quote Exceptions'                 as [Exception_Type]	 FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_01_QUOTE_EXCEPTION_DMG_TABLE WHERE EXCEPTION_FLAG = 1 	  UNION ALL											   									  														 	  SELECT [MFID]									   as [ID],'DMG' as [Dealing_Desk],[DEALER], 'NWQ Exceptions'                   as [Exception_Type]	 FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_07_NON_WINNING_QUOTE_DMG_TABLE WHERE EXCEPTION_FLAG = 1 	  UNION ALL											   									  														 	  SELECT [MFID]									   as [ID],'DMG' as [Dealing_Desk],[DEALER], 'Timely Recording Exceptions'      as [Exception_Type]	 FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_DMG_TABLE WHERE EXCEPTION_FLAG = 1 	  UNION ALL											   									  														 	  SELECT [MFID]									   as [ID],'DMG' as [Dealing_Desk],[DEALER], 'Interfund Transfer Exceptions'    as [Exception_Type]	 FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_25_INTERFUND_TRANSFER_DMG_TABLE WHERE EXCEPTION_FLAG = 1 	  UNION ALL											   									  														 	  SELECT [MFID]									   as [ID],'DMG' as [Dealing_Desk],[DEALER], 'Trades Without Orders Exceptions' as [Exception_Type]	 FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE WHERE EXCEPTION_FLAG = 1 	  UNION ALL																				  														 	  SELECT concat([MFID],'_15')					   as [ID],'DMG' as [Dealing_Desk],[DEALER], 'Amendments'                       as [Exception_Type]	 FROM VISTA_REPORTING.dbo.MASTER_VG_15_AMENDMENT_FLAG_DMG_TABLE WHERE EXCEPTION_FLAG = 1 	  UNION ALL											   									 														 	  SELECT [MULTI_FUND_ID]						   as [ID],		    [Dealing_Desk],[DEALER], 'Quote Exceptions'                 as [Exception_Type]	 FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE WHERE VG_01 = 1 	  UNION ALL											   				    				 														 	  SELECT [MULTI_FUND_ID]						   as [ID],		    [Dealing_Desk],[DEALER], 'NWQ Exceptions'                   as [Exception_Type]	 FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE WHERE VG_07 = 1 	  UNION ALL											   				    				 														 	  SELECT [MULTI_FUND_ID]						   as [ID],		    [Dealing_Desk],[DEALER], 'Timely Recording'				    as [Exception_Type]	 FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE WHERE VG_10 = 1 	  UNION ALL											   				    				 														 	  SELECT [MULTI_FUND_ID]						   as [ID],		    [Dealing_Desk],[DEALER], 'Interfund Transfer Exceptions'    as [Exception_Type]	 FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE WHERE VG_25 = 1 	  UNION ALL															    				 														 	  SELECT [ORD_NUM]     							   as [ID],		    [Dealing_Desk],[DEALER], 'Order Priority Exceptions'        as [Exception_Type]	 FROM VISTA_REPORTING.dbo.MASTER_ORDER_PRIORITY_TABLE WHERE VG_14 = 1 	  UNION ALL															    				 														 	  SELECT [ORD_NUM]     							   as [ID],		    [Dealing_Desk],[DEALER], 'Timely Release Exceptions'	    as [Exception_Type]	 FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER WHERE VG_11 = 1 	  UNION ALL															    				 														 	  SELECT [OA_ID]				 				   as [ID],		    [Dealing_Desk],[DEALER], 'Order Aggregation Exceptions'     as [Exception_Type]	 FROM VISTA_REPORTING.dbo.MASTER_TRD_ORDER_TABLE WHERE VG_13 = 1 and OA_ID is not null 	  UNION ALL															    																		 	  SELECT concat([MULTI_FUND_ID],'_15',TOUCH_COUNT) as [ID],		    [Dealing_Desk],[TRADER], 'Amendments'                       as [Exception_Type]	 FROM VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE  	  UNION ALL															    																		 	  SELECT [Client_Execution_ID]			    	   as [ID],		    [Dealing_Desk],[DEALER], 'Order Inflation'                  as [Exception_Type]	 FROM VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE  WHERE VG_08 = 1 and DEALING_DESK != 'Equity' 	  UNION ALL															    																		 	  SELECT concat([Client_Execution_ID],'_6',VG_06)  as [ID],		    [Dealing_Desk],[DEALER], 'Follow On Activity'               as [Exception_Type]	 FROM VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE  WHERE VG_06 = 1 and DEALING_DESK != 'Equity' 	  UNION ALL																																		 	  SELECT [MFID]			    					   as [ID],'DMG' as [Dealing_Desk],[DEALER], 'Gifts and Hospitality'            as [Exception_Type]	 FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE WHERE EXCEPTION_FLAG = 1 	  UNION ALL																																				  			 		    	  SELECT [ORDER]			    				   as [ID],'DMG' as [Dealing_Desk],[DEALER], 'Counterparty Direction'		    as [Exception_Type]	 FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE cpdir_dmg WHERE EXCEPTION_FLAG = 1 	  UNION ALL															    																						    	  SELECT [ORD_NUM]     							   as [ID],		    [Dealing_Desk],[DEALER], 'Timely Execution'			        as [Exception_Type]     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER WHERE (Coalesce(VG_09_policy,0) + Coalesce(vg_09_80_day,0) + Coalesce(vg_09_5_day,0)+ Coalesce(vg_09_40_day,0) + Coalesce(vg_09_20_day,0)+ Coalesce(vg_09_160_day,0)+ Coalesce(vg_09_10_day,0)) > 0 	  UNION ALL 	  SELECT  	  	CONCAT(Order_ID,'_',Row_ID) as [ID],		   	  	[Dealing_Desk],  		[Trader], 	  	'Implementation Shortfall' as [Exception_Type] 	  FROM VISTA_REPORTING.dbo.IMPLEMENTATION_SHORTFALL_EQ  	  WHERE [IM_EXCEPTION] > 0 	  UNION ALL 	  SELECT  	  	CAST([MULTI_FUND_ID] as varchar(30)) as [ID],		   	  	[Dealing_Desk],  		[DEALER], 	  	'Extended Settlement' as [Exception_Type] 	  FROM VISTA_REPORTING.dbo.EXTENDED_SETTLEMENTS_EQ  	  WHERE [VG_40] > 0 	  UNION ALL 	  SELECT  	  	CAST([MULTI_FUND_ID] as varchar(30)) as [ID],		   	  	[Dealing_Desk],  		[DEALER], 	  	'Commission Increase' as [Exception_Type] 	  FROM VISTA_REPORTING.dbo.COMMISSIONS_INCREASE_EQ 	  WHERE [CI_EXCEPTION] > 0 	  UNION ALL 	  SELECT  	  	CONCAT([Order ID],'_',ID) as [ID],		   	  	[Dealing_Desk],  		[Trader], 	  	'High Low' as [Exception_Type]   	  FROM VISTA_REPORTING.dbo.MARKET_HIGH_LOW_EQ 	  WHERE [HL_EXCEPTION] > 0 	  ) tbl  left join (SELECT [Order], AUX FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE) timex  on timex.[ORDER] = tbl.id and tbl.Dealing_Desk = 'DMG' left join (SELECT ORD_NUM, null as Exception_Type, DEALING_DESK, TIMELY_EXECUTION_EXCEPTION FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_EQ_TABLE 		   UNION ALL   		   SELECT ORD_NUM, Exception_Type, Dealing_Desk, TIMELY_EXECUTION_EXCEPTION FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE 		   UNION ALL   		   SELECT ORD_NUM, Exception_Type, Dealing_Desk, TIMELY_EXECUTION_EXCEPTION FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_LL_TABLE) timex2  on timex2.[ORD_NUM] = tbl.id and tbl.Dealing_Desk = timex2.DEALING_DESK and tbl.Exception_Type = 'Timely Execution' and timex2.TIMELY_EXECUTION_EXCEPTION > 0 left join (SELECT ORD_NUM, CONVERT(varchar,ID) as IS_ID FROM VISTA_STAGING.dbo.VG_IMPLEMENTATION_SHORTFALL_EQ_TABLE) is_eq  on CAST(is_eq.[ORD_NUM] as varchar(40)) = tbl.id and tbl.Exception_Type = 'Implementation Shortfall' left join (SELECT ORD_NUM, CONVERT(varchar,ID) as ML_ID FROM VISTA_STAGING.dbo.VG_MARKET_HIGH_LOW_TABLE) ml_eq  on CAST(ml_eq.[ORD_NUM] as varchar(40)) = tbl.id and tbl.Exception_Type = 'High Low' left join (SELECT INITIALS, FULL_NAME as DEALER_FULL_NAME FROM VISTA_REPORTING.DBO.DEALER_AND_DESK) dd on tbl.DEALER = dd.INITIALS  IF OBJECT_ID('tempdb..#master_temp', 'U') IS NOT NULL DROP TABLE #master_temp SELECT 	tmp.* INTO #master_temp FROM #temp tmp UNION ALL SELECT * FROM #cash_tables UNION ALL SELECT * FROM #cash_tables_2 UNION ALL SELECT * FROM #fx_tables UNION ALL SELECT * FROM #fx_tables_2  IF OBJECT_ID('VISTA_REPORTING.DBO.MASTER_EXCEPTION_COUNT_TABLE', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.DBO.MASTER_EXCEPTION_COUNT_TABLE SELECT  	mt.ID,  	mt.ID_VG_NUMBER, 	mt.Dealing_Desk as DEALING_DESK, 	mt.DEALER_NAME,  	up.REVIEWER_ID, 	mt.Exception_Type as EXCEPTION_TYPE INTO VISTA_REPORTING.DBO.MASTER_EXCEPTION_COUNT_TABLE FROM #master_temp mt left join (SELECT DISTINCT REVIEWER_ID, DEALING_DESK, DEALER_INITIALS, DATE_FROM, DATE_TO FROM VISTA_REPORTING.dbo.USER_RELATIONSHIP) up on mt.DEALER_NAME = up.DEALER_INITIALS and mt.Dealing_Desk = up.DEALING_DESK and up.DATE_TO = '2099-12-31 00:00:00.000'   END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: MASTER_EXECUTIVE_SUMMARY CreateDate: 2021-11-26 17:45:05.000 ModifyDate: 2023-06-20 12:25:24.780 --- DEFINITION START ---   CREATE PROCEDURE [dbo].[MASTER_EXECUTIVE_SUMMARY]  AS BEGIN  -- ***************VERSION CONTROL***************  --SURVG-497 - brougt up temp tables to use in cash temp tables joins to extract trade date column from code   --2021-11-26 - created for jira --SURVG-497 - Changed create date to trade date to align with DMC reports -- Added trade status flag to exclude cancelled orders/trades within master executive summary dashboard in the frontend  --2022-01-27, Matej Miter; Created for Jira: --SURVG-563 - New Cash Report Instructor to dealer 2022  --2023-02-16 Matej Miter: Created for Jira: --SURVG-779 - Changed place of temp_al_trades and temp_pm_orders tables to use their records within cash and fx vg tables for trade date  -- Throughout cash tables added coalesce for taking trade date from multiple sources rather than only from cash trades   --2023-02-16 Matej Miter: Created for Jira: --SURVG-785 - For previous ticket above change the join to correct for all exceptions on order level  --2023-06-20 Matej Miter - created for Jira: --SURVG-835 - Changing CM to FX to align with the dealing desk and get proper date out and show in the frontend  -- *************************************  IF OBJECT_ID('tempdb..#temp_cash_trades', 'U') IS NOT NULL DROP TABLE #temp_cash_trades SELECT DISTINCT  	ORDER_ID,  	TRANSACTION_NUMBER,  	DEALER_NAME_DECODE,  	DEALER_NAME,  	PRODUCT,  	BANK,  	BUSINESS_GROUP,  	TRADE_DATE,  	PULL_DATE  INTO #temp_cash_trades FROM VISTA_REPORTING.dbo.CASH_TRADES   IF OBJECT_ID('tempdb..#temp_cash_orders', 'U') IS NOT NULL DROP TABLE #temp_cash_orders SELECT DISTINCT  	ORDER_ID,  	PRODUCT,  	PRODUCT_TYPE,  	BUSINESS_GROUP,  	TRADE_DATE,  	INSTRUCTION_STATUS_DECODE, 	PULL_DATE INTO #temp_cash_orders FROM VISTA_REPORTING.dbo.CASH_ORDERS   --END of SURVG-497  --SURVG-779  IF OBJECT_ID('tempdb..#temp_AL_trades', 'U') IS NOT NULL DROP TABLE #temp_AL_trades SELECT DISTINCT  	t.ORD_NUM,  	t.MULTI_FUND_ID,  	t.TRD_TRADER,  	t.TRD_COUNTERPARTY,  	t.FUND,  	t.TRD_EX_BROKER_CODE,  	t.TRD_TRADE_DATE,  	t.PULL_DATE, 	pr.INST_TYPE INTO #temp_AL_trades FROM VISTA_REPORTING.dbo.TRADES t LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID = t.MULTI_FUND_ID --WHERE pr.DEALING_DESK in ('CASH', 'FX')   IF OBJECT_ID('tempdb..#temp_pm_orders', 'U') IS NOT NULL DROP TABLE #temp_pm_orders SELECT DISTINCT  	ORD_NUM,  	OPEN_DATE,  	AUTH_TIME,  	PULL_DATE, 	STATUS INTO #temp_pm_orders FROM VISTA_REPORTING.dbo.PM_ORDERS --WHERE DEALING_DESK in ('CASH', 'FX')  --End of SURVG-779  --SURVG-497 - Added temp tables cash trades and orders to extract appropriate trade date for temp_vg_tables_cash IF OBJECT_ID('tempdb..#temp_vg_tables_cash', 'U') IS NOT NULL DROP TABLE #temp_vg_tables_cash SELECT DISTINCT          CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) AS [ID],         'MFID' AS ID_TYPE,          'Timely Recording RR' AS [Exception_Type], 		--Trade date instade of create date to align with DMC CASH reports         ctr.TRADE_DATE AS [CREATE_DATE],         ex.[EXCEPTION_FLAG],         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)),'_10_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 		--Adding Trade status flag to align with aggregator reports 		CASE WHEN ex.[TRANSACTION_STATUS] in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG INTO #temp_vg_tables_cash FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_RR_TABLE ex  --Added left join to cash trades to extract trade date and use it within frontend left join #temp_cash_trades ctr on ctr.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER         UNION ALL   SELECT DISTINCT         CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) AS [ID],         'MFID' AS ID_TYPE,          'Timely Recording MM' AS [Exception_Type], 		--Trade date instade of create date to align with DMC CASH reports 		--SURVG-779         COALESCE(ctr.TRADE_DATE,TRY_CONVERt(datetime,ex.TRADE_DATE,103)) AS [CREATE_DATE], 		--END of SURVG-779 		ex.[EXCEPTION_FLAG],         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)),'_10_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 		--Adding Trade status flag to align with aggregator reports 		CASE WHEN ex.[TRANSACTION_STATUS] in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE ex --Added left join to cash trades to extract trade date and use it within frontend left join #temp_cash_trades ctr on ctr.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER   UNION ALL  SELECT DISTINCT         CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) AS [ID],         'MFID' AS ID_TYPE,          'Best Execution RR' AS [Exception_Type],         --Trade date instade of create date to align with DMC CASH reports         ctr.TRADE_DATE AS [CREATE_DATE], 		ex.[EXCEPTION_FLAG],         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)),'_607_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 		--Adding Trade status flag to align with aggregator reports 		CASE WHEN ex.[TRANSACTION_STATUS] in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR_TABLE ex --Added left join to cash trades to extract trade date and use it within frontend left join #temp_cash_trades ctr on ctr.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER  UNION ALL  SELECT DISTINCT         CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) AS [ID],         'MFID' AS ID_TYPE,          'Best Execution MM' AS [Exception_Type],         --Trade date instade of create date to align with DMC CASH reports         COALESCE(ctr.[TRADE_DATE],TRY_CONVERt(datetime,ex.TRADE_DATE,103)) AS [CREATE_DATE], 		ex.[EXCEPTION_FLAG],         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)),'_607_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 		--Adding Trade status flag to align with aggregator reports 		CASE WHEN ex.[TRANSACTION_STATUS] in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE ex --Added left join to cash trades to extract trade date and use it within frontend left join #temp_cash_trades ctr on ctr.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER  --SURVG-563-------------------------------------------------------  UNION ALL  SELECT DISTINCT         CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) AS [ID],         'MFID' AS ID_TYPE,          'Instructor to Dealer RR' AS [Exception_Type],         --Trade date instade of create date to align with DMC CASH reports         ctr.TRADE_DATE AS [CREATE_DATE], 		ex.[EXCEPTION_FLAG],         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[SOURCE] as [DATA_SOURCE], 		CONCAT(CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)),'_613_',ex.[SOURCE]) AS ID_VG_NUMBER, 		--Adding Trade status flag to align with aggregator reports 		CASE WHEN ex.[TRANSACTION_STATUS] in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE ex --Added left join to cash trades to extract trade date and use it within frontend left join #temp_cash_trades ctr on ctr.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER  UNION ALL  SELECT DISTINCT         CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) AS [ID],         'MFID' AS ID_TYPE,          'Instructor to Dealer MM' AS [Exception_Type],         --Trade date instade of create date to align with DMC CASH reports         COALESCE(ctr.[TRADE_DATE],TRY_CONVERt(datetime,ex.TRADE_DATE,103)) AS [CREATE_DATE], 		ex.[EXCEPTION_FLAG],         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[SOURCE] as [DATA_SOURCE], 		CONCAT(CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)),'_613_',ex.[SOURCE]) AS ID_VG_NUMBER, 		--Adding Trade status flag to align with aggregator reports 		CASE WHEN ex.[TRANSACTION_STATUS] in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE ex --Added left join to cash trades to extract trade date and use it within frontend left join #temp_cash_trades ctr on ctr.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER  --End of SURVG-563--------------------------------------------------------  UNION ALL  SELECT DISTINCT         CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) AS [ID],         'MFID' AS ID_TYPE,          'TA Knockback' AS [Exception_Type], 		--Trade date instade of create date to align with DMC CASH reports         ctr.TRADE_DATE AS [CREATE_DATE], 		ex.[EXCEPTION_FLAG],         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)),'_608_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 		--Adding Trade status flag to align with aggregator reports 		0 as TRADE_STATUS_FLAG FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_608_TA_KNOCKBACK_CASH_TABLE ex --Added left join to cash trades to extract trade date and use it within frontend left join #temp_cash_trades ctr on ctr.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER    UNION ALL  SELECT DISTINCT         CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) AS [ID],         'MFID' AS ID_TYPE,          'Deposits Reference Rate' AS [Exception_Type],         --Trade date instade of create date to align with DMC CASH reports 		--SURVG-779         COALESCE(ctr.TRADE_DATE,TRY_CONVERt(datetime,ex.TRADE_DATE,103)) AS [CREATE_DATE], 		--END of SURVG-779 		CASE WHEN ex.CRR_EXCEPTION = 'Exception' then 1 else 0 END as [EXCEPTION_FLAG],         'A' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)),'_609_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 		--Adding Trade status flag to align with aggregator reports 		CASE WHEN ex.[TRANSACTION_STATUS] in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE ex LEFT JOIN Vista_Reporting.dbo.MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE ex2 ON ex2.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER  --Added left join to cash trades to extract trade date and use it within frontend left join #temp_cash_trades ctr on ctr.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER    UNION ALL  SELECT DISTINCT         CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) AS [ID],         'MFID' AS ID_TYPE,          'CP, CD, TBills, Cancellations & Amendments' AS [Exception_Type],         --Trade date instade of create date to align with DMC CASH reports         COALESCE(ctr.[TRADE_DATE],case when CHARINDEX('|',ex.TRADE_DATE) = 0 THEN  TRY_CONVERt(datetime,ex.TRADE_DATE,103) ELSE TRY_CONVERt(datetime,REPLACE(SUBSTRING(ex.TRADE_DATE,1,CHARINDEX('|',ex.TRADE_DATE)),'|',''),103) END) AS [CREATE_DATE],         ex.[EXCEPTION_FLAG],         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)),'_610',ex.[TOUCH_COUNT]) AS ID_VG_NUMBER, 		--Adding Trade status flag to align with aggregator reports 		0 as TRADE_STATUS_FLAG FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE ex --Added left join to cash trades to extract trade date and use it within frontend left join #temp_cash_trades ctr on ctr.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER  UNION ALL  SELECT DISTINCT         CAST(ex.[ORDER_ID] AS VARCHAR(50)) AS [ID],         'PM_ORD' AS ID_TYPE,          'Large Trades' AS [Exception_Type], 		--Trade date orders instade of create date to align with DMC CASH reports 		--SURVG-779 		coalesce(co.TRADE_DATE,TRY_CONVERt(datetime,ex.TRADE_DATE,103)) as [CREATE_DATE], 		--END of SURVG-779         ex.[EXCEPTION_FLAG],         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_603_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 		--Adding Trade status flag to align with aggregator reports 		CASE WHEN ex.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') or co.[INSTRUCTION_STATUS_DECODE] in ('Deleted-Agreed Initiator') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_CASH_TABLE ex --Added left join to cash orders to extract trade date and use it within frontend left join #temp_cash_orders co on co.[ORDER_ID] = ex.[ORDER_ID]    UNION ALL  SELECT DISTINCT         CAST(ex.[ORDER_ID] AS VARCHAR(50)) AS [ID],         'PM_ORD' AS ID_TYPE,          'Timely Execution RR' AS [Exception_Type], 		--Trade date orders instade of create date to align with DMC CASH reports 		co.TRADE_DATE AS [CREATE_DATE],         ex.[EXCEPTION_FLAG],         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_9_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 		--Adding Trade status flag to align with aggregator reports 		CASE WHEN ex.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') or co.[INSTRUCTION_STATUS_DECODE] in ('Deleted-Agreed Initiator') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_RR_TABLE ex --Added left join to cash orders to extract trade date and use it within frontend left join #temp_cash_orders co on co.[ORDER_ID] = ex.[ORDER_ID]  UNION ALL  SELECT DISTINCT         CAST(ex.[ORDER_ID] AS VARCHAR(50)) AS [ID],         'PM_ORD' AS ID_TYPE,          'Timely Execution MM' AS [Exception_Type],         --Trade date orders instade of create date to align with DMC CASH reports 		--SURVG-779 		COALESCE(co.TRADE_DATE,TRY_CONVERt(datetime,ex.TRADE_DATE,103),alt.TRD_TRADE_DATE) AS [CREATE_DATE], 		--END of SURVG-779         ex.[EXCEPTION_FLAG],         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_9_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 		--Adding Trade status flag to align with aggregator reports 		CASE WHEN ex.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') or co.[INSTRUCTION_STATUS_DECODE] in ('Deleted-Agreed Initiator') or pm.[STATUS] = 'C' THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE ex --Added left join to cash orders to extract trade date and use it within frontend, additionally added pm orders to extract cancelled status left join #temp_cash_orders co on co.[ORDER_ID] = ex.[ORDER_ID] left join (SELECT DISTINCT ORD_NUM, OPEN_DATE, [STATUS] FROM VISTA_REPORTING.dbo.PM_ORDERS) pm 	on ex.[ORDER_ID] = pm.[ORD_NUM] and ex.[DATA_SOURCE] = 'AL'   --SURVG-779 --SURVG-785 left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on oc.PM_ORD = ex.ORDER_ID left join (select max(TRD_TRADE_DATE) as TRD_TRADE_DATE,ORD_NUM from #temp_AL_trades group by ORD_NUM) alt on alt.ORD_NUM = oc.TRD_ORD	 --End of SURVG-779 --End of SURVG-785  UNION ALL  SELECT DISTINCT         CAST(ex.[ORDER_ID] AS VARCHAR(50)) AS [ID],         'PM_ORD' AS ID_TYPE,          'EOD Holdovers' AS [Exception_Type],         --Trade date orders instade of create date to align with DMC CASH reports 		--SURVG-779 		COALESCE(co.TRADE_DATE,TRY_CONVERt(datetime,ex.TRADE_DATE,103),alt.TRD_TRADE_DATE) AS [CREATE_DATE], 		--End of SURVG-779         ex.[EXCEPTION_FLAG],         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_602_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 		--Adding Trade status flag to align with aggregator reports 		CASE WHEN ex.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') or co.[INSTRUCTION_STATUS_DECODE] in ('Deleted-Agreed Initiator') or pm.[STATUS] = 'C' THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_CASH_TABLE ex --Added left join to cash orders to extract trade date and use it within frontend, additionally added pm orders to extract cancelled status left join #temp_cash_orders co on co.[ORDER_ID] = ex.[ORDER_ID] left join (SELECT DISTINCT ORD_NUM, OPEN_DATE, [STATUS] FROM VISTA_REPORTING.dbo.PM_ORDERS) pm 	on ex.[ORDER_ID] = pm.[ORD_NUM] and ex.[DATA_SOURCE] = 'AL' --SURVG-785 --SURVG-779 left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on oc.PM_ORD = ex.ORDER_ID left join (select max(TRD_TRADE_DATE) as TRD_TRADE_DATE,ORD_NUM from #temp_AL_trades group by ORD_NUM) alt on alt.ORD_NUM = oc.TRD_ORD	 --End of SURVG-779 --End of SURVG-785   UNION ALL  SELECT DISTINCT         CAST(ex.[ORDER_ID] AS VARCHAR(50)) AS [ID],         'PM_ORD' AS ID_TYPE,          'Client Order Handling RR' AS [Exception_Type],         --Trade date orders instade of create date to align with DMC CASH reports 		co.TRADE_DATE AS [CREATE_DATE],         ex.[EXCEPTION_FLAG],         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_604_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 		--Adding Trade status flag to align with aggregator reports 		CASE WHEN ex.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') or co.[INSTRUCTION_STATUS_DECODE] in ('Deleted-Agreed Initiator') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE ex --Added left join to cash orders to extract trade date and use it within frontend left join #temp_cash_orders co on co.[ORDER_ID] = ex.[ORDER_ID]  UNION ALL  SELECT DISTINCT         CAST(ex.[ORDER_ID] AS VARCHAR(50)) AS [ID],         'PM_ORD' AS ID_TYPE,          'Client Order Handling MM' AS [Exception_Type],         --Trade date orders instade of create date to align with DMC CASH reports 		--SURVG-779 		COALESCE(co.TRADE_DATE,TRY_CONVERt(datetime,ex.TRADE_DATE,103),alt.TRD_TRADE_DATE) AS [CREATE_DATE], 		--End of SURVG-779         ex.[EXCEPTION_FLAG],         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_604_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 		--Adding Trade status flag to align with aggregator reports 		CASE WHEN ex.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') or co.[INSTRUCTION_STATUS_DECODE] in ('Deleted-Agreed Initiator') or pm.[STATUS] = 'C' THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE ex --Added left join to cash orders to extract trade date and use it within frontend left join #temp_cash_orders co on co.[ORDER_ID] = ex.[ORDER_ID] left join (SELECT DISTINCT ORD_NUM, OPEN_DATE, [STATUS] FROM VISTA_REPORTING.dbo.PM_ORDERS) pm 	on ex.[ORDER_ID] = pm.[ORD_NUM] and ex.[DATA_SOURCE] = 'AL' --SURVG-779 --SURVG-785 left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on oc.PM_ORD = ex.ORDER_ID left join (select max(TRD_TRADE_DATE) as TRD_TRADE_DATE,ORD_NUM from #temp_AL_trades group by ORD_NUM) alt on alt.ORD_NUM = oc.TRD_ORD	 --End of SURVG-779 --End of SURVG-785  UNION ALL  SELECT DISTINCT         CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) AS [ID],         'MFID' AS ID_TYPE,          'Gifts and Hospitality' AS [Exception_Type], 		ex.[CREATE_DATE],         ex.[EXCEPTION_FLAG],         '' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)),'_16_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 		--Adding Trade status flag to align with aggregator reports 		0 as TRADE_STATUS_FLAG FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE ex       UNION ALL  SELECT DISTINCT         CAST(ex.[ORDER_ID] AS VARCHAR(50)) AS [ID],         'PM_ORD' AS ID_TYPE,          'Counterparty Direction' AS [Exception_Type],         ex.[CREATE_DATE],         ex.[EXCEPTION_FLAG],         '' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_17_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 		--Adding Trade status flag to align with aggregator reports 		0 as TRADE_STATUS_FLAG FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE ex  UNION ALL   SELECT DISTINCT         CAST(ex.[ORDER_ID] AS VARCHAR(50)) AS [ID],         'PM_ORD' AS ID_TYPE,          'Order Aggregation RR' AS [Exception_Type], 		--Trade date instead of create date to align with DMC CASH reports 		case when CHARINDEX('|',ex.TRADE_DATE) = 0 THEN  TRY_CONVERt(datetime,ex.TRADE_DATE,103) ELSE TRY_CONVERt(datetime,REPLACE(SUBSTRING(ex.TRADE_DATE,1,CHARINDEX('|',ex.TRADE_DATE)),'|',''),103) END AS [CREATE_DATE],         ex.EXCEPTION,         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_611_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 		--Adding Trade status flag to align with aggregator reports 		CASE WHEN ex.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') 			   or co.[INSTRUCTION_STATUS_DECODE] in ('Deleted-Agreed Initiator') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_RR_TABLE ex --Adding left join to cash orders to extract instruction status decode field for cancelled orders left join #temp_cash_orders co on co.[ORDER_ID] = ex.[ORDER_ID] and ex.[ORDER_ID] is not null and ex.[DATA_SOURCE] = 'CM'  UNION ALL   SELECT DISTINCT         CAST(ex.[ORDER_ID] AS VARCHAR(50)) AS [ID],         'PM_ORD' AS ID_TYPE,          'Order Aggregation MM' AS [Exception_Type], 		--Trade date instead of create date to align with DMC CASH reports 		case when CHARINDEX('|',ex.TRADE_DATE) = 0 THEN  TRY_CONVERt(datetime,ex.TRADE_DATE,103) ELSE TRY_CONVERt(datetime,REPLACE(SUBSTRING(ex.TRADE_DATE,1,CHARINDEX('|',ex.TRADE_DATE)),'|',''),103) END AS [CREATE_DATE],         ex.EXCEPTION,         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_611_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 		--Adding Trade status flag to align with aggregator reports 		CASE WHEN ex.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') 			   or co.[INSTRUCTION_STATUS_DECODE] in ('Deleted-Agreed Initiator') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_MM_TABLE ex --Adding left join to cash orders to extract instruction status decode field for cancelled orders left join #temp_cash_orders co on co.[ORDER_ID] = ex.[ORDER_ID] and ex.[ORDER_ID] is not null and ex.[DATA_SOURCE] = 'CM'   UNION ALL   SELECT DISTINCT         CAST(ex.TRANSACTION_NUMBER AS VARCHAR(50)) AS [ID],         'MFID' AS ID_TYPE,          'Order Allocation RR' AS [Exception_Type], 		--Trade date instead of create date to align with DMC CASH reports 		ctr.TRADE_DATE AS [CREATE_DATE],         ex.EXCEPTION,         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_',CAST(ex.TRANSACTION_NUMBER AS VARCHAR(50)),'_612_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 		--Adding Trade status flag to align with aggregator reports 		CASE WHEN ex.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') 			   or co.[INSTRUCTION_STATUS_DECODE] in ('Deleted-Agreed Initiator') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_RR_TABLE ex --Added left join to cash trades to extract trade date and use it within frontend left join #temp_cash_trades ctr on ctr.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER --Adding left join to cash orders to extract instruction status decode field for cancelled orders left join #temp_cash_orders co on co.[ORDER_ID] = ex.[ORDER_ID] and ex.[ORDER_ID] is not null and ex.[DATA_SOURCE] = 'CM'  UNION ALL   SELECT DISTINCT         CAST(ex.TRANSACTION_NUMBER AS VARCHAR(50)) AS [ID],         'MFID' AS ID_TYPE,          'Order Allocation MM' AS [Exception_Type],         --Trade date instead of create date to align with DMC CASH reports 		--SURVG-779 		COALESCE(ctr.TRADE_DATE,TRY_CONVERt(datetime,ex.TRADE_DATE,103)) AS [CREATE_DATE], 		--End of SURVG-779         ex.EXCEPTION,         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_',CAST(ex.TRANSACTION_NUMBER AS VARCHAR(50)),'_612_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 		--Adding Trade status flag to align with aggregator reports 		CASE WHEN ex.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') 			   or co.[INSTRUCTION_STATUS_DECODE] in ('Deleted-Agreed Initiator') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_MM_TABLE ex --Added left join to cash trades to extract trade date and use it within frontend left join #temp_cash_trades ctr on ctr.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER --Adding left join to cash orders to extract instruction status decode field for cancelled orders left join #temp_cash_orders co on co.[ORDER_ID] = ex.[ORDER_ID] and ex.[ORDER_ID] is not null and ex.[DATA_SOURCE] = 'CM'  --removed cash trades and cash orders table here and brought them before vg cash tables in order to use trade dates --END of SURVG-497  --Because there are null order id's in the master table it means the ID_VG_NUMBERS seem improperly formatted in the final table  --because they come through as _12345_612_CM for example#   --removed al_trades and pm_orders tables here, and replaced them at top to use within cash tables for trade dates    IF OBJECT_ID('tempdb..#temp_pg_table', 'U') IS NOT NULL DROP TABLE #temp_pg_table SELECT DISTINCT  	FUND_ID,  	PORTFOLIO_GROUP_NAME INTO #temp_pg_table FROM VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY   --Creating all Cash tables temp (for trades at trade/order level) IF OBJECT_ID('tempdb..#cash_tables', 'U') IS NOT NULL DROP TABLE #cash_tables  SELECT DISTINCT 	vg.[ID], 	'Cash' AS [DEALING_DESK], 	vg.[ID_TYPE], 	CASE 		WHEN vg.[DATA_SOURCE] = 'CM' AND vg.[Exception_Type] IN ('Timely Execution','EOD Holdovers','Large Trades','Client Order Handling','Counterparty Direction', 'Order Aggregation') --, 'Order Allocation' 		THEN co.[TRADE_DATE] 		WHEN vg.[DATA_SOURCE] = 'CM' AND vg.[Exception_Type] NOT IN ('Timely Execution','EOD Holdovers','Large Trades','Client Order Handling','Counterparty Direction', 'Order Aggregation') --, 'Order Allocation' 		THEN ct.[TRADE_DATE] 		WHEN vg.[DATA_SOURCE] = 'AL' AND vg.[Exception_Type] IN ('Timely Execution','EOD Holdovers','Large Trades','Client Order Handling','Counterparty Direction', 'Order Aggregation') --, 'Order Allocation' 		THEN COALESCE(pm2.[OPEN_DATE],pm.[OPEN_DATE]) 		WHEN vg.[DATA_SOURCE] = 'AL' AND vg.[Exception_Type] NOT IN ('Timely Execution','EOD Holdovers','Large Trades','Client Order Handling','Counterparty Direction', 'Order Aggregation') --, 'Order Allocation' 		THEN COALESCE(t.[TRD_TRADE_DATE],t2.[TRD_TRADE_DATE]) 		ELSE NULL 	END AS [DATE], 	vg.[Exception_Type], 	CASE 		WHEN vg.[DATA_SOURCE] = 'CM' THEN CONCAT('CASH','/',COALESCE(ct.[PRODUCT],ct2.[PRODUCT],co.[PRODUCT])) 		WHEN vg.[DATA_SOURCE] = 'AL' THEN CONCAT('CASH','/',COALESCE(t.[INST_TYPE],t2.[INST_TYPE]))  		ELSE NULL 	END AS [Asset_Type/Subtype], 	CASE  		WHEN vg.[DATA_SOURCE] = 'CM' AND vg.[Exception_Type] IN ('Timely Execution','EOD Holdovers','Large Trades','Client Order Handling','Counterparty Direction','Order Aggregation', 'Order Aggregation') --, 'Order Allocation' 		THEN co.[PRODUCT] 		WHEN vg.[DATA_SOURCE] = 'CM' AND vg.[Exception_Type] NOT IN ('Timely Execution','EOD Holdovers','Large Trades','Client Order Handling','Counterparty Direction','Order Aggregation', 'Order Aggregation') --, 'Order Allocation' 		THEN COALESCE(ct.[PRODUCT],ct2.[PRODUCT],co.[PRODUCT]) 		WHEN vg.[DATA_SOURCE] = 'AL' THEN COALESCE(t.[INST_TYPE],t2.[INST_TYPE]) 		ELSE NULL 	END AS [INST_TYPE], 	CASE 		WHEN vg.[DATA_SOURCE] = 'CM' THEN COALESCE(ct.[BANK],ct2.[BANK]) 		WHEN vg.[DATA_SOURCE] = 'AL' THEN COALESCE(t.[TRD_COUNTERPARTY],t.[TRD_EX_BROKER_CODE],t2.[TRD_COUNTERPARTY],t2.[TRD_EX_BROKER_CODE]) 	END AS [CPTY], 	tdd.[INITIALS] AS [DEALER1], 	NULL AS [Execution_Type_Decode], --Not going to be utilised for Cash 	vg.[CREATE_DATE], 	vg.[EXCEPTION_FLAG], 	vg.[STATUS], 	TRIM(STR(DATEPART(YEAR,vg.[CREATE_DATE])) + '-' + FORMAT(vg.[CREATE_DATE],'MMM')) AS MONTH_YEAR,  	DATEPART(DAY,vg.[CREATE_DATE])      AS [CREATE_DATE_DAY], 	DATEPART(MONTH,vg.[CREATE_DATE])	as [CREATE_DATE_MONTH], 	FORMAT(vg.[CREATE_DATE],'MMM')      AS [CREATE_DATE_MONTH_NAME], 	DATEPART(q,vg.[CREATE_DATE])        AS [CREATE_DATE_QUARTER], 	DATEPART(year,vg.[CREATE_DATE])     AS [CREATE_DATE_YEAR], 	vg.ID_VG_NUMBER, 	tdd.[INITIALS] AS INITIALS, 	vg.[DEALER_NAME] AS [DEALER_FULL_NAME], 	tdd.[INITIALS] AS [DEALER], 	CASE 		WHEN vg.[DATA_SOURCE] = 'AL' AND COALESCE(pgt.[PORTFOLIO_GROUP_NAME],pgt2.[PORTFOLIO_GROUP_NAME]) = 'PCAP_PROD' THEN 'PRUCAP' 		WHEN vg.[DATA_SOURCE] = 'AL' AND COALESCE(pgt.[PORTFOLIO_GROUP_NAME],pgt2.[PORTFOLIO_GROUP_NAME]) = 'PPMG_PROD' THEN 'PPMG' 		WHEN vg.[DATA_SOURCE] = 'AL' AND COALESCE(pgt.[PORTFOLIO_GROUP_NAME],pgt2.[PORTFOLIO_GROUP_NAME]) in ('MG_PROD','MG_PCAP') THEN 'MAGIM' 		WHEN vg.[DATA_SOURCE] = 'CM' THEN  COALESCE(ct.[BUSINESS_GROUP],ct2.[BUSINESS_GROUP],co.[BUSINESS_GROUP]) 	ELSE NULL 	END AS [BUSINESS_GROUP] INTO #cash_tables FROM #temp_vg_tables_cash vg LEFT JOIN #temp_cash_trades ct ON vg.[ID_TYPE] = 'MFID' AND vg.[ID] = ct.[TRANSACTION_NUMBER] and vg.[DATA_SOURCE] = 'CM'  LEFT JOIN #temp_cash_trades ct2 ON vg.[ID_TYPE] = 'PM_ORD' AND vg.[ID] = ct2.[ORDER_ID] and vg.[DATA_SOURCE] = 'CM'  LEFT JOIN #temp_cash_orders co ON (vg.[ID] = co.[ORDER_ID] and vg.[ID_TYPE] = 'PM_ORD') and vg.[DATA_SOURCE] = 'CM' LEFT JOIN #temp_AL_trades t ON vg.[ID] = t.[MULTI_FUND_ID] and vg.[ID_TYPE] = 'MFID' and vg.[DATA_SOURCE] = 'AL'  LEFT JOIN #temp_AL_trades t2 ON vg.[ID] = t2.[ORD_NUM] and vg.[ID_TYPE] = 'PM_ORD' and vg.[DATA_SOURCE] = 'AL'  --LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, INST_TYPE, ORD_NUM  --			FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE WHERE DEALING_DESK = 'CASH') pr ON t.[MULTI_FUND_ID] = pr.[MULTI_FUND_ID] --LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, INST_TYPE, ORD_NUM  --			FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE WHERE DEALING_DESK = 'CASH') pr2 ON t2.[ORD_NUM] = pr2.[ORD_NUM]  LEFT JOIN #temp_pm_orders pm ON t.[ORD_NUM] = pm.[ORD_NUM] LEFT JOIN #temp_pm_orders pm2 ON vg.[ID_TYPE] = 'PM_ORD' AND vg.[ID] = pm2.[ORD_NUM] and vg.[DATA_SOURCE] = 'AL'  LEFT JOIN VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd ON vg.[DEALER_NAME] = tdd.[FULL_NAME] and tdd.[DEALING_DESK] = 'CASH' --AND CAST(COALESCE(ct.PULL_DATE,ct2.PULL_DATE,co.PULL_DATE,t.PULL_DATE,t2.PULL_DATE,pm.PULL_DATE,pm2.PULL_DATE) AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE) LEFT JOIN #temp_pg_table pgt ON t.[FUND] = pgt.[FUND_ID] LEFT JOIN #temp_pg_table pgt2 ON t2.[FUND] = pgt2.[FUND_ID] WHERE vg.TRADE_STATUS_FLAG != 1  --Part 1 for #cash_tables_2 --Creating a temp table to do some of the 'case whens' from #cash_tables_2 to try and speed up the run time IF OBJECT_ID('tempdb..#cash_case_when', 'U') IS NOT NULL DROP TABLE #cash_case_when; SELECT	DISTINCT CONCAT(ISNULL(ex.ORDER_ID,0),'_',ISNULL(ex.TRANSACTION_NUMBER,0)) AS [ID] ,		CASE WHEN ex.[DATA_SOURCE] = 'CM' AND ex.TRANSACTION_NUMBER is not null  			 THEN COALESCE(ct.TRADE_DATE,ct2.TRADE_DATE) 			 WHEN ex.[DATA_SOURCE] = 'CM' AND ex.ORDER_ID is not null  			 THEN co.TRADE_DATE 			 WHEN ex.[DATA_SOURCE] = 'AL' AND ex.TRANSACTION_NUMBER is not null  			 THEN COALESCE(t2.TRD_TRADE_DATE,t.TRD_TRADE_DATE) 			 WHEN ex.[DATA_SOURCE] = 'AL' AND ex.ORDER_ID is not null  			 THEN COALESCE(pm2.OPEN_DATE,pm.OPEN_DATE) 			 ELSE NULL 			 END AS [DATE] ,		CASE WHEN ex.[DATA_SOURCE] = 'CM'  			 THEN CONCAT('CASH','/',ct.[PRODUCT],ct2.[PRODUCT],co.[PRODUCT]) 			 WHEN ex.[DATA_SOURCE] = 'AL'  			 THEN CONCAT('CASH','/',t.[INST_TYPE],t2.[INST_TYPE])  			 ELSE NULL 			 END AS [Asset_Type/Subtype] ,		CASE WHEN ex.[DATA_SOURCE] = 'CM'  			 THEN COALESCE(ct.[PRODUCT],ct2.[PRODUCT],co.[PRODUCT]) 			 WHEN ex.[DATA_SOURCE] = 'AL'  			 THEN COALESCE(t.[INST_TYPE],t2.[INST_TYPE]) 			 ELSE NULL 			 END AS [INST_TYPE] ,		CASE WHEN ex.[DATA_SOURCE] = 'CM'  			 THEN COALESCE(ct.[BANK],ct2.[BANK]) 			 WHEN ex.[DATA_SOURCE] = 'AL'  			 THEN COALESCE(t.[TRD_COUNTERPARTY],t.[TRD_EX_BROKER_CODE],t2.[TRD_COUNTERPARTY],t2.[TRD_EX_BROKER_CODE]) 			 END AS [CPTY] ,		CASE WHEN ex.[DATA_SOURCE] = 'AL' AND COALESCE(pgt.[PORTFOLIO_GROUP_NAME],pgt2.[PORTFOLIO_GROUP_NAME]) = 'PCAP_PROD'  			 THEN 'PRUCAP' 			 WHEN ex.[DATA_SOURCE] = 'AL' AND COALESCE(pgt.[PORTFOLIO_GROUP_NAME],pgt2.[PORTFOLIO_GROUP_NAME]) = 'PPMG_PROD'  			 THEN 'PPMG' 			 WHEN ex.[DATA_SOURCE] = 'AL' AND COALESCE(pgt.[PORTFOLIO_GROUP_NAME],pgt2.[PORTFOLIO_GROUP_NAME]) in ('MG_PROD','MG_PCAP')  			 THEN 'MAGIM' 			 WHEN ex.[DATA_SOURCE] = 'CM'  			 THEN  COALESCE(ct.[BUSINESS_GROUP],ct2.[BUSINESS_GROUP],co.[BUSINESS_GROUP]) 			 ELSE NULL 			 END AS [BUSINESS_GROUP] INTO #cash_case_when FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_CASH_TABLE ex LEFT JOIN #temp_cash_trades ct 	on (ex.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER] and NULLIF(ex.[ORDER_ID],0) is NULL) LEFT JOIN #temp_cash_trades ct2 ON (ex.[ORDER_ID] = ct2.[ORDER_ID]) and ex.[DATA_SOURCE] = 'CM' LEFT JOIN #temp_cash_orders co 	on (ex.[ORDER_ID] = co.[ORDER_ID]) and ex.[DATA_SOURCE] = 'CM' LEFT JOIN #temp_AL_trades t ON (ex.[TRANSACTION_NUMBER] = t.[MULTI_FUND_ID] and NULLIF(ex.[ORDER_ID],0) is NULL) LEFT JOIN #temp_AL_trades t2 ON (ex.[ORDER_ID] = t2.[ORD_NUM]) and ex.[DATA_SOURCE] = 'AL' LEFT JOIN #temp_pm_orders pm ON t.[ORD_NUM] = pm.[ORD_NUM] LEFT JOIN #temp_pm_orders pm2 ON ex.[ORDER_ID] = pm2.[ORD_NUM] and ex.[DATA_SOURCE] = 'AL' LEFT JOIN #temp_pg_table pgt ON t.[FUND] = pgt.[FUND_ID] LEFT JOIN #temp_pg_table pgt2 ON t2.[FUND] = pgt2.[FUND_ID];   --SURVG-497 - Changing logic for all date related fields to take from Trade dates not create date --Part 2 for #cash_tables_2 --Creating all Cash tables temp (for trades at order AND trade level) IF OBJECT_ID('tempdb..#cash_tables_2', 'U') IS NOT NULL DROP TABLE #cash_tables_2 SELECT DISTINCT CONCAT(ISNULL(ex.ORDER_ID,0),'_',ISNULL(ex.TRANSACTION_NUMBER,0)) AS [ID], 	'Cash' AS [DEALING_DESK], 	'PM_ORD, MFID' AS ID_TYPE,  	cwc.[DATE], 	'Out of Hours' AS [Exception_Type], 	cwc.[Asset_Type/Subtype], 	cwc.[INST_TYPE], 	cwc.[CPTY], 	tdd.[INITIALS] AS [DEALER1], 	NULL AS [Execution_Type_Decode], 	COALESCE(co.TRADE_DATE,ct.TRADE_DATE,case when CHARINDEX('|',ex.TRADE_DATE) = 0 THEN  TRY_CONVERt(datetime,ex.TRADE_DATE,103) ELSE TRY_CONVERt(datetime,REPLACE(SUBSTRING(ex.TRADE_DATE,1,CHARINDEX('|',ex.TRADE_DATE)),'|',''),103) END,pm.OPEN_DATE) AS [CREATE_DATE], 	ex.[EXCEPTION_FLAG], 	'AB' AS [STATUS], 	CASE 			WHEN ex.[DATA_SOURCE] = 'CM' and ex.[ORDER_ID] is not null THEN TRIM(STR(DATEPART(YEAR,co.TRADE_DATE)) + '-' + FORMAT(co.TRADE_DATE,'MMM')) 			WHEN ex.[DATA_SOURCE] = 'CM' and ex.[ORDER_ID] is null		THEN TRIM(STR(DATEPART(YEAR,ct.TRADE_DATE)) + '-' + FORMAT(ct.TRADE_DATE,'MMM')) 			WHEN ex.[DATA_SOURCE] = 'AL' and ex.[ORDER_ID] is not null THEN TRIM(STR(DATEPART(YEAR,pm.OPEN_DATE)) + '-' + FORMAT(pm.OPEN_DATE,'MMM')) 			WHEN ex.[DATA_SOURCE] = 'AL' and ex.[ORDER_ID] is null		THEN TRIM(STR(DATEPART(YEAR,case when CHARINDEX('|',ex.TRADE_DATE) = 0  																		THEN  TRY_CONVERt(datetime,ex.TRADE_DATE,103)  																		ELSE TRY_CONVERt(datetime,REPLACE(SUBSTRING(ex.TRADE_DATE,1,CHARINDEX('|',ex.TRADE_DATE)),'|',''),103) END)) + '-' + FORMAT(case when CHARINDEX('|',ex.TRADE_DATE) = 0  																		THEN  TRY_CONVERt(datetime,ex.TRADE_DATE,103)  																		ELSE TRY_CONVERt(datetime,REPLACE(SUBSTRING(ex.TRADE_DATE,1,CHARINDEX('|',ex.TRADE_DATE)),'|',''),103) END,'MMM'))  		END AS MONTH_YEAR, 	CASE 			WHEN ex.[DATA_SOURCE] = 'CM' and ex.[ORDER_ID] is not null THEN DATEPART(DAY,co.TRADE_DATE) 			WHEN ex.[DATA_SOURCE] = 'CM' and ex.[ORDER_ID] is null		THEN DATEPART(DAY,ct.TRADE_DATE) 			WHEN ex.[DATA_SOURCE] = 'AL' and ex.[ORDER_ID] is not null THEN DATEPART(DAY,pm.OPEN_DATE) 			WHEN ex.[DATA_SOURCE] = 'AL' and ex.[ORDER_ID] is null	THEN DATEPART(DAY,case when CHARINDEX('|',ex.TRADE_DATE) = 0 THEN  TRY_CONVERt(datetime,ex.TRADE_DATE,103) ELSE TRY_CONVERt(datetime,REPLACE(SUBSTRING(ex.TRADE_DATE,1,CHARINDEX('|',ex.TRADE_DATE)),'|',''),103) END)	 		END AS [CREATE_DATE_DAY], 	CASE 			WHEN ex.[DATA_SOURCE] = 'CM' and ex.[ORDER_ID] is not null THEN DATEPART(MONTH,co.TRADE_DATE) 			WHEN ex.[DATA_SOURCE] = 'CM' and ex.[ORDER_ID] is null		THEN DATEPART(MONTH,ct.TRADE_DATE) 			WHEN ex.[DATA_SOURCE] = 'AL' and ex.[ORDER_ID] is not null THEN DATEPART(MONTH,pm.OPEN_DATE) 			WHEN ex.[DATA_SOURCE] = 'AL' and ex.[ORDER_ID] is null	THEN DATEPART(MONTH,case when CHARINDEX('|',ex.TRADE_DATE) = 0 THEN  TRY_CONVERt(datetime,ex.TRADE_DATE,103) ELSE TRY_CONVERt(datetime,REPLACE(SUBSTRING(ex.TRADE_DATE,1,CHARINDEX('|',ex.TRADE_DATE)),'|',''),103) END)	 		END AS [CREATE_DATE_MONTH], 	CASE 			WHEN ex.[DATA_SOURCE] = 'CM' and ex.[ORDER_ID] is not null THEN FORMAT(co.TRADE_DATE,'MMM') 			WHEN ex.[DATA_SOURCE] = 'CM' and ex.[ORDER_ID] is null		THEN FORMAT(ct.TRADE_DATE,'MMM') 			WHEN ex.[DATA_SOURCE] = 'AL' and ex.[ORDER_ID] is not null THEN FORMAT(pm.OPEN_DATE,'MMM') 			WHEN ex.[DATA_SOURCE] = 'AL' and ex.[ORDER_ID] is null	THEN FORMAT(case when CHARINDEX('|',ex.TRADE_DATE) = 0 THEN  TRY_CONVERt(datetime,ex.TRADE_DATE,103) ELSE TRY_CONVERt(datetime,REPLACE(SUBSTRING(ex.TRADE_DATE,1,CHARINDEX('|',ex.TRADE_DATE)),'|',''),103) END,'MMM') 		END AS [CREATE_DATE_MONTH_NAME], 	CASE 			WHEN ex.[DATA_SOURCE] = 'CM' and ex.[ORDER_ID] is not null THEN DATEPART(q,co.TRADE_DATE) 			WHEN ex.[DATA_SOURCE] = 'CM' and ex.[ORDER_ID] is null		THEN DATEPART(q,ct.TRADE_DATE) 			WHEN ex.[DATA_SOURCE] = 'AL' and ex.[ORDER_ID] is not null THEN DATEPART(q,pm.OPEN_DATE) 			WHEN ex.[DATA_SOURCE] = 'AL' and ex.[ORDER_ID] is null	THEN DATEPART(q,case when CHARINDEX('|',ex.TRADE_DATE) = 0 THEN  TRY_CONVERt(datetime,ex.TRADE_DATE,103) ELSE TRY_CONVERt(datetime,REPLACE(SUBSTRING(ex.TRADE_DATE,1,CHARINDEX('|',ex.TRADE_DATE)),'|',''),103) END)	 		END AS [CREATE_DATE_QUARTER], 		CASE 			WHEN ex.[DATA_SOURCE] = 'CM' and ex.[ORDER_ID] is not null THEN DATEPART(YEAR,co.TRADE_DATE) 			WHEN ex.[DATA_SOURCE] = 'CM' and ex.[ORDER_ID] is null		THEN DATEPART(YEAR,ct.TRADE_DATE) 			WHEN ex.[DATA_SOURCE] = 'AL' and ex.[ORDER_ID] is not null THEN DATEPART(YEAR,pm.OPEN_DATE) 			WHEN ex.[DATA_SOURCE] = 'AL' and ex.[ORDER_ID] is null	THEN DATEPART(YEAR,case when CHARINDEX('|',ex.TRADE_DATE) = 0 THEN  TRY_CONVERt(datetime,ex.TRADE_DATE,103) ELSE TRY_CONVERt(datetime,REPLACE(SUBSTRING(ex.TRADE_DATE,1,CHARINDEX('|',ex.TRADE_DATE)),'|',''),103) END)	 		END AS [CREATE_DATE_YEAR], 	CONCAT(CONCAT(ISNULL(ex.ORDER_ID,0),'_',ISNULL(ex.TRANSACTION_NUMBER,0)),'_601_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 	tdd.[INITIALS], 	ex.[DEALER_NAME] AS [DEALER_FULL_NAME], 	tdd.[INITIALS] AS [DEALER], 	cwc.[BUSINESS_GROUP] INTO #cash_tables_2 FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_CASH_TABLE ex LEFT JOIN #temp_AL_trades t ON (ex.[TRANSACTION_NUMBER] = t.[MULTI_FUND_ID] and NULLIF(ex.[ORDER_ID],0) is NULL) LEFT JOIN VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd 	on ex.[DEALER_NAME] = tdd.[FULL_NAME] and tdd.[DEALING_DESK] = 'CASH'  LEFT JOIN #cash_case_when cwc ON cwc.ID = CONCAT(ISNULL(ex.ORDER_ID,0),'_',ISNULL(ex.TRANSACTION_NUMBER,0)) LEFT JOIN #temp_cash_orders co on ex.[ORDER_ID] = co.[ORDER_ID] and ex.[ORDER_ID] is not null  LEFT JOIN #temp_cash_trades ct on ct.[TRANSACTION_NUMBER] = ex.[TRANSACTION_NUMBER] and ex.[TRANSACTION_NUMBER] is not null  LEFT JOIN #temp_pm_orders pm on ex.[ORDER_ID] = pm.[ORD_NUM]  where  (ex.[ORDER_ID] is not null and ex.[INSTRUCTION_STATUS] not in ('C', 'Cancelled', 'Deleted'))  or (ex.[ORDER_ID] is null and ex.[TRANSACTION_STATUS] not in ('C', 'Cancelled', 'Deleted')) or (co.[INSTRUCTION_STATUS_DECODE] not in ('Deleted-Agreed Initiator')) --End of SURVG-497  --SURVG-497 - brought up temp fx trades and orders table to be used before temp exception type tables  IF OBJECT_ID('tempdb..#temp_fx_trades', 'U') IS NOT NULL DROP TABLE #temp_fx_trades SELECT DISTINCT  	ORDER_ID,  	TRADE_ID,  	DEALT_BY,  	INSTRUCTION_TYPE,  	EXECUTED_BANK,  	NR_LEG_PRODUCT,  	TRADE_DATE,  	FR_LEG_PRODUCT,  	PULL_DATE INTO #temp_fx_trades FROM VISTA_REPORTING.dbo.FX_TRADES   IF OBJECT_ID('tempdb..#temp_fx_orders', 'U') IS NOT NULL DROP TABLE #temp_fx_orders SELECT DISTINCT  	FXM_ORDER_ID,  	INSTRUCTION_TYPE,  	BUSINESS_GROUP,  	ORDER_TRADE_DATE, 	INSTRUCTION_STATUS,  	PULL_DATE  INTO #temp_fx_orders	 FROM VISTA_REPORTING.dbo.FX_ORDERS   IF OBJECT_ID('tempdb..#temp_vg_tables_fx', 'U') IS NOT NULL DROP TABLE #temp_vg_tables_fx SELECT DISTINCT  		CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) AS [ID], 		'MFID' AS ID_TYPE,  		'Spot Reference Rate' AS [Exception_Type], 		--Changed create date logic 		COALESCE(fxt.[TRADE_DATE],t.[TRD_TRADE_DATE]) AS [CREATE_DATE], 		CASE WHEN ex.SRR_EXCEPTION = 'Exception' then 1 else 0 END as [EXCEPTION_FLAG], 		'A' AS [STATUS], 		ex.[DEALER_NAME] AS DEALER_NAME, 		ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)),'_501_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 		--Adding Trade status flag to remove cancelled orders and align with aggregator reports 		CASE WHEN ex.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG INTO #temp_vg_tables_fx FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE ex LEFT JOIN Vista_Reporting.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE ex2 ON ex2.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER  --Added left join to fx trades and all trades to extract trade date and use it within frontend LEFT JOIN #temp_fx_trades fxt on fxt.[TRADE_ID] = ex.TRANSACTION_NUMBER  left join #temp_al_trades t on t.[ORD_NUM] = ex.[ORDER_ID]   UNION ALL  SELECT DISTINCT 	CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) AS [ID], 	'MFID' AS ID_TYPE,  	'Best Execution' AS [Exception_Type], 	--Changed create date logic     COALESCE(fxt.[TRADE_DATE],t.[TRD_TRADE_DATE],case when CHARINDEX('|',ex.TRADE_DATE) = 0 THEN TRY_CONVERt(datetime,ex.TRADE_DATE,103) ELSE TRY_CONVERt(datetime,REPLACE(SUBSTRING(ex.TRADE_DATE,1,CHARINDEX('|',ex.TRADE_DATE)),'|',''),103) END) AS [CREATE_DATE], 	ex.[EXCEPTION_FLAG], 	'AB' AS [STATUS], 	ex.[DEALER_NAME] AS DEALER_NAME, 	ex.[DATA_SOURCE], 	CONCAT(CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)),'_607_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 	--Adding Trade status flag to remove cancelled orders and align with aggregator reports 	CASE WHEN ex.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE ex --Added left join to fx trades and all trades to extract trade date and use it within frontend LEFT JOIN #temp_fx_trades fxt on fxt.[TRADE_ID] = ex.TRANSACTION_NUMBER  LEFT JOIN #temp_al_trades t on t.[ORD_NUM] = ex.[ORDER_ID]     --SURVG-563-------------------------------------------------------------------  UNION ALL  SELECT DISTINCT 	CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) AS [ID], 	'MFID' AS ID_TYPE,  	'Instructor to Dealer' AS [Exception_Type], 	--Changed create date logic     COALESCE(fxt.[TRADE_DATE],t.[TRD_TRADE_DATE],case when CHARINDEX('|',ex.TRADE_DATE) = 0 THEN TRY_CONVERt(datetime,ex.TRADE_DATE,103) ELSE TRY_CONVERt(datetime,REPLACE(SUBSTRING(ex.TRADE_DATE,1,CHARINDEX('|',ex.TRADE_DATE)),'|',''),103) END) AS [CREATE_DATE], 	ex.[EXCEPTION_FLAG], 	'AB' AS [STATUS], 	ex.[DEALER_NAME] AS DEALER_NAME, 	ex.[SOURCE] as [DATA_SOURCE], 	CONCAT(CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)),'_613_',ex.[SOURCE]) AS ID_VG_NUMBER, 	--Adding Trade status flag to remove cancelled orders and align with aggregator reports 	CASE WHEN ex.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE ex --Added left join to fx trades and all trades to extract trade date and use it within frontend LEFT JOIN #temp_fx_trades fxt on fxt.[TRADE_ID] = ex.TRANSACTION_NUMBER  LEFT JOIN #temp_al_trades t on t.[ORD_NUM] = ex.[ORDER_ID]   --End of SURVG-563-------------------------------------------------------------------  UNION ALL  SELECT DISTINCT 	CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) AS [ID], 	'MFID' AS ID_TYPE,  	'Timely Recording' AS [Exception_Type], 	--Changed create date logic 	COALESCE(fxt.[TRADE_DATE],t.[TRD_TRADE_DATE]) AS [CREATE_DATE], 	ex.[EXCEPTION_FLAG], 	'AB' AS [STATUS], 	ex.[DEALER_NAME] AS DEALER_NAME, 	ex.[DATA_SOURCE], 	CONCAT(CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)),'_10_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 	--Adding Trade status flag to remove cancelled orders and align with aggregator reports 	CASE WHEN ex.[TRADE_STATUS] in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE ex --Added left join to fx trades and all trades to extract trade date and use it within frontend LEFT JOIN #temp_fx_trades fxt on fxt.[TRADE_ID] = ex.TRANSACTION_NUMBER  LEFT JOIN #temp_al_trades t on t.[ORD_NUM] = ex.[ORDER_ID]   UNION ALL  SELECT DISTINCT 	CAST(ex.[ORDER_ID] AS VARCHAR(50)) AS [ID], 	'PM_ORD' AS ID_TYPE,  	'Order Request Return' AS [Exception_Type], 	--Changed create date logic 	COALESCE(fxo.[ORDER_TRADE_DATE],pm.[OPEN_DATE]) AS [CREATE_DATE], 	ex.[EXCEPTION_FLAG], 	'AB' AS [STATUS], 	ex.[DEALER_NAME] AS DEALER_NAME, 	ex.[DATA_SOURCE], 	CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_608_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 	--Adding Trade status flag to remove cancelled orders and align with aggregator reports 	0 AS TRADE_STATUS_FLAG FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE ex --Added left join to fx orders and pm orders to extract trade date and use it within frontend left join #temp_fx_orders fxo on fxo.[FXM_ORDER_ID] = ex.[ORDER_ID] AND ex.[DATA_SOURCE] = 'FX' left join #temp_pm_orders pm on ex.[ORDER_ID] = pm.[ORD_NUM] and ex.[DATA_SOURCE] = 'AL'  UNION ALL  SELECT DISTINCT 	CAST(ex.[ORDER_ID] AS VARCHAR(50)) AS [ID], 	'PM_ORD' AS ID_TYPE,  	'Large Trades' AS [Exception_Type], 	--Changed create date logic 	COALESCE(fxo.[ORDER_TRADE_DATE],pm.[OPEN_DATE]) AS [CREATE_DATE], 	ex.[EXCEPTION_FLAG], 	'AB' AS [STATUS], 	ex.[DEALER_NAME] AS DEALER_NAME, 	ex.[DATA_SOURCE], 	CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_603_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 	--Adding Trade status flag to remove cancelled orders and align with aggregator reports 	CASE WHEN (ex.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted')) or (ex.[TRADE_STATUS] in ('C', 'Cancelled', 'Deleted')) THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_603_LARGE_TRADES_FX_TABLE timex left join VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE ex  on timex.[ORDER_ID] = ex.[ORDER_ID] --Added left join to fx orders and pm orders to extract trade date and use it within frontend left join #temp_fx_orders fxo on fxo.[FXM_ORDER_ID] = ex.[ORDER_ID] AND ex.[DATA_SOURCE] = 'FX' left join #temp_pm_orders pm on ex.[ORDER_ID] = pm.[ORD_NUM] and ex.[DATA_SOURCE] = 'AL'  UNION ALL  SELECT DISTINCT 	CAST(ex.[ORDER_ID] AS VARCHAR(50)) AS [ID], 	'PM_ORD' AS ID_TYPE,  	'Timely Execution' AS [Exception_Type], 	--Changed create date logic 	COALESCE(fxo.[ORDER_TRADE_DATE],pm.[OPEN_DATE]) AS [CREATE_DATE], 	ex.[EXCEPTION_FLAG], 	'AB' AS [STATUS], 	ex.[DEALER_NAME] AS DEALER_NAME, 	ex.[DATA_SOURCE], 	CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_9_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 	--Adding Trade status flag to remove cancelled orders and align with aggregator reports 	CASE WHEN COALESCE(fxo.[INSTRUCTION_STATUS],pm.[STATUS]) in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG 	FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FX_TABLE timex LEFT JOIN VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE ex on timex.[ORDER_ID] = ex.[ORDER_ID] --Added left join to fx orders and pm orders to extract trade date and use it within frontend left join #temp_fx_orders fxo on fxo.[FXM_ORDER_ID] = ex.[ORDER_ID] AND ex.[DATA_SOURCE] = 'FX' left join #temp_pm_orders pm on ex.[ORDER_ID] = pm.[ORD_NUM] and ex.[DATA_SOURCE] = 'AL'  UNION ALL  SELECT DISTINCT 	CAST(ex.[ORDER_ID] AS VARCHAR(50)) AS [ID], 	'PM_ORD' AS ID_TYPE,  	'EOD Holdovers' AS [Exception_Type], 	--Changed create date logic 	COALESCE(fxo.[ORDER_TRADE_DATE],pm.[OPEN_DATE]) AS [CREATE_DATE], 	ex.[EXCEPTION_FLAG], 	'AB' AS [STATUS], 	ex.[DEALER_NAME] AS DEALER_NAME, 	ex.[DATA_SOURCE], 	CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_602_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 	--Adding Trade status flag to remove cancelled orders and align with aggregator reports 	CASE WHEN (ex.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted')) or (ex.[PM_ORDER_STATUS] in ('C', 'Cancelled', 'Deleted')) THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE ex --Added left join to fx orders and pm orders to extract trade date and use it within frontend left join #temp_fx_orders fxo on fxo.[FXM_ORDER_ID] = ex.[ORDER_ID] AND ex.[DATA_SOURCE] = 'FX' left join #temp_pm_orders pm on ex.[ORDER_ID] = pm.[ORD_NUM] and ex.[DATA_SOURCE] = 'AL'  UNION ALL  SELECT DISTINCT 	CAST(ex.[ORDER_ID] AS VARCHAR(50)) AS [ID], 	'PM_ORD' AS ID_TYPE,  	'Dealer Limit' AS [Exception_Type], 	--Changed create date logic 	 COALESCE(fxo.[ORDER_TRADE_DATE],pm.[OPEN_DATE]) AS [CREATE_DATE], 	ex.[EXCEPTION_FLAG], 	'AB' AS [STATUS], 	ex.[DEALER_NAME] AS DEALER_NAME, 	ex.[DATA_SOURCE], 	CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_500_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 	--Adding Trade status flag to remove cancelled orders and align with aggregator reports 	CASE WHEN (ex.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted')) or (ex.[PM_ORDER_STATUS] in ('C', 'Cancelled', 'Deleted')) THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE ex  --Added left join to fx orders and pm orders to extract trade date and use it within frontend left join #temp_fx_orders fxo on fxo.[FXM_ORDER_ID] = ex.[ORDER_ID] AND ex.[DATA_SOURCE] = 'FX' left join #temp_pm_orders pm on ex.[ORDER_ID] = pm.[ORD_NUM] and ex.[DATA_SOURCE] = 'AL'   UNION ALL  SELECT DISTINCT     CAST(ex.[ORDER_ID] AS VARCHAR(50)) AS [ID],     'PM_ORD' AS ID_TYPE,      'Client Order Handling' AS [Exception_Type], 	--Changed create date logic     COALESCE(fxo.[ORDER_TRADE_DATE],pm.[OPEN_DATE]) AS [CREATE_DATE], 	ex.[EXCEPTION_FLAG],     'AB' AS [STATUS], 	ex.[DEALER_NAME] AS DEALER_NAME,     ex.[DATA_SOURCE], 	CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_604_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 	--Adding Trade status flag to remove cancelled orders and align with aggregator reports 	CASE WHEN ex.[INSTRUCTION_STATUS] in ('C', 'Cancelled', 'Deleted') THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE ex --Added left join to fx orders and pm orders to extract trade date and use it within frontend left join #temp_fx_orders fxo on fxo.[FXM_ORDER_ID] = ex.[ORDER_ID] AND ex.[DATA_SOURCE] = 'FX' left join #temp_pm_orders pm on ex.[ORDER_ID] = pm.[ORD_NUM] and ex.[DATA_SOURCE] = 'AL'  UNION ALL  SELECT DISTINCT 	CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) AS [ID], 	'MFID' AS ID_TYPE,  	'Gifts and Hospitality' AS [Exception_Type], 	ex.[CREATE_DATE], 	ex.[EXCEPTION_FLAG], 	'' AS [STATUS], 	ex.[TRADER_NAME] AS DEALER_NAME, 	ex.[DATA_SOURCE], 	CONCAT(CAST(ex.TRANSACTION_NUMBER AS VARCHAR(50)),'_16_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 	--Adding Trade status flag to remove cancelled orders and align with aggregator reports 	0 as TRADE_STATUS_FLAG FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE ex 	 UNION ALL  SELECT DISTINCT 	CAST(ex.[ORDER_ID] AS VARCHAR(50)) AS [ID], 	'PM_ORD' AS ID_TYPE,  	'Counterparty Direction' AS [Exception_Type], 	ex.[CREATE_DATE], 	ex.[EXCEPTION_FLAG], 	'' AS [STATUS], 	ex.[TRADER_NAME] AS DEALER_NAME, 	ex.[DATA_SOURCE], 	CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_17_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 	--Adding Trade status flag to remove cancelled orders and align with aggregator reports 	0 as TRADE_STATUS_FLAG FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_FX_TABLE ex  UNION ALL  SELECT DISTINCT 	CAST(ex.FX_ORDER_ID AS VARCHAR(50)) AS [ID], 	'PM_ORD' AS ID_TYPE,  	'Order Aggregation' AS [Exception_Type], 	--Changed create date logic 	COALESCE(fxo.[ORDER_TRADE_DATE],pm.[OPEN_DATE],fxt.[TRADE_DATE],t.[TRD_TRADE_DATE]) AS [CREATE_DATE], 	ex.[EXCEPTION], 	'AB' AS [STATUS], 	ex.DEALER_NAME, 	ex.DATA_SOURCE, 	CONCAT(CAST(ex.[FX_ORDER_ID] AS VARCHAR(50)),'_611_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 	--Adding Trade status flag to remove cancelled orders and align with aggregator reports 	CASE WHEN (ex.[TRADE_STATUS] in ('C', 'Cancelled', 'Deleted')) THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_FX_TABLE ex --Added left join to fx orders,pm orders,fx trades and all trades to extract trade date and use it within frontend left join #temp_fx_orders fxo on fxo.[FXM_ORDER_ID] = ex.FX_ORDER_ID AND ex.[DATA_SOURCE] = 'FX' left join #temp_pm_orders pm on ex.FX_ORDER_ID = pm.[ORD_NUM] and ex.[DATA_SOURCE] = 'AL' LEFT JOIN #temp_fx_trades fxt on fxt.[TRADE_ID] = ex.TRADE_ID  LEFT JOIN #temp_al_trades t on t.[ORD_NUM] = ex.FX_ORDER_ID   UNION ALL  SELECT DISTINCT 	CAST(ex.TRADE_ID AS VARCHAR(50)) AS [ID], 	'MFID' AS ID_TYPE,  	'Order Allocation' AS [Exception_Type], 	--Changed create date logic 	COALESCE(fxo.[ORDER_TRADE_DATE],pm.[OPEN_DATE],fxt.[TRADE_DATE],t.[TRD_TRADE_DATE]) AS [CREATE_DATE], 	ex.[EXCEPTION], 	'AB' AS [STATUS], 	ex.DEALER_NAME, 	ex.DATA_SOURCE, 	CONCAT(CAST(ex.[FX_ORDER_ID] AS VARCHAR(50)),'_',CAST(ex.TRADE_ID AS VARCHAR(50)),'_612_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 	--Adding Trade status flag to remove cancelled orders and align with aggregator reports 	CASE WHEN (ex.[TRADE_STATUS] in ('C', 'Cancelled', 'Deleted')) THEN 1 ELSE 0 END AS TRADE_STATUS_FLAG FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_FX_TABLE ex --Added left join to fx orders,pm orders,fx trades and all trades to extract trade date and use it within frontend left join #temp_fx_orders fxo on fxo.[FXM_ORDER_ID] = ex.FX_ORDER_ID AND ex.[DATA_SOURCE] = 'FX' left join #temp_pm_orders pm on ex.FX_ORDER_ID = pm.[ORD_NUM] and ex.[DATA_SOURCE] = 'AL' LEFT JOIN #temp_fx_trades fxt on fxt.[TRADE_ID] = ex.TRADE_ID  LEFT JOIN #temp_al_trades t on t.[ORD_NUM] = ex.FX_ORDER_ID   --End of SURVG-497  --Part 1 of #fx_tables --Creating a smaller population of orders cross to speed up the run time IF OBJECT_ID('tempdb..#temp_oc_fx', 'U') IS NOT NULL DROP TABLE #temp_oc_fx; SELECT oc.*  INTO #temp_oc_fx FROM Vista_Reporting.dbo.ORDERS_CROSS oc WHERE EXISTS (SELECT vg.ID FROM #temp_vg_tables_fx vg WHERE vg.ID = oc.PM_ORD and vg.TRADE_STATUS_FLAG != 1);   --Part 2 of #fx_tables --Adding in a temp table for the 'case when' statements to try and speed up the run time of #fx_tables IF OBJECT_ID('tempdb..#fx_case_when', 'U') IS NOT NULL DROP TABLE #fx_case_when; SELECT	DISTINCT vg.[ID] ,		'FX' AS [DEALING_DESK] ,		CASE WHEN vg.[DATA_SOURCE] = 'FX' AND vg.[Exception_Type] IN ('Timely Execution','Dealer Limit','EOD Holdovers','Large Trades','Client Order Handling','Counterparty Direction','Order Request Return','Order Aggregation') --, 'Order Allocation' 			 THEN fxo.[ORDER_TRADE_DATE] 			 WHEN vg.[DATA_SOURCE] = 'FX' AND vg.[Exception_Type] NOT IN ('Timely Execution','Dealer Limit','EOD Holdovers','Large Trades','Client Order Handling','Counterparty Direction','Order Request Return','Order Aggregation') --, 'Order Allocation' 			 THEN fxt.[TRADE_DATE] 			 WHEN vg.[DATA_SOURCE] = 'AL' AND vg.[Exception_Type] IN ('Timely Execution','Dealer Limit','EOD Holdovers','Large Trades','Client Order Handling','Counterparty Direction','Order Request Return','Order Aggregation') --, 'Order Allocation' 			 THEN COALESCE(PM2.[OPEN_DATE],pm.[OPEN_DATE]) 			 WHEN vg.[DATA_SOURCE] = 'AL' AND vg.[Exception_Type] NOT IN ('Timely Execution','Dealer Limit','EOD Holdovers','Large Trades','Client Order Handling','Counterparty Direction','Order Request Return','Order Aggregation') --, 'Order Allocation' 			 THEN t.[TRD_TRADE_DATE] 			 ELSE NULL 			 END AS [DATE] ,		CASE WHEN vg.[DATA_SOURCE] = 'FX'  			 THEN CONCAT('FX',' /',COALESCE(fxt.[INSTRUCTION_TYPE],fxt2.[INSTRUCTION_TYPE],fxo.[INSTRUCTION_TYPE],(fxt.[NR_LEG_PRODUCT] + ISNULL(' | ' + fxt.[FR_LEG_PRODUCT],'')))) 			 WHEN vg.[DATA_SOURCE] = 'AL'  			 THEN CONCAT('FX',' /',COALESCE(t.[INST_TYPE],t2.[INST_TYPE]))  			 ELSE NULL 			 END AS [Asset_Type/Subtype] ,		CASE WHEN vg.[DATA_SOURCE] = 'FX'  			 THEN COALESCE(fxt.[INSTRUCTION_TYPE],fxt2.[INSTRUCTION_TYPE],fxo.[INSTRUCTION_TYPE],(fxt.[NR_LEG_PRODUCT] + ISNULL(' | ' + fxt.[FR_LEG_PRODUCT],''))) 			 WHEN vg.[DATA_SOURCE] = 'AL'  			 THEN COALESCE(t.[INST_TYPE],t.[INST_TYPE])  			 ELSE NULL 			 END AS [INST_TYPE] ,		CASE WHEN vg.[DATA_SOURCE] = 'FX'  			 THEN COALESCE(fxt.[EXECUTED_BANK],fxt2.[EXECUTED_BANK]) 			 WHEN vg.[DATA_SOURCE] = 'AL'  			 THEN COALESCE(t.[TRD_COUNTERPARTY],t2.[TRD_COUNTERPARTY]) 			 END AS [CPTY] ,		CASE WHEN vg.[DATA_SOURCE] = 'AL' AND COALESCE(pgt.[PORTFOLIO_GROUP_NAME],pgt2.[PORTFOLIO_GROUP_NAME]) = 'PCAP_PROD'  			 THEN 'PRUCAP' 			 WHEN vg.[DATA_SOURCE] = 'AL' AND COALESCE(pgt.[PORTFOLIO_GROUP_NAME],pgt2.[PORTFOLIO_GROUP_NAME]) = 'PPMG_PROD'  			 THEN 'PPMG' 			 WHEN vg.[DATA_SOURCE] = 'AL' AND COALESCE(pgt.[PORTFOLIO_GROUP_NAME],pgt2.[PORTFOLIO_GROUP_NAME]) in ('MG_PROD','MG_PCAP')  			 THEN 'MAGIM' 			 WHEN vg.[DATA_SOURCE] = 'FX'  			 THEN COALESCE(fxo.[BUSINESS_GROUP],fxo2.[BUSINESS_GROUP]) 			 ELSE NULL 			 END AS [BUSINESS_GROUP] INTO #fx_case_when FROM #temp_vg_tables_fx vg LEFT JOIN #temp_fx_trades fxt on vg.[ID_TYPE] = 'MFID' AND vg.[ID] = fxt.[TRADE_ID] and vg.[DATA_SOURCE] = 'FX'  LEFT JOIN #temp_fx_trades fxt2 on vg.[ID_TYPE] = 'PM_ORD' AND vg.[ID] = fxt2.[ORDER_ID] and vg.[DATA_SOURCE] = 'FX'  LEFT JOIN #temp_fx_orders fxo on (vg.[ID] = fxo.[FXM_ORDER_ID] and vg.[ID_TYPE] = 'PM_ORD') and vg.[DATA_SOURCE] = 'FX' LEFT JOIN #temp_fx_orders fxo2 on (fxt.[ORDER_ID] = fxo2.[FXM_ORDER_ID])  LEFT JOIN #temp_AL_trades t on vg.[ID] = t.[MULTI_FUND_ID] and vg.[ID_TYPE] = 'MFID' and vg.[DATA_SOURCE] = 'AL'  LEFT JOIN #temp_pm_orders pm on t.[ORD_NUM] = pm.[ORD_NUM] LEFT JOIN #temp_pm_orders pm2 on vg.[ID_TYPE] = 'PM_ORD' AND vg.[ID] = pm2.[ORD_NUM] and vg.[DATA_SOURCE] = 'AL' LEFT JOIN #temp_oc_fx oc on oc.[PM_ORD] = pm2.[ORD_NUM]  LEFT JOIN #temp_AL_trades t2 on pm.ORD_NUM = t2.[ORD_NUM]  LEFT JOIN VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd on vg.[DEALER_NAME] = tdd.[FULL_NAME] and tdd.[DEALING_DESK] = 'FX' --AND CAST(COALESCE(fxt.PULL_DATE,fxt2.PULL_DATE,fxo.PULL_DATE,fxo2.PULL_DATE,t.PULL_DATE,t2.PULL_DATE,pm.PULL_DATE,pm2.PULL_DATE) AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE) LEFT JOIN #temp_pg_table pgt on t.[FUND] = pgt.[FUND_ID] LEFT JOIN #temp_pg_table pgt2 on t2.[FUND] = pgt2.[FUND_ID] where vg.TRADE_STATUS_FLAG != 1;    --Part 2 of #fx_tables --Creating all FX tables temp (for trades at trade/order level) IF OBJECT_ID('tempdb..#fx_tables', 'U') IS NOT NULL DROP TABLE #fx_tables; SELECT DISTINCT 	vg.[ID], 	'FX' AS [DEALING_DESK], 	vg.[ID_TYPE], 	fxc.[DATE], 	vg.[Exception_Type], 	fxc.[Asset_Type/Subtype], 	fxc.[INST_TYPE], 	fxc.[CPTY], 	tdd.[INITIALS] AS [DEALER1], 	NULL AS [Execution_Type_Decode], --Not going to be utilised for FX 	vg.[CREATE_DATE], 	vg.[EXCEPTION_FLAG], 	vg.[STATUS], 	TRIM(STR(DATEPART(YEAR,vg.[CREATE_DATE])) + '-' + FORMAT(vg.[CREATE_DATE],'MMM')) AS MONTH_YEAR,  	DATEPART(DAY,vg.[CREATE_DATE])		as [CREATE_DATE_DAY], 	DATEPART(MONTH,vg.[CREATE_DATE])		as [CREATE_DATE_MONTH], 	FORMAT(vg.[CREATE_DATE],'MMM')		as [CREATE_DATE_MONTH_NAME], 	DATEPART(q,vg.[CREATE_DATE])			as [CREATE_DATE_QUARTER], 	DATEPART(year,vg.[CREATE_DATE])		as [CREATE_DATE_YEAR], 	vg.ID_VG_NUMBER, 	tdd.[INITIALS] AS INITIALS, 	vg.[DEALER_NAME] AS [DEALER_FULL_NAME], 	tdd.[INITIALS] AS [DEALER], 	fxc.[BUSINESS_GROUP] INTO #fx_tables FROM #temp_vg_tables_fx vg LEFT JOIN #fx_case_when fxc on fxc.ID = vg.ID LEFT JOIN VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd on vg.[DEALER_NAME] = tdd.[FULL_NAME] and tdd.[DEALING_DESK] = 'FX'  where vg.TRADE_STATUS_FLAG != 1  --SURVG-497 - changed logic for all date related columns to take tradde dates instead of create date --SURVG-835 - Changing CM to FX to align with the dealing desk and get proper date out --Creating all FX tables temp (for trades at order AND trade level) IF OBJECT_ID('tempdb..#fx_tables_2', 'U') IS NOT NULL DROP TABLE #fx_tables_2 SELECT DISTINCT 	CONCAT(ISNULL(ex.ORDER_ID,0),'_',ISNULL(ex.TRANSACTION_NUMBER,0)) AS [ID], 	'FX' AS DEALING_DESK, 	'PM_ORD, MFID' AS ID_TYPE,  	CASE 		WHEN ex.[DATA_SOURCE] = 'FX' AND ex.TRANSACTION_NUMBER is not null THEN COALESCE(fxt.TRADE_DATE,fxt2.TRADE_DATE) 		WHEN ex.[DATA_SOURCE] = 'FX' AND ex.ORDER_ID is not null THEN fxo.ORDER_TRADE_DATE 		WHEN ex.[DATA_SOURCE] = 'AL' AND ex.TRANSACTION_NUMBER is not null THEN COALESCE(t2.TRD_TRADE_DATE,t.TRD_TRADE_DATE) 		WHEN ex.[DATA_SOURCE] = 'AL' AND ex.ORDER_ID is not null THEN COALESCE(pm2.OPEN_DATE,pm.OPEN_DATE) 		ELSE NULL 	END AS [DATE], 	'Out of Hours' AS [Exception_Type], 	CASE 		WHEN ex.[DATA_SOURCE] = 'FX' THEN CONCAT('FX',' /',COALESCE(fxt.[INSTRUCTION_TYPE],fxt2.[INSTRUCTION_TYPE],fxo.[INSTRUCTION_TYPE],(fxt.[NR_LEG_PRODUCT] + ISNULL(' | ' + fxt.[FR_LEG_PRODUCT],'')))) 		WHEN ex.[DATA_SOURCE] = 'AL' THEN CONCAT('FX',' /',COALESCE(t.[INST_TYPE],t2.[INST_TYPE]))  	ELSE NULL 	END AS [Asset_Type/Subtype], 	CASE  		WHEN ex.[DATA_SOURCE] = 'FX' THEN COALESCE(fxt.[INSTRUCTION_TYPE],fxt2.[INSTRUCTION_TYPE],fxo.[INSTRUCTION_TYPE],(fxt.[NR_LEG_PRODUCT] + ISNULL(' | ' + fxt.[FR_LEG_PRODUCT],''))) 		WHEN ex.[DATA_SOURCE] = 'AL' THEN COALESCE(t.[INST_TYPE],t2.[INST_TYPE])  	ELSE NULL 	END AS [INST_TYPE], 	CASE 		WHEN ex.[DATA_SOURCE] = 'FX' THEN COALESCE(fxt.[EXECUTED_BANK],fxt2.[EXECUTED_BANK]) 		WHEN ex.[DATA_SOURCE] = 'AL' THEN COALESCE(t.[TRD_COUNTERPARTY],t2.[TRD_COUNTERPARTY]) 	END AS [CPTY], 	tdd.[INITIALS] AS [DEALER1], 	NULL AS [Execution_Type_Decode], --Not going to be utilised for FX 	COALESCE(fxo.ORDER_TRADE_DATE,fxt.TRADE_DATE,case when CHARINDEX('|',ex.TRADE_DATE) = 0 THEN  TRY_CONVERt(datetime,ex.TRADE_DATE,103) ELSE TRY_CONVERt(datetime,REPLACE(SUBSTRING(ex.TRADE_DATE,1,CHARINDEX('|',ex.TRADE_DATE)),'|',''),103) END,pm.OPEN_DATE) AS [CREATE_DATE], 	ex.[EXCEPTION_FLAG], 	'AB' AS [STATUS], 	CASE 			WHEN ex.[DATA_SOURCE] = 'FX' and ex.[ORDER_ID] is not null THEN TRIM(STR(DATEPART(YEAR,fxo.ORDER_TRADE_DATE)) + '-' + FORMAT(fxo.ORDER_TRADE_DATE,'MMM')) 			WHEN ex.[DATA_SOURCE] = 'FX' and ex.[ORDER_ID] is null		THEN TRIM(STR(DATEPART(YEAR,fxt.TRADE_DATE)) + '-' + FORMAT(fxt.TRADE_DATE,'MMM')) 			WHEN ex.[DATA_SOURCE] = 'AL' and ex.[ORDER_ID] is not null THEN TRIM(STR(DATEPART(YEAR,pm.OPEN_DATE)) + '-' + FORMAT(pm.OPEN_DATE,'MMM')) 			WHEN ex.[DATA_SOURCE] = 'AL' and ex.[ORDER_ID] is null		THEN TRIM(STR(DATEPART(YEAR,case when CHARINDEX('|',ex.TRADE_DATE) = 0  																		THEN  TRY_CONVERt(datetime,ex.TRADE_DATE,103)  																		ELSE TRY_CONVERt(datetime,REPLACE(SUBSTRING(ex.TRADE_DATE,1,CHARINDEX('|',ex.TRADE_DATE)),'|',''),103) END)) + '-' + FORMAT(case when CHARINDEX('|',ex.TRADE_DATE) = 0  																		THEN  TRY_CONVERt(datetime,ex.TRADE_DATE,103)  																		ELSE TRY_CONVERt(datetime,REPLACE(SUBSTRING(ex.TRADE_DATE,1,CHARINDEX('|',ex.TRADE_DATE)),'|',''),103) END,'MMM'))  		END AS MONTH_YEAR, 	CASE 			WHEN ex.[DATA_SOURCE] = 'FX' and ex.[ORDER_ID] is not null THEN DATEPART(DAY,fxo.ORDER_TRADE_DATE) 			WHEN ex.[DATA_SOURCE] = 'FX' and ex.[ORDER_ID] is null		THEN DATEPART(DAY,fxt.TRADE_DATE) 			WHEN ex.[DATA_SOURCE] = 'AL' and ex.[ORDER_ID] is not null THEN DATEPART(DAY,pm.OPEN_DATE) 			WHEN ex.[DATA_SOURCE] = 'AL' and ex.[ORDER_ID] is null	THEN DATEPART(DAY,case when CHARINDEX('|',ex.TRADE_DATE) = 0 THEN  TRY_CONVERt(datetime,ex.TRADE_DATE,103) ELSE TRY_CONVERt(datetime,REPLACE(SUBSTRING(ex.TRADE_DATE,1,CHARINDEX('|',ex.TRADE_DATE)),'|',''),103) END)	 		END AS [CREATE_DATE_DAY], 	CASE 			WHEN ex.[DATA_SOURCE] = 'FX' and ex.[ORDER_ID] is not null THEN DATEPART(MONTH,fxo.ORDER_TRADE_DATE) 			WHEN ex.[DATA_SOURCE] = 'FX' and ex.[ORDER_ID] is null		THEN DATEPART(MONTH,fxt.TRADE_DATE) 			WHEN ex.[DATA_SOURCE] = 'AL' and ex.[ORDER_ID] is not null THEN DATEPART(MONTH,pm.OPEN_DATE) 			WHEN ex.[DATA_SOURCE] = 'AL' and ex.[ORDER_ID] is null	THEN DATEPART(MONTH,case when CHARINDEX('|',ex.TRADE_DATE) = 0 THEN  TRY_CONVERt(datetime,ex.TRADE_DATE,103) ELSE TRY_CONVERt(datetime,REPLACE(SUBSTRING(ex.TRADE_DATE,1,CHARINDEX('|',ex.TRADE_DATE)),'|',''),103) END)	 		END AS [CREATE_DATE_MONTH], 	CASE 			WHEN ex.[DATA_SOURCE] = 'FX' and ex.[ORDER_ID] is not null THEN FORMAT(fxo.ORDER_TRADE_DATE,'MMM') 			WHEN ex.[DATA_SOURCE] = 'FX' and ex.[ORDER_ID] is null		THEN FORMAT(fxt.TRADE_DATE,'MMM') 			WHEN ex.[DATA_SOURCE] = 'AL' and ex.[ORDER_ID] is not null THEN FORMAT(pm.OPEN_DATE,'MMM') 			WHEN ex.[DATA_SOURCE] = 'AL' and ex.[ORDER_ID] is null	THEN FORMAT(case when CHARINDEX('|',ex.TRADE_DATE) = 0 THEN  TRY_CONVERt(datetime,ex.TRADE_DATE,103) ELSE TRY_CONVERt(datetime,REPLACE(SUBSTRING(ex.TRADE_DATE,1,CHARINDEX('|',ex.TRADE_DATE)),'|',''),103) END,'MMM') 		END AS [CREATE_DATE_MONTH_NAME], 	CASE 			WHEN ex.[DATA_SOURCE] = 'FX' and ex.[ORDER_ID] is not null THEN DATEPART(q,fxo.ORDER_TRADE_DATE) 			WHEN ex.[DATA_SOURCE] = 'FX' and ex.[ORDER_ID] is null		THEN DATEPART(q,fxt.TRADE_DATE) 			WHEN ex.[DATA_SOURCE] = 'AL' and ex.[ORDER_ID] is not null THEN DATEPART(q,pm.OPEN_DATE) 			WHEN ex.[DATA_SOURCE] = 'AL' and ex.[ORDER_ID] is null	THEN DATEPART(q,case when CHARINDEX('|',ex.TRADE_DATE) = 0 THEN  TRY_CONVERt(datetime,ex.TRADE_DATE,103) ELSE TRY_CONVERt(datetime,REPLACE(SUBSTRING(ex.TRADE_DATE,1,CHARINDEX('|',ex.TRADE_DATE)),'|',''),103) END)	 		END AS [CREATE_DATE_QUARTER], 		CASE 			WHEN ex.[DATA_SOURCE] = 'FX' and ex.[ORDER_ID] is not null THEN DATEPART(YEAR,fxo.ORDER_TRADE_DATE) 			WHEN ex.[DATA_SOURCE] = 'FX' and ex.[ORDER_ID] is null		THEN DATEPART(YEAR,fxt.TRADE_DATE) 			WHEN ex.[DATA_SOURCE] = 'AL' and ex.[ORDER_ID] is not null THEN DATEPART(YEAR,pm.OPEN_DATE) 			WHEN ex.[DATA_SOURCE] = 'AL' and ex.[ORDER_ID] is null	THEN DATEPART(YEAR,case when CHARINDEX('|',ex.TRADE_DATE) = 0 THEN  TRY_CONVERt(datetime,ex.TRADE_DATE,103) ELSE TRY_CONVERt(datetime,REPLACE(SUBSTRING(ex.TRADE_DATE,1,CHARINDEX('|',ex.TRADE_DATE)),'|',''),103) END)	 		END AS [CREATE_DATE_YEAR], 	CONCAT(CONCAT(ISNULL(ex.ORDER_ID,0),'_',ISNULL(ex.TRANSACTION_NUMBER,0)),'_601_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 	tdd.[INITIALS] AS INITIALS, 	ex.[DEALER_NAME] AS [DEALER_FULL_NAME], 	tdd.[INITIALS] AS [DEALER], 	CASE 		WHEN ex.[DATA_SOURCE] = 'AL' AND COALESCE(pgt.[PORTFOLIO_GROUP_NAME],pgt2.[PORTFOLIO_GROUP_NAME]) = 'PCAP_PROD' THEN 'PRUCAP' 		WHEN ex.[DATA_SOURCE] = 'AL' AND COALESCE(pgt.[PORTFOLIO_GROUP_NAME],pgt2.[PORTFOLIO_GROUP_NAME]) = 'PPMG_PROD' THEN 'PPMG' 		WHEN ex.[DATA_SOURCE] = 'AL' AND COALESCE(pgt.[PORTFOLIO_GROUP_NAME],pgt2.[PORTFOLIO_GROUP_NAME]) in ('MG_PROD','MG_PCAP') THEN 'MAGIM' 		WHEN ex.[DATA_SOURCE] = 'FX' THEN fxo.[BUSINESS_GROUP] 	ELSE NULL 	END AS [BUSINESS_GROUP] 	--ex.[DATA_SOURCE] INTO #fx_tables_2 FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE ex LEFT JOIN #temp_fx_trades fxt on ex.[TRANSACTION_NUMBER] = fxt.[TRADE_ID] and ex.[DATA_SOURCE] = 'FX' LEFT JOIN #temp_fx_trades fxt2 on (ex.[ORDER_ID] = fxt2.[ORDER_ID]) and ex.[DATA_SOURCE] = 'FX' LEFT JOIN #temp_fx_orders fxo on (ex.[ORDER_ID] = fxo.[FXM_ORDER_ID]) and ex.[DATA_SOURCE] = 'FX' LEFT JOIN #temp_AL_trades t on ex.[TRANSACTION_NUMBER] = t.[MULTI_FUND_ID] and ex.[DATA_SOURCE] = 'AL' LEFT JOIN #temp_AL_trades t2 on (ex.[ORDER_ID] = t2.[ORD_NUM]) and ex.[DATA_SOURCE] = 'AL' LEFT JOIN #temp_pm_orders pm on t.[ORD_NUM] = pm.[ORD_NUM] LEFT JOIN #temp_pm_orders pm2 on ex.[ORDER_ID] = pm2.[ORD_NUM] and ex.[DATA_SOURCE] = 'AL' LEFT JOIN VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd on ex.[DEALER_NAME] = tdd.[FULL_NAME] and tdd.[DEALING_DESK] = 'FX' --AND CAST(COALESCE(fxt.PULL_DATE,fxt2.PULL_DATE,fxo.PULL_DATE,t.PULL_DATE,t2.PULL_DATE,pm.PULL_DATE,pm2.PULL_DATE) AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE) LEFT JOIN #temp_pg_table pgt on t.[FUND] = pgt.[FUND_ID] LEFT JOIN #temp_pg_table pgt2 on t2.[FUND] = pgt2.[FUND_ID] WHERE ex.[INSTRUCTION_STATUS] not in ('C', 'Cancelled', 'Deleted') or ex.[TRADE_STATUS] not in ('C', 'Cancelled', 'Deleted') --End of SURVG-497 --End of SURVG-835   IF OBJECT_ID('tempdb..#temp_AL_exceptions_table', 'U') IS NOT NULL DROP TABLE #temp_AL_exceptions_table SELECT DISTINCT 	[ORDER] AS [ID], 	'DMG' AS [Dealing_Desk],  	'PM_ORD' AS [ID_TYPE], 	[AUTH_TIME] AS [DATE], 	'Timely Execution Exceptions' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[CPTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[CREATE_DATE], 	[EXCEPTION_FLAG], 	'AB' AS [STATUS] INTO #temp_AL_exceptions_table FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE UNION ALL																																																											 																																																	     SELECT DISTINCT 	[OP_ID] AS [ID], 	'DMG' AS [Dealing_Desk], 	'TRD_ORD' AS [ID_TYPE], 	[AUTH_TIME] AS [DATE], 	'Order Priority Exceptions' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[CPTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode],  	[CREATE_DATE], 	[EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE op_dmg LEFT JOIN (SELECT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON oc.PM_ORD = op_dmg.[ORDER]																																																																																  LEFT JOIN (SELECT OP_ID, [Trade]  FROM VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_DMG_TABLE) vgop_dmg ON vgop_dmg.OP_ID = oc.TRD_ORD																																																																								  UNION ALL																																																																																							   																				         SELECT DISTINCT 	COALESCE(vgoa_dmg2.[OA_ID],vgoa_dmg.OA_ID)as [ID], 	'DMG' AS [Dealing_Desk],  	'MFID' AS [ID_TYPE], 	[AUTH_TIME] AS [DATE], 	'Order Aggregation Exceptions' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[CPTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[CREATE_DATE], 	[EXCEPTION_FLAG], 'AB' AS [STATUS]  FROM VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_13_ORDER_AGGREGATION_DMG_TABLE oa_dmg LEFT JOIN (SELECT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON oc.PM_ORD = oa_dmg.[ORDER]																																																																																  LEFT JOIN (SELECT OA_ID, ORD_NUM, [Trade] FROM VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_DMG_TABLE) vgoa_dmg ON vgoa_dmg.ORD_NUM = oc.TRD_ORD and vgoa_dmg.Trade is null																								 																																																	 LEFT JOIN (SELECT OA_ID, ORD_NUM, [Trade] FROM VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_DMG_TABLE) vgoa_dmg2 ON vgoa_dmg2.ORD_NUM = oc.TRD_ORD and vgoa_dmg2.Trade is not null and vgoa_dmg2.Trade = oa_dmg.MFID UNION ALL																																																									 																																																	   																			   							 				    SELECT DISTINCT 	[MFID] AS [ID], 	'DMG' AS [Dealing_Desk], 	'MFID' AS [ID_TYPE], 	[TRADE_DATE] AS [DATE], 	'Quote Exceptions' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[CPTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[CREATE_DATE], 	[EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_01_QUOTE_EXCEPTION_DMG_TABLE UNION ALL											   																		    																													 																														   																			        SELECT DISTINCT 	[MFID] AS [ID], 	'DMG' AS [Dealing_Desk], 	'MFID' AS [ID_TYPE], 	[TRADE_DATE] AS [DATE], 	'NWQ Exceptions' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[CPTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[CREATE_DATE], 	[EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_07_NON_WINNING_QUOTE_DMG_TABLE UNION ALL	 										   																		    																													 																														   																			        SELECT DISTINCT 	[MFID] AS [ID], 	'DMG' AS [Dealing_Desk], 	'MFID' AS [ID_TYPE], 	[TRADE_DATE] AS [DATE], 	'Timely Recording Exceptions' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[CPTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[CREATE_DATE], 	[EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_DMG_TABLE UNION ALL											   																		    																													 																														   																			        SELECT DISTINCT 	[MFID] AS [ID], 	'DMG' AS [Dealing_Desk], 	'MFID' AS [ID_TYPE], 	[TRADE_DATE] AS [DATE], 	'Interfund Transfer Exceptions' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[CPTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[CREATE_DATE], 	[EXCEPTION_FLAG], 	'AB' AS [STATUS]  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_25_INTERFUND_TRANSFER_DMG_TABLE UNION ALL											   																		    																													 																														   																			        SELECT DISTINCT 	[MFID] AS [ID], 	'DMG' AS [Dealing_Desk], 	'MFID' AS [ID_TYPE], 	[TRADE_DATE] AS [DATE], 	'Trades Without Orders Exceptions' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[CPTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[CREATE_DATE], 	[EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE UNION ALL																													    																													 																														   																			     SELECT DISTINCT 	concat([MFID],'_15',[TOUCH_COUNT]) AS [ID], 	'DMG' AS [Dealing_Desk], 	'MFID' AS [ID_TYPE], 	[EXEC_DATE] AS [DATE], 	'Amendments' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[CPTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[CREATE_DATE], 	[EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_VG_15_AMENDMENT_FLAG_DMG_TABLE UNION ALL											   																		    																																																								 																											 SELECT DISTINCT 	[MULTI_FUND_ID] AS [ID], 	[Dealing_Desk], 	'MFID' AS [ID_TYPE], 	[Trade Date] AS [DATE], 	'Quote Exceptions' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[TRD_COUNTERPARTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[VG_01_CREATETIME] AS [CREATE_DATE], 	[VG_01] AS [EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE UNION ALL											   				    													    																																																					    																					         SELECT DISTINCT 	[MULTI_FUND_ID] AS [ID], 	[Dealing_Desk], 	'MFID' AS [ID_TYPE], 	[Trade Date] AS [DATE], 	'NWQ Exceptions' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[TRD_COUNTERPARTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode],  	[VG_07_CREATETIME] AS [CREATE_DATE], 	[VG_07] AS [EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE UNION ALL											   				    													    																																																					    																					         SELECT DISTINCT 	[MULTI_FUND_ID] AS [ID], 	[Dealing_Desk], 	'MFID' AS [ID_TYPE], 	[Trade Date] AS [DATE], 	'Timely Recording' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[TRD_COUNTERPARTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[VG_10_CREATETIME] AS [CREATE_DATE], 	[VG_10] AS [EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE UNION ALL										   				    													    																																																					    																					         SELECT DISTINCT 	[MULTI_FUND_ID] AS [ID], 	[Dealing_Desk], 	'MFID' AS [ID_TYPE], 	[Trade Date] AS [DATE], 	'Timely Recording NAV' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[TRD_COUNTERPARTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	VG_10_NAV_CREATETIME AS [CREATE_DATE], 	VG_10_NAV AS [EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE WHERE DEALING_DESK = 'Equity'  UNION ALL											   				    													    																																																					    																					         SELECT DISTINCT 	[MULTI_FUND_ID] AS [ID], 	[Dealing_Desk], 	'MFID' AS [ID_TYPE], 	[Trade Date] AS [DATE], 	'Interfund Transfer Exceptions' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[TRD_COUNTERPARTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[VG_25_CREATETIME] AS [CREATE_DATE], 	[VG_25] AS [EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE UNION ALL															    													    																																																																								   		     SELECT DISTINCT 	[ORD_NUM] AS [ID], 	[Dealing_Desk], 	'TRD_ORD' AS [ID_TYPE], 	[Auth Time] AS [DATE], 	'Order Priority Exceptions' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[TRD_COUNTERPARTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[VG_14_CREATETIME] AS [CREATE_DATE], 	[VG_14] AS [EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_ORDER_PRIORITY_TABLE UNION ALL															    																																																																								 																	 							 SELECT DISTINCT 	[ORD_NUM] AS [ID], 	[Dealing_Desk], 	'PM_ORD' AS [ID_TYPE], 	[AUTH_TIME] AS [DATE], 	'Timely Release Exceptions' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[TRD_COUNTERPARTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[VG_11_CREATETIME] AS [CREATE_DATE], 	[VG_11] AS [EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER WHERE DEALING_DESK = 'Equity' UNION ALL															    													    																																																																										    												    SELECT DISTINCT 	[OA_ID] AS [ID], 	[Dealing_Desk], 	'TRD_ORD' AS [ID_TYPE], 	[Auth Time] AS [DATE], 	'Order Aggregation Exceptions' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[TRD_COUNTERPARTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[VG_13_CREATETIME] AS [CREATE_DATE], 	[VG_13] AS [EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_TRD_ORDER_TABLE WHERE OA_ID is not null UNION ALL															    																																																																																													   			 	   																	    SELECT DISTINCT 	concat([MULTI_FUND_ID],'_15',TOUCH_COUNT) AS [ID], 	[Dealing_Desk], 	'MFID' AS [ID_TYPE], 	[EXECUTION_TIME] AS [DATE], 	'Amendments' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[TRD_COUNTERPARTY], 	[TRADER] AS [DEALER1], 	[Execution_Type_Decode], 	[AMENDMENT_FLAG_CREATETIME] AS [CREATE_DATE], 	1 AS [EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE  UNION ALL															    																																																																																												   			 	   																				    SELECT DISTINCT 	[Client_Execution_ID] AS [ID], 	[Dealing_Desk], 	'??????' AS [ID_TYPE], 	[Auth_Time] AS [DATE], 	'Order Inflation' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[TRD_COUNTERPARTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[VG_08_CREATETIME] AS [CREATE_DATE], 	[VG_08] AS [EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE  WHERE DEALING_DESK != 'Equity' UNION ALL															    																																																																			    																												   			 	   																				    SELECT DISTINCT 	concat([Client_Execution_ID],'_6') AS [ID], 	[Dealing_Desk], 	'MFID' AS [ID_TYPE], 	[Auth_Time] AS [DATE], 	'Follow On Activity' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[TRD_COUNTERPARTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[VG_06_CREATETIME] AS [CREATE_DATE], 	[VG_06] AS [EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE  WHERE DEALING_DESK != 'Equity' UNION ALL																																																																																																											   			 		    SELECT DISTINCT 	[MFID] AS [ID], 	'DMG' AS [Dealing_Desk], 	'MFID' AS [ID_TYPE], 	TRADE_DATE AS [DATE], 	'Gifts and Hospitality' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[CPTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[CREATE_DATE], 	[EXCEPTION_FLAG], 	'' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE UNION ALL																																																																																									   																												  			 		    SELECT DISTINCT 	[ORDER] AS [ID], 	'DMG' AS [Dealing_Desk], 	'PM_ORD' AS [ID_TYPE], 	pm.[AUTH_TIME] AS [DATE], 	'Counterparty Direction'as [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[CPTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[CREATE_DATE], 	[EXCEPTION_FLAG], 	'' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE cpdir_dmg LEFT JOIN (SELECT  				pm.ORD_NUM,  				AUTH_TIME,  				TOUCH_COUNT  		   FROM VISTA_REPORTING.dbo.PM_ORDERS pm 	  	   INNER JOIN (SELECT  							ORD_NUM,  							MAX(TOUCH_COUNT) AS MAX_TOUCH  					   FROM VISTA_REPORTING.dbo.PM_ORDERS  					   GROUP BY ORD_NUM) pmo ON pm.ORD_NUM = pmo.ORD_NUM and pm.TOUCH_COUNT = pmo.MAX_TOUCH) pm ON cpdir_dmg.[ORDER] = pm.ORD_NUM UNION ALL															    													    																																																											 																					    SELECT DISTINCT 	[ORD_NUM] AS [ID], 	[Dealing_Desk],  	'PM_ORD' AS [ID_TYPE], 	[AUTH_TIME] AS [DATE], 	'Timely Execution' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[TRD_COUNTERPARTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	(SELECT MAX(v)  	FROM (VALUES (vg_09_policy_createtime), (vg_09_80_day_createtime), 								(vg_09_5_day_createtime), (vg_09_40_day_createtime), 								(vg_09_20_day_createtime), (vg_09_160_day_createtime),  								(vg_09_10_day_createtime)) AS value(v))  AS [CREATE_DATE], 	CASE  		WHEN Coalesce(VG_09_policy,0) + Coalesce(vg_09_80_day,0)  				+ Coalesce(vg_09_5_day,0) + Coalesce(vg_09_40_day,0)  				+ Coalesce(vg_09_20_day,0) + Coalesce(vg_09_160_day,0) 				+ Coalesce(vg_09_10_day,0) > 0  		THEN 1  		ELSE 0  		END AS [EXCEPTION_FLAG],  	'AB' AS [STATUS]   FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER  UNION ALL SELECT DISTINCT 	CONCAT(Order_ID,'_',Row_ID) AS [ID],		   	[Dealing_Desk],  	'PM_ORD' AS [ID_TYPE], 	[AUTH_TIME] AS [DATE], 	'Implementation Shortfall' AS [Exception_Type], 	[ASSET_TYPE_SUBTYPE], 	[INST_TYPE], 	[TRD_COUNTERPARTY], 	[Trader] AS [DEALER1], 	[Execution_Type_Decode], 	[IM_CREATEDATE] AS [CREATE_DATE], 	[IM_EXCEPTION] AS [EXCEPTION_FLAG],  	'AB' AS [STATUS]    FROM VISTA_REPORTING.dbo.IMPLEMENTATION_SHORTFALL_EQ  UNION ALL SELECT DISTINCT 	CAST([MULTI_FUND_ID] AS varchar(30)) AS [ID],		   	[Dealing_Desk],  	'MFID' AS [ID_TYPE], 	[Trade Date] AS [DATE], 	'Extended Settlement' AS [Exception_Type], 	[ASSET_TYPE_SUBTYPE], 	[INST_TYPE], 	[TRD_COUNTERPARTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[VG_40_CREATIME] AS [CREATE_DATE], 	[VG_40] AS [EXCEPTION_FLAG],  	'AB' AS [STATUS]    FROM VISTA_REPORTING.dbo.EXTENDED_SETTLEMENTS_EQ  UNION ALL SELECT DISTINCT 	CAST([MULTI_FUND_ID] AS varchar(30)) AS [ID],		   	[Dealing_Desk],  	'MFID' AS [ID_TYPE], 	[TRADE_DATE] AS [DATE], 	'Commission Increase' AS [Exception_Type], 	[Asset_Type/Subtype], 	[Sec_Type], 	[Broker], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[CI_CREATETIME] AS [CREATE_DATE], 	[CI_EXCEPTION] AS [EXCEPTION_FLAG],  	'AB' AS [STATUS]    FROM VISTA_REPORTING.dbo.COMMISSIONS_INCREASE_EQ UNION ALL SELECT DISTINCT 	CONCAT([Order ID],'_',ID) AS [ID],		   	[Dealing_Desk],  	'PM_ORD' AS [ID_TYPE], 	[HL_CREATEDATE] AS [DATE], 	'High Low' AS [Exception_Type], 	[Asset_Type_Subtype], 	[Sec_Type], 	[Broker], 	[Trader] AS [DEALER1], 	[Execution_Type_Decode], 	[HL_CREATEDATE] AS [CREATE_DATE], 	[HL_EXCEPTION] AS [EXCEPTION_FLAG],  	'AB' AS [STATUS]    FROM VISTA_REPORTING.dbo.MARKET_HIGH_LOW_EQ   IF OBJECT_ID('tempdb..#temp_tim_ex_table', 'U') IS NOT NULL DROP TABLE #temp_tim_ex_table SELECT  	ORD_NUM,  	null AS Exception_Type,  	DEALING_DESK,  	TIMELY_EXECUTION_EXCEPTION  INTO #temp_tim_ex_table FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_EQ_TABLE UNION ALL   SELECT  	ORD_NUM, 	Exception_Type, 	Dealing_Desk, 	TIMELY_EXECUTION_EXCEPTION  FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE UNION ALL   SELECT  	ORD_NUM,  	Exception_Type,  	Dealing_Desk,  	TIMELY_EXECUTION_EXCEPTION  FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_LL_TABLE   IF OBJECT_ID('tempdb..#temp', 'U') IS NOT NULL DROP TABLE #temp SELECT  	tbl.*, 	TRIM(STR(DATEPART(year,tbl.CREATE_DATE)) + '-' + FORMAT(tbl.CREATE_DATE,'MMM')) AS MONTH_YEAR,  	DATEPART(day,tbl.CREATE_DATE)	as [CREATE_DATE_DAY], 	DATEPART(month,tbl.CREATE_DATE)	as [CREATE_DATE_MONTH], 	FORMAT(tbl.CREATE_DATE,'MMM')	as [CREATE_DATE_MONTH_NAME], 	DATEPART(q,tbl.CREATE_DATE)		as [CREATE_DATE_QUARTER], 	DATEPART(year,tbl.CREATE_DATE)	as [CREATE_DATE_YEAR], 	CASE 		WHEN tbl.EXCEPTION_FLAG > 0 		THEN  		CASE 			WHEN tbl.Exception_Type = 'Timely Execution Exceptions'      THEN CONCAT(tbl.ID,'_9',timex.AUX) 			WHEN tbl.Exception_Type = 'Timely Execution'  			 and tbl.Dealing_Desk in ('Fixed Income','Leveraged Finance')  			 and timex2.DEALING_DESK in ('Fixed Income','Leveraged Finance')  																		 THEN CONCAT(tbl.ID,'_9',timex2.Exception_Type,timex2.TIMELY_EXECUTION_EXCEPTION) 			WHEN tbl.Exception_Type = 'Timely Execution'  			 and tbl.Dealing_Desk = 'Equity'  			 and timex2.DEALING_DESK = 'Equity'							 THEN CONCAT(tbl.ID,'_9',timex2.TIMELY_EXECUTION_EXCEPTION) 			WHEN tbl.Exception_Type = 'Order Priority Exceptions'        THEN CONCAT(tbl.ID,'_14') 			WHEN tbl.Exception_Type = 'Quote Exceptions'			     THEN CONCAT(tbl.ID,'_1') 			WHEN tbl.Exception_Type = 'Order Aggregation Exceptions'     THEN CONCAT(tbl.ID,'_13') 			WHEN tbl.Exception_Type = 'NWQ Exceptions'                   THEN CONCAT(tbl.ID,'_7') 			WHEN tbl.Exception_Type = 'Timely Recording Exceptions'      THEN CONCAT(tbl.ID,'_10') 			WHEN tbl.Exception_Type = 'Timely Recording'				 THEN CONCAT(tbl.ID,'_10') 			WHEN tbl.Exception_Type = 'Timely Recording NAV'			 THEN CONCAT(tbl.ID,'_10_NAV') 			WHEN tbl.Exception_Type = 'Interfund Transfer Exceptions'    THEN CONCAT(tbl.ID,'_25') 			WHEN tbl.Exception_Type = 'Trades Without Orders Exceptions' THEN CONCAT(tbl.ID,'_41') 			WHEN tbl.Exception_Type = 'Amendments'						 THEN tbl.ID 			WHEN tbl.Exception_Type = 'Order Inflation'					 THEN CONCAT(tbl.ID,'_8')   			WHEN tbl.Exception_Type = 'Follow On Activity'				 THEN tbl.ID 			WHEN tbl.Exception_Type = 'Timely Release Exceptions'		 THEN CONCAT(tbl.ID,'_11')  			WHEN tbl.Exception_Type = 'Counterparty Direction'THEN CONCAT(tbl.ID,'_17') 			WHEN tbl.Exception_Type = 'Gifts and Hospitality'			 THEN CONCAT(tbl.ID,'_16') 			WHEN tbl.Exception_Type = 'Implementation Shortfall'		 THEN CONCAT(tbl.ID,'_IS') 			WHEN tbl.Exception_Type = 'High Low'					     THEN CONCAT(tbl.ID,'_HL') 			WHEN tbl.Exception_Type = 'Commission Increase'				 THEN CONCAT(tbl.ID,'_CI') 			WHEN tbl.Exception_Type = 'Extended Settlement'				 THEN CONCAT(tbl.ID,'_40') 		ELSE CONCAT(tbl.ID,'_?') 		END 	END AS ID_VG_NUMBER, 	dad.INITIALS, 	dad.FULL_NAME AS DEALER_FULL_NAME, 	left(DEALER1,3) AS DEALER INTO #temp  FROM #temp_AL_exceptions_table tbl LEFT JOIN VISTA_REPORTING.dbo.DEALER_AND_DESK dad on tbl.DEALER1 = dad.INITIALS LEFT JOIN VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE timex on timex.[ORDER] = tbl.id and tbl.Dealing_Desk = 'DMG' LEFT JOIN #temp_tim_ex_table timex2 on timex2.[ORD_NUM] = tbl.id and tbl.Dealing_Desk = timex2.DEALING_DESK and tbl.Exception_Type = 'Timely Execution' and timex2.TIMELY_EXECUTION_EXCEPTION > 0 left join (SELECT ORD_NUM, CONVERT(varchar,ID) as IS_ID FROM VISTA_STAGING.dbo.VG_IMPLEMENTATION_SHORTFALL_EQ_TABLE) is_eq  on CAST(is_eq.[ORD_NUM] as varchar(40)) = tbl.id and tbl.Exception_Type = 'Implementation Shortfall' left join (SELECT ORD_NUM, CONVERT(varchar,ID) as ML_ID FROM VISTA_STAGING.dbo.VG_MARKET_HIGH_LOW_TABLE) ml_eq  on CAST(ml_eq.[ORD_NUM] as varchar(40)) = tbl.id and tbl.Exception_Type = 'High Low'   IF OBJECT_ID('tempdb..#mfid_business_group', 'U') IS NOT NULL DROP TABLE #mfid_business_group SELECT DISTINCT  	tr.MULTI_FUND_ID, 	CASE 		WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP' 		WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG' 		WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PROD'	  THEN 'MAGIM' 		WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP'   THEN 'MAGIM' 	ELSE NULL 	END AS [BUSINESS_GROUP_MFID] INTO #mfid_business_group FROM #temp_AL_trades tr LEFT JOIN #temp_pg_table pgt ON tr.FUND = pgt.FUND_ID  IF OBJECT_ID('tempdb..#trd_business_group', 'U') IS NOT NULL DROP TABLE #trd_business_group SELECT DISTINCT  	TR.ORD_NUM, 	CASE 		WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP' 		WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG' 		WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PROD'	  THEN 'MAGIM' 		WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP'   THEN 'MAGIM' 	ELSE NULL 	END AS [BUSINESS_GROUP_TRD] INTO #trd_business_group FROM #temp_AL_trades tr LEFT JOIN #temp_pg_table pgt ON tr.FUND = pgt.FUND_ID  IF OBJECT_ID('tempdb..#pm_business_group', 'U') IS NOT NULL DROP TABLE #pm_business_group SELECT DISTINCT  	oc.PM_ORD, 	CASE 		WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP' 		WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG' 		WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PROD'	  THEN 'MAGIM' 		WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP'   THEN 'MAGIM' 	ELSE NULL 	END AS [BUSINESS_GROUP_PM] INTO #pm_business_group FROM #temp_AL_trades tr LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = tr.ORD_NUM LEFT JOIN [VISTA_REPORTING].[dbo].[PORTFOLIO_GROUPS_TREASURY] pgt ON tr.FUND = pgt.FUND_ID  IF OBJECT_ID('VISTA_REPORTING.DBO.MASTER_EXECUTIVE_SUMMARY_TABLE', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.DBO.MASTER_EXECUTIVE_SUMMARY_TABLE SELECT  	tmp.*,  	COALESCE(pbg.[BUSINESS_GROUP_PM],tbg.[BUSINESS_GROUP_TRD],mbg.[BUSINESS_GROUP_MFID]) AS [BUSINESS_GROUP] INTO VISTA_REPORTING.DBO.MASTER_EXECUTIVE_SUMMARY_TABLE FROM #temp tmp LEFT JOIN #pm_business_group pbg    ON Dealing_Desk not in ('Cash','FX') and tmp.ID = pbg.PM_ORD LEFT JOIN #trd_business_group tbg   ON Dealing_Desk not in ('Cash','FX') and tmp.ID = tbg.ORD_NUM LEFT JOIN #mfid_business_group mbg  ON Dealing_Desk not in ('Cash','FX') and tmp.ID = mbg.MULTI_FUND_ID  UNION ALL SELECT DISTINCT [ID],[Dealing_Desk],[ID_TYPE],[DATE],[Exception_Type],[Asset_Type/Subtype],[INST_TYPE],[CPTY],[DEALER1],CAST([Execution_Type_Decode] AS varchar(30)), 		[CREATE_DATE],[EXCEPTION_FLAG],[STATUS],[MONTH_YEAR],[CREATE_DATE_DAY],[CREATE_DATE_MONTH],[CREATE_DATE_MONTH_NAME],[CREATE_DATE_QUARTER],[CREATE_DATE_YEAR], 		[ID_VG_NUMBER],[INITIALS],[DEALER_FULL_NAME],[DEALER],[BUSINESS_GROUP] FROM  #cash_tables   UNION ALL  SELECT DISTINCT [ID],[Dealing_Desk],[ID_TYPE],[DATE],[Exception_Type],[Asset_Type/Subtype],[INST_TYPE],[CPTY],[DEALER1],CAST([Execution_Type_Decode] AS varchar(30)), 		[CREATE_DATE],[EXCEPTION_FLAG],[STATUS],[MONTH_YEAR],[CREATE_DATE_DAY],[CREATE_DATE_MONTH],[CREATE_DATE_MONTH_NAME],[CREATE_DATE_QUARTER],[CREATE_DATE_YEAR], 		[ID_VG_NUMBER],[INITIALS],[DEALER_FULL_NAME],[DEALER],[BUSINESS_GROUP] FROM  #cash_tables_2  UNION ALL  SELECT DISTINCT [ID],[Dealing_Desk],[ID_TYPE],[DATE],[Exception_Type],[Asset_Type/Subtype],[INST_TYPE],[CPTY],[DEALER1],CAST([Execution_Type_Decode] AS varchar(30)), 		[CREATE_DATE],[EXCEPTION_FLAG],[STATUS],[MONTH_YEAR],[CREATE_DATE_DAY],[CREATE_DATE_MONTH],[CREATE_DATE_MONTH_NAME],[CREATE_DATE_QUARTER],[CREATE_DATE_YEAR], 		[ID_VG_NUMBER],[INITIALS],[DEALER_FULL_NAME],[DEALER],[BUSINESS_GROUP] FROM  #fx_tables  UNION ALL  SELECT DISTINCT [ID],[Dealing_Desk],[ID_TYPE],[DATE],[Exception_Type],[Asset_Type/Subtype],[INST_TYPE],[CPTY],[DEALER1],CAST([Execution_Type_Decode] AS varchar(30)), 		[CREATE_DATE],[EXCEPTION_FLAG],[STATUS],[MONTH_YEAR],[CREATE_DATE_DAY],[CREATE_DATE_MONTH],[CREATE_DATE_MONTH_NAME],[CREATE_DATE_QUARTER],[CREATE_DATE_YEAR], 		[ID_VG_NUMBER],[INITIALS],[DEALER_FULL_NAME],[DEALER],[BUSINESS_GROUP] FROM  #fx_tables_2  IF OBJECT_ID('tempdb..#temp_vg_tables_cash', 'U') IS NOT NULL DROP TABLE #temp_vg_tables_cash IF OBJECT_ID('tempdb..#temp_cash_trades', 'U') IS NOT NULL DROP TABLE #temp_cash_trades IF OBJECT_ID('tempdb..#temp_cash_orders', 'U') IS NOT NULL DROP TABLE #temp_cash_orders IF OBJECT_ID('tempdb..#temp_AL_trades', 'U') IS NOT NULL DROP TABLE #temp_AL_trades IF OBJECT_ID('tempdb..#temp_pm_orders', 'U') IS NOT NULL DROP TABLE #temp_pm_orders IF OBJECT_ID('tempdb..#temp_pg_table', 'U') IS NOT NULL DROP TABLE #temp_pg_table IF OBJECT_ID('tempdb..#cash_tables', 'U') IS NOT NULL DROP TABLE #cash_tables  IF OBJECT_ID('tempdb..#cash_case_when', 'U') IS NOT NULL DROP TABLE #cash_case_when; IF OBJECT_ID('tempdb..#cash_tables_2', 'U') IS NOT NULL DROP TABLE #cash_tables_2 IF OBJECT_ID('tempdb..#temp_vg_tables_fx', 'U') IS NOT NULL DROP TABLE #temp_vg_tables_fx IF OBJECT_ID('tempdb..#temp_fx_trades', 'U') IS NOT NULL DROP TABLE #temp_fx_trades IF OBJECT_ID('tempdb..#temp_fx_orders', 'U') IS NOT NULL DROP TABLE #temp_fx_orders IF OBJECT_ID('tempdb..#temp_oc_fx', 'U') IS NOT NULL DROP TABLE #temp_oc_fx; IF OBJECT_ID('tempdb..#fx_case_when', 'U') IS NOT NULL DROP TABLE #fx_case_when; IF OBJECT_ID('tempdb..#fx_tables', 'U') IS NOT NULL DROP TABLE #fx_tables; IF OBJECT_ID('tempdb..#fx_tables_2', 'U') IS NOT NULL DROP TABLE #fx_tables_2 IF OBJECT_ID('tempdb..#temp_AL_exceptions_table', 'U') IS NOT NULL DROP TABLE #temp_AL_exceptions_table IF OBJECT_ID('tempdb..#temp_tim_ex_table', 'U') IS NOT NULL DROP TABLE #temp_tim_ex_table IF OBJECT_ID('tempdb..#temp', 'U') IS NOT NULL DROP TABLE #temp IF OBJECT_ID('tempdb..#mfid_business_group', 'U') IS NOT NULL DROP TABLE #mfid_business_group IF OBJECT_ID('tempdb..#trd_business_group', 'U') IS NOT NULL DROP TABLE #trd_business_group IF OBJECT_ID('tempdb..#pm_business_group', 'U') IS NOT NULL DROP TABLE #pm_business_group   END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: MASTER_EXECUTIVE_SUMMARY_2021_11_26 CreateDate: 2019-10-18 08:39:51.920 ModifyDate: 2021-11-26 17:41:53.433 --- DEFINITION START ---   CREATE PROCEDURE [dbo].[MASTER_EXECUTIVE_SUMMARY]  AS BEGIN   IF OBJECT_ID('tempdb..#temp_vg_tables_cash', 'U') IS NOT NULL DROP TABLE #temp_vg_tables_cash SELECT DISTINCT          CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) AS [ID],         'MFID' AS ID_TYPE,          'Timely Recording RR' AS [Exception_Type],         ex.[CREATE_DATE],         ex.[EXCEPTION_FLAG],         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)),'_10_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER INTO #temp_vg_tables_cash FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_RR_TABLE ex         UNION ALL  SELECT DISTINCT         CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) AS [ID],         'MFID' AS ID_TYPE,          'Timely Recording MM' AS [Exception_Type],         ex.[CREATE_DATE],         ex.[EXCEPTION_FLAG],         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)),'_10_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE ex  UNION ALL  SELECT DISTINCT         CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) AS [ID],         'MFID' AS ID_TYPE,          'Best Execution RR' AS [Exception_Type],         ex.[CREATE_DATE],         ex.[EXCEPTION_FLAG],         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)),'_607_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR_TABLE ex  UNION ALL  SELECT DISTINCT         CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) AS [ID],         'MFID' AS ID_TYPE,          'Best Execution MM' AS [Exception_Type],         ex.[CREATE_DATE],         ex.[EXCEPTION_FLAG],         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)),'_607_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE ex  UNION ALL  SELECT DISTINCT         CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) AS [ID],         'MFID' AS ID_TYPE,          'TA Knockback' AS [Exception_Type],         ex.[CREATE_DATE],         ex.[EXCEPTION_FLAG],         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)),'_608_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_608_TA_KNOCKBACK_CASH_TABLE ex  UNION ALL  SELECT DISTINCT         CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) AS [ID],         'MFID' AS ID_TYPE,          'Deposits Reference Rate' AS [Exception_Type],         COALESCE(NULLIF(ex.[CREATE_DATE], '1900-01-01 00:00:00.000'), ex2.CREATE_DATE) AS [CREATE_DATE], 		CASE WHEN ex.CRR_EXCEPTION = 'Exception' then 1 else 0 END as [EXCEPTION_FLAG],         'A' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)),'_609_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE ex LEFT JOIN Vista_Reporting.dbo.MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE ex2 ON ex2.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER   UNION ALL  SELECT DISTINCT         CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) AS [ID],         'MFID' AS ID_TYPE,          'CP, CD, TBills, Cancellations & Amendments' AS [Exception_Type],         ex.[CREATE_DATE],         ex.[EXCEPTION_FLAG],         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)),'_610',ex.[TOUCH_COUNT]) AS ID_VG_NUMBER FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE ex  UNION ALL  SELECT DISTINCT         CAST(ex.[ORDER_ID] AS VARCHAR(50)) AS [ID],         'PM_ORD' AS ID_TYPE,          'Large Trades' AS [Exception_Type],         ex.[CREATE_DATE],         ex.[EXCEPTION_FLAG],         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_603_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_CASH_TABLE ex  UNION ALL  SELECT DISTINCT         CAST(ex.[ORDER_ID] AS VARCHAR(50)) AS [ID],         'PM_ORD' AS ID_TYPE,          'Timely Execution RR' AS [Exception_Type],         ex.[CREATE_DATE],         ex.[EXCEPTION_FLAG],         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_9_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_RR_TABLE ex  UNION ALL  SELECT DISTINCT         CAST(ex.[ORDER_ID] AS VARCHAR(50)) AS [ID],         'PM_ORD' AS ID_TYPE,          'Timely Execution MM' AS [Exception_Type],         ex.[CREATE_DATE],         ex.[EXCEPTION_FLAG],         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_9_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE ex  UNION ALL  SELECT DISTINCT         CAST(ex.[ORDER_ID] AS VARCHAR(50)) AS [ID],         'PM_ORD' AS ID_TYPE,          'EOD Holdovers' AS [Exception_Type],         ex.[CREATE_DATE],         ex.[EXCEPTION_FLAG],         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_602_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_CASH_TABLE ex  UNION  SELECT DISTINCT         CAST(ex.[ORDER_ID] AS VARCHAR(50)) AS [ID],         'PM_ORD' AS ID_TYPE,          'Client Order Handling RR' AS [Exception_Type],         ex.[CREATE_DATE],         ex.[EXCEPTION_FLAG],         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_604_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE ex  UNION ALL  SELECT DISTINCT         CAST(ex.[ORDER_ID] AS VARCHAR(50)) AS [ID],         'PM_ORD' AS ID_TYPE,          'Client Order Handling MM' AS [Exception_Type],         ex.[CREATE_DATE],         ex.[EXCEPTION_FLAG],         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_604_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE ex  UNION ALL  SELECT DISTINCT         CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) AS [ID],         'MFID' AS ID_TYPE,          'Gifts and Hospitality' AS [Exception_Type],         ex.[CREATE_DATE],         ex.[EXCEPTION_FLAG],         '' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)),'_16_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE ex         UNION ALL  SELECT DISTINCT         CAST(ex.[ORDER_ID] AS VARCHAR(50)) AS [ID],         'PM_ORD' AS ID_TYPE,          'Counterparty Direction' AS [Exception_Type],         ex.[CREATE_DATE],         ex.[EXCEPTION_FLAG],         '' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_17_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE ex  UNION ALL   SELECT DISTINCT         CAST(ex.[ORDER_ID] AS VARCHAR(50)) AS [ID],         'PM_ORD' AS ID_TYPE,          'Order Aggregation RR' AS [Exception_Type],         ex.VG_611_CREATETIME,         ex.EXCEPTION,         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_611_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_RR_TABLE ex  UNION ALL   SELECT DISTINCT         CAST(ex.[ORDER_ID] AS VARCHAR(50)) AS [ID],         'PM_ORD' AS ID_TYPE,          'Order Aggregation MM' AS [Exception_Type],         ex.VG_611_CREATETIME,         ex.EXCEPTION,         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_611_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_MM_TABLE ex  UNION ALL   SELECT DISTINCT         CAST(ex.TRANSACTION_NUMBER AS VARCHAR(50)) AS [ID],         'MFID' AS ID_TYPE,          'Order Allocation RR' AS [Exception_Type],         ex.VG_612_CREATETIME,         ex.EXCEPTION,         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_',CAST(ex.TRANSACTION_NUMBER AS VARCHAR(50)),'_612_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_RR_TABLE ex  UNION ALL   SELECT DISTINCT         CAST(ex.TRANSACTION_NUMBER AS VARCHAR(50)) AS [ID],         'MFID' AS ID_TYPE,          'Order Allocation MM' AS [Exception_Type],         ex.VG_612_CREATETIME,         ex.EXCEPTION,         'AB' AS [STATUS], 		ex.[DEALER_NAME],         ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_',CAST(ex.TRANSACTION_NUMBER AS VARCHAR(50)),'_612_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_MM_TABLE ex  --Because there are null order id's in the master table it means the ID_VG_NUMBERS seem improperly formatted in the final table  --because they come through as _12345_612_CM for example  IF OBJECT_ID('tempdb..#temp_cash_trades', 'U') IS NOT NULL DROP TABLE #temp_cash_trades SELECT DISTINCT  	ORDER_ID,  	TRANSACTION_NUMBER,  	DEALER_NAME_DECODE,  	DEALER_NAME,  	PRODUCT,  	BANK,  	BUSINESS_GROUP,  	TRADE_DATE,  	PULL_DATE  INTO #temp_cash_trades FROM VISTA_REPORTING.dbo.CASH_TRADES   IF OBJECT_ID('tempdb..#temp_cash_orders', 'U') IS NOT NULL DROP TABLE #temp_cash_orders SELECT DISTINCT  	ORDER_ID,  	PRODUCT,  	PRODUCT_TYPE,  	BUSINESS_GROUP,  	TRADE_DATE,  	PULL_DATE INTO #temp_cash_orders FROM VISTA_REPORTING.dbo.CASH_ORDERS   IF OBJECT_ID('tempdb..#temp_AL_trades', 'U') IS NOT NULL DROP TABLE #temp_AL_trades SELECT DISTINCT  	t.ORD_NUM,  	t.MULTI_FUND_ID,  	t.TRD_TRADER,  	t.TRD_COUNTERPARTY,  	t.FUND,  	t.TRD_EX_BROKER_CODE,  	t.TRD_TRADE_DATE,  	t.PULL_DATE, 	pr.INST_TYPE INTO #temp_AL_trades FROM VISTA_REPORTING.dbo.TRADES t LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID = t.MULTI_FUND_ID --WHERE pr.DEALING_DESK in ('CASH', 'FX')   IF OBJECT_ID('tempdb..#temp_pm_orders', 'U') IS NOT NULL DROP TABLE #temp_pm_orders SELECT DISTINCT  	ORD_NUM,  	OPEN_DATE,  	AUTH_TIME,  	PULL_DATE INTO #temp_pm_orders FROM VISTA_REPORTING.dbo.PM_ORDERS --WHERE DEALING_DESK in ('CASH', 'FX')   IF OBJECT_ID('tempdb..#temp_pg_table', 'U') IS NOT NULL DROP TABLE #temp_pg_table SELECT DISTINCT  	FUND_ID,  	PORTFOLIO_GROUP_NAME INTO #temp_pg_table FROM VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY   --Creating all Cash tables temp (for trades at trade/order level) IF OBJECT_ID('tempdb..#cash_tables', 'U') IS NOT NULL DROP TABLE #cash_tables  SELECT DISTINCT 	vg.[ID], 	'Cash' AS [DEALING_DESK], 	vg.[ID_TYPE], 	CASE 		WHEN vg.[DATA_SOURCE] = 'CM' AND vg.[Exception_Type] IN ('Timely Execution','EOD Holdovers','Large Trades','Client Order Handling','Counterparty Direction', 'Order Aggregation') --, 'Order Allocation' 		THEN co.[TRADE_DATE] 		WHEN vg.[DATA_SOURCE] = 'CM' AND vg.[Exception_Type] NOT IN ('Timely Execution','EOD Holdovers','Large Trades','Client Order Handling','Counterparty Direction', 'Order Aggregation') --, 'Order Allocation' 		THEN ct.[TRADE_DATE] 		WHEN vg.[DATA_SOURCE] = 'AL' AND vg.[Exception_Type] IN ('Timely Execution','EOD Holdovers','Large Trades','Client Order Handling','Counterparty Direction', 'Order Aggregation') --, 'Order Allocation' 		THEN COALESCE(pm2.[OPEN_DATE],pm.[OPEN_DATE]) 		WHEN vg.[DATA_SOURCE] = 'AL' AND vg.[Exception_Type] NOT IN ('Timely Execution','EOD Holdovers','Large Trades','Client Order Handling','Counterparty Direction', 'Order Aggregation') --, 'Order Allocation' 		THEN COALESCE(t.[TRD_TRADE_DATE],t2.[TRD_TRADE_DATE]) 		ELSE NULL 	END AS [DATE], 	vg.[Exception_Type], 	CASE 		WHEN vg.[DATA_SOURCE] = 'CM' THEN CONCAT('CASH','/',COALESCE(ct.[PRODUCT],ct2.[PRODUCT],co.[PRODUCT])) 		WHEN vg.[DATA_SOURCE] = 'AL' THEN CONCAT('CASH','/',COALESCE(t.[INST_TYPE],t2.[INST_TYPE]))  		ELSE NULL 	END AS [Asset_Type/Subtype], 	CASE  		WHEN vg.[DATA_SOURCE] = 'CM' AND vg.[Exception_Type] IN ('Timely Execution','EOD Holdovers','Large Trades','Client Order Handling','Counterparty Direction','Order Aggregation', 'Order Aggregation') --, 'Order Allocation' 		THEN co.[PRODUCT] 		WHEN vg.[DATA_SOURCE] = 'CM' AND vg.[Exception_Type] NOT IN ('Timely Execution','EOD Holdovers','Large Trades','Client Order Handling','Counterparty Direction','Order Aggregation', 'Order Aggregation') --, 'Order Allocation' 		THEN COALESCE(ct.[PRODUCT],ct2.[PRODUCT],co.[PRODUCT]) 		WHEN vg.[DATA_SOURCE] = 'AL' THEN COALESCE(t.[INST_TYPE],t2.[INST_TYPE]) 		ELSE NULL 	END AS [INST_TYPE], 	CASE 		WHEN vg.[DATA_SOURCE] = 'CM' THEN COALESCE(ct.[BANK],ct2.[BANK]) 		WHEN vg.[DATA_SOURCE] = 'AL' THEN COALESCE(t.[TRD_COUNTERPARTY],t.[TRD_EX_BROKER_CODE],t2.[TRD_COUNTERPARTY],t2.[TRD_EX_BROKER_CODE]) 	END AS [CPTY], 	tdd.[INITIALS] AS [DEALER1], 	NULL AS [Execution_Type_Decode], --Not going to be utilised for Cash 	vg.[CREATE_DATE], 	vg.[EXCEPTION_FLAG], 	vg.[STATUS], 	TRIM(STR(DATEPART(YEAR,vg.[CREATE_DATE])) + '-' + FORMAT(vg.[CREATE_DATE],'MMM')) AS MONTH_YEAR,  	DATEPART(DAY,vg.[CREATE_DATE])      AS [CREATE_DATE_DAY], 	DATEPART(MONTH,vg.[CREATE_DATE])	as [CREATE_DATE_MONTH], 	FORMAT(vg.[CREATE_DATE],'MMM')      AS [CREATE_DATE_MONTH_NAME], 	DATEPART(q,vg.[CREATE_DATE])        AS [CREATE_DATE_QUARTER], 	DATEPART(year,vg.[CREATE_DATE])     AS [CREATE_DATE_YEAR], 	vg.ID_VG_NUMBER, 	tdd.[INITIALS] AS INITIALS, 	vg.[DEALER_NAME] AS [DEALER_FULL_NAME], 	tdd.[INITIALS] AS [DEALER], 	CASE 		WHEN vg.[DATA_SOURCE] = 'AL' AND COALESCE(pgt.[PORTFOLIO_GROUP_NAME],pgt2.[PORTFOLIO_GROUP_NAME]) = 'PCAP_PROD' THEN 'PRUCAP' 		WHEN vg.[DATA_SOURCE] = 'AL' AND COALESCE(pgt.[PORTFOLIO_GROUP_NAME],pgt2.[PORTFOLIO_GROUP_NAME]) = 'PPMG_PROD' THEN 'PPMG' 		WHEN vg.[DATA_SOURCE] = 'AL' AND COALESCE(pgt.[PORTFOLIO_GROUP_NAME],pgt2.[PORTFOLIO_GROUP_NAME]) in ('MG_PROD','MG_PCAP') THEN 'MAGIM' 		WHEN vg.[DATA_SOURCE] = 'CM' THEN  COALESCE(ct.[BUSINESS_GROUP],ct2.[BUSINESS_GROUP],co.[BUSINESS_GROUP]) 	ELSE NULL 	END AS [BUSINESS_GROUP] INTO #cash_tables FROM #temp_vg_tables_cash vg LEFT JOIN #temp_cash_trades ct ON vg.[ID_TYPE] = 'MFID' AND vg.[ID] = ct.[TRANSACTION_NUMBER] and vg.[DATA_SOURCE] = 'CM'  LEFT JOIN #temp_cash_trades ct2 ON vg.[ID_TYPE] = 'PM_ORD' AND vg.[ID] = ct2.[ORDER_ID] and vg.[DATA_SOURCE] = 'CM'  LEFT JOIN #temp_cash_orders co ON (vg.[ID] = co.[ORDER_ID] and vg.[ID_TYPE] = 'PM_ORD') and vg.[DATA_SOURCE] = 'CM' LEFT JOIN #temp_AL_trades t ON vg.[ID] = t.[MULTI_FUND_ID] and vg.[ID_TYPE] = 'MFID' and vg.[DATA_SOURCE] = 'AL'  LEFT JOIN #temp_AL_trades t2 ON vg.[ID] = t2.[ORD_NUM] and vg.[ID_TYPE] = 'PM_ORD' and vg.[DATA_SOURCE] = 'AL'  --LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, INST_TYPE, ORD_NUM  --			FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE WHERE DEALING_DESK = 'CASH') pr ON t.[MULTI_FUND_ID] = pr.[MULTI_FUND_ID] --LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, INST_TYPE, ORD_NUM  --			FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE WHERE DEALING_DESK = 'CASH') pr2 ON t2.[ORD_NUM] = pr2.[ORD_NUM]  LEFT JOIN #temp_pm_orders pm ON t.[ORD_NUM] = pm.[ORD_NUM] LEFT JOIN #temp_pm_orders pm2 ON vg.[ID_TYPE] = 'PM_ORD' AND vg.[ID] = pm2.[ORD_NUM] and vg.[DATA_SOURCE] = 'AL'  LEFT JOIN VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd ON vg.[DEALER_NAME] = tdd.[FULL_NAME] and tdd.[DEALING_DESK] = 'CASH' --AND CAST(COALESCE(ct.PULL_DATE,ct2.PULL_DATE,co.PULL_DATE,t.PULL_DATE,t2.PULL_DATE,pm.PULL_DATE,pm2.PULL_DATE) AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE) LEFT JOIN #temp_pg_table pgt ON t.[FUND] = pgt.[FUND_ID] LEFT JOIN #temp_pg_table pgt2 ON t2.[FUND] = pgt2.[FUND_ID]   --Part 1 for #cash_tables_2 --Creating a temp table to do some of the 'case whens' from #cash_tables_2 to try and speed up the run time IF OBJECT_ID('tempdb..#cash_case_when', 'U') IS NOT NULL DROP TABLE #cash_case_when; SELECT	DISTINCT CONCAT(ISNULL(ex.ORDER_ID,0),'_',ISNULL(ex.TRANSACTION_NUMBER,0)) AS [ID] ,		CASE WHEN ex.[DATA_SOURCE] = 'CM' AND ex.TRANSACTION_NUMBER is not null  			 THEN COALESCE(ct.TRADE_DATE,ct2.TRADE_DATE) 			 WHEN ex.[DATA_SOURCE] = 'CM' AND ex.ORDER_ID is not null  			 THEN co.TRADE_DATE 			 WHEN ex.[DATA_SOURCE] = 'AL' AND ex.TRANSACTION_NUMBER is not null  			 THEN COALESCE(t2.TRD_TRADE_DATE,t.TRD_TRADE_DATE) 			 WHEN ex.[DATA_SOURCE] = 'AL' AND ex.ORDER_ID is not null  			 THEN COALESCE(pm2.OPEN_DATE,pm.OPEN_DATE) 			 ELSE NULL 			 END AS [DATE] ,		CASE WHEN ex.[DATA_SOURCE] = 'CM'  			 THEN CONCAT('CASH','/',ct.[PRODUCT],ct2.[PRODUCT],co.[PRODUCT]) 			 WHEN ex.[DATA_SOURCE] = 'AL'  			 THEN CONCAT('CASH','/',t.[INST_TYPE],t2.[INST_TYPE])  			 ELSE NULL 			 END AS [Asset_Type/Subtype] ,		CASE WHEN ex.[DATA_SOURCE] = 'CM'  			 THEN COALESCE(ct.[PRODUCT],ct2.[PRODUCT],co.[PRODUCT]) 			 WHEN ex.[DATA_SOURCE] = 'AL'  			 THEN COALESCE(t.[INST_TYPE],t2.[INST_TYPE]) 			 ELSE NULL 			 END AS [INST_TYPE] ,		CASE WHEN ex.[DATA_SOURCE] = 'CM'  			 THEN COALESCE(ct.[BANK],ct2.[BANK]) 			 WHEN ex.[DATA_SOURCE] = 'AL'  			 THEN COALESCE(t.[TRD_COUNTERPARTY],t.[TRD_EX_BROKER_CODE],t2.[TRD_COUNTERPARTY],t2.[TRD_EX_BROKER_CODE]) 			 END AS [CPTY] ,		CASE WHEN ex.[DATA_SOURCE] = 'AL' AND COALESCE(pgt.[PORTFOLIO_GROUP_NAME],pgt2.[PORTFOLIO_GROUP_NAME]) = 'PCAP_PROD'  			 THEN 'PRUCAP' 			 WHEN ex.[DATA_SOURCE] = 'AL' AND COALESCE(pgt.[PORTFOLIO_GROUP_NAME],pgt2.[PORTFOLIO_GROUP_NAME]) = 'PPMG_PROD'  			 THEN 'PPMG' 			 WHEN ex.[DATA_SOURCE] = 'AL' AND COALESCE(pgt.[PORTFOLIO_GROUP_NAME],pgt2.[PORTFOLIO_GROUP_NAME]) in ('MG_PROD','MG_PCAP')  			 THEN 'MAGIM' 			 WHEN ex.[DATA_SOURCE] = 'CM'  			 THEN  COALESCE(ct.[BUSINESS_GROUP],ct2.[BUSINESS_GROUP],co.[BUSINESS_GROUP]) 			 ELSE NULL 			 END AS [BUSINESS_GROUP] INTO #cash_case_when FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_CASH_TABLE ex LEFT JOIN #temp_cash_trades ct 	on (ex.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER] and NULLIF(ex.[ORDER_ID],0) is NULL) LEFT JOIN #temp_cash_trades ct2 ON (ex.[ORDER_ID] = ct2.[ORDER_ID]) and ex.[DATA_SOURCE] = 'CM' LEFT JOIN #temp_cash_orders co 	on (ex.[ORDER_ID] = co.[ORDER_ID]) and ex.[DATA_SOURCE] = 'CM' LEFT JOIN #temp_AL_trades t ON (ex.[TRANSACTION_NUMBER] = t.[MULTI_FUND_ID] and NULLIF(ex.[ORDER_ID],0) is NULL) LEFT JOIN #temp_AL_trades t2 ON (ex.[ORDER_ID] = t2.[ORD_NUM]) and ex.[DATA_SOURCE] = 'AL' LEFT JOIN #temp_pm_orders pm ON t.[ORD_NUM] = pm.[ORD_NUM] LEFT JOIN #temp_pm_orders pm2 ON ex.[ORDER_ID] = pm2.[ORD_NUM] and ex.[DATA_SOURCE] = 'AL' LEFT JOIN #temp_pg_table pgt ON t.[FUND] = pgt.[FUND_ID] LEFT JOIN #temp_pg_table pgt2 ON t2.[FUND] = pgt2.[FUND_ID];   --Part 2 for #cash_tables_2 --Creating all Cash tables temp (for trades at order AND trade level) IF OBJECT_ID('tempdb..#cash_tables_2', 'U') IS NOT NULL DROP TABLE #cash_tables_2 SELECT DISTINCT CONCAT(ISNULL(ex.ORDER_ID,0),'_',ISNULL(ex.TRANSACTION_NUMBER,0)) AS [ID], 	'Cash' AS [DEALING_DESK], 	'PM_ORD, MFID' AS ID_TYPE,  	cwc.[DATE], 	'Out of Hours' AS [Exception_Type], 	cwc.[Asset_Type/Subtype], 	cwc.[INST_TYPE], 	cwc.[CPTY], 	tdd.[INITIALS] AS [DEALER1], 	NULL AS [Execution_Type_Decode], 	ex.[CREATE_DATE], 	ex.[EXCEPTION_FLAG], 	'AB' AS [STATUS], 	TRIM(STR(DATEPART(YEAR,ex.[CREATE_DATE])) + '-' + FORMAT(ex.[CREATE_DATE],'MMM')) AS MONTH_YEAR,  	DATEPART(DAY,ex.[CREATE_DATE]) AS [CREATE_DATE_DAY], 	DATEPART(MONTH,ex.[CREATE_DATE]) AS [CREATE_DATE_MONTH], 	FORMAT(ex.[CREATE_DATE],'MMM') AS [CREATE_DATE_MONTH_NAME], 	DATEPART(q,ex.[CREATE_DATE]) AS [CREATE_DATE_QUARTER], 	DATEPART(year,ex.[CREATE_DATE]) AS [CREATE_DATE_YEAR], 	CONCAT(CONCAT(ISNULL(ex.ORDER_ID,0),'_',ISNULL(ex.TRANSACTION_NUMBER,0)),'_601_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 	tdd.[INITIALS], 	ex.[DEALER_NAME] AS [DEALER_FULL_NAME], 	tdd.[INITIALS] AS [DEALER], 	cwc.[BUSINESS_GROUP] INTO #cash_tables_2 FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_CASH_TABLE ex LEFT JOIN #temp_AL_trades t ON (ex.[TRANSACTION_NUMBER] = t.[MULTI_FUND_ID] and NULLIF(ex.[ORDER_ID],0) is NULL) LEFT JOIN VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd 	on ex.[DEALER_NAME] = tdd.[FULL_NAME] and tdd.[DEALING_DESK] = 'CASH'  LEFT JOIN #cash_case_when cwc ON cwc.ID = CONCAT(ISNULL(ex.ORDER_ID,0),'_',ISNULL(ex.TRANSACTION_NUMBER,0));    IF OBJECT_ID('tempdb..#temp_vg_tables_fx', 'U') IS NOT NULL DROP TABLE #temp_vg_tables_fx SELECT DISTINCT  		CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) AS [ID], 		'MFID' AS ID_TYPE,  		'Spot Reference Rate' AS [Exception_Type], 		COALESCE(NULLIF(ex.[CREATE_DATE], '1900-01-01 00:00:00.000'), ex2.CREATE_DATE) AS CREATE_DATE, 		CASE WHEN ex.SRR_EXCEPTION = 'Exception' then 1 else 0 END as [EXCEPTION_FLAG], 		'A' AS [STATUS], 		ex.[DEALER_NAME] AS DEALER_NAME, 		ex.[DATA_SOURCE], 		CONCAT(CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)),'_501_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER INTO #temp_vg_tables_fx FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE ex LEFT JOIN Vista_Reporting.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE ex2 ON ex2.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER  UNION ALL  SELECT DISTINCT 	CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) AS [ID], 	'MFID' AS ID_TYPE,  	'Best Execution' AS [Exception_Type], 	ex.[CREATE_DATE],     ex.[EXCEPTION_FLAG], 	'AB' AS [STATUS], 	ex.[DEALER_NAME] AS DEALER_NAME, 	ex.[DATA_SOURCE], 	CONCAT(CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)),'_607_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE ex  UNION ALL  SELECT DISTINCT 	CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) AS [ID], 	'MFID' AS ID_TYPE,  	'Timely Recording' AS [Exception_Type], 	ex.[CREATE_DATE], 	ex.[EXCEPTION_FLAG], 	'AB' AS [STATUS], 	ex.[DEALER_NAME] AS DEALER_NAME, 	ex.[DATA_SOURCE], 	CONCAT(CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)),'_10_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE ex  UNION ALL  SELECT DISTINCT 	CAST(ex.[ORDER_ID] AS VARCHAR(50)) AS [ID], 	'PM_ORD' AS ID_TYPE,  	'Order Request Return' AS [Exception_Type], 	ex.[CREATE_DATE], 	ex.[EXCEPTION_FLAG], 	'AB' AS [STATUS], 	ex.[DEALER_NAME] AS DEALER_NAME, 	ex.[DATA_SOURCE], 	CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_608_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE ex  UNION ALL  SELECT DISTINCT 	CAST(ex.[ORDER_ID] AS VARCHAR(50)) AS [ID], 	'PM_ORD' AS ID_TYPE,  	'Large Trades' AS [Exception_Type], 	ex.[CREATE_DATE], 	ex.[EXCEPTION_FLAG], 	'AB' AS [STATUS], 	ex.[DEALER_NAME] AS DEALER_NAME, 	ex.[DATA_SOURCE], 	CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_603_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE ex  UNION ALL  SELECT DISTINCT 	CAST(ex.[ORDER_ID] AS VARCHAR(50)) AS [ID], 	'PM_ORD' AS ID_TYPE,  	'Timely Execution' AS [Exception_Type], 	ex.[CREATE_DATE], 	ex.[EXCEPTION_FLAG], 	'AB' AS [STATUS], 	ex.[DEALER_NAME] AS DEALER_NAME, 	ex.[DATA_SOURCE], 	CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_9_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE ex  UNION ALL  SELECT DISTINCT 	CAST(ex.[ORDER_ID] AS VARCHAR(50)) AS [ID], 	'PM_ORD' AS ID_TYPE,  	'EOD Holdovers' AS [Exception_Type], 	ex.[CREATE_DATE], 	ex.[EXCEPTION_FLAG], 	'AB' AS [STATUS], 	ex.[DEALER_NAME] AS DEALER_NAME, 	ex.[DATA_SOURCE], 	CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_602_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE ex  UNION ALL  SELECT DISTINCT 	CAST(ex.[ORDER_ID] AS VARCHAR(50)) AS [ID], 	'PM_ORD' AS ID_TYPE,  	'Dealer Limit' AS [Exception_Type], 	ex.[CREATE_DATE], 	ex.[EXCEPTION_FLAG], 	'AB' AS [STATUS], 	ex.[DEALER_NAME] AS DEALER_NAME, 	ex.[DATA_SOURCE], 	CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_500_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE ex  UNION ALL  	SELECT DISTINCT     CAST(ex.[ORDER_ID] AS VARCHAR(50)) AS [ID],     'PM_ORD' AS ID_TYPE,      'Client Order Handling' AS [Exception_Type],     ex.[CREATE_DATE],     ex.[EXCEPTION_FLAG],     'AB' AS [STATUS], 	ex.[DEALER_NAME] AS DEALER_NAME,     ex.[DATA_SOURCE], 	CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_604_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE ex  UNION ALL  SELECT DISTINCT 	CAST(ex.[TRANSACTION_NUMBER] AS VARCHAR(50)) AS [ID], 	'MFID' AS ID_TYPE,  	'Gifts and Hospitality' AS [Exception_Type], 	ex.[CREATE_DATE], 	ex.[EXCEPTION_FLAG], 	'' AS [STATUS], 	ex.[TRADER_NAME] AS DEALER_NAME, 	ex.[DATA_SOURCE], 	CONCAT(CAST(ex.TRANSACTION_NUMBER AS VARCHAR(50)),'_16_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE ex 	 UNION ALL  SELECT DISTINCT 	CAST(ex.[ORDER_ID] AS VARCHAR(50)) AS [ID], 	'PM_ORD' AS ID_TYPE,  	'Counterparty Direction' AS [Exception_Type], 	ex.[CREATE_DATE], 	ex.[EXCEPTION_FLAG], 	'' AS [STATUS], 	ex.[TRADER_NAME] AS DEALER_NAME, 	ex.[DATA_SOURCE], 	CONCAT(CAST(ex.[ORDER_ID] AS VARCHAR(50)),'_17_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_FX_TABLE ex  UNION ALL  SELECT DISTINCT 	CAST(ex.[FX_ORDER_ID] AS VARCHAR(50)) AS [ID], 	'PM_ORD' AS ID_TYPE,  	'Order Aggregation' AS [Exception_Type], 	ex.vg_611_CREATETIME, 	ex.[EXCEPTION], 	'AB' AS [STATUS], 	ex.DEALER_NAME, 	ex.DATA_SOURCE, 	CONCAT(CAST(ex.[FX_ORDER_ID] AS VARCHAR(50)),'_611_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_FX_TABLE ex  UNION ALL  SELECT DISTINCT 	CAST(ex.TRADE_ID AS VARCHAR(50)) AS [ID], 	'MFID' AS ID_TYPE,  	'Order Allocation' AS [Exception_Type], 	ex.vg_612_CREATETIME, 	ex.[EXCEPTION], 	'AB' AS [STATUS], 	ex.DEALER_NAME, 	ex.DATA_SOURCE, 	CONCAT(CAST(ex.[FX_ORDER_ID] AS VARCHAR(50)),'_',CAST(ex.TRADE_ID AS VARCHAR(50)),'_612_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_FX_TABLE ex   IF OBJECT_ID('tempdb..#temp_fx_trades', 'U') IS NOT NULL DROP TABLE #temp_fx_trades SELECT DISTINCT  	ORDER_ID,  	TRADE_ID,  	DEALT_BY,  	INSTRUCTION_TYPE,  	EXECUTED_BANK,  	NR_LEG_PRODUCT,  	TRADE_DATE,  	FR_LEG_PRODUCT,  	PULL_DATE INTO #temp_fx_trades FROM VISTA_REPORTING.dbo.FX_TRADES   IF OBJECT_ID('tempdb..#temp_fx_orders', 'U') IS NOT NULL DROP TABLE #temp_fx_orders SELECT DISTINCT  	FXM_ORDER_ID,  	INSTRUCTION_TYPE,  	BUSINESS_GROUP,  	ORDER_TRADE_DATE,  	PULL_DATE  INTO #temp_fx_orders	 FROM VISTA_REPORTING.dbo.FX_ORDERS    --Part 1 of #fx_tables --Creating a smaller population of orders cross to speed up the run time IF OBJECT_ID('tempdb..#temp_oc_fx', 'U') IS NOT NULL DROP TABLE #temp_oc_fx; SELECT oc.*  INTO #temp_oc_fx FROM Vista_Reporting.dbo.ORDERS_CROSS oc WHERE EXISTS (SELECT vg.ID FROM #temp_vg_tables_fx vg WHERE vg.ID = oc.PM_ORD);   --Part 2 of #fx_tables --Adding in a temp table for the 'case when' statements to try and speed up the run time of #fx_tables IF OBJECT_ID('tempdb..#fx_case_when', 'U') IS NOT NULL DROP TABLE #fx_case_when; SELECT	DISTINCT vg.[ID] ,		'FX' AS [DEALING_DESK] ,		CASE WHEN vg.[DATA_SOURCE] = 'FX' AND vg.[Exception_Type] IN ('Timely Execution','Dealer Limit','EOD Holdovers','Large Trades','Client Order Handling','Counterparty Direction','Order Request Return','Order Aggregation') --, 'Order Allocation' 			 THEN fxo.[ORDER_TRADE_DATE] 			 WHEN vg.[DATA_SOURCE] = 'FX' AND vg.[Exception_Type] NOT IN ('Timely Execution','Dealer Limit','EOD Holdovers','Large Trades','Client Order Handling','Counterparty Direction','Order Request Return','Order Aggregation') --, 'Order Allocation' 			 THEN fxt.[TRADE_DATE] 			 WHEN vg.[DATA_SOURCE] = 'AL' AND vg.[Exception_Type] IN ('Timely Execution','Dealer Limit','EOD Holdovers','Large Trades','Client Order Handling','Counterparty Direction','Order Request Return','Order Aggregation') --, 'Order Allocation' 			 THEN COALESCE(PM2.[OPEN_DATE],pm.[OPEN_DATE]) 			 WHEN vg.[DATA_SOURCE] = 'AL' AND vg.[Exception_Type] NOT IN ('Timely Execution','Dealer Limit','EOD Holdovers','Large Trades','Client Order Handling','Counterparty Direction','Order Request Return','Order Aggregation') --, 'Order Allocation' 			 THEN t.[TRD_TRADE_DATE] 			 ELSE NULL 			 END AS [DATE] ,		CASE WHEN vg.[DATA_SOURCE] = 'FX'  			 THEN CONCAT('FX',' /',COALESCE(fxt.[INSTRUCTION_TYPE],fxt2.[INSTRUCTION_TYPE],fxo.[INSTRUCTION_TYPE],(fxt.[NR_LEG_PRODUCT] + ISNULL(' | ' + fxt.[FR_LEG_PRODUCT],'')))) 			 WHEN vg.[DATA_SOURCE] = 'AL'  			 THEN CONCAT('FX',' /',COALESCE(t.[INST_TYPE],t2.[INST_TYPE]))  			 ELSE NULL 			 END AS [Asset_Type/Subtype] ,		CASE WHEN vg.[DATA_SOURCE] = 'FX'  			 THEN COALESCE(fxt.[INSTRUCTION_TYPE],fxt2.[INSTRUCTION_TYPE],fxo.[INSTRUCTION_TYPE],(fxt.[NR_LEG_PRODUCT] + ISNULL(' | ' + fxt.[FR_LEG_PRODUCT],''))) 			 WHEN vg.[DATA_SOURCE] = 'AL'  			 THEN COALESCE(t.[INST_TYPE],t.[INST_TYPE])  			 ELSE NULL 			 END AS [INST_TYPE] ,		CASE WHEN vg.[DATA_SOURCE] = 'FX'  			 THEN COALESCE(fxt.[EXECUTED_BANK],fxt2.[EXECUTED_BANK]) 			 WHEN vg.[DATA_SOURCE] = 'AL'  			 THEN COALESCE(t.[TRD_COUNTERPARTY],t2.[TRD_COUNTERPARTY]) 			 END AS [CPTY] ,		CASE WHEN vg.[DATA_SOURCE] = 'AL' AND COALESCE(pgt.[PORTFOLIO_GROUP_NAME],pgt2.[PORTFOLIO_GROUP_NAME]) = 'PCAP_PROD'  			 THEN 'PRUCAP' 			 WHEN vg.[DATA_SOURCE] = 'AL' AND COALESCE(pgt.[PORTFOLIO_GROUP_NAME],pgt2.[PORTFOLIO_GROUP_NAME]) = 'PPMG_PROD'  			 THEN 'PPMG' 			 WHEN vg.[DATA_SOURCE] = 'AL' AND COALESCE(pgt.[PORTFOLIO_GROUP_NAME],pgt2.[PORTFOLIO_GROUP_NAME]) in ('MG_PROD','MG_PCAP')  			 THEN 'MAGIM' 			 WHEN vg.[DATA_SOURCE] = 'FX'  			 THEN COALESCE(fxo.[BUSINESS_GROUP],fxo2.[BUSINESS_GROUP]) 			 ELSE NULL 			 END AS [BUSINESS_GROUP] INTO #fx_case_when FROM #temp_vg_tables_fx vg LEFT JOIN #temp_fx_trades fxt on vg.[ID_TYPE] = 'MFID' AND vg.[ID] = fxt.[TRADE_ID] and vg.[DATA_SOURCE] = 'FX'  LEFT JOIN #temp_fx_trades fxt2 on vg.[ID_TYPE] = 'PM_ORD' AND vg.[ID] = fxt2.[ORDER_ID] and vg.[DATA_SOURCE] = 'FX'  LEFT JOIN #temp_fx_orders fxo on (vg.[ID] = fxo.[FXM_ORDER_ID] and vg.[ID_TYPE] = 'PM_ORD') and vg.[DATA_SOURCE] = 'FX' LEFT JOIN #temp_fx_orders fxo2 on (fxt.[ORDER_ID] = fxo2.[FXM_ORDER_ID])  LEFT JOIN #temp_AL_trades t on vg.[ID] = t.[MULTI_FUND_ID] and vg.[ID_TYPE] = 'MFID' and vg.[DATA_SOURCE] = 'AL'  LEFT JOIN #temp_pm_orders pm on t.[ORD_NUM] = pm.[ORD_NUM] LEFT JOIN #temp_pm_orders pm2 on vg.[ID_TYPE] = 'PM_ORD' AND vg.[ID] = pm2.[ORD_NUM] and vg.[DATA_SOURCE] = 'AL' LEFT JOIN #temp_oc_fx oc on oc.[PM_ORD] = pm2.[ORD_NUM]  LEFT JOIN #temp_AL_trades t2 on pm.ORD_NUM = t2.[ORD_NUM]  LEFT JOIN VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd on vg.[DEALER_NAME] = tdd.[FULL_NAME] and tdd.[DEALING_DESK] = 'FX' --AND CAST(COALESCE(fxt.PULL_DATE,fxt2.PULL_DATE,fxo.PULL_DATE,fxo2.PULL_DATE,t.PULL_DATE,t2.PULL_DATE,pm.PULL_DATE,pm2.PULL_DATE) AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE) LEFT JOIN #temp_pg_table pgt on t.[FUND] = pgt.[FUND_ID] LEFT JOIN #temp_pg_table pgt2 on t2.[FUND] = pgt2.[FUND_ID];   --Part 2 of #fx_tables --Creating all FX tables temp (for trades at trade/order level) IF OBJECT_ID('tempdb..#fx_tables', 'U') IS NOT NULL DROP TABLE #fx_tables; SELECT DISTINCT 	vg.[ID], 	'FX' AS [DEALING_DESK], 	vg.[ID_TYPE], 	fxc.[DATE], 	vg.[Exception_Type], 	fxc.[Asset_Type/Subtype], 	fxc.[INST_TYPE], 	fxc.[CPTY], 	tdd.[INITIALS] AS [DEALER1], 	NULL AS [Execution_Type_Decode], --Not going to be utilised for FX 	vg.[CREATE_DATE], 	vg.[EXCEPTION_FLAG], 	vg.[STATUS], 	TRIM(STR(DATEPART(YEAR,vg.[CREATE_DATE])) + '-' + FORMAT(vg.[CREATE_DATE],'MMM')) AS MONTH_YEAR,  	DATEPART(DAY,vg.[CREATE_DATE])		as [CREATE_DATE_DAY], 	DATEPART(MONTH,vg.[CREATE_DATE])		as [CREATE_DATE_MONTH], 	FORMAT(vg.[CREATE_DATE],'MMM')		as [CREATE_DATE_MONTH_NAME], 	DATEPART(q,vg.[CREATE_DATE])			as [CREATE_DATE_QUARTER], 	DATEPART(year,vg.[CREATE_DATE])		as [CREATE_DATE_YEAR], 	vg.ID_VG_NUMBER, 	tdd.[INITIALS] AS INITIALS, 	vg.[DEALER_NAME] AS [DEALER_FULL_NAME], 	tdd.[INITIALS] AS [DEALER], 	fxc.[BUSINESS_GROUP] INTO #fx_tables FROM #temp_vg_tables_fx vg LEFT JOIN #fx_case_when fxc on fxc.ID = vg.ID LEFT JOIN VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd on vg.[DEALER_NAME] = tdd.[FULL_NAME] and tdd.[DEALING_DESK] = 'FX'    --Creating all FX tables temp (for trades at order AND trade level) IF OBJECT_ID('tempdb..#fx_tables_2', 'U') IS NOT NULL DROP TABLE #fx_tables_2 SELECT DISTINCT 	CONCAT(ISNULL(ex.ORDER_ID,0),'_',ISNULL(ex.TRANSACTION_NUMBER,0)) AS [ID], 	'FX' AS DEALING_DESK, 	'PM_ORD, MFID' AS ID_TYPE,  	CASE 		WHEN ex.[DATA_SOURCE] = 'FX' AND ex.TRANSACTION_NUMBER is not null THEN COALESCE(fxt.TRADE_DATE,fxt2.TRADE_DATE) 		WHEN ex.[DATA_SOURCE] = 'FX' AND ex.ORDER_ID is not null THEN fxo.ORDER_TRADE_DATE 		WHEN ex.[DATA_SOURCE] = 'AL' AND ex.TRANSACTION_NUMBER is not null THEN COALESCE(t2.TRD_TRADE_DATE,t.TRD_TRADE_DATE) 		WHEN ex.[DATA_SOURCE] = 'AL' AND ex.ORDER_ID is not null THEN COALESCE(pm2.OPEN_DATE,pm.OPEN_DATE) 		ELSE NULL 	END AS [DATE], 	'Out of Hours' AS [Exception_Type], 	CASE 		WHEN ex.[DATA_SOURCE] = 'FX' THEN CONCAT('FX',' /',COALESCE(fxt.[INSTRUCTION_TYPE],fxt2.[INSTRUCTION_TYPE],fxo.[INSTRUCTION_TYPE],(fxt.[NR_LEG_PRODUCT] + ISNULL(' | ' + fxt.[FR_LEG_PRODUCT],'')))) 		WHEN ex.[DATA_SOURCE] = 'AL' THEN CONCAT('FX',' /',COALESCE(t.[INST_TYPE],t2.[INST_TYPE]))  	ELSE NULL 	END AS [Asset_Type/Subtype], 	CASE  		WHEN ex.[DATA_SOURCE] = 'FX' THEN COALESCE(fxt.[INSTRUCTION_TYPE],fxt2.[INSTRUCTION_TYPE],fxo.[INSTRUCTION_TYPE],(fxt.[NR_LEG_PRODUCT] + ISNULL(' | ' + fxt.[FR_LEG_PRODUCT],''))) 		WHEN ex.[DATA_SOURCE] = 'AL' THEN COALESCE(t.[INST_TYPE],t2.[INST_TYPE])  	ELSE NULL 	END AS [INST_TYPE], 	CASE 		WHEN ex.[DATA_SOURCE] = 'FX' THEN COALESCE(fxt.[EXECUTED_BANK],fxt2.[EXECUTED_BANK]) 		WHEN ex.[DATA_SOURCE] = 'AL' THEN COALESCE(t.[TRD_COUNTERPARTY],t2.[TRD_COUNTERPARTY]) 	END AS [CPTY], 	tdd.[INITIALS] AS [DEALER1], 	NULL AS [Execution_Type_Decode], --Not going to be utilised for FX 	ex.[CREATE_DATE], 	ex.[EXCEPTION_FLAG], 	'AB' AS [STATUS], 	TRIM(STR(DATEPART(YEAR,ex.[CREATE_DATE])) + '-' + FORMAT(ex.[CREATE_DATE],'MMM')) AS MONTH_YEAR,  	DATEPART(DAY,ex.[CREATE_DATE]) AS [CREATE_DATE_DAY], 	DATEPART(MONTH,ex.[CREATE_DATE]) AS [CREATE_DATE_MONTH], 	FORMAT(ex.[CREATE_DATE],'MMM') AS [CREATE_DATE_MONTH_NAME], 	DATEPART(q,ex.[CREATE_DATE]) AS [CREATE_DATE_QUARTER], 	DATEPART(year,ex.[CREATE_DATE])	as [CREATE_DATE_YEAR], 	CONCAT(CONCAT(ISNULL(ex.ORDER_ID,0),'_',ISNULL(ex.TRANSACTION_NUMBER,0)),'_601_',ex.[DATA_SOURCE]) AS ID_VG_NUMBER, 	tdd.[INITIALS] AS INITIALS, 	ex.[DEALER_NAME] AS [DEALER_FULL_NAME], 	tdd.[INITIALS] AS [DEALER], 	CASE 		WHEN ex.[DATA_SOURCE] = 'AL' AND COALESCE(pgt.[PORTFOLIO_GROUP_NAME],pgt2.[PORTFOLIO_GROUP_NAME]) = 'PCAP_PROD' THEN 'PRUCAP' 		WHEN ex.[DATA_SOURCE] = 'AL' AND COALESCE(pgt.[PORTFOLIO_GROUP_NAME],pgt2.[PORTFOLIO_GROUP_NAME]) = 'PPMG_PROD' THEN 'PPMG' 		WHEN ex.[DATA_SOURCE] = 'AL' AND COALESCE(pgt.[PORTFOLIO_GROUP_NAME],pgt2.[PORTFOLIO_GROUP_NAME]) in ('MG_PROD','MG_PCAP') THEN 'MAGIM' 		WHEN ex.[DATA_SOURCE] = 'FX' THEN fxo.[BUSINESS_GROUP] 	ELSE NULL 	END AS [BUSINESS_GROUP] 	--ex.[DATA_SOURCE] INTO #fx_tables_2 FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE ex LEFT JOIN #temp_fx_trades fxt on ex.[TRANSACTION_NUMBER] = fxt.[TRADE_ID] and ex.[DATA_SOURCE] = 'FX' LEFT JOIN #temp_fx_trades fxt2 on (ex.[ORDER_ID] = fxt2.[ORDER_ID]) and ex.[DATA_SOURCE] = 'FX' LEFT JOIN #temp_fx_orders fxo on (ex.[ORDER_ID] = fxo.[FXM_ORDER_ID]) and ex.[DATA_SOURCE] = 'FX' LEFT JOIN #temp_AL_trades t on ex.[TRANSACTION_NUMBER] = t.[MULTI_FUND_ID] and ex.[DATA_SOURCE] = 'AL' LEFT JOIN #temp_AL_trades t2 on (ex.[ORDER_ID] = t2.[ORD_NUM]) and ex.[DATA_SOURCE] = 'AL' LEFT JOIN #temp_pm_orders pm on t.[ORD_NUM] = pm.[ORD_NUM] LEFT JOIN #temp_pm_orders pm2 on ex.[ORDER_ID] = pm2.[ORD_NUM] and ex.[DATA_SOURCE] = 'AL' LEFT JOIN VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd on ex.[DEALER_NAME] = tdd.[FULL_NAME] and tdd.[DEALING_DESK] = 'FX' --AND CAST(COALESCE(fxt.PULL_DATE,fxt2.PULL_DATE,fxo.PULL_DATE,t.PULL_DATE,t2.PULL_DATE,pm.PULL_DATE,pm2.PULL_DATE) AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE) LEFT JOIN #temp_pg_table pgt on t.[FUND] = pgt.[FUND_ID] LEFT JOIN #temp_pg_table pgt2 on t2.[FUND] = pgt2.[FUND_ID]     IF OBJECT_ID('tempdb..#temp_AL_exceptions_table', 'U') IS NOT NULL DROP TABLE #temp_AL_exceptions_table SELECT DISTINCT 	[ORDER] AS [ID], 	'DMG' AS [Dealing_Desk],  	'PM_ORD' AS [ID_TYPE], 	[AUTH_TIME] AS [DATE], 	'Timely Execution Exceptions' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[CPTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[CREATE_DATE], 	[EXCEPTION_FLAG], 	'AB' AS [STATUS] INTO #temp_AL_exceptions_table FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE UNION ALL																																																											 																																																	     SELECT DISTINCT 	[OP_ID] AS [ID], 	'DMG' AS [Dealing_Desk], 	'TRD_ORD' AS [ID_TYPE], 	[AUTH_TIME] AS [DATE], 	'Order Priority Exceptions' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[CPTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode],  	[CREATE_DATE], 	[EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE op_dmg LEFT JOIN (SELECT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON oc.PM_ORD = op_dmg.[ORDER]																																																																																  LEFT JOIN (SELECT OP_ID, [Trade]  FROM VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_DMG_TABLE) vgop_dmg ON vgop_dmg.OP_ID = oc.TRD_ORD																																																																								  UNION ALL																																																																																							   																				         SELECT DISTINCT 	COALESCE(vgoa_dmg2.[OA_ID],vgoa_dmg.OA_ID)as [ID], 	'DMG' AS [Dealing_Desk],  	'MFID' AS [ID_TYPE], 	[AUTH_TIME] AS [DATE], 	'Order Aggregation Exceptions' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[CPTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[CREATE_DATE], 	[EXCEPTION_FLAG], 'AB' AS [STATUS]  FROM VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_13_ORDER_AGGREGATION_DMG_TABLE oa_dmg LEFT JOIN (SELECT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON oc.PM_ORD = oa_dmg.[ORDER]																																																																																  LEFT JOIN (SELECT OA_ID, ORD_NUM, [Trade] FROM VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_DMG_TABLE) vgoa_dmg ON vgoa_dmg.ORD_NUM = oc.TRD_ORD and vgoa_dmg.Trade is null																								 																																																	 LEFT JOIN (SELECT OA_ID, ORD_NUM, [Trade] FROM VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_DMG_TABLE) vgoa_dmg2 ON vgoa_dmg2.ORD_NUM = oc.TRD_ORD and vgoa_dmg2.Trade is not null and vgoa_dmg2.Trade = oa_dmg.MFID UNION ALL																																																									 																																																	   																			   							 				    SELECT DISTINCT 	[MFID] AS [ID], 	'DMG' AS [Dealing_Desk], 	'MFID' AS [ID_TYPE], 	[TRADE_DATE] AS [DATE], 	'Quote Exceptions' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[CPTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[CREATE_DATE], 	[EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_01_QUOTE_EXCEPTION_DMG_TABLE UNION ALL											   																		    																													 																														   																			        SELECT DISTINCT 	[MFID] AS [ID], 	'DMG' AS [Dealing_Desk], 	'MFID' AS [ID_TYPE], 	[TRADE_DATE] AS [DATE], 	'NWQ Exceptions' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[CPTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[CREATE_DATE], 	[EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_07_NON_WINNING_QUOTE_DMG_TABLE UNION ALL	 										   																		    																													 																														   																			        SELECT DISTINCT 	[MFID] AS [ID], 	'DMG' AS [Dealing_Desk], 	'MFID' AS [ID_TYPE], 	[TRADE_DATE] AS [DATE], 	'Timely Recording Exceptions' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[CPTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[CREATE_DATE], 	[EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_DMG_TABLE UNION ALL											   																		    																													 																														   																			        SELECT DISTINCT 	[MFID] AS [ID], 	'DMG' AS [Dealing_Desk], 	'MFID' AS [ID_TYPE], 	[TRADE_DATE] AS [DATE], 	'Interfund Transfer Exceptions' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[CPTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[CREATE_DATE], 	[EXCEPTION_FLAG], 	'AB' AS [STATUS]  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_25_INTERFUND_TRANSFER_DMG_TABLE UNION ALL											   																		    																													 																														   																			        SELECT DISTINCT 	[MFID] AS [ID], 	'DMG' AS [Dealing_Desk], 	'MFID' AS [ID_TYPE], 	[TRADE_DATE] AS [DATE], 	'Trades Without Orders Exceptions' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[CPTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[CREATE_DATE], 	[EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE UNION ALL																													    																													 																														   																			     SELECT DISTINCT 	concat([MFID],'_15',[TOUCH_COUNT]) AS [ID], 	'DMG' AS [Dealing_Desk], 	'MFID' AS [ID_TYPE], 	[EXEC_DATE] AS [DATE], 	'Amendments' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[CPTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[CREATE_DATE], 	[EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_VG_15_AMENDMENT_FLAG_DMG_TABLE UNION ALL											   																		    																																																								 																											 SELECT DISTINCT 	[MULTI_FUND_ID] AS [ID], 	[Dealing_Desk], 	'MFID' AS [ID_TYPE], 	[Trade Date] AS [DATE], 	'Quote Exceptions' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[TRD_COUNTERPARTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[VG_01_CREATETIME] AS [CREATE_DATE], 	[VG_01] AS [EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE UNION ALL											   				    													    																																																					    																					         SELECT DISTINCT 	[MULTI_FUND_ID] AS [ID], 	[Dealing_Desk], 	'MFID' AS [ID_TYPE], 	[Trade Date] AS [DATE], 	'NWQ Exceptions' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[TRD_COUNTERPARTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode],  	[VG_07_CREATETIME] AS [CREATE_DATE], 	[VG_07] AS [EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE UNION ALL											   				    													    																																																					    																					         SELECT DISTINCT 	[MULTI_FUND_ID] AS [ID], 	[Dealing_Desk], 	'MFID' AS [ID_TYPE], 	[Trade Date] AS [DATE], 	'Timely Recording' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[TRD_COUNTERPARTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[VG_10_CREATETIME] AS [CREATE_DATE], 	[VG_10] AS [EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE UNION ALL										   				    													    																																																					    																					         SELECT DISTINCT 	[MULTI_FUND_ID] AS [ID], 	[Dealing_Desk], 	'MFID' AS [ID_TYPE], 	[Trade Date] AS [DATE], 	'Timely Recording NAV' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[TRD_COUNTERPARTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	VG_10_NAV_CREATETIME AS [CREATE_DATE], 	VG_10_NAV AS [EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE WHERE DEALING_DESK = 'Equity'  UNION ALL											   				    													    																																																					    																					         SELECT DISTINCT 	[MULTI_FUND_ID] AS [ID], 	[Dealing_Desk], 	'MFID' AS [ID_TYPE], 	[Trade Date] AS [DATE], 	'Interfund Transfer Exceptions' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[TRD_COUNTERPARTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[VG_25_CREATETIME] AS [CREATE_DATE], 	[VG_25] AS [EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE UNION ALL															    													    																																																																								   		     SELECT DISTINCT 	[ORD_NUM] AS [ID], 	[Dealing_Desk], 	'TRD_ORD' AS [ID_TYPE], 	[Auth Time] AS [DATE], 	'Order Priority Exceptions' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[TRD_COUNTERPARTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[VG_14_CREATETIME] AS [CREATE_DATE], 	[VG_14] AS [EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_ORDER_PRIORITY_TABLE UNION ALL															    																																																																								 																	 							 SELECT DISTINCT 	[ORD_NUM] AS [ID], 	[Dealing_Desk], 	'PM_ORD' AS [ID_TYPE], 	[AUTH_TIME] AS [DATE], 	'Timely Release Exceptions' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[TRD_COUNTERPARTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[VG_11_CREATETIME] AS [CREATE_DATE], 	[VG_11] AS [EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER WHERE DEALING_DESK = 'Equity' UNION ALL															    													    																																																																										    												    SELECT DISTINCT 	[OA_ID] AS [ID], 	[Dealing_Desk], 	'TRD_ORD' AS [ID_TYPE], 	[Auth Time] AS [DATE], 	'Order Aggregation Exceptions' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[TRD_COUNTERPARTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[VG_13_CREATETIME] AS [CREATE_DATE], 	[VG_13] AS [EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_TRD_ORDER_TABLE WHERE OA_ID is not null UNION ALL															    																																																																																													   			 	   																	    SELECT DISTINCT 	concat([MULTI_FUND_ID],'_15',TOUCH_COUNT) AS [ID], 	[Dealing_Desk], 	'MFID' AS [ID_TYPE], 	[EXECUTION_TIME] AS [DATE], 	'Amendments' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[TRD_COUNTERPARTY], 	[TRADER] AS [DEALER1], 	[Execution_Type_Decode], 	[AMENDMENT_FLAG_CREATETIME] AS [CREATE_DATE], 	1 AS [EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE  UNION ALL															    																																																																																												   			 	   																				    SELECT DISTINCT 	[Client_Execution_ID] AS [ID], 	[Dealing_Desk], 	'??????' AS [ID_TYPE], 	[Auth_Time] AS [DATE], 	'Order Inflation' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[TRD_COUNTERPARTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[VG_08_CREATETIME] AS [CREATE_DATE], 	[VG_08] AS [EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE  WHERE DEALING_DESK != 'Equity' UNION ALL															    																																																																			    																												   			 	   																				    SELECT DISTINCT 	concat([Client_Execution_ID],'_6') AS [ID], 	[Dealing_Desk], 	'MFID' AS [ID_TYPE], 	[Auth_Time] AS [DATE], 	'Follow On Activity' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[TRD_COUNTERPARTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[VG_06_CREATETIME] AS [CREATE_DATE], 	[VG_06] AS [EXCEPTION_FLAG], 	'AB' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE  WHERE DEALING_DESK != 'Equity' UNION ALL																																																																																																											   			 		    SELECT DISTINCT 	[MFID] AS [ID], 	'DMG' AS [Dealing_Desk], 	'MFID' AS [ID_TYPE], 	TRADE_DATE AS [DATE], 	'Gifts and Hospitality' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[CPTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[CREATE_DATE], 	[EXCEPTION_FLAG], 	'' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE UNION ALL																																																																																									   																												  			 		    SELECT DISTINCT 	[ORDER] AS [ID], 	'DMG' AS [Dealing_Desk], 	'PM_ORD' AS [ID_TYPE], 	pm.[AUTH_TIME] AS [DATE], 	'Counterparty Direction'as [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[CPTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[CREATE_DATE], 	[EXCEPTION_FLAG], 	'' AS [STATUS] FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE cpdir_dmg LEFT JOIN (SELECT  				pm.ORD_NUM,  				AUTH_TIME,  				TOUCH_COUNT  		   FROM VISTA_REPORTING.dbo.PM_ORDERS pm 	  	   INNER JOIN (SELECT  							ORD_NUM,  							MAX(TOUCH_COUNT) AS MAX_TOUCH  					   FROM VISTA_REPORTING.dbo.PM_ORDERS  					   GROUP BY ORD_NUM) pmo ON pm.ORD_NUM = pmo.ORD_NUM and pm.TOUCH_COUNT = pmo.MAX_TOUCH) pm ON cpdir_dmg.[ORDER] = pm.ORD_NUM UNION ALL															    													    																																																											 																					    SELECT DISTINCT 	[ORD_NUM] AS [ID], 	[Dealing_Desk],  	'PM_ORD' AS [ID_TYPE], 	[AUTH_TIME] AS [DATE], 	'Timely Execution' AS [Exception_Type], 	[Asset_Type/Subtype], 	[INST_TYPE], 	[TRD_COUNTERPARTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	(SELECT MAX(v)  	FROM (VALUES (vg_09_policy_createtime), (vg_09_80_day_createtime), 								(vg_09_5_day_createtime), (vg_09_40_day_createtime), 								(vg_09_20_day_createtime), (vg_09_160_day_createtime),  								(vg_09_10_day_createtime)) AS value(v))  AS [CREATE_DATE], 	CASE  		WHEN Coalesce(VG_09_policy,0) + Coalesce(vg_09_80_day,0)  				+ Coalesce(vg_09_5_day,0) + Coalesce(vg_09_40_day,0)  				+ Coalesce(vg_09_20_day,0) + Coalesce(vg_09_160_day,0) 				+ Coalesce(vg_09_10_day,0) > 0  		THEN 1  		ELSE 0  		END AS [EXCEPTION_FLAG],  	'AB' AS [STATUS]   FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER  UNION ALL SELECT DISTINCT 	CONCAT(Order_ID,'_',Row_ID) AS [ID],		   	[Dealing_Desk],  	'PM_ORD' AS [ID_TYPE], 	[AUTH_TIME] AS [DATE], 	'Implementation Shortfall' AS [Exception_Type], 	[ASSET_TYPE_SUBTYPE], 	[INST_TYPE], 	[TRD_COUNTERPARTY], 	[Trader] AS [DEALER1], 	[Execution_Type_Decode], 	[IM_CREATEDATE] AS [CREATE_DATE], 	[IM_EXCEPTION] AS [EXCEPTION_FLAG],  	'AB' AS [STATUS]    FROM VISTA_REPORTING.dbo.IMPLEMENTATION_SHORTFALL_EQ  UNION ALL SELECT DISTINCT 	CAST([MULTI_FUND_ID] AS varchar(30)) AS [ID],		   	[Dealing_Desk],  	'MFID' AS [ID_TYPE], 	[Trade Date] AS [DATE], 	'Extended Settlement' AS [Exception_Type], 	[ASSET_TYPE_SUBTYPE], 	[INST_TYPE], 	[TRD_COUNTERPARTY], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[VG_40_CREATIME] AS [CREATE_DATE], 	[VG_40] AS [EXCEPTION_FLAG],  	'AB' AS [STATUS]    FROM VISTA_REPORTING.dbo.EXTENDED_SETTLEMENTS_EQ  UNION ALL SELECT DISTINCT 	CAST([MULTI_FUND_ID] AS varchar(30)) AS [ID],		   	[Dealing_Desk],  	'MFID' AS [ID_TYPE], 	[TRADE_DATE] AS [DATE], 	'Commission Increase' AS [Exception_Type], 	[Asset_Type/Subtype], 	[Sec_Type], 	[Broker], 	[Dealer] AS [DEALER1], 	[Execution_Type_Decode], 	[CI_CREATETIME] AS [CREATE_DATE], 	[CI_EXCEPTION] AS [EXCEPTION_FLAG],  	'AB' AS [STATUS]    FROM VISTA_REPORTING.dbo.COMMISSIONS_INCREASE_EQ UNION ALL SELECT DISTINCT 	CONCAT([Order ID],'_',ID) AS [ID],		   	[Dealing_Desk],  	'PM_ORD' AS [ID_TYPE], 	[HL_CREATEDATE] AS [DATE], 	'High Low' AS [Exception_Type], 	[Asset_Type_Subtype], 	[Sec_Type], 	[Broker], 	[Trader] AS [DEALER1], 	[Execution_Type_Decode], 	[HL_CREATEDATE] AS [CREATE_DATE], 	[HL_EXCEPTION] AS [EXCEPTION_FLAG],  	'AB' AS [STATUS]    FROM VISTA_REPORTING.dbo.MARKET_HIGH_LOW_EQ   IF OBJECT_ID('tempdb..#temp_tim_ex_table', 'U') IS NOT NULL DROP TABLE #temp_tim_ex_table SELECT  	ORD_NUM,  	null AS Exception_Type,  	DEALING_DESK,  	TIMELY_EXECUTION_EXCEPTION  INTO #temp_tim_ex_table FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_EQ_TABLE UNION ALL   SELECT  	ORD_NUM, 	Exception_Type, 	Dealing_Desk, 	TIMELY_EXECUTION_EXCEPTION  FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE UNION ALL   SELECT  	ORD_NUM,  	Exception_Type,  	Dealing_Desk,  	TIMELY_EXECUTION_EXCEPTION  FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_LL_TABLE   IF OBJECT_ID('tempdb..#temp', 'U') IS NOT NULL DROP TABLE #temp SELECT  	tbl.*, 	TRIM(STR(DATEPART(year,tbl.CREATE_DATE)) + '-' + FORMAT(tbl.CREATE_DATE,'MMM')) AS MONTH_YEAR,  	DATEPART(day,tbl.CREATE_DATE)	as [CREATE_DATE_DAY], 	DATEPART(month,tbl.CREATE_DATE)	as [CREATE_DATE_MONTH], 	FORMAT(tbl.CREATE_DATE,'MMM')	as [CREATE_DATE_MONTH_NAME], 	DATEPART(q,tbl.CREATE_DATE)		as [CREATE_DATE_QUARTER], 	DATEPART(year,tbl.CREATE_DATE)	as [CREATE_DATE_YEAR], 	CASE 		WHEN tbl.EXCEPTION_FLAG > 0 		THEN  		CASE 			WHEN tbl.Exception_Type = 'Timely Execution Exceptions'      THEN CONCAT(tbl.ID,'_9',timex.AUX) 			WHEN tbl.Exception_Type = 'Timely Execution'  			 and tbl.Dealing_Desk in ('Fixed Income','Leveraged Finance')  			 and timex2.DEALING_DESK in ('Fixed Income','Leveraged Finance')  																		 THEN CONCAT(tbl.ID,'_9',timex2.Exception_Type,timex2.TIMELY_EXECUTION_EXCEPTION) 			WHEN tbl.Exception_Type = 'Timely Execution'  			 and tbl.Dealing_Desk = 'Equity'  			 and timex2.DEALING_DESK = 'Equity'							 THEN CONCAT(tbl.ID,'_9',timex2.TIMELY_EXECUTION_EXCEPTION) 			WHEN tbl.Exception_Type = 'Order Priority Exceptions'        THEN CONCAT(tbl.ID,'_14') 			WHEN tbl.Exception_Type = 'Quote Exceptions'			     THEN CONCAT(tbl.ID,'_1') 			WHEN tbl.Exception_Type = 'Order Aggregation Exceptions'     THEN CONCAT(tbl.ID,'_13') 			WHEN tbl.Exception_Type = 'NWQ Exceptions'                   THEN CONCAT(tbl.ID,'_7') 			WHEN tbl.Exception_Type = 'Timely Recording Exceptions'      THEN CONCAT(tbl.ID,'_10') 			WHEN tbl.Exception_Type = 'Timely Recording'				 THEN CONCAT(tbl.ID,'_10') 			WHEN tbl.Exception_Type = 'Timely Recording NAV'			 THEN CONCAT(tbl.ID,'_10_NAV') 			WHEN tbl.Exception_Type = 'Interfund Transfer Exceptions'    THEN CONCAT(tbl.ID,'_25') 			WHEN tbl.Exception_Type = 'Trades Without Orders Exceptions' THEN CONCAT(tbl.ID,'_41') 			WHEN tbl.Exception_Type = 'Amendments'						 THEN tbl.ID 			WHEN tbl.Exception_Type = 'Order Inflation'					 THEN CONCAT(tbl.ID,'_8')   			WHEN tbl.Exception_Type = 'Follow On Activity'				 THEN tbl.ID 			WHEN tbl.Exception_Type = 'Timely Release Exceptions'		 THEN CONCAT(tbl.ID,'_11')  			WHEN tbl.Exception_Type = 'Counterparty Direction'THEN CONCAT(tbl.ID,'_17') 			WHEN tbl.Exception_Type = 'Gifts and Hospitality'			 THEN CONCAT(tbl.ID,'_16') 			WHEN tbl.Exception_Type = 'Implementation Shortfall'		 THEN CONCAT(tbl.ID,'_IS') 			WHEN tbl.Exception_Type = 'High Low'					     THEN CONCAT(tbl.ID,'_HL') 			WHEN tbl.Exception_Type = 'Commission Increase'				 THEN CONCAT(tbl.ID,'_CI') 			WHEN tbl.Exception_Type = 'Extended Settlement'				 THEN CONCAT(tbl.ID,'_40') 		ELSE CONCAT(tbl.ID,'_?') 		END 	END AS ID_VG_NUMBER, 	dad.INITIALS, 	dad.FULL_NAME AS DEALER_FULL_NAME, 	left(DEALER1,3) AS DEALER INTO #temp  FROM #temp_AL_exceptions_table tbl LEFT JOIN VISTA_REPORTING.dbo.DEALER_AND_DESK dad on tbl.DEALER1 = dad.INITIALS LEFT JOIN VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE timex on timex.[ORDER] = tbl.id and tbl.Dealing_Desk = 'DMG' LEFT JOIN #temp_tim_ex_table timex2 on timex2.[ORD_NUM] = tbl.id and tbl.Dealing_Desk = timex2.DEALING_DESK and tbl.Exception_Type = 'Timely Execution' and timex2.TIMELY_EXECUTION_EXCEPTION > 0 left join (SELECT ORD_NUM, CONVERT(varchar,ID) as IS_ID FROM VISTA_STAGING.dbo.VG_IMPLEMENTATION_SHORTFALL_EQ_TABLE) is_eq  on CAST(is_eq.[ORD_NUM] as varchar(40)) = tbl.id and tbl.Exception_Type = 'Implementation Shortfall' left join (SELECT ORD_NUM, CONVERT(varchar,ID) as ML_ID FROM VISTA_STAGING.dbo.VG_MARKET_HIGH_LOW_TABLE) ml_eq  on CAST(ml_eq.[ORD_NUM] as varchar(40)) = tbl.id and tbl.Exception_Type = 'High Low'   IF OBJECT_ID('tempdb..#mfid_business_group', 'U') IS NOT NULL DROP TABLE #mfid_business_group SELECT DISTINCT  	tr.MULTI_FUND_ID, 	CASE 		WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP' 		WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG' 		WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PROD'	  THEN 'MAGIM' 		WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP'   THEN 'MAGIM' 	ELSE NULL 	END AS [BUSINESS_GROUP_MFID] INTO #mfid_business_group FROM #temp_AL_trades tr LEFT JOIN #temp_pg_table pgt ON tr.FUND = pgt.FUND_ID  IF OBJECT_ID('tempdb..#trd_business_group', 'U') IS NOT NULL DROP TABLE #trd_business_group SELECT DISTINCT  	TR.ORD_NUM, 	CASE 		WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP' 		WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG' 		WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PROD'	  THEN 'MAGIM' 		WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP'   THEN 'MAGIM' 	ELSE NULL 	END AS [BUSINESS_GROUP_TRD] INTO #trd_business_group FROM #temp_AL_trades tr LEFT JOIN #temp_pg_table pgt ON tr.FUND = pgt.FUND_ID  IF OBJECT_ID('tempdb..#pm_business_group', 'U') IS NOT NULL DROP TABLE #pm_business_group SELECT DISTINCT  	oc.PM_ORD, 	CASE 		WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP' 		WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG' 		WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PROD'	  THEN 'MAGIM' 		WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP'   THEN 'MAGIM' 	ELSE NULL 	END AS [BUSINESS_GROUP_PM] INTO #pm_business_group FROM #temp_AL_trades tr LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = tr.ORD_NUM LEFT JOIN [VISTA_REPORTING].[dbo].[PORTFOLIO_GROUPS_TREASURY] pgt ON tr.FUND = pgt.FUND_ID   IF OBJECT_ID('VISTA_REPORTING.DBO.MASTER_EXECUTIVE_SUMMARY_TABLE', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.DBO.MASTER_EXECUTIVE_SUMMARY_TABLE SELECT  	tmp.*,  	COALESCE(pbg.[BUSINESS_GROUP_PM],tbg.[BUSINESS_GROUP_TRD],mbg.[BUSINESS_GROUP_MFID]) AS [BUSINESS_GROUP] INTO VISTA_REPORTING.DBO.MASTER_EXECUTIVE_SUMMARY_TABLE FROM #temp tmp LEFT JOIN #pm_business_group pbg    ON Dealing_Desk not in ('Cash','FX') and tmp.ID = pbg.PM_ORD LEFT JOIN #trd_business_group tbg   ON Dealing_Desk not in ('Cash','FX') and tmp.ID = tbg.ORD_NUM LEFT JOIN #mfid_business_group mbg  ON Dealing_Desk not in ('Cash','FX') and tmp.ID = mbg.MULTI_FUND_ID  UNION ALL SELECT DISTINCT [ID],[Dealing_Desk],[ID_TYPE],[DATE],[Exception_Type],[Asset_Type/Subtype],[INST_TYPE],[CPTY],[DEALER1],CAST([Execution_Type_Decode] AS varchar(30)), 		[CREATE_DATE],[EXCEPTION_FLAG],[STATUS],[MONTH_YEAR],[CREATE_DATE_DAY],[CREATE_DATE_MONTH],[CREATE_DATE_MONTH_NAME],[CREATE_DATE_QUARTER],[CREATE_DATE_YEAR], 		[ID_VG_NUMBER],[INITIALS],[DEALER_FULL_NAME],[DEALER],[BUSINESS_GROUP] FROM  #cash_tables   UNION ALL  SELECT DISTINCT [ID],[Dealing_Desk],[ID_TYPE],[DATE],[Exception_Type],[Asset_Type/Subtype],[INST_TYPE],[CPTY],[DEALER1],CAST([Execution_Type_Decode] AS varchar(30)), 		[CREATE_DATE],[EXCEPTION_FLAG],[STATUS],[MONTH_YEAR],[CREATE_DATE_DAY],[CREATE_DATE_MONTH],[CREATE_DATE_MONTH_NAME],[CREATE_DATE_QUARTER],[CREATE_DATE_YEAR], 		[ID_VG_NUMBER],[INITIALS],[DEALER_FULL_NAME],[DEALER],[BUSINESS_GROUP] FROM  #cash_tables_2  UNION ALL  SELECT DISTINCT [ID],[Dealing_Desk],[ID_TYPE],[DATE],[Exception_Type],[Asset_Type/Subtype],[INST_TYPE],[CPTY],[DEALER1],CAST([Execution_Type_Decode] AS varchar(30)), 		[CREATE_DATE],[EXCEPTION_FLAG],[STATUS],[MONTH_YEAR],[CREATE_DATE_DAY],[CREATE_DATE_MONTH],[CREATE_DATE_MONTH_NAME],[CREATE_DATE_QUARTER],[CREATE_DATE_YEAR], 		[ID_VG_NUMBER],[INITIALS],[DEALER_FULL_NAME],[DEALER],[BUSINESS_GROUP] FROM  #fx_tables  UNION ALL  SELECT DISTINCT [ID],[Dealing_Desk],[ID_TYPE],[DATE],[Exception_Type],[Asset_Type/Subtype],[INST_TYPE],[CPTY],[DEALER1],CAST([Execution_Type_Decode] AS varchar(30)), 		[CREATE_DATE],[EXCEPTION_FLAG],[STATUS],[MONTH_YEAR],[CREATE_DATE_DAY],[CREATE_DATE_MONTH],[CREATE_DATE_MONTH_NAME],[CREATE_DATE_QUARTER],[CREATE_DATE_YEAR], 		[ID_VG_NUMBER],[INITIALS],[DEALER_FULL_NAME],[DEALER],[BUSINESS_GROUP] FROM  #fx_tables_2  IF OBJECT_ID('tempdb..#temp_vg_tables_cash', 'U') IS NOT NULL DROP TABLE #temp_vg_tables_cash IF OBJECT_ID('tempdb..#temp_cash_trades', 'U') IS NOT NULL DROP TABLE #temp_cash_trades IF OBJECT_ID('tempdb..#temp_cash_orders', 'U') IS NOT NULL DROP TABLE #temp_cash_orders IF OBJECT_ID('tempdb..#temp_AL_trades', 'U') IS NOT NULL DROP TABLE #temp_AL_trades IF OBJECT_ID('tempdb..#temp_pm_orders', 'U') IS NOT NULL DROP TABLE #temp_pm_orders IF OBJECT_ID('tempdb..#temp_pg_table', 'U') IS NOT NULL DROP TABLE #temp_pg_table IF OBJECT_ID('tempdb..#cash_tables', 'U') IS NOT NULL DROP TABLE #cash_tables  IF OBJECT_ID('tempdb..#cash_case_when', 'U') IS NOT NULL DROP TABLE #cash_case_when; IF OBJECT_ID('tempdb..#cash_tables_2', 'U') IS NOT NULL DROP TABLE #cash_tables_2 IF OBJECT_ID('tempdb..#temp_vg_tables_fx', 'U') IS NOT NULL DROP TABLE #temp_vg_tables_fx IF OBJECT_ID('tempdb..#temp_fx_trades', 'U') IS NOT NULL DROP TABLE #temp_fx_trades IF OBJECT_ID('tempdb..#temp_fx_orders', 'U') IS NOT NULL DROP TABLE #temp_fx_orders IF OBJECT_ID('tempdb..#temp_oc_fx', 'U') IS NOT NULL DROP TABLE #temp_oc_fx; IF OBJECT_ID('tempdb..#fx_case_when', 'U') IS NOT NULL DROP TABLE #fx_case_when; IF OBJECT_ID('tempdb..#fx_tables', 'U') IS NOT NULL DROP TABLE #fx_tables; IF OBJECT_ID('tempdb..#fx_tables_2', 'U') IS NOT NULL DROP TABLE #fx_tables_2 IF OBJECT_ID('tempdb..#temp_AL_exceptions_table', 'U') IS NOT NULL DROP TABLE #temp_AL_exceptions_table IF OBJECT_ID('tempdb..#temp_tim_ex_table', 'U') IS NOT NULL DROP TABLE #temp_tim_ex_table IF OBJECT_ID('tempdb..#temp', 'U') IS NOT NULL DROP TABLE #temp IF OBJECT_ID('tempdb..#mfid_business_group', 'U') IS NOT NULL DROP TABLE #mfid_business_group IF OBJECT_ID('tempdb..#trd_business_group', 'U') IS NOT NULL DROP TABLE #trd_business_group IF OBJECT_ID('tempdb..#pm_business_group', 'U') IS NOT NULL DROP TABLE #pm_business_group   END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: REBUILD_MASTER_INDEXES CreateDate: 2020-08-28 15:43:54.330 ModifyDate: 2020-08-28 15:43:54.330 --- DEFINITION START --- -- ============================================= -- Author:		<da Costa, David> -- Create date: <10/07/2019> -- Description:	<Stored procedure to calculate all the exceptions  -- across FX desk and create respective MASTER tables  -- for frontend> -- =============================================  CREATE PROCEDURE [dbo].[REBUILD_MASTER_INDEXES]  AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	--SET NOCOUNT ON;  	ALTER INDEX ALL ON VISTA_REPORTING.dbo.MASTER_PM_ORDER REBUILD  	--IF OBJECT_ID('tempdb..#table_list', 'U') IS NOT NULL DROP TABLE #table_list 	--SELECT DISTINCT TABLE_NAME, TABLE_CATALOG, TABLE_SCHEMA, ROW_NUMBER() OVER(ORDER BY TABLE_NAME) AS ROW_ID 	--INTO #table_list 	--FROM Vista_REPORTING.INFORMATION_SCHEMA.TABLES WHERE CHARINDEX('MASTER_', TABLE_NAME) > 0 -- AND CHARINDEX('VG', TABLE_NAME) = 0  	--WHILE (SELECT MAX(ROW_ID) FROM #table_list) IS NOT NULL BEGIN 	 	--	DECLARE @min_row_id INT 	--	DECLARE @table_name NVARCHAR(MAX) 	--	SET @min_row_id = (SELECT MIN(ROW_ID) FROM #table_list) 	--	SET @table_name = (SELECT QUOTENAME(TABLE_CATALOG) + '.' + QUOTENAME(TABLE_SCHEMA) + '.' + QUOTENAME(TABLE_NAME) FROM #table_list WHERE ROW_ID = @min_row_id)  	--	--SELECT @table_name 	--	EXEC (N'USE Vista_Reporting; ' + N'ALTER INDEX ALL ON ' + @table_name + N'REBUILD') 	--	DELETE FROM #table_list WHERE ROW_ID = @min_row_id 	 	--	END  END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: REFRESH_FAIL_PROCEDURE CreateDate: 2019-10-18 08:39:51.970 ModifyDate: 2019-10-18 08:39:51.970 --- DEFINITION START --- -- ============================================= -- Author:		<Devereux, Alan> -- Create date: <13/11/2017> -- Description:	<Script to selectively refresh database tables/breach logic with stored procedures.> -- ============================================= CREATE PROCEDURE [dbo].[REFRESH_FAIL_PROCEDURE]  AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON; 	SET XACT_ABORT ON; 	 	IF OBJECT_ID('VISTA_REPORTING.dbo.REFRESH_FAILS', 'U' ) IS NULL  	SELECT  		ERROR_PROCEDURE() AS FAILED_PROCEDURE 		, GETDATE() AS FAILED_DATE 		, ERROR_MESSAGE() AS FAIL_MESSAGE 	INTO VISTA_REPORTING.dbo.REFRESH_FAILS  	ELSE   	INSERT INTO VISTA_REPORTING.dbo.REFRESH_FAILS 	SELECT  		ERROR_PROCEDURE() AS FAILED_PROCEDURE 		, GETDATE() AS FAILED_DATE 		, ERROR_MESSAGE() AS FAIL_MESSAGE   END   --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: REFRESH_PROCEDURE CreateDate: 2019-10-18 08:39:52.017 ModifyDate: 2019-10-18 08:39:52.017 --- DEFINITION START --- -- ============================================= -- Author:		<Devereux, Alan> -- Create date: <13/11/2017> -- Description:	<Script to selectively refresh database tables/breach logic with stored procedures.> -- ============================================= CREATE PROCEDURE [dbo].[REFRESH_PROCEDURE] 	-- Add the parameters for the stored procedure here 	--@REFRESH_TABLES INT = 0 	--,@EQ_BREACH INT = 0 	--,@FI_BREACH INT = 0 AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;  		--EXEC VISTA_STAGING.dbo.FILTER_ORDERS 		 		--DATA REFRESH PROCEDURES 		EXEC VISTA_STAGING.dbo.DEALER_AND_DESK_REFRESH 		EXEC VISTA_STAGING.dbo.FX_RATES_REFRESH -- MUST BE RUN BEFORE TRADES/NAV 		EXEC VISTA_STAGING.dbo.ORDERS_CROSS_REFRESH 		EXEC VISTA_STAGING.dbo.ORDERS_REFRESH -- MUST BE RUN BEFORE ORDER_SPLIT 		EXEC VISTA_STAGING.dbo.ORDER_SPLIT 		EXEC VISTA_STAGING.dbo.TRADES_REFRESH 		EXEC VISTA_STAGING.dbo.SECTOR_REFRESH 		EXEC VISTA_STAGING.dbo.ISSUERS_REFRESH 		EXEC VISTA_STAGING.dbo.INSTRUMENTS_REFRESH 		EXEC VISTA_STAGING.dbo.PLACEMENTS_REFRESH 		EXEC VISTA_STAGING.dbo.CREATE_PRIMARY_INST_TYPE 		EXEC VISTA_STAGING.dbo.QUOTES_REFRESH 		EXEC VISTA_STAGING.dbo.PORTFOLIO_REFRESH 		EXEC VISTA_STAGING.dbo.PORTFOLIO_GROUP_REFRESH 		EXEC VISTA_STAGING.dbo.PORTFOLIO_GROUP_TREASURY_REFRESH 		EXEC VISTA_STAGING.dbo.NAV_REFRESH 		EXEC VISTA_STAGING.dbo.CASH_TRADES_REFRESH 		EXEC VISTA_STAGING.dbo.CASH_ORDERS_REFRESH 		EXEC VISTA_STAGING.dbo.CASH_REFERENCE_RATES_REFRESH 		EXEC VISTA_STAGING.dbo.CASH_BANK_RATES_REFRESH 		EXEC VISTA_STAGING.dbo.FX_ORDERS_REFRESH 		--EXEC VISTA_STAGING.dbo.FX_QUOTES_REFRESH 		EXEC VISTA_STAGING.dbo.FX_TRADES_REFRESH 		EXEC VISTA_STAGING.DBO.FX_LOSING_BANKS_REFRESH 		EXEC VISTA_STAGING.DBO.FX_MAPPED_BANKS_REFRESH    		----INDIVIDUAL FIXED INCOME EXCEPTION TABLES 		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_EQ 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH  		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_EQ 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH  		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_EQ 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH  		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_EQ 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH  		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.VG_10_NAV_CUT_OFF_EQ 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH  		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.VG_11_TIMELY_RELEASE_EQ 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH  		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_EQ 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH  		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EQ 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH  		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_EQ 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH  		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_EQ 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH   		----INDIVIDUAL FIXED INCOME EXCEPTION TABLES 		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH  		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.[dbo].[VG_06_NEW_ISSUE_ORDER_FLIPPING_FI]  		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH  		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_FI 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH  		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_FI 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH  		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH 		 		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FI 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH  		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_FI 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH  		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_FI 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH  		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_FI 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH  		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_FI 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH   		----INDIVIDUAL LEVERAGED LOANS EXCEPTION TABLES 		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_LL 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH  		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.[dbo].[VG_06_NEW_ISSUE_ORDER_FLIPPING_LL]  		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH  		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_LL 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH  		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_LL 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH  		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_LL 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH 		 		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_LL 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH  		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_LL 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH  		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_LL 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH  		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_LL 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH  		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_LL 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH  		----AGGREGATE TABLES 		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.MULTI_FUND_EXCEPTION 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH  		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.TRD_ORDER_LEVEL_EXCEPTION_TABLE 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH  		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.ORDER_LEVEL_EXCEPTION 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH  		----MASTER TABLES 		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.MASTER_MULTI_FUND_ID_TABLE 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH  		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.MASTER_TRD_ORDER_TABLE 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH 		 		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.MASTER_AMENDMENT_FLAG_TABLE 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH		 		 		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH 		 		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.MASTER_CLIENT_EXECUTION_TABLE 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH 		 		--EXEC VISTA_STAGING.dbo.COUNT_TABLES_PROC  		------ Corporate Events for Market Abuse app 		----EXEC VISTA_STAGING.dbo.CORP_EVENTS_REFRESH  		------ Error Tracking for Market Abuse 		----EXEC VISTA_STAGING.dbo.ERROR_TRACKING 		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.DEALER_RISK 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH  		---- Counter Party hit rate tables  		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.LZ_DATA_SOURCE_TABLE 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH  		--BEGIN TRY 		--	BEGIN TRANSACTION 		--	EXEC VISTA_STAGING.dbo.THINKFOLIO_DATA_SOURCE_TABLE 		--	COMMIT TRANSACTION 		--END TRY 		--BEGIN CATCH 		--	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION 		--	EXEC VISTA_REPORTING.dbo.REFRESH_FAIL_PROCEDURE 		--END CATCH    		 		/***************************************** 		*                                        * 		* CODE BELOW IS A ROLL BACK TO ENSURE    * 		* STORED PROCEDURE STABILITY: ONCE ISSUE * 		* WITH STORED PROC NOT COMMITING WHEN    *  		* CALLED FROM PYTHON IS SOLVED DELETE    * 		*                                        * 		******************************************/  		--EQUITIES 		EXEC VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_EQ 		EXEC VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_EQ 		EXEC VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_EQ 		EXEC VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_EQ 		EXEC VISTA_STAGING.dbo.VG_10_NAV_CUT_OFF_EQ 		EXEC VISTA_STAGING.dbo.VG_11_TIMELY_RELEASE_EQ 		EXEC VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_EQ 		EXEC VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EQ 		EXEC VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_EQ 		EXEC VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_EQ 		EXEC VISTA_STAGING.dbo.VG_40_EXTENDED_SETTLEMENT_EXCEPTION 		EXEC VISTA_STAGING.[dbo].[VG_COMMISSION_EXCEPTION_EQ] 		EXEC VISTA_STAGING.[dbo].[VG_IMPLEMENTATION_SHORTFALL_EXCEPTION_EQ] 		EXEC VISTA_STAGING.[dbo].[VG_MARKET_HIGH_LOW_EXCEPTION_EQ]  		--FIXED INCOME 		EXEC VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI 		EXEC VISTA_STAGING.[dbo].[VG_06_NEW_ISSUE_ORDER_FLIPPING_FI]  		EXEC VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_FI 		EXEC VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_FI 		EXEC VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI 		EXEC VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FI 		EXEC VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_FI 		EXEC VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_FI 		EXEC VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_FI 		EXEC VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_FI  		--LEVERAGED LOANS 		EXEC VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_LL 		EXEC VISTA_STAGING.[dbo].[VG_06_NEW_ISSUE_ORDER_FLIPPING_LL]  		EXEC VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_LL 		EXEC VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_LL 		EXEC VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_LL 		EXEC VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_LL 		EXEC VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_LL 		EXEC VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_LL 		EXEC VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_LL 		EXEC VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_LL  		--DMG 		EXEC VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_DMG 		EXEC VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_DMG 		EXEC VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_DMG 		EXEC VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_DMG 		EXEC VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_DMG 		EXEC VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_DMG 		EXEC VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_DMG 		EXEC VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_DMG 		EXEC VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_DMG 		EXEC VISTA_STAGING.dbo.VG_41_TRADES_WITHOUT_ORDERS_DMG 		EXEC VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_DMG  		--CASH 		EXEC VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH 		EXEC VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_CASH 		EXEC VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_CASH 		EXEC VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_CASH 		EXEC VISTA_STAGING.dbo.VG_601_OUT_OF_HOURS_CASH 		EXEC VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_CASH 		EXEC VISTA_STAGING.dbo.VG_603_LARGE_TRADES_CASH 		EXEC VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH 		EXEC VISTA_STAGING.dbo.VG_608_TA_KNOCKBACK_CASH 		EXEC VISTA_STAGING.dbo.VG_609_DEPOSITS_REFERENCE_RATE_CASH 		EXEC VISTA_STAGING.dbo.VG_610_TBILLS_CP_CD_CASH 		EXEC VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH  		--FX 		EXEC VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FX 		EXEC VISTA_STAGING.dbo.VG_500_DEALER_LIMIT_FX 		EXEC VISTA_STAGING.dbo.VG_501_SPOT_REFERENCE_RATE_FX 		EXEC VISTA_STAGING.dbo.VG_601_OUT_OF_HOURS_FX 		EXEC VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_FX 		EXEC VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX 		EXEC VISTA_STAGING.dbo.VG_608_TA_KNOCKBACK_FX 		EXEC VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX 		EXEC VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_FX 		EXEC VISTA_STAGING.dbo.VG_603_LARGE_TRADES_FX 		EXEC VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_FX  		 		--Compliance tables 		--EXEC VISTA_STAGING.[dbo].[COUNTERPARTY_DIRECTION_FI]  		--AGGREGATE TABLES 		EXEC VISTA_STAGING.dbo.MULTI_FUND_EXCEPTION 		EXEC VISTA_STAGING.dbo.TRD_ORDER_LEVEL_EXCEPTION_TABLE 		EXEC VISTA_STAGING.dbo.ORDER_LEVEL_EXCEPTION  		--MASTER TABLES 		EXEC VISTA_STAGING.dbo.MASTER_MULTI_FUND_ID_TABLE 		EXEC VISTA_STAGING.dbo.MASTER_TRD_ORDER_TABLE 		EXEC VISTA_STAGING.dbo.MASTER_ORDER_PRIORITY_TABLE 		EXEC VISTA_STAGING.dbo.MASTER_AMENDMENT_FLAG_TABLE 		EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE 		EXEC VISTA_STAGING.dbo.MASTER_CLIENT_EXECUTION_TABLE 		EXEC VISTA_STAGING.DBO.MASTER_INV_DESK   		--MASTER TABLES DMG 		EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_01_QUOTE_EXCEPTION_DMG 		EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_07_NON_WINNING_QUOTE_DMG 		EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_10_TIMELY_RECORDING_DMG 		EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_16_GIFTS_AND_HOSPITALITY_DMG 		EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_25_INTERFUND_TRANSFER_DMG 		EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_41_TRADES_WITHOUT_ORDERS_DMG 		EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_09_TIMELY_EXECUTION_DMG 		EXEC VISTA_STAGING.dbo.MASTER_TRD_ORDER_VG_13_ORDER_AGGREGATION_DMG 		EXEC VISTA_STAGING.dbo.MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG 		EXEC VISTA_STAGING.dbo.MASTER_VG_15_AMENDMENT_FLAG_TABLE_DMG 		EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_17_COUNTERPARTY_DIRECTION_DMG   		--MASTER TABLES CASH 		EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_10_TIMELY_RECORDING_CASH 		EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_16_GIFTS_AND_HOSPITALITY_CASH 		EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_607_BEST_EXECUTION_CASH 		EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_608_TA_KNOCKBACK_CASH 		EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_609_DEPOSITS_REFERENCE_RATE_CASH 		EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_610_TBILLS_CP_CD_CASH 		EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_09_TIMELY_EXECUTION_CASH 		EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_17_COUNTERPARTY_DIRECTION_CASH 		EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_601_OUT_OF_HOURS_CASH 		EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_602_EOD_HOLDOVERS_CASH 		EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_603_LARGE_TRADES_CASH 		EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_604_CLIENT_ORDER_HANDLING_CASH  		 		--MASTER TABLES FX 		EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_16_GIFTS_AND_HOSPITALITY_FX 		EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_501_SPOT_REFERENCE_RATE_FX 		EXEC VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_607_BEST_EXECUTION_FX 		EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_09_TIMELY_EXECUTION_FX 		EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_17_COUNTERPARTY_DIRECTION_FX 		EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_500_DEALER_LIMIT_FX 		EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_601_OUT_OF_HOURS_FX 		EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_602_EOD_HOLDOVERS_FX 		EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_604_CLIENT_ORDER_HANDLING_FX 		EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_603_LARGE_TRADES_FX 		EXEC VISTA_STAGING.dbo.MASTER_PM_ORDER_TABLE_VG_608_TA_KNOCKBACK_FX  		--EXCEPTION COUNT 		--EXEC VISTA_STAGING.dbo.COUNT_TABLES_PROC 				 		--DEALER RISK 		EXEC VISTA_STAGING.dbo.DEALER_RISK  		--COUTERPARTY HIT RATE TABLES 		EXEC VISTA_STAGING.dbo.LZ_DATA_SOURCE_TABLE 		EXEC VISTA_STAGING.dbo.THINKFOLIO_DATA_SOURCE_TABLE  		--LLDOM MI stored procedures 		EXEC VISTA_STAGING.dbo.[LLDOM_DEALING_ACTIVITY_SUMMARY]  		--REUTERS PRICE BENCHMARKING 		EXEC VISTA_STAGING.dbo.REUTERS_PRICE_BENCHMARK  		--COUNTERPARTY HIT RATE 		EXEC VISTA_STAGING.[dbo].[COUNTERPARTY_HIT_RATE]   		--FAIR ALLOCATION 		EXEC VISTA_STAGING.dbo.FAIR_ALLOCATION  		--COMMISSIONS INCREASE 		EXEC VISTA_STAGING.dbo.VG_COMMISSION_EXCEPTION_EQ  		--COUNTERPARTY_DIRECTION 		EXEC VISTA_STAGING.dbo.COUNTERPARTY_DIRECTION_TABLE_EQ 		EXEC VISTA_STAGING.dbo.COUNTERPARTY_DIRECTION_TABLE_FI_PROC  		EXEC VISTA_REPORTING.dbo.COUNTERPARTY_DIRECTION_REFERENCE 		EXEC VISTA_REPORTING.dbo.MASTER_COUNTERPARTY_DIRECTION_TABLE_FI 		EXEC VISTA_REPORTING.dbo.MASTER_COUNTERPARTY_DIRECTION_TABLE_EQ  		--PRICE BENCHMARK 		EXEC VISTA_STAGING.dbo.REUTERS_PRICE_BENCHMARK 		EXEC VISTA_STAGING.dbo.PRICE_BENCHMARK_TABLE  		--GIFTS AND HOSPITALITY 		EXEC VISTA_STAGING.dbo.GIFTS_AND_HOSPITALITY_EQ 		EXEC VISTA_STAGING.dbo.GIFTS_AND_HOSPITALITY_EQ_PROC 		EXEC VISTA_STAGING.dbo.GIFTS_AND_HOSPITALITY_FI 		EXEC VISTA_STAGING.dbo.GIFTS_AND_HOSPITALITY_FI_PROC 		 		--IMPLEMENTATION SHORTFALL 		EXEC VISTA_STAGING.DBO.IMPLEMENTATION_SHORTFALL_EQ  		--DATETIME CONVERSION 		EXEC VISTA_STAGING.dbo.DATETIME_CONVERSION_PROCEDURE  		--MASTER EXEC SUMMARY 		EXEC VISTA_REPORTING.dbo.MASTER_EXECUTIVE_SUMMARY  END   --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: STDEV_APPROVAL_TO_COMPLETED_EQ CreateDate: 2019-10-18 08:39:52.060 ModifyDate: 2019-11-15 15:12:55.323 --- DEFINITION START --- -- ============================================= -- Author:		<Nasra, Michael> -- Create date: <02/09/2019> -- Description:	 -- <Generates Standard Deviation report a given start and end date.> -- =============================================  -- ***************VERSION CONTROL***************  -- *********************************************  CREATE PROCEDURE [dbo].[STDEV_APPROVAL_TO_COMPLETED_EQ]  	-- Add the parameters for the stored procedure here  	@Start_day		INT, 	@Start_Month	INT, 	@Start_Year		INT, 	@End_Day		INT,  	@End_Month		INT, 	@End_Year		INT, 	@Report_Name	VARCHAR(MAX)  AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;      -- Insert statements for procedure here  	DECLARE @Start_Date	DATETIME; 	SET		@Start_Date = CONVERT(DATE,CONCAT(@Start_Year,'-',@Start_Month,'-', @Start_day)); --Turn the input start month parameter into a date  	DECLARE @End_Date	DATETIME; 	SET		@End_Date  = DATEADD(SECOND,86399.99999999,CONVERT(DATETIME,CONCAT(@End_Year,'-',@End_Month, '-', @End_Day)));  --Turn the input end month parameter into a date    IF OBJECT_ID('tempdb..#pm_pop', 'U') IS NOT NULL DROP TABLE #pm_pop select distinct pm.AUTH_TIME, oc.TRD_ORD into #pm_pop from Vista_Reporting.dbo.PM_ORDERS pm inner join Vista_Reporting.dbo.ORDERS_CROSS oc on oc.PM_ORD = pm.ORD_NUM where pm.AUTH_TIME between @Start_Date and @End_Date  and pm.DEALING_DESK = 'Equity'  IF OBJECT_ID('tempdb..#population', 'U') IS NOT NULL DROP TABLE #population select distinct @Report_Name as [REPORT_NAME], pop.trd_ord as ORD_NUM, pop.AUTH_TIME, PLA.SEND_TIME, DATEDIFF(minute,pop.AUTH_TIME,pla.SEND_TIME) as Approval_To_Completed into #population from #pm_pop pop inner join Vista_Staging.dbo.PLACEMENTS pla on pla.ORD_NUM = pop.trd_ord where pla.SEND_TIME is not null  DECLARE @Scenario1Mean float; DECLARE @Scenario1StandardDeviation float;  SET @Scenario1Mean = (select AVG(cast(Approval_To_Completed as float)) from #population) SET @Scenario1StandardDeviation = (select STDEV(Approval_To_Completed) from #population)   DECLARE @Scenario1LowerThreshold3 float; DECLARE @Scenario1UpperThreshold3 float;  SET @Scenario1LowerThreshold3 = @Scenario1Mean - 3*@Scenario1StandardDeviation  SET @Scenario1UpperThreshold3 = @Scenario1Mean + 3*@Scenario1StandardDeviation   DECLARE @Scenario1LowerThreshold2 float; DECLARE @Scenario1UpperThreshold2 float;  SET @Scenario1LowerThreshold2 = @Scenario1Mean - 2*@Scenario1StandardDeviation  SET @Scenario1UpperThreshold2 = @Scenario1Mean + 2*@Scenario1StandardDeviation   DECLARE @Scenario1LowerThreshold1 float; DECLARE @Scenario1UpperThreshold1 float;  SET @Scenario1LowerThreshold1 = @Scenario1Mean - 1*@Scenario1StandardDeviation  SET @Scenario1UpperThreshold1 = @Scenario1Mean + 1*@Scenario1StandardDeviation   DECLARE @Scenario1LowerThreshold05 float; DECLARE @Scenario1UpperThreshold05 float;  SET @Scenario1LowerThreshold05 = @Scenario1Mean - 0.5*@Scenario1StandardDeviation  SET @Scenario1UpperThreshold05 = @Scenario1Mean + 0.5*@Scenario1StandardDeviation    IF OBJECT_ID('tempdb..#scenario1', 'U') IS NOT NULL DROP TABLE #scenario1 select *  ,case  	WHEN Approval_To_Completed < @Scenario1LowerThreshold3 THEN 3 	WHEN Approval_To_Completed > @Scenario1UpperThreshold3 THEN 3  	WHEN Approval_To_Completed < @Scenario1LowerThreshold2 THEN 2 	WHEN Approval_To_Completed > @Scenario1UpperThreshold2 THEN 2  	WHEN Approval_To_Completed < @Scenario1LowerThreshold1 THEN 1 	WHEN Approval_To_Completed > @Scenario1UpperThreshold1 THEN 1  	WHEN Approval_To_Completed < @Scenario1LowerThreshold05 THEN 0.5 	WHEN Approval_To_Completed > @Scenario1UpperThreshold05 THEN 0.5  	ELSE 0 END AS [SCENARIO_1_SD_AWAY]  into #scenario1 from #population  DECLARE @Scenario2Mean float; DECLARE @Scenario2StandardDeviation float;  SET @Scenario2Mean = (select AVG(cast(Approval_To_Completed as float)) from #scenario1 where [SCENARIO_1_SD_AWAY] < 3) SET @Scenario2StandardDeviation = (select STDEV(Approval_To_Completed) from #scenario1 where [SCENARIO_1_SD_AWAY] < 3)   DECLARE @Scenario2LowerThreshold3 float; DECLARE @Scenario2UpperThreshold3 float;  SET @Scenario2LowerThreshold3 = @Scenario2Mean - 3*@Scenario2StandardDeviation  SET @Scenario2UpperThreshold3 = @Scenario2Mean + 3*@Scenario2StandardDeviation   DECLARE @Scenario2LowerThreshold2 float; DECLARE @Scenario2UpperThreshold2 float;  SET @Scenario2LowerThreshold2 = @Scenario2Mean - 2*@Scenario2StandardDeviation  SET @Scenario2UpperThreshold2 = @Scenario2Mean + 2*@Scenario2StandardDeviation   DECLARE @Scenario2LowerThreshold1 float; DECLARE @Scenario2UpperThreshold1 float;  SET @Scenario2LowerThreshold1 = @Scenario2Mean - 1*@Scenario2StandardDeviation  SET @Scenario2UpperThreshold1 = @Scenario2Mean + 1*@Scenario2StandardDeviation    IF OBJECT_ID('tempdb..#scenario2', 'U') IS NOT NULL DROP TABLE #scenario2 select * ,CASE 	WHEN Approval_To_Completed < @Scenario2LowerThreshold3 THEN 3 	WHEN Approval_To_Completed > @Scenario2UpperThreshold3 THEN 3   	WHEN Approval_To_Completed < @Scenario2LowerThreshold2 THEN 2  	WHEN Approval_To_Completed > @Scenario2UpperThreshold2 THEN 2  	WHEN Approval_To_Completed < @Scenario2LowerThreshold1 THEN 1 	WHEN Approval_To_Completed > @Scenario2UpperThreshold1 THEN 1   	ELSE 0 END AS [SCENARIO_2_SD_AWAY] into #scenario2 from #scenario1  IF OBJECT_ID('tempdb..#metadata', 'U') IS NOT NULL DROP TABLE #metadata 	select  	DATEPART(DAY,@Start_Date) AS [START_DAY] 	,DATEPART(MONTH, @Start_Date) AS [START_MONTH] 	,DATEPART(YEAR, @Start_Date) AS [START_YEAR] 	,DATEPART(DAY,@End_Date)	AS [END_DAY] 	,DATEPART(MONTH, @End_Date) AS [END_MONTH] 	,DATEPART(YEAR, @End_Date) AS [END_YEAR] 	,@Report_Name AS [Report_Name] 	,GETDATE() AS [Run_Date] 	,round(@Scenario1Mean/1440,3)				as [SCENARIO_1_MEAN] 	,round(@Scenario1StandardDeviation/1440,3)  as [SCENARIO_1_STANDARD_DEVIATION]  	,round(@Scenario1LowerThreshold3/1440	,3) as [SCENARIO_1_LOWER_THRESHOLD_3] 	,round(@Scenario1UpperThreshold3/1440	,3) as [SCENARIO_1_UPPER_THRESHOLD_3] 	,round(@Scenario1LowerThreshold2/1440	,3) as [SCENARIO_1_LOWER_THRESHOLD_2] 	,round(@Scenario1UpperThreshold2/1440	,3) as [SCENARIO_1_UPPER_THRESHOLD_2] 	,round(@Scenario1LowerThreshold1/1440	,3) as [SCENARIO_1_LOWER_THRESHOLD_1] 	,round(@Scenario1UpperThreshold1/1440	,3) as [SCENARIO_1_UPPER_THRESHOLD_1] 	,round(@Scenario1LowerThreshold05/1440	,3) as [SCENARIO_1_LOWER_THRESHOLD_05] 	,round(@Scenario1UpperThreshold05/1440	,3) as [SCENARIO_1_UPPER_THRESHOLD_05] 	 									 	,round(@Scenario2Mean/1440				,3) as [SCENARIO_2_MEAN] 	,round(@Scenario2StandardDeviation/1440	,3) as [SCENARIO_2_STANDARD_DEVIATION] 	 									 	,round(@Scenario2LowerThreshold3/1440	,3) as [SCENARIO_2_LOWER_THRESHOLD_3] 	,round(@Scenario2UpperThreshold3/1440	,3) as [SCENARIO_2_UPPER_THRESHOLD_3] 	,round(@Scenario2LowerThreshold2/1440	,3) as [SCENARIO_2_LOWER_THRESHOLD_2] 	,round(@Scenario2UpperThreshold2/1440	,3) as [SCENARIO_2_UPPER_THRESHOLD_2] 	,round(@Scenario2LowerThreshold1/1440	,3) as [SCENARIO_2_LOWER_THRESHOLD_1] 	,round(@Scenario2UpperThreshold1/1440	,3) as [SCENARIO_2_UPPER_THRESHOLD_1] 	INTO #metadata 	 IF OBJECT_ID('VISTA_REPORTING.dbo.STDEV_APPROVAL_TO_COMPLETED_EQ_REPORT', 'U') IS NULL 	SELECT  	REPORT_NAME, 	ORD_NUM, 	AUTH_TIME AS OPEN_DATE, 	SEND_TIME as ENTRY_TIME, 	Approval_To_Completed, 	SCENARIO_1_SD_AWAY, 	SCENARIO_2_SD_AWAY 	INTO VISTA_REPORTING.dbo.STDEV_APPROVAL_TO_COMPLETED_EQ_REPORT 	FROM #scenario2 ELSE 	INSERT INTO VISTA_REPORTING.dbo.STDEV_APPROVAL_TO_COMPLETED_EQ_REPORT 	SELECT  	REPORT_NAME, 	ORD_NUM, 	AUTH_TIME AS OPEN_DATE, 	SEND_TIME as ENTRY_TIME, 	Approval_To_Completed, 	SCENARIO_1_SD_AWAY, 	SCENARIO_2_SD_AWAY 	FROM #scenario2 	  IF OBJECT_ID('VISTA_REPORTING.dbo.STDEV_APPROVAL_TO_COMPLETED_EQ_REPORT_METADATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.STDEV_APPROVAL_TO_COMPLETED_EQ_REPORT_METADATA 	FROM #metadata ELSE 	INSERT INTO VISTA_REPORTING.dbo.STDEV_APPROVAL_TO_COMPLETED_EQ_REPORT_METADATA 	SELECT * 	FROM #metadata  END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: STDEV_IMPLEMENTATION_SHORTFALL_EQ CreateDate: 2019-10-18 08:39:52.103 ModifyDate: 2019-10-18 08:39:52.103 --- DEFINITION START --- -- ============================================= -- Author:		<Nasra, Michael> -- Create date: <02/09/2019> -- Description:	 -- <Generates Standard Deviation report a given start and end date.> -- =============================================  -- ***************VERSION CONTROL***************  -- *********************************************  CREATE PROCEDURE [dbo].[STDEV_IMPLEMENTATION_SHORTFALL_EQ]  	-- Add the parameters for the stored procedure here  	@Start_day		INT, 	@Start_Month	INT, 	@Start_Year		INT, 	@End_Day		INT,  	@End_Month		INT, 	@End_Year		INT, 	@Report_Name	VARCHAR(MAX)  AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;      -- Insert statements for procedure here  	DECLARE @Start_Date	DATETIME; 	SET		@Start_Date = CONVERT(DATE,CONCAT(@Start_Year,'-',@Start_Month,'-', @Start_day)); --Turn the input start month parameter into a date  	DECLARE @End_Date	DATETIME; 	SET		@End_Date  = DATEADD(SECOND,86399.99999999,CONVERT(DATETIME,CONCAT(@End_Year,'-',@End_Month, '-', @End_Day)));  --Turn the input end month parameter into a date    IF OBJECT_ID('tempdb..#population', 'U') IS NOT NULL DROP TABLE #population 	 Select  	 @Report_Name as [REPORT_NAME] 	 ,Order_ID 	 ,Row_ID 	 ,IS_bps  	 into #population 	 from VISTA_REPORTING.dbo.IMPLEMENTATION_SHORTFALL_EQ t 	 where convert(date,t.Order_Approved_DateTime,103) between @Start_Date and @End_Date  DECLARE @Scenario1Mean float; DECLARE @Scenario1StandardDeviation float;  SET @Scenario1Mean = (select AVG(is_BPS) from #population) SET @Scenario1StandardDeviation = (select STDEV(is_BPS) from #population)   DECLARE @Scenario1LowerThreshold3 float; DECLARE @Scenario1UpperThreshold3 float;  SET @Scenario1LowerThreshold3 = @Scenario1Mean - 3*@Scenario1StandardDeviation  SET @Scenario1UpperThreshold3 = @Scenario1Mean + 3*@Scenario1StandardDeviation   DECLARE @Scenario1LowerThreshold2 float; DECLARE @Scenario1UpperThreshold2 float;  SET @Scenario1LowerThreshold2 = @Scenario1Mean - 2*@Scenario1StandardDeviation  SET @Scenario1UpperThreshold2 = @Scenario1Mean + 2*@Scenario1StandardDeviation   DECLARE @Scenario1LowerThreshold1 float; DECLARE @Scenario1UpperThreshold1 float;  SET @Scenario1LowerThreshold1 = @Scenario1Mean - 1*@Scenario1StandardDeviation  SET @Scenario1UpperThreshold1 = @Scenario1Mean + 1*@Scenario1StandardDeviation   DECLARE @Scenario1LowerThreshold05 float; DECLARE @Scenario1UpperThreshold05 float;  SET @Scenario1LowerThreshold05 = @Scenario1Mean - 0.5*@Scenario1StandardDeviation  SET @Scenario1UpperThreshold05 = @Scenario1Mean + 0.5*@Scenario1StandardDeviation    IF OBJECT_ID('tempdb..#scenario1', 'U') IS NOT NULL DROP TABLE #scenario1 select *  ,case  	WHEN IS_bps < @Scenario1LowerThreshold3 THEN 3 	WHEN IS_bps > @Scenario1UpperThreshold3 THEN 3  	WHEN IS_bps < @Scenario1LowerThreshold2 THEN 2 	WHEN IS_bps > @Scenario1UpperThreshold2 THEN 2  	WHEN IS_bps < @Scenario1LowerThreshold1 THEN 1 	WHEN IS_bps > @Scenario1UpperThreshold1 THEN 1  	WHEN IS_bps < @Scenario1LowerThreshold05 THEN 0.5 	WHEN IS_bps > @Scenario1UpperThreshold05 THEN 0.5  	ELSE 0 END AS [SCENARIO_1_SD_AWAY]  into #scenario1 from #population  DECLARE @Scenario2Mean float; DECLARE @Scenario2StandardDeviation float;  SET @Scenario2Mean = (select AVG(is_BPS) from #scenario1 where [SCENARIO_1_SD_AWAY] < 3) SET @Scenario2StandardDeviation = (select STDEV(is_BPS) from #scenario1 where [SCENARIO_1_SD_AWAY] < 3)   DECLARE @Scenario2LowerThreshold3 float; DECLARE @Scenario2UpperThreshold3 float;  SET @Scenario2LowerThreshold3 = @Scenario2Mean - 3*@Scenario2StandardDeviation  SET @Scenario2UpperThreshold3 = @Scenario2Mean + 3*@Scenario2StandardDeviation   DECLARE @Scenario2LowerThreshold2 float; DECLARE @Scenario2UpperThreshold2 float;  SET @Scenario2LowerThreshold2 = @Scenario2Mean - 2*@Scenario2StandardDeviation  SET @Scenario2UpperThreshold2 = @Scenario2Mean + 2*@Scenario2StandardDeviation   DECLARE @Scenario2LowerThreshold1 float; DECLARE @Scenario2UpperThreshold1 float;  SET @Scenario2LowerThreshold1 = @Scenario2Mean - 1*@Scenario2StandardDeviation  SET @Scenario2UpperThreshold1 = @Scenario2Mean + 1*@Scenario2StandardDeviation    IF OBJECT_ID('tempdb..#scenario2', 'U') IS NOT NULL DROP TABLE #scenario2 select * ,CASE 	WHEN IS_bps < @Scenario2LowerThreshold3 THEN 3 	WHEN IS_bps > @Scenario2UpperThreshold3 THEN 3   	WHEN IS_bps < @Scenario2LowerThreshold2 THEN 2  	WHEN IS_bps > @Scenario2UpperThreshold2 THEN 2  	WHEN IS_bps < @Scenario2LowerThreshold1 THEN 1 	WHEN IS_bps > @Scenario2UpperThreshold1 THEN 1   	ELSE 0 END AS [SCENARIO_2_SD_AWAY] into #scenario2 from #scenario1  IF OBJECT_ID('tempdb..#metadata', 'U') IS NOT NULL DROP TABLE #metadata 	select  	DATEPART(DAY,@Start_Date) AS [START_DAY] 	,DATEPART(MONTH, @Start_Date) AS [START_MONTH] 	,DATEPART(YEAR, @Start_Date) AS [START_YEAR] 	,DATEPART(DAY,@End_Date)	AS [END_DAY] 	,DATEPART(MONTH, @End_Date) AS [END_MONTH] 	,DATEPART(YEAR, @End_Date) AS [END_YEAR] 	,@Report_Name AS [Report_Name] 	,GETDATE() AS [Run_Date] 	,@Scenario1Mean as [SCENARIO_1_MEAN] 	,@Scenario1StandardDeviation as [SCENARIO_1_STANDARD_DEVIATION]  	,@Scenario1LowerThreshold3 as [SCENARIO_1_LOWER_THRESHOLD_3] 	,@Scenario1UpperThreshold3 as [SCENARIO_1_UPPER_THRESHOLD_3] 	,@Scenario1LowerThreshold2 as [SCENARIO_1_LOWER_THRESHOLD_2] 	,@Scenario1UpperThreshold2 as [SCENARIO_1_UPPER_THRESHOLD_2] 	,@Scenario1LowerThreshold1 as [SCENARIO_1_LOWER_THRESHOLD_1] 	,@Scenario1UpperThreshold1 as [SCENARIO_1_UPPER_THRESHOLD_1] 	,@Scenario1LowerThreshold05 as [SCENARIO_1_LOWER_THRESHOLD_05] 	,@Scenario1UpperThreshold05 as [SCENARIO_1_UPPER_THRESHOLD_05]  	,@Scenario2Mean as [SCENARIO_2_MEAN] 	,@Scenario2StandardDeviation as [SCENARIO_2_STANDARD_DEVIATION]  	,@Scenario2LowerThreshold3 as [SCENARIO_2_LOWER_THRESHOLD_3] 	,@Scenario2UpperThreshold3 as [SCENARIO_2_UPPER_THRESHOLD_3] 	,@Scenario2LowerThreshold2 as [SCENARIO_2_LOWER_THRESHOLD_2] 	,@Scenario2UpperThreshold2 as [SCENARIO_2_UPPER_THRESHOLD_2] 	,@Scenario2LowerThreshold1 as [SCENARIO_2_LOWER_THRESHOLD_1] 	,@Scenario2UpperThreshold1 as [SCENARIO_2_UPPER_THRESHOLD_1] 	INTO #metadata  IF OBJECT_ID('VISTA_REPORTING.dbo.STDEV_IMPLEMENTATION_SHORTFALL_EQ_REPORT', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.STDEV_IMPLEMENTATION_SHORTFALL_EQ_REPORT 	FROM #scenario2 ELSE 	INSERT INTO VISTA_REPORTING.dbo.STDEV_IMPLEMENTATION_SHORTFALL_EQ_REPORT 	SELECT * 	FROM #scenario2 	  IF OBJECT_ID('VISTA_REPORTING.dbo.STDEV_IMPLEMENTATION_SHORTFALL_EQ_REPORT_METADATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.STDEV_IMPLEMENTATION_SHORTFALL_EQ_REPORT_METADATA 	FROM #metadata ELSE 	INSERT INTO VISTA_REPORTING.dbo.STDEV_IMPLEMENTATION_SHORTFALL_EQ_REPORT_METADATA 	SELECT * 	FROM #metadata  END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: STDEV_TIMELY_RELEASE_FUTURES_EQ CreateDate: 2019-10-18 08:39:52.153 ModifyDate: 2019-11-13 15:34:43.220 --- DEFINITION START --- -- ============================================= -- Author:		<Nasra, Michael> -- Create date: <02/09/2019> -- Description:	 -- <Generates Standard Deviation report a given start and end date.> -- =============================================  -- ***************VERSION CONTROL***************  -- *********************************************  CREATE PROCEDURE [dbo].[STDEV_TIMELY_RELEASE_FUTURES_EQ]  	-- Add the parameters for the stored procedure here  	@Start_day		INT, 	@Start_Month	INT, 	@Start_Year		INT, 	@End_Day		INT,  	@End_Month		INT, 	@End_Year		INT, 	@Report_Name	VARCHAR(MAX)  AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;      -- Insert statements for procedure here  	DECLARE @Start_Date	DATETIME; 	SET		@Start_Date = CONVERT(DATE,CONCAT(@Start_Year,'-',@Start_Month,'-', @Start_day)); --Turn the input start month parameter into a date  	DECLARE @End_Date	DATETIME; 	SET		@End_Date  = DATEADD(SECOND,86399.99999999,CONVERT(DATETIME,CONCAT(@End_Year,'-',@End_Month, '-', @End_Day)));  --Turn the input end month parameter into a date    IF OBJECT_ID('tempdb..#population', 'U') IS NOT NULL DROP TABLE #population  SELECT DISTINCT 	 @Report_Name as [Report_Name], 	 ord_num, 	 INST_TYPE, 	 AUTH_TIME, 	 MIN_RELEASE_DATETIME, 	 datediff(minute,AUTH_TIME,MIN_RELEASE_DATETIME) as [Release Time] 	  into #population from VISTA_REPORTING.dbo.MASTER_PM_ORDER where AUTH_TIME <> '1900-01-01 00:00:00.000'  and MIN_RELEASE_DATETIME <> '1900-01-01 00:00:00.000'  and AUTH_TIME between @Start_Date and @End_Date and INST_TYPE in ('EQUITIES','EQUITY FUTURES','ETF')  DECLARE @Scenario1Mean float; DECLARE @Scenario1StandardDeviation float;  SET @Scenario1Mean = (select avg(cast([Release Time] as float)) from #population) SET @Scenario1StandardDeviation = (select STDEV([Release Time]) from #population)   DECLARE @Scenario1LowerThreshold3 float; DECLARE @Scenario1UpperThreshold3 float;  SET @Scenario1LowerThreshold3 = @Scenario1Mean - 3*@Scenario1StandardDeviation  SET @Scenario1UpperThreshold3 = @Scenario1Mean + 3*@Scenario1StandardDeviation   DECLARE @Scenario1LowerThreshold2 float; DECLARE @Scenario1UpperThreshold2 float;  SET @Scenario1LowerThreshold2 = @Scenario1Mean - 2*@Scenario1StandardDeviation  SET @Scenario1UpperThreshold2 = @Scenario1Mean + 2*@Scenario1StandardDeviation   DECLARE @Scenario1LowerThreshold1 float; DECLARE @Scenario1UpperThreshold1 float;  SET @Scenario1LowerThreshold1 = @Scenario1Mean - 1*@Scenario1StandardDeviation  SET @Scenario1UpperThreshold1 = @Scenario1Mean + 1*@Scenario1StandardDeviation   DECLARE @Scenario1LowerThreshold05 float; DECLARE @Scenario1UpperThreshold05 float;  SET @Scenario1LowerThreshold05 = @Scenario1Mean - 0.5*@Scenario1StandardDeviation  SET @Scenario1UpperThreshold05 = @Scenario1Mean + 0.5*@Scenario1StandardDeviation    IF OBJECT_ID('tempdb..#scenario1', 'U') IS NOT NULL DROP TABLE #scenario1 select *  ,case  	WHEN [Release Time] < @Scenario1LowerThreshold3 THEN 3 	WHEN [Release Time] > @Scenario1UpperThreshold3 THEN 3  	WHEN [Release Time] < @Scenario1LowerThreshold2 THEN 2 	WHEN [Release Time] > @Scenario1UpperThreshold2 THEN 2  	WHEN [Release Time] < @Scenario1LowerThreshold1 THEN 1 	WHEN [Release Time] > @Scenario1UpperThreshold1 THEN 1  	WHEN [Release Time] < @Scenario1LowerThreshold05 THEN 0.5 	WHEN [Release Time] > @Scenario1UpperThreshold05 THEN 0.5  	ELSE 0 END AS [SCENARIO_1_SD_AWAY]  into #scenario1 from #population  DECLARE @Scenario2Mean float; DECLARE @Scenario2StandardDeviation float;  SET @Scenario2Mean = (select avg(cast([Release Time] as float)) from #scenario1 where [SCENARIO_1_SD_AWAY] < 3) SET @Scenario2StandardDeviation = (select STDEV([Release Time]) from #scenario1 where [SCENARIO_1_SD_AWAY] < 3)   DECLARE @Scenario2LowerThreshold3 float; DECLARE @Scenario2UpperThreshold3 float;  SET @Scenario2LowerThreshold3 = @Scenario2Mean - 3*@Scenario2StandardDeviation  SET @Scenario2UpperThreshold3 = @Scenario2Mean + 3*@Scenario2StandardDeviation   DECLARE @Scenario2LowerThreshold2 float; DECLARE @Scenario2UpperThreshold2 float;  SET @Scenario2LowerThreshold2 = @Scenario2Mean - 2*@Scenario2StandardDeviation  SET @Scenario2UpperThreshold2 = @Scenario2Mean + 2*@Scenario2StandardDeviation   DECLARE @Scenario2LowerThreshold1 float; DECLARE @Scenario2UpperThreshold1 float;  SET @Scenario2LowerThreshold1 = @Scenario2Mean - 1*@Scenario2StandardDeviation  SET @Scenario2UpperThreshold1 = @Scenario2Mean + 1*@Scenario2StandardDeviation    IF OBJECT_ID('tempdb..#scenario2', 'U') IS NOT NULL DROP TABLE #scenario2 select * ,CASE 	WHEN [Release Time] < @Scenario2LowerThreshold3 THEN 3 	WHEN [Release Time] > @Scenario2UpperThreshold3 THEN 3   	WHEN [Release Time] < @Scenario2LowerThreshold2 THEN 2  	WHEN [Release Time] > @Scenario2UpperThreshold2 THEN 2  	WHEN [Release Time] < @Scenario2LowerThreshold1 THEN 1 	WHEN [Release Time] > @Scenario2UpperThreshold1 THEN 1   	ELSE 0 END AS [SCENARIO_2_SD_AWAY] into #scenario2 from #scenario1  IF OBJECT_ID('tempdb..#metadata', 'U') IS NOT NULL DROP TABLE #metadata 	select  	DATEPART(DAY,@Start_Date) AS [START_DAY] 	,DATEPART(MONTH, @Start_Date) AS [START_MONTH] 	,DATEPART(YEAR, @Start_Date) AS [START_YEAR] 	,DATEPART(DAY,@End_Date)	AS [END_DAY] 	,DATEPART(MONTH, @End_Date) AS [END_MONTH] 	,DATEPART(YEAR, @End_Date) AS [END_YEAR] 	,@Report_Name AS [Report_Name] 	,GETDATE() AS [Run_Date] 	,ROUND(@Scenario1Mean				,2)		as [SCENARIO_1_MEAN] 	,ROUND(@Scenario1StandardDeviation	,2)	as [SCENARIO_1_STANDARD_DEVIATION]	  	,ROUND(@Scenario1LowerThreshold3	,2)		as [SCENARIO_1_LOWER_THRESHOLD_3] 	,ROUND(@Scenario1UpperThreshold3	,2)		as [SCENARIO_1_UPPER_THRESHOLD_3] 	,ROUND(@Scenario1LowerThreshold2	,2)		as [SCENARIO_1_LOWER_THRESHOLD_2] 	,ROUND(@Scenario1UpperThreshold2	,2)		as [SCENARIO_1_UPPER_THRESHOLD_2] 	,ROUND(@Scenario1LowerThreshold1	,2)		as [SCENARIO_1_LOWER_THRESHOLD_1] 	,ROUND(@Scenario1UpperThreshold1	,2)		as [SCENARIO_1_UPPER_THRESHOLD_1] 	,ROUND(@Scenario1LowerThreshold05	,2)		as [SCENARIO_1_LOWER_THRESHOLD_05] 	,ROUND(@Scenario1UpperThreshold05	,2)		as [SCENARIO_1_UPPER_THRESHOLD_05] 	,ROUND(@Scenario2Mean				,2)		as [SCENARIO_2_MEAN] 	,ROUND(@Scenario2StandardDeviation	,2)	as [SCENARIO_2_STANDARD_DEVIATION] 	,ROUND(@Scenario2LowerThreshold3	,2)		as [SCENARIO_2_LOWER_THRESHOLD_3] 	,ROUND(@Scenario2UpperThreshold3	,2)		as [SCENARIO_2_UPPER_THRESHOLD_3] 	,ROUND(@Scenario2LowerThreshold2	,2)		as [SCENARIO_2_LOWER_THRESHOLD_2] 	,ROUND(@Scenario2UpperThreshold2	,2)		as [SCENARIO_2_UPPER_THRESHOLD_2] 	,ROUND(@Scenario2LowerThreshold1	,2)		as [SCENARIO_2_LOWER_THRESHOLD_1] 	,ROUND(@Scenario2UpperThreshold1	,2)		as [SCENARIO_2_UPPER_THRESHOLD_1] 	INTO #metadata  IF OBJECT_ID('VISTA_REPORTING.dbo.STDEV_TIMELY_RELEASE_FUTURES_EQ_REPORT', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.STDEV_TIMELY_RELEASE_FUTURES_EQ_REPORT 	FROM #scenario2 ELSE 	INSERT INTO VISTA_REPORTING.dbo.STDEV_TIMELY_RELEASE_FUTURES_EQ_REPORT 	SELECT * 	FROM #scenario2 	  IF OBJECT_ID('VISTA_REPORTING.dbo.STDEV_TIMELY_RELEASE_FUTURES_EQ_REPORT_METADATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.STDEV_TIMELY_RELEASE_FUTURES_EQ_REPORT_METADATA 	FROM #metadata ELSE 	INSERT INTO VISTA_REPORTING.dbo.STDEV_TIMELY_RELEASE_FUTURES_EQ_REPORT_METADATA 	SELECT * 	FROM #metadata  END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: STDEV_TIMELY_RELEASE_OTC_EQ CreateDate: 2019-10-18 08:39:52.197 ModifyDate: 2019-11-13 15:34:29.023 --- DEFINITION START --- -- ============================================= -- Author:		<Nasra, Michael> -- Create date: <02/09/2019> -- Description:	 -- <Generates Standard Deviation report a given start and end date.> -- =============================================  -- ***************VERSION CONTROL***************  -- *********************************************  CREATE PROCEDURE [dbo].[STDEV_TIMELY_RELEASE_OTC_EQ]  	-- Add the parameters for the stored procedure here  	@Start_day		INT, 	@Start_Month	INT, 	@Start_Year		INT, 	@End_Day		INT,  	@End_Month		INT, 	@End_Year		INT, 	@Report_Name	VARCHAR(MAX)  AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;      -- Insert statements for procedure here  	DECLARE @Start_Date	DATETIME; 	SET		@Start_Date = CONVERT(DATE,CONCAT(@Start_Year,'-',@Start_Month,'-', @Start_day)); --Turn the input start month parameter into a date  	DECLARE @End_Date	DATETIME; 	SET		@End_Date  = DATEADD(SECOND,86399.99999999,CONVERT(DATETIME,CONCAT(@End_Year,'-',@End_Month, '-', @End_Day)));  --Turn the input end month parameter into a date    IF OBJECT_ID('tempdb..#population', 'U') IS NOT NULL DROP TABLE #population  SELECT DISTINCT 	 @Report_Name as [Report_Name], 	 ord_num, 	 INST_TYPE, 	 AUTH_TIME, 	 MIN_RELEASE_DATETIME, 	 datediff(minute,AUTH_TIME,MIN_RELEASE_DATETIME) as [Release Time] 	  into #population from VISTA_REPORTING.dbo.MASTER_PM_ORDER where AUTH_TIME <> '1900-01-01 00:00:00.000'  and MIN_RELEASE_DATETIME <> '1900-01-01 00:00:00.000'  and AUTH_TIME between @Start_Date and @End_Date and INST_TYPE in ('CONV BOND','ET Options','TRS')  DECLARE @Scenario1Mean float; DECLARE @Scenario1StandardDeviation float;  SET @Scenario1Mean = (select avg(cast([Release Time] as float)) from #population) SET @Scenario1StandardDeviation = (select STDEV([Release Time]) from #population)   DECLARE @Scenario1LowerThreshold3 float; DECLARE @Scenario1UpperThreshold3 float;  SET @Scenario1LowerThreshold3 = @Scenario1Mean - 3*@Scenario1StandardDeviation  SET @Scenario1UpperThreshold3 = @Scenario1Mean + 3*@Scenario1StandardDeviation   DECLARE @Scenario1LowerThreshold2 float; DECLARE @Scenario1UpperThreshold2 float;  SET @Scenario1LowerThreshold2 = @Scenario1Mean - 2*@Scenario1StandardDeviation  SET @Scenario1UpperThreshold2 = @Scenario1Mean + 2*@Scenario1StandardDeviation   DECLARE @Scenario1LowerThreshold1 float; DECLARE @Scenario1UpperThreshold1 float;  SET @Scenario1LowerThreshold1 = @Scenario1Mean - 1*@Scenario1StandardDeviation  SET @Scenario1UpperThreshold1 = @Scenario1Mean + 1*@Scenario1StandardDeviation   DECLARE @Scenario1LowerThreshold05 float; DECLARE @Scenario1UpperThreshold05 float;  SET @Scenario1LowerThreshold05 = @Scenario1Mean - 0.5*@Scenario1StandardDeviation  SET @Scenario1UpperThreshold05 = @Scenario1Mean + 0.5*@Scenario1StandardDeviation    IF OBJECT_ID('tempdb..#scenario1', 'U') IS NOT NULL DROP TABLE #scenario1 select *  ,case  	WHEN [Release Time] < @Scenario1LowerThreshold3 THEN 3 	WHEN [Release Time] > @Scenario1UpperThreshold3 THEN 3  	WHEN [Release Time] < @Scenario1LowerThreshold2 THEN 2 	WHEN [Release Time] > @Scenario1UpperThreshold2 THEN 2  	WHEN [Release Time] < @Scenario1LowerThreshold1 THEN 1 	WHEN [Release Time] > @Scenario1UpperThreshold1 THEN 1  	WHEN [Release Time] < @Scenario1LowerThreshold05 THEN 0.5 	WHEN [Release Time] > @Scenario1UpperThreshold05 THEN 0.5  	ELSE 0 END AS [SCENARIO_1_SD_AWAY]  into #scenario1 from #population  DECLARE @Scenario2Mean float; DECLARE @Scenario2StandardDeviation float;  SET @Scenario2Mean = (select avg(cast([Release Time] as float)) from #scenario1 where [SCENARIO_1_SD_AWAY] < 3) SET @Scenario2StandardDeviation = (select STDEV([Release Time]) from #scenario1 where [SCENARIO_1_SD_AWAY] < 3)   DECLARE @Scenario2LowerThreshold3 float; DECLARE @Scenario2UpperThreshold3 float;  SET @Scenario2LowerThreshold3 = @Scenario2Mean - 3*@Scenario2StandardDeviation  SET @Scenario2UpperThreshold3 = @Scenario2Mean + 3*@Scenario2StandardDeviation   DECLARE @Scenario2LowerThreshold2 float; DECLARE @Scenario2UpperThreshold2 float;  SET @Scenario2LowerThreshold2 = @Scenario2Mean - 2*@Scenario2StandardDeviation  SET @Scenario2UpperThreshold2 = @Scenario2Mean + 2*@Scenario2StandardDeviation   DECLARE @Scenario2LowerThreshold1 float; DECLARE @Scenario2UpperThreshold1 float;  SET @Scenario2LowerThreshold1 = @Scenario2Mean - 1*@Scenario2StandardDeviation  SET @Scenario2UpperThreshold1 = @Scenario2Mean + 1*@Scenario2StandardDeviation    IF OBJECT_ID('tempdb..#scenario2', 'U') IS NOT NULL DROP TABLE #scenario2 select * ,CASE 	WHEN [Release Time] < @Scenario2LowerThreshold3 THEN 3 	WHEN [Release Time] > @Scenario2UpperThreshold3 THEN 3   	WHEN [Release Time] < @Scenario2LowerThreshold2 THEN 2  	WHEN [Release Time] > @Scenario2UpperThreshold2 THEN 2  	WHEN [Release Time] < @Scenario2LowerThreshold1 THEN 1 	WHEN [Release Time] > @Scenario2UpperThreshold1 THEN 1   	ELSE 0 END AS [SCENARIO_2_SD_AWAY] into #scenario2 from #scenario1  IF OBJECT_ID('tempdb..#metadata', 'U') IS NOT NULL DROP TABLE #metadata 	select  	DATEPART(DAY,@Start_Date) AS [START_DAY] 	,DATEPART(MONTH, @Start_Date) AS [START_MONTH] 	,DATEPART(YEAR, @Start_Date) AS [START_YEAR] 	,DATEPART(DAY,@End_Date)	AS [END_DAY] 	,DATEPART(MONTH, @End_Date) AS [END_MONTH] 	,DATEPART(YEAR, @End_Date) AS [END_YEAR] 	,@Report_Name AS [Report_Name] 	,GETDATE() AS [Run_Date] 	,ROUND(@Scenario1Mean				,2)		as [SCENARIO_1_MEAN] 	,ROUND(@Scenario1StandardDeviation	,2)		as [SCENARIO_1_STANDARD_DEVIATION]	  	,ROUND(@Scenario1LowerThreshold3	,2)		as [SCENARIO_1_LOWER_THRESHOLD_3] 	,ROUND(@Scenario1UpperThreshold3	,2)		as [SCENARIO_1_UPPER_THRESHOLD_3] 	,ROUND(@Scenario1LowerThreshold2	,2)		as [SCENARIO_1_LOWER_THRESHOLD_2] 	,ROUND(@Scenario1UpperThreshold2	,2)		as [SCENARIO_1_UPPER_THRESHOLD_2] 	,ROUND(@Scenario1LowerThreshold1	,2)		as [SCENARIO_1_LOWER_THRESHOLD_1] 	,ROUND(@Scenario1UpperThreshold1	,2)		as [SCENARIO_1_UPPER_THRESHOLD_1] 	,ROUND(@Scenario1LowerThreshold05	,2)		as [SCENARIO_1_LOWER_THRESHOLD_05] 	,ROUND(@Scenario1UpperThreshold05	,2)		as [SCENARIO_1_UPPER_THRESHOLD_05] 	,ROUND(@Scenario2Mean				,2)		as [SCENARIO_2_MEAN] 	,ROUND(@Scenario2StandardDeviation	,2)		as [SCENARIO_2_STANDARD_DEVIATION] 	,ROUND(@Scenario2LowerThreshold3	,2)		as [SCENARIO_2_LOWER_THRESHOLD_3] 	,ROUND(@Scenario2UpperThreshold3	,2)		as [SCENARIO_2_UPPER_THRESHOLD_3] 	,ROUND(@Scenario2LowerThreshold2	,2)		as [SCENARIO_2_LOWER_THRESHOLD_2] 	,ROUND(@Scenario2UpperThreshold2	,2)		as [SCENARIO_2_UPPER_THRESHOLD_2] 	,ROUND(@Scenario2LowerThreshold1	,2)		as [SCENARIO_2_LOWER_THRESHOLD_1] 	,ROUND(@Scenario2UpperThreshold1	,2)		as [SCENARIO_2_UPPER_THRESHOLD_1] 	INTO #metadata  IF OBJECT_ID('VISTA_REPORTING.dbo.STDEV_TIMELY_RELEASE_OTC_EQ_REPORT', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.STDEV_TIMELY_RELEASE_OTC_EQ_REPORT 	FROM #scenario2 ELSE 	INSERT INTO VISTA_REPORTING.dbo.STDEV_TIMELY_RELEASE_OTC_EQ_REPORT 	SELECT * 	FROM #scenario2 	  IF OBJECT_ID('VISTA_REPORTING.dbo.STDEV_TIMELY_RELEASE_OTC_EQ_REPORT_METADATA', 'U') IS NULL 	SELECT * 	INTO VISTA_REPORTING.dbo.STDEV_TIMELY_RELEASE_OTC_EQ_REPORT_METADATA 	FROM #metadata ELSE 	INSERT INTO VISTA_REPORTING.dbo.STDEV_TIMELY_RELEASE_OTC_EQ_REPORT_METADATA 	SELECT * 	FROM #metadata  END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: WORKFLOW_EXCEPTION_SUMMARY CreateDate: 2019-10-18 08:39:52.237 ModifyDate: 2019-12-02 11:45:41.153 --- DEFINITION START --- -- ============================================= -- Author:		<Samad, Mehreen> -- Create date: <30/09/2019> -- Description:	 -- <Generates Workflow Summary table for 1A/B -- for use in the front end.> -- =============================================  -- ***************VERSION CONTROL***************  -- *********************************************  CREATE PROCEDURE [dbo].[WORKFLOW_EXCEPTION_SUMMARY]  	 --Add the parameters for the stored procedure here  AS BEGIN  --Aduit table temp IF OBJECT_ID('tempdb..#temp_au', 'U') IS  NOT NULL DROP TABLE #temp_au SELECT DISTINCT  	ID,  	EXCEPTION_TYPE,  	DEALER,  	CREATE_TIME,  	PM_ORD,  	TRD_ORD,  	MULTIFUND  INTO #temp_au FROM VISTA_REPORTING.dbo.AUDIT_TABLE   --1A Reasons --Selecting reasons from exception reason table IF OBJECT_ID('tempdb..#vista_reason_a', 'U') IS  NOT NULL DROP TABLE #vista_reason_a SELECT DISTINCT 	e.[ID],  	e.[REASON], 	e.[COMMENT], 	e.[USERID], 	e.[UPDATED], 	e.[TOUCH_COUNT] INTO #vista_reason_a FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE e inner join (SELECT 				[ID], 				MAX(touch_count) as [MAX_TOUCH], 				MAX(CREATED) as [MAX_CREATE_TIME] 			FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE 			WHERE [STATUS] in ('For Review','With Dealer','With Reviewer','C&A Review Request') -- and NULLIF([REASON],'') is not null 			--the above condition around status ensures that we only consider exceptions coming from the Dealing Desk 			--only dealing desk has the ability to flag false positive exceptions 			GROUP BY [ID]) a  on a.[ID] = e.[ID] and a.[MAX_TOUCH] = e.[TOUCH_COUNT] AND a.[MAX_CREATE_TIME] = e.[CREATED] --left join VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE fstu --on fstu.[ID] = e.[ID]  IF OBJECT_ID('tempdb..#workflow_a', 'U') IS  NOT NULL DROP TABLE #workflow_a SELECT DISTINCT  	au.[ID], 	e_a.[REASON] as [1A_REASON], 	e_a.[COMMENT] as [1A_COMMENT], 	e_a.[USERID] as [1A_USER], 	e_a.[UPDATED] as [1A_UPDATED] INTO #workflow_a FROM (SELECT DISTINCT ID FROM #temp_au) au left join #vista_reason_a e_a on au.ID = e_a.ID  --1B Reasons IF OBJECT_ID('tempdb..#vista_reason_b', 'U') IS  NOT NULL DROP TABLE #vista_reason_b --The below table is used to identify the last Reason (populated by C&M Team) SELECT DISTINCT 	e.[ID],  	e.[REASON], 	e.[COMMENT], 	e.[USERID], 	e.[UPDATED], 	e.[TOUCH_COUNT] INTO #vista_reason_b FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE e inner join (SELECT  				[ID], 				MAX(TOUCH_COUNT) as [MAX_TOUCH]  			FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE 			WHERE [STATUS] in ('Pre Sampling','With C&A Reviewer','Under Review','Review in Process','Post Sampling') 			GROUP BY [ID] ) a  on a.[ID] = e.[ID] and a.[MAX_TOUCH] = e.[TOUCH_COUNT] --left join VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE fstu --on fstu.[ID] = e.[ID]  IF OBJECT_ID('tempdb..#workflow_b', 'U') IS  NOT NULL DROP TABLE #workflow_b SELECT DISTINCT  	au.[ID], 	e_b.[REASON] as [1B_REASON], 	e_b.[COMMENT] as [1B_COMMENT], 	e_b.[USERID] as [1B_USER], 	e_b.[UPDATED] as [1B_UPDATED] INTO #workflow_b FROM (SELECT DISTINCT ID FROM #temp_au) au left join #vista_reason_b e_b on au.ID = e_b.ID  --Calcution to determine time between exception Create Time and first 1B status time IF OBJECT_ID('tempdb..#status_reason', 'U') IS NOT NULL DROP TABLE #status_reason SELECT DISTINCT 	ROW_NUMBER() OVER (ORDER BY e.ID, e.TOUCH_COUNT) as ROW_NO, 	e.ID, 	e.TOUCH_COUNT, 	e.UPDATED, 	st.STATUS_CODE as EXCEPTION_REASON_STATUS, 	fstu.[STATUS] as CURRENT_STATUS INTO #status_reason FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE e left join VISTA_REPORTING.dbo.STATUS_TABLE st on st.[STATUS] = e.[STATUS] left join VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE fstu on fstu.[ID] = e.[ID]  IF OBJECT_ID('tempdb..#status_reasonjoin', 'U') IS NOT NULL DROP TABLE #status_reasonjoin SELECT DISTINCT 	sr1.ROW_NO, 	sr1.ID, 	sr1.TOUCH_COUNT, 	sr1.EXCEPTION_REASON_STATUS as EXCEPTION_REASON_STATUS_FROM, 	CASE  		WHEN sr2.TOUCH_COUNT = 1 THEN sr1.CURRENT_STATUS --Ensuring that last status for particular ID is current status as join is shifted up by 1 	ELSE sr2.EXCEPTION_REASON_STATUS  	END AS EXCEPTION_REASON_STATUS_TO, 	sr1.CURRENT_STATUS, 	sr1.UPDATED INTO #status_reasonjoin FROM #status_reason sr1 left join #status_reason sr2 on sr2.ROW_NO - 1 = sr1.ROW_NO  --Getting the first touch count it was sent to 1B IF OBJECT_ID('tempdb..#min_statuschange', 'U') IS NOT NULL DROP TABLE #min_statuschange SELECT DISTINCT 	srj.ID,  	MIN(srj.TOUCH_COUNT) as MIN_TOUCH INTO #min_statuschange FROM #status_reasonjoin srj WHERE LEFT(srj.EXCEPTION_REASON_STATUS_TO,2) = '1B' and LEFT(srj.EXCEPTION_REASON_STATUS_FROM,2) = '1A' GROUP BY srj.ID  --Calculating date difference IF OBJECT_ID('tempdb..#date_diff', 'U') IS NOT NULL DROP TABLE #date_diff SELECT DISTINCT 	sr.ID, 	au.CREATE_TIME, 	sr.EXCEPTION_REASON_STATUS_FROM, 	sr.EXCEPTION_REASON_STATUS_TO, 	DATEDIFF(DAY,au.CREATE_TIME,sr.UPDATED) as [DIFFERENCE_BETWEEN_CREATION_AND_FIRST_1B_STATUS] INTO #date_diff FROM #status_reasonjoin sr inner join #min_statuschange min_sc  on min_sc.ID = sr.ID and min_sc.MIN_TOUCH = sr.TOUCH_COUNT left join (SELECT DISTINCT ID, EXCEPTION_TYPE, MAX(CREATE_TIME) as CREATE_TIME FROM VISTA_REPORTING.dbo.AUDIT_TABLE GROUP BY ID, EXCEPTION_TYPE) au on sr.ID = au.ID  --Combining both results from 1A/B IF OBJECT_ID('tempdb..#workflow_final', 'U') IS  NOT NULL DROP TABLE #workflow_final SELECT DISTINCT 	wb.[ID], 	fstu.[DEALING_DESK], 	au.[EXCEPTION_TYPE], 	st.[STATUS], 	au.[CREATE_TIME], 	CASE 		WHEN au.EXCEPTION_TYPE = 'Amendment Analysis' THEN amm.Amending_Dealer 		ELSE COALESCE(au.[DEALER],mex.[DEALEr])  	END AS DEALER, 	au.[PM_ORD], 	au.[TRD_ORD], 	au.[MULTIFUND], 	amm.[TRD_AMEND_TYPE], 	dd.DIFFERENCE_BETWEEN_CREATION_AND_FIRST_1B_STATUS, 	AVG(dd.DIFFERENCE_BETWEEN_CREATION_AND_FIRST_1B_STATUS) oVER () as AVG_DIFFERENCE, 	wb.[1B_REASON], 	wb.[1B_COMMENT], 	urb.[NAME] as [1B_USER], 	wb.[1B_UPDATED], 	wa.[1A_REASON], 	wa.[1A_COMMENT], 	ura.[NAME] as [1A_USER], 	wa.[1A_UPDATED] INTO #workflow_final FROM #workflow_b wb left join #workflow_a wa on wa.[ID] = wb.[ID] left join VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE fstu on wb.[ID] = fstu.[ID] left join VISTA_REPORTING.dbo.STATUS_TABLE st on fstu.[STATUS] = st.[STATUS_CODE] left join #temp_au au on wb.[ID] = au.[ID] left join #date_diff dd on dd.ID = wb.ID left join (SELECT DISTINCT MULTI_FUND_ID, TOUCH_COUNT, TRD_AMEND_TYPE, Amending_Dealer FROM VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE) amm on wb.ID = CONCAT(amm.MULTI_FUND_ID,'_15',amm.TOUCH_COUNT) and  au.EXCEPTION_TYPE = 'Amendment Analysis' left join (SELECT DISTINCT [USER], [NAME] FROM VISTA_REPORTING.dbo.USER_RELATIONSHIP_FI_LL_EQ) urb on wb.[1B_USER] = urb.[USER]  left join (SELECT DISTINCT [USER], [NAME] FROM VISTA_REPORTING.dbo.USER_RELATIONSHIP_FI_LL_EQ) ura on wa.[1A_USER] = ura.[USER]  left join (SELECT DISTINCT ID_VG_NUMBER, DEALER, Dealing_Desk FROM VISTA_REPORTING.dbo.MASTER_EXECUTIVE_SUMMARY_TABLE) mex on wb.[ID] = mex.[ID_VG_NUMBER]  WHERE fstu.DEALING_DESK in ('Fixed Income', 'Equity', 'Leveraged Finance')   --Inserting into final table  IF OBJECT_ID('VISTA_REPORTING.dbo.WORKFLOW_EXCEPTION_SUMMARY_TABLE', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.WORKFLOW_EXCEPTION_SUMMARY_TABLE SELECT DISTINCT  	*  INTO VISTA_REPORTING.DBO.WORKFLOW_EXCEPTION_SUMMARY_TABLE FROM #workflow_final  END  --- DEFINITION END --- === STORED PROCEDURE END ===  
=== STORED PROCEDURE START === Database: VISTA_REPORTING Schema: dbo Name: WORKFLOW_TABLE_BACKUP CreateDate: 2021-01-12 20:52:21.700 ModifyDate: 2021-01-12 20:53:44.353 --- DEFINITION START --- -- ============================================= -- Author:		<da Costa, David> -- Create date: <10/07/2019> -- Description:	<Stored procedure to transform API data in STAGING and create  -- corresponding VISTA_REPORTING tables> -- ============================================= CREATE PROCEDURE [dbo].[WORKFLOW_TABLE_BACKUP]  AS BEGIN 	-- SET NOCOUNT ON added to prevent extra result sets from 	-- interfering with SELECT statements. 	SET NOCOUNT ON;  IF OBJECT_ID('VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE_ARCHIVE', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE_ARCHIVE SELECT * INTO VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE_ARCHIVE FROM VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE   IF OBJECT_ID('VISTA_REPORTING.dbo.AUDIT_TABLE_ARCHIVE', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.AUDIT_TABLE_ARCHIVE SELECT * INTO VISTA_REPORTING.dbo.AUDIT_TABLE_ARCHIVE FROM VISTA_REPORTING.dbo.AUDIT_TABLE   IF OBJECT_ID('VISTA_REPORTING.dbo.AUDIT_TABLE_FX_ARCHIVE', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.AUDIT_TABLE_FX_ARCHIVE SELECT * INTO VISTA_REPORTING.dbo.AUDIT_TABLE_FX_ARCHIVE FROM VISTA_REPORTING.dbo.AUDIT_TABLE_FX   IF OBJECT_ID('VISTA_REPORTING.dbo.AUDIT_TABLE_CASH_ARCHIVE', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.AUDIT_TABLE_CASH_ARCHIVE SELECT * INTO VISTA_REPORTING.dbo.AUDIT_TABLE_CASH_ARCHIVE FROM VISTA_REPORTING.dbo.AUDIT_TABLE_CASH   IF OBJECT_ID('VISTA_REPORTING.dbo.AUDIT_TABLE_DMG_ARCHIVE', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.AUDIT_TABLE_DMG_ARCHIVE SELECT * INTO VISTA_REPORTING.dbo.AUDIT_TABLE_DMG_ARCHIVE FROM VISTA_REPORTING.dbo.AUDIT_TABLE_DMG   IF OBJECT_ID('VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE_ARCHIVE', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE_ARCHIVE SELECT * INTO VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE_ARCHIVE FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE   END   --- DEFINITION END --- === STORED PROCEDURE END ===  
