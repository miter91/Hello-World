(No column name)
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: ALADDIN_ONE_DAY_PROCESSING_REFRESH  CreateDate: 2025-01-07 09:12:10.880  ModifyDate: 2025-06-26 16:40:18.527  --- DEFINITION START ---  -- =============================================    -- Author:  <Miter, Matej>    -- Create date: <19/06/2021>    -- Description: <Stored procedure to create a secondary check within Aladdin data to avoid having differences between staging and reporting area>    -- =============================================        CREATE    PROCEDURE [dbo].[ALADDIN_ONE_DAY_PROCESSING_REFRESH]        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.         SET NOCOUNT ON          DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()         IF OBJECT_ID('tempdb..#secondary_check_combined', 'U') IS NOT NULL DROP TABLE #secondary_check_combined     select distinct try_cast(ORD_NUM as varchar) as ID, 'ORDER_LEVEL' as Row_Origin     into #secondary_check_combined     from ##secondary_IS_check     UNION ALL      select distinct try_cast(ORD_NUM as varchar) as ID,  'ORDER_LEVEL' as Row_Origin     from ##secondary_HL_check     UNION ALL      select distinct try_cast(ORD_NUM as varchar) as ID,  'ORDER_LEVEL' as Row_Origin     from ##secondary_OP_EQ_check     UNION ALL      select distinct try_cast(ORD_NUM as varchar) as ID,  'ORDER_LEVEL' as Row_Origin     from ##secondary_OP_FI_check     UNION ALL      select distinct try_cast(ORD_NUM as varchar) as ID,  'ORDER_LEVEL' as Row_Origin     from ##secondary_OP_LL_check     UNION ALL      select distinct try_cast(ORD_NUM as varchar) as ID,  'ORDER_LEVEL' as Row_Origin     from ##secondary_OP_DMG_check     UNION ALL     select distinct TRY_CAST(ORD_NUM as varchar) as ID,  'ORDER_LEVEL' as Row_Origin     from ##secondary_OA_EQ_check     UNION ALL     select distinct TRY_CAST(ORD_NUM as varchar) as ID,  'ORDER_LEVEL' as Row_Origin     from ##secondary_OA_FI_check     UNION ALL     select distinct TRY_CAST(ORD_NUM as varchar) as ID,  'ORDER_LEVEL' as Row_Origin     from ##secondary_OA_LL_check     UNION ALL     select distinct TRY_CAST(ORD_NUM as varchar) as ID,  'ORDER_LEVEL' as Row_Origin     from ##secondary_OA_DMG_check     UNION ALL     select distinct TRY_CAST(MULTI_FUND_ID as varchar) as ID,  'TRADE_LEVEL' as Row_Origin     from ##secondary_QE_EQ_check     UNION ALL     select distinct TRY_CAST(MULTI_FUND_ID as varchar) as ID,  'TRADE_LEVEL' as Row_Origin     from ##secondary_QE_FI_check     UNION ALL     select distinct TRY_CAST(MULTI_FUND_ID as varchar) as ID,  'TRADE_LEVEL' as Row_Origin     from ##secondary_QE_LL_check     UNION ALL     select distinct TRY_CAST(MULTI_FUND_ID as varchar) as ID,  'TRADE_LEVEL' as Row_Origin     from ##secondary_QE_DMG_check     UNION ALL     select distinct TRY_CAST(MULTI_FUND_ID as varchar) as ID,  'TRADE_LEVEL' as Row_Origin     from ##secondary_NOF_LL_check     UNION ALL     select distinct TRY_CAST(MULTI_FUND_ID as varchar) as ID,  'TRADE_LEVEL' as Row_Origin     from ##secondary_NOF_FI_check     UNION ALL     select distinct TRY_CAST(MULTI_FUND_ID as varchar) as ID,  'TRADE_LEVEL' as Row_Origin     from ##secondary_NWQ_EQ_check     UNION ALL     select distinct TRY_CAST(MULTI_FUND_ID as varchar) as ID,  'TRADE_LEVEL' as Row_Origin     from ##secondary_NWQ_FI_check     UNION ALL     select distinct TRY_CAST(MULTI_FUND_ID as varchar) as ID,  'TRADE_LEVEL' as Row_Origin     from ##secondary_NWQ_LL_check     UNION ALL     select distinct TRY_CAST(MULTI_FUND_ID as varchar) as ID,  'TRADE_LEVEL' as Row_Origin     from ##secondary_NWQ_DMG_check     UNION ALL     select distinct TRY_CAST(MULTI_FUND_ID as varchar) as ID,  'TRADE_LEVEL' as Row_Origin     from ##secondary_OI_LL_check     UNION ALL     select distinct TRY_CAST(MULTI_FUND_ID as varchar) as ID,  'TRADE_LEVEL' as Row_Origin     from ##secondary_OI_FI_check     UNION ALL     select distinct TRY_CAST(ORD_NUM as varchar) as ID,  'ORDER_LEVEL' as Row_Origin     from ##secondary_TE_EQ_check     UNION ALL     select distinct TRY_CAST(ORD_NUM as varchar) as ID,  'ORDER_LEVEL' as Row_Origin     from ##secondary_TE_FI_check     UNION ALL     select distinct TRY_CAST(ORD_NUM as varchar) as ID,  'ORDER_LEVEL' as Row_Origin     from ##secondary_TE_LL_check     UNION ALL     select distinct TRY_CAST(ORD_NUM as varchar) as ID,  'ORDER_LEVEL' as Row_Origin     from ##secondary_TE_DMG_check     UNION ALL     select distinct TRY_CAST(MULTI_FUND_ID as varchar) as ID,  'TRADE_LEVEL' as Row_Origin     from ##secondary_NCO_EQ_check     UNION ALL     select distinct TRY_CAST(MULTI_FUND_ID as varchar) as ID,  'TRADE_LEVEL' as Row_Origin     from ##secondary_TR_EQ_check     UNION ALL     select distinct TRY_CAST(MULTI_FUND_ID as varchar) as ID,  'TRADE_LEVEL' as Row_Origin     from ##secondary_TR_FI_check     UNION ALL     select distinct TRY_CAST(MULTI_FUND_ID as varchar) as ID,  'TRADE_LEVEL' as Row_Origin     from ##secondary_TR_LL_check     UNION ALL     select distinct TRY_CAST(MULTI_FUND_ID as varchar) as ID,  'TRADE_LEVEL' as Row_Origin     from ##secondary_TR_DMG_check     UNION ALL     select distinct TRY_CAST(ORD_NUM as varchar) as ID,  'ORDER_LEVEL' as Row_Origin     from ##secondary_TRL_EQ_check     UNION ALL     select distinct TRY_CAST(MULTI_FUND_ID as varchar) as ID,  'TRADE_LEVEL' as Row_Origin     from ##secondary_AF_EQ_check     UNION ALL     select distinct TRY_CAST(MULTI_FUND_ID as varchar) as ID,  'TRADE_LEVEL' as Row_Origin     from ##secondary_AF_FI_check     UNION ALL     select distinct TRY_CAST(MULTI_FUND_ID as varchar) as ID,  'TRADE_LEVEL' as Row_Origin     from ##secondary_AF_LL_check     UNION ALL     select distinct TRY_CAST(MULTI_FUND_ID as varchar) as ID,  'TRADE_LEVEL' as Row_Origin     from ##secondary_AF_DMG_check     UNION ALL     select distinct TRY_CAST(ORD_NUM as varchar) as ID,  'ORDER_LEVEL' as Row_Origin     from ##secondary_CD_DMG_check     UNION ALL     select distinct TRY_CAST(MULTI_FUND_ID as varchar) as ID,  'TRADE_LEVEL' as Row_Origin     from ##secondary_IT_EQ_check     UNION ALL     select distinct TRY_CAST(MULTI_FUND_ID as varchar) as ID,  'TRADE_LEVEL' as Row_Origin     from ##secondary_IT_FI_check     UNION ALL     select distinct TRY_CAST(MULTI_FUND_ID as varchar) as ID,  'TRADE_LEVEL' as Row_Origin     from ##secondary_IT_LL_check     UNION ALL     select distinct TRY_CAST(MULTI_FUND_ID as varchar) as ID,  'TRADE_LEVEL' as Row_Origin     from ##secondary_IT_DMG_check         IF OBJECT_ID('tempdb..#todays_pm_ords_secondary', 'U') IS NOT NULL DROP TABLE #todays_pm_ords_secondary     select distinct       ORD_NUM     into #todays_pm_ords_secondary     from Vista_Reporting.dbo.PM_ORDERS pm      WHERE    ORD_NUM in (select ID from #secondary_check_combined where Row_Origin = 'ORDER_LEVEL')         IF OBJECT_ID('tempdb..#todays_trades_secondary', 'U') IS NOT NULL DROP TABLE #todays_trades_secondary     select distinct       ORD_NUM,      MULTI_FUND_ID     into #todays_trades_secondary     from Vista_Reporting.dbo.TRADES trd     WHERE   MULTI_FUND_ID in (select ID from #secondary_check_combined where Row_Origin = 'TRADE_LEVEL')             IF OBJECT_ID('tempdb..#todays_trd_orders_secondary', 'U') IS NOT NULL DROP TABLE #todays_trd_orders_secondary     select distinct       ORD_NUM     into #todays_trd_orders_secondary     from Vista_Reporting.dbo.TRD_ORDERS trdo     WHERE    ORD_NUM in (select ID from #secondary_check_combined where Row_Origin = 'ORDER_LEVEL')             IF OBJECT_ID('tempdb..#todays_placements_secondary', 'U') IS NOT NULL DROP TABLE #todays_placements_secondary     select distinct       ORD_NUM,      PLACEMENT_NUM     into #todays_placements_secondary     from Vista_Reporting.dbo.PLACEMENTS pla     WHERE    TRY_CAST(PLACEMENT_NUM as varchar) in (select ID from #secondary_check_combined)          INSERT INTO VISTA_REPORTING.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN     SELECT * FROM (           SELECT DISTINCT pm.ORD_NUM as PM_ORD      ,oc.TRD_ORD      ,trd.MULTI_FUND_ID      ,pla.PLACEMENT_NUM      ,'PM_ORDERS' as ROW_ORIGIN     from #todays_pm_ords_secondary pm      LEFT JOIN Vista_Reporting.dbo.ORDERS_CROSS oc on oc.PM_ORD = pm.ORD_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID FROM Vista_Reporting.dbo.TRADES) trd on trd.ORD_NUM = oc.TRD_ORD     LEFT JOIN (SELECT DISTINCT ORD_NUM, PLACEMENT_NUM FROM Vista_Reporting.dbo.PLACEMENTS) pla on pla.ORD_NUM = oc.TRD_ORD          UNION               SELECT DISTINCT oc.PM_ORD      ,trd.ORD_NUM as TRD_ORD      ,trd.MULTI_FUND_ID      ,pla.PLACEMENT_NUM      ,'TRADES' as ROW_ORIGIN     from #todays_trades_secondary trd     LEFT JOIN Vista_Reporting.dbo.ORDERS_CROSS oc on oc.TRD_ORD = trd.ORD_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM, PLACEMENT_NUM FROM Vista_Reporting.dbo.PLACEMENTS) pla on pla.ORD_NUM = trd.ORD_NUM         UNION          SELECT DISTINCT oc.PM_ORD      ,trdo.ORD_NUM as TRD_ORD      ,trd.MULTI_FUND_ID      ,pla.PLACEMENT_NUM      ,'TRD_ORDERS' as ROW_ORIGIN     from #todays_trd_orders_secondary trdo     LEFT JOIN Vista_Reporting.dbo.ORDERS_CROSS oc on oc.TRD_ORD = trdo.ORD_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID FROM Vista_Reporting.dbo.TRADES) trd on trd.ORD_NUM = trdo.ORD_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM, PLACEMENT_NUM FROM Vista_Reporting.dbo.PLACEMENTS) pla on pla.ORD_NUM = trdo.ORD_NUM          UNION          SELECT DISTINCT oc.PM_ORD      ,pla.ORD_NUM as TRD_ORD      ,trd.MULTI_FUND_ID      ,pla.PLACEMENT_NUM      ,'PLACEMENTS' as ROW_ORIGIN     from #todays_placements_secondary pla     LEFT JOIN Vista_Reporting.dbo.ORDERS_CROSS oc on oc.TRD_ORD = pla.ORD_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID FROM Vista_Reporting.dbo.TRADES) trd on trd.ORD_NUM = pla.ORD_NUM) ONE_DAY_PROCESSING_IDS_ALADDIN          IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(     'ALADDIN_ONE_DAY_PROCESSING_REFRESH_SP', --TABLE_NAME     @START_TIME, --START_TIME     GETDATE(), --END_TIME     DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS     CAST(GETDATE() as date)) --COMPLETION_DATE        END            --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: ALADDIN_ONE_DAY_PROCESSING_RESOLVER  CreateDate: 2025-01-07 09:12:10.903  ModifyDate: 2025-07-01 11:57:18.517  --- DEFINITION START ---  -- =============================================      -- Author:  <Matej Miter>      -- Create date: <20/07/2021>      -- Description: <Stored procedure to perform secondary checks on Implementation Shortfall, High Low and Order Priority exceptions>      -- =============================================      CREATE    PROCEDURE [dbo].[ALADDIN_ONE_DAY_PROCESSING_RESOLVER]            AS      BEGIN       -- SET NOCOUNT ON added to prevent extra result sets from       -- interfering with SELECT statements.             SET NOCOUNT ON                    DECLARE @START_TIME as datetime       SET @START_TIME = GETDATE()             IF OBJECT_ID('tempdb..##secondary_IS_check', 'U') IS NOT NULL DROP TABLE ##secondary_IS_check       select *        into ##secondary_IS_check       from         (select ORD_NUM,ID,CONCAT(ORD_NUM,'_',ID,'_IS') as STG_ID from Vista_STAGING.dbo.VG_IMPLEMENTATION_SHORTFALL_EQ_TABLE) as STG_IMPLEMENTATION_SHORTFALL             LEFT JOIN        (select Order_ID,Row_ID,CONCAT(Order_ID,'_',Row_ID,'_IS')  as MASTER_ID from VISTA_REPORTING.dbo.IMPLEMENTATION_SHORTFALL_EQ) as MASTER_IMPLEMENTATION_SHORTFALL             on         STG_IMPLEMENTATION_SHORTFALL.STG_ID = MASTER_IMPLEMENTATION_SHORTFALL.MASTER_ID             where MASTER_IMPLEMENTATION_SHORTFALL.MASTER_ID is null                    IF OBJECT_ID('tempdb..##secondary_HL_check', 'U') IS NOT NULL DROP TABLE ##secondary_HL_check       select *        into ##secondary_HL_check       from         (select [ORD_NUM],ID as stg_secondary_id,CONCAT([ORD_NUM],'_',ID,'_HL') as STG_ID from Vista_STAGING.dbo.VG_MARKET_HIGH_LOW_TABLE) as STG_HIGH_LOW       LEFT JOIN        (select [Order ID],ID as master_seondary_id,CONCAT([Order ID],'_',ID,'_HL') as MASTER_ID  from VISTA_REPORTING.dbo.MARKET_HIGH_LOW_EQ) as MASTER_HIGH_LOW             on       STG_HIGH_LOW.STG_ID =  MASTER_HIGH_LOW.MASTER_ID              where MASTER_HIGH_LOW.MASTER_ID is null                     --Below is an additional check for Order Priority so we don't miss to show any processed data within dealers review tables in the frontend             IF OBJECT_ID('tempdb..##secondary_OP_EQ_check', 'U') IS NOT NULL DROP TABLE ##secondary_OP_EQ_check       select *       into ##secondary_OP_EQ_check       from         (select ORD_NUM,ORDER_PRIORITY_EXCEPTION from Vista_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_EQ_TABLE where ORDER_PRIORITY_EXCEPTION = 1) STAGING_ORDER_PRIORITY_EQ       INNER JOIN        (select ORD_NUM as master_ord_num,VG_14 from VISTA_REPORTING.dbo.MASTER_ORDER_PRIORITY_TABLE where VG_14 = 0) MASTER_ORDER_PRIORITY_EQ       on        STAGING_ORDER_PRIORITY_EQ.ORD_NUM = MASTER_ORDER_PRIORITY_EQ.master_ord_num                   IF OBJECT_ID('tempdb..##secondary_OP_FI_check', 'U') IS NOT NULL DROP TABLE ##secondary_OP_FI_check       select *       into ##secondary_OP_FI_check       from         (select ORD_NUM,ORDER_PRIORITY_EXCEPTION from Vista_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_FI_TABLE where ORDER_PRIORITY_EXCEPTION = 1) STAGING_ORDER_PRIORITY_FI       INNER JOIN        (select ORD_NUM as master_ord_num,VG_14 from VISTA_REPORTING.dbo.MASTER_ORDER_PRIORITY_TABLE where VG_14 = 0) MASTER_ORDER_PRIORITY_FI       on        STAGING_ORDER_PRIORITY_FI.ORD_NUM = MASTER_ORDER_PRIORITY_FI.master_ord_num                   IF OBJECT_ID('tempdb..##secondary_OP_LL_check', 'U') IS NOT NULL DROP TABLE ##secondary_OP_LL_check       select *       into ##secondary_OP_LL_check       from         (select ORD_NUM,ORDER_PRIORITY_EXCEPTION from Vista_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_LL_TABLE where ORDER_PRIORITY_EXCEPTION = 1) STAGING_ORDER_PRIORITY_LL       INNER JOIN        (select ORD_NUM as master_ord_num,VG_14 from VISTA_REPORTING.dbo.MASTER_ORDER_PRIORITY_TABLE where VG_14 = 0) MASTER_ORDER_PRIORITY_LL       on        STAGING_ORDER_PRIORITY_LL.ORD_NUM = MASTER_ORDER_PRIORITY_LL.master_ord_num             IF OBJECT_ID('tempdb..##secondary_OP_DMG_check', 'U') IS NOT NULL DROP TABLE ##secondary_OP_DMG_check       select *       into ##secondary_OP_DMG_check       from         (select ORD_NUM ,ORDER_PRIORITY_EXCEPTION from Vista_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_DMG_TABLE where ORDER_PRIORITY_EXCEPTION = 1) STAGING_ORDER_PRIORITY_DMG       INNER JOIN        (select [Trader Order Number] as master_order_num,EXCEPTION_FLAG from VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE where EXCEPTION_FLAG = 0) MASTER_ORDER_PRIORITY_DMG       on        STAGING_ORDER_PRIORITY_DMG.ORD_NUM = MASTER_ORDER_PRIORITY_DMG.master_order_num                    --Below is an additional check for Order Aggregation so we don't miss to show any processed data within dealers review tables in the frontend             IF OBJECT_ID('tempdb..##secondary_OA_EQ_check', 'U') IS NOT NULL DROP TABLE ##secondary_OA_EQ_check       select *       into ##secondary_OA_EQ_check       from         (select ORD_NUM from Vista_STAGING.dbo.VG_13_ORDER_AGGREGATION_EQ_TABLE where MERGE_EXCEPTION = 1) STAGING_ORDER_AGGREGATION_EQ       INNER JOIN        (select ORD_NUM as master_ord_num from VISTA_REPORTING.dbo.MASTER_TRD_ORDER_TABLE where VG_13 = 0) MASTER_ORDER_AGGREGATION_EQ       on        STAGING_ORDER_AGGREGATION_EQ.ORD_NUM = MASTER_ORDER_AGGREGATION_EQ.master_ord_num                           IF OBJECT_ID('tempdb..##secondary_OA_FI_check', 'U') IS NOT NULL DROP TABLE ##secondary_OA_FI_check       select *       into ##secondary_OA_FI_check       from         (select ORD_NUM,MERGE_EXCEPTION from Vista_STAGING.dbo.VG_13_ORDER_AGGREGATION_FI_TABLE where MERGE_EXCEPTION = 1) STAGING_ORDER_AGGREGATION_FI       INNER JOIN        (select ORD_NUM as master_ord_num,VG_13 from VISTA_REPORTING.dbo.MASTER_TRD_ORDER_TABLE where VG_13 = 0) MASTER_ORDER_AGGREGATION_FI       on        STAGING_ORDER_AGGREGATION_FI.ORD_NUM = MASTER_ORDER_AGGREGATION_FI.master_ord_num                    IF OBJECT_ID('tempdb..##secondary_OA_LL_check', 'U') IS NOT NULL DROP TABLE ##secondary_OA_LL_check       select *       into ##secondary_OA_LL_check       from         (select ORD_NUM,MERGE_EXCEPTION from Vista_STAGING.dbo.VG_13_ORDER_AGGREGATION_LL_TABLE where MERGE_EXCEPTION = 1) STAGING_ORDER_AGGREGATION_LL       INNER JOIN        (select ORD_NUM as master_ord_num,VG_13 from VISTA_REPORTING.dbo.MASTER_TRD_ORDER_TABLE where VG_13 = 0) MASTER_ORDER_AGGREGATION_LL       on        STAGING_ORDER_AGGREGATION_LL.ORD_NUM = MASTER_ORDER_AGGREGATION_LL.master_ord_num                   IF OBJECT_ID('tempdb..##secondary_OA_DMG_check', 'U') IS NOT NULL DROP TABLE ##secondary_OA_DMG_check       select *       into ##secondary_OA_DMG_check       from         (select ORD_NUM,MERGE_EXCEPTION from Vista_STAGING.dbo.VG_13_ORDER_AGGREGATION_DMG_TABLE where MERGE_EXCEPTION = 1) STAGING_ORDER_AGGREGATION_DMG       INNER JOIN        (select [ORDER] as master_ord_num,EXCEPTION_FLAG from VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_13_ORDER_AGGREGATION_DMG_TABLE where EXCEPTION_FLAG = 0) MASTER_ORDER_AGGREGATION_DMG       on        STAGING_ORDER_AGGREGATION_DMG.ORD_NUM = MASTER_ORDER_AGGREGATION_DMG.master_ord_num             --Below is an additional check for Quote Exception so we don't miss to show any processed data within dealers review tables in the frontend                         IF OBJECT_ID('tempdb..##secondary_QE_EQ_check', 'U') IS NOT NULL DROP TABLE ##secondary_QE_EQ_check       select *       into ##secondary_QE_EQ_check       from         (select MULTI_FUND_ID,QUOTE_EXCEPTION from Vista_STAGING.dbo.VG_01_QUOTE_EXCEPTION_EQ_TABLE where QUOTE_EXCEPTION = 1) STAGING_QUOTE_EXCEPTION_EQ       INNER JOIN        (select MULTI_FUND_ID as master_ord_num,VG_01 from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE where VG_01 = 0) MASTER_QUOTE_EXCEPTION_EQ       on        STAGING_QUOTE_EXCEPTION_EQ.MULTI_FUND_ID = MASTER_QUOTE_EXCEPTION_EQ.master_ord_num                   IF OBJECT_ID('tempdb..##secondary_QE_FI_check', 'U') IS NOT NULL DROP TABLE ##secondary_QE_FI_check       select *       into ##secondary_QE_FI_check       from         (select MULTI_FUND_ID,QUOTE_EXCEPTION from Vista_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI_TABLE where QUOTE_EXCEPTION = 1) STAGING_QUOTE_EXCEPTION_FI       INNER JOIN        (select MULTI_FUND_ID as master_ord_num,VG_01 from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE where VG_01 = 0) MASTER_QUOTE_EXCEPTION_FI       on        STAGING_QUOTE_EXCEPTION_FI.MULTI_FUND_ID = MASTER_QUOTE_EXCEPTION_FI.master_ord_num                   IF OBJECT_ID('tempdb..##secondary_QE_LL_check', 'U') IS NOT NULL DROP TABLE ##secondary_QE_LL_check       select *       into ##secondary_QE_LL_check       from         (select MULTI_FUND_ID,QUOTE_EXCEPTION from Vista_STAGING.dbo.VG_01_QUOTE_EXCEPTION_LL_TABLE where QUOTE_EXCEPTION = 1) STAGING_QUOTE_EXCEPTION_LL       INNER JOIN        (select MULTI_FUND_ID as master_ord_num,VG_01 from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE where VG_01 = 0) MASTER_QUOTE_EXCEPTION_LL       on        STAGING_QUOTE_EXCEPTION_LL.MULTI_FUND_ID = MASTER_QUOTE_EXCEPTION_LL.master_ord_num                   IF OBJECT_ID('tempdb..##secondary_QE_DMG_check', 'U') IS NOT NULL DROP TABLE ##secondary_QE_DMG_check       select *       into ##secondary_QE_DMG_check       from         (select MULTI_FUND_ID,VG_01 from Vista_STAGING.dbo.VG_01_QUOTE_EXCEPTION_DMG_TABLE where VG_01 = 1) STAGING_QUOTE_EXCEPTION_DMG       INNER JOIN        (select MFID as master_ord_num from VISTA_REPORTING.dbo.MASTER_MFID_VG_01_QUOTE_EXCEPTION_DMG_TABLE where EXCEPTION_FLAG = 0) MASTER_QUOTE_EXCEPTION_DMG       on        STAGING_QUOTE_EXCEPTION_DMG.MULTI_FUND_ID = MASTER_QUOTE_EXCEPTION_DMG.master_ord_num                   IF OBJECT_ID('tempdb..##secondary_NOF_LL_check', 'U') IS NOT NULL DROP TABLE ##secondary_NOF_LL_check       select *       into ##secondary_NOF_LL_check       from         (select CLIENT_EXECUTION_NUM,NEW_ORDER_FLIPPING_EXCEPTION from Vista_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_LL_TABLE where NEW_ORDER_FLIPPING_EXCEPTION = 1) STAGING_NEW_ORDER_FLIPPING_LL       INNER JOIN        (select Client_Execution_ID as master_ord_num from VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE where VG_06 = 0) MASTER_NEW_ORDER_FLIPPING_LL       on        STAGING_NEW_ORDER_FLIPPING_LL.CLIENT_EXECUTION_NUM = MASTER_NEW_ORDER_FLIPPING_LL.master_ord_num       left JOIN       (select MAX(Touch_COunt) as touch,MULTI_FUND_ID,CLIENT_EXECUTION_NUM as Client_Id from VISTA_REPORTING.dbo.TRADES group by MULTI_FUND_ID,CLIENT_EXECUTION_NUM) tr       on       tr.Client_Id = STAGING_NEW_ORDER_FLIPPING_LL.CLIENT_EXECUTION_NUM                     IF OBJECT_ID('tempdb..##secondary_NOF_FI_check', 'U') IS NOT NULL DROP TABLE ##secondary_NOF_FI_check       select *       into ##secondary_NOF_FI_check       from         (select CLIENT_EXECUTION_NUM,NEW_ORDER_FLIPPING_EXCEPTION from Vista_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_FI_TABLE where NEW_ORDER_FLIPPING_EXCEPTION = 1) STAGING_NEW_ORDER_FLIPPING_FI       INNER JOIN        (select Client_Execution_ID as master_ord_num from VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE where VG_06 = 0) MASTER_NEW_ORDER_FLIPPING_FI       on        STAGING_NEW_ORDER_FLIPPING_FI.CLIENT_EXECUTION_NUM = MASTER_NEW_ORDER_FLIPPING_FI.master_ord_num       left JOIN       (select MAX(Touch_COunt) as touch,MULTI_FUND_ID,CLIENT_EXECUTION_NUM as Client_Id from VISTA_REPORTING.dbo.TRADES group by MULTI_FUND_ID,CLIENT_EXECUTION_NUM) tr       on       tr.Client_Id = STAGING_NEW_ORDER_FLIPPING_FI.CLIENT_EXECUTION_NUM                    IF OBJECT_ID('tempdb..##secondary_NWQ_EQ_check', 'U') IS NOT NULL DROP TABLE ##secondary_NWQ_EQ_check       select *       into ##secondary_NWQ_EQ_check       from         (select MULTI_FUND_ID,NON_WINNING_QUOTE_EXCEPTION from Vista_STAGING.dbo.VG_07_NON_WINNING_QUOTE_EQ_TABLE where NON_WINNING_QUOTE_EXCEPTION = 1) STAGING_NON_WINNING_QUOTE_EQ       INNER JOIN        (select MULTI_FUND_ID as master_ord_num from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE where VG_07 = 0) MASTER_NON_WINNING_QUOTE_EQ       on        STAGING_NON_WINNING_QUOTE_EQ.MULTI_FUND_ID = MASTER_NON_WINNING_QUOTE_EQ.master_ord_num                   IF OBJECT_ID('tempdb..##secondary_NWQ_FI_check', 'U') IS NOT NULL DROP TABLE ##secondary_NWQ_FI_check       select *       into ##secondary_NWQ_FI_check       from         (select MULTI_FUND_ID,NWQ_EXCEPTION from Vista_STAGING.dbo.VG_07_NON_WINNING_QUOTE_FI_TABLE where NWQ_EXCEPTION = 1) STAGING_NON_WINNING_QUOTE_FI       INNER JOIN        (select MULTI_FUND_ID as master_ord_num from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE where VG_07 = 0) MASTER_NON_WINNING_QUOTE_FI       on        STAGING_NON_WINNING_QUOTE_FI.MULTI_FUND_ID = MASTER_NON_WINNING_QUOTE_FI.master_ord_num                         IF OBJECT_ID('tempdb..##secondary_NWQ_LL_check', 'U') IS NOT NULL DROP TABLE ##secondary_NWQ_LL_check       select *       into ##secondary_NWQ_LL_check       from         (select MULTI_FUND_ID,NWQ_EXCEPTION from Vista_STAGING.dbo.VG_07_NON_WINNING_QUOTE_LL_TABLE where NWQ_EXCEPTION = 1) STAGING_NON_WINNING_QUOTE_LL       INNER JOIN        (select MULTI_FUND_ID as master_ord_num from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE where VG_07 = 0) MASTER_NON_WINNING_QUOTE_LL       on        STAGING_NON_WINNING_QUOTE_LL.MULTI_FUND_ID = MASTER_NON_WINNING_QUOTE_LL.master_ord_num                   IF OBJECT_ID('tempdb..##secondary_NWQ_DMG_check', 'U') IS NOT NULL DROP TABLE ##secondary_NWQ_DMG_check       select *       into ##secondary_NWQ_DMG_check       from         (select MULTI_FUND_ID,VG_07 from Vista_STAGING.dbo.VG_07_NON_WINNING_QUOTE_DMG_TABLE where VG_07 = 1) STAGING_NON_WINNING_QUOTE_DMG       INNER JOIN        (select MFID as master_ord_num from VISTA_REPORTING.dbo.MASTER_MFID_VG_07_NON_WINNING_QUOTE_DMG_TABLE where EXCEPTION_FLAG = 0) MASTER_NON_WINNING_QUOTE_DMG       on        STAGING_NON_WINNING_QUOTE_DMG.MULTI_FUND_ID = MASTER_NON_WINNING_QUOTE_DMG.master_ord_num                         IF OBJECT_ID('tempdb..##secondary_OI_LL_check', 'U') IS NOT NULL DROP TABLE ##secondary_OI_LL_check       select *       into ##secondary_OI_LL_check       from         (select CLIENT_EXECUTION_NUM,ORDER_INFLATION_EXCEPTION from Vista_STAGING.dbo.VG_08_ORDER_INFLATION_LL_TABLE where ORDER_INFLATION_EXCEPTION = 1) STAGING_ORDER_INFLATION_EXCEPTION_LL       INNER JOIN        (select Client_Execution_ID as master_ord_num from VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE where VG_08 = 0) MASTER_ORDER_INFLATION_EXCEPTION_LL       on        STAGING_ORDER_INFLATION_EXCEPTION_LL.CLIENT_EXECUTION_NUM = MASTER_ORDER_INFLATION_EXCEPTION_LL.master_ord_num       left JOIN       (select MAX(Touch_COunt) as touch,MULTI_FUND_ID,CLIENT_EXECUTION_NUM as Client_Id from VISTA_REPORTING.dbo.TRADES group by MULTI_FUND_ID,CLIENT_EXECUTION_NUM) tr       on       tr.Client_Id = STAGING_ORDER_INFLATION_EXCEPTION_LL.CLIENT_EXECUTION_NUM                    IF OBJECT_ID('tempdb..##secondary_OI_FI_check', 'U') IS NOT NULL DROP TABLE ##secondary_OI_FI_check       select *       into ##secondary_OI_FI_check       from         (select CLIENT_EXECUTION_NUM,ORDER_INFLATION_EXCEPTION from Vista_STAGING.dbo.VG_08_ORDER_INFLATION_FI_TABLE where ORDER_INFLATION_EXCEPTION = 1) STAGING_ORDER_INFLATION_EXCEPTION_FI       INNER JOIN        (select Client_Execution_ID as master_ord_num from VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE where VG_08 = 0) MASTER_ORDER_INFLATION_EXCEPTION_FI       on        STAGING_ORDER_INFLATION_EXCEPTION_FI.CLIENT_EXECUTION_NUM = MASTER_ORDER_INFLATION_EXCEPTION_FI.master_ord_num       left JOIN       (select MAX(Touch_COunt) as touch,MULTI_FUND_ID,CLIENT_EXECUTION_NUM as Client_Id from VISTA_REPORTING.dbo.TRADES group by MULTI_FUND_ID,CLIENT_EXECUTION_NUM) tr       on       tr.Client_Id = STAGING_ORDER_INFLATION_EXCEPTION_FI.CLIENT_EXECUTION_NUM              IF OBJECT_ID('tempdb..##secondary_TE_EQ_check', 'U') IS NOT NULL DROP TABLE ##secondary_TE_EQ_check       select *       into ##secondary_TE_EQ_check       from         (select ORD_NUM, Timely_Execution_Exception,CREATETIME from Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_EQ_TABLE where Timely_Execution_Exception > 0) STAGING_TIMELY_EXECUTION_EQ       INNER JOIN        (select ORD_NUM as master_ord_num,VG_09_POLICY_CREATETIME from VISTA_REPORTING.dbo.MASTER_PM_ORDER where (VG_09_POLICY = 0 AND VG_09_5_DAY = 0 AND VG_09_10_DAY = 0 AND VG_09_20_DAY = 0 and VG_09_40_DAY = 0 and VG_09_80_DAY = 0 and VG_09_160_DAY = 0 AND       Timespan is NULL)) MASTER_TIMELY_EXECUTION_EQ       on        STAGING_TIMELY_EXECUTION_EQ.ORD_NUM = MASTER_TIMELY_EXECUTION_EQ.master_ord_num        AND STAGING_TIMELY_EXECUTION_EQ.CREATETIME = MASTER_TIMELY_EXECUTION_EQ.VG_09_POLICY_CREATETIME                   IF OBJECT_ID('tempdb..##secondary_TE_FI_check', 'U') IS NOT NULL DROP TABLE ##secondary_TE_FI_check       select  *       into ##secondary_TE_FI_check       from         (select ORD_NUM, Timely_Execution_Exception,CREATETIME from Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE where Timely_Execution_Exception > 0) STAGING_TIMELY_EXECUTION_FI       INNER JOIN        (select ORD_NUM as master_ord_num,VG_09_POLICY_CREATETIME from VISTA_REPORTING.dbo.MASTER_PM_ORDER where (VG_09_POLICY = 0 AND VG_09_5_DAY = 0 AND VG_09_10_DAY = 0 AND VG_09_20_DAY = 0 and VG_09_40_DAY = 0 and VG_09_80_DAY = 0 and VG_09_160_DAY = 0 AND       Timespan is NULL)) MASTER_TIMELY_EXECUTION_FI       on        STAGING_TIMELY_EXECUTION_FI.ORD_NUM = MASTER_TIMELY_EXECUTION_FI.master_ord_num        AND STAGING_TIMELY_EXECUTION_FI.CREATETIME = MASTER_TIMELY_EXECUTION_FI.VG_09_POLICY_CREATETIME             IF OBJECT_ID('tempdb..##secondary_TE_LL_check', 'U') IS NOT NULL DROP TABLE ##secondary_TE_LL_check       select  *       into ##secondary_TE_LL_check       from         (select ORD_NUM, Timely_Execution_Exception,CREATETIME from Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_LL_TABLE where Timely_Execution_Exception > 0) STAGING_TIMELY_EXECUTION_LL       INNER JOIN        (select ORD_NUM as master_ord_num,VG_09_POLICY_CREATETIME from VISTA_REPORTING.dbo.MASTER_PM_ORDER where (VG_09_POLICY = 0 AND VG_09_5_DAY = 0 AND VG_09_10_DAY = 0 AND VG_09_20_DAY = 0 and VG_09_40_DAY = 0 and VG_09_80_DAY = 0 and VG_09_160_DAY = 0 AND       Timespan is NULL)) MASTER_TIMELY_EXECUTION_LL       on        STAGING_TIMELY_EXECUTION_LL.ORD_NUM = MASTER_TIMELY_EXECUTION_LL.master_ord_num        AND STAGING_TIMELY_EXECUTION_LL.CREATETIME = MASTER_TIMELY_EXECUTION_LL.VG_09_POLICY_CREATETIME             IF OBJECT_ID('tempdb..##secondary_TE_DMG_check', 'U') IS NOT NULL DROP TABLE ##secondary_TE_DMG_check       select  *       into ##secondary_TE_DMG_check       from         (select ORD_NUM, VG_09,CREATETIME from Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_DMG_TABLE where VG_09 > 0) STAGING_TIMELY_EXECUTION_DMG       INNER JOIN        (select ORD_NUM as master_ord_num,VG_09_POLICY_CREATETIME from VISTA_REPORTING.dbo.MASTER_PM_ORDER where (VG_09_POLICY = 0 AND VG_09_5_DAY = 0 AND VG_09_10_DAY = 0 AND VG_09_20_DAY = 0 and VG_09_40_DAY = 0 and VG_09_80_DAY = 0 and VG_09_160_DAY = 0 AND       Timespan is NULL)) MASTER_TIMELY_EXECUTION_DMG       on        STAGING_TIMELY_EXECUTION_DMG.ORD_NUM = MASTER_TIMELY_EXECUTION_DMG.master_ord_num        AND STAGING_TIMELY_EXECUTION_DMG.CREATETIME = MASTER_TIMELY_EXECUTION_DMG.VG_09_POLICY_CREATETIME                   IF OBJECT_ID('tempdb..##secondary_NCO_EQ_check', 'U') IS NOT NULL DROP TABLE ##secondary_NCO_EQ_check       select *       into ##secondary_NCO_EQ_check       from         (select MULTI_FUND_ID,NAV_CUT_OFF_EXCEPTION from Vista_STAGING.dbo.VG_10_NAV_CUT_OFF_EQ_TABLE where NAV_CUT_OFF_EXCEPTION = 1) STAGING_NAV_CUT_OFF_EQ       INNER JOIN        (select MULTI_FUND_ID as master_ord_num from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE where VG_10_NAV = 0) MASTER_NAV_CUT_OFF_EQ       on        STAGING_NAV_CUT_OFF_EQ.MULTI_FUND_ID = MASTER_NAV_CUT_OFF_EQ.master_ord_num                   IF OBJECT_ID('tempdb..##secondary_TR_EQ_check', 'U') IS NOT NULL DROP TABLE ##secondary_TR_EQ_check       select *       into ##secondary_TR_EQ_check       from         (select MULTI_FUND_ID,Timely_Recording_Flag from Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_EQ_TABLE where Timely_Recording_Flag = 1) STAGING_TIMELY_RECORDING_EQ       INNER JOIN        (select MULTI_FUND_ID as master_ord_num from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE where VG_10 = 0) MASTER_TIMELY_RECORDING_EQ       on        STAGING_TIMELY_RECORDING_EQ.MULTI_FUND_ID = MASTER_TIMELY_RECORDING_EQ.master_ord_num             IF OBJECT_ID('tempdb..##secondary_TR_FI_check', 'U') IS NOT NULL DROP TABLE ##secondary_TR_FI_check       select *       into ##secondary_TR_FI_check       from         (select MULTI_FUND_ID,Timely_Recording_Exception from Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_FI_TABLE where Timely_Recording_Exception = 1) STAGING_TIMELY_RECORDING_FI       INNER JOIN        (select MULTI_FUND_ID as master_ord_num from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE where VG_10 = 0) MASTER_TIMELY_RECORDING_FI       on        STAGING_TIMELY_RECORDING_FI.MULTI_FUND_ID = MASTER_TIMELY_RECORDING_FI.master_ord_num                   IF OBJECT_ID('tempdb..##secondary_TR_LL_check', 'U') IS NOT NULL DROP TABLE ##secondary_TR_LL_check       select *       into ##secondary_TR_LL_check       from         (select MULTI_FUND_ID,Timely_Recording_Exception from Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_LL_TABLE where Timely_Recording_Exception = 1) STAGING_TIMELY_RECORDING_LL       INNER JOIN        (select MULTI_FUND_ID as master_ord_num from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE where VG_10 = 0) MASTER_TIMELY_RECORDING_LL       on        STAGING_TIMELY_RECORDING_LL.MULTI_FUND_ID = MASTER_TIMELY_RECORDING_LL.master_ord_num                   IF OBJECT_ID('tempdb..##secondary_TR_DMG_check', 'U') IS NOT NULL DROP TABLE ##secondary_TR_DMG_check       select *       into ##secondary_TR_DMG_check       from         (select MULTI_FUND_ID,VG_10 from Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_DMG_TABLE where VG_10 = 1) STAGING_TIMELY_RECORDING_DMG       INNER JOIN        (select MFID as master_ord_num from VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_DMG_TABLE where EXCEPTION_FLAG = 0) MASTER_TIMELY_RECORDING_DMG       on        STAGING_TIMELY_RECORDING_DMG.MULTI_FUND_ID = MASTER_TIMELY_RECORDING_DMG.master_ord_num                    IF OBJECT_ID('tempdb..##secondary_TRL_EQ_check', 'U') IS NOT NULL DROP TABLE ##secondary_TRL_EQ_check       select *       into ##secondary_TRL_EQ_check       from         (select ORD_NUM,Timely_Release_Exception from Vista_STAGING.dbo.VG_11_TIMELY_RELEASE_EQ_TABLE where Timely_Release_Exception = 1) STAGING_TIMELY_RELEASE_EQ       INNER JOIN        (select OrD_Num as master_ord_num from VISTA_REPORTING.dbo.MASTER_PM_ORDER where VG_11 = 0) MASTER_TIMELY_RELEASE_EQ       on        STAGING_TIMELY_RELEASE_EQ.ORD_NUM = MASTER_TIMELY_RELEASE_EQ.master_ord_num                   IF OBJECT_ID('tempdb..##secondary_AF_EQ_check', 'U') IS NOT NULL DROP TABLE ##secondary_AF_EQ_check       select *       into ##secondary_AF_EQ_check       from         (select Multi_Fund_Id,AMENDMENT_FLAG from Vista_STAGING.dbo.VG_15_AMENDMENT_FLAG_EQ_TABLE where AMENDMENT_FLAG = 1) STAGING_AMENDMENT_FLAG_EQ       LEFT JOIN        (select MULTI_FUND_ID as master_ord_num from VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE ) MASTER_AMENDMENT_FLAG_EQ       on        STAGING_AMENDMENT_FLAG_EQ.MULTI_FUND_ID = MASTER_AMENDMENT_FLAG_EQ.master_ord_num       WHERE MASTER_AMENDMENT_FLAG_EQ.master_ord_num is null                   IF OBJECT_ID('tempdb..##secondary_AF_FI_check', 'U') IS NOT NULL DROP TABLE ##secondary_AF_FI_check       select *       into ##secondary_AF_FI_check       from         (select Multi_Fund_Id,AMENDMENT_FLAG from Vista_STAGING.dbo.VG_15_AMENDMENT_FLAG_FI_TABLE where AMENDMENT_FLAG = 1) STAGING_AMENDMENT_FLAG_FI       LEFT JOIN        (select MULTI_FUND_ID as master_ord_num from VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE ) MASTER_AMENDMENT_FLAG_FI       on        STAGING_AMENDMENT_FLAG_FI.MULTI_FUND_ID = MASTER_AMENDMENT_FLAG_FI.master_ord_num       WHERE MASTER_AMENDMENT_FLAG_FI.master_ord_num is null                   IF OBJECT_ID('tempdb..##secondary_AF_LL_check', 'U') IS NOT NULL DROP TABLE ##secondary_AF_LL_check       select *       into ##secondary_AF_LL_check       from         (select Multi_Fund_Id,AMENDMENT_FLAG from Vista_STAGING.dbo.VG_15_AMENDMENT_FLAG_LL_TABLE where AMENDMENT_FLAG = 1) STAGING_AMENDMENT_FLAG_LL       LEFT JOIN        (select MULTI_FUND_ID as master_ord_num from VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE ) MASTER_AMENDMENT_FLAG_LL       on        STAGING_AMENDMENT_FLAG_LL.MULTI_FUND_ID = MASTER_AMENDMENT_FLAG_LL.master_ord_num       WHERE MASTER_AMENDMENT_FLAG_LL.master_ord_num is null                   IF OBJECT_ID('tempdb..##secondary_AF_DMG_check', 'U') IS NOT NULL DROP TABLE ##secondary_AF_DMG_check       select *       into ##secondary_AF_DMG_check       from         (select Multi_Fund_Id,AMENDMENT_FLAG from Vista_STAGING.dbo.VG_15_AMENDMENT_FLAG_DMG_TABLE where AMENDMENT_FLAG = 1) STAGING_AMENDMENT_FLAG_DMG       LEFT JOIN        (select MFID as master_ord_num from VISTA_REPORTING.dbo.MASTER_VG_15_AMENDMENT_FLAG_DMG_TABLE) MASTER_AMENDMENT_FLAG_DMG       on        STAGING_AMENDMENT_FLAG_DMG.MULTI_FUND_ID = MASTER_AMENDMENT_FLAG_DMG.master_ord_num       WHERE MASTER_AMENDMENT_FLAG_DMG.master_ord_num is null                    IF OBJECT_ID('tempdb..##secondary_CD_DMG_check', 'U') IS NOT NULL DROP TABLE ##secondary_CD_DMG_check       select *       into ##secondary_CD_DMG_check       from         (select ORD_NUM,VG_17 from Vista_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE where VG_17 = 1) STAGING_COUNTERPARTY_DIRECTION_DMG       INNER JOIN        (select [ORDER] as master_ord_num from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE where EXCEPTION_FLAG = 0) MASTER_COUNTERPARTY_DIRECTION_DMG       on        STAGING_COUNTERPARTY_DIRECTION_DMG.ORD_NUM = MASTER_COUNTERPARTY_DIRECTION_DMG.master_ord_num                   IF OBJECT_ID('tempdb..##secondary_IT_EQ_check', 'U') IS NOT NULL DROP TABLE ##secondary_IT_EQ_check       select *       into ##secondary_IT_EQ_check       from         (select MULTI_FUND_ID,IT_FLAG from Vista_STAGING.dbo.VG_25_INTERFUND_TRANSFER_EQ_TABLE where IT_FLAG = 1) STAGING_INTERFUND_TRANSFER_EQ       INNER JOIN        (select MULTI_FUND_ID as master_ord_num from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE where VG_25 = 0) MASTER_INTERFUND_TRANSFER_EQ       on        STAGING_INTERFUND_TRANSFER_EQ.MULTI_FUND_ID = MASTER_INTERFUND_TRANSFER_EQ.master_ord_num                   IF OBJECT_ID('tempdb..##secondary_IT_FI_check', 'U') IS NOT NULL DROP TABLE ##secondary_IT_FI_check       select *       into ##secondary_IT_FI_check       from         (select MULTI_FUND_ID,IT_FLAG from Vista_STAGING.dbo.VG_25_INTERFUND_TRANSFER_FI_TABLE where IT_FLAG = 1) STAGING_INTERFUND_TRANSFER_FI       INNER JOIN        (select MULTI_FUND_ID as master_ord_num from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE where VG_25 = 0) MASTER_INTERFUND_TRANSFER_FI       on        STAGING_INTERFUND_TRANSFER_FI.MULTI_FUND_ID = MASTER_INTERFUND_TRANSFER_FI.master_ord_num                   IF OBJECT_ID('tempdb..##secondary_IT_LL_check', 'U') IS NOT NULL DROP TABLE ##secondary_IT_LL_check       select *       into ##secondary_IT_LL_check       from         (select MULTI_FUND_ID,IT_FLAG from Vista_STAGING.dbo.VG_25_INTERFUND_TRANSFER_LL_TABLE where IT_FLAG = 1) STAGING_INTERFUND_TRANSFER_LL       INNER JOIN        (select MULTI_FUND_ID as master_ord_num from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE where VG_25 = 0) MASTER_INTERFUND_TRANSFER_LL       on        STAGING_INTERFUND_TRANSFER_LL.MULTI_FUND_ID = MASTER_INTERFUND_TRANSFER_LL.master_ord_num                   IF OBJECT_ID('tempdb..##secondary_IT_DMG_check', 'U') IS NOT NULL DROP TABLE ##secondary_IT_DMG_check       select *       into ##secondary_IT_DMG_check       from         (select MULTI_FUND_ID,IT_FLAG from Vista_STAGING.dbo.VG_25_INTERFUND_TRANSFER_DMG_TABLE where IT_FLAG = 1) STAGING_INTERFUND_TRANSFER_DMG       INNER JOIN        (select MULTI_FUND_ID as master_ord_num from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE where VG_25 = 0) MASTER_INTERFUND_TRANSFER_DMG       on        STAGING_INTERFUND_TRANSFER_DMG.MULTI_FUND_ID = MASTER_INTERFUND_TRANSFER_DMG.master_ord_num                   IF (select count(1) from ##secondary_IS_check )> 0 OR (select count(1) from ##secondary_HL_check)>0 OR (select count(1) from  ##secondary_OP_EQ_check)>0 OR (select count(1) from ##secondary_OP_FI_check)>0 OR (select count(1) from ##secondary_OP_LL_check)      >0 OR (select count(1) from ##secondary_OP_DMG_check)>0       OR (select count(1) from ##secondary_OA_EQ_check) > 0 OR (select count(1) from ##secondary_OA_FI_check) > 0 OR (select count(1) from ##secondary_OA_LL_check) > 0 OR (select count(1) from ##secondary_OA_DMG_check) > 0 OR (select count(1) from ##secondary_QE_EQ_check) > 0 OR (select count(1) from ##secondary_QE_FI_check) > 0        OR (select count(1) from ##secondary_QE_LL_check) > 0 OR (select count(1) from ##secondary_QE_DMG_check) > 0 OR (select count(1) from ##secondary_NOF_LL_check) > 0 OR (select count(1) from ##secondary_NOF_FI_check) > 0 OR (select count(1) from ##secondary_NWQ_EQ_check) > 0 OR (select count(1) from ##secondary_NWQ_FI_check) > 0       OR (select count(1) from ##secondary_NWQ_LL_check) > 0 OR (select count(1) from ##secondary_NWQ_DMG_check) > 0 OR (select count(1) from ##secondary_OI_LL_check) > 0 OR (select count(1) from ##secondary_OI_FI_check) > 0 OR (select count(1) from ##secondary_TE_EQ_check) > 0 OR (select count(1) from ##secondary_TE_FI_check) > 0       OR (select count(1) from ##secondary_TE_LL_check) > 0 OR (select count(1) from ##secondary_TE_DMG_check) > 0 OR (select count(1) from ##secondary_NCO_EQ_check) > 0 OR (select count(1) from ##secondary_TR_EQ_check) > 0 OR (select count(1) from ##secondary_TR_FI_check) > 0 OR (select count(1) from ##secondary_TR_LL_check) > 0       OR (select count(1) from ##secondary_TR_DMG_check) > 0 OR (select count(1) from ##secondary_TRL_EQ_check) > 0 OR (select count(1) from ##secondary_AF_EQ_check) > 0 OR (select count(1) from ##secondary_AF_FI_check) > 0 OR (select count(1) from ##secondary_AF_LL_check) > 0 OR (select count(1) from ##secondary_AF_DMG_check) > 0       OR (select count(1) from ##secondary_CD_DMG_check) > 0 OR (select count(1) from ##secondary_IT_EQ_check) > 0 OR (select count(1) from ##secondary_IT_FI_check) > 0 OR (select count(1) from ##secondary_IT_LL_check) > 0 OR (select count(1) from ##secondary_IT_DMG_check) > 0             EXEC Vista_STAGING.dbo.ALADDIN_ONE_DAY_PROCESSING_REFRESH             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL       INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(       'ALADDIN_ONE_DAY_PROCESSING_RESOLVER_SP', --TABLE_NAME       @START_TIME, --START_TIME       GETDATE(), --END_TIME       DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS       CAST(GETDATE() as date)) --COMPLETION_DATE            END   --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: CASH_BANK_RATES_REFRESH  CreateDate: 2025-01-07 09:12:10.913  ModifyDate: 2025-06-26 16:41:18.463  --- DEFINITION START ---  -- =============================================    -- Author:  <da Costa, David>    -- Create date: <11/06/2019>    -- Description: <Stored procedure for transformation of staging data    --     into final BANK RATES table for CASH desk.>    -- =============================================        CREATE   PROCEDURE [dbo].[CASH_BANK_RATES_REFRESH]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        IF OBJECT_ID('VISTA_REPORTING.dbo.CASH_BANK_RATES', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.CASH_BANK_RATES        SELECT      BANK_CODE,     RATE,     SPECIAL_INSTRUCTION,     CAST(DATE_TIME_ADDED AS DATETIME2(3)) AS DATE_TIME_ADDED,     ROUND_NO,     ACTION_BY,     TRANSACTION_NUMBER,     CAST(PULL_DATE AS DATETIME2(3)) AS PULL_DATE,     CAST(API_REQUESTED_DATE AS DATETIME2(3)) AS API_REQUESTED_DATE    INTO VISTA_REPORTING.dbo.CASH_BANK_RATES    FROM VISTA_STAGING.dbo.CASH_BANK_RATES        END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: CASH_MAPPED_BANKS_REFRESH  CreateDate: 2025-01-07 09:12:10.920  ModifyDate: 2025-06-26 16:41:43.830  --- DEFINITION START ---  -- =============================================    -- Author:  <David da Costa>    -- Create date: <13/08/2020>    -- Description: <CONVERTS STAGING MAPPED BANKS TABLE TO BE IN CORRECT FORMAT FOR MASTER TABLES>    -- =============================================    CREATE   PROCEDURE .[dbo].[CASH_MAPPED_BANKS_REFRESH]        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        IF OBJECT_ID('VISTA_REPORTING.DBO.CASH_MAPPED_BANKS', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.DBO.CASH_MAPPED_BANKS    SELECT *     INTO VISTA_REPORTING.dbo.CASH_MAPPED_BANKS    FROM VISTA_STAGING.dbo.CASH_MAPPED_BANKS        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: CASH_ORDERS_REFRESH  CreateDate: 2025-01-07 09:12:10.930  ModifyDate: 2025-06-26 16:42:06.770  --- DEFINITION START ---  -- =============================================    -- Author:  <da Costa, David>    -- Create date: <11/06/2019>    -- Description: <Stored procedure for transformation of staging data    --     into final ORDERS table for CASH desk.>    -- =============================================        CREATE   PROCEDURE [dbo].[CASH_ORDERS_REFRESH]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        IF OBJECT_ID('VISTA_REPORTING.dbo.CASH_ORDERS', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.CASH_ORDERS    SELECT DISTINCT     CO.ACCEPTED_BY,     CAST(CO.ACCEPTED_DATETIME AS DATETIME2(3)) AS ACCEPTED_DATETIME,     CO.ACKNOWLEDGED_DEALER_NAME,     CO.AMOUNT1,     CO.AMOUNT2,     CO.AMOUNT3,     CO.AMOUNT4,     CO.ASSET_ID,     CO.BASE_FUND_CODE,     CO.BUSINESS_GROUP,     CO.CANCELLED_BY,     CO.CLIENT_FUND_OR_POOL_CODE,     CO.CUSTOM_INSTRUCTION,     CAST(CO.DATE1 AS DATETIME2(3)) AS DATE1,     CAST(CO.DATE2 AS DATETIME2(3)) AS DATE2,     CAST(CO.DATE3 AS DATETIME2(3)) AS DATE3,     CAST(CO.DATE4 AS DATETIME2(3)) AS DATE4,     CO.DELETED_REASON,     CO.DELETED_REASON_NARRATION,     CO.FREE_TEXT1,     CO.FREE_TEXT2,     CO.FREE_TEXT3,     CO.FREE_TEXT4,     CAST(CO.FREEZE_DATETIME AS DATETIME2(3)) AS FREEZE_DATETIME,     CO.FREEZE_REASON_NARRATION,     CO.FREEZEREASON,     CO.HOLDOVER_DEALER_NAME,     CO.HOLDOVER_REASON,     CO.HOLDOVER_REASON_NARRATION,     CO.INSTRUCTED_AMOUNT,     CO.INSTRUCTED_AMOUNT_GBP,     CO.INSTRUCTED_BY,     CO.INSTRUCTED_CURRENCY,     CAST(CO.INSTRUCTION_CANCEL_DATE_TIME AS DATETIME2(3)) AS INSTRUCTION_CANCEL_DATE_TIME,     CO.INSTRUCTION_CANCEL_REASON,     CO.INSTRUCTION_CANCEL_REASON_NARRATION,     CAST(CO.INSTRUCTION_HOLDOVER_DATE_TIME AS DATETIME2(3)) AS INSTRUCTION_HOLDOVER_DATE_TIME,     CAST(CO.INSTRUCTION_INITIATION_DATE_TIME AS DATETIME2(3)) AS INSTRUCTION_INITIATION_DATE_TIME,     CAST(CO.INSTRUCTION_KNOCKEDBACK_DATETIME AS DATETIME2(3)) AS INSTRUCTION_KNOCKEDBACK_DATETIME,     CAST(CO.INSTRUCTION_RECEIVED_DATE AS DATETIME2(3)) AS INSTRUCTION_RECEIVED_DATE,     CAST(CO.INSTRUCTION_RECEIVED_TIME AS DATETIME2(3)) AS INSTRUCTION_RECEIVED_TIME,     CO.INSTRUCTION_SOURCE,     CO.INSTRUCTION_STATUS,     CO.INSTRUCTION_TYPE,     CAST(CO.MATURITY_DATE AS DATETIME2(3)) AS MATURITY_DATE,     CAST(CO.OMQ_DATE_TIME AS DATETIME2(3)) AS OMQ_DATE_TIME,     CO.ORDER_ID,     CO.ORDER_TERM,     CO.PRODUCT,     CO.PRODUCT_GROUP_NAME,     CO.PRODUCT_NAME,     CO.PRODUCT_TYPE,     CAST(CO.RELEASE_DATETIME AS DATETIME2(3)) AS RELEASE_DATETIME,     CO.RELEASE_REASON,     CO.RELEASE_REASON_NARRATION,     CO.SEQUENCE_EXCEPTION_NARRATION,     CO.SEQUENCE_EXCEPTION_REASON,     CO.TIMELY_ACKNOWLEDGED_THRESHOLD,     CO.TIMELY_ACKNOWLEDGEMENT_EXCEPTION_REASON,     CO.TIMELY_ACKNOWLEDGEMENT_NARRATION,     CAST(CO.TRADE_DATE AS DATETIME2(3)) AS TRADE_DATE,     CAST(CO.VALUE_DATE AS DATETIME2(3)) AS VALUE_DATE,     CO.IS_EXTERNAL_INSTRUCTION,     CO.IS_FUTURE_DATED_INSTRUCTION,     CO.IS_OFFSET_INSTRUCTION,     CAST(CO.PULL_DATE AS DATETIME2(3)) AS PULL_DATE,     CAST(CO.API_REQUESTED_DATE AS DATETIME2(3)) AS API_REQUESTED_DATE,     CSD.LOOKUP_NAME AS INSTRUCTION_STATUS_DECODE,     CT.TRANSACTION_TYPE    INTO VISTA_REPORTING.dbo.CASH_ORDERS    FROM VISTA_STAGING.dbo.CASH_ORDERS CO    LEFT JOIN VISTA_STAGING.DBO.REF_CASH_STATUS_DECODE CSD ON CO.INSTRUCTION_STATUS = CSD.LOOKUPID                     AND CAST(CO.PULL_DATE AS DATE) BETWEEN CAST(CSD.DATE_FROM AS DATE) AND CAST(CSD.DATE_TO AS DATE)    LEFT JOIN VISTA_STAGING.dbo.CASH_TRADES ct ON ct.ORDER_ID=CO.ORDER_ID     WHERE ISNULL(ct.TRANSACTION_TYPE, '') != 'REPAY'            END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: CASH_REFERENCE_RATES_REFRESH  CreateDate: 2025-01-07 09:12:10.940  ModifyDate: 2025-06-26 16:42:52.447  --- DEFINITION START ---  -- =============================================    -- Author:  <da Costa, David>    -- CREATE date: <11/06/2019>    -- Description: <Stored procedure for transformation of staging data    --     into final REFERENCE RATES table for CASH desk.>    -- =============================================        CREATE   PROCEDURE [dbo].[CASH_REFERENCE_RATES_REFRESH]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        IF OBJECT_ID('VISTA_REPORTING.dbo.CASH_REFERENCE_RATES', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.CASH_REFERENCE_RATES        SELECT      CURRENCY,     INDICATIVE_REF_RATE,     TRANSACTION_NUMBER,     CAST(PULL_DATE AS DATETIME2(3)) AS PULL_DATE,     CAST(API_REQUESTED_DATE  AS DATETIME2(3)) AS API_REQUESTED_DATE    INTO VISTA_REPORTING.dbo.CASH_REFERENCE_RATES    FROM VISTA_STAGING.dbo.CASH_REFERENCE_RATES    where INDICATIVE_REF_RATE is not null or INDICATIVE_REF_RATE <> 0        END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: CASH_TRADES_REFRESH  CreateDate: 2025-01-07 09:12:10.950  ModifyDate: 2025-06-26 16:44:12.203  --- DEFINITION START ---  -- =============================================    -- Author:  <LIZZIE REYNOLDS>    -- Create date: <11/06/2019>    -- Description: <DATA PROCESSING FOR STAGING CASH TRADES TABLE TO INCLUDE THE STATUS DECODE FROM REF_CASH_STATUS_DECODE TABLE>    -- =============================================    CREATE   PROCEDURE [dbo].[CASH_TRADES_REFRESH]         AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;            IF OBJECT_ID('VISTA_REPORTING.dbo.CASH_TRADES', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.CASH_TRADES    SELECT       CT.AMOUNT1,     CT.AMOUNT2,     CT.AMOUNT3,     CT.AMOUNT4,     CT.APPROVAL_REQUESTED_BY,     CAST(CT.APPROVAL_REQUESTED_TIME AS DATETIME2(3)) AS APPROVAL_REQUESTED_TIME,     CT.APPROVED_BY,     CAST(CT.APPROVED_TIME AS DATETIME2(3)) AS APPROVED_TIME,     CT.AVERAGE_RATE,     CT.BANK,     CT.BASE_FUND_CODE,     CT.BEST_EXECUTION_RR_EXCEPTION_REASON,     CT.BEST_EXECUTION_RR_NARRATION,     CT.BUSINESS_GROUP,     CAST(CT.CANCEL_DATE_TIME AS DATETIME2(3)) AS CANCEL_DATE_TIME,     CT.CANCEL_REASON,     CT.CANCEL_REASON_NARRATION,     CT.CLIENT_FUND_OR_POOL_CODE,     CAST(CT.CONFIRMED_DATETIME AS DATETIME2(3)) AS CONFIRMED_DATETIME,     CAST(CT.DATE1 AS DATETIME2(3)) AS DATE1,     CAST(CT.DATE2 AS DATETIME2(3)) AS DATE2,     CAST(CT.DATE3 AS DATETIME2(3)) AS DATE3,     CAST(CT.DATE4 AS DATETIME2(3)) AS DATE4,     CT.DEALER_LIMIT_BREACHED,     CT.DEALER_NAME,     CT.DEALT_AMOUNT,     CT.DEALT_AMOUNT_GBP,     CAST(CT.EXECUTED_DATETIME AS DATETIME2(3)) AS EXECUTED_DATETIME,     CT.EXECUTED_RATE,     CT.FLAG_Y_NBASEDON_TRANS_AMT,     CT.FREE_TEXT1,     CT.FREE_TEXT2,     CT.FREE_TEXT3,     CT.FREE_TEXT4,     CT.INSTRUCTION_COMPLETED_AMOUNT,     CT.LIMIT_GBP_MILLION,     CAST(CT.MATURITY_DATE AS DATETIME2(3)) AS MATURITY_DATE,     CT.NOOF_QUOTES,     CT.OLD_TRANSTYPE,     CT.ORDER_ID,     CT.PRODUCT,     CT.PRODUCT_GROUP_NAME,     CT.PRODUCT_NAME,     CT.PRODUCT_TYPE,     CAST(CT.PROPOSED_DATE_TIME AS DATETIME2(3)) AS PROPOSED_DATE_TIME,     CT.REUTERS_RATE,     CT.STATIC_BANK_COUNT,     CT.TA_KNOCKBACK_EXCEPTION_REASON,     CT.TA_KNOCKBACK_NARRATION,     CT.TA_NAME,     CT.TERM,     CT.TIMELY_EXECUTION_EXCEPTION_NARRATION,     CT.TIMELY_EXECUTION_EXCEPTION_REASON,     CT.TIMELY_RECORDING_EXCEPTION_NARRATION,     CT.TIMELY_RECORDING_EXCEPTION_REASON,     CT.TRADE_CURRENCY,     CAST(CT.TRADE_DATE AS DATETIME2(3)) AS TRADE_DATE,     CT.TRANSACTION_NUMBER,     CT.TRANSACTION_STATUS,     CT.TRANSACTION_TYPE,     CAST(CT.UPLOADED_DATE_TIME AS DATETIME2(3)) AS UPLOADED_DATE_TIME,     CAST(CT.VALUE_DATE AS DATETIME2(3)) AS VALUE_DATE,     CAST(CT.PULL_DATE AS DATETIME2(3)) AS PULL_DATE,     CAST(CT.API_REQUESTED_DATE AS DATETIME2(3)) AS API_REQUESTED_DATE,     CSD.LOOKUP_NAME AS TRANSACTION_STATUS_DECODE,     tdd.FULL_NAME AS DEALER_NAME_DECODE    INTO VISTA_REPORTING.DBO.CASH_TRADES    FROM VISTA_STAGING.dbo.CASH_TRADES CT    LEFT JOIN VISTA_STAGING.DBO.REF_CASH_STATUS_DECODE CSD ON CT.TRANSACTION_STATUS = CSD.LOOKUPID AND CAST(CT.PULL_DATE AS DATE) BETWEEN CAST(CSD.DATE_FROM AS DATE) AND CAST(CSD.DATE_TO AS DATE)    LEFT JOIN VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd ON tdd.[MG_USER_ID] = CT.[DEALER_NAME] and tdd.DEALING_DESK = 'CASH' AND CAST(CT.PULL_DATE AS DATE) BETWEEN CAST(tdd.DATE_FROM AS DATE) AND CAST(tdd.DATE_TO AS DATE)    WHERE CT.TRANSACTION_TYPE != 'REPAY'        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: COMMISSIONS_INCREASE_EQ  CreateDate: 2025-01-07 09:12:10.960  ModifyDate: 2025-06-26 16:43:50.487  --- DEFINITION START ---          CREATE   PROCEDURE [dbo].[COMMISSIONS_INCREASE_EQ]        AS BEGIN        IF OBJECT_ID('tempdb..#concat_table', 'U') IS NOT NULL DROP TABLE #concat_table    SELECT      ce.MULTI_FUND_ID,     STUFF((      SELECT DISTINCT ' | ' + Desk      FROM (SELECT DISTINCT MULTI_FUND_ID, PM_ORD, Desk          FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE) dc      WHERE (ce.MULTI_FUND_ID = dc.MULTI_FUND_ID)      FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS Desk,     STUFF((      SELECT DISTINCT ' | ' + PM_ORD      FROM (SELECT DISTINCT MULTI_FUND_ID, PM_ORD          FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE) dc      WHERE (ce.MULTI_FUND_ID = dc.MULTI_FUND_ID)       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS PM_ORD     --STUFF((     -- SELECT DISTINCT ' | ' + CONVERT(VARCHAR, ACTIVE_TIME)     -- FROM (SELECT DISTINCT MULTI_FUND_ID, ACTIVE_TIME      --    FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE) dc     -- WHERE (ce.MULTI_FUND_ID = dc.MULTI_FUND_ID)      -- FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')     -- ,1,2,'') AS ACTIVE_TIME,     --STUFF((     -- SELECT DISTINCT ' | ' + CONVERT(VARCHAR, AUTH_TIME)     -- FROM (SELECT DISTINCT MULTI_FUND_ID, AUTH_TIME      --    FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE) dc     -- WHERE (ce.MULTI_FUND_ID = dc.MULTI_FUND_ID)      -- FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')     -- ,1,2,'') AS AUTH_TIME    INTO #concat_table    FROM (SELECT DISTINCT MULTI_FUND_ID FROM VISTA_STAGING.dbo.VG_COMMISSION_EXCEPTION_EQ_TABLE) ce    GROUP BY ce.MULTI_FUND_ID                IF OBJECT_ID('VISTA_REPORTING.dbo.COMMISSIONS_INCREASE_EQ', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.COMMISSIONS_INCREASE_EQ    SELECT DISTINCT     ce.MULTI_FUND_ID,      cct.Desk,     mmf.SEC_DESC1 AS Security_Name,     mmf.SM_SEC_TYPE AS Sec_Type,     mmf.MARKET AS Market,     mmf.TRD_COUNTERPARTY AS [Broker],     ce.[Default_Rate] AS [Standard_Rate_bps],     ce.COMMISSION_RATE_FROM_CALCULATION AS [Actual_Rate_bps],     mmf.Dealer,     ISNULL(mmf.[Trade Date], '1900-01-01') AS TRADE_DATE,     CONVERT(DECIMAL(12,0),mmf.[Booked Amt]) AS [Shares],     mmf.Px AS [Price],     mmf.[Order] AS ORDER_ID,     mmf.[Dealer Comment] AS DEALER_COMMENTS,     mmf.DEALING_DESK,     mmf.[Asset_Type/Subtype],     mmf.PRIMARY_MARKET,     mmf.EXECUTION_TYPE_DECODE AS Execution_Type_Decode,     mmf.Purpose AS [Trade_Purpose],     mmf.MONTH_YEAR,     ISNULL(mmf.AUTH_TIME, '1900-01-01 00:00:00') AS AUTH_TIME,     ce.COMMISSION_EXCEPTION AS CI_EXCEPTION,     ISNULL(ce.CE_CREATE_TIME, '1900-01-01 00:00:00') AS CI_CREATETIME     ,mmf.Instruction     ,mmf.Purpose     ,cct.PM_ORD as PM_ORDER     ,mmf.PM as FM     --,mmf.AUTH_TIME     ,mmf.Side     ,mmf.Ccy     ,mmf.[Sett Ccy]     ,mmf.ISIN     ,mmf.CUSIP     ,mmf.SEDOL     ,mmf.SEC_DESC1     --,mmf.Dealer     ,mmf.Platform     ,mmf.Method     --,mmf.PRIMARY_MARKET     ,mmf.[Ord Amt]     ,mmf.[Ord Amt] - mmf.[Booked Amt] as [Remain Amt]     ,mmf.[Booked Amt]     ,mmf.Px     ,mmf.ACTIVE_TIME     --,DATEADD(MILLISECOND, - DATEPART(MILLISECOND, pla.ROUTE_DATETIME), pla.ROUTE_DATETIME) as [SEND_DATE] --This makes it duplicate out     --,mmf.MULTI_FUND_ID     ,mmf.[Trade Date]     ,mmf.[Exec Date]     ,mmf.[Entry Date]     ,mmf.[Dealer Comment]      ,mmf.[General Comment]     --TE TYPE is not relevant     ,mmf.Timespan     ,mmf.Fund     ,mmf.[Exec Date] as [First Execution]     ,datediff(minute, mmf.AUTH_TIME, [Exec Date]) as [First Execution Timespan Minutes]     ,mmf.INST_TYPE     ,mmf.[Average daily volume]     ,mmf.[Remain Amt as percent of daily volume]    INTO VISTA_REPORTING.dbo.COMMISSIONS_INCREASE_EQ    FROM      VISTA_STAGING.dbo.VG_COMMISSION_EXCEPTION_EQ_TABLE ce     left join VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE mmf on mmf.MULTI_FUND_ID=ce.MULTI_FUND_ID     left join #concat_table cct ON cct.MULTI_FUND_ID=ce.MULTI_FUND_ID     WHERE mmf.DEALING_DESK='Equity'             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'comm_inc_eq_idx1')           DROP INDEX comm_inc_eq_idx1      ON VISTA_REPORTING.dbo.COMMISSIONS_INCREASE_EQ          CREATE NONCLUSTERED INDEX comm_inc_eq_idx1     ON VISTA_REPORTING.dbo.COMMISSIONS_INCREASE_EQ      (TRADE_DATE)          IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'comm_inc_eq_idx2')           DROP INDEX comm_inc_eq_idx2      ON VISTA_REPORTING.dbo.COMMISSIONS_INCREASE_EQ          CREATE NONCLUSTERED INDEX comm_inc_eq_idx2     ON VISTA_REPORTING.dbo.COMMISSIONS_INCREASE_EQ      (CI_CREATETIME)                END         --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: CORP_EVENTS_REFRESH  CreateDate: 2025-01-07 09:12:10.970  ModifyDate: 2025-06-26 16:44:31.047  --- DEFINITION START ---  -- =============================================    -- Author:  <da Costa, David>    -- Create date: <20/10/2017>    -- Description:     -- <Table for VISTA to list reasons for exceptions    -- across all levels (MULTI_FUND, ORDER, TRADER and    -- PLACEMENT). Data is pulled in from tables that    -- have been aggregated by level>    -- =============================================        CREATE   PROCEDURE [dbo].[CORP_EVENTS_REFRESH]     -- Add the parameters for the stored procedure here     -- @Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;            --Insert statements for procedure here     --Drop temporary timely_exec table if it exists         IF OBJECT_ID('VISTA_REPORTING.dbo.CORP_EVENTS', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.CORP_EVENTS          SELECT  o.ORD_NUM,        o.TRAN_TYPE,       o.FACE,       o.PM,       o.PM_FULL_NAME,       o.DEALING_DESK,       t.FUND,       i2.CUSIP,       i2.SM_SEC_GROUP,       i2.SM_SEC_TYPE,        e.SEC_DESC1,        e.TITLE,        e.URL,       o.AUTH_TIME,        DATEDIFF(MINUTE, o.AUTH_TIME, e.PUBLISHED_DATE) as datediff,        e.PUBLISHED_DATE     INTO VISTA_REPORTING.dbo.CORP_EVENTS     FROM (      SELECT DISTINCT ORD_NUM, DEALING_DESK, CUSIP, AUTH_TIME, TRAN_TYPE, FACE, PM, PM_FULL_NAME      FROM VISTA_REPORTING.dbo.PM_ORDERS     ) as o     INNER JOIN VISTA_STAGING.dbo.CORP_EVENTS as e on o.CUSIP=e.MATCHED_CUSIP     --LEFT JOIN VISTA_REPORTING.dbo.INSTRUMENTS as i on o.CUSIP=i.CUSIP     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD=o.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM=oc.TRD_ORD     OUTER APPLY (SELECT TOP 1 i.* FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=coalesce(t.CUSIP, o.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(t.EXECUTION_TIME, o.AUTH_TIME)))         ORDER BY i.DATE DESC) as i2     WHERE (DATEDIFF(MINUTE, o.AUTH_TIME, e.PUBLISHED_DATE) BETWEEN 1 AND 7200)   -- = 60mins*24hrs*5days      and (       (CHARINDEX('disclosure', TITLE) > 0 or        CHARINDEX('filing', TITLE) > 0 or        CHARINDEX('profit', TITLE) > 0 or        CHARINDEX('loss', TITLE) > 0 or        CHARINDEX('revenue', TITLE) > 0 or        CHARINDEX('leadership', TITLE) > 0 or        CHARINDEX('fine', TITLE) > 0 or        CHARINDEX('penalty', TITLE) > 0 or        CHARINDEX('fraud', TITLE) > 0)      )     ORDER BY SEC_DESC1, ORD_NUM            END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: COUNT_TABLES_PROC  CreateDate: 2025-01-07 09:12:10.983  ModifyDate: 2025-06-26 16:44:49.520  --- DEFINITION START ---      CREATE   PROCEDURE [dbo].[COUNT_TABLES_PROC]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,         AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;              IF OBJECT_ID('VISTA_TEMP_3.dbo.MULTIFUND_NO_CHECK', 'U') IS NULL         SELECT * INTO VISTA_TEMP_3.dbo.MULTIFUND_NO_CHECK FROM (     SELECT     GETDATE() AS DATE,     'EQ' AS D_DESK,     (SELECT SUM(1) FROM VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_EQ_TABLE) AS VG01,     (SELECT SUM(1) FROM VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_EQ_TABLE) AS VG07,     (SELECT SUM(1) FROM VISTA_STAGING.dbo.VG_10_NAV_CUT_OFF_EQ_TABLE) AS VG10_NAV,     (SELECT SUM(1) FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_EQ_TABLE) AS VG10,     (SELECT COUNT(DISTINCT(MULTI_FUND_ID)) FROM VISTA_REPORTING.dbo.TRADES t     JOIN VISTA_REPORTING.dbo.TRD_ORDERS tr ON tr.ORD_NUM=t.ORD_NUM     WHERE tr.DEALING_DESK = 'Equity') AS MF_COUNT     UNION     SELECT     GETDATE() AS DATE,     'FI',     (SELECT SUM(1) FROM VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI_TABLE) AS VG01_FI,     (SELECT SUM(1) FROM VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_FI_TABLE) AS VG07_FI,     NULL AS VG10_NAV_FI,     (SELECT SUM(1) FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FI_TABLE) AS VG10_FI,     (SELECT COUNT(DISTINCT(MULTI_FUND_ID)) FROM VISTA_REPORTING.dbo.TRADES t     JOIN VISTA_REPORTING.dbo.TRD_ORDERS tr ON tr.ORD_NUM=t.ORD_NUM     WHERE tr.DEALING_DESK = 'Fixed Income') AS MF_FI_COUNT) AS temp         ELSE         INSERT INTO VISTA_TEMP_3.dbo.MULTIFUND_NO_CHECK     SELECT * FROM (     SELECT     GETDATE() AS DATE,     'EQ' AS D_DESK,     (SELECT SUM(1) FROM VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_EQ_TABLE) AS VG01,     (SELECT SUM(1) FROM VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_EQ_TABLE) AS VG07,     (SELECT SUM(1) FROM VISTA_STAGING.dbo.VG_10_NAV_CUT_OFF_EQ_TABLE) AS VG10_NAV,     (SELECT SUM(1) FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_EQ_TABLE) AS VG10,     (SELECT COUNT(DISTINCT(MULTI_FUND_ID)) FROM VISTA_REPORTING.dbo.TRADES t     JOIN VISTA_REPORTING.dbo.TRD_ORDERS tr ON tr.ORD_NUM=t.ORD_NUM     WHERE tr.DEALING_DESK = 'Equity') AS MF_COUNT     UNION     SELECT     GETDATE() AS DATE,     'FI',     (SELECT SUM(1) FROM VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI_TABLE) AS VG01_FI,     (SELECT SUM(1) FROM VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_FI_TABLE) AS VG07_FI,     NULL AS VG10_NAV_FI,     (SELECT SUM(1) FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FI_TABLE) AS VG10_FI,     (SELECT COUNT(DISTINCT(MULTI_FUND_ID)) FROM VISTA_REPORTING.dbo.TRADES t     JOIN VISTA_REPORTING.dbo.TRD_ORDERS tr ON tr.ORD_NUM=t.ORD_NUM     WHERE tr.DEALING_DESK = 'Fixed Income') AS MF_FI_COUNT) AS temp             IF OBJECT_ID('VISTA_TEMP_3.dbo.PM_ORDERS_NO_CHECK', 'U') IS NULL         SELECT * INTO VISTA_TEMP_3.dbo.PM_ORDERS_NO_CHECK FROM (     SELECT     GETDATE() AS DATE,     'EQ' AS D_DESK,     (SELECT COUNT(DISTINCT(ORD_NUM)) FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_EQ_TABLE) AS VG09,     (SELECT SUM(1) FROM VISTA_STAGING.dbo.VG_11_TIMELY_RELEASE_EQ_TABLE) AS VG11,     (SELECT COUNT(DISTINCT(ORD_NUM)) FROM VISTA_REPORTING.dbo.PM_ORDERS WHERE DEALING_DESK = 'Equity') AS PM_COUNT     UNION     SELECT     GETDATE() AS DATE,     'FI',     (SELECT COUNT(DISTINCT(ORD_NUM)) FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE) AS VG09,     NULL AS VG11,     (SELECT COUNT(DISTINCT(ORD_NUM)) FROM VISTA_REPORTING.dbo.PM_ORDERS WHERE DEALING_DESK = 'Fixed Income') AS PM_COUNT     ) AS temp2         ELSE         INSERT INTO VISTA_TEMP_3.dbo.PM_ORDERS_NO_CHECK     SELECT * FROM (     SELECT     GETDATE() AS DATE,     'EQ' AS D_DESK,     (SELECT COUNT(DISTINCT(ORD_NUM)) FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_EQ_TABLE) AS VG09,     (SELECT SUM(1) FROM VISTA_STAGING.dbo.VG_11_TIMELY_RELEASE_EQ_TABLE) AS VG11,     (SELECT COUNT(DISTINCT(ORD_NUM)) FROM VISTA_REPORTING.dbo.PM_ORDERS WHERE DEALING_DESK = 'Equity') AS PM_COUNT     UNION     SELECT     GETDATE() AS DATE,     'FI',     (SELECT COUNT(DISTINCT(ORD_NUM)) FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE) AS VG09,     NULL AS VG11,     (SELECT COUNT(DISTINCT(ORD_NUM)) FROM VISTA_REPORTING.dbo.PM_ORDERS WHERE DEALING_DESK = 'Fixed Income') AS PM_COUNT     ) AS temp2     ORDER BY DATE             IF OBJECT_ID('VISTA_TEMP_3.dbo.TRD_ORDERS_NO_CHECK', 'U') IS NULL          SELECT * INTO VISTA_TEMP_3.dbo.TRD_ORDERS_NO_CHECK FROM (     SELECT     GETDATE() AS DATE,     'EQ' AS D_DESK,     (SELECT SUM(1) FROM VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_EQ_TABLE) AS VG13,     (SELECT SUM(1) FROM VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_EQ_TABLE) AS VG14,     (SELECT COUNT(DISTINCT(ORD_NUM)) FROM VISTA_REPORTING.dbo.TRD_ORDERS WHERE DEALING_DESK = 'Equity') AS TRD_COUNT     UNION     SELECT     GETDATE() AS DATE,     'FI',     (SELECT SUM(1) FROM VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_FI_TABLE),     (SELECT SUM(1) FROM VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_FI_TABLE),     (SELECT COUNT(DISTINCT(ORD_NUM)) FROM VISTA_REPORTING.dbo.TRD_ORDERS WHERE DEALING_DESK = 'Fixed Income') AS TRD_COUNT     ) AS temp3         ELSE         INSERT INTO VISTA_TEMP_3.dbo.TRD_ORDERS_NO_CHECK     SELECT * FROM (      SELECT     GETDATE() AS DATE,     'EQ' AS D_DESK,     (SELECT SUM(1) FROM VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_EQ_TABLE) AS VG13,     (SELECT SUM(1) FROM VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_EQ_TABLE) AS VG14,     (SELECT COUNT(DISTINCT(ORD_NUM)) FROM VISTA_REPORTING.dbo.TRD_ORDERS WHERE DEALING_DESK = 'Equity') AS TRD_COUNT     UNION     SELECT     GETDATE() AS DATE,     'FI',     (SELECT SUM(1) FROM VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_FI_TABLE),     (SELECT SUM(1) FROM VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_FI_TABLE),     (SELECT COUNT(DISTINCT(ORD_NUM)) FROM VISTA_REPORTING.dbo.TRD_ORDERS WHERE DEALING_DESK = 'Fixed Income') AS TRD_COUNT     ) AS temp3         IF OBJECT_ID('VISTA_TEMP_3.dbo.AGG_EXCEPTION_NO', 'U') IS NULL         SELECT * INTO VISTA_TEMP_3.dbo.AGG_EXCEPTION_NO FROM (     SELECT     GETDATE() AS DATE,     'AGG' AS D_DESK,     (SELECT SUM(1) FROM VISTA_REPORTING.dbo.ORDER_LEVEL_EXCEPTION_TABLE) AS PM_ORD_LVL,     (SELECT COUNT(DISTINCT(ORD_NUM)) FROM VISTA_REPORTING.dbo.PM_ORDERS WHERE DEALING_DESK in ('Equity','Fixed Income')) AS PM_COUNT,     (SELECT SUM(1) FROM VISTA_REPORTING.dbo.TRD_ORDER_LEVEL_EXCEPTION_TABLE) AS TRD_ORD_LVL,     (SELECT COUNT(DISTINCT(ORD_NUM)) FROM VISTA_REPORTING.dbo.TRD_ORDERS WHERE DEALING_DESK in ('Equity','Fixed Income')) AS TRD_COUNT,     (SELECT SUM(1) FROM VISTA_REPORTING.dbo.MULTI_FUND_EXCEPTION_TABLE) AS MF_LVL,     (SELECT COUNT(DISTINCT(MULTI_FUND_ID)) FROM VISTA_REPORTING.dbo.TRADES t     JOIN VISTA_REPORTING.dbo.TRD_ORDERS tr ON tr.ORD_NUM=t.ORD_NUM     WHERE tr.DEALING_DESK in ('Equity', 'Fixed Income')) AS MF_COUNT     ) AS temp4         ELSE         INSERT INTO VISTA_TEMP_3.dbo.AGG_EXCEPTION_NO     SELECT * FROM (     SELECT     GETDATE() AS DATE,     'AGG' AS D_DESK,     (SELECT SUM(1) FROM VISTA_REPORTING.dbo.ORDER_LEVEL_EXCEPTION_TABLE) AS PM_ORD_LVL,     (SELECT COUNT(DISTINCT(ORD_NUM)) FROM VISTA_REPORTING.dbo.PM_ORDERS WHERE DEALING_DESK in ('Equity','Fixed Income')) AS PM_COUNT,     (SELECT SUM(1) FROM VISTA_REPORTING.dbo.TRD_ORDER_LEVEL_EXCEPTION_TABLE) AS TRD_ORD_LVL,     (SELECT COUNT(DISTINCT(ORD_NUM)) FROM VISTA_REPORTING.dbo.TRD_ORDERS WHERE DEALING_DESK in ('Equity','Fixed Income')) AS TRD_COUNT,     (SELECT SUM(1) FROM VISTA_REPORTING.dbo.MULTI_FUND_EXCEPTION_TABLE) AS MF_LVL,     (SELECT COUNT(DISTINCT(MULTI_FUND_ID)) FROM VISTA_REPORTING.dbo.TRADES t     JOIN VISTA_REPORTING.dbo.TRD_ORDERS tr ON tr.ORD_NUM=t.ORD_NUM     WHERE tr.DEALING_DESK in ('Equity', 'Fixed Income')) AS MF_COUNT     ) AS temp4         IF OBJECT_ID('VISTA_TEMP_3.dbo.EXCEPTION_COUNT', 'U') IS NULL         SELECT * INTO VISTA_TEMP_3.dbo.EXCEPTION_COUNT FROM (     SELECT     GETDATE() AS DATE,     (SELECT COUNT(DISTINCT(MULTI_FUND_ID)) FROM VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_EQ_TABLE WHERE QUOTE_EXCEPTION > 0) AS VG01_EQ,     (SELECT COUNT(DISTINCT(MULTI_FUND_ID)) FROM VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI_TABLE WHERE QUOTE_EXCEPTION > 0) AS VG01_FI,     (SELECT COUNT(DISTINCT(MULTI_FUND_ID)) FROM VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_EQ_TABLE WHERE NON_WINNING_QUOTE_EXCEPTION > 0) AS VG07_EQ,     (SELECT COUNT(DISTINCT(MULTI_FUND_ID)) FROM VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_FI_TABLE WHERE NWQ_EXCEPTION > 0) AS VG07_FI,     (SELECT COUNT(DISTINCT(ORD_NUM)) FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_EQ_TABLE WHERE TIMELY_EXECUTION_EXCEPTION > 0) AS VG09_EQ,     (SELECT COUNT(DISTINCT(ORD_NUM)) FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE WHERE TIMELY_EXECUTION_EXCEPTION > 0) AS VG09_FI,     (SELECT COUNT(DISTINCT(MULTI_FUND_ID)) FROM VISTA_STAGING.dbo.VG_10_NAV_CUT_OFF_EQ_TABLE WHERE NAV_CUT_OFF_EXCEPTION > 0) AS VG10_NAV_EQ,     (SELECT COUNT(DISTINCT(MULTI_FUND_ID)) FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_EQ_TABLE WHERE TIMELY_RECORDING_FLAG > 0) AS VG10_EQ,     (SELECT COUNT(DISTINCT(MULTI_FUND_ID)) FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FI_TABLE WHERE TIMELY_RECORDING_EXCEPTION > 0) AS VG10_FI,     (SELECT COUNT(DISTINCT(ORD_NUM)) FROM VISTA_STAGING.dbo.VG_11_TIMELY_RELEASE_EQ_TABLE WHERE TIMELY_RELEASE_EXCEPTION > 0) AS VG11_EQ,     (SELECT COUNT(DISTINCT(ORD_NUM)) FROM VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_EQ_TABLE WHERE MERGE_EXCEPTION > 0) AS VG13_EQ,     (SELECT COUNT(DISTINCT(ORD_NUM)) FROM VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_FI_TABLE WHERE MERGE_EXCEPTION > 0) AS VG13_FI,     (SELECT COUNT(DISTINCT(ORD_NUM)) FROM VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_EQ_TABLE WHERE ORDER_PRIORITY_EXCEPTION > 0) AS VG14_EQ,     (SELECT COUNT(DISTINCT(ORD_NUM)) FROM VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_FI_TABLE WHERE ORDER_PRIORITY_EXCEPTION > 0) AS VG14_FI     ) AS temp5         ELSE         INSERT INTO VISTA_TEMP_3.dbo.EXCEPTION_COUNT     SELECT * FROM(     SELECT     GETDATE() AS DATE,     (SELECT COUNT(DISTINCT(MULTI_FUND_ID)) FROM VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_EQ_TABLE WHERE QUOTE_EXCEPTION > 0) AS VG01_EQ,     (SELECT COUNT(DISTINCT(MULTI_FUND_ID)) FROM VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI_TABLE WHERE QUOTE_EXCEPTION > 0) AS VG01_FI,     (SELECT COUNT(DISTINCT(MULTI_FUND_ID)) FROM VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_EQ_TABLE WHERE NON_WINNING_QUOTE_EXCEPTION > 0) AS VG07_EQ,     (SELECT COUNT(DISTINCT(MULTI_FUND_ID)) FROM VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_FI_TABLE WHERE NWQ_EXCEPTION > 0) AS VG07_FI,     (SELECT COUNT(DISTINCT(ORD_NUM)) FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_EQ_TABLE WHERE TIMELY_EXECUTION_EXCEPTION > 0) AS VG09_EQ,     (SELECT COUNT(DISTINCT(ORD_NUM)) FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE WHERE TIMELY_EXECUTION_EXCEPTION > 0) AS VG09_FI,     (SELECT COUNT(DISTINCT(MULTI_FUND_ID)) FROM VISTA_STAGING.dbo.VG_10_NAV_CUT_OFF_EQ_TABLE WHERE NAV_CUT_OFF_EXCEPTION > 0) AS VG10_NAV_EQ,     (SELECT COUNT(DISTINCT(MULTI_FUND_ID)) FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_EQ_TABLE WHERE TIMELY_RECORDING_FLAG > 0) AS VG10_EQ,     (SELECT COUNT(DISTINCT(MULTI_FUND_ID)) FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FI_TABLE WHERE TIMELY_RECORDING_EXCEPTION > 0) AS VG10_FI,     (SELECT COUNT(DISTINCT(ORD_NUM)) FROM VISTA_STAGING.dbo.VG_11_TIMELY_RELEASE_EQ_TABLE WHERE TIMELY_RELEASE_EXCEPTION > 0) AS VG11_EQ,     (SELECT COUNT(DISTINCT(ORD_NUM)) FROM VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_EQ_TABLE WHERE MERGE_EXCEPTION > 0) AS VG13_EQ,     (SELECT COUNT(DISTINCT(ORD_NUM)) FROM VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_FI_TABLE WHERE MERGE_EXCEPTION > 0) AS VG13_FI,     (SELECT COUNT(DISTINCT(ORD_NUM)) FROM VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_EQ_TABLE WHERE ORDER_PRIORITY_EXCEPTION > 0) AS VG14_EQ,     (SELECT COUNT(DISTINCT(ORD_NUM)) FROM VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_FI_TABLE WHERE ORDER_PRIORITY_EXCEPTION > 0) AS VG14_FI     ) AS temp5        END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: COUNTERPARTY_DIRECTION_DMG_delete  CreateDate: 2025-01-07 09:12:10.993  ModifyDate: 2025-06-26 16:45:13.883  --- DEFINITION START ---          -- =============================================    -- Author:  <Nasra, Michael>    -- Create date: <2019-05-13>    -- Description: <Build a master table for the Counterparty direction table for DMG for the front end to display.>    -- Apdapted from a previous version COUNTERPARTY_DIRECTION_FI    -- =============================================        -- ***************VERSION CONTROL***************    -- 2019-05-13 WH: Created stored procedure    -- *********************************************                CREATE   PROCEDURE [dbo].[COUNTERPARTY_DIRECTION_DMG_delete]        AS        BEGIN     -- SET NOCOUNT ON added to prevent extra result sets FROM     -- interfering with SELECT statements.     SET NOCOUNT ON;         --Create a table with all the concatenated from the TRADES table.     IF OBJECT_ID('tempdb..#CONCAT', 'U') IS NOT NULL DROP TABLE #CONCAT     SELECT      po.ORD_NUM,      STUFF((       SELECT DISTINCT        ' | ' + LTRIM(RTRIM(t.TRD_COUNTERPARTY))       FROM VISTA_REPORTING.dbo.PM_ORDERS pm       LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD=pm.ORD_NUM       LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM=oc.TRD_ORD       WHERE pm.ORD_NUM=po.ORD_NUM       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS CP_CONCAT, --Concatenate all TRD_COUNTERPARTY codes for the PM ORD_NUM      STUFF((       SELECT DISTINCT        ' | ' + LTRIM(RTRIM(t.MULTI_FUND_ID))       FROM VISTA_REPORTING.dbo.PM_ORDERS pm       LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD=pm.ORD_NUM       LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM=oc.TRD_ORD       WHERE pm.ORD_NUM=po.ORD_NUM       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS MF_CONCAT, --Concatenate all MULTI_FUND_IDs for the PM ORD_NUM      STUFF((       SELECT DISTINCT        ' | ' + LTRIM(RTRIM(t.TRD_TRADER))       FROM VISTA_REPORTING.dbo.PM_ORDERS pm       LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD=pm.ORD_NUM       LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM=oc.TRD_ORD       WHERE pm.ORD_NUM=po.ORD_NUM       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS TRADER_CONCAT, --Concatenate all TRADER initials for the PM ORD_NUM      STUFF((       SELECT DISTINCT        ' | ' + LTRIM(RTRIM(t.TRD_TRADE_DATE))       FROM VISTA_REPORTING.dbo.PM_ORDERS pm       LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD=pm.ORD_NUM       LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM=oc.TRD_ORD       WHERE pm.ORD_NUM=po.ORD_NUM       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS TRADE_DATE_CONCAT, --Concatenate all Trade Dates for the PM ORD_NUM      STUFF((       SELECT DISTINCT        ' | ' + CONVERT(VARCHAR, t.EXECUTION_TIME)       FROM VISTA_REPORTING.dbo.PM_ORDERS pm       LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD=pm.ORD_NUM       LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM=oc.TRD_ORD       WHERE pm.ORD_NUM=po.ORD_NUM       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS EX_TIME_CONCAT, --Concatenate all EXECUTION_TIMES for that PM ORD_NUM      STUFF((       SELECT DISTINCT        ' | ' + LTRIM(RTRIM(t.TRD_PRICE))       FROM VISTA_REPORTING.dbo.PM_ORDERS pm       LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD=pm.ORD_NUM       LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM=oc.TRD_ORD       WHERE pm.ORD_NUM=po.ORD_NUM       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS PRICE_CONCAT, --Concatenate all TRD_PRICE for that PM ORD_NUM      STUFF((       SELECT DISTINCT        ' | ' + LTRIM(RTRIM(t.NET_CONSIDERATION))       FROM VISTA_REPORTING.dbo.PM_ORDERS pm       LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD=pm.ORD_NUM       LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM=oc.TRD_ORD       WHERE pm.ORD_NUM=po.ORD_NUM       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS NET_CONS_CONCAT --Concatenate all NET_CONSIDERATIONS for that PM ORD_NUM     INTO #CONCAT     FROM (SELECT DISTINCT ORD_NUM FROM VISTA_REPORTING.dbo.PM_ORDERS) po     LEFT JOIN (SELECT DISTINCT TRD_ORD, PM_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON oc.PM_ORD=po.ORD_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM, NET_CONSIDERATION, TRD_TRADE_DATE, MULTI_FUND_ID, TRD_TRADER, TRD_COUNTERPARTY, EXECUTION_TIME, TRD_PRICE FROM VISTA_REPORTING.dbo.TRADES) t ON t.ORD_NUM=oc.TRD_ORD     WHERE t.TRD_TRADE_DATE IS NOT NULL        OR t.MULTI_FUND_ID IS NOT NULL        OR t.TRD_TRADER IS NOT NULL        OR t.TRD_COUNTERPARTY IS NOT NULL        OR t.EXECUTION_TIME IS NOT NULL        OR t.TRD_PRICE IS NOT NULL       OR t.NET_CONSIDERATION IS NOT NULL     GROUP BY po.ORD_NUM             IF OBJECT_ID('VISTA_STAGING.dbo.COUNTERPARTY_DIRECTION_TABLE_DMG', 'U') IS NOT NULL DROP TABLE VISTA_STAGING.dbo.[COUNTERPARTY_DIRECTION_TABLE_DMG]     select distinct      pmo.ORD_NUM,      oc.TRD_ORD,      c.MF_CONCAT AS MULTI_FUND_ID,      t.PLACEMENT_NUM,      t.CLIENT_EXECUTION_NUM,      pmo.AUTH_TIME,      t.EXECUTION_TIME,      soc.SAMPLED_DATE as CREATETIME,      pmo.PM AS FM,      pmo.BROKER_CODE,      pmo.DEALING_DESK,      pmo.COMMENTS_VALUE,      c.TRADER_CONCAT AS [Dealer],      ex.[Status],      case       when pmo.COMMENTS_VALUE like '%[a-zA-Z0-9]%' then 1 --If it contains any letters or numbers then 1 else 0       else 0      end as [EXCEPTION_FLAG],      COMMENTS_VALUE as [General Comment],      c.CP_CONCAT as [Executed CP],      c.EX_TIME_CONCAT AS [Execution Time],      c.TRADE_DATE_CONCAT AS [Trade Date],      c.PRICE_CONCAT AS [Price],      c.NET_CONS_CONCAT AS [Size]      INTO VISTA_STAGING.dbo.[COUNTERPARTY_DIRECTION_TABLE_DMG]      from  vista_reporting.dbo.PM_ORDERS pmo      LEFT JOIN #CONCAT c      ON pmo.ORD_NUM = c.ORD_NUM      LEFT JOIN VISTA_REPORTING.dbo.COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE ex       ON pmo.ORD_NUM = ex.PM_ORD AND ex.Exception_Type = 'CPDir'      left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc on pmo.ORD_NUM = oc.PM_ORD      left join (SELECT DISTINCT ORD_NUM, PLACEMENT_NUM, CLIENT_EXECUTION_NUM, EXECUTION_TIME FROM VISTA_REPORTING.dbo.TRADES) t on oc.TRD_ORD = t.ORD_NUM      left join [VISTA_REPORTING].[dbo].[SAMPLED_ORDERS_COMPLIANCE] soc on soc.ORD_NUM = pmo.ORD_NUM      where pmo.DEALING_DESK = 'DMG'        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: COUNTERPARTY_DIRECTION_FI  CreateDate: 2025-01-07 09:12:11.007  ModifyDate: 2025-06-26 16:45:38.793  --- DEFINITION START ---          -- =============================================    -- Author:  <Henderson, William>    -- Create date: <2018-07-12>    -- Description: <Build a master table for the Counterparty direction table for Fixed Income for the front end to display.>    -- =============================================        -- ***************VERSION CONTROL***************    -- 2018-02-16 WH: Created stored procedure    -- *********************************************                CREATE   PROCEDURE [dbo].[COUNTERPARTY_DIRECTION_FI]        AS        BEGIN     -- SET NOCOUNT ON added to prevent extra result sets FROM     -- interfering with SELECT statements.     SET NOCOUNT ON;         --Create a table with all the concatenated from the TRADES table.     IF OBJECT_ID('tempdb..#CONCAT', 'U') IS NOT NULL DROP TABLE #CONCAT     SELECT      po.ORD_NUM,      STUFF((       SELECT DISTINCT        ' | ' + LTRIM(RTRIM(t.TRD_COUNTERPARTY))       FROM VISTA_REPORTING.dbo.PM_ORDERS pm       LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD=pm.ORD_NUM       LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM=oc.TRD_ORD       WHERE pm.ORD_NUM=po.ORD_NUM       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS CP_CONCAT, --Concatenate all TRD_COUNTERPARTY codes for the PM ORD_NUM      STUFF((       SELECT DISTINCT        ' | ' + LTRIM(RTRIM(t.MULTI_FUND_ID))       FROM VISTA_REPORTING.dbo.PM_ORDERS pm       LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD=pm.ORD_NUM       LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM=oc.TRD_ORD       WHERE pm.ORD_NUM=po.ORD_NUM       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS MF_CONCAT, --Concatenate all MULTI_FUND_IDs for the PM ORD_NUM      STUFF((       SELECT DISTINCT        ' | ' + LTRIM(RTRIM(t.TRD_TRADER))       FROM VISTA_REPORTING.dbo.PM_ORDERS pm       LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD=pm.ORD_NUM       LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM=oc.TRD_ORD       WHERE pm.ORD_NUM=po.ORD_NUM       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS TRADER_CONCAT, --Concatenate all TRADER initials for the PM ORD_NUM      STUFF((       SELECT DISTINCT        ' | ' + LTRIM(RTRIM(t.TRD_TRADE_DATE))       FROM VISTA_REPORTING.dbo.PM_ORDERS pm       LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD=pm.ORD_NUM       LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM=oc.TRD_ORD       WHERE pm.ORD_NUM=po.ORD_NUM       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS TRADE_DATE_CONCAT, --Concatenate all Trade Dates for the PM ORD_NUM      STUFF((       SELECT DISTINCT        ' | ' + CONVERT(VARCHAR, t.EXECUTION_TIME)       FROM VISTA_REPORTING.dbo.PM_ORDERS pm       LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD=pm.ORD_NUM       LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM=oc.TRD_ORD       WHERE pm.ORD_NUM=po.ORD_NUM       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS EX_TIME_CONCAT, --Concatenate all EXECUTION_TIMES for that PM ORD_NUM      STUFF((       SELECT DISTINCT        ' | ' + LTRIM(RTRIM(t.TRD_PRICE))       FROM VISTA_REPORTING.dbo.PM_ORDERS pm       LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD=pm.ORD_NUM       LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM=oc.TRD_ORD       WHERE pm.ORD_NUM=po.ORD_NUM       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS PRICE_CONCAT, --Concatenate all TRD_PRICE for that PM ORD_NUM      STUFF((       SELECT DISTINCT        ' | ' + LTRIM(RTRIM(t.NET_CONSIDERATION))       FROM VISTA_REPORTING.dbo.PM_ORDERS pm       LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD=pm.ORD_NUM       LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM=oc.TRD_ORD       WHERE pm.ORD_NUM=po.ORD_NUM       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS NET_CONS_CONCAT --Concatenate all NET_CONSIDERATIONS for that PM ORD_NUM     INTO #CONCAT     FROM (SELECT DISTINCT ORD_NUM FROM VISTA_REPORTING.dbo.PM_ORDERS) po     LEFT JOIN (SELECT DISTINCT TRD_ORD, PM_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON oc.PM_ORD=po.ORD_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM, NET_CONSIDERATION, TRD_TRADE_DATE, MULTI_FUND_ID, TRD_TRADER, TRD_COUNTERPARTY, EXECUTION_TIME, TRD_PRICE FROM VISTA_REPORTING.dbo.TRADES) t ON t.ORD_NUM=oc.TRD_ORD     WHERE t.TRD_TRADE_DATE IS NOT NULL        OR t.MULTI_FUND_ID IS NOT NULL        OR t.TRD_TRADER IS NOT NULL        OR t.TRD_COUNTERPARTY IS NOT NULL        OR t.EXECUTION_TIME IS NOT NULL        OR t.TRD_PRICE IS NOT NULL       OR t.NET_CONSIDERATION IS NOT NULL     GROUP BY po.ORD_NUM             IF OBJECT_ID('VISTA_STAGING.dbo.COUNTERPARTY_DIRECTION_TABLE_FI', 'U') IS NOT NULL DROP TABLE VISTA_STAGING.dbo.[COUNTERPARTY_DIRECTION_TABLE_FI]          --;with ctpty AS (     -- SELECT DISTINCT      --  oc.PM_ORD AS ORD_NUM,     --  TRD_COUNTERPARTY,     --  TRD_TRADER     -- FROM VISTA_REPORTING.dbo.TRADES t     -- LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON t.ORD_NUM = oc.TRD_ORD     -- WHERE t.FinalFlag = 1     --), ctpty_concat AS (     -- SELECT      --   ORD_NUM,TRD_TRADER,     --   STUFF((     --  SELECT DISTINCT ', ' + TRD_COUNTERPARTY     --  FROM ctpty      --  WHERE (ORD_NUM = Results.ORD_NUM)      --  FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')     --   ,1,2,'') AS Counterparty     -- FROM ctpty Results     -- GROUP BY ORD_NUM, TRD_TRADER         --)     --, pm_orders AS (     --SELECT DISTINCT      -- a.ORD_NUM,     -- a.PM,     -- a.BROKER_CODE,     -- a.COMMENTS_VALUE     --FROM VISTA_REPORTING.dbo.PM_ORDERS a     --INNER JOIN (SELECT ORD_NUM, MAX(TOUCH_COUNT) AS MAX_TOUCH FROM VISTA_REPORTING.dbo.PM_ORDERS GROUP BY ORD_NUM) b     --ON a.ORD_NUM = b.ORD_NUM AND a.TOUCH_COUNT = b.MAX_TOUCH     --)     select distinct      pmo.ORD_NUM,      oc.TRD_ORD,      c.MF_CONCAT AS MULTI_FUND_ID,      t.PLACEMENT_NUM,      t.CLIENT_EXECUTION_NUM,      pmo.AUTH_TIME,      t.EXECUTION_TIME,      soc.SAMPLED_DATE as CREATE_TIME,      pmo.PM AS FM,      pmo.BROKER_CODE,      pmo.DEALING_DESK,      pmo.COMMENTS_VALUE,      c.TRADER_CONCAT AS [Dealer],      ex.[Status],      case         WHEN (CHARINDEX('axe', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "axe"'         WHEN (CHARINDEX('run', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "run"'         WHEN (CHARINDEX('bid', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "bid"'         WHEN (CHARINDEX('ask', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "ask"'         WHEN (CHARINDEX('offer', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "offer"'         WHEN (CHARINDEX('buying', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "buying"'         WHEN (CHARINDEX('selling', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "selling"'         WHEN (CHARINDEX('with', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "with"'         WHEN (CHARINDEX('JP', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "JP"'         WHEN (CHARINDEX('JPM', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "JPM"'         WHEN (CHARINDEX('Morgan', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "Morgan"'         WHEN (CHARINDEX('Gold', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "Gold"'         WHEN (CHARINDEX('Sachs', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "Sachs"'         WHEN (CHARINDEX('Barclays', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "Barclays"'         WHEN (CHARINDEX('BRC', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "BRC"'         WHEN (CHARINDEX('BARC', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "BARC"'         WHEN (CHARINDEX('BC', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "BC"'         WHEN (CHARINDEX('SG', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "SG"'         WHEN (CHARINDEX('Societe', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "Societe"'         WHEN (CHARINDEX('Credit', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "Credit"'         WHEN (CHARINDEX('Suisse', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "Suisse"'         WHEN (CHARINDEX('Stanley', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "Stanley"'         WHEN (CHARINDEX('RBC', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "RBC"'         WHEN (CHARINDEX('Royal', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "Royal"'         WHEN (CHARINDEX('Bank', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "Bank"'         WHEN (CHARINDEX('WF', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "WF"'         WHEN (CHARINDEX('Wells', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "Wells"'         WHEN (CHARINDEX('Fargo', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "Fargo"'         WHEN (CHARINDEX('HSBC', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "HSBC"'         WHEN (CHARINDEX('HSBK', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "HSBK"'         WHEN (CHARINDEX('RBS', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "RBS"'         WHEN (CHARINDEX('Citi', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "Citi"'         WHEN (CHARINDEX('CG', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "CG"'         WHEN (CHARINDEX('DB', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "DB"'         WHEN (CHARINDEX('Deutsche', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "Deutsche"'         WHEN (CHARINDEX('ML', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "ML"'         WHEN (CHARINDEX('Merril', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "Merril"'         WHEN (CHARINDEX('Lynch', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "Lynch"'         WHEN (CHARINDEX('BNP', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "BNP"'         WHEN (CHARINDEX('Paribas', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "Paribas"'         WHEN (CHARINDEX('BP', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "BP"'         WHEN (CHARINDEX('Commerz', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "Commerz"'         WHEN (CHARINDEX('JS', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "JS"'         WHEN (CHARINDEX('Jeff', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "Jeff"'         WHEN (CHARINDEX('Natixis', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "Natixis"'         WHEN (CHARINDEX('NX', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "NX"'         WHEN (CHARINDEX('Nomura', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "Nomura"'         WHEN (CHARINDEX('SAN', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "SAN"'         WHEN (CHARINDEX('Danske', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "Danske"'         WHEN (CHARINDEX('Cantor', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "Cantor"'         WHEN (CHARINDEX('ALLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "ALLL"'         WHEN (CHARINDEX('BALB', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "BALB"'         WHEN (CHARINDEX('BAMP', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "BAMP"'         WHEN (CHARINDEX('BANC', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "BANC"'         WHEN (CHARINDEX('BARP', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "BARP"'         WHEN (CHARINDEX('BBLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "BBLL"'         WHEN (CHARINDEX('BBV', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "BBV"'         WHEN (CHARINDEX('BCM', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "BCM"'         WHEN (CHARINDEX('BILL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "BILL"'         WHEN (CHARINDEX('BOLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "BOLL"'         WHEN (CHARINDEX('BPLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "BPLL"'         WHEN (CHARINDEX('BVLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "BVLL"'         WHEN (CHARINDEX('CALC', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "CALC"'         WHEN (CHARINDEX('CALL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "CALL"'         WHEN (CHARINDEX('CANA', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "CANA"'         WHEN (CHARINDEX('CFLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "CFLL"'         WHEN (CHARINDEX('CGML', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "CGML"'         WHEN (CHARINDEX('CHAL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "CHAL"'         WHEN (CHARINDEX('CILB', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "CILB"'         WHEN (CHARINDEX('CIWM', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "CIWM"'       WHEN (CHARINDEX('COLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "COLL"'         WHEN (CHARINDEX('COMM', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "COMM"'         WHEN (CHARINDEX('CSFE', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "CSFE"'         WHEN (CHARINDEX('CSLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "CSLL"'         WHEN (CHARINDEX('DENL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "DENL"'         WHEN (CHARINDEX('DEUP', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "DEUP"'         WHEN (CHARINDEX('DMGN', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "DMGN"'         WHEN (CHARINDEX('DMLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "DMLL"'         WHEN (CHARINDEX('DNBN', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "DNBN"'         WHEN (CHARINDEX('DNLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "DNLL"'         WHEN (CHARINDEX('DZBK', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "DZBK"'         WHEN (CHARINDEX('EULL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "EULL"'         WHEN (CHARINDEX('EURC', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "EURC"'         WHEN (CHARINDEX('EXA', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "EXA"'         WHEN (CHARINDEX('FITZ', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "FITZ"'         WHEN (CHARINDEX('GARB', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "GARB"'         WHEN (CHARINDEX('GLAS', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "GLAS"'         WHEN (CHARINDEX('GOLD', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "GOLD"'         WHEN (CHARINDEX('GOLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "GOLL"'         WHEN (CHARINDEX('GRDA', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "GRDA"'         WHEN (CHARINDEX('HENC', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "HENC"'         WHEN (CHARINDEX('HSBP', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "HSBP"'         WHEN (CHARINDEX('HSLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "HSLL"'         WHEN (CHARINDEX('HYLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "HYLL"'         WHEN (CHARINDEX('HYPO', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "HYPO"'         WHEN (CHARINDEX('ICIL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "ICIL"'         WHEN (CHARINDEX('ICLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "ICLL"'         WHEN (CHARINDEX('IKLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "IKLL"'         WHEN (CHARINDEX('ING', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "ING"'         WHEN (CHARINDEX('INGL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "INGL"'         WHEN (CHARINDEX('JPLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "JPLL"'         WHEN (CHARINDEX('JPMS', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "JPMS"'         WHEN (CHARINDEX('KKLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "KKLL"'         WHEN (CHARINDEX('LIEL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "LIEL"'         WHEN (CHARINDEX('LLOP', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "LLOP"'         WHEN (CHARINDEX('LTLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "LTLL"'         WHEN (CHARINDEX('LTSB', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "LTSB"'         WHEN (CHARINDEX('LWLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "LWLL"'         WHEN (CHARINDEX('MADV', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "MADV"'         WHEN (CHARINDEX('MAX', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "MAX"'         WHEN (CHARINDEX('MELT', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "MELT"'         WHEN (CHARINDEX('MITS', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "MITS"'         WHEN (CHARINDEX('MIZ', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "MIZ"'         WHEN (CHARINDEX('MLSB', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "MLSB"'         WHEN (CHARINDEX('MSLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "MSLL"'         WHEN (CHARINDEX('MSTC', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "MSTC"'         WHEN (CHARINDEX('MTLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "MTLL"'         WHEN (CHARINDEX('MZLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "MZLL"'         WHEN (CHARINDEX('NATE', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "NATE"'         WHEN (CHARINDEX('NDEA', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "NDEA"'         WHEN (CHARINDEX('NDLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "NDLL"'         WHEN (CHARINDEX('NMLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "NMLL"'         WHEN (CHARINDEX('NMRA', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "NMRA"'         WHEN (CHARINDEX('NTLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "NTLL"'         WHEN (CHARINDEX('PBS', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "PBS"'         WHEN (CHARINDEX('RABN', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "RABN"'         WHEN (CHARINDEX('RALL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "RALL"'         WHEN (CHARINDEX('RBDS', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "RBDS"'         WHEN (CHARINDEX('RBLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "RBLL"'         WHEN (CHARINDEX('RBSP', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "RBSP"'         WHEN (CHARINDEX('RCLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "RCLL"'         WHEN (CHARINDEX('SALL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "SALL"'         WHEN (CHARINDEX('SANT', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "SANT"'         WHEN (CHARINDEX('SBP', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "SBP"'         WHEN (CHARINDEX('SCB', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "SCB"'         WHEN (CHARINDEX('SCLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "SCLL"'         WHEN (CHARINDEX('SCTB', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "SCTB"'         WHEN (CHARINDEX('SEAE', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "SEAE"'         WHEN (CHARINDEX('SFLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "SFLL"'         WHEN (CHARINDEX('SGLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "SGLL"'         WHEN (CHARINDEX('SGSA', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "SGSA"'         WHEN (CHARINDEX('SKAN', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "SKAN"'         WHEN (CHARINDEX('SKLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "SKLL"'         WHEN (CHARINDEX('SMLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "SMLL"'         WHEN (CHARINDEX('SOCP', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "SOCP"'         WHEN (CHARINDEX('STIF', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "STIF"'         WHEN (CHARINDEX('STLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "STLL"'         WHEN (CHARINDEX('STOR', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "STOR"'         WHEN (CHARINDEX('TDS', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "TDS"'         WHEN (CHARINDEX('TLC', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "TLC"'         WHEN (CHARINDEX('TOR', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "TOR"'         WHEN (CHARINDEX('TRAL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "TRAL"'         WHEN (CHARINDEX('UBLL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "UBLL"'         WHEN (CHARINDEX('UBSA', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "UBSA"'         WHEN (CHARINDEX('USBT', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "USBT"'         WHEN (CHARINDEX('WBC', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "WBC"'         WHEN (CHARINDEX('WELF', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "WELF"'         WHEN (CHARINDEX('WELL', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "WELL"'         WHEN (CHARINDEX('CPDir', pmo.COMMENTS_VALUE) > 0) THEN 'Comment contains "CPDir"'         WHEN (CHARINDEX('CPDir', pmo.BROKER_CODE) > 0) THEN 'Broker Code ins "CPDir"'      end as [CP Alert String],      COMMENTS_VALUE as [General Comment],      c.CP_CONCAT as [Executed CP],      c.EX_TIME_CONCAT AS [Execution Time],      c.TRADE_DATE_CONCAT AS [Trade Date],      c.PRICE_CONCAT AS [Price],      c.NET_CONS_CONCAT AS [Size]      INTO VISTA_STAGING.dbo.[COUNTERPARTY_DIRECTION_TABLE_FI]      from  vista_reporting.dbo.PM_ORDERS pmo      LEFT JOIN #CONCAT c      ON pmo.ORD_NUM = c.ORD_NUM      LEFT JOIN VISTA_REPORTING.dbo.COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE ex       ON pmo.ORD_NUM = ex.PM_ORD AND ex.Exception_Type = 'CPDir'      left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc on pmo.ORD_NUM = oc.PM_ORD      left join (SELECT DISTINCT ORD_NUM, PLACEMENT_NUM, CLIENT_EXECUTION_NUM, EXECUTION_TIME FROM VISTA_REPORTING.dbo.TRADES) t on oc.TRD_ORD = t.ORD_NUM      left join [VISTA_REPORTING].[dbo].[SAMPLED_ORDERS_COMPLIANCE] soc on soc.ORD_NUM = pmo.ORD_NUM      --WHERE ex.Status IN ('2C2','2C4')        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: COUNTERPARTY_DIRECTION_TABLE_EQ  CreateDate: 2025-01-07 09:12:11.013  ModifyDate: 2025-06-26 16:46:24.680  --- DEFINITION START ---      -- =============================================    -- Author:  <da COsta, David>    -- Create date: <2018-05-23>    -- Description: <Procedure to implement compliance sampling>    -- =============================================        -- ***************VERSION CONTROL***************    -- *********************************************        CREATE   PROCEDURE [dbo].[COUNTERPARTY_DIRECTION_TABLE_EQ]             AS    BEGIN     IF OBJECT_ID('VISTA_REPORTING.[dbo].COUNTERPARTY_DIRECTION_TABLE_EQ', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.[dbo].COUNTERPARTY_DIRECTION_TABLE_EQ      SELECT *     INTO VISTA_REPORTING.[dbo].COUNTERPARTY_DIRECTION_TABLE_EQ      FROM VISTA_REPORTING.dbo.[MASTER_COUNTERPARTY_DIR_TABLE_EQ]    END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: COUNTERPARTY_DIRECTION_TABLE_FI_PROC  CreateDate: 2025-01-07 09:12:11.020  ModifyDate: 2025-06-26 17:07:38.650  --- DEFINITION START ---      -- =============================================    -- Author:  <da COsta, David>    -- Create date: <2018-05-23>    -- Description: <Procedure to implement compliance sampling>    -- =============================================        -- ***************VERSION CONTROL***************    -- *********************************************        CREATE   PROCEDURE [dbo].[COUNTERPARTY_DIRECTION_TABLE_FI_PROC]             AS    BEGIN        IF OBJECT_ID('VISTA_REPORTING.dbo.[COUNTERPARTY_DIRECTION_TABLE_FI]', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.[COUNTERPARTY_DIRECTION_TABLE_FI]    SELECT DISTINCT     ORD_NUM,      TRD_ORD,      PLACEMENT_NUM,      CLIENT_EXECUTION_NUM,      AUTH_TIME,      CREATE_TIME,      FM,      Side,      MULTI_FUND_ID,      Dealer,      [Executed CP],      [Trade Date],      [Execution Time],      Price,      Size,         BROKER_CODE,      DEALING_DESK,      --COMMENTS_VALUE,      EXECUTION_TIME,     [CP Alert String],      [General Comment],     [Ord Amt],     [Booked Amt],     [INST_TYPE],     [Spread],     [Rate],     [Platform],     [Method],     [PRIMARY_MARKET]    INTO VISTA_REPORTING.dbo.[COUNTERPARTY_DIRECTION_TABLE_FI]    FROM VISTA_REPORTING.dbo.MASTER_COUNTERPARTY_DIR_TABLE_FI cpty            --EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]    --Begin DesignProperties =     --   Begin PaneConfigurations =     --      Begin PaneConfiguration = 0    --         NumPanes = 4    --         Configuration = "(H (1[40] 4[20] 2[20] 3) )"    --      End    --      Begin PaneConfiguration = 1    --         NumPanes = 3    --         Configuration = "(H (1 [50] 4 [25] 3))"    --      End    --      Begin PaneConfiguration = 2    --         NumPanes = 3    --         Configuration = "(H (1 [50] 2 [25] 3))"    --      End    --      Begin PaneConfiguration = 3    --         NumPanes = 3    --         Configuration = "(H (4 [30] 2 [40] 3))"    --      End    --      Begin PaneConfiguration = 4    --         NumPanes = 2    --         Configuration = "(H (1 [56] 3))"    --      End    --      Begin PaneConfiguration = 5    --         NumPanes = 2    --         Configuration = "(H (2 [66] 3))"    --      End    --      Begin PaneConfiguration = 6    --         NumPanes = 2    --         Configuration = "(H (4 [50] 3))"    --      End    --      Begin PaneConfiguration = 7    --         NumPanes = 1    --         Configuration = "(V (3))"    --      End    --      Begin PaneConfiguration = 8    --         NumPanes = 3    --         Configuration = "(H (1[56] 4[18] 2) )"    --      End    --      Begin PaneConfiguration = 9    --         NumPanes = 2    --         Configuration = "(H (1 [75] 4))"    --      End    --      Begin PaneConfiguration = 10    --         NumPanes = 2    --         Configuration = "(H (1[66] 2) )"    --      End    --      Begin PaneConfiguration = 11    --         NumPanes = 2    --         Configuration = "(H (4 [60] 2))"    --      End    --      Begin PaneConfiguration = 12    --         NumPanes = 1    --         Configuration = "(H (1) )"    --      End    --      Begin PaneConfiguration = 13    --         NumPanes = 1    --         Configuration = "(V (4))"    --      End    --      Begin PaneConfiguration = 14    --         NumPanes = 1    --         Configuration = "(V (2))"    --      End    --      ActivePaneConfig = 0    --   End    --   Begin DiagramPane =     --      Begin Origin =     --         Top = 0    --         Left = 0    --      End    --      Begin Tables =     --         Begin Table = "MASTER_COUNTERPARTY_DIR_TABLE_FI"    --            Begin Extent =     --               Top = 6    --               Left = 38    --               Bottom = 175    --               Right = 411    --            End    --            DisplayFlags = 280    --            TopColumn = 4    --         End    --      End    --   End    --   Begin SQLPane =     --   End    --   Begin DataPane =     --      Begin ParameterDefaults = ""    --      End    --   End    --   Begin CriteriaPane =     --      Begin ColumnWidths = 11    --         Column = 1440    --         Alias = 900    --         Table = 1170    --         Output = 720    --         Append = 1400    --         NewValue = 1170    --         SortType = 1350    --         SortOrder = 1410    --         GroupBy = 1350    --         Filter = 1350    --         Or = 1350    --         Or = 1350    --         Or = 1350    --      End    --   End    --End    --' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'COUNTERPARTY_DIRECTION_TABLE_FI_delete'            --EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'COUNTERPARTY_DIRECTION_TABLE_FI_delete'    END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: COUNTERPARTY_HIT_RATE  CreateDate: 2025-01-07 09:12:11.030  ModifyDate: 2025-06-26 17:08:28.437  --- DEFINITION START ---  -- =============================================    -- Author:  <RAGI,KEERTI>    -- Create date: <08/07/2018>    -- =============================================        CREATE   PROCEDURE [dbo].[COUNTERPARTY_HIT_RATE]          AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;             IF OBJECT_ID('tempdb..#HITRATE', 'U') IS NOT NULL DROP TABLE #HITRATE        SELECT c.TRD_COUNTERPARTY,C.ID AS COUNTERPARTY_ID,    ROUND(COALESCE(CAST(COUNT(DISTINCT t.MULTI_FUND_ID)*100 AS FLOAT)/CAST(NULLIF((SELECT COUNT(DISTINCT q.[MULTI_FUND_ID]) FROM [VISTA_REPORTING].DBO.MASTER_QUOTES q            LEFT JOIN  [VISTA_REPORTING].DBO.MASTER_MULTI_FUND_ID_TABLE t ON t.[MULTI_FUND_ID] = q.[MULTI_FUND_ID]            LEFT JOIN [VISTA_REPORTING].DBO.COUNTERPARTIES c ON q.[BROKER] = c.[COUNTERPARTY_CODE]    ),0) AS FLOAT),0),2) AS HIT_RATE    INTO #HITRATE    FROM [VISTA_REPORTING].DBO.MASTER_MULTI_FUND_ID_TABLE t    LEFT JOIN [VISTA_REPORTING].DBO.COUNTERPARTIES c     ON t.counterparty_code = c.COUNTERPARTY_CODE    GROUP BY c.TRD_COUNTERPARTY,C.ID     ORDER BY c.TRD_COUNTERPARTY        IF OBJECT_ID('VISTA_REPORTING.dbo.COUNTERPARTY_HIT_RATE_TABLE', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.COUNTERPARTY_HIT_RATE_TABLE         SELECT * INTO VISTA_REPORTING.dbo.COUNTERPARTY_HIT_RATE_TABLE    FROM #HITRATE        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: COUNTERPARTY_HIT_RATE_SOURCE_TABLE  CreateDate: 2025-01-07 09:12:11.040  ModifyDate: 2025-06-26 17:09:06.003  --- DEFINITION START ---       CREATE   PROCEDURE [dbo].[COUNTERPARTY_HIT_RATE_SOURCE_TABLE]     -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,         AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         IF OBJECT_ID('tempdb..#min_trader_table', 'U') IS NOT NULL DROP TABLE #min_trader_table         SELECT DISTINCT      ORD_NUM,      TRADER,      MIN(AUTH_TIME) AS AUTH_TIME     INTO #min_trader_table     FROM VISTA_REPORTING.dbo.TRD_ORDERS     GROUP BY      ORD_NUM,      TRADER         IF OBJECT_ID('VISTA_REPORTING.dbo.COUNTERPARTY_HIT_RATE_SOURCE_TABLE', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.COUNTERPARTY_HIT_RATE_SOURCE_TABLE           SELECT DISTINCT      t.MULTI_FUND_ID AS order_id,      t.TRAN_TYPE AS side,      SUM(t.TRD_ORIG_FACE) AS original_qty,      tr.FACE AS target_value,      t.ACTIVITY_TYPE_DECODE AS user_data10,      t.ISIN AS instrument_isin,      i.CUSIP AS instrument_sedol,      CONCAT(t.TICKER,'_',t.TRD_COUPON,'_',t.MATURITY) AS instrument_name,      CASE        WHEN i.SM_SEC_GROUP is not NULL AND i.SM_SEC_TYPE is not NULL THEN CONCAT(RTRIM(i.SM_SEC_GROUP),'/', LTRIM(i.SM_SEC_TYPE))        WHEN i.SM_SEC_TYPE is NULL AND i.SM_SEC_GROUP is not NULL then i.SM_SEC_GROUP       WHEN i.SM_SEC_TYPE is not NULL AND i.SM_SEC_GROUP is NULL then i.SM_SEC_TYPE       ELSE NULL      END AS instrument_type,      NULL AS conventionalbonds,      pr.INST_TYPE AS instrument_type_tier3,      i.SECTOR AS sector,      NULL AS financial,      NULL AS cur, --ADD ONCE INSTRUMENT FIELDS HAVE BEEN ADDED      CASE       WHEN pr.EMERGING_MARKET=1 THEN pr.TRD_CURRENCY       ELSE NULL      END AS currency,      i.FITCH_RATING AS rating,      NULL AS ighy,      CASE       WHEN pr.PRIMARY_MARKET = 1 THEN 'prim'       WHEN pr.PRIMARY_MARKET = 0 THEN 'sec'       ELSE NULL      END AS primsec,      NULL AS seniority, --ADD ONCE INSTRUMENT FIELDS HAVE BEEN ADDED      pl.VENUE AS trading_system,      t.TRD_TRADE_DATE AS bargain_date,      t.TRD_SETTLE_DATE AS settlement_date,      tr.PM AS fundmgr,      mt.TRADER AS dealer,      q.BROKER AS qcpty_id,      CASE        WHEN t.TRAN_TYPE = 'BUY' and q.QUOTE_TYPE='P' THEN q.OFFER       WHEN t.TRAN_TYPE = 'SELL' and q.QUOTE_TYPE='P' THEN q.BID      END AS qprice,      CASE        WHEN t.TRAN_TYPE = 'BUY' and q.QUOTE_TYPE='S' THEN q.OFFER_SPREAD       WHEN t.TRAN_TYPE = 'SELL' and q.QUOTE_TYPE='S' THEN q.BID_SPREAD      END AS qspread,      t.TRD_COUNTERPARTY AS ecpty_id,      t.TRD_CURRENCY AS execution_currency,      t.TRD_PRICE AS execution_price,      t.TRD_PRICING_SPREAD AS spread,      fx.GBP_INDEX_RATE AS fxrate,      t.TRD_PRINCIPAL AS gross_val,      t.NET_CONSIDERATION AS net_val,      t.TRD_PRINCIPAL_GBP AS gross_gbp_val,      t.NET_CONSIDERATION_GBP AS net_gbp_val,      NULL AS result,      NULL AS gross_val_won,      NULL AS net_val_won,      NULL AS gross_gbp_won,      NULL AS non_AAA,      t.MULTI_FUND_ID AS execution_id,      SUM(t.TRD_ORIG_FACE) AS execution_qty,      NULL AS ABS_Inst,      NULL AS process_trading,      NULL AS quote_response,      NULL AS execution_count,      i.SECTOR AS sector_tier3,      --i.BOND_TYPE AS sector_tier4, --ADD ONCE INSTRUMENT FIELDS HAVE BEEN ADDED      NULL AS instrument_map,      NULL AS MonthYear,      i.HYBRID_FLAG     INTO VISTA_REPORTING.dbo.COUNTERPARTY_HIT_RATE_SOURCE_TABLE     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS tr ON tr.ORD_NUM=t.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.FX_RATES fx ON fx.CURRENCY=t.TRD_CURRENCY AND cast(fx.PULL_DATE as date)= cast(t.PULL_DATE as date)     LEFT JOIN VISTA_REPORTING.dbo.PLACEMENTS pl ON pl.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN VISTA_REPORTING.dbo.QUOTES q ON q.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN VISTA_REPORTING.dbo.INSTRUMENTS i ON i.CUSIP=tr.CUSIP     LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN #min_trader_table mt ON mt.ORD_NUM=t.ORD_NUM     GROUP BY       tr.ORD_NUM,      tr.PM,      tr.FACE,      t.ACTIVITY_TYPE_DECODE,      t.MULTI_FUND_ID,      t.TRAN_TYPE,      t.ISIN,      t.SM_CURRENCY,      t.TRD_TRADE_DATE,      t.TRD_SETTLE_DATE,      t.TRD_COUNTERPARTY,      t.TRD_CURRENCY,      t.TRD_PRICE,      t.TRD_PRICING_SPREAD,      t.TRD_PRINCIPAL,      t.NET_CONSIDERATION,      t.TRD_PRINCIPAL_GBP,      t.NET_CONSIDERATION_GBP,      mt.TRADER,      q.BROKER,      q.QUOTE_TYPE,      t.TICKER,      t.TRD_COUPON,      t.MATURITY,      fx.INDEX_RATE,      fx.GBP_INDEX_RATE,      --tr.TRADER,      pl.VENUE,      q.BID,      q.BID_RATE,      q.BID_SPREAD,      q.OFFER,      q.OFFER_RATE,      q.OFFER_SPREAD,      i.CUSIP,      i.TICKER,      i.SM_SEC_TYPE,      i.SECTOR,      i.SM_SEC_GROUP,      i.FITCH_RATING,      pr.INST_TYPE,      pr.EMERGING_MARKET,      pr.PRIMARY_MARKET,      pr.TRD_CURRENCY,      i.HYBRID_FLAG    END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: CREATE_PRIMARY_INST_TYPE  CreateDate: 2025-01-07 09:12:11.083  ModifyDate: 2025-06-26 17:12:32.133  --- DEFINITION START ---  -- =============================================    -- Author:  <Author,,Name>    -- Create date: <Create Date,,>    -- Description: <Description,,>    -- =============================================        -- ***************VERSION CONTROL***************    -- 2018-03-15 - DDC - Updates made...        -- 2018-03-15 - WH - Review of logic for INST_TYPE for Equity    -- 2019-01-30   ER   UPDATED FOR EQUITY WARRANT INST TYPE    -- 2019-04-04   ER   Added DMG desk logic.    -- 2019-04-16 MS - Added Interfund transer     --      logic for DMG.    -- 2019-04-17   DDC  Optimised tables to speed up processing time    -- 2019-04-25   DDC  Changed stored proc to include trades without orders     -- 2019-06-17 ER  CHANGED CASH TRADES WITHOUT ORDERS TO POINT TO DESC_INSTMT INSTEAD OF SEC_DESC1 AFTER DISCUSSION WITH IMAN TOPAN    -- 2019-06-19 - DDC: Added temp table to exclude DMG trades that existed before go-live    -- *********************************************    CREATE   PROCEDURE [dbo].[CREATE_PRIMARY_INST_TYPE]    AS        BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.         DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()         SET NOCOUNT ON;                -- Insert statements for procedure here         IF OBJECT_ID('tempdb..#temp_min_pdate_mfid', 'U') IS NOT NULL DROP TABLE #temp_min_pdate_mfid     SELECT DISTINCT       t.MULTI_FUND_ID,      t.PULL_DATE     INTO #temp_min_pdate_mfid     FROM VISTA_STAGING.dbo.TRADES t     WHERE PULL_DATE >= '2019-06-18 00:00:00.000'        AND NOT EXISTS (SELECT MULTI_FUND_ID FROM VISTA_STAGING.dbo.TRADES WHERE MULTI_FUND_ID = t.MULTI_FUND_ID AND PULL_DATE < '2019-06-18 00:00:00.000')               IF OBJECT_ID('tempdb..#temp_min_pdate_mfid_cash', 'U') IS NOT NULL DROP TABLE #temp_min_pdate_mfid_cash     SELECT DISTINCT       t.MULTI_FUND_ID,      t.PULL_DATE     INTO #temp_min_pdate_mfid_cash     FROM VISTA_STAGING.dbo.TRADES t     WHERE PULL_DATE >= '2019-08-09 00:00:00.000'        AND NOT EXISTS (SELECT MULTI_FUND_ID FROM VISTA_STAGING.dbo.TRADES WHERE MULTI_FUND_ID = t.MULTI_FUND_ID AND PULL_DATE < '2019-08-09 00:00:00.000')         IF OBJECT_ID('tempdb..#temp_min_pdate_mfid_fx', 'U') IS NOT NULL DROP TABLE #temp_min_pdate_mfid_fx     SELECT DISTINCT       t.MULTI_FUND_ID,      t.PULL_DATE     INTO #temp_min_pdate_mfid_fx     FROM VISTA_STAGING.dbo.TRADES t     WHERE PULL_DATE >= '2019-08-23 00:00:00.000'        AND NOT EXISTS (SELECT MULTI_FUND_ID FROM VISTA_STAGING.dbo.TRADES WHERE MULTI_FUND_ID = t.MULTI_FUND_ID AND PULL_DATE < '2019-08-23 00:00:00.000')              IF OBJECT_ID('tempdb..#temp_trades_dmg', 'U') IS NOT NULL DROP TABLE #temp_trades_dmg     SELECT DISTINCT       ACTIVITY_TYPE,       EXECUTION_TIME,       EXECUTION_TYPE,       MTG_SUBTYPE,      MULTI_FUND_ID,       PORTFOLIOS_PORTFOLIO_NAME,       TRAN_TYPE,       TRD_COUNTERPARTY,       TRD_CURRENCY,      TRD_PURPOSE,       ORD_NUM,       SM_SEC_GROUP,       SM_SEC_TYPE,       CUSIP,       TRD_TRADER      --PULL_DATE     INTO #temp_trades_dmg     FROM VISTA_STAGING.dbo.TRADES     WHERE TRD_TRADER in (SELECT DISTINCT INITIALS            FROM VISTA_REPORTING.dbo.TREASURY_DEALER_DESK            WHERE (CAST(PULL_DATE AS DATE) BETWEEN CAST(DATE_FROM AS DATE) AND CAST(DATE_TO AS DATE)) AND DEALING_DESK = 'DMG')        AND (SM_SEC_GROUP != 'FX' AND SM_SEC_TYPE not in ('FWRD', 'SPOT'))             IF OBJECT_ID('tempdb..#temp_trades_cash', 'U') IS NOT NULL DROP TABLE #temp_trades_cash     SELECT DISTINCT       ACTIVITY_TYPE,       EXECUTION_TIME,       EXECUTION_TYPE,       MTG_SUBTYPE,      MULTI_FUND_ID,       PORTFOLIOS_PORTFOLIO_NAME,       TRAN_TYPE,       TRD_COUNTERPARTY,       TRD_CURRENCY,      TRD_PURPOSE,       ORD_NUM,       SM_SEC_GROUP,       SM_SEC_TYPE,       CUSIP,       TRD_TRADER,       --PULL_DATE,       TRD_LOCATION,       DESC_INSTMT     INTO #temp_trades_cash     FROM VISTA_STAGING.dbo.TRADES     WHERE TRD_LOCATION = 'PCAP'         AND SM_SEC_GROUP = 'CASH' AND SM_SEC_TYPE IN ('CP', 'CD', 'TBILL')         AND ISNULL(DESC_INSTMT ,'') NOT IN ('PRUDENTIAL PLC', 'PRUDENTIAL CAPITAL PLC', 'PRUDENTIAL CAPITAL HOLDING COMPANY', 'PRUDENTIAL CAPITAL (SINGAPORE) PTE')             IF OBJECT_ID('tempdb..#temp_trades_fx', 'U') IS NOT NULL DROP TABLE #temp_trades_fx     SELECT DISTINCT       ACTIVITY_TYPE,       EXECUTION_TIME,       EXECUTION_TYPE,       MTG_SUBTYPE,      MULTI_FUND_ID,      PORTFOLIOS_PORTFOLIO_NAME,      TRAN_TYPE,       TRD_COUNTERPARTY,       TRD_CURRENCY,      TRD_PURPOSE,       ORD_NUM,       SM_SEC_GROUP,       SM_SEC_TYPE,       CUSIP,       TRD_TRADER,       --PULL_DATE,       TRD_LOCATION,       DESC_INSTMT     INTO #temp_trades_fx     FROM VISTA_STAGING.dbo.TRADES     WHERE SM_SEC_GROUP = 'OPTION'         AND SM_SEC_TYPE = 'CUROTC'              IF OBJECT_ID('tempdb..#temp_trades_al', 'U') IS NOT NULL DROP TABLE #temp_trades_al     SELECT DISTINCT       t.ACTIVITY_TYPE,       t.EXECUTION_TIME,       t.EXECUTION_TYPE,       t.MTG_SUBTYPE,      t.MULTI_FUND_ID,      t.PORTFOLIOS_PORTFOLIO_NAME,      t.TRAN_TYPE,      t.TRD_COUNTERPARTY,      t.TRD_CURRENCY,      t.TRD_PURPOSE,       t.ORD_NUM,       t.SM_SEC_GROUP,       t.SM_SEC_TYPE,       t.CUSIP,       t.TRD_TRADER       --PULL_DATE     INTO #temp_trades_al     FROM VISTA_STAGING.dbo.TRADES t              IF OBJECT_ID('tempdb..#temp_pop_table', 'U') IS NOT NULL DROP TABLE #temp_pop_table     SELECT DISTINCT      o.CUSIP AS CUSIP_o, o.DEALING_DESK AS DEALING_DESK_o, o.ORD_NUM AS ORD_NUM_o, o.ORDER_REASON AS ORDER_REASON_o, o.SEC_DESC1 AS SEC_DESC1_o, o.SM_SEC_GROUP AS SM_SEC_GROUP_o, o.TRAN_TYPE AS TRAN_TYPE_o, o.SM_SEC_TYPE AS SM_SEC_TYPE_o, o.UPDATE_INSTR AS UPDATE_INSTR_o, o.AUTH_TIME AS AUTH_TIME_o,       t.ACTIVITY_TYPE AS ACTIVITY_TYPE_t, t.EXECUTION_TIME AS EXECUTION_TIME_t, t.EXECUTION_TYPE AS EXECUTION_TYPE_t, t.MTG_SUBTYPE AS MTG_SUBTYPE_t, t.MULTI_FUND_ID AS MULTI_FUND_ID_t, t.PORTFOLIOS_PORTFOLIO_NAME AS PORTFOLIOS_PORTFOLIO_NAME_t, t.TRAN_TYPE AS TRAN_TYPE_t,       t.TRD_COUNTERPARTY AS TRD_COUNTERPARTY_t, t.TRD_CURRENCY AS TRD_CURRENCY_t, t.TRD_PURPOSE AS TRD_PURPOSE_t, t.ORD_NUM AS ORD_NUM_t, t.SM_SEC_GROUP AS SM_SEC_GROUP_t, t.SM_SEC_TYPE AS SM_SEC_TYPE_t, t.CUSIP AS CUSIP_t, --t.PULL_DATE AS PULL_DATE_t,       i2.BASKET_CUSIP AS BASKET_CUSIP_i2, i2.CDS_TYPE AS CDS_TYPE_i2, i2.COUNTRY AS COUNTRY_i2, i2.CURRENCY AS CURRENCY_i2, i2.CUSIP_SWAP_AMORT AS CUSIP_SWAP_AMORT_i2, i2.DESC_INSTMT AS DESC_INSTMT_i2, i2.EMERGING_MARKET AS EMERGING_MARKET_i2, i2.INSTRUMENT_GRADE AS INSTRUMENT_GRADE_i2,       i2.MATURITY AS MATURITY_i2, i2.MIP_SEC_ID AS MIP_SEC_ID_i2, i2.SM_SEC_GROUP AS SM_SEC_GROUP_i2, i2.SM_SEC_TYPE AS SM_SEC_TYPE_i2, i2.UNDERLYING_CUSIP AS UNDERLYING_CUSIP_i2, i2.FLAG_144A AS FLAG_144A_i2, i2.BONDTYPE AS BONDTYPE_i2, i2.DESC_INSTMT2 AS DESC_INSTMT2_i2,       i2.FUTURE_CLASS AS FUTURE_CLASS_i2, i2.LEH_INDUSTRY AS LEH_INDUSTRY_i2, i2.SEC_DESC2 AS SEC_DESC2_i2, i2.FLAG_CCN AS FLAG_CCN_i2, i2.DATE AS DATE_i2, i2.CUSIP AS CUSIP_i2, i2.RISK_COUNTRY AS RISK_COUNTRY_i2, i2.ISIN AS ISIN_i2,      i3.FLAG_144A AS FLAG_144A_i3, i3.ISIN AS ISIN_i3, i3.BONDTYPE AS BONDTYPE_i3, i3.SM_SEC_TYPE AS SM_SEC_TYPE_i3, i3.CUSIP_SWAP_AMORT AS CUSIP_SWAP_AMORT_i3, i3.DESC_INSTMT2 AS DESC_INSTMT2_i3, i3.EMERGING_MARKET AS EMERGING_MARKET_i3, i3.FUTURE_CLASS AS   FUTURE_CLASS_i3, i3.INSTRUMENT_GRADE AS INSTRUMENT_GRADE_i3,       i3.LEH_INDUSTRY AS LEH_INDUSTRY_i3, i3.SEC_DESC2 AS SEC_DESC2_i3, i3.SM_SEC_GROUP AS SM_SEC_GROUP_i3, i3.DATE AS DATE_i3, i3.CUSIP AS CUSIP_i3, i3.CURRENCY AS CURRENCY_i3, i3.RISK_COUNTRY AS RISK_COUNTRY_i3,                p.FULL_NAME_VENUE AS FULL_NAME_VENUE_p, p.VENUE AS VENUE_p, p.MULTI_FUND_ID AS MULTI_FUND_ID_p     INTO #temp_pop_table     FROM (SELECT DISTINCT CUSIP, DEALING_DESK, ORD_NUM, ORDER_REASON, SEC_DESC1, SM_SEC_GROUP, TRAN_TYPE, SM_SEC_TYPE, UPDATE_INSTR, AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS) o     LEFT JOIN #temp_trades_al t on t.ORD_NUM=o.ORD_NUM     OUTER APPLY (SELECT TOP 1 i.BASKET_CUSIP, i.CDS_TYPE, i.COUNTRY, i.CURRENCY, i.CUSIP_SWAP_AMORT, i.DESC_INSTMT, i.EMERGING_MARKET, i.INSTRUMENT_GRADE,             i.MATURITY, i.MIP_SEC_ID, i.SM_SEC_GROUP, i.SM_SEC_TYPE, i.UNDERLYING_CUSIP, i.FLAG_144A, i.ISIN, i.BONDTYPE, i.DESC_INSTMT2,             i.FUTURE_CLASS, i.LEH_INDUSTRY, i.SEC_DESC2, i.FLAG_CCN, i.DATE, i.CUSIP, i.RISK_COUNTRY        FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=coalesce(t.CUSIP, o.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(t.EXECUTION_TIME, o.AUTH_TIME)))         ORDER BY i.DATE DESC) as i2     OUTER APPLY (SELECT TOP 1 i.FLAG_144A, i.ISIN, i.BONDTYPE, i.SM_SEC_TYPE, i.CUSIP_SWAP_AMORT, i.DESC_INSTMT2, i.EMERGING_MARKET, i.FUTURE_CLASS,             i.INSTRUMENT_GRADE, i.LEH_INDUSTRY, i.SEC_DESC2, i.SM_SEC_GROUP, i.DATE, i.CUSIP, i.RISK_COUNTRY, i.CURRENCY        FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=coalesce(t.CUSIP, o.CUSIP) AND i.DATE>=CONVERT(DATE, coalesce(t.EXECUTION_TIME, o.AUTH_TIME)))         ORDER BY i.DATE ASC) as i3     LEFT JOIN (SELECT DISTINCT FULL_NAME_VENUE, VENUE, MULTI_FUND_ID          FROM VISTA_REPORTING.dbo.PLACEMENTS) p on p.MULTI_FUND_ID=t.MULTI_FUND_ID     where o.DEALING_DESK is not NULL         UNION         SELECT DISTINCT      o.CUSIP AS CUSIP_o, 'DMG' AS DEALING_DESK_o, o.ORD_NUM AS ORD_NUM_o, o.ORDER_REASON AS ORDER_REASON_o, o.SEC_DESC1 AS SEC_DESC1_o, o.SM_SEC_GROUP AS SM_SEC_GROUP_o, o.TRAN_TYPE AS TRAN_TYPE_o, o.SM_SEC_TYPE AS SM_SEC_TYPE_o, o.UPDATE_INSTR AS UPDATE_INSTR_o, o.AUTH_TIME AS AUTH_TIME_o,       t.ACTIVITY_TYPE AS ACTIVITY_TYPE_t, t.EXECUTION_TIME AS EXECUTION_TIME_t, t.EXECUTION_TYPE AS EXECUTION_TYPE_t, t.MTG_SUBTYPE AS MTG_SUBTYPE_t, t.MULTI_FUND_ID AS MULTI_FUND_ID_t, t.PORTFOLIOS_PORTFOLIO_NAME AS PORTFOLIOS_PORTFOLIO_NAME_t, t.TRAN_TYPE AS TRAN_TYPE_t,       t.TRD_COUNTERPARTY AS TRD_COUNTERPARTY_t, t.TRD_CURRENCY AS TRD_CURRENCY_t, t.TRD_PURPOSE AS TRD_PURPOSE_t, t.ORD_NUM AS ORD_NUM_t, t.SM_SEC_GROUP AS SM_SEC_GROUP_t, t.SM_SEC_TYPE AS SM_SEC_TYPE_t, t.CUSIP AS CUSIP_t,-- t.PULL_DATE AS PULL_DATE_t,       i2.BASKET_CUSIP AS BASKET_CUSIP_i2, i2.CDS_TYPE AS CDS_TYPE_i2, i2.COUNTRY AS COUNTRY_i2, i2.CURRENCY AS CURRENCY_i2, i2.CUSIP_SWAP_AMORT AS CUSIP_SWAP_AMORT_i2, i2.DESC_INSTMT AS DESC_INSTMT_i2, i2.EMERGING_MARKET AS EMERGING_MARKET_i2, i2.INSTRUMENT_GRADE AS INSTRUMENT_GRADE_i2,       i2.MATURITY AS MATURITY_i2, i2.MIP_SEC_ID AS MIP_SEC_ID_i2, i2.SM_SEC_GROUP AS SM_SEC_GROUP_i2, i2.SM_SEC_TYPE AS SM_SEC_TYPE_i2, i2.UNDERLYING_CUSIP AS UNDERLYING_CUSIP_i2, i2.FLAG_144A AS FLAG_144A_i2, i2.BONDTYPE AS BONDTYPE_i2, i2.DESC_INSTMT2 AS DESC_INSTMT2_i2,       i2.FUTURE_CLASS AS FUTURE_CLASS_i2, i2.LEH_INDUSTRY AS LEH_INDUSTRY_i2, i2.SEC_DESC2 AS SEC_DESC2_i2, i2.FLAG_CCN AS FLAG_CCN_i2, i2.DATE AS DATE_i2, i2.CUSIP AS CUSIP_i2, i2.RISK_COUNTRY AS RISK_COUNTRY_i2, i2.ISIN AS ISIN_i2,      i3.FLAG_144A AS FLAG_144A_i3, i3.ISIN AS ISIN_i3, i3.BONDTYPE AS BONDTYPE_i3, i3.SM_SEC_TYPE AS SM_SEC_TYPE_i3, i3.CUSIP_SWAP_AMORT AS CUSIP_SWAP_AMORT_i3, i3.DESC_INSTMT2 AS DESC_INSTMT2_i3, i3.EMERGING_MARKET AS EMERGING_MARKET_i3, i3.FUTURE_CLASS AS FUTURE_CLASS_i3, i3.INSTRUMENT_GRADE AS INSTRUMENT_GRADE_i3,       i3.LEH_INDUSTRY AS LEH_INDUSTRY_i3, i3.SEC_DESC2 AS SEC_DESC2_i3, i3.SM_SEC_GROUP AS SM_SEC_GROUP_i3, i3.DATE AS DATE_i3, i3.CUSIP AS CUSIP_i3, i3.CURRENCY AS CURRENCY_i3, i3.RISK_COUNTRY AS RISK_COUNTRY_i3,               p.FULL_NAME_VENUE AS FULL_NAME_VENUE_p, p.VENUE AS VENUE_p, p.MULTI_FUND_ID AS MULTI_FUND_ID_p     FROM #temp_trades_dmg t     LEFT JOIN (SELECT DISTINCT CUSIP, DEALING_DESK, ORD_NUM, ORDER_REASON, SEC_DESC1, SM_SEC_GROUP, TRAN_TYPE, SM_SEC_TYPE, UPDATE_INSTR, AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS) o on t.ORD_NUM=o.ORD_NUM     OUTER APPLY (SELECT TOP 1 i.BASKET_CUSIP, i.CDS_TYPE, i.COUNTRY, i.CURRENCY, i.CUSIP_SWAP_AMORT, i.DESC_INSTMT, i.EMERGING_MARKET, i.INSTRUMENT_GRADE,             i.MATURITY, i.MIP_SEC_ID, i.SM_SEC_GROUP, i.SM_SEC_TYPE, i.UNDERLYING_CUSIP, i.FLAG_144A, i.ISIN, i.BONDTYPE, i.DESC_INSTMT2,             i.FUTURE_CLASS, i.LEH_INDUSTRY, i.SEC_DESC2, i.FLAG_CCN, i.DATE, i.CUSIP, i.RISK_COUNTRY        FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=coalesce(t.CUSIP, o.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(t.EXECUTION_TIME, o.AUTH_TIME)))         ORDER BY i.DATE DESC) as i2     OUTER APPLY (SELECT TOP 1 i.FLAG_144A, i.ISIN, i.BONDTYPE, i.SM_SEC_TYPE, i.CUSIP_SWAP_AMORT, i.DESC_INSTMT2, i.EMERGING_MARKET, i.FUTURE_CLASS,             i.INSTRUMENT_GRADE, i.LEH_INDUSTRY, i.SEC_DESC2, i.SM_SEC_GROUP, i.DATE, i.CUSIP, i.RISK_COUNTRY, i.CURRENCY        FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=coalesce(t.CUSIP, o.CUSIP) AND i.DATE>=CONVERT(DATE, coalesce(t.EXECUTION_TIME, o.AUTH_TIME)))         ORDER BY i.DATE ASC) as i3     LEFT JOIN (SELECT DISTINCT FULL_NAME_VENUE, VENUE, MULTI_FUND_ID          FROM VISTA_REPORTING.dbo.PLACEMENTS) p on p.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = t.ORD_NUM     LEFT JOIN #temp_min_pdate_mfid tmpd ON tmpd.MULTI_FUND_ID = t.MULTI_FUND_ID     where oc.PM_ORD is NULL         AND tmpd.PULL_DATE IS NOT NULL         UNION             SELECT DISTINCT      o.CUSIP AS CUSIP_o, 'CASH' AS DEALING_DESK_o, o.ORD_NUM AS ORD_NUM_o, o.ORDER_REASON AS ORDER_REASON_o, o.SEC_DESC1 AS SEC_DESC1_o, o.SM_SEC_GROUP AS SM_SEC_GROUP_o, o.TRAN_TYPE AS TRAN_TYPE_o, o.SM_SEC_TYPE AS SM_SEC_TYPE_o, o.UPDATE_INSTR AS UPDATE_INSTR_o, o.AUTH_TIME AS AUTH_TIME_o,       t.ACTIVITY_TYPE AS ACTIVITY_TYPE_t, t.EXECUTION_TIME AS EXECUTION_TIME_t, t.EXECUTION_TYPE AS EXECUTION_TYPE_t, t.MTG_SUBTYPE AS MTG_SUBTYPE_t, t.MULTI_FUND_ID AS MULTI_FUND_ID_t, t.PORTFOLIOS_PORTFOLIO_NAME AS PORTFOLIOS_PORTFOLIO_NAME_t, t.TRAN_TYPE AS TRAN_TYPE_t,       t.TRD_COUNTERPARTY AS TRD_COUNTERPARTY_t, t.TRD_CURRENCY AS TRD_CURRENCY_t, t.TRD_PURPOSE AS TRD_PURPOSE_t, t.ORD_NUM AS ORD_NUM_t, t.SM_SEC_GROUP AS SM_SEC_GROUP_t, t.SM_SEC_TYPE AS SM_SEC_TYPE_t, t.CUSIP AS CUSIP_t, --t.PULL_DATE AS PULL_DATE_t,       i2.BASKET_CUSIP AS BASKET_CUSIP_i2, i2.CDS_TYPE AS CDS_TYPE_i2, i2.COUNTRY AS COUNTRY_i2, i2.CURRENCY AS CURRENCY_i2, i2.CUSIP_SWAP_AMORT AS CUSIP_SWAP_AMORT_i2, i2.DESC_INSTMT AS DESC_INSTMT_i2, i2.EMERGING_MARKET AS EMERGING_MARKET_i2, i2.INSTRUMENT_GRADE AS INSTRUMENT_GRADE_i2,       i2.MATURITY AS MATURITY_i2, i2.MIP_SEC_ID AS MIP_SEC_ID_i2, i2.SM_SEC_GROUP AS SM_SEC_GROUP_i2, i2.SM_SEC_TYPE AS SM_SEC_TYPE_i2, i2.UNDERLYING_CUSIP AS UNDERLYING_CUSIP_i2, i2.FLAG_144A AS FLAG_144A_i2, i2.BONDTYPE AS BONDTYPE_i2, i2.DESC_INSTMT2 AS DESC_INSTMT2_i2,       i2.FUTURE_CLASS AS FUTURE_CLASS_i2, i2.LEH_INDUSTRY AS LEH_INDUSTRY_i2, i2.SEC_DESC2 AS SEC_DESC2_i2, i2.FLAG_CCN AS FLAG_CCN_i2, i2.DATE AS DATE_i2, i2.CUSIP AS CUSIP_i2, i2.RISK_COUNTRY AS RISK_COUNTRY_i2, i2.ISIN AS ISIN_i2,      i3.FLAG_144A AS FLAG_144A_i3, i3.ISIN AS ISIN_i3, i3.BONDTYPE AS BONDTYPE_i3, i3.SM_SEC_TYPE AS SM_SEC_TYPE_i3, i3.CUSIP_SWAP_AMORT AS CUSIP_SWAP_AMORT_i3, i3.DESC_INSTMT2 AS DESC_INSTMT2_i3, i3.EMERGING_MARKET AS EMERGING_MARKET_i3, i3.FUTURE_CLASS AS FUTURE_CLASS_i3, i3.INSTRUMENT_GRADE AS INSTRUMENT_GRADE_i3,       i3.LEH_INDUSTRY AS LEH_INDUSTRY_i3, i3.SEC_DESC2 AS SEC_DESC2_i3, i3.SM_SEC_GROUP AS SM_SEC_GROUP_i3, i3.DATE AS DATE_i3, i3.CUSIP AS CUSIP_i3, i3.CURRENCY AS CURRENCY_i3, i3.RISK_COUNTRY AS RISK_COUNTRY_i3,               p.FULL_NAME_VENUE AS FULL_NAME_VENUE_p, p.VENUE AS VENUE_p, p.MULTI_FUND_ID AS MULTI_FUND_ID_p     FROM #temp_trades_cash t     LEFT JOIN (SELECT DISTINCT CUSIP, DEALING_DESK, ORD_NUM, ORDER_REASON, SEC_DESC1, SM_SEC_GROUP, TRAN_TYPE, SM_SEC_TYPE, UPDATE_INSTR, AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS) o on t.ORD_NUM=o.ORD_NUM     OUTER APPLY (SELECT TOP 1 i.BASKET_CUSIP, i.CDS_TYPE, i.COUNTRY, i.CURRENCY, i.CUSIP_SWAP_AMORT, i.DESC_INSTMT, i.EMERGING_MARKET, i.INSTRUMENT_GRADE,             i.MATURITY, i.MIP_SEC_ID, i.SM_SEC_GROUP, i.SM_SEC_TYPE, i.UNDERLYING_CUSIP, i.FLAG_144A, i.ISIN, i.BONDTYPE, i.DESC_INSTMT2,             i.FUTURE_CLASS, i.LEH_INDUSTRY, i.SEC_DESC2, i.FLAG_CCN, i.DATE, i.CUSIP, i.RISK_COUNTRY        FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=coalesce(t.CUSIP, o.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(t.EXECUTION_TIME, o.AUTH_TIME)))         ORDER BY i.DATE DESC) as i2     OUTER APPLY (SELECT TOP 1 i.FLAG_144A, i.ISIN, i.BONDTYPE, i.SM_SEC_TYPE, i.CUSIP_SWAP_AMORT, i.DESC_INSTMT2, i.EMERGING_MARKET, i.FUTURE_CLASS,             i.INSTRUMENT_GRADE, i.LEH_INDUSTRY, i.SEC_DESC2, i.SM_SEC_GROUP, i.DATE, i.CUSIP, i.RISK_COUNTRY, i.CURRENCY        FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=coalesce(t.CUSIP, o.CUSIP) AND i.DATE>=CONVERT(DATE, coalesce(t.EXECUTION_TIME, o.AUTH_TIME)))         ORDER BY i.DATE ASC) as i3     LEFT JOIN (SELECT DISTINCT FULL_NAME_VENUE, VENUE, MULTI_FUND_ID          FROM VISTA_REPORTING.dbo.PLACEMENTS) p on p.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = t.ORD_NUM     LEFT JOIN #temp_min_pdate_mfid_cash tmpc ON tmpc.MULTI_FUND_ID = t.MULTI_FUND_ID     WHERE oc.PM_ORD is null         AND tmpc.PULL_DATE IS NOT NULL     UNION         SELECT DISTINCT      o.CUSIP AS CUSIP_o, 'FX' AS DEALING_DESK_o, o.ORD_NUM AS ORD_NUM_o, o.ORDER_REASON AS ORDER_REASON_o, o.SEC_DESC1 AS SEC_DESC1_o, o.SM_SEC_GROUP AS SM_SEC_GROUP_o, o.TRAN_TYPE AS TRAN_TYPE_o, o.SM_SEC_TYPE AS SM_SEC_TYPE_o, o.UPDATE_INSTR AS UPDATE_INSTR_o, o.AUTH_TIME AS AUTH_TIME_o,       t.ACTIVITY_TYPE AS ACTIVITY_TYPE_t, t.EXECUTION_TIME AS EXECUTION_TIME_t, t.EXECUTION_TYPE AS EXECUTION_TYPE_t, t.MTG_SUBTYPE AS MTG_SUBTYPE_t, t.MULTI_FUND_ID AS MULTI_FUND_ID_t, t.PORTFOLIOS_PORTFOLIO_NAME AS PORTFOLIOS_PORTFOLIO_NAME_t, t.TRAN_TYPE AS TRAN_TYPE_t,       t.TRD_COUNTERPARTY AS TRD_COUNTERPARTY_t, t.TRD_CURRENCY AS TRD_CURRENCY_t, t.TRD_PURPOSE AS TRD_PURPOSE_t, t.ORD_NUM AS ORD_NUM_t, t.SM_SEC_GROUP AS SM_SEC_GROUP_t, t.SM_SEC_TYPE AS SM_SEC_TYPE_t, t.CUSIP AS CUSIP_t, --t.PULL_DATE AS PULL_DATE_t,       i2.BASKET_CUSIP AS BASKET_CUSIP_i2, i2.CDS_TYPE AS CDS_TYPE_i2, i2.COUNTRY AS COUNTRY_i2, i2.CURRENCY AS CURRENCY_i2, i2.CUSIP_SWAP_AMORT AS CUSIP_SWAP_AMORT_i2, i2.DESC_INSTMT AS DESC_INSTMT_i2, i2.EMERGING_MARKET AS EMERGING_MARKET_i2, i2.INSTRUMENT_GRADE AS INSTRUMENT_GRADE_i2,       i2.MATURITY AS MATURITY_i2, i2.MIP_SEC_ID AS MIP_SEC_ID_i2, i2.SM_SEC_GROUP AS SM_SEC_GROUP_i2, i2.SM_SEC_TYPE AS SM_SEC_TYPE_i2, i2.UNDERLYING_CUSIP AS UNDERLYING_CUSIP_i2, i2.FLAG_144A AS FLAG_144A_i2, i2.BONDTYPE AS BONDTYPE_i2, i2.DESC_INSTMT2 AS DESC_INSTMT2_i2,       i2.FUTURE_CLASS AS FUTURE_CLASS_i2, i2.LEH_INDUSTRY AS LEH_INDUSTRY_i2, i2.SEC_DESC2 AS SEC_DESC2_i2, i2.FLAG_CCN AS FLAG_CCN_i2, i2.DATE AS DATE_i2, i2.CUSIP AS CUSIP_i2, i2.RISK_COUNTRY AS RISK_COUNTRY_i2, i2.ISIN AS ISIN_i2,      i3.FLAG_144A AS FLAG_144A_i3, i3.ISIN AS ISIN_i3, i3.BONDTYPE AS BONDTYPE_i3, i3.SM_SEC_TYPE AS SM_SEC_TYPE_i3, i3.CUSIP_SWAP_AMORT AS CUSIP_SWAP_AMORT_i3, i3.DESC_INSTMT2 AS DESC_INSTMT2_i3, i3.EMERGING_MARKET AS EMERGING_MARKET_i3, i3.FUTURE_CLASS AS   FUTURE_CLASS_i3, i3.INSTRUMENT_GRADE AS INSTRUMENT_GRADE_i3,       i3.LEH_INDUSTRY AS LEH_INDUSTRY_i3, i3.SEC_DESC2 AS SEC_DESC2_i3, i3.SM_SEC_GROUP AS SM_SEC_GROUP_i3, i3.DATE AS DATE_i3, i3.CUSIP AS CUSIP_i3, i3.CURRENCY AS CURRENCY_i3, i3.RISK_COUNTRY AS RISK_COUNTRY_i3,               p.FULL_NAME_VENUE AS FULL_NAME_VENUE_p, p.VENUE AS VENUE_p, p.MULTI_FUND_ID AS MULTI_FUND_ID_p     FROM #temp_trades_fx t     LEFT JOIN (SELECT DISTINCT CUSIP, DEALING_DESK, ORD_NUM, ORDER_REASON, SEC_DESC1, SM_SEC_GROUP, TRAN_TYPE, SM_SEC_TYPE, UPDATE_INSTR, AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS) o on t.ORD_NUM=o.ORD_NUM     OUTER APPLY (SELECT TOP 1 i.BASKET_CUSIP, i.CDS_TYPE, i.COUNTRY, i.CURRENCY, i.CUSIP_SWAP_AMORT, i.DESC_INSTMT, i.EMERGING_MARKET, i.INSTRUMENT_GRADE,             i.MATURITY, i.MIP_SEC_ID, i.SM_SEC_GROUP, i.SM_SEC_TYPE, i.UNDERLYING_CUSIP, i.FLAG_144A, i.ISIN, i.BONDTYPE, i.DESC_INSTMT2,             i.FUTURE_CLASS, i.LEH_INDUSTRY, i.SEC_DESC2, i.FLAG_CCN, i.DATE, i.CUSIP, i.RISK_COUNTRY        FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=coalesce(t.CUSIP, o.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(t.EXECUTION_TIME, o.AUTH_TIME)))         ORDER BY i.DATE DESC) as i2     OUTER APPLY (SELECT TOP 1 i.FLAG_144A, i.ISIN, i.BONDTYPE, i.SM_SEC_TYPE, i.CUSIP_SWAP_AMORT, i.DESC_INSTMT2, i.EMERGING_MARKET, i.FUTURE_CLASS,             i.INSTRUMENT_GRADE, i.LEH_INDUSTRY, i.SEC_DESC2, i.SM_SEC_GROUP, i.DATE, i.CUSIP, i.RISK_COUNTRY, i.CURRENCY        FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=coalesce(t.CUSIP, o.CUSIP) AND i.DATE>=CONVERT(DATE, coalesce(t.EXECUTION_TIME, o.AUTH_TIME)))         ORDER BY i.DATE ASC) as i3     LEFT JOIN (SELECT DISTINCT FULL_NAME_VENUE, VENUE, MULTI_FUND_ID          FROM VISTA_REPORTING.dbo.PLACEMENTS) p on p.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = t.ORD_NUM     LEFT JOIN #temp_min_pdate_mfid_fx tmpfx ON tmpfx.MULTI_FUND_ID = t.MULTI_FUND_ID     LEFT JOIN VISTA_REPORTING.dbo.PORTFOLIO pf ON pf.PORTFOLIOS_PORTFOLIO_NAME = t.PORTFOLIOS_PORTFOLIO_NAME     WHERE oc.PM_ORD is null         AND ISNULL(pf.PORTFOLIO_GROUP , '') != 'MG_PCAP'        AND tmpfx.PULL_DATE IS NOT NULL             IF OBJECT_ID('tempdb..#init_prim_inst', 'U') IS NOT NULL DROP TABLE #init_prim_inst     select distinct       ORD_NUM_o AS ORD_NUM,      SEC_DESC2_i2,      MULTI_FUND_ID_t AS MULTI_FUND_ID,      DEALING_DESK_o AS DEALING_DESK,      SM_SEC_GROUP_i2 AS SM_SEC_GROUP,      SM_SEC_TYPE_i2 AS SM_SEC_TYPE,      MTG_SUBTYPE_t AS MTG_SUBTYPE,      SEC_DESC1_o AS SEC_DESC1,      INSTRUMENT_GRADE_i2 AS INSTRUMENT_GRADE,      EMERGING_MARKET_i2 AS EMERGING_MARKET,      COUNTRY_i2 AS COUNTRY,      BASKET_CUSIP_i2 AS BASKET_CUSIP,      UNDERLYING_CUSIP_i2 AS UNDERLYING_CUSIP,      MATURITY_i2 AS MATURITY,      CURRENCY_i2 AS CURRENCY,      CUSIP_SWAP_AMORT_i2 AS CUSIP_SWAP_AMORT,      CUSIP_o AS Order_CUSIP ,--Is required for Order Agg & Order Priority FI      TRD_CURRENCY_t AS TRD_CURRENCY,      EXECUTION_TYPE_t AS EXECUTION_TYPE,      EXECUTION_TIME_t AS EXECUTION_TIME,      TRD_PURPOSE_t AS TRD_PURPOSE,      ACTIVITY_TYPE_t AS ACTIVITY_TYPE,      --ACTIVITY_TYPE_t_DECODE,      CASE WHEN ACTIVITY_TYPE_t = 'MG.FI 1. Proces' THEN 'MG.FI 1. Process Trading'        WHEN ACTIVITY_TYPE_t = 'MG.FI 2. Contin' THEN 'MG.FI 2. Contingent Package'        WHEN ACTIVITY_TYPE_t = 'MG.FI 3. Top up' THEN 'MG.FI 3. Top up/Continuation'         WHEN ACTIVITY_TYPE_t = 'MG.FI 4. Put Th' THEN 'MG.FI 4. Put Through'        WHEN ACTIVITY_TYPE_t = 'MG.FI 5. Primar' THEN 'MG.FI 5. Primary Market'      end as ACTIVITY_TYPE_DECODE,      TRAN_TYPE_o AS TRAN_TYPE,      TRD_COUNTERPARTY_t AS TRD_COUNTERPARTY,      TRAN_TYPE_t as [Trade_TRAN_TYPE],      SM_SEC_GROUP_o AS ORDER_SM_SEC_GROUP,      ORDER_REASON_o AS ORDER_REASON,      VENUE_p AS VENUE,      FULL_NAME_VENUE_p AS FULL_NAME_VENUE,      DESC_INSTMT_i2 AS DESC_INSTMT,      MIP_SEC_ID_i2 AS MIP_SEC_ID,      PORTFOLIOS_PORTFOLIO_NAME_t AS PORTFOLIOS_PORTFOLIO_NAME,      case       when DEALING_DESK_o = 'Fixed Income' then       case        when ISNULL(SM_SEC_TYPE_i2, '') = 'GOVT'           and ISNULL(SM_SEC_GROUP_i2, '') = 'BND'           and ISNULL(EMERGING_MARKET_i2, -1) = 0            then 'GOV'        when ISNULL(SM_SEC_TYPE_i2, '') = 'GOVT'           and ISNULL(SM_SEC_GROUP_i2, '') = 'IBND'           and ISNULL(EMERGING_MARKET_i2, -1) = 0           then 'IGOV'        --when coalesce(i.SM_SEC_TYPE, t.SM_SEC_TYPE) = 'GOVT'         --  and coalesce(i.SM_SEC_GROUP, t.SM_SEC_GROUP) in ('BND', 'IBND')         --  and i.EMERGING_MARKET = 0         --  then 'GOV TBILL'        --when not((coalesce(i.SM_SEC_TYPE, t.SM_SEC_TYPE) in ('LOCAL', 'AGENCY', 'MUNITAX', 'MUNI') OR (coalesce(i.SM_SEC_TYPE, t.SM_SEC_TYPE) = 'CORP' and i.COUNTRY = 'SP')))        --  and i.INSTRUMENT_GRADE = 'IG'         --  and coalesce(i.SM_SEC_GROUP, t.SM_SEC_GROUP) = 'BND'         --  and i.EMERGING_MARKET = 0         --  then 'IG BND'        --when not((coalesce(i.SM_SEC_TYPE, t.SM_SEC_TYPE) in ('LOCAL', 'AGENCY', 'MUNITAX', 'MUNI') OR (coalesce(i.SM_SEC_TYPE, t.SM_SEC_TYPE) = 'CORP' and i.COUNTRY = 'SP')))        --  and i.INSTRUMENT_GRADE = 'IG'         --  and coalesce(i.SM_SEC_GROUP, t.SM_SEC_GROUP) = 'IBND'         --  and i.EMERGING_MARKET = 0         --  then 'IG IBND'         --when not((coalesce(i.SM_SEC_TYPE, t.SM_SEC_TYPE) in ('LOCAL', 'AGENCY', 'MUNITAX', 'MUNI') OR (coalesce(i.SM_SEC_TYPE, t.SM_SEC_TYPE) = 'CORP' and i.COUNTRY = 'SP')))        --  and i.INSTRUMENT_GRADE = 'HY'         --  and coalesce(i.SM_SEC_GROUP, t.SM_SEC_GROUP) = 'BND'         --  and i.EMERGING_MARKET = 0         --  then 'HY BND'         --when not((coalesce(i.SM_SEC_TYPE, t.SM_SEC_TYPE) in ('LOCAL', 'AGENCY', 'MUNITAX', 'MUNI') OR (coalesce(i.SM_SEC_TYPE, t.SM_SEC_TYPE) = 'CORP' and i.COUNTRY = 'SP')))        --  and i.INSTRUMENT_GRADE = 'HY' and coalesce(i.SM_SEC_GROUP, t.SM_SEC_GROUP) = 'IBND'         --  and i.EMERGING_MARKET = 0         --  then 'HY IBND'         when ISNULL(SM_SEC_TYPE_i2, '') in ('TBILL', 'AGENCY', 'MUNI', 'MUNICP', 'MVRDN')          and ISNULL(SM_SEC_GROUP_i2, '') = 'CASH'           and ISNULL(EMERGING_MARKET_i2, -1) = 0            then 'GOVBIL'        --when coalesce(i.SM_SEC_GROUP, t.SM_SEC_GROUP) in ('BND', 'IBND') and i.INSTRUMENT_GRADE = 'IG' and i.EMERGING_MARKET = 0  then 'COV'        when ISNULL(SM_SEC_GROUP_i2, '') in ('BND', 'IBND')           and ISNULL(DESC_INSTMT2_i2, '') in ('COVERED', 'PFANDBRF')           then 'COV'        when (ISNULL(SM_SEC_TYPE_i2, '') = 'ABS' and ISNULL(SM_SEC_GROUP_i2, '') = 'ABS' and ISNULL(BONDTYPE_i2,'') like '%MBS%') OR          (ISNULL(SM_SEC_GROUP_i2, '') = 'CMBS' and ISNULL(BONDTYPE_i2, '')='SFR' and ISNULL(CURRENCY_i2, '')='USD')           then 'RMBS'        when ISNULL(SM_SEC_GROUP_i2, '') = 'CMBS'           and not (ISNULL(BONDTYPE_i2, '')='SFR' and ISNULL(CURRENCY_i2,'')='USD')           then 'CMBS'        when (ISNULL(SM_SEC_TYPE_i2, '') = 'CBO'           and ISNULL(SM_SEC_GROUP_i2, '') = 'BND')           OR           (ISNULL(SM_SEC_TYPE_i2, '') = 'ABS'           and ISNULL(SM_SEC_GROUP_i2, '') = 'ABS'           and ISNULL(BONDTYPE_i2, '') in ('CBO', 'CDO', 'CLO'))           then 'CDO'        when ISNULL(SM_SEC_GROUP_i2, '') in ('BND', 'IBND')           and ISNULL(SM_SEC_TYPE_i2, '') = 'CORP'          and not ((ISNULL(SM_SEC_TYPE_i2, '') in ('LOCAL', 'AGENCY', 'MUNITAX', 'MUNI')) OR (RISK_COUNTRY_i2 = 'SP' and ISNULL(SM_SEC_TYPE_i2, '') = 'CORP'))          and ISNULL(DESC_INSTMT2_i2, '') not in ('COVERED', 'PFANDBRF')           and ISNULL(EMERGING_MARKET_i2, -1)=0          and ISNULL(INSTRUMENT_GRADE_i2, '')='IG'          and ISNULL(LEH_INDUSTRY_i2, '')!='SOVE'          then 'IG CORP'        when ISNULL(SM_SEC_GROUP_i2, '') in ('BND', 'IBND')           and ISNULL(SM_SEC_TYPE_i2, '') = 'CORP'          and not ((ISNULL(SM_SEC_TYPE_i2, '') in ('LOCAL', 'AGENCY', 'MUNITAX', 'MUNI')) OR (RISK_COUNTRY_i2 = 'SP' and ISNULL(SM_SEC_TYPE_i2, '') = 'CORP'))          and ISNULL(DESC_INSTMT2_i2, '') not in ('COVERED', 'PFANDBRF')           and ISNULL(EMERGING_MARKET_i2, -1)=0          and ISNULL(INSTRUMENT_GRADE_i2, '') NOT IN ('IG', 'HY')          and ISNULL(LEH_INDUSTRY_i2, '')!='SOVE'          then 'NR CORP'        when ISNULL(SM_SEC_GROUP_i2, '') in ('BND', 'IBND')           and ISNULL(SM_SEC_TYPE_i2, '') = 'CORP'          and not ((ISNULL(SM_SEC_TYPE_i2, '') in ('LOCAL', 'AGENCY', 'MUNITAX', 'MUNI')) OR (RISK_COUNTRY_i2 = 'SP' and ISNULL(SM_SEC_TYPE_i2, '') = 'CORP'))          and ISNULL(DESC_INSTMT2_i2, '') not in ('COVERED', 'PFANDBRF')           and ISNULL(EMERGING_MARKET_i2, -1)=0          and ISNULL(INSTRUMENT_GRADE_i2, '')!='IG'          and ISNULL(LEH_INDUSTRY_i2, '')!='SOVE'          then 'HY CORP'        when ISNULL(SM_SEC_GROUP_i2, '') in ('BND', 'IBND')           and ISNULL(SM_SEC_TYPE_i2, '') = 'CORP'          --and not (ISNULL(SM_SEC_TYPE_i2, '') in ('LOCAL', 'AGENCY', 'MUNITAX', 'MUNI'))          and ISNULL(DESC_INSTMT2_i2, '') not in ('COVERED', 'PFANDBRF')           and ISNULL(EMERGING_MARKET_i2, -1)=1          and ISNULL(LEH_INDUSTRY_i2, '')!='SOVE'          then 'EM CORP'        when (ISNULL(SM_SEC_GROUP_i2, '') in ('BND', 'IBND')          and ISNULL(DESC_INSTMT2_i2, '') not in ('COVERED', 'PFANDBRF')           and (ISNULL(SM_SEC_TYPE_i2, '') in ('LOCAL', 'AGENCY', 'MUNITAX', 'MUNI') OR (ISNULL(SM_SEC_TYPE_i2, '') = 'CORP' and ISNULL(RISK_COUNTRY_i2, '') = 'SP')))          OR (ISNULL(SM_SEC_GROUP_i2, '') in ('BND', 'IBND')          and ISNULL(LEH_INDUSTRY_i2, '')='SOVE')          then 'SSA'        when ISNULL(SM_SEC_TYPE_i2, '') = 'GOVT'           and ISNULL(SM_SEC_GROUP_i2, '') in ('BND', 'IBND')           and ISNULL(EMERGING_MARKET_i2, -1) = 1           then 'EM GOV'        --when coalesce(i.SM_SEC_TYPE, t.SM_SEC_TYPE) != 'GOVT'         --  and coalesce(i.SM_SEC_GROUP, t.SM_SEC_GROUP) in ('BND', 'IBND')         --  and i.EMERGING_MARKET = 1         --  then 'EM NGOV'        --when coalesce(i.SM_SEC_TYPE, t.SM_SEC_TYPE) = 'GOVT' and coalesce(i.SM_SEC_GROUP, t.SM_SEC_GROUP) in ('BND', 'IBND') and i.EMERGING_MARKET = 1 then 'EM GOV TBILL'        when ISNULL(SM_SEC_TYPE_i2, '') in ('TBILL', 'AGENCY', 'MUNI', 'MUNICP', 'MVRDN')          and ISNULL(SM_SEC_GROUP_i2, '') = 'CASH'           and ISNULL(EMERGING_MARKET_i2, -1) = 1            then 'EM GOVBIL'        --when ISNULL(SM_SEC_GROUP_i2, '') = 'ABS' then 'ABS'        when (ISNULL(SM_SEC_TYPE_i2, '') = 'ABS'          and ISNULL(SM_SEC_GROUP_i2, '') = 'ABS'          and ISNULL(BONDTYPE_i2, '') not in ('CBO', 'CDO', 'CLO')         and not (ISNULL(BONDTYPE_i2, '') like '%MBS%'))          OR (ISNULL(SM_SEC_GROUP_i2, '') in ('MBS', 'CMO'))          then 'ABS'        --when coalesce(i.SM_SEC_GROUP, t.SM_SEC_GROUP) = 'ARM' then 'ARM'        --when coalesce(i.SM_SEC_GROUP, t.SM_SEC_GROUP) = 'CMBS' then 'CMBS'        --when coalesce(i.SM_SEC_GROUP, t.SM_SEC_GROUP) = 'CMO' then 'CMO'        --when coalesce(i.SM_SEC_GROUP, t.SM_SEC_GROUP) = 'MBS' then 'MBS'        when ISNULL(SM_SEC_GROUP_i2, '') = 'SWAP'           and ISNULL(SM_SEC_TYPE_i2, '') = 'CDSWAP'          and ISNULL(SEC_DESC2_i2,'') = 'CDS'          then 'SCDS'        when ISNULL(SM_SEC_GROUP_i2, '') = 'SWAP'           and ISNULL(SM_SEC_TYPE_i2, '') = 'CDSWAP'          and ISNULL(SEC_DESC2_i2,'') != 'CDS'          then 'ICDS'        when ISNULL(SM_SEC_GROUP_i2, '') = 'SWAP'           and ISNULL(SM_SEC_TYPE_i2, '') = 'SWAP'           and ISNULL(SEC_DESC2_i2, '')='IRS'          then 'IRS'        when ISNULL(SM_SEC_GROUP_i2, '') = 'SWAP'           and ISNULL(SM_SEC_TYPE_i2, '') = 'SWAP'           and ISNULL(SEC_DESC2_i2,'')='BASIS'          then 'BASIS'           when ISNULL(SM_SEC_GROUP_i2, '') = 'SWAP'           and ISNULL(SM_SEC_TYPE_i2, '') = 'SWAP'           and ISNULL(SEC_DESC2_i2,'')='ZERO'          then 'ZCS'        --when coalesce(i.SM_SEC_GROUP, t.SM_SEC_GROUP) = 'SWAP'         --  and coalesce(i.SM_SEC_TYPE, t.SM_SEC_TYPE) != 'CDSWAP'         --  and SEC_DESC1_o='IFS'         --  then 'IFS'        when ISNULL(SM_SEC_GROUP_i2, '') = 'SWAP'           and ISNULL(SM_SEC_TYPE_i2, '') = 'SWAP'           and ISNULL(SEC_DESC2_i2, '') in ('IFS', 'LPI')          then 'IFS'        WHEN ISNULL(SM_SEC_GROUP_i2, '') = 'SWAP'         AND ISNULL(SM_SEC_TYPE_i2, '') = 'SWAP'         AND ISNULL(SEC_DESC2_i2, '') = 'OIS'         THEN 'OIS'           when ISNULL(SM_SEC_GROUP_i2, '') = 'SWAP'           and ISNULL(SM_SEC_TYPE_i2, '') = 'SWAP'           and ISNULL(SEC_DESC2_i2, '')='ASP'          then 'ASWP'           when ISNULL(SM_SEC_GROUP_i2, '') = 'SWAP'           and ISNULL(SM_SEC_TYPE_i2, '') = 'CSWAP'           and CUSIP_SWAP_AMORT_i2 is NULL          then 'CCS'           when ISNULL(SM_SEC_GROUP_i2, '') = 'SWAP'           and ISNULL(SM_SEC_TYPE_i2, '') = 'CSWAP'           and CUSIP_SWAP_AMORT_i2 is not NULL          then 'CASWP'        when ISNULL(SM_SEC_TYPE_i2, '') = 'FIN'           and ISNULL(SM_SEC_GROUP_i2, '') = 'FUTURE'           and ISNULL(FUTURE_CLASS_i2, '')='INTR'          then 'IRFUT'        when ISNULL(SM_SEC_TYPE_i2, '') = 'FIN'           and ISNULL(SM_SEC_GROUP_i2, '') = 'FUTURE'           and ISNULL(FUTURE_CLASS_i2, '') in ('GBOND', 'CBND')          then 'BNDFUT'        when ISNULL(SM_SEC_TYPE_i2, '') = 'FUTURE'           and ISNULL(SM_SEC_GROUP_i2, '') = 'OPTION'           then 'OPTFUT'        when ISNULL(SM_SEC_TYPE_i2, '') = 'PFD'           and ISNULL(SM_SEC_GROUP_i2, '') = 'EQUITY'           then 'PFD'         when ISNULL(SM_SEC_GROUP_i2, '') = 'SWAP'           AND ISNULL(SM_SEC_TYPE_i2, '') = 'TRSWAP'          AND ISNULL(SEC_DESC2_i2, '') = 'FI'          then 'FI TRS'         when ISNULL(SM_SEC_GROUP_i2, '') = 'SYNTH'           AND ISNULL(SM_SEC_TYPE_i2, '') = 'SWAPTION'          AND ISNULL(SEC_DESC2_i2, '') = 'CDX'          then 'CDSWAPTION'        --when coalesce(i.SM_SEC_TYPE, t.SM_SEC_TYPE) = 'CDSWAP'         --  then 'SCDS'  --THIS NEEDS TO BE SPLIT WITH MORE INFORMATION        else 'FIDD OTHER'       end       when DEALING_DESK_o = 'Equity' then       case        when ISNULL(SM_SEC_GROUP_i2, '') = 'BND'         AND ISNULL(SM_SEC_TYPE_i2, '') = 'CORP'           then 'CONV BOND'        when ISNULL(SM_SEC_GROUP_i2, '') = 'EQUITY'          AND ISNULL(SM_SEC_TYPE_i2, '') = 'EQUITY'          AND MTG_SUBTYPE_t in ('ETF-E', 'ETF-F')                then 'ETF'        when ISNULL(SM_SEC_GROUP_i2, '') = 'EQUITY'          AND ISNULL(SM_SEC_TYPE_i2, '') = 'EQUITY'          AND ISNULL(MTG_SUBTYPE_t,'') not in ('ETF-E', 'ETF-F')                then 'EQUITIES'        when ISNULL(SM_SEC_GROUP_i2, '') = 'EQUITY'          AND ISNULL(SM_SEC_TYPE_i2, '') = 'PFD'          then 'CONV BOND'        when ISNULL(SM_SEC_GROUP_i2, '') = 'EQUITY'          AND ISNULL(SM_SEC_TYPE_i2, '') = 'WARRANT'          then 'EQUITIES'        when ISNULL(SM_SEC_GROUP_i2, '') = 'FUND'          AND ISNULL(SM_SEC_TYPE_i2, '') IN ('CLOSED_END','REIT')          then 'EQUITIES'        when ISNULL(SM_SEC_GROUP_i2, '') = 'FUTURE'          AND ISNULL(SM_SEC_TYPE_i2, '') IN ('FIN','GENERIC','INDEX')          then 'EQUITY FUTURES'        when ISNULL(SM_SEC_GROUP_i2, '') = 'OPTION'          AND ISNULL(SM_SEC_TYPE_i2, '') IN ('EQUITY','OTC')          then 'ET Options'        when ISNULL(SM_SEC_GROUP_i2, '') = 'SWAP'          AND ISNULL(SM_SEC_TYPE_i2, '') IN ('TRSWAP')          then 'TRS'        else 'EQDD OTHER'        --else concat(rtrim(coalesce(i.SM_SEC_GROUP, t.SM_SEC_GROUP)),'/',ltrim(coalesce(i.SM_SEC_TYPE, t.SM_SEC_TYPE)))       end       when DEALING_DESK_o = 'Leveraged Finance' then       case        when ISNULL(SM_SEC_TYPE_i2, '') = 'TERM'           and ISNULL(SM_SEC_GROUP_i2, '') = 'LOAN'          then 'SYND LOAN'        when ISNULL(SM_SEC_TYPE_i2, '') = 'EQUITY'           and ISNULL(SM_SEC_GROUP_i2, '') = 'EQUITY'          then 'STAPLED EQUITIES'        when ISNULL(SM_SEC_TYPE_i2,'') = 'WARRANT'         and  ISNULL(SM_SEC_GROUP_i2,'') = 'EQUITY'         then 'EQUITY WARRANT'        else 'LLDD OTHER'       end       when DEALING_DESK_o = 'DMG' then       case         when ISNULL(SM_SEC_GROUP_i2, '') = 'BND'          AND ISNULL(SM_SEC_TYPE_i2, '') = 'GOVT'         AND ISNULL(EMERGING_MARKET_i2, -1) = 0         THEN 'GOV'        WHEN ISNULL(SM_SEC_GROUP_i2, '') = 'SWAP'         AND ISNULL(SM_SEC_TYPE_i2, '') = 'SWAP'         AND ISNULL(SEC_DESC2_i2, '') = 'IRS'         THEN 'IRS'        WHEN ISNULL(SM_SEC_GROUP_i2, '') = 'SWAP'         AND ISNULL(SM_SEC_TYPE_i2, '') = 'SWAP'         AND ISNULL(SEC_DESC2_i2, '') IN ( 'IFS', 'LPI')         THEN 'IFS'        WHEN ISNULL(SM_SEC_GROUP_i2, '') = 'SWAP'         AND ISNULL(SM_SEC_TYPE_i2, '') = 'TRSWAP'         THEN 'TRS'        WHEN ISNULL(SM_SEC_GROUP_i2, '') = 'SWAP'         AND ISNULL(SM_SEC_TYPE_i2, '') = 'SWAP'         AND ISNULL(SEC_DESC2_i2, '') = 'OIS'         THEN 'OIS'        WHEN ISNULL(SM_SEC_GROUP_i2, '') = 'SWAP'         AND ISNULL(SM_SEC_TYPE_i2, '') = 'CDSWAP'         AND ISNULL(SEC_DESC2_i2, '') = 'CDS'         THEN 'SCDS'        WHEN ISNULL(SM_SEC_GROUP_i2, '') = 'SWAP'         AND ISNULL(SM_SEC_TYPE_i2, '') = 'CDSWAP'         AND ISNULL(SEC_DESC2_i2, '') != 'CDS'         THEN 'ICDS'        WHEN ISNULL(SM_SEC_GROUP_i2, '') = 'OPTION'         AND ISNULL(SM_SEC_TYPE_i2, '') = 'EQUITY'         THEN 'EQOPT'        WHEN ISNULL(SM_SEC_GROUP_i2, '') = 'OPTION'         AND ISNULL(SM_SEC_TYPE_i2, '') = 'CUROTC'         THEN 'FXOPT'        WHEN ISNULL(SM_SEC_GROUP_i2, '') = 'SWAP'         AND ISNULL(SM_SEC_TYPE_i2, '') = 'SWAP'         AND ISNULL(SEC_DESC2_i2, '') = 'ASWP'         THEN 'ASWP'        WHEN ISNULL(SM_SEC_GROUP_i2, '') = 'IBND'         AND ISNULL(SM_SEC_TYPE_i2, '') = 'GOVT'         AND ISNULL(EMERGING_MARKET_i2, -1) = 0         THEN 'IGOV'        WHEN ISNULL(SM_SEC_GROUP_i2, '') in ('IBND', 'BND')         AND ISNULL(SM_SEC_TYPE_i2, '') = 'GOVT'         AND ISNULL(EMERGING_MARKET_i2, -1) = 1         THEN 'EM GOV'        WHEN ISNULL(SM_SEC_GROUP_i2, '') = 'SWAP'         AND ISNULL(SM_SEC_TYPE_i2, '') = 'SWAP'         AND ISNULL(SEC_DESC2_i2, '') = 'BASIS'         THEN 'BASIS'        WHEN ISNULL(SM_SEC_GROUP_i2, '') = 'SWAP'         AND ISNULL(SM_SEC_TYPE_i2, '') = 'SWAP'         AND ISNULL(SEC_DESC2_i2, '') = 'ZERO'         THEN 'ZCS'        WHEN ISNULL(SM_SEC_GROUP_i2, '') = 'SWAP'         AND ISNULL(SM_SEC_TYPE_i2, '') = 'CSWAP'         AND CUSIP_SWAP_AMORT_i2 IS NULL         THEN 'CCS'        WHEN ISNULL(SM_SEC_GROUP_i2, '') = 'SWAP'         AND ISNULL(SM_SEC_TYPE_i2, '') = 'CSWAP'         AND CUSIP_SWAP_AMORT_i2 IS NOT NULL         THEN 'CASWP'        WHEN ISNULL(SM_SEC_GROUP_i2, '') = 'SYNTH'         AND ISNULL(SM_SEC_TYPE_i2, '') = 'SWAPTION'         AND ISNULL(SEC_DESC2_i2, '') = 'CDX'         THEN 'CDSWAPTION'        ELSE 'DMG OTHER'       END       WHEN DEALING_DESK_o = 'CASH' THEN       CASE         WHEN ISNULL(SM_SEC_GROUP_I2, '') = 'CASH'         AND ISNULL(SM_SEC_TYPE_I2, '') = 'CP'         THEN 'CP'        WHEN ISNULL(SM_SEC_GROUP_I2, '') = 'CASH'         AND ISNULL(SM_SEC_TYPE_I2, '') = 'CD'         THEN 'CD'        WHEN ISNULL(SM_SEC_GROUP_I2, '') = 'CASH'         AND ISNULL(SM_SEC_TYPE_i2, '') = 'TBILL'         THEN 'TBILL'        ELSE 'CASH OTHER'       END       WHEN DEALING_DESK_o = 'FX' THEN       CASE         WHEN ISNULL(SM_SEC_GROUP_I2, '') = 'FX'         AND ISNULL(SM_SEC_TYPE_I2, '') = 'SPOT'         THEN 'SPOT'        WHEN ISNULL(SM_SEC_GROUP_I2, '') = 'FX'         AND ISNULL(SM_SEC_TYPE_I2, '') = 'FWRD'         THEN 'FWRD'        WHEN ISNULL(SM_SEC_GROUP_I2, '') = 'OPTION'         AND ISNULL(SM_SEC_TYPE_I2, '') = 'CUROTC'         THEN 'OPTION'        ELSE 'FX OTHER'       END      else 'OTHER'     end as ASSET_INST_TYPE,       case       when DEALING_DESK_o = 'Fixed Income' then       case        when ISNULL(SM_SEC_TYPE_i3, '') = 'GOVT'           and ISNULL(SM_SEC_GROUP_i3, '') = 'BND'           and ISNULL(EMERGING_MARKET_i3, -1) = 0            then 'GOV'        when ISNULL(SM_SEC_TYPE_i3, '') = 'GOVT'           and ISNULL(SM_SEC_GROUP_i3, '') = 'IBND'           and ISNULL(EMERGING_MARKET_i3, -1) = 0           then 'IGOV'        --when coalesce(i.SM_SEC_TYPE, t.SM_SEC_TYPE) = 'GOVT'         --  and coalesce(i.SM_SEC_GROUP, t.SM_SEC_GROUP) in ('BND', 'IBND')         --  and i.EMERGING_MARKET = 0         --  then 'GOV TBILL'        --when not((coalesce(i.SM_SEC_TYPE, t.SM_SEC_TYPE) in ('LOCAL', 'AGENCY', 'MUNITAX', 'MUNI') OR (coalesce(i.SM_SEC_TYPE, t.SM_SEC_TYPE) = 'CORP' and i.COUNTRY = 'SP')))        --  and i.INSTRUMENT_GRADE = 'IG'         --  and coalesce(i.SM_SEC_GROUP, t.SM_SEC_GROUP) = 'BND'         --  and i.EMERGING_MARKET = 0         --  then 'IG BND'        --when not((coalesce(i.SM_SEC_TYPE, t.SM_SEC_TYPE) in ('LOCAL', 'AGENCY', 'MUNITAX', 'MUNI') OR (coalesce(i.SM_SEC_TYPE, t.SM_SEC_TYPE) = 'CORP' and i.COUNTRY = 'SP')))        --  and i.INSTRUMENT_GRADE = 'IG'         --  and coalesce(i.SM_SEC_GROUP, t.SM_SEC_GROUP) = 'IBND'         --  and i.EMERGING_MARKET = 0         --  then 'IG IBND'         --when not((coalesce(i.SM_SEC_TYPE, t.SM_SEC_TYPE) in ('LOCAL', 'AGENCY', 'MUNITAX', 'MUNI') OR (coalesce(i.SM_SEC_TYPE, t.SM_SEC_TYPE) = 'CORP' and i.COUNTRY = 'SP')))        --  and i.INSTRUMENT_GRADE = 'HY'         --  and coalesce(i.SM_SEC_GROUP, t.SM_SEC_GROUP) = 'BND'         --  and i.EMERGING_MARKET = 0         --  then 'HY BND'         --when not((coalesce(i.SM_SEC_TYPE, t.SM_SEC_TYPE) in ('LOCAL', 'AGENCY', 'MUNITAX', 'MUNI') OR (coalesce(i.SM_SEC_TYPE, t.SM_SEC_TYPE) = 'CORP' and i.COUNTRY = 'SP')))        --  and i.INSTRUMENT_GRADE = 'HY' and coalesce(i.SM_SEC_GROUP, t.SM_SEC_GROUP) = 'IBND'         --  and i.EMERGING_MARKET = 0         --  then 'HY IBND'         when ISNULL(SM_SEC_TYPE_i3, '') in ('TBILL', 'AGENCY', 'MUNI', 'MUNICP', 'MVRDN')          and ISNULL(SM_SEC_GROUP_i3, '') = 'CASH'           and ISNULL(EMERGING_MARKET_i3, -1) = 0            then 'GOVBIL'        --when coalesce(i.SM_SEC_GROUP, t.SM_SEC_GROUP) in ('BND', 'IBND') and i.INSTRUMENT_GRADE = 'IG' and i.EMERGING_MARKET = 0  then 'COV'        when ISNULL(SM_SEC_GROUP_i3, '') in ('BND', 'IBND')           and ISNULL(DESC_INSTMT2_i3, '') in ('COVERED', 'PFANDBRF')           then 'COV'        when (ISNULL(SM_SEC_TYPE_i3, '') = 'ABS' and ISNULL(SM_SEC_GROUP_i3, '') = 'ABS' and ISNULL(BONDTYPE_i3,'') like '%MBS%') OR          (ISNULL(SM_SEC_GROUP_i3, '') = 'CMBS' and ISNULL(BONDTYPE_i3, '')='SFR' and ISNULL(CURRENCY_i3, '')='USD')           then 'RMBS'        when ISNULL(SM_SEC_GROUP_i3, '') = 'CMBS'           and not (ISNULL(BONDTYPE_i3, '')='SFR' and ISNULL(CURRENCY_i3,'')='USD')           then 'CMBS'        when (ISNULL(SM_SEC_TYPE_i3, '') = 'CBO'           and ISNULL(SM_SEC_GROUP_i3, '') = 'BND')           OR           (ISNULL(SM_SEC_TYPE_i3, '') = 'ABS'           and ISNULL(SM_SEC_GROUP_i3, '') = 'ABS'           and ISNULL(BONDTYPE_i3, '') in ('CBO', 'CDO', 'CLO'))           then 'CDO'        when ISNULL(SM_SEC_GROUP_i3, '') in ('BND', 'IBND')           and ISNULL(SM_SEC_TYPE_i3, '') = 'CORP'          and not ((ISNULL(SM_SEC_TYPE_i3, '') in ('LOCAL', 'AGENCY', 'MUNITAX', 'MUNI')) OR (RISK_COUNTRY_i3 = 'SP' and ISNULL(SM_SEC_TYPE_i3, '') = 'CORP'))          and ISNULL(DESC_INSTMT2_i3, '') not in ('COVERED', 'PFANDBRF')           and ISNULL(EMERGING_MARKET_i3, -1)=0          and ISNULL(INSTRUMENT_GRADE_i3, '')='IG'          and ISNULL(LEH_INDUSTRY_i3, '')!='SOVE'          then 'IG CORP'        when ISNULL(SM_SEC_GROUP_i2, '') in ('BND', 'IBND')           and ISNULL(SM_SEC_TYPE_i2, '') = 'CORP'          and not ((ISNULL(SM_SEC_TYPE_i2, '') in ('LOCAL', 'AGENCY', 'MUNITAX', 'MUNI')) OR (RISK_COUNTRY_i3 = 'SP' and ISNULL(SM_SEC_TYPE_i3, '') = 'CORP'))          and ISNULL(DESC_INSTMT2_i2, '') not in ('COVERED', 'PFANDBRF')           and ISNULL(EMERGING_MARKET_i2, -1)=0          and ISNULL(INSTRUMENT_GRADE_i2, '') NOT IN ('IG', 'HY')          and ISNULL(LEH_INDUSTRY_i2, '')!='SOVE'          then 'NR CORP'        when ISNULL(SM_SEC_GROUP_i3, '') in ('BND', 'IBND')           and ISNULL(SM_SEC_TYPE_i3, '') = 'CORP'          and not ((ISNULL(SM_SEC_TYPE_i3, '') in ('LOCAL', 'AGENCY', 'MUNITAX', 'MUNI')) OR (RISK_COUNTRY_i3 = 'SP' and ISNULL(SM_SEC_TYPE_i3, '') = 'CORP'))          and ISNULL(DESC_INSTMT2_i3, '') not in ('COVERED', 'PFANDBRF')           and ISNULL(EMERGING_MARKET_i3, -1)=0          and ISNULL(INSTRUMENT_GRADE_i3, '')!='IG'          and ISNULL(LEH_INDUSTRY_i3, '')!='SOVE'          then 'HY CORP'        when ISNULL(SM_SEC_GROUP_i3, '') in ('BND', 'IBND')           and ISNULL(SM_SEC_TYPE_i3, '') = 'CORP'          --and not (ISNULL(SM_SEC_TYPE_i3, '') in ('LOCAL', 'AGENCY', 'MUNITAX', 'MUNI'))          and ISNULL(DESC_INSTMT2_i3, '') not in ('COVERED', 'PFANDBRF')           and ISNULL(EMERGING_MARKET_i3, -1)=1          and ISNULL(LEH_INDUSTRY_i3, '')!='SOVE'          then 'EM CORP'        when (ISNULL(SM_SEC_GROUP_i3, '') in ('BND', 'IBND')          and ISNULL(DESC_INSTMT2_i3, '') not in ('COVERED', 'PFANDBRF')           and (ISNULL(SM_SEC_TYPE_i3, '') in ('LOCAL', 'AGENCY', 'MUNITAX', 'MUNI') OR (ISNULL(SM_SEC_TYPE_i3, '') = 'CORP' and ISNULL(RISK_COUNTRY_i3, '') = 'SP')))          OR (ISNULL(SM_SEC_GROUP_i3, '') in ('BND', 'IBND')          and ISNULL(LEH_INDUSTRY_i3, '')='SOVE')          then 'SSA'        when ISNULL(SM_SEC_TYPE_i3, '') = 'GOVT'           and ISNULL(SM_SEC_GROUP_i3, '') in ('BND', 'IBND')           and ISNULL(EMERGING_MARKET_i3, -1) = 1           then 'EM GOV'        --when coalesce(i.SM_SEC_TYPE, t.SM_SEC_TYPE) != 'GOVT'         --  and coalesce(i.SM_SEC_GROUP, t.SM_SEC_GROUP) in ('BND', 'IBND')         --  and i.EMERGING_MARKET = 1         --  then 'EM NGOV'        --when coalesce(i.SM_SEC_TYPE, t.SM_SEC_TYPE) = 'GOVT' and coalesce(i.SM_SEC_GROUP, t.SM_SEC_GROUP) in ('BND', 'IBND') and i.EMERGING_MARKET = 1 then 'EM GOV TBILL'        when ISNULL(SM_SEC_TYPE_i3, '') in ('TBILL', 'AGENCY', 'MUNI', 'MUNICP', 'MVRDN')          and ISNULL(SM_SEC_GROUP_i3, '') = 'CASH'           and ISNULL(EMERGING_MARKET_i3, -1) = 1            then 'EM GOVBIL'        --when ISNULL(SM_SEC_GROUP_i3, '') = 'ABS' then 'ABS'        when (ISNULL(SM_SEC_TYPE_i3, '') = 'ABS'          and ISNULL(SM_SEC_GROUP_i3, '') = 'ABS'          and ISNULL(BONDTYPE_i3, '') not in ('CBO', 'CDO', 'CLO')         and not (ISNULL(BONDTYPE_i3, '') like '%MBS%'))          OR (ISNULL(SM_SEC_GROUP_i3, '') in ('MBS', 'CMO'))          then 'ABS'        --when coalesce(i.SM_SEC_GROUP, t.SM_SEC_GROUP) = 'ARM' then 'ARM'        --when coalesce(i.SM_SEC_GROUP, t.SM_SEC_GROUP) = 'CMBS' then 'CMBS'        --when coalesce(i.SM_SEC_GROUP, t.SM_SEC_GROUP) = 'CMO' then 'CMO'        --when coalesce(i.SM_SEC_GROUP, t.SM_SEC_GROUP) = 'MBS' then 'MBS'        when ISNULL(SM_SEC_GROUP_i3, '') = 'SWAP'           and ISNULL(SM_SEC_TYPE_i3, '') = 'CDSWAP'          and ISNULL(SEC_DESC2_i3,'') = 'CDS'          then 'SCDS'        when ISNULL(SM_SEC_GROUP_i3, '') = 'SWAP'           and ISNULL(SM_SEC_TYPE_i3, '') = 'CDSWAP'          and ISNULL(SEC_DESC2_i3,'') != 'CDS'          then 'ICDS'        when ISNULL(SM_SEC_GROUP_i3, '') = 'SWAP'           and ISNULL(SM_SEC_TYPE_i3, '') = 'SWAP'           and ISNULL(SEC_DESC2_i3, '')='IRS'          then 'IRS'        when ISNULL(SM_SEC_GROUP_i3, '') = 'SWAP'           and ISNULL(SM_SEC_TYPE_i3, '') = 'SWAP'           and ISNULL(SEC_DESC2_i3,'')='BASIS'          then 'BASIS'           when ISNULL(SM_SEC_GROUP_i3, '') = 'SWAP'           and ISNULL(SM_SEC_TYPE_i3, '') = 'SWAP'           and ISNULL(SEC_DESC2_i3,'')='ZERO'          then 'ZCS'        --when coalesce(i.SM_SEC_GROUP, t.SM_SEC_GROUP) = 'SWAP'         --  and coalesce(i.SM_SEC_TYPE, t.SM_SEC_TYPE) != 'CDSWAP'         --  and SEC_DESC1_o='IFS'         --  then 'IFS'        when ISNULL(SM_SEC_GROUP_i3, '') = 'SWAP'           and ISNULL(SM_SEC_TYPE_i3, '') = 'SWAP'           and ISNULL(SEC_DESC2_i3, '') in ('IFS', 'LPI')          then 'IFS'        WHEN ISNULL(SM_SEC_GROUP_i3, '') = 'SWAP'         AND ISNULL(SM_SEC_TYPE_i3, '') = 'SWAP'         AND ISNULL(SEC_DESC2_i3, '') = 'OIS'         THEN 'OIS'           when ISNULL(SM_SEC_GROUP_i3, '') = 'SWAP'           and ISNULL(SM_SEC_TYPE_i3, '') = 'SWAP'           and ISNULL(SEC_DESC2_i3, '')='ASP'          then 'ASWP'           when ISNULL(SM_SEC_GROUP_i3, '') = 'SWAP'           and ISNULL(SM_SEC_TYPE_i3, '') = 'CSWAP'           and CUSIP_SWAP_AMORT_i3 is NULL          then 'CCS'           when ISNULL(SM_SEC_GROUP_i3, '') = 'SWAP'           and ISNULL(SM_SEC_TYPE_i3, '') = 'CSWAP'           and CUSIP_SWAP_AMORT_i3 is not NULL          then 'CASWP'        when ISNULL(SM_SEC_TYPE_i3, '') = 'FIN'           and ISNULL(SM_SEC_GROUP_i3, '') = 'FUTURE'           and ISNULL(FUTURE_CLASS_i3, '')='INTR'          then 'IRFUT'        when ISNULL(SM_SEC_TYPE_i3, '') = 'FIN'           and ISNULL(SM_SEC_GROUP_i3, '') = 'FUTURE'           and ISNULL(FUTURE_CLASS_i3, '') in ('GBOND', 'CBND')          then 'BNDFUT'        when ISNULL(SM_SEC_TYPE_i3, '') = 'FUTURE'           and ISNULL(SM_SEC_GROUP_i3, '') = 'OPTION'           then 'OPTFUT'        when ISNULL(SM_SEC_TYPE_i3, '') = 'PFD'           and ISNULL(SM_SEC_GROUP_i3, '') = 'EQUITY'           then 'PFD'         when ISNULL(SM_SEC_GROUP_i3, '') = 'SWAP'           AND ISNULL(SM_SEC_TYPE_i3, '') = 'TRSWAP'          AND ISNULL(SEC_DESC2_i3, '') = 'FI'          then 'FI TRS'         when ISNULL(SM_SEC_GROUP_i3, '') = 'SYNTH'           AND ISNULL(SM_SEC_TYPE_i3, '') = 'SWAPTION'          AND ISNULL(SEC_DESC2_i3, '') = 'CDX'          then 'CDSWAPTION'        --when coalesce(i.SM_SEC_TYPE, t.SM_SEC_TYPE) = 'CDSWAP'         --  then 'SCDS'  --THIS NEEDS TO BE SPLIT WITH MORE INFORMATION        else 'FIDD OTHER'       end       when DEALING_DESK_o = 'Equity' then       case        when ISNULL(SM_SEC_GROUP_i3, '') = 'BND'         AND ISNULL(SM_SEC_TYPE_i3, '') = 'CORP'           then 'CONV BOND'        when ISNULL(SM_SEC_GROUP_i3, '') = 'EQUITY'          AND ISNULL(SM_SEC_TYPE_i3, '') = 'EQUITY'          AND MTG_SUBTYPE_t in ('ETF-E', 'ETF-F')                then 'ETF'        when ISNULL(SM_SEC_GROUP_i3, '') = 'EQUITY'          AND ISNULL(SM_SEC_TYPE_i3, '') = 'EQUITY'          AND ISNULL(MTG_SUBTYPE_t,'') not in ('ETF-E', 'ETF-F')                then 'EQUITIES'        when ISNULL(SM_SEC_GROUP_i3, '') = 'EQUITY'          AND ISNULL(SM_SEC_TYPE_i3, '') = 'PFD'          then 'CONV BOND'        when ISNULL(SM_SEC_GROUP_i3, '') = 'EQUITY'          AND ISNULL(SM_SEC_TYPE_i3, '') = 'WARRANT'          then 'EQUITIES'        when ISNULL(SM_SEC_GROUP_i3, '') = 'FUND'          AND ISNULL(SM_SEC_TYPE_i3, '') IN ('CLOSED_END','REIT')          then 'EQUITIES'        when ISNULL(SM_SEC_GROUP_i3, '') = 'FUTURE'          AND ISNULL(SM_SEC_TYPE_i3, '') IN ('FIN','GENERIC','INDEX')          then 'EQUITY FUTURES'        when ISNULL(SM_SEC_GROUP_i3, '') = 'OPTION'          AND ISNULL(SM_SEC_TYPE_i3, '') IN ('EQUITY','OTC')          then 'ET Options'        when ISNULL(SM_SEC_GROUP_i3, '') = 'SWAP'          AND ISNULL(SM_SEC_TYPE_i3, '') IN ('TRSWAP')          then 'TRS'        else 'EQDD OTHER'        --else concat(rtrim(coalesce(i.SM_SEC_GROUP, t.SM_SEC_GROUP)),'/',ltrim(coalesce(i.SM_SEC_TYPE, t.SM_SEC_TYPE)))       end       when DEALING_DESK_o = 'Leveraged Finance' then       case        when ISNULL(SM_SEC_TYPE_i3, '') = 'TERM'           and ISNULL(SM_SEC_GROUP_i3, '') = 'LOAN'          then 'SYND LOAN'        when ISNULL(SM_SEC_TYPE_i3, '') = 'EQUITY'           and ISNULL(SM_SEC_GROUP_i3, '') = 'EQUITY'          then 'STAPLED EQUITIES'        when ISNULL(SM_SEC_TYPE_i3,'') = 'WARRANT'         and ISNULL(SM_SEC_GROUP_i3,'') = 'EQUITY'         then 'EQUITY WARRANT'        else 'LLDD OTHER'       end       when DEALING_DESK_o = 'DMG' then       case         when ISNULL(SM_SEC_GROUP_i3, '') = 'BND'          AND ISNULL(SM_SEC_TYPE_i3, '') = 'GOVT'         AND ISNULL(EMERGING_MARKET_i3, -1) = 0         THEN 'GOV'        WHEN ISNULL(SM_SEC_GROUP_i3, '') = 'SWAP'         AND ISNULL(SM_SEC_TYPE_i3, '') = 'SWAP'         AND ISNULL(SEC_DESC2_i3, '') = 'IRS'         THEN 'IRS'        WHEN ISNULL(SM_SEC_GROUP_i3, '') = 'SWAP'         AND ISNULL(SM_SEC_TYPE_i3, '') = 'SWAP'         AND ISNULL(SEC_DESC2_i3, '') IN ( 'IFS', 'LPI')         THEN 'IFS'        WHEN ISNULL(SM_SEC_GROUP_i3, '') = 'SWAP'         AND ISNULL(SM_SEC_TYPE_i3, '') = 'TRSWAP'         THEN 'TRS'        WHEN ISNULL(SM_SEC_GROUP_i3, '') = 'SWAP'         AND ISNULL(SM_SEC_TYPE_i3, '') = 'SWAP'         AND ISNULL(SEC_DESC2_i3, '') = 'OIS'         THEN 'OIS'        WHEN ISNULL(SM_SEC_GROUP_i3, '') = 'SWAP'         AND ISNULL(SM_SEC_TYPE_i3, '') = 'CDSWAP'         AND ISNULL(SEC_DESC2_i3, '') = 'CDS'         THEN 'SCDS'        WHEN ISNULL(SM_SEC_GROUP_i3, '') = 'SWAP'         AND ISNULL(SM_SEC_TYPE_i3, '') = 'CDSWAP'         AND ISNULL(SEC_DESC2_i3, '') != 'CDS'         THEN 'ICDS'        WHEN ISNULL(SM_SEC_GROUP_i3, '') = 'OPTION'         AND ISNULL(SM_SEC_TYPE_i3, '') = 'EQUITY'         THEN 'EQOPT'        WHEN ISNULL(SM_SEC_GROUP_i3, '') = 'OPTION'         AND ISNULL(SM_SEC_TYPE_i3, '') = 'CUROTC'         THEN 'FXOPT'        WHEN ISNULL(SM_SEC_GROUP_i3, '') = 'SWAP'         AND ISNULL(SM_SEC_TYPE_i3, '') = 'SWAP'         AND ISNULL(SEC_DESC2_i3, '') = 'ASWP'         THEN 'ASWP'        WHEN ISNULL(SM_SEC_GROUP_i3, '') in ('IBND', 'BND')         AND ISNULL(SM_SEC_TYPE_i3, '') = 'GOVT'         AND ISNULL(EMERGING_MARKET_i3, -1) = 1         THEN 'EM GOV'        WHEN ISNULL(SM_SEC_GROUP_i3, '') = 'SWAP'         AND ISNULL(SM_SEC_TYPE_i3, '') = 'SWAP'         AND ISNULL(SEC_DESC2_i3, '') = 'BASIS'         THEN 'BASIS'        WHEN ISNULL(SM_SEC_GROUP_i3, '') = 'SWAP'         AND ISNULL(SM_SEC_TYPE_i3, '') = 'SWAP'         AND ISNULL(SEC_DESC2_i3, '') = 'ZERO'         THEN 'ZCS'        WHEN ISNULL(SM_SEC_GROUP_i3, '') = 'SWAP'         AND ISNULL(SM_SEC_TYPE_i3, '') = 'CSWAP'         AND CUSIP_SWAP_AMORT_i3 IS NULL         THEN 'CCS'        WHEN ISNULL(SM_SEC_GROUP_i3, '') = 'SWAP'         AND ISNULL(SM_SEC_TYPE_i3, '') = 'CSWAP'         AND CUSIP_SWAP_AMORT_i3 IS NOT NULL         THEN 'CASWP'        WHEN ISNULL(SM_SEC_GROUP_i3, '') = 'SYNTH'         AND ISNULL(SM_SEC_TYPE_i3, '') = 'SWAPTION'         AND ISNULL(SEC_DESC2_i3, '') = 'CDX'         THEN 'CDSWAPTION'        WHEN ISNULL(SM_SEC_GROUP_i3, '') = 'SWAP'         AND ISNULL(SM_SEC_TYPE_i3, '') = 'SWAP'         AND ISNULL(SEC_DESC2_i3, '') != 'ASWP'         THEN 'SWAP'        ELSE 'DMG OTHER'       END       WHEN DEALING_DESK_o = 'CASH' THEN       CASE WHEN ISNULL(SM_SEC_GROUP_I3, '') = 'CASH'         AND ISNULL(SM_SEC_TYPE_I3, '') = 'CP'         THEN 'CP'        WHEN ISNULL(SM_SEC_GROUP_I3, '') = 'CASH'         AND ISNULL(SM_SEC_TYPE_i3, '') = 'CD'         THEN 'CD'        WHEN ISNULL(SM_SEC_GROUP_I3, '') = 'CASH'         AND ISNULL(SM_SEC_TYPE_i3, '') = 'TBILL'         THEN 'TBILL'        ELSE 'CASH OTHER' END       WHEN DEALING_DESK_o = 'FX' THEN       CASE WHEN ISNULL(SM_SEC_GROUP_I3, '') = 'FX'         AND ISNULL(SM_SEC_TYPE_I3, '') = 'SPOT'         THEN 'SPOT'        WHEN ISNULL(SM_SEC_GROUP_I3, '') = 'FX'         AND ISNULL(SM_SEC_TYPE_i3, '') = 'FWRD'         THEN 'FWRD'        WHEN ISNULL(SM_SEC_GROUP_I3, '') = 'OPTION'         AND ISNULL(SM_SEC_TYPE_i3, '') = 'CUROTC'         THEN 'OPTION'        ELSE 'FX OTHER' END      else 'OTHER'     end as PRIMARY_MARKET_ASSET_INST_TYPE,     case      when DEALING_DESK_o = 'Fixed Income' then      case       when SM_SEC_GROUP_o in ('BND', 'IBND')         and SM_SEC_TYPE_o = 'CORP'        then 'CORP'       when SM_SEC_GROUP_o in ('ABS', 'CMBS', 'MBS', 'CMO' ,'ARM')         then SM_SEC_GROUP_o       when SM_SEC_GROUP_o in ('BND', 'IBND')         and SM_SEC_TYPE_o in ('LOCAL', 'AGENCY')        then 'SSA'       when SM_SEC_GROUP_o = 'BND'        and SM_SEC_TYPE_o = 'GOVT'        then 'GOV'       when SM_SEC_GROUP_o = 'IBND'        and SM_SEC_TYPE_o = 'GOVT'        then 'IGOV'       when SM_SEC_GROUP_o = 'CASH'        and SM_SEC_TYPE_o in ('TBILL', 'AGENCY', 'MUNI', 'MUNICP', 'MVRDN')        then 'GOVBIL'       when (SM_SEC_GROUP_o = 'FUTURE'         and SM_SEC_TYPE_o = 'FIN')        or        (SM_SEC_GROUP_o = 'OPTION'         and SM_SEC_TYPE_o = 'FUTURE')        then 'ETD'       when SM_SEC_GROUP_o = 'SWAP'        and SM_SEC_TYPE_o = 'SWAP'        and CHARINDEX('ASWP', SEC_DESC1_o) = 0        then 'SWAP'       when SM_SEC_GROUP_o = 'SWAP'        and SM_SEC_TYPE_o = 'SWAP'        and CHARINDEX('ASWP', SEC_DESC1_o) > 0        then 'ASWP'       when SM_SEC_GROUP_o = 'SWAP'        and SM_SEC_TYPE_o = 'CSWAP'        then 'CCS'       when SM_SEC_GROUP_o = 'SWAP'        and SM_SEC_TYPE_o = 'CDSWAP'        and NOT (ISNULL(SEC_DESC1_o, '') LIKE '%CDX%' OR ISNULL(SEC_DESC1_o, '') LIKE '%ITRAXX%' OR  ISNULL(SEC_DESC1_o, '') LIKE '%LCDX%' OR  ISNULL(SEC_DESC1_o, '') LIKE '%CMBS%' OR ISNULL(SEC_DESC1_o, '') LIKE '%ABX%')        then 'SCDS'       when SM_SEC_GROUP_o = 'SWAP'        and SM_SEC_TYPE_o = 'CDSWAP'        and  (ISNULL(SEC_DESC1_o, '') LIKE '%CDX%' OR ISNULL(SEC_DESC1_o, '') LIKE '%ITRAXX%' OR  ISNULL(SEC_DESC1_o, '') LIKE '%LCDX%' OR  ISNULL(SEC_DESC1_o, '') LIKE '%CMBS%' OR ISNULL(SEC_DESC1_o, '') LIKE '%ABX%')        then 'ICDS'       when SM_SEC_GROUP_o = 'EQUITY'        and SM_SEC_TYPE_o = 'PFD'        then 'PFD'        when ISNULL(SM_SEC_GROUP_o, '') = 'SWAP'         AND ISNULL(SM_SEC_TYPE_o, '') = 'TRSWAP'        then 'TRS'        when ISNULL(SM_SEC_GROUP_o, '') = 'SYNTH'         AND ISNULL(SM_SEC_TYPE_o, '') = 'SWAPTION'        then 'CDSWAPTION'      end       when DEALING_DESK_o = 'Equity' then       case       when ISNULL(SM_SEC_GROUP_o, '') = 'BND'        AND ISNULL(SM_SEC_TYPE_o, '') = 'CORP'         then 'CONV BOND'       when ISNULL(SM_SEC_GROUP_o, '') = 'EQUITY'        AND ISNULL(SM_SEC_TYPE_o, '') = 'EQUITY'            then 'EQUITIES'       when ISNULL(SM_SEC_GROUP_o, '') = 'EQUITY'        AND ISNULL(SM_SEC_TYPE_o, '') = 'PFD'        then 'CONV BOND'       when ISNULL(SM_SEC_GROUP_o, '') = 'EQUITY'        AND ISNULL(SM_SEC_TYPE_o, '') = 'WARRANT'        then 'EQUITIES'       when ISNULL(SM_SEC_GROUP_o, '') = 'FUND'        AND ISNULL(SM_SEC_TYPE_o, '') IN ('CLOSED_END','REIT')        then 'EQUITIES'       when ISNULL(SM_SEC_GROUP_o, '') = 'FUTURE'        AND ISNULL(SM_SEC_TYPE_o, '') IN ('FIN','GENERIC','INDEX')        then 'EQUITY FUTURES'       when ISNULL(SM_SEC_GROUP_o, '') = 'OPTION'        AND ISNULL(SM_SEC_TYPE_o, '') IN ('EQUITY','OTC')        then 'ET Options'       when ISNULL(SM_SEC_GROUP_o, '') = 'SWAP'        AND ISNULL(SM_SEC_TYPE_o, '') IN ('TRSWAP')        then 'TRS'      end      when DEALING_DESK_o = 'Leveraged Finance' then       case       when ISNULL(SM_SEC_GROUP_o, '') = 'LOAN'        AND ISNULL(SM_SEC_TYPE_o, '') = 'TERM'         then 'SYND LOAN'       when ISNULL(SM_SEC_GROUP_o, '') = 'EQUITY'        AND ISNULL(SM_SEC_TYPE_o, '') = 'EQUITY'            then 'STAPLED EQUITIES'       when ISNULL(SM_SEC_TYPE_o,'') = 'WARRANT'        and ISNULL(SM_SEC_GROUP_o,'') = 'EQUITY'        then 'EQUITY WARRANT'      end      when DEALING_DESK_o = 'DMG' then       case         when ISNULL(SM_SEC_GROUP_o, '') = 'BND'          AND ISNULL(SM_SEC_TYPE_o, '') = 'GOVT'         THEN 'GOV'        WHEN ISNULL(SM_SEC_GROUP_o, '') = 'SWAP'         AND ISNULL(SM_SEC_TYPE_o, '') = 'SWAP'         AND ISNULL(SEC_DESC1_o, '') NOT LIKE '%ASWP%'         THEN 'SWAP'        WHEN ISNULL(SM_SEC_GROUP_o, '') = 'SWAP'         AND ISNULL(SM_SEC_TYPE_o, '') = 'TRSWAP'         THEN 'TRS'        WHEN ISNULL(SM_SEC_GROUP_o, '') = 'SWAP'         AND ISNULL(SM_SEC_TYPE_o, '') = 'CDSWAP'         and NOT (ISNULL(SEC_DESC1_o, '') LIKE '%CDX%' OR ISNULL(SEC_DESC1_o, '') LIKE '%ITRAXX%' OR  ISNULL(SEC_DESC1_o, '') LIKE '%LCDX%' OR  ISNULL(SEC_DESC1_o, '') LIKE '%CMBS%' OR ISNULL(SEC_DESC1_o, '') LIKE '%ABX%')         THEN 'SCDS'        WHEN ISNULL(SM_SEC_GROUP_o, '') = 'SWAP'         AND ISNULL(SM_SEC_TYPE_o, '') = 'CDSWAP'         and  (ISNULL(SEC_DESC1_o, '') LIKE '%CDX%' OR ISNULL(SEC_DESC1_o, '') LIKE '%ITRAXX%' OR  ISNULL(SEC_DESC1_o, '') LIKE '%LCDX%' OR  ISNULL(SEC_DESC1_o, '') LIKE '%CMBS%' OR ISNULL(SEC_DESC1_o, '') LIKE '%ABX%')         THEN 'ICDS'        WHEN ISNULL(SM_SEC_GROUP_o, '') = 'OPTION'         AND ISNULL(SM_SEC_TYPE_o, '') = 'EQUITY'         THEN 'EQOPT'        WHEN ISNULL(SM_SEC_GROUP_o, '') = 'OPTION'         AND ISNULL(SM_SEC_TYPE_o, '') = 'CUROTC'         THEN 'FXOPT'        WHEN ISNULL(SM_SEC_GROUP_o, '') = 'SWAP'          AND ISNULL(SM_SEC_TYPE_o, '') = 'SWAP'         AND ISNULL(SEC_DESC1_o, '') LIKE '%ASWP%'         THEN 'ASWP'        WHEN ISNULL(SM_SEC_GROUP_o, '') = 'IBND'         AND ISNULL(SM_SEC_TYPE_o, '') = 'GOVT'         THEN 'IGOV'        WHEN ISNULL(SM_SEC_GROUP_o, '') = 'SWAP'         AND ISNULL(SM_SEC_TYPE_o, '') = 'CSWAP'         THEN 'CCS'        WHEN ISNULL(SM_SEC_GROUP_o, '') = 'SYNTH'         AND ISNULL(SM_SEC_TYPE_o, '') = 'SWAPTION'         THEN 'CDSWAPTION'        ELSE 'DMG OTHER'        END      WHEN DEALING_DESK_o = 'CASH' THEN       CASE         WHEN ISNULL(SM_SEC_GROUP_o, '') = 'CASH'         AND ISNULL(SM_SEC_TYPE_o, '') = 'CP'         THEN 'CP'        WHEN ISNULL(SM_SEC_GROUP_o, '') = 'CASH'         AND ISNULL(SM_SEC_TYPE_o, '') = 'CD'          THEN 'CD'        WHEN ISNULL(SM_SEC_GROUP_o, '') = 'CASH'         AND ISNULL(SM_SEC_TYPE_o, '') = 'TBILL'         THEN 'TBILL'        ELSE 'CASH OTHER'        END      WHEN DEALING_DESK_o = 'FX' THEN       CASE         WHEN ISNULL(SM_SEC_GROUP_o, '') = 'FX'         AND ISNULL(SM_SEC_TYPE_o, '') = 'SPOT'         THEN 'SPOT'        WHEN ISNULL(SM_SEC_GROUP_o, '') = 'FX'         AND ISNULL(SM_SEC_TYPE_o, '') = 'FWRD'          THEN 'FWRD'        WHEN ISNULL(SM_SEC_GROUP_o, '') = 'OPTION'         AND ISNULL(SM_SEC_TYPE_o, '') = 'CUROTC'         THEN 'OPTION'        ELSE 'FX OTHER'        END     end as ORDER_INST_TYPE,     CDS_TYPE_i2 AS CDS_TYPE,     --case     -- when coalesce(i.SM_SEC_GROUP, t.SM_SEC_GROUP) = 'SWAP'      --   and coalesce(i.SM_SEC_TYPE, t.SM_SEC_TYPE) = 'CDSWAP'     --   and i.CDS_TYPE!='S'     --   and i.DESC_INSTMT2 like '%CDX.NA.HY%'     --   then 1     --   else 0     --end as CDX_NA_HY,     --case     -- when coalesce(i.SM_SEC_GROUP, t.SM_SEC_GROUP) = 'SWAP'      --   and coalesce(i.SM_SEC_TYPE, t.SM_SEC_TYPE) = 'CDSWAP'     --     and i.CDS_TYPE!='S'     --   and i.DESC_INSTMT2 like '%CDX.EM%'     --   then 1     --   else 0     --end as CDX_EM,     case      when ISNULL(DESC_INSTMT2_i2,'') in ('HYBRID', 'HYBRID-P', 'AT1-P', 'LT2-P', 'T1-P', 'T2-P', 'TP-P', 'LT2-P')      or ISNULL(FLAG_CCN_i2,'') = 'Y'      then 1      else 0     end as HYBRID,     case      when ISNULL(DESC_INSTMT2_i2,'') in ('HYBRID', 'HYBRID-P', 'AT1-P', 'LT2-P', 'T1-P', 'T2-P', 'TP-P', 'LT2-P')      or ISNULL(FLAG_CCN_i2, '') = 'Y'      then DESC_INSTMT2_i2      else NULL     end as HYBRID_TYPE,     case       when TRD_PURPOSE_t = 'MG004'      then 1      else 0     end as FUTURE_ROLLS,     case       when ISNULL(SM_SEC_TYPE_i2, '') = 'GOVT' and ISNULL(SM_SEC_GROUP_i2, '') in ('BND', 'IBND')      and ISNULL(EMERGING_MARKET_i2, -1)=0      and UPDATE_INSTR_o ='MG.FI 5. Deal a'      and TRD_CURRENCY_t='GBP'      and CAST(EXECUTION_TIME_t AS time) between '16:00:00' and '16:30:00'      and MULTI_FUND_ID_p is not NULL      and ISNULL(ACTIVITY_TYPE_t, '') != 'MG.FI 1. Proces'      and ISNULL(VENUE_p, '') !=  'MANUAL PL'      then 1      else 0     end as [1615_DEALING],     case      when ISNULL(SM_SEC_TYPE_i2, '') = 'GOVT' and ISNULL(SM_SEC_GROUP_i2, '') in ('BND', 'IBND')      and ISNULL(EMERGING_MARKET_i2, -1)=0      and UPDATE_INSTR_o ='MG.FI 6. TWEB C'      and TRD_CURRENCY_t='GBP'      and CAST(EXECUTION_TIME_t AS time) >= '16:45:00'      and MULTI_FUND_ID_p is not NULL      and ISNULL(ACTIVITY_TYPE_t, '') != 'MG.FI 1. Proces'      and FULL_NAME_VENUE_p='TRADEWEB U.K. (FIX)'      then 1      --when coalesce(SM_SEC_TYPE_i2, t.SM_SEC_TYPE) = 'GOVT' and coalesce(SM_SEC_GROUP_i2, t.SM_SEC_GROUP) in ('BND', 'IBND')      --and TRD_CURRENCY_t='GBP'      --and VENUE_p='9471'      --and fix_tag 7024 = 10 --COMPLETE ONCE 'FIX TAG' IS AVAILABLE      --then 1      else 0     end as TWEB_CLOSE_DEALING,     coalesce(ISIN_i2, ISIN_i3) AS ISIN,     coalesce(FLAG_144A_i2, FLAG_144A_i2) AS FLAG_144A     into #init_prim_inst     from #temp_pop_table               -- select MULTI_FUND_ID, SM_SEC_GROUP, SM_SEC_TYPE, CDS_TYPE,ASSET_INST_TYPE,ORDER_INST_TYPE from #init_prim_inst where SM_SEC_GROUP ='SWAP' AND SM_SEC_TYPE='CDSWAP'     --MULTI_FUND_ID='301980'      ' --order by ORD_NUM -- o.ORD_NUM = '450058'              IF OBJECT_ID('tempdb..#min_trd_auth_table', 'U') IS NOT NULL DROP TABLE #min_trd_auth_table     SELECT       ORD_NUM,      MIN(TRD_AUTH_TIME) MIN_TRD_AUTH     INTO #min_trd_auth_table     FROM VISTA_REPORTING.dbo.TRADES     GROUP BY      ORD_NUM     ORDER BY ORD_NUM             IF OBJECT_ID('tempdb..#prim_market_temp_table', 'U') IS NOT NULL DROP TABLE #prim_market_temp_table     SELECT     p.*,     CASE      --WHEN p.INST_TYPE in ('IG BND', 'IG IBND', 'HY BND', 'HY IBND', 'SSA BND',      --       'GOV BND', 'GOV IBND', 'GOV TBILL', 'EM GOV BND',      --       'EM GOV TBILL', 'EM NGOV', 'COV', 'ABS', 'ARM', 'CMBS',      --       'CMO', 'MBS')      WHEN p.ASSET_INST_TYPE in ('COV', 'RMBS', 'CMBS', 'CDO', 'ABS', 'IG CORP',            'HY CORP', 'EM CORP', 'SSA', 'GOV', 'IGOV', 'GOVBIL',           'EM GOV', 'EM GOVBIL', 'CORP','MBS','CMO','ARM')       AND p.DEALING_DESK = 'Fixed Income'       AND (p.EXECUTION_TYPE in ('I', 'L') OR p.TRD_PURPOSE='MG024' OR p.ACTIVITY_TYPE='MG.FI 5. Primar')       AND p.TRAN_TYPE='BUY'       AND ISNULL(p.ACTIVITY_TYPE, '')!='MG.FI 4. Put Th'       AND MULTI_FUND_ID IN (SELECT DISTINCT MULTI_FUND_ID FROM VISTA_REPORTING.dbo.TRADES t             JOIN #min_trd_auth_table ma ON ma.ORD_NUM=t.ORD_NUM             WHERE t.ORD_NUM=p.ORD_NUM AND t.TRD_AUTH_TIME=ma.MIN_TRD_AUTH)      THEN 1      WHEN p.ASSET_INST_TYPE = 'FIDD OTHER'       AND p.ORDER_INST_TYPE in ('COV', 'RMBS', 'CMBS', 'CDO', 'ABS', 'IG CORP',            'HY CORP', 'EM CORP', 'SSA', 'GOV', 'IGOV', 'GOVBIL',           'EM GOV', 'EM GOVBIL', 'CORP','MBS','CMO','ARM')       AND p.DEALING_DESK = 'Fixed Income'       AND (p.EX
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: DATA_ARCHIVE_AL  CreateDate: 2025-01-07 09:12:11.187  ModifyDate: 2025-06-26 17:28:47.530  --- DEFINITION START ---  -- =============================================    -- Author:  <Miter, Matej>    -- Create date: <04/11/2021>    -- Description:     -- <>    -- =============================================        -- ***************VERSION CONTROL***************    --This stored procedure runs Data Archiving process within SG BE. It is used for data coming from Alladin source and therefore creates archiving tables for all    -- stg and reporting tables that are dependent on Alladin data.     --In the first part we are filtering STG ORDERS and TRADES tables based on the date passed in this stored procedure. Once we have filtered out all records we want to archive we are starting creating archiving tables from STG all the way to Reporting.         --First part - Filtering     -- This part is divided into filtering of records based on few scenarios.     --Please see below scenario description and number and based on that find the table within stored procedure:    --1 - From Trades take all distinct multi_fund_Id that have passed filter where execution time < date_to and TRD_Modified_Time < date_to    -- 1.1 - Take max execution times from trades    -- 1.2 - Take max modified time from trades    -- 1.3 - combine above two tables together with applied date_to filter    -- 1.4 - Go to trades to take all distinct MFID based on the above filtered records    --2 - From Trades take all distinct records that have passed filter where execution time < date_to and TRD_Modified_Time < date_to but where records don't have associated Orders    -- 2.1 -Take max execution times from trades which are not associated with orders    -- 2.2 - Take max modified time from trades  which are not associated with orders    -- 2.3 - combine above two tables together with applied date_to filter    --3 - From Orders take Orders with associated trades, orders with auth time is null, orders without associated trades and Orders with associated trades but no execution    -- 3.1 - Join with Order Cross and take all orders that have associated trades - 1st batch of orders    -- 3.2 - We are checking max auth time from orders and filtering based on date_to, once done we are creating temp table with distinct Order numbers that have auth time null across all records    -- 3.3 - Take all distinct orders which have null trd_orders    -- 3.4 - Take all distinct Orders with associated trades but without execution in trade table    -- 4 - Combine all above tables into single one to extract all distinct PM_ORD and MULTI_FUND_Ids to go with that into all STG and REP tables for records to be archived    -- 5 - Before we start to take out records from STG and REP tables we need to do hierarchy level check (this check ensure that max execution time of any PM order is always before date_to neverthless of Trade Order)    -- *********************************************        CREATE   PROCEDURE [dbo].[DATA_ARCHIVE_AL]     -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;            --------------------------------------ACCUMULATION(STAGING) TABLES ALADDIN-----------------------------------------------------------------------         -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades         IF  OBJECT_ID('VISTA_STAGING.dbo.ORDERS_ARCHIVED', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.ORDERS_ARCHIVED     SELECT o.*     FROM Vista_Staging.dbo.ORDERS o     inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = o.ORD_NUM where NOT EXISTS (select ORD_NUM from VISTA_STAGING.dbo.ORDERS_ARCHIVED oa where oa.ORD_NUM = o.ORD_NUM)         ELSE         select o.*     into VISTA_STAGING.dbo.ORDERS_ARCHIVED     from Vista_Staging.dbo.ORDERS o     inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = o.ORD_NUM             -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.TRADES_ARCHIVED', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.TRADES_ARCHIVED     SELECT t.*     FROM Vista_Staging.dbo.TRADES t     inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = t.multi_fund_id where NOT EXISTS (select MULTI_FUND_ID from VISTA_STAGING.dbo.TRADES_ARCHIVED ta where ta.MULTI_FUND_ID = t.MULTI_FUND_ID)          ELSE          select t.*     into VISTA_STAGING.dbo.TRADES_ARCHIVED     from Vista_Staging.dbo.TRADES t     inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = t.multi_fund_id         -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.ORDERS_DETAIL_ARCHIVED', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.ORDERS_DETAIL_ARCHIVED     SELECT od.*     FROM Vista_Staging.dbo.ORDERS_DETAIL od     inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = od.ORD_NUM where NOT EXISTS (select ORD_NUM from VISTA_STAGING.dbo.ORDERS_DETAIL_ARCHIVED oda where oda.ORD_NUM = od.ORD_NUM)          ELSE           select od.*     into VISTA_STAGING.dbo.ORDERS_DETAIL_ARCHIVED     from Vista_Staging.dbo.ORDERS_DETAIL od     inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = od.ORD_NUM         -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.ORDERS_CROSS_ARCHIVED', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.ORDERS_CROSS_ARCHIVED     SELECT oc.*     FROM Vista_Staging.dbo.ORDERS_CROSS oc     inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = oc.PM_ORD where NOT EXISTS (select PM_ORD from VISTA_STAGING.dbo.ORDERS_CROSS_ARCHIVED oca where oca.PM_ORD = oc.PM_ORD)          union          select oc.*     from Vista_Staging.dbo.ORDERS_CROSS oc     inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = oc.TRD_ORD  where NOT EXISTS (select TRD_ORD from VISTA_STAGING.dbo.ORDERS_CROSS_ARCHIVED oca where oca.TRD_ORD = oc.TRD_ORD)         ELSE          select oc.*     into VISTA_STAGING.dbo.ORDERS_CROSS_ARCHIVED     from Vista_Staging.dbo.ORDERS_CROSS oc     inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = oc.PM_ORD         UNION         select oc.*     from Vista_Staging.dbo.ORDERS_CROSS oc     inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = oc.TRD_ORD           -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.PLACEMENTS_ARCHIVED', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.PLACEMENTS_ARCHIVED     SELECT p.*     FROM Vista_Staging.dbo.PLACEMENTS p     inner join (select distinct PLacement_num,MULTI_FUND_ID from VISTA_STAGING.dbo.TRADES_ARCHIVED) ta on ta.PLacement_num = p.Placement_Num     inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = ta.multi_fund_ID  where NOT EXISTS (select Placement_Num from VISTA_STAGING.dbo.PLACEMENTS_ARCHIVED pa where pa.Placement_Num = p.Placement_Num)          ELSE          select p.*     into VISTA_STAGING.dbo.PLACEMENTS_ARCHIVED     from Vista_Staging.dbo.PLACEMENTS p     inner join (select distinct PLacement_num,MULTI_FUND_ID from VISTA_STAGING.dbo.TRADES_ARCHIVED) ta on ta.PLacement_num = p.Placement_Num     inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = ta.multi_fund_ID         -------------Markit Files ----------------------------------------------------------          -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.[Markit_ISReport_ARCHIVED]', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.[Markit_ISReport_ARCHIVED]     SELECT mis.*     FROM VISTA_STAGING.dbo.[Markit_ISReport] mis     inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = mis.[Order ID]  where NOT EXISTS (select [Order ID] from VISTA_STAGING.dbo.[Markit_ISReport_ARCHIVED] misa where misa.[Order ID] = mis.[Order ID])          ELSE          select mis.*     into VISTA_STAGING.dbo.[Markit_ISReport_ARCHIVED]     from Vista_Staging.dbo.[Markit_ISReport] mis     inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = mis.[Order ID]             -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.[Markit_OutsideHighLow_ARCHIVED]', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.[Markit_OutsideHighLow_ARCHIVED]     SELECT mis.*     FROM VISTA_STAGING.dbo.[Markit_OutsideHighLow] mis     inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = mis.[Order ID]  where NOT EXISTS (select [Order ID] from VISTA_STAGING.dbo.[Markit_OutsideHighLow_ARCHIVED] misa where misa.[Order ID] = mis.[Order ID])          ELSE          select mis.*     into VISTA_STAGING.dbo.[Markit_OutsideHighLow_ARCHIVED]     from Vista_Staging.dbo.[Markit_OutsideHighLow] mis     inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = mis.[Order ID]            ----------------------------------------------------STAGING EXCEPTIONS TABLES ALADDIN---------------------------------------------------------     -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_EQ_TABLE_ARCHIVED', 'U') IS NOT NULL     INSERT INTO VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_EQ_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_01_QUOTE_EXCEPTION_EQ_TABLE vg     inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id where NOT EXISTS (select MULTI_FUND_ID from VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_EQ_TABLE_ARCHIVED vga where vga.MULTI_FUND_ID = vg.MULTI_FUND_ID)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_EQ_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_01_QUOTE_EXCEPTION_EQ_TABLE vg     inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id         -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_01_QUOTE_EXCEPTION_FI_TABLE vg     inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id where NOT EXISTS (select MULTI_FUND_ID from VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI_TABLE_ARCHIVED vga where vga.MULTI_FUND_ID = vg.MULTI_FUND_ID)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_01_QUOTE_EXCEPTION_FI_TABLE vg     inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id         -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_LL_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_LL_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_01_QUOTE_EXCEPTION_LL_TABLE vg     inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id where NOT EXISTS (select MULTI_FUND_ID from VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_LL_TABLE_ARCHIVED vga where vga.MULTI_FUND_ID = vg.MULTI_FUND_ID)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_LL_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_01_QUOTE_EXCEPTION_LL_TABLE vg     inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id         -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_DMG_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_DMG_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_01_QUOTE_EXCEPTION_DMG_TABLE vg     inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id where NOT EXISTS (select MULTI_FUND_ID from VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_DMG_TABLE_ARCHIVED vga where vga.MULTI_FUND_ID = vg.MULTI_FUND_ID)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_DMG_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_01_QUOTE_EXCEPTION_DMG_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id         /*     -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_EQ_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_EQ_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_EQ_TABLE vg     inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.PM_ORD         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_EQ_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_EQ_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.PM_ORD     */     -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     --New Code with better processing     IF OBJECT_ID('tempdb..#temp_vg_06_LL_insert', 'U') IS NOT NULL DROP TABLE #temp_vg_06_LL_insert     select vg.*     INTO #temp_vg_06_LL_insert     from Vista_Staging.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_LL_TABLE vg      inner join (select distinct CONCAT(FUND,INVNUM) as CLIENT_EXECUTION_NUM,multi_fund_id from VISTA_STAGING.dbo.TRADES_ARCHIVED) ta on ta.CLIENT_EXECUTION_NUM = vg.Client_Execution_Num     inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = ta.multi_fund_id         IF  OBJECT_ID('VISTA_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_LL_TABLE_ARCHIVED', 'U') IS NOT NULL     INSERT INTO VISTA_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_LL_TABLE_ARCHIVED     select t.*     from #temp_vg_06_LL_insert t     where t.CLIENT_EXECUTION_NUM NOT IN (select CLIENT_EXECUTION_NUM from VISTA_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_LL_TABLE_ARCHIVED)         ELSE          select vg.*     into VISTA_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_LL_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_LL_TABLE vg      inner join (select distinct CONCAT(FUND,INVNUM) as CLIENT_EXECUTION_NUM,multi_fund_id from VISTA_STAGING.dbo.TRADES_ARCHIVED) ta on ta.CLIENT_EXECUTION_NUM = vg.Client_Execution_Num     inner join (select distinct multi_fund_id from #temp_orders_trades_al) al on al.multi_fund_id = ta.multi_fund_id             IF OBJECT_ID('tempdb..#temp_vg_06_FI_insert', 'U') IS NOT NULL DROP TABLE #temp_vg_06_FI_insert     select vg.*     INTO #temp_vg_06_FI_insert     from Vista_Staging.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_FI_TABLE vg      inner join (select distinct CONCAT(FUND,INVNUM) as CLIENT_EXECUTION_NUM,multi_fund_id from VISTA_STAGING.dbo.TRADES_ARCHIVED) ta on ta.CLIENT_EXECUTION_NUM = vg.Client_Execution_Num     inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = ta.multi_fund_id         IF  OBJECT_ID('VISTA_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_FI_TABLE_ARCHIVED', 'U') IS NOT NULL     INSERT INTO VISTA_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_FI_TABLE_ARCHIVED     select t.*     from #temp_vg_06_FI_insert t     where t.CLIENT_EXECUTION_NUM NOT IN (select CLIENT_EXECUTION_NUM from VISTA_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_FI_TABLE_ARCHIVED)             ELSE          select vg.*     into VISTA_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_FI_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_FI_TABLE vg      inner join (select distinct CONCAT(FUND,INVNUM) as CLIENT_EXECUTION_NUM,multi_fund_id from VISTA_STAGING.dbo.TRADES_ARCHIVED) ta on ta.CLIENT_EXECUTION_NUM = vg.Client_Execution_Num     inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = ta.multi_fund_id             -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_EQ_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_EQ_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_07_NON_WINNING_QUOTE_EQ_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id where NOT EXISTS (select MULTI_FUND_ID from VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_EQ_TABLE_ARCHIVED vga where vga.MULTI_FUND_ID = vg.MULTI_FUND_ID)          ELSE         select vg.*     into VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_EQ_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_07_NON_WINNING_QUOTE_EQ_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id          -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_LL_TABLE_ARCHIVED', 'U') IS NOT NULL     INSERT INTO VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_LL_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_07_NON_WINNING_QUOTE_LL_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id where NOT EXISTS (select MULTI_FUND_ID from VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_LL_TABLE_ARCHIVED vga where vga.MULTI_FUND_ID = vg.MULTI_FUND_ID)         ELSE          select vg.*     into VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_LL_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_07_NON_WINNING_QUOTE_LL_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id         -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_FI_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_FI_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_07_NON_WINNING_QUOTE_FI_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id  where NOT EXISTS (select MULTI_FUND_ID from VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_FI_TABLE_ARCHIVED vga where vga.MULTI_FUND_ID = vg.MULTI_FUND_ID)          ELSE         select vg.*     into VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_FI_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_07_NON_WINNING_QUOTE_FI_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id         -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_DMG_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_DMG_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_07_NON_WINNING_QUOTE_DMG_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id where NOT EXISTS (select MULTI_FUND_ID from VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_DMG_TABLE_ARCHIVED vga where vga.MULTI_FUND_ID = vg.MULTI_FUND_ID)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_DMG_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_07_NON_WINNING_QUOTE_DMG_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id             IF OBJECT_ID('tempdb..#temp_vg_08_LL_insert', 'U') IS NOT NULL DROP TABLE #temp_vg_08_LL_insert     select vg.*     INTO #temp_vg_08_LL_insert     from Vista_Staging.dbo.VG_08_ORDER_INFLATION_LL_TABLE vg      inner join (select distinct CONCAT(FUND,INVNUM) as CLIENT_EXECUTION_NUM,multi_fund_id from VISTA_STAGING.dbo.TRADES_ARCHIVED) ta on ta.CLIENT_EXECUTION_NUM = vg.Client_Execution_Num     inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = ta.multi_fund_id         IF  OBJECT_ID('VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_LL_TABLE_ARCHIVED', 'U') IS NOT NULL     INSERT INTO VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_LL_TABLE_ARCHIVED     select t.*     from #temp_vg_08_LL_insert t     where t.CLIENT_EXECUTION_NUM NOT IN (select CLIENT_EXECUTION_NUM from VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_LL_TABLE_ARCHIVED)             ELSE          select vg.*     into VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_LL_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_08_ORDER_INFLATION_LL_TABLE vg      inner join (select distinct CONCAT(FUND,INVNUM) as CLIENT_EXECUTION_NUM,multi_fund_id from VISTA_STAGING.dbo.TRADES_ARCHIVED) ta on ta.CLIENT_EXECUTION_NUM = vg.Client_Execution_Num     inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = ta.multi_fund_id             IF OBJECT_ID('tempdb..#temp_vg_08_FI_insert', 'U') IS NOT NULL DROP TABLE #temp_vg_08_FI_insert     select vg.*     INTO #temp_vg_08_FI_insert     from Vista_Staging.dbo.VG_08_ORDER_INFLATION_FI_TABLE vg      inner join (select distinct CONCAT(FUND,INVNUM) as CLIENT_EXECUTION_NUM,multi_fund_id from VISTA_STAGING.dbo.TRADES_ARCHIVED) ta on ta.CLIENT_EXECUTION_NUM = vg.Client_Execution_Num     inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = ta.multi_fund_id         IF  OBJECT_ID('VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_FI_TABLE_ARCHIVED', 'U') IS NOT NULL     INSERT INTO VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_FI_TABLE_ARCHIVED     select t.*     from #temp_vg_08_FI_insert t     where t.CLIENT_EXECUTION_NUM NOT IN (select CLIENT_EXECUTION_NUM from VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_FI_TABLE_ARCHIVED)             ELSE          select vg.*     into VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_FI_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_08_ORDER_INFLATION_FI_TABLE vg      inner join (select distinct CONCAT(FUND,INVNUM) as CLIENT_EXECUTION_NUM,multi_fund_id from VISTA_STAGING.dbo.TRADES_ARCHIVED) ta on ta.CLIENT_EXECUTION_NUM = vg.Client_Execution_Num     inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = ta.multi_fund_id             -------------------------------------     -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_EQ_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_EQ_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_09_TIMELY_EXECUTION_EQ_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORD_NUM where NOT EXISTS (select ORD_NUM from VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_EQ_TABLE_ARCHIVED vga where vga.ORD_NUM = vg.ORD_NUM)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_EQ_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_09_TIMELY_EXECUTION_EQ_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORD_NUM         -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_LL_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_LL_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_09_TIMELY_EXECUTION_LL_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORD_NUM where NOT EXISTS (select ORD_NUM from VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_LL_TABLE_ARCHIVED vga where vga.ORD_NUM = vg.ORD_NUM)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_LL_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_09_TIMELY_EXECUTION_LL_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORD_NUM         -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORD_NUM where NOT EXISTS (select ORD_NUM from VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE_ARCHIVED vga where vga.ORD_NUM = vg.ORD_NUM)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORD_NUM         -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_DMG_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_DMG_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_09_TIMELY_EXECUTION_DMG_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORD_NUM where NOT EXISTS (select ORD_NUM from VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_DMG_TABLE_ARCHIVED vga where vga.ORD_NUM = vg.ORD_NUM)         ELSE              select vg.*     into VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_DMG_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_09_TIMELY_EXECUTION_DMG_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORD_NUM         -------------------------------------------------------------------------------------------     --Adding Cash Table in order to extract records that are coming from the allading side only in this stored procedure (all others are extrected in CASH procedure)         IF  OBJECT_ID('VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_MM_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_MM_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_09_TIMELY_EXECUTION_CASH_MM_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORDER_ID and vg.[SOURCE] = 'AL'  where NOT EXISTS (select ORDER_ID from VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_MM_TABLE_ARCHIVED vga where vga.ORDER_ID = vg.ORDER_ID)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_MM_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_09_TIMELY_EXECUTION_CASH_MM_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORDER_ID and vg.[SOURCE] = 'AL'             --Adding FX Table in order to extract records that are coming from the allading side only in this stored procedure (all others are extrected in FX procedure)         IF  OBJECT_ID('VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FX_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FX_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_09_TIMELY_EXECUTION_FX_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORDER_ID and vg.[SOURCE] = 'AL'  where NOT EXISTS (select ORDER_ID from VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FX_TABLE_ARCHIVED vga where vga.ORDER_ID = vg.ORDER_ID)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FX_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_09_TIMELY_EXECUTION_FX_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORDER_ID and vg.[SOURCE] = 'AL'     -------------------------------------------------------------------------------------------         -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_10_NAV_CUT_OFF_EQ_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.VG_10_NAV_CUT_OFF_EQ_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_10_NAV_CUT_OFF_EQ_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id where NOT EXISTS (select MULTI_FUND_ID from VISTA_STAGING.dbo.VG_10_NAV_CUT_OFF_EQ_TABLE_ARCHIVED vga where vga.MULTI_FUND_ID = vg.MULTI_FUND_ID)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_10_NAV_CUT_OFF_EQ_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_10_NAV_CUT_OFF_EQ_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id         -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_EQ_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_EQ_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_10_TIMELY_RECORDING_EQ_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id where NOT EXISTS (select MULTI_FUND_ID from VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_EQ_TABLE_ARCHIVED vga where vga.MULTI_FUND_ID = vg.MULTI_FUND_ID)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_EQ_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_10_TIMELY_RECORDING_EQ_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id          -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_LL_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_LL_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_10_TIMELY_RECORDING_LL_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id where NOT EXISTS (select MULTI_FUND_ID from VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_LL_TABLE_ARCHIVED vga where vga.MULTI_FUND_ID = vg.MULTI_FUND_ID)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_LL_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_10_TIMELY_RECORDING_LL_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id          -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FI_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FI_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_10_TIMELY_RECORDING_FI_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id where NOT EXISTS (select MULTI_FUND_ID from VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FI_TABLE_ARCHIVED vga where vga.MULTI_FUND_ID = vg.MULTI_FUND_ID)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FI_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_10_TIMELY_RECORDING_FI_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id          -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_DMG_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_DMG_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_10_TIMELY_RECORDING_DMG_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id  where NOT EXISTS (select MULTI_FUND_ID from VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_DMG_TABLE_ARCHIVED vga where vga.MULTI_FUND_ID = vg.MULTI_FUND_ID)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_DMG_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_10_TIMELY_RECORDING_DMG_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id         -------------------------------------------------------------------------------------------     --Adding Cash Table in order to extract records that are coming from the allading side only in this stored procedure (all others are extrected in CASH procedure)         IF  OBJECT_ID('VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_CASH_MM_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_CASH_MM_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_10_TIMELY_RECORDING_CASH_MM_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.TRANSACTION_NUMBER and vg.[SOURCE] = 'AL' where NOT EXISTS (select TRANSACTION_NUMBER from VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_CASH_MM_TABLE_ARCHIVED   vga where vga.TRANSACTION_NUMBER = vg.TRANSACTION_NUMBER)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_CASH_MM_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_10_TIMELY_RECORDING_CASH_MM_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.TRANSACTION_NUMBER and vg.[SOURCE] = 'AL'         --Adding FX Table in order to extract records that are coming from the allading side only in this stored procedure (all others are extrected in FX procedure)         IF  OBJECT_ID('VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FX_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FX_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_10_TIMELY_RECORDING_FX_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.TRADE_ID and vg.[SOURCE] = 'AL'  where NOT EXISTS (select TRADE_ID from VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FX_TABLE_ARCHIVED vga where vga.TRADE_ID   = vg.TRADE_ID)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FX_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_10_TIMELY_RECORDING_FX_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.TRADE_ID and vg.[SOURCE] = 'AL'     -------------------------------------------------------------------------------------------          -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_11_TIMELY_RELEASE_EQ_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_11_TIMELY_RELEASE_EQ_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_11_TIMELY_RELEASE_EQ_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORD_NUM where NOT EXISTS (select ORD_NUM from VISTA_STAGING.dbo.VG_11_TIMELY_RELEASE_EQ_TABLE_ARCHIVED vga where vga.ORD_NUM = vg.ORD_NUM)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_11_TIMELY_RELEASE_EQ_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_11_TIMELY_RELEASE_EQ_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORD_NUM         -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_EQ_TABLE_ARCHIVED', 'U') IS NOT NULL     INSERT into VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_EQ_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_13_ORDER_AGGREGATION_EQ_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORD_NUM where NOT EXISTS (select ORD_NUM from VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_EQ_TABLE_ARCHIVED vga where vga.ORD_NUM = vg.ORD_NUM)          ELSE          select vg.*     into VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_EQ_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_13_ORDER_AGGREGATION_EQ_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORD_NUM         -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_LL_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_LL_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_13_ORDER_AGGREGATION_LL_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORD_NUM where NOT EXISTS (select ORD_NUM from VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_LL_TABLE_ARCHIVED vga where vga.ORD_NUM = vg.ORD_NUM)          ELSE          select vg.*     into VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_LL_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_13_ORDER_AGGREGATION_LL_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORD_NUM         -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_FI_TABLE_ARCHIVED', 'U') IS NOT NULL     INSERT into VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_FI_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_13_ORDER_AGGREGATION_FI_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORD_NUM where NOT EXISTS (select ORD_NUM from VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_FI_TABLE_ARCHIVED vga where vga.ORD_NUM = vg.ORD_NUM)          ELSE          select vg.*     into VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_FI_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_13_ORDER_AGGREGATION_FI_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORD_NUM         -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_DMG_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_DMG_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_13_ORDER_AGGREGATION_DMG_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORD_NUM where NOT EXISTS (select ORD_NUM from VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_DMG_TABLE_ARCHIVED vga where vga.ORD_NUM = vg.ORD_NUM)          ELSE          select vg.*     into VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_DMG_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_13_ORDER_AGGREGATION_DMG_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORD_NUM              -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_EQ_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_EQ_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_EQ_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORD_NUM where NOT EXISTS (select ORD_NUM from VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_EQ_TABLE_ARCHIVED vga where vga.ORD_NUM = vg.ORD_NUM)          ELSE         select vg.*     into VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_EQ_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_EQ_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORD_NUM         -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_LL_TABLE_ARCHIVED', 'U') IS NOT NULL     INSERT into VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_LL_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_LL_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORD_NUM where NOT EXISTS (select ORD_NUM from VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_LL_TABLE_ARCHIVED vga where vga.ORD_NUM = vg.ORD_NUM)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_LL_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_LL_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORD_NUM         -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_FI_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_FI_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_FI_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORD_NUM where NOT EXISTS (select ORD_NUM from VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_FI_TABLE_ARCHIVED vga where vga.ORD_NUM = vg.ORD_NUM)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_FI_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_FI_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORD_NUM         -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_DMG_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_DMG_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_DMG_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORD_NUM where NOT EXISTS (select ORD_NUM from VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_DMG_TABLE_ARCHIVED vga where vga.ORD_NUM = vg.ORD_NUM)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_DMG_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_DMG_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORD_NUM         -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_EQ_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_EQ_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_15_AMENDMENT_FLAG_EQ_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id where NOT EXISTS (select MULTI_FUND_ID from VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_EQ_TABLE_ARCHIVED vga where vga.MULTI_FUND_ID = vg.MULTI_FUND_ID)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_EQ_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_15_AMENDMENT_FLAG_EQ_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id         -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_LL_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_LL_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_15_AMENDMENT_FLAG_LL_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id where NOT EXISTS (select MULTI_FUND_ID from VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_LL_TABLE_ARCHIVED vga where vga.MULTI_FUND_ID = vg.MULTI_FUND_ID)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_LL_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_15_AMENDMENT_FLAG_LL_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id              -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_FI_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_FI_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_15_AMENDMENT_FLAG_FI_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id where NOT EXISTS (select MULTI_FUND_ID from VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_FI_TABLE_ARCHIVED vga where vga.MULTI_FUND_ID = vg.MULTI_FUND_ID)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_FI_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_15_AMENDMENT_FLAG_FI_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id               -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_DMG_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_DMG_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_15_AMENDMENT_FLAG_DMG_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id where NOT EXISTS (select MULTI_FUND_ID from VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_DMG_TABLE_ARCHIVED vga where vga.MULTI_FUND_ID = vg.MULTI_FUND_ID)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_DMG_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_15_AMENDMENT_FLAG_DMG_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id              -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id where NOT EXISTS (select MULTI_FUND_ID from VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE_ARCHIVED vga where vga.MULTI_FUND_ID = vg.MULTI_FUND_ID)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id         -------------------------------------------------------------------------------------------     --Adding Cash Table in order to extract records that are coming from the allading side only in this stored procedure (all others are extrected in CASH procedure)          IF  OBJECT_ID('VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE vg      inner join (select distinct ORD_NUM,multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id and al.ORD_NUM = vg.ORD_NUM and vg.[DATA_SOURCE] = 'AL'     where NOT EXISTS (select ORD_NUM,MULTI_FUND_ID from VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE_ARCHIVED vga where vga.MULTI_FUND_ID = vg.MULTI_FUND_ID and     vga.ORD_NUM = vg.ORD_NUM)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE vg      inner join (select distinct multi_fund_id,ORD_NUM from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id and al.ORD_NUM = vg.ORD_NUM and vg.[DATA_SOURCE] = 'AL'         --Adding FX Table in order to extract records that are coming from the allading side only in this stored procedure (all others are extrected in FX procedure)      IF  OBJECT_ID('VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE vg      inner join (select distinct multi_fund_id,ORD_NUM from ##temp_orders_trades_al) al on al.multi_fund_id = vg.TRADE_ID and al.ORD_NUM = vg.FXM_ORDER_ID and vg.[DATA_SOURCE] = 'AL'     where NOT EXISTS (select TRADE_ID,FXM_ORDER_ID from VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE_ARCHIVED vga where vga.TRADE_ID = vg.TRADE_ID and     vga.FXM_ORDER_ID = vg.FXM_ORDER_ID)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE vg      inner join (select distinct multi_fund_id,ORD_NUM from ##temp_orders_trades_al) al on al.multi_fund_id = vg.TRADE_ID and al.ORD_NUM = vg.FXM_ORDER_ID and vg.[DATA_SOURCE] = 'AL'      -------------------------------------------------------------------------------------------     -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE_ARCHIVED', 'U') IS NOT NULL     INSERT into VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORD_NUM  where NOT EXISTS (select ORD_NUM from VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE_ARCHIVED vga where vga.ORD_NUM = vg.ORD_NUM)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORD_NUM         -------------------------------------------------------------------------------------------     --Adding Cash Table in order to extract records that are coming from the allading side only in this stored procedure (all others are extrected in CASH procedure)          IF  OBJECT_ID('VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE_ARCHIVED', 'U') IS NOT NULL     INSERT into VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORD_NUM and vg.[DATA_SOURCE] = 'AL'  where NOT EXISTS (select ORD_NUM from VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE_ARCHIVED vga where vga.ORD_NUM =   vg.ORD_NUM)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORD_NUM and vg.[DATA_SOURCE] = 'AL'         --Adding FX Table in order to extract records that are coming from the allading side only in this stored procedure (all others are extrected in FX procedure)         IF  OBJECT_ID('VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE_ARCHIVED', 'U') IS NOT NULL     INSERT into VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORDER_ID and vg.[DATA_SOURCE] = 'AL' where NOT EXISTS (select ORDER_ID from VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE_ARCHIVED vga where vga.ORDER_ID =   vg.ORDER_ID)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE vg      inner join (select distinct ORD_NUM from ##temp_orders_trades_al) al on al.ORD_NUM = vg.ORDER_ID and vg.[DATA_SOURCE] = 'AL'     -------------------------------------------------------------------------------------------         -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_EQ_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_EQ_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_19_PT_AMENDMENT_FLAG_EQ_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id  where NOT EXISTS (select MULTI_FUND_ID from VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_EQ_TABLE_ARCHIVED vga where vga.MULTI_FUND_ID = vg.MULTI_FUND_ID)          ELSE         select vg.*     into VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_EQ_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_19_PT_AMENDMENT_FLAG_EQ_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id               -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_LL_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_LL_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_19_PT_AMENDMENT_FLAG_LL_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id where NOT EXISTS (select MULTI_FUND_ID from VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_LL_TABLE_ARCHIVED vga where vga.MULTI_FUND_ID = vg.MULTI_FUND_ID)          ELSE         select vg.*     into VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_LL_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_19_PT_AMENDMENT_FLAG_LL_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id              -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_FI_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_FI_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_19_PT_AMENDMENT_FLAG_FI_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id where NOT EXISTS (select MULTI_FUND_ID from VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_FI_TABLE_ARCHIVED vga where vga.MULTI_FUND_ID = vg.MULTI_FUND_ID)          ELSE         select vg.*     into VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_FI_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_19_PT_AMENDMENT_FLAG_FI_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id             -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_DMG_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_DMG_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_19_PT_AMENDMENT_FLAG_DMG_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id where NOT EXISTS (select MULTI_FUND_ID from VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_DMG_TABLE_ARCHIVED vga where vga.MULTI_FUND_ID = vg.MULTI_FUND_ID)          ELSE         select vg.*     into VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_DMG_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_19_PT_AMENDMENT_FLAG_DMG_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id             -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_EQ_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_EQ_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_25_INTERFUND_TRANSFER_EQ_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id where NOT EXISTS (select MULTI_FUND_ID from VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_EQ_TABLE_ARCHIVED vga where vga.MULTI_FUND_ID = vg.MULTI_FUND_ID)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_EQ_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_25_INTERFUND_TRANSFER_EQ_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id             -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_LL_TABLE_ARCHIVED', 'U') IS NOT NULL     INSERT into VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_LL_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_25_INTERFUND_TRANSFER_LL_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id  where NOT EXISTS (select MULTI_FUND_ID from VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_LL_TABLE_ARCHIVED vga where vga.MULTI_FUND_ID = vg.MULTI_FUND_ID)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_LL_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_25_INTERFUND_TRANSFER_LL_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id             -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_FI_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_FI_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_25_INTERFUND_TRANSFER_FI_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id  where NOT EXISTS (select MULTI_FUND_ID from VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_FI_TABLE_ARCHIVED vga where vga.MULTI_FUND_ID = vg.MULTI_FUND_ID)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_FI_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_25_INTERFUND_TRANSFER_FI_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id             -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_DMG_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_DMG_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_25_INTERFUND_TRANSFER_DMG_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id  where NOT EXISTS (select MULTI_FUND_ID from VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_DMG_TABLE_ARCHIVED vga where vga.MULTI_FUND_ID = vg.  MULTI_FUND_ID)         ELSE         select vg.*     into VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_DMG_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_25_INTERFUND_TRANSFER_DMG_TABLE vg      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = vg.multi_fund_id             -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_40_EXTENDED_SETTLEMENT_EXCEPTION_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_40_EXTENDED_SETTLEMENT_EXCEPTION_TABLE_ARCHIVED     select vg.*     from Vista_Staging.dbo.VG_40_EXTENDE
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: DATA_ARCHIVE_BATCH  CreateDate: 2025-06-26 17:31:20.547  ModifyDate: 2025-06-26 17:31:20.547  --- DEFINITION START ---  -- =============================================    -- Author:  <Miter, Matej>    -- Create date: <04/11/2021>    -- Description:     -- <>    -- =============================================        -- ***************VERSION CONTROL***************        -- *********************************************        CREATE   PROCEDURE [dbo].[DATA_ARCHIVE_BATCH]     -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        @Date_to VARCHAR(max)            AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        --------------------------------------Filters for TEMP TABLES ALADDIN-----------------------------------------------------------------------        DECLARE @Current_Datetime DATETIME;    SET @Current_Datetime = CONVERT(char(8),GETDATE(),12)             --1.1 Take max execution time from trades which have ord num     IF OBJECT_ID('tempdb..#temp_trd_max_execution', 'U') IS NOT NULL DROP TABLE #temp_trd_max_execution     select MAX(EXECUTION_TIME) as execution_time, Ord_NUM      into #temp_trd_max_execution     from Vista_Staging.dbo.TRADES where ord_num <> '' and ord_num is not null group by ORD_NUM         --1.2 Take max modified time from trades which have ord num     IF OBJECT_ID('tempdb..#temp_trd_max_modified', 'U') IS NOT NULL DROP TABLE #temp_trd_max_modified     select MAX(TRD_MODIFY_TIME) as modified_Time, Ord_NUM     into #temp_trd_max_modified     from Vista_Staging.dbo.TRADES where ord_num <> '' and ord_num is not null group by ORD_NUM         --1.3 Combine with inner join to get all treades with Order numbers that have passed filter execution time and modified time before date to (this gives distinct order numbers)     IF OBJECT_ID('tempdb..#temp_trd_distinct_ord_passed_filter', 'U') IS NOT NULL DROP TABLE #temp_trd_distinct_ord_passed_filter     select t_modified.ORD_NUM,t_exec.execution_time,t_modified.modified_Time      into #temp_trd_distinct_ord_passed_filter     from      (select ORD_NUM as Order_id,execution_time from #temp_trd_max_execution where execution_time < @Date_to + ' 00:00:00.000') t_exec     inner join     (select * from #temp_trd_max_modified  where modified_Time  < @Date_to + ' 00:00:00.000') t_modified     on     t_exec.Order_id = t_modified.ORD_NUM         --1.4 take all distinct MFID for later use     IF OBJECT_ID('tempdb..#temp_trd_distinct_mfid_passed_filter', 'U') IS NOT NULL DROP TABLE #temp_trd_distinct_mfid_passed_filter     select distinct t.MULTI_FUND_ID,t.ORD_NUM     into #temp_trd_distinct_mfid_passed_filter     from      #temp_trd_distinct_ord_passed_filter tt     inner join     Vista_STAGING.dbo.TRADES t     on     tt.ORD_NUM = t.ORD_NUM             ---------------------------------------------     --2.1 From trades take all trades that don't have order number or order number is empty (we will archive this based on multifund id)     --Take max execution time from trades which have ord num     IF OBJECT_ID('tempdb..#temp_trd_max_execution_no_ord', 'U') IS NOT NULL DROP TABLE #temp_trd_max_execution_no_ord     select MAX(EXECUTION_TIME) as execution_time, MULTI_FUND_ID      into #temp_trd_max_execution_no_ord     from Vista_Staging.dbo.TRADES where ord_num = '' or ord_num is null group by MULTI_FUND_ID         --2.2 Take max modified time from trades which have ord num     IF OBJECT_ID('tempdb..#temp_trd_max_modified_no_ord', 'U') IS NOT NULL DROP TABLE #temp_trd_max_modified_no_ord     select MAX(TRD_MODIFY_TIME) as modified_Time, MULTI_FUND_ID     into #temp_trd_max_modified_no_ord     from Vista_Staging.dbo.TRADES where ord_num = '' or ord_num is null group by MULTI_FUND_ID         --2.3Combine with inner join to get all treades with Order numbers that have passed filter execution time and modified time before date to (this gives distinct order numbers)     IF OBJECT_ID('tempdb..#temp_trd_distinct_ord_passed_filter_no_ord', 'U') IS NOT NULL DROP TABLE #temp_trd_distinct_ord_passed_filter_no_ord     select t_modified.MULTI_FUND_ID,t_exec.execution_time,t_modified.modified_Time      into #temp_trd_distinct_ord_passed_filter_no_ord     from      (select MULTI_FUND_ID as Multi_ID,execution_time from #temp_trd_max_execution_no_ord where execution_time <  @Date_to + ' 00:00:00.000') t_exec     inner join     (select * from #temp_trd_max_modified_no_ord  where modified_Time  <  @Date_to + ' 00:00:00.000') t_modified     on     t_exec.Multi_ID = t_modified.MULTI_FUND_ID         ----------------------------------------------     --check below which table but probably mfid ids     --3.1 Once we did all filters on trades we are going into order cross to take out associated orders from staging orders table     IF OBJECT_ID('tempdb..#temp_ord_all', 'U') IS NOT NULL DROP TABLE #temp_ord_all     select distinct o.ORD_NUM,oc.TRD_ORD,t.MULTI_FUND_ID     into #temp_ord_all     from      (select * from #temp_trd_distinct_mfid_passed_filter)t     inner join     (select * from VISTA_REPORTING.dbo.ORDERS_CROSS) oc     on     t.ORD_NUM = oc.TRD_ORD     inner join     (select * from Vista_STAGING.dbo.ORDERS) o     on     oc.PM_ORD = o.ORD_NUM         --we are now taking second batch of orders that have auth time as null, orders with no associated trdades and orders with associated trades but no execution     --3.2 Take max auth time of all distinct orders     IF OBJECT_ID('tempdb..#temp_Ord_max', 'U') IS NOT NULL DROP TABLE #temp_Ord_max     select max(AUTH_TIME) as Max_Auth_Time,ORD_NUM     into #temp_Ord_max     from Vista_Staging.dbo.ORDERS      group by ORD_NUM              -- 3.2 Take only distinct orders that have auth time before date to for further filtering     IF OBJECT_ID('tempdb..#temp_ord', 'U') IS NOT NULL DROP TABLE #temp_ord     select *      into #temp_ord     from #temp_Ord_max     where try_cast(Max_Auth_Time as date) < @Date_to             -- 3.2 Take all remaining records from Orders table that have been left out by above queries (Auth time is null), we are only capturing here orders that have one or multiple records with always auth time is null as other orders will be captured in above tables      IF OBJECT_ID('tempdb..#temp_ord_auth_time_null', 'U') IS NOT NULL DROP TABLE #temp_ord_auth_time_null     select *      into #temp_ord_auth_time_null     from #temp_Ord_max where Max_Auth_Time is null         --3.3     IF OBJECT_ID('tempdb..#temp_trd_ord_table', 'U') IS NOT NULL DROP TABLE #temp_trd_ord_table     select distinct oc.TRD_ORD, oc.PM_ORD     into #temp_trd_ord_table     from      (select * from #temp_ord) o     inner join     (select * from Vista_Reporting.dbo.ORDERS_CROSS) oc     on     o.ORD_NUM = oc.PM_ORD         --3.3 Take all distinct orders which have null trd_orders     IF OBJECT_ID('tempdb..#temp_ord_without_associated_trades', 'U') IS NOT NULL DROP TABLE #temp_ord_without_associated_trades     select *     into #temp_ord_without_associated_trades     from #temp_trd_ord_table     where TRD_ORD is null         --3.4 Take all distinct orders which have associated trd orders but they can't be found in trades table     IF OBJECT_ID('tempdb..#temp_ord_with_associated_trades_but_no_execution', 'U') IS NOT NULL DROP TABLE #temp_ord_with_associated_trades_but_no_execution     select t.ORD_NUM,o.PM_ORD     into #temp_ord_with_associated_trades_but_no_execution     from #temp_trd_ord_table o     left join (select distinct ord_num  from Vista_Staging.dbo.TRADES) t      on     o.TRD_ORD = t.ORD_NUM      where t.ORD_NUM is null         --Create a global temp table that will be passed as parametar into child stored procedures     --4- We need to combine all records from above now into one table with presentable columns that will be joined to all other tables      IF OBJECT_ID('tempdb..##temp_orders_trades_al', 'U') IS NOT NULL DROP TABLE ##temp_orders_trades_al      select MULTI_FUND_ID,ORD_NUM      into ##temp_orders_trades_al      from #temp_trd_distinct_mfid_passed_filter      union       select MULTI_FUND_ID,null as ORD_NUM from #temp_trd_distinct_ord_passed_filter_no_ord      union       select MULTI_FUND_ID,ORD_NUM from #temp_ord_all      union       select NULL as MULTI_FUND_ID,ORD_NUM from #temp_ord_auth_time_null      union       select NULL as MULTI_FUND_ID,PM_ORD as ORD_NUM from #temp_ord_without_associated_trades      union       select NULL as MULTI_FUND_ID, ORD_NUM from #temp_ord_with_associated_trades_but_no_execution          IF OBJECT_ID('tempdb..##temp_orders_trades_al_save', 'U') IS NOT NULL DROP TABLE ##temp_orders_trades_al_save      select MULTI_FUND_ID,ORD_NUM,@Current_Datetime as Run_date,@Date_to as Date_to_Archived      into ##temp_orders_trades_al_save      from #temp_trd_distinct_mfid_passed_filter      union       select MULTI_FUND_ID,null as ORD_NUM,@Current_Datetime as Run_date,@Date_to as Date_to_Archived from #temp_trd_distinct_ord_passed_filter_no_ord      union       select MULTI_FUND_ID,ORD_NUM,@Current_Datetime as Run_date,@Date_to as Date_to_Archived from #temp_ord_all      union       select NULL as MULTI_FUND_ID,ORD_NUM,@Current_Datetime as Run_date,@Date_to as Date_to_Archived from #temp_ord_auth_time_null      union       select NULL as MULTI_FUND_ID,PM_ORD as ORD_NUM,@Current_Datetime as Run_date,@Date_to as Date_to_Archived from #temp_ord_without_associated_trades      union       select NULL as MULTI_FUND_ID, ORD_NUM,@Current_Datetime as Run_date,@Date_to as Date_to_Archived from #temp_ord_with_associated_trades_but_no_execution          --5 - Before we start to take out records from STG and REP tables we need to do hierarchy level check (this check ensure that max execution time of any PM order is always before date_to neverthless of Trade Order)      IF OBJECT_ID('tempdb..#temp_pm_orders_trades_hierarchy_level_check', 'U') IS NOT NULL DROP TABLE #temp_pm_orders_trades_hierarchy_level_check      select *       into #temp_pm_orders_trades_hierarchy_level_check      from(      select distinct MAX(t.EXECUTION_TIME) as exec_time,oc.PM_ORD from(      select * from ##temp_orders_trades_al) temp      inner join      (select * from VISTA_REPORTING.dbo.ORDERS_CROSS) oc      on      temp.ORD_NUM = oc.PM_ORD      inner join      (select * from Vista_STAGING.dbo.TRADES) t      on      oc.TRD_ORD = t.ORD_NUM      group by oc.PM_ORD) m where m.exec_time >= @Date_to              --if in above table we capture any record we need to delete them from our #temp_orders_trades_al which takes data for archiving from all other tables      IF OBJECT_ID('tempdb..#temp_pm_orders_trades_hierarchy_level_check', 'U') IS NOT NULL       DELETE from ##temp_orders_trades_al       where exists (select PM_ORD from #temp_pm_orders_trades_hierarchy_level_check pm                 where pm.PM_ORD = ##temp_orders_trades_al.ORD_NUM)          --if in above table we capture any record we need to delete them from our #temp_orders_trades_al which takes data for archiving from all other tables      IF OBJECT_ID('tempdb..#temp_pm_orders_trades_hierarchy_level_check', 'U') IS NOT NULL       DELETE from ##temp_orders_trades_al_save       where exists (select PM_ORD from #temp_pm_orders_trades_hierarchy_level_check pm                 where pm.PM_ORD = ##temp_orders_trades_al_save .ORD_NUM)            ----------------------------------------------------FILTERS FOR TEMP TABLES CASH---------------------------------------------------------              --1.1 Take max execution time from trades which have ord num     IF OBJECT_ID('tempdb..#temp_cash_trd_max_execution', 'U') IS NOT NULL DROP TABLE #temp_cash_trd_max_execution     select MAX(executed_datetime) as execution_time, ORDER_ID      into #temp_cash_trd_max_execution     from Vista_Staging.dbo.CASH_TRADES where ORDER_ID <> '' or ORDER_ID is not null group by ORDER_ID         IF OBJECT_ID('tempdb..#temp_cash_trd_distinct_transa_passed_filter', 'U') IS NOT NULL DROP TABLE #temp_cash_trd_distinct_transa_passed_filter     select distinct ct.TRANSACTION_NUMBER,ct.ORDER_ID,ct.EXECUTED_DATETIME     into #temp_cash_trd_distinct_transa_passed_filter     from      (select * from #temp_cash_trd_max_execution where execution_time < @Date_to + ' 00:00:00.000') ctt     inner join     Vista_STAGING.dbo.CASH_TRADES ct     on     ctt.ORDER_ID = ct.ORDER_ID         ------------------------     --1.1 Take max execution time from trades which have ord num     IF OBJECT_ID('tempdb..#temp_cash_trd_max_execution_no_ord', 'U') IS NOT NULL DROP TABLE #temp_cash_trd_max_execution_no_ord     select MAX(executed_datetime) as execution_time, TRANSACTION_NUMBER      into #temp_cash_trd_max_execution_no_ord     from Vista_Staging.dbo.CASH_TRADES where ORDER_ID = '' or ORDER_ID is null group by TRANSACTION_NUMBER         IF OBJECT_ID('tempdb..#temp_cash_trd_distinct_transa_passed_filter_no_ord', 'U') IS NOT NULL DROP TABLE #temp_cash_trd_distinct_transa_passed_filter_no_ord     select distinct ct.TRANSACTION_NUMBER,ct.ORDER_ID     into #temp_cash_trd_distinct_transa_passed_filter_no_ord     from      (select * from #temp_cash_trd_max_execution_no_ord where execution_time < @Date_to + ' 00:00:00.000') ctt     inner join     Vista_STAGING.dbo.CASH_TRADES ct     on     ctt.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER         ---------------------------------          IF OBJECT_ID('tempdb..#temp_cash_ord_trd_all', 'U') IS NOT NULL DROP TABLE #temp_cash_ord_trd_all     select distinct co.order_id,ct.transaction_number,co.Instruction_Received_Date,ct.EXECUTED_DATETIME     into #temp_cash_ord_trd_all     from     (select * from #temp_cash_trd_distinct_transa_passed_filter)ct     inner join     (select * from Vista_STAGING.dbo.CASH_ORDERS) co     on ct.Order_id = co.Order_Id               IF OBJECT_ID('tempdb..##temp_cash_orders_trades', 'U') IS NOT NULL DROP TABLE ##temp_cash_orders_trades      select TRANSACTION_NUMBER,ORDER_ID      into ##temp_cash_orders_trades      from #temp_cash_trd_distinct_transa_passed_filter      union      select TRANSACTION_NUMBER,ORDER_ID      from #temp_cash_trd_distinct_transa_passed_filter_no_ord      union      select TRANSACTION_NUMBER, ORDER_ID      from #temp_cash_ord_trd_all         IF OBJECT_ID('tempdb..##temp_cash_orders_trades_save', 'U') IS NOT NULL DROP TABLE ##temp_cash_orders_trades_save      select TRANSACTION_NUMBER,ORDER_ID,@Current_Datetime as Run_date,@Date_to as Date_to_Archived      into ##temp_cash_orders_trades_save      from #temp_cash_trd_distinct_transa_passed_filter      union      select TRANSACTION_NUMBER,ORDER_ID,@Current_Datetime as Run_date,@Date_to as Date_to_Archived      from #temp_cash_trd_distinct_transa_passed_filter_no_ord      union      select TRANSACTION_NUMBER, ORDER_ID,@Current_Datetime as Run_date,@Date_to as Date_to_Archived      from #temp_cash_ord_trd_all            ----------------------------------------------------FILTERS FOR TEMP TABLES FX---------------------------------------------------------          --1.1 Take max execution time from trades which have ord num     IF OBJECT_ID('tempdb..#temp_fx_trd_max_execution', 'U') IS NOT NULL DROP TABLE #temp_fx_trd_max_execution     select MAX(executed_date_time) as execution_time, ORDER_ID      into #temp_fx_trd_max_execution     from Vista_Staging.dbo.fx_TRADES where ORDER_ID <> '' or ORDER_ID is not null group by ORDER_ID         IF OBJECT_ID('tempdb..#temp_fx_trd_distinct_transa_passed_filter', 'U') IS NOT NULL DROP TABLE #temp_fx_trd_distinct_transa_passed_filter     select distinct ct.TRADE_ID,ct.ORDER_ID,ct.executed_date_time     into #temp_fx_trd_distinct_transa_passed_filter     from      (select * from #temp_fx_trd_max_execution where execution_time < @Date_to + ' 00:00:00.000') ctt     inner join     Vista_STAGING.dbo.fx_TRADES ct     on     ctt.ORDER_ID = ct.ORDER_ID         ---------------------------------------------------------------------         --1.1 Take max execution time from trades which have ord num     IF OBJECT_ID('tempdb..#temp_fx_trd_max_execution_no_ord', 'U') IS NOT NULL DROP TABLE #temp_fx_trd_max_execution_no_ord     select MAX(executed_date_time) as execution_time, TRADE_ID      into #temp_fx_trd_max_execution_no_ord     from Vista_Staging.dbo.fx_TRADES where ORDER_ID = '' or ORDER_ID is null group by TRADE_ID         IF OBJECT_ID('tempdb..#temp_fx_trd_distinct_transa_passed_filter_no_ord', 'U') IS NOT NULL DROP TABLE #temp_fx_trd_distinct_transa_passed_filter_no_ord     select distinct ct.TRADE_ID,ct.ORDER_ID     into #temp_fx_trd_distinct_transa_passed_filter_no_ord     from      (select * from #temp_fx_trd_max_execution_no_ord where execution_time < @Date_to + ' 00:00:00.000') ctt     inner join     Vista_STAGING.dbo.fx_TRADES ct     on     ctt.TRADE_ID = ct.TRADE_ID     ----------------------------------------------------------------------     IF OBJECT_ID('tempdb..#temp_max_fx_ord_distinct_cancelled_no_trades', 'U') IS NOT NULL DROP TABLE #temp_max_fx_ord_distinct_cancelled_no_trades     select MAX(INSTRUCTION_RECEIVED_DATE_TIME) as max_received,FXM_ORDER_ID     into #temp_max_fx_ord_distinct_cancelled_no_trades     from      Vista_Staging.dbo.FX_ORDERS where INSTRUCTION_STATUS = 'Cancelled' group by FXM_ORDER_ID             IF OBJECT_ID('tempdb..#temp_fx_ord_distinct_cancelled_no_trades', 'U') IS NOT NULL DROP TABLE #temp_fx_ord_distinct_cancelled_no_trades     select FXM_ORDER_ID     into #temp_fx_ord_distinct_cancelled_no_trades     from      #temp_max_fx_ord_distinct_cancelled_no_trades where max_received < @Date_to     ----------------------------------------------------------------------         IF OBJECT_ID('tempdb..#temp_fx_ord_trd_all', 'U') IS NOT NULL DROP TABLE #temp_fx_ord_trd_all     select distinct co.FXM_ORDER_ID,ct.TRADE_ID,co.Instruction_Received_Date_time,ct.executed_date_time     into #temp_fx_ord_trd_all     from     (select * from #temp_fx_trd_distinct_transa_passed_filter)ct     inner join     (select * from Vista_STAGING.dbo.fx_ORDERS) co     on ct.Order_id = co.FXM_ORDER_ID               IF OBJECT_ID('tempdb..##temp_fx_orders_trades', 'U') IS NOT NULL DROP TABLE ##temp_fx_orders_trades      select TRADE_ID, ORDER_ID as FXM_order_id      into ##temp_fx_orders_trades      from #temp_fx_trd_distinct_transa_passed_filter      union      select TRADE_ID,ORDER_ID as FXM_order_id      from #temp_fx_trd_distinct_transa_passed_filter_no_ord      union      select TRADE_ID, FXM_ORDER_ID      from #temp_fx_ord_trd_all      union      select Null as TRADE_ID, FXM_ORDER_ID      from #temp_fx_ord_distinct_cancelled_no_trades         IF OBJECT_ID('tempdb..##temp_fx_orders_trades_save', 'U') IS NOT NULL DROP TABLE ##temp_fx_orders_trades_save      select TRADE_ID, ORDER_ID as FXM_order_id,@Current_Datetime as Run_date,@Date_to as Date_to_Archived      into ##temp_fx_orders_trades_save      from #temp_fx_trd_distinct_transa_passed_filter      union      select TRADE_ID,ORDER_ID as FXM_order_id,@Current_Datetime as Run_date,@Date_to as Date_to_Archived      from #temp_fx_trd_distinct_transa_passed_filter_no_ord      union      select TRADE_ID, FXM_ORDER_ID,@Current_Datetime as Run_date,@Date_to as Date_to_Archived      from #temp_fx_ord_trd_all      union      select Null as TRADE_ID, FXM_ORDER_ID,@Current_Datetime as Run_date,@Date_to as Date_to_Archived      from #temp_fx_ord_distinct_cancelled_no_trades            ------------------Stored Procedures for creating Archive Tables------------------------------------------------    IF (select count(1) from ##temp_cash_orders_trades)>0      EXEC Vista_Staging.dbo.[DATA_ARCHIVE_CASH]         IF (select count(1) from  ##temp_fx_orders_trades)>0     EXEC Vista_Staging.dbo.[DATA_ARCHIVE_FX]         IF (select count(1) from ##temp_orders_trades_al )> 0    EXEC Vista_Staging.dbo.[DATA_ARCHIVE_AL]  --This needs to go last because of dependencies on cash/fx audit tables for exception reason        ------------------Stored Procedure for deleting data from Current tables------------------------------------------------        IF (select count(1) from ##temp_cash_orders_trades)>0 or (select count(1) from  ##temp_fx_orders_trades)>0  or (select count(1) from ##temp_orders_trades_al )> 0    EXEC Vista_Staging.dbo.[DATA_ARCHIVE_DELETE_DATA]             IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVING_CASH', 'U') IS NOT NULL          INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVING_CASH       select * from ##temp_cash_orders_trades_save t      where NOT EXISTS (select ORDER_ID,TRANSACTION_NUMBER from VISTA_STAGING.dbo.DATA_ARCHIVING_CASH  maa where maa.ORDER_ID = t.ORDER_ID and maa.TRANSACTION_NUMBER = t.TRANSACTION_NUMBER)             ELSE          select * into VISTA_STAGING.dbo.DATA_ARCHIVING_CASH  from  ##temp_cash_orders_trades_save             IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVING_FX', 'U') IS NOT NULL                 INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVING_FX       select * from ##temp_fx_orders_trades_save t      where NOT EXISTS (select FXM_order_id,TRADE_ID from VISTA_STAGING.dbo.DATA_ARCHIVING_FX  maa where maa.FXM_order_id = t.FXM_order_id and  maa.TRADE_ID = t.TRADE_ID )         ELSE          select * into VISTA_STAGING.dbo.DATA_ARCHIVING_FX  from  ##temp_fx_orders_trades_save                       IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVING_AL', 'U') IS NOT NULL            INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVING_AL       select * from ##temp_orders_trades_al_save t      where NOT EXISTS (select ORD_NUM,multi_fund_id from VISTA_STAGING.dbo.DATA_ARCHIVING_AL  maa where maa.ORD_NUM = t.ORD_NUM and maa.multi_fund_id = t.MULTI_FUND_ID )         ELSE          select * into VISTA_STAGING.dbo.DATA_ARCHIVING_AL  from  ##temp_orders_trades_al_save                IF OBJECT_ID('tempdb..##temp_cash_orders_trades', 'U') IS NOT NULL DROP TABLE ##temp_cash_orders_trades    IF OBJECT_ID('tempdb..##temp_fx_orders_trades', 'U') IS NOT NULL DROP TABLE ##temp_fx_orders_trades    IF OBJECT_ID('tempdb..##temp_orders_trades_al', 'U') IS NOT NULL DROP TABLE ##temp_orders_trades_al        IF OBJECT_ID('tempdb..##temp_cash_orders_trades_save', 'U') IS NOT NULL DROP TABLE ##temp_cash_orders_trades_save    IF OBJECT_ID('tempdb..##temp_fx_orders_trades_save', 'U') IS NOT NULL DROP TABLE ##temp_fx_orders_trades_save    IF OBJECT_ID('tempdb..##temp_orders_trades_al_save', 'U') IS NOT NULL DROP TABLE ##temp_orders_trades_al_save        END  --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: DATA_ARCHIVE_CASH  CreateDate: 2025-06-26 17:32:23.483  ModifyDate: 2025-06-26 17:32:23.483  --- DEFINITION START ---  -- =============================================    -- Author:  <Miter, Matej>    -- Create date: <04/11/2021>    -- Description:     -- <>    -- =============================================        -- ***************VERSION CONTROL***************    --2022-02-24; Matej Miter created for Jira:    --SURVG-556 -Added New Instructor to Dealer report data into Archiving process      -- *********************************************        CREATE PROCEDURE [dbo].[DATA_ARCHIVE_CASH]     -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,            AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;            --------------------------------------ACCUMULATION(STAGING) TABLES Cash-----------------------------------------------------------------------             -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.CASH_ORDERS_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.CASH_ORDERS_ARCHIVED     select co.*     from Vista_Staging.dbo.CASH_ORDERS co     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = co.ORDER_ID      where NOT EXISTS (select ORDER_ID from VISTA_STAGING.dbo.CASH_ORDERS_ARCHIVED ca where ca.ORDER_ID = co.ORDER_ID)         ELSE          select co.*     into VISTA_STAGING.dbo.CASH_ORDERS_ARCHIVED     from Vista_Staging.dbo.CASH_ORDERS co     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = co.ORDER_ID              -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.CASH_TRADES_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.CASH_TRADES_ARCHIVED     select ct.*     from Vista_Staging.dbo.CASH_TRADES ct     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = ct.TRANSACTION_NUMBER     where NOT EXISTS (select TRANSACTION_NUMBER from VISTA_STAGING.dbo.CASH_TRADES_ARCHIVED ca where ca.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER)         ELSE          select ct.*     into VISTA_STAGING.dbo.CASH_TRADES_ARCHIVED     from Vista_Staging.dbo.CASH_TRADES ct     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = ct.TRANSACTION_NUMBER               -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.CASH_REFERENCE_RATES_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.CASH_REFERENCE_RATES_ARCHIVED     select crr.*     from Vista_Staging.dbo.CASH_REFERENCE_RATES crr     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = crr.transaction_number     where NOT EXISTS (select TRANSACTION_NUMBER from VISTA_STAGING.dbo.CASH_REFERENCE_RATES_ARCHIVED ca where ca.TRANSACTION_NUMBER = crr.TRANSACTION_NUMBER)         ELSE         select crr.*     into VISTA_STAGING.dbo.CASH_REFERENCE_RATES_ARCHIVED     from Vista_Staging.dbo.CASH_REFERENCE_RATES crr     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = crr.transaction_number         -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.CASH_MAPPED_BANKS_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.CASH_MAPPED_BANKS_ARCHIVED     select cmb.*     from Vista_Staging.dbo.CASH_MAPPED_BANKS cmb     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = cmb.transaction_number     where NOT EXISTS (select TRANSACTION_NUMBER from VISTA_STAGING.dbo.CASH_MAPPED_BANKS_ARCHIVED ca where ca.TRANSACTION_NUMBER = cmb.TRANSACTION_NUMBER)         ELSE         select cmb.*     into VISTA_STAGING.dbo.CASH_MAPPED_BANKS_ARCHIVED     from Vista_Staging.dbo.CASH_MAPPED_BANKS cmb     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = cmb.transaction_number         -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.CASH_BANK_RATES_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.CASH_BANK_RATES_ARCHIVED     select cbr.*     from Vista_Staging.dbo.CASH_BANK_RATES cbr     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = cbr.transaction_number     where NOT EXISTS (select TRANSACTION_NUMBER from VISTA_STAGING.dbo.CASH_BANK_RATES_ARCHIVED ca where ca.TRANSACTION_NUMBER = cbr.TRANSACTION_NUMBER)         ELSE         select cbr.*     into VISTA_STAGING.dbo.CASH_BANK_RATES_ARCHIVED     from Vista_Staging.dbo.CASH_BANK_RATES cbr     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = cbr.transaction_number            ----------------------------------------------------STAGING EXCEPTIONS TABLES CASH---------------------------------------------------------         -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_MM_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_MM_TABLE_ARCHIVED     select te.*     from Vista_Staging.dbo.VG_09_TIMELY_EXECUTION_CASH_MM_TABLE te     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = te.order_id     where NOT EXISTS (select order_id from VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_MM_TABLE_ARCHIVED ca where ca.order_id = te.order_id)         ELSE          select te.*     into VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_MM_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_09_TIMELY_EXECUTION_CASH_MM_TABLE te     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = te.order_id                  -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_RR_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_RR_TABLE_ARCHIVED     select te.*     from Vista_Staging.dbo.VG_09_TIMELY_EXECUTION_CASH_RR_TABLE te     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = te.order_id     where NOT EXISTS (select order_id from VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_RR_TABLE_ARCHIVED ca where ca.order_id = te.order_id)         ELSE         select te.*     into VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_RR_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_09_TIMELY_EXECUTION_CASH_RR_TABLE te     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = te.order_id              -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_CASH_MM_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_CASH_MM_TABLE_ARCHIVED     select tr.*     from Vista_Staging.dbo.VG_10_TIMELY_RECORDING_CASH_MM_TABLE tr     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = tr.transaction_number     where NOT EXISTS (select transaction_number from VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_CASH_MM_TABLE_ARCHIVED ca where ca.transaction_number = tr.transaction_number)         ELSE         select tr.*     into VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_CASH_MM_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_10_TIMELY_RECORDING_CASH_MM_TABLE tr     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = tr.transaction_number         -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_CASH_RR_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_CASH_RR_TABLE_ARCHIVED     select tr.*     from Vista_Staging.dbo.VG_10_TIMELY_RECORDING_CASH_RR_TABLE tr     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = tr.transaction_number     where NOT EXISTS (select transaction_number from VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_CASH_RR_TABLE_ARCHIVED ca where ca.transaction_number = tr.transaction_number)         ELSE         select tr.*     into VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_CASH_RR_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_10_TIMELY_RECORDING_CASH_RR_TABLE tr     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = tr.transaction_number         -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE_ARCHIVED     select gh.*     from Vista_Staging.dbo.VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE gh     inner join (select distinct Order_ID,transaction_number from ##temp_cash_orders_trades) c on c.order_id = gh.ord_num and c.transaction_number = gh.multi_fund_id     where NOT EXISTS (select ord_num,multi_fund_id from VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE_ARCHIVED ca where ca.multi_fund_id = gh.multi_fund_id      and ca.ORD_NUM = gh.ORD_NUM)         ELSE          select gh.*     into VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE gh     inner join (select distinct Order_ID,transaction_number from ##temp_cash_orders_trades) c on c.order_id = gh.ord_num and c.transaction_number = gh.multi_fund_id               -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE_ARCHIVED     select cd.*     from Vista_Staging.dbo.VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE cd     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = cd.ord_num      where NOT EXISTS (select ord_num from VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE_ARCHIVED ca where ca.ord_num = cd.ord_num)         ELSE         select cd.*     into VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE cd     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = cd.ord_num                -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_601_OUT_OF_HOURS_CASH_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_601_OUT_OF_HOURS_CASH_TABLE_ARCHIVED     select oh.*     from Vista_Staging.dbo.VG_601_OUT_OF_HOURS_CASH_TABLE oh     inner join (select distinct Order_ID,transaction_number from ##temp_cash_orders_trades) c on c.order_id = oh.order_id and c.transaction_number = oh.transaction_number     where NOT EXISTS (select order_id,transaction_number from VISTA_STAGING.dbo.VG_601_OUT_OF_HOURS_CASH_TABLE_ARCHIVED ca where ca.transaction_number = oh.transaction_number      and ca.order_id = oh.order_id)         ELSE         select oh.*     into VISTA_STAGING.dbo.VG_601_OUT_OF_HOURS_CASH_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_601_OUT_OF_HOURS_CASH_TABLE oh     inner join (select distinct Order_ID,transaction_number from ##temp_cash_orders_trades) c on c.order_id = oh.order_id and c.transaction_number = oh.transaction_number             -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_CASH_TABLE_ARCHIVED', 'U') IS NOT NULL     INSERT into VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_CASH_TABLE_ARCHIVED     select eh.*     from Vista_Staging.dbo.VG_602_EOD_HOLDOVERS_CASH_TABLE eh     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = eh.order_id     where NOT EXISTS (select order_id from VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_CASH_TABLE_ARCHIVED ca where ca.order_id = eh.order_id)         ELSE         select eh.*     into VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_CASH_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_602_EOD_HOLDOVERS_CASH_TABLE eh     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = eh.order_id               -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_603_LARGE_TRADES_CASH_TABLE_ARCHIVED', 'U') IS NOT NULL     INSERT into VISTA_STAGING.dbo.VG_603_LARGE_TRADES_CASH_TABLE_ARCHIVED     select lt.*     from Vista_Staging.dbo.VG_603_LARGE_TRADES_CASH_TABLE lt     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = lt.order_id      where NOT EXISTS (select order_id from VISTA_STAGING.dbo.VG_603_LARGE_TRADES_CASH_TABLE_ARCHIVED ca where ca.order_id = lt.order_id)         ELSE         select lt.*     into VISTA_STAGING.dbo.VG_603_LARGE_TRADES_CASH_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_603_LARGE_TRADES_CASH_TABLE lt     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = lt.order_id                -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_603T_LARGE_TRADES_CASH_TABLE_ARCHIVED', 'U') IS NOT NULL     INSERT into VISTA_STAGING.dbo.VG_603T_LARGE_TRADES_CASH_TABLE_ARCHIVED     select lt.*     from Vista_Staging.dbo.VG_603T_LARGE_TRADES_CASH_TABLE lt     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = lt.transaction_number      where NOT EXISTS (select transaction_number from VISTA_STAGING.dbo.VG_603T_LARGE_TRADES_CASH_TABLE_ARCHIVED ca where ca.transaction_number = lt.transaction_number)         ELSE         select lt.*     into VISTA_STAGING.dbo.VG_603T_LARGE_TRADES_CASH_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_603T_LARGE_TRADES_CASH_TABLE lt     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = lt.transaction_number               -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE_ARCHIVED     select coh.*     from Vista_Staging.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE coh     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = coh.order_id      where NOT EXISTS (select order_id from VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE_ARCHIVED ca where ca.order_id = coh.order_id)         ELSE         select coh.*     into VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE coh     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = coh.order_id           -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE_ARCHIVED     select coh.*     from Vista_Staging.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE coh     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = coh.order_id      where NOT EXISTS (select order_id from VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE_ARCHIVED ca where ca.order_id = coh.order_id)         ELSE         select coh.*     into VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE coh     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = coh.order_id              -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE_ARCHIVED     select be.*     from Vista_Staging.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE be     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = be.transaction_number      where NOT EXISTS (select transaction_number from VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE_ARCHIVED ca where ca.transaction_number = be.transaction_number)         ELSE         select be.*     into VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE be     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = be.transaction_number              -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_RR_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_RR_TABLE_ARCHIVED     select be.*     from Vista_Staging.dbo.VG_607_BEST_EXECUTION_CASH_RR_TABLE be     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = be.transaction_number      where NOT EXISTS (select transaction_number from VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_RR_TABLE_ARCHIVED ca where ca.transaction_number = be.transaction_number)         ELSE         select be.*     into VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_RR_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_607_BEST_EXECUTION_CASH_RR_TABLE be     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = be.transaction_number                    -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_608_TA_KNOCKBACK_CASH_TABLE_ARCHIVED', 'U') IS NOT NULL     INSERT into VISTA_STAGING.dbo.VG_608_TA_KNOCKBACK_CASH_TABLE_ARCHIVED     select tk.*     from Vista_Staging.dbo.VG_608_TA_KNOCKBACK_CASH_TABLE tk     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = tk.transaction_number     where NOT EXISTS (select transaction_number from VISTA_STAGING.dbo.VG_608_TA_KNOCKBACK_CASH_TABLE_ARCHIVED ca where ca.transaction_number = tk.transaction_number)         ELSE         select tk.*     into VISTA_STAGING.dbo.VG_608_TA_KNOCKBACK_CASH_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_608_TA_KNOCKBACK_CASH_TABLE tk     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = tk.transaction_number                    -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE_ARCHIVED', 'U') IS NOT NULL     INSERT into VISTA_STAGING.dbo.VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE_ARCHIVED     select dr.*     from Vista_Staging.dbo.VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE dr     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = dr.transaction_number      where NOT EXISTS (select transaction_number from VISTA_STAGING.dbo.VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE_ARCHIVED ca where ca.transaction_number = dr.transaction_number)         ELSE         select dr.*     into VISTA_STAGING.dbo.VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE dr     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = dr.transaction_number               -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_610_TBILLS_CP_CD_CASH_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_610_TBILLS_CP_CD_CASH_TABLE_ARCHIVED     select tcc.*     from Vista_Staging.dbo.VG_610_TBILLS_CP_CD_CASH_TABLE tcc     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = tcc.multi_fund_id      where NOT EXISTS (select multi_fund_id from VISTA_STAGING.dbo.VG_610_TBILLS_CP_CD_CASH_TABLE_ARCHIVED ca where ca.multi_fund_id = tcc.multi_fund_id)             ELSE         select tcc.*     into VISTA_STAGING.dbo.VG_610_TBILLS_CP_CD_CASH_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_610_TBILLS_CP_CD_CASH_TABLE tcc     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = tcc.multi_fund_id               -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_MM_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_MM_TABLE_ARCHIVED     select oa.*     from Vista_Staging.dbo.VG_611_ORDER_AGGREGATION_CASH_MM_TABLE oa     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = oa.order_id      where NOT EXISTS (select order_id from VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_MM_TABLE_ARCHIVED ca where ca.order_id = oa.order_id)         ELSE         select oa.*     into VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_MM_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_611_ORDER_AGGREGATION_CASH_MM_TABLE oa     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = oa.order_id              -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_RR_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_RR_TABLE_ARCHIVED     select oa.*     from Vista_Staging.dbo.VG_611_ORDER_AGGREGATION_CASH_RR_TABLE oa     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = oa.order_id      where NOT EXISTS (select order_id from VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_RR_TABLE_ARCHIVED ca where ca.order_id = oa.order_id)         ELSE         select oa.*     into VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_RR_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_611_ORDER_AGGREGATION_CASH_RR_TABLE oa     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = oa.order_id              -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_MM_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_MM_TABLE_ARCHIVED     select oa.*     from Vista_Staging.dbo.VG_612_ORDER_ALLOCATION_CASH_MM_TABLE oa     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = oa.transaction_number     where NOT EXISTS (select transaction_number from VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_MM_TABLE_ARCHIVED ca where ca.transaction_number = oa.transaction_number)         ELSE         select oa.*     into VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_MM_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_612_ORDER_ALLOCATION_CASH_MM_TABLE oa     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = oa.transaction_number          -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_RR_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_RR_TABLE_ARCHIVED     select oa.*     from Vista_Staging.dbo.VG_612_ORDER_ALLOCATION_CASH_RR_TABLE oa     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = oa.transaction_number     where NOT EXISTS (select transaction_number from VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_RR_TABLE_ARCHIVED ca where ca.transaction_number = oa.transaction_number)         ELSE         select oa.*     into VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_RR_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_612_ORDER_ALLOCATION_CASH_RR_TABLE oa     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = oa.transaction_number          --SURVG-556     -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE_ARCHIVED     select itd.*     from Vista_Staging.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE itd     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = itd.transaction_number      where NOT EXISTS (select transaction_number from VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE_ARCHIVED ca where ca.transaction_number = itd.transaction_number)         ELSE         select itd.*     into VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE itd     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = itd.transaction_number              -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE_ARCHIVED     select itd.*     from Vista_Staging.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE itd     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = itd.transaction_number      where NOT EXISTS (select transaction_number from VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE_ARCHIVED ca where ca.transaction_number = itd.transaction_number)         ELSE         select itd.*     into VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE itd     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = itd.transaction_number      --End of SURVG-556    ----------------------------------------------------------Reporting tables CASH----------------------------------------------------------------------------         IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE_ARCHIVED     select tr.*     from VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE tr     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = tr.transaction_number      where NOT EXISTS (select transaction_number from VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE_ARCHIVED ca where ca.transaction_number = tr.transaction_number)         ELSE         select tr.*     into VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE tr     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = tr.transaction_number                IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_RR_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_RR_TABLE_ARCHIVED     select tr.*     from VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_RR_TABLE tr     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = tr.transaction_number      where NOT EXISTS (select transaction_number from VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_RR_TABLE_ARCHIVED ca where ca.transaction_number = tr.transaction_number)             ELSE         select tr.*     into VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_RR_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_RR_TABLE tr     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = tr.transaction_number               IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE_ARCHIVED     select mgh.*     from VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE mgh     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = mgh.transaction_number      where NOT EXISTS (select transaction_number from VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE_ARCHIVED ca where ca.transaction_number = mgh.transaction_number)         ELSE         select mgh.*     into VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE mgh     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = mgh.transaction_number              IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE_ARCHIVED     select mbe.*     from VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE mbe     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = mbe.transaction_number     where NOT EXISTS (select transaction_number from VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE_ARCHIVED ca where ca.transaction_number = mbe.transaction_number)             ELSE         select mbe.*     into VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE mbe     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = mbe.transaction_number          IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR_TABLE_ARCHIVED     select mbe.*     from VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR_TABLE mbe     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = mbe.transaction_number      where NOT EXISTS (select transaction_number from VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR_TABLE_ARCHIVED ca where ca.transaction_number = mbe.transaction_number)         ELSE         select mbe.*     into VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR_TABLE mbe     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = mbe.transaction_number          IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_608_TA_KNOCKBACK_CASH_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_MFID_VG_608_TA_KNOCKBACK_CASH_TABLE_ARCHIVED     select mtk.*     from VISTA_REPORTING.dbo.MASTER_MFID_VG_608_TA_KNOCKBACK_CASH_TABLE mtk     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = mtk.transaction_number      where NOT EXISTS (select transaction_number from VISTA_REPORTING.dbo.MASTER_MFID_VG_608_TA_KNOCKBACK_CASH_TABLE_ARCHIVED ca where ca.transaction_number = mtk.transaction_number)         ELSE         select mtk.*     into VISTA_REPORTING.dbo.MASTER_MFID_VG_608_TA_KNOCKBACK_CASH_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_MFID_VG_608_TA_KNOCKBACK_CASH_TABLE mtk     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = mtk.transaction_number                   IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE_ARCHIVED     select mdr.*     from VISTA_REPORTING.dbo.MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE mdr     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = mdr.transaction_number      where NOT EXISTS (select transaction_number from VISTA_REPORTING.dbo.MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE_ARCHIVED ca where ca.transaction_number = mdr.transaction_number)         ELSE         select mdr.*     into VISTA_REPORTING.dbo.MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE mdr     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = mdr.transaction_number              IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE_ARCHIVED     select mtcc.*     from VISTA_REPORTING.dbo.MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE mtcc     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = mtcc.transaction_number      where NOT EXISTS (select transaction_number from VISTA_REPORTING.dbo.MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE_ARCHIVED ca where ca.transaction_number = mtcc.transaction_number)         ELSE         select mtcc.*     into VISTA_REPORTING.dbo.MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE mtcc     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = mtcc.transaction_number              IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_MM_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_MM_TABLE_ARCHIVED     select moa.*     from VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_MM_TABLE moa     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = moa.transaction_number      where NOT EXISTS (select transaction_number from VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_MM_TABLE_ARCHIVED ca where ca.transaction_number = moa.transaction_number)         ELSE         select moa.*     into VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_MM_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_MM_TABLE moa     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = moa.transaction_number                   IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_RR_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_RR_TABLE_ARCHIVED     select moa.*     from VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_RR_TABLE moa     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = moa.transaction_number      where NOT EXISTS (select transaction_number from VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_RR_TABLE_ARCHIVED ca where ca.transaction_number = moa.transaction_number)         ELSE         select moa.*     into VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_RR_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_RR_TABLE moa     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = moa.transaction_number              IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE_ARCHIVED     select mte.*     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE mte     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = mte.ORDER_ID      where NOT EXISTS (select ORDER_ID from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE_ARCHIVED ca where ca.ORDER_ID = mte.ORDER_ID)         ELSE         select mte.*     into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE mte     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = mte.ORDER_ID              IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_RR_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_RR_TABLE_ARCHIVED     select mte.*     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_RR_TABLE mte     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = mte.ORDER_ID      where NOT EXISTS (select ORDER_ID from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_RR_TABLE_ARCHIVED ca where ca.ORDER_ID = mte.ORDER_ID)         ELSE         select mte.*     into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_RR_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_RR_TABLE mte     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = mte.ORDER_ID              IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE_ARCHIVED     select mcd.*     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE mcd     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = mcd.ORDER_ID      where NOT EXISTS (select ORDER_ID from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE_ARCHIVED ca where ca.ORDER_ID = mcd.ORDER_ID)         ELSE         select mcd.*     into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE mcd     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = mcd.ORDER_ID          IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_CASH_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_CASH_TABLE_ARCHIVED     select moh.*     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_CASH_TABLE moh     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = moh.ORDER_ID      where NOT EXISTS (select ORDER_ID from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_CASH_TABLE_ARCHIVED ca where ca.ORDER_ID = moh.ORDER_ID)         ELSE         select moh.*     into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_CASH_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_CASH_TABLE moh     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = moh.ORDER_ID              IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_CASH_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_CASH_TABLE_ARCHIVED     select meh.*     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_CASH_TABLE meh     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = meh.ORDER_ID     where NOT EXISTS (select ORDER_ID from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_CASH_TABLE_ARCHIVED ca where ca.ORDER_ID = meh.ORDER_ID)         ELSE         select meh.*     into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_CASH_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_CASH_TABLE meh     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = meh.ORDER_ID          IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_CASH_TABLE_ARCHIVED', 'U') IS NOT NULL     INSERT into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_CASH_TABLE_ARCHIVED     select mlt.*     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_CASH_TABLE mlt     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = mlt.ORDER_ID      where NOT EXISTS (select ORDER_ID from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_CASH_TABLE_ARCHIVED ca where ca.ORDER_ID = mlt.ORDER_ID)         ELSE         select mlt.*     into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_CASH_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_CASH_TABLE mlt     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = mlt.ORDER_ID                    IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE_ARCHIVED     select mcoh.*     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE mcoh     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = mcoh.ORDER_ID      where NOT EXISTS (select ORDER_ID from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE_ARCHIVED ca where ca.ORDER_ID = mcoh.ORDER_ID)         ELSE         select mcoh.*     into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE mcoh     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = mcoh.ORDER_ID              IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE_ARCHIVED     select mcoh.*     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE mcoh     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = mcoh.ORDER_ID     where NOT EXISTS (select ORDER_ID from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE_ARCHIVED ca where ca.ORDER_ID = mcoh.ORDER_ID)         ELSE         select mcoh.*     into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE mcoh     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = mcoh.ORDER_ID              IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_MM_TABLE_ARCHIVED', 'U') IS NOT NULL     INSERT into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_MM_TABLE_ARCHIVED     select moa.*     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_MM_TABLE moa     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = moa.ORDER_ID      where NOT EXISTS (select ORDER_ID from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_MM_TABLE_ARCHIVED ca where ca.ORDER_ID = moa.ORDER_ID)         ELSE         select moa.*     into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_MM_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_MM_TABLE moa     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = moa.ORDER_ID              IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_RR_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_RR_TABLE_ARCHIVED     select moa.*     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_RR_TABLE moa     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = moa.ORDER_ID      where NOT EXISTS (select ORDER_ID from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_RR_TABLE_ARCHIVED ca where ca.ORDER_ID = moa.ORDER_ID)         ELSE         select moa.*     into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_RR_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_RR_TABLE moa     inner join (select distinct Order_ID from ##temp_cash_orders_trades) c on c.order_id = moa.ORDER_ID              --SURVG-556     IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE_ARCHIVED     select moa.*     from VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE moa     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = moa.transaction_number     where NOT EXISTS (select transaction_number from VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE_ARCHIVED ca where ca.transaction_number = moa.transaction_number)         ELSE         select mitd.*     into VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE mitd     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = mitd.transaction_number          IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE_ARCHIVED     select mitd.*     from VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE mitd     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = mitd.transaction_number      where NOT EXISTS (select transaction_number from VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE_ARCHIVED ca where ca.transaction_number = mitd.transaction_number)         ELSE         select mitd.*     into VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE mitd     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = mitd.transaction_number           --End of SURVG-556    ---------------------------------------------------REPORTING TABLES COMPLIANCE/MONITORING TABLES--------------------------------------------------             IF OBJECT_ID('VISTA_REPORTING.dbo.AUDIT_TABLE_CASH_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.AUDIT_TABLE_CASH_ARCHIVED     select distinct a.*      from VISTA_REPORTING.dbo.AUDIT_TABLE_CASH a     inner join (select distinct TRANSACTION_NUMBER from ##temp_cash_orders_trades ) c on c.TRANSACTION_NUMBER = a.TRANSACTION_NUMBER     where NOT EXISTS (select ID from VISTA_REPORTING.dbo.AUDIT_TABLE_CASH_ARCHIVED ca where ca.ID = a.ID)          union         select distinct a.*      from VISTA_REPORTING.dbo.AUDIT_TABLE_CASH a     inner join (select order_id from ##temp_cash_orders_trades where ORDER_ID != 0 ) c on c.ORDER_ID = a.ORDER_ID     where NOT EXISTS (select ID from VISTA_REPORTING.dbo.AUDIT_TABLE_CASH_ARCHIVED ca where ca.ID = a.ID)             ELSE              select distinct a.*     into VISTA_REPORTING.dbo.AUDIT_TABLE_CASH_ARCHIVED     from VISTA_REPORTING.dbo.AUDIT_TABLE_CASH a     inner join (select distinct TRANSACTION_NUMBER from ##temp_cash_orders_trades ) c on c.TRANSACTION_NUMBER = a.TRANSACTION_NUMBER          UNION         select distinct a.*     from VISTA_REPORTING.dbo.AUDIT_TABLE_CASH a     inner join (select order_id from ##temp_cash_orders_trades where ORDER_ID != 0 ) c on c.ORDER_ID = a.ORDER_ID             IF OBJECT_ID('VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_CASH_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_CASH_ARCHIVED     select distinct cat.*     from VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_CASH cat     inner join (select distinct TRANSACTION_NUMBER from ##temp_cash_orders_trades) c on c.TRANSACTION_NUMBER = cat.TRANSACTION_NUMBER     where NOT EXISTS (select TRANSACTION_NUMBER from VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_CASH_ARCHIVED ca where ca.TRANSACTION_NUMBER = cat.TRANSACTION_NUMBER)         UNION         select distinct cat.*     from VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_CASH cat     inner join (select order_id from ##temp_cash_orders_trades where ORDER_ID != 0 ) c on c.ORDER_ID = cat.ORDER_ID     where NOT EXISTS (select ORDER_ID from VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_CASH_ARCHIVED ca where ca.ORDER_ID = cat.ORDER_ID)         ELSE         select distinct cat.*     into VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_CASH_ARCHIVED     from VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_CASH cat     inner join (select distinct TRANSACTION_NUMBER from ##temp_cash_orders_trades) c on c.TRANSACTION_NUMBER = cat.TRANSACTION_NUMBER         UNION         select distinct cat.*     from VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_CASH cat     inner join (select order_id from ##temp_cash_orders_trades where ORDER_ID != 0) c on c.order_id = cat.order_id         IF OBJECT_ID('VISTA_REPORTING.dbo.COMPLIANCE_ORDERS_FINAL_STATUS_UPDATE_TABLE_CASH_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.COMPLIANCE_ORDERS_FINAL_STATUS_UPDATE_TABLE_CASH_ARCHIVED     select distinct cfs.*     from VISTA_REPORTING.dbo.COMPLIANCE_ORDERS_FINAL_STATUS_UPDATE_TABLE_CASH cfs     inner join (select order_id from ##temp_cash_orders_trades where ORDER_ID != 0) c on c.order_id = cfs.Order_id     where NOT EXISTS (select Order_id from VISTA_REPORTING.dbo.COMPLIANCE_ORDERS_FINAL_STATUS_UPDATE_TABLE_CASH_ARCHIVED ca where ca.Order_id = cfs.Order_id)         ELSE         select distinct cfs.*     into VISTA_REPORTING.dbo.COMPLIANCE_ORDERS_FINAL_STATUS_UPDATE_TABLE_CASH_ARCHIVED     from VISTA_REPORTING.dbo.COMPLIANCE_ORDERS_FINAL_STATUS_UPDATE_TABLE_CASH cfs     inner join (select order_id from ##temp_cash_orders_trades where ORDER_ID != 0) c on c.order_id = cfs.Order_id             /*     IF OBJECT_ID('VISTA_REPORTING.dbo.CASH_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.CASH_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE_ARCHIVED     select distinct cef.*     from VISTA_REPORTING.dbo.CASH_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE cef     inner join (select Order_ID from ##temp_cash_orders_trades where ORDER_ID != 0) c on c.order_id = cef.ORDER_ID     where NOT EXISTS (select Order_id from VISTA_REPORTING.dbo.CASH_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE_ARCHIVED ca where ca.Order_id = cef.Order_id)         UNION         select distinct cef.*     from VISTA_REPORTING.dbo.CASH_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE cef     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = cef.TRANSACTION_NUMBER     where NOT EXISTS (select TRANSACTION_NUMBER from VISTA_REPORTING.dbo.CASH_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE_ARCHIVED ca where ca.TRANSACTION_NUMBER = cef.TRANSACTION_NUMBER)         ELSE         select distinct cef.*     into VISTA_REPORTING.dbo.CASH_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.CASH_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE cef     inner join (select Order_ID from ##temp_cash_orders_trades where ORDER_ID != 0) c on c.order_id = cef.ORDER_ID         UNION         select distinct cef.*     from VISTA_REPORTING.dbo.CASH_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE cef     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = cef.TRANSACTION_NUMBER     */         IF OBJECT_ID('VISTA_REPORTING.dbo.SAMPLED_ORDERS_CASH_COMPLIANCE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.SAMPLED_ORDERS_CASH_COMPLIANCE_ARCHIVED     select distinct soc.*     from VISTA_REPORTING.dbo.SAMPLED_ORDERS_CASH_COMPLIANCE soc     inner join (select Order_ID from ##temp_cash_orders_trades where ORDER_ID != 0) c on c.order_id = soc.ORDER_ID     where NOT EXISTS (select ORDER_ID from VISTA_REPORTING.dbo.SAMPLED_ORDERS_CASH_COMPLIANCE_ARCHIVED ca where ca.ORDER_ID = soc.ORDER_ID)         ELSE         select distinct soc.*     into VISTA_REPORTING.dbo.SAMPLED_ORDERS_CASH_COMPLIANCE_ARCHIVED     from VISTA_REPORTING.dbo.SAMPLED_ORDERS_CASH_COMPLIANCE soc     inner join (select Order_ID from ##temp_cash_orders_trades where ORDER_ID != 0) c on c.order_id = soc.ORDER_ID         /*     IF OBJECT_ID('VISTA_REPORTING.dbo.COMPLIANCE_ORDER_SUMMARY_CASH_ARCHIVED', 'U') IS NOT NULL     INSERT into  VISTA_REPORTING.dbo.COMPLIANCE_ORDER_SUMMARY_CASH_ARCHIVED     select distinct cosc.*     from select * from  VISTA_REPORTING.dbo.COMPLIANCE_ORDER_SUMMARY_CASH cosc     inner join (select Order_ID from ##temp_cash_orders_trades where ORDER_ID != 0) c on c.order_id = cosc.ORDER_ID     where NOT EXISTS (select ORDER_ID from VISTA_REPORTING.dbo.COMPLIANCE_ORDER_SUMMARY_CASH_ARCHIVED ca where ca.ORDER_ID = cosc.ORDER_ID)         ELSE         select distinct cosc.*     into VISTA_REPORTING.dbo.COMPLIANCE_ORDER_SUMMARY_CASH_ARCHIVED     from VISTA_REPORTING.dbo.COMPLIANCE_ORDER_SUMMARY_CASH cosc     inner join (select Order_ID from ##temp_cash_orders_trades where ORDER_ID != 0) c on c.order_id = cosc.ORDER_ID     */    -------------------------------------------------------------DMC Cash tables--------------------------------------------------------------------------------             IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_CASH_AGGREGATOR_DATA_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.DMC_CASH_AGGREGATOR_DATA_ARCHIVED     select distinct cad.*     from VISTA_REPORTING.dbo.DMC_CASH_AGGREGATOR_DATA cad     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = cad.TRANSACTION_NUMBER     where NOT EXISTS (select TRANSACTION_NUMBER from VISTA_REPORTING.dbo.DMC_CASH_AGGREGATOR_DATA_ARCHIVED ca where ca.TRANSACTION_NUMBER = cad.TRANSACTION_NUMBER)         ELSE         select distinct cad.*     into VISTA_REPORTING.dbo.DMC_CASH_AGGREGATOR_DATA_ARCHIVED     from VISTA_REPORTING.dbo.DMC_CASH_AGGREGATOR_DATA cad     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = cad.TRANSACTION_NUMBER                  IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_CASH_AGGREGATOR_1B_DATA_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.DMC_CASH_AGGREGATOR_1B_DATA_ARCHIVED     select distinct cad.*     from VISTA_REPORTING.dbo.DMC_CASH_AGGREGATOR_1B_DATA cad     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = cad.TRANSACTION_NUMBER     where NOT EXISTS (select TRANSACTION_NUMBER from VISTA_REPORTING.dbo.DMC_CASH_AGGREGATOR_1B_DATA_ARCHIVED ca where ca.TRANSACTION_NUMBER = cad.TRANSACTION_NUMBER)         ELSE         select distinct cad.*     into VISTA_REPORTING.dbo.DMC_CASH_AGGREGATOR_1B_DATA_ARCHIVED     from VISTA_REPORTING.dbo.DMC_CASH_AGGREGATOR_1B_DATA cad     inner join (select distinct transaction_number from ##temp_cash_orders_trades) c on c.transaction_number = cad.TRANSACTION_NUMBER                       END                            --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: Data_Archive_Count_Checks_Daily_Procedure  CreateDate: 2025-06-26 17:32:40.373  ModifyDate: 2025-06-26 17:32:40.373  --- DEFINITION START ---  -- =============================================    -- Author:  <Miter, Matej>    -- Create date: <11/10/2021>    -- Description:     -- <INSTRUCTOR that orders trade must be different than dealer     -- otherwise exception will be raised>    -- =============================================        -- ***************VERSION CONTROL***************    --    -- *********************************************        CREATE PROCEDURE [dbo].[Data_Archive_Count_Checks_Daily_Procedure]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;                IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT 'VG_01_QUOTE_EXCEPTION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MULTI_FUND_ID) as EXCEPTION_COUNT,       GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_01_QUOTE_EXCEPTION_DMG_TABLE     where VG_01 = 1 and TRY_CAST(CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_01_QUOTE_EXCEPTION_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_01_QUOTE_EXCEPTION_EQ_TABLE     where quote_exception = 1 and TRY_CAST(QE_CREATE_TIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_01_QUOTE_EXCEPTION_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI_TABLE     where quote_exception = 1 and TRY_CAST(CREATETIME as date) = TRY_CAST(GETDATE() as date)                IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_01_QUOTE_EXCEPTION_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_01_QUOTE_EXCEPTION_LL_TABLE     where quote_exception = 1 and TRY_CAST(CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_06_NEW_ISSUE_ORDER_FLIPPING_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(CLIENT_EXECUTION_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_FI_TABLE     where NEW_ORDER_FLIPPING_EXCEPTION = 1 and TRY_CAST(NEW_ORDER_FLIPPING_EXCEPTION_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_06_NEW_ISSUE_ORDER_FLIPPING_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(CLIENT_EXECUTION_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_LL_TABLE     where NEW_ORDER_FLIPPING_EXCEPTION = 1 and TRY_CAST(NEW_ORDER_FLIPPING_EXCEPTION_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_07_NON_WINNING_QUOTE_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_07_NON_WINNING_QUOTE_DMG_TABLE     where VG_07 = 1 and TRY_CAST(VG_07_CREATETIME as date) = TRY_CAST(GETDATE() as date)                IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_07_NON_WINNING_QUOTE_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_07_NON_WINNING_QUOTE_EQ_TABLE     where NON_WINNING_QUOTE_EXCEPTION = 1 and TRY_CAST(NWQ_CREATEIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_07_NON_WINNING_QUOTE_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_07_NON_WINNING_QUOTE_FI_TABLE     where NWQ_EXCEPTION = 1 and TRY_CAST(NWQ_CREATEIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_07_NON_WINNING_QUOTE_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_07_NON_WINNING_QUOTE_LL_TABLE     where NWQ_EXCEPTION = 1 and TRY_CAST(NWQ_CREATEIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_08_Order_Inflation_FI_Table' as Table_name,       'FI' as Dealing_Desk,       count(CLIENT_EXECUTION_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_08_Order_Inflation_FI_Table     where ORDER_INFLATION_EXCEPTION = 1 and TRY_CAST(OI_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_08_Order_Inflation_LL_Table' as Table_name,       'LL' as Dealing_Desk,       count(CLIENT_EXECUTION_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_08_Order_Inflation_LL_Table     where ORDER_INFLATION_EXCEPTION = 1 and TRY_CAST(OI_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_09_TIMELY_EXECUTION_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_MM_TABLE     where VG_09 >= 1 and TRY_CAST(VG_09_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_09_TIMELY_EXECUTION_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_RR_TABLE     where VG_09 >= 1 and TRY_CAST(VG_09_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_09_TIMELY_EXECUTION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_DMG_TABLE     where VG_09 >= 1 and TRY_CAST(CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_09_TIMELY_EXECUTION_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_EQ_TABLE     where TIMELY_EXECUTION_EXCEPTION >= 1 and TRY_CAST(CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_09_TIMELY_EXECUTION_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE     where TIMELY_EXECUTION_EXCEPTION >= 1 and TRY_CAST(CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_09_TIMELY_EXECUTION_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_FX_TABLE     where VG_09 >= 1 and TRY_CAST(VG_09_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_09_TIMELY_EXECUTION_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_LL_TABLE     where TIMELY_EXECUTION_EXCEPTION >= 1 and TRY_CAST(CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_10_NAV_CUT_OFF_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_10_NAV_CUT_OFF_EQ_TABLE     where NAV_CUT_OFF_EXCEPTION = 1 and TRY_CAST(NAV_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_10_NAV_CUT_OFF_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_10_NAV_CUT_OFF_EQ_TABLE     where NAV_CUT_OFF_EXCEPTION = 1 and TRY_CAST(NAV_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_10_TIMELY_RECORDING_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_CASH_MM_TABLE     where VG_10 >= 1 and TRY_CAST(VG_10_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_10_TIMELY_RECORDING_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_CASH_RR_TABLE     where VG_10 >= 1 and TRY_CAST(VG_10_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_10_TIMELY_RECORDING_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_DMG_TABLE     where VG_10 >= 1 and TRY_CAST(TREC_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_10_TIMELY_RECORDING_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_EQ_TABLE     where TIMELY_RECORDING_FLAG >= 1 and TRY_CAST(TREC_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_10_TIMELY_RECORDING_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_FI_TABLE     where TIMELY_RECORDING_EXCEPTION >= 1 and TRY_CAST(TREC_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_10_TIMELY_RECORDING_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(TRADE_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_FX_TABLE     where VG_10 >= 1 and TRY_CAST(VG_10_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_10_TIMELY_RECORDING_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_LL_TABLE     where TIMELY_RECORDING_EXCEPTION >= 1 and TRY_CAST(TREC_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_11_TIMELY_RELEASE_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_11_TIMELY_RELEASE_EQ_TABLE     where TIMELY_RELEASE_EXCEPTION = 1 and TRY_CAST(TR_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_13_ORDER_AGGREGATION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_13_ORDER_AGGREGATION_DMG_TABLE     where MERGE_EXCEPTION = 1 and TRY_CAST(CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_13_ORDER_AGGREGATION_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_13_ORDER_AGGREGATION_EQ_TABLE     where MERGE_EXCEPTION = 1 and TRY_CAST(CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_13_ORDER_AGGREGATION_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_13_ORDER_AGGREGATION_FI_TABLE     where MERGE_EXCEPTION = 1 and TRY_CAST(CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_13_ORDER_AGGREGATION_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_13_ORDER_AGGREGATION_LL_TABLE     where MERGE_EXCEPTION = 1 and TRY_CAST(CREATETIME as date) = TRY_CAST(GETDATE() as date)                IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_14_ORDER_PRIORITY_EXCEPTION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_DMG_TABLE     where ORDER_PRIORITY_EXCEPTION = 1 and TRY_CAST(CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_14_ORDER_PRIORITY_EXCEPTION_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_EQ_TABLE     where ORDER_PRIORITY_EXCEPTION = 1 and TRY_CAST(CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_14_ORDER_PRIORITY_EXCEPTION_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_FI_TABLE     where ORDER_PRIORITY_EXCEPTION = 1 and TRY_CAST(CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_14_ORDER_PRIORITY_EXCEPTION_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_LL_TABLE     where ORDER_PRIORITY_EXCEPTION = 1 and TRY_CAST(CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_15_AMENDMENT_FLAG_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_15_AMENDMENT_FLAG_DMG_TABLE     where VG_15 = 1 and TRY_CAST(EXCEPTION_FLAG_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_15_AMENDMENT_FLAG_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_15_AMENDMENT_FLAG_EQ_TABLE     where AMENDMENT_FLAG = 1 and TRY_CAST(AMENDMENT_FLAG_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_15_AMENDMENT_FLAG_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_15_AMENDMENT_FLAG_FI_TABLE     where AMENDMENT_FLAG = 1 and TRY_CAST(AMENDMENT_FLAG_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_15_AMENDMENT_FLAG_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_15_AMENDMENT_FLAG_LL_TABLE     where AMENDMENT_FLAG = 1 and TRY_CAST(AMENDMENT_FLAG_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE     where VG_16 = 1  and TRY_CAST(VG_16_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE     where VG_16 = 1 and TRY_CAST(VG_16_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(TRADE_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE     where VG_16 = 1 and TRY_CAST(VG_16_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE     where VG_17 = 1 and TRY_CAST(VG_17_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE     where VG_17 = 1 and TRY_CAST(CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_17_COUNTERPARTY_DIRECTION_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE     where VG_17 = 1 and TRY_CAST(VG_17_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_19_PT_AMENDMENT_FLAG_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_DMG_TABLE     where VG_19 = 1 and TRY_CAST(EXCEPTION_FLAG_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL     INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_19_PT_AMENDMENT_FLAG_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_EQ_TABLE     where  AMENDMENT_FLAG = 1 and TRY_CAST(AMENDMENT_FLAG_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_19_PT_AMENDMENT_FLAG_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_FI_TABLE     where  AMENDMENT_FLAG = 1 and TRY_CAST(AMENDMENT_FLAG_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_19_PT_AMENDMENT_FLAG_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_LL_TABLE     where  AMENDMENT_FLAG = 1 and TRY_CAST(AMENDMENT_FLAG_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_19_PT_TBILLS_CP_CD_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_19_PT_TBILLS_CP_CD_CASH_TABLE     where  AMENDMENT_FLAG = 1 and TRY_CAST(VG_19_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_25_INTERFUND_TRANSFER_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_25_INTERFUND_TRANSFER_DMG_TABLE     where  IT_FLAG = 1 and TRY_CAST(IT_FLAG_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_25_INTERFUND_TRANSFER_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_25_INTERFUND_TRANSFER_EQ_TABLE     where  IT_FLAG = 1 and TRY_CAST(IT_FLAG_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_25_INTERFUND_TRANSFER_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_25_INTERFUND_TRANSFER_FI_TABLE     where  IT_FLAG = 1 and TRY_CAST(IT_FLAG_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_25_INTERFUND_TRANSFER_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_25_INTERFUND_TRANSFER_LL_TABLE     where  IT_FLAG = 1 and TRY_CAST(IT_FLAG_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_40_EXTENDED_SETTLEMENT_EXCEPTION_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_40_EXTENDED_SETTLEMENT_EXCEPTION_TABLE     where  SETTLEMENT_EXCEPTION = 1 and TRY_CAST(SETTLEMENT_CREATEDATE as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE     where  VG_41 = 1 and TRY_CAST(VG_41_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_500_DEALER_LIMIT_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_500_DEALER_LIMIT_FX_TABLE     where  VG_500 = 1 and TRY_CAST(EXCEPTION_FLAG_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_501_SPOT_REFERENCE_RATE_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(TRADE_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_501_SPOT_REFERENCE_RATE_FX_TABLE     where  VG_501 = 1 and TRY_CAST(VG_501_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_601_OUT_OF_HOURS_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       coalesce(count(ORDER_ID),count(transaction_number)) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_601_OUT_OF_HOURS_CASH_TABLE     where  TRY_CAST(VG_601_CREATETIME as date) = TRY_CAST(GETDATE() as date)      and ORDER_EXCEPTION = 1 or TRADE_EXCEPTION = 1         IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_601_OUT_OF_HOURS_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       coalesce(count(ORDER_ID),count(TRADE_ID)) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_601_OUT_OF_HOURS_FX_TABLE     where  VG_601 = 1 and TRY_CAST(VG_601_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_602_EOD_HOLDOVERS_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_602_EOD_HOLDOVERS_CASH_TABLE     where  VG_602 = 1 and TRY_CAST(VG_602_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_602_EOD_HOLDOVERS_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(FXM_ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_602_EOD_HOLDOVERS_FX_TABLE     where  VG_602 = 1 and TRY_CAST(VG_602_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_603_LARGE_TRADES_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_603_LARGE_TRADES_CASH_TABLE     where  EXCEPTION_FLAG = 1 and TRY_CAST(EXCEPTION_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_603_LARGE_TRADES_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_603_LARGE_TRADES_FX_TABLE     where  VG_603 = 1 and TRY_CAST(VG_603_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_603_LARGE_TRADES_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_603_LARGE_TRADES_FX_TABLE     where  VG_603 = 1 and TRY_CAST(VG_603_CREATETIME as date) = TRY_CAST(GETDATE() as date)          IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_603T_LARGE_TRADES_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_603T_LARGE_TRADES_CASH_TABLE     where  EXCEPTION_FLAG = 1 and TRY_CAST(EXCEPTION_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_603T_LARGE_TRADES_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_603T_LARGE_TRADES_FX_TABLE     where  EXCEPTION_FLAG = 1 and TRY_CAST(EXCEPTION_FLAG_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE     where  VG_604 = 1 and TRY_CAST(VG_604_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE     where  VG_604 = 1 and TRY_CAST(VG_604_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_604_CLIENT_ORDER_HANDLING_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_FX_TABLE     where  VG_604 = 1 and TRY_CAST(VG_604_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_607_BEST_EXECUTION_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE     where  VG_607_MM = 1 and TRY_CAST(VG_607_CREATETIME_MM as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_607_BEST_EXECUTION_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_RR_TABLE     where  VG_607_RR = 1 and TRY_CAST(VG_607_CREATETIME_RR as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_607_BEST_EXECUTION_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(TRADE_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE     where  VG_607 = 1 and TRY_CAST(VG_607_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_608_TA_KNOCKBACK_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_608_TA_KNOCKBACK_CASH_TABLE     where  VG_608 = 1 and TRY_CAST(VG_608_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_608_TA_KNOCKBACK_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(FXM_ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_608_TA_KNOCKBACK_FX_TABLE     where  VG_608 = 1 and TRY_CAST(VG_608_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE     where  VG_609_CRR = 1 and TRY_CAST(VG_609_CREATETIME_CRR as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_610_TBILLS_CP_CD_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_610_TBILLS_CP_CD_CASH_TABLE     where  VG_610 = 1 and TRY_CAST(VG_610_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_611_ORDER_AGGREGATION_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_MM_TABLE     where  VG_611 = 1 and TRY_CAST(VG_611_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_611_ORDER_AGGREGATION_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_RR_TABLE     where  VG_611 = 1 and TRY_CAST(VG_611_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_611_ORDER_AGGREGATION_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_611_ORDER_AGGREGATION_FX_TABLE     where  VG_611 = 1 and TRY_CAST(VG_611_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_612_ORDER_ALLOCATION_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_MM_TABLE     where  VG_612 = 1 and TRY_CAST(VG_612_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_612_ORDER_ALLOCATION_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_RR_TABLE     where  VG_612 = 1 and TRY_CAST(VG_612_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_612_ORDER_ALLOCATION_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_612_ORDER_ALLOCATION_FX_TABLE     where  VG_612 = 1 and TRY_CAST(VG_612_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE     where  VG_613 = 1 and TRY_CAST(VG_613_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE     where  VG_613 = 1 and TRY_CAST(VG_613_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(TRADE_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE     where  VG_613 = 1 and TRY_CAST(VG_613_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_COMMISSION_EXCEPTION_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_COMMISSION_EXCEPTION_EQ_TABLE     where  COMMISSION_EXCEPTION = 1 and TRY_CAST(CE_CREATE_TIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_IMPLEMENTATION_SHORTFALL_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_IMPLEMENTATION_SHORTFALL_EQ_TABLE     where  IM_EXCEPTION = 1 and TRY_CAST(IM_CREATEDATE as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS_DAILY     SELECT  'VG_MARKET_HIGH_LOW_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_MARKET_HIGH_LOW_TABLE     where  HL_CREATEDATE = 1 and TRY_CAST(HL_CREATEDATE as date) = TRY_CAST(GETDATE() as date)            END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: Data_Archive_Count_Checks_Procedure  CreateDate: 2025-06-26 17:33:00.173  ModifyDate: 2025-06-26 17:33:00.173  --- DEFINITION START ---  -- =============================================    -- Author:  <Miter, Matej>    -- Create date: <11/10/2021>    -- Description:     -- <INSTRUCTOR that orders trade must be different than dealer     -- otherwise exception will be raised>    -- =============================================        -- ***************VERSION CONTROL***************    --    -- *********************************************        CREATE PROCEDURE [dbo].[Data_Archive_Count_Checks_Procedure]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;                IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT 'VG_01_QUOTE_EXCEPTION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MULTI_FUND_ID) as EXCEPTION_COUNT,       GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_01_QUOTE_EXCEPTION_DMG_TABLE     where VG_01 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_01_QUOTE_EXCEPTION_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_01_QUOTE_EXCEPTION_EQ_TABLE     where quote_exception = 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_01_QUOTE_EXCEPTION_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI_TABLE     where quote_exception = 1                IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_01_QUOTE_EXCEPTION_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_01_QUOTE_EXCEPTION_LL_TABLE     where quote_exception = 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_06_NEW_ISSUE_ORDER_FLIPPING_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(CLIENT_EXECUTION_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_FI_TABLE     where NEW_ORDER_FLIPPING_EXCEPTION = 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_06_NEW_ISSUE_ORDER_FLIPPING_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(CLIENT_EXECUTION_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_LL_TABLE     where NEW_ORDER_FLIPPING_EXCEPTION = 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_07_NON_WINNING_QUOTE_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_07_NON_WINNING_QUOTE_DMG_TABLE     where VG_07 = 1                IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_07_NON_WINNING_QUOTE_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_07_NON_WINNING_QUOTE_EQ_TABLE     where NON_WINNING_QUOTE_EXCEPTION = 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_07_NON_WINNING_QUOTE_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_07_NON_WINNING_QUOTE_FI_TABLE     where NWQ_EXCEPTION = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_07_NON_WINNING_QUOTE_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_07_NON_WINNING_QUOTE_LL_TABLE     where NWQ_EXCEPTION = 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_08_Order_Inflation_FI_Table' as Table_name,       'FI' as Dealing_Desk,       count(CLIENT_EXECUTION_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_08_Order_Inflation_FI_Table     where ORDER_INFLATION_EXCEPTION = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_08_Order_Inflation_LL_Table' as Table_name,       'LL' as Dealing_Desk,       count(CLIENT_EXECUTION_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_08_Order_Inflation_LL_Table     where ORDER_INFLATION_EXCEPTION = 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_09_TIMELY_EXECUTION_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_MM_TABLE     where VG_09 >= 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_09_TIMELY_EXECUTION_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_RR_TABLE     where VG_09 >= 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_09_TIMELY_EXECUTION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_DMG_TABLE     where VG_09 >= 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_09_TIMELY_EXECUTION_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_EQ_TABLE     where TIMELY_EXECUTION_EXCEPTION >= 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_09_TIMELY_EXECUTION_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE     where TIMELY_EXECUTION_EXCEPTION >= 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_09_TIMELY_EXECUTION_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_FX_TABLE     where VG_09 >= 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_09_TIMELY_EXECUTION_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_LL_TABLE     where TIMELY_EXECUTION_EXCEPTION >= 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_10_NAV_CUT_OFF_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_10_NAV_CUT_OFF_EQ_TABLE     where NAV_CUT_OFF_EXCEPTION = 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_10_TIMELY_RECORDING_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_CASH_MM_TABLE     where VG_10 >= 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_10_TIMELY_RECORDING_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_CASH_RR_TABLE     where VG_10 >= 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_10_TIMELY_RECORDING_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_DMG_TABLE     where VG_10 >= 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_10_TIMELY_RECORDING_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_EQ_TABLE     where TIMELY_RECORDING_FLAG >= 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_10_TIMELY_RECORDING_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_FI_TABLE     where TIMELY_RECORDING_EXCEPTION >= 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_10_TIMELY_RECORDING_FX_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(TRADE_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_FX_TABLE     where VG_10 >= 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_10_TIMELY_RECORDING_LL_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_LL_TABLE     where TIMELY_RECORDING_EXCEPTION >= 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_11_TIMELY_RELEASE_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_11_TIMELY_RELEASE_EQ_TABLE     where TIMELY_RELEASE_EXCEPTION = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_13_ORDER_AGGREGATION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_13_ORDER_AGGREGATION_DMG_TABLE     where MERGE_EXCEPTION = 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_13_ORDER_AGGREGATION_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_13_ORDER_AGGREGATION_EQ_TABLE     where MERGE_EXCEPTION = 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_13_ORDER_AGGREGATION_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_13_ORDER_AGGREGATION_FI_TABLE     where MERGE_EXCEPTION = 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_13_ORDER_AGGREGATION_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_13_ORDER_AGGREGATION_LL_TABLE     where MERGE_EXCEPTION = 1                IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_14_ORDER_PRIORITY_EXCEPTION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_DMG_TABLE     where ORDER_PRIORITY_EXCEPTION = 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_14_ORDER_PRIORITY_EXCEPTION_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_EQ_TABLE     where ORDER_PRIORITY_EXCEPTION = 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_14_ORDER_PRIORITY_EXCEPTION_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_FI_TABLE     where ORDER_PRIORITY_EXCEPTION = 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_14_ORDER_PRIORITY_EXCEPTION_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_LL_TABLE     where ORDER_PRIORITY_EXCEPTION = 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_15_AMENDMENT_FLAG_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_15_AMENDMENT_FLAG_DMG_TABLE     where VG_15 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_15_AMENDMENT_FLAG_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_15_AMENDMENT_FLAG_EQ_TABLE     where AMENDMENT_FLAG = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_15_AMENDMENT_FLAG_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_15_AMENDMENT_FLAG_FI_TABLE     where AMENDMENT_FLAG = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_15_AMENDMENT_FLAG_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_15_AMENDMENT_FLAG_LL_TABLE     where AMENDMENT_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE     where VG_16 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE     where VG_16 = 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(TRADE_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE     where VG_16 = 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE     where VG_17 = 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE     where VG_17 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_17_COUNTERPARTY_DIRECTION_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE     where VG_17 = 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_19_PT_AMENDMENT_FLAG_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_DMG_TABLE     where VG_19 = 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL     INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_19_PT_AMENDMENT_FLAG_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_EQ_TABLE     where  AMENDMENT_FLAG = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_19_PT_AMENDMENT_FLAG_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_FI_TABLE     where  AMENDMENT_FLAG = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_19_PT_AMENDMENT_FLAG_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_LL_TABLE     where  AMENDMENT_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_19_PT_TBILLS_CP_CD_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_19_PT_TBILLS_CP_CD_CASH_TABLE     where  AMENDMENT_FLAG = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_25_INTERFUND_TRANSFER_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_25_INTERFUND_TRANSFER_DMG_TABLE     where  IT_FLAG = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_25_INTERFUND_TRANSFER_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_25_INTERFUND_TRANSFER_EQ_TABLE     where  IT_FLAG = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_25_INTERFUND_TRANSFER_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_25_INTERFUND_TRANSFER_FI_TABLE     where  IT_FLAG = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_25_INTERFUND_TRANSFER_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_25_INTERFUND_TRANSFER_LL_TABLE     where  IT_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_40_EXTENDED_SETTLEMENT_EXCEPTION_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_40_EXTENDED_SETTLEMENT_EXCEPTION_TABLE     where  SETTLEMENT_EXCEPTION = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE     where  VG_41 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_500_DEALER_LIMIT_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_500_DEALER_LIMIT_FX_TABLE     where  VG_500 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_501_SPOT_REFERENCE_RATE_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(TRADE_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_501_SPOT_REFERENCE_RATE_FX_TABLE     where  VG_501 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_601_OUT_OF_HOURS_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       coalesce(count(ORDER_ID),count(transaction_number)) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_601_OUT_OF_HOURS_CASH_TABLE     where  ORDER_EXCEPTION = 1 or TRADE_EXCEPTION = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_601_OUT_OF_HOURS_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       coalesce(count(ORDER_ID),count(TRADE_ID)) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_601_OUT_OF_HOURS_FX_TABLE     where  VG_601 = 1             IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_602_EOD_HOLDOVERS_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_602_EOD_HOLDOVERS_CASH_TABLE     where  VG_602 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_602_EOD_HOLDOVERS_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(FXM_ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_602_EOD_HOLDOVERS_FX_TABLE     where  VG_602 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_603_LARGE_TRADES_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_603_LARGE_TRADES_CASH_TABLE     where  EXCEPTION_FLAG = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_603_LARGE_TRADES_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_603_LARGE_TRADES_FX_TABLE     where  VG_603 = 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_603_LARGE_TRADES_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_603_LARGE_TRADES_FX_TABLE     where  VG_603 = 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_603T_LARGE_TRADES_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_603T_LARGE_TRADES_CASH_TABLE     where  EXCEPTION_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_603T_LARGE_TRADES_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_603T_LARGE_TRADES_FX_TABLE     where  EXCEPTION_FLAG = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE     where  VG_604 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE     where  VG_604 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_604_CLIENT_ORDER_HANDLING_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_FX_TABLE     where  VG_604 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_607_BEST_EXECUTION_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE     where  VG_607_MM = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_607_BEST_EXECUTION_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_RR_TABLE     where  VG_607_RR = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_607_BEST_EXECUTION_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(TRADE_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE     where  VG_607 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_608_TA_KNOCKBACK_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_608_TA_KNOCKBACK_CASH_TABLE     where  VG_608 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_608_TA_KNOCKBACK_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(FXM_ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_608_TA_KNOCKBACK_FX_TABLE     where  VG_608 = 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE     where  VG_609_CRR = 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_610_TBILLS_CP_CD_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_610_TBILLS_CP_CD_CASH_TABLE     where  VG_610 = 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_611_ORDER_AGGREGATION_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_MM_TABLE     where  VG_611 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_611_ORDER_AGGREGATION_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_RR_TABLE     where  VG_611 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_611_ORDER_AGGREGATION_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_611_ORDER_AGGREGATION_FX_TABLE     where  VG_611 = 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_612_ORDER_ALLOCATION_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_MM_TABLE     where  VG_612 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_612_ORDER_ALLOCATION_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_RR_TABLE     where  VG_612 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_612_ORDER_ALLOCATION_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_612_ORDER_ALLOCATION_FX_TABLE     where  VG_612 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE     where  VG_613 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE     where  VG_613 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(TRADE_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE     where  VG_613 = 1            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_COMMISSION_EXCEPTION_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_COMMISSION_EXCEPTION_EQ_TABLE     where  COMMISSION_EXCEPTION = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_IMPLEMENTATION_SHORTFALL_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_IMPLEMENTATION_SHORTFALL_EQ_TABLE     where  IM_EXCEPTION = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_ARCHIVE_COUNT_CHECKS     SELECT  'VG_MARKET_HIGH_LOW_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_MARKET_HIGH_LOW_TABLE     where  HL_EXCEPTION = 1            END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: DATA_ARCHIVE_DELETE_DATA  CreateDate: 2025-06-26 17:33:22.620  ModifyDate: 2025-06-26 17:33:22.620  --- DEFINITION START ---  -- =============================================    -- Author:  <Miter, Matej>    -- Create date: <04/11/2021>    -- Description:     -- <>    -- =============================================        -- ***************VERSION CONTROL***************    --2022-02-24; Matej Miter created for Jira:    --SURVG-556 -Added New Instructor to Dealer report data into Archiving process      -- *********************************************        CREATE PROCEDURE [dbo].[DATA_ARCHIVE_DELETE_DATA]     -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,         AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;            --------------------------------------ACCUMULATION(STAGING) TABLES ALADDIN-----------------------------------------------------------------------         IF  OBJECT_ID('tempdb..##temp_orders_trades_al', 'U') IS NOT NULL          BEGIN       DELETE o FROM VISTA_STAGING.dbo.ORDERS o      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al      on o.ORD_NUM = al.ORD_NUM              DELETE t FROM VISTA_STAGING.dbo.TRADES t      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al      on t.multi_fund_id = al.multi_fund_id                    DELETE od  FROM VISTA_STAGING.dbo.ORDERS_DETAIL od      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al      on od.ORD_NUM = al.ORD_NUM          --Twice for Order cross because of trd ord and pm ord levels      DELETE oc FROM VISTA_STAGING.dbo.ORDERS_CROSS oc      INNER JOIN (select distinct ORD_NUM  from ##temp_orders_trades_al) oca      on oc.PM_ORD = oca.ORD_NUM            DELETE oc FROM VISTA_STAGING.dbo.ORDERS_CROSS oc      INNER JOIN (select distinct ORD_NUM  from ##temp_orders_trades_al) oca      on oc.TRD_ORD = oca.ORD_NUM                 DELETE p FROM VISTA_STAGING.dbo.PLACEMENTS p      inner join (select distinct PLacement_num,MULTI_FUND_ID from VISTA_STAGING.dbo.TRADES_ARCHIVED) ta on ta.PLacement_num = p.Placement_Num      inner join (select distinct multi_fund_id from ##temp_orders_trades_al) al on al.multi_fund_id = ta.multi_fund_ID           END        --------------------------------------ACCUMULATION(STAGING) TABLES CASH-----------------------------------------------------------------------              IF  OBJECT_ID('tempdb..##temp_cash_orders_trades', 'U') IS NOT NULL          BEGIN          DELETE co  FROM VISTA_STAGING.dbo.CASH_ORDERS co      INNER JOIN (select distinct ORDER_ID from ##temp_cash_orders_trades) ct      on co.ORDER_ID = ct.ORDER_ID               DELETE co FROM VISTA_STAGING.dbo.CASH_TRADES co      INNER JOIN (select distinct TRANSACTION_NUMBER from ##temp_cash_orders_trades) ct      on co.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER                 DELETE crr FROM VISTA_STAGING.dbo.CASH_REFERENCE_RATES crr      INNER JOIN (select distinct TRANSACTION_NUMBER from ##temp_cash_orders_trades) ct      on crr.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER                  DELETE cmb FROM VISTA_STAGING.dbo.CASH_MAPPED_BANKS cmb      INNER JOIN (select distinct TRANSACTION_NUMBER from ##temp_cash_orders_trades) ct      on cmb.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER                    DELETE cbr FROM VISTA_STAGING.dbo.CASH_BANK_RATES cbr      INNER JOIN (select distinct TRANSACTION_NUMBER from ##temp_cash_orders_trades) ct      on cbr.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER             END        --------------------------------------ACCUMULATION(STAGING) TABLES FX-----------------------------------------------------------------------             IF  OBJECT_ID('tempdb..##temp_cash_orders_trades', 'U') IS NOT NULL         BEGIN          DELETE fo FROM VISTA_STAGING.dbo.FX_ORDERS fo      INNER JOIN (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) ft      on fo.FXM_ORDER_ID = ft.FXM_ORDER_ID                DELETE fta FROM VISTA_STAGING.dbo.FX_TRADES fta      INNER JOIN (select distinct Trade_id from ##temp_fx_orders_trades) ft      on fta.Trade_id = ft.Trade_id                     DELETE flb FROM VISTA_STAGING.dbo.FX_LOSING_BANKS flb      INNER JOIN (select distinct Trade_id from ##temp_fx_orders_trades) ft      on flb.Trade_id = ft.Trade_id               DELETE fmb FROM VISTA_STAGING.dbo.FX_MAPPED_BANKS fmb      INNER JOIN (select distinct Trade_id from ##temp_fx_orders_trades) ft      on fmb.Trade_id = ft.Trade_id          END        -------------Markit Filess ----------------           IF  OBJECT_ID('tempdb..##temp_orders_trades_al', 'U') IS NOT NULL         BEGIN          DELETE mi  FROM VISTA_STAGING.dbo.Markit_ISReport mi      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al      on mi.[Order ID] = al.ORD_NUM              DELETE mo  FROM VISTA_STAGING.dbo.Markit_OutsideHighLow mo      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al      on mo.[Order ID] = al.ORD_NUM                  ----------------------------------------------------STAGING EXCEPTIONS TABLES ALADDIN---------------------------------------------------------               DELETE vg  FROM VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_EQ_TABLE vg      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al      on vg.multi_fund_id = al.multi_fund_id                DELETE vg  FROM VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI_TABLE vg      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al      on vg.multi_fund_id = al.multi_fund_id                DELETE vg  FROM VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_LL_TABLE vg      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al      on vg.multi_fund_id = al.multi_fund_id               DELETE vg  FROM VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_DMG_TABLE vg      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al      on vg.multi_fund_id = al.multi_fund_id              /*      DELETE vg  FROM VISTA_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_EQ_TABLE vg      inner join (select distinct CONCAT(FUND,INVNUM) as CLIENT_EXECUTION_NUM,multi_fund_id from VISTA_STAGING.dbo.TRADES_ARCHIVED) ta on ta.CLIENT_EXECUTION_NUM = vg.Client_Execution_Num      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al on ta.multi_fund_id = al.multi_fund_id     */      DELETE vg  FROM VISTA_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_LL_TABLE vg      inner join (select distinct CONCAT(FUND,INVNUM) as CLIENT_EXECUTION_NUM,multi_fund_id from VISTA_STAGING.dbo.TRADES_ARCHIVED) ta on ta.CLIENT_EXECUTION_NUM = vg.Client_Execution_Num      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al on ta.multi_fund_id = al.multi_fund_id          DELETE vg  FROM VISTA_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_FI_TABLE vg      inner join (select distinct CONCAT(FUND,INVNUM) as CLIENT_EXECUTION_NUM,multi_fund_id from VISTA_STAGING.dbo.TRADES_ARCHIVED) ta on ta.CLIENT_EXECUTION_NUM = vg.Client_Execution_Num      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al on ta.multi_fund_id = al.multi_fund_id                  DELETE vg  FROM VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_EQ_TABLE vg      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on vg.multi_fund_id = al.multi_fund_id              DELETE vg  FROM VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_LL_TABLE vg      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on vg.multi_fund_id = al.multi_fund_id          DELETE vg  FROM VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_FI_TABLE vg      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on vg.multi_fund_id = al.multi_fund_id          DELETE vg  FROM VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_DMG_TABLE vg      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on vg.multi_fund_id = al.multi_fund_id               DELETE vg  FROM VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_LL_TABLE vg      inner join (select distinct CONCAT(FUND,INVNUM) as CLIENT_EXECUTION_NUM,multi_fund_id from VISTA_STAGING.dbo.TRADES_ARCHIVED) ta on ta.CLIENT_EXECUTION_NUM = vg.Client_Execution_Num      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on ta.multi_fund_id = al.multi_fund_id              DELETE vg  FROM VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_FI_TABLE vg      inner join (select distinct CONCAT(FUND,INVNUM) as CLIENT_EXECUTION_NUM,multi_fund_id from VISTA_STAGING.dbo.TRADES_ARCHIVED) ta on ta.CLIENT_EXECUTION_NUM = vg.Client_Execution_Num      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on ta.multi_fund_id = al.multi_fund_id               DELETE vg  FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_EQ_TABLE vg      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on vg.ORD_NUM = al.ORD_NUM          DELETE vg  FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_LL_TABLE vg      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on vg.ORD_NUM = al.ORD_NUM          DELETE vg  FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE vg      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on vg.ORD_NUM = al.ORD_NUM          DELETE vg  FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_DMG_TABLE vg      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on vg.ORD_NUM = al.ORD_NUM                   DELETE vg  FROM VISTA_STAGING.dbo.VG_10_NAV_CUT_OFF_EQ_TABLE vg      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on vg.multi_fund_id = al.multi_fund_id                   DELETE vg  FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_EQ_TABLE vg      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on vg.multi_fund_id = al.multi_fund_id          DELETE vg  FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_LL_TABLE vg      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on vg.multi_fund_id = al.multi_fund_id          DELETE vg  FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FI_TABLE vg      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on vg.multi_fund_id = al.multi_fund_id          DELETE vg  FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_DMG_TABLE vg      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on vg.multi_fund_id = al.multi_fund_id               DELETE vg  FROM VISTA_STAGING.dbo.VG_11_TIMELY_RELEASE_EQ_TABLE vg      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on vg.ORD_NUM = al.ORD_NUM               DELETE vg  FROM VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_EQ_TABLE vg      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on vg.ORD_NUM = al.ORD_NUM          DELETE vg  FROM VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_LL_TABLE vg      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on vg.ORD_NUM = al.ORD_NUM              DELETE vg  FROM VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_FI_TABLE vg      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on vg.ORD_NUM = al.ORD_NUM          DELETE vg  FROM VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_DMG_TABLE vg      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on vg.ORD_NUM = al.ORD_NUM                   DELETE vg  FROM VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_EQ_TABLE vg      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on vg.ORD_NUM = al.ORD_NUM          DELETE vg  FROM VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_LL_TABLE vg      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on vg.ORD_NUM = al.ORD_NUM          DELETE vg  FROM VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_FI_TABLE vg      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on vg.ORD_NUM = al.ORD_NUM          DELETE vg  FROM VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_DMG_TABLE vg      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on vg.ORD_NUM = al.ORD_NUM                    DELETE vg  FROM VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_EQ_TABLE vg      INNER JOIN (select distinct MULTI_FUND_ID from ##temp_orders_trades_al) al       on vg.MULTI_FUND_ID = al.MULTI_FUND_ID          DELETE vg  FROM VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_LL_TABLE vg      INNER JOIN (select distinct MULTI_FUND_ID from ##temp_orders_trades_al) al       on vg.MULTI_FUND_ID = al.MULTI_FUND_ID          DELETE vg  FROM VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_FI_TABLE vg      INNER JOIN (select distinct MULTI_FUND_ID from ##temp_orders_trades_al) al       on vg.MULTI_FUND_ID = al.MULTI_FUND_ID          DELETE vg  FROM VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_DMG_TABLE vg      INNER JOIN (select distinct MULTI_FUND_ID from ##temp_orders_trades_al) al       on vg.MULTI_FUND_ID = al.MULTI_FUND_ID              DELETE vg  FROM VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE vg      INNER JOIN (select distinct MULTI_FUND_ID from ##temp_orders_trades_al) al       on vg.MULTI_FUND_ID = al.MULTI_FUND_ID               DELETE vg  FROM VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE vg      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on vg.ORD_NUM = al.ORD_NUM              DELETE vg  FROM VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_EQ_TABLE vg      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on vg.multi_fund_id = al.multi_fund_id           DELETE vg  FROM VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_LL_TABLE vg      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on vg.multi_fund_id = al.multi_fund_id                   DELETE vg  FROM VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_FI_TABLE vg      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on vg.multi_fund_id = al.multi_fund_id          DELETE vg  FROM VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_DMG_TABLE vg      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on vg.multi_fund_id = al.multi_fund_id                  DELETE vg  FROM VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_EQ_TABLE vg      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on vg.multi_fund_id = al.multi_fund_id                      DELETE vg  FROM VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_LL_TABLE vg      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on vg.multi_fund_id = al.multi_fund_id           DELETE vg  FROM VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_FI_TABLE vg      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on vg.multi_fund_id = al.multi_fund_id          DELETE vg  FROM VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_DMG_TABLE vg      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on vg.multi_fund_id = al.multi_fund_id               DELETE vg  FROM VISTA_STAGING.dbo.VG_40_EXTENDED_SETTLEMENT_EXCEPTION_TABLE vg      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on vg.multi_fund_id = al.multi_fund_id              DELETE vg  FROM VISTA_STAGING.dbo.VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE vg      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on vg.multi_fund_id = al.multi_fund_id               DELETE vg  FROM VISTA_STAGING.dbo.VG_COMMISSION_EXCEPTION_EQ_TABLE vg      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on vg.multi_fund_id = al.multi_fund_id              DELETE vg  FROM VISTA_STAGING.dbo.VG_MARKET_HIGH_LOW_TABLE vg      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on vg.ORD_NUM = al.ORD_NUM              DELETE vg  FROM VISTA_STAGING.dbo.VG_IMPLEMENTATION_SHORTFALL_EQ_TABLE vg      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on vg.ORD_NUM = al.ORD_NUM          END        ----------------------------------------------------STAGING EXCEPTIONS TABLES CASH---------------------------------------------------------                   IF  OBJECT_ID('tempdb..##temp_cash_orders_trades', 'U') IS NOT NULL         BEGIN          DELETE vg  FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_MM_TABLE vg      INNER JOIN (select distinct order_id from ##temp_cash_orders_trades) ct       on vg.order_id = ct.order_id          DELETE vg  FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_RR_TABLE vg      INNER JOIN (select distinct order_id from ##temp_cash_orders_trades) ct       on vg.order_id = ct.order_id               DELETE vg  FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_CASH_MM_TABLE vg      INNER JOIN (select distinct transaction_number from ##temp_cash_orders_trades) ct       on vg.transaction_number = ct.transaction_number           DELETE vg  FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_CASH_RR_TABLE vg      INNER JOIN (select distinct transaction_number from ##temp_cash_orders_trades) ct       on vg.transaction_number = ct.transaction_number              DELETE vg  FROM VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE vg      INNER JOIN (select distinct order_id,transaction_number from ##temp_cash_orders_trades) ct       on  vg.ORD_NUM = ct.ORDER_ID and vg.multi_fund_id = ct.transaction_number            DELETE vg  FROM VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE vg      INNER JOIN (select distinct Order_id from ##temp_cash_orders_trades) ct       on vg.ord_num = ct.Order_id               DELETE vg  FROM VISTA_STAGING.dbo.VG_601_OUT_OF_HOURS_CASH_TABLE vg      INNER JOIN (select distinct order_id,transaction_number from ##temp_cash_orders_trades) ct       on  vg.ORDER_ID = ct.ORDER_ID and vg.transaction_number = ct.transaction_number            DELETE vg  FROM VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_CASH_TABLE vg      INNER JOIN (select distinct Order_id from ##temp_cash_orders_trades) ct       on vg.Order_id = ct.Order_id               DELETE vg  FROM VISTA_STAGING.dbo.VG_603_LARGE_TRADES_CASH_TABLE vg      INNER JOIN (select distinct Order_id from ##temp_cash_orders_trades) ct       on vg.Order_id = ct.Order_id              DELETE vg  FROM VISTA_STAGING.dbo.VG_603T_LARGE_TRADES_CASH_TABLE vg      INNER JOIN (select distinct transaction_number from ##temp_cash_orders_trades) ct       on vg.transaction_number = ct.transaction_number               DELETE vg  FROM VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE vg      INNER JOIN (select distinct Order_id from ##temp_cash_orders_trades) ct       on vg.Order_id = ct.Order_id                DELETE vg  FROM VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE vg      INNER JOIN (select distinct Order_id from ##temp_cash_orders_trades) ct       on vg.Order_id = ct.Order_id               DELETE vg  FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE vg      INNER JOIN (select distinct transaction_number from ##temp_cash_orders_trades) ct       on vg.transaction_number = ct.transaction_number                     DELETE vg  FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_RR_TABLE vg      INNER JOIN (select distinct transaction_number from ##temp_cash_orders_trades) ct       on vg.transaction_number = ct.transaction_number                   DELETE vg  FROM VISTA_STAGING.dbo.VG_608_TA_KNOCKBACK_CASH_TABLE vg      INNER JOIN (select distinct transaction_number from ##temp_cash_orders_trades) ct       on vg.transaction_number = ct.transaction_number          DELETE vg  FROM VISTA_STAGING.dbo.VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE vg      INNER JOIN (select distinct transaction_number from ##temp_cash_orders_trades) ct       on vg.transaction_number = ct.transaction_number               DELETE vg  FROM VISTA_STAGING.dbo.VG_610_TBILLS_CP_CD_CASH_TABLE vg      INNER JOIN (select distinct transaction_number from ##temp_cash_orders_trades) ct       on vg.MULTI_FUND_ID = ct.transaction_number               DELETE vg  FROM VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_MM_TABLE vg      INNER JOIN (select distinct Order_id from ##temp_cash_orders_trades) ct       on vg.Order_id = ct.Order_id           DELETE vg  FROM VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_RR_TABLE vg      INNER JOIN (select distinct Order_id from ##temp_cash_orders_trades) ct       on vg.Order_id = ct.Order_id                  DELETE vg  FROM VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_MM_TABLE vg      INNER JOIN (select distinct transaction_number from ##temp_cash_orders_trades) ct       on vg.transaction_number = ct.transaction_number              DELETE vg  FROM VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_RR_TABLE vg      INNER JOIN (select distinct transaction_number from ##temp_cash_orders_trades) ct       on vg.transaction_number = ct.transaction_number          --SURVG-556      DELETE vg  FROM VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE vg      INNER JOIN (select distinct transaction_number from ##temp_cash_orders_trades) ct       on vg.transaction_number = ct.transaction_number                     DELETE vg  FROM VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE vg      INNER JOIN (select distinct transaction_number from ##temp_cash_orders_trades) ct       on vg.transaction_number = ct.transaction_number      --End of SURVG-556         END        ----------------------------------------------------STAGING EXCEPTIONS TABLES FX---------------------------------------------------------              IF  OBJECT_ID('tempdb..##temp_fx_orders_trades', 'U') IS NOT NULL     BEGIN          DELETE vg  FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FX_TABLE vg      INNER JOIN (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) ct       on vg.Order_id = ct.FXM_ORDER_ID              DELETE vg  FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FX_TABLE vg      INNER JOIN (select distinct Trade_id from ##temp_fx_orders_trades) ct       on vg.Trade_id = ct.Trade_id                DELETE vg  FROM VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE vg      INNER JOIN (select distinct Trade_id,FXM_order_id from ##temp_fx_orders_trades) ct       on vg.Trade_id = ct.Trade_id and vg.FXM_order_id = ct.FXM_order_id                DELETE vg  FROM VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE vg      INNER JOIN (select distinct FXM_order_id from ##temp_fx_orders_trades) ct       on vg.ORDER_ID = ct.FXM_order_id               DELETE vg  FROM VISTA_STAGING.dbo.VG_500_DEALER_LIMIT_FX_TABLE vg      INNER JOIN (select distinct FXM_order_id from ##temp_fx_orders_trades) ct       on vg.ORDER_ID = ct.FXM_order_id              DELETE vg  FROM VISTA_STAGING.dbo.VG_501_SPOT_REFERENCE_RATE_FX_TABLE vg      INNER JOIN (select distinct Trade_id from ##temp_fx_orders_trades) ct       on vg.Trade_id = ct.Trade_id               DELETE vg  FROM VISTA_STAGING.dbo.VG_601_OUT_OF_HOURS_FX_TABLE vg      INNER JOIN (select distinct Trade_id,FXM_order_id from ##temp_fx_orders_trades) ct       on vg.Trade_id = ct.Trade_id and vg.ORDER_ID = ct.FXM_order_id                DELETE vg  FROM VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_FX_TABLE vg      INNER JOIN (select distinct FXM_order_id from ##temp_fx_orders_trades) ct       on vg.FXM_ORDER_ID = ct.FXM_order_id               DELETE vg  FROM VISTA_STAGING.dbo.VG_603_LARGE_TRADES_FX_TABLE vg      INNER JOIN (select distinct FXM_order_id from ##temp_fx_orders_trades) ct       on vg.ORDER_ID = ct.FXM_order_id               DELETE vg  FROM VISTA_STAGING.dbo.VG_603T_LARGE_TRADES_FX_TABLE vg      INNER JOIN (select distinct Trade_id from ##temp_fx_orders_trades) ct       on vg.TRANSACTION_NUMBER = ct.Trade_id               DELETE vg  FROM VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_FX_TABLE vg      INNER JOIN (select distinct FXM_order_id from ##temp_fx_orders_trades) ct       on vg.ORDER_ID = ct.FXM_order_id               DELETE vg  FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE vg      INNER JOIN (select distinct Trade_id from ##temp_fx_orders_trades) ct       on vg.Trade_id = ct.Trade_id               DELETE vg FROM VISTA_STAGING.dbo.VG_608_TA_KNOCKBACK_FX_TABLE vg      INNER JOIN (select distinct FXM_order_id from ##temp_fx_orders_trades) ct       on vg.FXM_order_id = ct.FXM_order_id               DELETE vg  FROM VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_FX_TABLE vg      INNER JOIN (select distinct FXM_order_id from ##temp_fx_orders_trades) ct       on vg.ORDER_ID = ct.FXM_order_id               DELETE vg  FROM VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_FX_TABLE vg      INNER JOIN (select distinct Trade_id from ##temp_fx_orders_trades) ct       on vg.TRANSACTION_NUMBER = ct.Trade_id          --SURVG-556      DELETE vg  FROM VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE vg      INNER JOIN (select distinct Trade_id from ##temp_fx_orders_trades) ct       on vg.Trade_id = ct.Trade_id          --End of SURVG-556         END            -----------------------------------------------Staging Tables Cash/FX Aladdin source ----------------------------------------------------------------------------         IF  OBJECT_ID('tempdb..##temp_orders_trades_al', 'U') IS NOT NULL     BEGIN          DELETE vg  FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_MM_TABLE vg      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on vg.ORDER_ID = al.ORD_NUM and vg.[SOURCE] = 'AL'           DELETE vg  FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FX_TABLE vg      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on vg.ORDER_ID = al.ORD_NUM and vg.[SOURCE] = 'AL'           DELETE vg  FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_CASH_MM_TABLE vg      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on vg.TRANSACTION_NUMBER = al.multi_fund_id and vg.[SOURCE] = 'AL'           DELETE vg  FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FX_TABLE vg      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on vg.TRADE_ID = al.multi_fund_id and vg.[SOURCE] = 'AL'               DELETE vg  FROM VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE vg      INNER JOIN (select distinct ORD_NUM,multi_fund_id from ##temp_orders_trades_al) al       on vg.multi_fund_id = al.multi_fund_id and vg.ORD_NUM = al.ORD_NUM  and vg.[DATA_SOURCE] = 'AL'               DELETE vg  FROM VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE vg      INNER JOIN (select distinct ORD_NUM,multi_fund_id from ##temp_orders_trades_al) al       on vg.TRADE_ID = al.multi_fund_id and vg.FXM_ORDER_ID = al.ORD_NUM  and vg.[DATA_SOURCE] = 'AL'               DELETE vg  FROM VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE vg      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on vg.ORD_NUM = al.ORD_NUM and vg.[DATA_SOURCE] = 'AL'           DELETE vg  FROM VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE vg      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on vg.ORDER_ID = al.ORD_NUM and vg.[DATA_SOURCE] = 'AL'           DELETE vg  FROM VISTA_STAGING.dbo.VG_500_DEALER_LIMIT_FX_TABLE vg      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on vg.ORDER_ID = al.ORD_NUM and vg.[SOURCE] = 'AL'           DELETE vg  FROM VISTA_STAGING.dbo.VG_501_SPOT_REFERENCE_RATE_FX_TABLE vg      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on vg.TRADE_ID = al.multi_fund_id and vg.[SOURCE] = 'AL'                DELETE vg  FROM VISTA_STAGING.dbo.VG_601_OUT_OF_HOURS_CASH_TABLE vg      INNER JOIN (select distinct ORD_NUM,multi_fund_id from ##temp_orders_trades_al) al       on vg.ORDER_ID = al.ORD_NUM and vg.TRANSACTION_NUMBER = al.multi_fund_id and vg.[SOURCE] = 'AL'           DELETE vg  FROM VISTA_STAGING.dbo.VG_601_OUT_OF_HOURS_FX_TABLE vg      INNER JOIN (select distinct ORD_NUM,multi_fund_id from ##temp_orders_trades_al) al       on vg.TRADE_ID = al.multi_fund_id and vg.ORDER_ID = al.ORD_NUM and vg.[SOURCE] = 'AL'           DELETE vg  FROM VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_CASH_TABLE vg      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on vg.ORDER_ID = al.ORD_NUM and vg.[DATA_SOURCE] = 'AL'           DELETE vg  FROM VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_FX_TABLE vg      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on vg.FXM_ORDER_ID = al.ORD_NUM and vg.[DATA_SOURCE] = 'AL'           DELETE vg  FROM VISTA_STAGING.dbo.VG_603_LARGE_TRADES_CASH_TABLE vg      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on vg.ORDER_ID = al.ORD_NUM and vg.[SOURCE] = 'AL'           DELETE vg  FROM VISTA_STAGING.dbo.VG_603_LARGE_TRADES_FX_TABLE vg      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on vg.ORDER_ID = al.ORD_NUM and vg.[SOURCE] = 'AL'           DELETE vg  FROM VISTA_STAGING.dbo.VG_603T_LARGE_TRADES_CASH_TABLE vg      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on vg.TRANSACTION_NUMBER = al.multi_fund_id and vg.[SOURCE] = 'AL'           DELETE vg  FROM VISTA_STAGING.dbo.VG_603T_LARGE_TRADES_FX_TABLE vg      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on vg.TRANSACTION_NUMBER = al.multi_fund_id and vg.[SOURCE] = 'AL'           DELETE vg  FROM VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE vg      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on vg.ORDER_ID = al.ORD_NUM and vg.[DATA_SOURCE] = 'AL'          DELETE vg  FROM VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_FX_TABLE vg      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on vg.ORDER_ID = al.ORD_NUM and vg.[DATA_SOURCE] = 'AL'          DELETE vg  FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE vg      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on vg.TRANSACTION_NUMBER = al.multi_fund_id and vg.[DATA_SOURCE] = 'AL'           DELETE vg  FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE vg      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on vg.TRADE_ID = al.multi_fund_id and vg.[DATA_SOURCE] = 'AL'           DELETE vg  FROM VISTA_STAGING.dbo.VG_608_TA_KNOCKBACK_CASH_TABLE vg      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on vg.TRANSACTION_NUMBER = al.MULTI_FUND_ID and vg.[DATA_SOURCE] = 'AL'           DELETE vg  FROM VISTA_STAGING.dbo.VG_608_TA_KNOCKBACK_FX_TABLE vg      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on vg.FXM_ORDER_ID = al.ORD_NUM and vg.[DATA_SOURCE] = 'AL'          DELETE vg  FROM VISTA_STAGING.dbo.VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE vg      INNER JOIN (select distinct MULTI_FUND_ID from ##temp_orders_trades_al) al       on vg.TRANSACTION_NUMBER = al.MULTI_FUND_ID and vg.[DATA_SOURCE] = 'AL'          DELETE vg  FROM VISTA_STAGING.dbo.VG_610_TBILLS_CP_CD_CASH_TABLE vg      INNER JOIN (select distinct MULTI_FUND_ID from ##temp_orders_trades_al) al       on vg.MULTI_FUND_ID = al.MULTI_FUND_ID and vg.[DATA_SOURCE] = 'AL'          DELETE vg  FROM VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_MM_TABLE vg      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on vg.ORDER_ID = al.ORD_NUM and vg.[DATA_SOURCE] = 'AL'          DELETE vg  FROM VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_FX_TABLE vg      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on vg.ORDER_ID = al.ORD_NUM and vg.[DATA_SOURCE] = 'AL'              DELETE vg  FROM VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_MM_TABLE vg      INNER JOIN (select distinct MULTI_FUND_ID from ##temp_orders_trades_al) al       on vg.TRANSACTION_NUMBER = al.MULTI_FUND_ID and vg.[DATA_SOURCE] = 'AL'          DELETE vg  FROM VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_FX_TABLE vg      INNER JOIN (select distinct MULTI_FUND_ID from ##temp_orders_trades_al) al       on vg.TRANSACTION_NUMBER = al.MULTI_FUND_ID and vg.[DATA_SOURCE] = 'AL'          DELETE vg  FROM VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE vg      INNER JOIN (select distinct MULTI_FUND_ID from ##temp_orders_trades_al) al       on vg.Transaction_Number = al.MULTI_FUND_ID and vg.[SOURCE] = 'AL'          DELETE vg  FROM VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE vg      INNER JOIN (select distinct MULTI_FUND_ID from ##temp_orders_trades_al) al       on vg.TRADE_ID = al.MULTI_FUND_ID and vg.[SOURCE] = 'AL'                     ------------------------------------------------Reporting Tables Aladdin -----------------------------------------------------------------------------------------              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE ma      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on ma.multi_fund_id = al.multi_fund_id                DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_ORDER_PRIORITY_TABLE ma      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on ma.ORD_NUM = al.ORD_NUM                    DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_TRD_ORDER_TABLE ma      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on ma.ORD_NUM = al.ORD_NUM                DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE ma      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on ma.multi_fund_id = al.multi_fund_id                DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER ma      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on ma.ORD_NUM = al.ORD_NUM            DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE ma      inner join (select distinct CONCAT(FUND,INVNUM) as CLIENT_EXECUTION_NUM,multi_fund_id from VISTA_STAGING.dbo.TRADES_ARCHIVED) ta on ta.CLIENT_EXECUTION_NUM = ma.Client_Execution_ID      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on ta.multi_fund_id = al.multi_fund_id                DELETE ma  FROM VISTA_REPORTING.dbo.IMPLEMENTATION_SHORTFALL_EQ ma      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on ma.Order_ID = al.ORD_NUM                DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_01_QUOTE_EXCEPTION_DMG_TABLE ma      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on ma.MFID = al.multi_fund_id                DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_07_NON_WINNING_QUOTE_DMG_TABLE ma      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on ma.MFID = al.multi_fund_id                 DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_DMG_TABLE ma      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on ma.MFID = al.multi_fund_id                DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE ma      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on ma.MFID = al.multi_fund_id                DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_25_INTERFUND_TRANSFER_DMG_TABLE ma      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on ma.MFID = al.multi_fund_id                DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE ma      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on ma.MFID = al.multi_fund_id                DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE ma      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on ma.[ORDER] = al.ORD_NUM                DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE ma      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on ma.[ORDER] = al.ORD_NUM                DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PT_AMENDMENT_FLAG_TABLE ma      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on ma.MULTI_FUND_ID = al.multi_fund_id                DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_13_ORDER_AGGREGATION_DMG_TABLE ma      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on ma.[ORDER] = al.ORD_NUM                   DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE ma      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on ma.[ORDER] = al.ORD_NUM                 DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_VG_15_AMENDMENT_FLAG_DMG_TABLE ma      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on ma.MFID = al.multi_fund_id          END              ----------------------------------------------------------Reporting tables CASH----------------------------------------------------------------------------             IF  OBJECT_ID('tempdb..##temp_cash_orders_trades', 'U') IS NOT NULL     BEGIN          DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE ma      INNER JOIN (select distinct transaction_number from ##temp_cash_orders_trades) al       on ma.transaction_number = al.transaction_number                DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_RR_TABLE ma      INNER JOIN (select distinct transaction_number from ##temp_cash_orders_trades) al       on ma.transaction_number = al.transaction_number               DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE ma      INNER JOIN (select distinct transaction_number from ##temp_cash_orders_trades) al       on ma.transaction_number = al.transaction_number                    DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE ma      INNER JOIN (select distinct transaction_number from ##temp_cash_orders_trades) al       on ma.transaction_number = al.transaction_number              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR_TABLE ma      INNER JOIN (select distinct transaction_number from ##temp_cash_orders_trades) al       on ma.transaction_number = al.transaction_number                  DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_608_TA_KNOCKBACK_CASH_TABLE ma      INNER JOIN (select distinct transaction_number from ##temp_cash_orders_trades) al       on ma.transaction_number = al.transaction_number               DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE ma      INNER JOIN (select distinct transaction_number from ##temp_cash_orders_trades) al       on ma.transaction_number = al.transaction_number                   DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE ma      INNER JOIN (select distinct transaction_number from ##temp_cash_orders_trades) al       on ma.transaction_number = al.transaction_number              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_MM_TABLE ma      INNER JOIN (select distinct transaction_number from ##temp_cash_orders_trades) al       on ma.transaction_number = al.transaction_number                DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_RR_TABLE ma      INNER JOIN (select distinct transaction_number from ##temp_cash_orders_trades) al       on ma.transaction_number = al.transaction_number               DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE ma      INNER JOIN (select distinct Order_id from ##temp_cash_orders_trades) al       on ma.ORDER_ID = al.Order_id              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_RR_TABLE ma      INNER JOIN (select distinct Order_id from ##temp_cash_orders_trades) al       on ma.ORDER_ID = al.Order_id          DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE ma      INNER JOIN (select distinct Order_id from ##temp_cash_orders_trades) al       on ma.ORDER_ID = al.Order_id              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_CASH_TABLE ma      INNER JOIN (select distinct Order_id from ##temp_cash_orders_trades) al       on ma.ORDER_ID = al.Order_id               DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_CASH_TABLE ma      INNER JOIN (select distinct Order_id from ##temp_cash_orders_trades) al       on ma.ORDER_ID = al.Order_id              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_CASH_TABLE ma      INNER JOIN (select distinct Order_id from ##temp_cash_orders_trades) al       on ma.ORDER_ID = al.Order_id               DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE ma      INNER JOIN (select distinct Order_id from ##temp_cash_orders_trades) al       on ma.ORDER_ID = al.Order_id              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE ma      INNER JOIN (select distinct Order_id from ##temp_cash_orders_trades) al       on ma.ORDER_ID = al.Order_id               DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_MM_TABLE ma      INNER JOIN (select distinct Order_id from ##temp_cash_orders_trades) al       on ma.ORDER_ID = al.Order_id               DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_RR_TABLE ma      INNER JOIN (select distinct Order_id from ##temp_cash_orders_trades) al       on ma.ORDER_ID = al.Order_id          --SURVG-556          DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE_ARCHIVED ma      INNER JOIN (select distinct Transaction_number from ##temp_cash_orders_trades) al       on ma.Transaction_number = al.Transaction_number              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE ma      INNER JOIN (select distinct Transaction_number from ##temp_cash_orders_trades) al       on ma.Transaction_number = al.Transaction_number          --End of SURVG-556         END    ----------------------------------------------------------Reporting tables FX----------------------------------------------------------------------------               IF  OBJECT_ID('tempdb..##temp_fx_orders_trades', 'U') IS NOT NULL     BEGIN          DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE ma      INNER JOIN (select distinct trade_id from ##temp_fx_orders_trades) al       on ma.Transaction_number = al.trade_id              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE ma      INNER JOIN (select distinct trade_id from ##temp_fx_orders_trades) al       on ma.Transaction_number = al.trade_id              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE ma      INNER JOIN (select distinct trade_id from ##temp_fx_orders_trades) al       on ma.Transaction_number = al.trade_id              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE ma      INNER JOIN (select distinct trade_id from ##temp_fx_orders_trades) al       on ma.Transaction_number = al.trade_id               DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_FX_TABLE ma      INNER JOIN (select distinct trade_id from ##temp_fx_orders_trades) al       on ma.TRADE_ID = al.trade_id                   DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE ma      INNER JOIN (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) al       on ma.ORDER_ID = al.FXM_ORDER_ID           DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_FX_TABLE ma      INNER JOIN (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) al       on ma.ORDER_ID = al.FXM_ORDER_ID               DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE ma      INNER JOIN (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) al       on ma.ORDER_ID = al.FXM_ORDER_ID                DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE ma      INNER JOIN (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) al       on ma.ORDER_ID = al.FXM_ORDER_ID                DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE ma      INNER JOIN (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) al       on ma.ORDER_ID = al.FXM_ORDER_ID                   DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE ma      INNER JOIN (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) al       on ma.ORDER_ID = al.FXM_ORDER_ID           DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE ma      INNER JOIN (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) al       on ma.ORDER_ID = al.FXM_ORDER_ID              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE ma      INNER JOIN (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) al       on ma.ORDER_ID = al.FXM_ORDER_ID              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_FX_TABLE ma      INNER JOIN (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) al       on ma.FX_ORDER_ID = al.FXM_ORDER_ID              --SURVG-556      DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE ma      INNER JOIN (select distinct Trade_id from ##temp_fx_orders_trades) al       on ma.transaction_number = al.Trade_id      --End of SURVG-556         END        ---------------------------------------------------Reporting Tables Cash/FX from Aladdin source--------------------------------------------------         IF  OBJECT_ID('tempdb..##temp_orders_trades_al', 'U') IS NOT NULL      BEGIN          DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE ma      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on ma.TRANSACTION_NUMBER = al.multi_fund_id and ma.[DATA_SOURCE] = 'AL'           DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE ma      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on ma.TRANSACTION_NUMBER = al.multi_fund_id and ma.[DATA_SOURCE] = 'AL'          DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE ma      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on ma.TRANSACTION_NUMBER = al.multi_fund_id and ma.[DATA_SOURCE] = 'AL'              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE ma      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on ma.TRANSACTION_NUMBER = al.multi_fund_id and ma.[DATA_SOURCE] = 'AL'              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE ma      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on ma.TRANSACTION_NUMBER = al.multi_fund_id and ma.[DATA_SOURCE] = 'AL'              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE ma      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on ma.TRANSACTION_NUMBER = al.multi_fund_id and ma.[DATA_SOURCE] = 'AL'              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE ma      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on ma.TRANSACTION_NUMBER = al.multi_fund_id and ma.[DATA_SOURCE] = 'AL'              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_608_TA_KNOCKBACK_CASH_TABLE ma      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on ma.TRANSACTION_NUMBER = al.multi_fund_id and ma.[DATA_SOURCE] = 'AL'              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE ma      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on ma.TRANSACTION_NUMBER = al.multi_fund_id and ma.[DATA_SOURCE] = 'AL'              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE ma      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on ma.TRANSACTION_NUMBER = al.multi_fund_id and ma.[DATA_SOURCE] = 'AL'              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_MM_TABLE ma      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on ma.TRANSACTION_NUMBER = al.multi_fund_id and ma.[DATA_SOURCE] = 'AL'              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_FX_TABLE ma      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on ma.TRADE_ID = al.multi_fund_id and ma.[DATA_SOURCE] = 'AL'              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE ma      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on ma.TRANSACTION_NUMBER = al.multi_fund_id and ma.[SOURCE] = 'AL'              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE ma      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on ma.TRANSACTION_NUMBER = al.multi_fund_id and ma.[SOURCE] = 'AL'              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE ma      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on ma.ORDER_ID = al.ORD_NUM and ma.[DATA_SOURCE] = 'AL'               DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE ma      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on ma.ORDER_ID = al.ORD_NUM and ma.[DATA_SOURCE] = 'AL'              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE ma      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on ma.ORDER_ID = al.ORD_NUM and ma.[DATA_SOURCE] = 'AL'              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_FX_TABLE ma      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on ma.ORDER_ID = al.ORD_NUM and ma.[DATA_SOURCE] = 'AL'              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE ma      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on ma.ORDER_ID = al.ORD_NUM and ma.[DATA_SOURCE] = 'AL'              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_CASH_TABLE ma      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on ma.ORDER_ID = al.ORD_NUM and ma.[DATA_SOURCE] = 'AL'              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE ma      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on ma.ORDER_ID = al.ORD_NUM and ma.[DATA_SOURCE] = 'AL'              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_CASH_TABLE ma      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on ma.ORDER_ID = al.ORD_NUM and ma.[DATA_SOURCE] = 'AL'              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE ma      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on ma.ORDER_ID = al.ORD_NUM and ma.[DATA_SOURCE] = 'AL'              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_CASH_TABLE ma      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on ma.ORDER_ID = al.ORD_NUM and ma.[DATA_SOURCE] = 'AL'              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE ma      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on ma.ORDER_ID = al.ORD_NUM and ma.[DATA_SOURCE] = 'AL'              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE ma      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on ma.ORDER_ID = al.ORD_NUM and ma.[DATA_SOURCE] = 'AL'              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE ma      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on ma.ORDER_ID = al.ORD_NUM and ma.[DATA_SOURCE] = 'AL'              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE ma      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on ma.ORDER_ID = al.ORD_NUM and ma.[DATA_SOURCE] = 'AL'              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_MM_TABLE ma      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on ma.ORDER_ID = al.ORD_NUM and ma.[DATA_SOURCE] = 'AL'              DELETE ma  FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_FX_TABLE ma      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on ma.FX_ORDER_ID = al.ORD_NUM and ma.[DATA_SOURCE] = 'AL'             ---------------------------------------------------REPORTING TABLES COMPLIANCE/MONITORING TABLES--------------------------------------------------                      DELETE rp  FROM VISTA_REPORTING.dbo.AUDIT_TABLE rp      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on rp.PM_ORD = al.ORD_NUM           DELETE rp  FROM VISTA_REPORTING.dbo.AUDIT_TABLE rp      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on rp.TRD_ORD = al.ORD_NUM           DELETE rp  FROM VISTA_REPORTING.dbo.AUDIT_TABLE rp      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on rp.MULTIFUND = al.multi_fund_id               DELETE rp  FROM VISTA_REPORTING.dbo.AUDIT_TABLE_DMG rp      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on rp.PM_ORD = al.ORD_NUM           DELETE rp  FROM VISTA_REPORTING.dbo.AUDIT_TABLE_DMG rp      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on rp.TRD_ORD = al.ORD_NUM           DELETE rp  FROM VISTA_REPORTING.dbo.AUDIT_TABLE_DMG rp      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on rp.MULTIFUND = al.multi_fund_id              /*           IF  OBJECT_ID('Vista_Reporting.dbo.COMPLIANCE_AUDIT_TABLE_ARCHIVED', 'U') IS NOT NULL      DELETE FROM Vista_Reporting.dbo.COMPLIANCE_AUDIT_TABLE      where EXISTS (SELECT m.ID           FROM Vista_Reporting.dbo.COMPLIANCE_AUDIT_TABLE_ARCHIVED m           WHERE m.ID = Vista_Reporting.dbo.COMPLIANCE_AUDIT_TABLE.ID)     */           DELETE rp  FROM VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE rp      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on rp.PM_ORD = al.ORD_NUM           DELETE rp  FROM VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE rp      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on rp.TRD_ORD = al.ORD_NUM           DELETE rp  FROM VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE rp      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on rp.MULTIFUND = al.multi_fund_id           DELETE rp  FROM VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_DMG rp      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on rp.MFID = al.multi_fund_id          DELETE rp  FROM VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_DMG rp      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on rp.PM_ORD = al.ORD_NUM          DELETE rp  FROM VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_DMG rp      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on rp.TRD_ORD = al.ORD_NUM              DELETE rp  FROM VISTA_REPORTING.dbo.COMPLIANCE_ORDER_FINAL_STATUS_UPDATE_TABLE rp      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on rp.ORD_NUM = al.ORD_NUM               DELETE rp  FROM VISTA_REPORTING.dbo.COMPLIANCE_TRADES_FINAL_STATUS_UPDATE_TABLE_DMG rp      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on rp.ORD_NUM = al.ORD_NUM               DELETE rp  FROM VISTA_REPORTING.dbo.COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE rp      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on rp.PM_ORD = al.ORD_NUM                    DELETE rp  FROM VISTA_REPORTING.dbo.DMG_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE rp      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on rp.PM_ORD = al.ORD_NUM              DELETE rp  FROM VISTA_REPORTING.dbo.DMG_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE rp      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on rp.MULTI_FUND_ID = al.multi_fund_id          DELETE rp  FROM VISTA_REPORTING.dbo.DMG_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE rp      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on rp.TRD_ORD = al.ORD_NUM              DELETE rp  FROM VISTA_REPORTING.dbo.SAMPLED_TRADES_COMPLIANCE rp      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on rp.MULTI_FUND_ID = al.multi_fund_id         --We can't delete here as would impact multiple base tables therefore commenting out for now until we agree on further steps     /*      IF  OBJECT_ID('Vista_Reporting.dbo.COMPLIANCE_ORDER_SUMMARY_EQ_ARCHIVED', 'U') IS NOT NULL      DELETE FROM Vista_Reporting.dbo.COMPLIANCE_ORDER_SUMMARY_EQ      where EXISTS (SELECT m.PM_ORD           FROM Vista_Reporting.dbo.COMPLIANCE_ORDER_SUMMARY_EQ_ARCHIVED m           WHERE m.PM_ORD = Vista_Reporting.dbo.COMPLIANCE_ORDER_SUMMARY_EQ.PM_ORD)                   IF  OBJECT_ID('Vista_Reporting.dbo.COMPLIANCE_ORDER_SUMMARY_FI_ARCHIVED', 'U') IS NOT NULL      DELETE FROM Vista_Reporting.dbo.COMPLIANCE_ORDER_SUMMARY_FI      where EXISTS (SELECT m.PM_ORD           FROM Vista_Reporting.dbo.COMPLIANCE_ORDER_SUMMARY_FI_ARCHIVED m           WHERE m.PM_ORD = Vista_Reporting.dbo.COMPLIANCE_ORDER_SUMMARY_FI.PM_ORD)              IF  OBJECT_ID('Vista_Reporting.dbo.COMPLIANCE_ORDER_SUMMARY_DMG_ARCHIVED', 'U') IS NOT NULL      DELETE FROM Vista_Reporting.dbo.COMPLIANCE_ORDER_SUMMARY_DMG      where EXISTS (SELECT m.PM_ORD           FROM Vista_Reporting.dbo.COMPLIANCE_ORDER_SUMMARY_DMG_ARCHIVED m           WHERE m.PM_ORD = Vista_Reporting.dbo.COMPLIANCE_ORDER_SUMMARY_DMG.PM_ORD)     */           DELETE rp  FROM VISTA_REPORTING.dbo.COMPLIANCE_EXCEPTIONS_REASON_TABLE rp      INNER JOIN (select distinct multi_fund_id from ##temp_orders_trades_al) al       on rp.ID = al.multi_fund_id               DELETE rp  FROM VISTA_REPORTING.dbo.COMPLIANCE_EXCEPTIONS_REASON_TABLE rp      INNER JOIN (select distinct ORD_NUM from ##temp_orders_trades_al) al       on rp.ID = al.ORD_NUM         END         ----------------------------------Cash Reporting - Monitoring Tables --------------------------------------------------------------------         IF  OBJECT_ID('tempdb..##temp_cash_orders_trades', 'U') IS NOT NULL     BEGIN          DELETE rp  FROM VISTA_REPORTING.dbo.AUDIT_TABLE_CASH rp      INNER JOIN (select distinct TRANSACTION_NUMBER from ##temp_cash_orders_trades) al       on rp.TRANSACTION_NUMBER = al.TRANSACTION_NUMBER          DELETE rp  FROM VISTA_REPORTING.dbo.AUDIT_TABLE_CASH rp      INNER JOIN (select ORDER_ID from ##temp_cash_orders_trades where ORDER_ID != 0) al       on rp.ORDER_ID = al.ORDER_ID               DELETE rp  FROM VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_CASH rp      INNER JOIN (select distinct TRANSACTION_NUMBER from ##temp_cash_orders_trades) al       on rp.TRANSACTION_NUMBER = al.TRANSACTION_NUMBER          DELETE rp  FROM VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_CASH rp      INNER JOIN (select ORDER_ID from ##temp_cash_orders_trades where ORDER_ID != 0) al       on rp.ORDER_ID = al.ORDER_ID               DELETE rp  FROM VISTA_REPORTING.dbo.COMPLIANCE_ORDERS_FINAL_STATUS_UPDATE_TABLE_CASH rp      INNER JOIN (select ORDER_ID from ##temp_cash_orders_trades where ORDER_ID != 0) al       on rp.ORDER_ID = al.ORDER_ID          /*      DELETE rp  FROM VISTA_REPORTING.dbo.CASH_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE rp      INNER JOIN (select ORDER_ID from ##temp_cash_orders_trades where ORDER_ID != 0) al       on rp.ORDER_ID = al.ORDER_ID          DELETE rp  FROM VISTA_REPORTING.dbo.CASH_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE rp      INNER JOIN (select distinct transaction_number from ##temp_cash_orders_trades ) al       on rp.TRANSACTION_NUMBER = al.transaction_number      */      DELETE rp  FROM VISTA_REPORTING.dbo.SAMPLED_ORDERS_CASH_COMPLIANCE rp      INNER JOIN (select ORDER_ID from ##temp_cash_orders_trades where ORDER_ID != 0) al       on rp.ORDER_ID = al.ORDER_ID              --We can't delete here as would impact multiple base tables therefore commenting out for now until we agree on further steps     /*          IF  OBJECT_ID('Vista_Reporting.dbo.COMPLIANCE_ORDER_SUMMARY_CASH_ARCHIVED', 'U') IS NOT NULL      DELETE FROM Vista_Reporting.dbo.COMPLIANCE_ORDER_SUMMARY_CASH      where EXISTS (SELECT m.Order_ID           FROM Vista_Reporting.dbo.COMPLIANCE_ORDER_SUMMARY_CASH_ARCHIVED m           WHERE m.Order_ID = Vista_Reporting.dbo.COMPLIANCE_ORDER_SUMMARY_CASH.Order_ID)         */         END    -----------------------------------------Fx Reporting- Monitoring Tables ----------------------------------------------------------------------         IF  OBJECT_ID('tempdb..##temp_fx_orders_trades', 'U') IS NOT NULL     BEGIN          DELETE rp  FROM VISTA_REPORTING.dbo.AUDIT_TABLE_FX rp      INNER JOIN (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) al       on rp.Order_id = al.FXM_ORDER_ID                DELETE rp  FROM VISTA_REPORTING.dbo.AUDIT_TABLE_FX rp      INNER JOIN (select distinct trade_id from ##temp_fx_orders_trades) al       on rp.Transaction_number = al.trade_id           DELETE rp  FROM VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_FX rp      INNER JOIN (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) al       on rp.ORDER_ID = al.FXM_ORDER_ID          DELETE rp  FROM VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_FX rp      INNER JOIN (select distinct trade_id from ##temp_fx_orders_trades) al       on rp.TRANSACTION_NUMBER = al.trade_id           DELETE rp  FROM VISTA_REPORTING.dbo.COMPLIANCE_ORDERS_FINAL_STATUS_UPDATE_TABLE_FX rp      INNER JOIN (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) al       on rp.Order_id = al.FXM_ORDER_ID                     DELETE rp  FROM VISTA_REPORTING.dbo.FX_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE rp      INNER JOIN (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) al       on rp.ORDER_ID = al.FXM_ORDER_ID              DELETE rp  FROM VISTA_REPORTING.dbo.FX_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE rp      INNER JOIN (select distinct trade_id from ##temp_fx_orders_trades) al       on rp.TRANSACTION_NUMBER = al.trade_id               DELETE rp  FROM VISTA_REPORTING.dbo.SAMPLED_ORDERS_FX_COMPLIANCE rp      INNER JOIN (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) al       on rp.ORDER_ID = al.FXM_ORDER_ID         --We can't delete here as would impact multiple base tables therefore commenting out for now until we agree on further steps     /*      IF  OBJECT_ID('Vista_Reporting.dbo.COMPLIANCE_ORDER_SUMMARY_FX_ARCHIVED', 'U') IS NOT NULL      DELETE FROM Vista_Reporting.dbo.COMPLIANCE_ORDER_SUMMARY_FX      where EXISTS (SELECT m.ORDER_ID           FROM Vista_Reporting.dbo.COMPLIANCE_ORDER_SUMMARY_FX_ARCHIVED m           WHERE m.ORDER_ID = Vista_Reporting.dbo.COMPLIANCE_ORDER_SUMMARY_FX.ORDER_ID)         */         END    ------------------------------------------------------------Cash/FX Reporting - Monitoring tables from Aladdin source-------------------------------------------------          IF  OBJECT_ID('tempdb..##temp_orders_trades_al', 'U') IS NOT NULL     BEGIN          DELETE rp  FROM VISTA_REPORTING.dbo.AUDIT_TABLE_CASH rp      INNER JOIN (select distinct Ord_Num from ##temp_orders_trades_al) al       on rp.Order_id = al.Ord_Num and rp.ID like '%AL'          DELETE rp  FROM VISTA_REPORTING.dbo.AUDIT_TABLE_CASH rp      INNER JOIN (select distinct MULTI_FUND_ID from ##temp_orders_trades_al) al       on rp.Transaction_number = al.MULTI_FUND_ID and rp.ID like '%AL'          DELETE rp  FROM VISTA_REPORTING.dbo.AUDIT_TABLE_CASH rp      INNER JOIN (select distinct Ord_Num from ##temp_orders_trades_al) al       on rp.TRD_ORD = al.Ord_Num and rp.ID like '%AL'           DELETE rp  FROM VISTA_REPORTING.dbo.AUDIT_TABLE_FX rp 
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: DATA_ARCHIVE_FX  CreateDate: 2025-06-26 17:33:43.510  ModifyDate: 2025-06-26 17:33:43.510  --- DEFINITION START ---  -- =============================================    -- Author:  <Miter, Matej>    -- Create date: <04/11/2021>    -- Description:     -- <>    -- =============================================        -- ***************VERSION CONTROL***************    --2022-02-24; Matej Miter created for Jira:    --SURVG-556 -Added New Instructor to Dealer report data into Archiving process      -- *********************************************        CREATE PROCEDURE [dbo].[DATA_ARCHIVE_FX]     -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,            AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;                --------------------------------------ACCUMULATION(STAGING) TABLES FX-----------------------------------------------------------------------          -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.FX_ORDERS_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.FX_ORDERS_ARCHIVED     select fxo.*     from Vista_Staging.dbo.FX_ORDERS fxo     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = fxo.FXM_ORDER_ID     where NOT EXISTS (select FXM_ORDER_ID from Vista_Staging.dbo.FX_ORDERS_ARCHIVED ca where ca.FXM_ORDER_ID = fxo.FXM_ORDER_ID)         ELSE         select fxo.*     into VISTA_STAGING.dbo.FX_ORDERS_ARCHIVED     from Vista_Staging.dbo.FX_ORDERS fxo     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = fxo.FXM_ORDER_ID             -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.FX_TRADES_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.FX_TRADES_ARCHIVED     select fxt.*     from Vista_Staging.dbo.FX_TRADES fxt     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = fxt.TRADE_ID     where NOT EXISTS (select TRADE_ID from Vista_Staging.dbo.FX_TRADES_ARCHIVED ca where ca.TRADE_ID = fxt.TRADE_ID)         ELSE         select fxt.*     into VISTA_STAGING.dbo.FX_TRADES_ARCHIVED     from Vista_Staging.dbo.FX_TRADES fxt     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = fxt.TRADE_ID             -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.FX_LOSING_BANKS_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.FX_LOSING_BANKS_ARCHIVED     select flb.*     from Vista_Staging.dbo.FX_LOSING_BANKS flb     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = flb.trade_id     where NOT EXISTS (select TRADE_ID from Vista_Staging.dbo.FX_LOSING_BANKS_ARCHIVED ca where ca.TRADE_ID = flb.TRADE_ID)         ELSE         select flb.*     into VISTA_STAGING.dbo.FX_LOSING_BANKS_ARCHIVED     from Vista_Staging.dbo.FX_LOSING_BANKS flb     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = flb.trade_id         -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.FX_MAPPED_BANKS_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.FX_MAPPED_BANKS_ARCHIVED     select fmb.*     from Vista_Staging.dbo.FX_MAPPED_BANKS fmb     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = fmb.trade_id     where NOT EXISTS (select TRADE_ID from Vista_Staging.dbo.FX_MAPPED_BANKS_ARCHIVED ca where ca.TRADE_ID = fmb.TRADE_ID)         ELSE         select fmb.*     into VISTA_STAGING.dbo.FX_MAPPED_BANKS_ARCHIVED     from Vista_Staging.dbo.FX_MAPPED_BANKS fmb     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = fmb.trade_id        ----------------------------------------------------STAGING EXCEPTIONS TABLES FX---------------------------------------------------------         -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FX_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FX_TABLE_ARCHIVED     select te.*     from Vista_Staging.dbo.VG_09_TIMELY_EXECUTION_FX_TABLE te     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = te.Order_id     where NOT EXISTS (select Order_id from Vista_Staging.dbo.VG_09_TIMELY_EXECUTION_FX_TABLE_ARCHIVED ca where ca.Order_id = te.Order_id)         ELSE         select te.*     into VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FX_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_09_TIMELY_EXECUTION_FX_TABLE te     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = te.Order_id         -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FX_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FX_TABLE_ARCHIVED     select tr.*     from Vista_Staging.dbo.VG_10_TIMELY_RECORDING_FX_TABLE tr     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = tr.trade_id     where NOT EXISTS (select trade_id from Vista_Staging.dbo.VG_10_TIMELY_RECORDING_FX_TABLE_ARCHIVED ca where ca.trade_id = tr.trade_id)         ELSE         select tr.*     into VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FX_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_10_TIMELY_RECORDING_FX_TABLE tr     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = tr.trade_id              -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE_ARCHIVED     select gh.*     from Vista_Staging.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE gh     inner join (select distinct trade_id,FXM_order_id from ##temp_fx_orders_trades) fx on fx.trade_id = gh.trade_id and fx.FXM_order_id = gh.fxm_order_id     where NOT EXISTS (select fxm_order_id,trade_id from Vista_Staging.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE_ARCHIVED ca where ca.trade_id = gh.trade_id and     ca.fxm_order_id = gh.fxm_order_id)         ELSE         select gh.*     into VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE gh     inner join (select distinct trade_id,FXM_order_id from ##temp_fx_orders_trades) fx on fx.trade_id = gh.trade_id and fx.FXM_order_id = gh.fxm_order_id              -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE_ARCHIVED', 'U') IS NOT NULL     INSERT into VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE_ARCHIVED     select cd.*     from Vista_Staging.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE cd     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = cd.order_id     where NOT EXISTS (select order_id from Vista_Staging.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE_ARCHIVED ca where ca.order_id = cd.order_id)         ELSE         select cd.*     into VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE cd     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = cd.order_id             -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_500_DEALER_LIMIT_FX_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_500_DEALER_LIMIT_FX_TABLE_ARCHIVED     select dl.*     from Vista_Staging.dbo.VG_500_DEALER_LIMIT_FX_TABLE dl     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = dl.order_id     where NOT EXISTS (select order_id from Vista_Staging.dbo.VG_500_DEALER_LIMIT_FX_TABLE_ARCHIVED ca where ca.order_id = dl.order_id)         ELSE         select dl.*     into VISTA_STAGING.dbo.VG_500_DEALER_LIMIT_FX_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_500_DEALER_LIMIT_FX_TABLE dl     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = dl.order_id              -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_501_SPOT_REFERENCE_RATE_FX_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_501_SPOT_REFERENCE_RATE_FX_TABLE_ARCHIVED     select sr.*     from Vista_Staging.dbo.VG_501_SPOT_REFERENCE_RATE_FX_TABLE sr     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = sr.trade_id     where NOT EXISTS (select trade_id from Vista_Staging.dbo.VG_501_SPOT_REFERENCE_RATE_FX_TABLE_ARCHIVED ca where ca.trade_id = sr.trade_id)         ELSE         select sr.*     into VISTA_STAGING.dbo.VG_501_SPOT_REFERENCE_RATE_FX_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_501_SPOT_REFERENCE_RATE_FX_TABLE sr     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = sr.trade_id              -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_601_OUT_OF_HOURS_FX_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_601_OUT_OF_HOURS_FX_TABLE_ARCHIVED     select oh.*     from Vista_Staging.dbo.VG_601_OUT_OF_HOURS_FX_TABLE oh     inner join (select distinct trade_id,FXM_order_id from ##temp_fx_orders_trades) fx on fx.trade_id = oh.trade_id and fx.FXM_order_id = oh.order_id     where NOT EXISTS (select order_id,trade_id from Vista_Staging.dbo.VG_601_OUT_OF_HOURS_FX_TABLE_ARCHIVED ca where ca.trade_id = oh.trade_id and     ca.order_id = oh.order_id)         ELSE         select oh.*     into VISTA_STAGING.dbo.VG_601_OUT_OF_HOURS_FX_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_601_OUT_OF_HOURS_FX_TABLE oh     inner join (select distinct trade_id,FXM_order_id from ##temp_fx_orders_trades) fx on fx.trade_id = oh.trade_id and fx.FXM_order_id = oh.order_id               IF  OBJECT_ID('VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_FX_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_FX_TABLE_ARCHIVED     select eoh.*     from Vista_Staging.dbo.VG_602_EOD_HOLDOVERS_FX_TABLE eoh      inner join (select distinct FXM_order_id from ##temp_fx_orders_trades) fx on fx.FXM_order_id = eoh.FXM_ORDER_ID     where NOT EXISTS (select FXM_ORDER_ID from VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_FX_TABLE_ARCHIVED vga where vga.FXM_ORDER_ID = eoh.FXM_ORDER_ID)         ELSE         select eoh.*     into VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_FX_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_602_EOD_HOLDOVERS_FX_TABLE eoh      inner join (select distinct FXM_order_id from ##temp_fx_orders_trades) fx on fx.FXM_order_id = eoh.FXM_ORDER_ID             -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_603_LARGE_TRADES_FX_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_603_LARGE_TRADES_FX_TABLE_ARCHIVED     select lt.*     from Vista_Staging.dbo.VG_603_LARGE_TRADES_FX_TABLE lt     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = lt.order_id     where NOT EXISTS (select order_id from VISTA_STAGING.dbo.VG_603_LARGE_TRADES_FX_TABLE_ARCHIVED vga where vga.order_id = lt.order_id)         ELSE         select lt.*     into VISTA_STAGING.dbo.VG_603_LARGE_TRADES_FX_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_603_LARGE_TRADES_FX_TABLE lt     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = lt.order_id               -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_603T_LARGE_TRADES_FX_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_603T_LARGE_TRADES_FX_TABLE_ARCHIVED     select lt.*     from Vista_Staging.dbo.VG_603T_LARGE_TRADES_FX_TABLE lt     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = lt.transaction_number     where NOT EXISTS (select transaction_number from VISTA_STAGING.dbo.VG_603T_LARGE_TRADES_FX_TABLE_ARCHIVED vga where vga.transaction_number = lt.transaction_number)         ELSE         select lt.*     into VISTA_STAGING.dbo.VG_603T_LARGE_TRADES_FX_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_603T_LARGE_TRADES_FX_TABLE lt     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = lt.transaction_number             -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_FX_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_FX_TABLE_ARCHIVED     select coh.*     from Vista_Staging.dbo.VG_604_CLIENT_ORDER_HANDLING_FX_TABLE coh     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = coh.order_id     where NOT EXISTS (select order_id from VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_FX_TABLE_ARCHIVED vga where vga.order_id = coh.order_id)         ELSE         select coh.*     into VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_FX_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_604_CLIENT_ORDER_HANDLING_FX_TABLE coh     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = coh.order_id              -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE_ARCHIVED     select be.*     from Vista_Staging.dbo.VG_607_BEST_EXECUTION_FX_TABLE be     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = be.trade_id     where NOT EXISTS (select trade_id from VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE_ARCHIVED vga where vga.trade_id = be.trade_id)         ELSE         select be.*     into VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_607_BEST_EXECUTION_FX_TABLE be     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = be.trade_id         -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_608_TA_KNOCKBACK_FX_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_608_TA_KNOCKBACK_FX_TABLE_ARCHIVED     select tk.*     from Vista_Staging.dbo.VG_608_TA_KNOCKBACK_FX_TABLE tk     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = tk.fxm_order_id     where NOT EXISTS (select fxm_order_id from VISTA_STAGING.dbo.VG_608_TA_KNOCKBACK_FX_TABLE_ARCHIVED vga where vga.fxm_order_id = tk.fxm_order_id)         ELSE         select tk.*     into VISTA_STAGING.dbo.VG_608_TA_KNOCKBACK_FX_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_608_TA_KNOCKBACK_FX_TABLE tk     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = tk.fxm_order_id             -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_FX_TABLE_ARCHIVED', 'U') IS NOT NULL     INSERT into VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_FX_TABLE_ARCHIVED     select oa.*     from Vista_Staging.dbo.VG_611_ORDER_AGGREGATION_FX_TABLE oa     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = oa.order_id     where NOT EXISTS (select order_id from VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_FX_TABLE_ARCHIVED vga where vga.order_id = oa.order_id)         ELSE         select oa.*     into VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_FX_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_611_ORDER_AGGREGATION_FX_TABLE oa     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = oa.order_id             -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_FX_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_FX_TABLE_ARCHIVED     select oa.*     from Vista_Staging.dbo.VG_612_ORDER_ALLOCATION_FX_TABLE oa     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = oa.transaction_number     where NOT EXISTS (select transaction_number from VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_FX_TABLE_ARCHIVED vga where vga.transaction_number = oa.transaction_number)         ELSE         select oa.*     into VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_FX_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_612_ORDER_ALLOCATION_FX_TABLE oa     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = oa.transaction_number             --SURVG-556     -- Now that we have distinct ords and trades that have passed filter for data archiving we will join that table with all STG, REP tables to extract joined ord ord/trades     IF  OBJECT_ID('VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE_ARCHIVED     select itd.*     from Vista_Staging.dbo.VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE itd     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = itd.trade_id     where NOT EXISTS (select trade_id from VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE_ARCHIVED vga where vga.trade_id = itd.trade_id)         ELSE         select itd.*     into VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE_ARCHIVED     from Vista_Staging.dbo.VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE itd     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = itd.trade_id         --End of SURVG-556            ----------------------------------------------------------Reporting tables FX----------------------------------------------------------------------------         IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE_ARCHIVED     select distinct msr.*     from VISTA_REPORTING.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE msr     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = msr.transaction_number      where NOT EXISTS (select transaction_number from VISTA_REPORTING.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE_ARCHIVED vga where vga.transaction_number = msr.transaction_number)         ELSE         select distinct msr.*     into VISTA_REPORTING.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE msr     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = msr.transaction_number              IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE_ARCHIVED     select distinct msr.*     from VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE msr     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = msr.transaction_number     where NOT EXISTS (select transaction_number from VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE_ARCHIVED vga where vga.transaction_number = msr.transaction_number)         ELSE         select distinct msr.*     into VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE msr     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = msr.transaction_number          IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE_ARCHIVED     select distinct mgh.*     from VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE mgh     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = mgh.transaction_number     where NOT EXISTS (select transaction_number from VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE_ARCHIVED vga where vga.transaction_number = mgh.transaction_number)         ELSE         select distinct mgh.*     into VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE mgh     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = mgh.transaction_number              IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE_ARCHIVED', 'U') IS NOT NULL     INSERT into VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE_ARCHIVED     select distinct mbe.*     from VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE mbe     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = mbe.transaction_number     where NOT EXISTS (select transaction_number from VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE_ARCHIVED vga where vga.transaction_number = mbe.transaction_number)         ELSE         select distinct mbe.*     into VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE mbe     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = mbe.transaction_number              IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_FX_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_FX_TABLE_ARCHIVED     select distinct moa.*     from VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_FX_TABLE moa     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = moa.TRADE_ID     where NOT EXISTS (select TRADE_ID from VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_FX_TABLE_ARCHIVED vga where vga.TRADE_ID = moa.TRADE_ID)         ELSE         select distinct moa.*     into VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_FX_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_FX_TABLE moa     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = moa.TRADE_ID         ------------------     IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE_ARCHIVED     select mid.*     from VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE mid     inner join (select distinct TRADE_ID from ##temp_fx_orders_trades) fx on fx.TRADE_ID = mid.transaction_number     where NOT EXISTS (select transaction_number from VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE_ARCHIVED vga where vga.transaction_number = mid.transaction_number)         ELSE         select mid.*     into VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE mid     inner join (select distinct TRADE_ID from ##temp_fx_orders_trades) fx on fx.TRADE_ID = mid.transaction_number          ------------------     IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE_ARCHIVED     select distinct mte.*     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE mte     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = mte.ORDER_ID     where NOT EXISTS (select ORDER_ID from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE_ARCHIVED vga where vga.ORDER_ID = mte.ORDER_ID)         ELSE         select distinct mte.*     into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE mte     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = mte.ORDER_ID              IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_FX_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_FX_TABLE_ARCHIVED     select distinct mcd.*     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_FX_TABLE mcd     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = mcd.ORDER_ID     where NOT EXISTS (select ORDER_ID from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_FX_TABLE_ARCHIVED vga where vga.ORDER_ID = mcd.ORDER_ID)         ELSE         select distinct mcd.*     into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_FX_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_FX_TABLE mcd     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = mcd.ORDER_ID             IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE_ARCHIVED     select distinct mdl.*     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE mdl     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = mdl.ORDER_ID     where NOT EXISTS (select ORDER_ID from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE_ARCHIVED vga where vga.ORDER_ID = mdl.ORDER_ID)         ELSE         select distinct mdl.*     into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE mdl     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = mdl.ORDER_ID         IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE_ARCHIVED     select distinct moh.*     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE moh     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = moh.ORDER_ID     where NOT EXISTS (select ORDER_ID from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE_ARCHIVED vga where vga.ORDER_ID = moh.ORDER_ID)         ELSE         select distinct moh.*     into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE moh     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = moh.ORDER_ID         IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE_ARCHIVED     select distinct meh.*     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE meh     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = meh.ORDER_ID     where NOT EXISTS (select ORDER_ID from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE_ARCHIVED vga where vga.ORDER_ID = meh.ORDER_ID)         ELSE         select distinct meh.*     into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE meh     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = meh.ORDER_ID              IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE_ARCHIVED     select distinct mlt.*     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE mlt     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = mlt.ORDER_ID     where NOT EXISTS (select ORDER_ID from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE_ARCHIVED vga where vga.ORDER_ID = mlt.ORDER_ID)         ELSE         select distinct mlt.*     into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE mlt     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = mlt.ORDER_ID             IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE_ARCHIVED     select distinct mcoh.*     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE mcoh     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = mcoh.ORDER_ID     where NOT EXISTS (select ORDER_ID from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE_ARCHIVED vga where vga.ORDER_ID = mcoh.ORDER_ID)         ELSE         select distinct mcoh.*     into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE mcoh     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = mcoh.ORDER_ID             IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE_ARCHIVED     select distinct mtk.*     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE mtk     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = mtk.ORDER_ID     where NOT EXISTS (select ORDER_ID from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE_ARCHIVED vga where vga.ORDER_ID = mtk.ORDER_ID)         ELSE         select distinct mtk.*     into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE mtk     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = mtk.ORDER_ID         IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_FX_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_FX_TABLE_ARCHIVED     select distinct moa.*     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_FX_TABLE moa     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = moa.FX_ORDER_ID     where NOT EXISTS (select FX_ORDER_ID from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_FX_TABLE_ARCHIVED vga where vga.FX_ORDER_ID = moa.FX_ORDER_ID)         ELSE         select distinct moa.*     into VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_FX_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_FX_TABLE moa     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = moa.FX_ORDER_ID        ---------------------------------------------------REPORTING TABLES COMPLIANCE/MONITORING TABLES--------------------------------------------------             IF OBJECT_ID('VISTA_REPORTING.dbo.AUDIT_TABLE_FX_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.AUDIT_TABLE_FX_ARCHIVED     select distinct a.*     from VISTA_REPORTING.dbo.AUDIT_TABLE_FX a     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = a.Order_id     where NOT EXISTS (select ID from VISTA_REPORTING.dbo.AUDIT_TABLE_FX_ARCHIVED vga where vga.ID = a.ID)         UNION         select distinct a.*     from VISTA_REPORTING.dbo.AUDIT_TABLE_FX a     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = a.Transaction_number     where NOT EXISTS (select ID from VISTA_REPORTING.dbo.AUDIT_TABLE_FX_ARCHIVED vga where vga.ID = a.ID)             ELSE         select distinct a.*     into VISTA_REPORTING.dbo.AUDIT_TABLE_FX_ARCHIVED     from VISTA_REPORTING.dbo.AUDIT_TABLE_FX a     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = a.Order_id         UNION         select distinct a.*     from VISTA_REPORTING.dbo.AUDIT_TABLE_FX a     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = a.Transaction_number             IF OBJECT_ID('VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_FX_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_FX_ARCHIVED     select distinct a.*     from VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_FX a     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = a.ORDER_ID     where NOT EXISTS (select ORDER_ID from VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_FX_ARCHIVED vga where vga.ORDER_ID = a.ORDER_ID)         UNION         select distinct a.*     from VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_FX a     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = a.TRANSACTION_NUMBER     where NOT EXISTS (select TRANSACTION_NUMBER from VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_FX_ARCHIVED vga where vga.TRANSACTION_NUMBER = a.TRANSACTION_NUMBER)         ELSE         select distinct a.*     into VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_FX_ARCHIVED     from VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_FX a     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = a.ORDER_ID         UNION         select distinct a.*     from VISTA_REPORTING.dbo.COMPLIANCE_AUDIT_TABLE_FX a     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = a.TRANSACTION_NUMBER                 IF OBJECT_ID('VISTA_REPORTING.dbo.COMPLIANCE_ORDERS_FINAL_STATUS_UPDATE_TABLE_FX_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.COMPLIANCE_ORDERS_FINAL_STATUS_UPDATE_TABLE_FX_ARCHIVED     select distinct cfs.*     from VISTA_REPORTING.dbo.COMPLIANCE_ORDERS_FINAL_STATUS_UPDATE_TABLE_FX cfs     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = cfs.Order_id     where NOT EXISTS (select Order_id from VISTA_REPORTING.dbo.COMPLIANCE_ORDERS_FINAL_STATUS_UPDATE_TABLE_FX_ARCHIVED vga where vga.Order_id = cfs.Order_id)         ELSE         select distinct cfs.*     into VISTA_REPORTING.dbo.COMPLIANCE_ORDERS_FINAL_STATUS_UPDATE_TABLE_FX_ARCHIVED     from VISTA_REPORTING.dbo.COMPLIANCE_ORDERS_FINAL_STATUS_UPDATE_TABLE_FX cfs     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = cfs.Order_id                 IF OBJECT_ID('VISTA_REPORTING.dbo.FX_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.FX_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE_ARCHIVED     select distinct cefs.*     from VISTA_REPORTING.dbo.FX_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE cefs     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = cefs.ORDER_ID     where NOT EXISTS (select Order_id from VISTA_REPORTING.dbo.FX_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE_ARCHIVED vga where vga.Order_id = cefs.Order_id)         UNION         select distinct cefs.*     from VISTA_REPORTING.dbo.FX_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE cefs     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = cefs.TRANSACTION_NUMBER     where NOT EXISTS (select TRANSACTION_NUMBER from VISTA_REPORTING.dbo.FX_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE_ARCHIVED vga where vga.TRANSACTION_NUMBER = cefs.TRANSACTION_NUMBER)         ELSE         select distinct cefs.*     into VISTA_REPORTING.dbo.FX_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE_ARCHIVED     from VISTA_REPORTING.dbo.FX_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE cefs     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = cefs.ORDER_ID         UNION         select distinct cefs.*     from VISTA_REPORTING.dbo.FX_COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE cefs     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = cefs.TRANSACTION_NUMBER                 IF OBJECT_ID('VISTA_REPORTING.dbo.SAMPLED_ORDERS_FX_COMPLIANCE_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.SAMPLED_ORDERS_FX_COMPLIANCE_ARCHIVED     select distinct soc.*     from VISTA_REPORTING.dbo.SAMPLED_ORDERS_FX_COMPLIANCE soc     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = soc.ORDER_ID     where NOT EXISTS (select ORDER_ID from VISTA_REPORTING.dbo.SAMPLED_ORDERS_FX_COMPLIANCE_ARCHIVED vga where vga.ORDER_ID = soc.ORDER_ID)         ELSE         select distinct soc.*     into VISTA_REPORTING.dbo.SAMPLED_ORDERS_FX_COMPLIANCE_ARCHIVED     from VISTA_REPORTING.dbo.SAMPLED_ORDERS_FX_COMPLIANCE soc     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = soc.ORDER_ID             IF OBJECT_ID('VISTA_REPORTING.dbo.COMPLIANCE_ORDER_SUMMARY_FX_ARCHIVED', 'U') IS NOT NULL      INSERT into VISTA_REPORTING.dbo.COMPLIANCE_ORDER_SUMMARY_FX_ARCHIVED     select distinct cosf.*     from VISTA_REPORTING.dbo.COMPLIANCE_ORDER_SUMMARY_FX cosf     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = cosf.ORDER_ID     where NOT EXISTS (select ORDER_ID from VISTA_REPORTING.dbo.COMPLIANCE_ORDER_SUMMARY_FX_ARCHIVED vga where vga.ORDER_ID = cosf.ORDER_ID)         ELSE         select distinct cosf.*     into VISTA_REPORTING.dbo.COMPLIANCE_ORDER_SUMMARY_FX_ARCHIVED     from VISTA_REPORTING.dbo.COMPLIANCE_ORDER_SUMMARY_FX cosf     inner join (select distinct FXM_ORDER_ID from ##temp_fx_orders_trades) fx on fx.FXM_ORDER_ID = cosf.ORDER_ID                -------------------------------------------------DMC FX tables -----------------------------------------------------------------------         IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FX_AGGREGATOR_DATA_ARCHIVED', 'U') IS NOT NULL     INSERT into VISTA_REPORTING.dbo.DMC_FX_AGGREGATOR_DATA_ARCHIVED     select distinct dfa.*     from VISTA_REPORTING.dbo.DMC_FX_AGGREGATOR_DATA dfa     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = dfa.TRANSACTION_NUMBER     where NOT EXISTS (select TRANSACTION_NUMBER from VISTA_REPORTING.dbo.DMC_FX_AGGREGATOR_DATA_ARCHIVED vga where vga.TRANSACTION_NUMBER = dfa.TRANSACTION_NUMBER)         ELSE         select distinct dfa.*     into VISTA_REPORTING.dbo.DMC_FX_AGGREGATOR_DATA_ARCHIVED     from VISTA_REPORTING.dbo.DMC_FX_AGGREGATOR_DATA dfa     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = dfa.TRANSACTION_NUMBER              IF OBJECT_ID('VISTA_REPORTING.dbo.DMC_FX_AGGREGATOR_1B_DATA_ARCHIVED', 'U') IS NOT NULL     INSERT into VISTA_REPORTING.dbo.DMC_FX_AGGREGATOR_1B_DATA_ARCHIVED     select distinct dfab.*     from VISTA_REPORTING.dbo.DMC_FX_AGGREGATOR_1B_DATA dfab     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = dfab.TRANSACTION_NUMBER     where NOT EXISTS (select TRANSACTION_NUMBER from VISTA_REPORTING.dbo.DMC_FX_AGGREGATOR_1B_DATA_ARCHIVED vga where vga.TRANSACTION_NUMBER = dfab.TRANSACTION_NUMBER)         ELSE         select distinct dfab.*     into VISTA_REPORTING.dbo.DMC_FX_AGGREGATOR_1B_DATA_ARCHIVED     from VISTA_REPORTING.dbo.DMC_FX_AGGREGATOR_1B_DATA dfab     inner join (select distinct trade_id from ##temp_fx_orders_trades) fx on fx.trade_id = dfab.TRANSACTION_NUMBER        END                                                                --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: DATA_COUNT_CHECKS_MG_MIGRATION_ALL  CreateDate: 2025-06-26 17:34:14.027  ModifyDate: 2025-06-26 17:34:14.027  --- DEFINITION START ---  -- =============================================    -- Author:  <Miter, Matej>    -- Create date: <11/10/2021>    -- Description:     -- <INSTRUCTOR that orders trade must be different than dealer     -- otherwise exception will be raised>    -- =============================================        -- ***************VERSION CONTROL***************    --    -- *********************************************        CREATE PROCEDURE [dbo].[DATA_COUNT_CHECKS_MG_MIGRATION_ALL]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;            -------------------------------Accumulation --------------------------------------------------    IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT 'PORTFOLIO' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(FUND) as Record_Count,       GETDATE() as CHECK_DATE     FROM VISTA_STAGING.dbo.PORTFOLIO             IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'COUNTERPARTIES' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(id) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_STAGING.dbo.COUNTERPARTIES            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'NAV' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(id) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_STAGING.dbo.NAV             IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'ECONOMY' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(id) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_STAGING.dbo.ECONOMY            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'PLACEMENTS' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(id) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.PLACEMENTS            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'ORDERS' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(id) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.ORDERS                IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'TRADES' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(id) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.TRADES            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'DEALER_AND_DESK' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(MG_USER_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.DEALER_AND_DESK                IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'PORTFOLIO_GROUPS' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(FUND) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.PORTFOLIO_GROUPS            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'INSTRUMENTS' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(DESC_INSTMT) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.INSTRUMENTS            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'ISSUERS' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(ISSUER_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.ISSUERS            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'QUOTES' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.QUOTES            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'QUOTES_PLACEMENTS' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(PLACEMENT_NUM) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.QUOTES_PLACEMENTS            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'ORDERS_CROSS' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(TRD_ORD) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.ORDERS_CROSS            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'ORDERS_DETAIL' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(ORD_NUM) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.ORDERS_DETAIL            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'RATINGS' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(CUSIP) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.RATINGS            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'SECTORS' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(CUSIP) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.SECTORS                IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'REQUEST_LOOKUP' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(REQUEST_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.REQUEST_LOOKUP            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'EMSX_ORDERS' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count([Order Number]) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.EMSX_ORDERS            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'EMSX_ROUTES' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count([Order Number]) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.EMSX_ROUTES            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'EXTERNAL_PRICING_TABLE' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(CUSIP) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.EXTERNAL_PRICING_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'FX_MAPPED_BANKS' as Table_name,       'FX' as Dealing_Desk,       'Accumulation' as Stage,       count(Trade_Id) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.FX_MAPPED_BANKS            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'FX_LOSING_BANKS' as Table_name,       'FX' as Dealing_Desk,       'Accumulation' as Stage,       count(Trade_Id) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.FX_LOSING_BANKS            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'FX_ORDERS' as Table_name,       'FX' as Dealing_Desk,       'Accumulation' as Stage,       count(FXM_ORDER_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.FX_ORDERS            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'FX_TRADES' as Table_name,       'FX' as Dealing_Desk,       'Accumulation' as Stage,       count(Trade_Id) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.FX_TRADES            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'Markit_ISReport' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count([Order ID]) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.Markit_ISReport            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'Markit_ISReport_Refill' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count([Order ID]) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.Markit_ISReport_Refill            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'Markit_OutsideHighLow' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count([Order ID]) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.Markit_OutsideHighLow            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'PORTFOLIO_GROUPS_TREASURY' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.PORTFOLIO_GROUPS_TREASURY            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'CASH_BANK_RATES' as Table_name,       'Cash' as Dealing_Desk,       'Accumulatiom' as Stage,       count(TRANSACTION_NUMBER) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.CASH_BANK_RATES            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'CASH_MAPPED_BANKS' as Table_name,       'Cash' as Dealing_Desk,       'Accumulatiom' as Stage,       count(TRANSACTION_NUMBER) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.CASH_MAPPED_BANKS            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'CASH_ORDERS' as Table_name,       'Cash' as Dealing_Desk,       'Accumulatiom' as Stage,       count(ORDER_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.CASH_ORDERS        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'CASH_REFERENCE_RATES' as Table_name,       'Cash' as Dealing_Desk,       'Accumulatiom' as Stage,       count(TRANSACTION_NUMBER) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.CASH_REFERENCE_RATES        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'CASH_TRADES' as Table_name,       'Cash' as Dealing_Desk,       'Accumulatiom' as Stage,       count(TRANSACTION_NUMBER) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.CASH_TRADES            ------------------------------------------------Exception Staging and Reporting Tables-------------------------------------------------            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT 'VG_01_QUOTE_EXCEPTION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       'Staging' as Stage,       count(MULTI_FUND_ID) as Record_Count,       GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_01_QUOTE_EXCEPTION_DMG_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_01_QUOTE_EXCEPTION_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       'Staging' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_01_QUOTE_EXCEPTION_EQ_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_01_QUOTE_EXCEPTION_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       'Staging' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_01_QUOTE_EXCEPTION_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       'Staging' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_01_QUOTE_EXCEPTION_LL_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_06_NEW_ISSUE_ORDER_FLIPPING_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       'Staging' as Stage,       count(CLIENT_EXECUTION_NUM) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_FI_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_06_NEW_ISSUE_ORDER_FLIPPING_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       'Staging' as Stage,       count(CLIENT_EXECUTION_NUM) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_LL_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_07_NON_WINNING_QUOTE_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       'Staging' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_07_NON_WINNING_QUOTE_DMG_TABLE                IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_07_NON_WINNING_QUOTE_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       'Staging' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_07_NON_WINNING_QUOTE_EQ_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_07_NON_WINNING_QUOTE_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       'Staging' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_07_NON_WINNING_QUOTE_FI_TABLE     where NWQ_EXCEPTION = 1        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_07_NON_WINNING_QUOTE_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       'Staging' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_07_NON_WINNING_QUOTE_LL_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_08_Order_Inflation_FI_Table' as Table_name,       'FI' as Dealing_Desk,       'Staging' as Stage,       count(CLIENT_EXECUTION_NUM) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_08_Order_Inflation_FI_Table        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_08_Order_Inflation_LL_Table' as Table_name,       'LL' as Dealing_Desk,       'Staging' as Stage,       count(CLIENT_EXECUTION_NUM) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_08_Order_Inflation_LL_Table            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_09_TIMELY_EXECUTION_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       'Staging' as Stage,       count(ORDER_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_MM_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_09_TIMELY_EXECUTION_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       'Staging' as Stage,       count(ORDER_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_RR_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_09_TIMELY_EXECUTION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       'Staging' as Stage,       count(ORD_NUM) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_DMG_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_09_TIMELY_EXECUTION_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       'Staging' as Stage,       count(ORD_NUM) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_EQ_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_09_TIMELY_EXECUTION_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       'Staging' as Stage,       count(ORD_NUM) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_09_TIMELY_EXECUTION_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       'Staging' as Stage,       count(ORDER_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_FX_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_09_TIMELY_EXECUTION_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       'Staging' as Stage,       count(ORD_NUM) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_LL_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_10_NAV_CUT_OFF_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       'Staging' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_10_NAV_CUT_OFF_EQ_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_10_TIMELY_RECORDING_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       'Staging' as Stage,       count(TRANSACTION_NUMBER) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_CASH_MM_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_10_TIMELY_RECORDING_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       'Staging' as Stage,       count(TRANSACTION_NUMBER) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_CASH_RR_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_10_TIMELY_RECORDING_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       'Staging' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_DMG_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_10_TIMELY_RECORDING_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       'Staging' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_EQ_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_10_TIMELY_RECORDING_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       'Staging' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_FI_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_10_TIMELY_RECORDING_FX_TABLE' as Table_name,       'FI' as Dealing_Desk,       'Staging' as Stage,       count(TRADE_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_FX_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_10_TIMELY_RECORDING_LL_TABLE' as Table_name,       'FI' as Dealing_Desk,       'Staging' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_LL_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_11_TIMELY_RELEASE_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       'Staging' as Stage,       count(ORD_NUM) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_11_TIMELY_RELEASE_EQ_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_13_ORDER_AGGREGATION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       'Staging' as Stage,       count(ORD_NUM) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_13_ORDER_AGGREGATION_DMG_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_13_ORDER_AGGREGATION_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       'Staging' as Stage,       count(ORD_NUM) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_13_ORDER_AGGREGATION_EQ_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_13_ORDER_AGGREGATION_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       'Staging' as Stage,       count(ORD_NUM) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_13_ORDER_AGGREGATION_FI_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_13_ORDER_AGGREGATION_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       'Staging' as Stage,       count(ORD_NUM) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_13_ORDER_AGGREGATION_LL_TABLE                IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_14_ORDER_PRIORITY_EXCEPTION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       'Staging' as Stage,       count(ORD_NUM) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_DMG_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_14_ORDER_PRIORITY_EXCEPTION_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       'Staging' as Stage,       count(ORD_NUM) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_EQ_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_14_ORDER_PRIORITY_EXCEPTION_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       'Staging' as Stage,       count(ORD_NUM) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_FI_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_14_ORDER_PRIORITY_EXCEPTION_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       'Staging' as Stage,       count(ORD_NUM) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_LL_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_15_AMENDMENT_FLAG_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       'Staging' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_15_AMENDMENT_FLAG_DMG_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_15_AMENDMENT_FLAG_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       'Staging' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_15_AMENDMENT_FLAG_EQ_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_15_AMENDMENT_FLAG_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       'Staging' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_15_AMENDMENT_FLAG_FI_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_15_AMENDMENT_FLAG_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       'Staging' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_15_AMENDMENT_FLAG_LL_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       'Staging' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       'Staging' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       'Staging' as Stage,       count(TRADE_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       'Staging' as Stage,       count(ORD_NUM) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       'Staging' as Stage,       count(ORD_NUM) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_17_COUNTERPARTY_DIRECTION_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       'Staging' as Stage,       count(ORDER_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_19_PT_AMENDMENT_FLAG_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       'Staging' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_DMG_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL     INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_19_PT_AMENDMENT_FLAG_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       'Staging' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_EQ_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_19_PT_AMENDMENT_FLAG_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       'Staging' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_FI_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_19_PT_AMENDMENT_FLAG_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       'Staging' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_LL_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_19_PT_TBILLS_CP_CD_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       'Staging' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_19_PT_TBILLS_CP_CD_CASH_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_25_INTERFUND_TRANSFER_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       'Staging' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_25_INTERFUND_TRANSFER_DMG_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_25_INTERFUND_TRANSFER_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       'Staging' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_25_INTERFUND_TRANSFER_EQ_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_25_INTERFUND_TRANSFER_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       'Staging' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_25_INTERFUND_TRANSFER_FI_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_25_INTERFUND_TRANSFER_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       'Staging' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_25_INTERFUND_TRANSFER_LL_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_40_EXTENDED_SETTLEMENT_EXCEPTION_TABLE' as Table_name,       'EQ' as Dealing_Desk,       'Staging' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_40_EXTENDED_SETTLEMENT_EXCEPTION_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       'Staging' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_500_DEALER_LIMIT_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       'Staging' as Stage,       count(ORDER_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_500_DEALER_LIMIT_FX_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_501_SPOT_REFERENCE_RATE_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       'Staging' as Stage,       count(TRADE_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_501_SPOT_REFERENCE_RATE_FX_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_601_OUT_OF_HOURS_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       'Staging' as Stage,       coalesce(count(ORDER_ID),count(transaction_number)) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_601_OUT_OF_HOURS_CASH_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_601_OUT_OF_HOURS_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       'Staging' as Stage,       coalesce(count(ORDER_ID),count(TRADE_ID)) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_601_OUT_OF_HOURS_FX_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_602_EOD_HOLDOVERS_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       'Staging' as Stage,       count(ORDER_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_602_EOD_HOLDOVERS_CASH_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_602_EOD_HOLDOVERS_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       'Staging' as Stage,       count(FXM_ORDER_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_602_EOD_HOLDOVERS_FX_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_603_LARGE_TRADES_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       'Staging' as Stage,       count(ORDER_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_603_LARGE_TRADES_CASH_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_603_LARGE_TRADES_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       'Staging' as Stage,       count(ORDER_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_603_LARGE_TRADES_FX_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_603_LARGE_TRADES_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       'Staging' as Stage,       count(ORDER_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_603_LARGE_TRADES_FX_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_603T_LARGE_TRADES_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       'Staging' as Stage,       count(TRANSACTION_NUMBER) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_603T_LARGE_TRADES_CASH_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_603T_LARGE_TRADES_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       'Staging' as Stage,       count(TRANSACTION_NUMBER) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_603T_LARGE_TRADES_FX_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       'Staging' as Stage,       count(ORDER_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       'Staging' as Stage,       count(ORDER_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_604_CLIENT_ORDER_HANDLING_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       'Staging' as Stage,       count(ORDER_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_FX_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_607_BEST_EXECUTION_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       'Staging' as Stage,       count(TRANSACTION_NUMBER) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_607_BEST_EXECUTION_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       'Staging' as Stage,       count(TRANSACTION_NUMBER) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_RR_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_607_BEST_EXECUTION_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       'Staging' as Stage,       count(TRADE_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_608_TA_KNOCKBACK_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       'Staging' as Stage,       count(TRANSACTION_NUMBER) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_608_TA_KNOCKBACK_CASH_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_608_TA_KNOCKBACK_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       'Staging' as Stage,       count(FXM_ORDER_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_608_TA_KNOCKBACK_FX_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       'Staging' as Stage,       count(TRANSACTION_NUMBER) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_610_TBILLS_CP_CD_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       'Staging' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_610_TBILLS_CP_CD_CASH_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_611_ORDER_AGGREGATION_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       'Staging' as Stage,       count(ORDER_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_MM_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_611_ORDER_AGGREGATION_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       'Staging' as Stage,       count(ORDER_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_RR_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_611_ORDER_AGGREGATION_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       'Staging' as Stage,       count(ORDER_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_611_ORDER_AGGREGATION_FX_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_612_ORDER_ALLOCATION_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       'Staging' as Stage,       count(TRANSACTION_NUMBER) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_MM_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_612_ORDER_ALLOCATION_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       'Staging' as Stage,       count(TRANSACTION_NUMBER) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_RR_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_612_ORDER_ALLOCATION_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       'Staging' as Stage,       count(TRANSACTION_NUMBER) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_612_ORDER_ALLOCATION_FX_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       'Staging' as Stage,       count(TRANSACTION_NUMBER) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       'Staging' as Stage,       count(TRANSACTION_NUMBER) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       'Staging' as Stage,       count(TRADE_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_COMMISSION_EXCEPTION_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       'Staging' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_COMMISSION_EXCEPTION_EQ_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_IMPLEMENTATION_SHORTFALL_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       'Staging' as Stage,       count(ORD_NUM) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_IMPLEMENTATION_SHORTFALL_EQ_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'VG_MARKET_HIGH_LOW_TABLE' as Table_name,       'EQ' as Dealing_Desk,       'Staging' as Stage,       count(ORD_NUM) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_MARKET_HIGH_LOW_TABLE                ---------------------REPORTING TABLES ----------------------------------------------------            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'MULTI_FUND_EXCEPTION_TABLE' as Table_name,       'EQ/FI/LL' as Dealing_Desk,       'Reporting' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MULTI_FUND_EXCEPTION_TABLE                 IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'TRD_ORDER_LEVEL_EXCEPTION_TABLE' as Table_name,       'EQ/FI/LL' as Dealing_Desk,       'Reporting' as Stage,       count(ORD_NUM) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.TRD_ORDER_LEVEL_EXCEPTION_TABLE                    IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'ORDER_LEVEL_EXCEPTION_TABLE' as Table_name,       'EQ/FI/LL' as Dealing_Desk,       'Reporting' as Stage,       count(ORD_NUM) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.ORDER_LEVEL_EXCEPTION_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'ORDER_LEVEL_EXCEPTION_TABLE' as Table_name,       'Reporting' as Stage,       'EQ/FI/LL' as Dealing_Desk,       count(ORD_NUM) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.ORDER_LEVEL_EXCEPTION_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'MASTER_PM_ORDER' as Table_name,       'EQ/FI/LL' as Dealing_Desk,       'Reporting' as Stage,       count(ORD_NUM) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER                 IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'MASTER_TRD_ORDER_TABLE' as Table_name,       'EQ/FI/LL' as Dealing_Desk,       'Reporting' as Stage,       count(ORD_NUM) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_TRD_ORDER_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'MASTER_MULTI_FUND_ID_TABLE' as Table_name,       'EQ/FI/LL' as Dealing_Desk,       'Reporting' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE                IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'MASTER_ORDER_PRIORITY_TABLE' as Table_name,       'EQ/FI/LL' as Dealing_Desk,       'Reporting' as Stage,       count(ORD_NUM) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_ORDER_PRIORITY_TABLE                IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'MASTER_CLIENT_EXECUTION_TABLE' as Table_name,       'EQ/FI/LL' as Dealing_Desk,       'Reporting' as Stage,       count(Client_Execution_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE                IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'MASTER_MFID_VG_01_QUOTE_EXCEPTION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       'Reporting' as Stage,       count(MFID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_01_QUOTE_EXCEPTION_DMG_TABLE                IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'MASTER_MFID_VG_07_NON_WINNING_QUOTE_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       'Reporting' as Stage,       count(MFID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_07_NON_WINNING_QUOTE_DMG_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'MASTER_MFID_VG_10_TIMELY_RECORDING_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       'Reporting' as Stage,       count(MFID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_DMG_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       'Reporting' as Stage,       count(MFID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'MASTER_MFID_VG_25_INTERFUND_TRANSFER_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       'Reporting' as Stage,       count(MFID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_25_INTERFUND_TRANSFER_DMG_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'MASTER_MFID_VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       'Reporting' as Stage,       count(MFID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       'Reporting' as Stage,       count([ORDER]) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'MASTER_TRD_ORDER_VG_13_ORDER_AGGREGATION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       'Reporting' as Stage,       count([ORDER]) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_13_ORDER_AGGREGATION_DMG_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       'Reporting' as Stage,       count([ORDER]) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'MASTER_VG_15_AMENDMENT_FLAG_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       'Reporting' as Stage,       count([ORDER]) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_VG_15_AMENDMENT_FLAG_DMG_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       'Reporting' as Stage,       count([ORDER]) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       'Reporting' as Stage,       count(TRANSACTION_NUMBER) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       'Reporting' as Stage,       count(TRANSACTION_NUMBER) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_RR_TABLE                IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       'Reporting' as Stage,       count(TRANSACTION_NUMBER) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       'Reporting' as Stage,       count(TRANSACTION_NUMBER) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       'Reporting' as Stage,       count(TRANSACTION_NUMBER) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       'Reporting' as Stage,       count(TRANSACTION_NUMBER) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       'Reporting' as Stage,       count(TRANSACTION_NUMBER) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE     SELECT  'MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       'Reporting' as Stage,       count(ORDER_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHE
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: DATA_COUNT_CHECKS_MG_MIGRATION_ALL_DAILY  CreateDate: 2025-06-26 17:34:39.140  ModifyDate: 2025-06-26 17:34:39.140  --- DEFINITION START ---  -- =============================================    -- Author:  <Miter, Matej>    -- Create date: <11/10/2021>    -- Description:     -- <INSTRUCTOR that orders trade must be different than dealer     -- otherwise exception will be raised>    -- =============================================        -- ***************VERSION CONTROL***************    --    -- *********************************************        CREATE PROCEDURE [dbo].[DATA_COUNT_CHECKS_MG_MIGRATION_ALL_DAILY]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;            -------------------------------Accumulation --------------------------------------------------    IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT 'PORTFOLIO' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(FUND) as Record_Count,       GETDATE() as CHECK_DATE     FROM VISTA_STAGING.dbo.PORTFOLIO     WHERE TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)             IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT  'COUNTERPARTIES' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(id) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_STAGING.dbo.COUNTERPARTIES     WHERE TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT  'NAV' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(id) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_STAGING.dbo.NAV      WHERE TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT  'ECONOMY' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(id) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_STAGING.dbo.ECONOMY     WHERE TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT  'PLACEMENTS' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(id) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.PLACEMENTS     WHERE TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT  'ORDERS' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(id) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.ORDERS     WHERE TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT  'TRADES' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(id) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.TRADES     WHERE TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT  'DEALER_AND_DESK' as Table_name,       '/' as Dealing_Desk,       'Accumulation Full' as Stage,       count(MG_USER_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.DEALER_AND_DESK                 IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT  'PORTFOLIO_GROUPS' as Table_name,       '/' as Dealing_Desk,       'Accumulation Updated' as Stage,       count(FUND) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.PORTFOLIO_GROUPS     WHERE TRY_CAST(UPDATED as date) = TRY_CAST(sysdatetime() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT  'INSTRUMENTS' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(DESC_INSTMT) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.INSTRUMENTS     WHERE TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT  'ISSUERS' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(ISSUER_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.ISSUERS     WHERE TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT  'QUOTES' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.QUOTES     WHERE TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT  'QUOTES_PLACEMENTS' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(PLACEMENT_NUM) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.QUOTES_PLACEMENTS     WHERE TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT  'ORDERS_CROSS' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(TRD_ORD) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.ORDERS_CROSS     WHERE TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT  'ORDERS_DETAIL' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(ORD_NUM) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.ORDERS_DETAIL     WHERE TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT  'RATINGS' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(CUSIP) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.RATINGS     WHERE TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT  'SECTORS' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(CUSIP) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.SECTORS     WHERE TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT  'REQUEST_LOOKUP' as Table_name,       '/' as Dealing_Desk,       'Accumulation Full' as Stage,       count(REQUEST_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.REQUEST_LOOKUP             IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT  'EMSX_ORDERS' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count([Order Number]) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.EMSX_ORDERS     WHERE TRY_CAST(TRUE_PULL_DATE as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT  'EMSX_ROUTES' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count([Order Number]) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.EMSX_ROUTES     WHERE TRY_CAST(TRUE_PULL_DATE as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT  'EXTERNAL_PRICING_TABLE' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(CUSIP) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.EXTERNAL_PRICING_TABLE     WHERE TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT  'FX_MAPPED_BANKS' as Table_name,       'FX' as Dealing_Desk,       'Accumulation' as Stage,       count(Trade_Id) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.FX_MAPPED_BANKS     WHERE TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT  'FX_LOSING_BANKS' as Table_name,       'FX' as Dealing_Desk,       'Accumulation' as Stage,       count(Trade_Id) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.FX_LOSING_BANKS     WHERE TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT  'FX_ORDERS' as Table_name,       'FX' as Dealing_Desk,       'Accumulation' as Stage,       count(FXM_ORDER_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.FX_ORDERS     WHERE TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT  'FX_TRADES' as Table_name,       'FX' as Dealing_Desk,       'Accumulation' as Stage,       count(Trade_Id) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.FX_TRADES     WHERE TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT  'Markit_ISReport' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count([Order ID]) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.Markit_ISReport     WHERE TRY_CAST(TRUE_PULL_DATE as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT  'Markit_ISReport_Refill' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count([Order ID]) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.Markit_ISReport_Refill     WHERE TRY_CAST(TRUE_PULL_DATE as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT  'Markit_OutsideHighLow' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count([Order ID]) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.Markit_OutsideHighLow     WHERE TRY_CAST(TRUE_PULL_DATE as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT  'PORTFOLIO_GROUPS_TREASURY' as Table_name,       '/' as Dealing_Desk,       'Accumulation' as Stage,       count(FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.PORTFOLIO_GROUPS_TREASURY     WHERE TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT  'CASH_BANK_RATES' as Table_name,       'Cash' as Dealing_Desk,       'Accumulatiom' as Stage,       count(TRANSACTION_NUMBER) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.CASH_BANK_RATES     WHERE TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT  'CASH_MAPPED_BANKS' as Table_name,       'Cash' as Dealing_Desk,       'Accumulatiom' as Stage,       count(TRANSACTION_NUMBER) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.CASH_MAPPED_BANKS     WHERE TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT  'CASH_ORDERS' as Table_name,       'Cash' as Dealing_Desk,       'Accumulatiom' as Stage,       count(ORDER_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.CASH_ORDERS     WHERE TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT  'CASH_REFERENCE_RATES' as Table_name,       'Cash' as Dealing_Desk,       'Accumulatiom' as Stage,       count(TRANSACTION_NUMBER) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.CASH_REFERENCE_RATES     WHERE TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.DATA_COUNT_CHECKS_MG_MIGRATION_ALL_TABLE_DAILY     SELECT  'CASH_TRADES' as Table_name,       'Cash' as Dealing_Desk,       'Accumulatiom' as Stage,       count(TRANSACTION_NUMBER) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.CASH_TRADES     WHERE TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)            END            --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: DATETIME_CONVERSION_PROCEDURE  CreateDate: 2025-06-26 17:34:57.440  ModifyDate: 2025-06-26 17:34:57.440  --- DEFINITION START ---  -- =============================================    -- Author:  <???>    -- Create date: <???>    -- Description: <Script to convert all NULL datetime and date    --    values to a default value of '1900-01-01 00:00:00' for datetime    --    and '1900-01-01' for date.>    -- =============================================        -- ***************VERSION CONTROL***************    -- 09/05/2019 - MS: Added in tables for DMG.        --2022-03-03, Matej Miter; Created for Jira:    --SURVG-563 - New Fx/Cash Report Instructor to dealer 2022    -- *********************************************        CREATE PROCEDURE [dbo].[DATETIME_CONVERSION_PROCEDURE]        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;             ----MASTER_AMENDMENT_FLAG_TABLE     --UPDATE VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE     --SET EXECUTION_TIME = '1900-01-01 00:00:00'     --WHERE EXECUTION_TIME IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE     --SET AMENDMENT_FLAG_CREATETIME = '1900-01-01 00:00:00'     --WHERE AMENDMENT_FLAG_CREATETIME IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE     --SET TRD_ENTRY_TIME = '1900-01-01 00:00:00'     --WHERE TRD_ENTRY_TIME IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE     --SET [Settlement Date] = '1900-01-01 00:00:00'     --WHERE [Settlement Date] IS NULL          --UPDATE VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE     --SET RELEASE_DATETIME = '1900-01-01 00:00:00'     --WHERE RELEASE_DATETIME IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE     --SET ACTIVE_TIME = '1900-01-01 00:00:00'     --WHERE ACTIVE_TIME IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE     --SET AUTH_TIME = '1900-01-01 00:00:00'     --WHERE AUTH_TIME IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE     --SET TRD_AUTH_TIME = '1900-01-01 00:00:00'     --WHERE TRD_AUTH_TIME IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE     --SET TRD_MODIFY_TIME = '1900-01-01 00:00:00'     --WHERE TRD_MODIFY_TIME IS NULL             ----MASTER_CLIENT_EXECUTION_TABLE     --UPDATE VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE     --SET VG_06_CREATETIME = '1900-01-01 00:00:00'     --WHERE VG_06_CREATETIME IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE     --SET VG_08_CREATETIME = '1900-01-01 00:00:00'     --WHERE VG_08_CREATETIME IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE     --SET Approved_DateTime = '1900-01-01 00:00:00'     --WHERE Approved_DateTime IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE     --SET Execution_Date = '1900-01-01 00:00:00'     --WHERE Execution_Date IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE     --SET Auth_Time = '1900-01-01 00:00:00'     --WHERE Auth_Time IS NULL             ----MASTER_MULTI_FUND_ID_TABLE     --UPDATE VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE     --SET VG_01_3QO_CREATETIME = '1900-01-01 00:00:00'     --WHERE VG_01_3QO_CREATETIME IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE     --SET VG_01_3QR_CREATETIME = '1900-01-01 00:00:00'     --WHERE VG_01_3QR_CREATETIME IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE     --SET VG_01_CREATETIME = '1900-01-01 00:00:00'     --WHERE VG_01_CREATETIME IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE     --SET VG_07_CREATETIME = '1900-01-01 00:00:00'     --WHERE VG_07_CREATETIME IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE     --SET VG_10_CREATETIME = '1900-01-01 00:00:00'     --WHERE VG_10_CREATETIME IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE     --SET VG_10_NAV_CREATETIME = '1900-01-01 00:00:00'     --WHERE VG_10_NAV_CREATETIME IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE     --SET VG_25_CREATETIME = '1900-01-01 00:00:00'     --WHERE VG_25_CREATETIME IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE     --SET TRD_ENTRY_TIME = '1900-01-01 00:00:00'     --WHERE TRD_ENTRY_TIME IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE     --SET ACTIVE_TIME = '1900-01-01 00:00:00'     --WHERE ACTIVE_TIME IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE     --SET AUTH_TIME = '1900-01-01 00:00:00'     --WHERE AUTH_TIME IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE     --SET RELEASE_DATETIME = '1900-01-01 00:00:00'     --WHERE RELEASE_DATETIME IS NULL             ----IMPLEMENTATION_SHORTFALL_EQ     --UPDATE VISTA_REPORTING.dbo.IMPLEMENTATION_SHORTFALL_EQ     --SET IM_CREATEDATE = '1900-01-01 00:00:00'     --WHERE IM_CREATEDATE IS NULL         --UPDATE VISTA_REPORTING.dbo.IMPLEMENTATION_SHORTFALL_EQ     --SET AUTH_TIME = '1900-01-01 00:00:00'     --WHERE AUTH_TIME IS NULL             ----MASTER_TRD_ORDER_TABLE     --UPDATE VISTA_REPORTING.dbo.MASTER_TRD_ORDER_TABLE     --SET [Trade Date] = '1900-01-01'     --WHERE [Trade Date] IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_TRD_ORDER_TABLE     --SET [Exec Date] = '1900-01-01 00:00:00'     --WHERE [Exec Date] IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_TRD_ORDER_TABLE     --SET [Auth Time] = '1900-01-01 00:00:00'     --WHERE [Auth Time] IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_TRD_ORDER_TABLE     --SET [Active Time] = '1900-01-01 00:00:00'     --WHERE [Active Time] IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_TRD_ORDER_TABLE     --SET [Entry Date] = '1900-01-01 00:00:00'     --WHERE [Entry Date] IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_TRD_ORDER_TABLE     --SET VG_13_CREATETIME = '1900-01-01 00:00:00'     --WHERE VG_13_CREATETIME IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_TRD_ORDER_TABLE     --SET VG_14_CREATETIME = '1900-01-01 00:00:00'     --WHERE VG_14_CREATETIME IS NULL         ----MASTER_ORDER_PRIORITY_TABLE     --UPDATE VISTA_REPORTING.dbo.MASTER_ORDER_PRIORITY_TABLE     --SET VG_13_CREATETIME = '1900-01-01 00:00:00'     --WHERE VG_13_CREATETIME IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_ORDER_PRIORITY_TABLE     --SET VG_14_CREATETIME = '1900-01-01 00:00:00'     --WHERE VG_14_CREATETIME IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_ORDER_PRIORITY_TABLE     --SET [Auth Time] = '1900-01-01 00:00:00'     --WHERE [Auth Time] IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_ORDER_PRIORITY_TABLE     --SET [Active Time] = '1900-01-01 00:00:00'     --WHERE [Active Time] IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_ORDER_PRIORITY_TABLE     --SET [Trade Date] = '1900-01-01'     --WHERE [Trade Date] IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_ORDER_PRIORITY_TABLE     --SET [Send Date] = '1900-01-01 00:00:00'     --WHERE [Send Date] IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_ORDER_PRIORITY_TABLE     --SET [Exec Date] = '1900-01-01 00:00:00'     --WHERE [Exec Date] IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_ORDER_PRIORITY_TABLE     --SET [Entry Date] = '1900-01-01 00:00:00'     --WHERE [Entry Date] IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_ORDER_PRIORITY_TABLE     --SET [Maturity Date] = '1900-01-01'     --WHERE [Maturity Date] IS NULL             ----MASTER_PM_ORDER_TABLE     --UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER     --SET VG_09_POLICY_CREATETIME = '1900-01-01 00:00:00'     --WHERE VG_09_POLICY_CREATETIME IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER     --SET VG_09_5_DAY_CREATETIME = '1900-01-01 00:00:00'     --WHERE VG_09_5_DAY_CREATETIME IS NULL          --UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER     --SET VG_09_10_DAY_CREATETIME = '1900-01-01 00:00:00'     --WHERE VG_09_10_DAY_CREATETIME IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER     --SET VG_09_20_DAY_CREATETIME = '1900-01-01 00:00:00'     --WHERE VG_09_20_DAY_CREATETIME IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER     --SET VG_09_40_DAY_CREATETIME = '1900-01-01 00:00:00'     --WHERE VG_09_40_DAY_CREATETIME IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER     --SET VG_09_80_DAY_CREATETIME = '1900-01-01 00:00:00'     --WHERE VG_09_80_DAY_CREATETIME IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER     --SET VG_09_160_DAY_CREATETIME = '1900-01-01 00:00:00'   --WHERE VG_09_160_DAY_CREATETIME IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER     --SET VG_11_CREATETIME = '1900-01-01 00:00:00'     --WHERE VG_11_CREATETIME IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER     --SET [Active Date] = '1900-01-01 00:00:00'     --WHERE [Active Date] IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER     --SET [First Execution] = '1900-01-01 00:00:00'     --WHERE [First Execution] IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER     --SET AUTH_TIME = '1900-01-01 00:00:00'     --WHERE AUTH_TIME IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER     --SET MIN_RELEASE_DATETIME = '1900-01-01 00:00:00'     --WHERE MIN_RELEASE_DATETIME IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER     --SET [Reversion Time] = '1900-01-01 00:00:00'     --WHERE [Reversion Time] IS NULL         --UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER     --SET [Last Execution] = '1900-01-01 00:00:00'     --WHERE [Last Execution] IS NULL             --AUDIT_TABLE     UPDATE VISTA_REPORTING.dbo.AUDIT_TABLE     SET CREATE_TIME = '1900-01-01 00:00:00'     WHERE CREATE_TIME IS NULL         UPDATE VISTA_REPORTING.dbo.AUDIT_TABLE     SET UPDATE_TIME = '1900-01-01 00:00:00'     WHERE UPDATE_TIME IS NULL         UPDATE VISTA_REPORTING.dbo.AUDIT_TABLE     SET ORD_AUTH = '1900-01-01 00:00:00'     WHERE ORD_AUTH IS NULL         UPDATE VISTA_REPORTING.dbo.AUDIT_TABLE     SET TRADE_EXEC = '1900-01-01 00:00:00'     WHERE TRADE_EXEC IS NULL         --DMG MASTER TABLES         --MASTER QUOTE EXCEPTION TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_01_QUOTE_EXCEPTION_DMG_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_01_QUOTE_EXCEPTION_DMG_TABLE     SET TRADE_DATE = '1900-01-01'     WHERE TRADE_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_01_QUOTE_EXCEPTION_DMG_TABLE     SET EXEC_DATE = '1900-01-01 00:00:00'     WHERE EXEC_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_01_QUOTE_EXCEPTION_DMG_TABLE     SET ENTRY_DATE = '1900-01-01 00:00:00'     WHERE ENTRY_DATE IS NULL         --MASTER NWQ TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_07_NON_WINNING_QUOTE_DMG_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_07_NON_WINNING_QUOTE_DMG_TABLE     SET TRADE_DATE = '1900-01-01'     WHERE TRADE_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_07_NON_WINNING_QUOTE_DMG_TABLE     SET EXEC_DATE = '1900-01-01 00:00:00'     WHERE EXEC_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_07_NON_WINNING_QUOTE_DMG_TABLE     SET ENTRY_DATE = '1900-01-01 00:00:00'     WHERE ENTRY_DATE IS NULL         --MASTER TIMELY RECORDING TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_DMG_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_DMG_TABLE     SET TRADE_DATE = '1900-01-01'     WHERE TRADE_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_DMG_TABLE     SET EXEC_DATE = '1900-01-01 00:00:00'     WHERE EXEC_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_DMG_TABLE     SET ENTRY_DATE = '1900-01-01 00:00:00'     WHERE ENTRY_DATE IS NULL         --MASTER GIFTS & HOSPITALITY TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE     SET TRADE_DATE = '1900-01-01'     WHERE TRADE_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE     SET EXEC_DATE = '1900-01-01 00:00:00'     WHERE EXEC_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE     SET ENTRY_DATE = '1900-01-01 00:00:00'     WHERE ENTRY_DATE IS NULL         --MASTER INTERFUND TRANSFER TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_25_INTERFUND_TRANSFER_DMG_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_25_INTERFUND_TRANSFER_DMG_TABLE     SET TRADE_DATE = '1900-01-01'     WHERE TRADE_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_25_INTERFUND_TRANSFER_DMG_TABLE     SET EXEC_DATE = '1900-01-01 00:00:00'     WHERE EXEC_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_25_INTERFUND_TRANSFER_DMG_TABLE     SET ENTRY_DATE = '1900-01-01 00:00:00'     WHERE ENTRY_DATE IS NULL         --MASTER TRADES WITHOUT ORDERS TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE     SET TRADE_DATE = '1900-01-01'     WHERE TRADE_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE     SET EXEC_DATE = '1900-01-01 00:00:00'     WHERE EXEC_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE     SET ENTRY_DATE = '1900-01-01 00:00:00'     WHERE ENTRY_DATE IS NULL         --MASTER TIMELY EXECUTION TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE     SET ACTIVE_DATE = '1900-01-01 00:00:00'     WHERE ACTIVE_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE     SET TRADE_DATE = '1900-01-01'     WHERE TRADE_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE     SET EXEC_DATE = '1900-01-01 00:00:00'     WHERE EXEC_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE     SET ENTRY_DATE = '1900-01-01 00:00:00'     WHERE ENTRY_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE     SET FIRST_EXECUTION = '1900-01-01 00:00:00'     WHERE FIRST_EXECUTION IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE     SET LAST_EXECUTION = '1900-01-01 00:00:00'     WHERE LAST_EXECUTION IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE     SET AUTH_TIME = '1900-01-01 00:00:00'     WHERE AUTH_TIME IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE     SET SEND_DATE = '1900-01-01 00:00:00'     WHERE SEND_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE     SET REVERSION_TIME = '1900-01-01 00:00:00'     WHERE REVERSION_TIME IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE     SET VG_09_10_DAY_CREATETIME = '1900-01-01 00:00:00'     WHERE VG_09_10_DAY_CREATETIME IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE     SET VG_09_160_DAY_CREATETIME = '1900-01-01 00:00:00'     WHERE VG_09_160_DAY_CREATETIME IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE     SET VG_09_20_DAY_CREATETIME = '1900-01-01 00:00:00'     WHERE VG_09_20_DAY_CREATETIME IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE     SET VG_09_40_DAY_CREATETIME = '1900-01-01 00:00:00'     WHERE VG_09_40_DAY_CREATETIME IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE     SET VG_09_5_DAY_CREATETIME = '1900-01-01 00:00:00'     WHERE VG_09_5_DAY_CREATETIME IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE     SET VG_09_80_DAY_CREATETIME = '1900-01-01 00:00:00'     WHERE VG_09_80_DAY_CREATETIME IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE     SET VG_09_POLICY_CREATETIME = '1900-01-01 00:00:00'     WHERE VG_09_POLICY_CREATETIME IS NULL         --MASTER COUNTERPARTY DIRECTION TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE     SET [TRADE_DATE] = '1900-01-01'     WHERE [TRADE_DATE] IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE     SET [ENTRY_DATE] = '1900-01-01 00:00:00'     WHERE [ENTRY_DATE] IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE     SET [EXEC_DATE] = '1900-01-01 00:00:00'     WHERE [EXEC_DATE] IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE     SET [ACTIVE_TIME] = '1900-01-01 00:00:00'     WHERE [ACTIVE_TIME] IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE     SET MATURITY_DATE = '1900-01-01 00:00:00'     WHERE MATURITY_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE     SET SETTLEMENT_DATE = '1900-01-01'     WHERE SETTLEMENT_DATE IS NULL         --MASTER ORDER AGGREGATION TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_13_ORDER_AGGREGATION_DMG_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_13_ORDER_AGGREGATION_DMG_TABLE     SET AUTH_TIME = '1900-01-01 00:00:00'     WHERE AUTH_TIME IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_13_ORDER_AGGREGATION_DMG_TABLE     SET TRADE_DATE = '1900-01-01'     WHERE TRADE_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_13_ORDER_AGGREGATION_DMG_TABLE     SET ACTIVE_TIME = '1900-01-01 00:00:00'     WHERE ACTIVE_TIME IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_13_ORDER_AGGREGATION_DMG_TABLE     SET ENTRY_DATE = '1900-01-01 00:00:00'     WHERE ENTRY_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_13_ORDER_AGGREGATION_DMG_TABLE     SET EXEC_DATE = '1900-01-01 00:00:00'     WHERE EXEC_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_13_ORDER_AGGREGATION_DMG_TABLE     SET SEND_DATE = '1900-01-01 00:00:00'     WHERE SEND_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_13_ORDER_AGGREGATION_DMG_TABLE     SET MATURITY_DATE = '1900-01-01'     WHERE MATURITY_DATE IS NULL         --MASTER ORDER PRIORITY TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE     SET [AUTH_TIME] = '1900-01-01 00:00:00'     WHERE [AUTH_TIME] IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE     SET [TRADE_DATE] = '1900-01-01'     WHERE [TRADE_DATE] IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE     SET [ACTIVE_TIME] = '1900-01-01 00:00:00'     WHERE [ACTIVE_TIME] IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE     SET [ENTRY_DATE] = '1900-01-01 00:00:00'     WHERE [ENTRY_DATE] IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE     SET [EXEC_DATE] = '1900-01-01 00:00:00'     WHERE [EXEC_DATE] IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE     SET [SEND_DATE] = '1900-01-01 00:00:00'     WHERE [SEND_DATE] IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE     SET MATURITY_DATE = '1900-01-01'     WHERE MATURITY_DATE IS NULL         --MASTER AMENDMENT FLAG TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_VG_15_AMENDMENT_FLAG_DMG_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_VG_15_AMENDMENT_FLAG_DMG_TABLE     SET MODIFIED_TIME = '1900-01-01 00:00:00'     WHERE MODIFIED_TIME IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_VG_15_AMENDMENT_FLAG_DMG_TABLE     SET EXEC_DATE = '1900-01-01 00:00:00'     WHERE EXEC_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_VG_15_AMENDMENT_FLAG_DMG_TABLE     SET ENTRY_DATE = '1900-01-01 00:00:00'     WHERE ENTRY_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_VG_15_AMENDMENT_FLAG_DMG_TABLE     SET SETTLEMENT_DATE = '1900-01-01 00:00:00'     WHERE SETTLEMENT_DATE IS NULL         --AUDIT_TABLE_DMG     UPDATE VISTA_REPORTING.dbo.AUDIT_TABLE_DMG     SET CREATE_TIME = '1900-01-01 00:00:00'     WHERE CREATE_TIME IS NULL         UPDATE VISTA_REPORTING.dbo.AUDIT_TABLE_DMG     SET UPDATE_TIME = '1900-01-01 00:00:00'     WHERE UPDATE_TIME IS NULL         UPDATE VISTA_REPORTING.dbo.AUDIT_TABLE_DMG     SET ORD_AUTH = '1900-01-01 00:00:00'     WHERE ORD_AUTH IS NULL         UPDATE VISTA_REPORTING.dbo.AUDIT_TABLE_DMG     SET TRADE_EXEC = '1900-01-01 00:00:00'     WHERE TRADE_EXEC IS NULL         --CASH TABLES         --MASTER TIMELY RECORDING TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_RR_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         --MASTER GIFTS & HOSPITALITY TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         --MASTER BEST EXECUTION TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         ---SURVG-563----------------------------------------------------     --MASTER INSTRUCTOR TO DEALER TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL     ------End of SURVG-563---------------------------------------------------         --MASTER TA KNOCKBACK TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_608_TA_KNOCKBACK_CASH_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         --MASTER DEPOSITS REFERENCE RATE TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         --MASTER TBILLS, CP, CD TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         --MASTER TIMELY EXECUTION TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_RR_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         --MASTER COUNTERPARTY DIRECTION TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         --MASTER OUT OF HOURS TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_CASH_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         --MASTER EOD HOLDOVERS TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_CASH_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         --MASTER LARGE TRADES TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_CASH_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         --MASTER COH TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         --MASTER ORDER AGGREGATION TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_MM_TABLE     SET VG_611_CREATETIME = '1900-01-01 00:00:00'     WHERE VG_611_CREATETIME IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_RR_TABLE     SET VG_611_CREATETIME = '1900-01-01 00:00:00'     WHERE VG_611_CREATETIME IS NULL         --MASTER ORDER ALLOCATION TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_MM_TABLE     SET VG_612_CREATETIME = '01/01/1900 00:00:00.000'     WHERE VG_612_CREATETIME IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_RR_TABLE     SET VG_612_CREATETIME = '1900-01-01 00:00:00'     WHERE VG_612_CREATETIME IS NULL             --AUDIT_TABLE_CASH     UPDATE VISTA_REPORTING.dbo.AUDIT_TABLE_CASH     SET CREATE_TIME = '1900-01-01 00:00:00'     WHERE CREATE_TIME IS NULL         UPDATE VISTA_REPORTING.dbo.AUDIT_TABLE_CASH     SET UPDATE_TIME = '1900-01-01 00:00:00'     WHERE UPDATE_TIME IS NULL         UPDATE VISTA_REPORTING.dbo.AUDIT_TABLE_CASH     SET ORD_AUTH = '1900-01-01 00:00:00'     WHERE ORD_AUTH IS NULL         UPDATE VISTA_REPORTING.dbo.AUDIT_TABLE_CASH     SET TRADE_EXEC = '1900-01-01 00:00:00'     WHERE TRADE_EXEC IS NULL             --FX TABLES         --MASTER SPOT REFERENCE RATE TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         --MASTER GIFTS & HOSPITALITY TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         --MASTER COUNTERPARTY DIRECTION TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_FX_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         --MASTER BEST EXECUTION TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         ---SURVG-563----------------------------------------------------          --MASTER INSTRUCTOR TO DEALER TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         ----End of SURVG-563------------------------------------------------------------      --MASTER TA KNOCKBACK TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE     SET AUTHORISED_DATE_TIME = '01/01/1900 00:00:00.000'     WHERE AUTHORISED_DATE_TIME IS NULL             --MASTER TIMELY EXECUTION TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE     SET AUTHORISED_DATE_TIME = '01/01/1900 00:00:00.000'     WHERE AUTHORISED_DATE_TIME IS NULL             --MASTER DEALER LIMIT TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE     SET AUTHORISED_DATE_TIME = '01/01/1900 00:00:00.000'     WHERE AUTHORISED_DATE_TIME IS NULL             --MASTER OUT OF HOURS TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE     SET AUTHORISED_DATE_TIME = '01/01/1900 00:00:00.000'     WHERE AUTHORISED_DATE_TIME IS NULL             --MASTER EOD HOLDOVERS TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE     SET AUTHORISED_DATE_TIME = '01/01/1900 00:00:00.000'     WHERE AUTHORISED_DATE_TIME IS NULL             --MASTER LARGE TRADES TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE     SET AUTHORISED_DATE_TIME = '01/01/1900 00:00:00.000'     WHERE AUTHORISED_DATE_TIME IS NULL             --MASTER COH TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE     SET AUTHORISED_DATE_TIME = '01/01/1900 00:00:00.000'     WHERE AUTHORISED_DATE_TIME IS NULL             --MASTER TIMELY RECORDING TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE     SET CREATE_DATE = '1900-01-01 00:00:00'     WHERE CREATE_DATE IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE     SET AUTHORISED_DATE_TIME = '01/01/1900 00:00:00.000'     WHERE AUTHORISED_DATE_TIME IS NULL             --MASTER ORDER AGGREGATION TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_FX_TABLE     SET VG_611_CREATETIME = '1900-01-01 00:00:00'     WHERE VG_611_CREATETIME IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_FX_TABLE     SET AUTHORISED_DATE_TIME = '01/01/1900 00:00:00.000'     WHERE AUTHORISED_DATE_TIME IS NULL             --MASTER ORDER ALLOCATION TABLE     UPDATE VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_FX_TABLE     SET VG_612_CREATETIME = '1900-01-01 00:00:00'     WHERE VG_612_CREATETIME IS NULL         UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_FX_TABLE     SET AUTHORISED_DATE_TIME = '01/01/1900 00:00:00.000'     WHERE AUTHORISED_DATE_TIME IS NULL             --AUDIT_TABLE_FX     UPDATE VISTA_REPORTING.dbo.AUDIT_TABLE_FX     SET CREATE_TIME = '1900-01-01 00:00:00'     WHERE CREATE_TIME IS NULL         UPDATE VISTA_REPORTING.dbo.AUDIT_TABLE_FX     SET UPDATE_TIME = '1900-01-01 00:00:00'     WHERE UPDATE_TIME IS NULL         UPDATE VISTA_REPORTING.dbo.AUDIT_TABLE_FX     SET ORD_AUTH = '1900-01-01 00:00:00'     WHERE ORD_AUTH IS NULL         UPDATE VISTA_REPORTING.dbo.AUDIT_TABLE_FX     SET TRADE_EXEC = '1900-01-01 00:00:00'     WHERE TRADE_EXEC IS NULL        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: DEALER_AND_DESK_REFRESH  CreateDate: 2025-06-26 17:35:13.310  ModifyDate: 2025-06-26 17:35:13.310  --- DEFINITION START ---      CREATE PROCEDURE [dbo].[DEALER_AND_DESK_REFRESH]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         /****** Script for SelectTopNRows command from SSMS  ******/     IF OBJECT_ID('tempdb..#latest_dealers', 'U') IS NOT NULL DROP TABLE #latest_dealers         SELECT DISTINCT d.[ALADDIN_USER_ID]          ,d.[MG_USER_ID]          ,d.[FULL_NAME]          ,REPLACE(d.DEALING_DESK, 'Equities', 'Equity') as DEALING_DESK          ,d.[INITIALS]          ,d.[Updated]       INTO #latest_dealers       FROM [VISTA_STAGING].[dbo].[DEALER_AND_DESK] as d       LEFT JOIN (       SELECT FULL_NAME, MAX(Updated) as LATEST_UPDATE       FROM [VISTA_STAGING].[dbo].[DEALER_AND_DESK]       GROUP BY FULL_NAME      ) as l       ON l.FULL_NAME = d.FULL_NAME       WHERE d.Updated = l.LATEST_UPDATE           IF OBJECT_ID('[VISTA_REPORTING].[dbo].[DEALER_AND_DESK]', 'U') IS NOT NULL DROP TABLE [VISTA_REPORTING].[dbo].[DEALER_AND_DESK]           SELECT *        INTO [VISTA_REPORTING].[dbo].[DEALER_AND_DESK]       FROM #latest_dealers       WHERE NOT(INITIALS = 'SXB' AND DEALING_DESK = 'Leveraged Finance')       UNION        SELECT 'p9lmould ','P22432571 ','Laura Mould','Equity','LM1','2018-05-09 12:16:46.467' -- add in a dummy record for Laura Mould's old initials       UNION       SELECT 'p9daniri ','richesd ','Daniel Riches','Equity','DRR','2018-05-09 12:16:46.467' -- add in a dummy record for Dan Riches' old initials       UNION       SELECT ' ',' ','Will Hayes','Fixed Income','WXH','2018-05-09 12:16:46.467' -- add in a dummy record for Will Hayes              DELETE FROM [VISTA_STAGING].[dbo].[DEALER_AND_DESK]           INSERT INTO [VISTA_STAGING].[dbo].[DEALER_AND_DESK]       SELECT * FROM #latest_dealers         IF OBJECT_ID('tempdb..#latest_dealers', 'U') IS NOT NULL DROP TABLE #latest_dealers        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: DEALER_RISK  CreateDate: 2025-06-26 17:35:27.970  ModifyDate: 2025-06-26 17:35:27.970  --- DEFINITION START ---  -- =============================================    -- Author:  <Author,,Name>    -- Create date: <Create Date,,>    -- Description: <Description,,>    -- =============================================    CREATE PROCEDURE [dbo].[DEALER_RISK]        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;            -- Insert statements for procedure here    IF OBJECT_ID('VISTA_REPORTING.DBO.DEALER_RISK_SCORE', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.DBO.DEALER_RISK_SCORE    SELECT * INTO VISTA_REPORTING.DBO.DEALER_RISK_SCORE    FROM VISTA_STAGING.DBO.DEALER_RISK_SCORE    END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: DUMMY_VG_607_BEST_EXECUTION_FX  CreateDate: 2025-06-26 17:35:42.293  ModifyDate: 2025-06-26 17:35:42.293  --- DEFINITION START ---  -- =============================================    -- Author:  <Samad, Mehreen>    -- Create date: <01/07/2019>    -- Description:     -- <Details all trades highlighting exceptions    -- breaching the best execution policy NWQ &     -- B3Q exception tests. SRR exceptions are     -- view only for MI. SRR EXCEPTION LOGIC ALSO INCLUDED HERE>    -- =============================================        -- ***************VERSION CONTROL***************    --2021-10-20, Matej Miter created for Jira:    --T-0-18074 - Added additionasl join to losing bank in order to capture Profit or loss from losing banks into NWQ calculations    -- *********************************************        CREATE PROCEDURE [dbo].[DUMMY_VG_607_BEST_EXECUTION_FX]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        --Counting No of Quotes for FX    IF OBJECT_ID('tempdb..#countquotes_fx', 'U') IS NOT NULL DROP TABLE #countquotes_fx    SELECT DISTINCT     fxt.[TRADE_ID],     fxt.[LOSING_BANK_COUNT],     fxt.[EXECUTED_BANK],     ([LOSING_BANK_COUNT] + COUNT(DISTINCT EXECUTED_BANK) ) as NO_OF_QUOTES    INTO #countquotes_fx    FROM VISTA_REPORTING.dbo.FX_TRADES fxt    GROUP BY fxt.[TRADE_ID],       fxt.[LOSING_BANK_COUNT],       fxt.[EXECUTED_BANK]        --Calculate the quote counterparties associated to the min(abs(quote value))    IF OBJECT_ID('tempdb..#min_abs_broker', 'U') IS NOT NULL DROP TABLE #min_abs_broker    SELECT      q.[MULTI_FUND_ID],     q.[QUOTE_VALUE],     cp.[BROKER_TICKER] AS MIN_ABS_BROKER,     cp.[COUNTERPARTY_CODE],     q2.[MIN_QUOTE]    INTO #min_abs_broker    FROM VISTA_REPORTING.dbo.QUOTES q    LEFT JOIN (SELECT DISTINCT         [BROKER_TICKER],         [COUNTERPARTY_CODE]          FROM VISTA_REPORTING.dbo.COUNTERPARTIES) cp    on q.[BROKER] = cp.[COUNTERPARTY_CODE]    inner join (SELECT         [MULTI_FUND_ID],                     MIN(NULLIF([QUOTE_VALUE],0)) AS MIN_QUOTE                FROM VISTA_REPORTING.dbo.QUOTES       WHERE QUOTE_ORIGIN = 'QUOTE'                GROUP BY [MULTI_FUND_ID]) q2    on q.[MULTI_FUND_ID] = q2.[MULTI_FUND_ID] AND ABS(q.[QUOTE_VALUE]) = q2.[MIN_QUOTE]    where q.QUOTE_ORIGIN = 'QUOTE'        --Calculate the quote counterparties associated to the max(abs(quote value))    IF OBJECT_ID('tempdb..#max_abs_broker', 'U') IS NOT NULL DROP TABLE #max_abs_broker    SELECT      q.[MULTI_FUND_ID],     q.[QUOTE_VALUE],     cp.[BROKER_TICKER] AS MAX_ABS_BROKER,     cp.[COUNTERPARTY_CODE],     q2.[MAX_QUOTE]    INTO #max_abs_broker    FROM VISTA_REPORTING.dbo.QUOTES q    LEFT JOIN (SELECT DISTINCT         [BROKER_TICKER],         [COUNTERPARTY_CODE]          FROM VISTA_REPORTING.dbo.COUNTERPARTIES) cp    on q.[BROKER] = cp.[COUNTERPARTY_CODE]    inner join (SELECT         [MULTI_FUND_ID],                     MAX(NULLIF([QUOTE_VALUE],0)) AS MAX_QUOTE                FROM VISTA_REPORTING.dbo.QUOTES       WHERE QUOTE_ORIGIN = 'QUOTE'                GROUP BY [MULTI_FUND_ID]) q2    on q.[MULTI_FUND_ID] = q2.[MULTI_FUND_ID] AND ABS(q.[QUOTE_VALUE]) = q2.[MAX_QUOTE]    where q.QUOTE_ORIGIN = 'QUOTE'        --Obtain Quotes Requested and Quotes Obtained for Aladdin    IF OBJECT_ID('tempdb..#quotes_calc_al', 'U') IS NOT NULL DROP TABLE #quotes_calc_al    SELECT DISTINCT      q.[MULTI_FUND_ID],     (SELECT       COUNT(DISTINCT [BROKER])       FROM VISTA_REPORTING.dbo.QUOTES      WHERE ISNULL(QUOTE_VALUE, 0) != 0         AND MULTI_FUND_ID = q.[MULTI_FUND_ID]) as QUOTES_OBTAINED, --Count distinct BROKER where QUOTE_VALUE is NOT NULL or 0     COUNT(DISTINCT [BROKER]) as QUOTES_REQUESTED --A quote is required for every MULTI_FUND_ID    INTO #quotes_calc_al    FROM VISTA_REPORTING.dbo.QUOTES q    GROUP BY q.[MULTI_FUND_ID]        --Calculating Spot difference and threshold exceptions    IF OBJECT_ID('tempdb..#spot_diff', 'U') IS NOT NULL DROP TABLE #spot_diff    SELECT DISTINCT      fxt.[TRADE_ID],     fxt.[SPOT_RATE],     fxt.[SPOT_RATE_FAR],     fxt.[MARKET_ARRIVAL_INDICATIVE_SPOT_FAR_PRICE],     fxt.[MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE],     fxt.[BUY_CCY],     fxt.[BUY_CCY_LEG2],     fxt.[SELL_CCY],     fxt.[SELL_CCY_LEG2],     fxt.[BASE_CCY],     fxt.[CONTRA_CCY],     fxt.[NOTIONAL_CCY] as INSTRUCTED_CCY,     fxt.[ACTION1],     fxt.[ACTION2],     ref_spotn.[SPOT_TOLERANCE_THRESHOLD],     ref_spotf.[SPOT_TOLERANCE_THRESHOLD] as SPOT_TOLERANCE_THRESHOLD_LEG2,     CASE      WHEN fxt.[NOTIONAL_CCY]  = fxt.[BASE_CCY] AND fxt.[NOTIONAL_AMOUNT_FAR] IS NOT NULL AND fxt.[NOTIONAL_AMOUNT]  > fxt.[NOTIONAL_AMOUNT_FAR] THEN ACTION1       WHEN fxt.[NOTIONAL_CCY]  = fxt.[BASE_CCY] AND fxt.[NOTIONAL_AMOUNT_FAR] IS NOT NULL AND fxt.[NOTIONAL_AMOUNT]  = fxt.[NOTIONAL_AMOUNT_FAR] THEN 'SELL' --Change request received on 20082019 (prior to go-live)      WHEN fxt.[NOTIONAL_CCY]  = fxt.[BASE_CCY] AND fxt.[NOTIONAL_AMOUNT_FAR] IS NOT NULL AND fxt.[NOTIONAL_AMOUNT]  < fxt.[NOTIONAL_AMOUNT_FAR] THEN ACTION2      WHEN fxt.[NOTIONAL_CCY] != fxt.[BASE_CCY] AND fxt.[NOTIONAL_AMOUNT_FAR] IS NOT NULL AND fxt.[NOTIONAL_AMOUNT]  < fxt.[NOTIONAL_AMOUNT_FAR] THEN ACTION1      WHEN fxt.[NOTIONAL_CCY] != fxt.[BASE_CCY] AND fxt.[NOTIONAL_AMOUNT_FAR] IS NOT NULL AND fxt.[NOTIONAL_AMOUNT]  = fxt.[NOTIONAL_AMOUNT_FAR] THEN 'BUY'--Change request received on 20082019 (prior to go-live)      WHEN fxt.[NOTIONAL_CCY] != fxt.[BASE_CCY] AND fxt.[NOTIONAL_AMOUNT_FAR] IS NOT NULL AND fxt.[NOTIONAL_AMOUNT]  > fxt.[NOTIONAL_AMOUNT_FAR] THEN ACTION2     ELSE NULL     END AS DEALT_SIDE_SWAP,     100.0*(fxt.[MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE] - fxt.[SPOT_RATE])/NULLIF(fxt.[MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE],0) as SPOT_DIFFERENCE_NEAR,     100.0*(fxt.[MARKET_ARRIVAL_INDICATIVE_SPOT_FAR_PRICE]  - fxt.[SPOT_RATE_FAR])/NULLIF(fxt.[MARKET_ARRIVAL_INDICATIVE_SPOT_FAR_PRICE],0) as SPOT_DIFFERENCE_FAR    INTO #spot_diff    FROM VISTA_REPORTING.dbo.FX_TRADES fxt    left join VISTA_STAGING.DBO.REF_FX_SPOT_TOLERANCE_THRESHOLD ref_spotn    on fxt.[BUY_CCY] = ref_spotn.[BASE_CCY] and fxt.[SELL_CCY] = ref_spotn.[CONTRA_CCY]     AND CAST(fxt.[PULL_DATE] AS DATE) BETWEEN CAST(ref_spotn.[DATE_FROM] AS DATE) AND CAST(ref_spotn.[DATE_TO] AS DATE)    left join VISTA_STAGING.DBO.REF_FX_SPOT_TOLERANCE_THRESHOLD ref_spotf     on fxt.[BUY_CCY_LEG2] = ref_spotf.[BASE_CCY] AND fxt.[SELL_CCY_LEG2] = ref_spotf.[CONTRA_CCY]     AND CAST(fxt.[PULL_DATE] AS DATE) BETWEEN CAST(ref_spotf.[DATE_FROM] AS DATE) AND CAST(ref_spotf.[DATE_TO] AS DATE)        IF OBJECT_ID('tempdb..#dealt_side', 'U') IS NOT NULL DROP TABLE #dealt_side    SELECT DISTINCT     TRADE_ID,     BASE_CCY,     INSTRUCTED_CCY,     SPOT_RATE,     SPOT_DIFFERENCE_NEAR,     SPOT_DIFFERENCE_FAR,     SPOT_TOLERANCE_THRESHOLD,     SPOT_TOLERANCE_THRESHOLD_LEG2,     MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE,     MARKET_ARRIVAL_INDICATIVE_SPOT_FAR_PRICE,     CASE       WHEN ABS(SPOT_DIFFERENCE_NEAR) > SPOT_TOLERANCE_THRESHOLD THEN 1      ELSE 0      END AS THRESHOLD_EXCEPTION,     CASE       WHEN ABS(SPOT_DIFFERENCE_FAR) > SPOT_TOLERANCE_THRESHOLD_LEG2 THEN 1      ELSE 0      END AS THRESHOLD_FAR_EXCEPTION,     CASE       WHEN DEALT_SIDE_SWAP IS NULL THEN ACTION1      ELSE DEALT_SIDE_SWAP      END AS DEALT_SIDE    INTO #dealt_side    FROM #spot_diff         IF OBJECT_ID('tempdb..#spot_wdealt', 'U') IS NOT NULL DROP TABLE #spot_wdealt    SELECT DISTINCT      TRADE_ID,     THRESHOLD_EXCEPTION,     THRESHOLD_FAR_EXCEPTION,     SPOT_DIFFERENCE_NEAR,     SPOT_DIFFERENCE_FAR,     SPOT_TOLERANCE_THRESHOLD,     SPOT_TOLERANCE_THRESHOLD_LEG2,     CASE       WHEN BASE_CCY  = INSTRUCTED_CCY AND DEALT_SIDE = 'BUY'  AND MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE > SPOT_RATE THEN 1      WHEN BASE_CCY != INSTRUCTED_CCY AND DEALT_SIDE = 'SELL' AND MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE > SPOT_RATE THEN 1      WHEN BASE_CCY  = INSTRUCTED_CCY AND DEALT_SIDE = 'SELL' AND MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE < SPOT_RATE THEN 1      WHEN BASE_CCY != INSTRUCTED_CCY AND DEALT_SIDE = 'BUY'  AND MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE < SPOT_RATE THEN 1     ELSE 0      END AS DEALT_SIDE_EXCEPTIONS    INTO #spot_wdealt    FROM #dealt_side        --SRR Exceptions final table    IF OBJECT_ID('tempdb..#spot_ex', 'U') IS NOT NULL DROP TABLE #spot_ex    SELECT DISTINCT     TRADE_ID,     SPOT_DIFFERENCE_NEAR,     SPOT_DIFFERENCE_FAR,     SPOT_TOLERANCE_THRESHOLD,     SPOT_TOLERANCE_THRESHOLD_LEG2,     THRESHOLD_EXCEPTION,     THRESHOLD_FAR_EXCEPTION,     DEALT_SIDE_EXCEPTIONS,     CASE       WHEN (THRESHOLD_EXCEPTION = 1 OR THRESHOLD_FAR_EXCEPTION = 1) AND DEALT_SIDE_EXCEPTIONS = 0 THEN 1      ELSE 0      END AS SRR_EXCEPTION    INTO #spot_ex    FROM #spot_wdealt        --Calculating NWQ & B3Q Exceptions for FXM    IF OBJECT_ID('tempdb..#best_ex_fx', 'U') IS NOT NULL DROP TABLE #best_ex_fx    SELECT DISTINCT     fxt.[TRADE_ID],     fxo.[FXM_ORDER_ID],     fxt.[PROFIT_OR_LOSS], --Field also called PROFIT_OR_LOSS2 (?)     fxt.[PRICE_REASON],     fxo.[MARKER],     fxt.[EXC_SESSION_TYPE],     fxt.[FR_LEG_PRODUCT],     fxt.[NR_LEG_PRODUCT],     fxo.[INSTRUCTION_TYPE],     ISNULL(ref_q.[NO_QUOTES_THRESHOLD], 3) as [NO_QUOTES_THRESHOLD],     q_fx.[NO_OF_QUOTES],     CASE      WHEN fxo.TRADE_VENUE in ('FX Manager','FX Connect') and (fxt.PRICE_REASON IS NOT NULL OR fxt.price_reason != '') THEN 1      --T-0-18074      WHEN fxo.TRADE_VENUE not in ('FX Manager','FX Connect') and lb.PL IS NOT NULL AND lb.PL < 0 THEN 1      WHEN fxo.TRADE_VENUE not in ('FX Manager','FX Connect') and fxt.[PROFIT_OR_LOSS] IS NULL AND CAST(NULLIF(fxt.[PRICE_REASON],'') AS VARCHAR(50)) IS NOT NULL THEN 1 --Price Reason field is currently showing numbers     ELSE 0     END AS NWQ_EXCEPTION,     CASE       WHEN q_fx.[NO_OF_QUOTES] < ISNULL(ref_q.[NO_QUOTES_THRESHOLD],3) THEN 1     ELSE 0     END AS B3Q_EXCEPTION,     spot_ex.[SRR_EXCEPTION],     'FX' as [DATA_SOURCE]    INTO #best_ex_fx    FROM VISTA_REPORTING.dbo.FX_TRADES fxt    left join VISTA_REPORTING.dbo.FX_ORDERS fxo    on fxo.[FXM_ORDER_ID] = fxt.[ORDER_ID]    left join (select min(PROFIT_OR_LOSS) as PL,Trade_ID from VISTA_REPORTING.dbo.FX_LOSING_BANKS group by Trade_id) lb    on fxt.Trade_id = lb.Trade_id    --End of T-0-18074    left join #countquotes_fx q_fx    on fxt.[TRADE_ID] = q_fx.[TRADE_ID]    left join #spot_ex spot_ex    on fxt.[TRADE_ID] = spot_ex.[TRADE_ID]    left join VISTA_STAGING.dbo.REF_FX_BESTEXC_QUOTES_THRESHOLD ref_q     on ref_q.[PRODUCT] = fxo.[INSTRUCTION_TYPE]     and ISNULL(ref_q.[MARKER], '') = ISNULL(fxo.[MARKER], '')    and ISNULL(ref_q.[SESSION_TYPE], '') = ISNULL(fxt.[EXC_SESSION_TYPE], '')    AND fxo.[PULL_DATE] BETWEEN ref_q.[DATE_FROM] AND ref_q.[DATE_TO]        --Calculating NWQ & B3Q Exceptions for Aladdin    IF OBJECT_ID('tempdb..#best_ex_al', 'U') IS NOT NULL DROP TABLE #best_ex_al    SELECT DISTINCT     t.[MULTI_FUND_ID],     t.[ORD_NUM],     t.[SM_SEC_TYPE] as INSTRUCTION_TYPE,     pr.[Trade_TRAN_TYPE],     t.[TRD_EX_BROKER_CODE],     t.[TRD_COUNTERPARTY],     min_brk.[MIN_ABS_BROKER],     max_brk.[MAX_ABS_BROKER],     q_al.[QUOTES_OBTAINED],     ref_q.[NO_QUOTES_THRESHOLD],     CASE      WHEN pr.[Trade_TRAN_TYPE] like '%Buy%'  AND COALESCE(t.TRD_EX_BROKER_CODE, t.[TRD_COUNTERPARTY]) != min_brk.[MIN_ABS_BROKER] AND t.TRD_STATUS != 'C' THEN 1      WHEN pr.[Trade_TRAN_TYPE] like '%Sell%' AND COALESCE(t.TRD_EX_BROKER_CODE, t.[TRD_COUNTERPARTY]) != max_brk.[MAX_ABS_BROKER] AND t.TRD_STATUS != 'C' THEN 1     ELSE 0     END AS NWQ_EXCEPTION,     CASE      WHEN q_al.[QUOTES_OBTAINED] < ref_q.[NO_QUOTES_THRESHOLD] AND t.TRD_STATUS != 'C' THEN 1     ELSE 0     END AS B3Q_EXCEPTION,     0 as [SRR_EXCEPTION], --No SRR for Aladdin      'AL' as [DATA_SOURCE]    INTO #best_ex_al    FROM VISTA_REPORTING.dbo.TRADES t    left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr    on t.[MULTI_FUND_ID] = pr.[MULTI_FUND_ID]    left join #min_abs_broker min_brk    on t.[MULTI_FUND_ID] = min_brk.[MULTI_FUND_ID]    left join #max_abs_broker max_brk    on t.[MULTI_FUND_ID] = max_brk.[MULTI_FUND_ID]    left join #quotes_calc_al q_al    on t.[MULTI_FUND_ID] = q_al.[MULTI_FUND_ID]    left join VISTA_STAGING.dbo.REF_FX_BESTEXC_QUOTES_THRESHOLD ref_q     on ref_q.[PRODUCT] = t.[SM_SEC_TYPE]     AND t.[PULL_DATE] BETWEEN ref_q.[DATE_FROM] AND ref_q.[DATE_TO]    WHERE pr.[DEALING_DESK] = 'FX'            --Calculating final exceptions table    IF OBJECT_ID('tempdb..#final_ex', 'U') IS NOT NULL DROP TABLE #final_ex    SELECT DISTINCT     ex.[TRADE_ID],     ex.[NO_OF_QUOTES],     ex.[NO_QUOTES_THRESHOLD],     ex.[NWQ_EXCEPTION],     ex.[B3Q_EXCEPTION],     ex.[SRR_EXCEPTION],     CASE      WHEN ex.[NWQ_EXCEPTION] = 1 OR ex.[B3Q_EXCEPTION] = 1 THEN 1     ELSE 0     END AS VG_607,     CASE      WHEN ex.[NWQ_EXCEPTION] = 1 OR ex.[B3Q_EXCEPTION] = 1 THEN GETDATE()     ELSE NULL     END AS VG_607_CREATETIME,     ex.[DATA_SOURCE]    INTO #final_ex    FROM #best_ex_fx ex    UNION    SELECT DISTINCT     al.[MULTI_FUND_ID],     al.[QUOTES_OBTAINED],     al.[NO_QUOTES_THRESHOLD],     al.[NWQ_EXCEPTION],     al.[B3Q_EXCEPTION],     al.[SRR_EXCEPTION],     CASE      WHEN al.[NWQ_EXCEPTION] = 1 OR al.[B3Q_EXCEPTION] = 1 THEN 1     ELSE 0     END AS VG_607,     CASE      WHEN al.[NWQ_EXCEPTION] = 1 OR al.[B3Q_EXCEPTION] = 1 THEN GETDATE()     ELSE NULL     END AS VG_607_CREATETIME,     al.[DATA_SOURCE]    FROM #best_ex_al al                -----------------------------                    SELECT *     INTO VISTA_STAGING.dbo.DUMMY_VG_607_BEST_EXECUTION_FX_TABLE     FROM #final_ex                     IF OBJECT_ID('tempdb..#countquotes', 'U') IS NOT NULL DROP TABLE #countquotes    IF OBJECT_ID('tempdb..#spot_diff', 'U') IS NOT NULL DROP TABLE #spot_diff    IF OBJECT_ID('tempdb..#spot_ex', 'U') IS NOT NULL DROP TABLE #spot_ex        END            --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: EMSX_ORDERS_DATACOPY  CreateDate: 2025-01-07 09:12:11.647  ModifyDate: 2025-06-24 06:35:27.103  --- DEFINITION START ---  CREATE PROCEDURE [dbo].[EMSX_ORDERS_DATACOPY]          AS             BEGIN                 SET XACT_ABORT ON;                           BEGIN TRY                     BEGIN TRAN                         DECLARE @RecCount Varchar(50);              SELECT @RecCount = COUNT(1) FROM [staging].[EMSX_ORDERS] WITH (NOLOCK);               INSERT INTO [dbo].[DATAPRODUCT_LOGS] ([Action], [DataProduct], [Result], Created) VALUES('EMSX_ORDERS_DATACOPY: Process - Started - ' + @RecCount + ' received.','EMSX_ORDERS','Info',GETDATE());                                  -- Delete records older than 31 year from the table              DELETE FROM [dbo].[EMSX_ORDERS] WHERE [TRUE_PULL_DATE] < DATEADD(DAY, -1850, GETDATE());                                 -- Insert staging data into dbo table              INSERT INTO [dbo].[EMSX_ORDERS](             [Order Number],            [Ticker],            [Exchange],            [Security Name],            [Instructions],            [Side],            [TIF],            [Status],            [Amount],            [Working Amount],            [Filled Amount],            [Average Price],            [As Of Date],            [As Of Time],            [GTD Date],            [Currency],            [CUSIP],            [ISIN],            [SEDOL],            [Order Type],            [Limit Price],            [Stop Price],            [Day Filled Amount],            [Day Average Price],            [Trader Name],            [Trader UUID],            [Exec Instructions],            [Settlement Date],            [Broker],            [Basket Name],            [Create Date],            [Order Ref ID],            [Investor ID],            [Handling Instr],            [Account],            [Contract Expiration],            [Long Future Name],            [Last Fill Date],            [Order Origin],            [Create Time],            [Ticker + Exchange],            [BBGID],            [Settlement Currency],            [Settlement Type],            [Position],            [Block ID],            [TRUE_PULL_DATE]                )              SELECT              [ORDER_NUMBER],             [TICKER],             [EXCHANGE],             [SECURITY_NAME],             [INSTRUCTIONS],             [SIDE],             [TIF],             [STATUS],             [AMOUNT],             [WORKING_AMOUNT],             [FILLED_AMOUNT],             [AVERAGE_PRICE],             [AS_OF_DATE],             [AS_OF_TIME],             [GTD_DATE],             [CURRENCY],             [CUSIP],             [ISIN],             [SEDOL],             [ORDER_TYPE],             [LIMIT_PRICE],             [STOP_PRICE],             [DAY_FILLED_AMOUNT],             [DAY_AVERAGE_PRICE],             [TRADER_NAME],             [TRADER_UUID],             [EXEC_INSTRUCTIONS],             [SETTLEMENT_DATE],             [BROKER],             [BASKET_NAME],             [CREATE_DATE],             [ORDER_REF_ID],             [INVESTOR_ID],             [HANDLING_INSTR],             [ACCOUNT],             [CONTRACT_EXPIRATION],             [LONG_FUTURE_NAME],             [LAST_FILL_DATE],             [ORDER_ORIGIN],             [CREATE_TIME],             [TICKER_PLUS_EXCHANGE],             [BBGID],             [SETTLEMENT_CURRENCY],             [SETTLEMENT_TYPE],             [POSITION],             [BLOCK_ID],             getdate()              FROM   [staging].[EMSX_ORDERS] WITH (NOLOCK);                        INSERT INTO [dbo].[DATAPRODUCT_LOGS] ([Action], [DataProduct], [Result], Created) VALUES('EMSX_ORDERS_DATACOPY:Process - Completed - ' + @RecCount + ' received.','EMSX_ORDERS','Success',GETDATE());                                        COMMIT TRAN                               SELECT 'SUCCESS' AS RESULT;                END TRY                           BEGIN CATCH                   Print N'Rollback Transaction - '                           + Error_Message() + ' '                           + convert(varchar(200), ERROR_LINE())                       INSERT INTO [dbo].[DATAPRODUCT_LOGS] ([Action], [DataProduct], [Result], Created) VALUES(Error_Message() + ' ' + convert(varchar(200), ERROR_LINE()),'EMSX_ORDERS','Failed',GETDATE());                                           IF ( @@TRANCOUNT > 0 AND XACT_STATE() != 0 )               ROLLBACK TRAN;                    THROW;                END CATCH;           END  --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: EMSX_ROUTES_DATACOPY  CreateDate: 2025-01-07 09:12:11.657  ModifyDate: 2025-06-24 06:38:34.400  --- DEFINITION START ---        CREATE PROCEDURE [dbo].[EMSX_ROUTES_DATACOPY]            AS               BEGIN                   SET XACT_ABORT ON;                               BEGIN TRY                       BEGIN TRAN                             DECLARE @RecCount Varchar(50);                SELECT @RecCount = COUNT(1) FROM [staging].[EMSX_ROUTES] WITH (NOLOCK);                 INSERT INTO [dbo].[DATAPRODUCT_LOGS] ([Action], [DataProduct], [Result], Created) VALUES('EMSX_ROUTES_DATACOPY: Process - Started - ' + @RecCount + ' received.','EMSX_ROUTES','Info',GETDATE());                                      -- Delete records older than 1 year from the table                DELETE FROM [dbo].[EMSX_ROUTES] WHERE [TRUE_PULL_DATE] < DATEADD(DAY, -1850, GETDATE());                             -- Insert staging data into dbo table                            INSERT INTO [dbo].[EMSX_ROUTES](               [Order Number],              [Ticker],              [Exchange],              [Security Name],              [Route Number],              [Side],              [Route Status],              [Route TIF],              [Route Type],              [Routed Amount],              [Route Filled Amount],              [Route Avg Price],              [Route Date],              [Route Time],              [Route As Of Date],              [Route As Of Time],              [Route Settlement Date],              [Broker],              [Execution Broker],              [GTD Date],              [Currency],              [CUSIP],              [ISIN],              [SEDOL],              [Route Limit Price],              [Route Stop Price],              [Unsupported Field],              [Route Net Money],              [Route Comm Amount],              [Route Comm Rate],              [Exec Instr],              [Account],              [Basket Name],              [Instructions],              [Strategy Type],              [Last Fill Date],              [Settlement Amount],              [Settlement FX Rate],              [Settlement FX Calculation],              [TRUE_PULL_DATE]                 )                SELECT                [ORDER_NUMBER],               [TICKER],               [EXCHANGE],               [SECURITY_NAME],               [ROUTE_NUMBER],               [SIDE],               [ROUTE_STATUS],               [ROUTE_TIF],               [ROUTE_TYPE],               [ROUTED_AMOUNT],               [ROUTE_FILLED_AMOUNT],               [ROUTE_AVG_PRICE],               [ROUTE_DATE],               [ROUTE_TIME],               [ROUTE_AS_OF_DATE],               [ROUTE_AS_OF_TIME],               [ROUTE_SETTLEMENT_DATE],               [BROKER],               [EXECUTION_BROKER],               [GTD_DATE],               [CURRENCY],               [CUSIP],               [ISIN],               [SEDOL],               [ROUTE_LIMIT_PRICE],               [ROUTE_STOP_PRICE],               [UNSUPPORTED_FIELD],               [ROUTE_NET_MONEY],               [ROUTE_COMM_AMOUNT],               [ROUTE_COMM_RATE],               [EXEC_INSTR],               [ACCOUNT],               [BASKET_NAME],               [INSTRUCTIONS],               [STRATEGY_TYPE],               [LAST_FILL_DATE],               [SETTLEMENT_AMOUNT],               [SETTLEMENT_FX_RATE],               [SETTLEMENT_FX_CALCULATION],               getdate()                FROM   [staging].[EMSX_ROUTES] WITH (NOLOCK);                            INSERT INTO [dbo].[DATAPRODUCT_LOGS] ([Action], [DataProduct], [Result], Created) VALUES('EMSX_ROUTES_DATACOPY:Process - Completed - ' + @RecCount + ' received.','EMSX_ROUTES','Success',GETDATE());                                            COMMIT TRAN                                   SELECT 'SUCCESS' AS RESULT;                  END TRY                               BEGIN CATCH                     Print N'Rollback Transaction - '                             + Error_Message() + ' '                             + convert(varchar(200), ERROR_LINE())                           INSERT INTO [dbo].[DATAPRODUCT_LOGS] ([Action], [DataProduct], [Result], Created) VALUES(Error_Message() + ' ' + convert(varchar(200), ERROR_LINE()),'EMSX_ROUTES','Failed',GETDATE());                                                 IF ( @@TRANCOUNT > 0 AND XACT_STATE() != 0 )                         ROLLBACK TRAN;                      THROW;                  END CATCH;             END  --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: ERROR_TRACKING  CreateDate: 2025-06-26 17:35:57.603  ModifyDate: 2025-06-26 17:35:57.603  --- DEFINITION START ---  -- *********************************************    CREATE PROCEDURE [dbo].[ERROR_TRACKING]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         IF OBJECT_ID('tempdb..#order_directions', 'U') IS NOT NULL DROP TABLE #order_directions         SELECT DISTINCT t.FUND,          o.PM,          o.DEALING_DESK,         o.FACE,          t.CUSIP,          t.SM_SEC_GROUP,          t.SM_SEC_TYPE,          t.ORD_NUM,          t.TRAN_TYPE,          o.AUTH_TIME     INTO #order_directions     FROM VISTA_STAGING.dbo.TRADES as t     INNER JOIN VISTA_REPORTING.dbo.PM_ORDERS as o on t.ORD_NUM=o.ORD_NUM     WHERE AUTH_TIME is not null and t.TRAN_TYPE in ('BUY', 'SELL')     ORDER BY FUND, CUSIP, AUTH_TIME         IF OBJECT_ID('VISTA_REPORTING.dbo.ERROR_TRACKING', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.ERROR_TRACKING             SELECT t.*       ,i.MAX_AUTH_FOR_CUSIP       ,CASE WHEN        (t.FUND=t.PREV_FUND) and (t.CUSIP=t.PREV_CUSIP) and (((t.TRAN_TYPE='BUY') and (t.PREV_TRAN_TYPE='SELL')) or                    ((t.TRAN_TYPE='SELL') and (t.PREV_TRAN_TYPE='BUY')))       THEN 1       ELSE 0       END AS ORDER_ERROR     INTO VISTA_REPORTING.dbo.ERROR_TRACKING     FROM (       SELECT        FUND        ,PM        ,DEALING_DESK        ,FACE        ,CUSIP        ,SM_SEC_GROUP         ,SM_SEC_TYPE         ,ORD_NUM        ,TRAN_TYPE        ,AUTH_TIME        ,LAG(FUND, 1) OVER (ORDER BY FUND, CUSIP, AUTH_TIME) as PREV_FUND        ,LAG(CUSIP, 1) OVER (ORDER BY FUND, CUSIP, AUTH_TIME) as PREV_CUSIP        ,LAG(TRAN_TYPE, 1) OVER (ORDER BY FUND, CUSIP, AUTH_TIME) as PREV_TRAN_TYPE       FROM #order_directions     ) as t     left join (          SELECT DISTINCT CUSIP, MAX(AUTH_TIME) as MAX_AUTH_FOR_CUSIP FROM VISTA_REPORTING.dbo.ORDERS          WHERE AUTH_TIME is not null          GROUP BY CUSIP         ) as i on t.CUSIP=i.CUSIP     ORDER BY FUND, CUSIP, AUTH_TIME                END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: ERROR_TRACKING_KR  CreateDate: 2025-06-26 17:36:15.527  ModifyDate: 2025-06-26 17:36:15.527  --- DEFINITION START ---  -- *********************************************    CREATE PROCEDURE [dbo].[ERROR_TRACKING_KR]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         /*     Error Tracking:     We want to identify when a PM has ordered a trade on their fund(s), realised they've made a mistake and ordered an     opposite trade to exit their position.         To Do:     1. Add time limit to count as error, eg. 5 days. So we'd need a new lag column in t at the bottom and then a date diff in the        where clause to calculate ORDER_ERROR.     */             IF OBJECT_ID('tempdb..#order_directions', 'U') IS NOT NULL DROP TABLE #order_directions     -- Get info on all trades and metadata to identify opposite trades     SELECT DISTINCT t.FUND,          o.PM,          o.DEALING_DESK,         o.FACE,          t.CUSIP,          t.SM_SEC_GROUP,          t.SM_SEC_TYPE,          t.ORD_NUM,          t.TRAN_TYPE,          o.AUTH_TIME     INTO #order_directions     FROM VISTA_STAGING.dbo.TRADES as t     INNER JOIN VISTA_REPORTING.dbo.PM_ORDERS as o on t.ORD_NUM=o.ORD_NUM     WHERE AUTH_TIME is not null and t.TRAN_TYPE in ('BUY', 'SELL')     ORDER BY FUND, CUSIP, AUTH_TIME         IF OBJECT_ID('VISTA_REPORTING.dbo.ERROR_TRACKING', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.ERROR_TRACKING     -- So order all our trades by auth time (for the same CUSIP on the same FUND). If they are in opposite directions     -- the PM is exiting their position - I'm pretty sure we need to add a time box here, eg. only an error if you exit     -- your position within 5 days. I'd also consider a profit measure - if you exit in 4 days but make a profit is that an error?     SELECT t.*       ,i.MAX_AUTH_FOR_CUSIP       ,CASE WHEN        (t.FUND=t.PREV_FUND) and (t.CUSIP=t.PREV_CUSIP) and (((t.TRAN_TYPE='BUY') and (t.PREV_TRAN_TYPE='SELL')) or                    ((t.TRAN_TYPE='SELL') and (t.PREV_TRAN_TYPE='BUY')))       THEN 1       ELSE 0       END AS ORDER_ERROR     INTO VISTA_REPORTING.dbo.ERROR_TRACKING     FROM (       SELECT        FUND        ,PM        ,DEALING_DESK        ,FACE        ,CUSIP        ,SM_SEC_GROUP         ,SM_SEC_TYPE         ,ORD_NUM        ,TRAN_TYPE        ,AUTH_TIME        ,LAG(FUND, 1) OVER (ORDER BY FUND, CUSIP, AUTH_TIME) as PREV_FUND        ,LAG(CUSIP, 1) OVER (ORDER BY FUND, CUSIP, AUTH_TIME) as PREV_CUSIP        ,LAG(TRAN_TYPE, 1) OVER (ORDER BY FUND, CUSIP, AUTH_TIME) as PREV_TRAN_TYPE       FROM #order_directions     ) as t     left join (          SELECT DISTINCT CUSIP, MAX(AUTH_TIME) as MAX_AUTH_FOR_CUSIP FROM VISTA_REPORTING.dbo.ORDERS          WHERE AUTH_TIME is not null          GROUP BY CUSIP        ) as i on t.CUSIP=i.CUSIP     ORDER BY FUND, CUSIP, AUTH_TIME                END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: Exception_Count_Checks_Daily_Procedure_M&G_Migration  CreateDate: 2025-06-26 17:36:45.037  ModifyDate: 2025-06-26 17:36:45.037  --- DEFINITION START ---  -- =============================================    -- Author:  <Miter, Matej>    -- Create date: <11/10/2021>    -- Description:     -- <INSTRUCTOR that orders trade must be different than dealer     -- otherwise exception will be raised>    -- =============================================        -- ***************VERSION CONTROL***************    --    -- *********************************************        CREATE PROCEDURE [dbo].[Exception_Count_Checks_Daily_Procedure_M&G_Migration]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;                IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT 'VG_01_QUOTE_EXCEPTION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MULTI_FUND_ID) as EXCEPTION_COUNT,       GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_01_QUOTE_EXCEPTION_DMG_TABLE     where VG_01 = 1 and TRY_CAST(CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_01_QUOTE_EXCEPTION_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_01_QUOTE_EXCEPTION_EQ_TABLE     where quote_exception = 1 and TRY_CAST(QE_CREATE_TIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_01_QUOTE_EXCEPTION_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI_TABLE     where quote_exception = 1 and TRY_CAST(CREATETIME as date) = TRY_CAST(GETDATE() as date)                IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_01_QUOTE_EXCEPTION_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_01_QUOTE_EXCEPTION_LL_TABLE     where quote_exception = 1 and TRY_CAST(CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_06_NEW_ISSUE_ORDER_FLIPPING_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(CLIENT_EXECUTION_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_FI_TABLE     where NEW_ORDER_FLIPPING_EXCEPTION = 1 and TRY_CAST(NEW_ORDER_FLIPPING_EXCEPTION_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_06_NEW_ISSUE_ORDER_FLIPPING_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(CLIENT_EXECUTION_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_LL_TABLE     where NEW_ORDER_FLIPPING_EXCEPTION = 1 and TRY_CAST(NEW_ORDER_FLIPPING_EXCEPTION_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_07_NON_WINNING_QUOTE_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_07_NON_WINNING_QUOTE_DMG_TABLE     where VG_07 = 1 and TRY_CAST(VG_07_CREATETIME as date) = TRY_CAST(GETDATE() as date)                IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_07_NON_WINNING_QUOTE_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_07_NON_WINNING_QUOTE_EQ_TABLE     where NON_WINNING_QUOTE_EXCEPTION = 1 and TRY_CAST(NWQ_CREATEIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_07_NON_WINNING_QUOTE_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_07_NON_WINNING_QUOTE_FI_TABLE     where NWQ_EXCEPTION = 1 and TRY_CAST(NWQ_CREATEIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_07_NON_WINNING_QUOTE_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_07_NON_WINNING_QUOTE_LL_TABLE     where NWQ_EXCEPTION = 1 and TRY_CAST(NWQ_CREATEIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_08_Order_Inflation_FI_Table' as Table_name,       'FI' as Dealing_Desk,       count(CLIENT_EXECUTION_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_08_Order_Inflation_FI_Table     where ORDER_INFLATION_EXCEPTION = 1 and TRY_CAST(OI_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_08_Order_Inflation_LL_Table' as Table_name,       'LL' as Dealing_Desk,       count(CLIENT_EXECUTION_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_08_Order_Inflation_LL_Table     where ORDER_INFLATION_EXCEPTION = 1 and TRY_CAST(OI_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_09_TIMELY_EXECUTION_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_MM_TABLE     where VG_09 >= 1 and TRY_CAST(VG_09_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_09_TIMELY_EXECUTION_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_RR_TABLE     where VG_09 >= 1 and TRY_CAST(VG_09_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_09_TIMELY_EXECUTION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_DMG_TABLE     where VG_09 >= 1 and TRY_CAST(CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_09_TIMELY_EXECUTION_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_EQ_TABLE     where TIMELY_EXECUTION_EXCEPTION >= 1 and TRY_CAST(CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_09_TIMELY_EXECUTION_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE     where TIMELY_EXECUTION_EXCEPTION >= 1 and TRY_CAST(CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_09_TIMELY_EXECUTION_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_FX_TABLE     where VG_09 >= 1 and TRY_CAST(VG_09_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_09_TIMELY_EXECUTION_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_LL_TABLE     where TIMELY_EXECUTION_EXCEPTION >= 1 and TRY_CAST(CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_10_NAV_CUT_OFF_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_10_NAV_CUT_OFF_EQ_TABLE     where NAV_CUT_OFF_EXCEPTION = 1 and TRY_CAST(NAV_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_10_NAV_CUT_OFF_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_10_NAV_CUT_OFF_EQ_TABLE     where NAV_CUT_OFF_EXCEPTION = 1 and TRY_CAST(NAV_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_10_TIMELY_RECORDING_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_CASH_MM_TABLE     where VG_10 >= 1 and TRY_CAST(VG_10_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_10_TIMELY_RECORDING_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_CASH_RR_TABLE     where VG_10 >= 1 and TRY_CAST(VG_10_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_10_TIMELY_RECORDING_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_DMG_TABLE     where VG_10 >= 1 and TRY_CAST(TREC_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_10_TIMELY_RECORDING_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_EQ_TABLE     where TIMELY_RECORDING_FLAG >= 1 and TRY_CAST(TREC_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_10_TIMELY_RECORDING_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_FI_TABLE     where TIMELY_RECORDING_EXCEPTION >= 1 and TRY_CAST(TREC_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_10_TIMELY_RECORDING_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(TRADE_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_FX_TABLE     where VG_10 >= 1 and TRY_CAST(VG_10_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_10_TIMELY_RECORDING_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_LL_TABLE     where TIMELY_RECORDING_EXCEPTION >= 1 and TRY_CAST(TREC_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_11_TIMELY_RELEASE_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_11_TIMELY_RELEASE_EQ_TABLE     where TIMELY_RELEASE_EXCEPTION = 1 and TRY_CAST(TR_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_13_ORDER_AGGREGATION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_13_ORDER_AGGREGATION_DMG_TABLE     where MERGE_EXCEPTION = 1 and TRY_CAST(CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_13_ORDER_AGGREGATION_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_13_ORDER_AGGREGATION_EQ_TABLE     where MERGE_EXCEPTION = 1 and TRY_CAST(CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_13_ORDER_AGGREGATION_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_13_ORDER_AGGREGATION_FI_TABLE     where MERGE_EXCEPTION = 1 and TRY_CAST(CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_13_ORDER_AGGREGATION_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_13_ORDER_AGGREGATION_LL_TABLE     where MERGE_EXCEPTION = 1 and TRY_CAST(CREATETIME as date) = TRY_CAST(GETDATE() as date)                IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_14_ORDER_PRIORITY_EXCEPTION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_DMG_TABLE     where ORDER_PRIORITY_EXCEPTION = 1 and TRY_CAST(CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_14_ORDER_PRIORITY_EXCEPTION_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_EQ_TABLE     where ORDER_PRIORITY_EXCEPTION = 1 and TRY_CAST(CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_14_ORDER_PRIORITY_EXCEPTION_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_FI_TABLE     where ORDER_PRIORITY_EXCEPTION = 1 and TRY_CAST(CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_14_ORDER_PRIORITY_EXCEPTION_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_LL_TABLE     where ORDER_PRIORITY_EXCEPTION = 1 and TRY_CAST(CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_15_AMENDMENT_FLAG_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_15_AMENDMENT_FLAG_DMG_TABLE     where VG_15 = 1 and TRY_CAST(EXCEPTION_FLAG_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_15_AMENDMENT_FLAG_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_15_AMENDMENT_FLAG_EQ_TABLE     where AMENDMENT_FLAG = 1 and TRY_CAST(AMENDMENT_FLAG_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_15_AMENDMENT_FLAG_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_15_AMENDMENT_FLAG_FI_TABLE     where AMENDMENT_FLAG = 1 and TRY_CAST(AMENDMENT_FLAG_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_15_AMENDMENT_FLAG_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_15_AMENDMENT_FLAG_LL_TABLE     where AMENDMENT_FLAG = 1 and TRY_CAST(AMENDMENT_FLAG_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE     where VG_16 = 1  and TRY_CAST(VG_16_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE     where VG_16 = 1 and TRY_CAST(VG_16_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(TRADE_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE     where VG_16 = 1 and TRY_CAST(VG_16_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE     where VG_17 = 1 and TRY_CAST(VG_17_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE     where VG_17 = 1 and TRY_CAST(CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_17_COUNTERPARTY_DIRECTION_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE     where VG_17 = 1 and TRY_CAST(VG_17_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_19_PT_AMENDMENT_FLAG_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_DMG_TABLE     where VG_19 = 1 and TRY_CAST(EXCEPTION_FLAG_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL     INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_19_PT_AMENDMENT_FLAG_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_EQ_TABLE     where  AMENDMENT_FLAG = 1 and TRY_CAST(AMENDMENT_FLAG_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_19_PT_AMENDMENT_FLAG_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_FI_TABLE     where  AMENDMENT_FLAG = 1 and TRY_CAST(AMENDMENT_FLAG_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_19_PT_AMENDMENT_FLAG_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_LL_TABLE     where  AMENDMENT_FLAG = 1 and TRY_CAST(AMENDMENT_FLAG_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_19_PT_TBILLS_CP_CD_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_19_PT_TBILLS_CP_CD_CASH_TABLE     where  AMENDMENT_FLAG = 1 and TRY_CAST(VG_19_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_25_INTERFUND_TRANSFER_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_25_INTERFUND_TRANSFER_DMG_TABLE     where  IT_FLAG = 1 and TRY_CAST(IT_FLAG_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_25_INTERFUND_TRANSFER_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_25_INTERFUND_TRANSFER_EQ_TABLE     where  IT_FLAG = 1 and TRY_CAST(IT_FLAG_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_25_INTERFUND_TRANSFER_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_25_INTERFUND_TRANSFER_FI_TABLE     where  IT_FLAG = 1 and TRY_CAST(IT_FLAG_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_25_INTERFUND_TRANSFER_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_25_INTERFUND_TRANSFER_LL_TABLE     where  IT_FLAG = 1 and TRY_CAST(IT_FLAG_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_40_EXTENDED_SETTLEMENT_EXCEPTION_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_40_EXTENDED_SETTLEMENT_EXCEPTION_TABLE     where  SETTLEMENT_EXCEPTION = 1 and TRY_CAST(SETTLEMENT_CREATEDATE as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE     where  VG_41 = 1 and TRY_CAST(VG_41_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_500_DEALER_LIMIT_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_500_DEALER_LIMIT_FX_TABLE     where  VG_500 = 1 and TRY_CAST(EXCEPTION_FLAG_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_501_SPOT_REFERENCE_RATE_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(TRADE_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_501_SPOT_REFERENCE_RATE_FX_TABLE     where  VG_501 = 1 and TRY_CAST(VG_501_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_601_OUT_OF_HOURS_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       coalesce(count(ORDER_ID),count(transaction_number)) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_601_OUT_OF_HOURS_CASH_TABLE     where  TRY_CAST(VG_601_CREATETIME as date) = TRY_CAST(GETDATE() as date)      and ORDER_EXCEPTION = 1 or TRADE_EXCEPTION = 1         IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_601_OUT_OF_HOURS_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       coalesce(count(ORDER_ID),count(TRADE_ID)) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_601_OUT_OF_HOURS_FX_TABLE     where  VG_601 = 1 and TRY_CAST(VG_601_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_602_EOD_HOLDOVERS_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_602_EOD_HOLDOVERS_CASH_TABLE     where  VG_602 = 1 and TRY_CAST(VG_602_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_602_EOD_HOLDOVERS_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(FXM_ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_602_EOD_HOLDOVERS_FX_TABLE     where  VG_602 = 1 and TRY_CAST(VG_602_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_603_LARGE_TRADES_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_603_LARGE_TRADES_CASH_TABLE     where  EXCEPTION_FLAG = 1 and TRY_CAST(EXCEPTION_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_603_LARGE_TRADES_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_603_LARGE_TRADES_FX_TABLE     where  VG_603 = 1 and TRY_CAST(VG_603_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_603_LARGE_TRADES_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_603_LARGE_TRADES_FX_TABLE     where  VG_603 = 1 and TRY_CAST(VG_603_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_603T_LARGE_TRADES_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_603T_LARGE_TRADES_CASH_TABLE     where  EXCEPTION_FLAG = 1 and TRY_CAST(EXCEPTION_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_603T_LARGE_TRADES_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_603T_LARGE_TRADES_FX_TABLE     where  EXCEPTION_FLAG = 1 and TRY_CAST(EXCEPTION_FLAG_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE     where  VG_604 = 1 and TRY_CAST(VG_604_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE     where  VG_604 = 1 and TRY_CAST(VG_604_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_604_CLIENT_ORDER_HANDLING_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_FX_TABLE     where  VG_604 = 1 and TRY_CAST(VG_604_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_607_BEST_EXECUTION_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE     where  VG_607_MM = 1 and TRY_CAST(VG_607_CREATETIME_MM as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_607_BEST_EXECUTION_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_RR_TABLE     where  VG_607_RR = 1 and TRY_CAST(VG_607_CREATETIME_RR as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_607_BEST_EXECUTION_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(TRADE_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE     where  VG_607 = 1 and TRY_CAST(VG_607_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_608_TA_KNOCKBACK_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_608_TA_KNOCKBACK_CASH_TABLE     where  VG_608 = 1 and TRY_CAST(VG_608_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_608_TA_KNOCKBACK_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(FXM_ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_608_TA_KNOCKBACK_FX_TABLE     where  VG_608 = 1 and TRY_CAST(VG_608_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE     where  VG_609_CRR = 1 and TRY_CAST(VG_609_CREATETIME_CRR as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_610_TBILLS_CP_CD_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_610_TBILLS_CP_CD_CASH_TABLE     where  VG_610 = 1 and TRY_CAST(VG_610_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_611_ORDER_AGGREGATION_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_MM_TABLE     where  VG_611 = 1 and TRY_CAST(VG_611_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_611_ORDER_AGGREGATION_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_RR_TABLE     where  VG_611 = 1 and TRY_CAST(VG_611_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_611_ORDER_AGGREGATION_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_611_ORDER_AGGREGATION_FX_TABLE     where  VG_611 = 1 and TRY_CAST(VG_611_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_612_ORDER_ALLOCATION_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_MM_TABLE     where  VG_612 = 1 and TRY_CAST(VG_612_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_612_ORDER_ALLOCATION_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_RR_TABLE     where  VG_612 = 1 and TRY_CAST(VG_612_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_612_ORDER_ALLOCATION_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_612_ORDER_ALLOCATION_FX_TABLE     where  VG_612 = 1 and TRY_CAST(VG_612_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE     where  VG_613 = 1 and TRY_CAST(VG_613_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE     where  VG_613 = 1 and TRY_CAST(VG_613_CREATETIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(TRADE_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE     where  VG_613 = 1 and TRY_CAST(VG_613_CREATETIME as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_COMMISSION_EXCEPTION_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_COMMISSION_EXCEPTION_EQ_TABLE     where  COMMISSION_EXCEPTION = 1 and TRY_CAST(CE_CREATE_TIME as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_IMPLEMENTATION_SHORTFALL_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_IMPLEMENTATION_SHORTFALL_EQ_TABLE     where  IM_EXCEPTION = 1 and TRY_CAST(IM_CREATEDATE as date) = TRY_CAST(GETDATE() as date)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'VG_MARKET_HIGH_LOW_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM Vista_STAGING.dbo.VG_MARKET_HIGH_LOW_TABLE     where  HL_CREATEDATE = 1 and TRY_CAST(HL_CREATEDATE as date) = TRY_CAST(GETDATE() as date)        ---------------------REPORTING TABLES ----------------------------------------------------            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'MULTI_FUND_EXCEPTION_TABLE' as Table_name,       'EQ/FI/LL' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM VISTA_REPORTING.dbo.MULTI_FUND_EXCEPTION_TABLE     where  (VG_01_3QR = 1 and TRY_CAST(VG_01_3QR_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR          (VG_01_3QO = 1 and TRY_CAST(VG_01_3QO_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR         (VG_01 = 1 and TRY_CAST(VG_01_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR         (VG_07 = 1 and TRY_CAST(VG_07_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR         (VG_10 = 1 and TRY_CAST(VG_10_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR         (VG_10_NAV = 1 and TRY_CAST(VG_10_NAV_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR         (VG_25 = 1 and TRY_CAST(VG_25_CREATETIME as date) = TRY_CAST(GETDATE() as date))            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'TRD_ORDER_LEVEL_EXCEPTION_TABLE' as Table_name,       'EQ/FI/LL' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM VISTA_REPORTING.dbo.TRD_ORDER_LEVEL_EXCEPTION_TABLE     where  (VG_13 = 1 and TRY_CAST(VG_13_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR          (VG_14 = 1 and TRY_CAST(VG_14_CREATETIME as date) = TRY_CAST(GETDATE() as date))                 IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'ORDER_LEVEL_EXCEPTION_TABLE' as Table_name,       'EQ/FI/LL' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM VISTA_REPORTING.dbo.ORDER_LEVEL_EXCEPTION_TABLE     where  (VG_09_POLICY = 1 and TRY_CAST(VG_09_POLICY_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR          (VG_09_5_DAY = 1 and TRY_CAST(VG_09_5_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR         (VG_09_10_DAY = 1 and TRY_CAST(VG_09_10_DAY_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR         (VG_09_20_DAY = 1 and TRY_CAST(VG_09_20_DAY_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR         (VG_09_40_DAY = 1 and TRY_CAST(VG_09_40_DAY_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR         (VG_09_80_DAY = 1 and TRY_CAST(VG_09_80_DAY_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR         (VG_09_160_DAY = 1 and TRY_CAST(VG_09_160_DAY_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR         (VG_11 = 1 and TRY_CAST(VG_11_CREATETIME as date) = TRY_CAST(GETDATE() as date))            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'ORDER_LEVEL_EXCEPTION_TABLE' as Table_name,       'EQ/FI/LL' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM VISTA_REPORTING.dbo.ORDER_LEVEL_EXCEPTION_TABLE     where  (VG_09_POLICY = 1 and TRY_CAST(VG_09_POLICY_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR          (VG_09_5_DAY = 1 and TRY_CAST(VG_09_5_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR         (VG_09_10_DAY = 1 and TRY_CAST(VG_09_10_DAY_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR         (VG_09_20_DAY = 1 and TRY_CAST(VG_09_20_DAY_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR         (VG_09_40_DAY = 1 and TRY_CAST(VG_09_40_DAY_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR         (VG_09_80_DAY = 1 and TRY_CAST(VG_09_80_DAY_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR         (VG_09_160_DAY = 1 and TRY_CAST(VG_09_160_DAY_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR         (VG_11 = 1 and TRY_CAST(VG_11_CREATETIME as date) = TRY_CAST(GETDATE() as date))        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'MASTER_PM_ORDER' as Table_name,       'EQ/FI/LL' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER     where  (VG_09_POLICY = 1 and TRY_CAST(VG_09_POLICY_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR          (VG_09_5_DAY = 1 and TRY_CAST(VG_09_5_DAY_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR         (VG_09_10_DAY = 1 and TRY_CAST(VG_09_10_DAY_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR         (VG_09_20_DAY = 1 and TRY_CAST(VG_09_20_DAY_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR         (VG_09_40_DAY = 1 and TRY_CAST(VG_09_40_DAY_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR         (VG_09_80_DAY = 1 and TRY_CAST(VG_09_80_DAY_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR         (VG_09_160_DAY = 1 and TRY_CAST(VG_09_160_DAY_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR         (VG_11 = 1 and TRY_CAST(VG_11_CREATETIME as date) = TRY_CAST(GETDATE() as date))            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'MASTER_TRD_ORDER_TABLE' as Table_name,       'EQ/FI/LL' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM VISTA_REPORTING.dbo.MASTER_TRD_ORDER_TABLE     where  (VG_13 = 1 and TRY_CAST(VG_13_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR          (VG_14 = 1 and TRY_CAST(VG_14_CREATETIME as date) = TRY_CAST(GETDATE() as date))             IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'MASTER_MULTI_FUND_ID_TABLE' as Table_name,       'EQ/FI/LL' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE     where  (VG_01_3QR = 1 and TRY_CAST(VG_01_3QR_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR          (VG_01_3QO = 1 and TRY_CAST(VG_01_3QO_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR         (VG_01 = 1 and TRY_CAST(VG_01_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR         (VG_07 = 1 and TRY_CAST(VG_07_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR         (VG_10 = 1 and TRY_CAST(VG_10_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR         (VG_10_NAV = 1 and TRY_CAST(VG_10_NAV_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR         (VG_25 = 1 and TRY_CAST(VG_25_CREATETIME as date) = TRY_CAST(GETDATE() as date))            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'MASTER_ORDER_PRIORITY_TABLE' as Table_name,       'EQ/FI/LL' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM VISTA_REPORTING.dbo.MASTER_ORDER_PRIORITY_TABLE     where  (VG_13 = 1 and TRY_CAST(VG_13_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR          (VG_14 = 1 and TRY_CAST(VG_14_CREATETIME as date) = TRY_CAST(GETDATE() as date))             IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'MASTER_CLIENT_EXECUTION_TABLE' as Table_name,       'EQ/FI/LL' as Dealing_Desk,       count(Client_Execution_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE     where  (VG_08 = 1 and TRY_CAST(VG_08_CREATETIME as date) = TRY_CAST(GETDATE() as date)) OR          (VG_06 = 1 and TRY_CAST(VG_06_CREATETIME as date) = TRY_CAST(GETDATE() as date))             IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'MASTER_MFID_VG_01_QUOTE_EXCEPTION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MFID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_01_QUOTE_EXCEPTION_DMG_TABLE     where  (EXCEPTION_FLAG = 1 and TRY_CAST(CREATE_DATE as date) = TRY_CAST(GETDATE() as date))             IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'MASTER_MFID_VG_07_NON_WINNING_QUOTE_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MFID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_07_NON_WINNING_QUOTE_DMG_TABLE     where  (EXCEPTION_FLAG = 1 and TRY_CAST(CREATE_DATE as date) = TRY_CAST(GETDATE() as date))             IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'MASTER_MFID_VG_10_TIMELY_RECORDING_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MFID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_DMG_TABLE     where  (EXCEPTION_FLAG = 1 and TRY_CAST(CREATE_DATE as date) = TRY_CAST(GETDATE() as date))             IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MFID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE     where  (EXCEPTION_FLAG = 1 and TRY_CAST(CREATE_DATE as date) = TRY_CAST(GETDATE() as date))         IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'MASTER_MFID_VG_25_INTERFUND_TRANSFER_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MFID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_25_INTERFUND_TRANSFER_DMG_TABLE     where  (EXCEPTION_FLAG = 1 and TRY_CAST(CREATE_DATE as date) = TRY_CAST(GETDATE() as date))             IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'MASTER_MFID_VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MFID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE     where  (EXCEPTION_FLAG = 1 and TRY_CAST(CREATE_DATE as date) = TRY_CAST(GETDATE() as date))            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count([ORDER]) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE     where  (EXCEPTION_FLAG = 1 and TRY_CAST(CREATE_DATE as date) = TRY_CAST(GETDATE() as date))        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'MASTER_TRD_ORDER_VG_13_ORDER_AGGREGATION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count([ORDER]) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_13_ORDER_AGGREGATION_DMG_TABLE     where  (EXCEPTION_FLAG = 1 and TRY_CAST(CREATE_DATE as date) = TRY_CAST(GETDATE() as date))            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count([ORDER]) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE     where  (EXCEPTION_FLAG = 1 and TRY_CAST(CREATE_DATE as date) = TRY_CAST(GETDATE() as date))        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'MASTER_VG_15_AMENDMENT_FLAG_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count([ORDER]) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM VISTA_REPORTING.dbo.MASTER_VG_15_AMENDMENT_FLAG_DMG_TABLE     where  (EXCEPTION_FLAG = 1 and TRY_CAST(CREATE_DATE as date) = TRY_CAST(GETDATE() as date))            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count([ORDER]) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE     where  (EXCEPTION_FLAG = 1 and TRY_CAST(CREATE_DATE as date) = TRY_CAST(GETDATE() as date))            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE     where  (EXCEPTION_FLAG = 1 and TRY_CAST(CREATE_DATE as date) = TRY_CAST(GETDATE() as date))            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_RR_TABLE     where  (EXCEPTION_FLAG = 1 and TRY_CAST(CREATE_DATE as date) = TRY_CAST(GETDATE() as date))                IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE     where  (EXCEPTION_FLAG = 1 and TRY_CAST(CREATE_DATE as date) = TRY_CAST(GETDATE() as date))            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE     where  (EXCEPTION_FLAG = 1 and TRY_CAST(CREATE_DATE as date) = TRY_CAST(GETDATE() as date))            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR_TABLE     where  (EXCEPTION_FLAG = 1 and TRY_CAST(CREATE_DATE as date) = TRY_CAST(GETDATE() as date))            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE     where  (EXCEPTION_FLAG = 1 and TRY_CAST(CREATE_DATE as date) = TRY_CAST(GETDATE() as date))            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE     where  (EXCEPTION_FLAG = 1 and TRY_CAST(CREATE_DATE as date) = TRY_CAST(GETDATE() as date))            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_DAILY_MG_MIGRATION     SELECT  'MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as [CREATETIME]     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE     where  (EXCEPTION_FL
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: Exception_Count_Checks_Procedure_MG_Migration_History  CreateDate: 2025-06-26 17:37:04.790  ModifyDate: 2025-06-26 17:37:04.790  --- DEFINITION START ---  -- =============================================    -- Author:  <Miter, Matej>    -- Create date: <11/10/2021>    -- Description:     -- <INSTRUCTOR that orders trade must be different than dealer     -- otherwise exception will be raised>    -- =============================================        -- ***************VERSION CONTROL***************    --    -- *********************************************        CREATE PROCEDURE [dbo].[Exception_Count_Checks_Procedure_MG_Migration_History]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;                IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT 'VG_01_QUOTE_EXCEPTION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MULTI_FUND_ID) as EXCEPTION_COUNT,       GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_01_QUOTE_EXCEPTION_DMG_TABLE     where VG_01 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_01_QUOTE_EXCEPTION_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_01_QUOTE_EXCEPTION_EQ_TABLE     where quote_exception = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_01_QUOTE_EXCEPTION_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI_TABLE     where quote_exception = 1                IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_01_QUOTE_EXCEPTION_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_01_QUOTE_EXCEPTION_LL_TABLE     where quote_exception = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_06_NEW_ISSUE_ORDER_FLIPPING_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(CLIENT_EXECUTION_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_FI_TABLE     where NEW_ORDER_FLIPPING_EXCEPTION = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_06_NEW_ISSUE_ORDER_FLIPPING_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(CLIENT_EXECUTION_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_LL_TABLE     where NEW_ORDER_FLIPPING_EXCEPTION = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_07_NON_WINNING_QUOTE_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_07_NON_WINNING_QUOTE_DMG_TABLE     where VG_07 = 1                IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_07_NON_WINNING_QUOTE_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_07_NON_WINNING_QUOTE_EQ_TABLE     where NON_WINNING_QUOTE_EXCEPTION = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_07_NON_WINNING_QUOTE_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_07_NON_WINNING_QUOTE_FI_TABLE     where NWQ_EXCEPTION = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_07_NON_WINNING_QUOTE_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_07_NON_WINNING_QUOTE_LL_TABLE     where NWQ_EXCEPTION = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_08_Order_Inflation_FI_Table' as Table_name,       'FI' as Dealing_Desk,       count(CLIENT_EXECUTION_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_08_Order_Inflation_FI_Table     where ORDER_INFLATION_EXCEPTION = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_08_Order_Inflation_LL_Table' as Table_name,       'LL' as Dealing_Desk,       count(CLIENT_EXECUTION_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_08_Order_Inflation_LL_Table     where ORDER_INFLATION_EXCEPTION = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_09_TIMELY_EXECUTION_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_MM_TABLE     where VG_09 >= 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_09_TIMELY_EXECUTION_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_RR_TABLE     where VG_09 >= 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_09_TIMELY_EXECUTION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_DMG_TABLE     where VG_09 >= 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_09_TIMELY_EXECUTION_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_EQ_TABLE     where TIMELY_EXECUTION_EXCEPTION >= 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_09_TIMELY_EXECUTION_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE     where TIMELY_EXECUTION_EXCEPTION >= 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY   SELECT  'VG_09_TIMELY_EXECUTION_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_FX_TABLE     where VG_09 >= 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_09_TIMELY_EXECUTION_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_LL_TABLE     where TIMELY_EXECUTION_EXCEPTION >= 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_10_NAV_CUT_OFF_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_10_NAV_CUT_OFF_EQ_TABLE     where NAV_CUT_OFF_EXCEPTION = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_10_TIMELY_RECORDING_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_CASH_MM_TABLE     where VG_10 >= 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_10_TIMELY_RECORDING_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_CASH_RR_TABLE     where VG_10 >= 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_10_TIMELY_RECORDING_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_DMG_TABLE     where VG_10 >= 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_10_TIMELY_RECORDING_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_EQ_TABLE     where TIMELY_RECORDING_FLAG >= 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_10_TIMELY_RECORDING_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_FI_TABLE     where TIMELY_RECORDING_EXCEPTION >= 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_10_TIMELY_RECORDING_FX_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(TRADE_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_FX_TABLE     where VG_10 >= 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_10_TIMELY_RECORDING_LL_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_10_TIMELY_RECORDING_LL_TABLE     where TIMELY_RECORDING_EXCEPTION >= 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_11_TIMELY_RELEASE_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_11_TIMELY_RELEASE_EQ_TABLE     where TIMELY_RELEASE_EXCEPTION = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_13_ORDER_AGGREGATION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_13_ORDER_AGGREGATION_DMG_TABLE     where MERGE_EXCEPTION = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_13_ORDER_AGGREGATION_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_13_ORDER_AGGREGATION_EQ_TABLE     where MERGE_EXCEPTION = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_13_ORDER_AGGREGATION_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_13_ORDER_AGGREGATION_FI_TABLE     where MERGE_EXCEPTION = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_13_ORDER_AGGREGATION_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_13_ORDER_AGGREGATION_LL_TABLE     where MERGE_EXCEPTION = 1                IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_14_ORDER_PRIORITY_EXCEPTION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_DMG_TABLE     where ORDER_PRIORITY_EXCEPTION = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_14_ORDER_PRIORITY_EXCEPTION_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_EQ_TABLE     where ORDER_PRIORITY_EXCEPTION = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_14_ORDER_PRIORITY_EXCEPTION_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_FI_TABLE     where ORDER_PRIORITY_EXCEPTION = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_14_ORDER_PRIORITY_EXCEPTION_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_LL_TABLE     where ORDER_PRIORITY_EXCEPTION = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_15_AMENDMENT_FLAG_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_15_AMENDMENT_FLAG_DMG_TABLE     where VG_15 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_15_AMENDMENT_FLAG_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_15_AMENDMENT_FLAG_EQ_TABLE     where AMENDMENT_FLAG = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_15_AMENDMENT_FLAG_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_15_AMENDMENT_FLAG_FI_TABLE     where AMENDMENT_FLAG = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_15_AMENDMENT_FLAG_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_15_AMENDMENT_FLAG_LL_TABLE     where AMENDMENT_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE     where VG_16 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE     where VG_16 = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(TRADE_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE     where VG_16 = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE     where VG_17 = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE     where VG_17 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_17_COUNTERPARTY_DIRECTION_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE     where VG_17 = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_19_PT_AMENDMENT_FLAG_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_DMG_TABLE     where VG_19 = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL     INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_19_PT_AMENDMENT_FLAG_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_EQ_TABLE     where  AMENDMENT_FLAG = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_19_PT_AMENDMENT_FLAG_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_FI_TABLE     where  AMENDMENT_FLAG = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_19_PT_AMENDMENT_FLAG_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_LL_TABLE     where  AMENDMENT_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_19_PT_TBILLS_CP_CD_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_19_PT_TBILLS_CP_CD_CASH_TABLE     where  AMENDMENT_FLAG = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_25_INTERFUND_TRANSFER_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_25_INTERFUND_TRANSFER_DMG_TABLE     where  IT_FLAG = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_25_INTERFUND_TRANSFER_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_25_INTERFUND_TRANSFER_EQ_TABLE     where  IT_FLAG = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_25_INTERFUND_TRANSFER_FI_TABLE' as Table_name,       'FI' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_25_INTERFUND_TRANSFER_FI_TABLE     where  IT_FLAG = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_25_INTERFUND_TRANSFER_LL_TABLE' as Table_name,       'LL' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_25_INTERFUND_TRANSFER_LL_TABLE     where  IT_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_40_EXTENDED_SETTLEMENT_EXCEPTION_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_40_EXTENDED_SETTLEMENT_EXCEPTION_TABLE     where  SETTLEMENT_EXCEPTION = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE     where  VG_41 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_500_DEALER_LIMIT_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_500_DEALER_LIMIT_FX_TABLE     where  VG_500 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_501_SPOT_REFERENCE_RATE_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(TRADE_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_501_SPOT_REFERENCE_RATE_FX_TABLE     where  VG_501 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_601_OUT_OF_HOURS_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       coalesce(count(ORDER_ID),count(transaction_number)) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_601_OUT_OF_HOURS_CASH_TABLE     where  ORDER_EXCEPTION = 1 or TRADE_EXCEPTION = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_601_OUT_OF_HOURS_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       coalesce(count(ORDER_ID),count(TRADE_ID)) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_601_OUT_OF_HOURS_FX_TABLE     where  VG_601 = 1             IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_602_EOD_HOLDOVERS_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_602_EOD_HOLDOVERS_CASH_TABLE     where  VG_602 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_602_EOD_HOLDOVERS_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(FXM_ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_602_EOD_HOLDOVERS_FX_TABLE     where  VG_602 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_603_LARGE_TRADES_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_603_LARGE_TRADES_CASH_TABLE     where  EXCEPTION_FLAG = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_603_LARGE_TRADES_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_603_LARGE_TRADES_FX_TABLE     where VG_603 = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_603_LARGE_TRADES_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_603_LARGE_TRADES_FX_TABLE     where  VG_603 = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_603T_LARGE_TRADES_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_603T_LARGE_TRADES_CASH_TABLE     where  EXCEPTION_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_603T_LARGE_TRADES_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_603T_LARGE_TRADES_FX_TABLE     where  EXCEPTION_FLAG = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE     where  VG_604 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE     where  VG_604 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_604_CLIENT_ORDER_HANDLING_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_FX_TABLE     where  VG_604 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_607_BEST_EXECUTION_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE     where  VG_607_MM = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_607_BEST_EXECUTION_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_RR_TABLE     where  VG_607_RR = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_607_BEST_EXECUTION_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(TRADE_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE     where  VG_607 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_608_TA_KNOCKBACK_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_608_TA_KNOCKBACK_CASH_TABLE     where  VG_608 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_608_TA_KNOCKBACK_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(FXM_ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_608_TA_KNOCKBACK_FX_TABLE     where  VG_608 = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE     where  VG_609_CRR = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_610_TBILLS_CP_CD_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_610_TBILLS_CP_CD_CASH_TABLE     where  VG_610 = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_611_ORDER_AGGREGATION_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_MM_TABLE     where  VG_611 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_611_ORDER_AGGREGATION_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_RR_TABLE     where  VG_611 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_611_ORDER_AGGREGATION_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_611_ORDER_AGGREGATION_FX_TABLE     where  VG_611 = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_612_ORDER_ALLOCATION_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_MM_TABLE     where  VG_612 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_612_ORDER_ALLOCATION_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_RR_TABLE     where  VG_612 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_612_ORDER_ALLOCATION_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_612_ORDER_ALLOCATION_FX_TABLE     where  VG_612 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE     where  VG_613 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE     where  VG_613 = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(TRADE_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE     where  VG_613 = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_COMMISSION_EXCEPTION_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_COMMISSION_EXCEPTION_EQ_TABLE     where  COMMISSION_EXCEPTION = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_IMPLEMENTATION_SHORTFALL_EQ_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_IMPLEMENTATION_SHORTFALL_EQ_TABLE     where  IM_EXCEPTION = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'VG_MARKET_HIGH_LOW_TABLE' as Table_name,       'EQ' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.VG_MARKET_HIGH_LOW_TABLE     where  HL_EXCEPTION = 1            ---------------------REPORTING TABLES ----------------------------------------------------            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MULTI_FUND_EXCEPTION_TABLE' as Table_name,       'EQ/FI/LL' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MULTI_FUND_EXCEPTION_TABLE     where  (VG_01_3QR = 1) OR          (VG_01_3QO = 1) OR         (VG_01 = 1) OR         (VG_07 = 1) OR         (VG_10 = 1) OR         (VG_10_NAV = 1) OR         (VG_25 = 1)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'TRD_ORDER_LEVEL_EXCEPTION_TABLE' as Table_name,       'EQ/FI/LL' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.TRD_ORDER_LEVEL_EXCEPTION_TABLE     where  (VG_13 = 1) OR          (VG_14 = 1)                 IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'ORDER_LEVEL_EXCEPTION_TABLE' as Table_name,       'EQ/FI/LL' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.ORDER_LEVEL_EXCEPTION_TABLE     where  (VG_09_POLICY = 1) OR          (VG_09_5_DAY = 1) OR         (VG_09_10_DAY = 1) OR         (VG_09_20_DAY = 1) OR         (VG_09_40_DAY = 1) OR         (VG_09_80_DAY = 1) OR         (VG_09_160_DAY = 1) OR         (VG_11 = 1)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'ORDER_LEVEL_EXCEPTION_TABLE' as Table_name,       'EQ/FI/LL' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.ORDER_LEVEL_EXCEPTION_TABLE     where  (VG_09_POLICY = 1) OR          (VG_09_5_DAY = 1) OR         (VG_09_10_DAY = 1) OR         (VG_09_20_DAY = 1) OR         (VG_09_40_DAY = 1) OR         (VG_09_80_DAY = 1) OR         (VG_09_160_DAY = 1) OR         (VG_11 = 1)        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_PM_ORDER' as Table_name,       'EQ/FI/LL' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER     where  (VG_09_POLICY = 1) OR          (VG_09_5_DAY = 1) OR         (VG_09_10_DAY = 1) OR         (VG_09_20_DAY = 1) OR         (VG_09_40_DAY = 1) OR         (VG_09_80_DAY = 1) OR         (VG_09_160_DAY = 1) OR         (VG_11 = 1)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_TRD_ORDER_TABLE' as Table_name,       'EQ/FI/LL' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_TRD_ORDER_TABLE     where  (VG_13 = 1) OR          (VG_14 = 1)             IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_MULTI_FUND_ID_TABLE' as Table_name,       'EQ/FI/LL' as Dealing_Desk,       count(MULTI_FUND_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE     where  (VG_01_3QR = 1) OR          (VG_01_3QO = 1) OR         (VG_01 = 1) OR         (VG_07 = 1) OR         (VG_10 = 1) OR         (VG_10_NAV = 1) OR         (VG_25 = 1)            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_ORDER_PRIORITY_TABLE' as Table_name,       'EQ/FI/LL' as Dealing_Desk,       count(ORD_NUM) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_ORDER_PRIORITY_TABLE     where  (VG_13 = 1) OR          (VG_14 = 1)             IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_CLIENT_EXECUTION_TABLE' as Table_name,       'EQ/FI/LL' as Dealing_Desk,       count(Client_Execution_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE     where  (VG_08 = 1) OR          (VG_06 = 1)             IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_MFID_VG_01_QUOTE_EXCEPTION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MFID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_01_QUOTE_EXCEPTION_DMG_TABLE     where  EXCEPTION_FLAG = 1             IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_MFID_VG_07_NON_WINNING_QUOTE_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MFID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_07_NON_WINNING_QUOTE_DMG_TABLE     where  EXCEPTION_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_MFID_VG_10_TIMELY_RECORDING_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MFID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_DMG_TABLE     where  EXCEPTION_FLAG = 1             IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MFID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE     where  EXCEPTION_FLAG = 1         IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_MFID_VG_25_INTERFUND_TRANSFER_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MFID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_25_INTERFUND_TRANSFER_DMG_TABLE     where  EXCEPTION_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_MFID_VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count(MFID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE     where  EXCEPTION_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count([ORDER]) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE     where  EXCEPTION_FLAG = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_TRD_ORDER_VG_13_ORDER_AGGREGATION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count([ORDER]) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_13_ORDER_AGGREGATION_DMG_TABLE     where  EXCEPTION_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count([ORDER]) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE     where  EXCEPTION_FLAG = 1        IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_VG_15_AMENDMENT_FLAG_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count([ORDER]) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_VG_15_AMENDMENT_FLAG_DMG_TABLE     where  EXCEPTION_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE' as Table_name,       'DMG' as Dealing_Desk,       count([ORDER]) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE     where  EXCEPTION_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE     where  EXCEPTION_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_RR_TABLE     where  EXCEPTION_FLAG = 1                IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE     where  EXCEPTION_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE     where  EXCEPTION_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR_TABLE     where  EXCEPTION_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE     where  EXCEPTION_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE     where  EXCEPTION_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE     where  EXCEPTION_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_RR_TABLE     where  EXCEPTION_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE     where  EXCEPTION_FLAG = 1                 IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_CASH_TABLE     where  EXCEPTION_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_CASH_TABLE     where  EXCEPTION_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_PM_ORDER_VG_603_LARGE_TRADES_CASH_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_CASH_TABLE     where  EXCEPTION_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE     where  EXCEPTION_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE     where  EXCEPTION_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_MM_TABLE     where  EXCEPTION = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_RR_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_RR_TABLE     where  EXCEPTION = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_MM_TABLE' as Table_name,       'Cash' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_MM_TABLE     where  EXCEPTION = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_MM_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_MM_TABLE     where  EXCEPTION = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE     where  EXCEPTION_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE     where  EXCEPTION_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE     where  EXCEPTION_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE     where  EXCEPTION_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_FX_TABLE     where  EXCEPTION_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE     where  EXCEPTION_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE     where  EXCEPTION_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE     where  EXCEPTION_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE     where  EXCEPTION_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE     where  EXCEPTION_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(ORDER_ID) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE     where  EXCEPTION_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY     SELECT  'MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE' as Table_name,       'FX' as Dealing_Desk,       count(TRANSACTION_NUMBER) as [EXCEPTION_COUNT]     ,GETDATE() as CHECK_DATE     FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE     where  EXCEPTION_FLAG = 1            IF OBJECT_ID('VISTA_STAGING.dbo.EXCEPTION_COUNT_CHECKS_MG_MIGRATION_HISTORY', 'U') IS NOT NULL      INSERT INTO VISTA_
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: EXCEPTION_CREATETIME_TABLE  CreateDate: 2025-06-26 17:37:21.163  ModifyDate: 2025-06-26 17:37:21.163  --- DEFINITION START ---  -- =============================================    -- Author:  <da Costa, David>    -- Create date: <20/10/2017>    -- Description:     -- <If difference between todays date and Approved Date    -- for live trades (not cancelled/expired and 100% filled)    -- is > 4 days raise exception. Raise exceptions for each    -- of the following date breaches >4, >9, >19, >39, >79 and    -- >159 days. Trigger dealer comments for Orders not being     -- 100% filled>    -- =============================================        CREATE PROCEDURE [dbo].[EXCEPTION_CREATETIME_TABLE]     -- Add the parameters for the stored procedure here     -- @Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;            --Insert statements for procedure here     --Drop temporary timely_exec table if it exists         IF OBJECT_ID('tempdb..#vg_09_unpivot_table', 'U') IS NOT NULL DROP TABLE #vg_09_unpivot_table         SELECT     te.ORD_NUM AS ID,     te.EXCEPTION,     te.EXCEPTION_VAL     INTO #vg_09_unpivot_table     FROM VISTA_REPORTING.dbo.VG_09_TIMELY_EXECUTION_EQ_TABLE te     UNPIVOT     (EXCEPTION_VAL      FOR EXCEPTION IN        (TIMELY_EXECUTION_EXCEPTION_5,        TIMELY_EXECUTION_EXCEPTION_10,        TIMELY_EXECUTION_EXCEPTION_20,        TIMELY_EXECUTION_EXCEPTION_40,        TIMELY_EXECUTION_EXCEPTION_80,        TIMELY_EXECUTION_EXCEPTION_160       )      ) te         SELECT * FROM #vg_09_unpivot_table         IF OBJECT_ID('tempdb..#ord_reason_table', 'U') IS NOT NULL DROP TABLE #ord_reason_table          SELECT     CONCAT(RTRIM(up.ID),'_09',SUBSTRING(up.EXCEPTION, 27, LEN(up.EXCEPTION))) AS ID,     '09' AS VG     INTO #ord_reason_table     FROM #vg_09_unpivot_table up     UNION     SELECT     CONCAT(RTRIM(rec.PLACEMENT_NUM ),'_10'),     '10' AS VG     FROM VISTA_REPORTING.dbo.VG_10_TIMELY_RECORDING_EQ_TABLE rec     UNION     SELECT     CONCAT(RTRIM(rel.ORD_NUM), '_11') AS ID,     '11' AS VG     FROM VISTA_REPORTING.dbo.VG_11_TIMELY_RELEASE_EQ_TABLE rel     UNION     SELECT     CONCAT(RTRIM(oa.TRD_ORD),'_13') AS ID,     '13' AS VG     FROM VISTA_REPORTING.dbo.VG_13_ORDER_AGGREGATION_EQ_TABLE oa     UNION     SELECT     CONCAT(RTRIM(op.ORD_NUM),'_14') AS ID,     '14' AS VG     FROM VISTA_REPORTING.dbo.VG_13_ORDER_PRIORITY_EXCEPTION_TABLE op     ORDER BY VG         SELECT * FROM #ord_reason_table         IF OBJECT_ID('VISTA_REPORTING.dbo.CREATE_TIME_TABLE', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.CREATE_TIME_TABLE          SELECT      ID AS ID,     GETDATE() AS CREATE_DATETIME     INTO VISTA_REPORTING.dbo.CREATE_TIME_TABLE     FROM #ord_reason_table             END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: EXCEPTION_REASON_TABLE  CreateDate: 2025-06-26 17:37:56.327  ModifyDate: 2025-06-26 17:37:56.327  --- DEFINITION START ---  -- =============================================    -- Author:  <da Costa, David>    -- Create date: <20/10/2017>    -- Description:     -- <Table for VISTA to list reasons for exceptions    -- across all levels (MULTI_FUND, ORDER, TRADER and    -- PLACEMENT). Data is pulled in from tables that    -- have been aggregated by level>    -- =============================================        CREATE PROCEDURE [dbo].[EXCEPTION_REASON_TABLE]     -- Add the parameters for the stored procedure here     -- @Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;            --Insert statements for procedure here     --Drop temporary timely_exec table if it exists         IF OBJECT_ID('VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE          SELECT      '' AS COMMENT_ID,     '' AS ID,     --ID AS ID,     '' AS TOUCH_COUNT,     '' AS REASON,     '' AS COMMENT,     '' AS STATUS,     '' AS USERID,     '' AS CREATED,     '' AS UPDATED     INTO VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE     --FROM VISTA_REPORTING.dbo.EXCEPTION_CREATETIME_TABLE            END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: EXTENDED_SETTLE  CreateDate: 2025-06-26 17:39:37.240  ModifyDate: 2025-06-26 17:39:37.240  --- DEFINITION START ---  -- =============================================    -- Author:  <da Costa, David>    -- Create date: <20/10/2017>    -- Description:     -- <If difference between todays date and Approved Date    -- for live trades (not cancelled/expired and 100% filled)    -- is > 4 days raise exception. Raise exceptions for each    -- of the following date breaches >4, >9, >19, >39, >79 and    -- >159 days. Trigger dealer comments for Orders not being     -- 100% filled>    -- =============================================            -- ***************VERSION CONTROL***************    -- 11/12/2017 - DDC: Changes made to ensure that script     -- only ever updates existing records always ensuring     -- the highest level exception is reported and     -- inserts new ones if no exception has been raised.        -- 15/12/2017 - DDC Changed script to take the MIN_AUTH     -- value from the #min_auth table and not re-calculate the    -- minimum AUTH_TIME from the PM_ORDERS table as this led     -- to NULL values and seemed unecessary. FACE included in     -- #tee_flag table as it appears that it is possible to    -- have multiple FACE values for the same PM Order number.        -- 15/12/2017 - DDC Script changed to take FACE and FILL_AMT    -- at latest AUTH_TIME to improve the issue surrounding     -- the possibility of changing FACE values. The filled logic has    -- also been changed to replace the SUM(FILL_AMT) with the     -- FILL_AMT at the latest AUTH_TIME        -- 04/01/2018 - DDC: Amendment made to only run  exception    -- calculations on the data for the day the exception is     -- being pulled    -- *********************************************        CREATE PROCEDURE [dbo].[EXTENDED_SETTLE]     -- Add the parameters for the stored procedure here     -- @Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;             DECLARE @Date1 DATE, @Date2 DATE--@DATE_FILTER DATE      --SET @DATE_FILTER = CONVERT(DATE, GETDATE()) --Set date filter to only select data from current pull date     SET @Date1 = (select min(AUTH_TIME) from VISTA_REPORTING.dbo.PM_ORDERS) --Set the variables used to create the weekday table     SET @Date2 = DATEADD(day, 160, GETDATE())             IF OBJECT_ID('tempdb..#date_range', 'U') IS NOT NULL DROP TABLE #date_range     SELECT      DATEADD(DAY,number+1,@Date1) as [DATE],      DATEPART(weekday, DATEADD(DAY,number,@Date1)) as WEEKDAY --create a table that assigns a day of the week to every date following the sonvention that Monday=1, Tuesday=2, etc...     into #date_range     FROM master..spt_values     WHERE type = 'P'     AND DATEADD(DAY,number+1,@Date1) < @Date2             IF OBJECT_ID('tempdb..#min_auth', 'U') IS NOT NULL DROP TABLE #min_auth     select distinct      po.ORD_NUM,      CONVERT(DATE, MIN(po.AUTH_TIME)) as MIN_AUTH     into #min_auth     from VISTA_REPORTING.dbo.PM_ORDERS po     group by po.ORD_NUM             IF OBJECT_ID('tempdb..#max_settle', 'U') IS NOT NULL DROP TABLE #max_settle     select distinct      o.ORD_NUM,      MAX(o.SETTLE_DATE) as MAX_SETTLE     into #max_settle     from VISTA_STAGING.dbo.ORDERS as o     inner join VISTA_REPORTING.dbo.ORDERS_CROSS as oc on o.ORD_NUM=oc.PM_ORD     group by o.ORD_NUM     order by o.ORD_NUM             IF OBJECT_ID('tempdb..#weekends', 'U') IS NOT NULL DROP TABLE #weekends     SELECT      o.ORD_NUM,      o.MIN_AUTH,      COUNT([DATE]) as WEEKEND_COUNT --count number of weekend days between min(AUTH_TIME) and current Datetime     into #weekends     FROM #min_auth o     inner join #max_settle ms on o.ORD_NUM=ms.ORD_NUM     left join #date_range d on      ([DATE] between o.MIN_AUTH and ms.MAX_SETTLE) and (WEEKDAY in (6,7))     group by o.ORD_NUM, o.MIN_AUTH              IF OBJECT_ID('tempdb..#hols', 'U') IS NOT NULL DROP TABLE #hols     SELECT      o.ORD_NUM,      o.MIN_AUTH,      COUNT(h.CLOSURE_DATES) as HOLIDAY_COUNT --count number of days between min(AUTH_TIME) and current Datetime that are UK holiday days     into #hols     FROM #min_auth o     inner join #max_settle ms on o.ORD_NUM=ms.ORD_NUM     left join VISTA_STAGING.dbo.HOLIDAYS h on      (CONVERT(DATE, h.CLOSURE_DATES, 103) between o.MIN_AUTH and ms.MAX_SETTLE) and COUNTRY_CODE='GB'     group by o.ORD_NUM, o.MIN_AUTH              IF OBJECT_ID('VISTA_REPORTING.dbo.EXTENDED_SETTLE_LENGTHS', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.EXTENDED_SETTLE_LENGTHS     SELECT       po.ORD_NUM,      po.DEALING_DESK,      mo.MIN_AUTH,      ms.MAX_SETTLE,      --t.FUND,      w.WEEKEND_COUNT,      h.HOLIDAY_COUNT,      ((DATEDIFF(DAY, mo.MIN_AUTH, ms.MAX_SETTLE))-HOLIDAY_COUNT-WEEKEND_COUNT) as date_diff      INTO VISTA_REPORTING.dbo.EXTENDED_SETTLE_LENGTHS      FROM VISTA_REPORTING.dbo.PM_ORDERS po      LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD=po.ORD_NUM      LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM=oc.TRD_ORD      LEFT JOIN VISTA_REPORTING.dbo.INSTRUMENTS i ON i.CUSIP=po.CUSIP      LEFT JOIN #hols h ON h.ORD_NUM=po.ORD_NUM      LEFT JOIN #weekends w ON w.ORD_NUM=po.ORD_NUM      LEFT JOIN #min_auth mo ON mo.ORD_NUM=po.ORD_NUM      LEFT JOIN #max_settle ms ON ms.ORD_NUM=po.ORD_NUM      GROUP BY       po.ORD_NUM,       po.DEALING_DESK,       w.WEEKEND_COUNT,       h.HOLIDAY_COUNT,       ms.MAX_SETTLE,       mo.MIN_AUTH           IF OBJECT_ID('tempdb..#settle_changes', 'U') IS NOT NULL DROP TABLE #settle_changes         select o.ORD_NUM, COUNT(DISTINCT o.SETTLE_DATE) - 1 as NUM_SETTLE_CHANGES, MAX(TOUCH_COUNT) as MAX_TOUCH     into #settle_changes     from VISTA_STAGING.dbo.ORDERS as o     inner join VISTA_REPORTING.dbo.ORDERS_CROSS as oc on o.ORD_NUM=oc.PM_ORD     group by ORD_NUM         IF OBJECT_ID('VISTA_REPORTING.dbo.EXTENDED_SETTLE_CHANGES', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.EXTENDED_SETTLE_CHANGES         select distinct o1.ORD_NUM,          o2.NUM_SETTLE_CHANGES,          t.FUND,         o1.PM,          o1.FACE,          o1.CUSIP,         i2.SM_SEC_GROUP,         i2.SM_SEC_TYPE     into VISTA_REPORTING.dbo.EXTENDED_SETTLE_CHANGES     from VISTA_STAGING.dbo.ORDERS as o1     inner join #settle_changes as o2 on o1.ORD_NUM=o2.ORD_NUM and o1.TOUCH_COUNT=o2.MAX_TOUCH     --left join VISTA_REPORTING.dbo.INSTRUMENTS as i on o1.CUSIP=i.CUSIP and CONVERT(DATE, o1.AUTH_TIME)=i.DATE     LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM=o1.ORD_NUM     OUTER APPLY (SELECT TOP 1 i.* FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=coalesce(t.CUSIP, o1.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(t.EXECUTION_TIME, o1.AUTH_TIME)))         ORDER BY i.DATE DESC) as i2     WHERE o2.NUM_SETTLE_CHANGES > 0     ORDER BY o1.ORD_NUM DESC         IF OBJECT_ID('VISTA_REPORTING.dbo.EXTENDED_SETTLE_CHANGES_DETAIL', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.EXTENDED_SETTLE_CHANGES_DETAIL         select distinct o1.ORD_NUM,          o1.SETTLE_DATE     into VISTA_REPORTING.dbo.EXTENDED_SETTLE_CHANGES_DETAIL     from VISTA_STAGING.dbo.ORDERS as o1     inner join #settle_changes as o2 on o1.ORD_NUM=o2.ORD_NUM     WHERE o2.NUM_SETTLE_CHANGES > 0     ORDER BY o1.ORD_NUM, o1.SETTLE_DATE        END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: EXTERNAL_PRICING_DATA_EQDD  CreateDate: 2025-06-26 17:39:53.577  ModifyDate: 2025-06-26 17:39:53.577  --- DEFINITION START ---      -- =============================================    -- Author:  <da Costa, David>    -- Create date: <10/12/2020>    -- Description:     -- Generate Fixed Income data for     -- PRICE_BENCHMARK calculations    -- =============================================        -- ******************* NOTES *******************    -- *********************************************            CREATE PROCEDURE [dbo].[EXTERNAL_PRICING_DATA_EQDD]               AS    BEGIN         --Equity     IF OBJECT_ID('tempdb..#temp_aladdin_data', 'U') IS NOT NULL DROP TABLE #temp_aladdin_data     SELECT DISTINCT      t.TRD_TRADE_DATE,      COALESCE(i2.CUSIP, i3.CUSIP) AS CUSIP     INTO #temp_aladdin_data     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS o ON o.ORD_NUM=t.ORD_NUM     OUTER APPLY (SELECT TOP 1 i.* FROM VISTA_REPORTING.dbo.INSTRUMENTS i             WHERE (i.CUSIP=t.CUSIP AND i.DATE<=CONVERT(DATE, t.EXECUTION_TIME))             ORDER BY i.DATE DESC) as i2     OUTER APPLY (SELECT TOP 1 i.* FROM VISTA_REPORTING.dbo.INSTRUMENTS i             WHERE (i.CUSIP=o.CUSIP AND i.DATE<=CONVERT(DATE, o.AUTH_TIME))             ORDER BY i.DATE DESC) as i3     WHERE COALESCE(i2.CUSIP, i3.CUSIP) IS NOT NULL     AND o.DEALING_DESK = 'Equity'             IF OBJECT_ID('tempdb..#temp_external_price', 'U') IS NOT NULL DROP TABLE #temp_external_price     SELECT DISTINCT       ept.CUSIP,       CONVERT(VARCHAR, ept.TRD_TRADE_DATE, 103) AS TRD_TRADE_DATE,      ept.UNIVERSAL_BID_PRICE,       ept.UNIVERSAL_ASK_PRICE,       ept.ACCUMULATED_VOLUME_UNSCALED,       ept.VOLUME_WEIGHTED_AVERAGE_PRICE_VOLUME,       ept.OPEN_INTEREST,       ept.ASSET_SWAP_SPREAD,       ept.BENCHMARK_SPREAD,       ept.SWAP_SPREAD,       ept.Z_SPREAD,       ept.PULL_DATE     INTO #temp_external_price     FROM VISTA_STAGING.dbo.EXTERNAL_PRICING_TABLE ept     INNER JOIN (SELECT          TRD_TRADE_DATE,          CUSIP,          MAX(TOUCH_COUNT) AS MAX_TOUCH         FROM VISTA_STAGING.dbo.EXTERNAL_PRICING_TABLE        GROUP BY          TRD_TRADE_DATE,          CUSIP) ept2 ON ept2.TRD_TRADE_DATE = ept.TRD_TRADE_DATE                        AND ept2.CUSIP = ept.CUSIP                        AND ept2.MAX_TOUCH = ept.TOUCH_COUNT     WHERE EXISTS (SELECT 1 FROM #temp_aladdin_data tad WHERE tad.CUSIP = ept.CUSIP AND tad.TRD_TRADE_DATE = ept.TRD_TRADE_DATE)        AND ept.PULL_DATE > ISNULL((SELECT MAX(PULL_DATE) FROM VISTA_STAGING.dbo.REUTERS_EQUITY), '1900-01-01')              INSERT INTO VISTA_STAGING.dbo.REUTERS_EQUITY (CUSIP,                    TRD_TRADE_DATE,                    UNIVERSAL_BID_PRICE,                    UNIVERSAL_ASK_PRICE,                    VOLUME,                    VOLUME_WEIGHTED_AVERAGE_PRICE_VOLUME,                    OPEN_INTEREST,                    ASSET_SWAP_SPREAD,                    BENCHMARK_SPREAD,                    SWAP_SPREAD,                    Z_SPREAD,                    PULL_DATE)     SELECT DISTINCT      CUSIP,       TRD_TRADE_DATE,       UNIVERSAL_BID_PRICE,       UNIVERSAL_ASK_PRICE,       ACCUMULATED_VOLUME_UNSCALED,       VOLUME_WEIGHTED_AVERAGE_PRICE_VOLUME,       OPEN_INTEREST,       ASSET_SWAP_SPREAD,       BENCHMARK_SPREAD,       SWAP_SPREAD,       Z_SPREAD,       PULL_DATE     FROM #temp_external_price                 END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: EXTERNAL_PRICING_DATA_FIDD  CreateDate: 2025-06-26 17:40:08.000  ModifyDate: 2025-06-26 17:40:08.000  --- DEFINITION START ---      -- =============================================    -- Author:  <da Costa, David>    -- Create date: <10/12/2020>    -- Description:     -- Generate Fixed Income data for     -- PRICE_BENCHMARK calculations    -- =============================================        -- ******************* NOTES *******************    -- *********************************************            CREATE PROCEDURE [dbo].[EXTERNAL_PRICING_DATA_FIDD]          AS    BEGIN         --Fixed Income     IF OBJECT_ID('tempdb..#temp_aladdin_data', 'U') IS NOT NULL DROP TABLE #temp_aladdin_data     SELECT DISTINCT      t.TRD_TRADE_DATE,      COALESCE(i2.CUSIP, i3.CUSIP) AS CUSIP     INTO #temp_aladdin_data     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS o ON o.ORD_NUM=t.ORD_NUM     OUTER APPLY (SELECT TOP 1 i.* FROM VISTA_REPORTING.dbo.INSTRUMENTS i             WHERE (i.CUSIP=t.CUSIP AND i.DATE<=CONVERT(DATE, t.EXECUTION_TIME))             ORDER BY i.DATE DESC) as i2     OUTER APPLY (SELECT TOP 1 i.* FROM VISTA_REPORTING.dbo.INSTRUMENTS i             WHERE (i.CUSIP=o.CUSIP AND i.DATE<=CONVERT(DATE, o.AUTH_TIME))             ORDER BY i.DATE DESC) as i3     WHERE COALESCE(i2.CUSIP, i3.CUSIP) IS NOT NULL     AND o.DEALING_DESK = 'Fixed Income'             IF OBJECT_ID('tempdb..#temp_external_price', 'U') IS NOT NULL DROP TABLE #temp_external_price     SELECT DISTINCT      ept.CUSIP,       CONVERT(VARCHAR, ept.TRD_TRADE_DATE, 103) AS TRD_TRADE_DATE,      ept.UNIVERSAL_BID_PRICE,       ept.UNIVERSAL_ASK_PRICE,       ept.ACCUMULATED_VOLUME_UNSCALED,       ept.VOLUME_WEIGHTED_AVERAGE_PRICE_VOLUME,       ept.OPEN_INTEREST,       ept.ASSET_SWAP_SPREAD,       ept.BENCHMARK_SPREAD,       ept.SWAP_SPREAD,       ept.Z_SPREAD,       ept.PULL_DATE      INTO #temp_external_price     FROM VISTA_STAGING.dbo.EXTERNAL_PRICING_TABLE ept     INNER JOIN (SELECT          TRD_TRADE_DATE,          CUSIP,          MAX(TOUCH_COUNT) AS MAX_TOUCH         FROM VISTA_STAGING.dbo.EXTERNAL_PRICING_TABLE        GROUP BY          TRD_TRADE_DATE,          CUSIP) ept2 ON ept2.TRD_TRADE_DATE = ept.TRD_TRADE_DATE                        AND ept2.CUSIP = ept.CUSIP                        AND ept2.MAX_TOUCH = ept.TOUCH_COUNT     WHERE EXISTS (SELECT 1 FROM #temp_aladdin_data tad WHERE tad.CUSIP = ept.CUSIP AND tad.TRD_TRADE_DATE = ept.TRD_TRADE_DATE)        AND ept.PULL_DATE > ISNULL((SELECT MAX(PULL_DATE) FROM VISTA_STAGING.dbo.REUTERS), '1900-01-01')             INSERT INTO VISTA_STAGING.dbo.REUTERS (CUSIP,                  TRD_TRADE_DATE,                  UNIVERSAL_BID_PRICE,                  UNIVERSAL_ASK_PRICE,                  VOLUME,                  VWAP_PRICE,                  OPEN_INTEREST,                  ASSET_SWAP_SPREAD,                  BENCHMARK_SPREAD,                  SWAP_SPREAD,                  Z_SPREAD,                  PULL_DATE)     SELECT DISTINCT      CUSIP,       TRD_TRADE_DATE,       UNIVERSAL_BID_PRICE,       UNIVERSAL_ASK_PRICE,       ACCUMULATED_VOLUME_UNSCALED,       VOLUME_WEIGHTED_AVERAGE_PRICE_VOLUME,       OPEN_INTEREST,       ASSET_SWAP_SPREAD,       BENCHMARK_SPREAD,       SWAP_SPREAD,       Z_SPREAD,       PULL_DATE     FROM #temp_external_price                 END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: FAIR_ALLOCATION  CreateDate: 2025-06-26 17:40:30.077  ModifyDate: 2025-06-26 17:40:30.077  --- DEFINITION START ---  -- =============================================    -- Author:  <Author,,Name>    -- Create date: <Create Date,,>    -- Description: <Description,,>    -- =============================================    CREATE PROCEDURE [dbo].[FAIR_ALLOCATION]        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         -- filter orders cross    IF OBJECT_ID('tempdb..#temp_master_pm', 'U') IS NOT NULL DROP TABLE #temp_master_pm    SELECT DISTINCT     ORD_NUM,     Dealer,     DEALING_DESK,     FM,     [General Comment],     AUTH_TIME,     Instruction,     Purpose,     Ccy,     [Sett Ccy],     ISIN,     CUSIP,     SEDOL,     SEC_DESC1,     [PLATFORM],     Method,     PRIMARY_MARKET,     [Ord Amt],     [Booked Amt],     Px,     [Active Date],     MULTI_FUND_ID,     [Trade Date],     [Exec Date],     [Entry Date],     [Dealer Comment],     [TE Type],     Timespan,     Fund,     [Send Date],     [First Execution],     [First Execution Timespan],     INST_TYPE,     [Average daily volume],     [Remain Amt as percent of daily volume],     [Internal Comment]    INTO #temp_master_pm    FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER            IF OBJECT_ID('tempdb..#trades_temp', 'U') IS NOT NULL DROP TABLE #trades_temp     SELECT DISTINCT     mp.ORD_NUM,     t.MULTI_FUND_ID,     t.TOUCH_COUNT,     t.PLACEMENT_NUM,    -- t.CLIENT_EXECUTION_NUM,     t.EXECUTION_TIME,     -- t.ORD_NUM,      t.TRAN_TYPE,      t.TRD_COUNTERPARTY,      t.TRD_EX_BROKER_CODE,      t.TRD_TRADE_DATE,      t.TRD_PRICE,      t.TRD_ORIG_FACE,      t.[Booked Amt],     mp.[Ord Amt] - t.[Booked Amt] as [Remain Amt]    INTO #trades_temp    FROM (SELECT DISTINCT ORD_NUM, [Ord Amt] FROM #temp_master_pm) mp    left join (SELECT DISTINCT TRD_ORD, PM_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc    on oc.PM_ORD = mp.ORD_NUM    left join (SELECT DISTINCT ORD_NUM, t.MULTI_FUND_ID, TOUCH_COUNT, PLACEMENT_NUM, EXECUTION_TIME, TRAN_TYPE, TRD_COUNTERPARTY, TRD_EX_BROKER_CODE, TRD_TRADE_DATE, TRD_PRICE,              TRD_ORIG_FACE, mt.[Booked Amt] FROM VISTA_REPORTING.dbo.TRADES t         INNER JOIN (SELECT DISTINCT MULTI_FUND_ID, MAX(TOUCH_COUNT) as MAX_TOUCH, SUM(ABS(TRD_ORIG_FACE)) as [Booked Amt] FROM VISTA_REPORTING.dbo.TRADES GROUP BY MULTI_FUND_ID) mt          on t.MULTI_FUND_ID = mt.MULTI_FUND_ID and t.TOUCH_COUNT = mt.MAX_TOUCH) t    on oc.TRD_ORD = t.ORD_NUM        IF OBJECT_ID('tempdb..#concat_ord', 'U') IS NOT NULL DROP TABLE #concat_ord    SELECT      ORD_NUM,     MFID_concat = STUFF((        SELECT '| ' + CAST(MULTI_FUND_ID AS VARCHAR(50))         FROM (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID FROM #trades_temp) Results        WHERE (t.ORD_NUM = Results.ORD_NUM)         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)'),1,2,''),     TRADE_DATE_concat = STUFF((        SELECT '| ' + CAST(TRD_TRADE_DATE AS VARCHAR(50))         FROM (SELECT DISTINCT ORD_NUM, TRD_TRADE_DATE FROM #trades_temp) Results        WHERE (t.ORD_NUM = Results.ORD_NUM)         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)'),1,2,''),     EXECUTION_TIME_concat = STUFF((        SELECT '| ' + CONCAT(CONVERT(VARCHAR(25),CONVERT(date,NULLIF(EXECUTION_TIME,'')),103),' ',CONVERT(TIME(0),NULLIF(EXECUTION_TIME,'')))         FROM (SELECT DISTINCT ORD_NUM, EXECUTION_TIME FROM #trades_temp) Results        WHERE (t.ORD_NUM = Results.ORD_NUM)         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)'),1,2,''),     TRD_ORIG_FACE_concat = STUFF((        SELECT '| ' + CAST(Format(TRD_ORIG_FACE, 'N2') AS VARCHAR(50))         FROM (SELECT DISTINCT ORD_NUM, TRD_ORIG_FACE FROM #trades_temp) Results        WHERE (t.ORD_NUM = Results.ORD_NUM)         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)'),1,2,''),     REMAIN_AMT_concat = STUFF((        SELECT '| ' + CAST(format([Remain Amt],'N2') AS VARCHAR(50))         FROM (SELECT DISTINCT ORD_NUM, [Remain Amt] FROM #trades_temp) Results        WHERE (t.ORD_NUM = Results.ORD_NUM)         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)'),1,2,'')     INTO #concat_ord    FROM (SELECT DISTINCT ORD_NUM FROM #trades_temp) t    GROUP BY ORD_NUM            -- filter orders cross    IF OBJECT_ID('VISTA_REPORTING.dbo.FAIR_ALLOCATION', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.FAIR_ALLOCATION    SELECT DISTINCT      pmo.ORD_NUM AS PM_ORD,      CONVERT(VARCHAR(50),pmo.DEALER) AS Dealer,      pmo.DEALING_DESK,      CONVERT(VARCHAR(50),pmo.FM) AS FM,      CONVERT(VARCHAR(250),pmo.[General Comment]) as [General Comment],      pmo.AUTH_TIME,      CONVERT(DATETIME,NULL) AS CREATE_DATE, -- We don't have a create date for Fair Allocation so this is a placeholder      t.TRAN_TYPE as SIDE,      conc_ord.MFID_concat as MFID,      COALESCE(t.TRD_EX_BROKER_CODE,t.TRD_COUNTERPARTY) as EXECUTED_CP,      conc_ord.TRADE_DATE_concat as TRADE_DATE,      conc_ord.EXECUTION_TIME_concat as EXECUTION_TIME,      t.TRD_PRICE as PRICE,      conc_ord.TRD_ORIG_FACE_concat as SIZE      ,pmo.Instruction      ,pmo.Purpose      ,pmo.ord_num as PM_ORDER      --,pmo.PM as FM      --,pmo.AUTH_TIME      --,pmo.Side      ,pmo.Ccy      ,pmo.[Sett Ccy]      ,pmo.ISIN      ,pmo.CUSIP      ,pmo.SEDOL      ,pmo.SEC_DESC1      --,CONVERT(VARCHAR(50),pmo.TRADER_FULL_NAME) AS Dealer      ,pmo.Platform      ,pmo.Method      ,pmo.PRIMARY_MARKET      ,pmo.[Ord Amt]      ,conc_ord.REMAIN_AMT_concat as [Remain Amt]      ,pmo.[Booked Amt]      ,pmo.Px      ,pmo.[Active Date]      ,pmo.[Send Date] as SEND_DATE       ,pmo.MULTI_FUND_ID      ,pmo.[Trade Date]      ,pmo.[Exec Date]      ,pmo.[Entry Date]      ,pmo.[Dealer Comment]       --,pmo.[General Comment]      ,pmo.[TE Type]      ,pmo.Timespan      ,pmo.Fund      ,pmo.[First Execution]      ,pmo.[First Execution Timespan] as [First Execution Timespan Minutes]      ,pmo.INST_TYPE      ,pmo.[Average daily volume]      ,pmo.[Remain Amt as percent of daily volume]      --,pmo.DEALING_DESK      ,pmo.[Internal Comment]    INTO VISTA_REPORTING.dbo.FAIR_ALLOCATION    FROM #temp_master_pm pmo    LEFT JOIN (SELECT DISTINCT STATUS,Exception_Type,PM_ORD FROM VISTA_REPORTING.dbo.COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE) ex ON pmo.ORD_NUM = ex.PM_ORD AND ex.Exception_Type = 'FA'    LEFT JOIN (SELECT DISTINCT ORD_NUM, TRD_PRICE, TRAN_TYPE, TRD_EX_BROKER_CODE, TRD_COUNTERPARTY  FROM #trades_temp) t on pmo.ORD_NUM = t.ORD_NUM    LEFT JOIN (SELECT DISTINCT SAMPLED_DATE AS CREATE_TIME, ORD_NUM FROM  [VISTA_REPORTING].[dbo].[SAMPLED_ORDERS_COMPLIANCE]) soc on soc.ORD_NUM = pmo.ORD_NUM    LEFT JOIN #concat_ord conc_ord    on pmo.ORD_NUM = conc_ord.ORD_NUM        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: FILTER_ORDERS  CreateDate: 2025-06-26 17:40:45.767  ModifyDate: 2025-06-26 17:40:45.767  --- DEFINITION START ---  -- =============================================    -- Author:  <Author,,Name>    -- Create date: <Create Date,,>    -- Description: <Description,,>    -- =============================================    CREATE PROCEDURE [dbo].[FILTER_ORDERS]        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         -- filter orders cross     IF OBJECT_ID('VISTA_TEMP_1.dbo.ORDERS_CROSS_FILTERED', 'U') IS NOT NULL DROP TABLE VISTA_TEMP_1.dbo.ORDERS_CROSS_FILTERED     SELECT *     INTO VISTA_TEMP_1.dbo.ORDERS_CROSS_FILTERED     FROM VISTA_STAGING.[dbo].[ORDERS_CROSS]       where TRD_ORD in (400326          ,325325          ,400408          ,375319          ,475263          ,375446          ,325918          ,351078          ,425509          ,400426          ,325425          ,475253          ,375419          ,375546          ,375515          ,475413          ,375830          ,425314          ,350705          ,976333          ,375870          ,375970          ,502065          ,502165          ,300628          ,300728          ,425856          ,425956          ,400620          ,400520          ,375806          ,375906          ,476053          ,476153          ,400308          ,425891          ,375543          ,426056          ,375770          ,526742          ,475513          ,375536          ,376447          ,350427          ,375306          ,325472          ,400631          ,402408          ,375743          ,375112          ,350611          ,375882          ,350603          ,275287          ,425338          ,351257          ,401177          ,400855          ,675200          ,375406          ,325572          ,400201          ,300416          ,400288          ,500117          ,525842          ,350475          ,402508          ,451179          ,351278          ,450434          ,325610          ,325710          ,325840          ,426191          ,426291          ,425332          ,425232          ,451479          ,451379          ,326140          ,325940          ,400252          ,377315          ,326872          ,400754          ,451279          ,401620          ,300249          ,400269          ,425155          ,400369          ,425302          ,425402          ,450350          ,475380          ,475780          ,475980          ,500192          ,500392          ,550190          ,425182          ,425382          ,600642          ,425582          ,425782          ,450270          ,600242          ,600442          ,600642          ,602242          ,602442          ,602642          ,601942          ,602042          ,601442          ,601042          )                 -- filter orders_unsplit     IF OBJECT_ID('VISTA_TEMP_1.dbo.ORDERS_FILTERED', 'U') IS NOT NULL DROP TABLE VISTA_TEMP_1.dbo.ORDERS_FILTERED         SELECT o.*     INTO VISTA_TEMP_1.dbo.ORDERS_FILTERED     FROM VISTA_STAGING.[dbo].ORDERS as o     INNER JOIN [VISTA_TEMP_1].[dbo].[ORDERS_CROSS_FILTERED] as oc on o.ORD_NUM = oc.TRD_ORD         UNION          SELECT o.*     FROM VISTA_STAGING.[dbo].ORDERS as o     INNER JOIN [VISTA_TEMP_1].[dbo].[ORDERS_CROSS_FILTERED] as oc on o.ORD_NUM = oc.PM_ORD         -- filter trades     IF OBJECT_ID('VISTA_TEMP_1.dbo.TRADES_FILTERED', 'U') IS NOT NULL DROP TABLE VISTA_TEMP_1.dbo.TRADES_FILTERED         SELECT o.*     INTO VISTA_TEMP_1.dbo.TRADES_FILTERED     FROM VISTA_STAGING.[dbo].[TRADES] as o     INNER JOIN [VISTA_TEMP_1].[dbo].[ORDERS_CROSS_FILTERED] as oc on o.ORD_NUM = oc.TRD_ORD         -- filter quotes     IF OBJECT_ID('VISTA_TEMP_1.dbo.QUOTES_FILTERED', 'U') IS NOT NULL DROP TABLE VISTA_TEMP_1.dbo.QUOTES_FILTERED         SELECT q.*     INTO VISTA_TEMP_1.dbo.QUOTES_FILTERED     FROM VISTA_STAGING.[dbo].[QUOTES] as q     INNER JOIN [VISTA_TEMP_1].[dbo].[ORDERS_CROSS] as oc on q.ORD_NUM = oc.TRD_ORD         -- filter quotes     IF OBJECT_ID('VISTA_TEMP_1.dbo.PLACEMENTS_FILTERED', 'U') IS NOT NULL DROP TABLE VISTA_TEMP_1.dbo.PLACEMENTS_FILTERED         SELECT q.*     INTO VISTA_TEMP_1.dbo.PLACEMENTS_FILTERED     FROM VISTA_STAGING.[dbo].PLACEMENTS as q     INNER JOIN [VISTA_TEMP_1].[dbo].[ORDERS_CROSS] as oc on q.ORD_NUM = oc.TRD_ORD            END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: FUTURES_VWAP_EQ  CreateDate: 2025-06-26 17:41:02.030  ModifyDate: 2025-06-26 17:41:02.030  --- DEFINITION START ---  -- =============================================    -- Author:  <da Costa, David>    -- Create date: <21/11/2019>    -- Description: <Stored procedure to replce the Futures_VWAP_EQ View.>    -- =============================================    CREATE PROCEDURE [dbo].[FUTURES_VWAP_EQ]        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;            -- Insert statements for procedure here     IF OBJECT_ID('VISTA_REPORTING.dbo.Futures_VWAP_EQ', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.Futures_VWAP_EQ     SELECT        mpmo.Instruction      ,mpmo.Purpose      ,mpmo.ORD_NUM as PM_ORD      ,pmo.PM as FM      ,mpmo.AUTH_TIME      ,mpmo.Side      ,mpmo.Ccy      ,mpmo.[Sett Ccy]      ,mpmo.ISIN      ,mpmo.CUSIP      ,mpmo.SEDOL      ,mpmo.SEC_DESC1      ,CONVERT(VARCHAR(50),mpmo.TRADER_FULL_NAME) AS Dealer      ,mpmo.Platform      ,mpmo.Method      ,mpmo.PRIMARY_MARKET      ,mpmo.[Ord Amt]      ,mpmo.[Ord Amt] - SUM(t.ABS_TRD_ORIG_FACE) as [Remain Amt]      ,SUM(t.ABS_TRD_ORIG_FACE) AS [Booked Amt]      ,mpmo.Px      ,mpmo.[Active Date]      ,DATEADD(MILLISECOND, - DATEPART(MILLISECOND, MIN(pla.ROUTE_DATETIME)), MIN(pla.ROUTE_DATETIME)) as [SEND_DATE]       ,mpmo.MULTI_FUND_ID      ,mpmo.[Trade Date]      ,mpmo.[Exec Date]      ,mpmo.[Entry Date]      ,mpmo.[Dealer Comment]       ,mpmo.[General Comment]      ,mpmo.[TE Type]      ,mpmo.Timespan      ,mpmo.Fund      ,mpmo.[First Execution] as [First Execution]      ,datediff(minute, mpmo.AUTH_TIME, mpmo.[First Execution]) as [First Execution Timespan Minutes]      ,mpmo.INST_TYPE      ,mpmo.[Average daily volume]      ,mpmo.[Remain Amt as percent of daily volume]      ,pmo.DEALING_DESK     INTO VISTA_REPORTING.dbo.Futures_VWAP_EQ     FROM (SELECT DISTINCT        STATUS,        PM_ORD         FROM VISTA_REPORTING.dbo.COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE WHERE Exception_Type = 'F_VWAP') ex     LEFT JOIN VISTA_REPORTING.dbo.MASTER_PM_ORDER mpmo ON mpmo.ORD_NUM = ex.PM_ORD     LEFT JOIN (SELECT DISTINCT          ORD_NUM,         DEALING_DESK,         PM           FROM VISTA_REPORTING.dbo.PM_ORDERS) pmo ON pmo.ORD_NUM = mpmo.ORD_NUM AND PM IS NOT NULL     LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM Vista_Reporting.dbo.ORDERS_CROSS) oc ON oc.PM_ORD=pmo.ORD_NUM     LEFT JOIN (SELECT DISTINCT         EXECUTION_TIME,         ORD_NUM,          ABS(TRD_ORIG_FACE) as ABS_TRD_ORIG_FACE          FROM VISTA_REPORTING.dbo.TRADES) t ON t.ORD_NUM = oc.TRD_ORD     LEFT JOIN (SELECT DISTINCT ORD_NUM, ROUTE_DATETIME FROM VISTA_REPORTING.dbo.PLACEMENTS) pla on pla.ORD_NUM = t.ORD_NUM     GROUP BY       mpmo.Instruction      ,mpmo.Purpose      ,mpmo.ORD_NUM      ,pmo.PM      ,mpmo.AUTH_TIME      ,mpmo.Side      ,mpmo.Ccy      ,mpmo.[Sett Ccy]      ,mpmo.ISIN      ,mpmo.CUSIP      ,mpmo.SEDOL      ,mpmo.SEC_DESC1      ,mpmo.TRADER_FULL_NAME      ,mpmo.Platform      ,mpmo.Method      ,mpmo.PRIMARY_MARKET      ,mpmo.[Ord Amt]      ,mpmo.Px      ,mpmo.[Active Date]      ,mpmo.MULTI_FUND_ID      ,mpmo.[Trade Date]      ,mpmo.[Exec Date]      ,mpmo.[Entry Date]      ,mpmo.[Dealer Comment]       ,mpmo.[General Comment]      ,mpmo.[TE Type]      ,mpmo.Timespan      ,mpmo.Fund      ,mpmo.[First Execution]      ,datediff(minute, mpmo.AUTH_TIME, mpmo.[First Execution])      ,mpmo.INST_TYPE      ,mpmo.[Average daily volume]      ,mpmo.[Remain Amt as percent of daily volume]      ,pmo.DEALING_DESK            END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: FX_LOSING_BANKS_REFRESH  CreateDate: 2025-06-26 17:41:15.547  ModifyDate: 2025-06-26 17:41:15.547  --- DEFINITION START ---  -- =============================================    -- Author:  <LIZZIE REYNOLDS>    -- Create date: <10/07/2019>    -- Description: <CONVERTS STAGING LOSING BANKS TABLE TO BE IN CORRECT FORMAT FOR MASTER TABLES>    -- =============================================    CREATE PROCEDURE .[dbo].[FX_LOSING_BANKS_REFRESH]        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        IF OBJECT_ID('VISTA_REPORTING.DBO.FX_LOSING_BANKS', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.DBO.FX_LOSING_BANKS    SELECT DISTINCT     TRADE_ID,     UPPER(CONVERT(VARCHAR(20),BANK_NAME)) AS LOSING_BANK,     CONVERT(DECIMAL(38,8), ALL_IN_RATE) AS ALL_IN_RATE,     CONVERT(DECIMAL(38,8), FWD_POINTS) AS FWD_POINTS,     CONVERT(DECIMAL(38,8), SPOT_RATE) AS SPOT_RATE,     convert(decimal(38,8), PROFIT_OR_LOSS) AS PROFIT_OR_LOSS,     CONVERT(DECIMAL(38,8),SWAP_POINTS) AS SWAP_POINTS,     PULL_DATE,     API_REQUESTED_DATE    INTO VISTA_REPORTING.DBO.FX_LOSING_BANKS    FROM VISTA_STAGING.DBO.FX_LOSING_BANKS        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: FX_MAPPED_BANKS_REFRESH  CreateDate: 2025-06-26 17:41:29.140  ModifyDate: 2025-06-26 17:41:29.140  --- DEFINITION START ---  -- =============================================    -- Author:  <LIZZIE REYNOLDS>    -- Create date: <10/07/2019>    -- Description: <CONVERTS STAGING MAPPED BANKS TABLE TO BE IN CORRECT FORMAT FOR MASTER TABLES>    -- =============================================    CREATE PROCEDURE .[dbo].[FX_MAPPED_BANKS_REFRESH]        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        IF OBJECT_ID('VISTA_REPORTING.DBO.FX_MAPPED_BANKS', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.DBO.FX_MAPPED_BANKS    SELECT *     INTO VISTA_REPORTING.DBO.FX_MAPPED_BANKS    FROM VISTA_STAGING.DBO.FX_MAPPED_BANKS        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: FX_ORDERS_REFRESH  CreateDate: 2025-06-26 17:41:46.140  ModifyDate: 2025-06-26 17:41:46.140  --- DEFINITION START ---  -- =============================================    -- Author:  <LIZZIE REYNOLDS>    -- Create date: <26/06/2019>    -- Description: <FX ORDERS REFRESH>    -- =============================================    CREATE PROCEDURE [dbo].[FX_ORDERS_REFRESH]        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        IF OBJECT_ID('tempdb..#MAX_TCH_PM', 'U') IS NOT NULL DROP TABLE #MAX_TCH_PM    SELECT DISTINCT ORD_NUM,      MAX(TOUCH_COUNT) AS MAX_TOUCH     INTO #MAX_TCH_PM    FROM VISTA_REPORTING.DBO.PM_ORDERS    GROUP BY ORD_NUM        IF OBJECT_ID('tempdb..#MAX_TCH_TRADES', 'U') IS NOT NULL DROP TABLE #MAX_TCH_TRADES    SELECT DISTINCT ORD_NUM,      MAX(TOUCH_COUNT) AS MAX_TOUCH     INTO #MAX_TCH_TRADES    FROM VISTA_REPORTING.DBO.TRADES    GROUP BY ORD_NUM        IF OBJECT_ID('tempdb..#COMMON_ID', 'U') IS NOT NULL DROP TABLE #COMMON_ID    SELECT DISTINCT     *,    CASE WHEN CHARINDEX('~', ALADDIN_COMMON_ID) > 0 THEN SUBSTRING(ALADDIN_COMMON_ID,0, CHARINDEX('~',ALADDIN_COMMON_ID)) ELSE ALADDIN_COMMON_ID END AS COMMON_ID    INTO #COMMON_ID    FROM VISTA_STAGING.DBO.FX_ORDERS                IF OBJECT_ID('VISTA_REPORTING.DBO.FX_ORDERS', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.DBO.FX_ORDERS    SELECT DISTINCT      ACTION1,     ACTION2,     ALADDIN_COMMON_ID,     BASE_FUND,     BUSINESS_GROUP,     BUY_CCY,     BUY_CCY_LEG2,     CLIENT_FUND,     CREATED_FROM,     DIRECTED_COUNTERPARTY,     FM_COMMENTS,     FXM_ORDER_ID,     CAST(FIXING_DATE AS DATETIME2(3)) AS FIXING_DATE,     CAST(FIXING_DATE_LEG2 AS DATETIME2(3)) AS FIXING_DATE_LEG2,     FR_LEG_PRODUCT,     CAST(HOLDOVER_DATE_TIME AS DATETIME2(3)) AS HOLDOVER_DATE_TIME,     HOLDOVER_REASON,     HOLDOVER_REASON_NARRATION,     INSTRUCTED_BY,     CAST(INSTRUCTION_RECEIVED_DATE_TIME AS DATETIME2(3)) AS INSTRUCTION_RECEIVED_DATE_TIME,     INSTRUCTION_STATUS,     INSTRUCTION_TYPE,     MARKER,     NET_EXPOSURE_ORDER,     NOTIONAL_AMOUNT,     NOTIONAL_AMOUNT_FAR,     NOTIONAL_AMOUNT_GBP,     NOTIONAL_AMOUNT_GBP_FAR,     NOTIONAL_AMOUNT_GBP_FAR_RATE,     NOTIONAL_AMOUNT_GBP_RATE,     NOTIONAL_CCY,     NOTIONAL_CCY_FAR,     NR_LEG_PRODUCT,     CAST(ORDER_TRADE_DATE AS DATETIME2(3)) AS ORDER_TRADE_DATE,     SELL_CCY,     SELL_CCY_LEG2,     SEQUENCE_EXCEPTION_REASON,     SEQUENCE_EXCEPTION_REASON_NARRATION,     SWAP_ID,     SWAP_TYPE,     TIMELY_EXC_REASON_NOT_ACK,     TIMELY_EXC_REASON_NOT_ACK_NARRATION,     TRADE_PURPOSE,     TRADE_VENUE,     CAST(VALUE_DATE_FAR AS DATETIME2(3)) AS VALUE_DATE_FAR,     CAST(VALUE_DATE_NEAR AS DATETIME2(3)) AS VALUE_DATE_NEAR,     CAST(API_REQUESTED_DATE AS DATETIME2(3)) AS API_REQUESTED_DATE,     CAST(FX.PULL_DATE AS DATETIME2(3)) AS PULL_DATE,     FX.COMMON_ID,     PM.ORD_NUM,      PM.ASSIGNED_TO,      PM.AUTH_TIME,      PM.ORD_REL_TYPE,      PM.PM,      PM.SM_SEC_GROUP,     PM.STATUS AS ALADDIN_STATUS,     [CANCEL_BY],     CAST([CANCEL_DATE_TIME] AS DATETIME2(3)) as [CANCEL_DATE_TIME],     [CANCEL_REASON],     [CANCEL_REASON_NARRATION],     ALADDIN_BASKET_ID,     FUND_MANAGER_EMAIL_ADDRESS,     FREEZE_MARKER,     FREEZE_DATE_TIME,     RELEASE_DATE_TIME,     FREEZE_BY,     RELEASE_BY,     FREEZE_REASON,     RELEASE_REASON    INTO VISTA_REPORTING.DBO.FX_ORDERS    FROM #COMMON_ID FX    LEFT JOIN VISTA_STAGING.DBO.REQUEST_LOOKUP RL ON FX.COMMON_ID = RL.REQUEST_ID    LEFT JOIN (SELECT DISTINCT PLACEMENT_NUM, ORD_NUM FROM VISTA_REPORTING.DBO.PLACEMENTS) PL ON PL.PLACEMENT_NUM = RL.PLACEMENT_NUM    LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.TRD_ORD = PL.ORD_NUM    LEFT JOIN (SELECT DISTINCT PM.ORD_NUM, PM, AUTH_TIME, ORD_REL_TYPE, SM_SEC_GROUP, ASSIGNED_TO, TOUCH_COUNT, STATUS FROM VISTA_REPORTING.DBO.PM_ORDERS PM    INNER JOIN #MAX_TCH_PM MT ON MT.MAX_TOUCH = PM.TOUCH_COUNT AND MT.ORD_NUM = PM.ORD_NUM) PM ON OC.PM_ORD = PM.ORD_NUM            END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: FX_RATES_REFRESH  CreateDate: 2025-06-26 18:30:19.957  ModifyDate: 2025-06-26 18:30:19.957  --- DEFINITION START ---  -- =============================================    -- Author:  <Devereux, Alan>    -- Create date: <27/09/2017>    -- Description: <Stored procedure for transformation of staging data    --     into final FX_RATES table.>    -- =============================================        -- ***************VERSION CONTROL***************    -- 04/01/2018 - DDC: PULL_DATE added.    -- *********************************************        CREATE PROCEDURE [dbo].[FX_RATES_REFRESH]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        IF OBJECT_ID('tempdb..#ALL_CURRENCY', 'U') IS NOT NULL DROP TABLE #ALL_CURRENCY        select     PULL_DATE,      INDEX_NAME,     SUBSTRING(INDEX_NAME, 1, 3) as CURRENCY,     MARKDATE,     INDEX_RATE    into #ALL_CURRENCY    from VISTA_STAGING.dbo.ECONOMY    where INDEX_NAME like '%\_SPOT' ESCAPE '\'        --IF OBJECT_ID('VISTA_REPORTING.dbo.FX_RATES', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.FX_RATES    IF OBJECT_ID('VISTA_REPORTING.dbo.FX_RATES', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.FX_RATES        select     a.PULL_DATE,     a.INDEX_NAME,     a.CURRENCY,     a.MARKDATE,     convert(decimal(38,8), a.INDEX_RATE) AS INDEX_RATE,     --a2.INDEX_RATE,     convert(decimal(38,8), (a.INDEX_RATE/a2.INDEX_RATE))  as GBP_INDEX_RATE        into VISTA_REPORTING.dbo.FX_RATES    from #ALL_CURRENCY a    join #ALL_CURRENCY a2 on a.MARKDATE=a2.MARKDATE and a2.INDEX_NAME='GBP_USD_SPOT'    order by CURRENCY        IF OBJECT_ID('tempdb..#ALL_CURRENCY', 'U') IS NOT NULL DROP TABLE #ALL_CURRENCY    END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: FX_TRADES_CONCAT_REFRESH  CreateDate: 2025-06-26 17:42:16.350  ModifyDate: 2025-06-26 17:42:16.350  --- DEFINITION START ---  -- =============================================    -- Author:  <Nasra, Michael>    -- Create date: <23/08/2019>    -- Description: <Refreshes the FX_TRADES_CONCAT table in VISTA_REPORTING>    -- =============================================    CREATE PROCEDURE [dbo].[FX_TRADES_CONCAT_REFRESH]     -- Add the parameters for the stored procedure here    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        --Stuffs every single column into a pipe delimited format apart from ORDER_ID and API_REQUESTED_DATE    --When using FX_TRADES_CONCAT you should inner join on max(API_REQUESTED_DATE)    IF OBJECT_ID('VISTA_REPORTING.dbo.FX_TRADES_CONCAT', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.FX_TRADES_CONCAT    select ORDER_ID,API_REQUESTED_DATE,    ACCEPTED_BY = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),ACCEPTED_BY)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    ACCEPTED_DATE_TIME = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),format(ACCEPTED_DATE_TIME,'dd/MM/yyyy HH:mm:ss.fff'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    ACTION1 = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),ACTION1)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    ACTION2 = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),ACTION2)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    APPROVAL_DATE_TIME = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),format(APPROVAL_DATE_TIME,'dd/MM/yyyy HH:mm:ss.fff'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    APPROVAL_REQUESTED_BY = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),APPROVAL_REQUESTED_BY)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    APPROVAL_REQUESTED_TIME = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),APPROVAL_REQUESTED_TIME)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    APPROVED_BY = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),APPROVED_BY)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    APPROVER_FORWARD_LIMIT = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORMAT(CONVERT(DECIMAL(38,2),APPROVER_FORWARD_LIMIT),'#,0.00'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    APPROVER_NDF_LIMIT = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORMAT(CONVERT(DECIMAL(38,2),APPROVER_NDF_LIMIT),'#,0.00'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    APPROVER_SPOT_LIMIT = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORMAT(CONVERT(DECIMAL(38,2),APPROVER_SPOT_LIMIT),'#,0.00'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    BUY_CCY = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),BUY_CCY)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    BUY_CCY_LEG2 = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),BUY_CCY_LEG2)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    CANCEL_BY = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),CANCEL_BY)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    CANCEL_DATE_TIME = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),CANCEL_DATE_TIME)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    CANCEL_REASON = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),CANCEL_REASON)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    CANCEL_REASON_NARRATION = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),CANCEL_REASON_NARRATION)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    DB_INDICATIVE_ALL_IN_FAR_RATE = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50), FORMAT(CONVERT(DECIMAL(38,8),DB_INDICATIVE_ALL_IN_FAR_RATE),'#,0.00000000'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    DB_INDICATIVE_ALL_IN_NEAR_RATE = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50), FORMAT(CONVERT(DECIMAL(38,8),DB_INDICATIVE_ALL_IN_NEAR_RATE),'#,0.00000000'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    DB_INDICATIVE_FORWARD_FAR_POINTS = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),DB_INDICATIVE_FORWARD_FAR_POINTS)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    DB_INDICATIVE_FORWARD_NEAR_POINTS = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),DB_INDICATIVE_FORWARD_NEAR_POINTS)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    DB_INDICATIVE_PRICE_DATE_TIME = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),DB_INDICATIVE_PRICE_DATE_TIME)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    DB_INDICATIVE_SPOT_FAR_PRICE = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),DB_INDICATIVE_SPOT_FAR_PRICE)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    DB_INDICATIVE_SPOT_NEAR_PRICE = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),DB_INDICATIVE_SPOT_NEAR_PRICE)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    DEALER_FORWARD_LIMIT = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORMAT(CONVERT(DECIMAL(38,2),DEALER_FORWARD_LIMIT),'#,0.00'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    DEALER_NDF_LIMIT = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORMAT(CONVERT(DECIMAL(38,2),DEALER_NDF_LIMIT),'#,0.00'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    DEALER_SPOT_LIMIT = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORMAT(CONVERT(DECIMAL(38,2),DEALER_SPOT_LIMIT),'#,0.00'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    DEALT_BY = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),DEALT_BY)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    DEALT_SIDE_PORTFOLIO = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),DEALT_SIDE_PORTFOLIO)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    DEALT_SIDE_TRADE = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),DEALT_SIDE_TRADE)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    EXC_SESSION_ID = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),EXC_SESSION_ID)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    EXC_SESSION_NAME = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),EXC_SESSION_NAME)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    EXC_SESSION_TIMESTAMP = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),EXC_SESSION_TIMESTAMP)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    EXC_SESSION_TYPE = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),EXC_SESSION_TYPE)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    EXECUTED_AMOUNT = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORMAT(CONVERT(DECIMAL(38,2),EXECUTED_AMOUNT),'#,0.00'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt          WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    EXECUTED_AMOUNT_FAR = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORMAT(CONVERT(DECIMAL(38,2),EXECUTED_AMOUNT_FAR),'#,0.00'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    EXECUTED_BANK = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),EXECUTED_BANK)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    EXECUTED_DATE_TIME = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORMAT(EXECUTED_DATE_TIME,'dd/MM/yyyy HH:mm:ss.fff'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    EXECUTED_RATE = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORMAT(CONVERT(DECIMAL(38,8),EXECUTED_RATE),'#,0.00000000'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    EXECUTED_RATE_FAR = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORMAT(CONVERT(DECIMAL(38,8),EXECUTED_RATE_FAR),'#,0.00000000'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    EXECUTION_INDICATIVE_ALL_IN_FAR_RATE = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORMAT(CONVERT(DECIMAL(38,8),EXECUTION_INDICATIVE_ALL_IN_FAR_RATE),'#,0.00000000'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    EXECUTION_INDICATIVE_ALL_IN_NEAR_RATE = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORMAT(CONVERT(DECIMAL(38,8),EXECUTION_INDICATIVE_ALL_IN_NEAR_RATE),'#,0.00000000'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    EXECUTION_INDICATIVE_FORWARD_FAR_POINTS = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),EXECUTION_INDICATIVE_FORWARD_FAR_POINTS)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    EXECUTION_INDICATIVE_FORWARD_NEAR_POINTS = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),EXECUTION_INDICATIVE_FORWARD_NEAR_POINTS)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    EXECUTION_INDICATIVE_PRICE_DATE_TIME = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),EXECUTION_INDICATIVE_PRICE_DATE_TIME)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    EXECUTION_INDICATIVE_SPOT_FAR_PRICE = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),EXECUTION_INDICATIVE_SPOT_FAR_PRICE)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    EXECUTION_INDICATIVE_SPOT_NEAR_PRICE = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),EXECUTION_INDICATIVE_SPOT_NEAR_PRICE)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    FIXING_DATE = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORMAT(FIXING_DATE,'dd/MM/yyyy'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    FIXING_DATE_LEG2 = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORMAT(FIXING_DATE_LEG2,'dd/MM/yyyy'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    FORWARD_POINTS = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORWARD_POINTS)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    FORWARD_POINTS_FAR = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORWARD_POINTS_FAR)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    FR_LEG_PRODUCT = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FR_LEG_PRODUCT)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    INSTRUCTION_TYPE = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),INSTRUCTION_TYPE)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    IS_DEALER_LIMIT_BREACHED = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),IS_DEALER_LIMIT_BREACHED)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    LOSING_BANK_COUNT = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),LOSING_BANK_COUNT)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    MAPPED_BANK_COUNT = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),MAPPED_BANK_COUNT)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    MARKET_ARRIVAL_INDICATIVE_ALL_IN_FAR_RATE = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORMAT(CONVERT(DECIMAL(38,8),MARKET_ARRIVAL_INDICATIVE_ALL_IN_FAR_RATE),'#,0.00000000'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    MARKET_ARRIVAL_INDICATIVE_ALL_IN_NEAR_RATE = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORMAT(CONVERT(DECIMAL(38,8),MARKET_ARRIVAL_INDICATIVE_ALL_IN_NEAR_RATE),'#,0.00000000'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    MARKET_ARRIVAL_INDICATIVE_FORWARD_FAR_POINTS = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),MARKET_ARRIVAL_INDICATIVE_FORWARD_FAR_POINTS)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    MARKET_ARRIVAL_INDICATIVE_FORWARD_NEAR_POINTS = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),MARKET_ARRIVAL_INDICATIVE_FORWARD_NEAR_POINTS)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    MARKET_ARRIVAL_INDICATIVE_PRICE_DATE_TIME = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),MARKET_ARRIVAL_INDICATIVE_PRICE_DATE_TIME)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    MARKET_ARRIVAL_INDICATIVE_SPOT_FAR_PRICE = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),MARKET_ARRIVAL_INDICATIVE_SPOT_FAR_PRICE)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    MARKET_ARRIVAL_DATE_TIME = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORMAT(MARKET_ARRIVAL_DATE_TIME,'dd/MM/yyyy HH:mm:ss.fff'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    NET_EXPOSURE_PORTFOLIO = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),NET_EXPOSURE_PORTFOLIO)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    NET_EXPOSURE_TRADE = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORMAT(CONVERT(DECIMAL(38,2),NET_EXPOSURE_TRADE),'#,0.00'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    NOTIONAL_AMOUNT = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORMAT(CONVERT(DECIMAL(38,2),NOTIONAL_AMOUNT),'#,0.00'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    NOTIONAL_AMOUNT_FAR = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORMAT(CONVERT(DECIMAL(38,2),NOTIONAL_AMOUNT_FAR),'#,0.00'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    NOTIONAL_CCY = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),NOTIONAL_CCY)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    NOTIONAL_CCY_FAR = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),NOTIONAL_CCY_FAR)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    NR_LEG_PRODUCT = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),NR_LEG_PRODUCT)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    OMQ_INDICATIVE_ALL_IN_FAR_RATE = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORMAT(CONVERT(DECIMAL(38,8),OMQ_INDICATIVE_ALL_IN_FAR_RATE),'#,0.00000000'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    OMQ_INDICATIVE_ALL_IN_NEAR_RATE = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORMAT(CONVERT(DECIMAL(38,8),OMQ_INDICATIVE_ALL_IN_NEAR_RATE),'#,0.00000000'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    OMQ_INDICATIVE_FORWARD_FAR_POINTS = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),OMQ_INDICATIVE_FORWARD_FAR_POINTS)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    OMQ_INDICATIVE_FORWARD_NEAR_POINTS = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),OMQ_INDICATIVE_FORWARD_NEAR_POINTS)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    OMQ_INDICATIVE_PRICE_DATE_TIME = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),OMQ_INDICATIVE_PRICE_DATE_TIME)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    OMQ_INDICATIVE_SPOT_FAR_PRICE = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),OMQ_INDICATIVE_SPOT_FAR_PRICE)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    OMQ_INDICATIVE_SPOT_NEAR_PRICE = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),OMQ_INDICATIVE_SPOT_NEAR_PRICE)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    ORDER_STRATEGY = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),ORDER_STRATEGY)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    PASSED_BANK_COUNT = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),PASSED_BANK_COUNT)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    PRICE_REASON = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),PRICE_REASON)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    PRICE_REASON_NARRATION = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),PRICE_REASON_NARRATION)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    PROFIT_OR_LOSS = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),PROFIT_OR_LOSS)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    PROFIT_OR_LOSS2 = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),PROFIT_OR_LOSS2)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    REMAINING_AMOUNT = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),REMAINING_AMOUNT)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    QUOTE_PAIR = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),QUOTE_PAIR)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    BASE_CCY = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),BASE_CCY)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    CONTRA_CCY = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),CONTRA_CCY)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    SELL_CCY = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),SELL_CCY)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    SELL_CCY_LEG2 = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),SELL_CCY_LEG2)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    SPOT_RATE = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORMAT(CONVERT(DECIMAL(38,8),SPOT_RATE),'#,0.00000000'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    SPOT_RATE_FAR = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORMAT(CONVERT(DECIMAL(38,8),SPOT_RATE_FAR),'#,0.00000000'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    SPOT_TOLERANCE_REASON = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),SPOT_TOLERANCE_REASON)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    SPOT_TOLERANCE_REASON_NARRATION = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),SPOT_TOLERANCE_REASON_NARRATION)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    SWAP_POINTS = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),SWAP_POINTS)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    SWAP_TYPE = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),SWAP_TYPE)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    THREE_BANK_QUOTES_EXCEPTION_REASON = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),THREE_BANK_QUOTES_EXCEPTION_REASON)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    THREE_BANK_QUOTES_EXCEPTION_REASON_NARRATION = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),THREE_BANK_QUOTES_EXCEPTION_REASON_NARRATION)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    TIMELY_EXC_REASON_NOT_PLACED = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),TIMELY_EXC_REASON_NOT_PLACED)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    TIMELY_EXC_REASON_NOT_PLACED_NARRATION = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),TIMELY_EXC_REASON_NOT_PLACED_NARRATION)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    TIMELY_EXECUTION_REASON = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),TIMELY_EXECUTION_REASON)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    TIMELY_EXECUTION_REASON_NARRATION = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),TIMELY_EXECUTION_REASON_NARRATION)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    TIMELY_RECORDING_REASON = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),TIMELY_RECORDING_REASON)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    TIMELY_RECORDING_REASON_NARRATION = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),TIMELY_RECORDING_REASON_NARRATION)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    TRADE_AMOUNT_GBP = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORMAT(CONVERT(DECIMAL(38,2),TRADE_AMOUNT_GBP), '#,0.00'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    TRADE_AMOUNT_GBP_FAR = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORMAT(CONVERT(DECIMAL(38,2),TRADE_AMOUNT_GBP_FAR), '#,0.00'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    TRADE_AMOUNT_GBP_FAR_RATE = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORMAT(CONVERT(DECIMAL(38,8),TRADE_AMOUNT_GBP_FAR_RATE),'#,0.00000000'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt          WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    TRADE_AMOUNT_GBP_RATE = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORMAT(CONVERT(DECIMAL(38,8),TRADE_AMOUNT_GBP_RATE),'#,0.00000000'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    TRADE_DATE = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORMAT(TRADE_DATE,'dd/MM/yyyy'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    TRADE_ID = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),TRADE_ID)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    TRADE_STATUS = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),TRADE_STATUS)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    TRADE_VENUE = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),TRADE_VENUE)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    UPLOADED_DATE_TIME = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),format(UPLOADED_DATE_TIME,'dd/MM/yyyy HH:mm:ss.fff'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    VALUE_DATE_FAR = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORMAT([VALUE_DATE_FAR],'dd/MM/yyyy HH:mm:ss.fff'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    VALUE_DATE_NEAR = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORMAT([VALUE_DATE_NEAR],'dd/MM/yyyy HH:mm:ss.fff'))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    PULL_DATE = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),PULL_DATE)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    DEALT_SIDE = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),DEALT_SIDE)                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),    TIME_ELAPSED_BETWEEN_MARKET_ARRIVAL_AND_EXECUTED_DATE_TIME_MINS = STUFF((                     SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),DATEDIFF(MINUTE,fxt.[MARKET_ARRIVAL_DATE_TIME],fxt.[EXECUTED_DATE_TIME]))                     FROM VISTA_REPORTING.dbo.FX_TRADES fxt                     WHERE fxt.ORDER_ID = fxt1.ORDER_ID                     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'')        into VISTA_REPORTING.dbo.FX_TRADES_CONCAT    from VISTA_REPORTING.dbo.FX_TRADES fxt1    group by ORDER_ID,API_REQUESTED_DATE        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: FX_TRADES_REFRESH  CreateDate: 2025-06-26 18:30:08.327  ModifyDate: 2025-06-26 18:30:08.327  --- DEFINITION START ---  -- =============================================    -- Author:  <LIZZIE REYNOLDS>    -- Create date: <26/06/2019>    -- Description: <FX TRADES REFRESH>    -- =============================================    CREATE PROCEDURE [dbo].[FX_TRADES_REFRESH]        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        IF OBJECT_ID('tempdb..#BASE_CCY', 'U') IS NOT NULL DROP TABLE #BASE_CCY    SELECT DISTINCT      ACCEPTED_BY,     CAST(ACCEPTED_DATE_TIME AS DATETIME2(3)) AS ACCEPTED_DATE_TIME,     ACTION1,     ACTION2,     CAST(APPROVAL_DATE_TIME AS DATETIME2(3)) AS APPROVAL_DATE_TIME,     APPROVAL_REQUESTED_BY,     CAST(APPROVAL_REQUESTED_TIME AS DATETIME2(3)) AS APPROVAL_REQUESTED_TIME,     APPROVED_BY,     APPROVER_FORWARD_LIMIT,     APPROVER_NDF_LIMIT,     APPROVER_SPOT_LIMIT,     BUY_CCY,     BUY_CCY_LEG2,     CANCEL_BY,     CAST(CANCEL_DATE_TIME AS DATETIME2(3)) AS CANCEL_DATE_TIME,     CANCEL_REASON,     CANCEL_REASON_NARRATION,     DB_INDICATIVE_ALL_IN_FAR_RATE,     DB_INDICATIVE_ALL_IN_NEAR_RATE,     DB_INDICATIVE_FORWARD_FAR_POINTS,     DB_INDICATIVE_FORWARD_NEAR_POINTS,     CAST(DB_INDICATIVE_PRICE_DATE_TIME AS DATETIME2(3)) AS DB_INDICATIVE_PRICE_DATE_TIME,     DB_INDICATIVE_SPOT_FAR_PRICE,     DB_INDICATIVE_SPOT_NEAR_PRICE,     DEALER_FORWARD_LIMIT,     DEALER_NDF_LIMIT,     DEALER_SPOT_LIMIT,     DEALT_BY,     DEALT_SIDE_PORTFOLIO,     DEALT_SIDE_TRADE,     EXC_SESSION_ID,     EXC_SESSION_NAME,     CAST(EXC_SESSION_TIMESTAMP AS DATETIME2(3)) AS EXC_SESSION_TIMESTAMP,     EXC_SESSION_TYPE,     EXECUTED_AMOUNT,     EXECUTED_AMOUNT_FAR,     EXECUTED_BANK,     CAST(EXECUTED_DATE_TIME AS DATETIME2(3)) AS EXECUTED_DATE_TIME,     convert(decimal(38,8), EXECUTED_RATE) as EXECUTED_RATE,     convert(decimal(38,8), EXECUTED_RATE_FAR) AS EXECUTED_RATE_FAR,     convert(decimal(38,8), EXECUTION_INDICATIVE_ALL_IN_FAR_RATE) AS EXECUTION_INDICATIVE_ALL_IN_FAR_RATE,     convert(decimal(38,8), EXECUTION_INDICATIVE_ALL_IN_NEAR_RATE) AS EXECUTION_INDICATIVE_ALL_IN_NEAR_RATE,     EXECUTION_INDICATIVE_FORWARD_FAR_POINTS,     EXECUTION_INDICATIVE_FORWARD_NEAR_POINTS,     CAST(EXECUTION_INDICATIVE_PRICE_DATE_TIME AS DATETIME2(3)) AS EXECUTION_INDICATIVE_PRICE_DATE_TIME,     EXECUTION_INDICATIVE_SPOT_FAR_PRICE,     EXECUTION_INDICATIVE_SPOT_NEAR_PRICE,     CAST(FIXING_DATE AS DATETIME2(3)) AS FIXING_DATE,     CAST(FIXING_DATE_LEG2 AS DATETIME2(3)) AS FIXING_DATE_LEG2,     convert(decimal(38,8), FORWARD_POINTS) AS FORWARD_POINTS,     convert(decimal(38,8), FORWARD_POINTS_FAR) AS FORWARD_POINTS_FAR,     FR_LEG_PRODUCT,     INSTRUCTION_TYPE,     IS_DEALER_LIMIT_BREACHED,     LOSING_BANK_COUNT,     MAPPED_BANK_COUNT,     convert(decimal(38,8), MARKET_ARRIVAL_INDICATIVE_ALL_IN_FAR_RATE) AS MARKET_ARRIVAL_INDICATIVE_ALL_IN_FAR_RATE,     convert(decimal(38,8), MARKET_ARRIVAL_INDICATIVE_ALL_IN_NEAR_RATE) AS MARKET_ARRIVAL_INDICATIVE_ALL_IN_NEAR_RATE,     convert(decimal(38,8), MARKET_ARRIVAL_INDICATIVE_FORWARD_FAR_POINTS) AS MARKET_ARRIVAL_INDICATIVE_FORWARD_FAR_POINTS,     convert(decimal(38,8), MARKET_ARRIVAL_INDICATIVE_FORWARD_NEAR_POINTS) AS MARKET_ARRIVAL_INDICATIVE_FORWARD_NEAR_POINTS,     CAST(MARKET_ARRIVAL_INDICATIVE_PRICE_DATE_TIME AS DATETIME2(3)) AS MARKET_ARRIVAL_INDICATIVE_PRICE_DATE_TIME,     convert(decimal(38,8),MARKET_ARRIVAL_INDICATIVE_SPOT_FAR_PRICE) AS MARKET_ARRIVAL_INDICATIVE_SPOT_FAR_PRICE,     convert(decimal(38,8),MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE) AS MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE,     CAST(MARKET_ARRIVAL_DATE_TIME AS DATETIME2(3)) AS MARKET_ARRIVAL_DATE_TIME,     NET_EXPOSURE_PORTFOLIO,     NET_EXPOSURE_TRADE,     NOTIONAL_AMOUNT,     NOTIONAL_AMOUNT_FAR,     NOTIONAL_CCY,     NOTIONAL_CCY_FAR,     NR_LEG_PRODUCT,     OMQ_INDICATIVE_ALL_IN_FAR_RATE,     OMQ_INDICATIVE_ALL_IN_NEAR_RATE,     OMQ_INDICATIVE_FORWARD_FAR_POINTS,     OMQ_INDICATIVE_FORWARD_NEAR_POINTS,     CAST(OMQ_INDICATIVE_PRICE_DATE_TIME AS DATETIME2(3)) AS OMQ_INDICATIVE_PRICE_DATE_TIME,     OMQ_INDICATIVE_SPOT_FAR_PRICE,     OMQ_INDICATIVE_SPOT_NEAR_PRICE,     ORDER_ID,     ORDER_STRATEGY,     PASSED_BANK_COUNT,     PRICE_REASON,     PRICE_REASON_NARRATION,     convert(decimal(38,8), PROFIT_OR_LOSS) AS PROFIT_OR_LOSS,     convert(decimal(38,8), PROFIT_OR_LOSS2) AS PROFIT_OR_LOSS2,     REMAINING_AMOUNT,     QUOTE_PAIR,     SUBSTRING(QUOTE_PAIR, 1,3) AS BASE_CCY,     SUBSTRING(QUOTE_PAIR, 4,3) AS CONTRA_CCY,     SELL_CCY,     SELL_CCY_LEG2,     convert(decimal(38,8), SPOT_RATE) AS SPOT_RATE,     convert(decimal(38,8), SPOT_RATE_FAR) AS SPOT_RATE_FAR,     SPOT_TOLERANCE_REASON,     SPOT_TOLERANCE_REASON_NARRATION,     convert(decimal(38,8), SWAP_POINTS) AS SWAP_POINTS,     SWAP_TYPE,     THREE_BANK_QUOTES_EXCEPTION_REASON,     THREE_BANK_QUOTES_EXCEPTION_REASON_NARRATION,     TIMELY_EXC_REASON_NOT_PLACED,     TIMELY_EXC_REASON_NOT_PLACED_NARRATION,     TIMELY_EXECUTION_REASON,     TIMELY_EXECUTION_REASON_NARRATION,     TIMELY_RECORDING_REASON,     TIMELY_RECORDING_REASON_NARRATION,     TRADE_AMOUNT_GBP,     TRADE_AMOUNT_GBP_FAR,     convert(decimal(38,8), TRADE_AMOUNT_GBP_FAR_RATE) AS TRADE_AMOUNT_GBP_FAR_RATE,     convert(decimal(38,8), TRADE_AMOUNT_GBP_RATE) AS TRADE_AMOUNT_GBP_RATE,     CAST(TRADE_DATE AS DATETIME2(3)) AS TRADE_DATE,     TRADE_ID,     TRADE_STATUS,     TRADE_VENUE,     CAST(UPLOADED_DATE_TIME AS DATETIME2(3)) AS UPLOADED_DATE_TIME,     CAST(VALUE_DATE_FAR AS DATETIME2(3)) AS VALUE_DATE_FAR,     CAST(VALUE_DATE_NEAR AS DATETIME2(3)) AS VALUE_DATE_NEAR,     CAST(API_REQUESTED_DATE AS DATETIME2(3)) AS API_REQUESTED_DATE,     CAST(PULL_DATE AS DATETIME2(3)) AS PULL_DATE,     convert(decimal(38,8), REUTERS_RATE) AS REUTERS_RATE,     convert(decimal(38,8), REUTERS_RATE_FAR) AS REUTERS_RATE_FAR    INTO #BASE_CCY    FROM VISTA_STAGING.DBO.FX_TRADES        IF OBJECT_ID('VISTA_REPORTING.DBO.FX_TRADES', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.DBO.FX_TRADES    SELECT DISTINCT     B.*,     case when NOTIONAL_CCY = BASE_CCY and NOTIONAL_AMOUNT_FAR is not null and NOTIONAL_AMOUNT > NOTIONAL_AMOUNT_FAR then ACTION1       when NOTIONAL_CCY = BASE_CCY AND NOTIONAL_AMOUNT_FAR IS NOT NULL AND NOTIONAL_AMOUNT <= NOTIONAL_AMOUNT_FAR THEN ACTION2      WHEN NOTIONAL_CCY != BASE_CCY AND NOTIONAL_AMOUNT_FAR IS NOT NULL AND NOTIONAL_AMOUNT < NOTIONAL_AMOUNT_FAR THEN ACTION1      WHEN NOTIONAL_CCY != BASE_CCY AND NOTIONAL_AMOUNT_FAR IS NOT NULL AND NOTIONAL_AMOUNT >= NOTIONAL_AMOUNT_FAR THEN ACTION2      else ACTION1      END AS DEALT_SIDE    INTO VISTA_REPORTING.DBO.FX_TRADES    FROM #BASE_CCY B            END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: GIFTS_AND_HOSPITALITY_EQ  CreateDate: 2025-06-26 17:43:25.793  ModifyDate: 2025-06-26 17:43:25.793  --- DEFINITION START ---  -- =============================================    -- Author:  <Will Henderson>    -- Create date: <05/09/2018>    -- Description: <Build a table with required columns to dsiplay for Gifts & Hospitality in EQ Compliance inspections    --   This stored procedure is lifted and shifted from [dbo].[GIFTS_AND_HOSPITALITY_FI]>    -- =============================================        -- ***************VERSION CONTROL***************        -- *********************************************        CREATE PROCEDURE [dbo].[GIFTS_AND_HOSPITALITY_EQ]        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets FROM     -- interfering with SELECT statements.     SET NOCOUNT ON;         IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades     SELECT DISTINCT      po.ORD_NUM,      t.TRD_COUNTERPARTY,      MULTI_FUND_ID,      TRD_TRADER,      CONVERT(VARCHAR,t.TRD_TRADE_DATE,103) AS TRD_TRADE_DATE,      CONCAT(CONVERT(VARCHAR,t.EXECUTION_TIME,103),' ',CONVERT(VARCHAR,t.EXECUTION_TIME,108)) AS EXECUTION_TIME,      CONVERT(DECIMAL(15,2),t.TRD_PRICE) AS TRD_PRICE,      CONVERT(DECIMAL(21,2),SUM(ABS(NET_CONSIDERATION))) AS NET_CONSIDERATION     INTO #trades      FROM VISTA_REPORTING.dbo.PM_ORDERS po     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD=po.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM=oc.TRD_ORD     WHERE t.FinalFlag = 1     GROUP BY po.ORD_NUM,      t.TRD_COUNTERPARTY,      MULTI_FUND_ID,      TRD_TRADER,      CONVERT(VARCHAR,t.TRD_TRADE_DATE,103),      CONCAT(CONVERT(VARCHAR,t.EXECUTION_TIME,103),' ',CONVERT(VARCHAR,t.EXECUTION_TIME,108)) ,      CONVERT(DECIMAL(15,2),t.TRD_PRICE)              --Create a table with all the concatenated from the TRADES table.     IF OBJECT_ID('tempdb..#CONCAT', 'U') IS NOT NULL DROP TABLE #CONCAT     SELECT      t1.ORD_NUM,      STUFF((       SELECT DISTINCT        ' | ' + LTRIM(RTRIM(t2.TRD_COUNTERPARTY))       FROM #trades t2       WHERE t1.ORD_NUM=t2.ORD_NUM       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS CP_CONCAT, --Concatenate all TRD_COUNTERPARTY codes for the PM ORD_NUM      STUFF((       SELECT DISTINCT        ' | ' + LTRIM(RTRIM(t2.MULTI_FUND_ID))       FROM #trades t2       WHERE t1.ORD_NUM=t2.ORD_NUM       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS MF_CONCAT, --Concatenate all MULTI_FUND_IDs for the PM ORD_NUM      STUFF((       SELECT DISTINCT        ' | ' + LTRIM(RTRIM(t2.TRD_TRADER))       FROM #trades t2       WHERE t1.ORD_NUM=t2.ORD_NUM       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS TRADER_CONCAT, --Concatenate all TRADER initials for the PM ORD_NUM      STUFF((       SELECT DISTINCT        ' | ' + LTRIM(RTRIM(t2.TRD_TRADE_DATE))       FROM #trades t2       WHERE t1.ORD_NUM=t2.ORD_NUM       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS TRADE_DATE_CONCAT, --Concatenate all Trade Dates for the PM ORD_NUM      STUFF((       SELECT DISTINCT        ' | ' + LTRIM(RTRIM(t2.EXECUTION_TIME))       FROM #trades t2       WHERE t1.ORD_NUM=t2.ORD_NUM       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS EX_TIME_CONCAT, --Concatenate all EXECUTION_TIMES for that PM ORD_NUM      STUFF((       SELECT DISTINCT        ' | ' + LTRIM(RTRIM(t2.TRD_PRICE))       FROM #trades t2       WHERE t1.ORD_NUM=t2.ORD_NUM       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS PRICE_CONCAT, --Concatenate all TRD_PRICE for that PM ORD_NUM      STUFF((       SELECT DISTINCT        ' | ' + format(t2.NET_CONSIDERATION,'N2')       FROM #trades t2       WHERE t1.ORD_NUM=t2.ORD_NUM       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS NET_CONS_CONCAT --Concatenate all NET_CONSIDERATIONS for that PM ORD_NUM     INTO #CONCAT     FROM #trades t1             --Combining values from the MASTER_PM_ORDER_TABLE with the previous concatenated fields to create the final table     IF OBJECT_ID('VISTA_STAGING.dbo.GIFTS_AND_HOSPITALITY_EQ_TABLE', 'U') IS NOT NULL DROP TABLE VISTA_STAGING.dbo.GIFTS_AND_HOSPITALITY_EQ_TABLE     SELECT DISTINCT      mp.ORD_NUM,      mp.[General Comment],      mp.FM,      mp.Side,      c.MF_CONCAT AS [Multi Fund ID],      c.TRADER_CONCAT AS [Dealer],      c.CP_CONCAT AS [Executed CP],      c.TRADE_DATE_CONCAT AS [Trade Date],      c.EX_TIME_CONCAT AS [Execution Time],      c.PRICE_CONCAT AS [Price],      c.NET_CONS_CONCAT AS [Size]     INTO VISTA_STAGING.dbo.GIFTS_AND_HOSPITALITY_EQ_TABLE     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER mp     LEFT JOIN #CONCAT c ON c.ORD_NUM=mp.ORD_NUM     WHERE mp.DEALING_DESK = 'Equity'        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: GIFTS_AND_HOSPITALITY_EQ_PROC  CreateDate: 2025-06-26 17:43:40.607  ModifyDate: 2025-06-26 17:43:40.607  --- DEFINITION START ---      -- =============================================    -- Author:  <da COsta, David>    -- Create date: <2018-05-23>    -- Description: <Procedure to implement compliance sampling>    -- =============================================        -- ***************VERSION CONTROL***************    -- *********************************************        CREATE PROCEDURE [dbo].[GIFTS_AND_HOSPITALITY_EQ_PROC]         AS    BEGIN         DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()         -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids     SELECT DISTINCT       oc.PM_ORD AS ORD_NUM,      oc.TRD_ORD,      t.MULTI_FUND_ID     INTO #distinct_ids     FROM VISTA_STAGING.dbo.GIFTS_AND_HOSPITALITY_EQ_TABLE gh     LEFT JOIN Vista_Reporting.dbo.ORDERS_CROSS oc ON oc.PM_ORD = gh.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM = oc.TRD_ORD                IF OBJECT_ID('VISTA_REPORTING.dbo.GIFTS_AND_HOSPITALITY_EQ', 'U') IS NOT NULL     DELETE FROM #distinct_ids where NOT EXISTS (SELECT od.PM_ORD FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                 WHERE od.PM_ORD = #distinct_ids.ORD_NUM                UNION                 SELECT DISTINCT smp.ORD_NUM FROM VISTA_REPORTING.dbo.SAMPLED_ORDERS_COMPLIANCE smp                 WHERE smp.ORD_NUM = #distinct_ids.ORD_NUM AND smp.DEALING_DESK = 'Equity')             IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     select distinct      pmo.ORD_NUM AS PM_ORD,      CONVERT(VARCHAR(250),gh.[General Comment]) as [General Comment],      CONVERT(VARCHAR(250),null) as [Dealer Comment],      CONVERT(VARCHAR(50),gh.FM) AS FM,      CONVERT(VARCHAR(50),gh.Side) as Side,      CONVERT(VARCHAR(50),gh.[MULTI FUND ID]) AS MULTI_FUND_ID,      CONVERT(VARCHAR(50),gh.Dealer) AS Dealer,      CONVERT(VARCHAR(50),gh.[Executed CP]) as [Executed Cpty],      CONVERT(VARCHAR(250),gh.[Trade Date]) as [Trade Date],      CONVERT(VARCHAR(250),gh.[Execution Time]) as [Execution Time],      CONVERT(VARCHAR(250),gh.Price) as [Price],      CONVERT(VARCHAR(250),gh.Size) as Size,      oc.TRD_ORD,      t.PLACEMENT_NUM,      t.CLIENT_EXECUTION_NUM,      pmo.AUTH_TIME,      t.EXECUTION_TIME,      soc.SAMPLED_DATE as CREATE_TIME,      ex.Status,      pmo.DEALING_DESK      into #temp_final_master_table      from (SELECT DISTINCT ORD_NUM, AUTH_TIME, DEALING_DESK FROM VISTA_REPORTING.dbo.PM_ORDERS) pmo      LEFT JOIN VISTA_REPORTING.dbo.COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE ex ON pmo.ORD_NUM = ex.PM_ORD AND ex.Exception_Type = 'G&H'      left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc on pmo.ORD_NUM = oc.PM_ORD      left join(SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, PLACEMENT_NUM, CLIENT_EXECUTION_NUM, EXECUTION_TIME FROM VISTA_REPORTING.dbo.TRADES) t on oc.TRD_ORD = t.ORD_NUM      inner join [VISTA_REPORTING].[dbo].[SAMPLED_ORDERS_COMPLIANCE] soc on soc.ORD_NUM = pmo.ORD_NUM -- inner join because we only want to look at sampled orders      LEFT JOIN VISTA_STAGING.dbo.GIFTS_AND_HOSPITALITY_EQ_TABLE gh ON pmo.ORD_NUM = gh.ORD_NUM      WHERE EXISTS (SELECT DISTINCT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = pmo.ORD_NUM)             IF OBJECT_ID('VISTA_REPORTING.dbo.GIFTS_AND_HOSPITALITY_EQ', 'U') IS NOT NULL     DELETE FROM VISTA_REPORTING.dbo.GIFTS_AND_HOSPITALITY_EQ      WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = VISTA_REPORTING.dbo.GIFTS_AND_HOSPITALITY_EQ.PM_ORD)             IF OBJECT_ID('VISTA_REPORTING.dbo.GIFTS_AND_HOSPITALITY_EQ', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.GIFTS_AND_HOSPITALITY_EQ     SELECT *     FROM #temp_final_master_table         ELSE         SELECT *     INTO VISTA_REPORTING.dbo.GIFTS_AND_HOSPITALITY_EQ     FROM #temp_final_master_table         IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(     'GIFTS_AND_HOSPITALITY_EQ', --TABLE_NAME     @START_TIME, --START_TIME     GETDATE(), --END_TIME     DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS      CAST(GETDATE() as date)) --COMPLETION_DATE        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: GIFTS_AND_HOSPITALITY_FI  CreateDate: 2025-06-26 17:43:54.377  ModifyDate: 2025-06-26 17:43:54.377  --- DEFINITION START ---  -- =============================================    -- Author:  <David da Costa>    -- Create date: <22/08/2018>    -- Description: <Build a master table containing all necessary     --    information required in the front end for PM Orders>    -- =============================================        -- ***************VERSION CONTROL***************        -- *********************************************        CREATE PROCEDURE [dbo].[GIFTS_AND_HOSPITALITY_FI]        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets FROM     -- interfering with SELECT statements.     SET NOCOUNT ON;         IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades     SELECT DISTINCT      po.ORD_NUM,      t.TRD_COUNTERPARTY,      MULTI_FUND_ID,      TRD_TRADER,      CONVERT(VARCHAR,t.TRD_TRADE_DATE,103) AS TRD_TRADE_DATE,      CONCAT(CONVERT(VARCHAR,t.EXECUTION_TIME,103),' ',CONVERT(VARCHAR,t.EXECUTION_TIME,108)) AS EXECUTION_TIME,      CONVERT(DECIMAL(15,2),t.TRD_PRICE) AS TRD_PRICE,      CONVERT(DECIMAL(21,2),SUM(ABS(NET_CONSIDERATION))) AS NET_CONSIDERATION     INTO #trades      FROM VISTA_REPORTING.dbo.PM_ORDERS po     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD=po.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM=oc.TRD_ORD     WHERE t.FinalFlag = 1     GROUP BY po.ORD_NUM,      t.TRD_COUNTERPARTY,      MULTI_FUND_ID,      TRD_TRADER,      CONVERT(VARCHAR,t.TRD_TRADE_DATE,103),      CONCAT(CONVERT(VARCHAR,t.EXECUTION_TIME,103),' ',CONVERT(VARCHAR,t.EXECUTION_TIME,108)) ,      CONVERT(DECIMAL(15,2),t.TRD_PRICE)          --Create a table with all the concatenated from the TRADES table.     IF OBJECT_ID('tempdb..#CONCAT', 'U') IS NOT NULL DROP TABLE #CONCAT     SELECT      t1.ORD_NUM,      STUFF((       SELECT DISTINCT        ' | ' + LTRIM(RTRIM(t2.TRD_COUNTERPARTY))       FROM #trades t2       WHERE t1.ORD_NUM=t2.ORD_NUM       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS CP_CONCAT, --Concatenate all TRD_COUNTERPARTY codes for the PM ORD_NUM      STUFF((       SELECT DISTINCT        ' | ' + LTRIM(RTRIM(t2.MULTI_FUND_ID))       FROM #trades t2       WHERE t1.ORD_NUM=t2.ORD_NUM       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS MF_CONCAT, --Concatenate all MULTI_FUND_IDs for the PM ORD_NUM      STUFF((       SELECT DISTINCT        ' | ' + LTRIM(RTRIM(t2.TRD_TRADER))       FROM #trades t2       WHERE t1.ORD_NUM=t2.ORD_NUM       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS TRADER_CONCAT, --Concatenate all TRADER initials for the PM ORD_NUM      STUFF((       SELECT DISTINCT        ' | ' + LTRIM(RTRIM(t2.TRD_TRADE_DATE))       FROM #trades t2       WHERE t1.ORD_NUM=t2.ORD_NUM       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS TRADE_DATE_CONCAT, --Concatenate all Trade Dates for the PM ORD_NUM      STUFF((       SELECT DISTINCT        ' | ' + LTRIM(RTRIM(t2.EXECUTION_TIME))       FROM #trades t2       WHERE t1.ORD_NUM=t2.ORD_NUM       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS EX_TIME_CONCAT, --Concatenate all EXECUTION_TIMES for that PM ORD_NUM      STUFF((       SELECT DISTINCT        ' | ' + LTRIM(RTRIM(t2.TRD_PRICE))       FROM #trades t2       WHERE t1.ORD_NUM=t2.ORD_NUM       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS PRICE_CONCAT, --Concatenate all TRD_PRICE for that PM ORD_NUM      STUFF((       SELECT DISTINCT        ' | ' + LTRIM(RTRIM(t2.NET_CONSIDERATION))       FROM #trades t2       WHERE t1.ORD_NUM=t2.ORD_NUM       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS NET_CONS_CONCAT --Concatenate all NET_CONSIDERATIONS for that PM ORD_NUM     INTO #CONCAT     FROM #trades t1             --Combining values from the MASTER_PM_ORDER_TABLE with the previous concatenated fields to create the final table     IF OBJECT_ID('VISTA_STAGING.dbo.GIFTS_AND_HOSPITALITY_FI_TABLE', 'U') IS NOT NULL DROP TABLE VISTA_STAGING.dbo.GIFTS_AND_HOSPITALITY_FI_TABLE     SELECT DISTINCT      mp.ORD_NUM,      mp.[General Comment],      mp.FM,      mp.Side,      c.MF_CONCAT AS [Multi Fund ID],      c.TRADER_CONCAT AS [Dealer],      c.CP_CONCAT AS [Executed CP],      c.TRADE_DATE_CONCAT AS [Trade Date],      c.EX_TIME_CONCAT AS [Execution Time],      c.PRICE_CONCAT AS [Price],      c.NET_CONS_CONCAT AS [Size]     INTO VISTA_STAGING.dbo.GIFTS_AND_HOSPITALITY_FI_TABLE     FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER mp     LEFT JOIN #CONCAT c ON c.ORD_NUM=mp.ORD_NUM     WHERE mp.DEALING_DESK = 'Fixed Income'        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: GIFTS_AND_HOSPITALITY_FI_PROC  CreateDate: 2025-06-26 17:44:07.810  ModifyDate: 2025-06-26 17:44:07.810  --- DEFINITION START ---      -- =============================================    -- Author:  <da COsta, David>    -- Create date: <2018-05-23>    -- Description: <Procedure to implement compliance sampling>    -- =============================================        -- ***************VERSION CONTROL***************    -- *********************************************        CREATE PROCEDURE [dbo].[GIFTS_AND_HOSPITALITY_FI_PROC]             AS    BEGIN         DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()         -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;             IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids     SELECT DISTINCT       gh.ORD_NUM,      oc.TRD_ORD,      t.MULTI_FUND_ID     INTO #distinct_ids     FROM VISTA_STAGING.dbo.GIFTS_AND_HOSPITALITY_FI_TABLE gh     LEFT JOIN Vista_Reporting.dbo.ORDERS_CROSS oc ON oc.PM_ORD = gh.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM = oc.TRD_ORD               IF OBJECT_ID('VISTA_REPORTING.dbo.GIFTS_AND_HOSPITALITY_FI', 'U') IS NOT NULL     DELETE FROM #distinct_ids where NOT EXISTS (SELECT od.PM_ORD FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                WHERE od.PM_ORD = #distinct_ids.ORD_NUM                UNION                SELECT DISTINCT smp.ORD_NUM FROM VISTA_REPORTING.dbo.SAMPLED_ORDERS_COMPLIANCE smp                 WHERE smp.ORD_NUM = #distinct_ids.ORD_NUM AND smp.DEALING_DESK = 'Fixed Income')              IF OBJECT_ID('tempdb..#temp_trades', 'U') IS NOT NULL DROP TABLE #temp_trades     SELECT DISTINCT      oc.PM_ORD,      t.ORD_NUM,      t.MULTI_FUND_ID,      t.ACTIVITY_TYPE,      t.TRD_COUPON,      t.TRD_YIELD,      t.CLIENT_EXECUTION_NUM,      t.PLACEMENT_NUM,      t.EXECUTION_TIME,      t.TRD_ENTRY_TIME,      t.TRD_PRICING_SPREAD,      t.TRD_COUNTERPARTY,      t.TRD_ORIG_FACE     INTO #temp_trades     FROM Vista_Reporting.dbo.TRADES t     LEFT JOIN Vista_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = t.ORD_NUM     WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE oc.PM_ORD = di.ORD_NUM)             IF OBJECT_ID('tempdb..#temp_placements', 'U') IS NOT NULL DROP TABLE #temp_placements     SELECT DISTINCT      pl.VENUE,       pl.PLACEMENT_NUM      INTO #temp_placements     FROM VISTA_REPORTING.dbo.PLACEMENTS pl     WHERE EXISTS (SELECT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = pl.ORD_NUM)             IF OBJECT_ID('tempdb..#temp_prim', 'U') IS NOT NULL DROP TABLE #temp_prim     SELECT DISTINCT      pr.MULTI_FUND_ID,       pr.TWEB_CLOSE_DEALING,       pr.[1615_DEALING],       pr.INST_TYPE,       pr.DEALING_DESK,       pr.SM_SEC_GROUP,       pr.SM_SEC_TYPE,       pr.DEBT_DERIV,      pr.PRIMARY_MARKET     INTO #temp_prim     FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr     WHERE DEALING_DESK = 'Fixed Income'        AND EXISTS (SELECT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = pr.ORD_NUM)              IF OBJECT_ID('tempdb..#Latest_temp_trades', 'U') IS NOT NULL DROP TABLE #Latest_temp_trades     SELECT       t.PM_ORD,      t.ORD_NUM,       t.MULTI_FUND_ID,       SUM(ABS(t.TRD_ORIG_FACE)) AS [Booked Amt],      t.TRD_COUPON,      t.TRD_YIELD,      t.TRD_PRICING_SPREAD,      t.TRD_COUNTERPARTY,      p.PLACEMENT_NUM,      t.CLIENT_EXECUTION_NUM,      t.EXECUTION_TIME,      t.TRD_ENTRY_TIME,      ISNULL(p.Venue,'Manual') AS Venue,      CASE       WHEN prim.TWEB_CLOSE_DEALING = 1 THEN 'TWEB Close'       WHEN prim.[1615_DEALING] = 1 THEN '1615 Dealing'       WHEN t.ACTIVITY_TYPE = 'MG.FI 1. Proces' THEN 'VPT'      END AS [Method],      prim.INST_TYPE as [Inst Type],      CASE       WHEN prim.DEALING_DESK='Fixed Income'       THEN          CASE          WHEN prim.SM_SEC_GROUP = 'SWAP' AND prim.SM_SEC_TYPE IN ('SWAP','CSWAP') THEN CONVERT(DECIMAL(18,2),t.TRD_COUPON)         WHEN prim.DEBT_DERIV = 'DEBT' THEN CONVERT(DECIMAL(18,2),t.TRD_YIELD)        END       --WHEN pr.DEALING_DESK='Equity'       --THEN CONVERT(DECIMAL(18,2),lst_trd.TRD_YIELD)       --WHEN pr.DEALING_DESK='Leveraged Finance'       --THEN CONVERT(DECIMAL(18,2),lst_trd.TRD_YIELD)       END AS [Rate],      p.VENUE AS [Platform],      prim.PRIMARY_MARKET     INTO #Latest_temp_trades     FROM #temp_trades t     LEFT JOIN #temp_placements p ON t.PLACEMENT_NUM = p.PLACEMENT_NUM     LEFT JOIN #temp_prim prim on t.MULTI_FUND_ID = prim.MULTI_FUND_ID     WHERE prim.MULTI_FUND_ID IS NOT NULL     GROUP BY       t.PM_ORD,      ORD_NUM,       t.MULTI_FUND_ID,       TRD_COUPON,      TRD_YIELD,      TRD_PRICING_SPREAD,      TRD_COUNTERPARTY,      TWEB_CLOSE_DEALING,      [1615_DEALING],      ACTIVITY_TYPE,      Venue,      p.PLACEMENT_NUM,      CLIENT_EXECUTION_NUM,      EXECUTION_TIME,      TRD_ENTRY_TIME,      prim.DEALING_DESK,      prim.SM_SEC_GROUP,      prim.SM_SEC_TYPE,      t.TRD_COUPON,      prim.DEBT_DERIV,      t.TRD_YIELD,      p.VENUE,      prim.PRIMARY_MARKET,      prim.INST_TYPE             IF OBJECT_ID('tempdb..#concat_ord', 'U') IS NOT NULL DROP TABLE #concat_ord     SELECT       ORD_NUM,      STUFF((        SELECT '| ' + CAST(PLACEMENT_NUM AS VARCHAR(50))         FROM (SELECT DISTINCT PM_ORD, PLACEMENT_NUM FROM #Latest_temp_trades) Results        WHERE (t.ORD_NUM = Results.PM_ORD)         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')       ,1,2,'') AS PLACEMENTN_concat,      STUFF((        SELECT '| ' + CAST(CLIENT_EXECUTION_NUM AS VARCHAR(50))         FROM (SELECT DISTINCT PM_ORD, CLIENT_EXECUTION_NUM FROM #Latest_temp_trades) Results        WHERE (t.ORD_NUM = Results.PM_ORD)         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')       ,1,2,'') AS CEX_NUM_concat,       STUFF((        SELECT '| ' + CAST(EXECUTION_TIME AS VARCHAR(50))         FROM (SELECT DISTINCT PM_ORD, EXECUTION_TIME FROM #Latest_temp_trades) Results        WHERE (t.ORD_NUM = Results.PM_ORD)         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')       ,1,2,'') AS EX_TIME_concat,        STUFF((        SELECT '| ' + CAST(CONVERT(DECIMAL(19,2),[Booked amt]) AS VARCHAR(50))         FROM (SELECT DISTINCT PM_ORD, [Booked amt] FROM #Latest_temp_trades) Results        WHERE (t.ORD_NUM = Results.PM_ORD)         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')       ,1,2,'') AS Booked_amt_concat,      STUFF((        SELECT '| ' + CAST([Inst Type] AS VARCHAR(50))         FROM (SELECT DISTINCT PM_ORD, [Inst Type] FROM #Latest_temp_trades) Results        WHERE (t.ORD_NUM = Results.PM_ORD)         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')       ,1,2,'') AS INST_TYPE_concat,      STUFF((        SELECT '| ' + CAST(CONVERT(DECIMAL(18,2), TRD_PRICING_SPREAD) AS VARCHAR(50))         FROM (SELECT DISTINCT PM_ORD, TRD_PRICING_SPREAD FROM #Latest_temp_trades) Results        WHERE (t.ORD_NUM = Results.PM_ORD)         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')       ,1,2,'') AS TRD_SPREAD_concat,      STUFF((        SELECT '| ' + CAST(Rate AS VARCHAR(50))         FROM (SELECT DISTINCT PM_ORD, Rate FROM #Latest_temp_trades) Results        WHERE (t.ORD_NUM = Results.PM_ORD)         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')       ,1,2,'') AS RATE_concat,      STUFF((        SELECT '| ' + CAST(TRD_COUNTERPARTY AS VARCHAR(50))         FROM (SELECT DISTINCT PM_ORD, TRD_COUNTERPARTY FROM #Latest_temp_trades) Results        WHERE (t.ORD_NUM = Results.PM_ORD)         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')       ,1,2,'') AS CPTY_concat,       STUFF((        SELECT '| ' + CAST(Venue AS VARCHAR(50))         FROM (SELECT DISTINCT PM_ORD, Venue FROM #Latest_temp_trades) Results        WHERE (t.ORD_NUM = Results.PM_ORD)         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')       ,1,2,'') AS VENUE_concat,       STUFF((        SELECT '| ' + CAST(Method AS VARCHAR(50))         FROM (SELECT DISTINCT PM_ORD, Method FROM #Latest_temp_trades) Results        WHERE (t.ORD_NUM = Results.PM_ORD)         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')       ,1,2,'') AS METHOD_concat,      STUFF((        SELECT '| ' + CAST(PRIMARY_MARKET AS VARCHAR(50))         FROM (SELECT DISTINCT PM_ORD, PRIMARY_MARKET FROM #Latest_temp_trades) Results        WHERE (t.ORD_NUM = Results.PM_ORD)         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')       ,1,2,'') AS PMARKET_concat,       STUFF((        SELECT '| ' + CAST(CONVERT(DATE, TRD_ENTRY_TIME) AS VARCHAR(50))         FROM (SELECT DISTINCT PM_ORD, TRD_ENTRY_TIME FROM #Latest_temp_trades) Results        WHERE (t.ORD_NUM = Results.PM_ORD)         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')       ,1,2,'') AS TENTRY_concat       INTO #concat_ord     FROM (SELECT DISTINCT ORD_NUM FROM VISTA_REPORTING.dbo.PM_ORDERS where DEALING_DESK = 'Fixed Income') t     WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = t.ORD_NUM)     GROUP BY ORD_NUM             IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     select distinct      pmo.ORD_NUM AS PM_ORD,      CONVERT(VARCHAR(250),gh.[General Comment]) as [General Comment],      CONVERT(VARCHAR(50),gh.FM) AS FM,      CONVERT(VARCHAR(50),gh.Side) as Side,      CONVERT(VARCHAR(50),gh.[MULTI FUND ID]) AS MULTI_FUND_ID,      CONVERT(VARCHAR(50),gh.Dealer) AS Dealer,      CONVERT(VARCHAR(50),gh.[Executed CP]) as [Executed Cpty],      CONVERT(VARCHAR(250),gh.[Trade Date]) as [Trade Date],      CONVERT(VARCHAR(250),gh.[Execution Time]) as [Execution Time],      CONVERT(VARCHAR(250),gh.Price) as [Price],      CONVERT(VARCHAR(250),gh.Size) as Size,      oc.TRD_ORD,      ltt.PLACEMENTN_concat AS [PLACEMENT_NUM],      ltt.CEX_NUM_concat AS CLIENT_EXECUTION_NUM,      pmo.AUTH_TIME,      ltt.EX_TIME_concat AS EXECUTION_TIME,      soc.SAMPLED_DATE as CREATE_TIME,      ex.Status,      pmo.DEALING_DESK,      pmo.FACE AS [Ord Amt],      ltt.Booked_amt_concat AS [Booked Amt],      ltt.INST_TYPE_concat AS [Inst Type],      ltt.TRD_SPREAD_concat as [Spread],      ltt.RATE_concat AS [Rate],      ltt.CPTY_concat AS [CPTY],      ltt.VENUE_concat AS [Platform],      ltt.METHOD_concat AS [Method],      ltt.PMARKET_concat AS [Primary Market],      ltt.TENTRY_concat AS [Entry Date]      into #temp_final_master_table      from Vista_STAGING.dbo.GIFTS_AND_HOSPITALITY_FI_TABLE gh      --from (SELECT DISTINCT ORD_NUM, AUTH_TIME, DEALING_DESK, FACE FROM VISTA_REPORTING.dbo.PM_ORDERS) pmo      LEFT JOIN VISTA_REPORTING.dbo.PM_ORDERS pmo ON pmo.ORD_NUM = gh.ORD_NUM      LEFT JOIN VISTA_REPORTING.dbo.COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE ex ON pmo.ORD_NUM = ex.PM_ORD AND ex.Exception_Type = 'GH'      LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc on ex.PM_ORD = oc.PM_ORD      INNER JOIN [VISTA_REPORTING].[dbo].[SAMPLED_ORDERS_COMPLIANCE] soc on soc.ORD_NUM = pmo.ORD_NUM -- inner join because we only want to look at sampled orders      --LEFT JOIN VISTA_STAGING.dbo.GIFTS_AND_HOSPITALITY_FI_TABLE gh ON pmo.ORD_NUM = gh.ORD_NUM      LEFT JOIN #concat_ord ltt ON ltt.ORD_NUM=soc.ORD_NUM      WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = pmo.ORD_NUM)         --AND EXISTS (SELECT soc.ORD_NUM FROM [VISTA_REPORTING].[dbo].[SAMPLED_ORDERS_COMPLIANCE] soc WHERE soc.ORD_NUM = gh.ORD_NUM)             IF OBJECT_ID('VISTA_REPORTING.dbo.GIFTS_AND_HOSPITALITY_FI', 'U') IS NOT NULL     DELETE FROM VISTA_REPORTING.dbo.GIFTS_AND_HOSPITALITY_FI     WHERE PM_ORD IN (SELECT DISTINCT ORD_NUM FROM #distinct_ids)             IF OBJECT_ID('VISTA_REPORTING.dbo.GIFTS_AND_HOSPITALITY_FI', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.GIFTS_AND_HOSPITALITY_FI     SELECT *     FROM #temp_final_master_table         ELSE         SELECT *     INTO VISTA_REPORTING.dbo.GIFTS_AND_HOSPITALITY_FI     FROM #temp_final_master_table         IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(     'GIFTS_AND_HOSPITALITY_FI', --TABLE_NAME     @START_TIME, --START_TIME     GETDATE(), --END_TIME     DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS      CAST(GETDATE() as date)) --COMPLETION_DATE            END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: HOLIDAYS_COPPCLARK_DATACOPY  CreateDate: 2025-01-07 09:12:11.970  ModifyDate: 2025-06-24 06:33:39.147  --- DEFINITION START ---  CREATE PROCEDURE [dbo].[HOLIDAYS_COPPCLARK_DATACOPY]        AS           BEGIN               SET XACT_ABORT ON;                       BEGIN TRY                   BEGIN TRAN                     DECLARE @RecCount Varchar(50);            SELECT @RecCount = COUNT(1) FROM [staging].[HOLIDAYS_COPP_CLARK] WITH (NOLOCK);                               -- Delete records older than 1 year from the table            DELETE FROM [dbo].[HOLIDAYS_COPP_CLARK] WHERE [CREATED] < DATEADD(DAY, -1850, GETDATE());                                  -- Insert staging data into dbo table             INSERT INTO [dbo].[HOLIDAYS_COPP_CLARK](            [COUNTRY_CODE],            [COUNTRY_NAME],            [CLOSURE_DATES],            [CREATED]            )            SELECT            [COUNTRY_CODE],           [COUNTRY],           [EVENT_DATE],           getdate()            FROM   [staging].[HOLIDAYS_COPP_CLARK] WITH (NOLOCK);                    INSERT INTO [dbo].[DATAPRODUCT_LOGS] ([Action], [DataProduct], [Result], Created) VALUES('COPPCLARK_HOLIDAY_DATACOPY:Process - Completed - ' + @RecCount + ' received.','COPPCLARK_HOLIDAY','Success',GETDATE());                                    COMMIT TRAN                           SELECT 'SUCCESS' AS RESULT;              END TRY                       BEGIN CATCH                 Print N'Rollback Transaction - '                         + Error_Message() + ' '                         + convert(varchar(200), ERROR_LINE())                   INSERT INTO [dbo].[DATAPRODUCT_LOGS] ([Action], [DataProduct], [Result], Created) VALUES(Error_Message() + ' ' + convert(varchar(200), ERROR_LINE()),'COPPCLARK_HOLIDAY','Failed',GETDATE());                                     IF ( @@TRANCOUNT > 0 AND XACT_STATE() != 0 )                     ROLLBACK TRAN;                  THROW;              END CATCH;         END  --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: IMPLEMENTATION_SHORTFALL_EQ  CreateDate: 2025-06-26 17:45:15.560  ModifyDate: 2025-06-26 17:45:15.560  --- DEFINITION START ---      -- ***************VERSION CONTROL***************    -- 2022-03-01;Matej Miter created for jira:    --SURVG-554 - Added into master table new field for reporting purposes coming from Markit file (OrderReason)    -- *********************************************        CREATE PROCEDURE [dbo].[IMPLEMENTATION_SHORTFALL_EQ]        AS    BEGIN             DECLARE @START_TIME as datetime    SET @START_TIME = GETDATE()        IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids    SELECT DISTINCT      ol.[ORD_NUM] as TRD_ORD    INTO #distinct_ids    FROM Vista_Staging.dbo.VG_IMPLEMENTATION_SHORTFALL_EQ_TABLE ol             IF OBJECT_ID('Vista_Reporting.dbo.IMPLEMENTATION_SHORTFALL_EQ', 'U') IS NOT NULL    DELETE FROM #distinct_ids where NOT EXISTS (SELECT DISTINCT od.TRD_ORD               FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od               WHERE od.TRD_ORD = #distinct_ids.TRD_ORD)            IF OBJECT_ID('tempdb..#trd_ord_pop', 'U') IS NOT NULL DROP TABLE #trd_ord_pop    SELECT DISTINCT *    into #trd_ord_pop    FROM Vista_Reporting.dbo.TRD_ORDERS tr    where EXISTS (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = tr.ORD_NUM)    --and DEALING_DESK = 'Equity'            IF OBJECT_ID('tempdb..#max_touch', 'U') IS NOT NULL DROP TABLE #max_touch    SELECT     ORD_NUM,     MAX(TOUCH_COUNT) AS MAX_TOUCH    INTO #max_touch    FROM #trd_ord_pop    GROUP BY ORD_NUM            IF OBJECT_ID('tempdb..#max_touch_trd_ord', 'U') IS NOT NULL DROP TABLE #max_touch_trd_ord    SELECT DISTINCT trd_pop.*    INTO #max_touch_trd_ord    FROM #trd_ord_pop trd_pop    INNER JOIN #max_touch mt on mt.MAX_TOUCH = trd_pop.TOUCH_COUNT          AND mt.ORD_NUM = trd_pop.ORD_NUM            IF OBJECT_ID('tempdb..#temp_trades', 'U') IS NOT NULL DROP TABLE #temp_trades    SELECT DISTINCT      t.MULTI_FUND_ID,      t.ORD_NUM,      t.CUSIP,      t.EXECUTION_TIME,      t.TRD_PRICE,     t.TRD_ORIG_FACE,     --oc.PM_ORD,     t.TRD_TRADER,     t.TRD_TRADE_DATE,     t.TRD_AUTH_TIME,     t.TRDCOMM_COMMENTS,     t.PORTFOLIOS_PORTFOLIO_NAME,     t.TRD_COUNTERPARTY,     t.EXECUTION_TYPE_DECODE,     pr.INST_TYPE,     concat(t.SM_SEC_GROUP,'/',t.SM_SEC_TYPE) AS ASSET_SUB,     CASE      WHEN pr.TWEB_CLOSE_DEALING = 1 THEN 'TWEB Close'      WHEN pr.[1615_DEALING] = 1 THEN '1615 Dealing'      WHEN t.ACTIVITY_TYPE = 'MG.FI 1. Proces' THEN 'VPT'     END AS [Method],     pr.PRIMARY_MARKET    INTO #temp_trades    FROM Vista_Reporting.dbo.TRADES t    LEFT JOIN Vista_Reporting.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID = t.MULTI_FUND_ID    LEFT JOIN Vista_Reporting.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = t.ORD_NUM     WHERE t.FinalFlag = 1        AND oc.PM_ORD IS NOT NULL        --AND pr.DEALING_DESK = 'Equity'       --AND EXISTS (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = t.ORD_NUM)            IF OBJECT_ID('tempdb..#average_daily_temp', 'U') IS NOT NULL DROP TABLE #average_daily_temp    SELECT DISTINCT     t.ORD_NUM,      --t.MULTI_FUND_ID,      ABS(tr.FACE) AS FACE,     t.TRD_ORIG_FACE,     pb.ACCUMULATED_VOLUME_UNSCALED    INTO #average_daily_temp    FROM #temp_trades t    LEFT JOIN Vista_Reporting.dbo.REUTERS_PRICE_BENCHMARK_TABLE pb on pb.MULTI_FUND_ID=T.MULTI_FUND_ID    LEFT JOIN #max_touch_trd_ord tr ON t.ORD_NUM = tr.ORD_NUM    WHERE EXISTS (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = t.ORD_NUM)            IF OBJECT_ID('tempdb..#average_daily_remain', 'U') IS NOT NULL DROP TABLE #average_daily_remain    SELECT      ORD_NUM,      --MULTI_FUND_ID,      --SUM(ABS(TRD_ORIG_FACE)) AS [Booked Amt],     FACE - SUM(ABS(TRD_ORIG_FACE)) AS [Remain Amt],     [ACCUMULATED_VOLUME_UNSCALED] AS [Average daily volume],     CONVERT(DECIMAL(10,2) , 100.0*(FACE - SUM(ABS(TRD_ORIG_FACE)))/NULLIF([ACCUMULATED_VOLUME_UNSCALED], 0)) AS [Remain Amt as percent of daily volume]    INTO #average_daily_remain    FROM #average_daily_temp    GROUP BY     ORD_NUM,     --MULTI_FUND_ID,     FACE,    [ACCUMULATED_VOLUME_UNSCALED]            IF OBJECT_ID('tempdb..#max_tr_touch', 'U') IS NOT NULL DROP TABLE #max_tr_touch    SELECT DISTINCT     t1.ORD_NUM     ,t1.TRADER     ,t1.TRADER_FULL_NAME     ,t1.FACE     ,t1.COMMENTS_VALUE     ,t1.AUTH_TIME     ,t1.SEC_DESC1     ,t1.ORDER_REASON_DECODE    INTO #max_tr_touch    FROM #max_touch_trd_ord as t1                               IF OBJECT_ID('tempdb..#min_auth_face', 'U') IS NOT NULL DROP TABLE #min_auth_face    SELECT        po.ORD_NUM,     po.AUTH_TIME,        po2.MIN_ACTIVE_TIME    INTO #min_auth_face    FROM #trd_ord_pop po    INNER JOIN (       SELECT         ORD_NUM,         MIN(TOUCH_COUNT) AS MIN_TOUCH,        MIN(ACTIVE_TIME) AS MIN_ACTIVE_TIME        FROM #trd_ord_pop        WHERE AUTH_TIME IS NOT NULL AND DEALING_DESK = 'Equity'        GROUP BY ORD_NUM       ) po2 ON po2.ORD_NUM=po.ORD_NUM AND po2.MIN_TOUCH=po.TOUCH_COUNT    WHERE po.DEALING_DESK = 'Equity'            IF OBJECT_ID('tempdb..#Min_Exec_Time', 'U') IS NOT NULL DROP TABLE #Min_Exec_Time    SELECT      pm.ORD_NUM,    -- MIN(AUTH_TIME) AS MIN_AUTH_TIME,     MIN(t.EXECUTION_TIME) AS MIN_EXEC_TIME    -- MAX(t.EXECUTION_TIME) AS MAX_EXEC_TIME    INTO #Min_Exec_Time    FROM (SELECT DISTINCT ORD_NUM, AUTH_TIME, TOUCH_COUNT, DEALING_DESK FROM #trd_ord_pop) pm    LEFT JOIN #temp_trades t ON pm.ORD_NUM=t.ORD_NUM    --WHERE pm.DEALING_DESK = 'Equity'    GROUP BY pm.ORD_NUM            IF OBJECT_ID('tempdb..#temp_tr_orders', 'U') IS NOT NULL DROP TABLE #temp_tr_orders    SELECT DISTINCT      tr.ORD_NUM,     oc.PM_ORD,     tr.CUSIP,      mtt.AUTH_TIME,     mtt.FACE,     mtt.SEC_DESC1,     mtt.COMMENTS_VALUE,     mtt.ORDER_REASON_DECODE    INTO #temp_tr_orders     FROM #trd_ord_pop tr    LEFT JOIN #max_tr_touch mtt ON mtt.ORD_NUM = tr.ORD_NUM    LEFT JOIN Vista_Reporting.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = tr.ORD_NUM    --WHERE DEALING_DESK = 'Equity'            IF OBJECT_ID('tempdb..#temp_placements', 'U') IS NOT NULL DROP TABLE #temp_placements    SELECT DISTINCT     ORD_NUM,      VENUE,      RELEASE_DATETIME    INTO #temp_placements    FROM Vista_Reporting.dbo.PLACEMENTS pl    WHERE EXISTS (SELECT pl.ORD_NUM FROM #distinct_ids di WHERE di.TRD_ORD=pl.ORD_NUM)             IF OBJECT_ID('tempdb..#temp_tr_results', 'U') IS NOT NULL DROP TABLE #temp_tr_results    select distinct       ist.ORD_NUM,      --ist.IM_EXCEPTION,     --ist.IM_CREATEDATE,     ist.DEALING_DESK,     Results.MULTI_FUND_ID,     Results.INST_TYPE,     Results.TRD_TRADER,     placements.VENUE,     Results.PRIMARY_MARKET,     placements.RELEASE_DATETIME,     face.booked,     Results.TRD_TRADE_DATE,     Results.EXECUTION_TIME,     Results.TRD_AUTH_TIME,     Results.TRDCOMM_COMMENTS,     Results.PORTFOLIOS_PORTFOLIO_NAME,     Results.TRD_COUNTERPARTY,     Results.ASSET_SUB,     Results.EXECUTION_TYPE_DECODE,     Results.TRD_PRICE,     Results.Method    INTO #temp_tr_results    FROM Vista_Staging.dbo.VG_IMPLEMENTATION_SHORTFALL_EQ_TABLE ist     LEFT JOIN #temp_trades Results ON ist.ORD_NUM = Results.ORD_NUM    LEFT JOIN #temp_placements placements ON ist.ORD_NUM = placements.ORD_NUM    LEFT JOIN (SELECT ORD_NUM, SUM(TRD_ORIG_FACE) AS booked FROM #temp_trades GROUP BY ORD_NUM) face On ist.ORD_NUM = face.ORD_NUM            IF OBJECT_ID('tempdb..#temp_tr_concat', 'U') IS NOT NULL DROP TABLE #temp_tr_concat    SELECT DISTINCT     t1.ORD_NUM,      --t1.IM_EXCEPTION,     --t1.IM_CREATEDATE,     t1.DEALING_DESK,     t2.MFID_concat AS MFID_concat,     t3.trader_concat AS dealer_concat,     t4.venue_concat AS venue_concat,     t5.method_concat AS method_concat,     t6.prim_m_concat AS prim_m_concat,     t7.b_amt_concat AS b_amt_concat,     t8.send_concat AS send_concat,     t9.t_date_concat AS t_date_concat,     t10.ex_date_concat AS ex_date_concat,     t11.ent_date_concat AS ent_date_concat,     t12.d_comm_concat AS d_comm_concat,     t13.fund_concat AS fund_concat,     t14.cpty_concat AS cpty_concat,     t15.a_sub_concat AS a_sub_concat,     t16.ex_dec_concat AS ex_dec_concat,     t17.t_price_concat AS t_price_concat,     t18.inst_concat AS inst_type_concat    INTO #temp_tr_concat    FROM #temp_tr_results t1    LEFT JOIN (SELECT DISTINCT t2.ORD_NUM, STRING_AGG(CAST(t2.MULTI_FUND_ID AS varchar(MAX)), ' | ') as MFID_concat FROM (select distinct ORD_NUM, MULTI_FUND_ID FROM #temp_tr_results) t2 GROUP BY ORD_NUM) t2 on t1.ORD_NUM = t2.ORD_NUM    LEFT JOIN (SELECT DISTINCT t2.ORD_NUM, STRING_AGG(CAST(t2.TRD_TRADER AS varchar(MAX)), ' | ') as trader_concat FROM (select distinct ORD_NUM, TRD_TRADER FROM #temp_tr_results) t2 GROUP BY ORD_NUM) t3 on t1.ORD_NUM = t3.ORD_NUM    LEFT JOIN (SELECT DISTINCT t2.ORD_NUM, STRING_AGG(CAST(t2.VENUE AS varchar(MAX)), ' | ') as venue_concat FROM (select distinct ORD_NUM, VENUE FROM #temp_tr_results) t2 GROUP BY ORD_NUM) t4 on t1.ORD_NUM = t4.ORD_NUM    LEFT JOIN (SELECT DISTINCT t2.ORD_NUM, STRING_AGG(CAST(t2.Method AS varchar(MAX)), ' | ') as method_concat FROM (select distinct ORD_NUM, Method FROM #temp_tr_results) t2 GROUP BY ORD_NUM) t5 on t1.ORD_NUM = t5.ORD_NUM    LEFT JOIN (SELECT DISTINCT t2.ORD_NUM, STRING_AGG(CAST(t2.PRIMARY_MARKET AS varchar(MAX)), ' | ') as prim_m_concat FROM (select distinct ORD_NUM, PRIMARY_MARKET FROM #temp_tr_results) t2 GROUP BY ORD_NUM) t6 on t1.ORD_NUM = t6.ORD_NUM    LEFT JOIN (SELECT DISTINCT t2.ORD_NUM, STRING_AGG(CAST(t2.booked AS varchar(MAX)), ' | ') as b_amt_concat FROM (select distinct ORD_NUM, LEFT(booked, 10) AS booked FROM #temp_tr_results) t2 GROUP BY ORD_NUM) t7 on t1.ORD_NUM = t7.ORD_NUM    LEFT JOIN (SELECT DISTINCT t2.ORD_NUM, STRING_AGG(CAST(t2.RELEASE_DATETIME AS varchar(MAX)), ' | ') as send_concat FROM (select distinct ORD_NUM, RELEASE_DATETIME FROM #temp_tr_results) t2 GROUP BY ORD_NUM) t8 on t1.ORD_NUM = t8.ORD_NUM    LEFT JOIN (SELECT DISTINCT t2.ORD_NUM, STRING_AGG(CAST(t2.TRD_TRADE_DATE AS varchar(MAX)), ' | ') as t_date_concat FROM (select distinct ORD_NUM, TRD_TRADE_DATE FROM #temp_tr_results) t2 GROUP BY ORD_NUM) t9 on t1.ORD_NUM = t9.ORD_NUM    LEFT JOIN (SELECT DISTINCT t2.ORD_NUM, STRING_AGG(CAST(t2.EXECUTION_TIME AS varchar(MAX)), ' | ') as ex_date_concat FROM (select distinct ORD_NUM, EXECUTION_TIME FROM #temp_tr_results) t2 GROUP BY ORD_NUM) t10 on t1.ORD_NUM = t10.ORD_NUM    LEFT JOIN (SELECT DISTINCT t2.ORD_NUM, STRING_AGG(CAST(t2.TRD_AUTH_TIME AS varchar(MAX)), ' | ') as ent_date_concat FROM (select distinct ORD_NUM, TRD_AUTH_TIME FROM #temp_tr_results) t2 GROUP BY ORD_NUM) t11 on t1.ORD_NUM = t11.ORD_NUM    LEFT JOIN (SELECT DISTINCT t2.ORD_NUM, STRING_AGG(CAST(t2.TRDCOMM_COMMENTS AS varchar(MAX)), ' | ') as d_comm_concat FROM (select distinct ORD_NUM, TRDCOMM_COMMENTS FROM #temp_tr_results) t2 GROUP BY ORD_NUM) t12 on t1.ORD_NUM = t12.ORD_NUM    LEFT JOIN (SELECT DISTINCT t2.ORD_NUM, STRING_AGG(CAST(t2.PORTFOLIOS_PORTFOLIO_NAME AS varchar(MAX)), ' | ') as fund_concat FROM (select distinct ORD_NUM, PORTFOLIOS_PORTFOLIO_NAME FROM #temp_tr_results) t2 GROUP BY ORD_NUM) t13 on t1.ORD_NUM = t13.ORD_NUM    LEFT JOIN (SELECT DISTINCT t2.ORD_NUM, STRING_AGG(CAST(t2.TRD_COUNTERPARTY AS varchar(MAX)), ' | ') as cpty_concat FROM (select distinct ORD_NUM, TRD_COUNTERPARTY FROM #temp_tr_results) t2 GROUP BY ORD_NUM) t14 on t1.ORD_NUM = t14.ORD_NUM    LEFT JOIN (SELECT DISTINCT t2.ORD_NUM, STRING_AGG(CAST(t2.ASSET_SUB AS varchar(MAX)), ' | ') as a_sub_concat FROM (select distinct ORD_NUM, ASSET_SUB FROM #temp_tr_results) t2 GROUP BY ORD_NUM) t15 on t1.ORD_NUM = t15.ORD_NUM    LEFT JOIN (SELECT DISTINCT t2.ORD_NUM, STRING_AGG(CAST(t2.EXECUTION_TYPE_DECODE AS varchar(MAX)), ' | ') as ex_dec_concat FROM (select distinct ORD_NUM, EXECUTION_TYPE_DECODE FROM #temp_tr_results) t2 GROUP BY ORD_NUM) t16 on t1.ORD_NUM = t16.ORD_NUM    LEFT JOIN (SELECT DISTINCT t2.ORD_NUM, STRING_AGG(CAST(t2.TRD_PRICE AS varchar(MAX)), ' | ') as t_price_concat FROM (select distinct ORD_NUM, LEFT(TRD_PRICE, 10) AS TRD_PRICE FROM #temp_tr_results) t2 GROUP BY ORD_NUM) t17 on t1.ORD_NUM = t17.ORD_NUM    LEFT JOIN (SELECT DISTINCT t2.ORD_NUM, STRING_AGG(CAST(t2.INST_TYPE AS varchar(MAX)), ' | ') as inst_concat FROM (select distinct ORD_NUM, INST_TYPE FROM #temp_tr_results) t2 GROUP BY ORD_NUM) t18 on t1.ORD_NUM = t18.ORD_NUM            IF OBJECT_ID('tempdb..#temp_new_cols', 'U') IS NOT NULL DROP TABLE #temp_new_cols    SELECT DISTINCT      --tr.PM_ORD,      tr.ORD_NUM,     --t2.MULTI_FUND_ID,     avg_d.[Average daily volume],     avg_d.[Remain Amt as percent of daily volume],     avg_d.[Remain Amt],     tr.FACE,     po2.MIN_ACTIVE_TIME,     me.MIN_EXEC_TIME AS [First Execution],     i2.ISIN,     --t2.[TRD_PRICE],     tr.AUTH_TIME,     tr.SEC_DESC1,     tr.COMMENTS_VALUE,     tr.ORDER_REASON_DECODE    INTO #temp_new_cols    FROM #temp_tr_orders tr    LEFT JOIN #temp_trades t2 on  tr.ORD_NUM = t2.ORD_NUM    LEFT JOIN #average_daily_remain avg_d on tr.ORD_NUM = avg_d.ORD_NUM    --LEFT JOIN #temp_tr_orders tr on oc.TRD_ORD = tr.ORD_NUM    OUTER APPLY (SELECT TOP 1 i.ISIN FROM Vista_Reporting.dbo.INSTRUMENTS i         WHERE (i.CUSIP=coalesce(t2.CUSIP, tr.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(t2.EXECUTION_TIME, tr.AUTH_TIME)))         ORDER BY i.DATE DESC) as i2    --LEFT JOIN #max_tr_touch as t5 on t5.ORD_NUM = tr.ORD_NUM    LEFT JOIN #min_auth_face po2 ON po2.ORD_NUM=tr.ORD_NUM    LEFT JOIN #Min_Exec_Time me ON tr.ORD_NUM=me.ORD_NUM                IF OBJECT_ID('tempdb..#temp_is_table', 'U') IS NOT NULL DROP TABLE #temp_is_table    SELECT DISTINCT       mis.Trader,     mis.Manager,     mis.[Cash Programme] AS [Cash_Programme],     mis.[Order ID] AS [Order_ID],     mis.ID AS [Row_ID],     mis.[Side],     mis.[Instrument Name] AS [Instrument_Name],     mis.[Broker],     CONCAT(CONVERT(VARCHAR(25),CONVERT(date,mis.[Order Approved Date/Time]),103),' ',CONVERT(TIME,mis.[Order Approved Date/Time])) AS [Order_Approved_DateTime],     CONVERT(VARCHAR(50),CONVERT(BIGINT,ROUND(mis.[Shares],0))) AS [Shares],     mis.[Avg Trade Price (local)] AS [Avg_Trade_Price_local],     mis.[Order Arrival Price] AS [Arrival_Price_local],     mis.[Full Day VWAP] AS [Full_Day_VWAP],     mis.[Interval VWAP] AS [Interval_VWAP],     mis.[Vs Order Arrival] AS [IS_bps],     A.IM_EXCEPTION,     A.IM_CREATEDATE,     convert(date,mis.[Trade Date],103) as [Trade Date],     --SURVG-554     mis.OrderReason     --End of SURVG-554    into #temp_is_table    FROM [Vista_Staging].[dbo].[Markit_ISReport] mis    INNER JOIN Vista_Staging.dbo.VG_IMPLEMENTATION_SHORTFALL_EQ_TABLE A ON A.ORD_NUM=mis.[Order ID] AND A.ID=mis.ID    INNER JOIN #distinct_ids di ON di.TRD_ORD = mis.[Order ID]            IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table    SELECT DISTINCT     MI.Trader,     MI.Manager,     MI.[Cash_Programme],     MI.Order_ID,     MI.[Row_ID],     MI.[Side],     MI.[Instrument_Name],     MI.[Broker],     MI.[Order_Approved_DateTime],     MI.[Shares],     MI.[Avg_Trade_Price_local],     MI.[Arrival_Price_local],     MI.[Full_Day_VWAP],     MI.[Interval_VWAP],     MI.[IS_bps],     t.dealer_concat AS [Dealer_Name],     CONVERT(VARCHAR(50),'') AS [Rationale], --Placeholder field. Is not in the SFTP file so we can't populate this.     COALESCE(t.DEALING_DESK,'Equity') AS DEALING_DESK,     t.cpty_concat AS TRD_COUNTERPARTY,     t.a_sub_concat AS [ASSET_TYPE_SUBTYPE],     0 AS PRIMARY_MARKET,     t.ex_dec_concat AS [EXECUTION_TYPE_DECODE],     CONVERT(VARCHAR(50), CONCAT(YEAR(tnc.AUTH_TIME),'-',left(datename(m,tnc.AUTH_TIME),3))) AS [MONTH_YEAR],     t.inst_type_concat AS [INST_TYPE],     tnc.COMMENTS_VALUE AS [Comments_Value],     CONVERT(VARCHAR(50),tnc.ORDER_REASON_DECODE) AS Trade_Purpose,     MI.IM_EXCEPTION,     MI.IM_CREATEDATE AS IM_CREATEDATE,     CONVERT(DATETIME,tnc.AUTH_TIME) AS AUTH_TIME,     CASE       WHEN ABS(MI.IS_bps) >=150 THEN '2SD'      WHEN ABS(MI.IS_bps) >=100 THEN '1SD'       ELSE '0SD'     END AS SD,     tnc.[Average daily volume],     tnc.[Remain Amt as percent of daily volume],     tnc.ISIN AS [ISIN],     tnc.SEC_DESC1 AS [Description],     t.dealer_concat AS [Dealer],     t.venue_concat AS [Platform],     t.method_concat AS [Method],     t.prim_m_concat AS [Primary Market],     tnc.FACE AS [Ord Amt],     tnc.[Remain Amt],     t.b_amt_concat AS [Booked Amt],     t.t_price_concat as [Px],     tnc.[MIN_ACTIVE_TIME] AS [Active Date],     t.send_concat AS [Send Date],     t.MFID_concat AS [MFID],     t.ex_date_concat AS [Exec Date],     t.ent_date_concat AS [Entry Date],     t.d_comm_concat AS [Dealer Comment],     tnc.COMMENTS_VALUE AS [Genral Comments],     t.fund_concat AS [Fund],     tnc.[First Execution],     DATEDIFF(MINUTE, tnc.AUTH_TIME, tnc.[First Execution]) as [First Execution Timespan],     MI.[Trade Date],     --SURVG-554     MI.OrderReason     --End of SURVG-554    INTO #temp_final_master_table    FROM #temp_is_table MI     LEFT JOIN #temp_tr_concat t ON MI.Order_ID = t.ORD_NUM    LEFT JOIN #temp_new_cols tnc ON tnc.ORD_NUM = t.ORD_NUM    WHERE EXISTS (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = MI.Order_ID)            IF OBJECT_ID('Vista_Reporting.DBO.IMPLEMENTATION_SHORTFALL_EQ', 'U') IS NOT NULL    DELETE FROM Vista_Reporting.DBO.IMPLEMENTATION_SHORTFALL_EQ    WHERE [Order_ID] IN (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di)            IF OBJECT_ID('Vista_Reporting.DBO.IMPLEMENTATION_SHORTFALL_EQ', 'U') IS NOT NULL    INSERT INTO Vista_Reporting.DBO.IMPLEMENTATION_SHORTFALL_EQ    SELECT *    FROM #temp_final_master_table        ELSE        SELECT *    INTO Vista_Reporting.DBO.IMPLEMENTATION_SHORTFALL_EQ    FROM #temp_final_master_table            IF OBJECT_ID('Vista_Reporting.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL    INSERT INTO Vista_Reporting.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(    'IMPLEMENTATION_SHORTFALL_EQ', --TABLE_NAME    @START_TIME, --START_TIME    GETDATE(), --END_TIME    DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS    CAST(GETDATE() as date)) --COMPLETION_DATE            IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids     IF OBJECT_ID('tempdb..#trd_ord_pop', 'U') IS NOT NULL DROP TABLE #trd_ord_pop    IF OBJECT_ID('tempdb..#max_touch', 'U') IS NOT NULL DROP TABLE #max_touch    IF OBJECT_ID('tempdb..#max_touch_trd_ord', 'U') IS NOT NULL DROP TABLE #max_touch_trd_ord    IF OBJECT_ID('tempdb..#temp_trades', 'U') IS NOT NULL DROP TABLE #temp_trades    IF OBJECT_ID('tempdb..#average_daily_temp', 'U') IS NOT NULL DROP TABLE #average_daily_temp    IF OBJECT_ID('tempdb..#average_daily_remain', 'U') IS NOT NULL DROP TABLE #average_daily_remain    IF OBJECT_ID('tempdb..#max_tr_touch', 'U') IS NOT NULL DROP TABLE #max_tr_touch    IF OBJECT_ID('tempdb..#min_auth_face', 'U') IS NOT NULL DROP TABLE #min_auth_face    IF OBJECT_ID('tempdb..#Min_Exec_Time', 'U') IS NOT NULL DROP TABLE #Min_Exec_Time    IF OBJECT_ID('tempdb..#temp_tr_orders', 'U') IS NOT NULL DROP TABLE #temp_tr_orders    IF OBJECT_ID('tempdb..#temp_tr_results', 'U') IS NOT NULL DROP TABLE #temp_tr_results     IF OBJECT_ID('tempdb..#temp_tr_concat', 'U') IS NOT NULL DROP TABLE #temp_tr_concat    IF OBJECT_ID('tempdb..#temp_new_cols', 'U') IS NOT NULL DROP TABLE #temp_new_cols    IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table            END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: IMPLEMENTATION_SHORTFALL_HIGH_LOW_ORDER_PRIORITY_CHECKS  CreateDate: 2025-06-26 17:45:31.360  ModifyDate: 2025-06-26 17:45:31.360  --- DEFINITION START ---  -- =============================================    -- Author:  <Matej Miter>    -- Create date: <20/07/2021>    -- Description: <Stored procedure to perform secondary checks on Implementation Shortfall, High Low and Order Priority exceptions>    -- =============================================    CREATE PROCEDURE [dbo].[IMPLEMENTATION_SHORTFALL_HIGH_LOW_ORDER_PRIORITY_CHECKS]        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.         SET NOCOUNT ON         IF OBJECT_ID('tempdb..##secondary_IS_check', 'U') IS NOT NULL DROP TABLE ##secondary_IS_check     select *      into ##secondary_IS_check     from       (select ORD_NUM,ID,CONCAT(ORD_NUM,'_',ID,'_IS') as STG_ID from Vista_STAGING.dbo.VG_IMPLEMENTATION_SHORTFALL_EQ_TABLE) as STG_IMPLEMENTATION_SHORTFALL         LEFT JOIN      (select Order_ID,Row_ID,CONCAT(Order_ID,'_',Row_ID,'_IS')  as MASTER_ID from VISTA_REPORTING.dbo.IMPLEMENTATION_SHORTFALL_EQ) as MASTER_IMPLEMENTATION_SHORTFALL         on       STG_IMPLEMENTATION_SHORTFALL.STG_ID = MASTER_IMPLEMENTATION_SHORTFALL.MASTER_ID         where MASTER_IMPLEMENTATION_SHORTFALL.MASTER_ID is null          IF OBJECT_ID('tempdb..##secondary_HL_check', 'U') IS NOT NULL DROP TABLE ##secondary_HL_check     select *      into ##secondary_HL_check     from       (select [ORD_NUM],ID as stg_secondary_id,CONCAT([ORD_NUM],'_',ID,'_HL') as STG_ID from Vista_STAGING.dbo.VG_MARKET_HIGH_LOW_TABLE) as STG_HIGH_LOW     LEFT JOIN      (select [Order ID],ID as master_seondary_id,CONCAT([Order ID],'_',ID,'_HL') as MASTER_ID  from VISTA_REPORTING.dbo.MARKET_HIGH_LOW_EQ) as MASTER_HIGH_LOW         on     STG_HIGH_LOW.STG_ID =  MASTER_HIGH_LOW.MASTER_ID          where MASTER_HIGH_LOW.MASTER_ID is null               --Below is an additional check for Order Priority so we don't miss to show any processed data within dealers review tables in the frontend         IF OBJECT_ID('tempdb..##secondary_OP_EQ_check', 'U') IS NOT NULL DROP TABLE ##secondary_OP_EQ_check     select *     into ##secondary_OP_EQ_check     from       (select ORD_NUM,ORDER_PRIORITY_EXCEPTION from Vista_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_EQ_TABLE where ORDER_PRIORITY_EXCEPTION = 1) STAGING_ORDER_PRIORITY_EQ     INNER JOIN      (select ORD_NUM as master_ord_num,VG_14 from VISTA_REPORTING.dbo.MASTER_ORDER_PRIORITY_TABLE where VG_14 = 0) MASTER_ORDER_PRIORITY_EQ     on      STAGING_ORDER_PRIORITY_EQ.ORD_NUM = MASTER_ORDER_PRIORITY_EQ.master_ord_num             IF OBJECT_ID('tempdb..##secondary_OP_FI_check', 'U') IS NOT NULL DROP TABLE ##secondary_OP_FI_check     select *     into ##secondary_OP_FI_check     from       (select ORD_NUM,ORDER_PRIORITY_EXCEPTION from Vista_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_FI_TABLE where ORDER_PRIORITY_EXCEPTION = 1) STAGING_ORDER_PRIORITY_FI     INNER JOIN      (select ORD_NUM as master_ord_num,VG_14 from VISTA_REPORTING.dbo.MASTER_ORDER_PRIORITY_TABLE where VG_14 = 0) MASTER_ORDER_PRIORITY_FI     on      STAGING_ORDER_PRIORITY_FI.ORD_NUM = MASTER_ORDER_PRIORITY_FI.master_ord_num         IF OBJECT_ID('tempdb..##secondary_OP_LL_check', 'U') IS NOT NULL DROP TABLE ##secondary_OP_LL_check     select *     into ##secondary_OP_LL_check     from       (select ORD_NUM,ORDER_PRIORITY_EXCEPTION from Vista_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_LL_TABLE where ORDER_PRIORITY_EXCEPTION = 1) STAGING_ORDER_PRIORITY_LL     INNER JOIN      (select ORD_NUM as master_ord_num,VG_14 from VISTA_REPORTING.dbo.MASTER_ORDER_PRIORITY_TABLE where VG_14 = 0) MASTER_ORDER_PRIORITY_LL     on      STAGING_ORDER_PRIORITY_LL.ORD_NUM = MASTER_ORDER_PRIORITY_LL.master_ord_num         IF OBJECT_ID('tempdb..##secondary_OP_DMG_check', 'U') IS NOT NULL DROP TABLE ##secondary_OP_DMG_check     select *     into ##secondary_OP_DMG_check     from       (select ORD_NUM ,ORDER_PRIORITY_EXCEPTION from Vista_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_DMG_TABLE where ORDER_PRIORITY_EXCEPTION = 1) STAGING_ORDER_PRIORITY_DMG     INNER JOIN      (select [Trader Order Number] as master_order_num,EXCEPTION_FLAG from VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE where EXCEPTION_FLAG = 0) MASTER_ORDER_PRIORITY_DMG     on      STAGING_ORDER_PRIORITY_DMG.ORD_NUM = MASTER_ORDER_PRIORITY_DMG.master_order_num          IF (select count(1) from ##secondary_IS_check )> 0 OR (select count(1) from ##secondary_HL_check)>0 OR (select count(1) from  ##secondary_OP_EQ_check)>0 OR (select count(1) from ##secondary_OP_FI_check)>0 OR (select count(1) from ##secondary_OP_LL_check)  >0 OR (select count(1) from ##secondary_OP_DMG_check)>0     EXEC Vista_STAGING.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN_REFRESH_SECONDARY        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: Incoming_Data_Count_Checks_Procedure_MG_Migration_Daily  CreateDate: 2025-06-26 17:45:49.007  ModifyDate: 2025-06-26 17:45:49.007  --- DEFINITION START ---  -- =============================================    -- Author:  <Miter, Matej>    -- Create date: <11/10/2021>    -- Description:     -- <INSTRUCTOR that orders trade must be different than dealer     -- otherwise exception will be raised>    -- =============================================        -- ***************VERSION CONTROL***************    --    -- *********************************************        CREATE PROCEDURE [dbo].[Incoming_Data_Count_Checks_Procedure_MG_Migration_Daily]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;                IF OBJECT_ID('VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY     SELECT 'PORTFOLIO' as Table_name,       count(FUND) as Record_Count,       GETDATE() as CHECK_DATE     FROM VISTA_STAGING.dbo.PORTFOLIO     WHERE TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)             IF OBJECT_ID('VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY     SELECT  'COUNTERPARTIES' as Table_name,       count(id) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_STAGING.dbo.COUNTERPARTIES     where TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY     SELECT  'NAV' as Table_name,       count(id) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_STAGING.dbo.NAV      where TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY     SELECT  'ECONOMY' as Table_name,       count(id) as Record_Count     ,GETDATE() as CHECK_DATE     FROM VISTA_STAGING.dbo.ECONOMY     where TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY     SELECT  'PLACEMENTS' as Table_name,       count(id) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.PLACEMENTS     where TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY     SELECT  'ORDERS' as Table_name,       count(id) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.ORDERS     where TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)                IF OBJECT_ID('VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY     SELECT  'TRADES' as Table_name,       count(id) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.TRADES     where TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY     SELECT  'DEALER_AND_DESK' as Table_name,       count(MG_USER_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.DEALER_AND_DESK     where  TRY_CAST(Updated as date) = TRY_CAST(GETDATE() as date)                IF OBJECT_ID('VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY     SELECT  'PORTFOLIO_GROUPS' as Table_name,       count(FUND) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.PORTFOLIO_GROUPS     where TRY_CAST(Updated as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY     SELECT  'INSTRUMENTS' as Table_name,       count(DESC_INSTMT) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.INSTRUMENTS     where TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY     SELECT  'ISSUERS' as Table_name,       count(ISSUER_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.ISSUERS     where TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY     SELECT  'QUOTES' as Table_name,       count(MULTI_FUND_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.QUOTES     where TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY     SELECT  'QUOTES_PLACEMENTS' as Table_name,       count(PLACEMENT_NUM) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.QUOTES_PLACEMENTS     where TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY     SELECT  'ORDERS_CROSS' as Table_name,       count(TRD_ORD) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.ORDERS_CROSS     where TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY     SELECT  'ORDERS_DETAIL' as Table_name,       count(ORD_NUM) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.ORDERS_DETAIL     where TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY     SELECT  'RATINGS' as Table_name,       count(CUSIP) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.RATINGS     where TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)            IF OBJECT_ID('VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY     SELECT  'SECTORS' as Table_name,       count(CUSIP) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.SECTORS     where TRY_CAST(PULL_DATE as date) = TRY_CAST(GETDATE() as date)                IF OBJECT_ID('VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY', 'U') IS NOT NULL      INSERT INTO VISTA_STAGING.dbo.INCOMING_DATA_COUNT_CHECKS_MG_MIGRATION_DAILY     SELECT  'REQUEST_LOOKUP' as Table_name,       count(REQUEST_ID) as Record_Count     ,GETDATE() as CHECK_DATE     FROM Vista_STAGING.dbo.REQUEST_LOOKUP        END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: INSTRUMENTS_REFRESH  CreateDate: 2025-06-26 17:46:01.967  ModifyDate: 2025-06-26 17:46:01.967  --- DEFINITION START ---  -- =============================================    -- Author:  <Devereux, Alan>    -- Create date: <27/09/2017>    -- Description: <Stored procedure for transformation of staging data    --     into final INSTRUMENTS table.>    -- =============================================        -- ***************VERSION CONTROL***************    -- 04/01/2018 - DDC: PULL_DATE added.    -- 29/04/2019 - ER: Changed Risk countries table to be a reference table. basic tests show now duplicates for the eurozone change and the join appears to work.    -- *********************************************        CREATE PROCEDURE [dbo].[INSTRUMENTS_REFRESH]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         -- We currently have a history of instruments and their values at different dates.     -- We are now keeping the full history and will merge on eg. Execution Time against     -- date of the instrument (in past we always used most recent)         IF OBJECT_ID('tempdb..#temp_ratings_table', 'U') IS NOT NULL DROP TABLE #temp_ratings_table     SELECT DISTINCT      r.CUSIP,      r.AGY,      r.PULL_DATE,      r.VALUE AS RATINGS_VAL,      d4.VALUE AS DECODE_VAL,      CASE        WHEN r.AGY = 14 THEN 'INTERNAL'       WHEN r.AGY = 2 THEN 'S&P'       WHEN r.AGY = 1 THEN 'MOODYS'      END AS RATING_SOURCE,      --rg.INSTRUMENT_RATING      CASE       WHEN r.AGY = 14 THEN COALESCE(d4.VALUE, r.VALUE)       WHEN r.AGY in (2, 1) THEN r.VALUE      END AS INSTRUMENT_RATING     INTO #temp_ratings_table     FROM VISTA_STAGING.dbo.RATINGS r     LEFT JOIN VISTA_STAGING.dbo.DECODES d4 on d4.CODE=r.VALUE and d4.TAG_NAME='R_CLIENT_L'     INNER JOIN (SELECT INSTRUMENT_RATING FROM VISTA_STAGING.dbo.RATING_GRADE) rg ON rg.INSTRUMENT_RATING=r.VALUE OR rg.INSTRUMENT_RATING=d4.VALUE     WHERE r.AGY in (14, 2, 1)          --select * from #temp_ratings_table where CUSIP='BRT3577B1'     IF OBJECT_ID('tempdb..#temp_ratings_table1', 'U') IS NOT NULL DROP TABLE #temp_ratings_table1     select distinct tr.*      INTO #temp_ratings_table1     from #temp_ratings_table tr     --inner join (SELECT CUSIP, MAX(AGY) AS MAX_AGY FROM #temp_ratings_table where AGY in (14,2,1) GROUP BY CUSIP) ma on ma.CUSIP=tr.CUSIP and tr.AGY=ma.MAX_AGY     where EXISTS (SELECT 1 FROM VISTA_STAGING.dbo.RATING_GRADE WHERE INSTRUMENT_RATING=tr.INSTRUMENT_RATING)          IF OBJECT_ID('tempdb..#temp_ratings_table2', 'U') IS NOT NULL DROP TABLE #temp_ratings_table2     SELECT a.*      INTO #temp_ratings_table2     FROM #temp_ratings_table1 a      INNER JOIN (      SELECT        CUSIP, PULL_DATE, MAX(AGY) as max_agy FROM #temp_ratings_table1 GROUP BY CUSIP, PULL_DATE) b ON a.CUSIP = b.CUSIP AND cast(a.PULL_DATE as date) = cast(b.PULL_DATE as date) AND a.AGY = b.max_agy              IF OBJECT_ID('tempdb..#risk_country_table', 'U') IS NOT NULL DROP TABLE #risk_country_table     select distinct      i.PULL_DATE,      i.DESC_INSTMT,      i.DESC_INSTMT2,      i.COUNTRY,      i.CUSIP,      i.ISIN,      i.SEDOL,      i.SM_SEC_GROUP,      i.SM_SEC_TYPE,      i.TICKER,      i.AMT_ISU,      i.MATURITY,      i.EXCHANGE,      i.MARKET,      i.BONDTYPE,      i.CURRENCY,      i.FUTURE_CLASS,      i.SEC_DESC2,      i.CDS_TYPE,      i.UNDERLYING_CUSIP,      i.CUSIP_SWAP_AMORT,      i.LEH_INDUSTRY,      i.FLAG_CCN,      i.STRUCTURE,      DATEADD(DAY, -1, CAST(i.PULL_DATE AS DATE)) as [DATE],      i.DATE as STORED_DATE,      i.MIP_SEC_ID,      i.ISSUER_ID,      i.BASKET_CUSIP,      --d.VALUE AS CAPITAL_RANKING,      case       when (i.RISK_COUNTRY='nan' OR i.RISK_COUNTRY is NULL) then i.COUNTRY else i.RISK_COUNTRY      end as RISK_COUNTRY,      tr.INSTRUMENT_RATING,      tr.RATING_SOURCE,      --CASE       -- WHEN r.AGY IS NOT NULL THEN COALESCE(d4.VALUE,r.VALUE)       --WHEN r.AGY = 2 THEN COALESCE(d4.VALUE,r.VALUE)       --WHEN r.AGY = 1 THEN COALESCE(d4.VALUE,r.VALUE)      --END AS INSTRUMENT_RATING,      --CASE       -- WHEN tr.AGY = 14 THEN 'INTERNAL'      -- WHEN tr.AGY = 2 THEN 'SNP'      -- WHEN tr.AGY = 1 THEN 'MOODYS'      --END AS RATING_SOURCE,      --r.AGY,      --COALESCE(d4.VALUE,r.VALUE) as AVERAGE_RATING,      s.TYPE AS SECTOR_TYPE,      LTRIM(RTRIM(s.LEVEL_4)) AS SECTOR_LEVEL_4,      LTRIM(RTRIM(s.LEVEL_3)) AS SECTOR_LEVEL_3,      LTRIM(RTRIM(s.LEVEL_2)) AS SECTOR_LEVEL_2,      LTRIM(RTRIM(s.LEVEL_1)) AS SECTOR_LEVEL_1,      LTRIM(RTRIM(s.LEVEL_4_DESC)) AS SECTOR_LEVEL_4_DESC,      LTRIM(RTRIM(s.LEVEL_3_DESC)) AS SECTOR_LEVEL_3_DESC,      LTRIM(RTRIM(s.LEVEL_2_DESC)) AS SECTOR_LEVEL_2_DESC,      LTRIM(RTRIM(s.LEVEL_1_DESC)) AS SECTOR_LEVEL_1_DESC,      i.CONTRACT_SIZE,      i.FLAG_144A,      i.STRIKE,      i.EXP_DT     into #risk_country_table     from VISTA_STAGING.dbo.INSTRUMENTS i     left join (        SELECT CUSIP, MIN(WATERFALL_PREFERENCE) AS MIN_PREF        FROM VISTA_REPORTING.dbo.SECTORS         GROUP BY CUSIP         ) as p on i.CUSIP=p.CUSIP     left join (SELECT DISTINCT CUSIP, WATERFALL_PREFERENCE, LEVEL_1, LEVEL_1_DESC, LEVEL_2, LEVEL_2_DESC, LEVEL_3, LEVEL_3_DESC, LEVEL_4, LEVEL_4_DESC, TYPE FROM VISTA_REPORTING.dbo.SECTORS) as s on i.CUSIP=s.CUSIP and s.WATERFALL_PREFERENCE=p.MIN_PREF     left join #temp_ratings_table2 tr on tr.CUSIP=i.CUSIP and cast(tr.PULL_DATE as date) =cast(i.PULL_DATE as date)     --left join (     --   select CUSIP, PULL_DATE, MAX(AGY) AS MAX_AGY      --   from VISTA_STAGING.dbo.RATINGS r     --   INNER JOIN (SELECT INSTRUMENT_RATING FROM VISTA_STAGING.dbo.RATING_GRADE) rg ON rg.INSTRUMENT_RATING=r.VALUE     --   where AGY in (14, 2, 1)     --   group by  CUSIP, PULL_DATE     --  ) as r1 on i.CUSIP=r1.CUSIP and i.PULL_DATE=r1.PULL_DATE     --left join (     --   SELECT CUSIP, PULL_DATE, MAX(AGY) AS MAX_AGY     --   FROM VISTA_STAGING.dbo.RATINGS     --   WHERE AGY in (14, 2, 1) and VALUE != 'NR' and VALUE is not null     --   GROUP BY CUSIP, PULL_DATE     ----    ) as r1 on i.CUSIP=r1.CUSIP and i.PULL_DATE=r1.PULL_DATE     --left join VISTA_STAGING.dbo.RATINGS as r on i.CUSIP=r.CUSIP and r.PULL_DATE=r1.PULL_DATE and r.AGY = r1.MAX_AGY--14 is M&G internal rating     --left join VISTA_STAGING.dbo.DECODES d on d.CODE=i.DESC_INSTMT2 and d.TAG_NAME='CORP_CLASSES'     --left join VISTA_STAGING.dbo.DECODES d4 on d4.CODE=r.VALUE and d4.TAG_NAME='R_CLIENT_L'             IF OBJECT_ID('VISTA_REPORTING.dbo.INSTRUMENTS', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.INSTRUMENTS     select distinct      rc.PULL_DATE,      rc.DESC_INSTMT,      rc.DESC_INSTMT2,      rc.COUNTRY,      rc.CUSIP,      rc.ISIN,      rc.SEDOL,      rc.SM_SEC_GROUP,      rc.SM_SEC_TYPE,      rc.TICKER,      rc.AMT_ISU,      rc.MATURITY,      rc.RISK_COUNTRY,      --rc.CAPITAL_RANKING,      rc.EXCHANGE,      rc.MARKET,      rc.BONDTYPE,      rc.CURRENCY,      rc.FUTURE_CLASS,      rc.SEC_DESC2,      rc.CDS_TYPE,      rc.UNDERLYING_CUSIP,      rc.CUSIP_SWAP_AMORT,      rc.LEH_INDUSTRY,      rc.MIP_SEC_ID,      rc.ISSUER_ID,      rc.FLAG_CCN,      rc.[DATE],      rc.STORED_DATE,      rc.STRUCTURE,      rc.BASKET_CUSIP,      rc.CONTRACT_SIZE,      rc.INSTRUMENT_RATING,      rc.RATING_SOURCE,      rc.FLAG_144A,      rc.STRIKE,      rc.EXP_DT,      rc.SECTOR_TYPE,      rc.SECTOR_LEVEL_4,      rc.SECTOR_LEVEL_3,      rc.SECTOR_LEVEL_2,      rc.SECTOR_LEVEL_1,      rc.SECTOR_LEVEL_4_DESC,      rc.SECTOR_LEVEL_3_DESC,      rc.SECTOR_LEVEL_2_DESC,      rc.SECTOR_LEVEL_1_DESC,      case       when rr.INSTRUMENT_GRADE is NULL       then 'IG'       else rr.INSTRUMENT_GRADE      end as INSTRUMENT_GRADE,      case       when r.MARKET = 'EM' then 1        when r.MARKET = 'Non EM' then 0       else NULL      end as EMERGING_MARKET      --rc.HYBRID_FLAG     into VISTA_REPORTING.dbo.INSTRUMENTS     from #risk_country_table rc     left join VISTA_STAGING.dbo.RISK_COUNTRIES r on r.COUNTRY_ID=rc.RISK_COUNTRY and rc.PULL_DATE BETWEEN R.DATE_FROM AND R.DATE_TO     left join VISTA_STAGING.dbo.RATING_GRADE rr on  rr.INSTRUMENT_RATING=rc.INSTRUMENT_RATING              IF OBJECT_ID('tempdb..#temp_ratings_table', 'U') IS NOT NULL DROP TABLE #temp_ratings_table     IF OBJECT_ID('tempdb..#temp_ratings_table1', 'U') IS NOT NULL DROP TABLE #temp_ratings_table1     IF OBJECT_ID('tempdb..#temp_ratings_table2', 'U') IS NOT NULL DROP TABLE #temp_ratings_table2     IF OBJECT_ID('tempdb..#risk_country_table', 'U') IS NOT NULL DROP TABLE #risk_country_table              --CREATE NONCLUSTERED INDEX inst_idx1     --ON [VISTA_REPORTING].[dbo].[INSTRUMENTS] ( [DATE], STORED_DATE, [CUSIP], ISIN, SEDOL, SM_SEC_GROUP, SM_SEC_TYPE)          CREATE NONCLUSTERED INDEX inst_idx1     ON [VISTA_REPORTING].[dbo].[INSTRUMENTS] ([CUSIP],[DATE])             END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: ISSUERS_REFRESH  CreateDate: 2025-06-26 17:46:19.160  ModifyDate: 2025-06-26 17:46:19.160  --- DEFINITION START ---      CREATE PROCEDURE [dbo].[ISSUERS_REFRESH]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         /****** Script for SelectTopNRows command from SSMS  ******/     IF OBJECT_ID('tempdb..#latest_issuers', 'U') IS NOT NULL DROP TABLE #latest_issuers         SELECT ISSUER_ID, MAX(PULL_DATE) as LATEST_PULL       INTO #latest_issuers       FROM [VISTA_STAGING].[dbo].[ISSUERS]       GROUP BY ISSUER_ID         IF OBJECT_ID('VISTA_REPORTING.dbo.ISSUERS', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.ISSUERS         SELECT i1.ISSUER_ID, i1.LONG_NAME     INTO VISTA_REPORTING.dbo.ISSUERS     FROM VISTA_STAGING.dbo.ISSUERS as i1     INNER JOIN #latest_issuers as i2 on i1.ISSUER_ID=i2.ISSUER_ID and cast(i1.PULL_DATE as date) = cast(i2.LATEST_PULL as date)          IF OBJECT_ID('tempdb..#latest_issuers', 'U') IS NOT NULL DROP TABLE #latest_issuers        END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: LLDOM_DEALING_ACTIVITY_SUMMARY  CreateDate: 2025-06-26 17:46:35.573  ModifyDate: 2025-06-26 17:46:35.573  --- DEFINITION START ---  -- =============================================    -- Author:  <Joel Anders>    -- Create date: <30/05/2018>    -- Description: <Creating the summary statistics for LLDOM>    -- =============================================    CREATE PROCEDURE [dbo].[LLDOM_DEALING_ACTIVITY_SUMMARY]         AS    BEGIN          IF OBJECT_ID('tempdb..#temp1', 'U') IS NOT NULL DROP TABLE #temp1         SELECT typ,          COUNT(DISTINCT Parent_Trade_ID) as [Num of Parent Trades],         sum(abs(NET_CONSIDERATION_GBP)) as [GBP Values],         [Month_Year]      into #temp1     FROM (         select distinct          CASE WHEN mst.PRIMARY_MARKET = 1 THEN 'Primary'             WHEN mst.INTERFUND_TRANSFER = 1 THEN 'Internal'             WHEN mst.INST_TYPE = 'STAPLED EQUITIES' THEN 'Equity'            ELSE 'Secondary'            END  AS typ,            mst.Parent_trade_ID,            NET_CONSIDERATION_GBP,            concat(month([Exec Date]), '-',DATEPART(YY,[Exec Date])) as [Month_Year]            --concat(month([Exec Date]), '-',DATEPART(YY,[Exec Date])) as [Month_Year]         from VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE mst         LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p         ON mst.MULTI_FUND_ID = p.MULTI_FUND_ID         where mst.DEALING_DESK = 'Leveraged Finance'               ) a         GROUP BY typ, [Month_Year]          IF OBJECT_ID('VISTA_REPORTING.dbo.LLDOM_DEALING_ACTIVITY', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.LLDOM_DEALING_ACTIVITY         select *      into VISTA_REPORTING.dbo.LLDOM_DEALING_ACTIVITY     from #temp1      union     select 'Total',       sum([Num of Parent Trades]),       sum([GBP Values]),       Month_Year     from #temp1     group by Month_Year            END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: LZ_DATA_SOURCE_TABLE  CreateDate: 2025-06-26 17:46:53.087  ModifyDate: 2025-06-26 17:46:53.087  --- DEFINITION START ---  -- =============================================    -- Author:  <???>    -- Create date: <???>    -- Description:     -- <Generate data table for the bonds component of the Counterparty Hit Rate extract.    --  This table is used by the FI Dealing Desk in an Excel based Macro to run some analysis     --  (this macro is run outside of Vista.>    -- =============================================        -- ***************VERSION CONTROL***************    -- 2018-08-08 WH: Business update for instrument related data points for Primary Market trades.    --   1. For all security information fields apart from the rating, use the latest record that     --   we have from the instruments api after execution date for this CUSIP.     --    This was done as this information is only ever updated if it is incorrect to begin with.    --  2.  For the asset rating & rating source, take the first available security data after the    --   the execution where we have a rating for the CUSIP.    --    This was done as the rating can legitimately change over time and we only want the rating    --    as it was at execution.    --  3.  For all other trades (i.e. Secondary market), use the latest security information on or prior to the     --   date of execution.        -- *********************************************    CREATE PROCEDURE [dbo].[LZ_DATA_SOURCE_TABLE]     -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> =. <Default_Value_For_Param1, , 0,         AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;             IF OBJECT_ID('tempdb..#concat_pm', 'U') IS NOT NULL DROP TABLE #concat_pm     SELECT tr1.ORD_NUM,        (STUFF((SELECT DISTINCT CAST(', ' + RTRIM(tr2.PM) AS VARCHAR(MAX))        FROM VISTA_REPORTING.dbo.TRD_ORDERS tr2        WHERE (tr2.ORD_NUM=tr1.ORD_NUM)        FOR XML PATH('')),1,2,'')) AS PM_INIT      INTO #concat_pm     FROM VISTA_REPORTING.dbo.TRD_ORDERS tr1 GROUP BY tr1.ORD_NUM               IF OBJECT_ID('tempdb..#max_mf_touch', 'U') IS NOT NULL DROP TABLE #max_mf_touch         SELECT      MULTI_FUND_ID,      MAX(TOUCH_COUNT) AS MAX_TOUCH     INTO #max_mf_touch     FROM VISTA_REPORTING.dbo.TRADES     GROUP BY MULTI_FUND_ID             IF OBJECT_ID('tempdb..#temp_orig_val', 'U') IS NOT NULL DROP TABLE #temp_orig_val     SELECT DISTINCT       MULTI_FUND_ID,      SUM(ABS(TRD_ORIG_FACE)) AS original_qty     INTO #temp_orig_val     FROM VISTA_REPORTING.dbo.TRADES     WHERE FinalFlag = 1     GROUP BY MULTI_FUND_ID         IF OBJECT_ID('tempdb..#latest_tr_touch', 'U') IS NOT NULL DROP TABLE #latest_tr_touch     SELECT DISTINCT       ORD_NUM,      MAX(TOUCH_COUNT) AS MAX_TOUCH     INTO #latest_tr_touch     FROM VISTA_REPORTING.dbo.TRD_ORDERS     GROUP BY ORD_NUM             IF OBJECT_ID('tempdb..#temp_last_trader', 'U') IS NOT NULL DROP TABLE #temp_last_trader     SELECT DISTINCT       tr1.ORD_NUM,      tr1.TRADER      INTO #temp_last_trader     FROM (SELECT ORD_NUM, TRADER, TOUCH_COUNT FROM VISTA_REPORTING.dbo.TRD_ORDERS) tr1     JOIN (SELECT ORD_NUM, MAX(TOUCH_COUNT) AS MIN_TOUCH        FROM VISTA_REPORTING.dbo.TRD_ORDERS        WHERE TRADER IS NOT NULL        GROUP BY ORD_NUM) tr2 ON tr2.ORD_NUM=tr1.ORD_NUM AND tr1.TOUCH_COUNT=tr2.MIN_TOUCH             IF OBJECT_ID('tempdb..#temp_sum_table', 'U') IS NOT NULL DROP TABLE #temp_sum_table     SELECT DISTINCT       t.MULTI_FUND_ID,      SUM(t.TRD_PRINCIPAL) AS gross_val,      SUM(t.TRD_PRINCIPAL_GBP) AS gross_val_gbp,      SUM(t.NET_CONSIDERATION) AS net_val,      SUM(t.NET_CONSIDERATION_GBP) AS net_val_gbp     INTO #temp_sum_table     FROM VISTA_REPORTING.dbo.TRADES t     WHERE FinalFlag = 1     GROUP BY MULTI_FUND_ID             IF OBJECT_ID('VISTA_REPORTING.dbo.LZ_DATA_SOURCE_TABLE', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.LZ_DATA_SOURCE_TABLE      SELECT DISTINCT      t.ORD_NUM AS order_id,      t.TRAN_TYPE AS side,      --SUM(t.TRD_ORIG_FACE) AS original_qty,      CAST(ov.original_qty AS BIGINT) AS [original_qty],      CAST(ABS(tr3.FACE) AS BIGINT) AS Target_Value,      CASE WHEN t.ACTIVITY_TYPE = 'MG.FI 1. Proces' THEN 'MG.FI 1. Process Trading'        WHEN t.ACTIVITY_TYPE = 'MG.FI 2. Contin' THEN 'MG.FI 2. Contingent Package'        WHEN t.ACTIVITY_TYPE = 'MG.FI 3. Top up' THEN 'MG.FI 3. Top up/Continuation'        WHEN t.ACTIVITY_TYPE = 'MG.FI 4. Put Th' THEN 'MG.FI 4. Put Through'        WHEN t.ACTIVITY_TYPE = 'MG.FI 5. Primar' THEN 'MG.FI 5. Primary Market'        ELSE t.ACTIVITY_TYPE      end as user_data10,      --t.ACTIVITY_TYPE AS user_data10,      CASE        WHEN pr.PRIMARY_MARKET = 1        --AND NOT(CHARINDEX('B', t.CUSIP) = 1        --AND pr.ISIN IS NULL        --AND ISNULL(pr.SM_SEC_GROUP, '') NOT IN ('OPTION', 'FUTURE', 'SWAP', 'SYNTH', 'CASH')        --AND ISNULL(pr.FLAG_144A, '') != 'P')       THEN i3.ISIN        ELSE i2.ISIN      END AS instrument_isin,      tr.CUSIP AS instrument_sedol,      --CONCAT(t.TICKER,' ',CAST(t.TRD_COUPON AS NUMERIC(16,2)) ,' ',REPLACE(CONVERT(DATE, t.MATURITY, 103),'-','/')) AS instrument_name,      --CONCAT(t.TICKER,' ',CAST(t.TRD_COUPON AS NUMERIC(16,2)) ,' ',FORMAT(CONVERT(DATE, t.MATURITY, 103),'dd/MM/yy')) AS instrument_name,      CASE       WHEN pr.PRIMARY_MARKET = 1        --AND NOT(CHARINDEX('B', t.CUSIP) = 1        --AND pr.ISIN IS NULL        --AND ISNULL(pr.SM_SEC_GROUP, '') NOT IN ('OPTION', 'FUTURE', 'SWAP', 'SYNTH', 'CASH')        --AND ISNULL(pr.FLAG_144A, '') != 'P')        THEN          CASE          WHEN t.TRD_COUPON IS NOT NULL THEN CONCAT(ISNULL(i3.TICKER,''),' ', CAST(ISNULL(t.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(t.MATURITY, 'dd/MM/yy'),''))          WHEN t.TRD_COUPON IS NULL THEN CONCAT(ISNULL(i3.TICKER,''),' ', ISNULL(FORMAT(t.MATURITY, 'dd/MM/yy'),''))         END       ELSE        CASE         WHEN t.TRD_COUPON IS NOT NULL THEN CONCAT(ISNULL(i2.TICKER,''),' ', CAST(ISNULL(t.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(t.MATURITY, 'dd/MM/yy'),''))         WHEN t.TRD_COUPON IS NULL THEN CONCAT(ISNULL(i2.TICKER,''),' ', ISNULL(FORMAT(t.MATURITY, 'dd/MM/yy'),''))        END      END AS instrument_name,        CASE        WHEN pr.PRIMARY_MARKET = 1        --AND NOT(CHARINDEX('B', t.CUSIP) = 1        --AND pr.ISIN IS NULL        --AND ISNULL(pr.SM_SEC_GROUP, '') NOT IN ('OPTION', 'FUTURE', 'SWAP', 'SYNTH', 'CASH')        --AND ISNULL(pr.FLAG_144A, '') != 'P')        THEN          CASE          WHEN coalesce(i3.SM_SEC_GROUP, tr.SM_SEC_GROUP, '') != ''            AND coalesce(i3.SM_SEC_TYPE, tr.SM_SEC_TYPE, '') != ''             THEN CONCAT(RTRIM(coalesce(i3.SM_SEC_GROUP, tr.SM_SEC_GROUP)),'/', LTRIM(coalesce(i3.SM_SEC_TYPE, tr.SM_SEC_TYPE)))           WHEN coalesce(i3.SM_SEC_TYPE, tr.SM_SEC_TYPE, '') = ''             AND coalesce(i3.SM_SEC_GROUP, tr.SM_SEC_GROUP, '') != ''            THEN coalesce(i3.SM_SEC_GROUP, tr.SM_SEC_GROUP)          WHEN coalesce(i3.SM_SEC_TYPE, tr.SM_SEC_TYPE, '') != ''             AND coalesce(i3.SM_SEC_GROUP, tr.SM_SEC_GROUP, '') = ''            THEN coalesce(i3.SM_SEC_TYPE, tr.SM_SEC_TYPE)          ELSE NULL         END       ELSE        CASE         WHEN coalesce(i2.SM_SEC_GROUP, tr.SM_SEC_GROUP, '') != ''           AND coalesce(i2.SM_SEC_TYPE, tr.SM_SEC_TYPE, '') != ''            THEN CONCAT(RTRIM(coalesce(i2.SM_SEC_GROUP, tr.SM_SEC_GROUP)),'/', LTRIM(coalesce(i2.SM_SEC_TYPE, tr.SM_SEC_TYPE)))          WHEN coalesce(i2.SM_SEC_TYPE, tr.SM_SEC_TYPE, '') = ''            AND coalesce(i2.SM_SEC_GROUP, tr.SM_SEC_GROUP, '') != ''           THEN coalesce(i2.SM_SEC_GROUP, tr.SM_SEC_GROUP)         WHEN coalesce(i2.SM_SEC_TYPE, tr.SM_SEC_TYPE, '') != ''            AND coalesce(i2.SM_SEC_GROUP, tr.SM_SEC_GROUP, '') = ''           THEN coalesce(i2.SM_SEC_TYPE, tr.SM_SEC_TYPE)         ELSE NULL        END      END AS instrument_type,      NULL AS ConventionalBonds,      pr.INST_TYPE AS instrument_type_tier3,      CASE        WHEN pr.PRIMARY_MARKET = 1        --AND NOT(CHARINDEX('B', t.CUSIP) = 1        --AND pr.ISIN IS NULL        --AND ISNULL(pr.SM_SEC_GROUP, '') NOT IN ('OPTION', 'FUTURE', 'SWAP', 'SYNTH', 'CASH')        --AND ISNULL(pr.FLAG_144A, '') != 'P')       THEN i3.SECTOR_LEVEL_1_DESC       ELSE i2.SECTOR_LEVEL_1_DESC       END AS Sector,      NULL AS Financial,      t.TRD_CURRENCY AS cur,      CASE       WHEN pr.EMERGING_MARKET=1 THEN 'EM'       ELSE NULL      END AS [currency],      CASE        WHEN pr.PRIMARY_MARKET = 1       -- AND NOT(CHARINDEX('B', t.CUSIP) = 1       -- AND pr.ISIN IS NULL       -- AND ISNULL(pr.SM_SEC_GROUP, '') NOT IN ('OPTION', 'FUTURE', 'SWAP', 'SYNTH', 'CASH')       -- AND ISNULL(pr.FLAG_144A, '') != 'P')       THEN i4.INSTRUMENT_RATING        ELSE i2.INSTRUMENT_RATING       END AS [rating],      CASE        WHEN pr.PRIMARY_MARKET = 1        --AND NOT(CHARINDEX('B', t.CUSIP) = 1        --AND pr.ISIN IS NULL        --AND ISNULL(pr.SM_SEC_GROUP, '') NOT IN ('OPTION', 'FUTURE', 'SWAP', 'SYNTH', 'CASH')        --AND ISNULL(pr.FLAG_144A, '') != 'P')       THEN i4.RATING_SOURCE        ELSE i2.RATING_SOURCE      END AS [source],      NULL AS ighy,      CASE       WHEN pr.PRIMARY_MARKET = 1 THEN 'prim'       WHEN pr.PRIMARY_MARKET = 0 THEN 'sec'       ELSE NULL      END AS primsec,      CASE        WHEN pr.PRIMARY_MARKET = 1        --AND NOT(CHARINDEX('B', t.CUSIP) = 1        --AND pr.ISIN IS NULL        --AND ISNULL(pr.SM_SEC_GROUP, '') NOT IN ('OPTION', 'FUTURE', 'SWAP', 'SYNTH', 'CASH')        --AND ISNULL(pr.FLAG_144A, '') != 'P')       THEN i3.STRUCTURE       ELSE i2.STRUCTURE       END AS Seniority,      COALESCE(pl.VENUE, 'MANUAL') AS trading_system,      t.TRD_TRADE_DATE AS bargain_date,      t.TRD_SETTLE_DATE AS settlement_date,      --tr.PM AS fundmgr,      cp.PM_INIT,      tf.TRADER AS dealer,      c1.COUNTERPARTY_NAME AS qcpty_id,      --CASE      -- -- Instrument is Debt or Preferred Income Fund      -- WHEN (pr.DEBT_DERIV = 'DEBT') or ((pr.SM_SEC_GROUP='EQUITY') and (pr.SM_SEC_TYPE='PFD'))       -- THEN COALESCE(q.BID, q.OFFER)          -- -- Instrument is CDS or CDS Index      -- WHEN pr.INST_TYPE in ('ICDS', 'SCDS')      -- THEN COALESCE(q.BID, q.OFFER)          -- -- Instrument is IRS, IFS, Cross Currency Swap, Asset Cross Currency Swap, Asset Swap, or Zero Coupon Swap      -- WHEN pr.INST_TYPE in ('IRS', 'IFS', 'CCS', 'CASWP', 'ASWP', 'ZCS')      -- THEN      --  CASE      --   -- Initiations      --   WHEN t.TRAN_TYPE LIKE '%INIT%'      --   THEN COALESCE(q.BID, q.OFFER)                 --   -- Unwinds      --   WHEN t.TRAN_TYPE LIKE '%UNWIND%'      --   THEN COALESCE(q.BID, q.OFFER)      --  END      --ELSE NULL       --END AS qprice,      CASE WHEN QUOTE_ORIGIN = 'TRADE' THEN QUOTE_VALUE ELSE CAST(ROUND(COALESCE(q.BID, q.OFFER), 2) AS DECIMAL(38,2)) END AS qprice,      --CASE      -- -- Instrument is Debt or Preferred Income Fund      -- WHEN (pr.DEBT_DERIV = 'DEBT') or ((pr.SM_SEC_GROUP='EQUITY') and (pr.SM_SEC_TYPE='PFD'))       -- THEN COALESCE(q.BID_SPREAD, q.OFFER_SPREAD)          -- -- Instrument is CDS or CDS Index      -- WHEN pr.INST_TYPE in ('ICDS', 'SCDS')      -- THEN COALESCE(q.BID_SPREAD, q.OFFER_SPREAD)          -- -- Instrument is IRS, IFS, Cross Currency Swap, Asset Cross Currency Swap, Asset Swap, or Zero Coupon Swap      -- WHEN pr.INST_TYPE in ('IRS', 'IFS', 'CCS', 'CASWP', 'ASWP', 'ZCS')      -- THEN      --  CASE      --   -- Initiations      --   WHEN t.TRAN_TYPE LIKE '%INIT%'      --   THEN COALESCE(q.BID_SPREAD, q.OFFER_SPREAD)                 --   -- Unwinds      --   WHEN t.TRAN_TYPE LIKE '%UNWIND%'      --   THEN COALESCE(q.BID_SPREAD, q.OFFER_SPREAD)      --  END      --ELSE NULL       --END AS qspread,      CAST(ROUND(COALESCE(q.BID_SPREAD, q.OFFER_SPREAD), 2) AS DECIMAL(38,2)) AS qspread,      c2.COUNTERPARTY_NAME AS ecpty_id,      t.TRD_CURRENCY AS execution_currency,      CAST(ROUND(t.TRD_PRICE, 2) AS DECIMAL(38,2)) AS execution_price,      CAST(ROUND(t.TRD_PRICING_SPREAD, 2) AS DECIMAL(38,2)) AS spread,      CAST(ROUND(fx.GBP_INDEX_RATE, 2) AS DECIMAL(38,2)) AS fxrate,      CAST(ROUND(ts.gross_val, 2) AS DECIMAL(38,2)) AS gross_val,      CAST(ROUND(ts.net_val, 2) AS DECIMAL(38,2)) AS net_val,      CAST(ROUND(ts.gross_val_gbp, 2) AS DECIMAL(38,2)) AS gross_gbp_val,      CAST(ROUND(ts.net_val_gbp, 2) AS DECIMAL(38,2)) AS net_gbp_val,      NULL AS result,      NULL AS gross_val_won,      NULL AS net_val_won,      NULL AS gross_gbp_won,      NULL AS net_gbp_won,      NULL AS non_AAA,      t.MULTI_FUND_ID AS execution_id,      --SUM(t.TRD_ORIG_FACE) AS execution_qty,      CASE       WHEN t.COUNTERPARTY_CODE = q.BROKER AND q.QUOTE_ORIGIN='TRADE' THEN CAST(ov.original_qty AS BIGINT)       WHEN t.COUNTERPARTY_CODE = q.BROKER AND q.QUOTE_ORIGIN IN ('QUOTE','PLACEMENT') THEN         CASE         WHEN q.Quote_Basis=3 AND q.QUOTE_VALUE=t.TRD_YIELD THEN CAST(ov.original_qty AS BIGINT)         WHEN q.Quote_Basis=2 AND q.QUOTE_VALUE=t.TRD_PRICING_SPREAD THEN CAST(ov.original_qty AS BIGINT)         WHEN q.Quote_Basis=1 AND q.QUOTE_VALUE=t.TRD_PRICE THEN CAST(ov.original_qty AS BIGINT)        END        ELSE NULL      END AS execution_qty,      CASE       WHEN pr.INST_TYPE in ('ABS', 'CMBS', 'RMBS', 'CDO')       THEN 'TRUE'       ELSE 'FALSE'       END AS ABS_Inst,      NULL AS process_trading,      NULL AS quote_response,      CASE       WHEN t.COUNTERPARTY_CODE = q.BROKER AND q.QUOTE_ORIGIN='TRADE' THEN 1       WHEN t.COUNTERPARTY_CODE = q.BROKER AND q.QUOTE_ORIGIN IN ('QUOTE','PLACEMENT') THEN         CASE         WHEN q.Quote_Basis=3 AND q.QUOTE_VALUE=t.TRD_YIELD THEN 1         WHEN q.Quote_Basis=2 AND q.QUOTE_VALUE=t.TRD_PRICING_SPREAD THEN 1         WHEN q.Quote_Basis=1 AND q.QUOTE_VALUE=t.TRD_PRICE THEN 1         ELSE 0        END        ELSE 0      END AS execution_count,      CASE        WHEN pr.PRIMARY_MARKET = 1        --AND NOT(CHARINDEX('B', t.CUSIP) = 1        --AND pr.ISIN IS NULL        --AND ISNULL(pr.SM_SEC_GROUP, '') NOT IN ('OPTION', 'FUTURE', 'SWAP', 'SYNTH', 'CASH')        --AND ISNULL(pr.FLAG_144A, '') != 'P')       THEN i3.SECTOR_LEVEL_2_DESC       ELSE i2.SECTOR_LEVEL_2_DESC       END AS sector_tier2,      CASE        WHEN pr.PRIMARY_MARKET = 1        --AND NOT(CHARINDEX('B', t.CUSIP) = 1        --AND pr.ISIN IS NULL        --AND ISNULL(pr.SM_SEC_GROUP, '') NOT IN ('OPTION', 'FUTURE', 'SWAP', 'SYNTH', 'CASH')        --AND ISNULL(pr.FLAG_144A, '') != 'P')       THEN i3.SECTOR_LEVEL_3_DESC        ELSE i2.SECTOR_LEVEL_3_DESC       END AS sector_tier3,      CASE        WHEN pr.PRIMARY_MARKET = 1        --AND NOT(CHARINDEX('B', t.CUSIP) = 1        --AND pr.ISIN IS NULL        --AND ISNULL(pr.SM_SEC_GROUP, '') NOT IN ('OPTION', 'FUTURE', 'SWAP', 'SYNTH', 'CASH')        --AND ISNULL(pr.FLAG_144A, '') != 'P')       THEN i3.SECTOR_LEVEL_4_DESC        ELSE i2.SECTOR_LEVEL_4_DESC       END AS sector_tier4,      CASE        WHEN pr.HYBRID = 1 THEN 'TRUE'       ELSE 'FALSE'      END AS Hybrid,      t.TRD_TRADE_DATE     INTO VISTA_REPORTING.dbo.LZ_DATA_SOURCE_TABLE     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN (SELECT original_qty, MULTI_FUND_ID FROM #temp_orig_val) ov ON ov.MULTI_FUND_ID=t.MULTI_FUND_ID     INNER JOIN (SELECT MULTI_FUND_ID,MAX_TOUCH FROM #max_mf_touch) mmt ON mmt.MULTI_FUND_ID=t.MULTI_FUND_ID AND mmt.MAX_TOUCH=t.TOUCH_COUNT     LEFT JOIN (SELECT MAX_TOUCH, ORD_NUM FROM #latest_tr_touch) lst_tr ON lst_tr.ORD_NUM=t.ORD_NUM     LEFT JOIN (SELECT SM_SEC_GROUP,CUSIP,SM_SEC_TYPE,ORD_NUM,TOUCH_COUNT,AUTH_TIME,DEALING_DESK FROM VISTA_REPORTING.dbo.TRD_ORDERS) tr ON tr.ORD_NUM=lst_tr.ORD_NUM AND tr.TOUCH_COUNT=lst_tr.MAX_TOUCH     LEFT JOIN (SELECT CURRENCY,GBP_INDEX_RATE,MARKDATE FROM VISTA_REPORTING.dbo.FX_RATES) fx ON fx.CURRENCY=t.TRD_CURRENCY AND CONVERT(date, fx.MARKDATE) = CONVERT(date, t.TRD_TRADE_DATE)     LEFT JOIN (SELECT VENUE, MULTI_FUND_ID FROM VISTA_REPORTING.dbo.PLACEMENTS) pl ON pl.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN (SELECT BROKER,BID,BID_SPREAD,OFFER, OFFER_SPREAD,QUOTE_ORIGIN,QUOTE_TYPE,Quote_Basis,Quote_VALUE, MULTI_FUND_ID FROM VISTA_REPORTING.dbo.QUOTES) q ON q.MULTI_FUND_ID=t.MULTI_FUND_ID      OUTER APPLY (SELECT TOP 1          i.ISIN,          i.CUSIP,          i.TICKER,          i.SM_SEC_GROUP,          i.SM_SEC_TYPE,         i.INSTRUMENT_RATING,         i.RATING_SOURCE,         i.STRUCTURE,         i.SECTOR_LEVEL_1_DESC,         i.SECTOR_LEVEL_2_DESC,          i.SECTOR_LEVEL_3_DESC,          i.SECTOR_LEVEL_4_DESC         FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=coalesce(t.CUSIP, tr.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(t.EXECUTION_TIME, tr.AUTH_TIME)))         ORDER BY i.DATE DESC) as i2         --Use the latest date on or prior to the execution for secondary market trades     OUTER APPLY (SELECT TOP 1          i.ISIN,          i.CUSIP,          i.TICKER,          i.SM_SEC_GROUP,          i.SM_SEC_TYPE,         i.INSTRUMENT_RATING,         i.RATING_SOURCE,         i.STRUCTURE,         i.SECTOR_LEVEL_1_DESC,         i.SECTOR_LEVEL_2_DESC,          i.SECTOR_LEVEL_3_DESC,          i.SECTOR_LEVEL_4_DESC          FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=coalesce(t.CUSIP, tr.CUSIP) AND i.DATE>=CONVERT(DATE, coalesce(t.EXECUTION_TIME, tr.AUTH_TIME)))         ORDER BY i.DATE DESC) as i3         --Use the latest date after the execution for Primary Market trades (used for all data points except Ratings)     OUTER APPLY (SELECT TOP 1         i.ISIN,          i.CUSIP,          i.TICKER,          i.SM_SEC_GROUP,          i.SM_SEC_TYPE,         i.INSTRUMENT_RATING,         i.RATING_SOURCE,         i.STRUCTURE,         i.SECTOR_LEVEL_1_DESC,         i.SECTOR_LEVEL_2_DESC,          i.SECTOR_LEVEL_3_DESC,          i.SECTOR_LEVEL_4_DESC         FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=coalesce(t.CUSIP, tr.CUSIP) AND i.DATE>=CONVERT(DATE, coalesce(t.EXECUTION_TIME, tr.AUTH_TIME)) AND i.INSTRUMENT_RATING IS NOT NULL)         ORDER BY i.DATE ASC) as i4          --Use the first date that we have a rating after the execution to populate the Rating for Primary Market trades     LEFT JOIN (SELECT DISTINCT PRIMARY_MARKET, INST_TYPE, MULTI_FUND_ID,EMERGING_MARKET,HYBRID,DEBT_DERIV,DEALING_DESK,INTERFUND_TRANSFER FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr ON pr.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN (SELECT DISTINCT PM_INIT, ORD_NUM FROM #concat_pm) cp ON cp.ORD_NUM=tr.ORD_NUM     LEFT JOIN (SELECT DISTINCT COUNTERPARTY_NAME, COUNTERPARTY_CODE FROM VISTA_REPORTING.dbo.COUNTERPARTIES) c1 ON c1.COUNTERPARTY_CODE=q.BROKER     LEFT JOIN (SELECT DISTINCT COUNTERPARTY_NAME, COUNTERPARTY_CODE FROM VISTA_REPORTING.dbo.COUNTERPARTIES) c2 ON c2.COUNTERPARTY_CODE=t.COUNTERPARTY_CODE     LEFT JOIN (SELECT DISTINCT TRADER,ORD_NUM FROM #temp_last_trader) tf ON tf.ORD_NUM=tr.ORD_NUM     LEFT JOIN (SELECT DISTINCT gross_val,net_val,gross_val_gbp,net_val_gbp,MULTI_FUND_ID FROM #temp_sum_table) ts ON ts.MULTI_FUND_ID = t.MULTI_FUND_ID     OUTER APPLY (SELECT TOP 1 FACE FROM VISTA_REPORTING.dbo.TRD_ORDERS tr2         WHERE tr2.ORD_NUM = t.ORD_NUM          AND tr2.FILL_AMT !=0         ORDER BY tr2.TOUCH_COUNT ASC) tr3     WHERE tr.DEALING_DESK='Fixed Income'       AND pr.DEALING_DESK='Fixed Income'      AND q.QUOTE_TYPE IS NOT NULL       AND t.FinalFlag = 1       AND ISNULL(t.TRD_STATUS,'') <> 'C'      AND pr.DEBT_DERIV = 'DEBT'      AND pr.INTERFUND_TRANSFER = 0            IF OBJECT_ID('tempdb..#temp_first_trader', 'U') IS NOT NULL DROP TABLE #temp_first_trader    IF OBJECT_ID('tempdb..#concat_pm', 'U') IS NOT NULL DROP TABLE #concat_pm    IF OBJECT_ID('tempdb..#max_mf_touch', 'U') IS NOT NULL DROP TABLE #max_mf_touch    IF OBJECT_ID('tempdb..#temp_orig_val', 'U') IS NOT NULL DROP TABLE #temp_orig_val    IF OBJECT_ID('tempdb..#latest_tr_touch', 'U') IS NOT NULL DROP TABLE #latest_tr_touch    END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MARKET_ABUSE_FRONT_RUNNING  CreateDate: 2025-06-26 17:47:05.397  ModifyDate: 2025-06-26 17:47:05.397  --- DEFINITION START ---  -- =============================================    -- Author:  <Devereux, Alan>    -- Create date: <2017/11/01>    -- Description: <Splits raw orders table into PM and Trader orders.>    -- =============================================        CREATE PROCEDURE [dbo].[MARKET_ABUSE_FRONT_RUNNING]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;            IF OBJECT_ID('tempdb..#temp_fr_table', 'U') IS NOT NULL DROP TABLE #temp_fr_table        SELECT DISTINCT     pm.PM,     pm.PM_FULL_NAME,     pm.DEALING_DESK,     pm.ORD_NUM,     pm.CUSIP,     pm.FACE,     pm.TRAN_TYPE,     pr.INST_TYPE,     t.FUND,     i2.SM_SEC_GROUP,     i2.SM_SEC_TYPE,     MIN(pm.AUTH_TIME) AS MIN_AUTH_TIME    INTO #temp_fr_table    FROM VISTA_REPORTING.dbo.PM_ORDERS pm    LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD=pm.ORD_NUM    LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM=oc.TRD_ORD    LEFT JOIN (SELECT ORD_NUM, MAX(TOUCH_COUNT) AS MAX_TOUCH FROM VISTA_REPORTING.dbo.PM_ORDERS GROUP BY ORD_NUM) mt ON mt.ORD_NUM=pm.ORD_NUM    --LEFT JOIN VISTA_REPORTING.dbo.INSTRUMENTS i ON i.CUSIP=pm.CUSIP    OUTER APPLY (SELECT TOP 1 i.* FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=coalesce(t.CUSIP, pm.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(t.EXECUTION_TIME, pm.AUTH_TIME)))         ORDER BY i.DATE DESC) as i2    LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID=t.MULTI_FUND_ID    WHERE pm.PM IS NOT NULL      AND pm.TOUCH_COUNT=mt.MAX_TOUCH    GROUP BY      pm.PM,     pm.PM_FULL_NAME,     pm.DEALING_DESK,     pm.ORD_NUM,     pm.CUSIP,     pm.FACE,     pm.TRAN_TYPE,     pr.INST_TYPE,     t.FUND,     i2.SM_SEC_GROUP,     i2.SM_SEC_TYPE        --select distinct * from #temp_fr_table where ORD_NUM = 751937        IF OBJECT_ID('VISTA_REPORTING.dbo.MARKET_ABUSE_FRONT_RUNNING', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.MARKET_ABUSE_FRONT_RUNNING        SELECT DISTINCT     fr1.PM AS FIRST_PM,     fr1.PM_FULL_NAME AS FIRST_PM_FULL_NAME,     fr2.PM AS SECOND_PM,     fr2.PM_FULL_NAME AS SECOND_PM_FULL_NAME,     fr1.ORD_NUM AS ORD_NUM_1,     --fr3.ORD_NUM AS ORD_NUM_2,     fr2.ORD_NUM AS ORD_NUM_2,     fr1.DEALING_DESK AS FIRST_DEALING_DESK,     fr2.DEALING_DESK AS SECOND_DEALING_DESK,     fr1.FACE AS FACE_1,     fr1.FUND AS FUND_1,     fr2.FACE AS FACE_2,     fr2.FUND AS FUND_2,     fr1.INST_TYPE AS INST_TYPE_1,      fr2.INST_TYPE AS INST_TYPE_2,      fr1.MIN_AUTH_TIME AS AUTH_TIME_1,     fr2.MIN_AUTH_TIME AS AUTH_TIME_2,     DATEDIFF(MINUTE, fr1.MIN_AUTH_TIME, fr2.MIN_AUTH_TIME)AS TIME_DIFF_MINS,     fr1.CUSIP AS CUSIP_1,     fr1.SM_SEC_GROUP AS SM_SEC_GROUP_1,     fr1.SM_SEC_TYPE AS SM_SEC_TYPE_1,     fr2.CUSIP AS CUSIP_2,     fr2.SM_SEC_GROUP AS SM_SEC_GROUP_2,     fr2.SM_SEC_TYPE AS SM_SEC_TYPE_2    INTO VISTA_REPORTING.dbo.MARKET_ABUSE_FRONT_RUNNING    FROM #temp_fr_table fr1    INNER JOIN #temp_fr_table fr2 ON fr1.PM != fr2.PM            --AND fr1.FUND != fr2.FUND            AND fr1.CUSIP = fr2.CUSIP            AND fr1.ORD_NUM != fr2.ORD_NUM            AND fr1.TRAN_TYPE = fr2.TRAN_TYPE            --AND fr1.FACE != fr2.FACE    WHERE ABS(DATEDIFF(MINUTE, fr1.MIN_AUTH_TIME, fr2.MIN_AUTH_TIME)) < 1440     AND fr1.MIN_AUTH_TIME < fr2.MIN_AUTH_TIME     --AND (fr1.PM_FULL_NAME IS NOT NULL OR fr2.PM_FULL_NAME IS NOT NULL)     --AND (fr1.FUND IS NOT NULL AND fr2.FUND IS NOT NULL)        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MARKET_ABUSE_SPOOFING  CreateDate: 2025-06-26 17:47:17.080  ModifyDate: 2025-06-26 17:47:17.080  --- DEFINITION START ---  -- =============================================    -- Author:  <Devereux, Alan>    -- Create date: <2017/11/01>    -- Description: <Splits raw orders table into PM and Trader orders.>    -- =============================================        CREATE PROCEDURE [dbo].[MARKET_ABUSE_SPOOFING]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;            IF OBJECT_ID('tempdb..#min_touch', 'U') IS NOT NULL DROP TABLE #min_touch    SELECT      ORD_NUM,     MIN(TOUCH_COUNT) AS MIN_TOUCH    INTO #min_touch    FROM VISTA_REPORTING.dbo.PM_ORDERS    WHERE STATUS in ('C', 'X', 'R')     GROUP BY      ORD_NUM        IF OBJECT_ID('tempdb..#pm_list', 'U') IS NOT NULL DROP TABLE #pm_list    SELECT DISTINCT      ORD_NUM,      PM    INTO #pm_list    FROM VISTA_REPORTING.dbo.PM_ORDERS     WHERE PM IS NOT NULL             IF OBJECT_ID('tempdb..#temp_spoof', 'U') IS NOT NULL DROP TABLE #temp_spoof    SELECT DISTINCT     pm.ORD_NUM AS PM_ORD,     oc.TRD_ORD,      t.MULTI_FUND_ID,     t.FUND,     pm.TRAN_TYPE,     --pm.AUTH_TIME,     pm.TOUCH_COUNT,     ma.MAX_AUTH,     MAX(ABS(pm.FILL_AMT)) AS AMOUNT_FILLED,     DATEDIFF(minute, ma.MAX_AUTH, pm.MODIFY_TIME) AS TIME_DIFF,     pm.STATUS,     pm.ENTRY_TIME,     pm.MODIFY_TIME,     pm.FACE,     --pm.PM,     pl.PM,     pm.TRADER,     pm.OWNER_TYPE,     pr.INST_TYPE,     pm.DEALING_DESK,     pm.PM_FULL_NAME,     i2.SM_SEC_GROUP,     i2.SM_SEC_TYPE,     CASE       WHEN oc.TRD_ORD IS NULL THEN 1      ELSE 0     END AS PRE_TRADE_FLAG    INTO #temp_spoof    FROM VISTA_REPORTING.dbo.PM_ORDERS pm     INNER JOIN #min_touch mt ON mt.ORD_NUM=pm.ORD_NUM AND mt.MIN_TOUCH=pm.TOUCH_COUNT    LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON pm.ORD_NUM=oc.PM_ORD    LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM=oc.TRD_ORD    LEFT JOIN #pm_list pl ON pl.ORD_NUM=pm.ORD_NUM    --LEFT JOIN VISTA_REPORTING.dbo.INSTRUMENTS i ON i.CUSIP=pm.CUSIP    OUTER APPLY (SELECT TOP 1 i.* FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=coalesce(t.CUSIP, pm.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(t.EXECUTION_TIME, pm.AUTH_TIME)))         ORDER BY i.DATE DESC) as i2    LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID=t.MULTI_FUND_ID    LEFT JOIN (SELECT ORD_NUM, MAX(AUTH_TIME) AS MAX_AUTH FROM VISTA_REPORTING.dbo.PM_ORDERS GROUP BY ORD_NUM) ma ON ma.ORD_NUM=pm.ORD_NUM    WHERE      --pm.STATUS in ('C', 'X', 'R')      pm.DEALING_DESK in ('Fixed Income', 'Equity')      --AND pm.ORD_NUM='855266'    GROUP BY      pm.ORD_NUM,     oc.TRD_ORD,     t.MULTI_FUND_ID,     t.FUND,     --pm.AUTH_TIME,     ma.MAX_AUTH,     pm.TOUCH_COUNT,     pm.STATUS,     pm.ENTRY_TIME,     pm.MODIFY_TIME,     pm.FACE,     --pm.PM,     pl.PM,     pm.TRADER,     pm.DEALING_DESK,     pm.PM_FULL_NAME,     pr.INST_TYPE,     i2.SM_SEC_GROUP,     t.SM_SEC_GROUP,     i2.SM_SEC_TYPE,     t.SM_SEC_TYPE,     pm.OWNER_TYPE,     pm.TRAN_TYPE    HAVING     DATEDIFF(minute, ma.MAX_AUTH, pm.MODIFY_TIME) < 120*60    --ORDER BY      --pm.ORD_NUM,     --TIME_DIFF desc        --select * from #temp_spoof order by PM        --select * from VISTA_REPORTING.dbo.ORDERS where ORD_NUM = '826158'    --select ORD_NUM, COUNT(DISTINCT(PM)) AS PM_COUNT from VISTA_REPORTING.dbo.ORDERS WHERE OWNER_TYPE='P' group by ORD_NUM order by PM_COUNT desc        IF OBJECT_ID('VISTA_REPORTING.dbo.MARKET_ABUSE_SPOOFING', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.MARKET_ABUSE_SPOOFING        SELECT      PM_ORD,     --MULTI_FUND_ID,     FUND,     PM,     PM_FULL_NAME,     DEALING_DESK,     TRAN_TYPE,     INST_TYPE,     FACE,     PRE_TRADE_FLAG,     SM_SEC_GROUP,     SM_SEC_TYPE,     MAX_AUTH,     TIME_DIFF,     AVG(TIME_DIFF) AS AVG_CANCEL_TIME,     COUNT(DISTINCT(PM_ORD)) AS PM_ORD_NUM_COUNT,     COUNT(DISTINCT(TRD_ORD)) AS TRD_ORD_NUM_COUNT    INTO VISTA_REPORTING.dbo.MARKET_ABUSE_SPOOFING    FROM #temp_spoof    --WHERE PM_ORD='775434'    GROUP BY      PM_ORD,     --MULTI_FUND_ID,     FUND,     PM,     PM_FULL_NAME,     DEALING_DESK,     TRAN_TYPE,     INST_TYPE,     FACE,     PRE_TRADE_FLAG,     SM_SEC_GROUP,     SM_SEC_TYPE,     MAX_AUTH,     TIME_DIFF    --ORDER BY PM, TRAN_TYPE, PM_ORD_NUM_COUNT DESC        END        -- IDENTIFY SELL THEN BUY OR BUY THEN SELL    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MARKIT_ISREPORT_DATACOPY  CreateDate: 2025-01-07 09:12:12.080  ModifyDate: 2025-06-24 06:39:07.763  --- DEFINITION START ---  CREATE PROCEDURE [dbo].[MARKIT_ISREPORT_DATACOPY]          AS             BEGIN                 SET XACT_ABORT ON;                           BEGIN TRY                     BEGIN TRAN                         DECLARE @RecCount Varchar(50);              SELECT @RecCount = COUNT(1) FROM [staging].[Markit_ISReport] WITH (NOLOCK);               INSERT INTO [dbo].[DATAPRODUCT_LOGS] ([Action], [DataProduct], [Result], Created) VALUES('MARKIT_ISREPORT_DATACOPY: Process - Started - ' + @RecCount + ' received.','MARKIT_ISREPORT','Info',GETDATE());                                  -- Delete records older than 1 year from the table              DELETE FROM [dbo].[Markit_ISReport] WHERE [TRUE_PULL_DATE] < DATEADD(DAY, -1850, GETDATE());                                 -- Insert staging data into dbo table              INSERT INTO [dbo].[Markit_ISReport](             [Trader],            [Manager],            [Cash Programme],            [OrderReason],            [Order ID],            [Side],            [Instrument Name],            [Broker],            [Order Approved Date/Time],            [Avg Trade Price (local)],            [Full Day VWAP],            [Interval VWAP],            [Order Arrival Price],            [Vs Order Arrival],            [Shares],            [Trade Date],            [TRUE_PULL_DATE]                )              SELECT              [TRADER],             [MANAGER],             [CASH_PROGRAMME],             [ORDERREASON],             [ORDER_ID],             [SIDE],             [INSTRUMENT_NAME],             [BROKER],             [ORDER_APPROVED_DATETIME],             [AVG_TRADE_PRICE_LOCAL],             [FULL_DAY_VWAP],             [INTERVAL_VWAP],             [ORDER_ARRIVAL_PRICE],             [VS_ORDER_ARRIVAL],             [SHARES],             [TRADE_DATE],             getdate()              FROM   [staging].[Markit_ISReport] WITH (NOLOCK);                        INSERT INTO [dbo].[DATAPRODUCT_LOGS] ([Action], [DataProduct], [Result], Created) VALUES('MARKIT_ISREPORT_DATACOPY:Process - Completed - ' + @RecCount + ' received.','MARKIT_ISREPORT','Success',GETDATE());                                        COMMIT TRAN                               SELECT 'SUCCESS' AS RESULT;                END TRY                           BEGIN CATCH                   Print N'Rollback Transaction - '                           + Error_Message() + ' '                           + convert(varchar(200), ERROR_LINE())                       INSERT INTO [dbo].[DATAPRODUCT_LOGS] ([Action], [DataProduct], [Result], Created) VALUES(Error_Message() + ' ' + convert(varchar(200), ERROR_LINE()),'MARKIT_ISREPORT','Failed',GETDATE());                                           IF ( @@TRANCOUNT > 0 AND XACT_STATE() != 0 )                       ROLLBACK TRAN;                    THROW;                END CATCH;           END  --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MARKIT_OUTSIDEHIGHLOW_DATACOPY  CreateDate: 2025-01-07 09:12:12.090  ModifyDate: 2025-06-24 06:39:54.537  --- DEFINITION START ---       CREATE PROCEDURE [dbo].[MARKIT_OUTSIDEHIGHLOW_DATACOPY]          AS             BEGIN                 SET XACT_ABORT ON;                           BEGIN TRY                     BEGIN TRAN                         DECLARE @RecCount Varchar(50);              SELECT @RecCount = COUNT(1) FROM [staging].[Markit_OutsideHighLow] WITH (NOLOCK);               INSERT INTO [dbo].[DATAPRODUCT_LOGS] ([Action], [DataProduct], [Result], Created) VALUES('MARKIT_OUTSIDEHIGHLOW_DATACOPY: Process - Started - ' + @RecCount + ' received.','MARKIT_OUTSIDEHIGHLOW','Info',GETDATE());                                  -- Delete records older than 1 year from the table              DELETE FROM [dbo].[Markit_OutsideHighLow] WHERE [TRUE_PULL_DATE] < DATEADD(DAY, -1850, GETDATE());                             -- Insert staging data into dbo table              INSERT INTO [dbo].[Markit_OutsideHighLow](              [Trader],             [Cash Programme],             [Order ID],             [Side],             [Instrument Name],             [Broker],             [Order Approved Date/Time],             [Shares],             [Avg Trade Price (local)],             [Daily High Price (local)],             [Daily Low Price (local)],             [Total Value],            [TRUE_PULL_DATE]              )              SELECT              [TRADER],             [CASH_PROGRAMME],             [ORDER_ID],             [SIDE],             [INSTRUMENT_NAME],             [BROKER],             [ORDER_APPROVED_DATETIME],             [SHARES],             [AVG_TRADE_PRICE_LOCAL],             [DAILY_HIGH_PRICE_LOCAL],             [DAILY_LOW_PRICE_LOCAL],             [TOTAL_VALUE],             getdate()              FROM   [staging].[Markit_OutsideHighLow] WITH (NOLOCK);                        INSERT INTO [dbo].[DATAPRODUCT_LOGS] ([Action], [DataProduct], [Result], Created) VALUES('MARKIT_OUTSIDEHIGHLOW_DATACOPY:Process - Completed - ' + @RecCount + ' received.','MARKIT_OUTSIDEHIGHLOW','Success',GETDATE());                                        COMMIT TRAN                               SELECT 'SUCCESS' AS RESULT;                END TRY                           BEGIN CATCH                   Print N'Rollback Transaction - '                           + Error_Message() + ' '                           + convert(varchar(200), ERROR_LINE())                       INSERT INTO [dbo].[DATAPRODUCT_LOGS] ([Action], [DataProduct], [Result], Created) VALUES(Error_Message() + ' ' + convert(varchar(200), ERROR_LINE()),'MARKIT_OUTSIDEHIGHLOW','Failed',GETDATE());                                           IF ( @@TRANCOUNT > 0 AND XACT_STATE() != 0 )                       ROLLBACK TRAN;                    THROW;                END CATCH;           END  --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_AMENDMENT_FLAG_TABLE  CreateDate: 2025-06-26 17:47:49.823  ModifyDate: 2025-06-26 17:47:49.823  --- DEFINITION START ---      CREATE PROCEDURE [dbo].[MASTER_AMENDMENT_FLAG_TABLE]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,         AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;              DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()         IF OBJECT_ID('tempdb..#temp_amend_MFID', 'U') IS NOT NULL DROP TABLE #temp_amend_MFID      SELECT DISTINCT       vg.MULTI_FUND_ID,       vg.TOUCH_COUNT     INTO #temp_amend_MFID     FROM VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_EQ_TABLE vg --Need the EQ table         UNION ALL          SELECT DISTINCT       vg2.MULTI_FUND_ID,       vg2.TOUCH_COUNT      FROM VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_FI_TABLE vg2 --Need the FI table         UNION ALL          SELECT DISTINCT       vg3.MULTI_FUND_ID,       vg3.TOUCH_COUNT      FROM VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_LL_TABLE vg3             IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids     SELECT DISTINCT       t.ORD_NUM as TRD_ORD,      oc.PM_ORD AS ORD_NUM,      ol.MULTI_FUND_ID     INTO #distinct_ids     FROM #temp_amend_MFID ol     LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.MULTI_FUND_ID = ol.MULTI_FUND_ID     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = t.ORD_NUM             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE', 'U') IS NOT NULL     DELETE FROM #distinct_ids where NOT EXISTS (SELECT DISTINCT od.MULTI_FUND_ID                  FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                  WHERE od.MULTI_FUND_ID = #distinct_ids.MULTI_FUND_ID)                 IF OBJECT_ID('tempdb..#Latest_trd', 'U') IS NOT NULL DROP TABLE #Latest_trd     SELECT       t.MULTI_FUND_ID,      SUM(t.TRD_ORIG_FACE) AS TRD_ORIG_FACE,      t.TRD_SETTLE_DATE,      t.ACTIVITY_TYPE,      MAX(t.TRD_MODIFY_TIME) AS TRD_MODIFY_TIME,      t.TOUCH_COUNT     INTO #Latest_trd     FROM VISTA_REPORTING.dbo.TRADES t     WHERE EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)     GROUP BY      MULTI_FUND_ID,      TRD_SETTLE_DATE,      ACTIVITY_TYPE,      TOUCH_COUNT             IF OBJECT_ID('tempdb..#Funds_concat', 'U') IS NOT NULL DROP TABLE #Funds_concat     SELECT DISTINCT      MULTI_FUND_ID,      STUFF((       SELECT DISTINCT ', ' + LTRIM(RTRIM(PORTFOLIOS_PORTFOLIO_NAME))       FROM VISTA_REPORTING.dbo.TRADES       WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID) --AND MULTI_FUND_ID IN (SELECT MULTI_FUND_ID FROM #temp_amend_MFID)       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS Funds_concat     INTO #Funds_concat     FROM VISTA_REPORTING.dbo.TRADES Results     WHERE NULLIF(Results.PORTFOLIOS_PORTFOLIO_NAME,'') IS NOT NULL         AND (Results.AmendmentFlag = 1 OR Results.CancellationFlag = 1)        AND EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = Results.MULTI_FUND_ID)     GROUP BY MULTI_FUND_ID             IF OBJECT_ID('tempdb..#min_Dealer', 'U') IS NOT NULL DROP TABLE #min_Dealer     SELECT DISTINCT      t1.MULTI_FUND_ID,      t1.TRD_TRADER      INTO #min_Dealer     FROM VISTA_REPORTING.dbo.TRADES t1     INNER JOIN (      SELECT MULTI_FUND_ID, MIN(TOUCH_COUNT)  AS min_tch      FROM VISTA_REPORTING.dbo.TRADES       WHERE NULLIF(TOUCH_COUNT,'') IS NOT NULL      GROUP BY MULTI_FUND_ID) t2     ON t1.MULTI_FUND_ID = t2.MULTI_FUND_ID AND t1.TOUCH_COUNT = t2.min_tch     WHERE EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t1.MULTI_FUND_ID)             --Check if there is a change in any of the following columns for each amendment: TRD_PRICE, SUM(ABS(TRD_ORIG_FACE)), TRD_COMMISSION, TRD_SETTLE_DATE, TRD_TRADE_DATE, EXECUTION_TIME.     IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades     SELECT       MULTI_FUND_ID,       TOUCH_COUNT,      SUM(TRD_ORIG_FACE) AS SUM_TRD_ORIG_FACE,      TRD_PRICE,      SUM(TRD_COMMISSION) AS SUM_TRD_COMMISSION,      TRD_SETTLE_DATE,      TRD_TRADE_DATE,      EXECUTION_TIME     INTO #trades     FROM (      SELECT DISTINCT        t.MULTI_FUND_ID,        t.CLIENT_EXECUTION_NUM,       t.TOUCH_COUNT,       CONVERT(DECIMAL(18,2),ABS(t.TRD_ORIG_FACE)) AS TRD_ORIG_FACE,       CONVERT(DECIMAL(18,2),t.TRD_PRICE) AS TRD_PRICE,       CONVERT(DECIMAL(18,2),t.TRD_COMMISSION) AS TRD_COMMISSION,       t.TRD_SETTLE_DATE,       t.TRD_TRADE_DATE,       t.EXECUTION_TIME      FROM VISTA_REPORTING.dbo.TRADES t      WHERE EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)     ) a     GROUP BY      MULTI_FUND_ID,       TOUCH_COUNT,      TRD_PRICE,      --TRD_COMMISSION,      TRD_SETTLE_DATE,      TRD_TRADE_DATE,      EXECUTION_TIME             IF OBJECT_ID('tempdb..#changes1', 'U') IS NOT NULL DROP TABLE #changes1     SELECT DISTINCT       amnd.MULTI_FUND_ID,      amnd.TOUCH_COUNT,      CASE WHEN ISNULL(old.TRD_PRICE,'-1')    <> ISNULL(new.TRD_PRICE,'-1')    THEN CONCAT('Price: '   ,ISNULL(CONVERT(VARCHAR(100),old.TRD_PRICE   ),'blank') , '-> ' , ISNULL(CONVERT(VARCHAR(100),new.TRD_PRICE   ), 'blank')) END AS [Price_Change],      CASE WHEN ISNULL(old.SUM_TRD_ORIG_FACE,'-1')  <> ISNULL(new.SUM_TRD_ORIG_FACE,'-1')  THEN CONCAT('Nominal: '   ,ISNULL(CONVERT(VARCHAR(100),old.SUM_TRD_ORIG_FACE ),'blank') , '-> ' , ISNULL(CONVERT(VARCHAR(100),new.SUM_TRD_ORIG_FACE ), 'blank')) END AS   [Nominal_Change],      CASE WHEN ISNULL(old.SUM_TRD_COMMISSION,'-1')  <> ISNULL(new.SUM_TRD_COMMISSION,'-1')  THEN CONCAT('Commission: '  ,ISNULL(CONVERT(VARCHAR(100),old.SUM_TRD_COMMISSION ),'blank') , '-> ' , ISNULL(CONVERT(VARCHAR(100),new.SUM_TRD_COMMISSION), 'blank'))END   AS [Commission_Change],      CASE WHEN ISNULL(old.TRD_SETTLE_DATE,'1900-01-01') <> ISNULL(new.TRD_SETTLE_DATE,'1900-01-01') THEN CONCAT('Settle Date: '  ,ISNULL(CONVERT(VARCHAR(100),old.TRD_SETTLE_DATE ),'blank') , '-> ' , ISNULL(CONVERT(VARCHAR(100),new.TRD_SETTLE_DATE ), 'blank')  ) END AS [Settle_Date_Change],      CASE WHEN ISNULL(old.TRD_TRADE_DATE,'1900-01-01') <> ISNULL(new.TRD_TRADE_DATE,'1900-01-01') THEN CONCAT('Trade Date: '  ,ISNULL(CONVERT(VARCHAR(100),old.TRD_TRADE_DATE  ),'blank') , '-> ' , ISNULL(CONVERT(VARCHAR(100),new.TRD_TRADE_DATE ), 'blank')) END AS [Trade_Date_Change],      CASE WHEN ISNULL(old.EXECUTION_TIME,'1900-01-01') <> ISNULL(new.EXECUTION_TIME,'')   THEN CONCAT('Execution time: ' ,ISNULL(CONVERT(VARCHAR(100),old.EXECUTION_TIME  ),'blank') , '-> ' , ISNULL(CONVERT(VARCHAR(100),new.EXECUTION_TIME ), 'blank')) END AS   [Execution_Time_Change]     INTO #changes1     FROM #temp_amend_MFID amnd     LEFT JOIN #trades new ON amnd.MULTI_FUND_ID = new.MULTI_FUND_ID AND amnd.TOUCH_COUNT = new.TOUCH_COUNT     OUTER APPLY (SELECT TOP 1 * FROM #trades old WHERE new.MULTI_FUND_ID = old.MULTI_FUND_ID AND new.TOUCH_COUNT > old.TOUCH_COUNT ORDER BY old.TOUCH_COUNT DESC) old     WHERE EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = amnd.MULTI_FUND_ID)                  IF OBJECT_ID('tempdb..#changes2', 'U') IS NOT NULL DROP TABLE #changes2     SELECT       MULTI_FUND_ID,      TOUCH_COUNT,      CONCAT(Price_Change + ', ',Nominal_Change + ', ',Commission_Change + ', ',Settle_Date_Change + ', ',Trade_Date_Change + ', ',Execution_Time_Change + ', ') AS [Change_Record]      INTO #changes2     FROM #changes1             IF OBJECT_ID('tempdb..#temp_oc', 'U') IS NOT NULL DROP TABLE #temp_oc     SELECT DISTINCT       oc.PM_ORD,      oc.TRD_ORD     INTO #temp_oc     FROM Vista_REPORTING.dbo.ORDERS_CROSS oc     WHERE EXISTS (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = oc.TRD_ORD)             IF OBJECT_ID('tempdb..#PM_comments', 'U') IS NOT NULL DROP TABLE #PM_comments     SELECT DISTINCT      t.MULTI_FUND_ID,      dc.[VALUE]     INTO #PM_comments     FROM VISTA_STAGING.dbo.TRADES t     LEFT JOIN #temp_oc oc ON t.ORD_NUM = oc.TRD_ORD     LEFT JOIN (SELECT DISTINCT ORD_NUM, UPDATE_INSTR FROM VISTA_REPORTING.dbo.PM_ORDERS WHERE PM IS NOT NULL) pm ON oc.PM_ORD = pm.ORD_NUM     LEFT JOIN (SELECT DISTINCT [VALUE], TAG_NAME, CODE FROM VISTA_REPORTING.dbo.DECODES) dc ON dc.CODE = pm.UPDATE_INSTR AND dc.TAG_NAME = 'PM_INSTRUCTION'     WHERE EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)     --WHERE pm.PM IS NOT NULL             IF OBJECT_ID('tempdb..#PM_INST_concat', 'U') IS NOT NULL DROP TABLE #PM_INST_concat     SELECT DISTINCT       MULTI_FUND_ID,       STUFF((      SELECT DISTINCT ', ' + LTRIM(RTRIM([VALUE]))      FROM #PM_comments       WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')       ,1,2,'') AS PM_INST_concat     INTO #PM_INST_concat     FROM #PM_comments Results     GROUP BY MULTI_FUND_ID             IF OBJECT_ID('tempdb..#Latest_PM', 'U') IS NOT NULL DROP TABLE #Latest_PM     SELECT DISTINCT       pm.ORD_NUM,       pm.PM,      oc.TRD_ORD     INTO #Latest_PM     FROM (SELECT DISTINCT ORD_NUM, PM, TOUCH_COUNT FROM VISTA_REPORTING.dbo.PM_ORDERS) pm     INNER JOIN (SELECT DISTINCT ORD_NUM, MAX(TOUCH_COUNT) as MAX_TOUCH FROM VISTA_REPORTING.dbo.PM_ORDERS GROUP BY ORD_NUM) mt ON mt.ORD_NUM = pm.ORD_NUM AND mt.MAX_TOUCH = pm.TOUCH_COUNT     LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc on pm.ORD_NUM = oc.PM_ORD     WHERE EXISTS (SELECT DISTINCT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = pm.ORD_NUM)              IF OBJECT_ID('tempdb..#TRO_PM_concat', 'U') IS NOT NULL DROP TABLE #TRO_PM_concat     SELECT DISTINCT       TRD_ORD,       STUFF((      SELECT DISTINCT ' | ' + LTRIM(RTRIM(PM))      FROM #Latest_PM        WHERE (TRD_ORD = ltdPM.TRD_ORD)       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')       ,1,2,'') AS PM_concat     INTO #TRO_PM_concat     FROM #Latest_PM ltdPM     GROUP BY TRD_ORD             --2. Get latest TRD_TRADE_DATE associated with a trade     IF OBJECT_ID('tempdb..#Latest_TRD_TRADE_DATE', 'U') IS NOT NULL DROP TABLE #Latest_TRD_TRADE_DATE     SELECT DISTINCT      MULTI_FUND_ID,      SM_CURRENCY,      TRD_CURRENCY,      TRD_TRADE_DATE     INTO #Latest_TRD_TRADE_DATE     FROM VISTA_REPORTING.dbo.TRADES t     WHERE FinalFlag = 1 AND EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)             IF OBJECT_ID('tempdb..#average_daily_temp', 'U') IS NOT NULL DROP TABLE #average_daily_temp     SELECT DISTINCT      t.ORD_NUM,       --t.MULTI_FUND_ID,       ABS(pm.FACE) AS FACE,      t.TRD_ORIG_FACE,      pb.ACCUMULATED_VOLUME_UNSCALED,      MIN(p.RELEASE_DATETIME) AS RELEASE_DATETIME     INTO #average_daily_temp     FROM VISTA_REPORTING.dbo.TRADES t     --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON t.ORD_NUM = oc.TRD_ORD      LEFT JOIN (SELECT RELEASE_DATETIME, PLACEMENT_NUM FROM VISTA_REPORTING.dbo.PLACEMENTS) p ON t.PLACEMENT_NUM = p.PLACEMENT_NUM     LEFT JOIN VISTA_REPORTING.dbo.REUTERS_PRICE_BENCHMARK_TABLE pb on pb.MULTI_FUND_ID=T.MULTI_FUND_ID     LEFT JOIN (SELECT DISTINCT pm.ORD_NUM, TOUCH_COUNT, FACE FROM VISTA_REPORTING.dbo.TRD_ORDERS pm       inner join (SELECT DISTINCT ORD_NUM, MAX(TOUCH_COUNT) AS MAX_TOUCH FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) mt        on pm.ORD_NUM = mt.ORD_NUM and pm.TOUCH_COUNT = mt.MAX_TOUCH) pm ON t.ORD_NUM = pm.ORD_NUM     WHERE t.FinalFlag = 1 AND EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID) --AND oc.PM_ORD IS NOT NULL     GROUP BY       t.ORD_NUM,       --t.MULTI_FUND_ID,      pm.FACE,         t.TRD_ORIG_FACE,      pb.ACCUMULATED_VOLUME_UNSCALED             IF OBJECT_ID('tempdb..#average_daily_remain', 'U') IS NOT NULL DROP TABLE #average_daily_remain     SELECT       ORD_NUM,       --MULTI_FUND_ID,       --SUM(ABS(TRD_ORIG_FACE)) AS [Booked Amt],      FACE - SUM(ABS(TRD_ORIG_FACE)) AS [Remain Amt],      [ACCUMULATED_VOLUME_UNSCALED] AS [Average daily volume],      CONVERT(DECIMAL(10,2) , 100.0*(FACE - SUM(ABS(TRD_ORIG_FACE)))/NULLIF([ACCUMULATED_VOLUME_UNSCALED], 0)) AS [Remain Amt as percent of daily volume],      MIN(RELEASE_DATETIME) AS RELEASE_DATETIME     INTO #average_daily_remain     FROM #average_daily_temp     GROUP BY       ORD_NUM,       --MULTI_FUND_ID,       FACE,      [ACCUMULATED_VOLUME_UNSCALED]      --RELEASE_DATETIME             IF OBJECT_ID('tempdb..#max_touch', 'U') IS NOT NULL DROP TABLE #max_touch     SELECT DISTINCT      t1.ORD_NUM      --,t1.TRADER      --,t1.TRADER_FULL_NAME      ,t1.FACE     INTO #max_touch     FROM VISTA_REPORTING.dbo.TRD_ORDERS as t1     INNER JOIN (SELECT       t1.ORD_NUM       ,MAX(t1.TOUCH_COUNT) as MAX_TOUCH        FROM (SELECT DISTINCT ORD_NUM, TOUCH_COUNT FROM VISTA_REPORTING.dbo.TRD_ORDERS) as t1        GROUP BY t1.ORD_NUM)      as t2 on t1.ORD_NUM=t2.ORD_NUM and t1.TOUCH_COUNT=t2.MAX_TOUCH     WHERE EXISTS (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = t1.ORD_NUM)                                 IF OBJECT_ID('tempdb..#min_auth_face', 'U') IS NOT NULL DROP TABLE #min_auth_face     SELECT            --po.ORD_NUM,      oc.TRD_ORD,            --po.FACE,      --po.TRADER,      MIN(po.AUTH_TIME) AS AUTH_TIME,            MIN(po.ACTIVE_TIME) AS MIN_ACTIVE_TIME,            MAX(t.TRD_TRADE_DATE) AS MAX_TRD_DATE_AUTH,            MAX(t.TRD_AUTH_TIME) AS MAX_TRD_AUTH,            MAX(t.EXECUTION_TIME) AS MAX_EXEC_AUTH,      MIN(t.EXECUTION_TIME) AS MIN_EXEC_AUTH     INTO #min_auth_face     FROM VISTA_REPORTING.dbo.PM_ORDERS po     INNER JOIN (        SELECT          po3.ORD_NUM,          MIN(po3.TOUCH_COUNT) AS MIN_TOUCH          FROM VISTA_REPORTING.dbo.PM_ORDERS po3         WHERE AUTH_TIME IS NOT NULL            AND EXISTS (SELECT DISTINCT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = po3.ORD_NUM)         GROUP BY po3.ORD_NUM       ) po2 ON po2.ORD_NUM=po.ORD_NUM AND po2.MIN_TOUCH=po.TOUCH_COUNT     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD=po.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM=oc.TRD_ORD     WHERE EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)     GROUP BY       --po.ORD_NUM,       oc.TRD_ORD       --po.FACE       --po.TRADER       --po.AUTH_TIME     --HAVING po.AUTH_TIME=MIN(po.AUTH_TIME)          --IF OBJECT_ID('tempdb..#Min_Exec_Time', 'U') IS NOT NULL DROP TABLE #Min_Exec_Time     --   SELECT     -- pm.ORD_NUM,     -- MIN(AUTH_TIME) AS MIN_AUTH_TIME,     -- MIN(t.EXECUTION_TIME) AS MIN_EXEC_TIME,     -- MAX(t.EXECUTION_TIME) AS MAX_EXEC_TIME     --   INTO #Min_Exec_Time     --   FROM (SELECT DISTINCT ORD_NUM, AUTH_TIME, TOUCH_COUNT FROM VISTA_REPORTING.dbo.PM_ORDERS) pm     --   LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON oc.PM_ORD=pm.ORD_NUM     --   INNER JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME FROM VISTA_REPORTING.dbo.TRADES     --     WHERE MULTI_FUND_ID IN (SELECT MULTI_FUND_ID FROM #temp_amend_MFID)) t ON oc.TRD_ORD=t.ORD_NUM     --   GROUP BY pm.ORD_NUM             IF OBJECT_ID('tempdb..#temp_amend_table', 'U') IS NOT NULL DROP TABLE #temp_amend_table     SELECT vg.MULTI_FUND_ID, vg.TOUCH_COUNT, vg.DEALING_DESK, vg.AMENDMENT_FLAG, vg.AMENDMENT_FLAG_CREATETIME      INTO #temp_amend_table     FROM VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_EQ_TABLE vg     WHERE EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = vg.MULTI_FUND_ID) --Need the EQ table     UNION     SELECT vg2.MULTI_FUND_ID, vg2.TOUCH_COUNT, vg2.DEALING_DESK, vg2.AMENDMENT_FLAG, vg2.AMENDMENT_FLAG_CREATETIME      FROM VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_FI_TABLE vg2     WHERE EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = vg2.MULTI_FUND_ID)--Need the FI table     UNION     SELECT vg3.MULTI_FUND_ID, vg3.TOUCH_COUNT, vg3.DEALING_DESK, vg3.AMENDMENT_FLAG, vg3.AMENDMENT_FLAG_CREATETIME      FROM VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_LL_TABLE vg3     WHERE EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = vg3.MULTI_FUND_ID)             IF OBJECT_ID('tempdb..#temp_pr_table', 'U') IS NOT NULL DROP TABLE #temp_pr_table     SELECT DISTINCT       pr.MULTI_FUND_ID,       pr.DEALING_DESK,       pr.SM_SEC_GROUP,       pr.SM_SEC_TYPE,       pr.INST_TYPE,       pr.PRIMARY_MARKET,       pr.Parent_trade_ID,       pr.DEBT_DERIV,        pr.DESC_INSTMT,      pr.TWEB_CLOSE_DEALING,      pr.[1615_DEALING]     INTO #temp_pr_table     FROM Vista_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr     INNER JOIN #temp_amend_MFID tam ON tam.MULTI_FUND_ID = pr.MULTI_FUND_ID              IF OBJECT_ID('tempdb..#temp_trd_table', 'U') IS NOT NULL DROP TABLE #temp_trd_table     SELECT DISTINCT       tr.ORD_NUM,      tr.TRADER_FULL_NAME,      tr.SEC_DESC1,      tr.CUSIP,      tr.AUTH_TIME,      tr.ACTIVE_TIME,      tr.DEALING_DESK,      tr.TOUCH_COUNT,      tr2.COMMENTS_VALUE     INTO #temp_trd_table     FROM Vista_REPORTING.dbo.TRD_ORDERS tr     LEFT JOIN (SELECT DISTINCT ORD_NUM, COMMENTS_VALUE FROM Vista_REPORTING.dbo.TRD_ORDERS WHERE COMMENTS_VALUE IS NOT NULL) tr2 ON tr2.ORD_NUM = tr.ORD_NUM     WHERE EXISTS (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = tr.ORD_NUM)                  IF OBJECT_ID('tempdb..#temp_trades_table', 'U') IS NOT NULL DROP TABLE #temp_trades_table     SELECT DISTINCT      t.TRD_COUNTERPARTY,      t.COMMENTS,      t.INDICATIVE_COMMENTS,      t.ORD_NUM,      t.PLACEMENT_NUM,      t.MULTI_FUND_ID,      t.EXECUTION_TIME,      t.TRD_AUTH_TIME,      pr2.SM_SEC_GROUP,      pr2.SM_SEC_TYPE,      MIN(pl.ROUTE_DATETIME) AS ROUTE_DATETIME,      pl.VENUE,      pl.RELEASE_DATETIME,      t.TRD_ENTRY_TIME,      pr2.INST_TYPE,      pr2.PRIMARY_MARKET,      pr2.[Parent_trade_ID],      t.EXECUTION_TYPE_DECODE,      t.TRD_PURPOSE,      t.TRD_AMEND_TYPE,      t2.[Amendment_Cancellation],      t.TRAN_TYPE,      t.TRD_CURRENCY,      t.TRD_MODIFIED_BY,      t.TRD_COUPON,      t.TRDCOMM_COMMENTS,      t.TRD_PRICE,      t.ISIN,      coaLesce(t.ACTIVITY_TYPE_DECODE, t.activity_type) as [Activity],      pr2.DEALING_DESK,      pr2.DEBT_DERIV,      pr2.DESC_INSTMT,      pr2.TWEB_CLOSE_DEALING,      pr2.[1615_DEALING],      tr2.TRADER_FULL_NAME,      tr.SEC_DESC1,      COALESCE(t.CUSIP, tr.CUSIP) AS CUSIP,      MIN(tr.AUTH_TIME) AS AUTH_TIME,      tr2.ACTIVE_TIME,       tr.DEALING_DESK AS DEALING_DESK_tr,      tr2.COMMENTS_VALUE,      t.TOUCH_COUNT     INTO #temp_trades_table     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, Amendment_Cancellation, TOUCH_COUNT           FROM VISTA_REPORTING.dbo.TRADES           WHERE Amendment_Cancellation IS NOT NULL) t2 ON t2.MULTI_FUND_ID = t.MULTI_FUND_ID AND t2.TOUCH_COUNT = t.TOUCH_COUNT     INNER JOIN #temp_amend_MFID tam ON tam.MULTI_FUND_ID = t.MULTI_FUND_ID and tam.TOUCH_COUNT = t.TOUCH_COUNT     LEFT JOIN Vista_REPORTING.dbo.PLACEMENTS pl ON pl.PLACEMENT_NUM = t.PLACEMENT_NUM     LEFT JOIN #temp_pr_table pr2 ON pr2.MULTI_FUND_ID = t.MULTI_FUND_ID     LEFT JOIN #temp_trd_table tr ON tr.ORD_NUM = t.ORD_NUM -- AND tam.TOUCH_COUNT = tr.TOUCH_COUNT     LEFT JOIN (SELECT DISTINCT         trd.ORD_NUM,         trd.COMMENTS_VALUE,         trd.TRADER_FULL_NAME,         ACTIVE_TIME        FROM #temp_trd_table trd        INNER JOIN (SELECT             ORD_NUM,             MAX(TOUCH_COUNT) AS MAX_TOUCH            FROM #temp_trd_table           GROUP BY ORD_NUM) trd2 ON trd2.ORD_NUM = trd.ORD_NUM AND trd2.MAX_TOUCH=trd.TOUCH_COUNT) tr2 ON tr2.ORD_NUM=tr.ORD_NUM      WHERE EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)     GROUP BY      t.TRD_COUNTERPARTY,      t.COMMENTS,      t.INDICATIVE_COMMENTS,      t.ORD_NUM,      t.PLACEMENT_NUM,      t.MULTI_FUND_ID,      t.EXECUTION_TIME,      t.TRD_AUTH_TIME,      pr2.SM_SEC_GROUP,      pr2.SM_SEC_TYPE,      pl.VENUE,      pl.RELEASE_DATETIME,      t.TRD_ENTRY_TIME,      pr2.INST_TYPE,      pr2.PRIMARY_MARKET,      pr2.[Parent_trade_ID],      t.EXECUTION_TYPE_DECODE,      t.TRD_PURPOSE,      t.TRD_AMEND_TYPE,      t2.[Amendment_Cancellation],      t.TRAN_TYPE,      t.TRD_CURRENCY,      t.TRD_MODIFIED_BY,      t.TRD_COUPON,      t.TRDCOMM_COMMENTS,      t.TRD_PRICE,      t.ISIN,      coaLesce(t.ACTIVITY_TYPE_DECODE, t.activity_type),      pr2.DEALING_DESK,      pr2.DEBT_DERIV,      pr2.DESC_INSTMT,      pr2.TWEB_CLOSE_DEALING,      pr2.[1615_DEALING],      tr.SEC_DESC1,      COALESCE(t.CUSIP, tr.CUSIP),      tr.DEALING_DESK,      tr2.COMMENTS_VALUE,      tr2.TRADER_FULL_NAME,      tr2.ACTIVE_TIME,      t.TOUCH_COUNT              IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     SELECT DISTINCT      --t.CLIENT_EXECUTION_NUM,      a.TOUCH_COUNT,      ttt.TRD_MODIFIED_BY,      LTRIM(RTRIM(COALESCE(dd.INITIALS,ttt.TRD_MODIFIED_BY))) AS [Amending_Dealer],      ltrd.TRD_MODIFY_TIME,      ttt.TRD_COUNTERPARTY,      ttt.COMMENTS,      ttt.INDICATIVE_COMMENTS,      ttt.ORD_NUM,      ttt.PLACEMENT_NUM,      ttt.MULTI_FUND_ID,      ttt.EXECUTION_TIME,      ttt.TRD_AUTH_TIME,      ttt.TRADER_FULL_NAME,      ttt.SEC_DESC1,      ttt.CUSIP,      ttt.AUTH_TIME,      ttt.ACTIVE_TIME,      ttt.DEALING_DESK_tr AS DEALING_DESK,      md.TRD_TRADER AS TRADER,      ttt.SM_SEC_GROUP,      ttt.SM_SEC_TYPE,      ttt.ROUTE_DATETIME AS RELEASE_DATETIME,      ttt.TRD_ENTRY_TIME,      ttt.INST_TYPE,      ttt.PRIMARY_MARKET,      ttt.[Parent_trade_ID],      ttt.EXECUTION_TYPE_DECODE,      ttt.TRD_PURPOSE,      ttt.TRD_AMEND_TYPE,      ttt.[Amendment_Cancellation],      CONVERT(DECIMAL(15,2),ltrd.TRD_ORIG_FACE) AS TRD_ORIG_FACE,      fund_conc.Funds_concat as [Fund],      --t.FUND,      ttt.TRAN_TYPE,      ttt.TRD_CURRENCY,      case when ttt.dealing_desk = 'Leveraged Finance'       then convert(varchar,convert(decimal(18,4),ttt.TRD_PRICE))       else convert(varchar,convert(decimal(18,2),ttt.TRD_PRICE)) end as TRD_PRICE,      ttt.VENUE as [Platform],      CASE       WHEN ttt.DEALING_DESK='Fixed Income'        THEN        CASE         WHEN ttt.DEBT_DERIV = 'DEBT'          THEN          CASE           WHEN ttt.TRD_COUPON IS NOT NULL AND i2.TICKER IS NOT NULL AND i2.MATURITY IS NOT NULL            THEN CONCAT(ISNULL(i2.TICKER,''),' ', CAST(ISNULL(ttt.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))           ELSE  CONCAT(ISNULL(ttt.SEC_DESC1,''),' ', CAST(ISNULL(ttt.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))          END          ELSE ttt.DESC_INSTMT        END       WHEN ttt.DEALING_DESK='Equity'       THEN ttt.SEC_DESC1       WHEN ttt.DEALING_DESK='Leveraged Finance'       THEN ttt.DESC_INSTMT      END AS [Description],       ttt.TRDCOMM_COMMENTS as [Dealer comment],      ttt.COMMENTS_VALUE as [General Comment],      CASE        WHEN [Amendment_Cancellation] = 'Cancellation'         THEN  'Cancellation - NA'        ELSE         CASE          WHEN LEFT(REVERSE(chng.Change_Record),2) = ' ,'           THEN  LEFT(chng.Change_Record,LEN(chng.Change_Record) - 1)         ELSE chng.Change_Record        END      END as [Change Record],      null as [Num Parent Trades],      CONVERT(DECIMAL(21,2),ltrd.TRD_ORIG_FACE) as [Booked Amt],      ltrd.TRD_SETTLE_DATE AS [Settlement Date],      ttt.ISIN as [ISIN],      CASE       WHEN ttt.DEALING_DESK = 'Fixed Income'       THEN         CASE         WHEN ttt.TWEB_CLOSE_DEALING = 1 THEN 'TWEB Close'         WHEN ttt.[1615_DEALING] = 1 THEN '1615 Dealing'         WHEN ltrd.ACTIVITY_TYPE = 'MG.FI 1. Proces' THEN 'VPT'        END       WHEN ttt.DEALING_DESK='Equity'       THEN NULL       WHEN ttt.DEALING_DESK='Leveraged Finance'       THEN NULL      END AS [Method],      ttt.TRD_ENTRY_TIME AS [Entry Date],      ttt.Activity,      null as [Primary],      CONCAT(YEAR(ttt.AUTH_TIME),'-',left(datename(m,ttt.AUTH_TIME),3)) AS MONTH_YEAR,      concat(ttt.SM_SEC_GROUP,'/',ttt.SM_SEC_TYPE) as [Asset_Type/Subtype],      a.AMENDMENT_FLAG_CREATETIME AS AMENDMENT_FLAG_CREATETIME,      BROKER_QUOTES,      pmc.PM_INST_concat AS INSTRUCTION,      pm.PM_concat as [FM],      lst_trd.SM_CURRENCY as [Ccy],      lst_trd.TRD_CURRENCY as [Sett Ccy],      i2.SEDOL as [SEDOL],      t5.FACE AS [Ord Amt],      avg_d.[Remain Amt],      po2.[MIN_ACTIVE_TIME] AS [Active Date],      ttt.[RELEASE_DATETIME] as [Send Date],      lst_trd.TRD_TRADE_DATE AS [Trade Date],      --me.MIN_EXEC_TIME AS [First Execution],      po2.MIN_EXEC_AUTH AS [First Execution],      DATEDIFF(MINUTE, po2.AUTH_TIME, po2.MIN_EXEC_AUTH) as [First Execution Timespan],      avg_d.[Average daily volume],      avg_d.[Remain Amt as percent of daily volume],      ttt.TRDCOMM_COMMENTS as [Internal Comment]     INTO #temp_final_master_table     FROM #temp_amend_table a     LEFT JOIN #temp_trades_table ttt ON ttt.MULTI_FUND_ID = a.MULTI_FUND_ID and ttt.TOUCH_COUNT = a.TOUCH_COUNT     --LEFT JOIN (SELECT * FROM VISTA_REPORTING.dbo.TRADES     --     WHERE MULTI_FUND_ID IN (SELECT MULTI_FUND_ID FROM #temp_amend_MFID)) t ON a.MULTI_FUND_ID = t.MULTI_FUND_ID AND a.TOUCH_COUNT = t.TOUCH_COUNT     --LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS tr ON tr.ORD_NUM=t.ORD_NUM     ----LEFT JOIN VISTA_REPORTING.dbo.INSTRUMENTS i ON i.CUSIP=tr.CUSIP     --LEFT JOIN VISTA_REPORTING.dbo.PLACEMENTS pl ON pl.PLACEMENT_NUM=t.PLACEMENT_NUM     ----LEFT JOIN VISTA_REPORTING.dbo.DEALER_AND_DESK dd ON dd.INITIALS=tr.TRADER     --LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p ON p.MULTI_FUND_ID = t.MULTI_FUND_ID     --LEFT JOIN VISTA_REPORTING.DBO.DEALER_AND_DESK d ON d.FULL_NAME = t.     LEFT JOIN #min_Dealer md ON ttt.MULTI_FUND_ID = md.MULTI_FUND_ID     LEFT JOIN #changes2 chng ON a.MULTI_FUND_ID = chng.MULTI_FUND_ID AND a.TOUCH_COUNT = chng.TOUCH_COUNT     OUTER APPLY (SELECT TOP 1 i.TICKER, i.MATURITY, i.SEDOL FROM VISTA_REPORTING.dbo.INSTRUMENTS i                    WHERE (i.CUSIP=ttt.CUSIP AND i.DATE<=CONVERT(DATE, coalesce(ttt.EXECUTION_TIME, ttt.AUTH_TIME)))                    ORDER BY i.DATE DESC) as i2     LEFT JOIN #Funds_concat fund_conc ON fund_conc.MULTI_FUND_ID=ttt.MULTI_FUND_ID     LEFT JOIN #Latest_trd ltrd ON ltrd.MULTI_FUND_ID=ttt.MULTI_FUND_ID AND ltrd.TOUCH_COUNT = a.TOUCH_COUNT     LEFT JOIN VISTA_REPORTING.dbo.DEALER_AND_DESK dd ON ttt.TRD_MODIFIED_BY = dd.ALADDIN_USER_ID     LEFT JOIN (SELECT mfe.MULTI_FUND_ID, mfe.BROKER_QUOTES FROM VISTA_REPORTING.dbo.MULTI_FUND_EXCEPTION_TABLE mfe          INNER JOIN #temp_amend_MFID tam ON tam.MULTI_FUND_ID=mfe.MULTI_FUND_ID) E ON E.MULTI_FUND_ID=ttt.MULTI_FUND_ID     LEFT JOIN #PM_INST_concat pmc ON pmc.MULTI_FUND_ID = a.MULTI_FUND_ID     LEFT JOIN #TRO_PM_concat pm ON ttt.ORD_NUM = pm.TRD_ORD     LEFT JOIN #Latest_TRD_TRADE_DATE lst_trd ON ttt.MULTI_FUND_ID = lst_trd.MULTI_FUND_ID     LEFT JOIN #average_daily_remain avg_d on ttt.ORD_NUM = avg_d.ORD_NUM     LEFT JOIN #max_touch as t5 on t5.ORD_NUM = ttt.ORD_NUM     LEFT JOIN #min_auth_face po2 ON po2.TRD_ORD=ttt.ORD_NUM     --LEFT JOIN #Min_Exec_Time me ON po2.ORD_NUM=me.ORD_NUM      --WHERE  t.PORTFOLIOS_PORTFOLIO_NAME in ('DRC_VANG', 'DRC_EPIS', 'DRC_ECIF', 'DRC_AOFB', 'DRC_TRCI', 'DRC_ELF')             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE', 'U') IS NOT NULL     DELETE FROM VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE     WHERE MULTI_FUND_ID IN (SELECT DISTINCT MULTI_FUND_ID FROM #distinct_ids)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE     SELECT *     FROM #temp_final_master_table         ELSE         SELECT *     INTO VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE     FROM #temp_final_master_table             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'maf_idx1')           DROP INDEX maf_idx1      ON VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE          CREATE NONCLUSTERED INDEX maf_idx1     ON VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE      (TRD_MODIFY_TIME, ORD_NUM, PLACEMENT_NUM, MULTI_FUND_ID, Parent_Trade_ID, TOUCH_COUNT)         IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'maf_idx2')           DROP INDEX maf_idx2      ON VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE          CREATE NONCLUSTERED INDEX maf_idx2     ON VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE      (Dealing_Desk)         IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'maf_idx3')           DROP INDEX maf_idx3      ON VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE          CREATE NONCLUSTERED INDEX maf_idx3     ON VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE          (EXECUTION_TIME)     IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'maf_idx4')           DROP INDEX maf_idx4      ON VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE          CREATE NONCLUSTERED INDEX maf_idx4     ON VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE      (AMENDMENT_FLAG_CREATETIME)             IF OBJECT_ID('tempdb..#Latest_trd', 'U') IS NOT NULL DROP TABLE #Latest_trd     IF OBJECT_ID('tempdb..#Funds_concat', 'U') IS NOT NULL DROP TABLE #Funds_concat     IF OBJECT_ID('tempdb..#min_Dealer', 'U') IS NOT NULL DROP TABLE #min_Dealer     IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades     IF OBJECT_ID('tempdb..#changes1', 'U') IS NOT NULL DROP TABLE #changes1     IF OBJECT_ID('tempdb..#changes2', 'U') IS NOT NULL DROP TABLE #changes2     IF OBJECT_ID('tempdb..#PM_INST_concat', 'U') IS NOT NULL DROP TABLE #PM_INST_concat     IF OBJECT_ID('tempdb..#average_daily_remain', 'U') IS NOT NULL DROP TABLE #average_daily_remain     IF OBJECT_ID('tempdb..#max_touch', 'U') IS NOT NULL DROP TABLE #max_touch     IF OBJECT_ID('tempdb..#min_auth_face', 'U') IS NOT NULL DROP TABLE #min_auth_face     IF OBJECT_ID('tempdb..#Min_Exec_Time', 'U') IS NOT NULL DROP TABLE #Min_Exec_Time         IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_AMENDMENT_FLAG_TABLE', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(     'MASTER_AMENDMENT_FLAG_TABLE', --TABLE_NAME     @START_TIME, --START_TIME     GETDATE(), --END_TIME     DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS     CAST(GETDATE() as date)) --COMPLETION_DATE                     END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_CLIENT_EXECUTION_TABLE  CreateDate: 2025-06-26 17:48:06.530  ModifyDate: 2025-06-26 17:48:06.530  --- DEFINITION START ---  -- =============================================    -- Author:  <Henderson, William>    -- Create date: <2018-02-21>    -- Description:     -- < Build a master table at the client execution level with all    --   information required for the front end >    -- =============================================        -- ***************VERSION CONTROL***************    -- 2018-03-21 - WH: Removed reference to BUY_SELL_FLAG - used TRAN_TYPE instead    -- 2019-03-26 ER : ADDED IN NULLIF TO CONVERT(DECIMAL(21,2),(t.TRD_ORIG_FACE/nullif(od.ORD_DETAIL_FACE,0) * 100)) AS [%_Allocated], AS THIS CAUSED A FAIL IN TEST/PROD    -- 2019-06-06 MN : Added  WHERE pm.DEALING_DESK <> 'DMG' at the end to fix frontend issues    -- 2019-07-19 DDC: Filters added to ensure only FI, EQ and LL data is pulled through    -- 2020-01-15 MN : Made added in the #max_face table to more accurately replicate the staging tables in how the calculations are done        -------------------------New Commment Style------------------------------------------------------    --2021-08-13, Matej Miter created for Jira:    --T-0-17285 - Fixed typo within #temp_pgc and #pre_client_fund_nav tables in order to retrive correct client funds for specific base funds        --2022-03-01; Matej Miter created for Jira:    --SURVG-556 - Enhancement Phase - Fromating Proposed Quantity to include comma delimiters        --2022-03-01; Matej Miter created for Jira:    --SURVG-556 - Enhancement Phase - Adding Threshold and Exceptions Fields into master table    --    -- *********************************************                CREATE PROCEDURE [dbo].[MASTER_CLIENT_EXECUTION_TABLE]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;     --DECLARE @DATE_FILTER AS DATE --Declare date filter to only select data from current pull date     --SET @DATE_FILTER = CONVERT(DATE, GETDATE())             DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()             IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids     SELECT DISTINCT       t.ORD_NUM as TRD_ORD,      oc.PM_ORD AS ORD_NUM,      t.MULTI_FUND_ID     INTO #distinct_ids     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = t.ORD_NUM     WHERE EXISTS (SELECT tr.ORD_NUM FROM Vista_REPORTING.dbo.TRD_ORDERS tr WHERE tr.ORD_NUM = t.ORD_NUM AND tr.DEALING_DESK in ('Fixed Income', 'Leveraged Finance'))             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE', 'U') IS NOT NULL     DELETE FROM #distinct_ids where NOT EXISTS (SELECT DISTINCT od.MULTI_FUND_ID                   FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                   WHERE od.MULTI_FUND_ID = #distinct_ids.MULTI_FUND_ID)             IF OBJECT_ID('tempdb..#max_touch_orders', 'U') IS NOT NULL DROP TABLE #max_touch_orders     -- This table shows us the touch count we should take order detail info for.     select      o.ORD_NUM      ,MAX(o.TOUCH_COUNT) as MAX_TOUCH     into #max_touch_orders     from VISTA_REPORTING.dbo.PM_ORDERS o     --WHERE DEALING_DESK in ('Fixed Income', 'Equity', 'Leveraged Finance')     WHERE EXISTS (SELECT DISTINCT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = o.ORD_NUM)     group by ORD_NUM         UNION          select      o.ORD_NUM      ,MAX(o.TOUCH_COUNT) as MAX_TOUCH     from VISTA_REPORTING.dbo.TRD_ORDERS o     --WHERE DEALING_DESK in ('Fixed Income', 'Equity', 'Leveraged Finance')     WHERE EXISTS (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = o.ORD_NUM)     group by ORD_NUM             IF OBJECT_ID('tempdb..#temp_ot_flip_vg_table', 'U') IS NOT NULL DROP TABLE #temp_ot_flip_vg_table     SELECT DISTINCT       vg.ORDER_INFLATION_EXCEPTION AS EXCEPTION,      vg.OI_CREATETIME AS CREATETIME,      vg.ORD_NUM,      vg.CLIENT_EXECUTION_NUM,      vg.DEALING_DESK,      'VG_08' AS EXCEPTION_TYPE      INTO #temp_ot_flip_vg_table     FROM VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_FI_TABLE vg     WHERE EXISTS (SELECT DISTINCT t.CLIENT_EXECUTION_NUM          FROM #distinct_ids di          INNER JOIN Vista_Reporting.dbo.TRADES t ON t.MULTI_FUND_ID = di.MULTI_FUND_ID          WHERE t.CLIENT_EXECUTION_NUM = vg.CLIENT_EXECUTION_NUM)     UNION ALL         SELECT DISTINCT       vg2.ORDER_INFLATION_EXCEPTION,      vg2.OI_CREATETIME,      vg2.ORD_NUM,      vg2.CLIENT_EXECUTION_NUM,      vg2.DEALING_DESK,      'VG_08'     FROM VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_LL_TABLE vg2     WHERE EXISTS (SELECT DISTINCT t.CLIENT_EXECUTION_NUM          FROM #distinct_ids di          INNER JOIN Vista_Reporting.dbo.TRADES t ON t.MULTI_FUND_ID = di.MULTI_FUND_ID          WHERE t.CLIENT_EXECUTION_NUM = vg2.CLIENT_EXECUTION_NUM)     UNION ALL         SELECT DISTINCT       vg3.NEW_ORDER_FLIPPING_EXCEPTION,      vg3.NEW_ORDER_FLIPPING_EXCEPTION_CREATETIME,      NULL,      vg3.CLIENT_EXECUTION_NUM,      vg3.DEALING_DESK,      'VG_06'     FROM VISTA_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_FI_TABLE vg3     WHERE EXISTS (SELECT DISTINCT t.CLIENT_EXECUTION_NUM          FROM #distinct_ids di          INNER JOIN Vista_Reporting.dbo.TRADES t ON t.MULTI_FUND_ID = di.MULTI_FUND_ID          WHERE t.CLIENT_EXECUTION_NUM = vg3.CLIENT_EXECUTION_NUM)      UNION ALL      SELECT DISTINCT       vg4.NEW_ORDER_FLIPPING_EXCEPTION,      vg4.NEW_ORDER_FLIPPING_EXCEPTION_CREATETIME,      NULL,      vg4.CLIENT_EXECUTION_NUM,      vg4.DEALING_DESK,      'VG_06'     FROM VISTA_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_LL_TABLE vg4     WHERE EXISTS (SELECT DISTINCT t.CLIENT_EXECUTION_NUM          FROM #distinct_ids di          INNER JOIN Vista_Reporting.dbo.TRADES t ON t.MULTI_FUND_ID = di.MULTI_FUND_ID          WHERE t.CLIENT_EXECUTION_NUM = vg4.CLIENT_EXECUTION_NUM)           --SURVG-556     IF OBJECT_ID('tempdb..#temp_ot_flip_vg_table_final', 'U') IS NOT NULL DROP TABLE #temp_ot_flip_vg_table_final     SELECT DISTINCT       vg.*,      ref.PERCENTAGE_THRESHOLD     INTO #temp_ot_flip_vg_table_final     from #temp_ot_flip_vg_table vg     Inner join Vista_Reporting.dbo.TRADES trd on trd.CLIENT_EXECUTION_NUM = vg.CLIENT_EXECUTION_NUM     INNER JOIN VISTA_REPORTING.dbo.TRD_ORDERS t on t.ORD_NUM = trd.ORD_NUM     left JOIN VISTA_STAGING.dbo.REF_FI_LL_ORDER_INFLATION_THRESHOLD ref ON ref.[FUND CODE] = trd.PORTFOLIOS_PORTFOLIO_NAME      AND t.AUTH_TIME BETWEEN ref.DATE_FROM AND ref.DATE_TO     --End of SURVG-556              IF OBJECT_ID('tempdb..#temp_fx_rates', 'U') IS NOT NULL DROP TABLE #temp_fx_rates     SELECT DISTINCT      fx.MARKDATE,      fx.CURRENCY,      fx.GBP_INDEX_RATE,      fx.INDEX_RATE,      fx.INDEX_NAME     INTO #temp_fx_rates     FROM VISTA_REPORTING.dbo.FX_RATES fx     WHERE EXISTS (SELECT t.SM_CURRENCY FROM Vista_Reporting.dbo.TRADES t          INNER JOIN #distinct_ids di ON di.MULTI_FUND_ID = t.MULTI_FUND_ID          WHERE t.SM_CURRENCY = fx.CURRENCY)             IF OBJECT_ID('tempdb..#temp_fx_trades', 'U') IS NOT NULL DROP TABLE #temp_fx_trades     SELECT DISTINCT       t.CLIENT_EXECUTION_NUM,      t.TRD_CURRENCY,      t.SM_CURRENCY,      t.EXECUTION_TIME      INTO #temp_fx_trades     FROM Vista_Reporting.dbo.TRADES t     INNER JOIN #distinct_ids di ON di.MULTI_FUND_ID = t.MULTI_FUND_ID              IF OBJECT_ID('tempdb..#temp_trd_fx_rates', 'U') IS NOT NULL DROP TABLE #temp_trd_fx_rates     SELECT DISTINCT      tof.ORD_NUM,      t.TRD_CURRENCY,      t.SM_CURRENCY,      t.EXECUTION_TIME,      e.GBP_INDEX_RATE,      e.INDEX_RATE     INTO #temp_trd_fx_rates     FROM #temp_ot_flip_vg_table tof     LEFT JOIN #temp_fx_trades t ON t.CLIENT_EXECUTION_NUM = tof.CLIENT_EXECUTION_NUM     OUTER APPLY (SELECT TOP 1 e.GBP_INDEX_RATE, e.INDEX_RATE, e.INDEX_NAME FROM #temp_fx_rates e          WHERE e.CURRENCY = t.SM_CURRENCY and CONVERT(date, e.MARKDATE) <= CONVERT(date, t.EXECUTION_TIME)         ORDER BY e.MARKDATE DESC) e             IF OBJECT_ID('tempdb..#temp_ord_detail', 'U') IS NOT NULL DROP TABLE #temp_ord_detail     SELECT DISTINCT       od.ORD_NUM,      od.ORD_DETAIL_FUND,      od.ORD_DETAIL_FACE      INTO #temp_ord_detail     FROM Vista_Staging.dbo.ORDERS_DETAIL od     INNER JOIN #max_touch_orders mto ON mto.ORD_NUM = od.ORD_NUM             IF OBJECT_ID('tempdb..#max_face', 'U') IS NOT NULL DROP TABLE #max_face     SELECT DISTINCT      od.ORD_NUM      ,od.ORD_DETAIL_FUND      ,MAX(od.ORD_DETAIL_FACE) AS MAX_FACE      ,CASE       WHEN ccy.CURRENCY IS NULL AND t.TRD_CURRENCY != t.SM_CURRENCY THEN MAX(od.ORD_DETAIL_FACE)/t.GBP_INDEX_RATE       WHEN ccy.CURRENCY IS NOT NULL AND t.TRD_CURRENCY != t.SM_CURRENCY THEN MAX(od.ORD_DETAIL_FACE)/t.INDEX_RATE       ELSE MAX(od.ORD_DETAIL_FACE)      END AS MAX_FACE_PRINCIP      ,t.ORD_NUM AS TRD_ORD     INTO #max_face     FROM #temp_ord_detail od      --LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD = od.ORD_NUM     --LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM = di.TRD_ORD     LEFT JOIN #temp_trd_fx_rates t ON t.ORD_NUM = od.ORD_NUM     LEFT JOIN VISTA_STAGING.dbo.REF_FI_OI_EMCCY_TO_USD ccy ON ccy.CURRENCY = t.SM_CURRENCY AND t.EXECUTION_TIME BETWEEN ccy.DATE_FROM AND ccy.DATE_TO      --OUTER APPLY (SELECT TOP 1 e.GBP_INDEX_RATE, e.INDEX_RATE, e.INDEX_NAME FROM VISTA_REPORTING.dbo.FX_RATES e      --    WHERE e.CURRENCY = t.SM_CURRENCY and CONVERT(date, e.MARKDATE) <= CONVERT(date, t.EXECUTION_TIME)     --    ORDER BY e.MARKDATE DESC) e     --WHERE EXISTS (SELECT DISTINCT mt.ORD_NUM FROM #max_touch_orders mt WHERE mt.ORD_NUM = od.ORD_NUM)        --AND EXISTS (SELECT tr.ORD_NUM FROM Vista_REPORTING.dbo.TRD_ORDERS tr WHERE tr.DEALING_DESK != 'Fixed Income' AND tr.ORD_NUM = oc.TRD_ORD)     GROUP BY od.ORD_NUM, od.ORD_DETAIL_FUND, t.ORD_NUM, t.SM_CURRENCY, t.TRD_CURRENCY, t.GBP_INDEX_RATE, t.INDEX_RATE, ccy.CURRENCY             --UNION         --SELECT DISTINCT     -- od.ORD_NUM     -- ,od.ORD_DETAIL_FUND     -- ,CASE     --  WHEN ccy.CURRENCY IS NULL AND t.TRD_CURRENCY != t.SM_CURRENCY THEN MAX(od.ORD_DETAIL_FACE)/e.GBP_INDEX_RATE     --  WHEN ccy.CURRENCY IS NOT NULL AND t.TRD_CURRENCY != t.SM_CURRENCY THEN MAX(od.ORD_DETAIL_FACE)/e.INDEX_RATE     --  ELSE MAX(od.ORD_DETAIL_FACE)     -- END AS MAX_FACE     -- ,oc.TRD_ORD     --FROM VISTA_STAGING.dbo.ORDERS_DETAIL od     --LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD = od.ORD_NUM     --LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM = oc.TRD_ORD     --LEFT JOIN VISTA_STAGING.dbo.REF_FI_OI_EMCCY_TO_USD ccy ON ccy.CURRENCY = t.SM_CURRENCY AND t.EXECUTION_TIME BETWEEN ccy.DATE_FROM AND ccy.DATE_TO      --OUTER APPLY (SELECT TOP 1 e.GBP_INDEX_RATE, e.INDEX_RATE, e.INDEX_NAME FROM VISTA_REPORTING.dbo.FX_RATES e      --    WHERE e.CURRENCY = t.SM_CURRENCY and CONVERT(date, e.MARKDATE) <= CONVERT(date, t.EXECUTION_TIME)     --    ORDER BY e.MARKDATE DESC) e      --WHERE EXISTS (SELECT tr.ORD_NUM FROM Vista_REPORTING.dbo.TRD_ORDERS tr WHERE tr.DEALING_DESK = 'Fixed Income' AND tr.ORD_NUM = t.ORD_NUM)     --GROUP BY od.ORD_NUM, od.ORD_DETAIL_FUND, oc.TRD_ORD, t.SM_CURRENCY, t.TRD_CURRENCY, e.GBP_INDEX_RATE, e.INDEX_RATE, ccy.CURRENCY             IF OBJECT_ID('tempdb..#latest_orders_detail', 'U') IS NOT NULL DROP TABLE #latest_orders_detail     select       od.ORD_NUM,      od.ORD_DETAIL_FUND     into #latest_orders_detail     from VISTA_STAGING.dbo.ORDERS_DETAIL od     WHERE EXISTS (SELECT DISTINCT mt.ORD_NUM FROM #max_touch_orders mt WHERE mt.ORD_NUM = od.ORD_NUM)             IF OBJECT_ID('tempdb..#temp_portgolio_groups', 'U') IS NOT NULL DROP TABLE #temp_portgolio_groups     SELECT DISTINCT      pg.*,      CASE        WHEN pg2.descendant IS NOT NULL THEN 1       ELSE 0      END AS MG_RET_FI_FLAG     INTO #temp_portgolio_groups     FROM VISTA_STAGING.dbo.PORTFOLIO_GROUP_CLOSURE_TABLE pg     LEFT JOIN (SELECT DISTINCT descendant FROM Vista_STAGING.dbo.PORTFOLIO_GROUP_CLOSURE_TABLE where ancestor = 'MG_RET_FI') pg2 ON pg2.descendant = pg.descendant                --1. Get Investment desks associated with all funds on a trade     IF OBJECT_ID('tempdb..#ClEx_inv_Desk', 'U') IS NOT NULL DROP TABLE #ClEx_inv_Desk     SELECT DISTINCT       t.CLIENT_EXECUTION_NUM,       p.ancestor      INTO #ClEx_inv_Desk     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN #temp_portgolio_groups p ON t.PORTFOLIOS_PORTFOLIO_NAME = p.descendant     --LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID = t.MULTI_FUND_ID     WHERE p.ancestor IN ('MG_ATCRED', 'MG_RET_FI', 'MG_INSTI', 'MG_INTER', 'MG_RESTCT', 'MG_IN_CAP',            'MG_LEVFIN', 'MG_MIB', 'MG_REDEBT', 'MG_US_FI') -- This is the list of investment desks provided in the business requirements documents        --AND pr.DEALING_DESK in ('Fixed Income', 'Equity', 'Leveraged Finance')        AND EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)        AND t.EXECUTION_TIME < '01-01-2021'         UNION         SELECT DISTINCT       t.CLIENT_EXECUTION_NUM,       p.ancestor      FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN #temp_portgolio_groups p ON t.PORTFOLIOS_PORTFOLIO_NAME = p.descendant     --LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID = t.MULTI_FUND_ID     WHERE p.ancestor IN ('MG_ATCRED', 'MGEU_ACRED', 'MG_RET_FI', 'MG_INSTI', 'MGEU_INSTI',           'MG_INTER', 'MG_RESTCT', 'MG_IN_CAP', 'MG_LEVFIN', 'MG_MIB', 'MG_REDEBT',           'MGEU_RDEBT', 'MG_US_FI') -- This is the list of investment desks provided in the business requirements documents        --AND pr.DEALING_DESK in ('Fixed Income', 'Equity', 'Leveraged Finance')        AND EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)        AND t.EXECUTION_TIME >= '01-01-2021'             IF OBJECT_ID('tempdb..#Inv_desk_concat', 'U') IS NOT NULL DROP TABLE #Inv_desk_concat     SELECT        CLIENT_EXECUTION_NUM,       STUFF((      SELECT DISTINCT ', ' + LTRIM(RTRIM(ancestor))      FROM #ClEx_inv_Desk       WHERE (CLIENT_EXECUTION_NUM = Results.CLIENT_EXECUTION_NUM)       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')       ,1,2,'') AS Inv_Desk_Concat     INTO #Inv_desk_concat     FROM #ClEx_inv_Desk Results     GROUP BY CLIENT_EXECUTION_NUM             /********************************************************************************/     /* Calculate the client fund NAV as sum of the NAVs of the base funds under it. */     /* Want to take NAV values for the last order before PM order auth time.        */     /********************************************************************************/         IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades     select distinct       t.CLIENT_EXECUTION_NUM      ,t.MULTI_FUND_ID      ,t.FUND      ,t.EXECUTION_TIME      ,t.PORTFOLIOS_PORTFOLIO_NAME      ,t.ORD_NUM      ,CASE        WHEN ccy.CURRENCY IS NOT NULL AND pr.DEALING_DESK = 'Fixed Income' THEN 1        WHEN ccy.CURRENCY IS NULL AND pr.DEALING_DESK = 'Fixed Income' THEN 0        ELSE pr.EMERGING_MARKET      END AS EMERGING_MARKET_FLAG      ,pr.DEALING_DESK     into #trades     from VISTA_REPORTING.dbo.TRADES as t     left join Vista_STAGING.dbo.REF_FI_OI_EMCCY_TO_USD ccy ON ccy.CURRENCY = t.SM_CURRENCY AND t.EXECUTION_TIME BETWEEN ccy.DATE_FROM AND ccy.DATE_TO     left join (SELECT DISTINCT ORD_NUM, AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS) as td on td.ORD_NUM = t.ORD_NUM     left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr on pr.MULTI_FUND_ID = t.MULTI_FUND_ID     where td.AUTH_TIME IS NOT NULL         AND td.ORD_NUM IS NOT NULL        AND EXISTS (SELECT DISTINCT di.CLIENT_EXECUTION_NUM FROM #temp_ot_flip_vg_table di WHERE di.CLIENT_EXECUTION_NUM = t.CLIENT_EXECUTION_NUM)             IF OBJECT_ID('tempdb..#lates_nav_dates', 'U') IS NOT NULL DROP TABLE #lates_nav_dates     SELECT      n.PORTFOLIO_NAME,       n.FUND,       n.NAV_PORT_DATE,       MAX(n.PULL_DATE) AS MAX_PULL_DATE      INTO #lates_nav_dates     FROM VISTA_REPORTING.dbo.NAV n     --Commented out so we can take all base funds for specific client fund and calculate navs correctly(If we drop table and recreate need to remove this as it would run all night)      --WHERE EXISTS (SELECT t.FUND FROM #trades t WHERE t.FUND=n.FUND)     GROUP BY       n.PORTFOLIO_NAME,       n.FUND,      n.NAV_PORT_DATE             IF OBJECT_ID('tempdb..#temp_nav_pre', 'U') IS NOT NULL DROP TABLE #temp_nav_pre     SELECT DISTINCT       PORTFOLIO_CURRENCY,       PORTFOLIO_NAME,      NAV_PORT_DATE,      FUND,      NAV_VALUE_USD,      NAV_VALUE_GBP,      PULL_DATE     INTO #temp_nav_pre     FROM VISTA_REPORTING.dbo.NAV n     INNER JOIN #temp_portgolio_groups pg2 ON pg2.descendant=n.PORTFOLIO_NAME     WHERE n.NAV_DATATYPE = 'NAV_FUND'        AND EXISTS (SELECT t.PORTFOLIOS_PORTFOLIO_NAME FROM #trades t            LEFT JOIN #temp_portgolio_groups pg ON pg.descendant = t.PORTFOLIOS_PORTFOLIO_NAME            WHERE pg.ancestor = pg2.ancestor           AND t.DEALING_DESK = 'Fixed Income')        AND pg2.ancestor NOT IN ('MG_PPL', 'MG_PRIL', 'MG_PXLF', 'PLI_CF', 'SFF_CF')         UNION         SELECT DISTINCT       PORTFOLIO_CURRENCY,       PORTFOLIO_NAME,      NAV_PORT_DATE,      FUND,      NAV_VALUE_USD,      NAV_VALUE_GBP,      PULL_DATE     FROM VISTA_REPORTING.dbo.NAV n     INNER JOIN #temp_portgolio_groups pg2 ON pg2.descendant=n.PORTFOLIO_NAME     WHERE n.NAV_DATATYPE = 'TOT_ASSETS'        AND EXISTS (SELECT t.PORTFOLIOS_PORTFOLIO_NAME FROM #trades t            LEFT JOIN #temp_portgolio_groups pg ON pg.descendant = t.PORTFOLIOS_PORTFOLIO_NAME            WHERE pg.ancestor = pg2.ancestor           AND t.DEALING_DESK = 'Fixed Income')        AND pg2.ancestor IN ('MG_PPL', 'MG_PRIL', 'MG_PXLF', 'PLI_CF', 'SFF_CF')         UNION         SELECT DISTINCT       PORTFOLIO_CURRENCY,       PORTFOLIO_NAME,      NAV_PORT_DATE,      FUND,      NAV_VALUE_USD,      NAV_VALUE_GBP,      PULL_DATE     FROM VISTA_REPORTING.dbo.NAV n     INNER JOIN #temp_portgolio_groups pg2 ON pg2.descendant=n.PORTFOLIO_NAME     WHERE EXISTS (SELECT t.PORTFOLIOS_PORTFOLIO_NAME FROM #trades t           LEFT JOIN #temp_portgolio_groups pg ON pg.descendant = t.PORTFOLIOS_PORTFOLIO_NAME           WHERE pg.ancestor = pg2.ancestor          AND t.DEALING_DESK = 'Leveraged Finance')               IF OBJECT_ID('tempdb..#temp_nav', 'U') IS NOT NULL DROP TABLE #temp_nav     SELECT tn.*      INTO #temp_nav     FROM #temp_nav_pre tn     WHERE EXISTS (SELECT nvd.PORTFOLIO_NAME           FROM #lates_nav_dates nvd           WHERE nvd.PORTFOLIO_NAME = tn.PORTFOLIO_NAME           AND nvd.NAV_PORT_DATE = tn.NAV_PORT_DATE           AND nvd.MAX_PULL_DATE = tn.PULL_DATE)             IF OBJECT_ID('tempdb..#temp_pgc', 'U') IS NOT NULL DROP TABLE #temp_pgc     SELECT DISTINCT       ancestor,      descendant,      depth      INTO #temp_pgc     FROM #temp_portgolio_groups     --T-0-17285 - fixed typo from MG_AALPXL into MG_ALLPXL portfolio group     WHERE (ancestor IN ('MG_PRIL', 'MG_PXLF', 'MG_ALLPXL', 'MG_ZI', 'MG_ZIB', 'MG_BT_PEN', 'MG_C_INS', 'MG_C_PEN',          'MG_PPL', 'MG_PSPS', 'OBMG', 'OBPC', 'OCMG', 'SAL', 'SACF')          OR CHARINDEX('_CF', ancestor) > 0)        AND depth != 0     --End of T-0-17285             IF OBJECT_ID('tempdb..#fund_nav', 'U') IS NOT NULL DROP TABLE #fund_nav     SELECT DISTINCT PORTFOLIO_CURRENCY, FUND, PORTFOLIO_NAME      INTO #fund_nav     FROM #temp_nav             IF OBJECT_ID('tempdb..#base_nav', 'U') IS NOT NULL DROP TABLE #base_nav     SELECT DISTINCT       PORTFOLIO_NAME,      NAV_PORT_DATE,      FUND,      NAV_VALUE_GBP,       NAV_VALUE_USD,       PULL_DATE      INTO #base_nav     FROM #temp_nav             IF OBJECT_ID('tempdb..#base_funds', 'U') IS NOT NULL DROP TABLE #base_funds     -- Need to join to closure table twice, first to find the client fund the base fund is associated with     -- and second to find all the base funds under that client fund.     -- Then take all the data associated to the base funds that is before pm order auth time.     select distinct       t.CLIENT_EXECUTION_NUM      ,t.MULTI_FUND_ID      ,base_fund.FUND as BASE_FUND      ,closure1.ancestor as CLIENT_FUND_NAME      ,closure2.descendant      ,CASE        WHEN t.EMERGING_MARKET_FLAG = 1 AND t.DEALING_DESK = 'Fixed Income'  THEN base_fund.NAV_VALUE_USD       ELSE base_fund.NAV_VALUE_GBP      END AS NAV_VALUE      ,base_fund.NAV_PORT_DATE      ,base_fund.PULL_DATE      ,nav.PORTFOLIO_CURRENCY     into #base_funds     from #trades as t     left join #fund_nav nav on t.FUND = nav.FUND     left join #temp_pgc closure1 on closure1.descendant = t.PORTFOLIOS_PORTFOLIO_NAME     left join #temp_pgc closure2 on closure2.ancestor = closure1.ancestor     left join #base_nav base_fund on base_fund.PORTFOLIO_NAME = closure2.descendant AND base_fund.NAV_PORT_DATE <= t.EXECUTION_TIME     where base_fund.NAV_PORT_DATE <= t.EXECUTION_TIME -- Only nav values before the order was authorised.             IF OBJECT_ID('tempdb..#max_base_port', 'U') IS NOT NULL DROP TABLE #max_base_port     SELECT       CLIENT_EXECUTION_NUM,      descendant,      MAX(NAV_PORT_DATE) AS MAX_PORT_DATE     INTO #max_base_port     FROM #base_funds      GROUP BY       CLIENT_EXECUTION_NUM,      descendant             IF OBJECT_ID('tempdb..#client_funds', 'U') IS NOT NULL DROP TABLE #client_funds     -- We already have only base fund data from before authorisation, take the latest.     select distinct       bf.CLIENT_EXECUTION_NUM      ,bf.CLIENT_FUND_NAME      ,bf.BASE_FUND      ,bf.NAV_VALUE      ,bf.NAV_PORT_DATE      ,bf.PULL_DATE      ,bf.PORTFOLIO_CURRENCY     into #client_funds     from #base_funds as bf     INNER JOIN #max_base_port bf2 ON bf2.CLIENT_EXECUTION_NUM = bf.CLIENT_EXECUTION_NUM              AND bf2.descendant=bf.descendant               AND bf2.MAX_PORT_DATE=bf.NAV_PORT_DATE             IF OBJECT_ID('tempdb..#pre_client_fund_nav', 'U') IS NOT NULL DROP TABLE #pre_client_fund_nav     -- Sum all the base fund values under the client funds per client ex.     select       CLIENT_EXECUTION_NUM      ,CLIENT_FUND_NAME      ,PORTFOLIO_CURRENCY      ,SUM(NAV_VALUE) AS Client_Fund_NAV     into #pre_client_fund_nav     from #client_funds     --T-0-17285 - fixed typo from MG_AALPXL into MG_ALLPXL portfolio group     WHERE CLIENT_FUND_NAME in ('MG_PRIL', 'MG_PXLF', 'MG_ALLPXL', 'MG_ZI', 'MG_ZIB', 'MG_BT_PEN', 'MG_C_INS', 'MG_C_PEN', 'MG_PPL', 'MG_PSPS')     group by CLIENT_EXECUTION_NUM, CLIENT_FUND_NAME, PORTFOLIO_CURRENCY     -- End of T-0-17285              IF OBJECT_ID('tempdb..#client_fund_nav', 'U') IS NOT NULL DROP TABLE #client_fund_nav     select       cf.CLIENT_EXECUTION_NUM      ,cf.CLIENT_FUND_NAME      ,cf.PORTFOLIO_CURRENCY      ,SUM(cf.NAV_VALUE) AS Client_Fund_NAV     into #client_fund_nav     from #client_funds cf     WHERE NOT EXISTS (SELECT pcn.CLIENT_EXECUTION_NUM FROM #pre_client_fund_nav pcn WHERE pcn.CLIENT_EXECUTION_NUM = cf.CLIENT_EXECUTION_NUM)      group by CLIENT_EXECUTION_NUM, CLIENT_FUND_NAME, PORTFOLIO_CURRENCY          UNION         SELECT       CLIENT_EXECUTION_NUM,      CLIENT_FUND_NAME,      PORTFOLIO_CURRENCY,      Client_Fund_NAV     FROM #pre_client_fund_nav             IF OBJECT_ID('tempdb..#temp_Orders_Cross', 'U') IS NOT NULL DROP TABLE #temp_Orders_Cross      --Distinct Pm and Trd Order numbers from ORDERS_CROSS     select distinct       oc.pm_ord      ,oc.trd_ord     into #temp_Orders_Cross     from VISTA_REPORTING.dbo.orders_cross oc     WHERE EXISTS (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = oc.TRD_ORD)             IF OBJECT_ID('tempdb..#temp_PM_Orders', 'U') IS NOT NULL DROP TABLE #temp_PM_Orders     SELECT DISTINCT       COALESCE(pm.PM_FULL_NAME,PM) AS PM_FULL_NAME      ,MIN(pm.AUTH_TIME) AS AUTH_TIME      ,pm.ORD_NUM      ,pm.CUSIP      ,pm.DEALING_DESK     INTO #temp_PM_Orders     FROM VISTA_REPORTING.dbo.pm_orders pm     WHERE EXISTS (SELECT DISTINCT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = pm.ORD_NUM)     GROUP BY       COALESCE(pm.PM_FULL_NAME,PM)      ,pm.ORD_NUM      ,pm.CUSIP      ,pm.DEALING_DESK      --WHERE DEALING_DESK in ('Fixed Income', 'Equity', 'Leveraged Finance')             IF OBJECT_ID('tempdb..#PRIMARY_INST_TYPE_TABLE', 'U') IS NOT NULL DROP TABLE #PRIMARY_INST_TYPE_TABLE     --distinct PRIMARY_INST_TYPE     SELECT DISTINCT       pr.PRIMARY_MARKET      ,pr.PRIMARY_MARKET_ORDER_LEVEL      ,pr.INST_TYPE      ,pr.DEBT_DERIV      ,pr.MULTI_FUND_ID      ,SM_SEC_TYPE     INTO #PRIMARY_INST_TYPE_TABLE     FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr     WHERE EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = pr.MULTI_FUND_ID)             IF OBJECT_ID('tempdb..#TRD_ORDERS', 'U') IS NOT NULL DROP TABLE #TRD_ORDERS     --distinct Trd_Orders     SELECT DISTINCT       trd.ORD_NUM      , trd.TRADER      , trd.TRADER_FULL_NAME      , MIN(trd.AUTH_TIME) AS AUTH_TIME      , trd.SEC_DESC1     INTO #TRD_ORDERS      FROM VISTA_REPORTING.dbo.TRD_ORDERS trd     INNER JOIN (SELECT ORD_NUM, MAX(TOUCH_COUNT) AS MAX_TOUCH FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd2 ON trd2.ORD_NUM = trd.ORD_NUM AND trd2.MAX_TOUCH = trd.TOUCH_COUNT     WHERE EXISTS (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = trd.ORD_NUM)     GROUP BY       trd.ORD_NUM      , trd.TRADER      , trd.TRADER_FULL_NAME      , trd.SEC_DESC1             IF OBJECT_ID('tempdb..#min_touch', 'U') IS NOT NULL DROP TABLE #min_touch     SELECT      t1.ORD_NUM      ,t1.TRADER      ,t1.TRADER_FULL_NAME     INTO #min_touch     FROM VISTA_REPORTING.dbo.TRD_ORDERS as t1     JOIN (       SELECT        t1.ORD_NUM        ,MIN(t1.TOUCH_COUNT) as MIN_TOUCH       FROM VISTA_REPORTING.dbo.TRD_ORDERS as t1       GROUP BY t1.ORD_NUM      )      as t2 on t1.ORD_NUM=t2.ORD_NUM and t1.TOUCH_COUNT=t2.MIN_TOUCH     WHERE EXISTS (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = t1.ORD_NUM)             IF OBJECT_ID('tempdb..#max_touch_trades', 'U') IS NOT NULL DROP TABLE #max_touch_trades     SELECT      t1.MULTI_FUND_ID      ,t1.EXECUTION_TIME     INTO #max_touch_trades     FROM VISTA_REPORTING.dbo.TRADES as t1     INNER JOIN (       SELECT        t3.MULTI_FUND_ID        ,MAX(t3.TOUCH_COUNT) as MAX_TOUCH       FROM VISTA_REPORTING.dbo.TRADES as t3       WHERE EXISTS (SELECT DISTINCT di.MULTI_FUND_ID             FROM #distinct_ids di             WHERE di.MULTI_FUND_ID = t3.MULTI_FUND_ID)        GROUP BY t3.MULTI_FUND_ID      ) t2 on t1.MULTI_FUND_ID=t2.MULTI_FUND_ID and t1.TOUCH_COUNT=t2.MAX_TOUCH     WHERE EXISTS (SELECT DISTINCT di.MULTI_FUND_ID             FROM #distinct_ids di             WHERE di.MULTI_FUND_ID = t1.MULTI_FUND_ID)              IF OBJECT_ID('tempdb..#max_touch_cex', 'U') IS NOT NULL DROP TABLE #max_touch_cex     SELECT      t.CLIENT_EXECUTION_NUM,      MAX(t.TOUCH_COUNT) AS MAX_TOUCH     INTO #max_touch_cex     FROM Vista_Reporting.dbo.TRADES t     WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)     GROUP BY t.CLIENT_EXECUTION_NUM             IF OBJECT_ID('tempdb..#trades2', 'U') IS NOT NULL DROP TABLE #trades2     SELECT DISTINCT       t.MULTI_FUND_ID,      t.ORD_NUM,      t.CLIENT_EXECUTION_NUM,      t.TRD_COUPON,      t.DESC_INSTMT,      t.SM_SEC_GROUP,      t.SM_SEC_TYPE,      t.TRAN_TYPE,      t.CUSIP,      t.TRD_CURRENCY,      t.FUND,      t.EXECUTION_TIME,      t.SEDOL,      t.TRD_PRICE_GBP,      CASE       WHEN ccy.CURRENCY IS NOT NULL AND t.TRD_CURRENCY != t.SM_CURRENCY THEN t.TRD_PRICE/e.INDEX_RATE       ELSE t.TRD_PRICE_GBP      END AS TRD_PRICE_CONVERTED,      CASE       WHEN ccy.CURRENCY IS NOT NULL AND t.TRD_CURRENCY != t.SM_CURRENCY THEN t.TRD_PRICE/e.GBP_INDEX_RATE       ELSE t.TRD_PRICE_GBP      END AS TRD_PRICE_CONVERTED_GBP,      t.TRD_ORIG_FACE,      t.TRD_PRICE,      t.TRD_TRADER,      t.TRD_SETTLE_DATE,      t.PORTFOLIOS_PORTFOLIO_NAME,      t.TRD_COUNTERPARTY,      t.EXECUTION_TYPE_DECODE,      t.TRD_PURPOSE     INTO #trades2     FROM VISTA_REPORTING.dbo.TRADES t     INNER JOIN #max_touch_cex t2 ON t2.CLIENT_EXECUTION_NUM = t.CLIENT_EXECUTION_NUM AND t2.MAX_TOUCH = t.TOUCH_COUNT     LEFT JOIN VISTA_STAGING.dbo.REF_FI_OI_EMCCY_TO_USD ccy ON ccy.CURRENCY = t.SM_CURRENCY AND t.EXECUTION_TIME BETWEEN ccy.DATE_FROM AND ccy.DATE_TO      OUTER APPLY (SELECT TOP 1 e.GBP_INDEX_RATE, e.INDEX_RATE, e.INDEX_NAME FROM #temp_fx_rates e          WHERE e.CURRENCY = t.SM_CURRENCY and CONVERT(date, e.MARKDATE) <= CONVERT(date, t.EXECUTION_TIME)         ORDER BY e.MARKDATE DESC) e      WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)              IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     SELECT DISTINCT      cast(pm.AUTH_TIME as datetime) as [Auth_Time],      oi.ORD_NUM AS [Order_ID],       t.MULTI_FUND_ID AS [Market_Execution_ID],       oi.CLIENT_EXECUTION_NUM AS [Client_Execution_ID],       NULL AS [Previous_Order_ID],       CONVERT(DATE,max_trade.EXECUTION_TIME) AS [Execution_Date],       pm.PM_FULL_NAME AS [Fund_Manager],       inv_Desk.Inv_Desk_Concat AS [Investment_Desk],       CASE       WHEN pm.DEALING_DESK='Fixed Income'        THEN        CASE         WHEN pt.DEBT_DERIV = 'DEBT'          THEN          CASE           WHEN t.TRD_COUPON IS NOT NULL AND i2.TICKER IS NOT NULL AND i2.MATURITY IS NOT NULL            THEN CONCAT(ISNULL(i2.TICKER,''),' ', CAST(ISNULL(t.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))           ELSE  CONCAT(ISNULL(tro.SEC_DESC1,''),' ', CAST(ISNULL(t.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))          END          ELSE t.DESC_INSTMT        END       WHEN pm.DEALING_DESK='Equity'       THEN tro.SEC_DESC1       WHEN pm.DEALING_DESK='Leveraged Finance'       THEN t.DESC_INSTMT      END AS [Description],        t.SM_SEC_GROUP AS [Asset_Type],      t.SM_SEC_TYPE AS [Asset_SubType],       i2.CURRENCY AS [Currency],      t.SEDOL AS [SEDOL],      i2.ISIN AS [ISIN],       t.CUSIP AS [CUSIP],       t.TRAN_TYPE as [Side],      pt.PRIMARY_MARKET AS [New_Issue],      CONVERT(DATE,pm.AUTH_TIME)  AS [Approved_DateTime],       NULL AS [Issue_Size], -- We do not know the get details for the issue size out of Aladdin -> Can't calculate this.      --SURVG-556      FORMAT(mf.MAX_FACE,'N') AS [Proposed_Quantity],      --End of SURVG-556      CONVERT(DECIMAL(30,2),(mf.MAX_FACE_PRINCIP*t.TRD_PRICE_CONVERTED/100)) AS [Proposed_Value_(Instrument_Base)],       CONVERT(DECIMAL(30,2),(mf.MAX_FACE_PRINCIP*t.TRD_PRICE_CONVERTED/100)) AS [Proposed_Value_(Fund_Base)],       t.TRD_CURRENCY AS [Execution_Currency],       NULL AS [Proposed_as_%_Of_Issue],  -- We do not know the get details for the issue size out of Aladdin -> Can't calculate this.      CONVERT(DECIMAL(30,0),ABS(t.TRD_ORIG_FACE)) AS [Executed_Quantity],       CONVERT(DECIMAL(30,2), (mf.MAX_FACE_PRINCIP*t.TRD_PRICE_CONVERTED)) AS [Gross_Consideration_(Instrument_Base)], -- What is the difference between the fund base and instrument base gross consideration?      CONVERT(DECIMAL(30,2), (mf.MAX_FACE_PRINCIP*t.TRD_PRICE_CONVERTED)) AS [Gross_Consideration_(Fund_Base)], -- What is the difference between the fund base and instrument base gross consideration?      t.TRD_COUNTERPARTY AS [Counterparty],       CONVERT(DECIMAL(12,2),t.TRD_PRICE / 100) AS [Price],       t.TRD_TRADER AS [Dealer],       CONVERT(DECIMAL(30,2),(t.TRD_ORIG_FACE/nullif(mf.MAX_FACE,0) * 100)) AS [%_Allocated],       cfn.PORTFOLIO_CURRENCY AS [Fund_Currency],      t.TRD_SETTLE_DATE AS [First_Settle_Date],       t.PORTFOLIOS_PORTFOLIO_NAME AS [Base_Fund],       CONVERT(DECIMAL(30,2), NULLIF(n.NAV_VALUE_GBP, 0)) AS [Base_Fund_NAV_GBP],       CONVERT(DECIMAL(30,2), ((mf.MAX_FACE_PRINCIP*t.TRD_PRICE_CONVERTED)/NULLIF(n.NAV_VALUE_GBP, 0)))   AS [Proposed_Value_As_%_NAV_(Base_Fund)],       NULL AS [Executed_As_%_Of_Issue_Size], --Placeholder column to allow front end development. Logic is required to be developed to fill this column      CONVERT(DECIMAL(30,2), ((t.TRD_ORIG_FACE*t.TRD_PRICE_CONVERTED)/NULLIF(n.NAV_VALUE_GBP, 0)))     AS [Executed_As_%_Of_Base_NAV],      CONVERT(DECIMAL(30,2),ABS(TRD_ORIG_FACE * TRD_PRICE_CONVERTED)/NULLIF(cfn.Client_Fund_NAV,0))   AS [Executed_As_%_Of_Client_NAV],      oi.EXCEPTION AS [NAV_Threshold_Breached?],       cfn.CLIENT_FUND_NAME AS [Client_Fund],       cfn.Client_Fund_NAV AS Client_Fund_NAV_GBP,       CONVERT(DECIMAL(30,2),(mf.MAX_FACE*t.TRD_PRICE_CONVERTED_GBP/100)) AS [Proposed_Principle_Value_GBP],       CONVERT(DECIMAL(30,2),(mf.MAX_FACE*t.TRD_PRICE_CONVERTED_GBP)/NULLIF(cfn.Client_Fund_NAV,0))  AS [Proposed_Principle_Value_%_CLIENT_NAV],       CONVERT(DECIMAL(30,2), ((t.TRD_ORIG_FACE*t.TRD_PRICE_CONVERTED)/NULLIF(n.NAV_VALUE_GBP, 0)))     AS [Executed_%],       NULL AS [Executed_Value_FUND_BASE],      null as [fund],      NULL AS [Further_Desk_Comments], --Placeholder column to allow front end development. Logic is required to be developed to fill this column      CONVERT(DECIMAL(30,2),(t.TRD_ORIG_FACE*t.TRD_PRICE_CONVERTED/100)) AS [Principle_Executed], --Placeholder column to allow front end development. Logic is required to be developed to fill this column      pt.PRIMARY_MARKET AS [PRIMARY_MARKET],      t.TRD_COUNTERPARTY as [TRD_COUNTERPARTY],      t.EXECUTION_TYPE_DECODE AS [EXECUTION_TYPE_DECODE],      concat(LTRIM(RTRIM(i2.SM_SEC_GROUP)),'/',LTRIM(RTRIM(i2.SM_SEC_TYPE))) as [Asset_Type/Subtype],      CONCAT(YEAR(pm.AUTH_TIME),'-',left(datename(m,pm.AUTH_TIME),3)) AS MONTH_YEAR,      pt.INST_TYPE as [INST_TYPE],      oi.DEALING_DESK as [DEALING_DESK],      oi.EXCEPTION as [VG_08],      oi.CREATETIME as [VG_08_CREATETIME],      NULL as [VG_06],      NULL as [VG_06_CREATETIME],      tro.ORD_NUM as [Order],      tro.TRADER_FULL_NAME as [TRADER_FULL_NAME],      t.TRD_PURPOSE as [TRD_PURPOSE],      'Order Inflation' AS [Exception_Type], --  Required for front end filtering for OI queries.      --SURVG-556      CASE        WHEN pg.MG_RET_FI_FLAG = 1 THEN COALESCE(oi.PERCENTAGE_THRESHOLD, 1.75)       WHEN pg.MG_RET_FI_FLAG = 0 THEN COALESCE(oi.PERCENTAGE_THRESHOLD, 1)      END AS PERCENTAGE_THRESHOLD      --End of SURVG-556     INTO #temp_final_master_table     --SURVG-556     --FROM #temp_ot_flip_vg_table oi     FROM #temp_ot_flip_vg_table_final oi     --End of SURVG-556     INNER JOIN #trades2 t ON t.CLIENT_EXECUTION_NUM = oi.CLIENT_EXECUTION_NUM      LEFT JOIN #max_face mf ON mf.ORD_NUM=oi.ORD_NUM AND t.FUND = mf.ORD_DETAIL_FUND     LEFT JOIN (SELECT DISTINCT EXECUTION_TIME,MULTI_FUND_ID FROM #max_touch_trades) as max_trade on max_trade.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN (SELECT DISTINCT ORD_NUM,DEALING_DESK,AUTH_TIME,CUSIP,PM_FULL_NAME FROM #temp_PM_Orders WHERE AUTH_TIME IS NOT NULL) pm ON oi.ORD_NUM = pm.ORD_NUM     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID,INST_TYPE,PRIMARY_MARKET,DEBT_DERIV, SM_SEC_TYPE FROM  #PRIMARY_INST_TYPE_TABLE) pt ON t.MULTI_FUND_ID = pt.MULTI_FUND_ID     LEFT JOIN (SELECT DISTINCT ORD_NUM, TRADER_FULL_NAME,AUTH_TIME,SEC_DESC1 FROM #TRD_ORDERS) tro ON t.ORD_NUM = tro.ORD_NUM     LEFT JOIN (SELECT DISTINCT Inv_Desk_Concat,CLIENT_EXECUTION_NUM FROM  #Inv_desk_concat) inv_desk ON t.CLIENT_EXECUTION_NUM = inv_desk.CLIENT_EXECUTION_NUM     LEFT JOIN (SELECT DISTINCT PORTFOLIO_CURRENCY,Client_Fund_NAV,CLIENT_FUND_NAME,CLIENT_EXECUTION_NUM FROM #client_fund_nav) as cfn ON cfn.CLIENT_EXECUTION_NUM = t.CLIENT_EXECUTION_NUM     LEFT JOIN #latest_orders_detail od ON od.ORD_NUM=pm.ORD_NUM AND t.FUND = od.ORD_DETAIL_FUND      --SURVG-556     LEFT JOIN #temp_portgolio_groups pg ON pg.descendant = t.PORTFOLIOS_PORTFOLIO_NAME     --End of SURVG-556     OUTER APPLY (SELECT TOP 1          i.TICKER,         i.MATURITY,         i.CURRENCY,         i.ISIN,         i.SM_SEC_GROUP,         i.SM_SEC_TYPE          FROM VISTA_STAGING.dbo.INSTRUMENTS i          WHERE (i.CUSIP=coalesce(t.CUSIP, pm.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(t.EXECUTION_TIME, pm.AUTH_TIME)))          ORDER BY i.DATE DESC) as i2     OUTER APPLY (SELECT TOP 1 n.NAV_VALUE_GBP          FROM #temp_nav n          WHERE n.FUND=t.FUND and n.NAV_PORT_DATE<=convert(date, tro.AUTH_TIME) AND NAV_VALUE_USD <> 0 ORDER BY n.NAV_PORT_DATE DESC) n     WHERE od.ORD_NUM IS NOT NULL         AND oi.EXCEPTION_TYPE = 'VG_08' -- We do not want to include other PM Orders that have been merged        AND pt.PRIMARY_MARKET = 1             UNION         SELECT DISTINCT      cast(pm.AUTH_TIME as datetime) as [Auth_Time],      oc.PM_ORD AS [Order_ID],       t.MULTI_FUND_ID AS [Market_Execution_ID],       t.CLIENT_EXECUTION_NUM AS [Client_Execution_ID],       NULL AS [Previous_Order_ID],       CONVERT(DATE,max_trade.EXECUTION_TIME) AS [Execution_Date],       pm.PM_FULL_NAME AS [Fund_Manager],       inv_Desk.Inv_Desk_Concat AS [Investment_Desk],       CASE       WHEN pm.DEALING_DESK='Fixed Income'        THEN        CASE         WHEN pt.DEBT_DERIV = 'DEBT'          THEN          CASE           WHEN t.TRD_COUPON IS NOT NULL AND i2.TICKER IS NOT NULL AND i2.MATURITY IS NOT NULL            THEN CONCAT(ISNULL(i2.TICKER,''),' ', CAST(ISNULL(t.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))           ELSE  CONCAT(ISNULL(tro.SEC_DESC1,''),' ', CAST(ISNULL(t.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))          END          ELSE t.DESC_INSTMT        END       WHEN pm.DEALING_DESK='Equity'       THEN tro.SEC_DESC1       WHEN pm.DEALING_DESK='Leveraged Finance'       THEN t.DESC_INSTMT      END AS [Description],       t.SM_SEC_GROUP AS [Asset_Type],      t.SM_SEC_TYPE AS [Asset_SubType],       i2.CURRENCY AS [Currency],      t.SEDOL AS [SEDOL],       i2.ISIN AS [ISIN],       t.CUSIP AS [CUSIP],       t.TRAN_TYPE as [Side],      pt.PRIMARY_MARKET AS [New_Issue],      CONVERT(DATE,pm.AUTH_TIME)  AS [Approved_DateTime],       NULL AS [Issue_Size], -- We do not know the get details for the issue size out of Aladdin -> Can't calculate this.      --SURVG-556      FORMAT(mf.MAX_FACE,'N') AS [Proposed_Quantity],      --End of SURVG-556      CONVERT(DECIMAL(30,2),(mf.MAX_FACE_PRINCIP*t.TRD_PRICE_CONVERTED/100)) AS [Proposed_Value_(Instrument_Base)],       CONVERT(DECIMAL(30,2),(mf.MAX_FACE_PRINCIP*t.TRD_PRICE_CONVERTED/100)) AS [Proposed_Value_(Fund_Base)],       t.TRD_CURRENCY AS [Execution_Currency],       NULL AS [Proposed_as_%_Of_Issue],  -- We do not know the get details for the issue size out of Aladdin -> Can't calculate this.      CONVERT(DECIMAL(30,0),ABS(t.TRD_ORIG_FACE)) AS [Executed_Quantity],       CONVERT(DECIMAL(30,2), (mf.MAX_FACE_PRINCIP*t.TRD_PRICE_CONVERTED)) AS [Gross_Consideration_(Instrument_Base)], -- What is the difference between the fund base and instrument base gross consideration?      CONVERT(DECIMAL(30,2), (mf.MAX_FACE_PRINCIP*t.TRD_PRICE_CONVERTED)) AS [Gross_Consideration_(Fund_Base)], -- What is the difference between the fund base and instrument base gross consideration?      t.TRD_COUNTERPARTY AS [Counterparty],       CONVERT(DECIMAL(12,2),t.TRD_PRICE / 100) AS [Price],       t.TRD_TRADER AS [Dealer],       CONVERT(DECIMAL(30,2),(t.TRD_ORIG_FACE/nullif(mf.MAX_FACE,0) * 100)) AS [%_Allocated],       cfn.PORTFOLIO_CURRENCY AS [Fund_Currency],      t.TRD_SETTLE_DATE AS [First_Settle_Date],       t.PORTFOLIOS_PORTFOLIO_NAME AS [Base_Fund],       CONVERT(DECIMAL(30,2), NULLIF(n.NAV_VALUE_GBP, 0)) AS [Base_Fund_NAV_GBP],       CONVERT(DECIMAL(30,2), ABS((mf.MAX_FACE_PRINCIP*t.TRD_PRICE_CONVERTED)/NULLIF(n.NAV_VALUE_GBP, 0))) AS [Proposed_Value_As_%_NAV_(Base_Fund)],       NULL AS [Executed_As_%_Of_Issue_Size], --Placeholder column to allow front end development. Logic is required to be developed to fill this column      CONVERT(DECIMAL(30,2), ABS((t.TRD_ORIG_FACE*t.TRD_PRICE_CONVERTED)/NULLIF(n.NAV_VALUE_GBP, 0))) AS [Executed_As_%_Of_Base_NAV],      CONVERT(DECIMAL(30,2),ABS(TRD_ORIG_FACE * TRD_PRICE_CONVERTED)/NULLIF(cfn.Client_Fund_NAV,0)) AS [Executed_As_%_Of_Client_NAV],      NULL AS [NAV_Threshold_Breached?],       cfn.CLIENT_FUND_NAME AS [Client_Fund],       cfn.Client_Fund_NAV AS Client_Fund_NAV_GBP,       CONVERT(DECIMAL(30,2),ABS(mf.MAX_FACE_PRINCIP*t.TRD_PRICE_CONVERTED/100)) AS [Proposed_Principle_Value_GBP],       CONVERT(DECIMAL(30,2),ABS(mf.MAX_FACE_PRINCIP*t.TRD_PRICE_CONVERTED) / NULLIF(cfn.Client_Fund_NAV,0)) AS [Proposed_Principle_Value_%_CLIENT_NAV],       CONVERT(DECIMAL(30,2), ABS((t.TRD_ORIG_FACE*t.TRD_PRICE_CONVERTED)/NULLIF(n.NAV_VALUE_GBP, 0))) AS [Executed_%],       NULL AS [Executed_Value_FUND_BASE],      null as [fund],      NULL AS [Further_Desk_Comments], --Placeholder column to allow front end development. Logic is required to be developed to fill this column      CONVERT(DECIMAL(30,2),(t.TRD_ORIG_FACE*t.TRD_PRICE_CONVERTED/100)) AS [Principle_Executed], --Placeholder column to allow front end development. Logic is required to be developed to fill this column      pt.PRIMARY_MARKET AS [PRIMARY_MARKET],      t.TRD_COUNTERPARTY as [TRD_COUNTERPARTY],      t.EXECUTION_TYPE_DECODE AS [EXECUTION_TYPE_DECODE],      concat(LTRIM(RTRIM(i2.SM_SEC_GROUP)),'/',LTRIM(RTRIM(i2.SM_SEC_TYPE))) as [Asset_Type/Subtype],      CONCAT(YEAR(pm.AUTH_TIME),'-',left(datename(m,pm.AUTH_TIME),3)) AS MONTH_YEAR,      pt.INST_TYPE as [INST_TYPE],      flip.DEALING_DESK as [DEALING_DESK],      NULL as [VG_08],      NULL as [VG_08_CREATETIME],      flip.EXCEPTION as [VG_06],      flip.CREATETIME as [VG_06_CREATETIME],      tro.ORD_NUM as [Order],      tro.TRADER_FULL_NAME as [TRADER_FULL_NAME],      t.TRD_PURPOSE as [TRD_PURPOSE],      'Follow on' AS [Exception_Type],      --SURVG-556      CASE        WHEN pg.MG_RET_FI_FLAG = 1 THEN COALESCE(flip.PERCENTAGE_THRESHOLD, 1.75)       WHEN pg.MG_RET_FI_FLAG = 0 THEN COALESCE(flip.PERCENTAGE_THRESHOLD, 1)      END AS PERCENTAGE_THRESHOLD      --End of SURVG-556     FROM  #temp_ot_flip_vg_table_final flip      INNER JOIN #trades2 t ON t.CLIENT_EXECUTION_NUM = flip.CLIENT_EXECUTION_NUM     LEFT JOIN #max_touch_trades as max_trade on max_trade.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN  #temp_Orders_Cross oc ON t.ORD_NUM = oc.TRD_ORD     LEFT JOIN (SELECT DISTINCT DEALING_DESK,ORD_NUM,PM_FULL_NAME,CUSIP,AUTH_TIME FROM #temp_PM_Orders where AUTH_TIME IS NOT NULL) pm ON oc.PM_ORD = pm.ORD_NUM     LEFT JOIN (SELECT DISTINCT PRIMARY_MARKET,MULTI_FUND_ID,INST_TYPE,DEBT_DERIV FROM #PRIMARY_INST_TYPE_TABLE) pt ON t.MULTI_FUND_ID = pt.MULTI_FUND_ID     LEFT JOIN (SELECT DISTINCT ORD_NUM,TRADER_FULL_NAME,SEC_DESC1,AUTH_TIME FROM #TRD_ORDERS) tro ON t.ORD_NUM = tro.ORD_NUM     LEFT JOIN (SELECT DISTINCT CLIENT_EXECUTION_NUM,Inv_Desk_Concat FROM #Inv_desk_concat) inv_desk ON t.CLIENT_EXECUTION_NUM = inv_desk.CLIENT_EXECUTION_NUM     LEFT JOIN (SELECT DISTINCT PORTFOLIO_CURRENCY,Client_Fund_NAV,CLIENT_FUND_NAME,CLIENT_EXECUTION_NUM FROM #client_fund_nav) as cfn ON cfn.CLIENT_EXECUTION_NUM = t.CLIENT_EXECUTION_NUM     --LEFT JOIN #latest_orders_detail od ON od.ORD_NUM=tro.ORD_NUM AND t.FUND = od.ORD_DETAIL_FUND      --SURVG-556     LEFT JOIN #temp_portgolio_groups pg ON pg.descendant = t.PORTFOLIOS_PORTFOLIO_NAME     --End of SURVG-556          OUTER APPLY (SELECT TOP 1          i.TICKER,         i.MATURITY,         i.CURRENCY,         i.ISIN,         i.SM_SEC_GROUP,         i.SM_SEC_TYPE         FROM VISTA_STAGING.dbo.INSTRUMENTS i          WHERE (i.CUSIP=coalesce(t.CUSIP, pm.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(t.EXECUTION_TIME, pm.AUTH_TIME)))          ORDER BY i.DATE DESC) as i2     OUTER APPLY (SELECT TOP 1 n.NAV_VALUE_GBP          FROM VISTA_REPORTING.dbo.NAV n          WHERE n.FUND=t.FUND and n.NAV_PORT_DATE <=convert(date, tro.AUTH_TIME) AND NAV_VALUE <> 0  ORDER BY n.NAV_PORT_DATE DESC) n     LEFT JOIN #max_face mf ON mf.ORD_NUM=tro.ORD_NUM AND t.FUND = mf.ORD_DETAIL_FUND     WHERE flip.EXCEPTION_TYPE = 'VG_06'        AND oc.PM_ORD IS NOT NULL             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE', 'U') IS NOT NULL     DELETE FROM VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE     WHERE Market_Execution_ID IN (SELECT DISTINCT di.MULTI_FUND_ID              FROM #distinct_ids di)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE     SELECT *     FROM #temp_final_master_table         ELSE         SELECT *     INTO VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE     FROM #temp_final_master_table             --IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes       --           WHERE name = N'mce_idx1')        --   DROP INDEX mce_idx1      --ON VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE          --CREATE NONCLUSTERED INDEX mce_idx1     --ON VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE      --([Order_ID], [Market_Execution_ID], [CLient_Execution_ID], [Previous_Order_ID], VG_08_CREATETIME, VG_06_CREATETIME)             --IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes       --           WHERE name = N'mce_idx2')        --   DROP INDEX mce_idx2      --ON VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE          --CREATE NONCLUSTERED INDEX mce_idx2     --ON VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE      --(Dealing_Desk, Exception_Type, Execution_Date)              IF OBJECT_ID('tempdb..#max_touch_orders', 'U') IS NOT NULL DROP TABLE #max_touch_orders     IF OBJECT_ID('tempdb..#max_face', 'U') IS NOT NULL DROP TABLE #max_face     IF OBJECT_ID('tempdb..#temp_portgolio_groups', 'U') IS NOT NULL DROP TABLE #temp_portgolio_groups     IF OBJECT_ID('tempdb..#ClEx_inv_Desk', 'U') IS NOT NULL DROP TABLE #ClEx_inv_Desk     IF OBJECT_ID('tempdb..#Inv_desk_concat', 'U') IS NOT NULL DROP TABLE #Inv_desk_concat     IF OBJECT_ID('tempdb..#temp_ot_flip_vg_table', 'U') IS NOT NULL DROP TABLE #temp_ot_flip_vg_table     --SURVG-556     IF OBJECT_ID('tempdb..#temp_ot_flip_vg_table_final', 'U') IS NOT NULL DROP TABLE #temp_ot_flip_vg_table_final     --End of SURVG-556     IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades     IF OBJECT_ID('tempdb..#temp_nav', 'U') IS NOT NULL DROP TABLE #temp_nav     IF OBJECT_ID('tempdb..#temp_pgc', 'U') IS NOT NULL DROP TABLE #temp_pgc     IF OBJECT_ID('tempdb..#base_funds', 'U') IS NOT NULL DROP TABLE #base_funds     IF OBJECT_ID('tempdb..#client_funds', 'U') IS NOT NULL DROP TABLE #client_funds     IF OBJECT_ID('tempdb..#client_fund_nav', 'U') IS NOT NULL DROP TABLE #client_fund_nav     IF OBJECT_ID('tempdb..#temp_Orders_Cross', 'U') IS NOT NULL DROP TABLE #temp_Orders_Cross      IF OBJECT_ID('tempdb..#temp_PM_Orders', 'U') IS NOT NULL DROP TABLE #temp_PM_Orders     IF OBJECT_ID('tempdb..#PRIMARY_INST_TYPE_TABLE', 'U') IS NOT NULL DROP TABLE #PRIMARY_INST_TYPE_TABLE     IF OBJECT_ID('tempdb..#TRD_ORDERS', 'U') IS NOT NULL DROP TABLE #TRD_ORDERS     IF OBJECT_ID('tempdb..#min_touch', 'U') IS NOT NULL DROP TABLE #min_touch     IF OBJECT_ID('tempdb..#max_touch_trades', 'U') IS NOT NULL DROP TABLE #max_touch_trades     IF OBJECT_ID('tempdb..#trades2', 'U') IS NOT NULL DROP TABLE #trades2             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(     'MASTER_CLIENT_EXECUTION_TABLE', --TABLE_NAME     @START_TIME, --START_TIME     GETDATE(), --END_TIME     DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS     CAST(GETDATE() as date)) --COMPLETION_DATE            END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_CLIENT_EXECUTION_TABLE_TESTING  CreateDate: 2025-06-26 17:48:21.683  ModifyDate: 2025-06-26 17:48:21.683  --- DEFINITION START ---  -- =============================================    -- Author:  <Henderson, William>    -- Create date: <2018-02-21>    -- Description:     -- < Build a master table at the client execution level with all    --   information required for the front end >    -- =============================================        -- ***************VERSION CONTROL***************    -- 2018-03-21 - WH: Removed reference to BUY_SELL_FLAG - used TRAN_TYPE instead    -- 2019-03-26 ER : ADDED IN NULLIF TO CONVERT(DECIMAL(21,2),(t.TRD_ORIG_FACE/nullif(od.ORD_DETAIL_FACE,0) * 100)) AS [%_Allocated], AS THIS CAUSED A FAIL IN TEST/PROD    -- 2019-06-06 MN : Added  WHERE pm.DEALING_DESK <> 'DMG' at the end to fix frontend issues    -- 2019-07-19 DDC: Filters added to ensure only FI, EQ and LL data is pulled through    -- 2020-01-15 MN : Made added in the #max_face table to more accurately replicate the staging tables in how the calculations are done    -- *********************************************        CREATE PROCEDURE [dbo].[MASTER_CLIENT_EXECUTION_TABLE_TESTING]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;     --DECLARE @DATE_FILTER AS DATE --Declare date filter to only select data from current pull date     --SET @DATE_FILTER = CONVERT(DATE, GETDATE())             DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()             IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids     SELECT DISTINCT       t.ORD_NUM as TRD_ORD,      oc.PM_ORD AS ORD_NUM,      t.MULTI_FUND_ID     INTO #distinct_ids     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = t.ORD_NUM     WHERE EXISTS (SELECT tr.ORD_NUM FROM Vista_REPORTING.dbo.TRD_ORDERS tr WHERE tr.ORD_NUM = t.ORD_NUM AND tr.DEALING_DESK in ('Fixed Income', 'Leveraged Finance'))              IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE_TESTING', 'U') IS NOT NULL     DELETE FROM #distinct_ids where NOT EXISTS (SELECT DISTINCT od.MULTI_FUND_ID                   FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                   WHERE od.MULTI_FUND_ID = #distinct_ids.MULTI_FUND_ID)             IF OBJECT_ID('tempdb..#max_touch_orders', 'U') IS NOT NULL DROP TABLE #max_touch_orders     -- This table shows us the touch count we should take order detail info for.     select      o.ORD_NUM      ,MAX(o.TOUCH_COUNT) as MAX_TOUCH     into #max_touch_orders     from VISTA_REPORTING.dbo.PM_ORDERS o     --WHERE DEALING_DESK in ('Fixed Income', 'Equity', 'Leveraged Finance')     WHERE EXISTS (SELECT DISTINCT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = o.ORD_NUM)     group by ORD_NUM         UNION          select      o.ORD_NUM      ,MAX(o.TOUCH_COUNT) as MAX_TOUCH     from VISTA_REPORTING.dbo.TRD_ORDERS o     --WHERE DEALING_DESK in ('Fixed Income', 'Equity', 'Leveraged Finance')     WHERE EXISTS (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = o.ORD_NUM)     group by ORD_NUM             IF OBJECT_ID('tempdb..#temp_ot_flip_vg_table', 'U') IS NOT NULL DROP TABLE #temp_ot_flip_vg_table     SELECT DISTINCT       vg.ORDER_INFLATION_EXCEPTION AS EXCEPTION,      vg.OI_CREATETIME AS CREATETIME,      vg.ORD_NUM,      vg.CLIENT_EXECUTION_NUM,      vg.DEALING_DESK,      'VG_08' AS EXCEPTION_TYPE      INTO #temp_ot_flip_vg_table     FROM VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_FI_TABLE vg     WHERE EXISTS (SELECT DISTINCT t.CLIENT_EXECUTION_NUM          FROM #distinct_ids di          INNER JOIN Vista_Reporting.dbo.TRADES t ON t.MULTI_FUND_ID = di.MULTI_FUND_ID          WHERE t.CLIENT_EXECUTION_NUM = vg.CLIENT_EXECUTION_NUM)     UNION ALL         SELECT DISTINCT       vg2.ORDER_INFLATION_EXCEPTION,      vg2.OI_CREATETIME,      vg2.ORD_NUM,      vg2.CLIENT_EXECUTION_NUM,      vg2.DEALING_DESK,      'VG_08'     FROM VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_LL_TABLE vg2     WHERE EXISTS (SELECT DISTINCT t.CLIENT_EXECUTION_NUM          FROM #distinct_ids di          INNER JOIN Vista_Reporting.dbo.TRADES t ON t.MULTI_FUND_ID = di.MULTI_FUND_ID          WHERE t.CLIENT_EXECUTION_NUM = vg2.CLIENT_EXECUTION_NUM)     UNION ALL         SELECT DISTINCT       vg3.NEW_ORDER_FLIPPING_EXCEPTION,      vg3.NEW_ORDER_FLIPPING_EXCEPTION_CREATETIME,      NULL,      vg3.CLIENT_EXECUTION_NUM,      vg3.DEALING_DESK,      'VG_06'     FROM VISTA_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_FI_TABLE vg3     WHERE EXISTS (SELECT DISTINCT t.CLIENT_EXECUTION_NUM          FROM #distinct_ids di          INNER JOIN Vista_Reporting.dbo.TRADES t ON t.MULTI_FUND_ID = di.MULTI_FUND_ID          WHERE t.CLIENT_EXECUTION_NUM = vg3.CLIENT_EXECUTION_NUM)      UNION ALL      SELECT DISTINCT       vg4.NEW_ORDER_FLIPPING_EXCEPTION,      vg4.NEW_ORDER_FLIPPING_EXCEPTION_CREATETIME,      NULL,      vg4.CLIENT_EXECUTION_NUM,      vg4.DEALING_DESK,      'VG_06'     FROM VISTA_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_LL_TABLE vg4     WHERE EXISTS (SELECT DISTINCT t.CLIENT_EXECUTION_NUM          FROM #distinct_ids di          INNER JOIN Vista_Reporting.dbo.TRADES t ON t.MULTI_FUND_ID = di.MULTI_FUND_ID          WHERE t.CLIENT_EXECUTION_NUM = vg4.CLIENT_EXECUTION_NUM)               IF OBJECT_ID('tempdb..#temp_fx_rates', 'U') IS NOT NULL DROP TABLE #temp_fx_rates     SELECT DISTINCT      fx.MARKDATE,      fx.CURRENCY,      fx.GBP_INDEX_RATE,      fx.INDEX_RATE,      fx.INDEX_NAME     INTO #temp_fx_rates     FROM VISTA_REPORTING.dbo.FX_RATES fx     WHERE EXISTS (SELECT t.SM_CURRENCY FROM Vista_Reporting.dbo.TRADES t          INNER JOIN #distinct_ids di ON di.MULTI_FUND_ID = t.MULTI_FUND_ID          WHERE t.SM_CURRENCY = fx.CURRENCY)             IF OBJECT_ID('tempdb..#temp_fx_trades', 'U') IS NOT NULL DROP TABLE #temp_fx_trades     SELECT DISTINCT       t.CLIENT_EXECUTION_NUM,      t.TRD_CURRENCY,      t.SM_CURRENCY,      t.EXECUTION_TIME      INTO #temp_fx_trades     FROM Vista_Reporting.dbo.TRADES t     INNER JOIN #distinct_ids di ON di.MULTI_FUND_ID = t.MULTI_FUND_ID              IF OBJECT_ID('tempdb..#temp_trd_fx_rates', 'U') IS NOT NULL DROP TABLE #temp_trd_fx_rates     SELECT DISTINCT      tof.ORD_NUM,      t.TRD_CURRENCY,      t.SM_CURRENCY,      t.EXECUTION_TIME,      e.GBP_INDEX_RATE,      e.INDEX_RATE     INTO #temp_trd_fx_rates     FROM #temp_ot_flip_vg_table tof     LEFT JOIN #temp_fx_trades t ON t.CLIENT_EXECUTION_NUM = tof.CLIENT_EXECUTION_NUM     OUTER APPLY (SELECT TOP 1 e.GBP_INDEX_RATE, e.INDEX_RATE, e.INDEX_NAME FROM #temp_fx_rates e          WHERE e.CURRENCY = t.SM_CURRENCY and CONVERT(date, e.MARKDATE) <= CONVERT(date, t.EXECUTION_TIME)         ORDER BY e.MARKDATE DESC) e             IF OBJECT_ID('tempdb..#temp_ord_detail', 'U') IS NOT NULL DROP TABLE #temp_ord_detail     SELECT DISTINCT       od.ORD_NUM,      od.ORD_DETAIL_FUND,      od.ORD_DETAIL_FACE      INTO #temp_ord_detail     FROM Vista_Staging.dbo.ORDERS_DETAIL od     INNER JOIN #max_touch_orders mto ON mto.ORD_NUM = od.ORD_NUM             IF OBJECT_ID('tempdb..#max_face', 'U') IS NOT NULL DROP TABLE #max_face     SELECT DISTINCT      od.ORD_NUM      ,od.ORD_DETAIL_FUND      ,MAX(od.ORD_DETAIL_FACE) AS MAX_FACE      ,CASE       WHEN ccy.CURRENCY IS NULL AND t.TRD_CURRENCY != t.SM_CURRENCY THEN MAX(od.ORD_DETAIL_FACE)/t.GBP_INDEX_RATE       WHEN ccy.CURRENCY IS NOT NULL AND t.TRD_CURRENCY != t.SM_CURRENCY THEN MAX(od.ORD_DETAIL_FACE)/t.INDEX_RATE       ELSE MAX(od.ORD_DETAIL_FACE)      END AS MAX_FACE_PRINCIP      ,t.ORD_NUM AS TRD_ORD     INTO #max_face     FROM #temp_ord_detail od      --LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD = od.ORD_NUM     --LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM = di.TRD_ORD     LEFT JOIN #temp_trd_fx_rates t ON t.ORD_NUM = od.ORD_NUM     LEFT JOIN VISTA_STAGING.dbo.REF_FI_OI_EMCCY_TO_USD ccy ON ccy.CURRENCY = t.SM_CURRENCY AND t.EXECUTION_TIME BETWEEN ccy.DATE_FROM AND ccy.DATE_TO      --OUTER APPLY (SELECT TOP 1 e.GBP_INDEX_RATE, e.INDEX_RATE, e.INDEX_NAME FROM VISTA_REPORTING.dbo.FX_RATES e      --    WHERE e.CURRENCY = t.SM_CURRENCY and CONVERT(date, e.MARKDATE) <= CONVERT(date, t.EXECUTION_TIME)     --    ORDER BY e.MARKDATE DESC) e     --WHERE EXISTS (SELECT DISTINCT mt.ORD_NUM FROM #max_touch_orders mt WHERE mt.ORD_NUM = od.ORD_NUM)        --AND EXISTS (SELECT tr.ORD_NUM FROM Vista_REPORTING.dbo.TRD_ORDERS tr WHERE tr.DEALING_DESK != 'Fixed Income' AND tr.ORD_NUM = oc.TRD_ORD)     GROUP BY od.ORD_NUM, od.ORD_DETAIL_FUND, t.ORD_NUM, t.SM_CURRENCY, t.TRD_CURRENCY, t.GBP_INDEX_RATE, t.INDEX_RATE, ccy.CURRENCY             --UNION         --SELECT DISTINCT     -- od.ORD_NUM     -- ,od.ORD_DETAIL_FUND     -- ,CASE     --  WHEN ccy.CURRENCY IS NULL AND t.TRD_CURRENCY != t.SM_CURRENCY THEN MAX(od.ORD_DETAIL_FACE)/e.GBP_INDEX_RATE     --  WHEN ccy.CURRENCY IS NOT NULL AND t.TRD_CURRENCY != t.SM_CURRENCY THEN MAX(od.ORD_DETAIL_FACE)/e.INDEX_RATE     --  ELSE MAX(od.ORD_DETAIL_FACE)     -- END AS MAX_FACE     -- ,oc.TRD_ORD     --FROM VISTA_STAGING.dbo.ORDERS_DETAIL od     --LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD = od.ORD_NUM     --LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM = oc.TRD_ORD     --LEFT JOIN VISTA_STAGING.dbo.REF_FI_OI_EMCCY_TO_USD ccy ON ccy.CURRENCY = t.SM_CURRENCY AND t.EXECUTION_TIME BETWEEN ccy.DATE_FROM AND ccy.DATE_TO      --OUTER APPLY (SELECT TOP 1 e.GBP_INDEX_RATE, e.INDEX_RATE, e.INDEX_NAME FROM VISTA_REPORTING.dbo.FX_RATES e      --    WHERE e.CURRENCY = t.SM_CURRENCY and CONVERT(date, e.MARKDATE) <= CONVERT(date, t.EXECUTION_TIME)     --    ORDER BY e.MARKDATE DESC) e      --WHERE EXISTS (SELECT tr.ORD_NUM FROM Vista_REPORTING.dbo.TRD_ORDERS tr WHERE tr.DEALING_DESK = 'Fixed Income' AND tr.ORD_NUM = t.ORD_NUM)     --GROUP BY od.ORD_NUM, od.ORD_DETAIL_FUND, oc.TRD_ORD, t.SM_CURRENCY, t.TRD_CURRENCY, e.GBP_INDEX_RATE, e.INDEX_RATE, ccy.CURRENCY             IF OBJECT_ID('tempdb..#latest_orders_detail', 'U') IS NOT NULL DROP TABLE #latest_orders_detail     select       od.ORD_NUM,      od.ORD_DETAIL_FUND     into #latest_orders_detail     from VISTA_STAGING.dbo.ORDERS_DETAIL od     WHERE EXISTS (SELECT DISTINCT mt.ORD_NUM FROM #max_touch_orders mt WHERE mt.ORD_NUM = od.ORD_NUM)             IF OBJECT_ID('tempdb..#temp_portgolio_groups', 'U') IS NOT NULL DROP TABLE #temp_portgolio_groups     SELECT DISTINCT      pg.*,      CASE        WHEN pg2.descendant IS NOT NULL THEN 1       ELSE 0      END AS MG_RET_FI_FLAG     INTO #temp_portgolio_groups     FROM VISTA_STAGING.dbo.PORTFOLIO_GROUP_CLOSURE_TABLE pg     LEFT JOIN (SELECT DISTINCT descendant FROM Vista_STAGING.dbo.PORTFOLIO_GROUP_CLOSURE_TABLE where ancestor = 'MG_RET_FI') pg2 ON pg2.descendant = pg.descendant                --1. Get Investment desks associated with all funds on a trade     IF OBJECT_ID('tempdb..#ClEx_inv_Desk', 'U') IS NOT NULL DROP TABLE #ClEx_inv_Desk     SELECT DISTINCT       t.CLIENT_EXECUTION_NUM,       p.ancestor      INTO #ClEx_inv_Desk     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN #temp_portgolio_groups p ON t.PORTFOLIOS_PORTFOLIO_NAME = p.descendant     --LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID = t.MULTI_FUND_ID     WHERE p.ancestor IN ('MG_ATCRED', 'MG_RET_FI', 'MG_INSTI', 'MG_INTER', 'MG_RESTCT', 'MG_IN_CAP',            'MG_LEVFIN', 'MG_MIB', 'MG_REDEBT', 'MG_US_FI') -- This is the list of investment desks provided in the business requirements documents        --AND pr.DEALING_DESK in ('Fixed Income', 'Equity', 'Leveraged Finance')        AND EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)        AND t.EXECUTION_TIME < '01-01-2021'         UNION         SELECT DISTINCT       t.CLIENT_EXECUTION_NUM,       p.ancestor      FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN #temp_portgolio_groups p ON t.PORTFOLIOS_PORTFOLIO_NAME = p.descendant     --LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID = t.MULTI_FUND_ID     WHERE p.ancestor IN ('MG_ATCRED', 'MGEU_ACRED', 'MG_RET_FI', 'MG_INSTI', 'MGEU_INSTI',           'MG_INTER', 'MG_RESTCT', 'MG_IN_CAP', 'MG_LEVFIN', 'MG_MIB', 'MG_REDEBT',           'MGEU_RDEBT', 'MG_US_FI') -- This is the list of investment desks provided in the business requirements documents        --AND pr.DEALING_DESK in ('Fixed Income', 'Equity', 'Leveraged Finance')        AND EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)        AND t.EXECUTION_TIME >= '01-01-2021'             IF OBJECT_ID('tempdb..#Inv_desk_concat', 'U') IS NOT NULL DROP TABLE #Inv_desk_concat     SELECT        CLIENT_EXECUTION_NUM,       STUFF((      SELECT DISTINCT ', ' + LTRIM(RTRIM(ancestor))      FROM #ClEx_inv_Desk       WHERE (CLIENT_EXECUTION_NUM = Results.CLIENT_EXECUTION_NUM)       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')       ,1,2,'') AS Inv_Desk_Concat     INTO #Inv_desk_concat     FROM #ClEx_inv_Desk Results     GROUP BY CLIENT_EXECUTION_NUM             /********************************************************************************/     /* Calculate the client fund NAV as sum of the NAVs of the base funds under it. */     /* Want to take NAV values for the last order before PM order auth time.        */     /********************************************************************************/         IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades     select distinct       t.CLIENT_EXECUTION_NUM      ,t.MULTI_FUND_ID      ,t.FUND      ,t.EXECUTION_TIME      ,t.PORTFOLIOS_PORTFOLIO_NAME      ,t.ORD_NUM      ,CASE        WHEN ccy.CURRENCY IS NOT NULL AND pr.DEALING_DESK = 'Fixed Income' THEN 1        WHEN ccy.CURRENCY IS NULL AND pr.DEALING_DESK = 'Fixed Income' THEN 0        ELSE pr.EMERGING_MARKET      END AS EMERGING_MARKET_FLAG      ,pr.DEALING_DESK     into #trades     from VISTA_REPORTING.dbo.TRADES as t     left join Vista_STAGING.dbo.REF_FI_OI_EMCCY_TO_USD ccy ON ccy.CURRENCY = t.SM_CURRENCY AND t.EXECUTION_TIME BETWEEN ccy.DATE_FROM AND ccy.DATE_TO     left join (SELECT DISTINCT ORD_NUM, AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS) as td on td.ORD_NUM = t.ORD_NUM     left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr on pr.MULTI_FUND_ID = t.MULTI_FUND_ID     where td.AUTH_TIME IS NOT NULL         AND td.ORD_NUM IS NOT NULL        AND EXISTS (SELECT DISTINCT di.CLIENT_EXECUTION_NUM FROM #temp_ot_flip_vg_table di WHERE di.CLIENT_EXECUTION_NUM = t.CLIENT_EXECUTION_NUM)         IF OBJECT_ID('tempdb..#lates_nav_dates', 'U') IS NOT NULL DROP TABLE #lates_nav_dates     SELECT      n.PORTFOLIO_NAME,       n.FUND,       n.NAV_PORT_DATE,       MAX(n.PULL_DATE) AS MAX_PULL_DATE      INTO #lates_nav_dates     FROM VISTA_REPORTING.dbo.NAV n     WHERE EXISTS (SELECT t.FUND FROM #trades t WHERE t.FUND=n.FUND)     GROUP BY       n.PORTFOLIO_NAME,       n.FUND,      n.NAV_PORT_DATE         IF OBJECT_ID('tempdb..#temp_nav_pre', 'U') IS NOT NULL DROP TABLE #temp_nav_pre     SELECT DISTINCT       PORTFOLIO_CURRENCY,       PORTFOLIO_NAME,      NAV_PORT_DATE,      FUND,      NAV_VALUE_USD,      NAV_VALUE_GBP,      PULL_DATE     INTO #temp_nav_pre     FROM VISTA_REPORTING.dbo.NAV n     INNER JOIN #temp_portgolio_groups pg2 ON pg2.descendant=n.PORTFOLIO_NAME     WHERE n.NAV_DATATYPE = 'NAV_FUND'        AND EXISTS (SELECT t.PORTFOLIOS_PORTFOLIO_NAME FROM #trades t            LEFT JOIN #temp_portgolio_groups pg ON pg.descendant = t.PORTFOLIOS_PORTFOLIO_NAME            WHERE pg.ancestor = pg2.ancestor           AND t.DEALING_DESK = 'Fixed Income')        AND pg2.ancestor NOT IN ('MG_PPL', 'MG_PRIL', 'MG_PXLF', 'PLI_CF', 'SFF_CF')         UNION         SELECT DISTINCT       PORTFOLIO_CURRENCY,       PORTFOLIO_NAME,      NAV_PORT_DATE,      FUND,      NAV_VALUE_USD,      NAV_VALUE_GBP,      PULL_DATE     FROM VISTA_REPORTING.dbo.NAV n     INNER JOIN #temp_portgolio_groups pg2 ON pg2.descendant=n.PORTFOLIO_NAME     WHERE n.NAV_DATATYPE = 'TOT_ASSETS'        AND EXISTS (SELECT t.PORTFOLIOS_PORTFOLIO_NAME FROM #trades t            LEFT JOIN #temp_portgolio_groups pg ON pg.descendant = t.PORTFOLIOS_PORTFOLIO_NAME            WHERE pg.ancestor = pg2.ancestor           AND t.DEALING_DESK = 'Fixed Income')        AND pg2.ancestor IN ('MG_PPL', 'MG_PRIL', 'MG_PXLF', 'PLI_CF', 'SFF_CF')         UNION         SELECT DISTINCT       PORTFOLIO_CURRENCY,       PORTFOLIO_NAME,      NAV_PORT_DATE,      FUND,      NAV_VALUE_USD,      NAV_VALUE_GBP,      PULL_DATE     FROM VISTA_REPORTING.dbo.NAV n     INNER JOIN #temp_portgolio_groups pg2 ON pg2.descendant=n.PORTFOLIO_NAME     WHERE EXISTS (SELECT t.PORTFOLIOS_PORTFOLIO_NAME FROM #trades t           LEFT JOIN #temp_portgolio_groups pg ON pg.descendant = t.PORTFOLIOS_PORTFOLIO_NAME           WHERE pg.ancestor = pg2.ancestor          AND t.DEALING_DESK = 'Leveraged Finance')               IF OBJECT_ID('tempdb..#temp_nav', 'U') IS NOT NULL DROP TABLE #temp_nav     SELECT tn.*      INTO #temp_nav     FROM #temp_nav_pre tn     WHERE EXISTS (SELECT nvd.PORTFOLIO_NAME           FROM #lates_nav_dates nvd           WHERE nvd.PORTFOLIO_NAME = tn.PORTFOLIO_NAME           AND nvd.NAV_PORT_DATE = tn.NAV_PORT_DATE           AND nvd.MAX_PULL_DATE = tn.PULL_DATE)             IF OBJECT_ID('tempdb..#temp_pgc', 'U') IS NOT NULL DROP TABLE #temp_pgc     SELECT DISTINCT       ancestor,      descendant,      depth      INTO #temp_pgc     FROM #temp_portgolio_groups     WHERE (ancestor IN ('MG_PRIL', 'MG_PXLF', 'MG_AALPXL', 'MG_ZI', 'MG_ZIB', 'MG_BT_PEN', 'MG_C_INS', 'MG_C_PEN',          'MG_PPL', 'MG_PSPS', 'OBMG', 'OBPC', 'OCMG', 'SAL', 'SACF')          OR CHARINDEX('_CF', ancestor) > 0)        AND depth != 0                  IF OBJECT_ID('tempdb..#fund_nav', 'U') IS NOT NULL DROP TABLE #fund_nav     SELECT DISTINCT PORTFOLIO_CURRENCY, FUND, PORTFOLIO_NAME      INTO #fund_nav     FROM #temp_nav             IF OBJECT_ID('tempdb..#base_nav', 'U') IS NOT NULL DROP TABLE #base_nav     SELECT DISTINCT       PORTFOLIO_NAME,      NAV_PORT_DATE,      FUND,      NAV_VALUE_GBP,       NAV_VALUE_USD,       PULL_DATE      INTO #base_nav     FROM #temp_nav         ---TODO     IF OBJECT_ID('tempdb..#base_funds', 'U') IS NOT NULL DROP TABLE #base_funds     -- Need to join to closure table twice, first to find the client fund the base fund is associated with     -- and second to find all the base funds under that client fund.     -- Then take all the data associated to the base funds that is before pm order auth time.     select distinct       t.CLIENT_EXECUTION_NUM      ,t.MULTI_FUND_ID      ,case when base_fund.FUND is null then nav1.fund else base_fund.FUND END as BASE_FUND      ,closure1.ancestor as CLIENT_FUND_NAME      ,closure2.descendant      ,CASE        WHEN t.EMERGING_MARKET_FLAG = 1 AND t.DEALING_DESK = 'Fixed Income'  THEN  case when base_fund.NAV_VALUE_USD IS NULL THEN nav1.NAV_VALUE_USD ELSE base_fund.NAV_VALUE_USD END       ELSE CASE WHEN base_fund.NAV_VALUE_GBP IS NULL THEN nav1.NAV_VALUE_GBP ELSE base_fund.NAV_VALUE_GBP END      END AS NAV_VALUE      ,CASE WHEN base_fund.NAV_PORT_DATE is null THEN nav1.NAV_PORT_DATE else base_fund.NAV_PORT_DATE END as NAV_PORT_DATE      ,CASE WHEN base_fund.PULL_DATE is null THEN nav1.PULL_DATE ELSE base_fund.PULL_DATE END as PULL_DATE      ,nav.PORTFOLIO_CURRENCY     into #base_funds     from #trades as t     left join #fund_nav nav on t.FUND = nav.FUND     left join #temp_pgc closure1 on closure1.descendant = t.PORTFOLIOS_PORTFOLIO_NAME     left join #temp_pgc closure2 on closure2.ancestor = closure1.ancestor     --Additional join to NAV in order to get full list of base funds for particular CLIENT FUND (This is fix to resolve problem of getting only base funds that have been seen in the past or are within batch for particular one day processing IDS)     left join VISTA_REPORTING.dbo.NAV nav1 on closure2.descendant = nav1.Portfolio_Name     left join #base_nav base_fund on base_fund.PORTFOLIO_NAME = closure2.descendant AND base_fund.NAV_PORT_DATE <= t.EXECUTION_TIME     where COALESCE(base_fund.NAV_PORT_DATE,nav1.NAV_PORT_DATE) <= t.EXECUTION_TIME-- Only nav values before the order was authorised.     --and t.client_execution_num = '15838-3496' order by Pull_date desc              --select distinct * from     --(select * from #trades)t     --left join     --(select * from #fund_nav) nav     --on     --t.fund = nav.FUND     --left join     --(select * from #temp_pgc) clos1     --on     --clos1.descendant = t.PORTFOLIOS_PORTFOLIO_NAME      --left join     --(select * from #temp_pgc) clos2     --on     --clos2.ancestor = clos1.ancestor     --left join     --(select * from #base_nav) fund     --on      --fund.PORTFOLIO_NAME = clos2.descendant AND fund.NAV_PORT_DATE <= t.EXECUTION_TIME     --where fund.NAV_PORT_DATE <= t.EXECUTION_TIME -- Only nav values before the order was authorised.         --IF OBJECT_ID('tempdb..#base_funds_second_pass', 'U') IS NOT NULL DROP TABLE #base_funds_second_pass     --select nav.CLIENT_EXECUTION_NUM,     --  nav.MULTI_FUND_ID,     --  nav1.fund as BASE_FUND,     --  nav.CLIENT_FUND_NAME,     --  nav.descendant,     --  nav1.NAV_VALUE,     --  nav1.NAV_PORT_DATE,     --  nav1.PULL_DATE,     --  nav.PORTFOLIO_CURRENCY     ----into #base_funds_second_pass     --from     --(select * from #base_funds where NAV_VALUE is null) nav     --inner join     --(     --select * from     --(select *,ROW_NUMBER() OVER(partition by fund order by NAV_PORT_DATE desc) as row_num from VISTA_REPORTING.dbo.NAV) d where d.row_num =1  ) nav1     -- on     -- nav.descendant = nav1.Portfolio_Name         -- IF OBJECT_ID('tempdb..#base_funds', 'U') IS NOT NULL DROP TABLE #base_funds     -- select *      -- --into #base_funds     -- from ##base_funds_first_pass s1     -- where base_fund.NAV_PORT_DATE <= t.EXECUTION_TIME -- Only nav values before the order was authorised.     -- UNION ALL     -- select *      -- from #base_funds_second_pass     -- where base_fund.NAV_PORT_DATE <= t.EXECUTION_TIME -- Only nav values before the order was authorised.         IF OBJECT_ID('tempdb..#max_base_port', 'U') IS NOT NULL DROP TABLE #max_base_port     SELECT       CLIENT_EXECUTION_NUM,      descendant,      MAX(NAV_PORT_DATE) AS MAX_PORT_DATE     INTO #max_base_port     FROM #base_funds      GROUP BY       CLIENT_EXECUTION_NUM,      descendant             IF OBJECT_ID('tempdb..#client_funds', 'U') IS NOT NULL DROP TABLE #client_funds     -- We already have only base fund data from before authorisation, take the latest.     select distinct       bf.CLIENT_EXECUTION_NUM      ,bf.CLIENT_FUND_NAME      ,bf.BASE_FUND      ,bf.NAV_VALUE      ,bf.NAV_PORT_DATE      ,bf.PULL_DATE      ,bf.PORTFOLIO_CURRENCY     into #client_funds     from #base_funds as bf     INNER JOIN #max_base_port bf2 ON bf2.CLIENT_EXECUTION_NUM = bf.CLIENT_EXECUTION_NUM              AND bf2.descendant=bf.descendant               AND bf2.MAX_PORT_DATE=bf.NAV_PORT_DATE where  bf.client_execution_num = '15838-3496'             IF OBJECT_ID('tempdb..#pre_client_fund_nav', 'U') IS NOT NULL DROP TABLE #pre_client_fund_nav     -- Sum all the base fund values under the client funds per client ex.     select       CLIENT_EXECUTION_NUM      ,CLIENT_FUND_NAME      ,PORTFOLIO_CURRENCY      ,SUM(NAV_VALUE) AS Client_Fund_NAV     into #pre_client_fund_nav     from #client_funds     WHERE CLIENT_FUND_NAME in ('MG_PRIL', 'MG_PXLF', 'MG_AALPXL', 'MG_ZI', 'MG_ZIB', 'MG_BT_PEN', 'MG_C_INS', 'MG_C_PEN', 'MG_PPL', 'MG_PSPS')     group by CLIENT_EXECUTION_NUM, CLIENT_FUND_NAME, PORTFOLIO_CURRENCY                  IF OBJECT_ID('tempdb..#client_fund_nav', 'U') IS NOT NULL DROP TABLE #client_fund_nav     select       cf.CLIENT_EXECUTION_NUM      ,cf.CLIENT_FUND_NAME      ,cf.PORTFOLIO_CURRENCY      ,SUM(cf.NAV_VALUE) AS Client_Fund_NAV     into #client_fund_nav     from #client_funds cf     WHERE NOT EXISTS (SELECT pcn.CLIENT_EXECUTION_NUM FROM #pre_client_fund_nav pcn WHERE pcn.CLIENT_EXECUTION_NUM = cf.CLIENT_EXECUTION_NUM)      group by CLIENT_EXECUTION_NUM, CLIENT_FUND_NAME, PORTFOLIO_CURRENCY          UNION         SELECT       CLIENT_EXECUTION_NUM,      CLIENT_FUND_NAME,      PORTFOLIO_CURRENCY,      Client_Fund_NAV     FROM #pre_client_fund_nav              IF OBJECT_ID('tempdb..#temp_Orders_Cross', 'U') IS NOT NULL DROP TABLE #temp_Orders_Cross      --Distinct Pm and Trd Order numbers from ORDERS_CROSS     select distinct       oc.pm_ord      ,oc.trd_ord     into #temp_Orders_Cross     from VISTA_REPORTING.dbo.orders_cross oc     WHERE EXISTS (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = oc.TRD_ORD)             IF OBJECT_ID('tempdb..#temp_PM_Orders', 'U') IS NOT NULL DROP TABLE #temp_PM_Orders     SELECT DISTINCT       COALESCE(pm.PM_FULL_NAME,PM) AS PM_FULL_NAME      ,MIN(pm.AUTH_TIME) AS AUTH_TIME      ,pm.ORD_NUM      ,pm.CUSIP      ,pm.DEALING_DESK     INTO #temp_PM_Orders     FROM VISTA_REPORTING.dbo.pm_orders pm     WHERE EXISTS (SELECT DISTINCT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = pm.ORD_NUM)   GROUP BY       COALESCE(pm.PM_FULL_NAME,PM)      ,pm.ORD_NUM      ,pm.CUSIP      ,pm.DEALING_DESK      --WHERE DEALING_DESK in ('Fixed Income', 'Equity', 'Leveraged Finance')             IF OBJECT_ID('tempdb..#PRIMARY_INST_TYPE_TABLE', 'U') IS NOT NULL DROP TABLE #PRIMARY_INST_TYPE_TABLE     --distinct PRIMARY_INST_TYPE     SELECT DISTINCT       pr.PRIMARY_MARKET      ,pr.PRIMARY_MARKET_ORDER_LEVEL      ,pr.INST_TYPE      ,pr.DEBT_DERIV      ,pr.MULTI_FUND_ID      ,SM_SEC_TYPE     INTO #PRIMARY_INST_TYPE_TABLE     FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr     WHERE EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = pr.MULTI_FUND_ID)             IF OBJECT_ID('tempdb..#TRD_ORDERS', 'U') IS NOT NULL DROP TABLE #TRD_ORDERS     --distinct Trd_Orders     SELECT DISTINCT       trd.ORD_NUM      , trd.TRADER      , trd.TRADER_FULL_NAME      , MIN(trd.AUTH_TIME) AS AUTH_TIME      , trd.SEC_DESC1     INTO #TRD_ORDERS      FROM VISTA_REPORTING.dbo.TRD_ORDERS trd     INNER JOIN (SELECT ORD_NUM, MAX(TOUCH_COUNT) AS MAX_TOUCH FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd2 ON trd2.ORD_NUM = trd.ORD_NUM AND trd2.MAX_TOUCH = trd.TOUCH_COUNT     WHERE EXISTS (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = trd.ORD_NUM)     GROUP BY       trd.ORD_NUM      , trd.TRADER      , trd.TRADER_FULL_NAME      , trd.SEC_DESC1             IF OBJECT_ID('tempdb..#min_touch', 'U') IS NOT NULL DROP TABLE #min_touch     SELECT      t1.ORD_NUM      ,t1.TRADER      ,t1.TRADER_FULL_NAME     INTO #min_touch     FROM VISTA_REPORTING.dbo.TRD_ORDERS as t1     JOIN (       SELECT        t1.ORD_NUM        ,MIN(t1.TOUCH_COUNT) as MIN_TOUCH       FROM VISTA_REPORTING.dbo.TRD_ORDERS as t1       GROUP BY t1.ORD_NUM      )      as t2 on t1.ORD_NUM=t2.ORD_NUM and t1.TOUCH_COUNT=t2.MIN_TOUCH     WHERE EXISTS (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = t1.ORD_NUM)             IF OBJECT_ID('tempdb..#max_touch_trades', 'U') IS NOT NULL DROP TABLE #max_touch_trades     SELECT      t1.MULTI_FUND_ID      ,t1.EXECUTION_TIME     INTO #max_touch_trades     FROM VISTA_REPORTING.dbo.TRADES as t1     INNER JOIN (       SELECT        t3.MULTI_FUND_ID        ,MAX(t3.TOUCH_COUNT) as MAX_TOUCH       FROM VISTA_REPORTING.dbo.TRADES as t3       WHERE EXISTS (SELECT DISTINCT di.MULTI_FUND_ID             FROM #distinct_ids di             WHERE di.MULTI_FUND_ID = t3.MULTI_FUND_ID)        GROUP BY t3.MULTI_FUND_ID      ) t2 on t1.MULTI_FUND_ID=t2.MULTI_FUND_ID and t1.TOUCH_COUNT=t2.MAX_TOUCH     WHERE EXISTS (SELECT DISTINCT di.MULTI_FUND_ID             FROM #distinct_ids di             WHERE di.MULTI_FUND_ID = t1.MULTI_FUND_ID)              IF OBJECT_ID('tempdb..#max_touch_cex', 'U') IS NOT NULL DROP TABLE #max_touch_cex     SELECT      t.CLIENT_EXECUTION_NUM,      MAX(t.TOUCH_COUNT) AS MAX_TOUCH     INTO #max_touch_cex     FROM Vista_Reporting.dbo.TRADES t     WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)     GROUP BY t.CLIENT_EXECUTION_NUM             IF OBJECT_ID('tempdb..#trades2', 'U') IS NOT NULL DROP TABLE #trades2     SELECT DISTINCT       t.MULTI_FUND_ID,      t.ORD_NUM,      t.CLIENT_EXECUTION_NUM,      t.TRD_COUPON,      t.DESC_INSTMT,      t.SM_SEC_GROUP,      t.SM_SEC_TYPE,      t.TRAN_TYPE,      t.CUSIP,      t.TRD_CURRENCY,      t.FUND,      t.EXECUTION_TIME,      t.SEDOL,      t.TRD_PRICE_GBP,      CASE       WHEN ccy.CURRENCY IS NOT NULL AND t.TRD_CURRENCY != t.SM_CURRENCY THEN t.TRD_PRICE/e.INDEX_RATE       ELSE t.TRD_PRICE_GBP      END AS TRD_PRICE_CONVERTED,      CASE       WHEN ccy.CURRENCY IS NOT NULL AND t.TRD_CURRENCY != t.SM_CURRENCY THEN t.TRD_PRICE/e.GBP_INDEX_RATE       ELSE t.TRD_PRICE_GBP      END AS TRD_PRICE_CONVERTED_GBP,      t.TRD_ORIG_FACE,      t.TRD_PRICE,      t.TRD_TRADER,      t.TRD_SETTLE_DATE,      t.PORTFOLIOS_PORTFOLIO_NAME,      t.TRD_COUNTERPARTY,      t.EXECUTION_TYPE_DECODE,      t.TRD_PURPOSE     INTO #trades2     FROM VISTA_REPORTING.dbo.TRADES t     INNER JOIN #max_touch_cex t2 ON t2.CLIENT_EXECUTION_NUM = t.CLIENT_EXECUTION_NUM AND t2.MAX_TOUCH = t.TOUCH_COUNT     LEFT JOIN VISTA_STAGING.dbo.REF_FI_OI_EMCCY_TO_USD ccy ON ccy.CURRENCY = t.SM_CURRENCY AND t.EXECUTION_TIME BETWEEN ccy.DATE_FROM AND ccy.DATE_TO      OUTER APPLY (SELECT TOP 1 e.GBP_INDEX_RATE, e.INDEX_RATE, e.INDEX_NAME FROM #temp_fx_rates e          WHERE e.CURRENCY = t.SM_CURRENCY and CONVERT(date, e.MARKDATE) <= CONVERT(date, t.EXECUTION_TIME)         ORDER BY e.MARKDATE DESC) e      WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)              IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     SELECT DISTINCT      cast(pm.AUTH_TIME as datetime) as [Auth_Time],      oi.ORD_NUM AS [Order_ID],       t.MULTI_FUND_ID AS [Market_Execution_ID],       oi.CLIENT_EXECUTION_NUM AS [Client_Execution_ID],       NULL AS [Previous_Order_ID],       CONVERT(DATE,max_trade.EXECUTION_TIME) AS [Execution_Date],       pm.PM_FULL_NAME AS [Fund_Manager],       inv_Desk.Inv_Desk_Concat AS [Investment_Desk],       CASE       WHEN pm.DEALING_DESK='Fixed Income'        THEN        CASE         WHEN pt.DEBT_DERIV = 'DEBT'          THEN          CASE           WHEN t.TRD_COUPON IS NOT NULL AND i2.TICKER IS NOT NULL AND i2.MATURITY IS NOT NULL            THEN CONCAT(ISNULL(i2.TICKER,''),' ', CAST(ISNULL(t.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))           ELSE  CONCAT(ISNULL(tro.SEC_DESC1,''),' ', CAST(ISNULL(t.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))          END          ELSE t.DESC_INSTMT        END       WHEN pm.DEALING_DESK='Equity'       THEN tro.SEC_DESC1       WHEN pm.DEALING_DESK='Leveraged Finance'       THEN t.DESC_INSTMT      END AS [Description],        t.SM_SEC_GROUP AS [Asset_Type],      t.SM_SEC_TYPE AS [Asset_SubType],       i2.CURRENCY AS [Currency],      t.SEDOL AS [SEDOL],      i2.ISIN AS [ISIN],       t.CUSIP AS [CUSIP],       t.TRAN_TYPE as [Side],      pt.PRIMARY_MARKET AS [New_Issue],      CONVERT(DATE,pm.AUTH_TIME)  AS [Approved_DateTime],       NULL AS [Issue_Size], -- We do not know the get details for the issue size out of Aladdin -> Can't calculate this.      CONVERT(DECIMAL(30,0),mf.MAX_FACE) AS [Proposed_Quantity],      CONVERT(DECIMAL(30,2),(mf.MAX_FACE_PRINCIP*t.TRD_PRICE_CONVERTED/100)) AS [Proposed_Value_(Instrument_Base)],       CONVERT(DECIMAL(30,2),(mf.MAX_FACE_PRINCIP*t.TRD_PRICE_CONVERTED/100)) AS [Proposed_Value_(Fund_Base)],       t.TRD_CURRENCY AS [Execution_Currency],       NULL AS [Proposed_as_%_Of_Issue],  -- We do not know the get details for the issue size out of Aladdin -> Can't calculate this.      CONVERT(DECIMAL(30,0),ABS(t.TRD_ORIG_FACE)) AS [Executed_Quantity],       CONVERT(DECIMAL(30,2), (mf.MAX_FACE_PRINCIP*t.TRD_PRICE_CONVERTED)) AS [Gross_Consideration_(Instrument_Base)], -- What is the difference between the fund base and instrument base gross consideration?      CONVERT(DECIMAL(30,2), (mf.MAX_FACE_PRINCIP*t.TRD_PRICE_CONVERTED)) AS [Gross_Consideration_(Fund_Base)], -- What is the difference between the fund base and instrument base gross consideration?      t.TRD_COUNTERPARTY AS [Counterparty],       CONVERT(DECIMAL(12,2),t.TRD_PRICE / 100) AS [Price],       t.TRD_TRADER AS [Dealer],       CONVERT(DECIMAL(30,2),(t.TRD_ORIG_FACE/nullif(mf.MAX_FACE,0) * 100)) AS [%_Allocated],       cfn.PORTFOLIO_CURRENCY AS [Fund_Currency],      t.TRD_SETTLE_DATE AS [First_Settle_Date],       t.PORTFOLIOS_PORTFOLIO_NAME AS [Base_Fund],       CONVERT(DECIMAL(30,2), NULLIF(n.NAV_VALUE_GBP, 0)) AS [Base_Fund_NAV_GBP],       CONVERT(DECIMAL(30,2), ((mf.MAX_FACE_PRINCIP*t.TRD_PRICE_CONVERTED)/NULLIF(n.NAV_VALUE_GBP, 0)))   AS [Proposed_Value_As_%_NAV_(Base_Fund)],       NULL AS [Executed_As_%_Of_Issue_Size], --Placeholder column to allow front end development. Logic is required to be developed to fill this column      CONVERT(DECIMAL(30,2), ((t.TRD_ORIG_FACE*t.TRD_PRICE_CONVERTED)/NULLIF(n.NAV_VALUE_GBP, 0)))     AS [Executed_As_%_Of_Base_NAV],      CONVERT(DECIMAL(30,2),ABS(TRD_ORIG_FACE * TRD_PRICE_CONVERTED)/NULLIF(cfn.Client_Fund_NAV,0))   AS [Executed_As_%_Of_Client_NAV],      oi.EXCEPTION AS [NAV_Threshold_Breached?],       cfn.CLIENT_FUND_NAME AS [Client_Fund],       cfn.Client_Fund_NAV AS Client_Fund_NAV_GBP,       CONVERT(DECIMAL(30,2),(mf.MAX_FACE*t.TRD_PRICE_CONVERTED_GBP/100)) AS [Proposed_Principle_Value_GBP],       CONVERT(DECIMAL(30,2),(mf.MAX_FACE*t.TRD_PRICE_CONVERTED_GBP)/NULLIF(cfn.Client_Fund_NAV,0))  AS [Proposed_Principle_Value_%_CLIENT_NAV],       CONVERT(DECIMAL(30,2), ((t.TRD_ORIG_FACE*t.TRD_PRICE_CONVERTED)/NULLIF(n.NAV_VALUE_GBP, 0)))     AS [Executed_%],       NULL AS [Executed_Value_FUND_BASE],      null as [fund],      NULL AS [Further_Desk_Comments], --Placeholder column to allow front end development. Logic is required to be developed to fill this column      CONVERT(DECIMAL(30,2),(t.TRD_ORIG_FACE*t.TRD_PRICE_CONVERTED/100)) AS [Principle_Executed], --Placeholder column to allow front end development. Logic is required to be developed to fill this column      pt.PRIMARY_MARKET AS [PRIMARY_MARKET],      t.TRD_COUNTERPARTY as [TRD_COUNTERPARTY],      t.EXECUTION_TYPE_DECODE AS [EXECUTION_TYPE_DECODE],      concat(LTRIM(RTRIM(i2.SM_SEC_GROUP)),'/',LTRIM(RTRIM(i2.SM_SEC_TYPE))) as [Asset_Type/Subtype],      CONCAT(YEAR(pm.AUTH_TIME),'-',left(datename(m,pm.AUTH_TIME),3)) AS MONTH_YEAR,      pt.INST_TYPE as [INST_TYPE],      oi.DEALING_DESK as [DEALING_DESK],      oi.EXCEPTION as [VG_08],      oi.CREATETIME as [VG_08_CREATETIME],      NULL as [VG_06],      NULL as [VG_06_CREATETIME],      tro.ORD_NUM as [Order],      tro.TRADER_FULL_NAME as [TRADER_FULL_NAME],      t.TRD_PURPOSE as [TRD_PURPOSE],      'Order Inflation' AS [Exception_Type] --  Required for front end filtering for OI queries.     INTO #temp_final_master_table     FROM #temp_ot_flip_vg_table oi     INNER JOIN #trades2 t ON t.CLIENT_EXECUTION_NUM = oi.CLIENT_EXECUTION_NUM      LEFT JOIN #max_face mf ON mf.ORD_NUM=oi.ORD_NUM AND t.FUND = mf.ORD_DETAIL_FUND     LEFT JOIN (SELECT DISTINCT EXECUTION_TIME,MULTI_FUND_ID FROM #max_touch_trades) as max_trade on max_trade.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN (SELECT DISTINCT ORD_NUM,DEALING_DESK,AUTH_TIME,CUSIP,PM_FULL_NAME FROM #temp_PM_Orders WHERE AUTH_TIME IS NOT NULL) pm ON oi.ORD_NUM = pm.ORD_NUM     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID,INST_TYPE,PRIMARY_MARKET,DEBT_DERIV, SM_SEC_TYPE FROM  #PRIMARY_INST_TYPE_TABLE) pt ON t.MULTI_FUND_ID = pt.MULTI_FUND_ID     LEFT JOIN (SELECT DISTINCT ORD_NUM, TRADER_FULL_NAME,AUTH_TIME,SEC_DESC1 FROM #TRD_ORDERS) tro ON t.ORD_NUM = tro.ORD_NUM     LEFT JOIN (SELECT DISTINCT Inv_Desk_Concat,CLIENT_EXECUTION_NUM FROM  #Inv_desk_concat) inv_desk ON t.CLIENT_EXECUTION_NUM = inv_desk.CLIENT_EXECUTION_NUM     LEFT JOIN (SELECT DISTINCT PORTFOLIO_CURRENCY,Client_Fund_NAV,CLIENT_FUND_NAME,CLIENT_EXECUTION_NUM FROM #client_fund_nav) as cfn ON cfn.CLIENT_EXECUTION_NUM = t.CLIENT_EXECUTION_NUM     LEFT JOIN #latest_orders_detail od ON od.ORD_NUM=pm.ORD_NUM AND t.FUND = od.ORD_DETAIL_FUND     OUTER APPLY (SELECT TOP 1          i.TICKER,         i.MATURITY,         i.CURRENCY,         i.ISIN,         i.SM_SEC_GROUP,         i.SM_SEC_TYPE          FROM VISTA_STAGING.dbo.INSTRUMENTS i          WHERE (i.CUSIP=coalesce(t.CUSIP, pm.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(t.EXECUTION_TIME, pm.AUTH_TIME)))          ORDER BY i.DATE DESC) as i2     OUTER APPLY (SELECT TOP 1 n.NAV_VALUE_GBP          FROM #temp_nav n          WHERE n.FUND=t.FUND and n.NAV_PORT_DATE<=convert(date, tro.AUTH_TIME) AND NAV_VALUE_USD <> 0 ORDER BY n.NAV_PORT_DATE DESC) n     WHERE od.ORD_NUM IS NOT NULL         AND oi.EXCEPTION_TYPE = 'VG_08' -- We do not want to include other PM Orders that have been merged        AND pt.PRIMARY_MARKET = 1             UNION         SELECT DISTINCT      cast(pm.AUTH_TIME as datetime) as [Auth_Time],      oc.PM_ORD AS [Order_ID],       t.MULTI_FUND_ID AS [Market_Execution_ID],       t.CLIENT_EXECUTION_NUM AS [Client_Execution_ID],       NULL AS [Previous_Order_ID],       CONVERT(DATE,max_trade.EXECUTION_TIME) AS [Execution_Date],       pm.PM_FULL_NAME AS [Fund_Manager],       inv_Desk.Inv_Desk_Concat AS [Investment_Desk],       CASE       WHEN pm.DEALING_DESK='Fixed Income'        THEN        CASE         WHEN pt.DEBT_DERIV = 'DEBT'          THEN          CASE           WHEN t.TRD_COUPON IS NOT NULL AND i2.TICKER IS NOT NULL AND i2.MATURITY IS NOT NULL            THEN CONCAT(ISNULL(i2.TICKER,''),' ', CAST(ISNULL(t.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))           ELSE  CONCAT(ISNULL(tro.SEC_DESC1,''),' ', CAST(ISNULL(t.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))          END          ELSE t.DESC_INSTMT        END       WHEN pm.DEALING_DESK='Equity'       THEN tro.SEC_DESC1       WHEN pm.DEALING_DESK='Leveraged Finance'       THEN t.DESC_INSTMT      END AS [Description],       t.SM_SEC_GROUP AS [Asset_Type],      t.SM_SEC_TYPE AS [Asset_SubType],       i2.CURRENCY AS [Currency],      t.SEDOL AS [SEDOL],       i2.ISIN AS [ISIN],       t.CUSIP AS [CUSIP],       t.TRAN_TYPE as [Side],      pt.PRIMARY_MARKET AS [New_Issue],      CONVERT(DATE,pm.AUTH_TIME)  AS [Approved_DateTime],       NULL AS [Issue_Size], -- We do not know the get details for the issue size out of Aladdin -> Can't calculate this.      CONVERT(DECIMAL(30,0),mf.MAX_FACE) AS [Proposed_Quantity],      CONVERT(DECIMAL(30,2),(mf.MAX_FACE_PRINCIP*t.TRD_PRICE_CONVERTED/100)) AS [Proposed_Value_(Instrument_Base)],       CONVERT(DECIMAL(30,2),(mf.MAX_FACE_PRINCIP*t.TRD_PRICE_CONVERTED/100)) AS [Proposed_Value_(Fund_Base)],       t.TRD_CURRENCY AS [Execution_Currency],       NULL AS [Proposed_as_%_Of_Issue],  -- We do not know the get details for the issue size out of Aladdin -> Can't calculate this.      CONVERT(DECIMAL(30,0),ABS(t.TRD_ORIG_FACE)) AS [Executed_Quantity],       CONVERT(DECIMAL(30,2), (mf.MAX_FACE_PRINCIP*t.TRD_PRICE_CONVERTED)) AS [Gross_Consideration_(Instrument_Base)], -- What is the difference between the fund base and instrument base gross consideration?      CONVERT(DECIMAL(30,2), (mf.MAX_FACE_PRINCIP*t.TRD_PRICE_CONVERTED)) AS [Gross_Consideration_(Fund_Base)], -- What is the difference between the fund base and instrument base gross consideration?      t.TRD_COUNTERPARTY AS [Counterparty],       CONVERT(DECIMAL(12,2),t.TRD_PRICE / 100) AS [Price],       t.TRD_TRADER AS [Dealer],       CONVERT(DECIMAL(30,2),(t.TRD_ORIG_FACE/nullif(mf.MAX_FACE,0) * 100)) AS [%_Allocated],       cfn.PORTFOLIO_CURRENCY AS [Fund_Currency],      t.TRD_SETTLE_DATE AS [First_Settle_Date],       t.PORTFOLIOS_PORTFOLIO_NAME AS [Base_Fund],       CONVERT(DECIMAL(30,2), NULLIF(n.NAV_VALUE_GBP, 0)) AS [Base_Fund_NAV_GBP],       CONVERT(DECIMAL(30,2), ABS((mf.MAX_FACE_PRINCIP*t.TRD_PRICE_CONVERTED)/NULLIF(n.NAV_VALUE_GBP, 0))) AS [Proposed_Value_As_%_NAV_(Base_Fund)],       NULL AS [Executed_As_%_Of_Issue_Size], --Placeholder column to allow front end development. Logic is required to be developed to fill this column      CONVERT(DECIMAL(30,2), ABS((t.TRD_ORIG_FACE*t.TRD_PRICE_CONVERTED)/NULLIF(n.NAV_VALUE_GBP, 0))) AS [Executed_As_%_Of_Base_NAV],      CONVERT(DECIMAL(30,2),ABS(TRD_ORIG_FACE * TRD_PRICE_CONVERTED)/NULLIF(cfn.Client_Fund_NAV,0)) AS [Executed_As_%_Of_Client_NAV],      NULL AS [NAV_Threshold_Breached?],       cfn.CLIENT_FUND_NAME AS [Client_Fund],       cfn.Client_Fund_NAV AS Client_Fund_NAV_GBP,       CONVERT(DECIMAL(30,2),ABS(mf.MAX_FACE_PRINCIP*t.TRD_PRICE_CONVERTED/100)) AS [Proposed_Principle_Value_GBP],       CONVERT(DECIMAL(30,2),ABS(mf.MAX_FACE_PRINCIP*t.TRD_PRICE_CONVERTED) / NULLIF(cfn.Client_Fund_NAV,0)) AS [Proposed_Principle_Value_%_CLIENT_NAV],       CONVERT(DECIMAL(30,2), ABS((t.TRD_ORIG_FACE*t.TRD_PRICE_CONVERTED)/NULLIF(n.NAV_VALUE_GBP, 0))) AS [Executed_%],       NULL AS [Executed_Value_FUND_BASE],      null as [fund],      NULL AS [Further_Desk_Comments], --Placeholder column to allow front end development. Logic is required to be developed to fill this column      CONVERT(DECIMAL(30,2),(t.TRD_ORIG_FACE*t.TRD_PRICE_CONVERTED/100)) AS [Principle_Executed], --Placeholder column to allow front end development. Logic is required to be developed to fill this column      pt.PRIMARY_MARKET AS [PRIMARY_MARKET],      t.TRD_COUNTERPARTY as [TRD_COUNTERPARTY],      t.EXECUTION_TYPE_DECODE AS [EXECUTION_TYPE_DECODE],      concat(LTRIM(RTRIM(i2.SM_SEC_GROUP)),'/',LTRIM(RTRIM(i2.SM_SEC_TYPE))) as [Asset_Type/Subtype],      CONCAT(YEAR(pm.AUTH_TIME),'-',left(datename(m,pm.AUTH_TIME),3)) AS MONTH_YEAR,      pt.INST_TYPE as [INST_TYPE],      flip.DEALING_DESK as [DEALING_DESK],      NULL as [VG_08],      NULL as [VG_08_CREATETIME],      flip.EXCEPTION as [VG_06],      flip.CREATETIME as [VG_06_CREATETIME],      tro.ORD_NUM as [Order],      tro.TRADER_FULL_NAME as [TRADER_FULL_NAME],      t.TRD_PURPOSE as [TRD_PURPOSE],      'Follow on' AS [Exception_Type]     FROM  #temp_ot_flip_vg_table flip      INNER JOIN #trades2 t ON t.CLIENT_EXECUTION_NUM = flip.CLIENT_EXECUTION_NUM     LEFT JOIN #max_touch_trades as max_trade on max_trade.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN  #temp_Orders_Cross oc ON t.ORD_NUM = oc.TRD_ORD     LEFT JOIN (SELECT DISTINCT DEALING_DESK,ORD_NUM,PM_FULL_NAME,CUSIP,AUTH_TIME FROM #temp_PM_Orders where AUTH_TIME IS NOT NULL) pm ON oc.PM_ORD = pm.ORD_NUM     LEFT JOIN (SELECT DISTINCT PRIMARY_MARKET,MULTI_FUND_ID,INST_TYPE,DEBT_DERIV FROM #PRIMARY_INST_TYPE_TABLE) pt ON t.MULTI_FUND_ID = pt.MULTI_FUND_ID     LEFT JOIN (SELECT DISTINCT ORD_NUM,TRADER_FULL_NAME,SEC_DESC1,AUTH_TIME FROM #TRD_ORDERS) tro ON t.ORD_NUM = tro.ORD_NUM     LEFT JOIN (SELECT DISTINCT CLIENT_EXECUTION_NUM,Inv_Desk_Concat FROM #Inv_desk_concat) inv_desk ON t.CLIENT_EXECUTION_NUM = inv_desk.CLIENT_EXECUTION_NUM     LEFT JOIN (SELECT DISTINCT PORTFOLIO_CURRENCY,Client_Fund_NAV,CLIENT_FUND_NAME,CLIENT_EXECUTION_NUM FROM #client_fund_nav) as cfn ON cfn.CLIENT_EXECUTION_NUM = t.CLIENT_EXECUTION_NUM     --LEFT JOIN #latest_orders_detail od ON od.ORD_NUM=tro.ORD_NUM AND t.FUND = od.ORD_DETAIL_FUND     OUTER APPLY (SELECT TOP 1          i.TICKER,         i.MATURITY,         i.CURRENCY,         i.ISIN,         i.SM_SEC_GROUP,         i.SM_SEC_TYPE         FROM VISTA_STAGING.dbo.INSTRUMENTS i          WHERE (i.CUSIP=coalesce(t.CUSIP, pm.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(t.EXECUTION_TIME, pm.AUTH_TIME)))          ORDER BY i.DATE DESC) as i2     OUTER APPLY (SELECT TOP 1 n.NAV_VALUE_GBP          FROM VISTA_REPORTING.dbo.NAV n          WHERE n.FUND=t.FUND and n.NAV_PORT_DATE <=convert(date, tro.AUTH_TIME) AND NAV_VALUE <> 0  ORDER BY n.NAV_PORT_DATE DESC) n     LEFT JOIN #max_face mf ON mf.ORD_NUM=tro.ORD_NUM AND t.FUND = mf.ORD_DETAIL_FUND     WHERE flip.EXCEPTION_TYPE = 'VG_06'        AND oc.PM_ORD IS NOT NULL              IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE_TESTING', 'U') IS NOT NULL     DELETE FROM VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE_TESTING     WHERE Market_Execution_ID IN (SELECT DISTINCT di.MULTI_FUND_ID              FROM #distinct_ids di)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE_TESTING', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE_TESTING     SELECT *     FROM #temp_final_master_table         ELSE         SELECT *     INTO VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE_TESTING     FROM #temp_final_master_table             --IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes       --           WHERE name = N'mce_idx1')        --   DROP INDEX mce_idx1      --ON VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE          --CREATE NONCLUSTERED INDEX mce_idx1     --ON VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE      --([Order_ID], [Market_Execution_ID], [CLient_Execution_ID], [Previous_Order_ID], VG_08_CREATETIME, VG_06_CREATETIME)             --IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes       --           WHERE name = N'mce_idx2')        --   DROP INDEX mce_idx2      --ON VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE          --CREATE NONCLUSTERED INDEX mce_idx2     --ON VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE      --(Dealing_Desk, Exception_Type, Execution_Date)              IF OBJECT_ID('tempdb..#max_touch_orders', 'U') IS NOT NULL DROP TABLE #max_touch_orders     IF OBJECT_ID('tempdb..#max_face', 'U') IS NOT NULL DROP TABLE #max_face     IF OBJECT_ID('tempdb..#temp_portgolio_groups', 'U') IS NOT NULL DROP TABLE #temp_portgolio_groups     IF OBJECT_ID('tempdb..#ClEx_inv_Desk', 'U') IS NOT NULL DROP TABLE #ClEx_inv_Desk     IF OBJECT_ID('tempdb..#Inv_desk_concat', 'U') IS NOT NULL DROP TABLE #Inv_desk_concat     IF OBJECT_ID('tempdb..#temp_ot_flip_vg_table', 'U') IS NOT NULL DROP TABLE #temp_ot_flip_vg_table     IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades     IF OBJECT_ID('tempdb..#temp_nav', 'U') IS NOT NULL DROP TABLE #temp_nav     IF OBJECT_ID('tempdb..#temp_pgc', 'U') IS NOT NULL DROP TABLE #temp_pgc     IF OBJECT_ID('tempdb..#base_funds', 'U') IS NOT NULL DROP TABLE #base_funds     IF OBJECT_ID('tempdb..#client_funds', 'U') IS NOT NULL DROP TABLE #client_funds     IF OBJECT_ID('tempdb..#client_fund_nav', 'U') IS NOT NULL DROP TABLE #client_fund_nav     IF OBJECT_ID('tempdb..#temp_Orders_Cross', 'U') IS NOT NULL DROP TABLE #temp_Orders_Cross      IF OBJECT_ID('tempdb..#temp_PM_Orders', 'U') IS NOT NULL DROP TABLE #temp_PM_Orders     IF OBJECT_ID('tempdb..#PRIMARY_INST_TYPE_TABLE', 'U') IS NOT NULL DROP TABLE #PRIMARY_INST_TYPE_TABLE     IF OBJECT_ID('tempdb..#TRD_ORDERS', 'U') IS NOT NULL DROP TABLE #TRD_ORDERS     IF OBJECT_ID('tempdb..#min_touch', 'U') IS NOT NULL DROP TABLE #min_touch     IF OBJECT_ID('tempdb..#max_touch_trades', 'U') IS NOT NULL DROP TABLE #max_touch_trades     IF OBJECT_ID('tempdb..#trades2', 'U') IS NOT NULL DROP TABLE #trades2                    END                --EXEC Vista_STAGING.[dbo].[MASTER_CLIENT_EXECUTION_TABLE_TESTING]             --select * INTO VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE_2021_07_22 from VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE        --select * from VISTA_REPORTING.dbo.MASTER_CLIENT_EXECUTION_TABLE_TESTING where VG_08 = 1 and Execution_Date = '2021-06-30'  --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_INV_DESK  CreateDate: 2025-06-26 17:48:57.987  ModifyDate: 2025-06-26 17:49:20.187  --- DEFINITION START ---  -- =============================================    -- Author:  <Author,,Name>    -- Create date: <Create Date,,>    -- Description: <Description,,>    -- =============================================    CREATE   PROCEDURE [dbo].[MASTER_INV_DESK]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;    IF OBJECT_ID('VISTA_REPORTING.DBO.MASTER_INV_DESK', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.DBO.MASTER_INV_DESK    --SELECT distinct MASTER_INV_DESK.* INTO VISTA_REPORTING.DBO.MASTER_INV_DESK FROM    --(    SELECT         MASTER_MULTI_FUND_ID_TABLE.[Inv desk] AS InvDeskCode,        MASTER_MULTI_FUND_ID_TABLE.[Inv desk] AS InvDeskDescription    INTO VISTA_REPORTING.DBO.MASTER_INV_DESK    FROM VISTA_REPORTING.DBO.MASTER_MULTI_FUND_ID_TABLE    WHERE [Inv desk] != ''        UNION        SELECT         MASTER_PM_ORDER.[Inv desk] AS InvDeskCode,        MASTER_PM_ORDER.[Inv desk] AS InvDeskDescription    FROM VISTA_REPORTING.DBO.MASTER_PM_ORDER    WHERE [Inv desk] != ''        UNION        SELECT         MASTER_TRD_ORDER_TABLE.[Inv desk] AS InvDeskCode,        MASTER_TRD_ORDER_TABLE.[Inv desk] AS InvDeskDescription    FROM VISTA_REPORTING.DBO.MASTER_TRD_ORDER_TABLE    WHERE [Inv desk] != ''        UNION        SELECT         MASTER_CLIENT_EXECUTION_TABLE.[Investment_Desk] AS InvDeskCode,        MASTER_CLIENT_EXECUTION_TABLE.[Investment_Desk] AS InvDeskDescription            FROM VISTA_REPORTING.DBO.MASTER_CLIENT_EXECUTION_TABLE    WHERE [Investment_Desk] != ''        --) AS MASTER_INV_DESK        --WHERE MASTER_INV_DESK.InvDeskDescription <> ''        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_MFID_TABLE_VG_01_QUOTE_EXCEPTION_DMG  CreateDate: 2025-06-26 17:49:36.290  ModifyDate: 2025-06-26 17:49:36.290  --- DEFINITION START ---  -- =============================================    -- Author:  <ELIZABETH REYNOLDS>    -- Create date: <05/04/2019>    -- Description:     -- <Master exception table for QUOTE EXCEPTION    -- Exception test for DMG.>    -- =============================================        -- ***************VERSION CONTROL***************    -- 2019-05-14 - DDC: Added PM_ORDER as the 'ORDER' field    --    MS: Added in TRD_EX_BROKER_CODE    -- *********************************************        CREATE PROCEDURE [dbo].[MASTER_MFID_TABLE_VG_01_QUOTE_EXCEPTION_DMG]     -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,         AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         --Used to track total time stored procedure took to run     DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()         IF OBJECT_ID('tempdb..#trades_metadata', 'U') IS NOT NULL DROP TABLE #trades_metadata     SELECT DISTINCT      t.MULTI_FUND_ID,      t.TRD_COUNTERPARTY,      t.CLIENT_EXECUTION_NUM,      t.COMMENTS,      t.INDICATIVE_COMMENTS,      t.EXECUTION_TIME,      t.ORD_NUM,      t.CUSIP,      t.PLACEMENT_NUM,      t.TRD_AUTH_TIME,      t.B3Q_RATIONALE,      t.NWQ_RATIONALE,      t.TRAN_TYPE,      t.TRD_CURRENCY,      t.TRD_PRICE,      t.TRD_PRICING_SPREAD,      t.TRD_COUPON,      t.TRD_ORIG_FACE,      t.TRD_YIELD,      t.TRD_ENTRY_TIME,      t.TRD_TRADE_DATE,      t.ACTIVITY_TYPE,      t.ACTIVITY_TYPE_DECODE,      t.TRDCOMM_COMMENTS,      t.EXECUTION_TYPE_DECODE,      t.NET_CONSIDERATION_GBP,      t.COUNTERPARTY_CODE,      t.PORTFOLIOS_PORTFOLIO_NAME,      t.SM_CURRENCY,      t.TRD_PURPOSE,      t.TRD_EX_DESK_TYPE,      t.CONTRACT_SIZE,      t.FinalFlag,      t.TRD_EX_BROKER_CODE,      t.MATURITY,      t.TRD_PRINCIPAL_GBP,      nc.CUTOFF     INTO #trades_metadata     FROM VISTA_REPORTING.dbo.TRADES t     --INNER JOIN Vista_Staging.dbo.VG_01_QUOTE_EXCEPTION_DMG_TABLE vg ON vg.MULTI_FUND_ID = t.MULTI_FUND_ID     left join VISTA_STAGING.dbo.NAV_CUT_OFFS nc on nc.CLIENT_FUND=t.PORTFOLIOS_PORTFOLIO_NAME     WHERE FinalFlag = 1 AND EXISTS (SELECT MULTI_FUND_ID FROM Vista_Staging.dbo.VG_01_QUOTE_EXCEPTION_DMG_TABLE WHERE MULTI_FUND_ID = t.MULTI_FUND_ID)             --If the master table doesn't exist then we want to use all the data available, otherwise just the most recent data     IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_01_QUOTE_EXCEPTION_DMG_TABLE', 'U') IS NOT NULL     DELETE FROM #trades_metadata where NOT EXISTS (SELECT od.MULTI_FUND_ID                    FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                   WHERE od.MULTI_FUND_ID = #trades_metadata.MULTI_FUND_ID)             IF OBJECT_ID('tempdb..#trd_orders_metadata', 'U') IS NOT NULL DROP TABLE #trd_orders_metadata     SELECT DISTINCT      trd.ORD_NUM,      trd.ACTIVE_TIME,      trd.AUTH_TIME,      trd.PM_FULL_NAME,      trd.BROKER_CODE,      trd.SEC_DESC1,      trd.ORDER_REASON,      trd.ORD_GROUP,      trd.DEALING_DESK,      trd.CUSIP,      trd.TRADER,      trd.LIMIT_TYPE,      trd.LIMIT_VALUE     INTO #trd_orders_metadata     FROM VISTA_REPORTING.dbo.TRD_ORDERS trd     WHERE EXISTS (SELECT ORD_NUM FROM #trades_metadata WHERE ORD_NUM = trd.ORD_NUM)             IF OBJECT_ID('tempdb..#pre_prim_metadata', 'U') IS NOT NULL DROP TABLE #pre_prim_metadata     SELECT DISTINCT      pr.DEBT_DERIV      ,pr.DESC_INSTMT      ,pr.INST_TYPE      ,pr.ORDER_INST_TYPE      ,pr.SM_SEC_TYPE      ,pr.SM_SEC_GROUP      ,pr.TRD_CURRENCY      ,pr.TRAN_TYPE      ,pr.TWEB_CLOSE_DEALING      ,pr.[1615_DEALING]      ,pr.PRIMARY_MARKET      ,pr.INTERFUND_TRANSFER      ,pr.LINKED_MULTI_FUND      ,pr.MULTI_FUND_ID      ,pr.DEALING_DESK      ,pr.ICDS_DETAIL      ,pr.TRD_PURPOSE      ,pr.[Parent_trade_ID]     INTO #pre_prim_metadata     FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr     --INNER JOIN Vista_Staging.dbo.VG_10_TIMELY_RECORDING_DMG_TABLE vg ON vg.MULTI_FUND_ID = pr.MULTI_FUND_ID     WHERE EXISTS (SELECT MULTI_FUND_ID FROM #trades_metadata WHERE MULTI_FUND_ID = pr.MULTI_FUND_ID)             IF OBJECT_ID('tempdb..#prim_metadata', 'U') IS NOT NULL DROP TABLE #prim_metadata     SELECT *      INTO #prim_metadata     FROM #pre_prim_metadata      WHERE MULTI_FUND_ID in(SELECT DISTINCT MULTI_FUND_ID              FROM #pre_prim_metadata              GROUP BY MULTI_FUND_ID              HAVING count(*) > 1) and DESC_INSTMT IS NOT NULL         UNION         SELECT *      FROM #pre_prim_metadata      WHERE MULTI_FUND_ID in(SELECT DISTINCT MULTI_FUND_ID              FROM #pre_prim_metadata              GROUP BY MULTI_FUND_ID              HAVING count(*) = 1)                      --Concatenate PCT_OF_NAV wih FUND and NAV_CUT_OFF with FUND by MFID     IF OBJECT_ID('tempdb..#PCT_NAV', 'U') IS NOT NULL DROP TABLE #PCT_NAV     SELECT DISTINCT      t.MULTI_FUND_ID,      t.CLIENT_EXECUTION_NUM,      CONCAT(t.PORTFOLIOS_PORTFOLIO_NAME,': ', CASE                 WHEN nav.nav_value_gbp != 0                  THEN ABS(CONVERT(DECIMAL(30,2),100.0*(t.NET_CONSIDERATION_GBP)/nav.nav_value_gbp))                  ELSE NULL                  END) AS PCT_NAV_CONCAT,      CONCAT(t.PORTFOLIOS_PORTFOLIO_NAME, ': ', t.CUTOFF) AS CUTOFF     INTO #PCT_NAV     FROM #trades_metadata t     OUTER APPLY (SELECT TOP 1          nav.NAV_VALUE_GBP         FROM VISTA_REPORTING.dbo.NAV          WHERE nav.PORTFOLIO_NAME = t.PORTFOLIOS_PORTFOLIO_NAME AND nav.NAV_PORT_DATE <= CONVERT(DATE, t.TRD_AUTH_TIME)          ORDER BY nav.NAV_PORT_DATE DESC) nav     --left join VISTA_STAGING.dbo.NAV_CUT_OFFS nc      --on nc.CLIENT_FUND=t.PORTFOLIOS_PORTFOLIO_NAME             IF OBJECT_ID('tempdb..#pct_nav_concat', 'U') IS NOT NULL DROP TABLE #pct_nav_concat     SELECT       MULTI_FUND_ID,      STUFF((       SELECT DISTINCT ' | ' + PCT_NAV_CONCAT       FROM #PCT_NAV        WHERE (MULTI_FUND_ID = pc_nav.MULTI_FUND_ID)        ORDER BY  ' | ' + PCT_NAV_CONCAT       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')       ,1,2,'') AS NAV_PCT_concat,      STUFF((       SELECT DISTINCT ' | ' + CUTOFF       FROM #PCT_NAV        WHERE (MULTI_FUND_ID = pc_nav.MULTI_FUND_ID)        ORDER BY  ' | ' + CUTOFF       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')       ,1,2,'') AS NAV_CUT_concat,      STUFF((       SELECT DISTINCT ' | ' + CLIENT_EXECUTION_NUM       FROM #PCT_NAV        WHERE (MULTI_FUND_ID = pc_nav.MULTI_FUND_ID)        ORDER BY  ' | ' + CLIENT_EXECUTION_NUM       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')       ,1,2,'') AS CL_EX_concat     INTO #pct_nav_concat     FROM #PCT_NAV pc_nav     GROUP BY MULTI_FUND_ID             --2. Get latest TRD_TRADE_DATE associated with a trade     --IF OBJECT_ID('tempdb..#Latest_TRD_TRADE_DATE', 'U') IS NOT NULL DROP TABLE #Latest_TRD_TRADE_DATE     --SELECT DISTINCT     -- MULTI_FUND_ID,     -- TRD_TRADE_DATE,     -- EXECUTION_TIME,     -- TRD_PURPOSE,     -- TRD_AUTH_TIME,     -- TRAN_TYPE,     -- SM_CURRENCY,     -- TRD_PRICE,     -- TRD_PRICING_SPREAD,     -- TRD_YIELD,     -- TRD_COUNTERPARTY,     -- TRD_COUPON,     -- TRD_ENTRY_TIME,     -- TRDCOMM_COMMENTS,     -- ACTIVITY_TYPE,     -- ACTIVITY_TYPE_DECODE,     -- TRD_CURRENCY     --INTO #Latest_TRD_TRADE_DATE     --FROM #trades_metadata     --WHERE FinalFlag = 1         --3. Get Investment desks associated with all funds on a trade     IF OBJECT_ID('tempdb..#MFID_inv_Desk', 'U') IS NOT NULL DROP TABLE #MFID_inv_Desk     SELECT DISTINCT       t.MULTI_FUND_ID,       p.ancestor     INTO #MFID_inv_Desk     FROM #trades_metadata t     LEFT JOIN VISTA_STAGING.dbo.PORTFOLIO_GROUP_CLOSURE_TABLE p ON t.PORTFOLIOS_PORTFOLIO_NAME = p.descendant     --Not necessary for DMG     --WHERE p.ancestor IN ('MG_ATCRED','MG_RET_FI','MG_INSTI',     --      'MG_INTER','MG_RESTCT','MG_IN_CAP',     --      'MG_LEVFIN','MG_MIB','MG_REDEBT') -- This is the list of investment desks provided in the business requirements documents             IF OBJECT_ID('tempdb..#Inv_desk_concat', 'U') IS NOT NULL DROP TABLE #Inv_desk_concat     SELECT       MULTI_FUND_ID,      STUFF((      SELECT DISTINCT ', ' + LTRIM(RTRIM(ancestor))      FROM #MFID_inv_Desk       WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)       ORDER BY ', ' + LTRIM(RTRIM(ancestor))      FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS Inv_Desk_Concat     INTO #Inv_desk_concat     FROM #MFID_inv_Desk Results     GROUP BY MULTI_FUND_ID         --4. Get latest comments value associated with a trade     IF OBJECT_ID('tempdb..#Latest_Comment', 'U') IS NOT NULL DROP TABLE #Latest_Comment     SELECT DISTINCT      o.ORD_NUM,      o.COMMENTS_VALUE     INTO #Latest_Comment     FROM VISTA_REPORTING.dbo.TRD_ORDERS o     inner join (SELECT         ORD_NUM,         MAX(TOUCH_COUNT) AS MAX_TOUCH        FROM VISTA_REPORTING.dbo.TRD_ORDERS        GROUP BY ORD_NUM) o2     on o.ORD_NUM = o2.ORD_NUM AND o.TOUCH_COUNT = o2.MAX_TOUCH     WHERE NULLIF(o.COMMENTS_VALUE,'') is not null AND EXISTS (SELECT ORD_NUM FROM #trades_metadata WHERE ORD_NUM = o.ORD_NUM)         IF OBJECT_ID('tempdb..#min_touch', 'U') IS NOT NULL DROP TABLE #min_touch     SELECT      t1.MULTI_FUND_ID,      t1.TRD_TRADER AS TRADER,      D.FULL_NAME as TRADER_FULL_NAME     INTO #min_touch     FROM VISTA_REPORTING.dbo.TRADES as t1     inner join (SELECT       t1.MULTI_FUND_ID,       MIN(t1.TOUCH_COUNT) as MIN_TOUCH       FROM VISTA_REPORTING.dbo.TRADES as t1       GROUP BY t1.MULTI_FUND_ID) t2 on t1.MULTI_FUND_ID=t2.MULTI_FUND_ID and t1.TOUCH_COUNT=t2.MIN_TOUCH     left join VISTA_REPORTING.DBO.DEALER_AND_DESK D on D.INITIALS = t1.TRD_TRADER     WHERE EXISTS (SELECT MULTI_FUND_ID FROM #trades_metadata WHERE MULTI_FUND_ID = t1.MULTI_FUND_ID)         IF OBJECT_ID('tempdb..#max_touch', 'U') IS NOT NULL DROP TABLE #max_touch     SELECT      t1.ORD_NUM,      t1.TRADER,      t1.TRADER_FULL_NAME,      t1.FACE     INTO #max_touch     FROM VISTA_REPORTING.dbo.TRD_ORDERS as t1     inner join (SELECT       t1.ORD_NUM,       MAX(t1.TOUCH_COUNT) as MAX_TOUCH       FROM VISTA_REPORTING.dbo.TRD_ORDERS as t1       GROUP BY t1.ORD_NUM) as t2 on t1.ORD_NUM=t2.ORD_NUM and t1.TOUCH_COUNT=t2.MAX_TOUCH     WHERE EXISTS (SELECT ORD_NUM FROM #trades_metadata WHERE ORD_NUM = t1.ORD_NUM)             IF OBJECT_ID('tempdb..#temp_t', 'U') IS NOT NULL DROP TABLE #temp_t     SELECT       MULTI_FUND_ID,       SUM(ABS(TRD_ORIG_FACE)) AS SUM_TRD_ORIG_FACE,      --SUM(ABS(TRD_PRINCIPAL)) AS SUM_TRD_PRINCIPAL,      SUM(ABS(TRD_PRINCIPAL_GBP)) AS SUM_TRD_PRINCIPAL_GBP,      SUM(ABS(NET_CONSIDERATION_GBP)) AS SUM_NET_CONSIDERATION_GBP     INTO #temp_t      FROM #trades_metadata     GROUP BY MULTI_FUND_ID         IF OBJECT_ID('tempdb..#PM_comments', 'U') IS NOT NULL DROP TABLE #PM_comments     SELECT DISTINCT         dc.VALUE,         t.MULTI_FUND_ID     INTO #PM_comments     FROM VISTA_STAGING.dbo.TRADES t     left join VISTA_REPORTING.dbo.ORDERS_CROSS oc      on t.ORD_NUM = oc.TRD_ORD     left join (SELECT DISTINCT              PM,             ORD_NUM,             UPDATE_INSTR           FROM VISTA_REPORTING.dbo.PM_ORDERS) pm      on oc.PM_ORD = pm.ORD_NUM     LEFT JOIN (SELECT DISTINCT              VALUE,             TAG_NAME,             CODE           FROM VISTA_REPORTING.dbo.DECODES) dc      on dc.TAG_NAME = 'PM_INSTRUCTION' AND dc.CODE=pm.UPDATE_INSTR     WHERE pm.PM IS NOT NULL AND EXISTS (SELECT MULTI_FUND_ID FROM #trades_metadata WHERE MULTI_FUND_ID = t.MULTI_FUND_ID)         IF OBJECT_ID('tempdb..#PM_INST_concat', 'U') IS NOT NULL DROP TABLE #PM_INST_concat     SELECT          MULTI_FUND_ID,         STUFF((         SELECT DISTINCT ', ' + LTRIM(RTRIM(VALUE))         FROM #PM_comments          WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)          ORDER BY ', ' + LTRIM(RTRIM(VALUE))         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')         ,1,2,'') AS PM_INST_concat     INTO #PM_INST_concat     FROM #PM_comments Results     GROUP BY MULTI_FUND_ID         --1.d. Create a temp table containing the counterparty and value for each quote associated with the MFI (except for the actual counterparty)     IF OBJECT_ID('tempdb..#Brkr', 'U') IS NOT NULL DROP TABLE #Brkr     SELECT DISTINCT       qt.MULTI_FUND_ID,       CONVERT(DECIMAL(21,3),qt.QUOTE_VALUE) AS QUOTE_VALUE,        ISNULL(brk.TRD_COUNTERPARTY,'') AS COUNTERPARTY     INTO #Brkr     FROM VISTA_REPORTING.dbo.QUOTES qt     LEFT JOIN VISTA_REPORTING.dbo.COUNTERPARTIES brk ON qt.BROKER = brk.COUNTERPARTY_CODE     WHERE NULLIF(qt.QUOTE_VALUE,0) IS NOT NULL AND qt.QUOTE_ORIGIN <> 'TRADE' AND EXISTS (SELECT MULTI_FUND_ID FROM #trades_metadata WHERE MULTI_FUND_ID = qt.MULTI_FUND_ID)             IF OBJECT_ID('tempdb..#Broker', 'U') IS NOT NULL DROP TABLE #Broker     SELECT      MULTI_FUND_ID,     STUFF((      SELECT         ', ' + ISNULL(COUNTERPARTY,'') + ': ' + ISNULL(CONVERT(VARCHAR(250),QUOTE_VALUE),'')       FROM #Brkr       WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)       ORDER BY ', ' + ISNULL(COUNTERPARTY,'') + ': ' + ISNULL(CONVERT(VARCHAR(250),QUOTE_VALUE),'')       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS Broker_Quotes     INTO #Broker     FROM #Brkr Results     GROUP BY MULTI_FUND_ID               -- 1.b. Create a temp table with concatenated fund/s associated with the MFI     IF OBJECT_ID('tempdb..#Fund', 'U') IS NOT NULL DROP TABLE #Fund     SELECT DISTINCT       trd.MULTI_FUND_ID,       ISNULL(trd.PORTFOLIOS_PORTFOLIO_NAME,'') AS Fund,       INVNUM     INTO #Fund     FROM VISTA_REPORTING.dbo.TRADES trd     WHERE EXISTS (SELECT MULTI_FUND_ID FROM #trades_metadata WHERE MULTI_FUND_ID = trd.MULTI_FUND_ID)         IF OBJECT_ID('tempdb..#Funds', 'U') IS NOT NULL DROP TABLE #Funds     SELECT      MULTI_FUND_ID,     STUFF((      SELECT         ', ' + LTRIM(RTRIM(Fund))      FROM #Fund       WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)       ORDER BY ', ' + LTRIM(RTRIM(Fund))      FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS Funds,     STUFF((      SELECT         ', ' + CONCAT(LTRIM(RTRIM(Fund)), LTRIM(RTRIM(INVNUM)))      FROM #Fund       WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)      ORDER BY ', ' + CONCAT(LTRIM(RTRIM(Fund)), LTRIM(RTRIM(INVNUM)))      FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS Fund_Investment_Number     INTO #Funds     FROM #Fund Results     GROUP BY MULTI_FUND_ID             IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     SELECT DISTINCT      t.[B3Q_RATIONALE],      abs(convert(decimal(18,2), t5.[FACE])) as [ORD_AMT],      mf.QUOTES_OBTAINED as QUOTES,      brkr.Broker_Quotes as [COMP_QUOTE],      mf.QUOTES_REQUESTED as REQUESTS,      CASE        WHEN t.TRDCOMM_COMMENTS LIKE '%<SDI>%'         THEN REPLACE(RIGHT(t.TRDCOMM_COMMENTS,LEN(t.TRDCOMM_COMMENTS) -CHARINDEX('<SDI>',t.TRDCOMM_COMMENTS,1)+1),'<SDI>','')        ELSE t.TRDCOMM_COMMENTS      END AS [DEALER_COMMENT],      lst_cm.[COMMENTS_VALUE] as [GENERAL_COMMENT],      oc.PM_ORD as [ORDER],      mf.[MULTI_FUND_ID] as MFID,      CASE      WHEN pr.DEALING_DESK='DMG'      THEN       CASE        WHEN pr.DEBT_DERIV = 'DEBT'         THEN         CASE          WHEN t.TRD_COUPON IS NOT NULL AND i2.TICKER IS NOT NULL AND i2.MATURITY IS NOT NULL          THEN CONCAT(ISNULL(i2.TICKER,''),' ', CAST(ISNULL(t.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))         ELSE CONCAT(ISNULL(tr.SEC_DESC1,''),' ', CAST(ISNULL(t.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))         END        ELSE pr.DESC_INSTMT       END      END AS [DESCRIPTION],      t3.[TRADER] as [DEALER],      CONVERT(DECIMAL(24,2),sum_oface.[SUM_TRD_ORIG_FACE]) as [BOOKED_AMT],      pr.[INST_TYPE],      t.[TRAN_TYPE] as [SIDE],      t.[SM_CURRENCY] as [CCY],      i2.[ISIN] as [ISIN],      t.[CUSIP],      i2.[SEDOL] as [SEDOL],      convert(varchar,convert(decimal(18,2),t.TRD_PRICE)) as PX,      CONVERT(DECIMAL(18,2),t.TRD_PRICING_SPREAD) as [SPREAD],      CASE       WHEN pr.DEALING_DESK='DMG'        THEN           CASE           WHEN pr.SM_SEC_GROUP = 'SWAP' AND pr.SM_SEC_TYPE IN ('SWAP','CSWAP') THEN CONVERT(DECIMAL(18,2),t.TRD_COUPON)          WHEN pr.DEBT_DERIV = 'DEBT' THEN CONVERT(DECIMAL(18,2),t.TRD_YIELD)         END      END AS [RATE],      t.[TRD_COUNTERPARTY] as CPTY,      t.[TRD_EX_BROKER_CODE] as [EX_CPTY],      ISNULL(pl.FULL_NAME_VENUE,'Manual') as [PLATFORM],      CASE       WHEN pr.DEALING_DESK = 'DMG'        THEN         CASE          WHEN pr.TWEB_CLOSE_DEALING = 1 THEN 'TWEB Close'          WHEN pr.[1615_DEALING] = 1 THEN '1615 Dealing'          WHEN t.ACTIVITY_TYPE = 'MG.FI 1. Proces' THEN 'VPT'         END      END AS [METHOD],      t.[TRD_TRADE_DATE] as [TRADE_DATE],      t.[EXECUTION_TIME] as [EXEC_DATE],      t.[TRD_AUTH_TIME] as [ENTRY_DATE],      t.[ACTIVITY_TYPE_DECODE] as [ACTIVITY],      fnd.Fund_Investment_Number as FUND_INVESTMENT_NUMBER,      inv_desk.Inv_Desk_Concat as [INV_DESK],      mf.[CREATETIME] as CREATE_DATE,      '3 Firm Quotes' AS [BASELINE_PDP],      t.TRD_CURRENCY as [SETT_CCY],      (abs(convert(decimal(18,2), t5.[FACE])) - CONVERT(DECIMAL(24,2),sum_oface.[SUM_TRD_ORIG_FACE])) as [REMAIN_AMOUNT],      t.[MATURITY] as [MATURITY_DATE],      tr2.[SETTLE_DATE] as [SETTLEMENT_DATE],      mf.[VG_01] as [EXCEPTION_FLAG],      pmc.[PM_INST_concat] as [INSTRUCTION],      dc1.[VALUE] as [PURPOSE],      concat(i2.SM_SEC_GROUP,'/',i2.SM_SEC_TYPE) as [Asset_Type/Subtype],      t.EXECUTION_TYPE_DECODE,      --CASE       -- WHEN NULLIF(tr.[BROKER_CODE],'') is null THEN 'na'      -- WHEN pr.DEBT_DERIV = 'DEBT' AND tr.BROKER_CODE  = t.COUNTERPARTY_CODE THEN t.TRD_COUNTERPARTY      -- WHEN pr.DEBT_DERIV = 'DEBT' AND tr.BROKER_CODE != t.COUNTERPARTY_CODE THEN 'No'      -- ELSE 'na'       --END AS [AXE]      t.[ORD_NUM] as [Trader Order Number]      --tr.[LIMIT_TYPE] as [LIMIT_TYPE],      --tr.[LIMIT_VALUE] as [LIMIT_VALUE],      --CONCAT(YEAR(tr.AUTH_TIME),'-',left(datename(m,tr.AUTH_TIME),3)) AS MONTH_YEAR,      --i2.SM_SEC_GROUP,      --lst_trd.TRD_PURPOSE,      --mf.[DEALING_DESK],      --t.[TRD_YIELD],      --t.[INDICATIVE_COMMENTS],      --t.[NWQ_RATIONALE],      --sum_oface.[SUM_NET_CONSIDERATION_GBP] as NET_CONSIDERATION_GBP,      --CONVERT(DECIMAL(18,2),sum_oface.SUM_TRD_PRINCIPAL_GBP) as [NOMIAL],      --pr.[INTERFUND_TRANSFER],      --pr.[PRIMARY_MARKET],      --t3.[TRADER_FULL_NAME],      --lst_trd.[TRD_ENTRY_TIME] as [TRD_ENTRY_TIME],      --pct_nav.[NAV_PCT_concat] as [PCT_OF_NAV],      --pct_nav.[NAV_CUT_concat] as [NAV_CUT_OFF],      --null as [LIST_ID],      --null as [LIST_NAME],      --null as [TYPE],      --CASE       -- WHEN pr.INST_TYPE = 'GOVBIL' and pr.PRIMARY_MARKET = 1      --  THEN 'Government bills - Primary'      --    WHEN pr.INST_TYPE in ('GOV', 'IGOV', 'SSA', 'GOVBIL') and pr.PRIMARY_MARKET = 1      --        THEN 'Government & SSA bonds - Primary'      --    WHEN pr.INST_TYPE in ('IG CORP', 'HY CORP', 'NR CORP', 'COV', 'CORP') and pr.PRIMARY_MARKET = 1      --        THEN 'Corporates & Covered - Primary'      --    WHEN pr.INST_TYPE in ('EM GOV', 'EM GOVBIL', 'EM CORP') and pr.PRIMARY_MARKET = 1      --        THEN 'EM - Primary'      --    WHEN pr.INST_TYPE in ('RMBS', 'CMBS', 'CDO', 'ABS', 'MBS', ' ARM') and pr.PRIMARY_MARKET = 1      --        THEN 'Securitised - Primary'      --    WHEN pr.INST_TYPE = 'GOVBIL'      --        THEN 'Government bills - Secondary'      --    WHEN pr.INST_TYPE in ('GOV', 'IGOV',  'GOVBIL')      --        THEN 'Government bonds - Secondary'      -- WHEN pr.INST_TYPE in ('EM GOV', 'EM GOVBIL', 'EM CORP')      --        THEN 'EM - Secondary'      --    WHEN pr.INST_TYPE in ('RMBS', 'CMBS', 'CDO', 'ABS', 'MBS', ' ARM')      --        THEN 'Securitised - Secondary'      --    WHEN pr.INST_TYPE = 'SSA'      --        THEN 'SSA bonds - Secondary'      --    WHEN pr.INST_TYPE ='HY Corp' and pr.TRD_CURRENCY IN ('EUR','GBP')      --        THEN 'European HY Corporates - Secondary'      --    WHEN (pr.INST_TYPE ='HY Corp' and t.TRD_CURRENCY not in ('EUR','GBP','USD'))      --            or (pr.INST_TYPE in ('IG CORP', 'NR CORP') and t.TRD_CURRENCY in ('EUR','GBP'))      --            or (pr.ORDER_INST_TYPE = 'CORP' and t.TRD_CURRENCY != 'USD')      --        THEN 'European IG Corporates & Other - Secondary'      -- WHEN (pr.INST_TYPE in ('HY CORP', 'IG CORP', 'NR CORP','CORP') OR pr.ORDER_INST_TYPE = 'CORP') and t.TRD_CURRENCY = 'USD'      --        THEN 'USD Corporates - Secondary'      --    WHEN pr.INST_TYPE in ('COV')       --        THEN 'Covered Bonds - Secondary'      --    WHEN pr.INST_TYPE = 'PFD'      --        THEN 'Pref. Shares - Secondary'      --    WHEN pr.INST_TYPE = 'SCDS' and pr.TRD_CURRENCY = 'EUR'      --        THEN 'SCDS EUR'      --    WHEN pr.INST_TYPE = 'SCDS' and pr.TRD_CURRENCY = 'USD'      --        THEN 'SCDS USD'      -- WHEN pr.INST_TYPE = 'ICDS' and pr.ICDS_DETAIL = 'ITRAXX EUROPE MAIN'      --        THEN 'iTraxx Europe'      --    WHEN pr.INST_TYPE = 'ICDS' and pr.ICDS_DETAIL = 'ITRAXX EUROPE CROSSOVER'      --        THEN 'iTraxx Crossover'      --    WHEN pr.INST_TYPE = 'ICDS' and pr.ICDS_DETAIL = 'CDX NA IG'      --        THEN 'CDX NA IG'      --    WHEN pr.INST_TYPE = 'ICDS' and pr.ICDS_DETAIL = 'CDX NA HY'      --        THEN 'CDX NA HY'      --    WHEN pr.INST_TYPE in ('ICDS', 'SCDS')      --        THEN 'CDS Other'      --    WHEN pr.INST_TYPE in ('IRFUT') and ISNULL(pr.TRD_PURPOSE,'') <> 'MG004'      --        THEN 'Interest Rate Futures'      --    WHEN pr.INST_TYPE in ('BNDFUT') and ISNULL(pr.TRD_PURPOSE,'') <> 'MG004'      --        THEN 'Bond Futures'      --    WHEN pr.INST_TYPE in ('OPTFUT') and ISNULL(pr.TRD_PURPOSE,'') <> 'MG004'      --        THEN 'Option Futures'      --    WHEN pr.INST_TYPE in ('ETD') and ISNULL(pr.TRD_PURPOSE,'') <> 'MG004'      --        THEN 'ETD Not Rollover'      --    WHEN pr.INST_TYPE in ('IRFUT','BNDFUT','OPTFUT','ETD') and pr.TRD_PURPOSE = 'MG004'      --        THEN 'ETD Rollover'      --    WHEN pr.INST_TYPE in ('IRS','BASIS','ZCS','SWAP')      --        THEN 'IRS'      --    WHEN pr.INST_TYPE = 'IFS'      --        THEN 'IFS'      --    WHEN pr.INST_TYPE = 'ASWP'      --        THEN 'ASWP'      --    WHEN pr.INST_TYPE in ('CCS','CASWP')      --        THEN 'Cross Currency'      --END AS [DMC_ASSET_TYPE],      --CASE       -- WHEN cast(tr2.EXECUTION_TIME as time) < convert(time,CUTOFF)       -- THEN      --  CASE       --   WHEN cast(tr2.TRD_AUTH_TIME as time) > convert(time,CUTOFF) THEN 'Y'      --  ELSE 'N'       --  END      --ELSE 'N'       --END AS [NAV_IMPACT_ELIGIBLE],      --CASE      -- WHEN pr.DEALING_DESK = 'DMG' THEN      --  CASE       --   WHEN  lst_trd.TRD_TRADE_DATE <> CONVERT(DATE, lst_trd.TRD_AUTH_TIME) THEN 'Across days'      --   WHEN DATEDIFF(minute, lst_trd.EXECUTION_TIME, lst_trd.TRD_AUTH_TIME) < 60 THEN ''      --  ELSE CONVERT(VARCHAR(5),DATEDIFF(minute, lst_trd.EXECUTION_TIME, lst_trd.TRD_AUTH_TIME) - 60) + ' mins'      --  END      --END AS [TIME_LATE_BY]     INTO #temp_final_master_table     FROM VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_DMG_TABLE mf     inner join #trades_metadata as t on t.[MULTI_FUND_ID] = mf.[MULTI_FUND_ID]      left join #trd_orders_metadata tr on tr.[ORD_NUM]=t.[ORD_NUM] AND mf.[DEALING_DESK]=tr.[DEALING_DESK]      left join #Broker brkr on brkr.MULTI_FUND_ID = mf.MULTI_FUND_ID     left join #Funds fnd on fnd.MULTI_FUND_ID = mf.MULTI_FUND_ID     left join (SELECT DISTINCT         MULTI_FUND_ID,        SUM_TRD_ORIG_FACE,        SUM_TRD_PRINCIPAL_GBP,        SUM_NET_CONSIDERATION_GBP           FROM #temp_t) sum_oface on sum_oface.[MULTI_FUND_ID]=t.[MULTI_FUND_ID]     left join (SELECT DISTINCT         VENUE,         ROUTE_DATETIME,         PLACEMENT_NUM,        FULL_NAME_VENUE           FROM VISTA_REPORTING.dbo.PLACEMENTS) pl on pl.[PLACEMENT_NUM]=t.[PLACEMENT_NUM]     left join (SELECT DISTINCT         MULTI_FUND_ID,         INST_TYPE,         TRD_CURRENCY,         DEALING_DESK,         PRIMARY_MARKET,         [Parent_trade_ID],         ORDER_INST_TYPE,         ICDS_DETAIL,         TRD_PURPOSE,        TWEB_CLOSE_DEALING,        INTERFUND_TRANSFER,        LINKED_MULTI_FUND,        [1615_DEALING],        DEBT_DERIV,        SM_SEC_GROUP,        DESC_INSTMT,        SM_SEC_TYPE,        TRAN_TYPE          FROM #prim_metadata) pr on pr.[MULTI_FUND_ID]=t.[MULTI_FUND_ID] AND pr.[DEALING_DESK] = mf.[DEALING_DESK]     left join (SELECT DISTINCT         MULTI_FUND_ID,        TRADER_FULL_NAME,        TRADER           FROM #min_touch) as t3 on t3.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]     left join (SELECT DISTINCT         ORD_NUM,        FACE           FROM #max_touch) as t5 on t5.ORD_NUM = t.ORD_NUM     --left join (SELECT DISTINCT      --   MULTI_FUND_ID,     --   TRD_COUPON,     --   TRAN_TYPE,     --   SM_CURRENCY,     --   TRD_PRICE,     --   TRD_PRICING_SPREAD,     --   TRD_YIELD,     --   TRD_COUNTERPARTY,     --   ACTIVITY_TYPE,     --   TRD_TRADE_DATE,     --   TRD_AUTH_TIME,     --   EXECUTION_TIME,     --   TRD_PURPOSE,     --   TRDCOMM_COMMENTS,     --   ACTIVITY_TYPE_DECODE,     --   TRD_ENTRY_TIME,     --   TRD_CURRENCY     --     FROM #Latest_TRD_TRADE_DATE) lst_trd on t.[MULTI_FUND_ID] = lst_trd.[MULTI_FUND_ID]     left join (SELECT DISTINCT         Inv_Desk_Concat,        MULTI_FUND_ID           FROM #Inv_desk_concat) inv_desk on t.[MULTI_FUND_ID] = inv_desk.[MULTI_FUND_ID]     left join (SELECT DISTINCT         TAG_NAME,        [VALUE],        CODE           FROM VISTA_REPORTING.dbo.DECODES) dc1 on dc1.TAG_NAME = 'TrdPurpose' AND dc1.CODE=t.TRD_PURPOSE     left join (SELECT DISTINCT         COMMENTS_VALUE,        ORD_NUM           FROM #Latest_Comment) lst_cm on t.[ORD_NUM] = lst_cm.[ORD_NUM]     left join (SELECT DISTINCT         client_fund,        CUTOFF           FROM VISTA_STAGING.dbo.NAV_CUT_OFFS) nv on nv.[CLIENT_FUND] = t.[PORTFOLIOS_PORTFOLIO_NAME]     left join #pct_nav_concat pct_nav on pct_nav.[MULTI_FUND_ID] = mf.[MULTI_FUND_ID]     left join (SELECT DISTINCT         tr.ORD_NUM,        tr.MULTI_FUND_ID,        tr.TRD_CURRENCY,        tr.EXECUTION_TIME,        tr.TRD_AUTH_TIME,        tr.TRD_TRADE_DATE,        T2.SETTLE_DATE          FROM VISTA_REPORTING.dbo.TRADES as tr          inner join (SELECT            MULTI_FUND_ID,            MAX(TOUCH_COUNT) as MAX_TOUCH,           MAX(TRD_SETTLE_DATE) as SETTLE_DATE             FROM VISTA_REPORTING.dbo.TRADES             GROUP BY MULTI_FUND_ID) as t2 on (tr.MULTI_FUND_ID=t2.MULTI_FUND_ID) and (tr.TOUCH_COUNT=t2.MAX_TOUCH)         ) as tr2 on tr2.[MULTI_FUND_ID] = mf.[MULTI_FUND_ID]         left join (SELECT DISTINCT         PM_INST_concat,        MULTI_FUND_ID           FROM #PM_INST_concat) pmc on pmc.[MULTI_FUND_ID] = mf.[MULTI_FUND_ID]     left join VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = t.ORD_NUM     outer apply (SELECT TOP 1          i.TICKER,         i.MATURITY,         i.ISIN,         i.SEDOL,         i.SM_SEC_GROUP,         i.SM_SEC_TYPE         FROM VISTA_REPORTING.dbo.INSTRUMENTS i          WHERE (i.CUSIP=coalesce(t.CUSIP, tr.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(t.EXECUTION_TIME, tr.AUTH_TIME)))            ORDER BY i.DATE DESC) as i2     --outer apply (SELECT TOP 1      --    nav.*      --    FROM VISTA_REPORTING.dbo.NAV      --    WHERE nav.PORTFOLIO_NAME = t.PORTFOLIOS_PORTFOLIO_NAME AND nav.NAV_PORT_DATE <= CONVERT(DATE, t.TRD_AUTH_TIME)      --    ORDER BY nav.NAV_PORT_DATE DESC) nav1     --outer apply (SELECT TOP 1      --    e.*      --    FROM VISTA_REPORTING.dbo.FX_RATES e      --    WHERE e.CURRENCY = t.TRD_CURRENCY and CONVERT(date, e.MARKDATE) <= CONVERT(date, t.EXECUTION_TIME)     --    ORDER BY e.MARKDATE DESC) e            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_01_QUOTE_EXCEPTION_DMG_TABLE', 'U') IS NOT NULL     delete from VISTA_REPORTING.dbo.MASTER_MFID_VG_01_QUOTE_EXCEPTION_DMG_TABLE    where MFID in (SELECT DISTINCT MULTI_FUND_ID from #trades_metadata)        IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_01_QUOTE_EXCEPTION_DMG_TABLE', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_01_QUOTE_EXCEPTION_DMG_TABLE    SELECT *    FROM #temp_final_master_table        ELSE        SELECT *    INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_01_QUOTE_EXCEPTION_DMG_TABLE    FROM #temp_final_master_table        IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(    'MASTER_MFID_VG_01_QUOTE_EXCEPTION_DMG_TABLE', --TABLE_NAME    @START_TIME, --START_TIME    GETDATE(), --END_TIME    DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS    CAST(GETDATE() as date)) --COMPLETION_DATE        IF OBJECT_ID('tempdb..#trades_metadata', 'U') IS NOT NULL DROP TABLE #trades_metadata    IF OBJECT_ID('tempdb..#trd_orders_metadata', 'U') IS NOT NULL DROP TABLE #trd_orders_metadata    IF OBJECT_ID('tempdb..#prim_metadata', 'U') IS NOT NULL DROP TABLE #prim_metadata    IF OBJECT_ID('tempdb..#PCT_NAV', 'U') IS NOT NULL DROP TABLE #PCT_NAV    IF OBJECT_ID('tempdb..#pct_nav_concat', 'U') IS NOT NULL DROP TABLE #pct_nav_concat    IF OBJECT_ID('tempdb..#Latest_TRD_TRADE_DATE', 'U') IS NOT NULL DROP TABLE #Latest_TRD_TRADE_DATE    IF OBJECT_ID('tempdb..#MFID_inv_Desk', 'U') IS NOT NULL DROP TABLE #MFID_inv_Desk    IF OBJECT_ID('tempdb..#Inv_desk_concat', 'U') IS NOT NULL DROP TABLE #Inv_desk_concat    IF OBJECT_ID('tempdb..#Latest_Comment', 'U') IS NOT NULL DROP TABLE #Latest_Comment    IF OBJECT_ID('tempdb..#min_touch', 'U') IS NOT NULL DROP TABLE #min_touch    IF OBJECT_ID('tempdb..#max_touch', 'U') IS NOT NULL DROP TABLE #max_touch    IF OBJECT_ID('tempdb..#temp_t', 'U') IS NOT NULL DROP TABLE #temp_t    IF OBJECT_ID('tempdb..#PM_comments', 'U') IS NOT NULL DROP TABLE #PM_comments    IF OBJECT_ID('tempdb..#PM_INST_concat', 'U') IS NOT NULL DROP TABLE #PM_INST_concat    IF OBJECT_ID('tempdb..#Brkr', 'U') IS NOT NULL DROP TABLE #Brkr    IF OBJECT_ID('tempdb..#Broker', 'U') IS NOT NULL DROP TABLE #Broker    IF OBJECT_ID('tempdb..#Fund', 'U') IS NOT NULL DROP TABLE #Fund    IF OBJECT_ID('tempdb..#Funds', 'U') IS NOT NULL DROP TABLE #Funds            END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_MFID_TABLE_VG_07_NON_WINNING_QUOTE_DMG  CreateDate: 2025-06-26 17:49:50.313  ModifyDate: 2025-06-26 17:49:50.313  --- DEFINITION START ---  -- =============================================    -- Author:  <Samad, Mehreen>    -- Create date: <05/04/2019>    -- Description:     -- <Master exception table for NON WINNING QUOTE    -- Exception test for DMG.>    -- =============================================        -- ***************VERSION CONTROL***************    -- 2019-04-08 - MS: Changed order of columns and    --     added, renamed & commented     --     out some columns according     --     to Front End needs.    -- 2019-04-15 - MS: Added in QUOTES_REQUESTED and    --     QUOTES_OBTAINED as REQUESTS    --     and QUOTES in final table.    -- 2019-05-14 - DDC: Added PM_ORDER as the 'ORDER' field    --     - MS: Added in TRD_EX_BROKER_CODE    -- *********************************************        CREATE PROCEDURE [dbo].[MASTER_MFID_TABLE_VG_07_NON_WINNING_QUOTE_DMG]     -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        --Used to track total time stored procedure took to run    DECLARE @START_TIME as datetime    SET @START_TIME = GETDATE()        IF OBJECT_ID('tempdb..#trades_metadata', 'U') IS NOT NULL DROP TABLE #trades_metadata    SELECT DISTINCT t.*,    nc.CUTOFF    INTO #trades_metadata    FROM VISTA_REPORTING.dbo.TRADES t    INNER JOIN Vista_Staging.dbo.VG_07_NON_WINNING_QUOTE_DMG_TABLE vg ON vg.MULTI_FUND_ID = t.MULTI_FUND_ID    LEFT JOIN VISTA_STAGING.dbo.NAV_CUT_OFFS nc on nc.CLIENT_FUND=t.PORTFOLIOS_PORTFOLIO_NAME    WHERE FinalFlag = 1        --If the master table doesn't exist then we want to use all the data available, otherwise just the most recent data    IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_07_NON_WINNING_QUOTE_DMG_TABLE', 'U') IS NOT NULL    DELETE FROM #trades_metadata where NOT EXISTS (SELECT od.MULTI_FUND_ID                   FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                  WHERE od.MULTI_FUND_ID = #trades_metadata.MULTI_FUND_ID)            IF OBJECT_ID('tempdb..#trd_orders_metadata', 'U') IS NOT NULL DROP TABLE #trd_orders_metadata    SELECT DISTINCT *    INTO #trd_orders_metadata    FROM VISTA_REPORTING.dbo.TRD_ORDERS    where ORD_NUM in (select ORD_NUM from #trades_metadata)        IF OBJECT_ID('tempdb..#prim_metadata', 'U') IS NOT NULL DROP TABLE #prim_metadata    SELECT DISTINCT *    INTO #prim_metadata    FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr    WHERE MULTI_FUND_ID in (SELECT MULTI_FUND_ID from #trades_metadata)        IF OBJECT_ID('tempdb..#oc_metadata', 'U') IS NOT NULL DROP TABLE #oc_metadata    SELECT DISTINCT *    INTO #oc_metadata    FROM Vista_Reporting.dbo.ORDERS_CROSS oc    where oc.TRD_ORD in (SELECT ORD_NUM FROM #trades_metadata)        IF OBJECT_ID('tempdb..#pm_metadata', 'U') IS NOT NULL DROP TABLE #pm_metadata    SELECT DISTINCT *    INTO #pm_metadata    FROM Vista_Reporting.dbo.PM_ORDERS pm    where pm.ORD_NUM in (SELECT PM_ORD FROM #oc_metadata)        IF OBJECT_ID('tempdb..#PM_comments', 'U') IS NOT NULL DROP TABLE #PM_comments    SELECT DISTINCT     dc.VALUE,     t.MULTI_FUND_ID    INTO #PM_comments    FROM #trades_metadata t    LEFT JOIN #oc_metadata oc     on t.ORD_NUM = oc.TRD_ORD    LEFT JOIN (SELECT DISTINCT         PM,        ORD_NUM,        UPDATE_INSTR          FROM #pm_metadata) pm on oc.PM_ORD = pm.ORD_NUM    LEFT JOIN (SELECT DISTINCT         VALUE,        TAG_NAME,        CODE          FROM VISTA_REPORTING.dbo.DECODES) dc on dc.TAG_NAME = 'PM_INSTRUCTION' AND dc.CODE=pm.UPDATE_INSTR    WHERE pm.PM IS NOT NULL        IF OBJECT_ID('tempdb..#PM_INST_concat', 'U') IS NOT NULL DROP TABLE #PM_INST_concat    SELECT      MULTI_FUND_ID,     STUFF((     SELECT DISTINCT ', ' + LTRIM(RTRIM(VALUE))     FROM #PM_comments      WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)      ORDER BY ', ' + LTRIM(RTRIM(VALUE))     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')     ,1,2,'') AS PM_INST_concat    INTO #PM_INST_concat    FROM #PM_comments Results    GROUP BY MULTI_FUND_ID        --Concatenate PCT_OF_NAV wih FUND and NAV_CUT_OFF with FUND by MFID    IF OBJECT_ID('tempdb..#PCT_NAV', 'U') IS NOT NULL DROP TABLE #PCT_NAV    SELECT DISTINCT     t.MULTI_FUND_ID,     t.CLIENT_EXECUTION_NUM,     CONCAT(t.PORTFOLIOS_PORTFOLIO_NAME,': ', CASE                WHEN nav.nav_value_gbp != 0                 THEN ABS(CONVERT(DECIMAL(30,2),100.0*(t.NET_CONSIDERATION_GBP)/nav.nav_value_gbp))                 ELSE NULL                 END) AS PCT_NAV_CONCAT,     CONCAT(t.PORTFOLIOS_PORTFOLIO_NAME, ': ', t.CUTOFF) AS CUTOFF    INTO #PCT_NAV    FROM #trades_metadata t    OUTER APPLY (SELECT TOP 1         nav.NAV_VALUE_GBP         FROM VISTA_REPORTING.dbo.NAV         WHERE nav.PORTFOLIO_NAME = t.PORTFOLIOS_PORTFOLIO_NAME AND nav.NAV_PORT_DATE <= CONVERT(DATE, t.TRD_AUTH_TIME)         ORDER BY nav.NAV_PORT_DATE DESC) nav                IF OBJECT_ID('tempdb..#pct_nav_concat', 'U') IS NOT NULL DROP TABLE #pct_nav_concat    SELECT      MULTI_FUND_ID,     STUFF((      SELECT DISTINCT ' | ' + PCT_NAV_CONCAT      FROM #PCT_NAV       WHERE (MULTI_FUND_ID = pc_nav.MULTI_FUND_ID)       ORDER BY ' | ' + PCT_NAV_CONCAT      FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS NAV_PCT_concat,     STUFF((      SELECT DISTINCT ' | ' + CUTOFF      FROM #PCT_NAV       WHERE (MULTI_FUND_ID = pc_nav.MULTI_FUND_ID)       ORDER BY ' | ' + CUTOFF      FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS NAV_CUT_concat,     STUFF((      SELECT DISTINCT ' | ' + CLIENT_EXECUTION_NUM      FROM #PCT_NAV       WHERE (MULTI_FUND_ID = pc_nav.MULTI_FUND_ID)       ORDER BY ' | ' + CLIENT_EXECUTION_NUM      FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS CL_EX_concat    INTO #pct_nav_concat    FROM #PCT_NAV pc_nav    GROUP BY MULTI_FUND_ID            --2. Get latest TRD_TRADE_DATE associated with a trade    --IF OBJECT_ID('tempdb..#Latest_TRD_TRADE_DATE', 'U') IS NOT NULL DROP TABLE #Latest_TRD_TRADE_DATE    --SELECT DISTINCT    -- MULTI_FUND_ID,    -- TRD_TRADE_DATE,    -- EXECUTION_TIME,    -- TRD_PURPOSE,    -- TRD_AUTH_TIME,    -- TRAN_TYPE,    -- SM_CURRENCY,    -- TRD_PRICE,    -- TRD_PRICING_SPREAD,    -- TRD_YIELD,    -- TRD_COUNTERPARTY,    -- TRD_COUPON,    -- TRD_ENTRY_TIME,    -- TRDCOMM_COMMENTS,    -- ACTIVITY_TYPE,    -- ACTIVITY_TYPE_DECODE,    -- TRD_CURRENCY    --INTO #Latest_TRD_TRADE_DATE    --FROM #trades_metadata    --WHERE FinalFlag = 1        --3. Get Investment desks associated with all funds on a trade    IF OBJECT_ID('tempdb..#MFID_inv_Desk', 'U') IS NOT NULL DROP TABLE #MFID_inv_Desk    SELECT DISTINCT      t.MULTI_FUND_ID,      p.ancestor    INTO #MFID_inv_Desk    FROM #trades_metadata t    LEFT JOIN VISTA_STAGING.dbo.PORTFOLIO_GROUP_CLOSURE_TABLE p    on t.PORTFOLIOS_PORTFOLIO_NAME = p.descendant    --Not necessary for DMG    --WHERE p.ancestor IN ('MG_ATCRED','MG_RET_FI','MG_INSTI',    --      'MG_INTER','MG_RESTCT','MG_IN_CAP',    --      'MG_LEVFIN','MG_MIB','MG_REDEBT') -- This is the list of investment desks provided in the business requirements documents            IF OBJECT_ID('tempdb..#Inv_desk_concat', 'U') IS NOT NULL DROP TABLE #Inv_desk_concat    SELECT      MULTI_FUND_ID,     STUFF((     SELECT DISTINCT ', ' + LTRIM(RTRIM(ancestor))     FROM #MFID_inv_Desk      WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)      ORDER BY ', ' + LTRIM(RTRIM(ancestor))     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS Inv_Desk_Concat    INTO #Inv_desk_concat    FROM #MFID_inv_Desk Results    GROUP BY MULTI_FUND_ID        --4. Get latest comments value associated with a trade    IF OBJECT_ID('tempdb..#Latest_Comment', 'U') IS NOT NULL DROP TABLE #Latest_Comment    SELECT DISTINCT     o.ORD_NUM,     o.COMMENTS_VALUE    INTO #Latest_Comment    FROM #trd_orders_metadata o    inner join (SELECT        ORD_NUM,        MAX(TOUCH_COUNT) AS MAX_TOUCH       FROM VISTA_REPORTING.dbo.ORDERS       GROUP BY ORD_NUM) o2    on o.ORD_NUM = o2.ORD_NUM AND o.TOUCH_COUNT = o2.MAX_TOUCH    WHERE NULLIF(o.COMMENTS_VALUE,'') is not null    and o.ORD_NUM in (select ORD_NUM from #trades_metadata)        IF OBJECT_ID('tempdb..#min_touch', 'U') IS NOT NULL DROP TABLE #min_touch    SELECT     t1.MULTI_FUND_ID,     t1.TRD_TRADER AS TRADER,     D.FULL_NAME as TRADER_FULL_NAME    INTO #min_touch    FROM #trades_metadata as t1    join (SELECT      t1.MULTI_FUND_ID,      MIN(t1.TOUCH_COUNT) as MIN_TOUCH      FROM #trades_metadata as t1      GROUP BY t1.MULTI_FUND_ID)     as t2 on t1.MULTI_FUND_ID=t2.MULTI_FUND_ID and t1.TOUCH_COUNT=t2.MIN_TOUCH    LEFT JOIN VISTA_REPORTING.DBO.DEALER_AND_DESK D     on D.INITIALS = t1.TRD_TRADER        IF OBJECT_ID('tempdb..#max_touch', 'U') IS NOT NULL DROP TABLE #max_touch    SELECT     t1.ORD_NUM,     t1.TRADER,     t1.TRADER_FULL_NAME,     t1.FACE    INTO #max_touch    FROM #trd_orders_metadata as t1    join (SELECT      t1.ORD_NUM,      MAX(t1.TOUCH_COUNT) as MAX_TOUCH      FROM #trd_orders_metadata as t1      join #trd_orders_metadata as t2       on t1.ORD_NUM=t2.ORD_NUM      GROUP BY t1.ORD_NUM) as t2     on t1.ORD_NUM=t2.ORD_NUM and t1.TOUCH_COUNT=t2.MAX_TOUCH    where t1.ORD_NUM in (select ORD_NUM from #trades_metadata)        IF OBJECT_ID('tempdb..#temp_t', 'U') IS NOT NULL DROP TABLE #temp_t    SELECT      t.MULTI_FUND_ID,      SUM(ABS(TRD_ORIG_FACE)) AS SUM_TRD_ORIG_FACE,     --SUM(ABS(TRD_PRINCIPAL)) AS SUM_TRD_PRINCIPAL,     SUM(ABS(TRD_PRINCIPAL_GBP)) AS SUM_TRD_PRINCIPAL_GBP,     SUM(ABS(NET_CONSIDERATION_GBP)) AS SUM_NET_CONSIDERATION_GBP    INTO #temp_t     FROM #trades_metadata t    WHERE FinalFlag=1    GROUP BY t.MULTI_FUND_ID            --1.d. Create a temp table containing the counterparty and value for each quote associated with the MFI (except for the actual counterparty)    IF OBJECT_ID('tempdb..#Brkr', 'U') IS NOT NULL DROP TABLE #Brkr    SELECT DISTINCT     qt.MULTI_FUND_ID,        CONVERT(DECIMAL(21,3),qt.QUOTE_VALUE) AS QUOTE_VALUE,         ISNULL(brk.TRD_COUNTERPARTY,'') AS COUNTERPARTY    INTO #Brkr    FROM VISTA_REPORTING.dbo.QUOTES qt    LEFT JOIN VISTA_REPORTING.dbo.COUNTERPARTIES brk    ON qt.BROKER = brk.COUNTERPARTY_CODE    WHERE NULLIF(qt.QUOTE_VALUE,0) IS NOT NULL    AND qt.QUOTE_ORIGIN <> 'TRADE'    AND qt.MULTI_FUND_ID in (SELECT MULTI_FUND_ID from #trades_metadata)            IF OBJECT_ID('tempdb..#Broker', 'U') IS NOT NULL DROP TABLE #Broker    SELECT      MULTI_FUND_ID,     STUFF((      SELECT         ', ' + ISNULL(COUNTERPARTY,'') + ': ' + ISNULL(CONVERT(VARCHAR(250),QUOTE_VALUE),'')       FROM #Brkr       WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)       ORDER BY ', ' + ISNULL(COUNTERPARTY,'') + ': ' + ISNULL(CONVERT(VARCHAR(250),QUOTE_VALUE),'')       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS Broker_Quotes    INTO #Broker    FROM #Brkr Results    GROUP BY MULTI_FUND_ID        -- 1.b. Create a temp table with concatenated fund/s associated with the MFI    IF OBJECT_ID('tempdb..#Fund', 'U') IS NOT NULL DROP TABLE #Fund        SELECT DISTINCT     t.MULTI_FUND_ID,     ISNULL(t.PORTFOLIOS_PORTFOLIO_NAME,'') AS Fund,     INVNUM    INTO #Fund    FROM #trades_metadata t        IF OBJECT_ID('tempdb..#Funds', 'U') IS NOT NULL DROP TABLE #Funds    SELECT      MULTI_FUND_ID,     STUFF((      SELECT         ', ' + LTRIM(RTRIM(Fund))      FROM #Fund       WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)       ORDER BY ', ' + LTRIM(RTRIM(Fund))      FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS Funds,     STUFF((      SELECT         ', ' + CONCAT(LTRIM(RTRIM(Fund)), LTRIM(RTRIM(INVNUM)))      FROM #Fund       WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)       ORDER BY ', ' + CONCAT(LTRIM(RTRIM(Fund)), LTRIM(RTRIM(INVNUM)))      FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS Fund_Investment_Number    INTO #Funds    FROM #Fund Results    GROUP BY MULTI_FUND_ID            IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table    SELECT DISTINCT     t.[NWQ_RATIONALE],     t5.[FACE] as [ORD_AMT],     mf.[QUOTES_OBTAINED] as [QUOTES],     brkr.[Broker_Quotes] as [COMP_QUOTE],     mf.[QUOTES_REQUESTED] as [REQUESTS],     CASE       WHEN t.TRDCOMM_COMMENTS LIKE '%<SDI>%'       THEN REPLACE(RIGHT(t.TRDCOMM_COMMENTS,LEN(t.TRDCOMM_COMMENTS) -CHARINDEX('<SDI>',t.TRDCOMM_COMMENTS,1)+1),'<SDI>','')      ELSE t.TRDCOMM_COMMENTS     END AS [DEALER_COMMENT],     lst_cm.[COMMENTS_VALUE] as [GENERAL_COMMENT],     oc.PM_ORD AS [ORDER],     mf.[MULTI_FUND_ID] as [MFID],     t.[SM_CURRENCY] as [CCY],     i2.[ISIN] as [ISIN],     t.[CUSIP],     i2.[SEDOL] as [SEDOL],     CASE      WHEN pr.DEALING_DESK='DMG'      THEN       CASE        WHEN pr.DEBT_DERIV = 'DEBT'         THEN         CASE          WHEN t.TRD_COUPON IS NOT NULL AND i2.TICKER IS NOT NULL AND i2.MATURITY IS NOT NULL          THEN CONCAT(ISNULL(i2.TICKER,''),' ', CAST(ISNULL(t.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))         ELSE CONCAT(ISNULL(tr.SEC_DESC1,''),' ', CAST(ISNULL(t.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))         END        ELSE pr.DESC_INSTMT       END     END AS [DESCRIPTION],     t3.[TRADER] as [DEALER],     CONVERT(DECIMAL(24,2),sum_oface.[SUM_TRD_ORIG_FACE]) as [BOOKED_AMT],     pr.[INST_TYPE],     t.[TRAN_TYPE] as [SIDE],     CONVERT(VARCHAR,CONVERT(DECIMAL(18,2),t.[TRD_PRICE])) as [PX],     CONVERT(DECIMAL(18,2),t.[TRD_PRICING_SPREAD]) as [SPREAD],     CASE      WHEN pr.DEALING_DESK='DMG'      THEN         CASE         WHEN pr.SM_SEC_GROUP = 'SWAP' AND pr.SM_SEC_TYPE IN ('SWAP','CSWAP') THEN CONVERT(DECIMAL(18,2),t.TRD_COUPON)        WHEN pr.DEBT_DERIV = 'DEBT' THEN CONVERT(DECIMAL(18,2),t.TRD_YIELD)       END     END AS [RATE],     t.[TRD_COUNTERPARTY] as [CPTY],     t.[TRD_EX_BROKER_CODE] as [EX_CPTY],     ISNULL(pl.FULL_NAME_VENUE,'Manual') as [PLATFORM],     CASE      WHEN pr.DEALING_DESK = 'DMG'      THEN       CASE        WHEN pr.TWEB_CLOSE_DEALING = 1 THEN 'TWEB Close'        WHEN pr.[1615_DEALING] = 1 THEN '1615 Dealing'        WHEN t.ACTIVITY_TYPE = 'MG.FI 1. Proces' THEN 'VPT'       END     END AS [METHOD],     --pr.[PRIMARY_MARKET],     t.[TRD_TRADE_DATE] as [TRADE_DATE],     t.[EXECUTION_TIME] as [EXEC_DATE],     t.[TRD_AUTH_TIME] as [ENTRY_DATE],     t.[ACTIVITY_TYPE_DECODE] as [ACTIVITY],     fnd.[Fund_Investment_Number] as [FUND_INVESTMENT_NUMBER],     mf.[VG_07_CREATETIME] as [CREATE_DATE],     '3 Firm Quotes' as  [BASELINE_PDP],     CONVERT(DECIMAL(18,2),sum_oface.SUM_TRD_PRINCIPAL_GBP) as [NOMINAL],     t.TRD_CURRENCY as [SETT_CCY],     (t5.[FACE] - CONVERT(DECIMAL(24,2),sum_oface.[SUM_TRD_ORIG_FACE])) as [REMAIN_AMOUNT],     t.[MATURITY] as [MATURITY_DATE],     tr2.[SETTLE_DATE] as [SETTLEMENT_DATE],     mf.[VG_07] as [EXCEPTION_FLAG],     pmc.[PM_INST_concat] as [INSTRUCTION],     dc1.[VALUE] as [PURPOSE],     CONCAT(i2.[SM_SEC_GROUP],'/',i2.[SM_SEC_TYPE]) as [ASSET_TYPE/SUBTYPE],     t.[EXECUTION_TYPE_DECODE],     --CASE      -- WHEN NULLIF(tr.[BROKER_CODE],'') is null THEN 'na'     -- WHEN pr.DEBT_DERIV = 'DEBT' AND tr.BROKER_CODE  = t.COUNTERPARTY_CODE THEN t.TRD_COUNTERPARTY     -- WHEN pr.DEBT_DERIV = 'DEBT' AND tr.BROKER_CODE != t.COUNTERPARTY_CODE THEN 'No'     --ELSE 'na'      --END AS [AXE],     --inv_desk.Inv_Desk_Concat as [INV_DESK],     --tr.[LIMIT_TYPE] as [LIMIT_TYPE],     --tr.[LIMIT_VALUE] as [LIMIT_VALUE],     --CONCAT(YEAR(tr.[AUTH_TIME]),'-',left(DATENAME(m,tr.[AUTH_TIME]),3)) as [MONTH_YEAR],     --i2.[SM_SEC_GROUP],     --pr.[TRD_PURPOSE],     --mf.[NWQ_RATIONALE],     t.[ORD_NUM] as [Trader Order Number]     --mf.[DEALING_DESK],     --t.[TRD_YIELD],     --t.[INDICATIVE_COMMENTS]     --sum_oface.[SUM_NET_CONSIDERATION_GBP] as NET_CONSIDERATION_GBP,     --pr.[INTERFUND_TRANSFER],     --t3.[TRADER_FULL_NAME],     --lst_trd.[TRD_ENTRY_TIME] as [TRD_ENTRY_TIME],     --pct_nav.[NAV_PCT_concat] as [PCT_OF_NAV],     --pct_nav.[NAV_CUT_concat] as [NAV_CUT_OFF],     --null as [LIST_ID],     --null as [LIST_NAME],     --null as [TYPE],     --CASE      -- WHEN pr.INST_TYPE = 'GOVBIL' and pr.PRIMARY_MARKET = 1     --  THEN 'Government bills - Primary'     --       WHEN pr.INST_TYPE in ('GOV', 'IGOV', 'SSA', 'GOVBIL') and pr.PRIMARY_MARKET = 1     --           THEN 'Government & SSA bonds - Primary'     --       WHEN pr.INST_TYPE in ('IG CORP', 'HY CORP', 'NR CORP', 'COV', 'CORP') and pr.PRIMARY_MARKET = 1     --           THEN 'Corporates & Covered - Primary'     --       WHEN pr.INST_TYPE in ('EM GOV', 'EM GOVBIL', 'EM CORP') and pr.PRIMARY_MARKET = 1     --           THEN 'EM - Primary'     --       WHEN pr.INST_TYPE in ('RMBS', 'CMBS', 'CDO', 'ABS', 'MBS', ' ARM') and pr.PRIMARY_MARKET = 1     --           THEN 'Securitised - Primary'     --       WHEN pr.INST_TYPE = 'GOVBIL'     --           THEN 'Government bills - Secondary'     --       WHEN pr.INST_TYPE in ('GOV', 'IGOV',  'GOVBIL')     --           THEN 'Government bonds - Secondary'     -- WHEN pr.INST_TYPE in ('EM GOV', 'EM GOVBIL', 'EM CORP')     --           THEN 'EM - Secondary'     --       WHEN pr.INST_TYPE in ('RMBS', 'CMBS', 'CDO', 'ABS', 'MBS', ' ARM')     --           THEN 'Securitised - Secondary'     --       WHEN pr.INST_TYPE = 'SSA'     --           THEN 'SSA bonds - Secondary'     --       WHEN pr.INST_TYPE ='HY Corp' and pr.TRD_CURRENCY IN ('EUR','GBP')     --           THEN 'European HY Corporates - Secondary'     --       WHEN (pr.INST_TYPE ='HY Corp' and t.TRD_CURRENCY not in ('EUR','GBP','USD'))     --               or (pr.INST_TYPE in ('IG CORP', 'NR CORP') and t.TRD_CURRENCY in ('EUR','GBP'))     --               or (pr.ORDER_INST_TYPE = 'CORP' and t.TRD_CURRENCY != 'USD')     --           THEN 'European IG Corporates & Other - Secondary'     -- WHEN (pr.INST_TYPE in ('HY CORP', 'IG CORP', 'NR CORP','CORP') OR pr.ORDER_INST_TYPE = 'CORP') and t.TRD_CURRENCY = 'USD'     --           THEN 'USD Corporates - Secondary'     --       WHEN pr.INST_TYPE in ('COV')      --           THEN 'Covered Bonds - Secondary'     --       WHEN pr.INST_TYPE = 'PFD'     --           THEN 'Pref. Shares - Secondary'     --       WHEN pr.INST_TYPE = 'SCDS' and pr.TRD_CURRENCY = 'EUR'     --           THEN 'SCDS EUR'     --       WHEN pr.INST_TYPE = 'SCDS' and pr.TRD_CURRENCY = 'USD'     --           THEN 'SCDS USD'     -- WHEN pr.INST_TYPE = 'ICDS' and pr.ICDS_DETAIL = 'ITRAXX EUROPE MAIN'     --           THEN 'iTraxx Europe'     --       WHEN pr.INST_TYPE = 'ICDS' and pr.ICDS_DETAIL = 'ITRAXX EUROPE CROSSOVER'     --           THEN 'iTraxx Crossover'     --       WHEN pr.INST_TYPE = 'ICDS' and pr.ICDS_DETAIL = 'CDX NA IG'     --           THEN 'CDX NA IG'     --       WHEN pr.INST_TYPE = 'ICDS' and pr.ICDS_DETAIL = 'CDX NA HY'     --           THEN 'CDX NA HY'     --       WHEN pr.INST_TYPE in ('ICDS', 'SCDS')     --           THEN 'CDS Other'     --       WHEN pr.INST_TYPE in ('IRFUT') and ISNULL(pr.TRD_PURPOSE,'') <> 'MG004'     --           THEN 'Interest Rate Futures'     --       WHEN pr.INST_TYPE in ('BNDFUT') and ISNULL(pr.TRD_PURPOSE,'') <> 'MG004'     --           THEN 'Bond Futures'     --       WHEN pr.INST_TYPE in ('OPTFUT') and ISNULL(pr.TRD_PURPOSE,'') <> 'MG004'     --           THEN 'Option Futures'     --       WHEN pr.INST_TYPE in ('ETD') and ISNULL(pr.TRD_PURPOSE,'') <> 'MG004'     --           THEN 'ETD Not Rollover'     --       WHEN pr.INST_TYPE in ('IRFUT','BNDFUT','OPTFUT','ETD') and pr.TRD_PURPOSE = 'MG004'     --           THEN 'ETD Rollover'     --       WHEN pr.INST_TYPE in ('IRS','BASIS','ZCS','SWAP')     --           THEN 'IRS'     --       WHEN pr.INST_TYPE = 'IFS'     --           THEN 'IFS'     --       WHEN pr.INST_TYPE = 'ASWP'     --           THEN 'ASWP'     --       WHEN pr.INST_TYPE in ('CCS','CASWP')     --           THEN 'Cross Currency'     --   END AS [DMC_ASSET_TYPE],     --CASE      -- WHEN cast(tr2.EXECUTION_TIME as time) < convert(time,CUTOFF)      -- THEN     --  CASE      --   WHEN cast(tr2.TRD_AUTH_TIME as time) > convert(time,CUTOFF) THEN 'Y'     --  ELSE 'N'      --  END     --ELSE 'N'      --END AS [NAV_IMPACT_ELIGIBLE],     --CASE     -- WHEN pr.DEALING_DESK = 'DMG' THEN     --  CASE      --   WHEN  lst_trd.TRD_TRADE_DATE <> CONVERT(DATE, lst_trd.TRD_AUTH_TIME) THEN 'Across days'     --   WHEN DATEDIFF(minute, lst_trd.EXECUTION_TIME, lst_trd.TRD_AUTH_TIME) < 60 THEN ''     --  ELSE CONVERT(VARCHAR(5),DATEDIFF(minute, lst_trd.EXECUTION_TIME, lst_trd.TRD_AUTH_TIME) - 60) + ' mins'     --  END     --END AS [TIME_LATE_BY]        INTO #temp_final_master_table    FROM VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_DMG_TABLE mf    INNER JOIN #trades_metadata as t on t.[MULTI_FUND_ID] = mf.[MULTI_FUND_ID]    LEFT JOIN #Broker brkr on brkr.[MULTI_FUND_ID] = mf.[MULTI_FUND_ID]    LEFT JOIN #Funds fnd on fnd.[MULTI_FUND_ID] = mf.[MULTI_FUND_ID]    LEFT JOIN #trd_orders_metadata tr on tr.[ORD_NUM]=t.[ORD_NUM] AND mf.[DEALING_DESK]=tr.[DEALING_DESK]     LEFT JOIN (SELECT DISTINCT        MULTI_FUND_ID,       SUM_TRD_ORIG_FACE,       SUM_TRD_PRINCIPAL_GBP,       SUM_NET_CONSIDERATION_GBP          FROM #temp_t) sum_oface on sum_oface.[MULTI_FUND_ID]=t.[MULTI_FUND_ID]    LEFT JOIN (SELECT DISTINCT        VENUE,        ROUTE_DATETIME,        PLACEMENT_NUM,       FULL_NAME_VENUE         FROM VISTA_REPORTING.dbo.PLACEMENTS) pl on pl.[PLACEMENT_NUM]=t.[PLACEMENT_NUM]    LEFT JOIN (SELECT DISTINCT        MULTI_FUND_ID,        INST_TYPE,        TRD_CURRENCY,        DEALING_DESK,        PRIMARY_MARKET,        [Parent_trade_ID],        ORDER_INST_TYPE,        ICDS_DETAIL,        TRD_PURPOSE,       TWEB_CLOSE_DEALING,       INTERFUND_TRANSFER,       LINKED_MULTI_FUND,       [1615_DEALING],       DEBT_DERIV,       SM_SEC_GROUP,       DESC_INSTMT,       SM_SEC_TYPE,       TRAN_TYPE         FROM #prim_metadata) pr on pr.[MULTI_FUND_ID]=t.[MULTI_FUND_ID] AND pr.[DEALING_DESK] = mf.[DEALING_DESK]    LEFT JOIN (SELECT DISTINCT        MULTI_FUND_ID,       TRADER_FULL_NAME,       TRADER          FROM #min_touch) as t3 on t3.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]    LEFT JOIN (SELECT DISTINCT        ORD_NUM,       FACE          FROM #max_touch) as t5 on t5.ORD_NUM = t.ORD_NUM    --LEFT JOIN (SELECT DISTINCT     --   MULTI_FUND_ID,    --   TRD_COUPON,    --   TRAN_TYPE,    --   SM_CURRENCY,    --   TRD_PRICE,    --   TRD_PRICING_SPREAD,    --   TRD_YIELD,    --   TRD_COUNTERPARTY,    --   ACTIVITY_TYPE,    --   TRD_TRADE_DATE,    --   TRD_AUTH_TIME,    --   EXECUTION_TIME,    --   TRD_PURPOSE,    --   TRDCOMM_COMMENTS,    --   ACTIVITY_TYPE_DECODE,    --   TRD_ENTRY_TIME,    --   TRD_CURRENCY    --     FROM #Latest_TRD_TRADE_DATE) lst_trd     --on t.[MULTI_FUND_ID] = lst_trd.[MULTI_FUND_ID]    LEFT JOIN (SELECT DISTINCT        Inv_Desk_Concat,       MULTI_FUND_ID          FROM #Inv_desk_concat) inv_desk on t.[MULTI_FUND_ID] = inv_desk.[MULTI_FUND_ID]    LEFT JOIN (SELECT DISTINCT        TAG_NAME,       [VALUE],       CODE          FROM VISTA_REPORTING.dbo.DECODES) dc1 on dc1.TAG_NAME = 'TrdPurpose' AND dc1.CODE=t.TRD_PURPOSE    LEFT JOIN (SELECT DISTINCT        COMMENTS_VALUE,       ORD_NUM          FROM #Latest_Comment) lst_cm on t.[ORD_NUM] = lst_cm.[ORD_NUM]    LEFT JOIN (SELECT DISTINCT        PM_INST_concat,       MULTI_FUND_ID          FROM #PM_INST_concat) pmc on pmc.[MULTI_FUND_ID] = mf.[MULTI_FUND_ID]    LEFT JOIN (SELECT DISTINCT        client_fund,       CUTOFF          FROM VISTA_STAGING.dbo.NAV_CUT_OFFS) nv on nv.[CLIENT_FUND] = t.[PORTFOLIOS_PORTFOLIO_NAME]    LEFT JOIN #pct_nav_concat pct_nav on pct_nav.[MULTI_FUND_ID] = mf.[MULTI_FUND_ID]    LEFT JOIN (         SELECT DISTINCT        tr.ORD_NUM,       tr.MULTI_FUND_ID,       tr.TRD_CURRENCY,       tr.EXECUTION_TIME,       tr.TRD_AUTH_TIME,       tr.TRD_TRADE_DATE,       T2.SETTLE_DATE         FROM #trades_metadata as tr         inner join (SELECT           MULTI_FUND_ID,           MAX(TOUCH_COUNT) as MAX_TOUCH,          MAX(TRD_SETTLE_DATE) as SETTLE_DATE            FROM #trades_metadata            GROUP BY MULTI_FUND_ID) as t2 on (tr.MULTI_FUND_ID=t2.MULTI_FUND_ID) and (tr.TOUCH_COUNT=t2.MAX_TOUCH)        ) as tr2 on tr2.[MULTI_FUND_ID] = mf.[MULTI_FUND_ID]    --OUTER APPLY (SELECT TOP 1     --    nav.*     --    FROM VISTA_REPORTING.dbo.NAV     --    WHERE nav.PORTFOLIO_NAME = t.PORTFOLIOS_PORTFOLIO_NAME AND nav.NAV_PORT_DATE <= CONVERT(DATE, t.TRD_AUTH_TIME)     --    ORDER BY nav.NAV_PORT_DATE DESC) nav1    --OUTER APPLY (SELECT TOP 1     --    e.*     --    FROM VISTA_REPORTING.dbo.FX_RATES e     --    WHERE e.CURRENCY = t.TRD_CURRENCY and CONVERT(date, e.MARKDATE) <= CONVERT(date, t.EXECUTION_TIME)    --    ORDER BY e.MARKDATE DESC) e    LEFT JOIN (select * from VISTA_REPORTING.dbo.ORDERS_CROSS where TRD_ORD in (select ord_num from #trades_metadata)) oc ON oc.TRD_ORD=t.ORD_NUM    OUTER APPLY (SELECT TOP 1         i.TICKER,        i.ISIN,        i.SEDOL,        i.SM_SEC_GROUP,        i.SM_SEC_TYPE,        i.MATURITY        FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=coalesce(t.CUSIP, tr.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(t.EXECUTION_TIME, tr.AUTH_TIME)))           ORDER BY i.DATE DESC) as i2        IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_07_NON_WINNING_QUOTE_DMG_TABLE', 'U') IS NOT NULL     delete from VISTA_REPORTING.dbo.MASTER_MFID_VG_07_NON_WINNING_QUOTE_DMG_TABLE    where MFID in (SELECT DISTINCT MULTI_FUND_ID from #trades_metadata)        IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_07_NON_WINNING_QUOTE_DMG_TABLE', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_07_NON_WINNING_QUOTE_DMG_TABLE    SELECT *    FROM #temp_final_master_table        ELSE        SELECT *    INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_07_NON_WINNING_QUOTE_DMG_TABLE    FROM #temp_final_master_table        IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(    'MASTER_MFID_VG_07_NON_WINNING_QUOTE_DMG_TABLE', --TABLE_NAME    @START_TIME, --START_TIME    GETDATE(), --END_TIME    DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS    CAST(GETDATE() as date)) --COMPLETION_DATE        IF OBJECT_ID('tempdb..#trades_metadata', 'U') IS NOT NULL DROP TABLE #trades_metadata    IF OBJECT_ID('tempdb..#trd_orders_metadata', 'U') IS NOT NULL DROP TABLE #trd_orders_metadata    IF OBJECT_ID('tempdb..#prim_metadata', 'U') IS NOT NULL DROP TABLE #prim_metadata    IF OBJECT_ID('tempdb..#Latest_TRD_TRADE_DATE', 'U') IS NOT NULL DROP TABLE #Latest_TRD_TRADE_DATE    IF OBJECT_ID('tempdb..#MFID_inv_Desk', 'U') IS NOT NULL DROP TABLE #MFID_inv_Desk    IF OBJECT_ID('tempdb..#Inv_desk_concat', 'U') IS NOT NULL DROP TABLE #Inv_desk_concat    IF OBJECT_ID('tempdb..#Latest_Comment', 'U') IS NOT NULL DROP TABLE #Latest_Comment    IF OBJECT_ID('tempdb..#min_touch', 'U') IS NOT NULL DROP TABLE #min_touch    IF OBJECT_ID('tempdb..#max_touch', 'U') IS NOT NULL DROP TABLE #max_touch            END            --exec VISTA_STAGING.dbo.MASTER_MFID_TABLE_VG_07_NON_WINNING_QUOTE_DMG    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_MFID_TABLE_VG_10_TIMELY_RECORDING_CASH  CreateDate: 2025-06-26 17:51:00.630  ModifyDate: 2025-07-01 11:47:51.990  --- DEFINITION START ---  -- =============================================      -- Author:  <LIZZIE REYNOLDS>      -- Create date: <18/06/2019>      -- Description: <MASTER TABLE TO ADD COLUMNS REQUIRED FOR FRONT END>      -- =============================================      CREATE    PROCEDURE [dbo].[MASTER_MFID_TABLE_VG_10_TIMELY_RECORDING_CASH]            AS      BEGIN       -- SET NOCOUNT ON added to prevent extra result sets from       -- interfering with SELECT statements.       SET NOCOUNT ON;            --Used to track total time stored procedure took to run      DECLARE @START_TIME as datetime      SET @START_TIME = GETDATE()            IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids      SELECT DISTINCT TRANSACTION_NUMBER, SOURCE      INTO #distinct_ids      FROM VISTA_STAGING.DBO.vg_10_timely_recording_cash_mm_table            UNION ALL            SELECT DISTINCT TRANSACTION_NUMBER, SOURCE      FROM VISTA_STAGING.DBO.vg_10_timely_recording_cash_rr_table                  --If the master table doesn't exist then we want to use all the data available, otherwise just the most recent data      IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE', 'U') IS NOT NULL      AND OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_RR_TABLE', 'U') IS NOT NULL      DELETE FROM #distinct_ids       where NOT EXISTS (SELECT od.TRANSACTION_NUMBER            FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_CASH od            WHERE od.TRANSACTION_NUMBER = #distinct_ids.TRANSACTION_NUMBER)      AND #distinct_ids.SOURCE = 'CM'            IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE', 'U') IS NOT NULL      AND OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_RR_TABLE', 'U') IS NOT NULL      DELETE FROM #distinct_ids       where NOT EXISTS (SELECT od.MULTI_FUND_ID            FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od            WHERE od.MULTI_FUND_ID = #distinct_ids.TRANSACTION_NUMBER)      AND #distinct_ids.SOURCE = 'AL'            IF OBJECT_ID('tempdb..#temp_cash_orders', 'U') IS NOT NULL DROP TABLE #temp_cash_orders      SELECT DISTINCT t.ORDER_ID      into #temp_cash_orders      from Vista_Reporting.dbo.CASH_TRADES t      INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = t.TRANSACTION_NUMBER            UNION            SELECT DISTINCT oc.PM_ORD      FROM Vista_Reporting.dbo.TRADES tr      INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = tr.MULTI_FUND_ID      LEFT JOIN Vista_Reporting.dbo.ORDERS_CROSS oc on oc.TRD_ORD = tr.ORD_NUM                  IF OBJECT_ID('tempdb..#temp_max_trade_touch', 'U') IS NOT NULL DROP TABLE #temp_max_trade_touch      SELECT       t.MULTI_FUND_ID,       MAX(t.TOUCH_COUNT) AS MAX_TOUCH      INTO #temp_max_trade_touch      FROM VISTA_REPORTING.dbo.TRADES t      INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = t.MULTI_FUND_ID      GROUP BY MULTI_FUND_ID                     IF OBJECT_ID('tempdb..#temp_max_ORDER_touch', 'U') IS NOT NULL DROP TABLE #temp_max_ORDER_touch      SELECT       ORD_NUM,       MAX(TOUCH_COUNT) AS MAX_TOUCH      INTO #temp_max_ORDER_touch      FROM VISTA_REPORTING.dbo.PM_ORDERS pm      INNER JOIN #temp_cash_orders tco ON tco.ORDER_ID = pm.ORD_NUM      GROUP BY ORD_NUM                  IF OBJECT_ID('tempdb..#temp_max_req_orders', 'U') IS NOT NULL DROP TABLE #temp_max_req_orders      SELECT        co.ORDER_ID,       MAX(API_REQUESTED_DATE) AS MAX_API_REQ      INTO #temp_max_req_orders      FROM VISTA_REPORTING.dbo.CASH_ORDERS co      INNER JOIN #temp_cash_orders tco ON co.ORDER_ID = tco.ORDER_ID      GROUP BY co.ORDER_ID                  IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades      SELECT        ct.TRANSACTION_NUMBER,       MAX(ct.API_REQUESTED_DATE) AS MAX_API_REQ      INTO #temp_max_req_trades      FROM VISTA_REPORTING.dbo.CASH_TRADES ct      INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER      GROUP BY ct.TRANSACTION_NUMBER            IF OBJECT_ID('tempdb..#temp_TRADE_conc_MM', 'U') IS NOT NULL DROP TABLE #temp_TRADE_conc_MM      SELECT --DISTINCT        e.TRANSACTION_NUMBER,       CASE         WHEN e.SOURCE = 'AL' THEN T.TRAN_TYPE         WHEN e.SOURCE = 'CM' THEN CT.TRANSACTION_TYPE        END AS  [TRANSACTION_TYPE]       ,CASE         WHEN e.SOURCE = 'AL' THEN T.TRD_ORIG_FACE         WHEN e.SOURCE = 'CM' THEN CT.DEALT_AMOUNT         END AS  [DEALT_AMOUNT]       ,SOURCE       INTO #temp_TRADE_conc_MM       FROM VISTA_STAGING.DBO.vg_10_timely_recording_cash_mm_table e       LEFT JOIN (SELECT DISTINCT T.MULTI_FUND_ID, TRAN_TYPE, TOUCH_COUNT, TRD_ORIG_FACE             FROM VISTA_REPORTING.DBO.TRADES T             INNER JOIN #temp_max_trade_touch MTT ON MTT.MAX_TOUCH = T.TOUCH_COUNT AND MTT.MULTI_FUND_ID = T.MULTI_FUND_ID) T ON T.MULTI_FUND_ID = e.TRANSACTION_NUMBER       LEFT JOIN (SELECT DISTINCT ct.TRANSACTION_NUMBER, TRANSACTION_TYPE, DEALT_AMOUNT                   FROM VISTA_REPORTING.DBO.CASH_TRADES ct            INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER) CT ON e.TRANSACTION_NUMBER = CT.TRANSACTION_NUMBER                  IF OBJECT_ID('tempdb..#temp_TRADE_conc_RR', 'U') IS NOT NULL DROP TABLE #temp_TRADE_conc_RR      SELECT --DISTINCT        e.TRANSACTION_NUMBER,       CT.TRANSACTION_TYPE AS  [TRANSACTION_TYPE]       ,CT.DEALT_AMOUNT AS  [DEALT_AMOUNT]       ,e.SOURCE       INTO #temp_TRADE_conc_RR       FROM VISTA_STAGING.DBO.vg_10_timely_recording_cash_RR_table e       LEFT JOIN (SELECT DISTINCT TRANSACTION_NUMBER, TRANSACTION_TYPE, DEALT_AMOUNT             FROM VISTA_REPORTING.DBO.CASH_TRADES) CT ON e.TRANSACTION_NUMBER = CT.TRANSACTION_NUMBER       INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = e.TRANSACTION_NUMBER       WHERE e.SOURCE = 'CM'            IF OBJECT_ID('tempdb..#TEMP_TRADES_DISTINCT', 'U') IS NOT NULL DROP TABLE #TEMP_TRADES_DISTINCT      SELECT DISTINCT         oc.PM_ORD AS ORD_NUM,         t.MULTI_FUND_ID,         ABS(pm.FACE) AS FACE,        t.TRD_ORIG_FACE      INTO #TEMP_TRADES_DISTINCT      FROM VISTA_REPORTING.DBO.TRADES T      INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = T.MULTI_FUND_ID      LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.TRD_ORD = T.ORD_NUM      LEFT JOIN(SELECT PM.ORD_NUM, PM.FACE, PM.FILL_AMT, PM.TOUCH_COUNT           FROM VISTA_REPORTING.DBO.PM_ORDERS PM           INNER JOIN #temp_max_ORDER_touch MOT ON MOT.ORD_NUM = PM.ORD_NUM AND MOT.MAX_TOUCH = PM.TOUCH_COUNT) PM ON OC.PM_ORD = PM.ORD_NUM            IF OBJECT_ID('tempdb..#REMAIN_AMT', 'U') IS NOT NULL DROP TABLE #REMAIN_AMT      SELECT --DISTINCT       ORD_NUM AS ORDER_ID,        MULTI_FUND_ID,       SUM(ABS(TRD_ORIG_FACE)) AS [Booked_Amt],       FACE - SUM(ABS(TRD_ORIG_FACE)) AS [Remain_Amt],       'AL' AS SOURCE      INTO #REMAIN_AMT      FROM #TEMP_TRADES_DISTINCT t      INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = t.MULTI_FUND_ID      GROUP BY       ORD_NUM,       MULTI_FUND_ID,       FACE            IF OBJECT_ID('tempdb..#TEMP_TRADES_DISTINCT_CM', 'U') IS NOT NULL DROP TABLE #TEMP_TRADES_DISTINCT_CM       SELECT --DISTINCT        CO.ORDER_ID        , ct.TRANSACTION_NUMBER        , INSTRUCTED_AMOUNT        , DEALT_AMOUNT       INTO #TEMP_TRADES_DISTINCT_CM       FROM VISTA_REPORTING.DBO.CASH_TRADES CT       LEFT JOIN (SELECT DISTINCT ORDER_ID, INSTRUCTED_AMOUNT FROM VISTA_REPORTING.DBO.CASH_ORDERS) CO ON CO.ORDER_ID = CT.ORDER_ID       INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER                  IF OBJECT_ID('tempdb..#REMAIN_AMT_CM', 'U') IS NOT NULL DROP TABLE #REMAIN_AMT_CM      SELECT --DISTINCT       ORDER_ID,       ct.TRANSACTION_NUMBER,       SUM(ABS(DEALT_AMOUNT)) AS INSTRUCTION_COMPLETED_AMOUNT,       INSTRUCTED_AMOUNT - SUM(ABS(DEALT_AMOUNT)) AS INSTRUCTION_REMAINING_AMOUNT,       'CM' AS SOURCE      INTO #REMAIN_AMT_CM      FROM #TEMP_TRADES_DISTINCT_CM ct      INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER       GROUP BY       ORDER_ID,       ct.TRANSACTION_NUMBER,       DEALT_AMOUNT,       INSTRUCTED_AMOUNT                        IF OBJECT_ID('tempdb..#concat_MM', 'U') IS NOT NULL DROP TABLE #concat_MM      SELECT       vg.TRANSACTION_NUMBER,       vg.SOURCE,          STUFF((              SELECT  ' | ' + CAST(TRANSACTION_TYPE AS VARCHAR(50))              FROM #temp_TRADE_conc_MM              WHERE (TRANSACTION_NUMBER = vg.TRANSACTION_NUMBER AND SOURCE = vg.SOURCE AND TRANSACTION_TYPE is NOT NULL) ORDER BY TRANSACTION_NUMBER              FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')          ,1,2,'') AS TRANSACTION_TYPE,       STUFF((              SELECT  ' | ' + CAST(FORMAT(CONVERT(DECIMAL(38,2),DEALT_AMOUNT), '#,0.00') AS VARCHAR(50))              FROM #temp_TRADE_conc_MM              WHERE (TRANSACTION_NUMBER = vg.TRANSACTION_NUMBER AND SOURCE = vg.SOURCE AND DEALT_AMOUNT is NOT NULL) ORDER BY TRANSACTION_NUMBER              FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')          ,1,2,'') AS DEALT_AMOUNT,        STUFF((              SELECT  ' | ' + CAST(FORMAT(CONVERT(DECIMAL(38,2),Booked_Amt), '#,0.00') AS VARCHAR(50))              FROM #REMAIN_AMT ra              WHERE (ra.MULTI_FUND_ID = vg.TRANSACTION_NUMBER AND SOURCE = vg.SOURCE AND Booked_Amt is NOT NULL) ORDER BY vg.TRANSACTION_NUMBER              FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')          ,1,2,'') AS INSTRUCTION_COMPLETED_AMOUNT_AL,       STUFF((              SELECT  ' | ' + CAST(FORMAT(CONVERT(DECIMAL(38,2),Remain_Amt), '#,0.00') AS VARCHAR(50))              FROM #REMAIN_AMT ra              WHERE (ra.MULTI_FUND_ID = vg.TRANSACTION_NUMBER AND SOURCE = vg.SOURCE AND Remain_Amt is NOT NULL) ORDER BY vg.TRANSACTION_NUMBER              FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')          ,1,2,'') AS INSTRUCTION_REMAINING_AMOUNT_AL,       STUFF((              SELECT  ' | ' + CAST(FORMAT(CONVERT(DECIMAL(38,2),INSTRUCTION_COMPLETED_AMOUNT), '#,0.00') AS VARCHAR(50))              FROM #REMAIN_AMT_CM              WHERE (TRANSACTION_NUMBER = vg.TRANSACTION_NUMBER AND SOURCE = vg.SOURCE AND INSTRUCTION_COMPLETED_AMOUNT is NOT NULL) ORDER BY TRANSACTION_NUMBER              FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')          ,1,2,'') AS INSTRUCTION_COMPLETED_AMOUNT_CM,       STUFF((              SELECT  ' | ' + CAST(FORMAT(CONVERT(DECIMAL(38,2),INSTRUCTION_REMAINING_AMOUNT), '#,0.00') AS VARCHAR(50))              FROM #REMAIN_AMT_CM              WHERE (TRANSACTION_NUMBER = vg.TRANSACTION_NUMBER AND SOURCE = vg.SOURCE AND INSTRUCTION_REMAINING_AMOUNT is NOT NULL) ORDER BY TRANSACTION_NUMBER              FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')          ,1,2,'') AS INSTRUCTION_REMAINING_AMOUNT_CM       INTO #CONCAT_MM       FROM VISTA_STAGING.DBO.vg_10_timely_recording_cash_mm_table VG       INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = vg.TRANSACTION_NUMBER                  IF OBJECT_ID('tempdb..#concat_RR', 'U') IS NOT NULL DROP TABLE #concat_RR      SELECT       vg.TRANSACTION_NUMBER,       vg.SOURCE,          STUFF((              SELECT  ' | ' + CAST(TRANSACTION_TYPE AS VARCHAR(50))              FROM #temp_TRADE_conc_RR              WHERE (TRANSACTION_NUMBER = vg.TRANSACTION_NUMBER AND SOURCE = vg.SOURCE AND TRANSACTION_TYPE is NOT NULL) ORDER BY TRANSACTION_NUMBER              FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')          ,1,2,'') AS TRANSACTION_TYPE,       STUFF((              SELECT  ' | ' + CAST(FORMAT(CONVERT(DECIMAL(38,2),DEALT_AMOUNT), '#,0.00') AS VARCHAR(50))              FROM #temp_TRADE_conc_RR              WHERE (TRANSACTION_NUMBER = vg.TRANSACTION_NUMBER AND SOURCE = vg.SOURCE AND DEALT_AMOUNT is NOT NULL) ORDER BY TRANSACTION_NUMBER              FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')          ,1,2,'') AS DEALT_AMOUNT,       STUFF((              SELECT  ' | ' + CAST(FORMAT(CONVERT(DECIMAL(38,2),INSTRUCTION_COMPLETED_AMOUNT), '#,0.00') AS VARCHAR(50))              FROM #REMAIN_AMT_CM              WHERE (TRANSACTION_NUMBER = vg.TRANSACTION_NUMBER AND SOURCE = vg.SOURCE AND INSTRUCTION_COMPLETED_AMOUNT is NOT NULL) ORDER BY TRANSACTION_NUMBER              FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')          ,1,2,'') AS INSTRUCTION_COMPLETED_AMOUNT_CM,       STUFF((              SELECT  ' | ' + CAST(FORMAT(CONVERT(DECIMAL(38,2),INSTRUCTION_REMAINING_AMOUNT), '#,0.00') AS VARCHAR(50))              FROM #REMAIN_AMT_CM              WHERE (TRANSACTION_NUMBER = vg.TRANSACTION_NUMBER AND SOURCE = vg.SOURCE AND INSTRUCTION_REMAINING_AMOUNT is NOT NULL) ORDER BY TRANSACTION_NUMBER              FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')          ,1,2,'') AS INSTRUCTION_REMAINING_AMOUNT_CM       INTO #CONCAT_RR       FROM VISTA_STAGING.DBO.vg_10_timely_recording_cash_RR_table VG       INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = vg.TRANSACTION_NUMBER         IF OBJECT_ID('tempdb..#temp_final_master_table_mm', 'U') IS NOT NULL DROP TABLE #temp_final_master_table_mm       SELECT distinct         COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) AS  [DEALER_NAME]        ,CT.TIMELY_RECORDING_EXCEPTION_REASON AS  [TIMELY_RECORDING_EXCEPTION_REASON]        ,CT.TIMELY_RECORDING_EXCEPTION_NARRATION AS [TIMELY_RECORDING_EXCEPTION_NARRATION]        ,CASE WHEN e.SOURCE = 'AL' THEN FORMAT(T.TRD_AUTH_TIME, 'dd/MM/yyyy HH:mm:ss') WHEN e.SOURCE = 'CM' THEN FORMAT(CO.INSTRUCTION_RECEIVED_DATE, 'dd/MM/yyyy HH:mm:ss') END AS [INSTRUCTION_RECEIVED_DATE_TIME]        ,CASE WHEN e.SOURCE = 'AL' THEN FORMAT(PM.AUTH_TIME, 'dd/MM/yyyy HH:mm:ss') WHEN e.SOURCE = 'CM' THEN FORMAT(CO.OMQ_DATE_TIME, 'dd/MM/yyyy HH:mm:ss') END AS [OMQ_DATE_TIME]        ,CASE WHEN e.SOURCE = 'AL' THEN FORMAT(PM.ACTIVE_TIME, 'dd/MM/yyyy HH:mm:ss') WHEN e.SOURCE = 'CM' THEN FORMAT(CO.ACCEPTED_DATETIME, 'dd/MM/yyyy HH:mm:ss') END AS  [ACCEPTED_DATE_TIME]        ,CASE WHEN e.SOURCE = 'AL' THEN FORMAT(T.TRD_AUTH_TIME, 'dd/MM/yyyy HH:mm:ss') WHEN e.SOURCE = 'CM' THEN FORMAT(CT.CONFIRMED_DATETIME, 'dd/MM/yyyy HH:mm:ss') END AS [CONFIRMED_DATE_TIME]        ,CASE WHEN e.SOURCE = 'AL' THEN FORMAT(T.EXECUTION_TIME, 'dd/MM/yyyy HH:mm:ss') WHEN e.SOURCE = 'CM' THEN FORMAT(CT.UPLOADED_DATE_TIME, 'dd/MM/yyyy HH:mm:ss') END AS [UPLOADED_DATE_TIME]        ,case when e.daydiff != 0 then concat(e.daydiff, ' Days ', e.minsdiff/60, ' Mins') when (e.DAYDIFF IS null OR e.MINSDIFF IS null) then null  else concat(e.minsdiff/60, ' Mins') end as [TIME_ELAPSED_BETWEEN_UPLOADED_AND_CONFIRMED]        ,CONCAT(COALESCE((TREC.CASH_TR_THRESHOLD)/60, '30'), ' Mins') AS  [TIMELY_RECORDING_THRESHOLD_MINS]        ,CASE WHEN e.VG_10 = 1 THEN 'Exception' ELSE '' END AS EXCEPTION        ,CASE WHEN e.SOURCE = 'CM' THEN CAST(CT.CLIENT_FUND_OR_POOL_CODE AS VARCHAR(30)) WHEN e.SOURCE = 'AL' THEN CAST(T.FUND AS VARCHAR(30))  END AS  [CLIENT_FUND_POOL_CODE]        ,CASE WHEN e.SOURCE = 'CM' THEN CAST(CT.BASE_FUND_CODE AS VARCHAR(30)) WHEN e.SOURCE = 'AL' THEN CAST(PO.PORTFOLIOS_PORTFOLIO_NAME AS VARCHAR(30)) END AS [BASE_FUND_CODE]        ,CASE WHEN e.SOURCE = 'AL' THEN PM.CURRENCY WHEN e.SOURCE = 'CM' THEN CO.INSTRUCTED_CURRENCY END AS [CURRENCY]        ,CASE WHEN e.SOURCE = 'AL' THEN PRIM.INST_TYPE WHEN e.SOURCE = 'CM' THEN CT.PRODUCT END AS [PRODUCT]        ,CASE WHEN e.SOURCE = 'AL' THEN FORMAT(CONVERT(DECIMAL(38,2),PM.FACE), '#,0.00') WHEN e.SOURCE = 'CM' THEN FORMAT(CONVERT(DECIMAL(38,2),CO.INSTRUCTED_AMOUNT), '#,0.00') END AS [INSTRUCTED_AMOUNT]        ,CASE WHEN e.SOURCE = 'CM' THEN CT.TERM WHEN e.SOURCE = 'AL' THEN NULL END AS ORDER_TERM        ,CASE WHEN e.SOURCE = 'CM' THEN DATEDIFF(DAY, CT.VALUE_DATE, CT.MATURITY_DATE) WHEN e.SOURCE = 'AL' THEN DATEDIFF(DAY, PM.SETTLE_DATE, T.TRD_TRADE_DATE) END AS NO_OF_DAYS        ,CASE WHEN e.SOURCE = 'AL' THEN FORMAT(T.TRD_TRADE_DATE, 'dd/MM/yyyy') WHEN e.SOURCE = 'CM' THEN FORMAT(CT.TRADE_DATE, 'dd/MM/yyyy') END AS [TRADE_DATE]        ,CASE WHEN e.SOURCE = 'AL' THEN FORMAT(T.TRD_TRADE_DATE, 'dd/MM/yyyy') WHEN e.SOURCE = 'CM' THEN FORMAT(CT.VALUE_DATE, 'dd/MM/yyyy') END AS [VALUE_DATE] --THIS CANNOT BE RIGHT NEEDS UPDATING        ,CASE WHEN e.SOURCE = 'AL' THEN FORMAT(PM.SETTLE_DATE, 'dd/MM/yyyy') WHEN e.SOURCE = 'CM' THEN FORMAT(CT.MATURITY_DATE, 'dd/MM/yyyy') END AS [MATURITY_DATE]        ,C.[TRANSACTION_TYPE]        ,CASE WHEN e.SOURCE = 'CM' THEN CO.INSTRUCTED_BY WHEN e.SOURCE = 'AL' THEN PM.PM_FULL_NAME END  AS INSTRUCTED_BY        ,CASE WHEN e.SOURCE = 'CM' THEN CO.CUSTOM_INSTRUCTION WHEN e.SOURCE = 'AL' THEN PM.COMMENTS_VALUE END AS CUSTOM_INSTRUCTION        ,CASE WHEN e.SOURCE = 'CM' THEN COALESCE(CO.BUSINESS_GROUP, CT.BUSINESS_GROUP) WHEN e.SOURCE = 'AL' THEN NULL END  AS BUSINESS_GROUP --NEED TO ADD BUSINESS GROUP FOR ALADDIN        ,CASE WHEN e.SOURCE = 'CM' THEN CO.ACCEPTED_BY WHEN e.SOURCE = 'AL' THEN T.TRD_TRADER END AS ACCEPTED_BY        ,CASE WHEN e.SOURCE = 'AL' THEN CAST(ASD.STATUS_DECODE AS VARCHAR(20)) WHEN e.SOURCE = 'CM' THEN CAST(CO.INSTRUCTION_STATUS_DECODE AS VARCHAR(20)) END AS [INSTRUCTION_STATUS]        , CASE WHEN e.SOURCE = 'AL' THEN OC.PM_ORD WHEN e.SOURCE = 'CM' THEN CT.ORDER_ID END AS [ORDER_ID]        ,e.[TRANSACTION_NUMBER]        ,CASE WHEN e.SOURCE = 'AL' THEN CAST(ASD2.STATUS_DECODE AS VARCHAR(20)) WHEN e.SOURCE = 'CM' THEN CAST(CT.TRANSACTION_STATUS_DECODE AS VARCHAR(20)) END AS [TRANSACTION_STATUS]        ,C.[DEALT_AMOUNT]        ,CASE WHEN e.SOURCE = 'AL' THEN C.INSTRUCTION_COMPLETED_AMOUNT_AL WHEN e.SOURCE = 'CM' THEN C.INSTRUCTION_COMPLETED_AMOUNT_CM END AS [INSTRUCTION_COMPLETED_AMOUNT] --SUM OF DEALT AMOUNT FOR EACH INSTRUCTION? HOW DO I DO THIS        ,CASE WHEN e.SOURCE = 'AL' THEN C.INSTRUCTION_REMAINING_AMOUNT_AL WHEN e.SOURCE = 'CM' THEN C.INSTRUCTION_REMAINING_AMOUNT_CM END AS [INSTRUCTION_REMAINING_AMOUNT]--INSTRUCTED AMOUNT - INSTRUCTION COMPLETED AMOUNT?        ,CT.EXECUTED_RATE        ,e.[VG_10_CREATETIME] as [CREATE_DATE]        ,e.vg_10 as [EXCEPTION_FLAG]        ,case when e.SOURCE = 'al' then  T.TRD_AUTH_TIME when e.SOURCE = 'cm' then CT.CONFIRMED_DATETIME end as OS_CONFIRMED_DATETIME        ,e.SOURCE AS [DATA_SOURCE]       INTO #temp_final_master_table_mm       FROM VISTA_staging.dbo.vg_10_timely_recording_cash_mm_table e       inner join #distinct_ids di on di.TRANSACTION_NUMBER = e.TRANSACTION_NUMBER and e.SOURCE = di.SOURCE       LEFT JOIN #CONCAT_MM C ON C.TRANSACTION_NUMBER = e.TRANSACTION_NUMBER AND C.SOURCE = e.SOURCE       LEFT JOIN (SELECT DISTINCT T.MULTI_FUND_ID, ORD_NUM, TRD_AUTH_TIME, TRAN_TYPE,TRD_STATUS, EXECUTION_TIME, TRD_TRADER, FUND, SM_CURRENCY, TRD_ORIG_FACE, TRD_TRADE_DATE, PULL_DATE, TOUCH_COUNT            FROM VISTA_REPORTING.DBO.TRADES T          INNER JOIN #temp_max_trade_touch MTT ON MTT.MAX_TOUCH = T.TOUCH_COUNT AND MTT.MULTI_FUND_ID = T.MULTI_FUND_ID) T ON e.TRANSACTION_NUMBER = T.MULTI_FUND_ID       LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON T.ORD_NUM = OC.TRD_ORD       LEFT JOIN (SELECT DISTINCT PM.ORD_NUM, ACTIVE_TIME, AUTH_TIME, SM_SEC_TYPE, CURRENCY, FACE, STATUS, TOUCH_COUNT, MAX(SETTLE_DATE) AS SETTLE_DATE, PM_FULL_NAME, COMMENTS_VALUE, PULL_DATE, TRADER           FROM VISTA_REPORTING.DBO.PM_ORDERS PM          INNER JOIN #temp_max_ORDER_touch MOT ON MOT.ORD_NUM = PM.ORD_NUM AND MOT.MAX_TOUCH = PM.TOUCH_COUNT           GROUP BY PM.ORD_NUM,ACTIVE_TIME, AUTH_TIME, SM_SEC_TYPE, CURRENCY,SETTLE_DATE,FACE, STATUS, TOUCH_COUNT, PM_FULL_NAME, COMMENTS_VALUE, PULL_DATE, TRADER) PM ON OC.PM_ORD = PM.ORD_NUM       LEFT JOIN (SELECT DISTINCT FUND, PORTFOLIOS_PORTFOLIO_NAME           FROM VISTA_REPORTING.dbo.PORTFOLIO) PO ON PO.FUND = T.FUND       LEFT JOIN  (SELECT DISTINCT CT.TRANSACTION_NUMBER, ORDER_ID, TRANSACTION_TYPE, EXECUTED_DATETIME, TIMELY_RECORDING_EXCEPTION_NARRATION, TIMELY_RECORDING_EXCEPTION_REASON, UPLOADED_DATE_TIME, CONFIRMED_DATETIME, TRANSACTION_STATUS_DECODE, TRADE_CURRENCY,       DEALER_NAME, DEALT_AMOUNT, PRODUCT, BASE_FUND_CODE, BUSINESS_GROUP, CLIENT_FUND_OR_POOL_CODE, PULL_DATE, TERM, VALUE_DATE, MATURITY_DATE, EXECUTED_RATE, TRADE_DATE FROM VISTA_REPORTING.DBO.CASH_TRADES ct       INNER JOIN #temp_max_req_trades REQ ON REQ.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER AND REQ.MAX_API_REQ = ct.API_REQUESTED_DATE) CT ON e.SOURCE = 'CM' AND e.TRANSACTION_NUMBER = CT.TRANSACTION_NUMBER       LEFT JOIN (SELECT DISTINCT CO.ORDER_ID, INSTRUCTION_STATUS_DECODE, ACCEPTED_DATETIME, INSTRUCTED_AMOUNT, MATURITY_DATE, TRADE_DATE, INSTRUCTED_CURRENCY, OMQ_DATE_TIME, INSTRUCTION_RECEIVED_DATE, VALUE_DATE, INSTRUCTED_BY, CUSTOM_INSTRUCTION, BUSINESS_GROUP, ACCEPTED_BY, PULL_DATE FROM VISTA_REPORTING.DBO.CASH_ORDERS CO       INNER JOIN #temp_max_req_orders REQ ON REQ.MAX_API_REQ = CO.API_REQUESTED_DATE AND REQ.ORDER_ID = CO.ORDER_ID) CO ON CT.ORDER_ID = CO.ORDER_ID       LEFT JOIN VISTA_STAGING.DBO.REF_CASH_TIMELY_REC_THRESHOLD TREC ON ((e.SOURCE = 'AL' AND  TREC.CURRENCY_CODE = T.SM_CURRENCY) OR (e.SOURCE = 'CM' AND TREC.CURRENCY_CODE = CT.TRADE_CURRENCY)) AND CAST(COALESCE(CT.PULL_DATE, T.PULL_DATE) AS DATE) BETWEEN CAST(TREC.DATE_FROM AS DATE) AND CAST(TREC.DATE_TO AS DATE)       LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD ON (TDD.MG_USER_ID  = CT.DEALER_NAME AND e.SOURCE = 'CM') OR (TDD.INITIALS = T.TRD_TRADER AND e.SOURCE = 'AL') AND CAST(COALESCE(CT.PULL_DATE,T.PULL_DATE) AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE)       AND CAST(TDD.DATE_TO AS DATE)       LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD2 ON ((TDD2.MG_USER_ID  = COALESCE(CO.ACCEPTED_BY, CO.INSTRUCTED_BY) AND e.SOURCE = 'CM') OR (TDD2.INITIALS = PM.TRADER AND e.SOURCE = 'AL')) AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE) AS DATE) BETWEEN CAST(TDD2.DATE_FROM AS DATE) AND CAST(TDD2.DATE_TO AS DATE)       LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'Timely Recording MM'                     AND CAST(COALESCE(ct.PULL_DATE, t.PULL_DATE,co.[PULL_DATE],pm.[PULL_DATE]) AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)       LEFT JOIN (SELECT DISTINCT INST_TYPE, MULTI_FUND_ID FROM VISTA_REPORTING.DBO.PRIMARY_INST_TYPE_TABLE) PRIM ON e.SOURCE = 'AL' AND PRIM.MULTI_FUND_ID = e.TRANSACTION_NUMBER       LEFT JOIN VISTA_STAGING.DBO.REF_cash_ALADDIN_STATUS_DECODE ASD ON e.SOURCE = 'AL' AND (ASD.[STATUS] = PM.STATUS)       LEFT JOIN VISTA_STAGING.DBO.REF_cash_ALADDIN_STATUS_DECODE ASD2 ON e.SOURCE = 'AL' AND (ASD2.[STATUS] = T.TRD_STATUS)                            IF OBJECT_ID('tempdb..#temp_final_master_table_rr', 'U') IS NOT NULL DROP TABLE #temp_final_master_table_rr       SELECT distinct         COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) AS  [DEALER_NAME]        ,CT.TIMELY_RECORDING_EXCEPTION_REASON AS  [TIMELY_RECORDING_EXCEPTION_REASON]        ,CT.TIMELY_RECORDING_EXCEPTION_NARRATION AS [TIMELY_RECORDING_EXCEPTION_NARRATION]        ,FORMAT(CO.INSTRUCTION_RECEIVED_DATE, 'dd/MM/yyyy HH:mm:ss') AS [INSTRUCTION_RECEIVED_DATE_TIME]        ,FORMAT(CO.OMQ_DATE_TIME, 'dd/MM/yyyy HH:mm:ss')  AS [OMQ_DATE_TIME]        ,FORMAT(CO.ACCEPTED_DATETIME, 'dd/MM/yyyy HH:mm:ss') AS  [ACCEPTED_DATE_TIME]        , FORMAT(CT.CONFIRMED_DATETIME, 'dd/MM/yyyy HH:mm:ss') AS CONFIRMED_DATE_TIME        , FORMAT(CT.UPLOADED_DATE_TIME, 'dd/MM/yyyy HH:mm:ss') AS UPLOADED_DATE_TIME        ,case when e.daydiff != 0 then concat(e.daydiff, ' Days ', e.minsdiff/60, ' Mins') when (e.DAYDIFF IS null OR e.MINSDIFF IS null) then null else concat(e.minsdiff/60, ' Mins') end as [TIME_ELAPSED_BETWEEN_UPLOADED_AND_CONFIRMED]        ,CONCAT(COALESCE((TREC.CASH_TR_THRESHOLD)/60, '30'), ' Mins') AS  [TIMELY_RECORDING_THRESHOLD_MINS]        , CASE WHEN e.VG_10 = 1 THEN 'Exception' else '' end as EXCEPTION        ,CAST(CT.CLIENT_FUND_OR_POOL_CODE AS VARCHAR(30)) AS  [CLIENT_FUND_POOL_CODE]        ,CAST(CT.BASE_FUND_CODE AS VARCHAR(30))AS [BASE_FUND_CODE]        ,CO.INSTRUCTED_CURRENCY AS [INSTRUCTED_CURRENCY]        ,CT.PRODUCT AS [PRODUCT]        ,FORMAT(CONVERT(DECIMAL(38,2),CO.INSTRUCTED_AMOUNT), '#,0.00') AS [INSTRUCTED_AMOUNT]        ,CT.TERM AS TERM        ,DATEDIFF(DAY, CT.VALUE_DATE, CT.MATURITY_DATE)  AS NO_OF_DAYS        ,FORMAT(CT.TRADE_DATE, 'dd/MM/yyyy') AS [TRADE_DATE]        ,FORMAT(CT.VALUE_DATE, 'dd/MM/yyyy') AS [VALUE_DATE]        ,FORMAT(CT.MATURITY_DATE, 'dd/MM/yyyy') AS [MATURITY_DATE]        ,C.[TRANSACTION_TYPE]        ,CO.ACCEPTED_BY        ,CAST(CO.INSTRUCTION_STATUS_DECODE AS VARCHAR(20)) AS [INSTRUCTION_STATUS]        ,CT.ORDER_ID AS [ORDER_ID]        ,e.[TRANSACTION_NUMBER]        ,CAST(CT.TRANSACTION_STATUS_DECODE AS VARCHAR(20)) AS [TRANSACTION_STATUS]        ,C.[DEALT_AMOUNT]        ,C.INSTRUCTION_COMPLETED_AMOUNT_CM  AS [INSTRUCTION_COMPLETED_AMOUNT] --SUM OF DEALT AMOUNT FOR EACH INSTRUCTION? HOW DO I DO THIS        ,C.INSTRUCTION_REMAINING_AMOUNT_CM AS [INSTRUCTION_REMAINING_AMOUNT]--INSTRUCTED AMOUNT - INSTRUCTION COMPLETED AMOUNT?        ,CO.INSTRUCTED_BY        ,ct.EXECUTED_RATE        ,e.[VG_10_CREATETIME] as [CREATE_DATE]        ,e.vg_10 as [EXCEPTION_FLAG]        , CT.CONFIRMED_DATETIME as OS_CONFIRMED_DATETIME        ,e.SOURCE AS [DATA_SOURCE]        ,CASE WHEN e.SOURCE = 'CM' THEN CO.CUSTOM_INSTRUCTION WHEN e.SOURCE = 'AL' THEN PM.COMMENTS_VALUE END AS CUSTOM_INSTRUCTION        ,CASE WHEN e.SOURCE = 'CM' THEN COALESCE(CO.BUSINESS_GROUP, CT.BUSINESS_GROUP) WHEN e.SOURCE = 'AL' THEN NULL END  AS BUSINESS_GROUP       INTO #temp_final_master_table_rr       FROM VISTA_staging.dbo.vg_10_timely_recording_cash_RR_table e       inner join #distinct_ids di on di.TRANSACTION_NUMBER = e.TRANSACTION_NUMBER and e.SOURCE = di.SOURCE       LEFT JOIN #CONCAT_RR C ON C.TRANSACTION_NUMBER = e.TRANSACTION_NUMBER AND C.SOURCE = e.SOURCE       LEFT JOIN (SELECT DISTINCT T.MULTI_FUND_ID, ORD_NUM, TRD_AUTH_TIME, TRAN_TYPE,TRD_STATUS, EXECUTION_TIME, TRD_TRADER, FUND, SM_CURRENCY, TRD_ORIG_FACE, TRD_TRADE_DATE, PULL_DATE, TOUCH_COUNT  FROM VISTA_REPORTING.DBO.TRADES T       INNER JOIN #temp_max_trade_touch MTT ON MTT.MAX_TOUCH = T.TOUCH_COUNT AND MTT.MULTI_FUND_ID = T.MULTI_FUND_ID) T ON e.SOURCE = 'AL' AND e.TRANSACTION_NUMBER = T.MULTI_FUND_ID       LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON T.ORD_NUM = OC.TRD_ORD       LEFT JOIN ( SELECT DISTINCT PM.ORD_NUM, ACTIVE_TIME, AUTH_TIME, SM_SEC_TYPE, CURRENCY, SETTLE_DATE, FACE, STATUS, TOUCH_COUNT, PULL_DATE, TRADER, COMMENTS_VALUE FROM VISTA_REPORTING.DBO.PM_ORDERS PM       INNER JOIN #temp_max_ORDER_touch MOT ON MOT.ORD_NUM = PM.ORD_NUM AND MOT.MAX_TOUCH = PM.TOUCH_COUNT) PM ON OC.PM_ORD = PM.ORD_NUM       LEFT JOIN ( SELECT DISTINCT FUND, PORTFOLIOS_PORTFOLIO_NAME FROM  VISTA_REPORTING.dbo.PORTFOLIO) PO ON PO.FUND = T.FUND       LEFT JOIN  ( SELECT DISTINCT ct.TRANSACTION_NUMBER, ORDER_ID, VALUE_DATE, TRANSACTION_TYPE, TIMELY_RECORDING_EXCEPTION_NARRATION, TIMELY_RECORDING_EXCEPTION_REASON, UPLOADED_DATE_TIME, CONFIRMED_DATETIME,TERM, TRANSACTION_STATUS_DECODE, TRADE_CURRENCY, DEALER_NAME, DEALT_AMOUNT, PRODUCT, BASE_FUND_CODE, CLIENT_FUND_OR_POOL_CODE, PULL_DATE, EXECUTED_DATETIME, MATURITY_DATE, EXECUTED_RATE, TRADE_DATE, BUSINESS_GROUP FROM VISTA_REPORTING.DBO.CASH_TRADES CT       INNER JOIN #temp_max_req_trades REQ ON REQ.MAX_API_REQ = CT.API_REQUESTED_DATE AND REQ.TRANSACTION_NUMBER = CT.TRANSACTION_NUMBER) CT ON e.SOURCE = 'CM' AND e.TRANSACTION_NUMBER = CT.TRANSACTION_NUMBER       LEFT JOIN ( SELECT DISTINCT CO.ORDER_ID, INSTRUCTION_STATUS_DECODE, ACCEPTED_DATETIME, ACCEPTED_BY, INSTRUCTED_AMOUNT, MATURITY_DATE, TRADE_DATE, INSTRUCTED_CURRENCY, OMQ_DATE_TIME, INSTRUCTION_RECEIVED_DATE, INSTRUCTED_BY, PULL_DATE, CUSTOM_INSTRUCTION,BUSINESS_GROUP FROM VISTA_REPORTING.DBO.CASH_ORDERS CO        INNER JOIN #temp_max_req_orders REQ ON REQ.MAX_API_REQ = CO.API_REQUESTED_DATE AND REQ.ORDER_ID = CO.ORDER_ID) CO ON CT.ORDER_ID = CO.ORDER_ID       LEFT JOIN VISTA_STAGING.DBO.REF_CASH_TIMELY_REC_THRESHOLD TREC ON ((e.SOURCE = 'AL' AND  TREC.CURRENCY_CODE = T.SM_CURRENCY) OR (e.SOURCE = 'CM' AND TREC.CURRENCY_CODE = CT.TRADE_CURRENCY)) AND CAST(COALESCE(CT.PULL_DATE, T.PULL_DATE) AS DATE) BETWEEN CAST(TREC.DATE_FROM AS DATE) AND CAST(TREC.DATE_TO AS DATE)       LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD ON (TDD.MG_USER_ID  = CT.DEALER_NAME AND e.SOURCE = 'CM') OR (TDD.INITIALS = T.TRD_TRADER AND e.SOURCE = 'AL') AND CAST(COALESCE(CT.PULL_DATE,T.PULL_DATE) AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE)       AND CAST(TDD.DATE_TO AS DATE)       LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD2 ON ((TDD2.MG_USER_ID  = COALESCE(CO.ACCEPTED_BY, CO.INSTRUCTED_BY) AND e.SOURCE = 'CM') OR (TDD2.INITIALS = PM.TRADER AND e.SOURCE = 'AL')) AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE) AS DATE) BETWEEN CAST(TDD2.DATE_FROM AS DATE) AND CAST(TDD2.DATE_TO AS DATE)       LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'Timely Recording RR'                      AND CAST(COALESCE(ct.PULL_DATE, t.PULL_DATE,co.[PULL_DATE],pm.[PULL_DATE]) AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)       LEFT JOIN (SELECT DISTINCT INST_TYPE, MULTI_FUND_ID FROM VISTA_REPORTING.DBO.PRIMARY_INST_TYPE_TABLE) PRIM ON e.SOURCE = 'AL' AND PRIM.MULTI_FUND_ID = e.TRANSACTION_NUMBER       LEFT JOIN VISTA_STAGING.DBO.REF_cash_ALADDIN_STATUS_DECODE ASD ON e.SOURCE = 'AL' AND (ASD.[STATUS] = T.TRD_STATUS OR ASD.[STATUS] = PM.STATUS)                  IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE', 'U') IS NOT NULL      DELETE FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE      WHERE EXISTS (SELECT DISTINCT       TRANSACTION_NUMBER       FROM #distinct_ids      WHERE #distinct_ids.TRANSACTION_NUMBER = VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE.TRANSACTION_NUMBER)            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_RR_TABLE', 'U') IS NOT NULL      DELETE FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_RR_TABLE      WHERE EXISTS (SELECT DISTINCT       TRANSACTION_NUMBER       FROM #distinct_ids      WHERE #distinct_ids.TRANSACTION_NUMBER = VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_RR_TABLE.TRANSACTION_NUMBER)                  IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE      SELECT *      FROM #temp_final_master_table_mm            ELSE            SELECT *      INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE      FROM #temp_final_master_table_mm                  IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_RR_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_RR_TABLE      SELECT *      FROM #temp_final_master_table_rr            ELSE            SELECT *      INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_RR_TABLE      FROM #temp_final_master_table_rr                  IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL      INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(      'MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_RR/MM_TABLE', --TABLE_NAME      @START_TIME, --START_TIME      GETDATE(), --END_TIME      DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS      CAST(GETDATE() as date)) --COMPLETION_DATE                   IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids       IF OBJECT_ID('tempdb..#temp_cash_orders', 'U') IS NOT NULL DROP TABLE #temp_cash_orders       IF OBJECT_ID('tempdb..#temp_max_trade_touch', 'U') IS NOT NULL DROP TABLE #temp_max_trade_touch       IF OBJECT_ID('tempdb..#temp_max_ORDER_touch', 'U') IS NOT NULL DROP TABLE #temp_max_ORDER_touch       IF OBJECT_ID('tempdb..#temp_max_req_orders', 'U') IS NOT NULL DROP TABLE #temp_max_req_orders       IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades       IF OBJECT_ID('tempdb..#temp_TRADE_conc_MM', 'U') IS NOT NULL DROP TABLE #temp_TRADE_conc_MM       IF OBJECT_ID('tempdb..#temp_TRADE_conc_RR', 'U') IS NOT NULL DROP TABLE #temp_TRADE_conc_RR       IF OBJECT_ID('tempdb..#TEMP_TRADES_DISTINCT', 'U') IS NOT NULL DROP TABLE #TEMP_TRADES_DISTINCT       IF OBJECT_ID('tempdb..#REMAIN_AMT', 'U') IS NOT NULL DROP TABLE #REMAIN_AMT       IF OBJECT_ID('tempdb..#TEMP_TRADES_DISTINCT_CM', 'U') IS NOT NULL DROP TABLE #TEMP_TRADES_DISTINCT_CM       IF OBJECT_ID('tempdb..#REMAIN_AMT_CM', 'U') IS NOT NULL DROP TABLE #REMAIN_AMT_CM       IF OBJECT_ID('tempdb..#concat_MM', 'U') IS NOT NULL DROP TABLE #concat_MM       IF OBJECT_ID('tempdb..#concat_RR', 'U') IS NOT NULL DROP TABLE #concat_RR       IF OBJECT_ID('tempdb..#temp_final_master_table_mm', 'U') IS NOT NULL DROP TABLE #temp_final_master_table_mm       IF OBJECT_ID('tempdb..#temp_final_master_table_rr', 'U') IS NOT NULL DROP TABLE #temp_final_master_table_rr                  IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                    WHERE name = N'mmf_vg10_cash_mm_idx1')             DROP INDEX mmf_vg10_cash_mm_idx1              ON VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE                   CREATE NONCLUSTERED INDEX mmf_vg10_cash_mm_idx1             ON VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE              (TRADE_DATE)            IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                    WHERE name = N'mmf_vg10_cash_mm_idx2')             DROP INDEX mmf_vg10_cash_mm_idx2              ON VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE                   CREATE NONCLUSTERED INDEX mmf_vg10_cash_mm_idx2             ON VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE              (EXCEPTION_FLAG)            IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                    WHERE name = N'mmf_vg10_cash_mm_idx3')             DROP INDEX mmf_vg10_cash_mm_idx3              ON VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE                   CREATE NONCLUSTERED INDEX mmf_vg10_cash_mm_idx3             ON VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE              (CREATE_DATE)            IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                    WHERE name = N'mmf_vg10_cash_rr_idx1')             DROP INDEX mmf_vg10_cash_rr_idx1              ON VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE                   CREATE NONCLUSTERED INDEX mmf_vg10_cash_rr_idx1             ON VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE              (TRADE_DATE)            IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                    WHERE name = N'mmf_vg10_cash_rr_idx2')             DROP INDEX mmf_vg10_cash_rr_idx2              ON VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE                   CREATE NONCLUSTERED INDEX mmf_vg10_cash_rr_idx2             ON VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE              (EXCEPTION_FLAG)            IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                    WHERE name = N'mmf_vg10_cash_rr_idx3')             DROP INDEX mmf_vg10_cash_rr_idx3              ON VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE                   CREATE NONCLUSTERED INDEX mmf_vg10_cash_rr_idx3             ON VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_CASH_MM_TABLE              (CREATE_DATE)                  END   --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_MFID_TABLE_VG_10_TIMELY_RECORDING_DMG  CreateDate: 2025-06-26 17:52:45.870  ModifyDate: 2025-06-26 17:52:45.870  --- DEFINITION START ---  -- =============================================    -- Author:  <ELIZABETH REYNOLDS>    -- Create date: <05/04/2019>    -- Description:     -- <Master exception table for TIMELY RECORDING    -- Exception test for DMG.>    -- =============================================        -- ***************VERSION CONTROL***************    -- 2019-05-14 - DDC: Added PM_ORDER as the 'ORDER' field    --    --    MS: Added in TRD_EX_BROKER_CODE,    --     and edited TRADE_TYPE column    --     to be populated only for exceptions    -- *********************************************        CREATE PROCEDURE [dbo].[MASTER_MFID_TABLE_VG_10_TIMELY_RECORDING_DMG]     -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,         AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        --Used to track total time stored procedure took to run    DECLARE @START_TIME as datetime    SET @START_TIME = GETDATE()        IF OBJECT_ID('tempdb..#trades_metadata', 'U') IS NOT NULL DROP TABLE #trades_metadata    SELECT DISTINCT     t.*    INTO #trades_metadata    FROM VISTA_REPORTING.dbo.TRADES t    INNER JOIN Vista_Staging.dbo.VG_10_TIMELY_RECORDING_DMG_TABLE vg ON vg.MULTI_FUND_ID = t.MULTI_FUND_ID    WHERE FinalFlag = 1            --If the master table doesn't exist then we want to use all the data available, otherwise just the most recent data    IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_DMG_TABLE', 'U') IS NOT NULL    DELETE FROM #trades_metadata where NOT EXISTS (SELECT od.MULTI_FUND_ID                   FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                  WHERE od.MULTI_FUND_ID = #trades_metadata.MULTI_FUND_ID)            IF OBJECT_ID('tempdb..#oc_metadata', 'U') IS NOT NULL DROP TABLE #oc_metadata    SELECT DISTINCT *    INTO #oc_metadata    FROM VISTA_REPORTING.dbo.ORDERS_CROSS    where TRD_ORD in (SELECT ORD_NUM FROM #trades_metadata)        IF OBJECT_ID('tempdb..#pm_metadata', 'U') IS NOT NULL DROP TABLE #pm_metadata    SELECT DISTINCT *    INTO #pm_metadata    FROM VISTA_REPORTING.dbo.PM_ORDERS    where ORD_NUM in (SELECT PM_ORD FROM #oc_metadata)        IF OBJECT_ID('tempdb..#trd_orders_metadata', 'U') IS NOT NULL DROP TABLE #trd_orders_metadata    SELECT DISTINCT *    INTO #trd_orders_metadata    FROM VISTA_REPORTING.dbo.TRD_ORDERS    WHERE ORD_NUM in (SELECT ORD_NUM FROM #trades_metadata)            IF OBJECT_ID('tempdb..#prim_metadata', 'U') IS NOT NULL DROP TABLE #prim_metadata    SELECT DISTINCT     pr.*    INTO #prim_metadata    FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr    WHERE MULTI_FUND_ID in (SELECT MULTI_FUND_ID FROM #trades_metadata)        --Concatenate PCT_OF_NAV wih FUND and NAV_CUT_OFF with FUND by MFID    IF OBJECT_ID('tempdb..#PCT_NAV', 'U') IS NOT NULL DROP TABLE #PCT_NAV    SELECT DISTINCT     t.MULTI_FUND_ID,     t.CLIENT_EXECUTION_NUM,     CONCAT(t.PORTFOLIOS_PORTFOLIO_NAME,': ', CASE                WHEN nav.nav_value_gbp != 0                 THEN ABS(CONVERT(DECIMAL(30,2),100.0*(t.NET_CONSIDERATION_GBP)/nav.nav_value_gbp))                 ELSE NULL                 END) AS PCT_NAV_CONCAT,     CONCAT(t.PORTFOLIOS_PORTFOLIO_NAME, ': ', nc.CUTOFF) AS CUTOFF    INTO #PCT_NAV    FROM #trades_metadata t    outer apply (SELECT TOP 1         nav.*         FROM VISTA_REPORTING.dbo.NAV         WHERE nav.PORTFOLIO_NAME = t.PORTFOLIOS_PORTFOLIO_NAME AND nav.NAV_PORT_DATE <= CONVERT(DATE, t.TRD_AUTH_TIME)         ORDER BY nav.NAV_PORT_DATE DESC) nav    left join VISTA_STAGING.dbo.NAV_CUT_OFFS nc     on nc.CLIENT_FUND=t.PORTFOLIOS_PORTFOLIO_NAME            IF OBJECT_ID('tempdb..#pct_nav_concat', 'U') IS NOT NULL DROP TABLE #pct_nav_concat    SELECT      MULTI_FUND_ID,     STUFF((      SELECT DISTINCT ' | ' + PCT_NAV_CONCAT      FROM #PCT_NAV       WHERE (MULTI_FUND_ID = pc_nav.MULTI_FUND_ID)       ORDER BY ' | ' + PCT_NAV_CONCAT      FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS NAV_PCT_concat,     STUFF((      SELECT DISTINCT ' | ' + CUTOFF      FROM #PCT_NAV       WHERE (MULTI_FUND_ID = pc_nav.MULTI_FUND_ID)       ORDER BY ' | ' + CUTOFF      FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS NAV_CUT_concat,     STUFF((      SELECT DISTINCT ' | ' + CLIENT_EXECUTION_NUM      FROM #PCT_NAV       WHERE (MULTI_FUND_ID = pc_nav.MULTI_FUND_ID)       ORDER BY ' | ' + CLIENT_EXECUTION_NUM      FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS CL_EX_concat    INTO #pct_nav_concat    FROM #PCT_NAV pc_nav    GROUP BY MULTI_FUND_ID            ----2. Get latest TRD_TRADE_DATE associated with a trade    --IF OBJECT_ID('tempdb..#Latest_TRD_TRADE_DATE', 'U') IS NOT NULL DROP TABLE #Latest_TRD_TRADE_DATE    --SELECT DISTINCT    -- MULTI_FUND_ID,    -- TRD_TRADE_DATE,    -- EXECUTION_TIME,    -- TRD_PURPOSE,    -- TRD_AUTH_TIME,    -- TRAN_TYPE,    -- SM_CURRENCY,    -- TRD_PRICE,    -- TRD_PRICING_SPREAD,    -- TRD_YIELD,    -- TRD_COUNTERPARTY,    -- TRD_COUPON,    -- TRD_ENTRY_TIME,    -- TRDCOMM_COMMENTS,    -- ACTIVITY_TYPE,    -- ACTIVITY_TYPE_DECODE,    -- TRD_CURRENCY    --INTO #Latest_TRD_TRADE_DATE    --FROM #trades_metadata    --WHERE FinalFlag = 1        --3. Get Investment desks associated with all funds on a trade    IF OBJECT_ID('tempdb..#MFID_inv_Desk', 'U') IS NOT NULL DROP TABLE #MFID_inv_Desk    SELECT DISTINCT      t.MULTI_FUND_ID,      p.ancestor    INTO #MFID_inv_Desk    FROM VISTA_REPORTING.dbo.TRADES t    left join VISTA_STAGING.dbo.PORTFOLIO_GROUP_CLOSURE_TABLE p    on t.PORTFOLIOS_PORTFOLIO_NAME = p.descendant    WHERE MULTI_FUND_ID in (SELECT MULTI_FUND_ID from #trades_metadata)    --WHERE p.ancestor IN ('MG_ATCRED','MG_RET_FI','MG_INSTI',    --      'MG_INTER','MG_RESTCT','MG_IN_CAP',    --      'MG_LEVFIN','MG_MIB','MG_REDEBT') -- This is the list of investment desks provided in the business requirements documents    --        IF OBJECT_ID('tempdb..#Inv_desk_concat', 'U') IS NOT NULL DROP TABLE #Inv_desk_concat    SELECT      MULTI_FUND_ID,     STUFF((     SELECT DISTINCT ', ' + LTRIM(RTRIM(ancestor))     FROM #MFID_inv_Desk      WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)      ORDER BY ', ' + LTRIM(RTRIM(ancestor))     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS Inv_Desk_Concat    INTO #Inv_desk_concat    FROM #MFID_inv_Desk Results    GROUP BY MULTI_FUND_ID        --4. Get latest comments value associated with a trade    IF OBJECT_ID('tempdb..#Latest_Comment', 'U') IS NOT NULL DROP TABLE #Latest_Comment    SELECT DISTINCT     o.ORD_NUM,     o.COMMENTS_VALUE    INTO #Latest_Comment    FROM #trd_orders_metadata o    inner join (SELECT        ORD_NUM,        MAX(TOUCH_COUNT) AS MAX_TOUCH       FROM VISTA_REPORTING.dbo.ORDERS       GROUP BY ORD_NUM) o2    on o.ORD_NUM = o2.ORD_NUM AND o.TOUCH_COUNT = o2.MAX_TOUCH    WHERE NULLIF(o.COMMENTS_VALUE,'') is not null        IF OBJECT_ID('tempdb..#min_touch', 'U') IS NOT NULL DROP TABLE #min_touch    SELECT     t1.MULTI_FUND_ID,     t1.TRD_TRADER AS TRADER,     D.FULL_NAME as TRADER_FULL_NAME    INTO #min_touch    FROM VISTA_REPORTING.dbo.TRADES as t1    join (SELECT      t1.MULTI_FUND_ID,      MIN(t1.TOUCH_COUNT) as MIN_TOUCH      FROM VISTA_REPORTING.dbo.TRADES as t1      GROUP BY t1.MULTI_FUND_ID)     as t2 on t1.MULTI_FUND_ID=t2.MULTI_FUND_ID and t1.TOUCH_COUNT=t2.MIN_TOUCH    left join VISTA_REPORTING.DBO.DEALER_AND_DESK D     on D.INITIALS = t1.TRD_TRADER    WHERE t1.MULTI_FUND_ID in (SELECT MULTI_FUND_ID from #trades_metadata)        IF OBJECT_ID('tempdb..#max_touch', 'U') IS NOT NULL DROP TABLE #max_touch    SELECT     t1.ORD_NUM,     t1.TRADER,     t1.TRADER_FULL_NAME,     t1.FACE    INTO #max_touch    FROM #trd_orders_metadata as t1    join (SELECT      t1.ORD_NUM,      MAX(t1.TOUCH_COUNT) as MAX_TOUCH      FROM #trd_orders_metadata as t1      join #trd_orders_metadata as t2       on t1.ORD_NUM=t2.ORD_NUM      GROUP BY t1.ORD_NUM) as t2     on t1.ORD_NUM=t2.ORD_NUM and t1.TOUCH_COUNT=t2.MAX_TOUCH            IF OBJECT_ID('tempdb..#temp_t', 'U') IS NOT NULL DROP TABLE #temp_t    SELECT      MULTI_FUND_ID,      SUM(ABS(TRD_ORIG_FACE)) AS SUM_TRD_ORIG_FACE,     --SUM(ABS(TRD_PRINCIPAL)) AS SUM_TRD_PRINCIPAL,     SUM(ABS(TRD_PRINCIPAL_GBP)) AS SUM_TRD_PRINCIPAL_GBP,     SUM(ABS(NET_CONSIDERATION_GBP)) AS SUM_NET_CONSIDERATION_GBP    INTO #temp_t     FROM #trades_metadata     WHERE FinalFlag=1     GROUP BY MULTI_FUND_ID        IF OBJECT_ID('tempdb..#PM_comments', 'U') IS NOT NULL DROP TABLE #PM_comments    SELECT DISTINCT           dc.VALUE,           t.MULTI_FUND_ID    INTO #PM_comments    FROM VISTA_STAGING.dbo.TRADES t    left join #oc_metadata oc     on t.ORD_NUM = oc.TRD_ORD    left join (SELECT DISTINCT                                  PM,                                 ORD_NUM,                                 UPDATE_INSTR                      FROM VISTA_REPORTING.dbo.PM_ORDERS) pm     on oc.PM_ORD = pm.ORD_NUM    LEFT JOIN (SELECT DISTINCT                                  VALUE,                                 TAG_NAME,                                 CODE                      FROM VISTA_REPORTING.dbo.DECODES) dc     on dc.TAG_NAME = 'PM_INSTRUCTION' AND dc.CODE=pm.UPDATE_INSTR    WHERE pm.PM IS NOT NULL    AND t.MULTI_FUND_ID IN (SELECT MULTI_FUND_ID from #trades_metadata)        IF OBJECT_ID('tempdb..#PM_INST_concat', 'U') IS NOT NULL DROP TABLE #PM_INST_concat    SELECT            MULTI_FUND_ID,           STUFF((           SELECT DISTINCT ', ' + LTRIM(RTRIM(VALUE))           FROM #PM_comments            WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)         ORDER BY ', ' + LTRIM(RTRIM(VALUE))           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')           ,1,2,'') AS PM_INST_concat    INTO #PM_INST_concat    FROM #PM_comments Results    GROUP BY MULTI_FUND_ID        IF OBJECT_ID('tempdb..#Fund', 'U') IS NOT NULL DROP TABLE #Fund                SELECT DISTINCT                   trd.MULTI_FUND_ID,                   ISNULL(trd.PORTFOLIOS_PORTFOLIO_NAME,'') AS Fund,        INVNUM       INTO #Fund            FROM VISTA_REPORTING.dbo.TRADES trd      WHERE MULTI_FUND_ID in (SELECT MULTI_FUND_ID from #trades_metadata)                  IF OBJECT_ID('tempdb..#Funds', 'U') IS NOT NULL DROP TABLE #Funds      SELECT         MULTI_FUND_ID,        STUFF((            SELECT                    ', ' + LTRIM(RTRIM(Fund))            FROM #Fund             WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)       ORDER BY  ', ' + LTRIM(RTRIM(Fund))            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')                   ,1,2,'') AS Funds,      STUFF((            SELECT                    ', ' + CONCAT(LTRIM(RTRIM(Fund)), LTRIM(RTRIM(INVNUM)))            FROM #Fund             WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)       ORDER BY ', ' + CONCAT(LTRIM(RTRIM(Fund)), LTRIM(RTRIM(INVNUM)))            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')                   ,1,2,'') AS Fund_Investment_Number      INTO #Funds      FROM #Fund Results      GROUP BY MULTI_FUND_ID            IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table    SELECT DISTINCT     t.[TRD_TRADE_DATE] as [TRADE_DATE],     t.[EXECUTION_TIME] as [EXEC_DATE],     t.[TRD_AUTH_TIME] as [ENTRY_DATE],     CASE      WHEN t.TRDCOMM_COMMENTS LIKE '%<SDI>%'      THEN REPLACE(RIGHT(t.TRDCOMM_COMMENTS,LEN(t.TRDCOMM_COMMENTS) -CHARINDEX('<SDI>',t.TRDCOMM_COMMENTS,1)+1),'<SDI>','')      ELSE t.TRDCOMM_COMMENTS      END AS [DEALER_COMMENT],     lst_cm.[COMMENTS_VALUE] as [GENERAL_COMMENT],     oc.PM_ORD as [ORDER],     mf.[MULTI_FUND_ID] as MFID,     t.[SM_CURRENCY] as [CCY],     t.TRD_CURRENCY as SETT_CCY,     i2.[ISIN] as [ISIN],     t.[CUSIP],     CASE     WHEN pr.DEALING_DESK='DMG'     THEN      CASE       WHEN pr.DEBT_DERIV = 'DEBT'        THEN        CASE         WHEN t.TRD_COUPON IS NOT NULL AND i2.TICKER IS NOT NULL AND i2.MATURITY IS NOT NULL         THEN CONCAT(ISNULL(i2.TICKER,''),' ', CAST(ISNULL(t.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))        ELSE CONCAT(ISNULL(tr.SEC_DESC1,''),' ', CAST(ISNULL(t.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))        END       ELSE pr.DESC_INSTMT      END     END AS [DESCRIPTION],     t3.[TRADER] as [DEALER],     t5.[FACE] as [ORD_AMT],     CONVERT(DECIMAL(24,2),sum_oface.[SUM_TRD_ORIG_FACE]) as [BOOKED_AMT],     pr.[INST_TYPE],     t.[TRAN_TYPE] as [SIDE],     convert(decimal(18,2),t.TRD_PRICE) as [Px],     CONVERT(DECIMAL(18,2),t.TRD_PRICING_SPREAD) as [SPREAD],     CASE     WHEN pr.DEALING_DESK='DMG'     THEN        CASE        WHEN pr.SM_SEC_GROUP = 'SWAP' AND pr.SM_SEC_TYPE IN ('SWAP','CSWAP') THEN CONVERT(DECIMAL(18,2),t.TRD_COUPON)       WHEN pr.DEBT_DERIV = 'DEBT' THEN CONVERT(DECIMAL(18,2),t.TRD_YIELD)      END     END AS [RATE],     t.[TRD_COUNTERPARTY] as CPTY,     t.[TRD_EX_BROKER_CODE] as [EX_CPTY],     ISNULL(pl.FULL_NAME_VENUE,'Manual') as [PLATFORM],     CASE      WHEN pr.DEALING_DESK = 'DMG'      THEN       CASE        WHEN pr.TWEB_CLOSE_DEALING = 1 THEN 'TWEB Close'        WHEN pr.[1615_DEALING] = 1 THEN '1615 Dealing'        WHEN t.ACTIVITY_TYPE = 'MG.FI 1. Proces' THEN 'VPT'       END     END AS [METHOD],     t.[ACTIVITY_TYPE_DECODE] as [ACTIVITY],     mf.timespan as TIMESPAN,     fnd.funds as FUND,     CASE       WHEN  t.TRD_TRADE_DATE <> CONVERT(DATE, t.TRD_AUTH_TIME) THEN 'Across days'      ELSE  CONCAT(TRRT.MAX_THRESHOLD, 'mins')     END AS THRESHOLD,      mf.[TREC_CREATETIME] AS CREATE_DATE,     CASE       WHEN  t.TRD_TRADE_DATE <> CONVERT(DATE, t.TRD_AUTH_TIME) THEN 'Across days'      WHEN DATEDIFF(minute, t.EXECUTION_TIME, t.TRD_AUTH_TIME) < TRRT.MAX_THRESHOLD THEN ''     ELSE CONVERT(VARCHAR(5),DATEDIFF(minute, t.EXECUTION_TIME, t.TRD_AUTH_TIME) - TRRT.MAX_THRESHOLD) + ' mins'     END AS [TIME_LATE_BY], --NEED TO UPDATE WHEN REFERENCE TABLE IS DONE     CASE       WHEN mf.[VG_10] = 1 THEN mf.TRADE_TYPE     ELSE NULL     END AS TRADE_TYPE,     pmc.[PM_INST_concat] as [INSTRUCTION],     t.[MATURITY] as [MATURITY_DATE],     tr2.[SETTLE_DATE] as [SETTLEMENT_DATE],     mf.[VG_10] as [EXCEPTION_FLAG],     concat(i2.SM_SEC_GROUP,'/',i2.SM_SEC_TYPE) as [Asset_Type/Subtype],     t.EXECUTION_TYPE_DECODE,     t.[ORD_NUM] as [Trader Order Number]     --null AS TR_TYPE, -- No longer required as we use TRADE_TYPE (leaving it as null due to effect on Front End)     --inv_desk.Inv_Desk_Concat as [INV_DESK],     --pct_nav.[NAV_CUT_concat] as [NAV_CUT_OFF],     --CASE      --WHEN cast(tr2.EXECUTION_TIME as time) < convert(time,CUTOFF)      --THEN     -- CASE      --  WHEN cast(tr2.TRD_AUTH_TIME as time) > convert(time,CUTOFF) THEN 'Y'     -- ELSE 'N'      -- END     --ELSE 'N'      --END AS [NAV_IMPACT_ELIGIBLE],     --pct_nav.[NAV_PCT_concat] as [PCT_OF_NAV],     --CONCAT(YEAR(tr.AUTH_TIME),'-',left(datename(m,tr.AUTH_TIME),3)) AS MONTH_YEAR,     --i2.SM_SEC_GROUP,     --lst_trd.TRD_PURPOSE,    -- mf.[DEALING_DESK],    -- t.[TRD_YIELD],    -- t.[INDICATIVE_COMMENTS],    -- t.[B3Q_RATIONALE],    -- t.[NWQ_RATIONALE],    -- tr.[LIMIT_TYPE] as [LIMIT_TYPE],    -- tr.[LIMIT_VALUE] as [LIMIT_VALUE],    -- i2.[SEDOL] as [SEDOL],    -- sum_oface.[SUM_NET_CONSIDERATION_GBP] as NET_CONSIDERATION_GBP,    -- CONVERT(DECIMAL(18,2),sum_oface.SUM_TRD_PRINCIPAL_GBP) as [NOMIAL],    -- pr.[INTERFUND_TRANSFER],    -- pr.[PRIMARY_MARKET],    -- t3.[TRADER_FULL_NAME],    -- lst_trd.[TRD_ENTRY_TIME] as [TRD_ENTRY_TIME],    -- null as [LIST_ID],    -- null as [LIST_NAME],    -- null as [TYPE],    -- CASE     --  WHEN NULLIF(tr.[BROKER_CODE],'') is null THEN 'na'    --  WHEN pr.DEBT_DERIV = 'DEBT' AND tr.BROKER_CODE  = t.COUNTERPARTY_CODE THEN t.TRD_COUNTERPARTY    --  WHEN pr.DEBT_DERIV = 'DEBT' AND tr.BROKER_CODE != t.COUNTERPARTY_CODE THEN 'No'    -- ELSE 'na'     -- END AS [AXE],    -- CASE    --  WHEN ISNULL(pl.VENUE,'') NOT IN ('FIXLQNTEQ', 'FIXLQNTFI')      --    and pr.INTERFUND_TRANSFER=0     --    and pr.TWEB_CLOSE_DEALING=0     --    and pr.PRIMARY_MARKET=0     --    THEN    --    CASE    --     WHEN (not (ISNULL(pr.INST_TYPE, '') in ('RMBS', 'CMBS', 'ABS', 'CDO','MBS','ARM','CMO') and pr.TRAN_TYPE = 'BUY')     --      and not (ISNULL(pr.INST_TYPE, '') in ('IRS', 'BASIS', 'ZCS', 'ASWP', 'IFS', 'CASWP', 'CCS','SWAP'))    --      and not (ISNULL(pr.INST_TYPE, '') in ('HY CORP', 'IG CORP','NR CORP') and pr.TRD_CURRENCY = 'USD')    --      and not (ISNULL(pr.INST_TYPE, '') in ('HY CORP','NR CORP') and pr.TRD_CURRENCY in ('GBP', 'EUR')))    --      and not (ISNULL(pr.INST_TYPE, '') IN ('IRFUT','BNDFUT','OPTFUT','ETD')) -- No quote exceptions for ETDs (IRFUT, BNDFUT, OPTFUT)    --      THEN '3 firm quotes'    --     WHEN pr.INST_TYPE in ('IRS', 'BASIS', 'ZCS', 'ASWP', 'IFS', 'CASWP', 'CCS','SWAP')    --      THEN '2 firm quotes'    --     WHEN (ISNULL(pr.INST_TYPE, '') in ('HY CORP', 'IG CORP','NR CORP') and pr.TRD_CURRENCY = 'USD')    --      THEN '3 firm quotes or indicative quotes'    --     WHEN (ISNULL(pr.INST_TYPE, '') in ('HY CORP','NR CORP') and pr.TRD_CURRENCY in ('GBP', 'EUR'))    --      THEN '2 firm quotes and 1 indicative quote'    --    ELSE 'NA'    --    END    -- ELSE 'NA'    -- END AS [BASELINE_PDP],    -- CASE     --  WHEN pr.INST_TYPE = 'GOVBIL' and pr.PRIMARY_MARKET = 1    --   THEN 'Government bills - Primary'    --        WHEN pr.INST_TYPE in ('GOV', 'IGOV', 'SSA', 'GOVBIL') and pr.PRIMARY_MARKET = 1    --            THEN 'Government & SSA bonds - Primary'    --        WHEN pr.INST_TYPE in ('IG CORP', 'HY CORP', 'NR CORP', 'COV', 'CORP') and pr.PRIMARY_MARKET = 1    --            THEN 'Corporates & Covered - Primary'    --        WHEN pr.INST_TYPE in ('EM GOV', 'EM GOVBIL', 'EM CORP') and pr.PRIMARY_MARKET = 1    --            THEN 'EM - Primary'    --        WHEN pr.INST_TYPE in ('RMBS', 'CMBS', 'CDO', 'ABS', 'MBS', ' ARM') and pr.PRIMARY_MARKET = 1       --         THEN 'Securitised - Primary'       --     WHEN pr.INST_TYPE = 'GOVBIL'       --         THEN 'Government bills - Secondary'       --     WHEN pr.INST_TYPE in ('GOV', 'IGOV',  'GOVBIL')       --         THEN 'Government bonds - Secondary'     -- WHEN pr.INST_TYPE in ('EM GOV', 'EM GOVBIL', 'EM CORP')       --         THEN 'EM - Secondary'       --     WHEN pr.INST_TYPE in ('RMBS', 'CMBS', 'CDO', 'ABS', 'MBS', ' ARM')       --         THEN 'Securitised - Secondary'       --     WHEN pr.INST_TYPE = 'SSA'       --         THEN 'SSA bonds - Secondary'       --     WHEN pr.INST_TYPE ='HY Corp' and pr.TRD_CURRENCY IN ('EUR','GBP')       --         THEN 'European HY Corporates - Secondary'       --     WHEN (pr.INST_TYPE ='HY Corp' and t.TRD_CURRENCY not in ('EUR','GBP','USD'))       --             or (pr.INST_TYPE in ('IG CORP', 'NR CORP') and t.TRD_CURRENCY in ('EUR','GBP'))       --             or (pr.ORDER_INST_TYPE = 'CORP' and t.TRD_CURRENCY != 'USD')       --         THEN 'European IG Corporates & Other - Secondary'     -- WHEN (pr.INST_TYPE in ('HY CORP', 'IG CORP', 'NR CORP','CORP') OR pr.ORDER_INST_TYPE = 'CORP') and t.TRD_CURRENCY = 'USD'       --         THEN 'USD Corporates - Secondary'       --     WHEN pr.INST_TYPE in ('COV')        --         THEN 'Covered Bonds - Secondary'       --     WHEN pr.INST_TYPE = 'PFD'       --         THEN 'Pref. Shares - Secondary'       --     WHEN pr.INST_TYPE = 'SCDS' and pr.TRD_CURRENCY = 'EUR'       --         THEN 'SCDS EUR'       --     WHEN pr.INST_TYPE = 'SCDS' and pr.TRD_CURRENCY = 'USD'       --         THEN 'SCDS USD'     -- WHEN pr.INST_TYPE = 'ICDS' and pr.ICDS_DETAIL = 'ITRAXX EUROPE MAIN'       --         THEN 'iTraxx Europe'       --     WHEN pr.INST_TYPE = 'ICDS' and pr.ICDS_DETAIL = 'ITRAXX EUROPE CROSSOVER'       --         THEN 'iTraxx Crossover'       --     WHEN pr.INST_TYPE = 'ICDS' and pr.ICDS_DETAIL = 'CDX NA IG'       --         THEN 'CDX NA IG'       --     WHEN pr.INST_TYPE = 'ICDS' and pr.ICDS_DETAIL = 'CDX NA HY'       --         THEN 'CDX NA HY'       --     WHEN pr.INST_TYPE in ('ICDS', 'SCDS')       --         THEN 'CDS Other'       --     WHEN pr.INST_TYPE in ('IRFUT') and ISNULL(pr.TRD_PURPOSE,'') <> 'MG004'       --         THEN 'Interest Rate Futures'       --     WHEN pr.INST_TYPE in ('BNDFUT') and ISNULL(pr.TRD_PURPOSE,'') <> 'MG004'       --         THEN 'Bond Futures'       --     WHEN pr.INST_TYPE in ('OPTFUT') and ISNULL(pr.TRD_PURPOSE,'') <> 'MG004'       --         THEN 'Option Futures'       --     WHEN pr.INST_TYPE in ('ETD') and ISNULL(pr.TRD_PURPOSE,'') <> 'MG004'       --         THEN 'ETD Not Rollover'       --     WHEN pr.INST_TYPE in ('IRFUT','BNDFUT','OPTFUT','ETD') and pr.TRD_PURPOSE = 'MG004'       --         THEN 'ETD Rollover'       --     WHEN pr.INST_TYPE in ('IRS','BASIS','ZCS','SWAP')       --         THEN 'IRS'       --     WHEN pr.INST_TYPE = 'IFS'       --         THEN 'IFS'       --     WHEN pr.INST_TYPE = 'ASWP'       --         THEN 'ASWP'       --     WHEN pr.INST_TYPE in ('CCS','CASWP')       --         THEN 'Cross Currency'       -- END AS [DMC_ASSET_TYPE]        INTO #temp_final_master_table    FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_DMG_TABLE mf    inner join #trades_metadata as t on t.[MULTI_FUND_ID] = mf.[MULTI_FUND_ID]    left join #trd_orders_metadata tr on tr.[ORD_NUM]=t.[ORD_NUM] AND mf.[DEALING_DESK]=tr.[DEALING_DESK]     left join (SELECT DISTINCT        MULTI_FUND_ID,       SUM_TRD_ORIG_FACE,       SUM_TRD_PRINCIPAL_GBP,       SUM_NET_CONSIDERATION_GBP          FROM #temp_t) sum_oface on sum_oface.[MULTI_FUND_ID]=t.[MULTI_FUND_ID]    left join (SELECT DISTINCT        VENUE,        ROUTE_DATETIME,        PLACEMENT_NUM,       FULL_NAME_VENUE          FROM VISTA_REPORTING.dbo.PLACEMENTS) pl on pl.[PLACEMENT_NUM]=t.[PLACEMENT_NUM]    left join #prim_metadata pr on pr.[MULTI_FUND_ID]=t.[MULTI_FUND_ID] AND pr.[DEALING_DESK] = mf.[DEALING_DESK]    left join (SELECT DISTINCT        MULTI_FUND_ID,       TRADER_FULL_NAME,       TRADER          FROM #min_touch) as t3 on t3.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]    left join (SELECT DISTINCT        ORD_NUM,       FACE          FROM #max_touch) as t5 on t5.ORD_NUM = t.ORD_NUM    --left join (SELECT DISTINCT     --   MULTI_FUND_ID,    --   TRD_COUPON,    --   TRAN_TYPE,    --   SM_CURRENCY,    --   TRD_PRICE,    --   TRD_PRICING_SPREAD,    --   TRD_YIELD,    --   TRD_COUNTERPARTY,    --   ACTIVITY_TYPE,    --   TRD_TRADE_DATE,    --   TRD_AUTH_TIME,    --   EXECUTION_TIME,    --   TRD_PURPOSE,    --   TRDCOMM_COMMENTS,    --   ACTIVITY_TYPE_DECODE,    --   TRD_ENTRY_TIME,    --   TRD_CURRENCY    --     FROM #Latest_TRD_TRADE_DATE) lst_trd     --on t.[MULTI_FUND_ID] = lst_trd.[MULTI_FUND_ID]    left join (SELECT DISTINCT        Inv_Desk_Concat,       MULTI_FUND_ID          FROM #Inv_desk_concat) inv_desk on t.[MULTI_FUND_ID] = inv_desk.[MULTI_FUND_ID]    left join (SELECT DISTINCT        TAG_NAME,       [VALUE],       CODE          FROM VISTA_REPORTING.dbo.DECODES) dc1 on dc1.TAG_NAME = 'TrdPurpose' AND dc1.CODE=t.TRD_PURPOSE    left join (SELECT DISTINCT        COMMENTS_VALUE,       ORD_NUM          FROM #Latest_Comment) lst_cm on t.[ORD_NUM] = lst_cm.[ORD_NUM]    left join (SELECT DISTINCT        client_fund,       CUTOFF          FROM VISTA_STAGING.dbo.NAV_CUT_OFFS) nv on nv.[CLIENT_FUND] = t.[PORTFOLIOS_PORTFOLIO_NAME]    left join #pct_nav_concat pct_nav on pct_nav.[MULTI_FUND_ID] = mf.[MULTI_FUND_ID]    left join (         SELECT DISTINCT        tr.ORD_NUM,       tr.MULTI_FUND_ID,       tr.TRD_CURRENCY,       tr.EXECUTION_TIME,       tr.TRD_AUTH_TIME,       tr.TRD_TRADE_DATE,       T2.SETTLE_DATE         FROM #trades_metadata as tr         inner join (SELECT           MULTI_FUND_ID,           MAX(TOUCH_COUNT) as MAX_TOUCH,          MAX(TRD_SETTLE_DATE) as SETTLE_DATE            FROM #trades_metadata            GROUP BY MULTI_FUND_ID) as t2          on (tr.MULTI_FUND_ID=t2.MULTI_FUND_ID) and (tr.TOUCH_COUNT=t2.MAX_TOUCH)        ) as tr2     on tr2.[MULTI_FUND_ID] = mf.[MULTI_FUND_ID]    --outer apply (SELECT TOP 1     --    nav.*     --    FROM VISTA_REPORTING.dbo.NAV     --    WHERE nav.PORTFOLIO_NAME = t.PORTFOLIOS_PORTFOLIO_NAME AND nav.NAV_PORT_DATE <= CONVERT(DATE, t.TRD_AUTH_TIME)     --    ORDER BY nav.NAV_PORT_DATE DESC) nav1    --outer apply (SELECT TOP 1     --    e.*     --    FROM VISTA_REPORTING.dbo.FX_RATES e     --    WHERE e.CURRENCY = t.TRD_CURRENCY and CONVERT(date, e.MARKDATE) <= CONVERT(date, t.EXECUTION_TIME)    --    ORDER BY e.MARKDATE DESC) e    left join (SELECT DISTINCT                           PM_INST_concat,                          MULTI_FUND_ID                      FROM #PM_INST_concat) pmc     on pmc.[MULTI_FUND_ID] = mf.[MULTI_FUND_ID]    LEFT JOIN #Funds fnd ON t.MULTI_FUND_ID = fnd.MULTI_FUND_ID    LEFT JOIN VISTA_STAGING.DBO.VG_10_TIMELY_RECORDING_REFERENCE_TABLE TRRT ON TRRT.DEALING_DESK = pr.DEALING_DESK AND t.[EXECUTION_TIME] BETWEEN TRRT.DATE_FROM AND TRRT.DATE_TO    LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD=t.ORD_NUM    OUTER APPLY (SELECT TOP 1         i.TICKER,        i.ISIN,        i.SEDOL,        i.SM_SEC_GROUP,        i.SM_SEC_TYPE,        i.MATURITY        FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=coalesce(t.CUSIP, tr.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(t.EXECUTION_TIME, tr.AUTH_TIME)))           ORDER BY i.DATE DESC) as i2        IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_DMG_TABLE', 'U') IS NOT NULL     delete from VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_DMG_TABLE    where MFID in (SELECT DISTINCT MULTI_FUND_ID from #trades_metadata)        IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_DMG_TABLE', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_DMG_TABLE    SELECT *    FROM #temp_final_master_table        ELSE        SELECT *    INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_DMG_TABLE    FROM #temp_final_master_table        IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(    'MASTER_MFID_VG_10_TIMELY_RECORDING_DMG_TABLE', --TABLE_NAME    @START_TIME, --START_TIME    GETDATE(), --END_TIME    DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS    CAST(GETDATE() as date)) --COMPLETION_DATE        IF OBJECT_ID('tempdb..#trades_metadata', 'U') IS NOT NULL DROP TABLE #trades_metadata    IF OBJECT_ID('tempdb..#trd_orders_metadata', 'U') IS NOT NULL DROP TABLE #trd_orders_metadata    IF OBJECT_ID('tempdb..#prim_metadata', 'U') IS NOT NULL DROP TABLE #prim_metadata    IF OBJECT_ID('tempdb..#Latest_TRD_TRADE_DATE', 'U') IS NOT NULL DROP TABLE #Latest_TRD_TRADE_DATE    IF OBJECT_ID('tempdb..#MFID_inv_Desk', 'U') IS NOT NULL DROP TABLE #MFID_inv_Desk    IF OBJECT_ID('tempdb..#Inv_desk_concat', 'U') IS NOT NULL DROP TABLE #Inv_desk_concat    IF OBJECT_ID('tempdb..#Latest_Comment', 'U') IS NOT NULL DROP TABLE #Latest_Comment    IF OBJECT_ID('tempdb..#min_touch', 'U') IS NOT NULL DROP TABLE #min_touch    IF OBJECT_ID('tempdb..#max_touch', 'U') IS NOT NULL DROP TABLE #max_touch        END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_MFID_TABLE_VG_10_TIMELY_RECORDING_FX  CreateDate: 2025-06-26 17:53:01.927  ModifyDate: 2025-06-26 17:53:01.927  --- DEFINITION START ---  -- =============================================    -- Author:  <Samad, Mehreen>    -- Create date: <29/07/2019>    -- Description:     -- <Master exception table for Timely Recording     -- Exception test for FX.>    -- =============================================        -- ***************VERSION CONTROL***************        -- *********************************************        CREATE PROCEDURE [dbo].[MASTER_MFID_TABLE_VG_10_TIMELY_RECORDING_FX]     -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,         AS    BEGIN             DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()             IF OBJECT_ID('tempdb..#distinct_ids_al', 'U') IS NOT NULL DROP TABLE #distinct_ids_al     SELECT DISTINCT       pr.ORD_NUM as TRD_ORD,      oc.PM_ORD AS ORD_NUM,      pr.MULTI_FUND_ID     INTO #distinct_ids_al     FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = pr.ORD_NUM     WHERE pr.DEALING_DESK = 'FX'             IF OBJECT_ID('tempdb..#distinct_ids_fx', 'U') IS NOT NULL DROP TABLE #distinct_ids_fx     SELECT DISTINCT      fxt.ORDER_ID,      fxo.ORD_NUM,      vg.TRADE_ID AS MULTI_FUND_ID      INTO #distinct_ids_fx     FROM Vista_Staging.dbo.VG_10_TIMELY_RECORDING_FX_TABLE vg     LEFT JOIN Vista_Reporting.dbo.FX_TRADES fxt ON fxt.TRADE_ID = vg.TRADE_ID     LEFT JOIN Vista_Reporting.dbo.FX_ORDERS fxo ON fxo.FXM_ORDER_ID = fxt.ORDER_ID                   IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE', 'U') IS NOT NULL     DELETE FROM #distinct_ids_fx where NOT EXISTS (SELECT DISTINCT od.TRADE_ID                  FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_FX od                  WHERE od.TRADE_ID = #distinct_ids_fx.MULTI_FUND_ID)         IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE', 'U') IS NOT NULL     DELETE FROM #distinct_ids_al where NOT EXISTS (SELECT DISTINCT od.MULTI_FUND_ID                  FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                  WHERE od.MULTI_FUND_ID = #distinct_ids_al.MULTI_FUND_ID)             IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE  #distinct_ids     SELECT *      INTO #distinct_ids     FROM #distinct_ids_al         UNION ALL         SELECT *      FROM #distinct_ids_fx         -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         IF OBJECT_ID('tempdb..#max_touch_t', 'U') IS NOT NULL DROP TABLE #max_touch_t     SELECT DISTINCT       t.MULTI_FUND_ID,       MAX(t.TOUCH_COUNT) as MAX_TOUCH      INTO #max_touch_t     FROM VISTA_REPORTING.dbo.TRADES t     WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)     GROUP BY MULTI_FUND_ID             IF OBJECT_ID('tempdb..#max_touch_pm', 'U') IS NOT NULL DROP TABLE #max_touch_pm     SELECT DISTINCT       pm.ord_num,       MAX(pm.TOUCH_COUNT) as MAX_TOUCH      INTO #max_touch_pm     FROM VISTA_REPORTING.dbo.PM_ORDERS pm     WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = pm.ORD_NUM)     GROUP BY ord_num         --FX Concatonated fields     IF OBJECT_ID('tempdb..#conc_fx', 'U') IS NOT NULL DROP TABLE #conc_fx      SELECT DISTINCT      ex.[TRADE_ID],      TRADE_VENUE = STUFF((          SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),fxo.TRADE_VENUE)         FROM VISTA_REPORTING.dbo.FX_ORDERS fxo         left join VISTA_REPORTING.dbo.FX_TRADES fxt         on fxo.[FXM_ORDER_ID] = fxt.[ORDER_ID]         WHERE fxt.[TRADE_ID] = ex.[TRADE_ID] and ex.[SOURCE] = 'FX'         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),      MARKET_ARRIVAL_DATE_TIME = STUFF((          SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),format(fxt.MARKET_ARRIVAL_DATE_TIME,'dd/MM/yyyy HH:mm:ss'))         FROM VISTA_REPORTING.dbo.FX_TRADES fxt         WHERE fxt.[TRADE_ID] = ex.[TRADE_ID] and ex.[SOURCE] = 'FX'         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),      ACCEPTED_DATE_TIME = STUFF((          SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),format(fxt.ACCEPTED_DATE_TIME,'dd/MM/yyyy HH:mm:ss'))         FROM VISTA_REPORTING.dbo.FX_TRADES fxt         WHERE fxt.[TRADE_ID] = ex.[TRADE_ID] and ex.[SOURCE] = 'FX'         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'')     INTO #conc_fx     FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FX_TABLE ex     WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)             --Create Master table      IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     SELECT DISTINCT      COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) as DEALER_NAME,      format(fxo.[AUTH_TIME] ,'dd/MM/yyyy HH:mm:ss') as AUTHORISED_DATE_TIME,      FORMAT(fxo.[INSTRUCTION_RECEIVED_DATE_TIME], 'dd/MM/yyyy HH:mm:ss') as ORDER_RECEIVED_DATE_TIME,      cc_fx.[ACCEPTED_DATE_TIME],      cc_fx.[MARKET_ARRIVAL_DATE_TIME],      format(fxt.[EXECUTED_DATE_TIME],'dd/MM/yyyy HH:mm:ss') as EXECUTED_DATE_TIME,      FORMAT(fxt.[UPLOADED_DATE_TIME],'dd/MM/yyyy HH:mm:ss') AS UPLOADED_DATE_TIME,      ex.[RECORDING_MINS] as TIMELY_RECORDING_MINS,      CASE        WHEN fxo.[INSTRUCTION_TYPE] in ('SPOT')        THEN COALESCE(ter.[SPOT_TIMELY_REC_THRESHOLD],ter2.[SPOT_TIMELY_REC_THRESHOLD])/60 --Divide by 60 to turn secs into mins       WHEN fxo.[INSTRUCTION_TYPE] in ('Forward','NDS','NDF','FX Swap') THEN COALESCE(ter.[FWD_TIMELY_REC_THRESHOLD],ter2.[FWD_TIMELY_REC_THRESHOLD])/60 --Divide by 60 to turn secs into mins      END AS TIMELY_RECORDING_THRESHOLD,      fxt.[TIMELY_RECORDING_REASON],      fxt.[TIMELY_RECORDING_REASON_NARRATION],      fxo.[CLIENT_FUND],      fxo.[BASE_FUND],      fxo.INSTRUCTION_TYPE as PRODUCT,      (fxt.[NR_LEG_PRODUCT] + ISNULL(' | ' + fxt.[FR_LEG_PRODUCT],'')) as FXM_PRODUCT,      (fxt.[ACTION1]  + ISNULL(' | ' + NULLIF(fxt.[ACTION2], ''),'')) as [ACTION],       (fxt.[NOTIONAL_CCY] + ISNULL(' | ' + fxt.[NOTIONAL_CCY_FAR],'')) as [INSTRUCTED_CURRENCY],      (fxt.[BUY_CCY]  + ISNULL(' | ' + fxt.[BUY_CCY_LEG2],'')) as [BUY_CURRENCY],      (fxt.[SELL_CCY]  + ISNULL(' | ' + fxt.[SELL_CCY_LEG2],'')) as [SELL_CURRENCY],      (CAST(format(convert( decimal(38,2),fxt.[NOTIONAL_AMOUNT]), '#,0.00') as varchar(50)) + ISNULL(' | ' + CAST(format(convert(decimal(38,2),fxt.[NOTIONAL_AMOUNT_FAR]), '#,0.00') as varchar(50)),'')) as [INSTRUCTED_AMOUNT],      FORMAT(fxt.[TRADE_DATE],'dd/MM/yyyy') as TRADE_DATE,      (CAST(FORMAT(fxt.[VALUE_DATE_NEAR],'dd/MM/yyyy') as varchar(50)) + ISNULL(' | ' + CAST(FORMAT(fxt.[VALUE_DATE_FAR],'dd/MM/yyyy') as varchar(50)),'')) as [VALUE_DATE],      (CAST(FORMAT(CONVERT(DECIMAL(38,2),fxt.[EXECUTED_AMOUNT]), '#,0.00') as varchar(50)) + ISNULL(' | ' + CAST(FORMAT(CONVERT(DECIMAL(38,2),fxt.[EXECUTED_AMOUNT_FAR]), '#,0.00') as varchar(50)),'')) as [EXECUTED_AMOUNT],      fxo.[SWAP_TYPE],      fxt.[NET_EXPOSURE_TRADE] as NET_EXPOSURE,      COALESCE(fxo.[PM],fxo.INSTRUCTED_BY) AS INSTRUCTED_BY,      fxo.[CREATED_FROM] as ORDER_SOURCE,      FXO.FM_COMMENTS AS FM_COMMENTS,      fxo.[TRADE_PURPOSE],      fxo.[MARKER],      (CAST(FORMAT(fxt.[FIXING_DATE],'dd/MM/yyyy') as varchar(50)) + ISNULL(' | ' + CAST(FORMAT(fxt.[FIXING_DATE_LEG2],'dd/MM/yyyy') as varchar(50)),'')) as [FIXING_DATE],      fxo.[BUSINESS_GROUP],      fxo.[TRADE_VENUE] as PLACEMENT_VENUE,      fxt.[EXECUTED_BANK],      (CAST(fxt.[EXECUTED_RATE] as varchar(50)) + ISNULL(' | ' + CAST(fxt.[EXECUTED_RATE_FAR] as varchar(50)),'')) as [ALL_IN_RATE],      (CAST(fxt.[FORWARD_POINTS] as varchar(50)) + ISNULL(' | ' + CAST(fxt.[FORWARD_POINTS_FAR] as varchar(50)),'')) as [FORWARD_POINTS],      (CAST(fxt.[SPOT_RATE] as varchar(50)) + ISNULL(' | ' + CAST(fxt.[SPOT_RATE_FAR] as varchar(50)),'')) as [SPOT_RATE],      fxt.[SWAP_POINTS],      fxo.[FXM_ORDER_ID] as ORDER_ID,      CASE       WHEN fxo.[ORD_NUM] IS NULL THEN fxo.[FXM_ORDER_ID]      ELSE fxo.[ORD_NUM]      END AS PM_ORDER_ID,      ex.[TRADE_ID] as TRANSACTION_NUMBER,      fxt.[TRADE_STATUS],      fxo.[ALADDIN_COMMON_ID] as ALADDIN_COMMON_IDENTIFIER,      fxt.[EXC_SESSION_ID] as SESSION_ID,      fxt.[EXC_SESSION_TYPE] as SESSION_TYPE,      fxt.[ORDER_STRATEGY] as NETTING_STRATEGY_USED,      ex.[VG_10_CREATETIME] as CREATE_DATE,      ex.[VG_10] as EXCEPTION_FLAG,      ex.[SOURCE] as [DATA_SOURCE],      fxt.EXECUTED_DATE_TIME as OS_EXECUTED_DATE_TIME     INTO #temp_final_master_table     FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FX_TABLE ex     left join VISTA_REPORTING.dbo.FX_TRADES fxt on fxt.[TRADE_ID] = ex.[TRADE_ID] and ex.[SOURCE] = 'FX'     left join VISTA_REPORTING.dbo.FX_ORDERS fxo on fxt.[ORDER_ID] = fxo.[FXM_ORDER_ID]     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd on tdd.[MG_USER_ID] = fxt.[DEALT_BY] AND CAST(fxt.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2 on tdd.[MG_USER_ID] = fxt.[ACCEPTED_BY] AND CAST(fxt.[PULL_DATE] AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)     left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd on dd.[REPORT_NAME] = 'Timely Recording' AND CAST(fxt.[PULL_DATE] AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)     left join #conc_fx cc_fx on ex.[TRADE_ID] = cc_fx.[TRADE_ID] and ex.[SOURCE] = 'FX'     LEFT JOIN VISTA_STAGING.dbo.REF_FX_TIMELY_EX_REC_THRESHOLD ter ON fxt.[BUY_CCY] = ter.[BASE_CCY] and fxt.[SELL_CCY] = ter.[CONTRA_CCY] and fxt.[EXECUTED_DATE_TIME] BETWEEN ter.DATE_FROM AND ter.DATE_TO     LEFT JOIN VISTA_STAGING.dbo.REF_FX_TIMELY_EX_REC_THRESHOLD ter2 ON fxt.[BUY_CCY] = ter2.[CONTRA_CCY] and fxt.[SELL_CCY] = ter2.[BASE_CCY] and fxt.[EXECUTED_DATE_TIME] BETWEEN ter2.DATE_FROM AND ter2.DATE_TO     WHERE ex.[SOURCE] = 'FX' AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)             UNION         SELECT DISTINCT      COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) as [DEALER_NAME],      FORMAT(pm.[AUTH_TIME],'dd/MM/yyyy HH:mm:ss') as AUTHORISED_DATE_TIME,      FORMAT(pm.[AUTH_TIME],'dd/MM/yyyy HH:mm:ss') as ORDER_RECIEVED_DATE_TIME,      CAST(FORMAT(pm.[ACTIVE_TIME],'dd/MM/yyyy HH:mm:ss') as varchar(50)) as ACCEPTED_DATE_TIME,      CAST(FORMAT(t.[EXECUTION_TIME],'dd/MM/yyyy HH:mm:ss') as varchar(50)) as [MARKET_ARRIVAL_DATE_TIME], --Same as executed, so DateDiff will always be 0???      FORMAT(t.[EXECUTION_TIME],'dd/MM/yyyy HH:mm:ss') as [EXECUTED_DATE_TIME],      FORMAT(t.[TRD_AUTH_TIME],'dd/MM/yyyy HH:mm:ss') as [UPLOADED_DATE_TIME],      ex.[RECORDING_MINS] as TIMELY_RECORDING_MINS,      COALESCE(ter.[FWD_TIMELY_REC_THRESHOLD],ter2.[FWD_TIMELY_REC_THRESHOLD])/60 as TIMELY_RECORDING_THRESHOLD,      NULL as [TIMELY_RECORDING_REASON],      NULL as [TIMELY_RECORDING_REASON_NARRATION],      NULL as [CLIENT_FUND],      t.[PORTFOLIOS_PORTFOLIO_NAME] as [BASE_FUND],       pm.[SM_SEC_TYPE] as [PRODUCT],      NULL AS FXM_PRODUCT,      NULL as [ACTION],      CAST(t.[FX_PAY_CURR] as varchar(50)) as [INSTRUCTED_CURRENCY],      NULL as [BUY_CURRENCY],      NULL as [SELL_CURRENCY],      CAST(FORMAT(pl.[QUANTITY],'#,0.00')  as varchar(50)) as [INSTRUCTED_AMOUNT],      FORMAT(pm.[OPEN_DATE],'dd/MM/yyyy') as [TRADE_DATE],      (CONVERT(VARCHAR(50),FORMAT(pm.[SETTLE_DATE],'dd/MM/yyyy')) + ISNULL(' | ' + CONVERT(VARCHAR(50),FORMAT(pm.[MATURITY],'dd/MM/yyyy')),'')) as [VALUE_DATE],      CAST(FORMAT(pm.[FILL_AMT],'#,0.00')  as varchar(50)) as [EXECUTED_AMOUNT],      NULL as [SWAP_TYPE],      NULL as [NET_EXPOSURE],      PM.PM AS INSTRUCTED_BY,      'Aladdin' as [ORDER_SOURCE], --N/A given as mapping field, using this as assumption (?)      pm.[COMMENTS_VALUE] as [FM_COMMENTS],      t.[TRD_PURPOSE] as [TRADE_PURPOSE],      NULL as [MARKER],      NULL as [FIXING_DATE], --Given as Trades.SECURITY.SMARTCUT.FXNDF_ANNOUNCE_DATE         CASE       WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP'       WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG'       WHEN (pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM'      ELSE NULL      END AS [BUSINESS_GROUP],       pl.[VENUE] as [PLACEMENT_VENUE],      pl.[BROKER] as [EXECUTED_BANK],      CAST(COALESCE(CONVERT(DECIMAL(38,8),pl.[AVG_PRICE]),CONVERT(DECIMAL(38,8),t.[FX_PRICE])) as varchar(50)) as [ALL_IN_RATE],      NULL as [FORWARD_POINTS],      NULL as [SPOT_RATE], -- Given as Trades.FX_PRICE_SPOT      NULL as [SWAP_POINTS],      pm.[ORD_NUM] as [ORDER_ID],      pm.[ORD_NUM] as PM_ORDER_ID,      ex.[TRADE_ID] as TRANSACTION_NUMBER,      t.[TRD_STATUS] as TRADE_STATUS,      r.[REQUEST_ID] as [ALADDIN_COMMON_IDENTIFIER],      NULL as [SESSION_ID],      NULL as [SESSION_TYPE],      NULL as [NETTING_STRATEGY_USED],      ex.[VG_10_CREATETIME] as [CREATE_DATE],      ex.[VG_10] as [EXCEPTION_FLAG],      ex.[SOURCE] as [DATA_SOURCE],      t.EXECUTION_TIME AS OS_EXECUTED_DATE_TIME     FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FX_TABLE ex     left join VISTA_REPORTING.dbo.TRADES t      on ex.[TRADE_ID] = t.[MULTI_FUND_ID] and ex.[SOURCE] = 'AL'     inner join #max_touch_t mtt      on t.[MULTI_FUND_ID] = mtt.[MULTI_FUND_ID] and t.[TOUCH_COUNT] = mtt.[MAX_TOUCH]     left join VISTA_REPORTING.dbo.ORDERS_CROSS oc     on t.[ORD_NUM] = oc.[TRD_ORD]     left join (select pm.* from VISTA_REPORTING.dbo.PM_ORDERS pm inner join #max_touch_pm mpm on mpm.ord_num = pm.ord_num and mpm.MAX_TOUCH = pm.touch_count) pm     on oc.[PM_ORD] = pm.[ORD_NUM] and ex.[SOURCE] = 'AL'     left join (SELECT DISTINCT FUND_ID, PORTFOLIO_GROUP_NAME FROM VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY) pgt     on t.[FUND] = pgt.[FUND_ID]     left join (SELECT DISTINCT ORD_NUM, PLACEMENT_NUM, [STATUS], QUANTITY, [BROKER], AVG_PRICE, VENUE FROM VISTA_REPORTING.dbo.PLACEMENTS) pl      on pm.[ORD_NUM] = pl.[ORD_NUM]     left join (SELECT PLACEMENT_NUM, REQUEST_ID FROM VISTA_STAGING.dbo.REQUEST_LOOKUP) r      on pl.[PLACEMENT_NUM] = r.[PLACEMENT_NUM]     left join VISTA_STAGING.dbo.REF_FX_TIMELY_EX_REC_THRESHOLD ter     ON SUBSTRING(pm.SEC_DESC1, 1,3) = ter.[BASE_CCY] and SUBSTRING(pm.SEC_DESC1, 7,3) = ter.[CONTRA_CCY] and t.TRD_AUTH_TIME BETWEEN ter.DATE_FROM AND ter.DATE_TO     left join VISTA_STAGING.dbo.REF_FX_TIMELY_EX_REC_THRESHOLD ter2     on SUBSTRING(pm.SEC_DESC1, 1,3) = ter.[CONTRA_CCY] and SUBSTRING(pm.SEC_DESC1, 7,3) = ter.[BASE_CCY] and t.TRD_AUTH_TIME BETWEEN ter2.DATE_FROM AND ter2.DATE_TO     left join VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd      on tdd.[MG_USER_ID]  = t.[TRD_TRADER] AND CAST(t.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)     left join VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd2     on tdd.[MG_USER_ID]  = pm.[TRADER] AND CAST(pm.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)     left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd      on dd.[REPORT_NAME] = 'Timely Recording' AND CAST(COALESCE(t.[PULL_DATE],pm.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)     WHERE ex.[SOURCE] = 'AL' AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE', 'U') IS NOT NULL     DELETE FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE     WHERE TRANSACTION_NUMBER IN (SELECT DISTINCT MULTI_FUND_ID FROM #distinct_ids)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE     SELECT *     FROM #temp_final_master_table         ELSE         SELECT *     INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE     FROM #temp_final_master_table             IF OBJECT_ID('tempdb..#conc_fx', 'U') IS NOT NULL DROP TABLE #conc_fx     IF OBJECT_ID('tempdb..#max_touch_t', 'U') IS NOT NULL DROP TABLE #max_touch_t      IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     IF OBJECT_ID('tempdb..#distinct_ids_al', 'U') IS NOT NULL DROP TABLE #distinct_ids_al     IF OBJECT_ID('tempdb..#distinct_ids_fx', 'U') IS NOT NULL DROP TABLE #distinct_ids_fx     IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE  #distinct_ids     IF OBJECT_ID('tempdb..#max_touch_pm', 'U') IS NOT NULL DROP TABLE #max_touch_pm             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg10_fx_idx1')           DROP INDEX mmf_vg10_fx_idx1      ON VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg10_fx_idx1     ON VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE      (TRANSACTION_NUMBER)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg10_fx_idx2')           DROP INDEX mmf_vg10_fx_idx2      ON VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg10_fx_idx2     ON VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE      (AUTHORISED_DATE_TIME)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg10_fx_idx3')           DROP INDEX mmf_vg10_fx_idx3      ON VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg10_fx_idx3     ON VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE      (DEALER_NAME)              IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg10_fx_idx4')           DROP INDEX mmf_vg10_fx_idx4      ON VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg10_fx_idx4     ON VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE      (CREATE_DATE)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg10_fx_idx5')           DROP INDEX mmf_vg10_fx_idx5      ON VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg10_fx_idx5     ON VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE      (TRADE_DATE)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg10_fx_idx6')           DROP INDEX mmf_vg10_fx_idx6      ON VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg10_fx_idx6     ON VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE      (EXCEPTION_FLAG)              IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(     'MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE', --TABLE_NAME     @START_TIME, --START_TIME     GETDATE(), --END_TIME     DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS     CAST(GETDATE() as date)) --COMPLETION_DATE             END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_MFID_TABLE_VG_16_GIFTS_AND_HOSPITALITY_CASH  CreateDate: 2025-06-26 17:53:16.720  ModifyDate: 2025-06-26 17:53:16.720  --- DEFINITION START ---  -- =============================================    -- Author:  <da Costa, David>    -- Create date: <20/06/2019>    -- Description:     -- <Master table for Gifts and Hosplitality in CASH.>    -- =============================================        -- ***************VERSION CONTROL***************    -- *********************************************        CREATE PROCEDURE [dbo].[MASTER_MFID_TABLE_VG_16_GIFTS_AND_HOSPITALITY_CASH]     -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,         AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        --Used to track total time stored procedure took to run    DECLARE @START_TIME as datetime    SET @START_TIME = GETDATE()        IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids    SELECT DISTINCT t.MULTI_FUND_ID, t.DATA_SOURCE    INTO #distinct_ids    FROM VISTA_STAGING.DBO.VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE t            --If the master table doesn't exist then we want to use all the data available, otherwise just the most recent data    IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE', 'U') IS NOT NULL    DELETE FROM #distinct_ids     where NOT EXISTS (SELECT od.TRANSACTION_NUMBER          FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_CASH od          WHERE od.TRANSACTION_NUMBER = #distinct_ids.MULTI_FUND_ID)    AND #distinct_ids.DATA_SOURCE = 'CM'        IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE', 'U') IS NOT NULL    DELETE FROM #distinct_ids     where NOT EXISTS (SELECT od.MULTI_FUND_ID          FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od          WHERE od.MULTI_FUND_ID = #distinct_ids.MULTI_FUND_ID)    AND #distinct_ids.DATA_SOURCE = 'AL'            IF OBJECT_ID('tempdb..#temp_cash_orders', 'U') IS NOT NULL DROP TABLE #temp_cash_orders    SELECT DISTINCT t.ORDER_ID    into #temp_cash_orders    from Vista_Reporting.dbo.CASH_TRADES t    INNER JOIN #distinct_ids di ON di.MULTI_FUND_ID = t.TRANSACTION_NUMBER        UNION        SELECT DISTINCT oc.PM_ORD    FROM Vista_Reporting.dbo.TRADES tr    INNER JOIN #distinct_ids di ON di.MULTI_FUND_ID = tr.MULTI_FUND_ID    LEFT JOIN Vista_Reporting.dbo.ORDERS_CROSS oc on oc.TRD_ORD = tr.ORD_NUM        IF OBJECT_ID('tempdb..#temp_max_trade_touch', 'U') IS NOT NULL DROP TABLE #temp_max_trade_touch    SELECT     t.MULTI_FUND_ID,     MAX(TOUCH_COUNT) AS MAX_TOUCH    INTO #temp_max_trade_touch    FROM VISTA_REPORTING.dbo.TRADES t    INNER JOIN #distinct_ids di ON di.MULTI_FUND_ID = t.MULTI_FUND_ID    GROUP BY t.MULTI_FUND_ID            IF OBJECT_ID('tempdb..#temp_max_order_touch', 'U') IS NOT NULL DROP TABLE #temp_max_order_touch    SELECT     ORD_NUM,     MAX(TOUCH_COUNT) AS MAX_TOUCH    INTO #temp_max_order_touch    FROM VISTA_REPORTING.dbo.PM_ORDERS pm    INNER JOIN #temp_cash_orders tco ON tco.ORDER_ID = pm.ORD_NUM    GROUP BY ORD_NUM            IF OBJECT_ID('tempdb..#temp_max_req_orders', 'U') IS NOT NULL DROP TABLE #temp_max_req_orders    SELECT      co.ORDER_ID,     MAX(API_REQUESTED_DATE) AS MAX_API_REQ    INTO #temp_max_req_orders    FROM VISTA_REPORTING.dbo.CASH_ORDERS co    INNER JOIN #temp_cash_orders tco ON co.ORDER_ID = tco.ORDER_ID    GROUP BY co.ORDER_ID            IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades    SELECT      TRANSACTION_NUMBER,     MAX(API_REQUESTED_DATE) AS MAX_API_REQ    INTO #temp_max_req_trades    FROM VISTA_REPORTING.dbo.CASH_TRADES ct    INNER JOIN #distinct_ids di ON di.MULTI_FUND_ID = ct.TRANSACTION_NUMBER    GROUP BY TRANSACTION_NUMBER            IF OBJECT_ID('tempdb..#temp_gh_table', 'U') IS NOT NULL DROP TABLE #temp_gh_table    SELECT DISTINCT     vg.ORD_NUM AS ORDER_ID,     vg.MULTI_FUND_ID AS TRANSACTION_NUMBER,     ct.CLIENT_FUND_OR_POOL_CODE AS CLIENT_FUND,     ct.BASE_FUND_CODE,     ct.PRODUCT,     co.ORDER_TERM,     co.TRADE_DATE,     ct.VALUE_DATE,     ct.MATURITY_DATE,     ct.CONFIRMED_DATETIME AS CONFIRMED_DATE_TIME,     DATEDIFF(DAY, ct.VALUE_DATE, ct.MATURITY_DATE) AS NO_OF_DAYS,     ct.TRADE_CURRENCY AS CURRENCY,     ct.DEALT_AMOUNT,     ct.EXECUTED_RATE,     ct.REUTERS_RATE AS REUTERS_REFERENCE_RATE,     ct.BANK,     cr.BANK_CODE AS LOSING_BANKS,     cr.RATE AS LOSING_RATES,     ct.STATIC_BANK_COUNT,     ct.NOOF_QUOTES AS NO_OF_QUOTES,     be.NO_OF_QUOTES_THRESHOLD AS BANK_COUNT_THRESHOLD,     be.NWQ_EXCEPTION,     be.B3Q_EXCEPTION,     be.TOLERANCE AS THRESHOLD_FOR_DEPOSITS,     be.DIFFERENCE_BPS,     be.CRR_EXCEPTION ,     COALESCE(ct.DEALER_NAME_DECODE,tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) as DEALER_NAME,     CONVERT(VARCHAR, co.CUSTOM_INSTRUCTION) AS CUSTOM_INSTRUCTION,     CONVERT(VARCHAR, co.INSTRUCTION_STATUS_DECODE) AS INSTRUCTION_STATUS,     ct.TRANSACTION_STATUS_DECODE as TRANSACTION_STATUS,     ct.TRANSACTION_TYPE,     vg.VG_16_CREATETIME AS CREATE_DATE,     vg.VG_16 AS EXCEPTION_FLAG,     'CM' AS [DATA_SOURCE]    INTO #temp_gh_table    FROM VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE vg      INNER JOIN #distinct_ids di on vg.MULTI_FUND_ID = di.MULTI_FUND_ID and di.DATA_SOURCE = vg.DATA_SOURCE    LEFT JOIN (select ct.* from VISTA_REPORTING.dbo.CASH_TRADES ct    inner join #temp_max_req_trades req on req.MAX_API_REQ = ct.API_REQUESTED_DATE and ct.TRANSACTION_NUMBER = req.TRANSACTION_NUMBER) ct ON ct.TRANSACTION_NUMBER = vg.MULTI_FUND_ID    LEFT JOIN (select co.* from VISTA_REPORTING.dbo.CASH_ORDERS co    inner join #temp_max_req_orders req on req.ORDER_ID = CO.order_id and req.MAX_API_REQ = co.API_REQUESTED_DATE) co ON co.ORDER_ID=ct.ORDER_ID    LEFT JOIN VISTA_REPORTING.dbo.CASH_BANK_RATES cr ON cr.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER AND cr.BANK_CODE != ct.BANK    LEFT JOIN VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE be ON be.TRANSACTION_NUMBER=ct.TRANSACTION_NUMBER    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2    on co.[ACCEPTED_BY] = tdd2.[MG_USER_ID] AND CAST(co.[PULL_DATE] AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)    left join VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER dd     on dd.[REPORT_NAME] = 'Best Execution MM' and CAST(COALESCE(co.[PULL_DATE],ct.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)    WHERE ct.TRANSACTION_NUMBER IS NOT NULL and vg.DATA_SOURCE = 'CM'        UNION        SELECT DISTINCT     vg.ORD_NUM,     vg.MULTI_FUND_ID,     NULL,     t.PORTFOLIOS_PORTFOLIO_NAME,     be.PRODUCT,     NULL,     t.TRD_TRADE_DATE,     t.TRD_TRADE_DATE,     t.TRD_SETTLE_DATE,     t.EXECUTION_TIME,     DATEDIFF(DAY, t.TRD_TRADE_DATE, t.TRD_SETTLE_DATE),     t.SM_CURRENCY,     t.TRD_ORIG_FACE,     t.TRD_PRICE,     NULL,     COALESCE(t.TRD_EX_BROKER_CODE, t.TRD_COUNTERPARTY),     c.TRD_COUNTERPARTY,     q.QUOTE_VALUE,     NULL,     COUNT(DISTINCT q.BROKER),     be.NO_OF_QUOTES_THRESHOLD,     be.NWQ_EXCEPTION,     be.B3Q_EXCEPTION,     be.TOLERANCE,     be.DIFFERENCE_BPS,     be.CRR_EXCEPTION,     COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]),     po.COMMENTS_VALUE,     po.[STATUS],     t.TRD_STATUS,     t.TRAN_TYPE,     vg.VG_16_CREATETIME,     vg.VG_16,     'AL'    FROM VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE vg    INNER JOIN #distinct_ids di on vg.MULTI_FUND_ID = di.MULTI_FUND_ID and di.DATA_SOURCE = vg.DATA_SOURCE    LEFT JOIN (SELECT DISTINCT pm.ORD_NUM, COMMENTS_VALUE, [STATUS], TRADER, PULL_DATE FROM VISTA_REPORTING.dbo.PM_ORDERS pm     inner join #temp_max_order_touch mto on mto.MAX_TOUCH = pm.TOUCH_COUNT and mto.ORD_NUM = pm.ORD_NUM) po ON po.ORD_NUM=vg.ORD_NUM    LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD=vg.ORD_NUM    LEFT JOIN (select t.* from VISTA_REPORTING.dbo.TRADES t    INNER JOIN #temp_max_trade_touch mtt ON mtt.MULTI_FUND_ID=t.MULTI_FUND_ID AND mtt.MAX_TOUCH=t.TOUCH_COUNT) t ON vg.MULTI_FUND_ID = t.MULTI_FUND_ID    LEFT JOIN VISTA_REPORTING.dbo.QUOTES q ON q.MULTI_FUND_ID=t.MULTI_FUND_ID AND q.QUOTE_ORIGIN='QUOTE' AND q.BROKER != t.COUNTERPARTY_CODE    LEFT JOIN VISTA_REPORTING.dbo.COUNTERPARTIES c ON c.COUNTERPARTY_CODE=q.BROKER    LEFT JOIN VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE be ON be.TRANSACTION_NUMBER=t.MULTI_FUND_ID    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd    on t.[TRD_TRADER] = tdd.[INITIALS] AND CAST(t.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2    on po.[TRADER] = tdd2.[INITIALS] AND CAST(po.[PULL_DATE] AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)    left join VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER dd     on dd.[REPORT_NAME] = 'Best Execution MM' and CAST(COALESCE(t.[PULL_DATE],po.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)    where vg.DATA_SOURCE = 'AL'    GROUP BY     vg.ORD_NUM,     vg.MULTI_FUND_ID,     t.PORTFOLIOS_PORTFOLIO_NAME,     be.PRODUCT,     t.EXECUTION_TIME,     t.TRD_TRADE_DATE,      t.TRD_SETTLE_DATE,     t.SM_CURRENCY,     t.TRD_ORIG_FACE,     t.TRD_PRICE,     COALESCE(t.TRD_EX_BROKER_CODE, t.TRD_COUNTERPARTY),     c.TRD_COUNTERPARTY,     q.QUOTE_VALUE,     be.NO_OF_QUOTES_THRESHOLD,     be.NWQ_EXCEPTION,     be.B3Q_EXCEPTION,     be.TOLERANCE,     be.DIFFERENCE_BPS,     be.CRR_EXCEPTION,     t.TRD_TRADER,     tdd.[FULL_NAME],     tdd2.[FULL_NAME],     dd.[DEFAULT_DEALER],     po.COMMENTS_VALUE,     po.[STATUS],     t.TRD_STATUS,     t.TRAN_TYPE,     vg.VG_16_CREATETIME,     vg.VG_16        IF OBJECT_ID('tempdb..#concat', 'U') IS NOT NULL DROP TABLE #concat    SELECT      gh.TRANSACTION_NUMBER,     STUFF((            SELECT DISTINCT ' | ' + CAST(gh1.LOSING_BANKS AS VARCHAR(50))            FROM (SELECT DISTINCT TRANSACTION_NUMBER, LOSING_BANKS FROM #temp_gh_table) gh1            WHERE (gh1.TRANSACTION_NUMBER = gh.TRANSACTION_NUMBER AND gh1.LOSING_BANKS is NOT NULL)            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS LOSING_BANKS,     STUFF((            SELECT DISTINCT ' | ' + CAST(gh2.LOSING_RATES AS VARCHAR(50))            FROM (SELECT DISTINCT TRANSACTION_NUMBER, LOSING_RATES FROM #temp_gh_table) gh2            WHERE (gh2.TRANSACTION_NUMBER = gh.TRANSACTION_NUMBER AND gh2.LOSING_RATES is NOT NULL)            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS LOSING_RATES    INTO #concat    FROM (SELECT DISTINCT TRANSACTION_NUMBER FROM #temp_gh_table) gh    INNER JOIN #distinct_ids di ON di.MULTI_FUND_ID = gh.TRANSACTION_NUMBER            IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table    SELECT DISTINCT     gh.ORDER_ID,     gh.TRANSACTION_NUMBER,     gh.CLIENT_FUND,     gh.BASE_FUND_CODE,     gh.PRODUCT,     gh.ORDER_TERM,     gh.TRADE_DATE,     gh.VALUE_DATE,     gh.MATURITY_DATE,     gh.CONFIRMED_DATE_TIME,     gh.NO_OF_DAYS,     gh.CURRENCY,     gh.DEALT_AMOUNT,     gh.EXECUTED_RATE,     gh.REUTERS_REFERENCE_RATE,     gh.BANK,     conc.LOSING_BANKS,     conc.LOSING_RATES,     gh.STATIC_BANK_COUNT,     gh.NO_OF_QUOTES,     gh.BANK_COUNT_THRESHOLD,     gh.NWQ_EXCEPTION,     gh.B3Q_EXCEPTION,     gh.THRESHOLD_FOR_DEPOSITS,     gh.DIFFERENCE_BPS,     gh.CRR_EXCEPTION,     gh.DEALER_NAME,     gh.CUSTOM_INSTRUCTION,     gh.INSTRUCTION_STATUS,     gh.TRANSACTION_STATUS,     gh.TRANSACTION_TYPE,     gh.CREATE_DATE,     gh.EXCEPTION_FLAG,     gh.[DATA_SOURCE]    INTO #temp_final_master_table    FROM #temp_gh_table gh    LEFT JOIN #concat conc ON conc.TRANSACTION_NUMBER=gh.TRANSACTION_NUMBER    inner join #distinct_ids di on di.MULTI_FUND_ID = gh.TRANSACTION_NUMBER and gh.DATA_SOURCE = di.DATA_SOURCE        IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE', 'U') IS NOT NULL    DELETE FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE    WHERE EXISTS (SELECT DISTINCT TRANSACTION_NUMBER     FROM #distinct_ids    WHERE #distinct_ids.MULTI_FUND_ID = VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE.TRANSACTION_NUMBER)                IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE    SELECT *    FROM #temp_final_master_table        ELSE        SELECT *    INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE    FROM #temp_final_master_table            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(    'MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE', --TABLE_NAME    @START_TIME, --START_TIME    GETDATE(), --END_TIME    DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS    CAST(GETDATE() as date)) --COMPLETION_DATE            IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids    IF OBJECT_ID('tempdb..#temp_cash_orders', 'U') IS NOT NULL DROP TABLE #temp_cash_orders    IF OBJECT_ID('tempdb..#temp_max_trade_touch', 'U') IS NOT NULL DROP TABLE #temp_max_trade_touch    IF OBJECT_ID('tempdb..#temp_max_order_touch', 'U') IS NOT NULL DROP TABLE #temp_max_order_touch    IF OBJECT_ID('tempdb..#temp_max_req_orders', 'U') IS NOT NULL DROP TABLE #temp_max_req_orders    IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades    IF OBJECT_ID('tempdb..#temp_gh_table', 'U') IS NOT NULL DROP TABLE #temp_gh_table    IF OBJECT_ID('tempdb..#concat', 'U') IS NOT NULL DROP TABLE #concat    IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table        IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg16_cash_idx1')           DROP INDEX mmf_vg16_cash_idx1            ON VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE               CREATE NONCLUSTERED INDEX mmf_vg16_cash_idx1           ON VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE            (TRADE_DATE)        IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg16_cash_idx2')           DROP INDEX mmf_vg16_cash_idx2            ON VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE               CREATE NONCLUSTERED INDEX mmf_vg16_cash_idx2           ON VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE            (EXCEPTION_FLAG)        IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg16_cash_idx3')           DROP INDEX mmf_vg16_cash_idx3            ON VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE               CREATE NONCLUSTERED INDEX mmf_vg16_cash_idx3           ON VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE            (CREATE_DATE)        END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_MFID_TABLE_VG_16_GIFTS_AND_HOSPITALITY_DMG  CreateDate: 2025-06-26 17:53:34.543  ModifyDate: 2025-06-26 17:53:34.543  --- DEFINITION START ---  -- =============================================    -- Author:  <Samad, Mehreen>    -- Create date: <07/05/2019>    -- Description:     -- <Master table for Gifts and Hosplitality.>    -- =============================================        -- ***************VERSION CONTROL***************    -- 2019-05-14 - MS: Added in TRD_EX_BROKER_CODE    -- *********************************************        CREATE PROCEDURE [dbo].[MASTER_MFID_TABLE_VG_16_GIFTS_AND_HOSPITALITY_DMG]     -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,         AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;    --Used to track total time stored procedure took to run     DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()        IF OBJECT_ID('tempdb..#trades_metadata', 'U') IS NOT NULL DROP TABLE #trades_metadata    SELECT DISTINCT     t.*    INTO #trades_metadata    FROM VISTA_REPORTING.dbo.TRADES t    INNER JOIN VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE vg ON vg.MULTI_FUND_ID = t.MULTI_FUND_ID    WHERE FinalFlag = 1            --If the master table doesn't exist then we want to use all the data available, otherwise just the most recent data    IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE', 'U') IS NOT NULL    DELETE FROM #trades_metadata where NOT EXISTS (SELECT od.MULTI_FUND_ID                   FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                  WHERE od.MULTI_FUND_ID = #trades_metadata.MULTI_FUND_ID)                IF OBJECT_ID('tempdb..#oc_metadata', 'U') IS NOT NULL DROP TABLE #oc_metadata    SELECT DISTINCT *    INTO #oc_metadata    FROM Vista_Reporting.dbo.ORDERS_CROSS oc    where oc.TRD_ORD in (SELECT ORD_NUM FROM #trades_metadata)        IF OBJECT_ID('tempdb..#trd_orders_metadata', 'U') IS NOT NULL DROP TABLE #trd_orders_metadata    SELECT DISTINCT *    INTO #trd_orders_metadata    FROM VISTA_REPORTING.dbo.TRD_ORDERS t    where t.ORD_NUM in (select ORD_NUM from #trades_metadata)            IF OBJECT_ID('tempdb..#prim_metadata', 'U') IS NOT NULL DROP TABLE #prim_metadata    SELECT DISTINCT t.*    INTO #prim_metadata     FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE t    WHERE t.MULTI_FUND_ID in (SELECT MULTI_FUND_ID from #trades_metadata)        --Concatenate PCT_OF_NAV wih FUND and NAV_CUT_OFF with FUND by MFID    IF OBJECT_ID('tempdb..#PCT_NAV', 'U') IS NOT NULL DROP TABLE #PCT_NAV    SELECT DISTINCT     t.MULTI_FUND_ID,     t.CLIENT_EXECUTION_NUM,     CONCAT(t.PORTFOLIOS_PORTFOLIO_NAME,': ', CASE                WHEN nav.nav_value_gbp != 0                 THEN ABS(CONVERT(DECIMAL(30,2),100.0*(t.NET_CONSIDERATION_GBP)/nav.nav_value_gbp))                 ELSE NULL                 END) AS PCT_NAV_CONCAT,     CONCAT(t.PORTFOLIOS_PORTFOLIO_NAME, ': ', nc.CUTOFF) AS CUTOFF    INTO #PCT_NAV    FROM #trades_metadata t    outer apply (SELECT TOP 1         nav.*         FROM VISTA_REPORTING.dbo.NAV         WHERE nav.PORTFOLIO_NAME = t.PORTFOLIOS_PORTFOLIO_NAME AND nav.NAV_PORT_DATE <= CONVERT(DATE, t.TRD_AUTH_TIME)         ORDER BY nav.NAV_PORT_DATE DESC) nav    left join VISTA_STAGING.dbo.NAV_CUT_OFFS nc     on nc.CLIENT_FUND=t.PORTFOLIOS_PORTFOLIO_NAME            IF OBJECT_ID('tempdb..#pct_nav_concat', 'U') IS NOT NULL DROP TABLE #pct_nav_concat    SELECT      MULTI_FUND_ID,     STUFF((      SELECT DISTINCT ' | ' + PCT_NAV_CONCAT      FROM #PCT_NAV       WHERE (MULTI_FUND_ID = pc_nav.MULTI_FUND_ID)       ORDER BY ' | ' + PCT_NAV_CONCAT      FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS NAV_PCT_concat,     STUFF((      SELECT DISTINCT ' | ' + CUTOFF      FROM #PCT_NAV       WHERE (MULTI_FUND_ID = pc_nav.MULTI_FUND_ID)       ORDER BY  ' | ' + CUTOFF      FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS NAV_CUT_concat,     STUFF((      SELECT DISTINCT ' | ' + CLIENT_EXECUTION_NUM      FROM #PCT_NAV       WHERE (MULTI_FUND_ID = pc_nav.MULTI_FUND_ID)       ORDER BY ' | ' + CLIENT_EXECUTION_NUM      FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS CL_EX_concat    INTO #pct_nav_concat    FROM #PCT_NAV pc_nav    GROUP BY MULTI_FUND_ID            --2. Get latest TRD_TRADE_DATE associated with a trade    IF OBJECT_ID('tempdb..#Latest_TRD_TRADE_DATE', 'U') IS NOT NULL DROP TABLE #Latest_TRD_TRADE_DATE    SELECT DISTINCT     MULTI_FUND_ID,     TRD_TRADE_DATE,     EXECUTION_TIME,     TRD_PURPOSE,     TRD_AUTH_TIME,     TRAN_TYPE,     SM_CURRENCY,     TRD_PRICE,     TRD_PRICING_SPREAD,     TRD_YIELD,     TRD_COUNTERPARTY,     TRD_COUPON,     TRD_ENTRY_TIME,     TRDCOMM_COMMENTS,     ACTIVITY_TYPE,     ACTIVITY_TYPE_DECODE,     TRD_CURRENCY    INTO #Latest_TRD_TRADE_DATE    FROM #trades_metadata    WHERE FinalFlag = 1        --3. Get Investment desks associated with all funds on a trade    IF OBJECT_ID('tempdb..#MFID_inv_Desk', 'U') IS NOT NULL DROP TABLE #MFID_inv_Desk    SELECT DISTINCT      t.MULTI_FUND_ID,      p.ancestor    INTO #MFID_inv_Desk    FROM VISTA_REPORTING.dbo.TRADES t    INNER JOIN VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE vg ON vg.MULTI_FUND_ID = t.MULTI_FUND_ID    left join VISTA_STAGING.dbo.PORTFOLIO_GROUP_CLOSURE_TABLE p    on t.PORTFOLIOS_PORTFOLIO_NAME = p.descendant    WHERE t.MULTI_FUND_ID in (SELECT MULTI_FUND_ID from #trades_metadata)    --Not necessary for DMG    --WHERE p.ancestor IN ('MG_ATCRED','MG_RET_FI','MG_INSTI',    --      'MG_INTER','MG_RESTCT','MG_IN_CAP',    --      'MG_LEVFIN','MG_MIB','MG_REDEBT') -- This is the list of investment desks provided in the business requirements documents            IF OBJECT_ID('tempdb..#Inv_desk_concat', 'U') IS NOT NULL DROP TABLE #Inv_desk_concat    SELECT      MULTI_FUND_ID,     STUFF((     SELECT DISTINCT ', ' + LTRIM(RTRIM(ancestor))     FROM #MFID_inv_Desk      WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)      ORDER BY ', ' + LTRIM(RTRIM(ancestor))     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS Inv_Desk_Concat    INTO #Inv_desk_concat    FROM #MFID_inv_Desk Results    GROUP BY MULTI_FUND_ID        --4. Get latest comments value associated with a trade    IF OBJECT_ID('tempdb..#Latest_Comment', 'U') IS NOT NULL DROP TABLE #Latest_Comment    SELECT DISTINCT     o.ORD_NUM,     o.COMMENTS_VALUE    INTO #Latest_Comment    FROM #trd_orders_metadata o    inner join (SELECT        ORD_NUM,        MAX(TOUCH_COUNT) AS MAX_TOUCH       FROM VISTA_REPORTING.dbo.ORDERS       GROUP BY ORD_NUM) o2    on o.ORD_NUM = o2.ORD_NUM AND o.TOUCH_COUNT = o2.MAX_TOUCH    WHERE NULLIF(o.COMMENTS_VALUE,'') is not null    and o.ORD_NUM in (select ORD_NUM from #trades_metadata)        IF OBJECT_ID('tempdb..#min_touch', 'U') IS NOT NULL DROP TABLE #min_touch    SELECT     t1.MULTI_FUND_ID,     t1.TRD_TRADER AS TRADER,     D.FULL_NAME as TRADER_FULL_NAME    INTO #min_touch    FROM VISTA_REPORTING.dbo.TRADES as t1    INNER JOIN VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE vg ON vg.MULTI_FUND_ID = t1.MULTI_FUND_ID    join (SELECT      t1.MULTI_FUND_ID,      MIN(t1.TOUCH_COUNT) as MIN_TOUCH      FROM VISTA_REPORTING.dbo.TRADES as t1      INNER JOIN VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE vg ON vg.MULTI_FUND_ID = t1.MULTI_FUND_ID      GROUP BY t1.MULTI_FUND_ID)     as t2 on t1.MULTI_FUND_ID=t2.MULTI_FUND_ID and t1.TOUCH_COUNT=t2.MIN_TOUCH    left join VISTA_REPORTING.DBO.DEALER_AND_DESK D     on D.INITIALS = t1.TRD_TRADER    WHERE t1.MULTI_FUND_ID in (SELECT MULTI_FUND_ID from #trades_metadata)        IF OBJECT_ID('tempdb..#max_touch', 'U') IS NOT NULL DROP TABLE #max_touch    SELECT     t1.ORD_NUM,     t1.TRADER,     t1.TRADER_FULL_NAME,     t1.FACE    INTO #max_touch    FROM #trd_orders_metadata as t1    join (SELECT      t1.ORD_NUM,      MAX(t1.TOUCH_COUNT) as MAX_TOUCH      FROM #trd_orders_metadata as t1      join #trd_orders_metadata as t2       on t1.ORD_NUM=t2.ORD_NUM      GROUP BY t1.ORD_NUM) as t2     on t1.ORD_NUM=t2.ORD_NUM and t1.TOUCH_COUNT=t2.MAX_TOUCH        IF OBJECT_ID('tempdb..#temp_t', 'U') IS NOT NULL DROP TABLE #temp_t    SELECT      t.MULTI_FUND_ID,      SUM(ABS(TRD_ORIG_FACE)) AS SUM_TRD_ORIG_FACE,     --SUM(ABS(TRD_PRINCIPAL)) AS SUM_TRD_PRINCIPAL,     SUM(ABS(TRD_PRINCIPAL_GBP)) AS SUM_TRD_PRINCIPAL_GBP,     SUM(ABS(NET_CONSIDERATION_GBP)) AS SUM_NET_CONSIDERATION_GBP    INTO #temp_t     FROM #trades_metadata t    WHERE FinalFlag=1     GROUP BY t.MULTI_FUND_ID        IF OBJECT_ID('tempdb..#PM_comments', 'U') IS NOT NULL DROP TABLE #PM_comments    SELECT DISTINCT           dc.VALUE,           t.MULTI_FUND_ID    INTO #PM_comments    FROM VISTA_STAGING.dbo.TRADES t    left join #oc_metadata oc     on t.ORD_NUM = oc.TRD_ORD    left join (SELECT DISTINCT                                  PM,                                 ORD_NUM,                                 UPDATE_INSTR                      FROM VISTA_REPORTING.dbo.PM_ORDERS) pm     on oc.PM_ORD = pm.ORD_NUM    LEFT JOIN (SELECT DISTINCT                                  VALUE,                                 TAG_NAME,                                 CODE                      FROM VISTA_REPORTING.dbo.DECODES) dc     on dc.TAG_NAME = 'PM_INSTRUCTION' AND dc.CODE=pm.UPDATE_INSTR    WHERE pm.PM IS NOT NULL    and t.MULTI_FUND_ID in (SELECT MULTI_FUND_ID from #trades_metadata)        IF OBJECT_ID('tempdb..#PM_INST_concat', 'U') IS NOT NULL DROP TABLE #PM_INST_concat    SELECT            MULTI_FUND_ID,           STUFF((           SELECT DISTINCT ', ' + LTRIM(RTRIM(VALUE))           FROM #PM_comments            WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)         ORDER BY ', ' + LTRIM(RTRIM(VALUE))           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')           ,1,2,'') AS PM_INST_concat    INTO #PM_INST_concat    FROM #PM_comments Results    GROUP BY MULTI_FUND_ID         --1.d. Create a temp table containing the counterparty and value for each quote associated with the MFI (except for the actual counterparty)    IF OBJECT_ID('tempdb..#Brkr', 'U') IS NOT NULL DROP TABLE #Brkr        SELECT DISTINCT        qt.MULTI_FUND_ID,        CONVERT(DECIMAL(21,3),qt.QUOTE_VALUE) AS QUOTE_VALUE,         ISNULL(brk.TRD_COUNTERPARTY,'') AS COUNTERPARTY    INTO #Brkr    FROM VISTA_REPORTING.dbo.QUOTES qt    LEFT JOIN VISTA_REPORTING.dbo.COUNTERPARTIES brk    ON qt.BROKER = brk.COUNTERPARTY_CODE    WHERE NULLIF(qt.QUOTE_VALUE,0) IS NOT NULL    and qt.MULTI_FUND_ID in (SELECT MULTI_FUND_ID from #trades_metadata)    --AND qt.QUOTE_ORIGIN <> 'TRADE'            IF OBJECT_ID('tempdb..#Broker', 'U') IS NOT NULL DROP TABLE #Broker    SELECT      MULTI_FUND_ID,     STUFF((      SELECT         ', ' + ISNULL(COUNTERPARTY,'') + ': ' + ISNULL(CONVERT(VARCHAR(250),QUOTE_VALUE),'')       FROM #Brkr       WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)       ORDER BY ', ' + ISNULL(COUNTERPARTY,'') + ': ' + ISNULL(CONVERT(VARCHAR(250),QUOTE_VALUE),'')      FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS Broker_Quotes    INTO #Broker    FROM #Brkr Results    GROUP BY MULTI_FUND_ID        -- 1.b. Create a temp table with concatenated fund/s associated with the MFI    IF OBJECT_ID('tempdb..#Fund', 'U') IS NOT NULL DROP TABLE #Fund    SELECT DISTINCT        t.MULTI_FUND_ID,        ISNULL(t.PORTFOLIOS_PORTFOLIO_NAME,'') AS Fund,     INVNUM    INTO #Fund    FROM VISTA_REPORTING.dbo.TRADES t    WHERE t.MULTI_FUND_ID in (SELECT MULTI_FUND_ID from #trades_metadata)        IF OBJECT_ID('tempdb..#Funds', 'U') IS NOT NULL DROP TABLE #Funds    SELECT      MULTI_FUND_ID,     STUFF((      SELECT         ', ' + LTRIM(RTRIM(Fund))      FROM #Fund       WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)       ORDER BY ', ' + LTRIM(RTRIM(Fund))      FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS Funds,     STUFF((      SELECT         ', ' + CONCAT(LTRIM(RTRIM(Fund)), LTRIM(RTRIM(INVNUM)))      FROM #Fund       WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)       ORDER BY', ' + CONCAT(LTRIM(RTRIM(Fund)), LTRIM(RTRIM(INVNUM)))      FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS Fund_Investment_Number    INTO #Funds    FROM #Fund Results    GROUP BY MULTI_FUND_ID        IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table    SELECT DISTINCT     abs(convert(decimal(18,2), t5.[FACE])) as [ORD_AMT],     CASE       WHEN t.TRDCOMM_COMMENTS LIKE '%<SDI>%'       THEN REPLACE(RIGHT(lst_trd.TRDCOMM_COMMENTS,LEN(lst_trd.TRDCOMM_COMMENTS) -CHARINDEX('<SDI>',lst_trd.TRDCOMM_COMMENTS,1)+1),'<SDI>','')      ELSE t.TRDCOMM_COMMENTS     END AS [DEALER_COMMENT],     lst_cm.[COMMENTS_VALUE] as [GENERAL_COMMENT],     t.[ORD_NUM] as [Trader Order Number],     mf.[MULTI_FUND_ID] as MFID,     CASE     WHEN pr.DEALING_DESK='DMG'     THEN      CASE       WHEN pr.DEBT_DERIV = 'DEBT'        THEN        CASE         WHEN lst_trd.TRD_COUPON IS NOT NULL AND i2.TICKER IS NOT NULL AND i2.MATURITY IS NOT NULL         THEN CONCAT(ISNULL(i2.TICKER,''),' ', CAST(ISNULL(lst_trd.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))        ELSE CONCAT(ISNULL(tr.SEC_DESC1,''),' ', CAST(ISNULL(lst_trd.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))        END       ELSE pr.DESC_INSTMT      END     END AS [DESCRIPTION],     t3.[TRADER] as [DEALER],     CONVERT(DECIMAL(24,2),sum_oface.[SUM_TRD_ORIG_FACE]) as [BOOKED_AMT],     pr.[INST_TYPE],     lst_trd.[TRAN_TYPE] as [SIDE],     lst_trd.[SM_CURRENCY] as [CCY],     i2.[ISIN] as [ISIN],     t.[CUSIP],     i2.[SEDOL] as [SEDOL],     CONVERT(VARCHAR,CONVERT(DECIMAL(18,2),lst_trd.[TRD_PRICE])) as [PX],     CONVERT(DECIMAL(18,2),lst_trd.TRD_PRICING_SPREAD) as [SPREAD],     CASE     WHEN pr.DEALING_DESK='DMG'     THEN        CASE        WHEN pr.SM_SEC_GROUP = 'SWAP' AND pr.SM_SEC_TYPE IN ('SWAP','CSWAP') THEN CONVERT(DECIMAL(18,2),lst_trd.TRD_COUPON)       WHEN pr.DEBT_DERIV = 'DEBT' THEN CONVERT(DECIMAL(18,2),lst_trd.TRD_YIELD)      END     END AS [RATE],     lst_trd.[TRD_COUNTERPARTY] as CPTY,     t.[TRD_EX_BROKER_CODE] as [EX_CPTY],     ISNULL(pl.FULL_NAME_VENUE,'Manual') as [PLATFORM],     CASE     WHEN pr.DEALING_DESK = 'DMG'     THEN      CASE       WHEN pr.TWEB_CLOSE_DEALING = 1 THEN 'TWEB Close'       WHEN pr.[1615_DEALING] = 1 THEN '1615 Dealing'       WHEN lst_trd.ACTIVITY_TYPE = 'MG.FI 1. Proces' THEN 'VPT'      END     END AS [METHOD],     lst_trd.[TRD_TRADE_DATE] as [TRADE_DATE],     lst_trd.[EXECUTION_TIME] as [EXEC_DATE],     lst_trd.[TRD_AUTH_TIME] as [ENTRY_DATE],     lst_trd.[ACTIVITY_TYPE_DECODE] as [ACTIVITY],     fnd.[Fund_Investment_Number] as FUND_INVESTMENT_NUMBER,     mf.[VG_16_CREATETIME] as [CREATE_DATE],     '3 Firm Quotes' AS [BASELINE_PDP],     lst_trd.TRD_CURRENCY as [SETT_CCY],     (abs(convert(decimal(18,2), t5.[FACE])) - CONVERT(DECIMAL(24,2),sum_oface.[SUM_TRD_ORIG_FACE])) as [REMAIN_AMOUNT],     t.[MATURITY] as [MATURITY_DATE],     tr2.SETTLE_DATE as [SETTLEMENT_DATE],     mf.[VG_16] as [EXCEPTION_FLAG],     pmc.[PM_INST_concat] as [INSTRUCTION],     dc1.[VALUE] as [PURPOSE],     CONCAT(i2.SM_SEC_GROUP,'/',i2.SM_SEC_TYPE) as [Asset_Type/Subtype],     t.EXECUTION_TYPE_DECODE     --CASE      -- WHEN NULLIF(tr.[BROKER_CODE],'') is null THEN 'na'     -- WHEN pr.DEBT_DERIV = 'DEBT' AND tr.BROKER_CODE  = t.COUNTERPARTY_CODE THEN t.TRD_COUNTERPARTY     -- WHEN pr.DEBT_DERIV = 'DEBT' AND tr.BROKER_CODE != t.COUNTERPARTY_CODE THEN 'No'     --ELSE 'na'      --END AS [AXE],     --inv_desk.[Inv_Desk_Concat] as [INV_DESK],     --tr.[LIMIT_TYPE] as [LIMIT_TYPE],     --tr.[LIMIT_VALUE] as [LIMIT_VALUE],     --CONCAT(YEAR(tr.AUTH_TIME),'-',left(DATENAME(m,tr.AUTH_TIME),3)) as MONTH_YEAR,     --i2.SM_SEC_GROUP,     --lst_trd.TRD_PURPOSE,     --mf.[QUOTES_OBTAINED] as QUOTES,     --brkr.[Broker_Quotes] as [COMP_QUOTE],     --mf.[QUOTES_REQUESTED] as REQUESTS,    --t.[B3Q_RATIONALE]    --mf.[DEALING_DESK],    --t.[TRD_YIELD],    --t.[INDICATIVE_COMMENTS],    --t.[NWQ_RATIONALE],    --sum_oface.[SUM_NET_CONSIDERATION_GBP] as NET_CONSIDERATION_GBP,    --CONVERT(DECIMAL(18,2),sum_oface.SUM_TRD_PRINCIPAL_GBP) as [NOMIAL],    --pr.[INTERFUND_TRANSFER],    --pr.[PRIMARY_MARKET],    --t3.[TRADER_FULL_NAME],    --lst_trd.[TRD_ENTRY_TIME] as [TRD_ENTRY_TIME],    --pct_nav.[NAV_PCT_concat] as [PCT_OF_NAV],    --pct_nav.[NAV_CUT_concat] as [NAV_CUT_OFF],    --null as [LIST_ID],    --null as [LIST_NAME],    --null as [TYPE],    --CASE     -- WHEN pr.INST_TYPE = 'GOVBIL' and pr.PRIMARY_MARKET = 1    --  THEN 'Government bills - Primary'    --    WHEN pr.INST_TYPE in ('GOV', 'IGOV', 'SSA', 'GOVBIL') and pr.PRIMARY_MARKET = 1    --        THEN 'Government & SSA bonds - Primary'    --    WHEN pr.INST_TYPE in ('IG CORP', 'HY CORP', 'NR CORP', 'COV', 'CORP') and pr.PRIMARY_MARKET = 1    --        THEN 'Corporates & Covered - Primary'    --    WHEN pr.INST_TYPE in ('EM GOV', 'EM GOVBIL', 'EM CORP') and pr.PRIMARY_MARKET = 1    --        THEN 'EM - Primary'    --    WHEN pr.INST_TYPE in ('RMBS', 'CMBS', 'CDO', 'ABS', 'MBS', ' ARM') and pr.PRIMARY_MARKET = 1    --        THEN 'Securitised - Primary'    --    WHEN pr.INST_TYPE = 'GOVBIL'    --        THEN 'Government bills - Secondary'    --    WHEN pr.INST_TYPE in ('GOV', 'IGOV',  'GOVBIL')    --        THEN 'Government bonds - Secondary'    -- WHEN pr.INST_TYPE in ('EM GOV', 'EM GOVBIL', 'EM CORP')    --        THEN 'EM - Secondary'    --    WHEN pr.INST_TYPE in ('RMBS', 'CMBS', 'CDO', 'ABS', 'MBS', ' ARM')    --        THEN 'Securitised - Secondary'    --    WHEN pr.INST_TYPE = 'SSA'    --        THEN 'SSA bonds - Secondary'    --    WHEN pr.INST_TYPE ='HY Corp' and pr.TRD_CURRENCY IN ('EUR','GBP')    --        THEN 'European HY Corporates - Secondary'    --    WHEN (pr.INST_TYPE ='HY Corp' and t.TRD_CURRENCY not in ('EUR','GBP','USD'))    --            or (pr.INST_TYPE in ('IG CORP', 'NR CORP') and t.TRD_CURRENCY in ('EUR','GBP'))    --            or (pr.ORDER_INST_TYPE = 'CORP' and t.TRD_CURRENCY != 'USD')    --        THEN 'European IG Corporates & Other - Secondary'    -- WHEN (pr.INST_TYPE in ('HY CORP', 'IG CORP', 'NR CORP','CORP') OR pr.ORDER_INST_TYPE = 'CORP') and t.TRD_CURRENCY = 'USD'    --        THEN 'USD Corporates - Secondary'    --    WHEN pr.INST_TYPE in ('COV')     --        THEN 'Covered Bonds - Secondary'    --    WHEN pr.INST_TYPE = 'PFD'    --        THEN 'Pref. Shares - Secondary'    --    WHEN pr.INST_TYPE = 'SCDS' and pr.TRD_CURRENCY = 'EUR'    --        THEN 'SCDS EUR'    --    WHEN pr.INST_TYPE = 'SCDS' and pr.TRD_CURRENCY = 'USD'    --        THEN 'SCDS USD'    -- WHEN pr.INST_TYPE = 'ICDS' and pr.ICDS_DETAIL = 'ITRAXX EUROPE MAIN'    --        THEN 'iTraxx Europe'    --    WHEN pr.INST_TYPE = 'ICDS' and pr.ICDS_DETAIL = 'ITRAXX EUROPE CROSSOVER'    --        THEN 'iTraxx Crossover'    --    WHEN pr.INST_TYPE = 'ICDS' and pr.ICDS_DETAIL = 'CDX NA IG'    --        THEN 'CDX NA IG'    --    WHEN pr.INST_TYPE = 'ICDS' and pr.ICDS_DETAIL = 'CDX NA HY'    --        THEN 'CDX NA HY'    --    WHEN pr.INST_TYPE in ('ICDS', 'SCDS')    --        THEN 'CDS Other'    --    WHEN pr.INST_TYPE in ('IRFUT') and ISNULL(pr.TRD_PURPOSE,'') <> 'MG004'    --        THEN 'Interest Rate Futures'    --    WHEN pr.INST_TYPE in ('BNDFUT') and ISNULL(pr.TRD_PURPOSE,'') <> 'MG004'    --        THEN 'Bond Futures'    --    WHEN pr.INST_TYPE in ('OPTFUT') and ISNULL(pr.TRD_PURPOSE,'') <> 'MG004'    --        THEN 'Option Futures'    --    WHEN pr.INST_TYPE in ('ETD') and ISNULL(pr.TRD_PURPOSE,'') <> 'MG004'    --        THEN 'ETD Not Rollover'    --    WHEN pr.INST_TYPE in ('IRFUT','BNDFUT','OPTFUT','ETD') and pr.TRD_PURPOSE = 'MG004'    --        THEN 'ETD Rollover'    --    WHEN pr.INST_TYPE in ('IRS','BASIS','ZCS','SWAP')    --        THEN 'IRS'    --    WHEN pr.INST_TYPE = 'IFS'    --        THEN 'IFS'    --    WHEN pr.INST_TYPE = 'ASWP'    --        THEN 'ASWP'    --    WHEN pr.INST_TYPE in ('CCS','CASWP')    --        THEN 'Cross Currency'    --END AS [DMC_ASSET_TYPE],    --CASE     -- WHEN cast(tr2.EXECUTION_TIME as time) < convert(time,CUTOFF)     -- THEN    --  CASE     --   WHEN cast(tr2.TRD_AUTH_TIME as time) > convert(time,CUTOFF) THEN 'Y'    --  ELSE 'N'     --  END    --ELSE 'N'     --END AS [NAV_IMPACT_ELIGIBLE],    --CASE    -- WHEN pr.DEALING_DESK = 'DMG' THEN    --  CASE     --   WHEN  lst_trd.TRD_TRADE_DATE <> CONVERT(DATE, lst_trd.TRD_AUTH_TIME) THEN 'Across days'    --   WHEN DATEDIFF(minute, lst_trd.EXECUTION_TIME, lst_trd.TRD_AUTH_TIME) < 60 THEN ''    --  ELSE CONVERT(VARCHAR(5),DATEDIFF(minute, lst_trd.EXECUTION_TIME, lst_trd.TRD_AUTH_TIME) - 60) + ' mins'    --  END    --END AS [TIME_LATE_BY]        INTO #temp_final_master_table    FROM (SELECT DISTINCT *       FROM VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE) mf    INNER join (SELECT DISTINCT        MULTI_FUND_ID,       TRD_PRICING_SPREAD,       EXECUTION_TIME,       CLIENT_EXECUTION_NUM,       INDICATIVE_COMMENTS,       PLACEMENT_NUM,       B3Q_RATIONALE,       NWQ_RATIONALE,       TRD_YIELD,       FinalFlag,       COUNTERPARTY_CODE,       CUSIP,       TRD_COUNTERPARTY,       TRDCOMM_COMMENTS,       NET_CONSIDERATION_GBP,       EXECUTION_TYPE_DECODE,       PORTFOLIOS_PORTFOLIO_NAME,       ORD_NUM,       TRD_AUTH_TIME,       TRD_CURRENCY,       TRD_EX_DESK_TYPE,       TRD_EX_BROKER_CODE,       MATURITY       FROM #trades_metadata) as t     on t.[MULTI_FUND_ID] = mf.[MULTI_FUND_ID]    left join #trd_orders_metadata tr     on tr.[ORD_NUM]=t.[ORD_NUM] AND mf.[DEALING_DESK]=tr.[DEALING_DESK]     left join #Broker brkr on brkr.MULTI_FUND_ID = mf.MULTI_FUND_ID    left join #Funds fnd on fnd.MULTI_FUND_ID = mf.MULTI_FUND_ID    outer apply (SELECT TOP 1         i.*         FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=coalesce(t.CUSIP, tr.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(t.EXECUTION_TIME, tr.AUTH_TIME)))           ORDER BY i.DATE DESC) as i2    left join (SELECT DISTINCT        MULTI_FUND_ID,       SUM_TRD_ORIG_FACE,       SUM_TRD_PRINCIPAL_GBP,       SUM_NET_CONSIDERATION_GBP          FROM #temp_t) sum_oface     on sum_oface.[MULTI_FUND_ID]=t.[MULTI_FUND_ID]    left join (SELECT DISTINCT        VENUE,        ROUTE_DATETIME,        PLACEMENT_NUM,       FULL_NAME_VENUE          FROM VISTA_REPORTING.dbo.PLACEMENTS) pl     on pl.[PLACEMENT_NUM]=t.[PLACEMENT_NUM]    left join (SELECT DISTINCT        MULTI_FUND_ID,        INST_TYPE,        TRD_CURRENCY,        DEALING_DESK,        PRIMARY_MARKET,        [Parent_trade_ID],        ORDER_INST_TYPE,        ICDS_DETAIL,        TRD_PURPOSE,       TWEB_CLOSE_DEALING,       INTERFUND_TRANSFER,       LINKED_MULTI_FUND,       [1615_DEALING],       DEBT_DERIV,       SM_SEC_GROUP,       DESC_INSTMT,       SM_SEC_TYPE,       TRAN_TYPE         FROM #prim_metadata) pr     on pr.[MULTI_FUND_ID]=t.[MULTI_FUND_ID] AND pr.[DEALING_DESK] = mf.[DEALING_DESK]    left join (SELECT DISTINCT        MULTI_FUND_ID,       TRADER_FULL_NAME,       TRADER          FROM #min_touch) as t3     on t3.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]    left join (SELECT DISTINCT        ORD_NUM,       FACE          FROM #max_touch) as t5     on t5.ORD_NUM = t.ORD_NUM    left join (SELECT DISTINCT        MULTI_FUND_ID,       TRD_COUPON,       TRAN_TYPE,       SM_CURRENCY,       TRD_PRICE,       TRD_PRICING_SPREAD,       TRD_YIELD,       TRD_COUNTERPARTY,       ACTIVITY_TYPE,       TRD_TRADE_DATE,       TRD_AUTH_TIME,       EXECUTION_TIME,       TRD_PURPOSE,       TRDCOMM_COMMENTS,       ACTIVITY_TYPE_DECODE,       TRD_ENTRY_TIME,       TRD_CURRENCY         FROM #Latest_TRD_TRADE_DATE) lst_trd     on t.[MULTI_FUND_ID] = lst_trd.[MULTI_FUND_ID]    left join (SELECT DISTINCT        Inv_Desk_Concat,       MULTI_FUND_ID          FROM #Inv_desk_concat) inv_desk     on t.[MULTI_FUND_ID] = inv_desk.[MULTI_FUND_ID]    left join (SELECT DISTINCT        TAG_NAME,       [VALUE],       CODE          FROM VISTA_REPORTING.dbo.DECODES) dc1     on dc1.TAG_NAME = 'TrdPurpose' AND dc1.CODE=lst_trd.TRD_PURPOSE    left join (SELECT DISTINCT        COMMENTS_VALUE,       ORD_NUM          FROM #Latest_Comment) lst_cm     on t.[ORD_NUM] = lst_cm.[ORD_NUM]    left join (SELECT DISTINCT        client_fund,       CUTOFF          FROM VISTA_STAGING.dbo.NAV_CUT_OFFS) nv     on nv.[CLIENT_FUND] = t.[PORTFOLIOS_PORTFOLIO_NAME]    left join #pct_nav_concat pct_nav     on pct_nav.[MULTI_FUND_ID] = mf.[MULTI_FUND_ID]    left join (         SELECT DISTINCT        tr.ORD_NUM,       tr.MULTI_FUND_ID,       tr.TRD_CURRENCY,       tr.EXECUTION_TIME,       tr.TRD_AUTH_TIME,       tr.TRD_TRADE_DATE,       T2.SETTLE_DATE         FROM VISTA_REPORTING.dbo.TRADES as tr         inner join (SELECT           MULTI_FUND_ID,           MAX(TOUCH_COUNT) as MAX_TOUCH,          MAX(TRD_SETTLE_DATE) as SETTLE_DATE            FROM VISTA_REPORTING.dbo.TRADES            GROUP BY MULTI_FUND_ID) as t2          on (tr.MULTI_FUND_ID=t2.MULTI_FUND_ID) and (tr.TOUCH_COUNT=t2.MAX_TOUCH)        ) as tr2     on tr2.[MULTI_FUND_ID] = mf.[MULTI_FUND_ID]    outer apply (SELECT TOP 1         nav.*         FROM VISTA_REPORTING.dbo.NAV         WHERE nav.PORTFOLIO_NAME = t.PORTFOLIOS_PORTFOLIO_NAME AND nav.NAV_PORT_DATE <= CONVERT(DATE, t.TRD_AUTH_TIME)         ORDER BY nav.NAV_PORT_DATE DESC) nav1    outer apply (SELECT TOP 1         e.*         FROM VISTA_REPORTING.dbo.FX_RATES e         WHERE e.CURRENCY = t.TRD_CURRENCY and CONVERT(date, e.MARKDATE) <= CONVERT(date, t.EXECUTION_TIME)        ORDER BY e.MARKDATE DESC) e    left join (SELECT DISTINCT                           PM_INST_concat,                          MULTI_FUND_ID                      FROM #PM_INST_concat) pmc     on pmc.[MULTI_FUND_ID] = mf.[MULTI_FUND_ID]            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE', 'U') IS NOT NULL     delete from VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE    where MFID in (SELECT DISTINCT MULTI_FUND_ID from #trades_metadata)        IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE    SELECT *    FROM #temp_final_master_table        ELSE        SELECT *    INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE    FROM #temp_final_master_table        IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(    'MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE', --TABLE_NAME    @START_TIME, --START_TIME    GETDATE(), --END_TIME    DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS    CAST(GETDATE() as date)) --COMPLETION_DATE            IF OBJECT_ID('tempdb..#trades_metadata', 'U') IS NOT NULL DROP TABLE #trades_metadata    IF OBJECT_ID('tempdb..#trd_orders_metadata', 'U') IS NOT NULL DROP TABLE #trd_orders_metadata    IF OBJECT_ID('tempdb..#prim_metadata', 'U') IS NOT NULL DROP TABLE #prim_metadata    IF OBJECT_ID('tempdb..#Latest_TRD_TRADE_DATE', 'U') IS NOT NULL DROP TABLE #Latest_TRD_TRADE_DATE    IF OBJECT_ID('tempdb..#MFID_inv_Desk', 'U') IS NOT NULL DROP TABLE #MFID_inv_Desk    IF OBJECT_ID('tempdb..#Inv_desk_concat', 'U') IS NOT NULL DROP TABLE #Inv_desk_concat    IF OBJECT_ID('tempdb..#Latest_Comment', 'U') IS NOT NULL DROP TABLE #Latest_Comment    IF OBJECT_ID('tempdb..#min_touch', 'U') IS NOT NULL DROP TABLE #min_touch    IF OBJECT_ID('tempdb..#max_touch', 'U') IS NOT NULL DROP TABLE #max_touch            END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_MFID_TABLE_VG_16_GIFTS_AND_HOSPITALITY_FX  CreateDate: 2025-06-26 17:53:59.207  ModifyDate: 2025-07-01 11:19:06.157  --- DEFINITION START ---  -- =============================================      -- Author:  <Samad, Mehreen>      -- Create date: <10/07/2019>      -- Description:       -- <Master exception table for Gifts & Hospitality      -- Exception test for FX.>      -- =============================================            -- ***************VERSION CONTROL***************            -- *********************************************            CREATE   PROCEDURE [dbo].[MASTER_MFID_TABLE_VG_16_GIFTS_AND_HOSPITALITY_FX]       -- Add the parameters for the stored procedure here       --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,             AS      BEGIN       -- SET NOCOUNT ON added to prevent extra result sets from       -- interfering with SELECT statements.       SET NOCOUNT ON;                    DECLARE @START_TIME as datetime       SET @START_TIME = GETDATE()                   IF OBJECT_ID('tempdb..#distinct_ids_al', 'U') IS NOT NULL DROP TABLE #distinct_ids_al       SELECT DISTINCT         pr.ORD_NUM as TRD_ORD,        oc.PM_ORD AS ORD_NUM,        pr.MULTI_FUND_ID       INTO #distinct_ids_al       FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr       LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = pr.ORD_NUM       WHERE pr.DEALING_DESK = 'FX'                   IF OBJECT_ID('tempdb..#distinct_ids_fx', 'U') IS NOT NULL DROP TABLE #distinct_ids_fx       SELECT DISTINCT        fxt.ORDER_ID,        fxo.ORD_NUM,        vg.TRADE_ID AS MULTI_FUND_ID        INTO #distinct_ids_fx       FROM Vista_Staging.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE vg       LEFT JOIN Vista_Reporting.dbo.FX_TRADES fxt ON fxt.TRADE_ID = vg.TRADE_ID       LEFT JOIN Vista_Reporting.dbo.FX_ORDERS fxo ON fxo.FXM_ORDER_ID = fxt.ORDER_ID                     IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE', 'U') IS NOT NULL       DELETE FROM #distinct_ids_fx where NOT EXISTS (SELECT DISTINCT od.TRADE_ID                    FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_FX od                    WHERE od.TRADE_ID = #distinct_ids_fx.MULTI_FUND_ID)                   IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE', 'U') IS NOT NULL       DELETE FROM #distinct_ids_al where NOT EXISTS (SELECT DISTINCT od.MULTI_FUND_ID                    FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                    WHERE od.MULTI_FUND_ID = #distinct_ids_al.MULTI_FUND_ID)                   IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE  #distinct_ids       SELECT *        INTO #distinct_ids       FROM #distinct_ids_al             UNION ALL             SELECT *        FROM #distinct_ids_fx                   IF OBJECT_ID('tempdb..#max_touch_t', 'U') IS NOT NULL DROP TABLE #max_touch_t       SELECT DISTINCT         t.MULTI_FUND_ID,         MAX(t.TOUCH_COUNT) as MAX_TOUCH        INTO #max_touch_t       FROM VISTA_REPORTING.dbo.TRADES t       WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)       GROUP BY MULTI_FUND_ID                   IF OBJECT_ID('tempdb..#losing_bank_trades', 'U') IS NOT NULL DROP TABLE #losing_bank_trades       SELECT DISTINCT         ex.TRADE_ID,        CONVERT(VARCHAR(20), FXB.LOSING_BANK) AS LOSING_BANK,         CONVERT(VARCHAR(20), FXB.PROFIT_OR_LOSS) AS PROFIT_OR_LOSS,         CONVERT(VARCHAR(20), FXB.ALL_IN_RATE) AS ALL_IN_RATE,         CONVERT(VARCHAR(20), FXB.SWAP_POINTS) AS SWAP_POINTS,        FXT.EXECUTED_BANK       INTO #losing_bank_trades       FROM VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE ex       LEFT JOIN VISTA_REPORTING.dbo.FX_LOSING_BANKS FXB ON ex.TRADE_ID = FXB.TRADE_ID       LEFT JOIN VISTA_REPORTING.dbo.FX_TRADES FXT on FXB.TRADE_ID = FXT.TRADE_ID       WHERE FXB.TRADE_ID = ex.TRADE_ID           AND FXB.LOSING_BANK != FXT.EXECUTED_BANK           AND ex.[DATA_SOURCE] = 'FX'          AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)                   IF OBJECT_ID('tempdb..#mapped_bank_best_ex', 'U') IS NOT NULL DROP TABLE #mapped_bank_best_ex       SELECT DISTINCT        ex.TRADE_ID,        CONVERT(VARCHAR(20),FXB.BANK_NAME) AS BANK_NAME       INTO #mapped_bank_best_ex       FROM VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE ex       INNER JOIN VISTA_REPORTING.dbo.FX_MAPPED_BANKS fxb ON fxb.TRADE_ID=ex.TRADE_ID       WHERE ex.DATA_SOURCE = 'FX'          AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)                   --Losing Bank temp       IF OBJECT_ID('tempdb..#losingbanktemp', 'U') IS NOT NULL DROP TABLE #losingbanktemp        SELECT DISTINCT        ex.TRADE_ID,        STUFF((          SELECT ', ' + LOSING_BANK         FROM #losing_bank_trades fxb         WHERE fxb.TRADE_ID = ex.TRADE_ID          ORDER BY LOSING_BANK         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS LOSING_BANK,        STUFF((          SELECT ', ' + PROFIT_OR_LOSS         FROM #losing_bank_trades fxb         WHERE fxb.TRADE_ID = ex.TRADE_ID         ORDER BY PROFIT_OR_LOSS          FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS PROFIT_OR_LOSS,         STUFF((          SELECT ', ' + ALL_IN_RATE         FROM #losing_bank_trades fxb         WHERE fxb.TRADE_ID = ex.TRADE_ID          ORDER BY ALL_IN_RATE         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS ALL_IN_RATE,         STUFF((          SELECT ', ' + SWAP_POINTS         FROM #losing_bank_trades fxb         WHERE fxb.TRADE_ID = ex.TRADE_ID          ORDER BY SWAP_POINTS         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS SWAP_POINTS,         STUFF((          SELECT ', ' + FXB.BANK_NAME         FROM #mapped_bank_best_ex fxb         WHERE fxb.TRADE_ID = ex.TRADE_ID          ORDER BY BANK_NAME         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS MAPPED_BANKS       INTO #losingbanktemp       FROM VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE ex       WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)                   --Losing Bank count for FX       IF OBJECT_ID('tempdb..#losingbankcount', 'U') IS NOT NULL DROP TABLE #losingbankcount       SELECT DISTINCT        ex.[TRADE_ID],        COUNT(DISTINCT ex.[LOSING_BANK]) as LOSING_BANK_COUNT       INTO #losingbankcount       FROM #losing_bank_trades ex       GROUP BY ex.[TRADE_ID]                   IF OBJECT_ID('tempdb..#trades_orders', 'U') IS NOT NULL DROP TABLE #trades_orders       SELECT DISTINCT         fxt.TRADE_ID,         CONVERT(VARCHAR(50), fxo.TRADE_VENUE) AS TRADE_VENUE,        CONVERT(VARCHAR(50), fxt.MARKET_ARRIVAL_DATE_TIME) AS MARKET_ARRIVAL_DATE_TIME       INTO #trades_orders       FROM VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE ex       LEFT JOIN VISTA_REPORTING.dbo.FX_TRADES fxt on fxt.TRADE_ID = ex.TRADE_ID       LEFT JOIN VISTA_REPORTING.dbo.FX_ORDERS fxo ON fxo.[FXM_ORDER_ID] = fxt.[ORDER_ID]       WHERE fxt.[TRADE_ID] = ex.[TRADE_ID]           AND ex.[DATA_SOURCE] = 'FX'          AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)                   --FX Concatonated fields       IF OBJECT_ID('tempdb..#conc_fx', 'U') IS NOT NULL DROP TABLE #conc_fx        SELECT DISTINCT        ex.[TRADE_ID],        STUFF((            SELECT ' | ' + tro.TRADE_VENUE           FROM #trades_orders tro           WHERE tro.TRADE_ID=ex.TRADE_ID           ORDER BY tro.TRADE_VENUE           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS TRADE_VENUE,        STUFF((            SELECT ' | ' + tro.MARKET_ARRIVAL_DATE_TIME           FROM #trades_orders tro           WHERE tro.TRADE_ID=ex.TRADE_ID           ORDER BY tro.MARKET_ARRIVAL_DATE_TIME           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS MARKET_ARRIVAL_DATE_TIME       INTO #conc_fx       FROM VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE ex       WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)                   IF OBJECT_ID('tempdb..#AL_trades_orders', 'U') IS NOT NULL DROP TABLE #AL_trades_orders       SELECT DISTINCT        ex.TRADE_ID,        t.TRD_COUNTERPARTY,        q.QUOTE_VALUE,        pl.BROKER       INTO #AL_trades_orders      FROM VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE ex       left join VISTA_REPORTING.dbo.TRADES t on ex.[TRADE_ID] = t.[MULTI_FUND_ID]       left join VISTA_REPORTING.dbo.QUOTES q on q.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]       left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on t.[ORD_NUM] = oc.[TRD_ORD]       left join VISTA_REPORTING.dbo.PM_ORDERS pm on oc.[PM_ORD] = pm.[ORD_NUM]       left join (SELECT DISTINCT ORD_NUM, [BROKER] FROM VISTA_REPORTING.dbo.PLACEMENTS) pl on pm.[ORD_NUM] = pl.[ORD_NUM]       WHERE ex.[DATA_SOURCE] = 'AL'           AND t.[MULTI_FUND_ID] = ex.[TRADE_ID]           AND q.[QUOTE_ORIGIN] = 'QUOTE'           AND pl.[BROKER] != q.[BROKER]          AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)                   --Losing Bank count for AL       IF OBJECT_ID('tempdb..#losingbankcount_al', 'U') IS NOT NULL DROP TABLE #losingbankcount_al       SELECT DISTINCT        [TRADE_ID],        COUNT(DISTINCT [BROKER]) as LOSING_BANK_COUNT       INTO #losingbankcount_al       FROM #AL_trades_orders        GROUP BY [TRADE_ID]                   --Losing Bank for AL       IF OBJECT_ID('tempdb..#losingquotetemp_al', 'U') IS NOT NULL DROP TABLE #losingquotetemp_al        SELECT DISTINCT        ex.[TRADE_ID],        TRD_COUNTERPARTY = STUFF((            SELECT ', ' + TRD_COUNTERPARTY           FROM (SELECT DISTINCT TRADE_ID , TRD_COUNTERPARTY  FROM #AL_trades_orders) ato           WHERE ato.TRADE_ID = ex.TRADE_ID           ORDER BY ato.TRD_COUNTERPARTY           FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''),        QUOTE_VALUE = STUFF((            SELECT ', ' + CAST(CONVERT(DECIMAL(38,8),ato.[QUOTE_VALUE]) AS varchar(50)) as QUOTE_VALUE           FROM (SELECT DISTINCT TRADE_ID , [QUOTE_VALUE]  FROM #AL_trades_orders) ato           WHERE ato.TRADE_ID = ex.TRADE_ID           ORDER BY CAST(CONVERT(DECIMAL(38,8),ato.[QUOTE_VALUE]) AS varchar(50))           FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '')       INTO #losingquotetemp_al       FROM VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE ex       WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)                   --Static Bank count for AL       IF OBJECT_ID('tempdb..#staticbankcount_al', 'U') IS NOT NULL DROP TABLE #staticbankcount_al       SELECT DISTINCT        ex.[TRADE_ID],        COUNT(DISTINCT pl.[BROKER]) as BROKER_COUNT       INTO #staticbankcount_al       FROM VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE ex       left join VISTA_REPORTING.dbo.TRADES t on ex.[TRADE_ID] = t.[MULTI_FUND_ID]       left join VISTA_REPORTING.dbo.QUOTES q on q.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]       left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on t.[ORD_NUM] = oc.[TRD_ORD]       left join VISTA_REPORTING.dbo.PM_ORDERS pm on oc.[PM_ORD] = pm.[ORD_NUM]       left join (SELECT DISTINCT ORD_NUM, [BROKER] FROM VISTA_REPORTING.dbo.PLACEMENTS) pl on pm.[ORD_NUM] = pl.[ORD_NUM]       WHERE t.[MULTI_FUND_ID] = ex.[TRADE_ID]           AND q.[QUOTE_ORIGIN] = 'QUOTE'           AND ex.[DATA_SOURCE] = 'AL'          AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)        GROUP BY ex.[TRADE_ID]                   --Static Banks for AL       IF OBJECT_ID('tempdb..#staticbanktemp_al', 'U') IS NOT NULL DROP TABLE #staticbanktemp_al        SELECT DISTINCT        ex.[TRADE_ID],        TRD_COUNTERPARTY = STUFF((            SELECT ', ' + t.TRD_COUNTERPARTY           FROM VISTA_REPORTING.dbo.TRADES t           left join VISTA_REPORTING.dbo.QUOTES q on q.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]           left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on t.[ORD_NUM] = oc.[TRD_ORD]           left join VISTA_REPORTING.dbo.PM_ORDERS pm on oc.[PM_ORD] = pm.[ORD_NUM]           left join (SELECT DISTINCT ORD_NUM, [BROKER] FROM VISTA_REPORTING.dbo.PLACEMENTS) pl on pm.[ORD_NUM] = pl.[ORD_NUM]           WHERE t.[MULTI_FUND_ID] = ex.[TRADE_ID] and q.[QUOTE_ORIGIN] = 'QUOTE' AND pm.DEALING_DESK = 'FX'           FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '')     INTO #staticbanktemp_al       FROM VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE ex       WHERE ex.[DATA_SOURCE] = 'AL'          AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)                   IF OBJECT_ID('tempdb..#trader_name', 'U') IS NOT NULL DROP TABLE #trader_name       SELECT DISTINCT        fxt.TRADE_ID,        coalesce(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) AS ACCEPTED_DEALER       INTO #trader_name       FROM Vista_Reporting.dbo.FX_TRADES fxt       left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd on CAST(fxt.[PULL_DATE] AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)       left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd on tdd.[MG_USER_ID] = fxt.[DEALT_BY] AND CAST(fxt.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)       left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2 on tdd.[MG_USER_ID] = fxt.[ACCEPTED_BY] AND CAST(fxt.[PULL_DATE] AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)       WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = fxt.TRADE_ID)                   --Create Master table        IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table       SELECT DISTINCT        fxo.[FXM_ORDER_ID] as ORDER_ID,        CASE         WHEN fxo.[ORD_NUM] IS NULL THEN ex.[FXM_ORDER_ID]        ELSE fxo.[ORD_NUM]        END AS PM_ORDER_ID,        fxo.[ALADDIN_COMMON_ID] as ALADDIN_COMMON_IDENTIFIER,        ex.[TRADE_ID] as TRANSACTION_NUMBER,        fxo.[INSTRUCTION_RECEIVED_DATE_TIME] as ORDER_RECEIVED_DATE_TIME,        cc_fx.[MARKET_ARRIVAL_DATE_TIME],        fxt.[EXECUTED_DATE_TIME],        DATEDIFF(MINUTE,fxt.[MARKET_ARRIVAL_DATE_TIME],fxt.[EXECUTED_DATE_TIME]) as TIME_ELAPSED_BETWEEN_MARKET_ARRIVAL_AND_EXECUTED_DATE_TIME_MINS,        fxt.[EXECUTED_BANK],        --COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME], dd.[DEFAULT_DEALER]) as TRADER_NAME,        tn.ACCEPTED_DEALER AS TRADER_NAME,        fxo.[CLIENT_FUND],        fxo.[BASE_FUND],        fxo.[BUSINESS_GROUP],        (CAST(fxt.[EXECUTED_RATE] as varchar(50)) + ' | ' + CAST(fxt.[EXECUTED_RATE_FAR] as varchar(50))) as [ALL_IN_RATE],        (CAST(fxt.[SPOT_RATE] as varchar(50)) + ' | ' + CAST(fxt.[SPOT_RATE_FAR] as varchar(50))) as [SPOT_RATE],        (CAST(fxt.[FORWARD_POINTS] as varchar(50)) + ' | ' + CAST(fxt.[FORWARD_POINTS_FAR] as varchar(50))) as [FORWARD_POINTS],        fxt.[SWAP_POINTS],        (CAST(fxt.[MARKET_ARRIVAL_INDICATIVE_ALL_IN_NEAR_RATE] as varchar(50)) + ' | ' + CAST(fxt.[MARKET_ARRIVAL_INDICATIVE_ALL_IN_FAR_RATE] as varchar(50))) as [INDICATIVE_ALL_IN_PRICE_MARKET_ARRIVAL],        (CAST(fxt.[MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE] as varchar(50)) + ' | ' + CAST(fxt.[MARKET_ARRIVAL_INDICATIVE_SPOT_FAR_PRICE] as varchar(50))) as [INDICATIVE_SPOT_PRICE_MARKET_ARRIVAL],        (CAST(fxt.[MARKET_ARRIVAL_INDICATIVE_FORWARD_NEAR_POINTS] as varchar(50)) + ' | ' + CAST(fxt.[MARKET_ARRIVAL_INDICATIVE_FORWARD_FAR_POINTS] as varchar(50))) as [INDICATIVE_FORWARD_POINTS_MARKET_ARRIVAL],        fxt.[MARKET_ARRIVAL_INDICATIVE_PRICE_DATE_TIME],        spot_ref.[SPOT_TOLERANCE_THRESHOLD] as SPOT_THRESHOLD,        fxt.[SPOT_TOLERANCE_REASON] as OUT_OF_TOLERANCE_EXCEPTION_REASON,        fxt.[SPOT_TOLERANCE_REASON_NARRATION] as OUT_OF_TOLERANCE_EXCEPTION_REASON_NARRATION,        fxo.[CREATED_FROM] as ORDER_SOURCE,        fxt.[THREE_BANK_QUOTES_EXCEPTION_REASON] as NUMBER_OF_QUOTES_EXCEPTION_REASON,        fxt.[THREE_BANK_QUOTES_EXCEPTION_REASON_NARRATION] as NUMBER_OF_QUOTES_EXCEPTION_REASON_NARRATION,        lbc.[LOSING_BANK_COUNT] as LOSING_BANKS_COUNT,        lbt.[LOSING_BANK] as LOSING_BANKS,        lbt.[PROFIT_OR_LOSS] as LOSING_BANKS_PROFIT_OR_LOSS,        lbt.[ALL_IN_RATE] as LOSING_BANKS_ALL_IN_RATE,        lbt.[SWAP_POINTS] as LOSING_BANKS_SWAP_POINTS,        fxt.[MAPPED_BANK_COUNT] as STATIC_BANKS_COUNT,        lbt.[MAPPED_BANKS] as STATIC_BANKS,        fxt.[PRICE_REASON] as NWQ_REASON,        fxt.[PRICE_REASON_NARRATION] as NWQ_REASON_NARRATION,        fxt.[PROFIT_OR_LOSS],        fxo.[FM_COMMENTS],        fxo.[TRADE_PURPOSE],        fxo.[MARKER],        fxt.[TRADE_DATE],        fxo.[INSTRUCTION_STATUS],        fxo.[INSTRUCTION_TYPE],        case when NULLIF(fxo.action2,'') is null then fxo.action1 else (fxo.[ACTION1]  + ISNULL(' | ' + NULLIF(fxo.[ACTION2],''),'')) end as [ACTION],         case when fxo.[NOTIONAL_CCY_FAR] is null then fxo.[NOTIONAL_CCY] else (fxo.[NOTIONAL_CCY] + ' | ' + ISNULL( fxo.[NOTIONAL_CCY_FAR],'')) end as [INSTRUCTED_CURRENCY],        case when fxo.[BUY_CCY_LEG2] is null then fxo.[BUY_CCY] else (fxo.[BUY_CCY]  + ' | ' + ISNULL( fxo.[BUY_CCY_LEG2],'')) end as [BUY_CURRENCY],        case when fxo.[SELL_CCY_LEG2] is null then fxo.[SELL_CCY] else (fxo.[SELL_CCY]  + ' | ' + ISNULL( fxo.[SELL_CCY_LEG2],'')) end as [SELL_CURRENCY],        case when fxo.[NOTIONAL_AMOUNT_FAR] is null then CAST(FORMAT(convert(decimal(38,2),fxo.[NOTIONAL_AMOUNT]),  '#,0.00')  as varchar(50)) else (CAST(FORMAT(convert(decimal(38,2),fxo.[NOTIONAL_AMOUNT]),  '#,0.00')  as varchar(50)) + ' | ' + ISNULL( CAST(FORMAT(convert(decimal(38,2),fxo.[NOTIONAL_AMOUNT_FAR]),  '#,0.00')  as varchar(50)),'')) end as [INSTRUCTED_AMOUNT],        case when fxo.[VALUE_DATE_FAR] is null then CAST(fxo.[VALUE_DATE_NEAR] as varchar(50)) else (CAST(fxo.[VALUE_DATE_NEAR] as varchar(50)) + ' | ' + ISNULL( CAST(fxo.[VALUE_DATE_FAR] as varchar(50)),'')) end as [VALUE_DATE],        case when fxo.[FR_LEG_PRODUCT] is null then fxo.[NR_LEG_PRODUCT] else (fxo.[NR_LEG_PRODUCT] + ' | ' + ISNULL( fxo.[FR_LEG_PRODUCT],'')) end as PRODUCT,        case when fxt.[EXECUTED_AMOUNT_FAR] is null then CAST(fxt.[EXECUTED_AMOUNT] as varchar(50)) else (CAST(fxt.[EXECUTED_AMOUNT] as varchar(50)) + ' | ' + ISNULL( CAST(fxt.[EXECUTED_AMOUNT_FAR] as varchar(50)),'')) end as [EXECUTED_AMOUNT],        fxo.[SWAP_TYPE],        fxo.[NET_EXPOSURE_ORDER] as NET_EXPOSURE,        case when fxt.[FIXING_DATE_LEG2] is null then CAST(fxt.[FIXING_DATE] as varchar(50)) else (CAST(fxt.[FIXING_DATE] as varchar(50)) + ' | ' + ISNULL( CAST(fxt.[FIXING_DATE_LEG2] as varchar(50)),'')) end as [FIXING_DATE],        cc_fx.[TRADE_VENUE] as PLACEMENT_VENUE,        fxt.[EXC_SESSION_ID] as SESSION_ID,        fxt.[EXC_SESSION_TYPE] as SESSION_TYPE,        fxt.[ORDER_STRATEGY] as NETTING_STRATEGY_USED,        ex.[VG_16_CREATETIME] as CREATE_DATE,        ex.[VG_16] as EXCEPTION_FLAG,        ex.[DATA_SOURCE]       INTO #temp_final_master_table       FROM VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE ex       left join VISTA_REPORTING.dbo.FX_TRADES fxt on fxt.[TRADE_ID] = ex.[TRADE_ID]       left join VISTA_REPORTING.dbo.FX_ORDERS fxo on fxt.[ORDER_ID] = fxo.[FXM_ORDER_ID]       left join #trader_name tn ON tn.TRADE_ID = fxt.TRADE_ID       --left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd on tdd.[MG_USER_ID] = fxt.[DEALT_BY] AND CAST(fxt.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)       --left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2 on tdd.[MG_USER_ID] = fxt.[ACCEPTED_BY] AND CAST(fxt.[PULL_DATE] AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)       --left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd on CAST(fxt.[PULL_DATE] AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)       left join VISTA_STAGING.dbo.REF_FX_SPOT_TOLERANCE_THRESHOLD spot_ref on spot_ref.[BASE_CCY] = fxt.[BUY_CCY] and spot_ref.[CONTRA_CCY] = fxt.[SELL_CCY] AND CAST(fxt.[PULL_DATE] AS DATE) BETWEEN CAST(spot_ref.[DATE_FROM] AS DATE) AND CAST(spot_ref.[DATE_TO] AS DATE)       left join #losingbanktemp lbt on lbt.[TRADE_ID] = ex.[TRADE_ID]       left join #losingbankcount lbc on lbc.[TRADE_ID] = ex.[TRADE_ID]       left join #conc_fx cc_fx on ex.[TRADE_ID] = cc_fx.[TRADE_ID]        WHERE ex.[DATA_SOURCE] = 'FX' AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)             UNION             SELECT DISTINCT        pm.[ORD_NUM] as [ORDER_ID],        pm.[ORD_NUM] as PM_ORDER_ID,        r.[REQUEST_ID] as [ALADDIN_COMMON_IDENTIFIER],        ex.[TRADE_ID] as TRANSACTION_NUMBER,        pm.[AUTH_TIME] as [ORDER_RECEIVED_DATE_TIME],        CAST(t.[EXECUTION_TIME] as varchar(50)) as [MARKET_ARRIVAL_DATE_TIME], --Same as executed, so DateDiff will always be 0???        t.[EXECUTION_TIME] as [EXECUTED_DATE_TIME],        DATEDIFF(MINUTE,t.[EXECUTION_TIME],t.[EXECUTION_TIME]) as TIME_ELAPSED_BETWEEN_MARKET_ARRIVAL_AND_EXECUTED_DATE_TIME_MINS,        pl.[BROKER] as [EXECUTED_BANK],        COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) as [TRADER_NAME],        NULL as [CLIENT_FUND],        t.[PORTFOLIOS_PORTFOLIO_NAME] as [BASE_FUND],         CASE         WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP'         WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG'         WHEN (pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM'        ELSE NULL        END AS [BUSINESS_GROUP], --Guessing the logic is same as DMG?        CAST(COALESCE(pl.[AVG_PRICE],t.[FX_PRICE]) as varchar(50)) as [ALL_IN_RATE],        NULL as [SPOT_RATE], -- Given as Trades.FX_PRICE_SPOT        NULL as [FORWARD_POINTS],        NULL as [SWAP_POINTS],        NULL as [INDICATIVE_ALL_IN_PRICE_MARKET_ARRIVAL],        NULL as [INDICATIVE_SPOT_PRICE_MARKET_ARRIVAL],        NULL as [INDICATIVE_FORWARD_POINTS_MARKET_ARRIVAL],        NULL as [MARKET_ARRIVAL_INDICATIVE_PRICE_DATE_TIME],        NULL as [SPOT_THRESHOLD],        NULL as [OUT_OF_TOLERANCE_EXCEPTION_REASON],        NULL as [OUT_OF_TOLERANCE_EXCEPTION_REASON_NARRATION],        'Aladdin' as [ORDER_SOURCE], --N/A given as mapping field, using this as assumption (?)        t.[B3Q_RATIONALE] as [NUMBER_OF_QUOTES_EXCEPTION_REASON],        NULL as [NUMBER_OF_QUOTES_EXCEPTION_REASON_NARRATION],        lb_al.[LOSING_BANK_COUNT] as [LOSING_BANKS_COUNT], --need to do this        lq_al.[TRD_COUNTERPARTY] as LOSING_BANKS,        NULL as LOSING_BANKS_PROFIT_OR_LOSS,         NULL as LOSING_BANKS_ALL_IN_RATE, -- Given as Trades.TRDQUOTES_set        NULL as LOSING_BANKS_SWAP_POINTS,        sbc_al.[BROKER_COUNT] as STATIC_BANKS_COUNT,         sb_al.[TRD_COUNTERPARTY] as STATIC_BANKS,        t.[NWQ_RATIONALE] as [NWQ_REASON],        NULL as [NWQ_REASON_NARRATION],        NULL as [PROFIT_OR_LOSS],        pm.[COMMENTS_VALUE] as [FM_COMMENTS],        t.[TRD_PURPOSE] as [TRADE_PURPOSE],        NULL as [MARKER],        pm.[OPEN_DATE] as [TRADE_DATE],        pl.[STATUS] as [INSTRUCTION_STATUS],        pm.[SM_SEC_TYPE] as [INSTRUCTION_TYPE],        NULL as [ACTION],        CAST(t.[FX_PAY_CURR] as varchar(50)) as [INSTRUCTED_CURRENCY],        NULL as [BUY_CURRENCY],        NULL as [SELL_CURRENCY],        CAST(pl.[QUANTITY] as varchar(50)) as [INSTRUCTED_AMOUNT],        (CONVERT(VARCHAR(50),pm.[SETTLE_DATE]) + ' | ' + ISNULL( CONVERT(VARCHAR(50),pm.[MATURITY]),'')) as [VALUE_DATE],        NULL as [PRODUCT],        CAST(pm.[FILL_AMT] as varchar(50)) as [EXECUTED_AMOUNT],        NULL as [SWAP_TYPE],        NULL as [NET_EXPOSURE],        NULL as [FIXING_DATE], --Given as Trades.SECURITY.SMARTCUT.FXNDF_ANNOUNCE_DATE        pl.[VENUE] as [PLACEMENT_VENUE],        NULL as [SESSION_ID],        NULL as [SESSION_TYPE],        NULL as [NETTING_STRATEGY_USED],        ex.[VG_16_CREATETIME] as [CREATE_DATE],        ex.[VG_16] as [EXCEPTION_FLAG],        ex.[DATA_SOURCE]       FROM VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE ex       left join VISTA_REPORTING.dbo.TRADES t on ex.[TRADE_ID] = t.[MULTI_FUND_ID]       inner join #max_touch_t mtt on t.[MULTI_FUND_ID] = mtt.MULTI_FUND_ID and t.[TOUCH_COUNT] = mtt.[MAX_TOUCH]       left join #losingquotetemp_al lq_al on ex.[TRADE_ID] = lq_al.[TRADE_ID]       left join #losingbankcount_al lb_al on ex.[TRADE_ID] = lb_al.[TRADE_ID]       left join #staticbankcount_al sbc_al on ex.[TRADE_ID] = sbc_al.[TRADE_ID]        left join #staticbanktemp_al sb_al on ex.[TRADE_ID] = sb_al.[TRADE_ID]        left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on t.[ORD_NUM] = oc.[TRD_ORD]       left join VISTA_REPORTING.dbo.PM_ORDERS pm on oc.[PM_ORD] = pm.[ORD_NUM]       left join (SELECT DISTINCT FUND_ID, PORTFOLIO_GROUP_NAME FROM VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY) pgt on t.[FUND] = pgt.[FUND_ID]       left join (SELECT DISTINCT ORD_NUM, PLACEMENT_NUM, [STATUS], QUANTITY, [BROKER], AVG_PRICE, VENUE FROM VISTA_REPORTING.dbo.PLACEMENTS) pl on pm.[ORD_NUM] = pl.[ORD_NUM]       left join (SELECT PLACEMENT_NUM, REQUEST_ID FROM VISTA_STAGING.dbo.REQUEST_LOOKUP) r on pl.[PLACEMENT_NUM] = r.[PLACEMENT_NUM]       left join VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd on tdd.[INITIALS]  = t.[TRD_TRADER] AND CAST(t.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)       left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2 on tdd.[INITIALS] = pm.[TRADER] AND CAST(pm.[PULL_DATE] AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)       left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd on CAST(COALESCE(t.[PULL_DATE],pm.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)       WHERE ex.[DATA_SOURCE] = 'AL' AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)                    IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE', 'U') IS NOT NULL       DELETE FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE       WHERE TRANSACTION_NUMBER IN (SELECT DISTINCT MULTI_FUND_ID FROM #distinct_ids)                   IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE', 'U') IS NOT NULL       INSERT INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE       SELECT *       FROM #temp_final_master_table             ELSE             SELECT *       INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE       FROM #temp_final_master_table                   IF OBJECT_ID('tempdb..#max_touch_t', 'U') IS NOT NULL DROP TABLE #max_touch_t       IF OBJECT_ID('tempdb..#losing_bank_trades', 'U') IS NOT NULL DROP TABLE #losing_bank_trades       IF OBJECT_ID('tempdb..#mapped_bank_best_ex', 'U') IS NOT NULL DROP TABLE #mapped_bank_best_ex       IF OBJECT_ID('tempdb..#losingbanktemp', 'U') IS NOT NULL DROP TABLE #losingbanktemp        IF OBJECT_ID('tempdb..#losingbankcount', 'U') IS NOT NULL DROP TABLE #losingbankcount       IF OBJECT_ID('tempdb..#trades_orders', 'U') IS NOT NULL DROP TABLE #trades_orders       IF OBJECT_ID('tempdb..#conc_fx', 'U') IS NOT NULL DROP TABLE #conc_fx        IF OBJECT_ID('tempdb..#AL_trades_orders', 'U') IS NOT NULL DROP TABLE #AL_trades_orders       IF OBJECT_ID('tempdb..#losingbankcount_al', 'U') IS NOT NULL DROP TABLE #losingbankcount_al       IF OBJECT_ID('tempdb..#losingquotetemp_al', 'U') IS NOT NULL DROP TABLE #losingquotetemp_al        IF OBJECT_ID('tempdb..#staticbankcount_al', 'U') IS NOT NULL DROP TABLE #staticbankcount_al       IF OBJECT_ID('tempdb..#staticbanktemp_al', 'U') IS NOT NULL DROP TABLE #staticbanktemp_al        IF OBJECT_ID('tempdb..#trader_name', 'U') IS NOT NULL DROP TABLE #trader_name       IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table       IF OBJECT_ID('tempdb..#distinct_ids_al', 'U') IS NOT NULL DROP TABLE #distinct_ids_al       IF OBJECT_ID('tempdb..#distinct_ids_fx', 'U') IS NOT NULL DROP TABLE #distinct_ids_fx       IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE  #distinct_ids                   IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                    WHERE name = N'mmf_vg16_fx_idx1')             DROP INDEX mmf_vg16_fx_idx1        ON VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE              CREATE NONCLUSTERED INDEX mmf_vg16_fx_idx1       ON VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE        (TRANSACTION_NUMBER)                   IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                    WHERE name = N'mmf_vg16_fx_idx2')             DROP INDEX mmf_vg16_fx_idx2        ON VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE              CREATE NONCLUSTERED INDEX mmf_vg16_fx_idx2       ON VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE        (EXECUTED_DATE_TIME)                   IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                    WHERE name = N'mmf_vg16_fx_idx3')             DROP INDEX mmf_vg16_fx_idx3        ON VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE              CREATE NONCLUSTERED INDEX mmf_vg16_fx_idx3       ON VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE        (TRADER_NAME)                    IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                    WHERE name = N'mmf_vg16_fx_idx4')             DROP INDEX mmf_vg16_fx_idx4        ON VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE              CREATE NONCLUSTERED INDEX mmf_vg16_fx_idx4       ON VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE        (CREATE_DATE)                   IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                    WHERE name = N'mmf_vg16_fx_idx5')             DROP INDEX mmf_vg16_fx_idx5        ON VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE              CREATE NONCLUSTERED INDEX mmf_vg16_fx_idx5       ON VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE        (TRADE_DATE)                   IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                    WHERE name = N'mmf_vg16_fx_idx6')             DROP INDEX mmf_vg16_fx_idx6        ON VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE              CREATE NONCLUSTERED INDEX mmf_vg16_fx_idx6       ON VISTA_REPORTING.dbo.MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE        (EXCEPTION_FLAG)                    IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL       INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(       'MASTER_MFID_VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE', --TABLE_NAME       @START_TIME, --START_TIME       GETDATE(), --END_TIME       DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS       CAST(GETDATE() as date)) --COMPLETION_DATE                  END            --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_MFID_TABLE_VG_25_INTERFUND_TRANSFER_DMG  CreateDate: 2025-06-26 17:54:14.737  ModifyDate: 2025-06-26 17:54:14.737  --- DEFINITION START ---  -- =============================================    -- Author:  <Samad, Mehreen>    -- Create date: <18/04/2019>    -- Description:     -- <Master exception table for INTERFUND TRANSFER    -- for DMG.>    -- =============================================        -- ***************VERSION CONTROL***************    -- 2019-05-14 - MS: Added in TRD_EX_BROKER_CODE    -- 2019-05-14 - DDC: Added PM_ORDER as the 'ORDER' field    -- *********************************************        CREATE PROCEDURE [dbo].[MASTER_MFID_TABLE_VG_25_INTERFUND_TRANSFER_DMG]     -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,         AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         --Used to track total time stored procedure took to run     DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()         IF OBJECT_ID('tempdb..#trades_metadata', 'U') IS NOT NULL DROP TABLE #trades_metadata     SELECT DISTINCT      t.MULTI_FUND_ID,      t.TRD_COUNTERPARTY,      t.CLIENT_EXECUTION_NUM,      t.COMMENTS,      t.INDICATIVE_COMMENTS,      t.EXECUTION_TIME,      t.ORD_NUM,      t.CUSIP,      t.PLACEMENT_NUM,      t.TRD_AUTH_TIME,      t.B3Q_RATIONALE,      t.NWQ_RATIONALE,      t.TRAN_TYPE,      t.TRD_CURRENCY,      t.TRD_PRICE,      t.TRD_PRICING_SPREAD,      t.TRD_COUPON,      t.TRD_ORIG_FACE,      t.TRD_YIELD,      t.TRD_ENTRY_TIME,      t.TRD_TRADE_DATE,      t.ACTIVITY_TYPE,      t.ACTIVITY_TYPE_DECODE,      t.TRDCOMM_COMMENTS,      t.EXECUTION_TYPE_DECODE,      t.NET_CONSIDERATION_GBP,      t.COUNTERPARTY_CODE,      t.PORTFOLIOS_PORTFOLIO_NAME,      t.SM_CURRENCY,      t.TRD_PURPOSE,      t.TRD_EX_DESK_TYPE,      t.CONTRACT_SIZE,      t.FinalFlag,      t.TRD_EX_BROKER_CODE,      t.MATURITY,      t.TOUCH_COUNT,      t.TRD_TRADER,      t.TRD_PRINCIPAL_GBP,      t.INVNUM,      t.TRD_SETTLE_DATE     into #trades_metadata     FROM VISTA_REPORTING.dbo.TRADES t     INNER JOIN VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_DMG_TABLE vg ON vg.MULTI_FUND_ID = t.MULTI_FUND_ID     WHERE FinalFlag = 1          --If the master table doesn't exist then we want to use all the data available, otherwise just the most recent data     IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_25_INTERFUND_TRANSFER_DMG_TABLE', 'U') IS NOT NULL     DELETE FROM #trades_metadata where NOT EXISTS (SELECT od.MULTI_FUND_ID                    FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                   WHERE od.MULTI_FUND_ID = #trades_metadata.MULTI_FUND_ID)         IF OBJECT_ID('tempdb..#oc_metadata', 'U') IS NOT NULL DROP TABLE #oc_metadata     SELECT TRD_ORD,         PM_ORD     INTO #oc_metadata     FROM Vista_Reporting.dbo.ORDERS_CROSS     where TRD_ORD in (SELECT DISTINCT ORD_NUM from #trades_metadata)         IF OBJECT_ID('tempdb..#pm_orders_metadata', 'U') IS NOT NULL DROP TABLE #pm_orders_metadata     SELECT PM,      ORD_NUM,      UPDATE_INSTR      INTO #pm_orders_metadata     FROM Vista_Reporting.dbo.PM_ORDERS     where ORD_NUM in (SELECT DISTINCT PM_ORD from #oc_metadata)         IF OBJECT_ID('tempdb..#trd_orders_metadata', 'U') IS NOT NULL DROP TABLE #trd_orders_metadata     SELECT DISTINCT      tr.ORD_NUM,      tr.ACTIVE_TIME,      tr.AUTH_TIME,      tr.PM_FULL_NAME,      tr.BROKER_CODE,      tr.SEC_DESC1,      tr.ORDER_REASON,      tr.ORD_GROUP,      tr.DEALING_DESK,      tr.CUSIP,      tr.TRADER,      tr.LIMIT_TYPE,      tr.LIMIT_VALUE,      tr.COMMENTS_VALUE,      tr.TOUCH_COUNT,      tr.TRADER_FULL_NAME,      tr.FACE     INTO #trd_orders_metadata     FROM VISTA_REPORTING.dbo.TRD_ORDERS tr     WHERE ORD_NUM in (SELECT DISTINCT ORD_NUM FROM #trades_metadata)         IF OBJECT_ID('tempdb..#prim_metadata', 'U') IS NOT NULL DROP TABLE #prim_metadata     SELECT DISTINCT      pr.DEBT_DERIV      ,pr.DESC_INSTMT      ,pr.INST_TYPE      ,pr.ORDER_INST_TYPE      ,pr.SM_SEC_TYPE      ,pr.SM_SEC_GROUP      ,pr.TRD_CURRENCY      ,pr.TRAN_TYPE      ,pr.TWEB_CLOSE_DEALING      ,pr.[1615_DEALING]      ,pr.PRIMARY_MARKET      ,pr.INTERFUND_TRANSFER      ,pr.LINKED_MULTI_FUND      ,pr.MULTI_FUND_ID      ,pr.DEALING_DESK      ,pr.ICDS_DETAIL      ,pr.TRD_PURPOSE      ,pr.[Parent_trade_ID]     INTO #prim_metadata     FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr     WHERE MULTI_FUND_ID in (SELECT DISTINCT MULTI_FUND_ID FROM #trades_metadata)         IF OBJECT_ID('tempdb..#PM_comments', 'U') IS NOT NULL DROP TABLE #PM_comments     SELECT DISTINCT      dc.VALUE,      t.MULTI_FUND_ID     INTO #PM_comments     FROM #trades_metadata t     left join #oc_metadata oc      on t.ORD_NUM = oc.TRD_ORD     left join (SELECT DISTINCT          PM,         ORD_NUM,         UPDATE_INSTR           FROM #pm_orders_metadata) pm      on oc.PM_ORD = pm.ORD_NUM     LEFT JOIN (SELECT DISTINCT          VALUE,         TAG_NAME,         CODE           FROM VISTA_REPORTING.dbo.DECODES) dc      on dc.TAG_NAME = 'PM_INSTRUCTION' AND dc.CODE=pm.UPDATE_INSTR     WHERE pm.PM IS NOT NULL          IF OBJECT_ID('tempdb..#PM_INST_concat', 'U') IS NOT NULL DROP TABLE #PM_INST_concat     SELECT       MULTI_FUND_ID,      STUFF((      SELECT DISTINCT ', ' + LTRIM(RTRIM(VALUE))      FROM #PM_comments       WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)       Order by ', ' + LTRIM(RTRIM(VALUE))      FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS PM_INST_concat     INTO #PM_INST_concat     FROM #PM_comments Results     GROUP BY MULTI_FUND_ID         IF OBJECT_ID('tempdb..#PM', 'U') IS NOT NULL DROP TABLE #PM     SELECT DISTINCT      pm.PM,      t.MULTI_FUND_ID     INTO #PM     FROM #trades_metadata t     LEFT JOIN #oc_metadata oc on t.ORD_NUM = oc.TRD_ORD     LEFT JOIN #pm_orders_metadata pm on oc.PM_ORD = pm.ORD_NUM     WHERE pm.PM <> 'MERGED' -- MERGED is not a PM so we don't need to include        AND pm.PM IS NOT NULL -- This filter should not be necessary if the business follows the proper process, but is done to safeguard against trades in Aladdin with no associated PM order.          IF OBJECT_ID('tempdb..#PMs_concat', 'U') IS NOT NULL DROP TABLE #PMs_concat     SELECT       MULTI_FUND_ID,      STUFF((       SELECT DISTINCT ', ' + LTRIM(RTRIM(PM))       FROM #PM        WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)        ORDER BY  ', ' + LTRIM(RTRIM(PM))       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')       ,1,2,'') AS PMs_concat     INTO #PMs_concat     FROM #PM Results     GROUP BY MULTI_FUND_ID         --Concatenate PCT_OF_NAV wih FUND and NAV_CUT_OFF with FUND by MFID     IF OBJECT_ID('tempdb..#PCT_NAV', 'U') IS NOT NULL DROP TABLE #PCT_NAV     SELECT DISTINCT      t.MULTI_FUND_ID,      t.CLIENT_EXECUTION_NUM,      CONCAT(t.PORTFOLIOS_PORTFOLIO_NAME,': ', CASE                 WHEN nav.nav_value_gbp != 0                  THEN ABS(CONVERT(DECIMAL(30,2),100.0*(t.NET_CONSIDERATION_GBP)/nav.nav_value_gbp))                  ELSE NULL                  END) AS PCT_NAV_CONCAT,      CONCAT(t.PORTFOLIOS_PORTFOLIO_NAME, ': ', nc.CUTOFF) AS CUTOFF     INTO #PCT_NAV     FROM #trades_metadata t     outer apply (SELECT TOP 1          nav.*          FROM VISTA_REPORTING.dbo.NAV          WHERE nav.PORTFOLIO_NAME = t.PORTFOLIOS_PORTFOLIO_NAME AND nav.NAV_PORT_DATE <= CONVERT(DATE, t.TRD_AUTH_TIME)          ORDER BY nav.NAV_PORT_DATE DESC) nav     left join VISTA_STAGING.dbo.NAV_CUT_OFFS nc      on nc.CLIENT_FUND=t.PORTFOLIOS_PORTFOLIO_NAME             IF OBJECT_ID('tempdb..#pct_nav_concat', 'U') IS NOT NULL DROP TABLE #pct_nav_concat     SELECT       MULTI_FUND_ID,      STUFF((       SELECT DISTINCT ' | ' + PCT_NAV_CONCAT       FROM #PCT_NAV        WHERE (MULTI_FUND_ID = pc_nav.MULTI_FUND_ID)       ORDER BY ' | ' + PCT_NAV_CONCAT       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')       ,1,2,'') AS NAV_PCT_concat,      STUFF((       SELECT DISTINCT ' | ' + CUTOFF       FROM #PCT_NAV        WHERE (MULTI_FUND_ID = pc_nav.MULTI_FUND_ID)        ORDER BY ' | ' + CUTOFF       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')       ,1,2,'') AS NAV_CUT_concat,      STUFF((       SELECT DISTINCT ' | ' + CLIENT_EXECUTION_NUM       FROM #PCT_NAV        WHERE (MULTI_FUND_ID = pc_nav.MULTI_FUND_ID)        ORDER BY ' | ' + CLIENT_EXECUTION_NUM       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')       ,1,2,'') AS CL_EX_concat     INTO #pct_nav_concat     FROM #PCT_NAV pc_nav     GROUP BY MULTI_FUND_ID             --2. Get latest TRD_TRADE_DATE associated with a trade     IF OBJECT_ID('tempdb..#Latest_TRD_TRADE_DATE', 'U') IS NOT NULL DROP TABLE #Latest_TRD_TRADE_DATE     SELECT DISTINCT      MULTI_FUND_ID,      TRD_TRADE_DATE,      EXECUTION_TIME,      TRD_PURPOSE,      TRD_AUTH_TIME,      TRAN_TYPE,      SM_CURRENCY,      TRD_PRICE,      TRD_PRICING_SPREAD,      TRD_YIELD,      TRD_COUNTERPARTY,      TRD_COUPON,      TRD_ENTRY_TIME,      TRDCOMM_COMMENTS,      ACTIVITY_TYPE,      ACTIVITY_TYPE_DECODE,      TRD_CURRENCY     INTO #Latest_TRD_TRADE_DATE     FROM #trades_metadata     WHERE FinalFlag = 1         --3. Get Investment desks associated with all funds on a trade     IF OBJECT_ID('tempdb..#MFID_inv_Desk', 'U') IS NOT NULL DROP TABLE #MFID_inv_Desk     SELECT DISTINCT       t.MULTI_FUND_ID,       p.ancestor     INTO #MFID_inv_Desk     FROM #trades_metadata t     left join VISTA_STAGING.dbo.PORTFOLIO_GROUP_CLOSURE_TABLE p on t.PORTFOLIOS_PORTFOLIO_NAME = p.descendant     --Not necessary for DMG     --WHERE p.ancestor IN ('MG_ATCRED','MG_RET_FI','MG_INSTI',     --      'MG_INTER','MG_RESTCT','MG_IN_CAP',     --      'MG_LEVFIN','MG_MIB','MG_REDEBT') -- This is the list of investment desks provided in the business requirements documents             IF OBJECT_ID('tempdb..#Inv_desk_concat', 'U') IS NOT NULL DROP TABLE #Inv_desk_concat     SELECT       MULTI_FUND_ID,      STUFF((      SELECT DISTINCT ', ' + LTRIM(RTRIM(ancestor))      FROM #MFID_inv_Desk       WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)       ORDER BY ', ' + LTRIM(RTRIM(ancestor))      FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS Inv_Desk_Concat     INTO #Inv_desk_concat     FROM #MFID_inv_Desk Results     GROUP BY MULTI_FUND_ID         --4. Get latest comments value associated with a trade     IF OBJECT_ID('tempdb..#Latest_Comment', 'U') IS NOT NULL DROP TABLE #Latest_Comment     SELECT DISTINCT      o.ORD_NUM,      o.COMMENTS_VALUE     INTO #Latest_Comment     FROM #trd_orders_metadata o     inner join (SELECT         ORD_NUM,         MAX(TOUCH_COUNT) AS MAX_TOUCH        FROM VISTA_REPORTING.dbo.ORDERS        GROUP BY ORD_NUM) o2 on o.ORD_NUM = o2.ORD_NUM AND o.TOUCH_COUNT = o2.MAX_TOUCH     WHERE NULLIF(o.COMMENTS_VALUE,'') is not null             IF OBJECT_ID('tempdb..#min_touch', 'U') IS NOT NULL DROP TABLE #min_touch     SELECT      t1.MULTI_FUND_ID,      t1.TRD_TRADER AS TRADER,      D.FULL_NAME as TRADER_FULL_NAME     INTO #min_touch     FROM Vista_Reporting.dbo.TRADES as t1     join (SELECT       t1.MULTI_FUND_ID,       MIN(t1.TOUCH_COUNT) as MIN_TOUCH       FROM Vista_Reporting.dbo.trades as t1       GROUP BY t1.MULTI_FUND_ID) as t2 on t1.MULTI_FUND_ID=t2.MULTI_FUND_ID and t1.TOUCH_COUNT=t2.MIN_TOUCH     left join VISTA_REPORTING.DBO.DEALER_AND_DESK D on D.INITIALS = t1.TRD_TRADER     where t1.MULTI_FUND_ID in (SELECT DISTINCT MULTI_FUND_ID from #trades_metadata)         IF OBJECT_ID('tempdb..#max_touch', 'U') IS NOT NULL DROP TABLE #max_touch     SELECT      t1.ORD_NUM,      t1.TRADER,      t1.TRADER_FULL_NAME,      t1.FACE     INTO #max_touch     FROM #trd_orders_metadata as t1     join (SELECT       t1.ORD_NUM,       MAX(t1.TOUCH_COUNT) as MAX_TOUCH       FROM #trd_orders_metadata as t1       join #trd_orders_metadata as t2        on t1.ORD_NUM=t2.ORD_NUM       GROUP BY t1.ORD_NUM) as t2 on t1.ORD_NUM=t2.ORD_NUM and t1.TOUCH_COUNT=t2.MAX_TOUCH         IF OBJECT_ID('tempdb..#temp_t', 'U') IS NOT NULL DROP TABLE #temp_t     SELECT       MULTI_FUND_ID,       SUM(ABS(t.TRD_ORIG_FACE)) AS SUM_TRD_ORIG_FACE,      --SUM(ABS(TRD_PRINCIPAL)) AS SUM_TRD_PRINCIPAL,      SUM(ABS(t.TRD_PRINCIPAL_GBP)) AS SUM_TRD_PRINCIPAL_GBP,      SUM(ABS(t.NET_CONSIDERATION_GBP)) AS SUM_NET_CONSIDERATION_GBP     INTO #temp_t      FROM #trades_metadata t     WHERE FinalFlag=1     GROUP BY MULTI_FUND_ID             --1.d. Create a temp table containing the counterparty and value for each quote associated with the MFI (except for the actual counterparty)     IF OBJECT_ID('tempdb..#Brkr', 'U') IS NOT NULL DROP TABLE #Brkr     SELECT DISTINCT      qt.MULTI_FUND_ID,      CONVERT(DECIMAL(21,3),qt.QUOTE_VALUE) AS QUOTE_VALUE,       ISNULL(brk.TRD_COUNTERPARTY,'') AS COUNTERPARTY     INTO #Brkr     FROM VISTA_REPORTING.dbo.QUOTES qt     LEFT JOIN VISTA_REPORTING.dbo.COUNTERPARTIES brk ON qt.BROKER = brk.COUNTERPARTY_CODE     WHERE NULLIF(qt.QUOTE_VALUE,0) IS NOT NULL      AND qt.MULTI_FUND_ID IN (SELECT DISTINCT MULTI_FUND_ID FROM #trades_metadata)     --AND qt.QUOTE_ORIGIN <> 'TRADE'             IF OBJECT_ID('tempdb..#Broker', 'U') IS NOT NULL DROP TABLE #Broker     SELECT       MULTI_FUND_ID,      STUFF((       SELECT          ', ' + ISNULL(COUNTERPARTY,'') + ': ' + ISNULL(CONVERT(VARCHAR(250),QUOTE_VALUE),'')        FROM #Brkr        WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)        ORDER BY ', ' + ISNULL(COUNTERPARTY,'') + ': ' + ISNULL(CONVERT(VARCHAR(250),QUOTE_VALUE),'')        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')         ,1,2,'') AS Broker_Quotes     INTO #Broker     FROM #Brkr Results     GROUP BY MULTI_FUND_ID         -- 1.b. Create a temp table with concatenated fund/s associated with the MFI     IF OBJECT_ID('tempdb..#Fund', 'U') IS NOT NULL DROP TABLE #Fund         SELECT DISTINCT      trd.MULTI_FUND_ID,      ISNULL(trd.PORTFOLIOS_PORTFOLIO_NAME,'') AS Fund,      INVNUM     INTO #Fund     FROM #trades_metadata trd         IF OBJECT_ID('tempdb..#Funds', 'U') IS NOT NULL DROP TABLE #Funds     SELECT       MULTI_FUND_ID,      STUFF((       SELECT          ', ' + LTRIM(RTRIM(Fund))       FROM #Fund        WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)        ORDER BY ', ' + LTRIM(RTRIM(Fund))       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')         ,1,2,'') AS Funds,      STUFF((       SELECT          ', ' + CONCAT(LTRIM(RTRIM(Fund)), LTRIM(RTRIM(INVNUM)))       FROM #Fund        WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)        ORDER BY ', ' + CONCAT(LTRIM(RTRIM(Fund)), LTRIM(RTRIM(INVNUM)))       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')         ,1,2,'') AS Fund_Investment_Number     INTO #Funds     FROM #Fund Results     GROUP BY MULTI_FUND_ID             --Obtain Quotes Requested and Quotes Obtained     IF OBJECT_ID('tempdb..#quotes_calc', 'U') IS NOT NULL DROP TABLE #quotes_calc     SELECT DISTINCT       q.[MULTI_FUND_ID],      (SELECT        COUNT(DISTINCT [BROKER])        FROM VISTA_REPORTING.dbo.QUOTES       WHERE (ISNULL(QUOTE_VALUE, 0) != 0           OR QUOTE_ORIGIN = 'TRADE')         AND MULTI_FUND_ID = q.[MULTI_FUND_ID]) as QUOTES_OBTAINED, --Count distinct BROKER where QUOTE_VALUE is NOT NULL or 0      COUNT(DISTINCT [BROKER]) as QUOTES_REQUESTED --A quote is required for every MULTI_FUND_ID     INTO #quotes_calc     FROM VISTA_REPORTING.dbo.QUOTES q     WHERE q.MULTI_FUND_ID in (SELECT DISTINCT MULTI_FUND_ID FROM #trades_metadata)     GROUP BY q.[MULTI_FUND_ID]     ORDER BY QUOTES_OBTAINED         IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     SELECT DISTINCT      lst_cm.[COMMENTS_VALUE] as [GENERAL_COMMENT],      CASE        WHEN t.TRDCOMM_COMMENTS LIKE '%<SDI>%'        THEN REPLACE(RIGHT(lst_trd.TRDCOMM_COMMENTS,LEN(lst_trd.TRDCOMM_COMMENTS) -CHARINDEX('<SDI>',lst_trd.TRDCOMM_COMMENTS,1)+1),'<SDI>','')       ELSE t.TRDCOMM_COMMENTS      END AS [DEALER_COMMENT],      mf.[MULTI_FUND_ID] as [MFID],      dc1.[VALUE] as [PURPOSE],      pm.[PMs_concat] as [PM],       oc.PM_ORD AS [ORDER],      --t.[ORD_NUM] as TRD_ORDER,      lst_trd.[SM_CURRENCY] as [CCY],      lst_trd.[TRD_CURRENCY] as [SETT_CCY],      i2.[ISIN] as [ISIN],      t.[CUSIP],      CASE       WHEN pr.DEALING_DESK='DMG'       THEN        CASE         WHEN pr.DEBT_DERIV = 'DEBT'          THEN          CASE           WHEN lst_trd.TRD_COUPON IS NOT NULL AND i2.TICKER IS NOT NULL AND i2.MATURITY IS NOT NULL           THEN CONCAT(ISNULL(i2.TICKER,''),' ', CAST(ISNULL(lst_trd.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))          ELSE CONCAT(ISNULL(tr.SEC_DESC1,''),' ', CAST(ISNULL(lst_trd.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))          END         ELSE pr.DESC_INSTMT        END      END AS [DESCRIPTION],      t3.[TRADER] as [DEALER],      t5.[FACE] as [ORD_AMT],      CONVERT(DECIMAL(24,2),sum_oface.[SUM_TRD_ORIG_FACE]) as [BOOKED_AMT],      pr.[INST_TYPE],      lst_trd.[TRAN_TYPE] as [SIDE],      CONVERT(VARCHAR,CONVERT(DECIMAL(18,2),lst_trd.[TRD_PRICE])) as [PX],      CONVERT(DECIMAL(18,2),lst_trd.[TRD_PRICING_SPREAD]) as [SPREAD],      CASE       WHEN pr.DEALING_DESK='DMG'       THEN          CASE          WHEN pr.SM_SEC_GROUP = 'SWAP' AND pr.SM_SEC_TYPE IN ('SWAP','CSWAP') THEN CONVERT(DECIMAL(18,2),lst_trd.TRD_COUPON)         WHEN pr.DEBT_DERIV = 'DEBT' THEN CONVERT(DECIMAL(18,2),lst_trd.TRD_YIELD)        END      END AS [RATE],      ISNULL(pl.FULL_NAME_VENUE,'Manual') as [PLATFORM],      CASE       WHEN pr.DEALING_DESK = 'DMG'       THEN        CASE         WHEN pr.TWEB_CLOSE_DEALING = 1 THEN 'TWEB Close'         WHEN pr.[1615_DEALING] = 1 THEN '1615 Dealing'         WHEN lst_trd.ACTIVITY_TYPE = 'MG.FI 1. Proces' THEN 'VPT'        END      END AS [METHOD],      lst_trd.[TRD_TRADE_DATE] as [TRADE_DATE],      lst_trd.[EXECUTION_TIME] as [EXEC_DATE],      lst_trd.[TRD_AUTH_TIME] as [ENTRY_DATE],      q_c.[QUOTES_OBTAINED] as [QUOTES],      brkr.[Broker_Quotes] as [COMP_QUOTES],      q_c.[QUOTES_REQUESTED] as [REQUESTS],      t.[TRD_EX_BROKER_CODE] as [EX_CPTY],      lst_trd.[ACTIVITY_TYPE_DECODE] as [ACTIVITY],      fnd.[Funds] as [FUND],      inv_desk.[Inv_Desk_Concat] as [INV_DESK],      pr.[LINKED_MULTI_FUND] as [LINKED_TRADES],      t.[MATURITY] as [MATURITY_DATE],      tr2.SETTLE_DATE as [SETTLEMENT_DATE],      mf.[IT_FLAG_CREATETIME] as [CREATE_DATE],      mf.[IT_FLAG] as [EXCEPTION_FLAG],      pmc.[PM_INST_concat] as [INSTRUCTION],      CONCAT(i2.[SM_SEC_GROUP],'/',i2.[SM_SEC_TYPE]) as [ASSET_TYPE/SUBTYPE],      lst_trd.[TRD_COUNTERPARTY] as [CPTY],      t.[EXECUTION_TYPE_DECODE],      STUFF((              SELECT                      DISTINCT ', ' + LTRIM(RTRIM(trd.ORD_NUM))              FROM #trd_orders_metadata trd              WHERE trd.ORD_NUM = T.ORD_NUM               FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')            ,1,2,'') AS [Trader Order Number]      --CONCAT(YEAR(tr.[AUTH_TIME]),'-',left(DATENAME(m,tr.[AUTH_TIME]),3)) as [MONTH_YEAR],      --i2.[SM_SEC_GROUP],      --pr.[TRD_PURPOSE],      --CASE       -- WHEN NULLIF(tr.[BROKER_CODE],'') is null THEN 'na'      -- WHEN pr.DEBT_DERIV = 'DEBT' AND tr.BROKER_CODE  = t.COUNTERPARTY_CODE THEN t.TRD_COUNTERPARTY      -- WHEN pr.DEBT_DERIV = 'DEBT' AND tr.BROKER_CODE != t.COUNTERPARTY_CODE THEN 'No'      --ELSE 'na'       --END AS [AXE],      --i2.[SEDOL] as [SEDOL],      --pr.[PRIMARY_MARKET],      --fnd.[Fund_Investment_Number] as [FUND_INVESTMENT_NUMBER],      --tr.[LIMIT_TYPE] as [LIMIT_TYPE],      --tr.[LIMIT_VALUE] as [LIMIT_VALUE],      --'3 Firm Quotes' as  [BASELINE_PDP],      --CONVERT(DECIMAL(18,2),sum_oface.SUM_TRD_PRINCIPAL_GBP) as [NOMINAL],      --mf.[DEALING_DESK],      --t.[TRD_YIELD],      --t.[INDICATIVE_COMMENTS]      --sum_oface.[SUM_NET_CONSIDERATION_GBP] as NET_CONSIDERATION_GBP,      --pr.[INTERFUND_TRANSFER],      --t3.[TRADER_FULL_NAME],      --lst_trd.[TRD_ENTRY_TIME] as [TRD_ENTRY_TIME],      --pct_nav.[NAV_PCT_concat] as [PCT_OF_NAV],      --pct_nav.[NAV_CUT_concat] as [NAV_CUT_OFF],      --null as [LIST_ID],      --null as [LIST_NAME],      --null as [TYPE],      --CASE       -- WHEN pr.INST_TYPE = 'GOVBIL' and pr.PRIMARY_MARKET = 1      --  THEN 'Government bills - Primary'      --       WHEN pr.INST_TYPE in ('GOV', 'IGOV', 'SSA', 'GOVBIL') and pr.PRIMARY_MARKET = 1      --           THEN 'Government & SSA bonds - Primary'      --       WHEN pr.INST_TYPE in ('IG CORP', 'HY CORP', 'NR CORP', 'COV', 'CORP') and pr.PRIMARY_MARKET = 1      --           THEN 'Corporates & Covered - Primary'      --       WHEN pr.INST_TYPE in ('EM GOV', 'EM GOVBIL', 'EM CORP') and pr.PRIMARY_MARKET = 1      --           THEN 'EM - Primary'      --       WHEN pr.INST_TYPE in ('RMBS', 'CMBS', 'CDO', 'ABS', 'MBS', ' ARM') and pr.PRIMARY_MARKET = 1      --           THEN 'Securitised - Primary'      --       WHEN pr.INST_TYPE = 'GOVBIL'      --           THEN 'Government bills - Secondary'      --       WHEN pr.INST_TYPE in ('GOV', 'IGOV',  'GOVBIL')      --           THEN 'Government bonds - Secondary'      -- WHEN pr.INST_TYPE in ('EM GOV', 'EM GOVBIL', 'EM CORP')      --           THEN 'EM - Secondary'      --       WHEN pr.INST_TYPE in ('RMBS', 'CMBS', 'CDO', 'ABS', 'MBS', ' ARM')      --           THEN 'Securitised - Secondary'      --       WHEN pr.INST_TYPE = 'SSA'      --           THEN 'SSA bonds - Secondary'      --       WHEN pr.INST_TYPE ='HY Corp' and pr.TRD_CURRENCY IN ('EUR','GBP')      --           THEN 'European HY Corporates - Secondary'      --       WHEN (pr.INST_TYPE ='HY Corp' and t.TRD_CURRENCY not in ('EUR','GBP','USD'))      --               or (pr.INST_TYPE in ('IG CORP', 'NR CORP') and t.TRD_CURRENCY in ('EUR','GBP'))      --               or (pr.ORDER_INST_TYPE = 'CORP' and t.TRD_CURRENCY != 'USD')      --           THEN 'European IG Corporates & Other - Secondary'      -- WHEN (pr.INST_TYPE in ('HY CORP', 'IG CORP', 'NR CORP','CORP') OR pr.ORDER_INST_TYPE = 'CORP') and t.TRD_CURRENCY = 'USD'      --           THEN 'USD Corporates - Secondary'      --       WHEN pr.INST_TYPE in ('COV')       --           THEN 'Covered Bonds - Secondary'      --       WHEN pr.INST_TYPE = 'PFD'      --           THEN 'Pref. Shares - Secondary'      --       WHEN pr.INST_TYPE = 'SCDS' and pr.TRD_CURRENCY = 'EUR'      --           THEN 'SCDS EUR'      --       WHEN pr.INST_TYPE = 'SCDS' and pr.TRD_CURRENCY = 'USD'      --           THEN 'SCDS USD'      -- WHEN pr.INST_TYPE = 'ICDS' and pr.ICDS_DETAIL = 'ITRAXX EUROPE MAIN'      --           THEN 'iTraxx Europe'      --       WHEN pr.INST_TYPE = 'ICDS' and pr.ICDS_DETAIL = 'ITRAXX EUROPE CROSSOVER'      --           THEN 'iTraxx Crossover'      --       WHEN pr.INST_TYPE = 'ICDS' and pr.ICDS_DETAIL = 'CDX NA IG'      --           THEN 'CDX NA IG'      --       WHEN pr.INST_TYPE = 'ICDS' and pr.ICDS_DETAIL = 'CDX NA HY'      --           THEN 'CDX NA HY'      --       WHEN pr.INST_TYPE in ('ICDS', 'SCDS')      --           THEN 'CDS Other'      --       WHEN pr.INST_TYPE in ('IRFUT') and ISNULL(pr.TRD_PURPOSE,'') <> 'MG004'      --           THEN 'Interest Rate Futures'      --       WHEN pr.INST_TYPE in ('BNDFUT') and ISNULL(pr.TRD_PURPOSE,'') <> 'MG004'      --           THEN 'Bond Futures'      --       WHEN pr.INST_TYPE in ('OPTFUT') and ISNULL(pr.TRD_PURPOSE,'') <> 'MG004'      --           THEN 'Option Futures'      --       WHEN pr.INST_TYPE in ('ETD') and ISNULL(pr.TRD_PURPOSE,'') <> 'MG004'      --           THEN 'ETD Not Rollover'      --       WHEN pr.INST_TYPE in ('IRFUT','BNDFUT','OPTFUT','ETD') and pr.TRD_PURPOSE = 'MG004'      --           THEN 'ETD Rollover'      --       WHEN pr.INST_TYPE in ('IRS','BASIS','ZCS','SWAP')      --           THEN 'IRS'      --       WHEN pr.INST_TYPE = 'IFS'      --           THEN 'IFS'      --       WHEN pr.INST_TYPE = 'ASWP'      --           THEN 'ASWP'      --       WHEN pr.INST_TYPE in ('CCS','CASWP')      --           THEN 'Cross Currency'      --   END AS [DMC_ASSET_TYPE],      --CASE       -- WHEN cast(tr2.EXECUTION_TIME as time) < convert(time,CUTOFF)       -- THEN      --  CASE       --   WHEN cast(tr2.TRD_AUTH_TIME as time) > convert(time,CUTOFF) THEN 'Y'      --  ELSE 'N'       --  END      --ELSE 'N'       --END AS [NAV_IMPACT_ELIGIBLE],      --CASE      -- WHEN pr.DEALING_DESK = 'DMG' THEN      --  CASE       --   WHEN  lst_trd.TRD_TRADE_DATE <> CONVERT(DATE, lst_trd.TRD_AUTH_TIME) THEN 'Across days'      --   WHEN DATEDIFF(minute, lst_trd.EXECUTION_TIME, lst_trd.TRD_AUTH_TIME) < 60 THEN ''      --  ELSE CONVERT(VARCHAR(5),DATEDIFF(minute, lst_trd.EXECUTION_TIME, lst_trd.TRD_AUTH_TIME) - 60) + ' mins'      --  END      --END AS [TIME_LATE_BY]         INTO #temp_final_master_table     FROM (SELECT        [MULTI_FUND_ID],       [DEALING_DESK],       [IT_FLAG],       [IT_FLAG_CREATETIME]        FROM VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_DMG_TABLE) mf     left join #quotes_calc q_c on q_c.[MULTI_FUND_ID] = mf.[MULTI_FUND_ID]     left join #Broker brkr  on brkr.[MULTI_FUND_ID] = mf.[MULTI_FUND_ID]     left join #Funds fnd  on fnd.[MULTI_FUND_ID] = mf.[MULTI_FUND_ID]     inner join (SELECT DISTINCT         MULTI_FUND_ID,        TRD_PRICING_SPREAD,        EXECUTION_TIME,        CLIENT_EXECUTION_NUM,        INDICATIVE_COMMENTS,        PLACEMENT_NUM,        B3Q_RATIONALE,        NWQ_RATIONALE,        TRD_YIELD,        FinalFlag,        COUNTERPARTY_CODE,        CUSIP,        TRD_COUNTERPARTY,        TRDCOMM_COMMENTS,        NET_CONSIDERATION_GBP,        EXECUTION_TYPE_DECODE,        PORTFOLIOS_PORTFOLIO_NAME,        ORD_NUM,        TRD_AUTH_TIME,        TRD_CURRENCY,        TRD_EX_DESK_TYPE,        TRD_EX_BROKER_CODE,        MATURITY        FROM #trades_metadata) as t on t.[MULTI_FUND_ID] = mf.[MULTI_FUND_ID]     left join #trd_orders_metadata tr on tr.[ORD_NUM]=t.[ORD_NUM] AND mf.[DEALING_DESK]=tr.[DEALING_DESK]      outer apply (SELECT TOP 1          i.*          FROM VISTA_REPORTING.dbo.INSTRUMENTS i          WHERE (i.CUSIP=coalesce(t.CUSIP, tr.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(t.EXECUTION_TIME, tr.AUTH_TIME)))            ORDER BY i.DATE DESC) as i2     left join (SELECT DISTINCT         MULTI_FUND_ID,        SUM_TRD_ORIG_FACE,        SUM_TRD_PRINCIPAL_GBP,        SUM_NET_CONSIDERATION_GBP           FROM #temp_t) sum_oface on sum_oface.[MULTI_FUND_ID]=t.[MULTI_FUND_ID]     left join (SELECT DISTINCT         VENUE,         ROUTE_DATETIME,         PLACEMENT_NUM,        FULL_NAME_VENUE           FROM VISTA_REPORTING.dbo.PLACEMENTS) pl on pl.[PLACEMENT_NUM]=t.[PLACEMENT_NUM]     left join (SELECT DISTINCT         MULTI_FUND_ID,         INST_TYPE,         TRD_CURRENCY,         DEALING_DESK,         PRIMARY_MARKET,         [Parent_trade_ID],         ORDER_INST_TYPE,         ICDS_DETAIL,         TRD_PURPOSE,        TWEB_CLOSE_DEALING,        INTERFUND_TRANSFER,        LINKED_MULTI_FUND,        [1615_DEALING],        DEBT_DERIV,        SM_SEC_GROUP,        DESC_INSTMT,        SM_SEC_TYPE,        TRAN_TYPE          FROM #prim_metadata) pr on pr.[MULTI_FUND_ID]=t.[MULTI_FUND_ID] AND pr.[DEALING_DESK] = mf.[DEALING_DESK]     left join (SELECT DISTINCT         MULTI_FUND_ID,        TRADER_FULL_NAME,        TRADER           FROM #min_touch) as t3 on t3.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]     left join (SELECT DISTINCT         ORD_NUM,        FACE           FROM #max_touch) as t5 on t5.ORD_NUM = t.ORD_NUM     left join (SELECT DISTINCT         MULTI_FUND_ID,        PMs_concat         FROM #PMs_concat) pm on t.MULTI_FUND_ID = pm.MULTI_FUND_ID     left join (SELECT DISTINCT         MULTI_FUND_ID,        TRD_COUPON,        TRAN_TYPE,        SM_CURRENCY,        TRD_PRICE,        TRD_PRICING_SPREAD,        TRD_YIELD,        TRD_COUNTERPARTY,        ACTIVITY_TYPE,        TRD_TRADE_DATE,        TRD_AUTH_TIME,        EXECUTION_TIME,        TRD_PURPOSE,        TRDCOMM_COMMENTS,        ACTIVITY_TYPE_DECODE,        TRD_ENTRY_TIME,        TRD_CURRENCY          FROM #Latest_TRD_TRADE_DATE) lst_trd on t.[MULTI_FUND_ID] = lst_trd.[MULTI_FUND_ID]     left join (SELECT DISTINCT         Inv_Desk_Concat,        MULTI_FUND_ID           FROM #Inv_desk_concat) inv_desk on t.[MULTI_FUND_ID] = inv_desk.[MULTI_FUND_ID]     left join (SELECT DISTINCT         TAG_NAME,        [VALUE],        CODE           FROM VISTA_REPORTING.dbo.DECODES) dc1 on dc1.TAG_NAME = 'TrdPurpose' AND dc1.CODE=lst_trd.TRD_PURPOSE     left join (SELECT DISTINCT         COMMENTS_VALUE,        ORD_NUM           FROM #Latest_Comment) lst_cm on t.[ORD_NUM] = lst_cm.[ORD_NUM]     left join (SELECT DISTINCT         PM_INST_concat,        MULTI_FUND_ID           FROM #PM_INST_concat) pmc on pmc.[MULTI_FUND_ID] = mf.[MULTI_FUND_ID]     left join (SELECT DISTINCT         client_fund,        CUTOFF           FROM VISTA_STAGING.dbo.NAV_CUT_OFFS) nv on nv.[CLIENT_FUND] = t.[PORTFOLIOS_PORTFOLIO_NAME]     left join #pct_nav_concat pct_nav on pct_nav.[MULTI_FUND_ID] = mf.[MULTI_FUND_ID]     left join (          SELECT DISTINCT         tr.ORD_NUM,        tr.MULTI_FUND_ID,        tr.TRD_CURRENCY,        tr.EXECUTION_TIME,        tr.TRD_AUTH_TIME,        tr.TRD_TRADE_DATE,        T2.SETTLE_DATE          FROM #trades_metadata as tr          inner join (SELECT            MULTI_FUND_ID,            MAX(TOUCH_COUNT) as MAX_TOUCH,           MAX(TRD_SETTLE_DATE) as SETTLE_DATE             FROM Vista_Reporting.dbo.TRADES             GROUP BY MULTI_FUND_ID) as t2           on (tr.MULTI_FUND_ID=t2.MULTI_FUND_ID) and (tr.TOUCH_COUNT=t2.MAX_TOUCH)         ) as tr2 on tr2.[MULTI_FUND_ID] = mf.[MULTI_FUND_ID]     outer apply (SELECT TOP 1          nav.*          FROM VISTA_REPORTING.dbo.NAV          WHERE nav.PORTFOLIO_NAME = t.PORTFOLIOS_PORTFOLIO_NAME AND nav.NAV_PORT_DATE <= CONVERT(DATE, t.TRD_AUTH_TIME)          ORDER BY nav.NAV_PORT_DATE DESC) nav1     outer apply (SELECT TOP 1          e.*          FROM VISTA_REPORTING.dbo.FX_RATES e          WHERE e.CURRENCY = t.TRD_CURRENCY and CONVERT(date, e.MARKDATE) <= CONVERT(date, t.EXECUTION_TIME)         ORDER BY e.MARKDATE DESC) e     LEFT JOIN #oc_metadata oc ON oc.TRD_ORD=t.ORD_NUM             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_25_INTERFUND_TRANSFER_DMG_TABLE', 'U') IS NOT NULL     delete from VISTA_REPORTING.dbo.MASTER_MFID_VG_25_INTERFUND_TRANSFER_DMG_TABLE    where MFID in (SELECT DISTINCT MULTI_FUND_ID from #trades_metadata)        IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_25_INTERFUND_TRANSFER_DMG_TABLE', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_25_INTERFUND_TRANSFER_DMG_TABLE    SELECT *    FROM #temp_final_master_table        ELSE        SELECT *    INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_25_INTERFUND_TRANSFER_DMG_TABLE    FROM #temp_final_master_table        IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(    'MASTER_MFID_VG_25_INTERFUND_TRANSFER_DMG_TABLE', --TABLE_NAME    @START_TIME, --START_TIME    GETDATE(), --END_TIME    DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS    CAST(GETDATE() as date)) --COMPLETION_DATE        IF OBJECT_ID('tempdb..#trades_metadata', 'U') IS NOT NULL DROP TABLE #trades_metadata    IF OBJECT_ID('tempdb..#trd_orders_metadata', 'U') IS NOT NULL DROP TABLE #trd_orders_metadata    IF OBJECT_ID('tempdb..#prim_metadata', 'U') IS NOT NULL DROP TABLE #prim_metadata    IF OBJECT_ID('tempdb..#Latest_TRD_TRADE_DATE', 'U') IS NOT NULL DROP TABLE #Latest_TRD_TRADE_DATE    IF OBJECT_ID('tempdb..#MFID_inv_Desk', 'U') IS NOT NULL DROP TABLE #MFID_inv_Desk    IF OBJECT_ID('tempdb..#Inv_desk_concat', 'U') IS NOT NULL DROP TABLE #Inv_desk_concat    IF OBJECT_ID('tempdb..#Latest_Comment', 'U') IS NOT NULL DROP TABLE #Latest_Comment    IF OBJECT_ID('tempdb..#min_touch', 'U') IS NOT NULL DROP TABLE #min_touch    IF OBJECT_ID('tempdb..#max_touch', 'U') IS NOT NULL DROP TABLE #max_touch            END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_MFID_TABLE_VG_41_TRADES_WITHOUT_ORDERS_DMG  CreateDate: 2025-06-26 17:54:27.030  ModifyDate: 2025-06-26 17:54:27.030  --- DEFINITION START ---  -- =============================================    -- Author:  <Samad, Mehreen>    -- Create date: <01/04/2019>    -- Description:     -- <Master exception table for TRADES WITHOUT    -- ORDERS Exception test for DMG.>    -- =============================================        -- ***************VERSION CONTROL***************    -- 2019-04-05 - MS: Added in Instruction field    --     (+ two temp tables)    -- 2019-04-08 - MS: Changed order of columns and    --     added, renamed & commented     --     out some columns according     --     to Front End needs.    -- 2019-05-14 - MS: Added in TRD_EX_BROKER_CODE    -- *********************************************        CREATE PROCEDURE [dbo].[MASTER_MFID_TABLE_VG_41_TRADES_WITHOUT_ORDERS_DMG]     -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,         AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         --Used to track total time stored procedure took to run    DECLARE @START_TIME as datetime    SET @START_TIME = GETDATE()        IF OBJECT_ID('tempdb..#trades_metadata', 'U') IS NOT NULL DROP TABLE #trades_metadata    SELECT DISTINCT     t.MULTI_FUND_ID,     t.TRD_COUNTERPARTY,     t.CLIENT_EXECUTION_NUM,     t.COMMENTS,     t.INDICATIVE_COMMENTS,     t.EXECUTION_TIME,     t.ORD_NUM,     t.CUSIP,     t.PLACEMENT_NUM,     t.TRD_AUTH_TIME,     t.B3Q_RATIONALE,     t.NWQ_RATIONALE,     t.TRAN_TYPE,     t.TRD_CURRENCY,     t.TRD_PRICE,     t.TRD_PRICING_SPREAD,     t.TRD_COUPON,     t.TRD_ORIG_FACE,     t.TRD_YIELD,     t.TRD_ENTRY_TIME,     t.TRD_TRADE_DATE,     t.ACTIVITY_TYPE,     t.ACTIVITY_TYPE_DECODE,     t.TRDCOMM_COMMENTS,     t.EXECUTION_TYPE_DECODE,     t.NET_CONSIDERATION_GBP,     t.COUNTERPARTY_CODE,     t.PORTFOLIOS_PORTFOLIO_NAME,     t.SM_CURRENCY,     t.TRD_PURPOSE,     t.TRD_EX_DESK_TYPE,     t.CONTRACT_SIZE,     t.FinalFlag,     t.TRD_EX_BROKER_CODE,     t.MATURITY,     t.TOUCH_COUNT,     t.TRD_TRADER,     t.TRD_PRINCIPAL_GBP    INTO #trades_metadata    FROM VISTA_REPORTING.dbo.TRADES t    INNER JOIN VISTA_STAGING.dbo.VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE vg ON vg.MULTI_FUND_ID = t.MULTI_FUND_ID    WHERE FinalFlag = 1        --If the master table doesn't exist then we want to use all the data available, otherwise just the most recent data    IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE', 'U') IS NOT NULL    DELETE FROM #trades_metadata where NOT EXISTS (SELECT od.MULTI_FUND_ID                   FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                  WHERE od.MULTI_FUND_ID = #trades_metadata.MULTI_FUND_ID)            IF OBJECT_ID('tempdb..#trd_orders_metadata', 'U') IS NOT NULL DROP TABLE #trd_orders_metadata    SELECT DISTINCT     ORD_NUM,     ACTIVE_TIME,     AUTH_TIME,     PM_FULL_NAME,     BROKER_CODE,     SEC_DESC1,     ORDER_REASON,     ORD_GROUP,     DEALING_DESK,     CUSIP,     TRADER,     LIMIT_TYPE,     LIMIT_VALUE,     TOUCH_COUNT,     COMMENTS_VALUE,     TRADER_FULL_NAME,     FACE    INTO #trd_orders_metadata    FROM VISTA_REPORTING.dbo.TRD_ORDERS    where ORD_NUM in (select ORD_NUM from #trades_metadata)        IF OBJECT_ID('tempdb..#prim_metadata', 'U') IS NOT NULL DROP TABLE #prim_metadata    SELECT DISTINCT     DEBT_DERIV     ,DESC_INSTMT     ,INST_TYPE     ,ORDER_INST_TYPE     ,SM_SEC_TYPE     ,SM_SEC_GROUP     ,TRD_CURRENCY     ,TRAN_TYPE     ,TWEB_CLOSE_DEALING     ,[1615_DEALING]     ,PRIMARY_MARKET     ,INTERFUND_TRANSFER     ,LINKED_MULTI_FUND     ,t.MULTI_FUND_ID     ,t.DEALING_DESK     ,ICDS_DETAIL     ,TRD_PURPOSE     ,[Parent_trade_ID]    INTO #prim_metadata    FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE t    WHERE MULTI_FUND_ID in (SELECT MULTI_FUND_ID from #trades_metadata)        IF OBJECT_ID('tempdb..#PM_comments', 'U') IS NOT NULL DROP TABLE #PM_comments    SELECT DISTINCT     dc.VALUE,     t.MULTI_FUND_ID    INTO #PM_comments    FROM #trades_metadata t    left join VISTA_REPORTING.dbo.ORDERS_CROSS oc     on t.ORD_NUM = oc.TRD_ORD    left join (SELECT DISTINCT         PM,        ORD_NUM,        UPDATE_INSTR          FROM VISTA_REPORTING.dbo.PM_ORDERS) pm     on oc.PM_ORD = pm.ORD_NUM    LEFT JOIN (SELECT DISTINCT         VALUE,        TAG_NAME,        CODE          FROM VISTA_REPORTING.dbo.DECODES) dc     on dc.TAG_NAME = 'PM_INSTRUCTION' AND dc.CODE=pm.UPDATE_INSTR    WHERE pm.PM IS NOT NULL        IF OBJECT_ID('tempdb..#PM_INST_concat', 'U') IS NOT NULL DROP TABLE #PM_INST_concat    SELECT      MULTI_FUND_ID,     STUFF((     SELECT DISTINCT ', ' + LTRIM(RTRIM(VALUE))     FROM #PM_comments      WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)      ORDER BY  ', ' + LTRIM(RTRIM(VALUE))     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')     ,1,2,'') AS PM_INST_concat    INTO #PM_INST_concat    FROM #PM_comments Results    GROUP BY MULTI_FUND_ID        --Concatenate PCT_OF_NAV wih FUND and NAV_CUT_OFF with FUND by MFID    IF OBJECT_ID('tempdb..#PCT_NAV', 'U') IS NOT NULL DROP TABLE #PCT_NAV    SELECT DISTINCT     t.MULTI_FUND_ID,     t.CLIENT_EXECUTION_NUM,     CONCAT(t.PORTFOLIOS_PORTFOLIO_NAME,': ', CASE                WHEN nav.nav_value_gbp != 0                 THEN ABS(CONVERT(DECIMAL(30,2),100.0*(t.NET_CONSIDERATION_GBP)/nav.nav_value_gbp)) ELSE NULL                 END) AS PCT_NAV_CONCAT,     CONCAT(t.PORTFOLIOS_PORTFOLIO_NAME, ': ', nc.CUTOFF) AS CUTOFF    INTO #PCT_NAV    FROM #trades_metadata t    outer apply (SELECT TOP 1         nav.*         FROM VISTA_REPORTING.dbo.NAV         WHERE nav.PORTFOLIO_NAME = t.PORTFOLIOS_PORTFOLIO_NAME AND nav.NAV_PORT_DATE <= CONVERT(DATE, t.TRD_AUTH_TIME)         ORDER BY nav.NAV_PORT_DATE DESC) nav    left join VISTA_STAGING.dbo.NAV_CUT_OFFS nc     on nc.CLIENT_FUND=t.PORTFOLIOS_PORTFOLIO_NAME            IF OBJECT_ID('tempdb..#pct_nav_concat', 'U') IS NOT NULL DROP TABLE #pct_nav_concat    SELECT      MULTI_FUND_ID,     STUFF((      SELECT DISTINCT ' | ' + PCT_NAV_CONCAT      FROM #PCT_NAV       WHERE (MULTI_FUND_ID = pc_nav.MULTI_FUND_ID)       ORDER BY ' | ' + PCT_NAV_CONCAT      FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS NAV_PCT_concat,     STUFF((      SELECT DISTINCT ' | ' + CUTOFF      FROM #PCT_NAV       WHERE (MULTI_FUND_ID = pc_nav.MULTI_FUND_ID)       ORDER BY ' | ' + CUTOFF      FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS NAV_CUT_concat,     STUFF((      SELECT DISTINCT ' | ' + CLIENT_EXECUTION_NUM      FROM #PCT_NAV       WHERE (MULTI_FUND_ID = pc_nav.MULTI_FUND_ID)       ORDER BY ' | ' + CLIENT_EXECUTION_NUM      FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS CL_EX_concat    INTO #pct_nav_concat    FROM #PCT_NAV pc_nav    GROUP BY MULTI_FUND_ID            --2. Get latest TRD_TRADE_DATE associated with a trade    IF OBJECT_ID('tempdb..#Latest_TRD_TRADE_DATE', 'U') IS NOT NULL DROP TABLE #Latest_TRD_TRADE_DATE    SELECT DISTINCT     MULTI_FUND_ID,     TRD_TRADE_DATE,     EXECUTION_TIME,     TRD_PURPOSE,     TRD_AUTH_TIME,     TRAN_TYPE,     SM_CURRENCY,     TRD_PRICE,     TRD_PRICING_SPREAD,     TRD_YIELD,     TRD_COUNTERPARTY,     TRD_COUPON,     TRD_ENTRY_TIME,     TRDCOMM_COMMENTS,     ACTIVITY_TYPE,     ACTIVITY_TYPE_DECODE,     TRD_CURRENCY    INTO #Latest_TRD_TRADE_DATE    FROM #trades_metadata    WHERE FinalFlag = 1        --3. Get Investment desks associated with all funds on a trade    IF OBJECT_ID('tempdb..#MFID_inv_Desk', 'U') IS NOT NULL DROP TABLE #MFID_inv_Desk    SELECT DISTINCT      t.MULTI_FUND_ID,      p.ancestor    INTO #MFID_inv_Desk    FROM #trades_metadata t    left join VISTA_STAGING.dbo.PORTFOLIO_GROUP_CLOSURE_TABLE p    on t.PORTFOLIOS_PORTFOLIO_NAME = p.descendant    --Not necessary for DMG    --WHERE p.ancestor IN ('MG_ATCRED','MG_RET_FI','MG_INSTI',    --      'MG_INTER','MG_RESTCT','MG_IN_CAP',    --      'MG_LEVFIN','MG_MIB','MG_REDEBT') -- This is the list of investment desks provided in the business requirements documents            IF OBJECT_ID('tempdb..#Inv_desk_concat', 'U') IS NOT NULL DROP TABLE #Inv_desk_concat    SELECT      MULTI_FUND_ID,     STUFF((     SELECT DISTINCT ', ' + LTRIM(RTRIM(ancestor))     FROM #MFID_inv_Desk      WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)      ORDER BY ', ' + LTRIM(RTRIM(ancestor))     FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS Inv_Desk_Concat    INTO #Inv_desk_concat    FROM #MFID_inv_Desk Results    GROUP BY MULTI_FUND_ID        --4. Get latest comments value associated with a trade    IF OBJECT_ID('tempdb..#Latest_Comment', 'U') IS NOT NULL DROP TABLE #Latest_Comment    SELECT DISTINCT     o.ORD_NUM,     o.COMMENTS_VALUE    INTO #Latest_Comment    FROM #trd_orders_metadata o    inner join (SELECT        ORD_NUM,        MAX(TOUCH_COUNT) AS MAX_TOUCH       FROM VISTA_REPORTING.dbo.ORDERS       GROUP BY ORD_NUM) o2    on o.ORD_NUM = o2.ORD_NUM AND o.TOUCH_COUNT = o2.MAX_TOUCH    WHERE NULLIF(o.COMMENTS_VALUE,'') is not null                IF OBJECT_ID('tempdb..#min_touch', 'U') IS NOT NULL DROP TABLE #min_touch    SELECT     t1.MULTI_FUND_ID,     t1.TRD_TRADER AS TRADER,     D.FULL_NAME as TRADER_FULL_NAME    INTO #min_touch    FROM #trades_metadata as t1    join (SELECT      t1.MULTI_FUND_ID,      MIN(t1.TOUCH_COUNT) as MIN_TOUCH      FROM #trades_metadata as t1      GROUP BY t1.MULTI_FUND_ID)     as t2 on t1.MULTI_FUND_ID=t2.MULTI_FUND_ID and t1.TOUCH_COUNT=t2.MIN_TOUCH    left join VISTA_REPORTING.DBO.DEALER_AND_DESK D     on D.INITIALS = t1.TRD_TRADER        IF OBJECT_ID('tempdb..#max_touch', 'U') IS NOT NULL DROP TABLE #max_touch    SELECT     t1.ORD_NUM,     t1.TRADER,     t1.TRADER_FULL_NAME,     t1.FACE    INTO #max_touch    FROM #trd_orders_metadata as t1    join (SELECT      t1.ORD_NUM,      MAX(t1.TOUCH_COUNT) as MAX_TOUCH      FROM #trd_orders_metadata as t1      join #trd_orders_metadata as t2       on t1.ORD_NUM=t2.ORD_NUM      GROUP BY t1.ORD_NUM) as t2     on t1.ORD_NUM=t2.ORD_NUM and t1.TOUCH_COUNT=t2.MAX_TOUCH        IF OBJECT_ID('tempdb..#temp_t', 'U') IS NOT NULL DROP TABLE #temp_t    SELECT      t.MULTI_FUND_ID,      SUM(ABS(TRD_ORIG_FACE)) AS SUM_TRD_ORIG_FACE,     --SUM(ABS(TRD_PRINCIPAL)) AS SUM_TRD_PRINCIPAL,     SUM(ABS(TRD_PRINCIPAL_GBP)) AS SUM_TRD_PRINCIPAL_GBP,     SUM(ABS(NET_CONSIDERATION_GBP)) AS SUM_NET_CONSIDERATION_GBP    INTO #temp_t     FROM #trades_metadata t    WHERE FinalFlag=1     GROUP BY t.MULTI_FUND_ID        IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table    SELECT DISTINCT     lst_cm.[COMMENTS_VALUE] as [GENERAL_COMMENT],     CASE       WHEN t.TRDCOMM_COMMENTS LIKE '%<SDI>%'       THEN REPLACE(RIGHT(lst_trd.TRDCOMM_COMMENTS,LEN(lst_trd.TRDCOMM_COMMENTS) -CHARINDEX('<SDI>',lst_trd.TRDCOMM_COMMENTS,1)+1),'<SDI>','')      ELSE t.TRDCOMM_COMMENTS     END AS [DEALER_COMMENT],     t.[ORD_NUM] as [ORDER],     mf.[MULTI_FUND_ID] as [MFID],     CASE      WHEN pr.DEALING_DESK='DMG'      THEN       CASE        WHEN pr.DEBT_DERIV = 'DEBT'         THEN         CASE          WHEN lst_trd.TRD_COUPON IS NOT NULL AND i2.TICKER IS NOT NULL AND i2.MATURITY IS NOT NULL          THEN CONCAT(ISNULL(i2.TICKER,''),' ', CAST(ISNULL(lst_trd.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))         ELSE CONCAT(ISNULL(tr.SEC_DESC1,''),' ', CAST(ISNULL(lst_trd.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))         END        ELSE pr.DESC_INSTMT       END     END AS [DESCRIPTION],     t3.[TRADER] as [DEALER],     t5.[FACE] as [ORD_AMT],     CONVERT(DECIMAL(24,2),sum_oface.[SUM_TRD_ORIG_FACE]) as [BOOKED_AMT],     pr.[INST_TYPE],     lst_trd.[TRAN_TYPE] as [SIDE],     lst_trd.[SM_CURRENCY] as [CCY],     i2.[ISIN] as [ISIN],     t.[CUSIP],     i2.[SEDOL] as [SEDOL],     CONVERT(VARCHAR,CONVERT(DECIMAL(18,2),lst_trd.[TRD_PRICE])) as [PX],     CONVERT(DECIMAL(18,2),lst_trd.[TRD_PRICING_SPREAD]) as [SPREAD],     CASE      WHEN pr.DEALING_DESK='DMG'      THEN         CASE         WHEN pr.SM_SEC_GROUP = 'SWAP' AND pr.SM_SEC_TYPE IN ('SWAP','CSWAP') THEN CONVERT(DECIMAL(18,2),lst_trd.TRD_COUPON)        WHEN pr.DEBT_DERIV = 'DEBT' THEN CONVERT(DECIMAL(18,2),lst_trd.TRD_YIELD)       END     END AS [RATE],     lst_trd.[TRD_COUNTERPARTY] as [CPTY],     t.[TRD_EX_BROKER_CODE] as [EX_CPTY],     ISNULL(pl.FULL_NAME_VENUE,'Manual') as [PLATFORM],     CASE      WHEN pr.DEALING_DESK = 'DMG'      THEN       CASE        WHEN pr.TWEB_CLOSE_DEALING = 1 THEN 'TWEB Close'        WHEN pr.[1615_DEALING] = 1 THEN '1615 Dealing'        WHEN lst_trd.ACTIVITY_TYPE = 'MG.FI 1. Proces' THEN 'VPT'       END     END AS [METHOD],     lst_trd.[TRD_TRADE_DATE] as [TRADE_DATE],     lst_trd.[EXECUTION_TIME] as [EXEC_DATE],     lst_trd.[TRD_AUTH_TIME] as [ENTRY_DATE],     lst_trd.[ACTIVITY_TYPE_DECODE] as [ACTIVITY],     mf.[VG_41_CREATETIME] as [CREATE_DATE],     '3 Firm Quotes' as  [BASELINE_PDP],     t.[MATURITY] as [MATURITY_DATE],     tr2.SETTLE_DATE as [SETTLEMENT_DATE],     mf.[VG_41] as [EXCEPTION_FLAG],     pmc.[PM_INST_concat] as [INSTRUCTION],     dc1.[VALUE] as [PURPOSE],     CONCAT(i2.[SM_SEC_GROUP],'/',i2.[SM_SEC_TYPE]) as [ASSET_TYPE/SUBTYPE],     t.[EXECUTION_TYPE_DECODE],     --tr.[LIMIT_TYPE] as [LIMIT_TYPE],     --tr.[LIMIT_VALUE] as [LIMIT_VALUE],     --CONCAT(YEAR(tr.[AUTH_TIME]),'-',left(DATENAME(m,tr.[AUTH_TIME]),3)) as [MONTH_YEAR],     --pr.[PRIMARY_MARKET],     --inv_desk.Inv_Desk_Concat as [INV_DESK],     --i2.[SM_SEC_GROUP],     --CASE      -- WHEN NULLIF(tr.[BROKER_CODE],'') is null THEN 'na'     -- WHEN pr.DEBT_DERIV = 'DEBT' AND tr.BROKER_CODE  = t.COUNTERPARTY_CODE THEN t.TRD_COUNTERPARTY     -- WHEN pr.DEBT_DERIV = 'DEBT' AND tr.BROKER_CODE != t.COUNTERPARTY_CODE THEN 'No'     --ELSE 'na'      --END AS [AXE],     --pr.[TRD_PURPOSE],     mf.[TR_ORD_NUM] as [Trader Order Number]     --mf.[EXECUTION_TIME],     --mf.[DEALING_DESK],     --t.[TRD_YIELD],     --t.[INDICATIVE_COMMENTS]     --sum_oface.[SUM_NET_CONSIDERATION_GBP] as NET_CONSIDERATION_GBP,     --CONVERT(DECIMAL(18,2),sum_oface.SUM_TRD_PRINCIPAL_GBP) as [NOMINAL],     --pr.[INTERFUND_TRANSFER],     --t3.[TRADER_FULL_NAME],     --lst_trd.[TRD_ENTRY_TIME] as [TRD_ENTRY_TIME],     --pct_nav.[NAV_PCT_concat] as [PCT_OF_NAV],     --pct_nav.[NAV_CUT_concat] as [NAV_CUT_OFF],     --null as [LIST_ID],     --null as [LIST_NAME],     --null as [TYPE],     --CASE      -- WHEN pr.INST_TYPE = 'GOVBIL' and pr.PRIMARY_MARKET = 1     --  THEN 'Government bills - Primary'     --       WHEN pr.INST_TYPE in ('GOV', 'IGOV', 'SSA', 'GOVBIL') and pr.PRIMARY_MARKET = 1     --           THEN 'Government & SSA bonds - Primary'     --       WHEN pr.INST_TYPE in ('IG CORP', 'HY CORP', 'NR CORP', 'COV', 'CORP') and pr.PRIMARY_MARKET = 1     --           THEN 'Corporates & Covered - Primary'     --       WHEN pr.INST_TYPE in ('EM GOV', 'EM GOVBIL', 'EM CORP') and pr.PRIMARY_MARKET = 1     --           THEN 'EM - Primary'     --       WHEN pr.INST_TYPE in ('RMBS', 'CMBS', 'CDO', 'ABS', 'MBS', ' ARM') and pr.PRIMARY_MARKET = 1     --           THEN 'Securitised - Primary'     --       WHEN pr.INST_TYPE = 'GOVBIL'     --           THEN 'Government bills - Secondary'     --       WHEN pr.INST_TYPE in ('GOV', 'IGOV',  'GOVBIL')     --           THEN 'Government bonds - Secondary'     -- WHEN pr.INST_TYPE in ('EM GOV', 'EM GOVBIL', 'EM CORP')     --           THEN 'EM - Secondary'     --       WHEN pr.INST_TYPE in ('RMBS', 'CMBS', 'CDO', 'ABS', 'MBS', ' ARM')     --           THEN 'Securitised - Secondary'     --       WHEN pr.INST_TYPE = 'SSA'     --           THEN 'SSA bonds - Secondary'     --       WHEN pr.INST_TYPE ='HY Corp' and pr.TRD_CURRENCY IN ('EUR','GBP')     --           THEN 'European HY Corporates - Secondary'     --       WHEN (pr.INST_TYPE ='HY Corp' and t.TRD_CURRENCY not in ('EUR','GBP','USD'))     --               or (pr.INST_TYPE in ('IG CORP', 'NR CORP') and t.TRD_CURRENCY in ('EUR','GBP'))     --               or (pr.ORDER_INST_TYPE = 'CORP' and t.TRD_CURRENCY != 'USD')     --           THEN 'European IG Corporates & Other - Secondary'     -- WHEN (pr.INST_TYPE in ('HY CORP', 'IG CORP', 'NR CORP','CORP') OR pr.ORDER_INST_TYPE = 'CORP') and t.TRD_CURRENCY = 'USD'     --           THEN 'USD Corporates - Secondary'     --       WHEN pr.INST_TYPE in ('COV')      --           THEN 'Covered Bonds - Secondary'     --       WHEN pr.INST_TYPE = 'PFD'     --           THEN 'Pref. Shares - Secondary'     --       WHEN pr.INST_TYPE = 'SCDS' and pr.TRD_CURRENCY = 'EUR'     --           THEN 'SCDS EUR'     --       WHEN pr.INST_TYPE = 'SCDS' and pr.TRD_CURRENCY = 'USD'     --           THEN 'SCDS USD'     -- WHEN pr.INST_TYPE = 'ICDS' and pr.ICDS_DETAIL = 'ITRAXX EUROPE MAIN'     --           THEN 'iTraxx Europe'     --       WHEN pr.INST_TYPE = 'ICDS' and pr.ICDS_DETAIL = 'ITRAXX EUROPE CROSSOVER'     --           THEN 'iTraxx Crossover'     --       WHEN pr.INST_TYPE = 'ICDS' and pr.ICDS_DETAIL = 'CDX NA IG'     --           THEN 'CDX NA IG'     --       WHEN pr.INST_TYPE = 'ICDS' and pr.ICDS_DETAIL = 'CDX NA HY'     --           THEN 'CDX NA HY'     --       WHEN pr.INST_TYPE in ('ICDS', 'SCDS')     --           THEN 'CDS Other'     --       WHEN pr.INST_TYPE in ('IRFUT') and ISNULL(pr.TRD_PURPOSE,'') <> 'MG004'     --           THEN 'Interest Rate Futures'     --       WHEN pr.INST_TYPE in ('BNDFUT') and ISNULL(pr.TRD_PURPOSE,'') <> 'MG004'     --           THEN 'Bond Futures'     --       WHEN pr.INST_TYPE in ('OPTFUT') and ISNULL(pr.TRD_PURPOSE,'') <> 'MG004'     --           THEN 'Option Futures'     --       WHEN pr.INST_TYPE in ('ETD') and ISNULL(pr.TRD_PURPOSE,'') <> 'MG004'     --           THEN 'ETD Not Rollover'     --       WHEN pr.INST_TYPE in ('IRFUT','BNDFUT','OPTFUT','ETD') and pr.TRD_PURPOSE = 'MG004'     --           THEN 'ETD Rollover'     --       WHEN pr.INST_TYPE in ('IRS','BASIS','ZCS','SWAP')     --           THEN 'IRS'     --       WHEN pr.INST_TYPE = 'IFS'     --           THEN 'IFS'     --       WHEN pr.INST_TYPE = 'ASWP'     --           THEN 'ASWP'     --       WHEN pr.INST_TYPE in ('CCS','CASWP')     --           THEN 'Cross Currency'     --   END AS [DMC_ASSET_TYPE],     --CASE      -- WHEN cast(tr2.EXECUTION_TIME as time) < convert(time,CUTOFF)      -- THEN     --  CASE      --   WHEN cast(tr2.TRD_AUTH_TIME as time) > convert(time,CUTOFF) THEN 'Y'     --  ELSE 'N'      --  END     --ELSE 'N'      --END AS [NAV_IMPACT_ELIGIBLE],     --CASE     -- WHEN pr.DEALING_DESK = 'DMG' THEN     --  CASE      --   WHEN  lst_trd.TRD_TRADE_DATE <> CONVERT(DATE, lst_trd.TRD_AUTH_TIME) THEN 'Across days'     --   WHEN DATEDIFF(minute, lst_trd.EXECUTION_TIME, lst_trd.TRD_AUTH_TIME) < 60 THEN ''     --  ELSE CONVERT(VARCHAR(5),DATEDIFF(minute, lst_trd.EXECUTION_TIME, lst_trd.TRD_AUTH_TIME) - 60) + ' mins'     --  END     --END AS [TIME_LATE_BY]        INTO #temp_final_master_table    FROM (SELECT       [MULTI_FUND_ID],      [TR_ORD_NUM],      [EXECUTION_TIME],      [DEALING_DESK],      [VG_41],      [VG_41_CREATETIME]        FROM VISTA_STAGING.dbo.VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE) mf    inner join (SELECT DISTINCT        MULTI_FUND_ID,       TRD_PRICING_SPREAD,       EXECUTION_TIME,       CLIENT_EXECUTION_NUM,       INDICATIVE_COMMENTS,       PLACEMENT_NUM,       B3Q_RATIONALE,       NWQ_RATIONALE,       TRD_YIELD,       FinalFlag,       COUNTERPARTY_CODE,       CUSIP,       TRD_COUNTERPARTY,       TRDCOMM_COMMENTS,       NET_CONSIDERATION_GBP,       EXECUTION_TYPE_DECODE,       PORTFOLIOS_PORTFOLIO_NAME,       ORD_NUM,       TRD_AUTH_TIME,       TRD_CURRENCY,       TRD_EX_DESK_TYPE,       TRD_EX_BROKER_CODE,       MATURITY       FROM #trades_metadata) as t     on t.[MULTI_FUND_ID] = mf.[MULTI_FUND_ID]    left join #trd_orders_metadata tr     on tr.[ORD_NUM]=t.[ORD_NUM] AND mf.[DEALING_DESK]=tr.[DEALING_DESK]     outer apply (SELECT TOP 1         i.*         FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=coalesce(t.CUSIP, tr.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(t.EXECUTION_TIME, tr.AUTH_TIME)))           ORDER BY i.DATE DESC) as i2    left join (SELECT DISTINCT        MULTI_FUND_ID,       SUM_TRD_ORIG_FACE,       SUM_TRD_PRINCIPAL_GBP,       SUM_NET_CONSIDERATION_GBP          FROM #temp_t) sum_oface     on sum_oface.[MULTI_FUND_ID]=t.[MULTI_FUND_ID]    left join (SELECT DISTINCT        VENUE,        ROUTE_DATETIME,        PLACEMENT_NUM,       FULL_NAME_VENUE          FROM VISTA_REPORTING.dbo.PLACEMENTS) pl     on pl.[PLACEMENT_NUM]=t.[PLACEMENT_NUM]    left join (SELECT DISTINCT        MULTI_FUND_ID,        INST_TYPE,        TRD_CURRENCY,        DEALING_DESK,        PRIMARY_MARKET,        [Parent_trade_ID],        ORDER_INST_TYPE,        ICDS_DETAIL,        TRD_PURPOSE,       TWEB_CLOSE_DEALING,       INTERFUND_TRANSFER,       LINKED_MULTI_FUND,       [1615_DEALING],       DEBT_DERIV,       SM_SEC_GROUP,       DESC_INSTMT,       SM_SEC_TYPE,       TRAN_TYPE         FROM #prim_metadata) pr     on pr.[MULTI_FUND_ID]=t.[MULTI_FUND_ID] AND pr.[DEALING_DESK] = mf.[DEALING_DESK]    left join (SELECT DISTINCT        MULTI_FUND_ID,       TRADER_FULL_NAME,       TRADER          FROM #min_touch) as t3     on t3.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]    left join (SELECT DISTINCT        ORD_NUM,       FACE          FROM #max_touch) as t5     on t5.ORD_NUM = t.ORD_NUM    left join (SELECT DISTINCT        MULTI_FUND_ID,       TRD_COUPON,       TRAN_TYPE,       SM_CURRENCY,       TRD_PRICE,       TRD_PRICING_SPREAD,       TRD_YIELD,       TRD_COUNTERPARTY,       ACTIVITY_TYPE,       TRD_TRADE_DATE,       TRD_AUTH_TIME,       EXECUTION_TIME,       TRD_PURPOSE,       TRDCOMM_COMMENTS,       ACTIVITY_TYPE_DECODE,       TRD_ENTRY_TIME,       TRD_CURRENCY         FROM #Latest_TRD_TRADE_DATE) lst_trd     on t.[MULTI_FUND_ID] = lst_trd.[MULTI_FUND_ID]    left join (SELECT DISTINCT        Inv_Desk_Concat,       MULTI_FUND_ID          FROM #Inv_desk_concat) inv_desk     on t.[MULTI_FUND_ID] = inv_desk.[MULTI_FUND_ID]    left join (SELECT DISTINCT        TAG_NAME,       [VALUE],       CODE          FROM VISTA_REPORTING.dbo.DECODES) dc1     on dc1.TAG_NAME = 'TrdPurpose' AND dc1.CODE=lst_trd.TRD_PURPOSE    left join (SELECT DISTINCT        COMMENTS_VALUE,       ORD_NUM          FROM #Latest_Comment) lst_cm     on t.[ORD_NUM] = lst_cm.[ORD_NUM]    left join (SELECT DISTINCT        PM_INST_concat,       MULTI_FUND_ID          FROM #PM_INST_concat) pmc     on pmc.[MULTI_FUND_ID] = mf.[MULTI_FUND_ID]    left join (SELECT DISTINCT        client_fund,       CUTOFF          FROM VISTA_STAGING.dbo.NAV_CUT_OFFS) nv     on nv.[CLIENT_FUND] = t.[PORTFOLIOS_PORTFOLIO_NAME]    left join #pct_nav_concat pct_nav     on pct_nav.[MULTI_FUND_ID] = mf.[MULTI_FUND_ID]    left join (         SELECT DISTINCT        tr.ORD_NUM,       tr.MULTI_FUND_ID,       tr.TRD_CURRENCY,       tr.EXECUTION_TIME,       tr.TRD_AUTH_TIME,       tr.TRD_TRADE_DATE,       T2.SETTLE_DATE         FROM VISTA_REPORTING.dbo.TRADES as tr         inner join (SELECT           MULTI_FUND_ID,           MAX(TOUCH_COUNT) as MAX_TOUCH,          MAX(TRD_SETTLE_DATE) as SETTLE_DATE            FROM VISTA_REPORTING.dbo.TRADES            GROUP BY MULTI_FUND_ID) as t2          on (tr.MULTI_FUND_ID=t2.MULTI_FUND_ID) and (tr.TOUCH_COUNT=t2.MAX_TOUCH)        ) as tr2     on tr2.[MULTI_FUND_ID] = mf.[MULTI_FUND_ID]    outer apply (SELECT TOP 1         nav.*         FROM VISTA_REPORTING.dbo.NAV         WHERE nav.PORTFOLIO_NAME = t.PORTFOLIOS_PORTFOLIO_NAME AND nav.NAV_PORT_DATE <= CONVERT(DATE, t.TRD_AUTH_TIME)         ORDER BY nav.NAV_PORT_DATE DESC) nav1    outer apply (SELECT TOP 1         e.*         FROM VISTA_REPORTING.dbo.FX_RATES e         WHERE e.CURRENCY = t.TRD_CURRENCY and CONVERT(date, e.MARKDATE) <= CONVERT(date, t.EXECUTION_TIME)        ORDER BY e.MARKDATE DESC) e        IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE', 'U') IS NOT NULL     delete from VISTA_REPORTING.dbo.MASTER_MFID_VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE    where MFID in (SELECT MULTI_FUND_ID from #trades_metadata)        IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE    SELECT *    FROM #temp_final_master_table        ELSE        SELECT *    INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE    FROM #temp_final_master_table        IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(    'MASTER_MFID_VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE', --TABLE_NAME    @START_TIME, --START_TIME    GETDATE(), --END_TIME    DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS    CAST(GETDATE() as date)) --COMPLETION_DATE            IF OBJECT_ID('tempdb..#trades_metadata', 'U') IS NOT NULL DROP TABLE #trades_metadata    IF OBJECT_ID('tempdb..#trd_orders_metadata', 'U') IS NOT NULL DROP TABLE #trd_orders_metadata    IF OBJECT_ID('tempdb..#prim_metadata', 'U') IS NOT NULL DROP TABLE #prim_metadata    IF OBJECT_ID('tempdb..#Latest_TRD_TRADE_DATE', 'U') IS NOT NULL DROP TABLE #Latest_TRD_TRADE_DATE    IF OBJECT_ID('tempdb..#MFID_inv_Desk', 'U') IS NOT NULL DROP TABLE #MFID_inv_Desk    IF OBJECT_ID('tempdb..#Inv_desk_concat', 'U') IS NOT NULL DROP TABLE #Inv_desk_concat    IF OBJECT_ID('tempdb..#Latest_Comment', 'U') IS NOT NULL DROP TABLE #Latest_Comment    IF OBJECT_ID('tempdb..#min_touch', 'U') IS NOT NULL DROP TABLE #min_touch    IF OBJECT_ID('tempdb..#max_touch', 'U') IS NOT NULL DROP TABLE #max_touch    IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table    END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_MFID_TABLE_VG_501_SPOT_REFERENCE_RATE_FX  CreateDate: 2025-06-26 17:55:20.297  ModifyDate: 2025-06-26 17:55:20.297  --- DEFINITION START ---  -- =============================================    -- Author:  <LIZZIE REYNOLDS>    -- Create date: <09/07/2019>    -- Description: <CREATE THE MASTER TABLE FOR THE SPOT REFERENCE RATE LOGIC>        -- ***************VERSION CONTROL***************    --2022-02-09; Matej Miter - created for Jira:    --SURVG-639 - Changed instructed amount field to be taken from fx notional amount or notional amount far instead of gbp values; This should be align accross all reports    -- *********************************************    -- =============================================    CREATE PROCEDURE [dbo].[MASTER_MFID_TABLE_VG_501_SPOT_REFERENCE_RATE_FX]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;             DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()             IF OBJECT_ID('tempdb..#distinct_ids_al', 'U') IS NOT NULL DROP TABLE #distinct_ids_al     SELECT DISTINCT       pr.ORD_NUM as TRD_ORD,      oc.PM_ORD AS ORD_NUM,      pr.MULTI_FUND_ID     INTO #distinct_ids_al     FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = pr.ORD_NUM     WHERE pr.DEALING_DESK = 'FX'             IF OBJECT_ID('tempdb..#distinct_ids_fx', 'U') IS NOT NULL DROP TABLE #distinct_ids_fx     SELECT DISTINCT      fxt.ORDER_ID,      fxo.ORD_NUM,      vg.TRADE_ID AS MULTI_FUND_ID      INTO #distinct_ids_fx     FROM Vista_Staging.dbo.VG_501_SPOT_REFERENCE_RATE_FX_TABLE vg     LEFT JOIN Vista_Reporting.dbo.FX_TRADES fxt ON fxt.TRADE_ID = vg.TRADE_ID     LEFT JOIN Vista_Reporting.dbo.FX_ORDERS fxo ON fxo.FXM_ORDER_ID = fxt.ORDER_ID               IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE', 'U') IS NOT NULL     DELETE FROM #distinct_ids_fx where NOT EXISTS (SELECT DISTINCT od.TRADE_ID                  FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_FX od                  WHERE od.TRADE_ID = #distinct_ids_fx.MULTI_FUND_ID)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE', 'U') IS NOT NULL     DELETE FROM #distinct_ids_al where NOT EXISTS (SELECT DISTINCT od.MULTI_FUND_ID                  FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                  WHERE od.MULTI_FUND_ID = #distinct_ids_al.MULTI_FUND_ID)             IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE  #distinct_ids     SELECT *      INTO #distinct_ids     FROM #distinct_ids_al         UNION ALL         SELECT *      FROM #distinct_ids_fx             IF OBJECT_ID('tempdb..#max_touch_pm', 'U') IS NOT NULL DROP TABLE #max_touch_pm     SELECT DISTINCT       pm.ORD_NUM,       MAX(pm.TOUCH_COUNT) as MAX_TOUCH      INTO #max_touch_pm     FROM VISTA_REPORTING.dbo.PM_ORDERS pm     WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = pm.ORD_NUM)     GROUP BY ORD_NUM             IF OBJECT_ID('tempdb..#max_touch_t', 'U') IS NOT NULL DROP TABLE #max_touch_t     SELECT DISTINCT       t.MULTI_FUND_ID,       MAX(t.TOUCH_COUNT) as MAX_TOUCH      INTO #max_touch_t     FROM VISTA_REPORTING.dbo.TRADES t     WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)     GROUP BY MULTI_FUND_ID             IF OBJECT_ID('tempdb..#losing_bank_trades', 'U') IS NOT NULL DROP TABLE #losing_bank_trades     SELECT DISTINCT       ex.TRADE_ID,      CONVERT(VARCHAR(20), FXB.LOSING_BANK) AS LOSING_BANK,       CONVERT(VARCHAR(20), FXB.PROFIT_OR_LOSS) AS PROFIT_OR_LOSS,       CONVERT(VARCHAR(20), FXB.ALL_IN_RATE) AS ALL_IN_RATE,       CONVERT(VARCHAR(20), FXB.SWAP_POINTS) AS SWAP_POINTS,      FXT.EXECUTED_BANK     INTO #losing_bank_trades     FROM VISTA_STAGING.dbo.VG_501_SPOT_REFERENCE_RATE_FX_TABLE ex     LEFT JOIN VISTA_REPORTING.dbo.FX_LOSING_BANKS FXB ON ex.TRADE_ID = FXB.TRADE_ID     LEFT JOIN VISTA_REPORTING.dbo.FX_TRADES FXT on FXB.TRADE_ID = FXT.TRADE_ID     WHERE FXB.TRADE_ID = ex.TRADE_ID       AND FXB.LOSING_BANK != FXT.EXECUTED_BANK       AND ex.SOURCE = 'FX'      AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)             IF OBJECT_ID('tempdb..#AL_trades_orders', 'U') IS NOT NULL DROP TABLE #AL_trades_orders     SELECT DISTINCT      ex.TRADE_ID,      t.TRD_COUNTERPARTY,      q.QUOTE_VALUE,      pl.BROKER     INTO #AL_trades_orders     FROM VISTA_STAGING.dbo.VG_501_SPOT_REFERENCE_RATE_FX_TABLE ex     left join VISTA_REPORTING.dbo.TRADES t on ex.[TRADE_ID] = t.[MULTI_FUND_ID]     left join VISTA_REPORTING.dbo.QUOTES q on q.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]     left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on t.[ORD_NUM] = oc.[TRD_ORD]     left join VISTA_REPORTING.dbo.PM_ORDERS pm on oc.[PM_ORD] = pm.[ORD_NUM]     left join (SELECT DISTINCT ORD_NUM, [BROKER] FROM VISTA_REPORTING.dbo.PLACEMENTS) pl on pm.[ORD_NUM] = pl.[ORD_NUM]     WHERE ex.SOURCE = 'AL'         AND t.[MULTI_FUND_ID] = ex.[TRADE_ID]         AND q.[QUOTE_ORIGIN] = 'QUOTE'         AND pl.[BROKER] != q.[BROKER]        AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)             --Losing Bank count for FX     IF OBJECT_ID('tempdb..#losingbankcount', 'U') IS NOT NULL DROP TABLE #losingbankcount     SELECT DISTINCT      ex.[TRADE_ID],      COUNT(DISTINCT ex.[LOSING_BANK]) as LOSING_BANK_COUNT     INTO #losingbankcount     FROM #losing_bank_trades ex     GROUP BY ex.[TRADE_ID]             --Losing Bank count for AL     IF OBJECT_ID('tempdb..#losingbankcount_al', 'U') IS NOT NULL DROP TABLE #losingbankcount_al     SELECT DISTINCT      [TRADE_ID],      COUNT(DISTINCT [BROKER]) as LOSING_BANK_COUNT     INTO #losingbankcount_al     FROM #AL_trades_orders      GROUP BY [TRADE_ID]             IF OBJECT_ID('tempdb..#mapped_bank_best_ex', 'U') IS NOT NULL DROP TABLE #mapped_bank_best_ex     SELECT DISTINCT      ex.TRADE_ID,      CONVERT(VARCHAR(20),FXB.BANK_NAME) AS BANK_NAME     INTO #mapped_bank_best_ex     FROM VISTA_STAGING.dbo.VG_501_SPOT_REFERENCE_RATE_FX_TABLE ex     INNER JOIN VISTA_REPORTING.dbo.FX_MAPPED_BANKS fxb ON fxb.TRADE_ID=ex.TRADE_ID     WHERE ex.SOURCE = 'FX'         AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)             --LOSING BANKS     IF OBJECT_ID('tempdb..#losingbanktemp', 'U') IS NOT NULL DROP TABLE #losingbanktemp      SELECT DISTINCT      ex.TRADE_ID,      STUFF((        SELECT ', ' + LOSING_BANK       FROM #losing_bank_trades fxb       WHERE fxb.TRADE_ID = ex.TRADE_ID        ORDER BY LOSING_BANK       FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS LOSING_BANK,      STUFF((        SELECT ', ' + PROFIT_OR_LOSS       FROM #losing_bank_trades fxb       WHERE fxb.TRADE_ID = ex.TRADE_ID        ORDER BY PROFIT_OR_LOSS       FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS PROFIT_OR_LOSS,       STUFF((        SELECT ', ' + ALL_IN_RATE       FROM #losing_bank_trades fxb       WHERE fxb.TRADE_ID = ex.TRADE_ID        ORDER BY ALL_IN_RATE       FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS ALL_IN_RATE,       STUFF((        SELECT ', ' + SWAP_POINTS       FROM #losing_bank_trades fxb       WHERE fxb.TRADE_ID = ex.TRADE_ID        ORDER BY SWAP_POINTS       FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS SWAP_POINTS,       STUFF((        SELECT ', ' + FXB.BANK_NAME       FROM #mapped_bank_best_ex fxb       WHERE fxb.TRADE_ID = ex.TRADE_ID        ORDER BY BANK_NAME       FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS MAPPED_BANKS     INTO #losingbanktemp     FROM VISTA_STAGING.dbo.VG_501_SPOT_REFERENCE_RATE_FX_TABLE ex     WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)             IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     SELECT DISTINCT      COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) AS DEALER_NAME,      FXT.EXECUTED_BANK,      CASE WHEN FXT.EXECUTED_RATE_FAR IS NULL THEN CONVERT(VARCHAR(50),CONVERT(DECIMAL(38,8),FXT.EXECUTED_RATE)) WHEN FXT.EXECUTED_RATE_FAR IS NOT NULL THEN CONCAT(CONVERT(DECIMAL(38,8),FXT.EXECUTED_RATE), ' | ', CONVERT(DECIMAL(38,8),FXT.EXECUTED_RATE_FAR))   END AS ALL_IN_RATE,      CASE WHEN FXT.SPOT_RATE_FAR IS NULL THEN CONVERT(VARCHAR(50),CONVERT(DECIMAL(38,8),FXT.SPOT_RATE)) WHEN FXT.SPOT_RATE_FAR IS NOT NULL THEN CONCAT(CONVERT(DECIMAL(38,8),FXT.SPOT_RATE), ' | ', CONVERT(DECIMAL(38,8),FXT.SPOT_RATE_FAR)) END AS SPOT_RATE,      CASE WHEN FXT.FORWARD_POINTS_FAR IS NULL THEN CONVERT(VARCHAR(50),CONVERT(DECIMAL(38,8),FXT.FORWARD_POINTS)) WHEN FXT.FORWARD_POINTS_FAR IS NOT NULL THEN CONCAT(CONVERT(DECIMAL(38,8),FXT.FORWARD_POINTS), ' | ', CONVERT(DECIMAL(38,8),FXT.FORWARD_POINTS_FAR)) END AS FORWARD_POINTS,      CONVERT(DECIMAL(38,8),FXT.SWAP_POINTS) AS SWAP_POINTS,      CASE WHEN BESTEX.SRR_EXCEPTION = 0 THEN '' WHEN BESTEX.SRR_EXCEPTION = 1 THEN 'Exception' end  AS SRR_EXCEPTION,      CASE WHEN BESTEX.B3Q_EXCEPTION = 1 THEN 'Exception' when BESTEX.B3Q_EXCEPTION = 0 then '' end as B3Q_EXCEPTION,      CASE WHEN BESTEX.NWQ_EXCEPTION = 1 THEN 'Exception' WHEN BESTEX.NWQ_EXCEPTION = 0 THEN '' END AS NWQ_EXCEPTION,      CASE WHEN EX.VG_501 = 1 THEN 'Exception' when EX.VG_501 = 0 then '' end AS EXCEPTION,      CAST(100*((CAST((FXT.MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE - FXT.SPOT_RATE) as float) / CAST(FXT.MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE as float))) as decimal(38,8)) AS SPOT_DIFFERENCE,      FTT.SPOT_TOLERANCE_THRESHOLD AS SPOT_THRESHOLDS,      FXT.SPOT_TOLERANCE_REASON AS OUT_OF_TOLERANCE_EXCEPTION_REASON,      FXT.SPOT_TOLERANCE_REASON_NARRATION AS OUT_OF_TOLERANCE_EXCEPTION_REASON_NARRATION,      FXT.THREE_BANK_QUOTES_EXCEPTION_REASON AS NUMBER_OF_QUOTES_EXCEPTION_REASON,      FXT.THREE_BANK_QUOTES_EXCEPTION_REASON_NARRATION AS NUMBER_OF_QUOTES_EXCEPTION_REASON_NARRATION,      LBC.LOSING_BANK_COUNT AS LOSING_BANKS_COUNT,      LBT.LOSING_BANK AS LOSING_BANKS,      LBT.PROFIT_OR_LOSS AS LOSING_BANKS_PROFIT_OR_LOSS,      LBT.ALL_IN_RATE AS LOSING_BANKS_ALL_IN_RATE,      LBT.SWAP_POINTS AS LOSING_BANKS_SWAP_POINTS,      CONVERT(DECIMAL(38,8),FXT.PROFIT_OR_LOSS) AS PROFIT_OR_LOSS,      FXT.PRICE_REASON AS NWQ_REASON,      FXT.PRICE_REASON_NARRATION AS NWQ_REASON_NARRATION,      CASE WHEN FXT.MARKET_ARRIVAL_INDICATIVE_ALL_IN_FAR_RATE IS NULL THEN CONVERT(VARCHAR(50),CONVERT(DECIMAL(38,8),FXT.MARKET_ARRIVAL_INDICATIVE_ALL_IN_NEAR_RATE)) WHEN FXT.MARKET_ARRIVAL_INDICATIVE_ALL_IN_FAR_RATE IS NOT NULL THEN CONCAT(CONVERT(DECIMAL(38  ,8),FXT.MARKET_ARRIVAL_INDICATIVE_ALL_IN_NEAR_RATE), ' | ', CONVERT(DECIMAL(38,8),FXT.MARKET_ARRIVAL_INDICATIVE_ALL_IN_FAR_RATE)) END AS INDICATIVE_ALL_IN_PRICE_MARKET_ARRIVAL,      CASE WHEN FXT.MARKET_ARRIVAL_INDICATIVE_SPOT_FAR_PRICE IS NULL THEN CONVERT(VARCHAR(50),CONVERT(DECIMAL(38,8),FXT.MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE)) WHEN FXT.MARKET_ARRIVAL_INDICATIVE_SPOT_FAR_PRICE IS NOT NULL THEN CONCAT(CONVERT(DECIMAL(38,8)  ,FXT.MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE), ' | ', CONVERT(DECIMAL(38,8),FXT.MARKET_ARRIVAL_INDICATIVE_SPOT_FAR_PRICE)) END AS INDICATIVE_SPOT_PRICE_MARKET_ARRIVAL,      CASE WHEN FXT.MARKET_ARRIVAL_INDICATIVE_FORWARD_FAR_POINTS IS NULL THEN CONVERT(VARCHAR(50),CONVERT(DECIMAL(38,8),FXT.MARKET_ARRIVAL_INDICATIVE_FORWARD_NEAR_POINTS)) WHEN FXT.MARKET_ARRIVAL_INDICATIVE_FORWARD_FAR_POINTS IS NOT NULL THEN CONCAT(CONVERT(DECIMAL(38,8),FXT.MARKET_ARRIVAL_INDICATIVE_FORWARD_NEAR_POINTS), ' | ', CONVERT(DECIMAL(38,8),FXT.MARKET_ARRIVAL_INDICATIVE_FORWARD_FAR_POINTS)) END AS INDICATIVE_FORWARD_POINTS_MARKET_ARRIVAL,      FORMAT(FXT.MARKET_ARRIVAL_INDICATIVE_PRICE_DATE_TIME,'dd/MM/yyyy HH:mm:ss')  AS INDICATIVE_PRICE_DATETIME_MARKET_ARRIVAL,      FXO.CLIENT_FUND,      FXO.BASE_FUND,      FXO.INSTRUCTION_TYPE AS PRODUCT,      CASE WHEN FXO.FR_LEG_PRODUCT IS NULL THEN CONVERT(VARCHAR(50),FXO.NR_LEG_PRODUCT) WHEN FXO.FR_LEG_PRODUCT IS NOT NULL THEN CONCAT(FXO.NR_LEG_PRODUCT, ' | ', FXO.FR_LEG_PRODUCT) END AS FXM_PRODUCT,      CASE WHEN NULLIF(FXO.ACTION2,'') IS NULL THEN CONVERT(VARCHAR(50),FXO.ACTION1) WHEN NULLIF(FXO.ACTION2,'') IS NOT NULL THEN (FXO.ACTION1 + ISNULL(' | ' + NULLIF(FXO.ACTION2,''),'')) END AS ACTION,      CASE WHEN FXO.NOTIONAL_CCY_FAR IS NULL THEN CONVERT(VARCHAR(50),FXO.NOTIONAL_CCY) WHEN FXO.NOTIONAL_CCY_FAR IS NOT NULL THEN CONCAT(FXO.NOTIONAL_CCY, ' | ', FXO.NOTIONAL_CCY_FAR) END AS INSTRUCTED_CURRENCY,      --SURVG-639      CASE WHEN FXT.NOTIONAL_AMOUNT_FAR IS NULL THEN CONVERT(VARCHAR(50),FORMAT(CONVERT(DECIMAL(38,2),FXT.NOTIONAL_AMOUNT), '#,0.00')) WHEN FXT.NOTIONAL_AMOUNT_FAR IS NOT NULL THEN CONCAT(FORMAT(CONVERT(DECIMAL(38,2),FXT.NOTIONAL_AMOUNT), '#,0.00'), ' | ', FORMAT(CONVERT(DECIMAL(38,2),FXT.NOTIONAL_AMOUNT_FAR), '#,0.00')) END AS INSTRUCTED_AMOUNT,      --End of SURVG-639      CASE WHEN FXO.BUY_CCY_LEG2 IS NULL THEN CONVERT(VARCHAR(50),FXO.BUY_CCY) WHEN FXO.BUY_CCY_LEG2 IS NOT NULL THEN CONCAT(FXO.BUY_CCY, ' | ', FXO.BUY_CCY_LEG2) END AS BUY_CURRENCY,      CASE WHEN FXO.SELL_CCY_LEG2 IS NULL THEN CONVERT(VARCHAR(50),FXO.SELL_CCY) WHEN FXO.SELL_CCY_LEG2 IS NOT NULL THEN CONCAT(FXO.SELL_CCY, ' | ', FXO.SELL_CCY_LEG2) END AS SELL_CURRENCY,      FORMAT(FXT.TRADE_DATE,'dd/MM/yyyy') AS TRADE_DATE,      CASE WHEN FXO.VALUE_DATE_FAR IS NULL THEN CONVERT(VARCHAR(50),FORMAT(FXO.VALUE_DATE_NEAR,'dd/MM/yyyy')) WHEN FXO.VALUE_DATE_FAR IS NOT NULL THEN CONCAT(FORMAT(FXO.VALUE_DATE_NEAR,'dd/MM/yyyy') , ' | ', FORMAT(FXO.VALUE_DATE_FAR,'dd/MM/yyyy') ) END AS VALUE_DATE,      CASE WHEN FXT.EXECUTED_AMOUNT_FAR IS NULL THEN FORMAT(CONVERT(DECIMAL(38,2),FXT.EXECUTED_AMOUNT), '#,0.00') WHEN FXT.EXECUTED_AMOUNT_FAR IS NOT NULL THEN CONCAT(FORMAT(CONVERT(DECIMAL(38,2),FXT.EXECUTED_AMOUNT), '#,0.00'), ' | ' , FORMAT(CONVERT(DECIMAL  (38,2),FXT.EXECUTED_AMOUNT_FAR), '#,0.00')) END AS EXECUTED_AMOUNT,      FXT.SWAP_TYPE,      FORMAT(FXT.NET_EXPOSURE_TRADE, '#,0.00') AS NET_EXPOSURE,      COALESCE(fxo.[PM],fxo.INSTRUCTED_BY) AS INSTRUCTED_BY,      FXO.CREATED_FROM AS ORDER_SOURCE,      FXO.FM_COMMENTS,      FXO.TRADE_PURPOSE,      FXO.MARKER,      CASE WHEN FXT.FIXING_DATE_LEG2 IS NULL THEN CONVERT(VARCHAR(50),FORMAT(FXT.FIXING_DATE,'dd/MM/yyyy HH:mm:ss') ) WHEN FXT.FIXING_DATE_LEG2 IS NOT NULL THEN CONCAT(FORMAT(FXT.FIXING_DATE,'dd/MM/yyyy HH:mm:ss') , ' | ', FORMAT(FXT.FIXING_DATE_LEG2,'dd/MM/y  yyy HH:mm:ss') ) END AS FIXING_DATE,      FXO.BUSINESS_GROUP,      FXO.TRADE_VENUE AS PLACEMENT_VENUE,      FORMAT(FXO.INSTRUCTION_RECEIVED_DATE_TIME,'dd/MM/yyyy HH:mm:ss')  AS ORDER_RECEIVED_DATETIME,      FORMAT(FXT.MARKET_ARRIVAL_DATE_TIME,'dd/MM/yyyy HH:mm:ss')  AS MARKET_ARRIVAL_DATE_TIME,      FORMAT(FXT.EXECUTED_DATE_TIME,'dd/MM/yyyy HH:mm:ss')  AS EXECUTED_DATE_TIME,      DATEDIFF( MINUTE, FXT.MARKET_ARRIVAL_DATE_TIME, FXT.EXECUTED_DATE_TIME ) AS TIME_ELAPSED_BETWEEN_MARKET_ARRIVAL_AND_EXECUTED_DATETIME,      FXT.MAPPED_BANK_COUNT AS STATIC_BANK_COUNT,      LBT.MAPPED_BANKS AS STATIC_BANK_LIST,      FXT.ORDER_ID,      CASE       WHEN fxo.[ORD_NUM] is not null THEN FXO.ORD_NUM      ELSE FXT.[ORDER_ID]      END AS PM_ORDER_ID,      EX.TRADE_ID AS TRANSACTION_NUMBER,      FXO.ALADDIN_COMMON_ID AS ALADDIN_COMMON_IDENTIFIER,      FXO.INSTRUCTION_STATUS,      FXT.EXC_SESSION_ID AS SESSION_ID,      FXT.EXC_SESSION_TYPE AS SESSION_TYPE,      FXT.ORDER_STRATEGY AS NETTING_STRATEGY_USED,      ex.VG_501 as EXCEPTION_FLAG,      ex.VG_501_CREATETIME AS CREATE_DATE,      ex.SOURCE as DATA_SOURCE,      FXT.EXECUTED_DATE_TIME AS OS_EXECUTED_DATE_TIME     INTO #temp_final_master_table     FROM VISTA_STAGING.DBO.VG_501_SPOT_REFERENCE_RATE_FX_TABLE EX     LEFT JOIN VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE BESTEX ON BESTEX.TRADE_ID = EX.TRADE_ID AND BESTEX.DATA_SOURCE = EX.SOURCE     LEFT JOIN VISTA_REPORTING.DBO.FX_TRADES FXT ON EX.TRADE_ID = FXT.TRADE_ID     LEFT JOIN VISTA_REPORTING.DBO.FX_ORDERS FXO ON FXT.ORDER_ID = FXO.FXM_ORDER_ID     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd on tdd.[MG_USER_ID] = fxt.[DEALT_BY] AND CAST(fxt.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2 on tdd.[MG_USER_ID] = fxt.[ACCEPTED_BY] AND CAST(fxt.[PULL_DATE] AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)     left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd on dd.[REPORT_NAME] = 'Spot Reference Rate' AND CAST(fxt.[PULL_DATE] AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)     LEFT JOIN VISTA_STAGING.DBO.REF_FX_SPOT_TOLERANCE_THRESHOLD FTT ON FTT.BASE_CCY = FXT.BUY_CCY AND FTT.CONTRA_CCY = FXT.SELL_CCY AND CAST(FXT.PULL_DATE AS DATE) BETWEEN CAST(FTT.DATE_FROM AS DATE) AND CAST(FTT.DATE_TO AS DATE)     LEFT JOIN #losingbanktemp LBT ON LBT.TRADE_ID = EX.TRADE_ID     left join #losingbankcount lbc on lbc.[TRADE_ID] = ex.[TRADE_ID]     WHERE EX.SOURCE = 'FX' AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)             UNION         SELECT DISTINCT       COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER])  as DEALER_NAME       ,PLA.BROKER as EXECUTED_BANK      ,CAST(COALESCE(PLA.AVG_PRICE,TRD.FX_PRICE) as varchar(30)) as ALL_IN_RATE --Trades.TRDQUOTES_set is what it says on the mapping sheet       ,CAST(TRD.FX_PRICE_SPOT as varchar(50)) as SPOT_RATE --Trades.TRDQUOTES_set is what it says on the mapping sheet       ,CAST(NULL as varchar(50)) AS FORWARD_POINTS       ,CAST(NULL as varchar(50)) as SWAP_POINTS       ,CASE WHEN BESTEX.SRR_EXCEPTION = 0 THEN '' WHEN BESTEX.SRR_EXCEPTION = 1 THEN 'Exception' end  AS SRR_EXCEPTION       ,CASE WHEN BESTEX.B3Q_EXCEPTION = 1 THEN 'Exception' when BESTEX.B3Q_EXCEPTION = 0 then '' end as B3Q_EXCEPTION       ,CASE WHEN BESTEX.NWQ_EXCEPTION = 1 THEN 'Exception' WHEN BESTEX.NWQ_EXCEPTION = 0 THEN '' END AS NWQ_EXCEPTION       ,CASE WHEN EX.VG_501 = 1 THEN 'Exception' when EX.VG_501 = 0 then '' end AS EXCEPTION       ,CAST(NULL as varchar(50)) as SPOT_DIFFERENCE --THIS NEEDS TO BE CALCULATED and i dont know the calculation at the moment       ,CAST(NULL as varchar(50)) as SPOT_THRESHOLDS --Just says 'Hard coded' in the sheet       ,CAST(NULL as varchar(50)) as OUT_OF_TOLERANCE_REASON       ,CAST(NULL as varchar(50)) as OUT_OF_TOLERANCE_REASON_NARRATION       ,CAST(NULL as varchar(50)) as NUMBER_OF_QUOTES_EXCEPTION_REASON       ,CAST(NULL as varchar(50)) as NUMBER_OF_QUOTES_EXCEPTION_REASON_NARRATION       ,lb_al.LOSING_BANK_COUNT as LOSING_BANKS_COUNT       ,CAST(NULL as varchar(50)) as LOSING_BANKS --Trades.TRDQUOTES_set is what it says on the mapping sheet       ,CAST(NULL as varchar(50)) as LOSING_BANKS_PROFIT_OR_LOSS       ,CAST(NULL as varchar(50)) as LOSING_BANKS_ALL_IN_RATE       ,CAST(NULL as varchar(50)) as LOSING_BANKS_SWAP_POINTS       ,CAST(NULL as varchar(50)) as PROFIT_OR_LOSS --Sheet says 'Vista'       ,CAST(NULL as varchar(50)) as NWQ_REASON       ,CAST(NULL as varchar(50)) as NWQ_REASON_NARRATION       ,CAST(NULL as varchar(50)) as INDICATIVE_ALL_IN_PRICE_MARKET_ARRIVAL       ,CAST(NULL as varchar(50)) as INDICATIVE_SPOT_PRICE_MARKET_ARRIVAL       ,CAST(NULL as varchar(50)) as INDICATIVE_FORWARD_POINTS_MARKET_ARRIVAL       ,CAST(NULL as varchar(50)) as MARKET_ARRIVAL_INDICATIVE_PRICE_DATE_TIME       ,CAST(NULL as varchar(50)) AS CLIENT_FUND       ,TRD.PORTFOLIOS_PORTFOLIO_NAME as BASE_FUND       ,PMO.SM_SEC_TYPE as PRODUCT       ,NULL AS FXM_PRODUCT       ,CAST(NULL as varchar(50)) as ACTION       ,TRD.FX_PAY_CURR as INSTRUCTED_CURRENCY       ,cast(FORMAT(PLA.QUANTITY, '#,0.00')  as varchar(50)) as INSTRUCTED_AMOUNT       ,CAST(NULL as varchar(50)) as BUY_CURRENCY       ,CAST(NULL as varchar(50)) as SELL_CURRENCY       ,FORMAT(PMO.OPEN_DATE,'dd/MM/yyyy') as TRADE_DATE       ,cast(COALESCE(FORMAT(PMO.SETTLE_DATE,'dd/MM/yyyy'), FORMAT(PMO.MATURITY,'dd/MM/yyyy')) as varchar(50)) as VALUE_DATE       ,cast(FORMAT(PMO.FILL_AMT, '#,0.00')  as varchar(50)) as EXECUTED_AMOUNT       ,CAST(NULL as varchar(50)) AS SWAP_TYPE       ,CAST(NULL as varchar(50)) AS NET_EXPOSURE       , PMO.PM AS INSTRUCTED_BY       ,'Aladdin' as ORDER_SOURCE       ,PMO.COMMENTS_VALUE as FM_COMMENTS       ,trd.trd_purpose as TRADE_PURPOSE       ,CAST(NULL as varchar(50)) as MARKER       ,CAST(NULL as varchar(50)) as FIXING_DATE       ,CASE        WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP'        WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG'        WHEN (pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM'       ELSE NULL       END AS [BUSINESS_GROUP]       ,PLA.VENUE as PLACEMENT_VENUE       ,FORMAT(PMO.AUTH_TIME,'dd/MM/yyyy HH:mm:ss') as ORDER_RECEIVED_DATETIME       ,FORMAT(TRD.EXECUTION_TIME,'dd/MM/yyyy HH:mm:ss') as MARKET_ARRIVAL_DATE_TIME       ,FORMAT(TRD.EXECUTION_TIME,'dd/MM/yyyy HH:mm:ss') as EXECUTED_DATE_TIME       ,0 as TIME_ELAPSED_BETWEEN_MARKET_ARRIVAL_AND_EXECUTED_DATETIME --This is always 0 as both of the 2 above lines map to the same AL column       ,CAST(NULL as varchar(50)) as STATIC_BANK_COUNT       ,CAST(NULL as varchar(50)) as STATIC_BANK_LIST        ,cast(PMO.ORD_NUM as varchar(50)) as ORDER_ID       ,cast(PMO.ORD_NUM as varchar(50)) as PM_ORDER_ID       ,trd.multi_fund_id as TRANSACTION_NUMBER       ,cast(REQ.REQUEST_ID as varchar(50)) as ALADDIN_COMMON_IDENTIFIER       ,PLA.STATUS as INSTRUCTION_STATUS       ,CAST(NULL as varchar(50)) as SESSION_ID       ,CAST(NULL as varchar(50)) as SESSION_TYPE       ,CAST(NULL as varchar(50)) as NETTING_STRATEGY_USED       ,ex.VG_501 as EXCEPTION_FLAG       ,ex.VG_501_CREATETIME AS CREATE_DATE       ,ex.SOURCE as DATA_SOURCE       ,TRD.EXECUTION_TIME AS OS_EXECUTED_DATE_TIME     FROM VISTA_STAGING.DBO.VG_501_SPOT_REFERENCE_RATE_FX_TABLE EX     LEFT JOIN VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE BESTEX ON BESTEX.TRADE_ID = EX.TRADE_ID AND BESTEX.DATA_SOURCE = EX.SOURCE     left join (SELECT        TRD.MULTI_FUND_ID,        TRD.EXECUTION_TIME,        TRD.ORD_NUM,        TRD.TRD_STATUS,        TRD.TRD_TRADER,        TRD.[PORTFOLIOS_PORTFOLIO_NAME],        TRD.FUND,        TRD.TRD_PURPOSE,        TRD.FX_PAY_CURR,        TRD.[PULL_DATE],        TRD.FX_PRICE,        TRD.FX_PRICE_SPOT        FROM VISTA_REPORTING.dbo.TRADES TRD        inner join #max_touch_t mtt on mtt.MULTI_FUND_ID = TRD.MULTI_FUND_ID) TRD      on TRD.MULTI_FUND_ID = EX.TRADE_ID     left join VISTA_REPORTING.dbo.ORDERS_CROSS OC on TRD.ORD_NUM = OC.TRD_ORD     left join (SELECT DISTINCT         PMO.ORD_NUM,        PMO.AUTH_TIME,        PMO.STATUS,        PMO.PM,        PMO.ACTIVE_TIME,        PMO.TRADER,        PMO.COMMENTS_VALUE,        PMO.OPEN_DATE,        PMO.SETTLE_DATE,        PMO.MATURITY,        PMO.SM_SEC_TYPE,        PMO.FILL_AMT,        pmo.PULL_DATE        from VISTA_REPORTING.dbo.PM_ORDERS PMO         inner join #max_touch_pm mtp on mtp.ORD_NUM = PMO.ORD_NUM and mtp.MAX_TOUCH = pmo.TOUCH_COUNT) PMO      on PMO.ORD_NUM = OC.PM_ORD     left join (SELECT         ORD_NUM,         PLACEMENT_NUM,        STATUS,        QUANTITY,        BROKER,        VENUE,        AVG_PRICE        from VISTA_REPORTING.dbo.PLACEMENTS) PLA      on PLA.ORD_NUM = PMO.ORD_NUM     left join (SELECT         PLACEMENT_NUM,         REQUEST_ID        FROM VISTA_STAGING.dbo.REQUEST_LOOKUP) REQ      on REQ.PLACEMENT_NUM = PLA.PLACEMENT_NUM     left join (SELECT DISTINCT FUND_ID, PORTFOLIO_GROUP_NAME FROM VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY) pgt on TRD.[FUND] = pgt.[FUND_ID]     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd on tdd.[INITIALS] = TRD.[TRD_TRADER] AND CAST(trd.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2 on tdd.[INITIALS] = PMO.[TRADER] AND CAST(pmo.[PULL_DATE] AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)     left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd on dd.[REPORT_NAME] = 'Spot Reference Rate' AND CAST(COALESCE(trd.[PULL_DATE],pmo.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)     left join #losingbankcount_al lb_al on ex.[TRADE_ID] = lb_al.[TRADE_ID]     WHERE EX.SOURCE = 'AL' AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)              IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE', 'U') IS NOT NULL     DELETE FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE     WHERE TRANSACTION_NUMBER IN (SELECT DISTINCT MULTI_FUND_ID FROM #distinct_ids)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE     SELECT *     FROM #temp_final_master_table         ELSE         SELECT *     INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE     FROM #temp_final_master_table             IF OBJECT_ID('tempdb..#AL_trades_orders', 'U') IS NOT NULL DROP TABLE #AL_trades_orders     IF OBJECT_ID('tempdb..#max_touch_t', 'U') IS NOT NULL DROP TABLE #max_touch_t     IF OBJECT_ID('tempdb..#max_touch_pm', 'U') IS NOT NULL DROP TABLE #max_touch_pm     IF OBJECT_ID('tempdb..#losing_bank_trades', 'U') IS NOT NULL DROP TABLE #losing_bank_trades     IF OBJECT_ID('tempdb..#losingbankcount', 'U') IS NOT NULL DROP TABLE #losingbankcount     IF OBJECT_ID('tempdb..#losingbankcount_al', 'U') IS NOT NULL DROP TABLE #losingbankcount_al     IF OBJECT_ID('tempdb..#mapped_bank_best_ex', 'U') IS NOT NULL DROP TABLE #mapped_bank_best_ex     IF OBJECT_ID('tempdb..#losingbanktemp', 'U') IS NOT NULL DROP TABLE #losingbanktemp      IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     IF OBJECT_ID('tempdb..#distinct_ids_al', 'U') IS NOT NULL DROP TABLE #distinct_ids_al     IF OBJECT_ID('tempdb..#distinct_ids_fx', 'U') IS NOT NULL DROP TABLE #distinct_ids_fx     IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE  #distinct_ids             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg501_fx_idx1')           DROP INDEX mmf_vg501_fx_idx1      ON VISTA_REPORTING.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg501_fx_idx1     ON VISTA_REPORTING.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE      (TRANSACTION_NUMBER)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg501_fx_idx2')           DROP INDEX mmf_vg501_fx_idx2      ON VISTA_REPORTING.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg501_fx_idx2     ON VISTA_REPORTING.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE      (EXECUTED_DATE_TIME)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg501_fx_idx3')           DROP INDEX mmf_vg501_fx_idx3      ON VISTA_REPORTING.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg501_fx_idx3     ON VISTA_REPORTING.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE      (DEALER_NAME)              IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg501_fx_idx4')           DROP INDEX mmf_vg501_fx_idx4      ON VISTA_REPORTING.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg501_fx_idx4     ON VISTA_REPORTING.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE      (CREATE_DATE)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg501_fx_idx5')           DROP INDEX mmf_vg501_fx_idx5      ON VISTA_REPORTING.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg501_fx_idx5     ON VISTA_REPORTING.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE      (TRADE_DATE)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg501_fx_idx6')           DROP INDEX mmf_vg501_fx_idx6      ON VISTA_REPORTING.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg501_fx_idx6     ON VISTA_REPORTING.dbo.MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE      (EXCEPTION_FLAG)              IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(     'MASTER_MFID_VG_501_SPOT_REFERENCE_RATE_FX_TABLE', --TABLE_NAME     @START_TIME, --START_TIME     GETDATE(), --END_TIME     DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS     CAST(GETDATE() as date)) --COMPLETION_DATE        END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_MFID_TABLE_VG_607_BEST_EXECUTION_CASH  CreateDate: 2025-06-26 17:55:41.403  ModifyDate: 2025-06-26 17:55:41.403  --- DEFINITION START ---  -- =============================================    -- Author:  <Samad, Mehreen>    -- Create date: <18/06/2019>    -- Description:     -- <Master exception table for BEST EXECUTION RR    -- & MM Exception test for CASH.>    -- =============================================        -- ***************VERSION CONTROL***************        -- *********************************************        CREATE PROCEDURE [dbo].[MASTER_MFID_TABLE_VG_607_BEST_EXECUTION_CASH]     -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,         AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;            --Used to track total time stored procedure took to run    DECLARE @START_TIME as datetime    SET @START_TIME = GETDATE()        IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids    SELECT DISTINCT TRANSACTION_NUMBER, DATA_SOURCE    INTO #distinct_ids    FROM VISTA_STAGING.DBO.VG_607_BEST_EXECUTION_CASH_MM_TABLE        UNION ALL        SELECT DISTINCT TRANSACTION_NUMBER, DATA_SOURCE    FROM VISTA_STAGING.DBO.VG_607_BEST_EXECUTION_CASH_RR_TABLE            --If the master table doesn't exist then we want to use all the data available, otherwise just the most recent data    IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE', 'U') IS NOT NULL    AND OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR_TABLE', 'U') IS NOT NULL    DELETE FROM #distinct_ids     where NOT EXISTS (SELECT od.TRANSACTION_NUMBER          FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_CASH od          WHERE od.TRANSACTION_NUMBER = #distinct_ids.TRANSACTION_NUMBER)    AND #distinct_ids.DATA_SOURCE = 'CM'        IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE', 'U') IS NOT NULL    AND OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR_TABLE', 'U') IS NOT NULL    DELETE FROM #distinct_ids     where NOT EXISTS (SELECT od.MULTI_FUND_ID          FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od          WHERE od.MULTI_FUND_ID = #distinct_ids.TRANSACTION_NUMBER)    AND #distinct_ids.DATA_SOURCE = 'AL'        IF OBJECT_ID('tempdb..#temp_cash_orders', 'U') IS NOT NULL DROP TABLE #temp_cash_orders    SELECT DISTINCT t.ORDER_ID    into #temp_cash_orders    from Vista_Reporting.dbo.CASH_TRADES t    INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = t.TRANSACTION_NUMBER        UNION        SELECT DISTINCT oc.PM_ORD    FROM Vista_Reporting.dbo.TRADES tr    INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = tr.MULTI_FUND_ID    LEFT JOIN Vista_Reporting.dbo.ORDERS_CROSS oc on oc.TRD_ORD = tr.ORD_NUM            IF OBJECT_ID('tempdb..#temp_max_req_orders', 'U') IS NOT NULL DROP TABLE #temp_max_req_orders    SELECT      co.ORDER_ID,     MAX(API_REQUESTED_DATE) AS MAX_API_REQ    INTO #temp_max_req_orders    FROM VISTA_REPORTING.dbo.CASH_ORDERS co    INNER JOIN #temp_cash_orders tco ON co.ORDER_ID = tco.ORDER_ID    GROUP BY co.ORDER_ID            IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades    SELECT      ct.TRANSACTION_NUMBER,     MAX(API_REQUESTED_DATE) AS MAX_API_REQ    INTO #temp_max_req_trades    FROM VISTA_REPORTING.dbo.CASH_TRADES ct    INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER    GROUP BY ct.TRANSACTION_NUMBER        IF OBJECT_ID('tempdb..#MAX_TOUCH_T', 'U') IS NOT NULL DROP TABLE #MAX_TOUCH_T    SELECT DISTINCT      MULTI_FUND_ID,      MAX(TOUCH_COUNT) AS MAX_TOUCH     INTO #MAX_TOUCH_T    FROM VISTA_REPORTING.DBO.TRADES t    INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = t.MULTI_FUND_ID    GROUP BY MULTI_FUND_ID        IF OBJECT_ID('tempdb..#MAX_TOUCH_PM', 'U') IS NOT NULL DROP TABLE #MAX_TOUCH_PM    SELECT DISTINCT      ORD_NUM,      MAX(TOUCH_COUNT) AS MAX_TOUCH     INTO #MAX_TOUCH_PM    FROM VISTA_REPORTING.DBO.PM_ORDERS pm    INNER JOIN #temp_cash_orders tco ON tco.ORDER_ID = pm.ORD_NUM    GROUP BY ORD_NUM                --Losing Bank for CM    IF OBJECT_ID('tempdb..#losingbanktemp', 'U') IS NOT NULL DROP TABLE #losingbanktemp --Only Reverse Repo trades have Cash Bank Rates data (!?)    SELECT DISTINCT     ex.[TRANSACTION_NUMBER],     BANK_CODE = STUFF((         SELECT ', ' + BANK_CODE        FROM VISTA_REPORTING.dbo.CASH_BANK_RATES cbr        left join VISTA_REPORTING.dbo.CASH_TRADES ct        on cbr.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]        WHERE cbr.[TRANSACTION_NUMBER] = ex.[TRANSACTION_NUMBER] and cbr.[BANK_CODE] != ct.[BANK] and ex.[DATA_SOURCE] = 'CM' ORDER BY EX.TRANSACTION_NUMBER, BANK_CODE        FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''),     RATE = STUFF((         SELECT ', ' + CAST(CONVERT(DECIMAL(38,4),RATE) AS varchar(50)) as RATE        FROM VISTA_REPORTING.dbo.CASH_BANK_RATES cbr        left join VISTA_REPORTING.dbo.CASH_TRADES ct        on cbr.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]        WHERE cbr.[TRANSACTION_NUMBER] = ex.[TRANSACTION_NUMBER] and cbr.[BANK_CODE] != ct.[BANK] and ex.[DATA_SOURCE] = 'CM' ORDER BY EX.TRANSACTION_NUMBER, BANK_CODE        FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '')    INTO #losingbanktemp    FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_RR_TABLE ex    UNION    SELECT DISTINCT     ex.[TRANSACTION_NUMBER],     BANK_CODE = STUFF((         SELECT ', ' + BANK_CODE        FROM VISTA_REPORTING.dbo.CASH_BANK_RATES cbr        left join VISTA_REPORTING.dbo.CASH_TRADES ct        on cbr.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]        WHERE cbr.[TRANSACTION_NUMBER] = ex.[TRANSACTION_NUMBER] and cbr.[BANK_CODE] != ct.[BANK] and ex.[DATA_SOURCE] = 'CM' ORDER BY EX.TRANSACTION_NUMBER, BANK_CODE        FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''),     RATE = STUFF((         SELECT ', ' + CAST(CONVERT(DECIMAL(38,4),RATE) AS varchar(50)) as RATE        FROM VISTA_REPORTING.dbo.CASH_BANK_RATES cbr        left join VISTA_REPORTING.dbo.CASH_TRADES ct        on cbr.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]        WHERE cbr.[TRANSACTION_NUMBER] = ex.[TRANSACTION_NUMBER] and cbr.[BANK_CODE] != ct.[BANK] and ex.[DATA_SOURCE] = 'CM' ORDER BY EX.TRANSACTION_NUMBER, BANK_CODE        FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '')    FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE ex    INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER        --Losing Bank for AL    IF OBJECT_ID('tempdb..#losingquotetemp', 'U') IS NOT NULL DROP TABLE #losingquotetemp --No quotes data coming through in Aladdin VISTA_STAGING.dbo.QUOTES for Cash    SELECT DISTINCT     ex.[TRANSACTION_NUMBER],     TRD_COUNTERPARTY = STUFF((         SELECT ', ' + c.TRD_COUNTERPARTY        FROM VISTA_REPORTING.dbo.TRADES t        left join VISTA_REPORTING.dbo.QUOTES q        on q.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]        left join VISTA_REPORTING.dbo.COUNTERPARTIES c        on c.[COUNTERPARTY_CODE] = q.[BROKER]        WHERE t.[MULTI_FUND_ID] = ex.[TRANSACTION_NUMBER] and q.[QUOTE_ORIGIN] = 'QUOTE' and t.[COUNTERPARTY_CODE] != q.[BROKER] and ex.[DATA_SOURCE] = 'AL' ORDER BY ex.TRANSACTION_NUMBER, ', ' + c.TRD_COUNTERPARTY        FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''),     QUOTE_VALUE = STUFF((         SELECT ', ' + CAST(CONVERT(DECIMAL(38,4),q.[QUOTE_VALUE]) AS varchar(50)) as QUOTE_VALUE        FROM VISTA_REPORTING.dbo.TRADES t        left join VISTA_REPORTING.dbo.QUOTES q        on q.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]        left join VISTA_REPORTING.dbo.COUNTERPARTIES c        on c.[COUNTERPARTY_CODE] = q.[BROKER]        WHERE t.[MULTI_FUND_ID] = ex.[TRANSACTION_NUMBER] and q.[QUOTE_ORIGIN] = 'QUOTE' and t.[COUNTERPARTY_CODE] != q.[BROKER] and ex.[DATA_SOURCE] = 'AL' ORDER BY ex.TRANSACTION_NUMBER, ', ' + CAST(CONVERT(DECIMAL(38,4),q.[QUOTE_VALUE]) AS varchar(50))         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '')    INTO #losingquotetemp    FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE ex    INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER        --Static Bank count for AL    IF OBJECT_ID('tempdb..#staticbankcount', 'U') IS NOT NULL DROP TABLE #staticbankcount    SELECT DISTINCT     ex.[TRANSACTION_NUMBER],     COUNT(DISTINCT q.[BROKER]) as BROKER_COUNT    INTO #staticbankcount    FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE ex    left join VISTA_REPORTING.dbo.TRADES t    on ex.[TRANSACTION_NUMBER] = t.[MULTI_FUND_ID] and ex.[DATA_SOURCE] = 'AL'    left join VISTA_REPORTING.dbo.QUOTES q     on t.[MULTI_FUND_ID] = q.[MULTI_FUND_ID] and q.[QUOTE_ORIGIN] = 'QUOTE'     INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER    GROUP BY ex.[TRANSACTION_NUMBER]        --Concatonated fields for AL    IF OBJECT_ID('tempdb..#al_concat_ord', 'U') IS NOT NULL DROP TABLE #al_concat_ord    SELECT DISTINCT     ex.[TRANSACTION_NUMBER],     TRD_ORIG_FACE = STUFF((         SELECT DISTINCT ' | ' +  + CAST(FORMAT(TRD_ORIG_FACE, '#,0.00') AS VARCHAR(50))        FROM VISTA_REPORTING.dbo.TRADES t        WHERE t.[MULTI_FUND_ID] = ex.[TRANSACTION_NUMBER] and ex.[DATA_SOURCE] = 'AL'        ORDER BY  ' | ' +  + CAST(FORMAT(TRD_ORIG_FACE, '#,0.00') AS VARCHAR(50))        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     [STATUS] = STUFF((         SELECT DISTINCT ' | ' +  + CAST([STATUS] AS VARCHAR(50))        FROM VISTA_REPORTING.dbo.PM_ORDERS pm        left join VISTA_REPORTING.dbo.ORDERS_CROSS oc        on oc.[PM_ORD] = pm.[ORD_NUM]        left join VISTA_REPORTING.dbo.TRADES t        on t.[ORD_NUM] = oc.[TRD_ORD]        WHERE t.[MULTI_FUND_ID] = ex.[TRANSACTION_NUMBER] and ex.[DATA_SOURCE] = 'AL'         ORDER BY ' | ' +  + CAST([STATUS] AS VARCHAR(50))        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     TRD_SETTLE_DATE = STUFF((         SELECT DISTINCT ' | ' +  + CAST(FORMAT(TRD_SETTLE_DATE,'dd/MM/yyyy') AS VARCHAR(50))        FROM VISTA_REPORTING.dbo.TRADES t        WHERE t.[MULTI_FUND_ID] = ex.[TRANSACTION_NUMBER] and ex.[DATA_SOURCE] = 'AL'        ORDER BY  ' | ' +  + CAST(FORMAT(TRD_SETTLE_DATE,'dd/MM/yyyy') AS VARCHAR(50))        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, '')    INTO #al_concat_ord    FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE ex    INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER    WHERE ex.[DATA_SOURCE] = 'AL'        --Create Master table for RR    IF OBJECT_ID('tempdb..#temp_final_master_table_rr', 'U') IS NOT NULL DROP TABLE #temp_final_master_table_rr    SELECT DISTINCT     COALESCE(ct.[DEALER_NAME_DECODE],tdd2.[FULL_NAME],tdd.[FULL_NAME],DD.[DEFAULT_DEALER]) as DEALER_NAME,     ct.[BEST_EXECUTION_RR_EXCEPTION_REASON],     ct.[BEST_EXECUTION_RR_NARRATION],     ct.[BANK],        convert(decimal(38,4),ct.[EXECUTED_RATE]) AS EXECUTED_RATE,        convert(decimal(38,4),ct.[AVERAGE_RATE]) AS AVERAGE_RATE,     convert(decimal(38,4),(ct.[EXECUTED_RATE] - ct.[AVERAGE_RATE])) as DEVIATION_FROM_AVG_RATE_BASIS_POINT,     CASE      WHEN ex.[PRODUCT_GROUP_NAME]  = 'Repo' AND ct.[EXECUTED_RATE] > ct.[AVERAGE_RATE] THEN 'No'      WHEN ex.[PRODUCT_GROUP_NAME] != 'Repo' AND ct.[EXECUTED_RATE] < ct.[AVERAGE_RATE] THEN 'No'     ELSE 'Yes'     END AS PRICE_TO_AVG_RATE,     lbt.[BANK_CODE] as LOSING_BANKS,     lbt.[RATE] as LOSING_RATES,     ct.[STATIC_BANK_COUNT],     ct.[NOOF_QUOTES] as NO_OF_QUOTES,        ex.[VG_607_RR] as EXCEPTION_FLAG,     FORMAT(ct.[EXECUTED_DATETIME],'dd/MM/yyyy HH:mm:ss') as EXECUTED_DATE_TIME,     ct.[CLIENT_FUND_OR_POOL_CODE] as CLIENT_FUND_POOL_CODE,     ct.[BASE_FUND_CODE],     ct.[TRADE_CURRENCY] as CURRENCY,     ct.[PRODUCT],     FORMAT(ct.[DEALT_AMOUNT], '#,0.00') as DEALT_AMOUNT,     ct.[TERM],     DATEDIFF(DAY,ct.[VALUE_DATE],ct.[MATURITY_DATE]) as NO_OF_DAYS,     FORMAT(cT.[TRADE_DATE],'dd/MM/yyyy') as TRADE_DATE,     FORMAT(ct.[VALUE_DATE],'dd/MM/yyyy') as VALUE_DATE,     FORMAT(ct.[MATURITY_DATE],'dd/MM/yyyy') as MATURITY_DATE,     ct.[TRANSACTION_TYPE],     nullif(co.[CUSTOM_INSTRUCTION], '') as CUSTOM_INSTRUCTION,     ct.[BUSINESS_GROUP],     tdd.[FULL_NAME] as [INSTRUCTED_BY],     tdd2.[FULL_NAME] as [ACCEPTED_BY],     co.[INSTRUCTION_STATUS_DECODE] as INSTRUCTION_STATUS,     ct.[TRANSACTION_STATUS_DECODE] as TRANSACTION_STATUS,     ct.[ORDER_ID],     ex.[TRANSACTION_NUMBER],     FORMAT(co.[INSTRUCTED_AMOUNT], '#,0.00') as INSTRUCTED_AMOUNT,        ex.[VG_607_CREATETIME_RR] as CREATE_DATE,     ex.[DATA_SOURCE],     FORMAT(ct.[EXECUTED_DATETIME],'dd/MM/yyyy HH:mm:ss') as OS_EXECUTED_DATE_TIME    INTO #temp_final_master_table_rr    FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_RR_TABLE ex    inner join #distinct_ids di on di.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER and ex.DATA_SOURCE = di.DATA_SOURCE    left join( select ct.* from  VISTA_REPORTING.dbo.CASH_TRADES ct    inner join #temp_max_req_trades req on req.MAX_API_REQ = ct.API_REQUESTED_DATE and req.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER) ct     on ct.[TRANSACTION_NUMBER] = ex.[TRANSACTION_NUMBER]    left join ( select distinct CO.* from VISTA_REPORTING.dbo.CASH_ORDERS co     inner join #temp_max_req_orders req on req.ORDER_ID = co.ORDER_ID and req.MAX_API_REQ = co.API_REQUESTED_DATE) co     on ct.[ORDER_ID] = co.[ORDER_ID]    left join #losingbanktemp lbt    on ex.[TRANSACTION_NUMBER] = lbt.[TRANSACTION_NUMBER]    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd    on co.[INSTRUCTED_BY] = tdd.[MG_USER_ID] AND CAST(co.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2    on co.[ACCEPTED_BY] = tdd2.[MG_USER_ID] AND CAST(co.[PULL_DATE] AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)    LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'Best Execution RR'                     AND CAST(COALESCE(ct.PULL_DATE,co.[PULL_DATE]) AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)            --Create Master table for MM    IF OBJECT_ID('tempdb..#temp_final_master_table_mm', 'U') IS NOT NULL DROP TABLE #temp_final_master_table_mm    SELECT DISTINCT     COALESCE(ct.[DEALER_NAME_DECODE],tdd2.[FULL_NAME],tdd.[FULL_NAME],DD.[DEFAULT_DEALER]) as DEALER_NAME,     ct.[BANK],        convert(decimal(38,4),ct.[EXECUTED_RATE]) AS EXECUTED_RATE,     convert(decimal(38,4),CRR.[INDICATIVE_REF_RATE]) as REFERENCE_RATE_REUTERS,     (ct.[EXECUTED_RATE] - CRR.[INDICATIVE_REF_RATE]) as [DIFFERENCE_BPS],     ref_crr.[TOLERANCE] as THRESHOLD_FOR_DEPOSITS,     lbt.[BANK_CODE] as LOSING_BANKS,     lbt.[RATE] as LOSING_RATES,     ct.[STATIC_BANK_COUNT],     ct.[NOOF_QUOTES] as NO_OF_QUOTES,     ref_q.[NO_OF_QUOTES_THRESHOLD] as BANK_COUNT_THRESHOLD,     CASE       WHEN ex.[NWQ_EXCEPTION] = 1 THEN 'Exception'     ELSE NULL     END AS NWQ_EXCEPTION,     CASE       WHEN ex.[B3Q_EXCEPTION] = 1 THEN 'Exception'     ELSE NULL     END AS [B3Q_EXCEPTION],     CASE       WHEN ex.[CRR_EXCEPTION] = 1 THEN 'Exception'      WHEN ct.[PRODUCT] NOT IN ('CP','CD','UKTB')      THEN        CASE         WHEN CRR.[INDICATIVE_REF_RATE] is null or CRR.[INDICATIVE_REF_RATE] = 0 or ct.EXECUTED_RATE > CRR.[INDICATIVE_REF_RATE] THEN NULL --last condition is around the 'in favour' trades        WHEN abs((ct.[EXECUTED_RATE] - CRR.[INDICATIVE_REF_RATE])) > ref_crr.[TOLERANCE] and ct.[TRANSACTION_STATUS_DECODE] not in ('Deleted','Cancelled') THEN 'Exception'       ELSE NULL       END     ELSE NULL     END AS [CRR_EXCEPTION],        ex.[VG_607_MM] as EXCEPTION_FLAG,     FORMAT(ct.[CONFIRMED_DATETIME],'dd/MM/yyyy HH:mm:ss') as CONFIRMED_DATE_TIME,     ct.[CLIENT_FUND_OR_POOL_CODE] as CLIENT_FUND_POOL_CODE,     ct.[BASE_FUND_CODE],     ct.[TRADE_CURRENCY] as CURRENCY,     ct.[PRODUCT],     FORMAT(ct.[DEALT_AMOUNT], '#,0.00') as [DEALT_AMOUNT],     ct.TERM as TERM,     DATEDIFF(DAY,ct.[VALUE_DATE],ct.[MATURITY_DATE]) as NO_OF_DAYS,     FORMAT(ct.[TRADE_DATE],'dd/MM/yyyy') as TRADE_DATE,     FORMAT(ct.[VALUE_DATE],'dd/MM/yyyy') as VALUE_DATE,     CAST(FORMAT(ct.[MATURITY_DATE],'dd/MM/yyyy') as VARCHAR(50)) as [MATURITY_DATE],     ct.[TRANSACTION_TYPE],     tdd.[FULL_NAME] as [INSTRUCTED_BY],     NULLIF(co.[CUSTOM_INSTRUCTION], '') as CUSTOM_INSTRUCTION,     ct.[BUSINESS_GROUP],     tdd2.[FULL_NAME] as [ACCEPTED_BY],     CAST(co.[INSTRUCTION_STATUS_DECODE] as VARCHAR(20)) as [INSTRUCTION_STATUS],     CAST(ct.[TRANSACTION_STATUS_DECODE] as VARCHAR(20)) as [TRANSACTION_STATUS],     ct.[ORDER_ID],     ex.[TRANSACTION_NUMBER],     FORMAT(co.[INSTRUCTED_AMOUNT], '#,0.00') as INSTRUCTED_AMOUNT,        ex.[VG_607_CREATETIME_MM] as CREATE_DATE,     ex.[DATA_SOURCE],     FORMAT(ct.[CONFIRMED_DATETIME],'dd/MM/yyyy HH:mm:ss') as OC_CONFIRMED_DATE_TIME    INTO #temp_final_master_table_mm    FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE ex    inner join #distinct_ids di on di.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER and ex.DATA_SOURCE = di.DATA_SOURCE    left join VISTA_REPORTING.dbo.CASH_TRADES ct     on ct.[TRANSACTION_NUMBER] = ex.[TRANSACTION_NUMBER]    left join ( select distinct co.* from VISTA_REPORTING.dbo.CASH_ORDERS co    inner join #temp_max_req_orders req on req.ORDER_ID = co.ORDER_ID and req.MAX_API_REQ = co.API_REQUESTED_DATE) co     on ct.[ORDER_ID] = co.[ORDER_ID]    left join #losingbanktemp lbt    on ex.[TRANSACTION_NUMBER] = lbt.[TRANSACTION_NUMBER]    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd    on co.[INSTRUCTED_BY] = tdd.[MG_USER_ID] AND CAST(co.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2    on co.[ACCEPTED_BY] = tdd2.[MG_USER_ID] AND CAST(co.[PULL_DATE] AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)    LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'Best Execution MM'                     AND CAST(COALESCE(ct.PULL_DATE,co.[PULL_DATE]) AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)    LEFT JOIN VISTA_REPORTING.dbo.CASH_REFERENCE_RATES CRR on CRR.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER    left join VISTA_STAGING.dbo.REF_CASH_CRR_THRESHOLD ref_crr    on ref_crr.[CURRENCY] = ct.[TRADE_CURRENCY] AND ref_crr.[PRODUCT] = ct.[PRODUCT] AND CAST(ct.[PULL_DATE] as DATE) BETWEEN CAST(ref_crr.[DATE_FROM] as date) AND CAST(ref_crr.[DATE_TO] as DATE)    left join VISTA_STAGING.dbo.REF_CASH_BESTEXC_QUOTES_THRESHOLD ref_q    on ct.[PRODUCT] = ref_q.[PRODUCT] AND CAST(ct.[PULL_DATE] as DATE) BETWEEN CAST(ref_q.[DATE_FROM] as date) AND CAST(ref_q.[DATE_TO] as DATE)        WHERE ex.[DATA_SOURCE] = 'CM'        UNION        SELECT DISTINCT     COALESCE(tdd.[FULL_NAME],tdd3.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) as [DEALER_NAME],     COALESCE(t.[TRD_EX_BROKER_CODE], t.[TRD_COUNTERPARTY]) as [BANK],        convert(decimal(38,4),t.[TRD_PRICE]) as [EXECUTED_RATE],     convert(decimal(38,4),ex.[INDICATIVE_REF_RATE]) as REFERENCE_RATE_REUTERS,     ex.[DIFFERENCE_BPS],     ex.[TOLERANCE] as THRESHOLD_FOR_DEPOSITS,     lqt.[TRD_COUNTERPARTY] as LOSING_BANKS,     lqt.[QUOTE_VALUE] as LOSING_RATES,     sbc.[BROKER_COUNT] as [STATIC_BANK_COUNT],     ex.[NUM_QUOTES] as NO_OF_QUOTES,     ex.[NO_OF_QUOTES_THRESHOLD] as BANK_COUNT_THRESHOLD,     CASE       WHEN ex.[NWQ_EXCEPTION] = 1 THEN 'Exception'     ELSE NULL     END AS NWQ_EXCEPTION,     CASE       WHEN ex.[B3Q_EXCEPTION] = 1 THEN 'Exception'     ELSE NULL     END AS [B3Q_EXCEPTION],     CASE       WHEN ex.[CRR_EXCEPTION] = 1 THEN 'Exception'     ELSE NULL     END AS [CRR_EXCEPTION],        ex.[VG_607_MM] as EXCEPTION_FLAG,     FORMAT(t.[EXECUTION_TIME],'dd/MM/yyyy HH:mm:ss') as CONFIRMED_DATE_TIME,     NULL as CLIENT_FUND_POOL_CODE, -- No value given     t.[PORTFOLIOS_PORTFOLIO_NAME] as [BASE_FUND_CODE],     t.[SM_CURRENCY] as CURRENCY,     ex.[PRODUCT],      conc_al.[TRD_ORIG_FACE] as [DEALT_AMOUNT],     NULL as TERM,     DATEDIFF(DAY,t.[TRD_TRADE_DATE],t.[TRD_TRADE_DATE]) as NO_OF_DAYS, -- Value date given as same as Trade Date     FORMAT(t.[TRD_TRADE_DATE],'dd/MM/yyyy') as [TRADE_DATE],     FORMAT(t.[TRD_TRADE_DATE],'dd/MM/yyyy') as [VALUE_DATE],      conc_al.[TRD_SETTLE_DATE] as [MATURITY_DATE], -- Shouldn't this be MATURITY?     t.TRAN_TYPE as [TRANSACTION_TYPE],     tdd2.[FULL_NAME] as INSTRUCTED_BY,     NULLIF(pm.[COMMENTS_VALUE],'') as [CUSTOM_INSTRUCTION],     CASE      WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP'      WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG'      WHEN (pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM'     ELSE NULL     END AS [BUSINESS_GROUP],     tdd3.[FULL_NAME] as ACCEPTED_BY,     conc_al.[STATUS] as [INSTRUCTION_STATUS],     t.[TRD_STATUS] as [TRANSACTION_STATUS],     oc.[PM_ORD] as ORDER_ID,     ex.[TRANSACTION_NUMBER],     FORMAT(pm.[FACE], '#,0.00') as [INSTRUCTED_AMOUNT], -- No value given        ex.[VG_607_CREATETIME_MM] as CREATE_DATE,     ex.[DATA_SOURCE],     FORMAT(t.[EXECUTION_TIME],'dd/MM/yyyy HH:mm:ss') as OS_EXECUTION_TIME    FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE ex    inner join #distinct_ids di on di.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER and ex.DATA_SOURCE = di.DATA_SOURCE    left join (select distinct t.* from VISTA_REPORTING.dbo.TRADES t    inner join #MAX_TOUCH_T mtt on mtt.MULTI_FUND_ID = t.MULTI_FUND_ID and mtt.MAX_TOUCH = t.TOUCH_COUNT) t    on ex.[TRANSACTION_NUMBER] = t.[MULTI_FUND_ID]    left join VISTA_REPORTING.dbo.ORDERS_CROSS oc    on t.[ORD_NUM] = oc.[TRD_ORD]    left join (select distinct pm.* from VISTA_REPORTING.dbo.PM_ORDERS pm    inner join #MAX_TOUCH_PM mtt on mtt.ORD_NUM = pm.ORD_NUM and mtt.MAX_TOUCH = pm.TOUCH_COUNT)  pm    on oc.[PM_ORD] = pm.[ORD_NUM]    left join #losingquotetemp lqt    on ex.[TRANSACTION_NUMBER] = lqt.[TRANSACTION_NUMBER]    left join #staticbankcount sbc    on ex.[TRANSACTION_NUMBER] = sbc.[TRANSACTION_NUMBER]    left join #al_concat_ord conc_al    on conc_al.[TRANSACTION_NUMBER] = ex.[TRANSACTION_NUMBER]    left join (SELECT DISTINCT FUND_ID, PORTFOLIO_GROUP_NAME FROM VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY) pgt    on t.[FUND] = pgt.[FUND_ID]    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd    on t.[TRD_TRADER] = tdd.[INITIALS] AND CAST(t.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2    on pm.[PM] = tdd2.[INITIALS] AND CAST(t.[PULL_DATE] AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd3    on pm.[TRADER] = tdd3.[INITIALS] AND CAST(t.[PULL_DATE] AS DATE) BETWEEN CAST(tdd3.[DATE_FROM] AS DATE) AND CAST(tdd3.[DATE_TO] AS DATE)    LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'Best Execution MM'                     AND CAST(COALESCE(t.PULL_DATE,pm.[PULL_DATE]) AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)        WHERE ex.[DATA_SOURCE] = 'AL'              IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE', 'U') IS NOT NULL    DELETE FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE    WHERE EXISTS (SELECT DISTINCT TRANSACTION_NUMBER    FROM #distinct_ids    WHERE #distinct_ids.TRANSACTION_NUMBER = VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE.TRANSACTION_NUMBER)        IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR_TABLE', 'U') IS NOT NULL    DELETE FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR_TABLE    WHERE EXISTS (SELECT DISTINCT TRANSACTION_NUMBER    FROM #distinct_ids    WHERE #distinct_ids.TRANSACTION_NUMBER = VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR_TABLE.TRANSACTION_NUMBER)            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE    SELECT *    FROM #temp_final_master_table_mm        ELSE        SELECT *    INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE    FROM #temp_final_master_table_mm            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR_TABLE', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR_TABLE    SELECT *    FROM #temp_final_master_table_rr        ELSE        SELECT *    INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR_TABLE    FROM #temp_final_master_table_rr            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(    'MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR/MM_TABLE', --TABLE_NAME    @START_TIME, --START_TIME    GETDATE(), --END_TIME    DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS    CAST(GETDATE() as date)) --COMPLETION_DATE            IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes              WHERE name = N'vg_607_tdate_cash_mm_idx')       DROP INDEX vg_607_tdate_cash_mm_idx     ON VISTA_REPORTING.[dbo].MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE     CREATE NONCLUSTERED INDEX vg_607_tdate_cash_mm_idx ON VISTA_REPORTING.[dbo].MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE (TRADE_DATE)        IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes              WHERE name = N'vg_607_excepflag_cash_mm_idx')       DROP INDEX vg_607_excepflag_cash_mm_idx     ON VISTA_REPORTING.[dbo].MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE     CREATE NONCLUSTERED INDEX vg_607_excepflag_cash_mm_idx ON VISTA_REPORTING.[dbo].MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE (EXCEPTION_FLAG)        IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes              WHERE name = N'vg_607_cdate_cash_mm_idx')       DROP INDEX vg_607_cdate_cash_mm_idx     ON VISTA_REPORTING.[dbo].MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE     CREATE NONCLUSTERED INDEX vg_607_cdate_cash_mm_idx ON VISTA_REPORTING.[dbo].MASTER_MFID_VG_607_BEST_EXECUTION_CASH_MM_TABLE (CREATE_DATE)        IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes              WHERE name = N'vg_607_tdate_cash_rr_idx')       DROP INDEX vg_607_tdate_cash_rr_idx     ON VISTA_REPORTING.[dbo].MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR_TABLE     CREATE NONCLUSTERED INDEX vg_607_tdate_cash_rr_idx ON VISTA_REPORTING.[dbo].MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR_TABLE (TRADE_DATE)        IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes              WHERE name = N'vg_607_excepflag_cash_rr_idx')       DROP INDEX vg_607_excepflag_cash_rr_idx     ON VISTA_REPORTING.[dbo].MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR_TABLE     CREATE NONCLUSTERED INDEX vg_607_excepflag_cash_rr_idx ON VISTA_REPORTING.[dbo].MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR_TABLE (EXCEPTION_FLAG)        IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes              WHERE name = N'vg_607_cdate_cash_rr_idx')       DROP INDEX vg_607_cdate_cash_rr_idx     ON VISTA_REPORTING.[dbo].MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR_TABLE     CREATE NONCLUSTERED INDEX vg_607_cdate_cash_rr_idx ON VISTA_REPORTING.[dbo].MASTER_MFID_VG_607_BEST_EXECUTION_CASH_RR_TABLE (CREATE_DATE)            IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids    IF OBJECT_ID('tempdb..#temp_cash_orders', 'U') IS NOT NULL DROP TABLE #temp_cash_orders    IF OBJECT_ID('tempdb..#temp_max_req_orders', 'U') IS NOT NULL DROP TABLE #temp_max_req_orders    IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades    IF OBJECT_ID('tempdb..#MAX_TOUCH_T', 'U') IS NOT NULL DROP TABLE #MAX_TOUCH_T    IF OBJECT_ID('tempdb..#MAX_TOUCH_PM', 'U') IS NOT NULL DROP TABLE #MAX_TOUCH_PM    IF OBJECT_ID('tempdb..#losingbanktemp', 'U') IS NOT NULL DROP TABLE #losingbanktemp    IF OBJECT_ID('tempdb..#losingquotetemp', 'U') IS NOT NULL DROP TABLE #losingquotetemp    IF OBJECT_ID('tempdb..#staticbankcount', 'U') IS NOT NULL DROP TABLE #staticbankcount    IF OBJECT_ID('tempdb..#al_concat_ord', 'U') IS NOT NULL DROP TABLE #al_concat_ord    IF OBJECT_ID('tempdb..#temp_final_master_table_rr', 'U') IS NOT NULL DROP TABLE #temp_final_master_table_rr    IF OBJECT_ID('tempdb..#temp_final_master_table_mm', 'U') IS NOT NULL DROP TABLE #temp_final_master_table_mm        END            --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_MFID_TABLE_VG_607_BEST_EXECUTION_FX  CreateDate: 2025-06-26 17:56:26.787  ModifyDate: 2025-07-01 11:13:43.783  --- DEFINITION START ---  -- =============================================      -- Author:  <Samad, Mehreen>      -- Create date: <10/07/2019>      -- Description:       -- <Master exception table for Best Execution      -- Exception test for FX.>      -- =============================================            -- ***************VERSION CONTROL***************            -- *********************************************            CREATE   PROCEDURE [dbo].[MASTER_MFID_TABLE_VG_607_BEST_EXECUTION_FX]       -- Add the parameters for the stored procedure here       --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,             AS      BEGIN       -- SET NOCOUNT ON added to prevent extra result sets from       -- interfering with SELECT statements.       SET NOCOUNT ON;                    DECLARE @START_TIME as datetime       SET @START_TIME = GETDATE()                   IF OBJECT_ID('tempdb..#distinct_ids_al', 'U') IS NOT NULL DROP TABLE #distinct_ids_al       SELECT DISTINCT         pr.ORD_NUM as TRD_ORD,        oc.PM_ORD AS ORD_NUM,        pr.MULTI_FUND_ID       INTO #distinct_ids_al       FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr       LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = pr.ORD_NUM       WHERE pr.DEALING_DESK = 'FX'                   IF OBJECT_ID('tempdb..#distinct_ids_fx', 'U') IS NOT NULL DROP TABLE #distinct_ids_fx       SELECT DISTINCT        fxt.ORDER_ID,        fxo.ORD_NUM,        vg.TRADE_ID AS MULTI_FUND_ID        INTO #distinct_ids_fx       FROM Vista_Staging.dbo.VG_607_BEST_EXECUTION_FX_TABLE vg       LEFT JOIN Vista_Reporting.dbo.FX_TRADES fxt ON fxt.TRADE_ID = vg.TRADE_ID       LEFT JOIN Vista_Reporting.dbo.FX_ORDERS fxo ON fxo.FXM_ORDER_ID = fxt.ORDER_ID                     IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE', 'U') IS NOT NULL       DELETE FROM #distinct_ids_fx where NOT EXISTS (SELECT DISTINCT od.TRADE_ID                     FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_FX od                     WHERE od.TRADE_ID = #distinct_ids_fx.MULTI_FUND_ID)                   IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE', 'U') IS NOT NULL       DELETE FROM #distinct_ids_al where NOT EXISTS (SELECT DISTINCT od.MULTI_FUND_ID                     FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                     WHERE od.MULTI_FUND_ID = #distinct_ids_al.MULTI_FUND_ID)                   IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE  #distinct_ids       SELECT *        INTO #distinct_ids       FROM #distinct_ids_al             UNION ALL             SELECT *        FROM #distinct_ids_fx                   IF OBJECT_ID('tempdb..#max_touch_t', 'U') IS NOT NULL DROP TABLE #max_touch_t       SELECT DISTINCT         t.MULTI_FUND_ID,         MAX(t.TOUCH_COUNT) as MAX_TOUCH        INTO #max_touch_t       FROM VISTA_REPORTING.dbo.TRADES t       WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)       GROUP BY MULTI_FUND_ID                   IF OBJECT_ID('tempdb..#max_touch_pm', 'U') IS NOT NULL DROP TABLE #max_touch_pm       SELECT DISTINCT         pm.ord_num,         MAX(pm.TOUCH_COUNT) as MAX_TOUCH        INTO #max_touch_pm       FROM VISTA_REPORTING.dbo.PM_ORDERS pm       WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = pm.ORD_NUM)       GROUP BY ord_num                   IF OBJECT_ID('tempdb..#losing_bank_trades', 'U') IS NOT NULL DROP TABLE #losing_bank_trades       SELECT DISTINCT         ex.TRADE_ID,        CONVERT(VARCHAR(20), FXB.LOSING_BANK) AS LOSING_BANK,         CONVERT(VARCHAR(20), FXB.PROFIT_OR_LOSS) AS PROFIT_OR_LOSS,         CONVERT(VARCHAR(20), FXB.ALL_IN_RATE) AS ALL_IN_RATE,         CONVERT(VARCHAR(20), FXB.SWAP_POINTS) AS SWAP_POINTS,        FXT.EXECUTED_BANK       INTO #losing_bank_trades       FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE ex       LEFT JOIN VISTA_REPORTING.dbo.FX_LOSING_BANKS FXB ON ex.TRADE_ID = FXB.TRADE_ID       LEFT JOIN VISTA_REPORTING.dbo.FX_TRADES FXT on FXB.TRADE_ID = FXT.TRADE_ID       WHERE FXB.TRADE_ID = ex.TRADE_ID           AND FXB.LOSING_BANK != FXT.EXECUTED_BANK           AND ex.[DATA_SOURCE] = 'FX'          AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)                   IF OBJECT_ID('tempdb..#mapped_bank_best_ex', 'U') IS NOT NULL DROP TABLE #mapped_bank_best_ex       SELECT DISTINCT        ex.TRADE_ID,        CONVERT(VARCHAR(20),FXB.BANK_NAME) AS BANK_NAME       INTO #mapped_bank_best_ex       FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE ex       INNER JOIN VISTA_REPORTING.dbo.FX_MAPPED_BANKS fxb ON fxb.TRADE_ID=ex.TRADE_ID       WHERE ex.DATA_SOURCE = 'FX'          AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)                   --Losing Bank temp       IF OBJECT_ID('tempdb..#losingbanktemp', 'U') IS NOT NULL DROP TABLE #losingbanktemp        SELECT DISTINCT        ex.TRADE_ID,        STUFF((          SELECT ', ' + LOSING_BANK         FROM #losing_bank_trades fxb         WHERE fxb.TRADE_ID = ex.TRADE_ID         ORDER BY LOSING_BANK         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS LOSING_BANK,        STUFF((          SELECT ', ' + PROFIT_OR_LOSS         FROM #losing_bank_trades fxb         WHERE fxb.TRADE_ID = ex.TRADE_ID          ORDER BY PROFIT_OR_LOSS         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS PROFIT_OR_LOSS,         STUFF((          SELECT ', ' + ALL_IN_RATE         FROM #losing_bank_trades fxb         WHERE fxb.TRADE_ID = ex.TRADE_ID          ORDER BY ALL_IN_RATE         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS ALL_IN_RATE,         STUFF((          SELECT ', ' + SWAP_POINTS         FROM #losing_bank_trades fxb         WHERE fxb.TRADE_ID = ex.TRADE_ID          ORDER BY SWAP_POINTS         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS SWAP_POINTS,         STUFF((          SELECT ', ' + FXB.BANK_NAME         FROM #mapped_bank_best_ex fxb         WHERE fxb.TRADE_ID = ex.TRADE_ID          ORDER BY BANK_NAME         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS MAPPED_BANKS       INTO #losingbanktemp       FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE ex       WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)                   --Losing Bank count for FX       --IF OBJECT_ID('tempdb..#losingbankcount', 'U') IS NOT NULL DROP TABLE #losingbankcount       --SELECT DISTINCT       -- ex.[TRADE_ID],       -- COUNT(DISTINCT fxb.[LOSING_BANK]) as LOSING_BANK_COUNT       --INTO #losingbankcount       --FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE ex       --left join VISTA_REPORTING.dbo.FX_LOSING_BANKS fxb on ex.[TRADE_ID] = fxb.[TRADE_ID] and ex.[DATA_SOURCE] = 'FX'       --left join VISTA_REPORTING.dbo.FX_TRADES fxt on fxb.[TRADE_ID] = fxt.[TRADE_ID] and fxb.[LOSING_BANK] != fxt.[EXECUTED_BANK] and ex.[DATA_SOURCE] = 'FX'       --GROUP BY ex.[TRADE_ID]       --order by ex.TRADE_ID             IF OBJECT_ID('tempdb..#losingbankcount', 'U') IS NOT NULL DROP TABLE #losingbankcount       SELECT DISTINCT        ex.[TRADE_ID],        COUNT(DISTINCT ex.[LOSING_BANK]) as LOSING_BANK_COUNT       INTO #losingbankcount       FROM #losing_bank_trades ex       GROUP BY ex.[TRADE_ID]                   IF OBJECT_ID('tempdb..#trades_orders', 'U') IS NOT NULL DROP TABLE #trades_orders       SELECT DISTINCT         fxt.TRADE_ID,         CONVERT(VARCHAR(50), fxo.TRADE_VENUE) AS TRADE_VENUE,        CONVERT(VARCHAR(50),format(fxt.MARKET_ARRIVAL_DATE_TIME, 'dd/MM/yyyy HH:mm:ss')) AS MARKET_ARRIVAL_DATE_TIME       INTO #trades_orders       FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE ex       LEFT JOIN VISTA_REPORTING.dbo.FX_TRADES fxt on fxt.TRADE_ID = ex.TRADE_ID       LEFT JOIN VISTA_REPORTING.dbo.FX_ORDERS fxo ON fxo.[FXM_ORDER_ID] = fxt.[ORDER_ID]       WHERE fxt.[TRADE_ID] = ex.[TRADE_ID]           AND ex.[DATA_SOURCE] = 'FX'          AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)                   --FX Concatonated fields       IF OBJECT_ID('tempdb..#conc_fx', 'U') IS NOT NULL DROP TABLE #conc_fx        SELECT DISTINCT        ex.[TRADE_ID],       TRADE_VENUE = STUFF((            SELECT ' | ' + tro.TRADE_VENUE           FROM (SELECT DISTINCT TRADE_ID, TRADE_VENUE FROM #trades_orders) tro           WHERE tro.TRADE_ID=ex.TRADE_ID           ORDER BY TRADE_VENUE           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),        MARKET_ARRIVAL_DATE_TIME = STUFF((            SELECT ' | ' + tro.MARKET_ARRIVAL_DATE_TIME           FROM (SELECT DISTINCT TRADE_ID, MARKET_ARRIVAL_DATE_TIME FROM #trades_orders) tro           WHERE tro.TRADE_ID=ex.TRADE_ID           ORDER BY MARKET_ARRIVAL_DATE_TIME           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'')       INTO #conc_fx       FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE ex       WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)                   IF OBJECT_ID('tempdb..#AL_trades_orders', 'U') IS NOT NULL DROP TABLE #AL_trades_orders       SELECT DISTINCT        ex.TRADE_ID,        t.TRD_COUNTERPARTY,        q.QUOTE_VALUE,        pl.BROKER       INTO #AL_trades_orders       FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE ex       left join VISTA_REPORTING.dbo.TRADES t on ex.[TRADE_ID] = t.[MULTI_FUND_ID]       left join VISTA_REPORTING.dbo.QUOTES q on q.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]       left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on t.[ORD_NUM] = oc.[TRD_ORD]       left join VISTA_REPORTING.dbo.PM_ORDERS pm on oc.[PM_ORD] = pm.[ORD_NUM]       left join (SELECT DISTINCT ORD_NUM, [BROKER] FROM VISTA_REPORTING.dbo.PLACEMENTS) pl on pm.[ORD_NUM] = pl.[ORD_NUM]       WHERE ex.[DATA_SOURCE] = 'AL'           AND t.[MULTI_FUND_ID] = ex.[TRADE_ID]           AND q.[QUOTE_ORIGIN] = 'QUOTE'           AND pl.[BROKER] != q.[BROKER]          AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)                   --Losing Bank count for AL       IF OBJECT_ID('tempdb..#losingbankcount_al', 'U') IS NOT NULL DROP TABLE #losingbankcount_al       SELECT DISTINCT        [TRADE_ID],        COUNT(DISTINCT [BROKER]) as LOSING_BANK_COUNT       INTO #losingbankcount_al       FROM #AL_trades_orders        GROUP BY [TRADE_ID]                   --Losing Bank for AL       IF OBJECT_ID('tempdb..#losingquotetemp_al', 'U') IS NOT NULL DROP TABLE #losingquotetemp_al        SELECT DISTINCT        ex.[TRADE_ID],        TRD_COUNTERPARTY = STUFF((            SELECT ', ' + TRD_COUNTERPARTY           FROM (SELECT DISTINCT TRADE_ID, TRD_COUNTERPARTY FROM #AL_trades_orders) ato           WHERE ato.TRADE_ID = ex.TRADE_ID           ORDER BY TRD_COUNTERPARTY           FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''),        QUOTE_VALUE = STUFF((            SELECT ', ' + CAST(CONVERT(DECIMAL(38,8),ato.[QUOTE_VALUE]) AS varchar(50)) as QUOTE_VALUE           FROM (SELECT DISTINCT TRADE_ID, [QUOTE_VALUE] FROM #AL_trades_orders) ato           WHERE ato.TRADE_ID = ex.TRADE_ID           ORDER BY QUOTE_VALUE           FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '')       INTO #losingquotetemp_al       FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE ex       WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)                   --Static Bank count for AL       IF OBJECT_ID('tempdb..#staticbankcount_al', 'U') IS NOT NULL DROP TABLE #staticbankcount_al       SELECT DISTINCT        ex.[TRADE_ID],        COUNT(DISTINCT pl.[BROKER]) as BROKER_COUNT       INTO #staticbankcount_al       FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE ex       left join VISTA_REPORTING.dbo.TRADES t on ex.[TRADE_ID] = t.[MULTI_FUND_ID] and ex.[DATA_SOURCE] = 'AL'       left join VISTA_REPORTING.dbo.QUOTES q on q.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]       left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on t.[ORD_NUM] = oc.[TRD_ORD]       left join VISTA_REPORTING.dbo.PM_ORDERS pm on oc.[PM_ORD] = pm.[ORD_NUM]       left join (SELECT DISTINCT ORD_NUM, [BROKER] FROM VISTA_REPORTING.dbo.PLACEMENTS) pl on pm.[ORD_NUM] = pl.[ORD_NUM]       WHERE t.[MULTI_FUND_ID] = ex.[TRADE_ID]           AND q.[QUOTE_ORIGIN] = 'QUOTE'           AND ex.[DATA_SOURCE] = 'AL'          AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)       GROUP BY ex.[TRADE_ID]                   --Static Banks for AL       IF OBJECT_ID('tempdb..#staticbanktemp_al', 'U') IS NOT NULL DROP TABLE #staticbanktemp_al        SELECT DISTINCT        ex.[TRADE_ID],        TRD_COUNTERPARTY = STUFF((            SELECT DISTINCT ', ' + t.TRD_COUNTERPARTY           FROM VISTA_REPORTING.dbo.TRADES t            left join VISTA_REPORTING.dbo.QUOTES q  on q.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]           left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on t.[ORD_NUM] = oc.[TRD_ORD]           left join VISTA_REPORTING.dbo.PM_ORDERS pm on oc.[PM_ORD] = pm.[ORD_NUM]           left join (SELECT DISTINCT ORD_NUM, [BROKER] FROM VISTA_REPORTING.dbo.PLACEMENTS) pl on pm.[ORD_NUM] = pl.[ORD_NUM]           WHERE t.[MULTI_FUND_ID] = ex.[TRADE_ID] and q.[QUOTE_ORIGIN] = 'QUOTE' and ex.[DATA_SOURCE] = 'AL'           FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '')       INTO #staticbanktemp_al       FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE ex       WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)                   --Create Master table        IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table       SELECT DISTINCT        COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) as DEALER_NAME,        fxt.[EXECUTED_BANK],        CASE WHEN ex.[NWQ_EXCEPTION] = 1 THEN 'Exception' when ex.NWQ_EXCEPTION = 0 then '' end as NWQ_EXCEPTION,        CASE WHEN ex.[B3Q_EXCEPTION] = 1 THEN 'Exception' when ex.B3Q_EXCEPTION = 0 then '' end as B3Q_EXCEPTION,        CASE WHEN ex.[SRR_EXCEPTION] = 1 THEN 'Exception' WHEN ex.SRR_EXCEPTION = 0 THEN '' END AS SRR_EXCEPTION,        CASE WHEN ex.VG_607 = 1 THEN 'Exception' WHEN ex.VG_607 = 0 THEN '' END AS EXCEPTION,        CASE WHEN FXT.EXECUTED_RATE_FAR IS NULL THEN CAST(fxt.[EXECUTED_RATE] as varchar(50)) WHEN FXT.EXECUTED_RATE_FAR IS NOT NULL THEN (CAST(fxt.[EXECUTED_RATE] as varchar(50)) + ' | ' + CAST(fxt.[EXECUTED_RATE_FAR] as varchar(50))) END as [ALL_IN_RATE],          CASE WHEN FXT.SPOT_RATE_FAR IS NULL THEN CAST(fxt.[SPOT_RATE] as varchar(50)) WHEN FXT.SPOT_RATE_FAR IS NOT NULL THEN (CAST(fxt.[SPOT_RATE] as varchar(50)) + ' | ' + CAST(fxt.[SPOT_RATE_FAR] as varchar(50))) END as [SPOT_RATE],        CASE WHEN FXT.FORWARD_POINTS_FAR IS NULL THEN CAST(fxt.[FORWARD_POINTS] as varchar(50)) WHEN FXT.FORWARD_POINTS_FAR IS NOT NULL THEN  (CAST(fxt.[FORWARD_POINTS] as varchar(50)) + ' | ' + CAST(fxt.[FORWARD_POINTS_FAR] as varchar(50))) END as [FORWARD_PO      INTS],        cc_fx.[TRADE_VENUE] as PLACEMENT_VENUE,        fxt.[EXC_SESSION_TYPE] as SESSION_TYPE,        fxt.[PROFIT_OR_LOSS],        fxt.[PRICE_REASON] as NWQ_REASON,        fxt.[PRICE_REASON_NARRATION] as NWQ_REASON_NARRATION,        lbc.[LOSING_BANK_COUNT] as LOSING_BANKS_COUNT,        lbt.[LOSING_BANK] as LOSING_BANKS,        lbt.[PROFIT_OR_LOSS] as LOSING_BANKS_PROFIT_OR_LOSS,        lbt.[ALL_IN_RATE] as LOSING_BANKS_ALL_IN_RATE,        lbt.[SWAP_POINTS] as LOSING_BANKS_SWAP_POINTS,        fxt.[MAPPED_BANK_COUNT] as STATIC_BANKS_COUNT,        lbt.[MAPPED_BANKS] as STATIC_BANKS,        fxt.[THREE_BANK_QUOTES_EXCEPTION_REASON] as NUMBER_OF_QUOTES_EXCEPTION_REASON,        fxt.[THREE_BANK_QUOTES_EXCEPTION_REASON_NARRATION] as NUMBER_OF_QUOTES_EXCEPTION_REASON_NARRATION,        fxt.[SWAP_POINTS],        CAST((100*(CAST((FXT.MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE - FXT.SPOT_RATE) as float) / CAST(FXT.MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE as float))) as decimal(38,8)) AS SPOT_DIFFERENCE,        spot_ref.[SPOT_TOLERANCE_THRESHOLD] as SPOT_THRESHOLD,        fxt.[SPOT_TOLERANCE_REASON] as OUT_OF_TOLERANCE_EXCEPTION_REASON,        fxt.[SPOT_TOLERANCE_REASON_NARRATION] as OUT_OF_TOLERANCE_EXCEPTION_REASON_NARRATION,        CASE WHEN FXT.[MARKET_ARRIVAL_INDICATIVE_ALL_IN_FAR_RATE] IS NULL THEN CAST(fxt.[MARKET_ARRIVAL_INDICATIVE_ALL_IN_NEAR_RATE] as varchar(50)) WHEN FXT.[MARKET_ARRIVAL_INDICATIVE_ALL_IN_FAR_RATE] IS NOT NULL THEN (CAST(fxt.[MARKET_ARRIVAL_INDICATIVE_ALL_IN_NEAR_RATE] as varchar(50)) + ' | ' + CAST(fxt.[MARKET_ARRIVAL_INDICATIVE_ALL_IN_FAR_RATE] as varchar(50))) END as [INDICATIVE_ALL_IN_PRICE_MARKET_ARRIVAL],        CASE WHEN fxt.[MARKET_ARRIVAL_INDICATIVE_SPOT_FAR_PRICE] IS NULL THEN CAST(fxt.[MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE] as varchar(50)) WHEN fxt.[MARKET_ARRIVAL_INDICATIVE_SPOT_FAR_PRICE] IS NOT NULL THEN (CAST(fxt.[MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE] as varchar(50)) + ' | ' + CAST(fxt.[MARKET_ARRIVAL_INDICATIVE_SPOT_FAR_PRICE] as varchar(50))) END as [INDICATIVE_SPOT_PRICE_MARKET_ARRIVAL],        CASE WHEN fxt.[MARKET_ARRIVAL_INDICATIVE_FORWARD_FAR_POINTS] IS NULL THEN CAST(fxt.[MARKET_ARRIVAL_INDICATIVE_FORWARD_NEAR_POINTS] as varchar(50)) WHEN fxt.[MARKET_ARRIVAL_INDICATIVE_FORWARD_FAR_POINTS] IS NOT NULL THEN  (CAST(fxt.[MARKET_ARRIVAL_INDICATIVE_FORWARD_NEAR_POINTS] as varchar(50)) + ' | ' + CAST(fxt.[MARKET_ARRIVAL_INDICATIVE_FORWARD_FAR_POINTS] as varchar(50))) END as [INDICATIVE_FORWARD_POINTS_MARKET_ARRIVAL],        fxo.[CLIENT_FUND],        fxo.[BASE_FUND],        fxo.[INSTRUCTION_TYPE] AS PRODUCT,        CASE WHEN FXt.FR_LEG_PRODUCT IS NULL THEN fxt.[NR_LEG_PRODUCT] ELSE  (fxt.[NR_LEG_PRODUCT] + ISNULL(' | ' + fxt.[FR_LEG_PRODUCT],'')) END  as FXM_PRODUCT,        case when NULLIF(fxt.ACTION2, '') is null then fxt.action1 else  (fxt.[ACTION1]  + ISNULL(' | ' + NULLIF(fxt.[ACTION2],''),'')) end as [ACTION],         case when fxt.NOTIONAL_CCY_FAR is null then fxt.NOTIONAL_CCY else (fxt.[NOTIONAL_CCY] + ' | ' + fxt.[NOTIONAL_CCY_FAR]) end  as [INSTRUCTED_CURRENCY],        CASE WHEN FXt.NOTIONAL_AMOUNT_FAR IS NULL THEN CAST(FORMAT(convert(DECIMAL(38,2),fxt.[NOTIONAL_AMOUNT]), '#,0.00') as varchar(50)) ELSE  (CAST(FORMAT(CONVERT(DECIMAL(38,2),fxt.[NOTIONAL_AMOUNT]), '#,0.00') as varchar(50)) + ' | ' + CAST(FORMAT(CONVERT(DECIMAL(38,2),fxt.[NOTIONAL_AMOUNT_FAR]), '#,0.00') as varchar(50))) END as [INSTRUCTED_AMOUNT],        case when fxt.buy_ccy_leg2 is null then fxt.BUY_CCY else (fxt.[BUY_CCY]  + ' | ' + fxt.[BUY_CCY_LEG2]) end as [BUY_CURRENCY],        case when fxt.SELL_CCY_LEG2 is null then fxt.SELL_CCY else  (fxt.[SELL_CCY]  + ' | ' + fxt.[SELL_CCY_LEG2]) end as [SELL_CURRENCY],        FORMAT(fxt.[TRADE_DATE], 'dd/MM/yyyy') AS TRADE_DATE,        CASE WHEN FXt.VALUE_DATE_FAR IS NULL THEN CAST(FORMAT(fxt.[VALUE_DATE_NEAR], 'dd/MM/yyyy') as varchar(50)) ELSE (CAST(format(fxt.[VALUE_DATE_NEAR], 'dd/MM/yyyy') as varchar(50)) + ' | ' + CAST(format(fxt.[VALUE_DATE_FAR], 'dd/MM/yyyy') as varchar(50)))       END as [VALUE_DATE],        CASE WHEN FXT.EXECUTED_AMOUNT_FAR IS NULL THEN CAST(FORMAT(CONVERT(DECIMAL(38,2),fxt.[EXECUTED_AMOUNT]), '#,0.00') as varchar(50)) ELSE  (CAST(FORMAT(CONVERT(DECIMAL(38,2),fxt.[EXECUTED_AMOUNT]), '#,0.00') as varchar(50)) + ' | ' + CAST(FORMAT(CONVERT(DECIMAL(38,2),fxt.[EXECUTED_AMOUNT_FAR]), '#,0.00') as varchar(50))) END as [EXECUTED_AMOUNT],        fxt.[SWAP_TYPE],        fxt.[NET_EXPOSURE_TRADE] as NET_EXPOSURE,        COALESCE(fxo.[PM],fxo.INSTRUCTED_BY) AS INSTRUCTED_BY,        fxo.[CREATED_FROM] as ORDER_SOURCE,        fxo.[FM_COMMENTS],        fxo.[TRADE_PURPOSE],        fxo.[MARKER],        CASE WHEN fxt.FIXING_DATE_LEG2 IS NULL THEN CAST(format(fxt.[FIXING_DATE], 'dd/MM/yyyy') as varchar(50)) ELSE (CAST(format(fxt.[FIXING_DATE], 'dd/MM/yyyy') as varchar(50)) + ' | ' + CAST(format(fxt.[FIXING_DATE_LEG2], 'dd/MM/yyyy') as varchar(50))) END        as [FIXING_DATE],        fxo.[BUSINESS_GROUP],        format(fxo.[INSTRUCTION_RECEIVED_DATE_TIME], 'dd/MM/yyyy HH:mm:ss') as ORDER_RECEIVED_DATE_TIME,        cc_fx.[MARKET_ARRIVAL_DATE_TIME],        format(fxt.[EXECUTED_DATE_TIME], 'dd/MM/yyyy HH:mm:ss') as EXECUTED_DATE_TIME,        DATEDIFF(MINUTE,fxt.[MARKET_ARRIVAL_DATE_TIME],fxt.[EXECUTED_DATE_TIME]) as TIME_ELAPSED_BETWEEN_MARKET_ARRIVAL_AND_EXECUTED_DATE_TIME_MINS,        FORMAT(fxt.[MARKET_ARRIVAL_INDICATIVE_PRICE_DATE_TIME], 'dd/MM/yyyy HH:mm:ss') AS MARKET_ARRIVAL_INDICATIVE_PRICE_DATE_TIME,        fxt.[EXC_SESSION_ID] as SESSION_ID,        ex.[TRADE_ID] as TRANSACTION_NUMBER,        fxo.[FXM_ORDER_ID] as ORDER_ID,        CASE         WHEN fxo.[ORD_NUM] IS NULL THEN fxo.[FXM_ORDER_ID]        ELSE fxo.[ORD_NUM]        END AS PM_ORDER_ID,        fxo.[ALADDIN_COMMON_ID] as ALADDIN_COMMON_IDENTIFIER,        fxo.[INSTRUCTION_STATUS],        fxt.[ORDER_STRATEGY] as NETTING_STRATEGY_USED,        ex.[VG_607_CREATETIME] as CREATE_DATE,        ex.[VG_607] as EXCEPTION_FLAG,        ex.[DATA_SOURCE],        fxt.EXECUTED_DATE_TIME AS OS_EXECUTED_DATE_TIME       INTO #temp_final_master_table       FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE ex       left join VISTA_REPORTING.dbo.FX_TRADES fxt        on fxt.[TRADE_ID] = ex.[TRADE_ID] and ex.[DATA_SOURCE] = 'FX'       left join VISTA_REPORTING.dbo.FX_ORDERS fxo       on fxt.[ORDER_ID] = fxo.[FXM_ORDER_ID]       left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd       on tdd.[MG_USER_ID] = fxt.[DEALT_BY] AND CAST(fxt.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)       left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2       on tdd.[MG_USER_ID] = fxt.[ACCEPTED_BY] AND CAST(fxt.[PULL_DATE] AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)       left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd        on dd.[REPORT_NAME] = 'Best Execution' AND CAST(fxt.[PULL_DATE] AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)       left join VISTA_STAGING.dbo.REF_FX_SPOT_TOLERANCE_THRESHOLD spot_ref        on spot_ref.[BASE_CCY] = fxt.[BUY_CCY] and spot_ref.[CONTRA_CCY] = fxt.[SELL_CCY] AND CAST(fxt.[PULL_DATE] AS DATE) BETWEEN CAST(spot_ref.[DATE_FROM] AS DATE) AND CAST(spot_ref.[DATE_TO] AS DATE)       left join #losingbanktemp lbt        on lbt.[TRADE_ID] = ex.[TRADE_ID] and ex.[DATA_SOURCE] = 'FX'       left join #losingbankcount lbc       on lbc.[TRADE_ID] = ex.[TRADE_ID] and ex.[DATA_SOURCE] = 'FX'       left join #conc_fx cc_fx       on ex.[TRADE_ID] = cc_fx.[TRADE_ID] and ex.[DATA_SOURCE] = 'FX'       WHERE ex.[DATA_SOURCE] = 'FX'          AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)             UNION             SELECT DISTINCT        COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) as [DEALER_NAME],        pl.[BROKER] as [EXECUTED_BANK],        CASE WHEN ex.[NWQ_EXCEPTION] = 1 THEN 'Exception' when ex.NWQ_EXCEPTION = 0 then '' end as NWQ_EXCEPTION,        CASE WHEN ex.[B3Q_EXCEPTION] = 1 THEN 'Exception' when ex.B3Q_EXCEPTION = 0 then '' end as B3Q_EXCEPTION,        CASE WHEN ex.[SRR_EXCEPTION] = 1 THEN 'Exception' WHEN ex.SRR_EXCEPTION = 0 THEN '' END AS SRR_EXCEPTION,        CASE WHEN ex.VG_607 = 1 THEN 'Exception' WHEN ex.VG_607 = 0 THEN '' END AS EXCEPTION,        CAST(COALESCE(pl.AVG_PRICE,t.FX_PRICE) as varchar(30)) as [ALL_IN_RATE],        cast(t.FX_PRICE_SPOT as varchar(50)) as [SPOT_RATE], -- Given as Trades.FX_PRICE_SPOT        NULL as [FORWARD_POINTS],        pl.[VENUE] as [PLACEMENT_VENUE],        NULL as [SESSION_TYPE],        NULL as [PROFIT_OR_LOSS],        t.[NWQ_RATIONALE] as [NWQ_REASON],        NULL as [NWQ_REASON_NARRATION],        lb_al.[LOSING_BANK_COUNT] as [LOSING_BANKS_COUNT], --need to do this        lq_al.[TRD_COUNTERPARTY] as LOSING_BANKS,        NULL as LOSING_BANKS_PROFIT_OR_LOSS,         NULL as LOSING_BANKS_ALL_IN_RATE, -- Given as Trades.TRDQUOTES_set        NULL as LOSING_BANKS_SWAP_POINTS,        sbc_al.[BROKER_COUNT] as STATIC_BANKS_COUNT,         sb_al.[TRD_COUNTERPARTY] as STATIC_BANKS,        t.[B3Q_RATIONALE] as [NUMBER_OF_QUOTES_EXCEPTION_REASON],        NULL as [NUMBER_OF_QUOTES_EXCEPTION_REASON_NARRATION],        NULL as [SWAP_POINTS],        NULL AS SPOT_DIFFERENCE,        NULL as [SPOT_THRESHOLD],        NULL as [OUT_OF_TOLERANCE_EXCEPTION_REASON],        NULL as [OUT_OF_TOLERANCE_EXCEPTION_REASON_NARRATION],        NULL as [INDICATIVE_ALL_IN_PRICE_MARKET_ARRIVAL],        NULL as [INDICATIVE_SPOT_PRICE_MARKET_ARRIVAL],        NULL as [INDICATIVE_FORWARD_POINTS_MARKET_ARRIVAL],        NULL as [CLIENT_FUND],        t.[PORTFOLIOS_PORTFOLIO_NAME] as [BASE_FUND],         pm.[SM_SEC_TYPE] as [PRODUCT],        NULL AS FXM_PRODUCT,        NULL as [ACTION],        CAST(t.[FX_PAY_CURR] as varchar(50)) as [INSTRUCTED_CURRENCY],         CAST(format(convert(decimal(38,2),pl.[QUANTITY]), '#,0.00')  as varchar(50)) as [INSTRUCTED_AMOUNT],        NULL as [BUY_CURRENCY],        NULL as [SELL_CURRENCY],        FORMAT(pm.[OPEN_DATE], 'dd/MM/yyyy') as [TRADE_DATE],        (CONVERT(VARCHAR(50),FORMAT(pm.[SETTLE_DATE] , 'dd/MM/yyyy')) + ISNULL(' | ' + CONVERT(VARCHAR(50),FORMAT(pm.[MATURITY], 'dd/MM/yyyy')),'')) as [VALUE_DATE],        CAST(format(convert(decimal(38,2),pm.[FILL_AMT]), '#,0.00') as varchar(50)) as [EXECUTED_AMOUNT],        NULL as [SWAP_TYPE],        NULL as [NET_EXPOSURE],        pm.pm as INSTRUCTED_BY,        'Aladdin' as [ORDER_SOURCE], --N/A given as mapping field, using this as assumption (?)        pm.[COMMENTS_VALUE] as [FM_COMMENTS],        t.[TRD_PURPOSE] as [TRADE_PURPOSE],        NULL as [MARKER],        NULL as [FIXING_DATE], --Given as Trades.SECURITY.SMARTCUT.FXNDF_ANNOUNCE_DATE        CASE         WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP'         WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG'         WHEN (pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM'        ELSE NULL        END AS [BUSINESS_GROUP], --Guessing the logic is same as DMG?        FORMAT(pm.[AUTH_TIME], 'dd/MM/yyyy HH:mm:ss') as [ORDER_RECEIVED_DATE_TIME],        CAST(FORMAT(t.[EXECUTION_TIME], 'dd/MM/yyyy HH:mm:ss') as varchar(50)) as [MARKET_ARRIVAL_DATE_TIME], --Same as executed, so DateDiff will always be 0???        FORMAT(t.[EXECUTION_TIME], 'dd/MM/yyyy HH:mm:ss') as [EXECUTED_DATE_TIME],        DATEDIFF(MINUTE,t.[EXECUTION_TIME],t.[EXECUTION_TIME]) as TIME_ELAPSED_BETWEEN_MARKET_ARRIVAL_AND_EXECUTED_DATE_TIME_MINS,        NULL as [MARKET_ARRIVAL_INDICATIVE_PRICE_DATE_TIME],        NULL as [SESSION_ID],        ex.[TRADE_ID] as TRANSACTION_NUMBER,        pm.[ORD_NUM] as [ORDER_ID],        pm.[ORD_NUM] as PM_ORDER_ID,        r.[REQUEST_ID] as [ALADDIN_COMMON_IDENTIFIER],        pl.[STATUS] as [INSTRUCTION_STATUS],        NULL as [NETTING_STRATEGY_USED],        ex.[VG_607_CREATETIME] as [CREATE_DATE],        ex.[VG_607] as [EXCEPTION_FLAG],        ex.[DATA_SOURCE],        t.EXECUTION_TIME AS OS_EXECUTED_DATE_TIME       FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE ex       left join VISTA_REPORTING.dbo.TRADES t on ex.[TRADE_ID] = t.[MULTI_FUND_ID]       inner join #max_touch_t mtt on t.[MULTI_FUND_ID] = mtt.MULTI_FUND_ID and t.[TOUCH_COUNT] = mtt.[MAX_TOUCH]       left join #losingquotetemp_al lq_al on ex.[TRADE_ID] = lq_al.[TRADE_ID]       left join #losingbankcount_al lb_al on ex.[TRADE_ID] = lb_al.[TRADE_ID]        left join #staticbankcount_al sbc_al on ex.[TRADE_ID] = sbc_al.[TRADE_ID]        left join #staticbanktemp_al sb_al on ex.[TRADE_ID] = sb_al.[TRADE_ID]       left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on t.[ORD_NUM] = oc.[TRD_ORD]       left join (select pm.* from VISTA_REPORTING.dbo.PM_ORDERS pm inner join #max_touch_pm mpm on mpm.ORD_NUM = pm.ORD_NUM and mpm.MAX_TOUCH = pm.TOUCH_COUNT) pm on oc.[PM_ORD] = pm.[ORD_NUM] and ex.[DATA_SOURCE] = 'AL'       left join (SELECT DISTINCT FUND_ID, PORTFOLIO_GROUP_NAME FROM VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY) pgt on t.[FUND] = pgt.[FUND_ID]       left join (SELECT DISTINCT ORD_NUM, PLACEMENT_NUM, [STATUS], QUANTITY, [BROKER], AVG_PRICE, VENUE FROM VISTA_REPORTING.dbo.PLACEMENTS) pl on pm.[ORD_NUM] = pl.[ORD_NUM]       left join (SELECT PLACEMENT_NUM, REQUEST_ID FROM VISTA_STAGING.dbo.REQUEST_LOOKUP) r on pl.[PLACEMENT_NUM] = r.[PLACEMENT_NUM]       left join VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd on tdd.[INITIALS]  = t.[TRD_TRADER] AND CAST(t.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)       left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2 on tdd.[INITIALS] = pm.[TRADER] AND CAST(pm.[PULL_DATE] AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)       left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd on dd.[REPORT_NAME] = 'Best Execution' AND CAST(COALESCE(t.[PULL_DATE],pm.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)       WHERE ex.[DATA_SOURCE] = 'AL'          AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)                   IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE', 'U') IS NOT NULL       DELETE FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE       WHERE TRANSACTION_NUMBER IN (SELECT DISTINCT MULTI_FUND_ID FROM #distinct_ids)                   IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE', 'U') IS NOT NULL       INSERT INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE       SELECT *       FROM #temp_final_master_table             ELSE             SELECT *       INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE       FROM #temp_final_master_table                   IF OBJECT_ID('tempdb..#losingbanktemp', 'U') IS NOT NULL DROP TABLE #losingbanktemp       IF OBJECT_ID('tempdb..#losingquotetemp', 'U') IS NOT NULL DROP TABLE #losingquotetemp        IF OBJECT_ID('tempdb..#staticbankcount', 'U') IS NOT NULL DROP TABLE #staticbankcount       IF OBJECT_ID('tempdb..#al_concat_ord', 'U') IS NOT NULL DROP TABLE #al_concat_ord       IF OBJECT_ID('tempdb..#losing_bank_trades', 'U') IS NOT NULL DROP TABLE #losing_bank_trades       IF OBJECT_ID('tempdb..#mapped_bank_best_ex', 'U') IS NOT NULL DROP TABLE #mapped_bank_best_ex       IF OBJECT_ID('tempdb..#trades_orders', 'U') IS NOT NULL DROP TABLE #trades_orders       IF OBJECT_ID('tempdb..#AL_trades_orders', 'U') IS NOT NULL DROP TABLE #AL_trades_orders       IF OBJECT_ID('tempdb..#max_touch_t', 'U') IS NOT NULL DROP TABLE #max_touch_t       IF OBJECT_ID('tempdb..#max_touch_pm', 'U') IS NOT NULL DROP TABLE #max_touch_pm       IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table       IF OBJECT_ID('tempdb..#distinct_ids_al', 'U') IS NOT NULL DROP TABLE #distinct_ids_al       IF OBJECT_ID('tempdb..#distinct_ids_fx', 'U') IS NOT NULL DROP TABLE #distinct_ids_fx       IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE  #distinct_ids       IF OBJECT_ID('tempdb..#losingbankcount_al', 'U') IS NOT NULL DROP TABLE #losingbankcount_al       IF OBJECT_ID('tempdb..#losingquotetemp_al', 'U') IS NOT NULL DROP TABLE #losingquotetemp_al       IF OBJECT_ID('tempdb..#staticbankcount_al', 'U') IS NOT NULL DROP TABLE #staticbankcount_al       IF OBJECT_ID('tempdb..#staticbanktemp_al', 'U') IS NOT NULL DROP TABLE #staticbanktemp_al                   IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                    WHERE name = N'mmf_vg607_fx_idx1')             DROP INDEX mmf_vg607_fx_idx1        ON VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE              CREATE NONCLUSTERED INDEX mmf_vg607_fx_idx1       ON VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE        (TRANSACTION_NUMBER)                   IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                    WHERE name = N'mmf_vg607_fx_idx2')             DROP INDEX mmf_vg607_fx_idx2        ON VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE              CREATE NONCLUSTERED INDEX mmf_vg607_fx_idx2       ON VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE        (EXECUTED_DATE_TIME)                   IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                    WHERE name = N'mmf_vg607_fx_idx3')             DROP INDEX mmf_vg607_fx_idx3        ON VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE              CREATE NONCLUSTERED INDEX mmf_vg607_fx_idx3       ON VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE        (DEALER_NAME)                    IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                    WHERE name = N'mmf_vg607_fx_idx4')             DROP INDEX mmf_vg607_fx_idx4        ON VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE              CREATE NONCLUSTERED INDEX mmf_vg607_fx_idx4       ON VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE        (CREATE_DATE)                    IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                    WHERE name = N'mmf_vg607_fx_idx5')             DROP INDEX mmf_vg607_fx_idx5        ON VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE              CREATE NONCLUSTERED INDEX mmf_vg607_fx_idx5       ON VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE        (TRADE_DATE)                   IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                    WHERE name = N'mmf_vg607_fx_idx6')             DROP INDEX mmf_vg607_fx_idx6        ON VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE              CREATE NONCLUSTERED INDEX mmf_vg607_fx_idx6       ON VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE        (EXCEPTION_FLAG)                   IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL       INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(       'MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE', --TABLE_NAME       @START_TIME, --START_TIME       GETDATE(), --END_TIME       DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS       CAST(GETDATE() as date)) --COMPLETION_DATE                  END      --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_MFID_TABLE_VG_607_BEST_EXECUTION_FX_TESTED  CreateDate: 2025-06-26 17:56:58.410  ModifyDate: 2025-06-26 17:56:58.410  --- DEFINITION START ---  -- =============================================    -- Author:  <Samad, Mehreen>    -- Create date: <10/07/2019>    -- Description:     -- <Master exception table for Best Execution    -- Exception test for FX.>    -- =============================================        -- ***************VERSION CONTROL***************        -- *********************************************        CREATE PROCEDURE [dbo].[MASTER_MFID_TABLE_VG_607_BEST_EXECUTION_FX_TESTED]     -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,         AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;              DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()             IF OBJECT_ID('tempdb..#distinct_ids_al', 'U') IS NOT NULL DROP TABLE #distinct_ids_al     SELECT DISTINCT       pr.ORD_NUM as TRD_ORD,      oc.PM_ORD AS ORD_NUM,      pr.MULTI_FUND_ID     INTO #distinct_ids_al     FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = pr.ORD_NUM     WHERE pr.DEALING_DESK = 'FX'             IF OBJECT_ID('tempdb..#distinct_ids_fx', 'U') IS NOT NULL DROP TABLE #distinct_ids_fx     SELECT DISTINCT      fxt.ORDER_ID,      fxo.ORD_NUM,      vg.TRADE_ID AS MULTI_FUND_ID      INTO #distinct_ids_fx     FROM Vista_Staging.dbo.VG_607_BEST_EXECUTION_FX_TABLE vg     LEFT JOIN Vista_Reporting.dbo.FX_TRADES fxt ON fxt.TRADE_ID = vg.TRADE_ID     LEFT JOIN Vista_Reporting.dbo.FX_ORDERS fxo ON fxo.FXM_ORDER_ID = fxt.ORDER_ID               IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE', 'U') IS NOT NULL     DELETE FROM #distinct_ids_fx where NOT EXISTS (SELECT DISTINCT od.TRADE_ID                   FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_FX od                   WHERE od.TRADE_ID = #distinct_ids_fx.MULTI_FUND_ID)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE', 'U') IS NOT NULL     DELETE FROM #distinct_ids_al where NOT EXISTS (SELECT DISTINCT od.MULTI_FUND_ID                   FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                   WHERE od.MULTI_FUND_ID = #distinct_ids_al.MULTI_FUND_ID)             IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE  #distinct_ids     SELECT *      INTO #distinct_ids     FROM #distinct_ids_al         UNION ALL         SELECT *      FROM #distinct_ids_fx             IF OBJECT_ID('tempdb..#max_touch_t', 'U') IS NOT NULL DROP TABLE #max_touch_t     SELECT DISTINCT       t.MULTI_FUND_ID,       MAX(t.TOUCH_COUNT) as MAX_TOUCH      INTO #max_touch_t     FROM VISTA_REPORTING.dbo.TRADES t     WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)     GROUP BY MULTI_FUND_ID             IF OBJECT_ID('tempdb..#max_touch_pm', 'U') IS NOT NULL DROP TABLE #max_touch_pm     SELECT DISTINCT       pm.ord_num,       MAX(pm.TOUCH_COUNT) as MAX_TOUCH      INTO #max_touch_pm     FROM VISTA_REPORTING.dbo.PM_ORDERS pm     WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = pm.ORD_NUM)     GROUP BY ord_num             IF OBJECT_ID('tempdb..#losing_bank_trades', 'U') IS NOT NULL DROP TABLE #losing_bank_trades     SELECT DISTINCT       ex.TRADE_ID,      CONVERT(VARCHAR(20), FXB.LOSING_BANK) AS LOSING_BANK,       CONVERT(VARCHAR(20), FXB.PROFIT_OR_LOSS) AS PROFIT_OR_LOSS,       CONVERT(VARCHAR(20), FXB.ALL_IN_RATE) AS ALL_IN_RATE,       CONVERT(VARCHAR(20), FXB.SWAP_POINTS) AS SWAP_POINTS,      FXT.EXECUTED_BANK     INTO #losing_bank_trades     FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE ex     LEFT JOIN VISTA_REPORTING.dbo.FX_LOSING_BANKS FXB ON ex.TRADE_ID = FXB.TRADE_ID     LEFT JOIN VISTA_REPORTING.dbo.FX_TRADES FXT on FXB.TRADE_ID = FXT.TRADE_ID     WHERE FXB.TRADE_ID = ex.TRADE_ID         AND FXB.LOSING_BANK != FXT.EXECUTED_BANK         AND ex.[DATA_SOURCE] = 'FX'        AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)             IF OBJECT_ID('tempdb..#mapped_bank_best_ex', 'U') IS NOT NULL DROP TABLE #mapped_bank_best_ex     SELECT DISTINCT      ex.TRADE_ID,      CONVERT(VARCHAR(20),FXB.BANK_NAME) AS BANK_NAME     INTO #mapped_bank_best_ex     FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE ex     INNER JOIN VISTA_REPORTING.dbo.FX_MAPPED_BANKS fxb ON fxb.TRADE_ID=ex.TRADE_ID     WHERE ex.DATA_SOURCE = 'FX'        AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)             --Losing Bank temp     IF OBJECT_ID('tempdb..#losingbanktemp', 'U') IS NOT NULL DROP TABLE #losingbanktemp      SELECT DISTINCT      ex.TRADE_ID,      STUFF((        SELECT ', ' + LOSING_BANK       FROM #losing_bank_trades fxb       WHERE fxb.TRADE_ID = ex.TRADE_ID       ORDER BY LOSING_BANK       FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS LOSING_BANK,      STUFF((        SELECT ', ' + PROFIT_OR_LOSS       FROM #losing_bank_trades fxb       WHERE fxb.TRADE_ID = ex.TRADE_ID        ORDER BY PROFIT_OR_LOSS       FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS PROFIT_OR_LOSS,       STUFF((        SELECT ', ' + ALL_IN_RATE       FROM #losing_bank_trades fxb       WHERE fxb.TRADE_ID = ex.TRADE_ID        ORDER BY ALL_IN_RATE       FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS ALL_IN_RATE,       STUFF((        SELECT ', ' + SWAP_POINTS       FROM #losing_bank_trades fxb       WHERE fxb.TRADE_ID = ex.TRADE_ID        ORDER BY SWAP_POINTS       FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS SWAP_POINTS,       STUFF((        SELECT ', ' + FXB.BANK_NAME       FROM #mapped_bank_best_ex fxb       WHERE fxb.TRADE_ID = ex.TRADE_ID        ORDER BY BANK_NAME       FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS MAPPED_BANKS     INTO #losingbanktemp     FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE ex     WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)             --Losing Bank count for FX     --IF OBJECT_ID('tempdb..#losingbankcount', 'U') IS NOT NULL DROP TABLE #losingbankcount     --SELECT DISTINCT     -- ex.[TRADE_ID],     -- COUNT(DISTINCT fxb.[LOSING_BANK]) as LOSING_BANK_COUNT     --INTO #losingbankcount     --FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE ex     --left join VISTA_REPORTING.dbo.FX_LOSING_BANKS fxb on ex.[TRADE_ID] = fxb.[TRADE_ID] and ex.[DATA_SOURCE] = 'FX'     --left join VISTA_REPORTING.dbo.FX_TRADES fxt on fxb.[TRADE_ID] = fxt.[TRADE_ID] and fxb.[LOSING_BANK] != fxt.[EXECUTED_BANK] and ex.[DATA_SOURCE] = 'FX'     --GROUP BY ex.[TRADE_ID]     --order by ex.TRADE_ID         IF OBJECT_ID('tempdb..#losingbankcount', 'U') IS NOT NULL DROP TABLE #losingbankcount     SELECT DISTINCT      ex.[TRADE_ID],      COUNT(DISTINCT ex.[LOSING_BANK]) as LOSING_BANK_COUNT     INTO #losingbankcount     FROM #losing_bank_trades ex     GROUP BY ex.[TRADE_ID]             IF OBJECT_ID('tempdb..#trades_orders', 'U') IS NOT NULL DROP TABLE #trades_orders     SELECT DISTINCT       fxt.TRADE_ID,       CONVERT(VARCHAR(50), fxo.TRADE_VENUE) AS TRADE_VENUE,      CONVERT(VARCHAR(50),format(fxt.MARKET_ARRIVAL_DATE_TIME, 'dd/MM/yyyy HH:mm:ss')) AS MARKET_ARRIVAL_DATE_TIME     INTO #trades_orders     FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE ex     LEFT JOIN VISTA_REPORTING.dbo.FX_TRADES fxt on fxt.TRADE_ID = ex.TRADE_ID     LEFT JOIN VISTA_REPORTING.dbo.FX_ORDERS fxo ON fxo.[FXM_ORDER_ID] = fxt.[ORDER_ID]     WHERE fxt.[TRADE_ID] = ex.[TRADE_ID]         AND ex.[DATA_SOURCE] = 'FX'        AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)             --FX Concatonated fields     IF OBJECT_ID('tempdb..#conc_fx', 'U') IS NOT NULL DROP TABLE #conc_fx      SELECT DISTINCT      ex.[TRADE_ID],      TRADE_VENUE = STUFF((          SELECT ' | ' + tro.TRADE_VENUE         FROM (SELECT DISTINCT TRADE_ID, TRADE_VENUE FROM #trades_orders) tro         WHERE tro.TRADE_ID=ex.TRADE_ID         ORDER BY TRADE_VENUE         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),      MARKET_ARRIVAL_DATE_TIME = STUFF((          SELECT ' | ' + tro.MARKET_ARRIVAL_DATE_TIME         FROM (SELECT DISTINCT TRADE_ID, MARKET_ARRIVAL_DATE_TIME FROM #trades_orders) tro         WHERE tro.TRADE_ID=ex.TRADE_ID         ORDER BY MARKET_ARRIVAL_DATE_TIME         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'')     INTO #conc_fx     FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE ex     WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)             IF OBJECT_ID('tempdb..#AL_trades_orders', 'U') IS NOT NULL DROP TABLE #AL_trades_orders     SELECT DISTINCT      ex.TRADE_ID,      t.TRD_COUNTERPARTY,      q.QUOTE_VALUE,      pl.BROKER     INTO #AL_trades_orders     FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE ex     left join VISTA_REPORTING.dbo.TRADES t on ex.[TRADE_ID] = t.[MULTI_FUND_ID]     left join VISTA_REPORTING.dbo.QUOTES q on q.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]     left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on t.[ORD_NUM] = oc.[TRD_ORD]     left join VISTA_REPORTING.dbo.PM_ORDERS pm on oc.[PM_ORD] = pm.[ORD_NUM]     left join (SELECT DISTINCT ORD_NUM, [BROKER] FROM VISTA_REPORTING.dbo.PLACEMENTS) pl on pm.[ORD_NUM] = pl.[ORD_NUM]     WHERE ex.[DATA_SOURCE] = 'AL'         AND t.[MULTI_FUND_ID] = ex.[TRADE_ID]         AND q.[QUOTE_ORIGIN] = 'QUOTE'         AND pl.[BROKER] != q.[BROKER]        AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)             --Losing Bank count for AL     IF OBJECT_ID('tempdb..#losingbankcount_al', 'U') IS NOT NULL DROP TABLE #losingbankcount_al     SELECT DISTINCT      [TRADE_ID],      COUNT(DISTINCT [BROKER]) as LOSING_BANK_COUNT     INTO #losingbankcount_al     FROM #AL_trades_orders      GROUP BY [TRADE_ID]             --Losing Bank for AL     IF OBJECT_ID('tempdb..#losingquotetemp_al', 'U') IS NOT NULL DROP TABLE #losingquotetemp_al      SELECT DISTINCT      ex.[TRADE_ID],      TRD_COUNTERPARTY = STUFF((          SELECT ', ' + TRD_COUNTERPARTY         FROM (SELECT DISTINCT TRADE_ID, TRD_COUNTERPARTY FROM #AL_trades_orders) ato         WHERE ato.TRADE_ID = ex.TRADE_ID         ORDER BY TRD_COUNTERPARTY         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''),      QUOTE_VALUE = STUFF((          SELECT ', ' + CAST(CONVERT(DECIMAL(38,8),ato.[QUOTE_VALUE]) AS varchar(50)) as QUOTE_VALUE         FROM (SELECT DISTINCT TRADE_ID, [QUOTE_VALUE] FROM #AL_trades_orders) ato         WHERE ato.TRADE_ID = ex.TRADE_ID         ORDER BY QUOTE_VALUE         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '')     INTO #losingquotetemp_al     FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE ex     WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)             --Static Bank count for AL     IF OBJECT_ID('tempdb..#staticbankcount_al', 'U') IS NOT NULL DROP TABLE #staticbankcount_al     SELECT DISTINCT      ex.[TRADE_ID],      COUNT(DISTINCT pl.[BROKER]) as BROKER_COUNT     INTO #staticbankcount_al     FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE ex     left join VISTA_REPORTING.dbo.TRADES t on ex.[TRADE_ID] = t.[MULTI_FUND_ID] and ex.[DATA_SOURCE] = 'AL'     left join VISTA_REPORTING.dbo.QUOTES q on q.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]     left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on t.[ORD_NUM] = oc.[TRD_ORD]     left join VISTA_REPORTING.dbo.PM_ORDERS pm on oc.[PM_ORD] = pm.[ORD_NUM]     left join (SELECT DISTINCT ORD_NUM, [BROKER] FROM VISTA_REPORTING.dbo.PLACEMENTS) pl on pm.[ORD_NUM] = pl.[ORD_NUM]     WHERE t.[MULTI_FUND_ID] = ex.[TRADE_ID]         AND q.[QUOTE_ORIGIN] = 'QUOTE'         AND ex.[DATA_SOURCE] = 'AL'        AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)     GROUP BY ex.[TRADE_ID]             --Static Banks for AL     IF OBJECT_ID('tempdb..#staticbanktemp_al', 'U') IS NOT NULL DROP TABLE #staticbanktemp_al      SELECT DISTINCT      ex.[TRADE_ID],      TRD_COUNTERPARTY = STUFF((          SELECT DISTINCT ', ' + t.TRD_COUNTERPARTY         FROM VISTA_REPORTING.dbo.TRADES t          left join VISTA_REPORTING.dbo.QUOTES q  on q.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]         left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on t.[ORD_NUM] = oc.[TRD_ORD]         left join VISTA_REPORTING.dbo.PM_ORDERS pm on oc.[PM_ORD] = pm.[ORD_NUM]         left join (SELECT DISTINCT ORD_NUM, [BROKER] FROM VISTA_REPORTING.dbo.PLACEMENTS) pl on pm.[ORD_NUM] = pl.[ORD_NUM]         WHERE t.[MULTI_FUND_ID] = ex.[TRADE_ID] and q.[QUOTE_ORIGIN] = 'QUOTE' and ex.[DATA_SOURCE] = 'AL'         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '')     INTO #staticbanktemp_al     FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE ex     WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)             --Create Master table      IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     SELECT DISTINCT      COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) as DEALER_NAME,      fxt.[EXECUTED_BANK],      CASE WHEN ex.[NWQ_EXCEPTION] = 1 THEN 'Exception' when ex.NWQ_EXCEPTION = 0 then '' end as NWQ_EXCEPTION,      CASE WHEN ex.[B3Q_EXCEPTION] = 1 THEN 'Exception' when ex.B3Q_EXCEPTION = 0 then '' end as B3Q_EXCEPTION,      CASE WHEN ex.[SRR_EXCEPTION] = 1 THEN 'Exception' WHEN ex.SRR_EXCEPTION = 0 THEN '' END AS SRR_EXCEPTION,      CASE WHEN ex.VG_607 = 1 THEN 'Exception' WHEN ex.VG_607 = 0 THEN '' END AS EXCEPTION,      CASE WHEN FXT.EXECUTED_RATE_FAR IS NULL THEN CAST(fxt.[EXECUTED_RATE] as varchar(50)) WHEN FXT.EXECUTED_RATE_FAR IS NOT NULL THEN (CAST(fxt.[EXECUTED_RATE] as varchar(50)) + ' | ' + CAST(fxt.[EXECUTED_RATE_FAR] as varchar(50))) END as [ALL_IN_RATE],      CASE WHEN FXT.SPOT_RATE_FAR IS NULL THEN CAST(fxt.[SPOT_RATE] as varchar(50)) WHEN FXT.SPOT_RATE_FAR IS NOT NULL THEN (CAST(fxt.[SPOT_RATE] as varchar(50)) + ' | ' + CAST(fxt.[SPOT_RATE_FAR] as varchar(50))) END as [SPOT_RATE],      CASE WHEN FXT.FORWARD_POINTS_FAR IS NULL THEN CAST(fxt.[FORWARD_POINTS] as varchar(50)) WHEN FXT.FORWARD_POINTS_FAR IS NOT NULL THEN  (CAST(fxt.[FORWARD_POINTS] as varchar(50)) + ' | ' + CAST(fxt.[FORWARD_POINTS_FAR] as varchar(50))) END as [FORWARD_PO  INTS],      cc_fx.[TRADE_VENUE] as PLACEMENT_VENUE,      fxt.[EXC_SESSION_TYPE] as SESSION_TYPE,      fxt.[PROFIT_OR_LOSS],      fxt.[PRICE_REASON] as NWQ_REASON,      fxt.[PRICE_REASON_NARRATION] as NWQ_REASON_NARRATION,      lbc.[LOSING_BANK_COUNT] as LOSING_BANKS_COUNT,      lbt.[LOSING_BANK] as LOSING_BANKS,      lbt.[PROFIT_OR_LOSS] as LOSING_BANKS_PROFIT_OR_LOSS,      lbt.[ALL_IN_RATE] as LOSING_BANKS_ALL_IN_RATE,      lbt.[SWAP_POINTS] as LOSING_BANKS_SWAP_POINTS,      fxt.[MAPPED_BANK_COUNT] as STATIC_BANKS_COUNT,      lbt.[MAPPED_BANKS] as STATIC_BANKS,      fxt.[THREE_BANK_QUOTES_EXCEPTION_REASON] as NUMBER_OF_QUOTES_EXCEPTION_REASON,      fxt.[THREE_BANK_QUOTES_EXCEPTION_REASON_NARRATION] as NUMBER_OF_QUOTES_EXCEPTION_REASON_NARRATION,      fxt.[SWAP_POINTS],      CAST((100*(CAST((FXT.MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE - FXT.SPOT_RATE) as float) / CAST(FXT.MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE as float))) as decimal(38,8)) AS SPOT_DIFFERENCE,      spot_ref.[SPOT_TOLERANCE_THRESHOLD] as SPOT_THRESHOLD,      fxt.[SPOT_TOLERANCE_REASON] as OUT_OF_TOLERANCE_EXCEPTION_REASON,      fxt.[SPOT_TOLERANCE_REASON_NARRATION] as OUT_OF_TOLERANCE_EXCEPTION_REASON_NARRATION,      CASE WHEN FXT.[MARKET_ARRIVAL_INDICATIVE_ALL_IN_FAR_RATE] IS NULL THEN CAST(fxt.[MARKET_ARRIVAL_INDICATIVE_ALL_IN_NEAR_RATE] as varchar(50)) WHEN FXT.[MARKET_ARRIVAL_INDICATIVE_ALL_IN_FAR_RATE] IS NOT NULL THEN (CAST(fxt.[MARKET_ARRIVAL_INDICATIVE_ALL_I  N_NEAR_RATE] as varchar(50)) + ' | ' + CAST(fxt.[MARKET_ARRIVAL_INDICATIVE_ALL_IN_FAR_RATE] as varchar(50))) END as [INDICATIVE_ALL_IN_PRICE_MARKET_ARRIVAL],      CASE WHEN fxt.[MARKET_ARRIVAL_INDICATIVE_SPOT_FAR_PRICE] IS NULL THEN CAST(fxt.[MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE] as varchar(50)) WHEN fxt.[MARKET_ARRIVAL_INDICATIVE_SPOT_FAR_PRICE] IS NOT NULL THEN (CAST(fxt.[MARKET_ARRIVAL_INDICATIVE_SPOT_NEA  R_PRICE] as varchar(50)) + ' | ' + CAST(fxt.[MARKET_ARRIVAL_INDICATIVE_SPOT_FAR_PRICE] as varchar(50))) END as [INDICATIVE_SPOT_PRICE_MARKET_ARRIVAL],      CASE WHEN fxt.[MARKET_ARRIVAL_INDICATIVE_FORWARD_FAR_POINTS] IS NULL THEN CAST(fxt.[MARKET_ARRIVAL_INDICATIVE_FORWARD_NEAR_POINTS] as varchar(50)) WHEN fxt.[MARKET_ARRIVAL_INDICATIVE_FORWARD_FAR_POINTS] IS NOT NULL THEN  (CAST(fxt.[MARKET_ARRIVAL_INDICA  TIVE_FORWARD_NEAR_POINTS] as varchar(50)) + ' | ' + CAST(fxt.[MARKET_ARRIVAL_INDICATIVE_FORWARD_FAR_POINTS] as varchar(50))) END as [INDICATIVE_FORWARD_POINTS_MARKET_ARRIVAL],      fxo.[CLIENT_FUND],      fxo.[BASE_FUND],      fxo.[INSTRUCTION_TYPE] AS PRODUCT,      CASE WHEN FXt.FR_LEG_PRODUCT IS NULL THEN fxt.[NR_LEG_PRODUCT] ELSE  (fxt.[NR_LEG_PRODUCT] + ISNULL(' | ' + fxt.[FR_LEG_PRODUCT],'')) END  as FXM_PRODUCT,      case when NULLIF(fxt.ACTION2, '') is null then fxt.action1 else  (fxt.[ACTION1]  + ISNULL(' | ' + NULLIF(fxt.[ACTION2],''),'')) end as [ACTION],       case when fxt.NOTIONAL_CCY_FAR is null then fxt.NOTIONAL_CCY else (fxt.[NOTIONAL_CCY] + ' | ' + fxt.[NOTIONAL_CCY_FAR]) end  as [INSTRUCTED_CURRENCY],      CASE WHEN FXt.NOTIONAL_AMOUNT_FAR IS NULL THEN CAST(FORMAT(convert(DECIMAL(38,2),fxt.[NOTIONAL_AMOUNT]), '#,0.00') as varchar(50)) ELSE  (CAST(FORMAT(CONVERT(DECIMAL(38,2),fxt.[NOTIONAL_AMOUNT]), '#,0.00') as varchar(50)) + ' | ' + CAST(FORMAT(CONVERT(DECIMAL(38,2),fxt.[NOTIONAL_AMOUNT_FAR]), '#,0.00') as varchar(50))) END as [INSTRUCTED_AMOUNT],      case when fxt.buy_ccy_leg2 is null then fxt.BUY_CCY else (fxt.[BUY_CCY]  + ' | ' + fxt.[BUY_CCY_LEG2]) end as [BUY_CURRENCY],      case when fxt.SELL_CCY_LEG2 is null then fxt.SELL_CCY else  (fxt.[SELL_CCY]  + ' | ' + fxt.[SELL_CCY_LEG2]) end as [SELL_CURRENCY],      FORMAT(fxt.[TRADE_DATE], 'dd/MM/yyyy') AS TRADE_DATE,      CASE WHEN FXt.VALUE_DATE_FAR IS NULL THEN CAST(FORMAT(fxt.[VALUE_DATE_NEAR], 'dd/MM/yyyy') as varchar(50)) ELSE (CAST(format(fxt.[VALUE_DATE_NEAR], 'dd/MM/yyyy') as varchar(50)) + ' | ' + CAST(format(fxt.[VALUE_DATE_FAR], 'dd/MM/yyyy') as varchar(50)))   END as [VALUE_DATE],      CASE WHEN FXT.EXECUTED_AMOUNT_FAR IS NULL THEN CAST(FORMAT(CONVERT(DECIMAL(38,2),fxt.[EXECUTED_AMOUNT]), '#,0.00') as varchar(50)) ELSE  (CAST(FORMAT(CONVERT(DECIMAL(38,2),fxt.[EXECUTED_AMOUNT]), '#,0.00') as varchar(50)) + ' | ' + CAST(FORMAT(CONVERT(DECIMAL(38,2),fxt.[EXECUTED_AMOUNT_FAR]), '#,0.00') as varchar(50))) END as [EXECUTED_AMOUNT],      fxt.[SWAP_TYPE],      fxt.[NET_EXPOSURE_TRADE] as NET_EXPOSURE,      COALESCE(fxo.[PM],fxo.INSTRUCTED_BY) AS INSTRUCTED_BY,      fxo.[CREATED_FROM] as ORDER_SOURCE,      fxo.[FM_COMMENTS],      fxo.[TRADE_PURPOSE],      fxo.[MARKER],      CASE WHEN fxt.FIXING_DATE_LEG2 IS NULL THEN CAST(format(fxt.[FIXING_DATE], 'dd/MM/yyyy') as varchar(50)) ELSE (CAST(format(fxt.[FIXING_DATE], 'dd/MM/yyyy') as varchar(50)) + ' | ' + CAST(format(fxt.[FIXING_DATE_LEG2], 'dd/MM/yyyy') as varchar(50))) END    as [FIXING_DATE],      fxo.[BUSINESS_GROUP],      format(fxo.[INSTRUCTION_RECEIVED_DATE_TIME], 'dd/MM/yyyy HH:mm:ss') as ORDER_RECEIVED_DATE_TIME,      cc_fx.[MARKET_ARRIVAL_DATE_TIME],      format(fxt.[EXECUTED_DATE_TIME], 'dd/MM/yyyy HH:mm:ss') as EXECUTED_DATE_TIME,      DATEDIFF(MINUTE,fxt.[MARKET_ARRIVAL_DATE_TIME],fxt.[EXECUTED_DATE_TIME]) as TIME_ELAPSED_BETWEEN_MARKET_ARRIVAL_AND_EXECUTED_DATE_TIME_MINS,      FORMAT(fxt.[MARKET_ARRIVAL_INDICATIVE_PRICE_DATE_TIME], 'dd/MM/yyyy HH:mm:ss') AS MARKET_ARRIVAL_INDICATIVE_PRICE_DATE_TIME,      fxt.[EXC_SESSION_ID] as SESSION_ID,      ex.[TRADE_ID] as TRANSACTION_NUMBER,      fxo.[FXM_ORDER_ID] as ORDER_ID,      CASE       WHEN fxo.[ORD_NUM] IS NULL THEN fxo.[FXM_ORDER_ID]      ELSE fxo.[ORD_NUM]      END AS PM_ORDER_ID,      fxo.[ALADDIN_COMMON_ID] as ALADDIN_COMMON_IDENTIFIER,      fxo.[INSTRUCTION_STATUS],      fxt.[ORDER_STRATEGY] as NETTING_STRATEGY_USED,      ex.[VG_607_CREATETIME] as CREATE_DATE,      ex.[VG_607] as EXCEPTION_FLAG,      ex.[DATA_SOURCE],      fxt.EXECUTED_DATE_TIME AS OS_EXECUTED_DATE_TIME     INTO #temp_final_master_table     FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE ex     left join VISTA_REPORTING.dbo.FX_TRADES fxt      on fxt.[TRADE_ID] = ex.[TRADE_ID] and ex.[DATA_SOURCE] = 'FX'     left join VISTA_REPORTING.dbo.FX_ORDERS fxo     on fxt.[ORDER_ID] = fxo.[FXM_ORDER_ID]     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd     on tdd.[MG_USER_ID] = fxt.[DEALT_BY] AND CAST(fxt.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2     on tdd.[MG_USER_ID] = fxt.[ACCEPTED_BY] AND CAST(fxt.[PULL_DATE] AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)     left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd      on dd.[REPORT_NAME] = 'Best Execution' AND CAST(fxt.[PULL_DATE] AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)     left join VISTA_STAGING.dbo.REF_FX_SPOT_TOLERANCE_THRESHOLD spot_ref      on spot_ref.[BASE_CCY] = fxt.[BUY_CCY] and spot_ref.[CONTRA_CCY] = fxt.[SELL_CCY] AND CAST(fxt.[PULL_DATE] AS DATE) BETWEEN CAST(spot_ref.[DATE_FROM] AS DATE) AND CAST(spot_ref.[DATE_TO] AS DATE)     left join #losingbanktemp lbt      on lbt.[TRADE_ID] = ex.[TRADE_ID] and ex.[DATA_SOURCE] = 'FX'     left join #losingbankcount lbc     on lbc.[TRADE_ID] = ex.[TRADE_ID] and ex.[DATA_SOURCE] = 'FX'     left join #conc_fx cc_fx     on ex.[TRADE_ID] = cc_fx.[TRADE_ID] and ex.[DATA_SOURCE] = 'FX'     WHERE ex.[DATA_SOURCE] = 'FX'        AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)         UNION         SELECT DISTINCT      COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) as [DEALER_NAME],      pl.[BROKER] as [EXECUTED_BANK],      CASE WHEN ex.[NWQ_EXCEPTION] = 1 THEN 'Exception' when ex.NWQ_EXCEPTION = 0 then '' end as NWQ_EXCEPTION,      CASE WHEN ex.[B3Q_EXCEPTION] = 1 THEN 'Exception' when ex.B3Q_EXCEPTION = 0 then '' end as B3Q_EXCEPTION,      CASE WHEN ex.[SRR_EXCEPTION] = 1 THEN 'Exception' WHEN ex.SRR_EXCEPTION = 0 THEN '' END AS SRR_EXCEPTION,      CASE WHEN ex.VG_607 = 1 THEN 'Exception' WHEN ex.VG_607 = 0 THEN '' END AS EXCEPTION,      CAST(COALESCE(pl.AVG_PRICE,t.FX_PRICE) as varchar(30)) as [ALL_IN_RATE],      cast(t.FX_PRICE_SPOT as varchar(50)) as [SPOT_RATE], -- Given as Trades.FX_PRICE_SPOT      NULL as [FORWARD_POINTS],      pl.[VENUE] as [PLACEMENT_VENUE],      NULL as [SESSION_TYPE],      NULL as [PROFIT_OR_LOSS],      t.[NWQ_RATIONALE] as [NWQ_REASON],      NULL as [NWQ_REASON_NARRATION],      lb_al.[LOSING_BANK_COUNT] as [LOSING_BANKS_COUNT], --need to do this      lq_al.[TRD_COUNTERPARTY] as LOSING_BANKS,      NULL as LOSING_BANKS_PROFIT_OR_LOSS,       NULL as LOSING_BANKS_ALL_IN_RATE, -- Given as Trades.TRDQUOTES_set      NULL as LOSING_BANKS_SWAP_POINTS,      sbc_al.[BROKER_COUNT] as STATIC_BANKS_COUNT,       sb_al.[TRD_COUNTERPARTY] as STATIC_BANKS,      t.[B3Q_RATIONALE] as [NUMBER_OF_QUOTES_EXCEPTION_REASON],      NULL as [NUMBER_OF_QUOTES_EXCEPTION_REASON_NARRATION],      NULL as [SWAP_POINTS],      NULL AS SPOT_DIFFERENCE,      NULL as [SPOT_THRESHOLD],      NULL as [OUT_OF_TOLERANCE_EXCEPTION_REASON],      NULL as [OUT_OF_TOLERANCE_EXCEPTION_REASON_NARRATION],      NULL as [INDICATIVE_ALL_IN_PRICE_MARKET_ARRIVAL],      NULL as [INDICATIVE_SPOT_PRICE_MARKET_ARRIVAL],      NULL as [INDICATIVE_FORWARD_POINTS_MARKET_ARRIVAL],      NULL as [CLIENT_FUND],      t.[PORTFOLIOS_PORTFOLIO_NAME] as [BASE_FUND],       pm.[SM_SEC_TYPE] as [PRODUCT],      NULL AS FXM_PRODUCT,      NULL as [ACTION],      CAST(t.[FX_PAY_CURR] as varchar(50)) as [INSTRUCTED_CURRENCY],       CAST(format(convert(decimal(38,2),pl.[QUANTITY]), '#,0.00')  as varchar(50)) as [INSTRUCTED_AMOUNT],      NULL as [BUY_CURRENCY],      NULL as [SELL_CURRENCY],      FORMAT(pm.[OPEN_DATE], 'dd/MM/yyyy') as [TRADE_DATE],      (CONVERT(VARCHAR(50),FORMAT(pm.[SETTLE_DATE] , 'dd/MM/yyyy')) + ISNULL(' | ' + CONVERT(VARCHAR(50),FORMAT(pm.[MATURITY], 'dd/MM/yyyy')),'')) as [VALUE_DATE],      CAST(format(convert(decimal(38,2),pm.[FILL_AMT]), '#,0.00') as varchar(50)) as [EXECUTED_AMOUNT],      NULL as [SWAP_TYPE],      NULL as [NET_EXPOSURE],      pm.pm as INSTRUCTED_BY,      'Aladdin' as [ORDER_SOURCE], --N/A given as mapping field, using this as assumption (?)      pm.[COMMENTS_VALUE] as [FM_COMMENTS],      t.[TRD_PURPOSE] as [TRADE_PURPOSE],      NULL as [MARKER],      NULL as [FIXING_DATE], --Given as Trades.SECURITY.SMARTCUT.FXNDF_ANNOUNCE_DATE      CASE       WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP'       WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG'       WHEN (pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM'      ELSE NULL      END AS [BUSINESS_GROUP], --Guessing the logic is same as DMG?      FORMAT(pm.[AUTH_TIME], 'dd/MM/yyyy HH:mm:ss') as [ORDER_RECEIVED_DATE_TIME],      CAST(FORMAT(t.[EXECUTION_TIME], 'dd/MM/yyyy HH:mm:ss') as varchar(50)) as [MARKET_ARRIVAL_DATE_TIME], --Same as executed, so DateDiff will always be 0???      FORMAT(t.[EXECUTION_TIME], 'dd/MM/yyyy HH:mm:ss') as [EXECUTED_DATE_TIME],      DATEDIFF(MINUTE,t.[EXECUTION_TIME],t.[EXECUTION_TIME]) as TIME_ELAPSED_BETWEEN_MARKET_ARRIVAL_AND_EXECUTED_DATE_TIME_MINS,      NULL as [MARKET_ARRIVAL_INDICATIVE_PRICE_DATE_TIME],      NULL as [SESSION_ID],      ex.[TRADE_ID] as TRANSACTION_NUMBER,      pm.[ORD_NUM] as [ORDER_ID],      pm.[ORD_NUM] as PM_ORDER_ID,      r.[REQUEST_ID] as [ALADDIN_COMMON_IDENTIFIER],      pl.[STATUS] as [INSTRUCTION_STATUS],      NULL as [NETTING_STRATEGY_USED],      ex.[VG_607_CREATETIME] as [CREATE_DATE],      ex.[VG_607] as [EXCEPTION_FLAG],      ex.[DATA_SOURCE],      t.EXECUTION_TIME AS OS_EXECUTED_DATE_TIME     FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE ex     left join VISTA_REPORTING.dbo.TRADES t on ex.[TRADE_ID] = t.[MULTI_FUND_ID]     inner join #max_touch_t mtt on t.[MULTI_FUND_ID] = mtt.MULTI_FUND_ID and t.[TOUCH_COUNT] = mtt.[MAX_TOUCH]     left join #losingquotetemp_al lq_al on ex.[TRADE_ID] = lq_al.[TRADE_ID]     left join #losingbankcount_al lb_al on ex.[TRADE_ID] = lb_al.[TRADE_ID]      left join #staticbankcount_al sbc_al on ex.[TRADE_ID] = sbc_al.[TRADE_ID]      left join #staticbanktemp_al sb_al on ex.[TRADE_ID] = sb_al.[TRADE_ID]     left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on t.[ORD_NUM] = oc.[TRD_ORD]     left join (select pm.* from VISTA_REPORTING.dbo.PM_ORDERS pm inner join #max_touch_pm mpm on mpm.ORD_NUM = pm.ORD_NUM and mpm.MAX_TOUCH = pm.TOUCH_COUNT) pm on oc.[PM_ORD] = pm.[ORD_NUM] and ex.[DATA_SOURCE] = 'AL'     left join (SELECT DISTINCT FUND_ID, PORTFOLIO_GROUP_NAME FROM VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY) pgt on t.[FUND] = pgt.[FUND_ID]     left join (SELECT DISTINCT ORD_NUM, PLACEMENT_NUM, [STATUS], QUANTITY, [BROKER], AVG_PRICE, VENUE FROM VISTA_REPORTING.dbo.PLACEMENTS) pl on pm.[ORD_NUM] = pl.[ORD_NUM]     left join (SELECT PLACEMENT_NUM, REQUEST_ID FROM VISTA_STAGING.dbo.REQUEST_LOOKUP) r on pl.[PLACEMENT_NUM] = r.[PLACEMENT_NUM]     left join VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd on tdd.[INITIALS]  = t.[TRD_TRADER] AND CAST(t.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2 on tdd.[INITIALS] = pm.[TRADER] AND CAST(pm.[PULL_DATE] AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)     left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd on dd.[REPORT_NAME] = 'Best Execution' AND CAST(COALESCE(t.[PULL_DATE],pm.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)     WHERE ex.[DATA_SOURCE] = 'AL'        AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE_TESTED_27_05_2022', 'U') IS NOT NULL     DELETE FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE_TESTED_27_05_2022     WHERE TRANSACTION_NUMBER IN (SELECT DISTINCT MULTI_FUND_ID FROM #distinct_ids)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE_TESTED_27_05_2022', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE_TESTED_27_05_2022     SELECT *     FROM #temp_final_master_table         ELSE         SELECT *     INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE_TESTED_27_05_2022     FROM #temp_final_master_table             IF OBJECT_ID('tempdb..#losingbanktemp', 'U') IS NOT NULL DROP TABLE #losingbanktemp     IF OBJECT_ID('tempdb..#losingquotetemp', 'U') IS NOT NULL DROP TABLE #losingquotetemp      IF OBJECT_ID('tempdb..#staticbankcount', 'U') IS NOT NULL DROP TABLE #staticbankcount     IF OBJECT_ID('tempdb..#al_concat_ord', 'U') IS NOT NULL DROP TABLE #al_concat_ord     IF OBJECT_ID('tempdb..#losing_bank_trades', 'U') IS NOT NULL DROP TABLE #losing_bank_trades     IF OBJECT_ID('tempdb..#mapped_bank_best_ex', 'U') IS NOT NULL DROP TABLE #mapped_bank_best_ex     IF OBJECT_ID('tempdb..#trades_orders', 'U') IS NOT NULL DROP TABLE #trades_orders     IF OBJECT_ID('tempdb..#AL_trades_orders', 'U') IS NOT NULL DROP TABLE #AL_trades_orders     IF OBJECT_ID('tempdb..#max_touch_t', 'U') IS NOT NULL DROP TABLE #max_touch_t     IF OBJECT_ID('tempdb..#max_touch_pm', 'U') IS NOT NULL DROP TABLE #max_touch_pm     IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     IF OBJECT_ID('tempdb..#distinct_ids_al', 'U') IS NOT NULL DROP TABLE #distinct_ids_al     IF OBJECT_ID('tempdb..#distinct_ids_fx', 'U') IS NOT NULL DROP TABLE #distinct_ids_fx     IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE  #distinct_ids     IF OBJECT_ID('tempdb..#losingbankcount_al', 'U') IS NOT NULL DROP TABLE #losingbankcount_al     IF OBJECT_ID('tempdb..#losingquotetemp_al', 'U') IS NOT NULL DROP TABLE #losingquotetemp_al     IF OBJECT_ID('tempdb..#staticbankcount_al', 'U') IS NOT NULL DROP TABLE #staticbankcount_al     IF OBJECT_ID('tempdb..#staticbanktemp_al', 'U') IS NOT NULL DROP TABLE #staticbanktemp_al             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg607_fx_idx1')           DROP INDEX mmf_vg607_fx_idx1      ON VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE         CREATE NONCLUSTERED INDEX mmf_vg607_fx_idx1     ON VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE      (TRANSACTION_NUMBER)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg607_fx_idx2')           DROP INDEX mmf_vg607_fx_idx2      ON VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg607_fx_idx2     ON VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE      (EXECUTED_DATE_TIME)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg607_fx_idx3')           DROP INDEX mmf_vg607_fx_idx3      ON VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg607_fx_idx3     ON VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE      (DEALER_NAME)              IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg607_fx_idx4')           DROP INDEX mmf_vg607_fx_idx4      ON VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg607_fx_idx4     ON VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE      (CREATE_DATE)              IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg607_fx_idx5')           DROP INDEX mmf_vg607_fx_idx5      ON VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg607_fx_idx5     ON VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE      (TRADE_DATE)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg607_fx_idx6')           DROP INDEX mmf_vg607_fx_idx6      ON VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg607_fx_idx6     ON VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE      (EXCEPTION_FLAG)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(     'MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE', --TABLE_NAME     @START_TIME, --START_TIME     GETDATE(), --END_TIME     DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS     CAST(GETDATE() as date)) --COMPLETION_DATE            END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_MFID_TABLE_VG_608_TA_KNOCKBACK_CASH  CreateDate: 2025-06-26 17:57:12.103  ModifyDate: 2025-06-26 17:57:12.103  --- DEFINITION START ---  -- =============================================    -- Author:  <da Costa, David>    -- Create date: <10/06/2019>    -- Description:     -- <Master exception table for TA BKnockbacks for CASH.>    -- =============================================        -- ***************VERSION CONTROL***************        -- *********************************************        CREATE PROCEDURE [dbo].[MASTER_MFID_TABLE_VG_608_TA_KNOCKBACK_CASH]     -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,         AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;            --Used to track total time stored procedure took to run    DECLARE @START_TIME as datetime    SET @START_TIME = GETDATE()        IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids    SELECT DISTINCT t.TRANSACTION_NUMBER, t.DATA_SOURCE    INTO #distinct_ids    FROM VISTA_STAGING.DBO.VG_608_TA_KNOCKBACK_CASH_TABLE t            --If the master table doesn't exist then we want to use all the data available, otherwise just the most recent data    IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_608_TA_KNOCKBACK_CASH_TABLE', 'U') IS NOT NULL    DELETE FROM #distinct_ids     where NOT EXISTS (SELECT od.TRANSACTION_NUMBER          FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_CASH od          WHERE od.TRANSACTION_NUMBER = #distinct_ids.TRANSACTION_NUMBER)    AND #distinct_ids.DATA_SOURCE = 'CM'        IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_608_TA_KNOCKBACK_CASH_TABLE', 'U') IS NOT NULL    DELETE FROM #distinct_ids     where NOT EXISTS (SELECT od.MULTI_FUND_ID          FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od          WHERE od.MULTI_FUND_ID = #distinct_ids.TRANSACTION_NUMBER)    AND #distinct_ids.DATA_SOURCE = 'AL'            IF OBJECT_ID('tempdb..#temp_cash_orders', 'U') IS NOT NULL DROP TABLE #temp_cash_orders    SELECT DISTINCT t.ORDER_ID    into #temp_cash_orders    from Vista_Reporting.dbo.CASH_TRADES t    INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = t.TRANSACTION_NUMBER        UNION        SELECT DISTINCT oc.PM_ORD    FROM Vista_Reporting.dbo.TRADES tr    INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = tr.MULTI_FUND_ID    LEFT JOIN Vista_Reporting.dbo.ORDERS_CROSS oc on oc.TRD_ORD = tr.ORD_NUM            IF OBJECT_ID('tempdb..#temp_max_req_orders', 'U') IS NOT NULL DROP TABLE #temp_max_req_orders    SELECT      co.ORDER_ID,     MAX(API_REQUESTED_DATE) AS MAX_API_REQ    INTO #temp_max_req_orders    FROM VISTA_REPORTING.dbo.CASH_ORDERS co    INNER JOIN #temp_cash_orders tco ON co.ORDER_ID = tco.ORDER_ID    GROUP BY co.ORDER_ID            IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades    SELECT      ct.TRANSACTION_NUMBER,     MAX(API_REQUESTED_DATE) AS MAX_API_REQ    INTO #temp_max_req_trades    FROM VISTA_REPORTING.dbo.CASH_TRADES ct    INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER    GROUP BY ct.TRANSACTION_NUMBER            IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table    SELECT DISTINCT     COALESCE(ct.DEALER_NAME_DECODE,tdd2.[FULL_NAME],DD.[DEFAULT_DEALER]) as DEALER_NAME,     ct.TA_KNOCKBACK_EXCEPTION_REASON,     ct.TA_KNOCKBACK_NARRATION,     ct.TA_NAME,     FORMAT(ct.EXECUTED_DATETIME, 'dd/MM/yyyy HH:mm:ss') AS EXECUTED_DATE_TIME,     ct.BANK,     CONVERT(DECIMAL(38,4),ct.EXECUTED_RATE) AS EXECUTED_RATE,     ct.CLIENT_FUND_OR_POOL_CODE AS CLIENT_FUND_POOL_CODE,     ct.BASE_FUND_CODE,     COALESCE(co.INSTRUCTED_CURRENCY, ct.TRADE_CURRENCY) AS INSTRUCTED_CURRENCY,     ct.PRODUCT,     FORMAT(co.INSTRUCTED_AMOUNT, '#,0.00') AS INSTRUCTED_AMOUNT,     FORMAT(CONVERT(DECIMAL(38,2),ct.DEALT_AMOUNT), '#,0.00') AS DEALT_AMOUNT,     ct.TERM,     DATEDIFF(DAY, ct.VALUE_DATE, ct.MATURITY_DATE) AS [NO_OF_DAYS],     FORMAT(ct.TRADE_DATE, 'dd/MM/yyyy') AS TRADE_DATE,     FORMAT(ct.VALUE_DATE, 'dd/MM/yyyy') AS VALUE_DATE,     FORMAT(ct.MATURITY_DATE, 'dd/MM/yyyy') AS MATURITY_DATE,     ct.TRANSACTION_TYPE,     CO.INSTRUCTED_BY,     CO.CUSTOM_INSTRUCTION,     ct.BUSINESS_GROUP,     CO.ACCEPTED_BY,     vg.TRANSACTION_NUMBER,     ct.TRANSACTION_STATUS_DECODE as TRANSACTION_STATUS,     CASE      WHEN ct.EXECUTED_RATE < ct.AVERAGE_RATE THEN 'NO'      ELSE 'YES'     END AS PRICE_TO_AVG_RATE,     CT.ORDER_ID,     co.INSTRUCTION_STATUS_DECODE as INSTRUCTION_STATUS,     CO.INSTRUCTION_TYPE,     CASE WHEN vg.VG_608 = 1 THEN 'Exception' ELSE '' END AS EXCEPTION,     vg.VG_608_CREATETIME AS CREATE_DATE,     vg.VG_608 AS EXCEPTION_FLAG,     CT.EXECUTED_DATETIME AS OS_EXECUTED_DATE_TIME,     'CM' AS [DATA_SOURCE]    INTO #temp_final_master_table    FROM VISTA_STAGING.dbo.VG_608_TA_KNOCKBACK_CASH_TABLE vg    INNER JOIN #distinct_ids di on vg.TRANSACTION_NUMBER = di.TRANSACTION_NUMBER and di.DATA_SOURCE = vg.DATA_SOURCE    LEFT JOIN (select distinct ct.* from VISTA_REPORTING.dbo.CASH_TRADES ct    inner join #temp_max_req_trades req on req.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER and req.MAX_API_REQ = ct.API_REQUESTED_DATE) ct ON ct.TRANSACTION_NUMBER=vg.TRANSACTION_NUMBER    LEFT JOIN (SELECT DISTINCT CO.* FROM VISTA_REPORTING.dbo.CASH_ORDERS CO    INNER JOIN #temp_max_req_orders REQ ON REQ.MAX_API_REQ = CO.API_REQUESTED_DATE AND REQ.ORDER_ID = CO.ORDER_ID) co ON co.ORDER_ID=ct.ORDER_ID    LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD2 ON TDD2.MG_USER_ID  = COALESCE(CO.ACCEPTED_BY, CO.INSTRUCTED_BY) AND CAST(CO.PULL_DATE AS DATE) BETWEEN CAST(TDD2.DATE_FROM AS DATE) AND CAST(TDD2.DATE_TO AS DATE)    LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'TA Knockback'                      AND CAST(COALESCE(ct.PULL_DATE,co.[PULL_DATE]) AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_608_TA_KNOCKBACK_CASH_TABLE', 'U') IS NOT NULL    DELETE FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_608_TA_KNOCKBACK_CASH_TABLE    WHERE EXISTS (SELECT DISTINCT TRANSACTION_NUMBER    FROM #distinct_ids    WHERE #distinct_ids.TRANSACTION_NUMBER = VISTA_REPORTING.dbo.MASTER_MFID_VG_608_TA_KNOCKBACK_CASH_TABLE.TRANSACTION_NUMBER)            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_608_TA_KNOCKBACK_CASH_TABLE', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_608_TA_KNOCKBACK_CASH_TABLE    SELECT *    FROM #temp_final_master_table        ELSE        SELECT *    INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_608_TA_KNOCKBACK_CASH_TABLE    FROM #temp_final_master_table            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(    'MASTER_MFID_VG_608_TA_KNOCKBACK_CASH_TABLE', --TABLE_NAME    @START_TIME, --START_TIME    GETDATE(), --END_TIME    DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS    CAST(GETDATE() as date)) --COMPLETION_DATE        IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids    IF OBJECT_ID('tempdb..#temp_cash_orders', 'U') IS NOT NULL DROP TABLE #temp_cash_orders    IF OBJECT_ID('tempdb..#temp_max_req_orders', 'U') IS NOT NULL DROP TABLE #temp_max_req_orders    IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades    IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table        IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg608_cash_idx1')           DROP INDEX mmf_vg608_cash_idx1            ON VISTA_REPORTING.dbo.MASTER_MFID_VG_608_TA_KNOCKBACK_CASH_TABLE               CREATE NONCLUSTERED INDEX mmf_vg608_cash_idx1           ON VISTA_REPORTING.dbo.MASTER_MFID_VG_608_TA_KNOCKBACK_CASH_TABLE            (TRADE_DATE)        IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg608_cash_idx2')           DROP INDEX mmf_vg608_cash_idx2            ON VISTA_REPORTING.dbo.MASTER_MFID_VG_608_TA_KNOCKBACK_CASH_TABLE               CREATE NONCLUSTERED INDEX mmf_vg608_cash_idx2           ON VISTA_REPORTING.dbo.MASTER_MFID_VG_608_TA_KNOCKBACK_CASH_TABLE            (EXCEPTION_FLAG)        IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg608_cash_idx3')           DROP INDEX mmf_vg608_cash_idx3            ON VISTA_REPORTING.dbo.MASTER_MFID_VG_608_TA_KNOCKBACK_CASH_TABLE               CREATE NONCLUSTERED INDEX mmf_vg608_cash_idx3           ON VISTA_REPORTING.dbo.MASTER_MFID_VG_608_TA_KNOCKBACK_CASH_TABLE            (CREATE_DATE)        END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_MFID_TABLE_VG_609_DEPOSITS_REFERENCE_RATE_CASH  CreateDate: 2025-06-26 17:57:25.140  ModifyDate: 2025-06-26 17:57:25.140  --- DEFINITION START ---  -- =============================================    -- Author:  <Samad, Mehreen>    -- Create date: <19/06/2019>    -- Description:     -- <Master exception table for BEST EXECUTION,     -- Deposits Reference Rate (CRR) Exception test     -- for CASH.>    -- =============================================        -- ***************VERSION CONTROL***************        -- *********************************************        CREATE PROCEDURE [dbo].[MASTER_MFID_TABLE_VG_609_DEPOSITS_REFERENCE_RATE_CASH]     -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,         AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        --Used to track total time stored procedure took to run    DECLARE @START_TIME as datetime    SET @START_TIME = GETDATE()        IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids    SELECT DISTINCT t.TRANSACTION_NUMBER, t.DATA_SOURCE    INTO #distinct_ids    FROM VISTA_STAGING.DBO.VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE t            --If the master table doesn't exist then we want to use all the data available, otherwise just the most recent data    IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE', 'U') IS NOT NULL    DELETE FROM #distinct_ids     where NOT EXISTS (SELECT od.TRANSACTION_NUMBER          FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_CASH od          WHERE od.TRANSACTION_NUMBER = #distinct_ids.TRANSACTION_NUMBER)    AND #distinct_ids.DATA_SOURCE = 'CM'        IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE', 'U') IS NOT NULL    DELETE FROM #distinct_ids     where NOT EXISTS (SELECT od.MULTI_FUND_ID          FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od          WHERE od.MULTI_FUND_ID = #distinct_ids.TRANSACTION_NUMBER)    AND #distinct_ids.DATA_SOURCE = 'AL'        IF OBJECT_ID('tempdb..#temp_cash_orders', 'U') IS NOT NULL DROP TABLE #temp_cash_orders    SELECT DISTINCT t.ORDER_ID    into #temp_cash_orders    from Vista_Reporting.dbo.CASH_TRADES t    INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = t.TRANSACTION_NUMBER        UNION        SELECT DISTINCT oc.PM_ORD    FROM Vista_Reporting.dbo.TRADES tr    INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = tr.MULTI_FUND_ID    LEFT JOIN Vista_Reporting.dbo.ORDERS_CROSS oc on oc.TRD_ORD = tr.ORD_NUM            IF OBJECT_ID('tempdb..#temp_max_req_orders', 'U') IS NOT NULL DROP TABLE #temp_max_req_orders    SELECT      co.ORDER_ID,     MAX(API_REQUESTED_DATE) AS MAX_API_REQ    INTO #temp_max_req_orders    FROM VISTA_REPORTING.dbo.CASH_ORDERS co    INNER JOIN #temp_cash_orders tco ON co.ORDER_ID = tco.ORDER_ID    GROUP BY co.ORDER_ID            IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades    SELECT      ct.TRANSACTION_NUMBER,     MAX(API_REQUESTED_DATE) AS MAX_API_REQ    INTO #temp_max_req_trades    FROM VISTA_REPORTING.dbo.CASH_TRADES ct    INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER    GROUP BY ct.TRANSACTION_NUMBER                IF OBJECT_ID('tempdb..#losingbanktemp', 'U') IS NOT NULL DROP TABLE #losingbanktemp --Only Reverse Repo trades have Cash Bank Rates data (!?)    SELECT DISTINCT     ex.[TRANSACTION_NUMBER],     BANK_CODE = STUFF((         SELECT ', ' + BANK_CODE        FROM VISTA_REPORTING.dbo.CASH_BANK_RATES cbr        left join VISTA_REPORTING.dbo.CASH_TRADES ct        on cbr.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]        WHERE cbr.[TRANSACTION_NUMBER] = ex.[TRANSACTION_NUMBER] and cbr.[BANK_CODE] != ct.[BANK] ORDER BY ex.TRANSACTION_NUMBER, BANK_CODE        FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''),     RATE = STUFF((         SELECT ', ' + CAST(CONVERT(DECIMAL(38,4),RATE) AS VARCHAR(50))        FROM VISTA_REPORTING.dbo.CASH_BANK_RATES cbr        left join VISTA_REPORTING.dbo.CASH_TRADES ct        on cbr.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]        WHERE cbr.[TRANSACTION_NUMBER] = ex.[TRANSACTION_NUMBER] and cbr.[BANK_CODE] != ct.[BANK] ORDER BY EX.TRANSACTION_NUMBER, BANK_CODE        FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '')    INTO #losingbanktemp    FROM VISTA_STAGING.dbo.VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE ex    INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER    GROUP BY ex.[TRANSACTION_NUMBER]        IF OBJECT_ID('tempdb..#losingquotetemp', 'U') IS NOT NULL DROP TABLE #losingquotetemp --No quotes data coming through in Aladdin VISTA_STAGING.dbo.QUOTES for Cash    SELECT DISTINCT     ex.[TRANSACTION_NUMBER],     TRD_COUNTERPARTY = STUFF((         SELECT ', ' + c.TRD_COUNTERPARTY        FROM VISTA_REPORTING.dbo.TRADES t        left join VISTA_REPORTING.dbo.QUOTES q        on q.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]        left join VISTA_REPORTING.dbo.COUNTERPARTIES c        on c.[COUNTERPARTY_CODE] = q.[BROKER]        WHERE t.[MULTI_FUND_ID] = ex.[TRANSACTION_NUMBER] and q.[QUOTE_ORIGIN] = 'QUOTE' and t.[COUNTERPARTY_CODE] != q.[BROKER] and ex.[DATA_SOURCE] = 'AL' ORDER BY ex.TRANSACTION_NUMBER, ', ' + c.TRD_COUNTERPARTY        FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''),     QUOTE_VALUE = STUFF((         SELECT ', ' + CAST(CONVERT(DECIMAL(38,4),q.[QUOTE_VALUE]) AS varchar(50))        FROM VISTA_REPORTING.dbo.TRADES t        left join VISTA_REPORTING.dbo.QUOTES q        on q.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]        left join VISTA_REPORTING.dbo.COUNTERPARTIES c        on c.[COUNTERPARTY_CODE] = q.[BROKER]        WHERE t.[MULTI_FUND_ID] = ex.[TRANSACTION_NUMBER] and q.[QUOTE_ORIGIN] = 'QUOTE' and t.[COUNTERPARTY_CODE] != q.[BROKER] and ex.[DATA_SOURCE] = 'AL' ORDER BY ex.TRANSACTION_NUMBER, ', ' + CAST(CONVERT(DECIMAL(38,4),q.[QUOTE_VALUE]) AS varchar(50))        FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '')    INTO #losingquotetemp    FROM VISTA_STAGING.dbo.VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE ex    INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER            IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table    SELECT DISTINCT     COALESCE(ct.[DEALER_NAME_DECODE],tdd2.[FULL_NAME],tdd.[FULL_NAME],dd.[DEFAULT_DEALER]) as DEALER_NAME,     ct.[BANK],        CONVERT(DECIMAL(38,4),ct.[EXECUTED_RATE]) AS EXECUTED_RATE,     CONVERT(DECIMAL(38,4),CRR.[INDICATIVE_REF_RATE]) as REFERENCE_RATE_REUTERS,     CONVERT(DECIMAL(38,4),(ct.[EXECUTED_RATE] - CRR.[INDICATIVE_REF_RATE])) AS DIFFERENCE_BPS,     ref_crr.[TOLERANCE] as THRESHOLD_FOR_DEPOSITS,     CASE       WHEN abs(ct.[EXECUTED_RATE] - CRR.[INDICATIVE_REF_RATE]) < ref_crr.[TOLERANCE] THEN 'Yes'     ELSE 'No'     END AS WITHIN_TOLERANCE,     lbt.[BANK_CODE] as LOSING_BANKS,     lbt.[RATE] as LOSING_RATES,     ct.[STATIC_BANK_COUNT],     ct.[NOOF_QUOTES] as NO_OF_QUOTES,     ref_q.[NO_OF_QUOTES_THRESHOLD] as BANK_COUNT_THRESHOLD,     CASE       WHEN ex.[NWQ_EXCEPTION] = 1 THEN 'Exception'     ELSE NULL     END AS NWQ_EXCEPTION,     CASE       WHEN ex.[B3Q_EXCEPTION] = 1 THEN 'Exception'     ELSE NULL     END AS [B3Q_EXCEPTION],     CASE       WHEN ex.[CRR_EXCEPTION] = 1 THEN 'Exception'      WHEN ct.[PRODUCT] NOT IN ('CP','CD','UKTB')      THEN        CASE         WHEN CRR.[INDICATIVE_REF_RATE] is null or CRR.[INDICATIVE_REF_RATE] = 0 or ct.EXECUTED_RATE > CRR.[INDICATIVE_REF_RATE] THEN NULL --last condition is around the 'in favour' trades        WHEN abs((ct.[EXECUTED_RATE] - CRR.[INDICATIVE_REF_RATE])) > ref_crr.[TOLERANCE] and ct.[TRANSACTION_STATUS_DECODE] not in ('Deleted','Cancelled') THEN 'Exception'       ELSE NULL       END     ELSE NULL     END AS [CRR_EXCEPTION],        ex.[VG_609_CRR] as EXCEPTION_FLAG,     FORMAT(ct.[CONFIRMED_DATETIME],'dd/MM/yyyy HH:mm:ss') as CONFIRMED_DATE_TIME,     ct.[CLIENT_FUND_OR_POOL_CODE] as CLIENT_FUND_POOL_CODE,     ct.[BASE_FUND_CODE],     ct.[TRADE_CURRENCY] as CURRENCY,     ct.[PRODUCT],     FORMAT(ct.[DEALT_AMOUNT], '#,0.00') AS DEALT_AMOUNT,     co.[ORDER_TERM],     DATEDIFF(DAY,ct.[VALUE_DATE],ct.[MATURITY_DATE]) as NO_OF_DAYS,     FORMAT(ct.[TRADE_DATE],'dd/MM/yyyy HH:mm:ss') as TRADE_DATE,     FORMAT(ct.[VALUE_DATE],'dd/MM/yyyy HH:mm:ss') as VALUE_DATE,     FORMAT(ct.[MATURITY_DATE],'dd/MM/yyyy HH:mm:ss') as MATURITY_DATE,     ct.[TRANSACTION_TYPE],     tdd.[FULL_NAME] as [INSTRUCTED_BY],     co.[CUSTOM_INSTRUCTION],     ct.[BUSINESS_GROUP],     tdd2.[FULL_NAME] as [ACCEPTED_BY],     ct.[ORDER_ID],     FORMAT(co.[INSTRUCTED_AMOUNT], '#,0.00') as INSTRUCTED_AMOUNT,     CAST(co.[INSTRUCTION_STATUS_DECODE] as VARCHAR(20)) as [INSTRUCTION_STATUS],     CAST(ct.[TRANSACTION_STATUS_DECODE] as VARCHAR(20)) as [TRANSACTION_STATUS],     ex.[TRANSACTION_NUMBER],     co.[INSTRUCTION_RECEIVED_TIME] as INSTRUCTION_RECEIVED_DATE_TIME,     ct.[PRODUCT_GROUP_NAME] as PRODUCT_GROUP,     NULL as TOLERANCE_REASON_FOR_DEPOSITS, -- Column is not in CASH_TRADES?     FORMAT(ct.[EXECUTED_DATETIME],'dd/MM/yyyy HH:mm:ss') as EXECUTED_DATE_TIME,        ex.[VG_609_CREATETIME_CRR] as CREATE_DATE,     ex.[DATA_SOURCE],     FORMAT(ct.[CONFIRMED_DATETIME],'dd/MM/yyyy HH:mm:ss') as OS_CONFIRMED_DATE_TIME    INTO #temp_final_master_table    FROM VISTA_STAGING.dbo.VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE ex    INNER JOIN #distinct_ids di on ex.TRANSACTION_NUMBER = di.TRANSACTION_NUMBER and di.DATA_SOURCE = ex.DATA_SOURCE    left join (SELECT DISTINCT CT.* FROM VISTA_REPORTING.dbo.CASH_TRADES CT    INNER JOIN #temp_max_req_trades REQ ON REQ.TRANSACTION_NUMBER = CT.TRANSACTION_NUMBER AND REQ.MAX_API_REQ = CT.API_REQUESTED_DATE) ct     on ct.[TRANSACTION_NUMBER] = ex.[TRANSACTION_NUMBER]    left join (SELECT DISTINCT CO.* FROM VISTA_REPORTING.dbo.CASH_ORDERS CO    INNER JOIN #temp_max_req_orders REQ ON REQ.MAX_API_REQ = CO.API_REQUESTED_DATE AND REQ.ORDER_ID = CO.ORDER_ID) co     on ct.[ORDER_ID] = co.[ORDER_ID]    left join #losingbanktemp lbt    on ex.[TRANSACTION_NUMBER] = lbt.[TRANSACTION_NUMBER]    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd    on co.[INSTRUCTED_BY] = tdd.[MG_USER_ID] AND CAST(co.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2    on co.[ACCEPTED_BY] = tdd2.[MG_USER_ID] AND CAST(co.[PULL_DATE] AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)    LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'Reference Rate'                     AND CAST(COALESCE(ct.PULL_DATE,co.[PULL_DATE]) AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)    LEFT JOIN VISTA_REPORTING.dbo.CASH_REFERENCE_RATES CRR on CRR.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER    left join VISTA_STAGING.dbo.REF_CASH_CRR_THRESHOLD ref_crr    on ref_crr.[CURRENCY] = ct.[TRADE_CURRENCY] AND ref_crr.[PRODUCT] = ct.[PRODUCT] AND CAST(ct.[PULL_DATE] as DATE) BETWEEN CAST(ref_crr.[DATE_FROM] as date) AND CAST(ref_crr.[DATE_TO] as DATE)    left join VISTA_STAGING.dbo.REF_CASH_BESTEXC_QUOTES_THRESHOLD ref_q    on ct.[PRODUCT] = ref_q.[PRODUCT] AND CAST(ct.[PULL_DATE] as DATE) BETWEEN CAST(ref_q.[DATE_FROM] as date) AND CAST(ref_q.[DATE_TO] as DATE)        WHERE ex.[DATA_SOURCE] = 'CM'                IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE', 'U') IS NOT NULL    DELETE FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE    WHERE EXISTS (SELECT DISTINCT TRANSACTION_NUMBER    FROM #distinct_ids    WHERE #distinct_ids.TRANSACTION_NUMBER = MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE.TRANSACTION_NUMBER)                 IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE    SELECT *    FROM #temp_final_master_table        ELSE        SELECT *    INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE    FROM #temp_final_master_table            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(    'MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE', --TABLE_NAME    @START_TIME, --START_TIME    GETDATE(), --END_TIME    DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS    CAST(GETDATE() as date)) --COMPLETION_DATE            IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids    IF OBJECT_ID('tempdb..#temp_cash_orders', 'U') IS NOT NULL DROP TABLE #temp_cash_orders    IF OBJECT_ID('tempdb..#temp_max_req_orders', 'U') IS NOT NULL DROP TABLE #temp_max_req_orders    IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades    IF OBJECT_ID('tempdb..#losingbanktemp', 'U') IS NOT NULL DROP TABLE #losingbanktemp    IF OBJECT_ID('tempdb..#losingquotetemp', 'U') IS NOT NULL DROP TABLE #losingquotetemp    IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table            IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes      WHERE name = N'mmf_vg609_cash_idx1')       DROP INDEX mmf_vg609_cash_idx1            ON VISTA_REPORTING.dbo.MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE        CREATE NONCLUSTERED INDEX mmf_vg609_cash_idx1    ON VISTA_REPORTING.dbo.MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE     (TRADE_DATE)        IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes      WHERE name = N'mmf_vg609_cash_idx2')       DROP INDEX mmf_vg609_cash_idx2            ON VISTA_REPORTING.dbo.MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE        CREATE NONCLUSTERED INDEX mmf_vg609_cash_idx2    ON VISTA_REPORTING.dbo.MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE     (EXCEPTION_FLAG)        IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes      WHERE name = N'mmf_vg609_cash_idx3')       DROP INDEX mmf_vg609_cash_idx3            ON VISTA_REPORTING.dbo.MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE        CREATE NONCLUSTERED INDEX mmf_vg609_cash_idx3    ON VISTA_REPORTING.dbo.MASTER_MFID_VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE     (CREATE_DATE)            END            --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_MFID_TABLE_VG_610_TBILLS_CP_CD_CASH  CreateDate: 2025-06-26 17:57:49.413  ModifyDate: 2025-06-26 17:57:49.413  --- DEFINITION START ---  -- =============================================    -- Author:  <Samad, Mehreen>    -- Create date: <18/06/2019>    -- Description:     -- <Master exception table for TBILLS, CP, CD,     -- CANCELLATIONS & AMENDMENTS Exception test     -- for CASH.>    -- =============================================        -- ***************VERSION CONTROL***************        -- *********************************************        CREATE PROCEDURE [dbo].[MASTER_MFID_TABLE_VG_610_TBILLS_CP_CD_CASH]     -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,         AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        --Used to track total time stored procedure took to run    DECLARE @START_TIME as datetime    SET @START_TIME = GETDATE()        IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids    SELECT DISTINCT t.MULTI_FUND_ID, t.DATA_SOURCE    INTO #distinct_ids    FROM VISTA_STAGING.DBO.VG_610_TBILLS_CP_CD_CASH_TABLE t            --If the master table doesn't exist then we want to use all the data available, otherwise just the most recent data    IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE', 'U') IS NOT NULL    DELETE FROM #distinct_ids     where NOT EXISTS (SELECT od.TRANSACTION_NUMBER          FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_CASH od          WHERE od.TRANSACTION_NUMBER = #distinct_ids.MULTI_FUND_ID)    AND #distinct_ids.DATA_SOURCE = 'CM'        IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE', 'U') IS NOT NULL    DELETE FROM #distinct_ids     where NOT EXISTS (SELECT od.MULTI_FUND_ID          FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od          WHERE od.MULTI_FUND_ID = #distinct_ids.MULTI_FUND_ID)    AND #distinct_ids.DATA_SOURCE = 'AL'            IF OBJECT_ID('tempdb..#temp_cash_orders', 'U') IS NOT NULL DROP TABLE #temp_cash_orders    SELECT DISTINCT t.ORDER_ID    into #temp_cash_orders    from Vista_Reporting.dbo.CASH_TRADES t    INNER JOIN #distinct_ids di ON di.MULTI_FUND_ID = t.TRANSACTION_NUMBER        UNION        SELECT DISTINCT oc.PM_ORD    FROM Vista_Reporting.dbo.TRADES tr    INNER JOIN #distinct_ids di ON di.MULTI_FUND_ID = tr.MULTI_FUND_ID    LEFT JOIN Vista_Reporting.dbo.ORDERS_CROSS oc on oc.TRD_ORD = tr.ORD_NUM            IF OBJECT_ID('tempdb..#MAX_TOUCH_PM', 'U') IS NOT NULL DROP TABLE #MAX_TOUCH_PM    SELECT DISTINCT      ORD_NUM,      MAX(TOUCH_COUNT) AS MAX_TOUCH     INTO #MAX_TOUCH_PM    FROM VISTA_REPORTING.DBO.PM_ORDERS pm    INNER JOIN #temp_cash_orders tct ON tct.ORDER_ID = pm.ORD_NUM    GROUP BY ORD_NUM            IF OBJECT_ID('tempdb..#MAX_TOUCH_T', 'U') IS NOT NULL DROP TABLE #MAX_TOUCH_T    SELECT DISTINCT      t.MULTI_FUND_ID,      MAX(TOUCH_COUNT) AS MAX_TOUCH     INTO #MAX_TOUCH_T    FROM VISTA_REPORTING.DBO.TRADES t    INNER JOIN #distinct_ids di ON di.MULTI_FUND_ID = t.MULTI_FUND_ID    GROUP BY t.MULTI_FUND_ID            IF OBJECT_ID('tempdb..#losingquotetemp', 'U') IS NOT NULL DROP TABLE #losingquotetemp --No quotes data coming through in Aladdin VISTA_STAGING.dbo.QUOTES for Cash    SELECT DISTINCT     ex.[MULTI_FUND_ID],     TRD_COUNTERPARTY = STUFF((         SELECT DISTINCT ', ' + c.TRD_COUNTERPARTY        FROM VISTA_REPORTING.dbo.TRADES t        left join VISTA_REPORTING.dbo.QUOTES q        on q.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]        left join VISTA_REPORTING.dbo.COUNTERPARTIES c        on c.[COUNTERPARTY_CODE] = q.[BROKER] AND c.TRD_COUNTERPARTY != t.TRD_COUNTERPARTY        WHERE t.[MULTI_FUND_ID] = ex.[MULTI_FUND_ID] and q.[QUOTE_ORIGIN] = 'QUOTE' and t.[FinalFlag] = 1         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''),     QUOTE_VALUE = STUFF((         SELECT DISTINCT ', ' + CAST(CONVERT(DECIMAL(38,4),q.[QUOTE_VALUE]) AS varchar(50))        FROM VISTA_REPORTING.dbo.TRADES t        left join VISTA_REPORTING.dbo.QUOTES q        on q.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]        left join VISTA_REPORTING.dbo.COUNTERPARTIES c        on c.[COUNTERPARTY_CODE] = q.[BROKER] AND c.TRD_COUNTERPARTY != t.TRD_COUNTERPARTY        WHERE t.[MULTI_FUND_ID] = ex.[MULTI_FUND_ID] and q.[QUOTE_ORIGIN] = 'QUOTE' and t.[FinalFlag] = 1        FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '')    INTO #losingquotetemp    FROM VISTA_STAGING.dbo.VG_610_TBILLS_CP_CD_CASH_TABLE ex    INNER JOIN #temp_cash_orders tct ON tct.ORDER_ID = ex.ORD_NUM        IF OBJECT_ID('tempdb..#staticbankcount', 'U') IS NOT NULL DROP TABLE #staticbankcount    SELECT DISTINCT     ex.[MULTI_FUND_ID],     COUNT(DISTINCT q.[BROKER]) as BROKER_COUNT    INTO #staticbankcount    FROM VISTA_STAGING.dbo.VG_610_TBILLS_CP_CD_CASH_TABLE ex    LEFT JOIN VISTA_REPORTING.dbo.TRADES t    on ex.[MULTI_FUND_ID] = t.[MULTI_FUND_ID] and ex.[DATA_SOURCE] = 'AL'    LEFT JOIN VISTA_REPORTING.dbo.QUOTES q     on t.[MULTI_FUND_ID] = q.[MULTI_FUND_ID] and q.[QUOTE_ORIGIN] = 'QUOTE'    INNER JOIN #distinct_ids di ON di.MULTI_FUND_ID = ex.MULTI_FUND_ID    GROUP BY ex.[MULTI_FUND_ID]        IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table    SELECT DISTINCT     pm.[TRADER] as ACCEPTED_BY,     ex.[TRD_AMEND_TYPE] as CD_CP_CANCELLATION_REASON,     t.[SM_SEC_GROUP] as INSTRUCTION_TYPE, --/SM_SEC_TYPE?     FORMAT(t.[TRD_TRADE_DATE], 'dd/MM/yyyy HH:mm:ss') as [TRADE_DATE],     FORMAT(t.[TRD_SETTLE_DATE], 'dd/MM/yyyy HH:mm:ss') as [MATURITY_DATE], -- Shouldn't this be MATURITY?     t.[TRAN_TYPE] as BUY_SELL,     pr.[SEC_DESC1] as SEC_DESC,     prim.INST_TYPE as PRODUCT,      FORMAT(pm.FACE, '#,0.00') as INSTRUCTED_AMOUNT, -- Not sure what to use for 'ORDERS.ORD_DETAIL_FACE'? taken to be this from other scripts GUESS     FORMAT(pm.[AUTH_TIME], 'dd/MM/yyyy HH:mm:ss') as INSTRUCTION_RECEIVED_DATE_TIME,     FORMAT(pm.[ACTIVE_TIME], 'dd/MM/yyyy HH:mm:ss') as ACCEPTED_DATE_TIME,     FORMAT(t.[EXECUTION_TIME], 'dd/MM/yyyy HH:mm:ss') as CONFIRMED_DATE_TIME,     COALESCE(t.[TRD_EX_BROKER_CODE], t.[TRD_COUNTERPARTY]) as [BANK],        CONVERT(DECIMAL(38,4),t.[TRD_PRICE]) as [EXECUTED_RATE],     lqt.[TRD_COUNTERPARTY] as LOSING_BANKS,     lqt.[QUOTE_VALUE] as LOSING_RATES,     t.[PORTFOLIOS_PORTFOLIO_NAME] as [BASE_FUND_CODE],     'Cash Products' as PRODUCT_TYPE,      t.SM_SEC_TYPE as PRODUCT_GROUP, -- No value given     case when t.SM_SEC_TYPE = 'TBILL' then 'Treasury Bills' when t.SM_SEC_TYPE = 'CD' then 'Certificate of Deposit' when t.SM_SEC_TYPE = 'CP' then 'Commercial Paper' else null end  as PRODUCT_GROUP_NAME, -- No value given     pm.[ASSIGNED_TO],     t.[TRD_LOCATION] as TRADER_LOCATION,     pm.[STATUS] as [INSTRUCTION_STATUS],     ex.[TRD_STATUS] as [TRANSACTION_STATUS],     t.[TRD_PURPOSE] as TRADE_PURPOSE,     FORMAT(1.0*pm.FACE/e.GBP_INDEX_RATE, '#,0.00') as GBP_EQUIVALENT_INSTRUCTION, -- No value given i think this is face/index rate.     ex.[MULTI_FUND_ID] as TRANSACTION_NUMBER,     ex.[ORD_NUM] as ORDER_ID,     COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) as DEALER_NAME,     ex.TOUCH_COUNT,        ex.[VG_610_CREATETIME] as CREATE_DATE,        ex.[VG_610] as EXCEPTION_FLAG,     EX.AMENDMENT_FLAG_CREATETIME AS OS_MODIFIED_TIME, -- THIS MAY BE WRONG BUT FOR NOW     ex.[DATA_SOURCE],     t.TRD_CURRENCY as CURRENCY     INTO #temp_final_master_table    FROM VISTA_STAGING.dbo.VG_610_TBILLS_CP_CD_CASH_TABLE ex    INNER JOIN #distinct_ids di on ex.MULTI_FUND_ID = di.MULTI_FUND_ID and di.DATA_SOURCE = ex.DATA_SOURCE    LEFT JOIN ( SELECT DISTINCT T.* FROM VISTA_REPORTING.dbo.TRADES T    INNER JOIN #MAX_TOUCH_T MTT ON MTT.MAX_TOUCH = T.TOUCH_COUNT AND MTT.MULTI_FUND_ID = T.MULTI_FUND_ID and T.FinalFlag = 1      ) t    on ex.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]    LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr    on t.[MULTI_FUND_ID] = pr.[MULTI_FUND_ID]     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc    on t.[ORD_NUM] = oc.[TRD_ORD]    LEFT JOIN (select distinct pm.* from VISTA_REPORTING.dbo.PM_ORDERS pm    LEFT JOIN #MAX_TOUCH_PM mtp on mtp.MAX_TOUCH = pm.TOUCH_COUNT and mtp.ORD_NUM = pm.ORD_NUM) pm    on oc.[PM_ORD] = pm.[ORD_NUM]    LEFT JOIN #losingquotetemp lqt    on ex.[MULTI_FUND_ID] = lqt.[MULTI_FUND_ID]    LEFT JOIN #staticbankcount sbc    on ex.[MULTI_FUND_ID] = sbc.[MULTI_FUND_ID]    LEFT JOIN VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd    on t.[TRD_TRADER] = tdd.[INITIALS] AND CAST(t.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)    LEFT JOIN (select distinct multi_fund_id, inst_type from VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) prim on ex.MULTI_FUND_ID = prim.MULTI_FUND_ID    OUTER APPLY (SELECT TOP 1 e.* FROM VISTA_REPORTING.dbo.FX_RATES e         WHERE e.CURRENCY = pm.CURRENCY and CONVERT(date, e.MARKDATE) <= CONVERT(date, pm.AUTH_TIME)        ORDER BY e.MARKDATE DESC) e    LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD2 ON TDD2.INITIALS = PM.TRADER  AND CAST(PM.PULL_DATE AS DATE) BETWEEN CAST(TDD2.DATE_FROM AS DATE) AND CAST(TDD2.DATE_TO AS DATE)    LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'CD CP TBills Cancel Amend'                     AND CAST(COALESCE(t.PULL_DATE,pm.[PULL_DATE]) AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)                IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE', 'U') IS NOT NULL    DELETE FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE    WHERE EXISTS (SELECT DISTINCT MULTI_FUND_ID    FROM #distinct_ids    WHERE #distinct_ids.MULTI_FUND_ID = VISTA_REPORTING.dbo.MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE.TRANSACTION_NUMBER)            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE    SELECT *    FROM #temp_final_master_table        ELSE        SELECT *    INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE    FROM #temp_final_master_table            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(    'MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE', --TABLE_NAME    @START_TIME, --START_TIME    GETDATE(), --END_TIME    DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS    CAST(GETDATE() as date)) --COMPLETION_DATE            IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids    IF OBJECT_ID('tempdb..#temp_cash_orders', 'U') IS NOT NULL DROP TABLE #temp_cash_orders    IF OBJECT_ID('tempdb..#MAX_TOUCH_PM', 'U') IS NOT NULL DROP TABLE #MAX_TOUCH_PM    IF OBJECT_ID('tempdb..#MAX_TOUCH_T', 'U') IS NOT NULL DROP TABLE #MAX_TOUCH_T    IF OBJECT_ID('tempdb..#losingquotetemp', 'U') IS NOT NULL DROP TABLE #losingquotetemp    IF OBJECT_ID('tempdb..#staticbankcount', 'U') IS NOT NULL DROP TABLE #staticbankcount    IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table            IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg610_cash_idx1')           DROP INDEX mmf_vg610_cash_idx1            ON VISTA_REPORTING.dbo.MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE               CREATE NONCLUSTERED INDEX mmf_vg610_cash_idx1           ON VISTA_REPORTING.dbo.MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE            (TRADE_DATE)        IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg610_cash_idx2')           DROP INDEX mmf_vg610_cash_idx2            ON VISTA_REPORTING.dbo.MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE               CREATE NONCLUSTERED INDEX mmf_vg610_cash_idx2           ON VISTA_REPORTING.dbo.MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE            (EXCEPTION_FLAG)        IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg610_cash_idx3')           DROP INDEX mmf_vg610_cash_idx3            ON VISTA_REPORTING.dbo.MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE               CREATE NONCLUSTERED INDEX mmf_vg610_cash_idx3           ON VISTA_REPORTING.dbo.MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE            (CREATE_DATE)            END            --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_MFID_TABLE_VG_612_ORDER_ALLOCATION_CASH  CreateDate: 2025-06-26 17:58:04.057  ModifyDate: 2025-06-26 17:58:04.057  --- DEFINITION START ---      CREATE PROCEDURE [dbo].[MASTER_MFID_TABLE_VG_612_ORDER_ALLOCATION_CASH]        AS        DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()             --Purpose: returns the distinct IDs from the VG tables which will be used to raise potential exceptions    IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids;    SELECT DISTINCT TRANSACTION_NUMBER, DATA_SOURCE    INTO #distinct_ids    FROM VISTA_STAGING.DBO.VG_612_ORDER_ALLOCATION_CASH_MM_TABLE         UNION ALL        SELECT DISTINCT TRANSACTION_NUMBER, DATA_SOURCE    FROM VISTA_STAGING.DBO.VG_612_ORDER_ALLOCATION_CASH_RR_TABLE;            --Purpose: deletes any trades from the distinct IDs table where the transaction number is not in the one day processing table    IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_MM_TABLE', 'U') IS NOT NULL    AND OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_RR_TABLE', 'U') IS NOT NULL    DELETE FROM #distinct_ids     WHERE NOT EXISTS (SELECT od.TRANSACTION_NUMBER          FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_CASH od          WHERE od.TRANSACTION_NUMBER = #distinct_ids.TRANSACTION_NUMBER)    AND #distinct_ids.DATA_SOURCE = 'CM';            --Purpose: deletes any trades from the distinct IDs table where the multi fund id is not in the one day processing table    IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_MM_TABLE', 'U') IS NOT NULL    AND OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_RR_TABLE', 'U') IS NOT NULL    DELETE FROM #distinct_ids     where NOT EXISTS (SELECT od.MULTI_FUND_ID -- please confirm this is the correct column           FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od          WHERE od.MULTI_FUND_ID = #distinct_ids.TRANSACTION_NUMBER)    AND #distinct_ids.DATA_SOURCE = 'AL';            --Purpose: creates a list of all cash trades and cash orders which are also present in the distinct IDs table    --this table is used multiple times as an inner join -- ask DDC why     IF OBJECT_ID('tempdb..#temp_cash_trades', 'U') IS NOT NULL DROP TABLE #temp_cash_trades    SELECT DISTINCT t.TRANSACTION_NUMBER    INTO #temp_cash_trades    FROM Vista_Reporting.dbo.CASH_TRADES t    INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = t.TRANSACTION_NUMBER        UNION        SELECT DISTINCT t.MULTI_FUND_ID --not sure if multi_fund_id is consistent with transaction_number    FROM Vista_Reporting.dbo.TRADES t    INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = t.MULTI_FUND_ID;            --Purpose: adding TRD_ORD and MULTI_FUND_ID to the rows in the distinct IDs table     --Questions:     --1) what is the difference between distinct IDs and distinct trade IDs?     --2) this only returns 11 rows - is that expected?    IF OBJECT_ID('tempdb..#distinct_trade_ids', 'U') IS NOT NULL DROP TABLE #distinct_trade_ids;    SELECT DISTINCT t.ORD_NUM AS TRD_ORD,        t.MULTI_FUND_ID    INTO #distinct_trade_ids    FROM #distinct_ids di    INNER JOIN Vista_Reporting.dbo.TRADES t ON t.MULTI_FUND_ID = DI.TRANSACTION_NUMBER;            --Purpose: an inner join on the master tables and two others    --ask DDC to explain the logic in having this and the next three temp tables as inner joins further down     IF OBJECT_ID('tempdb..#temp_max_ORDER_touch', 'U') IS NOT NULL DROP TABLE #temp_max_ORDER_touch;    SELECT po.ORD_NUM,      MAX(po.TOUCH_COUNT) AS MAX_TOUCH    INTO #temp_max_ORDER_touch    FROM VISTA_REPORTING.dbo.PM_ORDERS po    LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM = po.ORD_NUM    INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = t.MULTI_FUND_ID --unsure if this join will work with the previous left join having been added    GROUP BY po.ORD_NUM;            --Purpose: the same as above but on trades rather than orders    IF OBJECT_ID('tempdb..#temp_max_trade_touch', 'U') IS NOT NULL DROP TABLE #temp_max_trade_touch;    SELECT t.MULTI_FUND_ID,      MAX(t.TOUCH_COUNT) AS MAX_TOUCH    INTO #temp_max_trade_touch    FROM VISTA_REPORTING.dbo.TRADES t    INNER JOIN #distinct_trade_ids tid ON tid.MULTI_FUND_ID = t.MULTI_FUND_ID    INNER JOIN #temp_cash_trades tct ON tct.TRANSACTION_NUMBER = t.MULTI_FUND_ID    GROUP BY t.MULTI_FUND_ID;             --Purpose: filter as inner joins further down    IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades;    SELECT ct.TRANSACTION_NUMBER,      MAX(ct.API_REQUESTED_DATE) AS MAX_API_REQ    INTO #temp_max_req_trades    FROM VISTA_REPORTING.dbo.CASH_TRADES ct    INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER    GROUP BY ct.TRANSACTION_NUMBER;              --Purpose: an inner join on the table below    IF OBJECT_ID('tempdb..#temp_max_ORDER_CM', 'U') IS NOT NULL DROP TABLE #temp_max_ORDER_CM;    SELECT DISTINCT ORDER_ID,        MAX(api_requested_date) AS max_date    INTO #temp_max_order_cm    FROM VISTA_REPORTING.dbo.CASH_ORDERS     GROUP BY ORDER_ID;            --Purpose: this is where the above temp filters come in as inner joins. Assuming this is done here rather than     --in the master table so that there is not too many joins in the master.    --Question: should we combine this to the master table to make it more concise?    IF OBJECT_ID('tempdb..#temp_combo_orders', 'U') IS NOT NULL DROP TABLE #temp_combo_orders;    SELECT DISTINCT     co.ORDER_ID,     ACCEPTED_DATETIME,     INSTRUCTION_RECEIVED_DATE,     INSTRUCTION_INITIATION_DATE_TIME,     INSTRUCTED_CURRENCY,     CAST(TRADE_DATE AS DATE) AS TRADE_DATE,     INSTRUCTED_AMOUNT,     INSTRUCTED_BY,     SEQUENCE_EXCEPTION_REASON,     SEQUENCE_EXCEPTION_NARRATION,     DELETED_REASON,     DELETED_REASON_NARRATION,     INSTRUCTION_STATUS_DECODE,     FREEZE_DATETIME,     FREEZEREASON,     FREEZE_REASON_NARRATION,     RELEASE_DATETIME,     RELEASE_REASON,     RELEASE_REASON_NARRATION,     CUSTOM_INSTRUCTION,     ACCEPTED_BY,     TRANSACTION_TYPE,     PULL_DATE,     PRODUCT,     CLIENT_FUND_OR_POOL_CODE,     CAST(INSTRUCTION_STATUS AS NVARCHAR(50)) AS INSTRUCTION_STATUS    INTO #temp_combo_orders    FROM VISTA_REPORTING.dbo.CASH_ORDERS co    INNER JOIN #temp_max_order_cm moo on moo.ORDER_ID = CO.order_id and moo.max_date = CO.api_requested_date        UNION        SELECT DISTINCT     pm.ORD_NUM,     pm.ACTIVE_TIME,     pm.AUTH_TIME,     pm.ACTIVE_TIME,     pm.CURRENCY,     null,     pm.FACE,     pm.PM,     NULL,     NULL,     NULL,     NULL,     pm.[STATUS],     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     pm.COMMENTS_VALUE,     TRADER,     TRAN_TYPE,     pm.PULL_DATE,     SM_SEC_TYPE as PRODUCT,     NULL AS CLIENT_FUND_OR_POOL_CODE,     CAST(pm.STATUS AS NVARCHAR(50)) AS INSTRUCTION_STATUS    FROM VISTA_REPORTING.dbo.PM_ORDERS pm    INNER JOIN #temp_max_ORDER_touch mot on mot.ORD_NUM = pm.ORD_NUM and mot.MAX_TOUCH = pm.TOUCH_COUNT    --LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD=pm.ORD_NUM    where pm.DEALING_DESK = 'Cash';            IF OBJECT_ID('tempdb..#temp_combo_trades', 'U') IS NOT NULL DROP TABLE #temp_combo_trades    SELECT DISTINCT ORDER_ID,        CLIENT_FUND_OR_POOL_CODE,        BASE_FUND_CODE,        CAST(VALUE_DATE AS DATE) as VALUE_DATE,         CAST(MATURITY_DATE AS DATE) AS MATURITY_DATE,        DEALER_NAME_DECODE,        TERM,        BUSINESS_GROUP,        DEALER_NAME,        DEALT_AMOUNT,        EXECUTED_DATETIME,        BANK AS EXECUTED_BANK,        PULL_DATE,        EXECUTED_RATE,        CONFIRMED_DATETIME,        CAST(TRADE_DATE AS DATE) AS TRADE_DATE,        TRANSACTION_TYPE,        ct.TRANSACTION_NUMBER,        ct.NOOF_QUOTES AS NO_OF_QUOTES    INTO #temp_combo_trades    FROM VISTA_REPORTING.dbo.CASH_TRADES ct    INNER JOIN #temp_max_req_trades req on req.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER AND req.MAX_API_REQ = ct.API_REQUESTED_DATE    INNER JOIN #temp_cash_trades t ON t.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER        UNION        SELECT DISTINCT t.ORD_NUM,        NULL,        t.PORTFOLIOS_PORTFOLIO_NAME,        CAST(TRD_TRADE_DATE AS DATE) AS value_date,        t.TRD_SETTLE_DATE,        t.TRD_TRADER,        NULL,        CASE WHEN PCG.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP'          WHEN PCG.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG'          WHEN (PCG.[PORTFOLIO_GROUP_NAME] = 'MG_PROD'           OR PCG.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM'           ELSE NULL          END AS BUSINESS_GROUP,        t.TRD_TRADER,        NULL,        t.EXECUTION_TIME,        NULL,        t.PULL_DATE,        t.TRD_PRICE,        t.EXECUTION_TIME,        CAST(t.TRD_TRADE_DATE AS DATE) AS TRD_TRADE_DATE,        NULL,        t.MULTI_FUND_ID AS TRANSACTION_NUMBER,        NULL AS NO_OF_QUOTES    FROM VISTA_REPORTING.dbo.TRADES t    INNER JOIN #temp_max_trade_touch mtt ON mtt.MAX_TOUCH = t.TOUCH_COUNT AND mtt.MULTI_FUND_ID = t.MULTI_FUND_ID    --LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD = t.ORD_NUM    LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, INST_TYPE, DEALING_DESK          FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr ON pr.MULTI_FUND_ID = t.MULTI_FUND_ID    LEFT JOIN (SELECT PORTFOLIO_NAME, PORTFOLIO_GROUP_FULL_NAME, PORTFOLIO_GROUP_NAME        FROM VISTA_REPORTING.DBO.PORTFOLIO_GROUPS_TREASURY ) PCG ON PCG.PORTFOLIO_NAME = CONVERT(VARCHAR(30), T.FUND )     INNER JOIN #temp_cash_trades tct ON tct.TRANSACTION_NUMBER = t.MULTI_FUND_ID    WHERE  pr.DEALING_DESK = 'CASH' AND EXECUTION_TIME IS NOT NULL;            IF OBJECT_ID('tempdb..#temp_AL_losing_bank_rate', 'U') IS NOT NULL DROP TABLE #temp_AL_losing_bank_rate;    SELECT DISTINCT t.MULTI_FUND_ID, q.QUOTE_VALUE, c.TRD_COUNTERPARTY    INTO #temp_AL_losing_bank_rate    FROM VISTA_REPORTING.dbo.TRADES t    LEFT JOIN VISTA_REPORTING.dbo.QUOTES q ON q.MULTI_FUND_ID = t.MULTI_FUND_ID --DDC to confirm as this was a guess     LEFT JOIN VISTA_REPORTING.dbo.COUNTERPARTIES c ON c.[COUNTERPARTY_CODE] = q.[BROKER]    WHERE      t.TRD_COUNTERPARTY != c.TRD_COUNTERPARTY AND     EXISTS (SELECT di.TRANSACTION_NUMBER FROM #distinct_ids di WHERE di.TRANSACTION_NUMBER = t.MULTI_FUND_ID);            IF OBJECT_ID('tempdb..#temp_losing', 'U') IS NOT NULL DROP TABLE #temp_losing      SELECT DISTINCT      ct.TRANSACTION_NUMBER,     cbr.BANK_CODE,     cbr.RATE,     CONCAT(ct.TRANSACTION_NUMBER, ',', cbr.BANK_CODE) BANK_ORDER,     CONCAT(ct.TRANSACTION_NUMBER, ',', CAST(CONVERT(DECIMAL(38,4),RATE) AS varchar(50))) RATE_ORDER    INTO #temp_losing    FROM VISTA_REPORTING.dbo.CASH_TRADES ct     LEFT JOIN VISTA_REPORTING.dbo.CASH_BANK_RATES cbr ON cbr.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]    WHERE EXISTS (SELECT di.TRANSACTION_NUMBER FROM #distinct_ids di WHERE di.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER)       AND cbr.[BANK_CODE] != CAST(ct.[BANK] AS VARCHAR(50))            IF OBJECT_ID('tempdb..#conc_datatemp', 'U') IS NOT NULL DROP TABLE #conc_datatemp;    SELECT DISTINCT      ex.TRANSACTION_NUMBER,     STUFF((SELECT  ', ' + CAST(tl.BANK_CODE AS VARCHAR(50))       FROM #temp_losing tl       WHERE tl.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER          AND ex.DATA_SOURCE = 'CM'       ORDER BY tl.BANK_ORDER       FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS LOSING_BANK_1,     STUFF((SELECT  ', ' + CAST(CONVERT(DECIMAL(38,4), tl.RATE) AS varchar(50))       FROM #temp_losing tl       WHERE tl.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER        AND ex.DATA_SOURCE = 'CM'       ORDER BY tl.RATE_ORDER       FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS LOSING_RATE_1,     STUFF((SELECT  ' | '+ CAST(CT.TRANSACTION_TYPE AS varchar(50))       FROM #temp_combo_trades ct       WHERE ct.TRANSACTION_NUMBER  = ex.TRANSACTION_NUMBER order by TRANSACTION_NUMBER       FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, '') AS TRANSACTION_TYPE ,      'RR' AS CM_SOURCE    INTO #conc_datatemp    FROM VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_RR_TABLE ex    INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER        UNION        SELECT DISTINCT      ex.TRANSACTION_NUMBER,     STUFF((SELECT  ', ' + CAST(tl.BANK_CODE AS VARCHAR(50))       FROM #temp_losing tl       WHERE tl.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER        AND ex.DATA_SOURCE = 'CM'       ORDER BY tl.BANK_ORDER       FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''),      STUFF((SELECT ', ' + CAST(CONVERT(DECIMAL(38,4),RATE) AS varchar(50))       FROM #temp_losing tl       WHERE tl.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER        AND ex.DATA_SOURCE = 'CM'       ORDER BY tl.RATE_ORDER       FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''),     STUFF((SELECT  ' | '+ CAST(CT.TRANSACTION_TYPE AS varchar(50))         FROM #temp_combo_trades ct         WHERE ct.TRANSACTION_NUMBER  = ex.TRANSACTION_NUMBER order by TRANSACTION_NUMBER         FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),      'MM'    FROM VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_MM_TABLE ex    INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER;            --Temp final master table     IF OBJECT_ID('tempdb..#temp_final_master_rr', 'U') IS NOT NULL DROP TABLE #temp_final_master_rr;    SELECT DISTINCT COALESCE(ct.[DEALER_NAME_DECODE],tdd2.[FULL_NAME],tdd.[FULL_NAME],DD.[DEFAULT_DEALER]) as DEALER_NAME,      co.SEQUENCE_EXCEPTION_REASON,      co.SEQUENCE_EXCEPTION_NARRATION,      co.CLIENT_FUND_OR_POOL_CODE AS CLIENT_FUND,      co.PRODUCT,      co.INSTRUCTED_CURRENCY,      CAST(co.INSTRUCTED_AMOUNT AS DECIMAL(32,2)) AS INSTRUCTED_AMOUNT,      CAST(FORMAT(co.INSTRUCTION_RECEIVED_DATE,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) AS INSTRUCTION_RECEIVED_DATE_TIME,      ct.EXECUTED_BANK AS BANK,      CAST(ct.EXECUTED_RATE AS DECIMAL(32,4)) AS EXECUTED_RATE,      CAST(ct.DEALT_AMOUNT AS DECIMAL(32,2)) AS DEALT_AMOUNT,      CAST(FORMAT(co.ACCEPTED_DATETIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) AS ACCEPTED_DATETIME,      CAST(FORMAT(co.INSTRUCTION_INITIATION_DATE_TIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) AS INSTRUCTION_INITIATION_DATE_TIME,      CAST(FORMAT(ct.CONFIRMED_DATETIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) AS CONFIRMED_DATETIME,      CAST(FORMAT(ct.EXECUTED_DATETIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) AS EXECUTED_DATETIME,      CASE WHEN cl.FIRM_FUND IS NULL        THEN 'CLIENT'       ELSE 'FIRM'       END AS FIRM_VS_CLIENT,      cdt.LOSING_BANK_1,      cdt.LOSING_RATE_1,      ct.NO_OF_QUOTES,      STATIC_BANK_PANEL = STUFF((      SELECT  ' | ' + CAST(cmb.BANK_NAME AS VARCHAR(50))      FROM VISTA_REPORTING.dbo.CASH_MAPPED_BANKS cmb      WHERE cmb.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)') ,1,2,''),      FORMAT(ct.TRADE_DATE, 'dd/MM/yyyy') AS TRADE_DATE,      FORMAT(ct.VALUE_DATE, 'dd/MM/yyyy') AS VALUE_DATE,      FORMAT(CT.MATURITY_DATE, 'dd/MM/yyyy') AS MATURITY_DATE,      ct.TERM,      cdt.TRANSACTION_TYPE,      co.CUSTOM_INSTRUCTION,      ct.BASE_FUND_CODE,      ct.BUSINESS_GROUP,      co.INSTRUCTED_BY,      co.ACCEPTED_BY,      co.DELETED_REASON,      co.DELETED_REASON_NARRATION,      CAST(FORMAT(co.FREEZE_DATETIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) AS FREEZE_DATETIME,      co.FREEZEREASON AS FREEZE_REASON,      co.FREEZE_REASON_NARRATION,      CAST(FORMAT(co.RELEASE_DATETIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) AS RELEASE_DATETIME,      co.RELEASE_REASON,      co.RELEASE_REASON_NARRATION,      DATEDIFF(MINUTE,CO.FREEZE_DATETIME, CO.RELEASE_DATETIME) AS [TIME_ELAPSED_BETWEEN_FREEZE_AND_RELEASE],      co.INSTRUCTION_STATUS,      co.ORDER_ID,      ct.TRANSACTION_NUMBER,      ex.VG_612_CREATETIME,      ex.DATA_SOURCE,      CAST(ex.VG_612 AS INT) AS EXCEPTION    INTO #temp_final_master_rr    FROM VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_RR_TABLE ex    LEFT JOIN #temp_combo_trades ct on ct.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER    LEFT JOIN #temp_combo_orders co on ct.ORDER_ID = co.ORDER_ID    LEFT JOIN VISTA_STAGING.dbo.REF_COH_FIRM_FUND_LIST cl ON cl.FIRM_FUND = ct.CLIENT_FUND_OR_POOL_CODE AND co.INSTRUCTION_RECEIVED_DATE BETWEEN cl.DATE_FROM AND cl.DATE_TO    LEFT JOIN VISTA_REPORTING.dbo.CASH_BANK_RATES cbr ON cbr.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER    LEFT JOIN #temp_AL_losing_bank_rate lbr ON lbr.MULTI_FUND_ID = ex.TRANSACTION_NUMBER    LEFT JOIN #conc_datatemp cdt ON cdt.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER AND CM_SOURCE = 'RR'    LEFT JOIN VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd ON co.[INSTRUCTED_BY] = tdd.[MG_USER_ID]                     AND CAST(co.[PULL_DATE] AS DATE)                     BETWEEN CAST(tdd.[DATE_FROM] AS DATE)                     AND CAST(tdd.[DATE_TO] AS DATE)    LEFT JOIN VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2 ON co.[ACCEPTED_BY] = tdd2.[MG_USER_ID]                   AND CAST(co.[PULL_DATE] AS DATE)                   BETWEEN CAST(tdd2.[DATE_FROM] AS DATE)                  AND CAST(tdd2.[DATE_TO] AS DATE)    LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'Order Allocation RR'                     AND CAST(COALESCE(ct.PULL_DATE,co.[PULL_DATE]) AS DATE)                     BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)    WHERE EXISTS (SELECT di.TRANSACTION_NUMBER FROM #distinct_ids di WHERE di.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER);                --Temp final master table mm    IF OBJECT_ID('tempdb..#temp_final_master_mm', 'U') IS NOT NULL DROP TABLE #temp_final_master_mm;    SELECT DISTINCT COALESCE(ct.[DEALER_NAME_DECODE],tdd2.[FULL_NAME],tdd.[FULL_NAME],DD.[DEFAULT_DEALER]) as DEALER_NAME,      co.SEQUENCE_EXCEPTION_REASON,      co.SEQUENCE_EXCEPTION_NARRATION,      co.CLIENT_FUND_OR_POOL_CODE AS CLIENT_FUND,      co.PRODUCT,      co.INSTRUCTED_CURRENCY,      CAST(co.INSTRUCTED_AMOUNT AS DECIMAL(32,2)) AS INSTRUCTED_AMOUNT,      CAST(FORMAT(co.INSTRUCTION_RECEIVED_DATE,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) AS INSTRUCTION_RECEIVED_DATE_TIME,      ct.EXECUTED_BANK AS BANK,      CAST(ct.EXECUTED_RATE AS DECIMAL(32,4)) AS EXECUTED_RATE,      CAST(ct.DEALT_AMOUNT AS DECIMAL(32,2)) AS DEALT_AMOUNT,      CAST(FORMAT(co.ACCEPTED_DATETIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) AS ACCEPTED_DATETIME,      CAST(FORMAT(co.INSTRUCTION_INITIATION_DATE_TIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) AS INSTRUCTION_INITIATION_DATE_TIME,      CAST(FORMAT(ct.CONFIRMED_DATETIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) AS CONFIRMED_DATETIME,      CASE WHEN cl.FIRM_FUND IS NULL        THEN 'CLIENT'       ELSE 'FIRM'       END AS FIRM_VS_CLIENT,      cdt.LOSING_BANK_1,      cdt.LOSING_RATE_1,      ct.NO_OF_QUOTES,      STATIC_BANK_PANEL = STUFF((        SELECT  ' | ' + CAST(cmb.BANK_NAME AS VARCHAR(50))        FROM VISTA_REPORTING.dbo.CASH_MAPPED_BANKS cmb        WHERE cmb.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)') ,1,2,''),      FORMAT(ct.TRADE_DATE, 'dd/MM/yyyy') AS TRADE_DATE,      FORMAT(ct.VALUE_DATE, 'dd/MM/yyyy') AS VALUE_DATE,      FORMAT(CT.MATURITY_DATE, 'dd/MM/yyyy') AS MATURITY_DATE,      ct.TERM,      cdt.TRANSACTION_TYPE,      co.CUSTOM_INSTRUCTION,      ct.BASE_FUND_CODE,      ct.BUSINESS_GROUP,      co.INSTRUCTED_BY,      co.ACCEPTED_BY,      co.DELETED_REASON,      co.DELETED_REASON_NARRATION,      CAST(FORMAT(co.FREEZE_DATETIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) AS FREEZE_DATETIME,      co.FREEZEREASON AS FREEZE_REASON,      co.FREEZE_REASON_NARRATION,      CAST(FORMAT(co.RELEASE_DATETIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) AS RELEASE_DATETIME,      co.RELEASE_REASON,      co.RELEASE_REASON_NARRATION,      DATEDIFF(MINUTE,CO.FREEZE_DATETIME, CO.RELEASE_DATETIME) AS [TIME_ELAPSED_BETWEEN_FREEZE_AND_RELEASE],      co.INSTRUCTION_STATUS,      co.ORDER_ID,      ct.TRANSACTION_NUMBER,      ex.VG_612_CREATETIME,      ex.DATA_SOURCE,      CAST(ex.VG_612 AS INT) AS EXCEPTION    INTO #temp_final_master_mm    FROM VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_MM_TABLE ex    LEFT JOIN #temp_combo_trades ct on ct.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER    LEFT JOIN #temp_combo_orders co on ct.ORDER_ID = co.ORDER_ID    LEFT JOIN VISTA_STAGING.dbo.REF_COH_FIRM_FUND_LIST cl ON cl.FIRM_FUND = ct.CLIENT_FUND_OR_POOL_CODE AND co.INSTRUCTION_RECEIVED_DATE BETWEEN cl.DATE_FROM AND cl.DATE_TO    LEFT JOIN VISTA_REPORTING.dbo.CASH_BANK_RATES cbr ON cbr.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER    LEFT JOIN #temp_AL_losing_bank_rate lbr ON lbr.MULTI_FUND_ID = ex.TRANSACTION_NUMBER    LEFT JOIN #conc_datatemp cdt ON cdt.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER AND CM_SOURCE = 'MM'    LEFT JOIN VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd ON co.[INSTRUCTED_BY] = tdd.[MG_USER_ID]                     AND CAST(co.[PULL_DATE] AS DATE)                     BETWEEN CAST(tdd.[DATE_FROM] AS DATE)                     AND CAST(tdd.[DATE_TO] AS DATE)    LEFT JOIN VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2 ON co.[ACCEPTED_BY] = tdd2.[MG_USER_ID]                   AND CAST(co.[PULL_DATE] AS DATE)                   BETWEEN CAST(tdd2.[DATE_FROM] AS DATE)                  AND CAST(tdd2.[DATE_TO] AS DATE)    LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'Order Allocation MM'                     AND CAST(COALESCE(ct.PULL_DATE,co.[PULL_DATE]) AS DATE)                     BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)    WHERE EXISTS (SELECT di.TRANSACTION_NUMBER FROM #distinct_ids di WHERE di.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER);            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_RR_TABLE', 'U') IS NOT NULL    DELETE FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_RR_TABLE    WHERE EXISTS (SELECT DISTINCT    ORDER_ID    FROM #distinct_ids    WHERE #distinct_ids.TRANSACTION_NUMBER = VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_RR_TABLE.TRANSACTION_NUMBER);                IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_MM_TABLE', 'U') IS NOT NULL    DELETE FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_MM_TABLE    WHERE EXISTS (SELECT DISTINCT    ORDER_ID    FROM #distinct_ids    WHERE #distinct_ids.TRANSACTION_NUMBER = VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_MM_TABLE.TRANSACTION_NUMBER);                IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_RR_TABLE', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_RR_TABLE    SELECT *    FROM #temp_final_master_rr        ELSE        SELECT *     INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_RR_TABLE    FROM #temp_final_master_rr;            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_MM_TABLE', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_MM_TABLE    SELECT *    FROM #temp_final_master_mm        ELSE        SELECT *     INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_MM_TABLE    FROM #temp_final_master_mm;            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(    'MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_MM_TABLE', --TABLE_NAME    @START_TIME, --START_TIME    GETDATE(), --END_TIME    DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS    CAST(GETDATE() as date)) --COMPLETION_DATE        IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(    'MASTER_MFID_VG_612_ORDER_ALLOCATION_CASH_RR_TABLE', --TABLE_NAME    @START_TIME, --START_TIME    GETDATE(), --END_TIME    DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS    CAST(GETDATE() as date)) --COMPLETION_DATE        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_MFID_TABLE_VG_612_ORDER_ALLOCATION_FX  CreateDate: 2025-06-26 17:58:16.690  ModifyDate: 2025-06-26 17:58:16.690  --- DEFINITION START ---      CREATE PROCEDURE [dbo].[MASTER_MFID_TABLE_VG_612_ORDER_ALLOCATION_FX]        AS         DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()             IF OBJECT_ID('tempdb..#distinct_ids_fx', 'U') IS NOT NULL DROP TABLE #distinct_ids_fx;    SELECT DISTINCT     fxt.ORDER_ID,     fxt.TRADE_ID,     vg.TRANSACTION_NUMBER      INTO #distinct_ids_fx    FROM VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_FX_TABLE vg    LEFT JOIN Vista_Reporting.dbo.FX_TRADES fxt ON fxt.TRADE_ID = VG.TRANSACTION_NUMBER    LEFT JOIN Vista_Reporting.dbo.FX_ORDERS fxo ON fxo.FXM_ORDER_ID = fxt.ORDER_ID;            --DDC: please confirm that these are the correct columns to use as order_id, trade_id, and transaction_number    IF OBJECT_ID('tempdb..#distinct_ids_al', 'U') IS NOT NULL DROP TABLE #distinct_ids_al;    SELECT DISTINCT      oc.PM_ORD AS ORDER_ID,     pr.MULTI_FUND_ID as TRADE_ID,     pr.MULTI_FUND_ID AS TRANSACTION_NUMBER    INTO #distinct_ids_al    FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr    LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = pr.ORD_NUM    WHERE pr.DEALING_DESK = 'FX';            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_FX_TABLE', 'U') IS NOT NULL    DELETE FROM #distinct_ids_fx where NOT EXISTS (SELECT DISTINCT od.TRADE_ID                   FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_FX od                   WHERE od.TRADE_ID = #distinct_ids_fx.TRADE_ID);                           IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_FX_TABLE', 'U') IS NOT NULL     DELETE FROM #distinct_ids_al where NOT EXISTS (SELECT DISTINCT od.MULTI_FUND_ID                   FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                   WHERE od.MULTI_FUND_ID = #distinct_ids_al.TRADE_ID);                           IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE  #distinct_ids;    SELECT  *    INTO #distinct_ids    FROM #distinct_ids_fx    UNION ALL    SELECT  *    FROM #distinct_ids_al;            --1) Adding in the concatenated static bank list so that the master table runs quicker without this join    IF OBJECT_ID('tempdb..#mapped_bank', 'U') IS NOT NULL DROP TABLE #mapped_bank    SELECT DISTINCT     ex.TRANSACTION_NUMBER,     CONVERT(VARCHAR(20),FXB.BANK_NAME) AS BANK_NAME    INTO #mapped_bank    FROM VISTA_STAGING.DBO.VG_612_ORDER_ALLOCATION_FX_TABLE ex    INNER JOIN VISTA_REPORTING.dbo.FX_MAPPED_BANKS fxb ON fxb.TRADE_ID = ex.TRANSACTION_NUMBER    WHERE ex.DATA_SOURCE = 'FX'        AND EXISTS (SELECT di.TRANSACTION_NUMBER FROM #distinct_ids di WHERE di.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER)            --2)    IF OBJECT_ID('tempdb..#static_bank', 'U') IS NOT NULL DROP TABLE #static_bank    SELECT DISTINCT ex.TRANSACTION_NUMBER      ,STATIC_BANK_LIST = STUFF((        SELECT ', ' + FXB.BANK_NAME       FROM #mapped_bank fxb       WHERE fxb.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER        ORDER BY BANK_NAME       FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '')    INTO #static_bank    FROM VISTA_STAGING.DBO.VG_612_ORDER_ALLOCATION_FX_TABLE ex            --Concatenating INSTRUCTION_RECEIVED_DATE_TIME which fills ORDER_RECEIVED_DATE_TIME. In other scripts there is no     --need to concatenate but in this case it is creating duplicates so in the meantime it has been concatenated.    --DDC: please confirm this is correct.     IF OBJECT_ID('tempdb..#ordt', 'U') IS NOT NULL DROP TABLE #ordt    SELECT DISTINCT ex.TRANSACTION_NUMBER,        ORDER_RECEIVED_DATE_TIME = STUFF((            SELECT ' | ' + CONVERT(VARCHAR,FORMAT(fxo.INSTRUCTION_RECEIVED_DATE_TIME,'dd/MM/yyyy HH:mm:ss'), 20)           FROM VISTA_REPORTING.dbo.FX_ORDERS fxo           WHERE fxo.FXM_ORDER_ID = fxt.ORDER_ID           ORDER BY ORDER_ID           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),        FUND_MANAGER_EMAIL_ADDRESS = STUFF((            SELECT ' | ' + CONVERT(VARCHAR,FUND_MANAGER_EMAIL_ADDRESS, 200)           FROM VISTA_REPORTING.dbo.FX_ORDERS fxo           WHERE fxo.FXM_ORDER_ID = fxt.ORDER_ID           ORDER BY ORDER_ID           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),        PLACEMENT_VENUE = STUFF((            SELECT ' | ' + CONVERT(VARCHAR,TRADE_VENUE, 20)           FROM VISTA_REPORTING.dbo.FX_ORDERS fxo           WHERE fxo.FXM_ORDER_ID = fxt.ORDER_ID           ORDER BY ORDER_ID           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),        INSTRUCTED_AMOUNT = STUFF((            SELECT ' | ' + CASE WHEN fxt.NOTIONAL_AMOUNT_FAR IS NULL            THEN CAST(FORMAT(convert(DECIMAL(38,2),fxt.[NOTIONAL_AMOUNT]), '#,0.00') as varchar(50))            ELSE  (CAST(FORMAT(CONVERT(DECIMAL(38,2),fxt.[NOTIONAL_AMOUNT]), '#,0.00') as varchar(50)) + ' | '            + CAST(FORMAT(CONVERT(DECIMAL(38,2),fxt.[NOTIONAL_AMOUNT_FAR]), '#,0.00') as varchar(50)))            END           FROM VISTA_REPORTING.dbo.FX_ORDERS FXO           WHERE fxo.FXM_ORDER_ID = fxt.ORDER_ID           ORDER BY ORDER_ID           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'')    INTO #ordt    FROM VISTA_STAGING.DBO.VG_612_ORDER_ALLOCATION_FX_TABLE ex    LEFT JOIN VISTA_REPORTING.dbo.FX_TRADES fxt ON fxt.TRADE_ID = ex.TRANSACTION_NUMBER;            --Purpose: joining in FX_LOSING_BANKS to get three columns used in the master table.     --Question: should I put this in the master table as its not a massive/complicated join?    --Losing bank trades    IF OBJECT_ID('tempdb..#losing_bank_trades', 'U') IS NOT NULL DROP TABLE #losing_bank_trades    SELECT DISTINCT ex.TRANSACTION_NUMBER,        CONVERT(VARCHAR(20), FXB.LOSING_BANK) AS LOSING_BANK,         CONVERT(VARCHAR(20), FXB.ALL_IN_RATE) AS ALL_IN_RATE    INTO #losing_bank_trades    FROM VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_FX_TABLE ex    LEFT JOIN VISTA_REPORTING.dbo.FX_TRADES fxt on fxt.TRADE_ID = ex.TRANSACTION_NUMBER    LEFT JOIN VISTA_REPORTING.dbo.FX_LOSING_BANKS FXB ON fxb.TRADE_ID = fxt.TRADE_ID     WHERE FXB.TRADE_ID = FXT.TRADE_ID       AND FXB.LOSING_BANK != FXT.EXECUTED_BANK       AND ex.DATA_SOURCE = 'FX'      AND EXISTS (SELECT di.TRANSACTION_NUMBER FROM #distinct_ids di WHERE di.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER);            --Losing bank temp    IF OBJECT_ID('tempdb..#losingbanktemp', 'U') IS NOT NULL DROP TABLE #losingbanktemp;     SELECT DISTINCT fxt.TRADE_ID,        STUFF((          SELECT ', ' + LOSING_BANK         FROM #losing_bank_trades fxb         WHERE fxb.TRANSACTION_NUMBER = fxt.TRADE_ID          ORDER BY LOSING_BANK         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS LOSING_BANK_LIST,         STUFF((          SELECT ', ' + ALL_IN_RATE         FROM #losing_bank_trades fxb         WHERE fxb.TRANSACTION_NUMBER = fxt.TRADE_ID          ORDER BY ALL_IN_RATE         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS LOSING_BANK_COUNT    INTO #losingbanktemp    FROM VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_FX_TABLE ex    LEFT JOIN VISTA_REPORTING.dbo.FX_TRADES fxt ON ex.TRANSACTION_NUMBER = fxt.TRADE_ID    WHERE EXISTS (SELECT di.TRANSACTION_NUMBER FROM #distinct_ids di WHERE di.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER)            --Temp final master table    IF OBJECT_ID('tempdb..#temp_final_master', 'U') IS NOT NULL DROP TABLE #temp_final_master;    SELECT DISTINCT COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) AS DEALER_NAME,      FXO.CLIENT_FUND,      FXT.EXECUTED_BANK,      ordt.FUND_MANAGER_EMAIL_ADDRESS,      FXO.FM_COMMENTS,      FXO.MARKER,      FXO.TRADE_PURPOSE,      CAST(FORMAT(FXO.AUTH_TIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) AS AUTHORISED_DATE_TIME,      ordt.ORDER_RECEIVED_DATE_TIME,      CAST(FORMAT(FXT.ACCEPTED_DATE_TIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) AS ACCEPTED_DATE_TIME,      CAST(FORMAT(FXT.MARKET_ARRIVAL_DATE_TIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) AS MARKET_ARRIVAL_DATE_TIME,      CAST(FORMAT(FXT.EXECUTED_DATE_TIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) AS EXECUTED_DATE,      CAST(FORMAT(FXT.UPLOADED_DATE_TIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) AS UPLOADED_DATE_TIME,      FXTC.INSTRUCTION_TYPE as PRODUCT,       FXTC.SWAP_TYPE,      CASE WHEN FXO.FR_LEG_PRODUCT IS NULL           THEN CONVERT(VARCHAR(50),FXO.NR_LEG_PRODUCT)         WHEN FXO.FR_LEG_PRODUCT IS NOT NULL AND FXO.FR_LEG_PRODUCT <> ''          THEN CONCAT(FXO.NR_LEG_PRODUCT, ' | ', FXO.FR_LEG_PRODUCT)         END AS FXM_PRODUCT,       CASE WHEN NULLIF(FXO.ACTION2,'') IS NULL          THEN CONVERT(VARCHAR(50),FXO.ACTION1)         WHEN NULLIF(FXO.ACTION2,'') IS NOT NULL         THEN (FXO.ACTION1 + ISNULL(' | ' + NULLIF(FXO.ACTION2,''),''))         END AS ACTION,      CASE WHEN FXO.NOTIONAL_CCY_FAR IS NULL           THEN CONVERT(VARCHAR(50),FXO.NOTIONAL_CCY)         WHEN FXO.NOTIONAL_CCY_FAR IS NOT NULL          THEN CONCAT(FXO.NOTIONAL_CCY, ' | ', FXO.NOTIONAL_CCY_FAR)         END AS INSTRUCTED_CURRENCY,      ordt.INSTRUCTED_AMOUNT,      CASE WHEN FXO.BUY_CCY_LEG2 IS NULL            THEN CONVERT(VARCHAR(50),FXO.BUY_CCY)         WHEN FXO.BUY_CCY_LEG2 IS NOT NULL and FXO.BUY_CCY_LEG2 <> ''           THEN CONCAT(FXO.BUY_CCY, ' | ', FXO.BUY_CCY_LEG2)         END AS BUY_CURRENCY,      CASE WHEN FXO.SELL_CCY_LEG2 IS NULL            THEN CONVERT(VARCHAR(50),FXO.SELL_CCY)         WHEN FXO.SELL_CCY_LEG2 IS NOT NULL AND FXO.SELL_CCY_LEG2 <> ''          THEN CONCAT(FXO.SELL_CCY, ' | ', FXO.SELL_CCY_LEG2)         END AS SELL_CURRENCY,      CAST(FORMAT(FXT.TRADE_DATE, 'dd/MM/yyyy') AS VARCHAR(50)) as TRADE_DATE,      CASE WHEN FXO.VALUE_DATE_FAR IS NULL OR FXO.VALUE_DATE_FAR = '1900-01-01 00:00:00.000'           THEN CONVERT(VARCHAR(50),FORMAT(FXO.VALUE_DATE_NEAR,'dd/MM/yyyy'))         WHEN FXO.VALUE_DATE_FAR IS NOT NULL OR FXO.VALUE_DATE_FAR <> '1900-01-01 00:00:00.000'          THEN CONCAT(FORMAT(FXO.VALUE_DATE_NEAR,'dd/MM/yyyy'), ' | ', FORMAT(FXO.VALUE_DATE_FAR,'dd/MM/yyyy'))         END AS VALUE_DATE,      CASE WHEN FXT.EXECUTED_AMOUNT_FAR IS NULL          THEN CONVERT(VARCHAR(50),FORMAT(CONVERT(DECIMAL(38,2),FXT.EXECUTED_AMOUNT), '#,0.00'))         WHEN FXT.EXECUTED_AMOUNT_FAR IS NOT NULL         THEN CONCAT(FORMAT(CONVERT(DECIMAL(38,2),FXT.EXECUTED_AMOUNT), '#,0.00'), ' | ' ,FORMAT(CONVERT(DECIMAL(38,2), FXT.EXECUTED_AMOUNT_FAR), '#,0.00'))         END AS EXECUTED_AMOUNT,      CASE WHEN FXT.EXECUTED_RATE_FAR IS NULL           THEN CONVERT(VARCHAR(50),ROUND(FXT.EXECUTED_RATE,8))         WHEN FXT.EXECUTED_RATE_FAR IS NOT NULL          THEN CONCAT(ROUND(FXT.EXECUTED_RATE,8), ' | ', ROUND(FXT.EXECUTED_RATE_FAR,8))         END AS ALL_IN_RATE,      ROUND(FXT.SPOT_RATE,8) AS SPOT_RATE,      ROUND(FXT.FORWARD_POINTS,8) AS FORWARD_POINTS,      FXT.MAPPED_BANK_COUNT AS STATIC_BANK_COUNT,       sb.STATIC_BANK_LIST,      LBT.LOSING_BANK_COUNT,      LBT.LOSING_BANK_LIST, --TO BE ADDED IN/FOUND      FXO.BASE_FUND,      FXO.BUSINESS_GROUP,      FXO.INSTRUCTED_BY,      FXO.[CREATED_FROM] as ORDER_SOURCE,      ORDT.PLACEMENT_VENUE,       FXT.EXC_SESSION_TYPE AS SESSION_TYPE,      FXTC.ORDER_STRATEGY AS NETTING_STRATEGY_USED,--This column is all nulls in the source table      FXT.EXC_SESSION_ID AS SESSION_ID, --confirm       CAST(FORMAT(FXT.FIXING_DATE,'dd/MM/yyyy') AS VARCHAR(50)) AS FIXING_DATE,      ROUND(FXT.SWAP_POINTS, 8) AS SWAP_POINTS,      FORMAT(FXT.NET_EXPOSURE_TRADE, '#,0.00') AS NET_EXPOSURE,--logic taken from spot reference rate      FXT.ORDER_ID AS FX_ORDER_ID,       EX.TRANSACTION_NUMBER AS TRADE_ID, --check whether correct, was FXT.TRADE_IT but it doesn't seem to make sense to have no way of identifying the trades from the VG table      CASE WHEN FXO.FXM_ORDER_ID IS NULL THEN FXO.[FXM_ORDER_ID] --logic taken from EOD      ELSE FXO.FXM_ORDER_ID      END AS MFID_ID,      FXO.ALADDIN_COMMON_ID,      FXT.TRADE_STATUS,      EX.VG_612_CREATETIME,      EX.DATA_SOURCE,      CAST(EX.VG_612 AS INT) as EXCEPTION    INTO #temp_final_master     FROM VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_FX_TABLE ex    LEFT JOIN Vista_REPORTING.dbo.FX_TRADES FXT ON FXT.TRADE_ID = ex.TRANSACTION_NUMBER    LEFT JOIN VISTA_REPORTING.dbo.FX_ORDERS FXO ON FXO.FXM_ORDER_ID = FXT.ORDER_ID    LEFT JOIN VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd ON tdd.[MG_USER_ID] = fxt.[DEALT_BY]      AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE)      AND CAST(tdd.[DATE_TO] AS DATE)    LEFT JOIN VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2 ON tdd2.[MG_USER_ID] = fxt.[ACCEPTED_BY]      AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE)      AND CAST(tdd2.[DATE_TO] AS DATE)     LEFT JOIN VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd ON dd.[REPORT_NAME] = 'Order Allocation'      AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE)      AND CAST(dd.[DATE_TO] AS DATE)    LEFT JOIN Vista_REPORTING.dbo.FX_TRADES_CONCAT FXTC ON FXT.ORDER_ID = FXTC.ORDER_ID    LEFT JOIN #static_bank sb ON sb.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER    LEFT JOIN #ordt ordt ON ordt.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER    LEFT JOIN #losingbanktemp lbt ON lbt.TRADE_ID = ex.TRANSACTION_NUMBER    WHERE ex.DATA_SOURCE = 'FX' AND EXISTS ( SELECT di.TRANSACTION_NUMBER                 FROM #distinct_ids di                 WHERE di.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER )         UNION         SELECT DISTINCT COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) AS DEALER_NAME,        NULL AS CLIENT_FUND,--NA in FX excel columns comparison        pl.BROKER AS EXECUTED_BANK,        NULL AS FUND_MANAGER_EMAIL_ADDRESS,        pm.COMMENTS_VALUE AS FM_COMMENTS,        NULL AS MAKER, --cannot find in the excel or other tables        fxt.TRD_PURPOSE AS TRADE_PURPOSE,        CAST(FORMAT(fxt.TRD_AUTH_TIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) AS AUTHORISED_DATE_TIME,        CAST(FORMAT(pm.AUTH_TIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) as ORDER_RECEIVED_DATE_TIME,        CAST(FORMAT(pm.ACTIVE_TIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) AS ACCEPTED_DATE_TIME,        CAST(FORMAT(FXT.EXECUTION_TIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) AS MARKET_ARRIVAL_DATE_TIME,        CAST(FORMAT(FXT.EXECUTION_TIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) AS EXECUTED_DATE,        NULL AS UPLOADED_DATE_TIME,        pm.SM_SEC_TYPE AS PRODUCT, --found in excel, no TRADES equivalent         NULL AS SWAP_TYPE, --cannot find in the excel or other tables        NULL AS FXM_PRODUCT, --no equivalent column in excel for FR_LEG_PRODUCT or NR_LEG_PRODUCT        NULL AS ACTION,        CAST(fxt.[FX_PAY_CURR] as varchar(50)) as [INSTRUCTED_CURRENCY], --logic from EOD        CAST(FORMAT(pl.[QUANTITY], '#,0.00') as varchar(50)) as [INSTRUCTED_AMOUNT], --found in excel         NULL AS BUY_CURRENCY,        NULL as SELL_CURRENCY,        CAST(FORMAT(FXT.TRD_TRADE_DATE, 'dd/MM/yyyy') AS VARCHAR(50)) as TRADE_DATE,         (CONVERT(VARCHAR(50),FORMAT(PM.SETTLE_DATE,'dd/MM/yyyy')) + ISNULL(' | ' + CONVERT(VARCHAR(50),FORMAT(PM.MATURITY,'dd/MM/yyyy')),'')) as [VALUE_DATE], --no TRADES equivalent         CAST(FORMAT(pm.[FILL_AMT], '#,0.00') as varchar(50)) as [EXECUTED_AMOUNT],        CAST(COALESCE(ROUND(pl.[AVG_PRICE],8),ROUND(FXT.[FX_PRICE],8)) as varchar(50)) as [ALL_IN_RATE], --logic from bestex, confirm as there is a different column used in the alternative excel         CAST(fxt.FX_PRICE_SPOT as varchar(50)) as SPOT_RATE,        NULL AS FORWARD_POINTS, --cannot find in the excel or other tables        NULL AS STATIC_BANK_COUNT, --NA in FX excel columns comparison        NULL AS STATIC_BANK_LIST, --MAPPED_BANKS is NA in FX excel columns comparison        NULL AS LOSING_BANK_COUNT, --excel referred to 'vista' as the source of this column?        NULL AS LOSING_BANK_LIST,        fxt.PORTFOLIOS_PORTFOLIO_NAME AS BASE_FUND, --logic from EOD        CASE WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP'          WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG'          WHEN (pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM'        ELSE NULL        END AS [BUSINESS_GROUP], --logic taken from COH which is also an order level report         pm.PM AS INSTRUCTED_BY, --found column in excel        NULL AS ORDER_SOURCE,        pl.VENUE as PLACEMENT_VENUE,        NULL AS SESSION_TYPE,        NULL AS NETTING_STRATEGY_USED, --cannot find in the excel or other tables, is null in SRR        NULL AS SESSION_ID,        NULL AS FIXING_DATE, --confirm as there is a column for this in the alternative columns excel but it is not standard        NULL AS SWAP_POINTS,        NULL AS NET_EXPOSURE,        pm.ORD_NUM AS FX_ORDER_ID, --potentially fxt.ORD_NUM        EX.TRANSACTION_NUMBER AS TRADE_ID,        NULL AS MFID_ID,        r.[REQUEST_ID] as [ALADDIN_COMMON_IDENTIFIER], --logic from COH        fxt.TRD_STATUS AS TRADE_STATUS,        EX.VG_612_CREATETIME,        EX.DATA_SOURCE,        CAST(EX.VG_612 AS INT) as EXCEPTION    FROM VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_FX_TABLE ex    LEFT JOIN VISTA_REPORTING.dbo.TRADES fxt ON FXT.MULTI_FUND_ID = ex.TRANSACTION_NUMBER --unsure about this     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = fxt.MULTI_FUND_ID    LEFT JOIN VISTA_REPORTING.dbo.PM_ORDERS pm ON pm.ORD_NUM = oc.PM_ORD    LEFT JOIN VISTA_REPORTING.dbo.PLACEMENTS pl ON pl.MULTI_FUND_ID = ex.TRANSACTION_NUMBER --TO BE FIXED unsure about this     LEFT JOIN (SELECT DISTINCT FUND_ID, PORTFOLIO_GROUP_NAME FROM VISTA_STAGING.dbo.PORTFOLIO_GROUPS_TREASURY) pgt on fxt.[FUND] = pgt.[FUND_ID] --remove if logic for business group is wrong    LEFT JOIN (SELECT DISTINCT PLACEMENT_NUM, REQUEST_ID FROM VISTA_STAGING.dbo.REQUEST_LOOKUP) r on pl.[PLACEMENT_NUM] = r.[PLACEMENT_NUM]    LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd on tdd.[INITIALS]  = fxt.[TRD_TRADER]      AND CAST(fxt.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE)      AND CAST(tdd.[DATE_TO] AS DATE)    LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd2 on tdd2.[INITIALS]  = pm.[TRADER]      AND CAST(pm.[PULL_DATE] AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE)      AND CAST(tdd2.[DATE_TO] AS DATE)    LEFT JOIN VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd on dd.[REPORT_NAME] = 'Order Allocation'      AND CAST(COALESCE(fxt.[PULL_DATE],pm.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE)      AND CAST(dd.[DATE_TO] AS DATE)    WHERE ex.DATA_SOURCE = 'AL' AND EXISTS ( SELECT DISTINCT di.TRANSACTION_NUMBER                 FROM #distinct_ids di                 WHERE di.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER);            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_FX_TABLE', 'U') IS NOT NULL    DELETE FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_FX_TABLE    WHERE FX_ORDER_ID IN (SELECT DISTINCT ORDER_ID FROM #distinct_ids);            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_FX_TABLE', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_FX_TABLE    SELECT *    FROM #temp_final_master        ELSE        SELECT *     INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_FX_TABLE    FROM #temp_final_master;            --Drop temp tables     IF OBJECT_ID('tempdb..#distinct_ids_al', 'U') IS NOT NULL DROP TABLE #distinct_ids_al;    IF OBJECT_ID('tempdb..#distinct_ids_fx', 'U') IS NOT NULL DROP TABLE #distinct_ids_fx;    IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE  #distinct_ids;    IF OBJECT_ID('tempdb..#temp_final_master', 'U') IS NOT NULL DROP TABLE #temp_final_master;                IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(    'MASTER_MFID_VG_612_ORDER_ALLOCATION_FX_TABLE', --TABLE_NAME    @START_TIME, --START_TIME    GETDATE(), --END_TIME    DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS    CAST(GETDATE() as date)) --COMPLETION_DATE    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_MFID_TABLE_VG_613_INSTRUCTOR_TO_DEALER_CASH  CreateDate: 2025-06-26 17:58:29.713  ModifyDate: 2025-06-26 17:58:29.713  --- DEFINITION START ---  -- =============================================    -- Author:  <Miter, Matej>    -- Create date: <12/10/2021>    -- Description:     -- <Master exception table for Instructor_dealer     -- Exception test for CASH.>    -- =============================================        -- ***************VERSION CONTROL***************    --2022-11-16, Matej Miter changed for Jira nmuber:    --SURVG-759 - Added Coalesce function to take out dealer and instructor name to prevent non assignments of exceptions within front end     -- *********************************************        CREATE PROCEDURE [dbo].[MASTER_MFID_TABLE_VG_613_INSTRUCTOR_TO_DEALER_CASH]     -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,         AS    BEGIN         DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()         -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids     SELECT DISTINCT Transaction_Number, [SOURCE]     INTO #distinct_ids     FROM VISTA_STAGING.DBO.VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE         UNION ALL         SELECT DISTINCT Transaction_Number, [SOURCE]     FROM VISTA_STAGING.DBO.VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE                  --If the master table doesn't exist then we want to use all the data available, otherwise just the most recent data     IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE', 'U') IS NOT NULL     AND OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE', 'U') IS NOT NULL     DELETE FROM #distinct_ids      where NOT EXISTS (SELECT od.TRANSACTION_NUMBER          FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_CASH od          WHERE od.TRANSACTION_NUMBER = #distinct_ids.Transaction_Number)     AND #distinct_ids.SOURCE = 'CM'         IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE', 'U') IS NOT NULL     AND OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE', 'U') IS NOT NULL     DELETE FROM #distinct_ids      where NOT EXISTS (SELECT od.MULTI_FUND_ID          FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od          WHERE od.MULTI_FUND_ID = #distinct_ids.Transaction_Number)     AND #distinct_ids.SOURCE = 'AL'               IF OBJECT_ID('tempdb..#temp_cash_orders', 'U') IS NOT NULL DROP TABLE #temp_cash_orders     SELECT DISTINCT t.ORDER_ID     into #temp_cash_orders     from Vista_Reporting.dbo.CASH_TRADES t     INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = t.TRANSACTION_NUMBER         UNION         SELECT DISTINCT oc.PM_ORD     FROM Vista_Reporting.dbo.TRADES tr     INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = tr.MULTI_FUND_ID     LEFT JOIN Vista_Reporting.dbo.ORDERS_CROSS oc on oc.TRD_ORD = tr.ORD_NUM          IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades     SELECT       ct.TRANSACTION_NUMBER,      MAX(API_REQUESTED_DATE) AS MAX_API_REQ     INTO #temp_max_req_trades     FROM VISTA_REPORTING.dbo.CASH_TRADES ct     INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER     GROUP BY ct.TRANSACTION_NUMBER         IF OBJECT_ID('tempdb..#temp_max_req_orders', 'U') IS NOT NULL DROP TABLE #temp_max_req_orders     SELECT      co.ORDER_ID,     MAX(API_REQUESTED_DATE) AS MAX_API_REQ     INTO #temp_max_req_orders     FROM VISTA_REPORTING.dbo.CASH_ORDERS co     INNER JOIN #temp_cash_orders tco ON co.ORDER_ID = tco.ORDER_ID     GROUP BY co.ORDER_ID         IF OBJECT_ID('tempdb..#MAX_TOUCH_T', 'U') IS NOT NULL DROP TABLE #MAX_TOUCH_T     SELECT DISTINCT       MULTI_FUND_ID,       MAX(TOUCH_COUNT) AS MAX_TOUCH      INTO #MAX_TOUCH_T     FROM VISTA_REPORTING.DBO.TRADES t     INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = t.MULTI_FUND_ID     GROUP BY MULTI_FUND_ID         IF OBJECT_ID('tempdb..#MAX_TOUCH_PM', 'U') IS NOT NULL DROP TABLE #MAX_TOUCH_PM     SELECT DISTINCT       ORD_NUM,       MAX(TOUCH_COUNT) AS MAX_TOUCH      INTO #MAX_TOUCH_PM     FROM VISTA_REPORTING.DBO.PM_ORDERS pm     INNER JOIN #temp_cash_orders tco ON tco.ORDER_ID = pm.ORD_NUM     GROUP BY ORD_NUM         --Losing Bank for CM     IF OBJECT_ID('tempdb..#losingbanktemp', 'U') IS NOT NULL DROP TABLE #losingbanktemp --Only Reverse Repo trades have Cash Bank Rates data (!?)     SELECT DISTINCT      ex.[TRANSACTION_NUMBER],      BANK_CODE = STUFF((          SELECT ', ' + BANK_CODE         FROM VISTA_REPORTING.dbo.CASH_BANK_RATES cbr         left join VISTA_REPORTING.dbo.CASH_TRADES ct         on cbr.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]         WHERE cbr.[TRANSACTION_NUMBER] = ex.[TRANSACTION_NUMBER] and cbr.[BANK_CODE] != ct.[BANK] and ex.[SOURCE] = 'CM' ORDER BY EX.TRANSACTION_NUMBER, BANK_CODE         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''),      RATE = STUFF((          SELECT ', ' + CAST(CONVERT(DECIMAL(38,4),RATE) AS varchar(50)) as RATE         FROM VISTA_REPORTING.dbo.CASH_BANK_RATES cbr         left join VISTA_REPORTING.dbo.CASH_TRADES ct         on cbr.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]         WHERE cbr.[TRANSACTION_NUMBER] = ex.[TRANSACTION_NUMBER] and cbr.[BANK_CODE] != ct.[BANK] and ex.[SOURCE] = 'CM' ORDER BY EX.TRANSACTION_NUMBER, BANK_CODE         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '')     INTO #losingbanktemp     FROM VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE ex     UNION     SELECT DISTINCT      ex.[TRANSACTION_NUMBER],      BANK_CODE = STUFF((          SELECT ', ' + BANK_CODE         FROM VISTA_REPORTING.dbo.CASH_BANK_RATES cbr         left join VISTA_REPORTING.dbo.CASH_TRADES ct         on cbr.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]         WHERE cbr.[TRANSACTION_NUMBER] = ex.[TRANSACTION_NUMBER] and cbr.[BANK_CODE] != ct.[BANK] and ex.[SOURCE] = 'CM' ORDER BY EX.TRANSACTION_NUMBER, BANK_CODE         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''),      RATE = STUFF((          SELECT ', ' + CAST(CONVERT(DECIMAL(38,4),RATE) AS varchar(50)) as RATE         FROM VISTA_REPORTING.dbo.CASH_BANK_RATES cbr         left join VISTA_REPORTING.dbo.CASH_TRADES ct         on cbr.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]         WHERE cbr.[TRANSACTION_NUMBER] = ex.[TRANSACTION_NUMBER] and cbr.[BANK_CODE] != ct.[BANK] and ex.[SOURCE] = 'CM' ORDER BY EX.TRANSACTION_NUMBER, BANK_CODE         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '')     FROM VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE ex     INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER             --Losing Bank for AL     IF OBJECT_ID('tempdb..#losingquotetemp', 'U') IS NOT NULL DROP TABLE #losingquotetemp --No quotes data coming through in Aladdin VISTA_STAGING.dbo.QUOTES for Cash     SELECT DISTINCT      ex.[TRANSACTION_NUMBER],      TRD_COUNTERPARTY = STUFF((          SELECT ', ' + c.TRD_COUNTERPARTY         FROM VISTA_REPORTING.dbo.TRADES t         left join VISTA_REPORTING.dbo.QUOTES q         on q.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]         left join VISTA_REPORTING.dbo.COUNTERPARTIES c         on c.[COUNTERPARTY_CODE] = q.[BROKER]         WHERE t.[MULTI_FUND_ID] = ex.[TRANSACTION_NUMBER] and q.[QUOTE_ORIGIN] = 'QUOTE' and t.[COUNTERPARTY_CODE] != q.[BROKER] and ex.[SOURCE] = 'AL' ORDER BY ex.TRANSACTION_NUMBER, ', ' + c.TRD_COUNTERPARTY         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''),      QUOTE_VALUE = STUFF((          SELECT ', ' + CAST(CONVERT(DECIMAL(38,4),q.[QUOTE_VALUE]) AS varchar(50)) as QUOTE_VALUE         FROM VISTA_REPORTING.dbo.TRADES t         left join VISTA_REPORTING.dbo.QUOTES q         on q.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]         left join VISTA_REPORTING.dbo.COUNTERPARTIES c         on c.[COUNTERPARTY_CODE] = q.[BROKER]         WHERE t.[MULTI_FUND_ID] = ex.[TRANSACTION_NUMBER] and q.[QUOTE_ORIGIN] = 'QUOTE' and t.[COUNTERPARTY_CODE] != q.[BROKER] and ex.[SOURCE] = 'AL' ORDER BY ex.TRANSACTION_NUMBER, ', ' + CAST(CONVERT(DECIMAL(38,4),q.[QUOTE_VALUE]) AS varchar(50))          FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '')     INTO #losingquotetemp     FROM VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE ex     INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER        --Concatonated fields for AL     IF OBJECT_ID('tempdb..#al_concat_ord', 'U') IS NOT NULL DROP TABLE #al_concat_ord     SELECT DISTINCT      ex.[TRANSACTION_NUMBER],      TRD_ORIG_FACE = STUFF((          SELECT DISTINCT ' | ' +  + CAST(FORMAT(TRD_ORIG_FACE, '#,0.00') AS VARCHAR(50))         FROM VISTA_REPORTING.dbo.TRADES t         WHERE t.[MULTI_FUND_ID] = ex.[TRANSACTION_NUMBER] and ex.[SOURCE] = 'AL'         ORDER BY  ' | ' +  + CAST(FORMAT(TRD_ORIG_FACE, '#,0.00') AS VARCHAR(50))         FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),      [STATUS] = STUFF((          SELECT DISTINCT ' | ' +  + CAST([STATUS] AS VARCHAR(50))         FROM VISTA_REPORTING.dbo.PM_ORDERS pm         left join VISTA_REPORTING.dbo.ORDERS_CROSS oc         on oc.[PM_ORD] = pm.[ORD_NUM]         left join VISTA_REPORTING.dbo.TRADES t         on t.[ORD_NUM] = oc.[TRD_ORD]         WHERE t.[MULTI_FUND_ID] = ex.[TRANSACTION_NUMBER] and ex.[SOURCE] = 'AL'          ORDER BY ' | ' +  + CAST([STATUS] AS VARCHAR(50))         FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),      TRD_SETTLE_DATE = STUFF((          SELECT DISTINCT ' | ' +  + CAST(FORMAT(TRD_SETTLE_DATE,'dd/MM/yyyy') AS VARCHAR(50))         FROM VISTA_REPORTING.dbo.TRADES t         WHERE t.[MULTI_FUND_ID] = ex.[TRANSACTION_NUMBER] and ex.[SOURCE] = 'AL'         ORDER BY  ' | ' +  + CAST(FORMAT(TRD_SETTLE_DATE,'dd/MM/yyyy') AS VARCHAR(50))         FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, '')     INTO #al_concat_ord     FROM VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE ex     INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER     WHERE ex.[SOURCE] = 'AL'         --Create Master table MM     IF OBJECT_ID('tempdb..#temp_final_master_table_mm', 'U') IS NOT NULL DROP TABLE #temp_final_master_table_mm     SELECT DISTINCT     --SURVG-759      COALESCE(cxt.[DEALER_NAME_DECODE],tdd2.[FULL_NAME],tdd.[FULL_NAME],cxt.Dealer_Name) as DEALER_NAME,      COALESCE(cxo.Instructed_by,tdd.[FULL_NAME]) as INSTRUCTED_BY,     --End of SURVG-759      ex.[VG_613] as EXCEPTION_FLAG,      cxt.Client_Fund_or_pool_Code as CLIENT_FUND_POOL_CODE,      CONCAT(cxt.Product,cxt.Product_name) as PRODUCT,      cxt.Trade_currency as CURRENCY,      try_cast(cxo.Instructed_Amount as varchar) as INSTRUCTED_AMOUNT,      try_cast(cxt.Dealt_Amount as varchar)  as DEALT_AMOUNT,      cxt.[BANK] as BANK,      convert(decimal(38,4),cxt.[EXECUTED_RATE]) AS EXECUTED_RATE,      lbt.[BANK_CODE] as LOSING_BANKS,      lbt.[RATE] as LOSING_RATES,      FORMAT(cxt.[TRADE_DATE],'dd/MM/yyyy') as TRADE_DATE,      FORMAT(cxt.[VALUE_DATE],'dd/MM/yyyy') as VALUE_DATE,      FORMAT(cxt.[MATURITY_DATE],'dd/MM/yyyy') as MATURITY_DATE,      cxt.[TERM] as TERM,      cxt.[TRANSACTION_TYPE] as TRANSACTION_TYPE,      nullif(cxo.[CUSTOM_INSTRUCTION], '') as CUSTOM_INSTRUCTION,      cxt.[BASE_FUND_CODE] as BASE_FUND_CODE,      cxt.[BUSINESS_GROUP],      tdd2.[FULL_NAME] as [ACCEPTED_BY],      FORMAT(cxt.[CONFIRMED_DATETIME],'dd/MM/yyyy HH:mm:ss') as EXECUTED_DATE_TIME,      CAST(cxo.[INSTRUCTION_STATUS_DECODE] as VARCHAR(20)) as [INSTRUCTION_STATUS],      CAST(cxt.[TRANSACTION_STATUS_DECODE] as VARCHAR(20)) as [TRANSACTION_STATUS],      cxt.[ORDER_ID],      ex.[TRANSACTION_NUMBER],      ex.[VG_613_CREATETIME] as CREATE_DATE,      ex.[SOURCE]     INTO #temp_final_master_table_mm     FROM VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE ex     inner join #distinct_ids di on di.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER and ex.[SOURCE] = di.[SOURCE]     left join VISTA_REPORTING.dbo.CASH_TRADES cxt      on cxt.[TRANSACTION_NUMBER] = ex.[TRANSACTION_NUMBER]     left join ( select distinct cxo.* from VISTA_REPORTING.dbo.CASH_ORDERS cxo     inner join #temp_max_req_orders req on req.ORDER_ID = cxo.ORDER_ID and req.MAX_API_REQ = cxo.API_REQUESTED_DATE) cxo      on cxt.[ORDER_ID] = cxo.[ORDER_ID]     left join #losingbanktemp lbt     on ex.[TRANSACTION_NUMBER] = lbt.[TRANSACTION_NUMBER]     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd     on cxo.[INSTRUCTED_BY] = tdd.[MG_USER_ID] AND CAST(cxo.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2     on cxo.[ACCEPTED_BY] = tdd2.[MG_USER_ID] AND CAST(cxo.[PULL_DATE] AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)     LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'Instructor to Dealer MM'                     AND CAST(COALESCE(cxt.PULL_DATE,cxo.[PULL_DATE]) AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)     WHERE ex.[SOURCE] = 'CM'         UNION         SELECT DISTINCT      COALESCE(tdd.[FULL_NAME],tdd3.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) as [DEALER_NAME],      tdd2.[FULL_NAME] as INSTRUCTED_BY,      ex.[VG_613] as EXCEPTION_FLAG,      NULL as CLIENT_FUND_POOL_CODE, -- No value given maybe this pgt.PORTFOLIO_GROUP_NAME as ClientFund,      ex.[PRODUCT] as PRODUCT,       t.[SM_CURRENCY] as CURRENCY,      FORMAT(pm.[FACE], '#,0.00') as [INSTRUCTED_AMOUNT],      TRY_CAST(conc_al.[TRD_ORIG_FACE] as varchar) as [DEALT_AMOUNT],      COALESCE(t.[TRD_EX_BROKER_CODE], t.[TRD_COUNTERPARTY]) as [BANK],      convert(decimal(38,4),t.[TRD_PRICE]) as [EXECUTED_RATE],      lqt.[TRD_COUNTERPARTY] as LOSING_BANKS,      lqt.[QUOTE_VALUE] as LOSING_RATES,      FORMAT(t.[TRD_TRADE_DATE],'dd/MM/yyyy') as [TRADE_DATE],      FORMAT(t.[TRD_TRADE_DATE],'dd/MM/yyyy') as [VALUE_DATE],       conc_al.[TRD_SETTLE_DATE] as [MATURITY_DATE], -- Shouldn't this be MATURITY?      NULL as TERM,      t.TRAN_TYPE as [TRANSACTION_TYPE],      NULLIF(pm.[COMMENTS_VALUE],'') as [CUSTOM_INSTRUCTION],      t.[PORTFOLIOS_PORTFOLIO_NAME] as [BASE_FUND_CODE],      CASE      WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP'      WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG'      WHEN (pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM'      ELSE NULL      END AS [BUSINESS_GROUP],      tdd3.[FULL_NAME] as ACCEPTED_BY,      FORMAT(t.[EXECUTION_TIME],'dd/MM/yyyy HH:mm:ss') as EXECUTED_DATE_TIME,      conc_al.[STATUS] as [INSTRUCTION_STATUS],      t.[TRD_STATUS] as [TRANSACTION_STATUS],      oc.[PM_ORD] as ORDER_ID,      ex.[TRANSACTION_NUMBER],      ex.[VG_613_CREATETIME] as CREATE_DATE,      ex.[SOURCE]     FROM VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE ex     inner join #distinct_ids di on di.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER and ex.[Source] = di.[Source]     left join (select distinct t.* from VISTA_REPORTING.dbo.TRADES t     inner join #MAX_TOUCH_T mtt on mtt.MULTI_FUND_ID = t.MULTI_FUND_ID and mtt.MAX_TOUCH = t.TOUCH_COUNT) t     on ex.[TRANSACTION_NUMBER] = t.[MULTI_FUND_ID]     left join VISTA_REPORTING.dbo.ORDERS_CROSS oc     on t.[ORD_NUM] = oc.[TRD_ORD]     left join (select distinct pm.* from VISTA_REPORTING.dbo.PM_ORDERS pm     inner join #MAX_TOUCH_PM mtt on mtt.ORD_NUM = pm.ORD_NUM and mtt.MAX_TOUCH = pm.TOUCH_COUNT)  pm     on oc.[PM_ORD] = pm.[ORD_NUM]     left join #al_concat_ord conc_al     on conc_al.[TRANSACTION_NUMBER] = ex.[TRANSACTION_NUMBER]     left join #losingquotetemp lqt     on ex.[TRANSACTION_NUMBER] = lqt.[TRANSACTION_NUMBER]     left join (SELECT DISTINCT PORTFOLIOS_PORTFOLIO_NAME, PORTFOLIO_GROUP_NAME,FUND FROM Vista_Staging.dbo.PORTFOLIO_GROUPS) pgt     on t.[FUND] = pgt.[FUND]     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd     on t.[TRD_TRADER] = tdd.[INITIALS] AND CAST(t.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2     on pm.[PM] = tdd2.[INITIALS] AND CAST(t.[PULL_DATE] AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd3     on pm.[TRADER] = tdd3.[INITIALS] AND CAST(t.[PULL_DATE] AS DATE) BETWEEN CAST(tdd3.[DATE_FROM] AS DATE) AND CAST(tdd3.[DATE_TO] AS DATE)     LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'Instructor to Dealer MM'                     AND CAST(COALESCE(t.PULL_DATE,pm.[PULL_DATE]) AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)     WHERE ex.[SOURCE] = 'AL'              --Create Master table RR     IF OBJECT_ID('tempdb..#temp_final_master_table_rr', 'U') IS NOT NULL DROP TABLE #temp_final_master_table_rr     SELECT DISTINCT     --SURVG-759      COALESCE(cxt.[DEALER_NAME_DECODE],tdd2.[FULL_NAME],tdd.[FULL_NAME],cxt.Dealer_Name,DD.[DEFAULT_DEALER]) as DEALER_NAME,      COALESCE(cxo.Instructed_by,tdd.[FULL_NAME]) as INSTRUCTED_BY,     --End of SURVG-759      ex.[VG_613] as EXCEPTION_FLAG,      cxt.Client_Fund_or_pool_Code as CLIENT_FUND_POOL_CODE,      cxt.[PRODUCT] as PRODUCT,      cxt.[TRADE_CURRENCY] as CURRENCY,      FORMAT(cxo.[INSTRUCTED_AMOUNT], '#,0.00') as INSTRUCTED_AMOUNT,      FORMAT(cxt.[DEALT_AMOUNT], '#,0.00') as DEALT_AMOUNT,      cxt.[BANK] as BANK,      convert(decimal(38,4),cxt.[EXECUTED_RATE]) AS EXECUTED_RATE,      lbt.[BANK_CODE] as LOSING_BANKS,      lbt.[RATE] as LOSING_RATES,      FORMAT(cxt.[TRADE_DATE],'dd/MM/yyyy') as TRADE_DATE,      FORMAT(cxt.[VALUE_DATE],'dd/MM/yyyy') as VALUE_DATE,      FORMAT(cxt.[MATURITY_DATE],'dd/MM/yyyy') as MATURITY_DATE,      cxt.[TERM] as TERM,      cxt.[TRANSACTION_TYPE] as TRANSACTION_TYPE,      nullif(cxo.[CUSTOM_INSTRUCTION], '') as CUSTOM_INSTRUCTION,      cxt.[BASE_FUND_CODE] as BASE_FUND_CODE,      cxt.[BUSINESS_GROUP] as BUSINESS_GROUP,      tdd2.[FULL_NAME] as [ACCEPTED_BY],      FORMAT(cxt.[EXECUTED_DATETIME],'dd/MM/yyyy HH:mm:ss') as EXECUTED_DATE_TIME,      cxo.[INSTRUCTION_STATUS_DECODE] as INSTRUCTION_STATUS,      cxt.[TRANSACTION_STATUS_DECODE] as TRANSACTION_STATUS,      cxt.[ORDER_ID],      ex.[TRANSACTION_NUMBER],      ex.[VG_613_CREATETIME] as CREATE_DATE,      ex.[SOURCE]     INTO #temp_final_master_table_rr     FROM VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE ex     inner join #distinct_ids di on di.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER and ex.[SOURCE] = di.[SOURCE]     left join( select cxt.* from  VISTA_REPORTING.dbo.CASH_TRADES cxt     inner join #temp_max_req_trades req on req.MAX_API_REQ = cxt.API_REQUESTED_DATE and req.TRANSACTION_NUMBER = cxt.TRANSACTION_NUMBER) cxt      on cxt.[TRANSACTION_NUMBER] = ex.[TRANSACTION_NUMBER]     left join ( select distinct cxo.* from VISTA_REPORTING.dbo.CASH_ORDERS cxo      inner join #temp_max_req_orders req on req.ORDER_ID = cxo.ORDER_ID and req.MAX_API_REQ = cxo.API_REQUESTED_DATE) cxo      on cxt.[ORDER_ID] = cxo.[ORDER_ID]     left join #losingbanktemp lbt on ex.[TRANSACTION_NUMBER] = lbt.[TRANSACTION_NUMBER]     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd     on cxo.[INSTRUCTED_BY] = tdd.[MG_USER_ID] AND CAST(cxo.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2     on cxo.[ACCEPTED_BY] = tdd2.[MG_USER_ID] AND CAST(cxo.[PULL_DATE] AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)     LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'Instructor to Dealer RR'                      AND CAST(COALESCE(cxt.PULL_DATE,cxo.[PULL_DATE]) AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)         IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE', 'U') IS NOT NULL     DELETE FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE     WHERE EXISTS (SELECT DISTINCT TRANSACTION_NUMBER     FROM #distinct_ids     WHERE #distinct_ids.TRANSACTION_NUMBER = VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE.TRANSACTION_NUMBER)         IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE', 'U') IS NOT NULL     DELETE FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE     WHERE EXISTS (SELECT DISTINCT TRANSACTION_NUMBER     FROM #distinct_ids     WHERE #distinct_ids.TRANSACTION_NUMBER = VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE.TRANSACTION_NUMBER)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE     SELECT *     FROM #temp_final_master_table_mm         ELSE         SELECT *     INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE     FROM #temp_final_master_table_mm             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE     SELECT *     FROM #temp_final_master_table_rr         ELSE         SELECT *     INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE     FROM #temp_final_master_table_rr                 IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(     'MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_RR/MM_TABLE', --TABLE_NAME     @START_TIME, --START_TIME     GETDATE(), --END_TIME     DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS     CAST(GETDATE() as date)) --COMPLETION_DATE                 IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg613_cash_mm_idx1')           DROP INDEX mmf_vg613_cash_mm_idx1            ON VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE               CREATE NONCLUSTERED INDEX mmf_vg613_cash_mm_idx1           ON VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE            (Trade_Date)         IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg613_cash_mm_idx2')           DROP INDEX mmf_vg613_cash_mm_idx2            ON VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE               CREATE NONCLUSTERED INDEX mmf_vg613_cash_mm_idx2           ON VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE            (Exception_Flag)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg613_cash_rr_idx1')           DROP INDEX mmf_vg613_cash_rr_idx1            ON VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE               CREATE NONCLUSTERED INDEX mmf_vg613_cash_rr_idx1           ON VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE            (Trade_Date)         IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg613_cash_rr_idx2')           DROP INDEX mmf_vg613_cash_rr_idx2            ON VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE               CREATE NONCLUSTERED INDEX mmf_vg613_cash_rr_idx2           ON VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE            (Exception_flag)             IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids     IF OBJECT_ID('tempdb..#temp_cash_orders', 'U') IS NOT NULL DROP TABLE #temp_cash_orders     IF OBJECT_ID('tempdb..#temp_max_req_orders', 'U') IS NOT NULL DROP TABLE #temp_max_req_orders     IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades     IF OBJECT_ID('tempdb..#MAX_TOUCH_T', 'U') IS NOT NULL DROP TABLE #MAX_TOUCH_T     IF OBJECT_ID('tempdb..#MAX_TOUCH_PM', 'U') IS NOT NULL DROP TABLE #MAX_TOUCH_PM     IF OBJECT_ID('tempdb..#losingbanktemp', 'U') IS NOT NULL DROP TABLE #losingbanktemp     IF OBJECT_ID('tempdb..#al_concat_ord', 'U') IS NOT NULL DROP TABLE #al_concat_ord     IF OBJECT_ID('tempdb..#temp_final_master_table_mm', 'U') IS NOT NULL DROP TABLE #temp_final_master_table_mm     IF OBJECT_ID('tempdb..#temp_final_master_table_rr', 'U') IS NOT NULL DROP TABLE #temp_final_master_table_rr                     END            --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_MFID_TABLE_VG_613_INSTRUCTOR_TO_DEALER_FX  CreateDate: 2025-06-26 17:58:42.650  ModifyDate: 2025-06-26 17:58:42.650  --- DEFINITION START ---  -- =============================================    -- Author:  <Miter, Matej>    -- Create date: <12/10/2021>    -- Description:     -- <Master exception table for Instructor_dealer     -- Exception test for FX.>    -- =============================================        -- ***************VERSION CONTROL***************        -- *********************************************        CREATE PROCEDURE [dbo].[MASTER_MFID_TABLE_VG_613_INSTRUCTOR_TO_DEALER_FX]     -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,         AS    BEGIN             DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()         -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         IF OBJECT_ID('tempdb..#distinct_ids_al', 'U') IS NOT NULL DROP TABLE #distinct_ids_al     SELECT DISTINCT       pr.ORD_NUM as TRD_ORD,      oc.PM_ORD AS ORD_NUM,      pr.MULTI_FUND_ID     INTO #distinct_ids_al     FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = pr.ORD_NUM     left join (select ORD_NUM from VISTA_STAGING.dbo.ORDERS pm where PULL_DATE >= '2019-08-23 00:00:00.000' and not exists (SELECT ORD_NUM FROM VISTA_STAGING.dbo.ORDERS WHERE ORD_NUM = pm.ORD_NUM AND PULL_DATE < '2019-08-23 00:00:00.000')) ord     on pr.ORD_NUM = ord.ORD_NUM     WHERE pr.DEALING_DESK = 'FX'             IF OBJECT_ID('tempdb..#distinct_ids_fx', 'U') IS NOT NULL DROP TABLE #distinct_ids_fx     SELECT DISTINCT      fxt.ORDER_ID,      fxo.ORD_NUM,      vg.TRADE_ID AS MULTI_FUND_ID      INTO #distinct_ids_fx     FROM Vista_Staging.dbo.VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE vg     LEFT JOIN Vista_Reporting.dbo.FX_TRADES fxt ON fxt.TRADE_ID = vg.TRADE_ID     LEFT JOIN Vista_Reporting.dbo.FX_ORDERS fxo ON fxo.FXM_ORDER_ID = fxt.ORDER_ID         IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE', 'U') IS NOT NULL     DELETE FROM #distinct_ids_fx where NOT EXISTS (SELECT DISTINCT od.TRADE_ID                  FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_FX od                  WHERE od.TRADE_ID = #distinct_ids_fx.MULTI_FUND_ID)         IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE', 'U') IS NOT NULL     DELETE FROM #distinct_ids_al where NOT EXISTS (SELECT DISTINCT od.MULTI_FUND_ID                  FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                  WHERE od.MULTI_FUND_ID = #distinct_ids_al.MULTI_FUND_ID)             IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE  #distinct_ids     SELECT *      INTO #distinct_ids     FROM #distinct_ids_al         UNION ALL         SELECT *      FROM #distinct_ids_fx         IF OBJECT_ID('tempdb..#max_touch_t', 'U') IS NOT NULL DROP TABLE #max_touch_t     SELECT DISTINCT       t.MULTI_FUND_ID,       MAX(t.TOUCH_COUNT) as MAX_TOUCH      INTO #max_touch_t     FROM VISTA_REPORTING.dbo.TRADES t     WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)     GROUP BY MULTI_FUND_ID             IF OBJECT_ID('tempdb..#max_touch_pm', 'U') IS NOT NULL DROP TABLE #max_touch_pm     SELECT DISTINCT       pm.ord_num,       MAX(pm.TOUCH_COUNT) as MAX_TOUCH      INTO #max_touch_pm     FROM      (select * from Vista_STAGING.dbo.ORDERS pm     where PULL_DATE >= '2019-08-23 00:00:00.000' and not exists (SELECT ORD_NUM FROM VISTA_STAGING.dbo.ORDERS WHERE ORD_NUM = pm.ORD_NUM AND PULL_DATE < '2019-08-23 00:00:00.000'))pm     WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = pm.ORD_NUM)     GROUP BY ord_num         --------------------Banks---------------------------------------------         IF OBJECT_ID('tempdb..#losing_bank_trades', 'U') IS NOT NULL DROP TABLE #losing_bank_trades     SELECT DISTINCT       ex.TRADE_ID,      CONVERT(VARCHAR(20), FXB.LOSING_BANK) AS LOSING_BANK,       CONVERT(VARCHAR(20), FXB.PROFIT_OR_LOSS) AS PROFIT_OR_LOSS,       CONVERT(VARCHAR(20), FXB.ALL_IN_RATE) AS ALL_IN_RATE,       CONVERT(VARCHAR(20), FXB.SWAP_POINTS) AS SWAP_POINTS,      FXT.EXECUTED_BANK     INTO #losing_bank_trades     FROM VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE ex     LEFT JOIN VISTA_REPORTING.dbo.FX_LOSING_BANKS FXB ON ex.TRADE_ID = FXB.TRADE_ID     LEFT JOIN VISTA_REPORTING.dbo.FX_TRADES FXT on FXB.TRADE_ID = FXT.TRADE_ID     WHERE FXB.TRADE_ID = ex.TRADE_ID         AND FXB.LOSING_BANK != FXT.EXECUTED_BANK         AND ex.[SOURCE] = 'FX'        AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)         IF OBJECT_ID('tempdb..#mapped_bank_instructor_to_dealer_ex', 'U') IS NOT NULL DROP TABLE #mapped_bank_instructor_to_dealer_ex     SELECT DISTINCT      ex.TRADE_ID,      CONVERT(VARCHAR(20),FXB.BANK_NAME) AS BANK_NAME     INTO #mapped_bank_instructor_to_dealer_ex     FROM VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE ex     INNER JOIN VISTA_REPORTING.dbo.FX_MAPPED_BANKS fxb ON fxb.TRADE_ID=ex.TRADE_ID     WHERE ex.[SOURCE] = 'FX'        AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)             --Losing Bank temp     IF OBJECT_ID('tempdb..#losingbanktemp', 'U') IS NOT NULL DROP TABLE #losingbanktemp      SELECT DISTINCT      ex.TRADE_ID,      STUFF((        SELECT ', ' + LOSING_BANK       FROM #losing_bank_trades fxb       WHERE fxb.TRADE_ID = ex.TRADE_ID       ORDER BY LOSING_BANK       FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS LOSING_BANK,      STUFF((        SELECT ', ' + PROFIT_OR_LOSS       FROM #losing_bank_trades fxb       WHERE fxb.TRADE_ID = ex.TRADE_ID        ORDER BY PROFIT_OR_LOSS       FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS PROFIT_OR_LOSS,       STUFF((        SELECT ', ' + ALL_IN_RATE       FROM #losing_bank_trades fxb       WHERE fxb.TRADE_ID = ex.TRADE_ID        ORDER BY ALL_IN_RATE       FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS ALL_IN_RATE,       STUFF((        SELECT ', ' + SWAP_POINTS       FROM #losing_bank_trades fxb       WHERE fxb.TRADE_ID = ex.TRADE_ID        ORDER BY SWAP_POINTS       FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS SWAP_POINTS,       STUFF((        SELECT ', ' + FXB.BANK_NAME       FROM #mapped_bank_instructor_to_dealer_ex fxb       WHERE fxb.TRADE_ID = ex.TRADE_ID        ORDER BY BANK_NAME       FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS MAPPED_BANKS     INTO #losingbanktemp     FROM VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE ex     WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)         IF OBJECT_ID('tempdb..#losingbankcount', 'U') IS NOT NULL DROP TABLE #losingbankcount     SELECT DISTINCT      ex.[TRADE_ID],      COUNT(DISTINCT ex.[LOSING_BANK]) as LOSING_BANK_COUNT     INTO #losingbankcount     FROM #losing_bank_trades ex     GROUP BY ex.[TRADE_ID]         IF OBJECT_ID('tempdb..#trades_orders', 'U') IS NOT NULL DROP TABLE #trades_orders     SELECT DISTINCT       fxt.TRADE_ID,       CONVERT(VARCHAR(50), fxo.TRADE_VENUE) AS TRADE_VENUE,      CONVERT(VARCHAR(50),format(fxt.MARKET_ARRIVAL_DATE_TIME, 'dd/MM/yyyy HH:mm:ss')) AS MARKET_ARRIVAL_DATE_TIME     INTO #trades_orders     FROM VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE ex     LEFT JOIN VISTA_REPORTING.dbo.FX_TRADES fxt on fxt.TRADE_ID = ex.TRADE_ID     LEFT JOIN VISTA_REPORTING.dbo.FX_ORDERS fxo ON fxo.[FXM_ORDER_ID] = fxt.[ORDER_ID]     WHERE fxt.[TRADE_ID] = ex.[TRADE_ID]         AND ex.[SOURCE] = 'FX'        AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)         --FX Concatonated fields     IF OBJECT_ID('tempdb..#conc_fx', 'U') IS NOT NULL DROP TABLE #conc_fx      SELECT DISTINCT      ex.[TRADE_ID],      TRADE_VENUE = STUFF((          SELECT ' | ' + tro.TRADE_VENUE         FROM (SELECT DISTINCT TRADE_ID, TRADE_VENUE FROM #trades_orders) tro         WHERE tro.TRADE_ID=ex.TRADE_ID         ORDER BY TRADE_VENUE         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),      MARKET_ARRIVAL_DATE_TIME = STUFF((          SELECT ' | ' + tro.MARKET_ARRIVAL_DATE_TIME         FROM (SELECT DISTINCT TRADE_ID, MARKET_ARRIVAL_DATE_TIME FROM #trades_orders) tro         WHERE tro.TRADE_ID=ex.TRADE_ID         ORDER BY MARKET_ARRIVAL_DATE_TIME         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'')     INTO #conc_fx     FROM VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE ex     WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)         IF OBJECT_ID('tempdb..#AL_trades_orders', 'U') IS NOT NULL DROP TABLE #AL_trades_orders     SELECT DISTINCT      ex.TRADE_ID,      t.TRD_COUNTERPARTY,      q.QUOTE_VALUE,      pl.BROKER     INTO #AL_trades_orders     FROM VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE ex     left join VISTA_REPORTING.dbo.TRADES t on ex.[TRADE_ID] = t.[MULTI_FUND_ID]     left join VISTA_REPORTING.dbo.QUOTES q on q.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]     left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on t.[ORD_NUM] = oc.[TRD_ORD]     left join VISTA_REPORTING.dbo.PM_ORDERS pm on oc.[PM_ORD] = pm.[ORD_NUM]     left join (SELECT DISTINCT ORD_NUM, [BROKER] FROM VISTA_REPORTING.dbo.PLACEMENTS) pl on pm.[ORD_NUM] = pl.[ORD_NUM]     WHERE ex.[SOURCE] = 'AL'         AND t.[MULTI_FUND_ID] = ex.[TRADE_ID]         AND q.[QUOTE_ORIGIN] = 'QUOTE'         AND pl.[BROKER] != q.[BROKER]        AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)         --Losing Bank for AL     IF OBJECT_ID('tempdb..#losingquotetemp_al', 'U') IS NOT NULL DROP TABLE #losingquotetemp_al      SELECT DISTINCT      ex.[TRADE_ID],      TRD_COUNTERPARTY = STUFF((          SELECT ', ' + TRD_COUNTERPARTY         FROM (SELECT DISTINCT TRADE_ID, TRD_COUNTERPARTY FROM #AL_trades_orders) ato         WHERE ato.TRADE_ID = ex.TRADE_ID         ORDER BY TRD_COUNTERPARTY         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''),      QUOTE_VALUE = STUFF((          SELECT ', ' + CAST(CONVERT(DECIMAL(38,8),ato.[QUOTE_VALUE]) AS varchar(50)) as QUOTE_VALUE         FROM (SELECT DISTINCT TRADE_ID, [QUOTE_VALUE] FROM #AL_trades_orders) ato         WHERE ato.TRADE_ID = ex.TRADE_ID         ORDER BY QUOTE_VALUE         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '')     INTO #losingquotetemp_al     FROM VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE ex     WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)             --Static Bank count for AL     IF OBJECT_ID('tempdb..#staticbankcount_al', 'U') IS NOT NULL DROP TABLE #staticbankcount_al     SELECT DISTINCT      ex.[TRADE_ID],      COUNT(DISTINCT pl.[BROKER]) as BROKER_COUNT     INTO #staticbankcount_al     FROM VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE ex     left join VISTA_REPORTING.dbo.TRADES t on ex.[TRADE_ID] = t.[MULTI_FUND_ID] and ex.[SOURCE] = 'AL'     left join VISTA_REPORTING.dbo.QUOTES q on q.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]     left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on t.[ORD_NUM] = oc.[TRD_ORD]     left join VISTA_REPORTING.dbo.PM_ORDERS pm on oc.[PM_ORD] = pm.[ORD_NUM]     left join (SELECT DISTINCT ORD_NUM, [BROKER] FROM VISTA_REPORTING.dbo.PLACEMENTS) pl on pm.[ORD_NUM] = pl.[ORD_NUM]     WHERE t.[MULTI_FUND_ID] = ex.[TRADE_ID]         AND q.[QUOTE_ORIGIN] = 'QUOTE'         AND ex.[SOURCE] = 'AL'        AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)     GROUP BY ex.[TRADE_ID]             --Losing Bank count for AL     IF OBJECT_ID('tempdb..#losingbankcount_al', 'U') IS NOT NULL DROP TABLE #losingbankcount_al     SELECT DISTINCT      [TRADE_ID],      COUNT(DISTINCT [BROKER]) as LOSING_BANK_COUNT     INTO #losingbankcount_al     FROM #AL_trades_orders      GROUP BY [TRADE_ID]         --Static Banks for AL     IF OBJECT_ID('tempdb..#staticbanktemp_al', 'U') IS NOT NULL DROP TABLE #staticbanktemp_al      SELECT DISTINCT      ex.[TRADE_ID],      TRD_COUNTERPARTY = STUFF((          SELECT DISTINCT ', ' + t.TRD_COUNTERPARTY         FROM VISTA_REPORTING.dbo.TRADES t          left join VISTA_REPORTING.dbo.QUOTES q  on q.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]         left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on t.[ORD_NUM] = oc.[TRD_ORD]         left join VISTA_REPORTING.dbo.PM_ORDERS pm on oc.[PM_ORD] = pm.[ORD_NUM]         left join (SELECT DISTINCT ORD_NUM, [BROKER] FROM VISTA_REPORTING.dbo.PLACEMENTS) pl on pm.[ORD_NUM] = pl.[ORD_NUM]         WHERE t.[MULTI_FUND_ID] = ex.[TRADE_ID] and q.[QUOTE_ORIGIN] = 'QUOTE' and ex.[SOURCE] = 'AL'         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '')     INTO #staticbanktemp_al     FROM VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE ex     WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)             --Create Master table      IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     SELECT DISTINCT      COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) as DEALER_NAME,      COALESCE(fxo.[PM],fxo.INSTRUCTED_BY) AS INSTRUCTED_BY,       ex.[VG_613] as EXCEPTION_FLAG,      fxo.[CLIENT_FUND] as CLIENT_FUND,      fxt.[EXECUTED_BANK] as EXECUTED_BANK,      fxo.[FM_COMMENTS] as FM_COMMENTS,      fxo.[MARKER] as MARKER,      fxo.[TRADE_PURPOSE] as TRADE_PURPOSE,      fxo.[INSTRUCTION_TYPE] AS PRODUCT,      fxt.[SWAP_TYPE] AS SWAP_TYPE,      CASE WHEN fxt.FR_LEG_PRODUCT IS NULL THEN fxt.[NR_LEG_PRODUCT] ELSE  (fxt.[NR_LEG_PRODUCT] + ISNULL(' | ' + fxt.[FR_LEG_PRODUCT],'')) END  as FXM_PRODUCT,      case when fxt.NOTIONAL_CCY_FAR is null then fxt.NOTIONAL_CCY else (fxt.[NOTIONAL_CCY] + ' | ' + fxt.[NOTIONAL_CCY_FAR]) end as INSTRUCTED_CURRENCY,      CASE WHEN fxt.NOTIONAL_AMOUNT_FAR IS NULL THEN CAST(FORMAT(convert(DECIMAL(38,2),fxt.[NOTIONAL_AMOUNT]), '#,0.00') as varchar(50))        ELSE  (CAST(FORMAT(CONVERT(DECIMAL(38,2),fxt.[NOTIONAL_AMOUNT]), '#,0.00') as varchar(50)) + ' | ' + CAST(FORMAT(CONVERT(DECIMAL(38,2),fxt.[NOTIONAL_AMOUNT_FAR]), '#,0.00') as varchar(50)))       END as [INSTRUCTED_AMOUNT],      case when fxt.buy_ccy_leg2 is null then fxt.BUY_CCY else (fxt.[BUY_CCY]  + ' | ' + fxt.[BUY_CCY_LEG2]) end as [BUY_CURRENCY],      case when fxt.SELL_CCY_LEG2 is null then fxt.SELL_CCY else  (fxt.[SELL_CCY]  + ' | ' + fxt.[SELL_CCY_LEG2]) end as [SELL_CURRENCY],      FORMAT(fxt.[TRADE_DATE], 'dd/MM/yyyy') AS TRADE_DATE,      CASE WHEN FXt.VALUE_DATE_FAR IS NULL THEN CAST(FORMAT(fxt.[VALUE_DATE_NEAR], 'dd/MM/yyyy') as varchar(50))        ELSE (CAST(format(fxt.[VALUE_DATE_NEAR], 'dd/MM/yyyy') as varchar(50)) + ' | ' + CAST(format(fxt.[VALUE_DATE_FAR], 'dd/MM/yyyy') as varchar(50)))       END as [VALUE_DATE],      CASE WHEN fxt.EXECUTED_AMOUNT_FAR IS NULL THEN CAST(FORMAT(CONVERT(DECIMAL(38,2),fxt.[EXECUTED_AMOUNT]), '#,0.00') as varchar(50))        ELSE  (CAST(FORMAT(CONVERT(DECIMAL(38,2),fxt.[EXECUTED_AMOUNT]), '#,0.00') as varchar(50)) + ' | ' + CAST(FORMAT(CONVERT(DECIMAL(38,2),fxt.[EXECUTED_AMOUNT_FAR]), '#,0.00') as varchar(50)))       END as [EXECUTED_AMOUNT],       CASE WHEN fxt.EXECUTED_RATE_FAR IS NULL THEN CAST(fxt.[EXECUTED_RATE] as varchar(50))        WHEN FXT.EXECUTED_RATE_FAR IS NOT NULL THEN (CAST(fxt.[EXECUTED_RATE] as varchar(50)) + ' | ' + CAST(fxt.[EXECUTED_RATE_FAR] as varchar(50)))       END as [ALL_IN_RATE],      CASE WHEN fxt.SPOT_RATE_FAR IS NULL THEN CAST(fxt.[SPOT_RATE] as varchar(50))        WHEN FXT.SPOT_RATE_FAR IS NOT NULL THEN (CAST(fxt.[SPOT_RATE] as varchar(50)) + ' | ' + CAST(fxt.[SPOT_RATE_FAR] as varchar(50)))       END as [SPOT_RATE],      CASE WHEN fxt.FORWARD_POINTS_FAR IS NULL THEN CAST(fxt.[FORWARD_POINTS] as varchar(50))        WHEN FXT.FORWARD_POINTS_FAR IS NOT NULL THEN  (CAST(fxt.[FORWARD_POINTS] as varchar(50)) + ' | ' + CAST(fxt.[FORWARD_POINTS_FAR] as varchar(50)))       END as [FORWARD_POINTS],      fxt.[PROFIT_OR_LOSS] as PROFIT_OR_LOSS,      fxt.[MAPPED_BANK_COUNT] as STATIC_BANKS_COUNT,      lbt.[MAPPED_BANKS] as STATIC_BANKS,      lbc.[LOSING_BANK_COUNT] as LOSING_BANKS_COUNT,      lbt.[LOSING_BANK] as LOSING_BANKS,      fxo.[BASE_FUND] as BASE_FUND,      fxo.[BUSINESS_GROUP] as BUSINESS_GROUP,      fxo.[CREATED_FROM] as ORDER_SOURCE,      cc_fx.[TRADE_VENUE] as PLACEMENT_VENUE,      fxt.[EXC_SESSION_TYPE] as SESSION_TYPE,      CASE WHEN fxt.FIXING_DATE_LEG2 IS NULL THEN CAST(format(fxt.[FIXING_DATE], 'dd/MM/yyyy') as varchar(50))        ELSE (CAST(format(fxt.[FIXING_DATE], 'dd/MM/yyyy') as varchar(50)) + ' | ' + CAST(format(fxt.[FIXING_DATE_LEG2], 'dd/MM/yyyy') as varchar(50)))       END as FIXING_DATE,      fxt.[SWAP_POINTS] as SWAP_POINTS,      fxo.[FXM_ORDER_ID] as ORDER_ID,      ex.[TRADE_ID] as TRANSACTION_NUMBER,      CASE       WHEN fxo.[ORD_NUM] IS NULL THEN fxo.[FXM_ORDER_ID]      ELSE fxo.[ORD_NUM]      END AS PM_ORDER_ID,      fxo.[ALADDIN_COMMON_ID] as ALADDIN_COMMON_IDENTIFIER,      fxo.[INSTRUCTION_STATUS] as INSTRUCTION_STATUS,      format(fxo.[INSTRUCTION_RECEIVED_DATE_TIME], 'dd/MM/yyyy HH:mm:ss') as ORDER_RECEIVED_DATE_TIME,      cc_fx.[MARKET_ARRIVAL_DATE_TIME] as MARKET_ARRIVAL_DATE_TIME,      format(fxt.[EXECUTED_DATE_TIME], 'dd/MM/yyyy HH:mm:ss') as EXECUTED_DATE_TIME,      ex.[VG_613_CREATETIME] as CREATE_DATE,      ex.[SOURCE]     INTO #temp_final_master_table     FROM VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE ex     left join VISTA_REPORTING.dbo.FX_TRADES fxt on fxt.[TRADE_ID] = ex.[TRADE_ID] and ex.[SOURCE] = 'FX'     left join VISTA_REPORTING.dbo.FX_ORDERS fxo on fxt.[ORDER_ID] = fxo.[FXM_ORDER_ID]     left join #losingbanktemp lbt      on lbt.[TRADE_ID] = ex.[TRADE_ID] and ex.[SOURCE] = 'FX'     left join #losingbankcount lbc     on lbc.[TRADE_ID] = ex.[TRADE_ID] and ex.[SOURCE] = 'FX'     left join #conc_fx cc_fx     on ex.[TRADE_ID] = cc_fx.[TRADE_ID] and ex.[SOURCE] = 'FX'     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd     on tdd.[MG_USER_ID] = fxt.[DEALT_BY] AND CAST(fxt.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2     on tdd.[MG_USER_ID] = fxt.[ACCEPTED_BY] AND CAST(fxt.[PULL_DATE] AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)     left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd      on dd.[REPORT_NAME] = 'Instructor to Dealer' AND CAST(fxt.[PULL_DATE] AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)     WHERE ex.[SOURCE] = 'FX' AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)             UNION             SELECT DISTINCT      COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) as [DEALER_NAME],      pm.pm as INSTRUCTED_BY,      ex.[VG_613] as EXCEPTION_FLAG,      NULL as [CLIENT_FUND],      pl.[BROKER] as [EXECUTED_BANK],      pm.[COMMENTS_VALUE] as [FM_COMMENTS],      NULL as [MARKER],      t.[TRD_PURPOSE] as [TRADE_PURPOSE],      pm.[SM_SEC_TYPE] as [PRODUCT],      NULL as [SWAP_TYPE],      NULL AS FXM_PRODUCT,      CAST(t.[FX_PAY_CURR] as varchar(50)) as [INSTRUCTED_CURRENCY],      CAST(format(convert(decimal(38,2),pl.[QUANTITY]), '#,0.00')  as varchar(50)) as [INSTRUCTED_AMOUNT],      NULL as [BUY_CURRENCY],      NULL as [SELL_CURRENCY],      FORMAT(pm.[OPEN_DATE], 'dd/MM/yyyy') as [TRADE_DATE],      (CONVERT(VARCHAR(50),FORMAT(pm.[SETTLE_DATE] , 'dd/MM/yyyy')) + ISNULL(' | ' + CONVERT(VARCHAR(50),FORMAT(pm.[MATURITY], 'dd/MM/yyyy')),'')) as [VALUE_DATE],      CAST(format(convert(decimal(38,2),pm.[FILL_AMT]), '#,0.00') as varchar(50)) as [EXECUTED_AMOUNT],      CAST(COALESCE(pl.AVG_PRICE,t.FX_PRICE) as varchar(30)) as [ALL_IN_RATE],      cast(t.FX_PRICE_SPOT as varchar(50)) as [SPOT_RATE], -- Given as Trades.FX_PRICE_SPOT      NULL as [FORWARD_POINTS],      NULL as [PROFIT_OR_LOSS],      sbc_al.[BROKER_COUNT] as STATIC_BANKS_COUNT,       sb_al.[TRD_COUNTERPARTY] as STATIC_BANKS,      lb_al.[LOSING_BANK_COUNT] as [LOSING_BANKS_COUNT], --need to do this      lq_al.[TRD_COUNTERPARTY] as LOSING_BANKS,      t.[PORTFOLIOS_PORTFOLIO_NAME] as [BASE_FUND],       CASE       WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP'       WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG'       WHEN (pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM'      ELSE NULL      END AS [BUSINESS_GROUP],      'Aladdin' as [ORDER_SOURCE],      pl.[VENUE] as [PLACEMENT_VENUE],      NULL as [SESSION_TYPE],      NULL as [FIXING_DATE],      NULL as [SWAP_POINTS],      pm.[ORD_NUM] as [ORDER_ID],      ex.[TRADE_ID] as TRANSACTION_NUMBER,      pm.[ORD_NUM] as PM_ORDER_ID,      r.[REQUEST_ID] as [ALADDIN_COMMON_IDENTIFIER],      pl.[STATUS] as [INSTRUCTION_STATUS],      FORMAT(pm.[AUTH_TIME], 'dd/MM/yyyy HH:mm:ss') as [ORDER_RECEIVED_DATE_TIME],      CAST(FORMAT(t.[EXECUTION_TIME], 'dd/MM/yyyy HH:mm:ss') as varchar(50)) as [MARKET_ARRIVAL_DATE_TIME], --Same as executed, so DateDiff will always be 0???      FORMAT(t.[EXECUTION_TIME], 'dd/MM/yyyy HH:mm:ss') as [EXECUTED_DATE_TIME],      ex.[VG_613_CREATETIME] as [CREATE_DATE],      ex.[SOURCE]       FROM VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE ex     left join VISTA_REPORTING.dbo.TRADES t      on ex.[TRADE_ID] = t.[MULTI_FUND_ID] and ex.[SOURCE] = 'AL'     inner join #max_touch_t mtt      on t.[MULTI_FUND_ID] = mtt.[MULTI_FUND_ID] and t.[TOUCH_COUNT] = mtt.[MAX_TOUCH]     left join VISTA_REPORTING.dbo.ORDERS_CROSS oc     on t.[ORD_NUM] = oc.[TRD_ORD]     left join #staticbankcount_al sbc_al on ex.[TRADE_ID] = sbc_al.[TRADE_ID]      left join #staticbanktemp_al sb_al on ex.[TRADE_ID] = sb_al.[TRADE_ID]     left join #losingbankcount_al lb_al on ex.[TRADE_ID] = lb_al.[TRADE_ID]      left join #losingquotetemp_al lq_al on ex.[TRADE_ID] = lq_al.[TRADE_ID]     left join (select pm.* from VISTA_STAGING.dbo.ORDERS pm inner join #max_touch_pm mpm on mpm.ord_num = pm.ord_num and mpm.MAX_TOUCH = pm.touch_count) pm     on oc.[PM_ORD] = pm.[ORD_NUM] and ex.[SOURCE] = 'AL'     left join (SELECT DISTINCT PORTFOLIOS_PORTFOLIO_NAME, PORTFOLIO_GROUP_NAME,FUND FROM Vista_Staging.dbo.PORTFOLIO_GROUPS) pgt     on t.[FUND] = pgt.[FUND]     left join (SELECT DISTINCT ORD_NUM, PLACEMENT_NUM, [STATUS], QUANTITY, [BROKER], AVG_PRICE, VENUE FROM VISTA_REPORTING.dbo.PLACEMENTS) pl      on pm.[ORD_NUM] = pl.[ORD_NUM]     left join (SELECT PLACEMENT_NUM, REQUEST_ID FROM VISTA_STAGING.dbo.REQUEST_LOOKUP) r      on pl.[PLACEMENT_NUM] = r.[PLACEMENT_NUM]     left join VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd on tdd.[INITIALS]  = t.[TRD_TRADER] AND CAST(t.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2 on tdd.[INITIALS] = pm.[TRADER] AND CAST(pm.[PULL_DATE] AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)     left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd on dd.[REPORT_NAME] = 'Instructor to Dealer' AND CAST(COALESCE(t.[PULL_DATE],pm.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)     WHERE ex.[SOURCE] = 'AL' AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = ex.TRADE_ID)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE', 'U') IS NOT NULL     DELETE FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE     WHERE Transaction_Number IN (SELECT DISTINCT MULTI_FUND_ID FROM #distinct_ids)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE     SELECT *     FROM #temp_final_master_table         ELSE         SELECT *     INTO VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE     FROM #temp_final_master_table         IF OBJECT_ID('tempdb..#max_touch_t', 'U') IS NOT NULL DROP TABLE #max_touch_t      IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     IF OBJECT_ID('tempdb..#distinct_ids_al', 'U') IS NOT NULL DROP TABLE #distinct_ids_al     IF OBJECT_ID('tempdb..#distinct_ids_fx', 'U') IS NOT NULL DROP TABLE #distinct_ids_fx     IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE  #distinct_ids     IF OBJECT_ID('tempdb..#max_touch_pm', 'U') IS NOT NULL DROP TABLE #max_touch_pm             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg613_fx_idx1')           DROP INDEX mmf_vg613_fx_idx1      ON VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg613_fx_idx1     ON VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE      (TRANSACTION_NUMBER)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg613_fx_idx2')           DROP INDEX mmf_vg613_fx_idx2      ON VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE         CREATE NONCLUSTERED INDEX mmf_vg613_fx_idx2     ON VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE      (CREATE_DATE)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg613_fx_idx3')           DROP INDEX mmf_vg613_fx_idx3      ON VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg613_fx_idx3     ON VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE      (Dealer_Name)              IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg613_fx_idx4')           DROP INDEX mmf_vg613_fx_idx4      ON VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg613_fx_idx4     ON VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE      (Value_Date)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg613_fx_idx5')           DROP INDEX mmf_vg613_fx_idx5      ON VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg613_fx_idx5     ON VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE      (Trade_Date)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg613_fx_idx6')           DROP INDEX mmf_vg613_fx_idx6      ON VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg613_fx_idx6     ON VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE      (Exception_Flag)              IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(     'MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE', --TABLE_NAME     @START_TIME, --START_TIME     GETDATE(), --END_TIME     DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS     CAST(GETDATE() as date)) --COMPLETION_DATE             END            --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_MULTI_FUND_ID_TABLE  CreateDate: 2025-06-26 17:59:01.050  ModifyDate: 2025-06-26 17:59:01.050  --- DEFINITION START ---          CREATE PROCEDURE [dbo].[MASTER_MULTI_FUND_ID_TABLE]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        -- VERSION HISTORY    -- 2018-03-21 - WH: Removed reference to BUY_SELL_FLAG - used TRAN_TYPE instead    -- 2018-08-08 - KR : ADDED A NEW COLUMN MARKET TO THE MASTER_MULTI_FUND_ID_TABLE    -- 2018-08-21 - WH : Added Asset Classification field (asset groupings as per the DMC FI Dealing Volumes asset groupings), Interfund Transfer and £ Consideration (absolute value and summed from the client execution level).     --      These fields are used in Quote Exception Dealing Exception tables for FI to use to get the underlying data for DMC. The code is taken from VISTA_REPORTING.dbo.[dbo].[DMC_FIDD_DEALING_VOLS].    -- 2020-01-08 - MN : Added use of FinalFlagMFIDLevel to fix join issues    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()             IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids     SELECT DISTINCT       t.ORD_NUM as TRD_ORD,      oc.PM_ORD AS ORD_NUM,      ol.MULTI_FUND_ID     INTO #distinct_ids     FROM Vista_Reporting.dbo.MULTI_FUND_EXCEPTION_TABLE ol     LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.MULTI_FUND_ID = ol.MULTI_FUND_ID     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = t.ORD_NUM                    IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE', 'U') IS NOT NULL     DELETE FROM #distinct_ids where NOT EXISTS (SELECT DISTINCT od.MULTI_FUND_ID                  FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                  WHERE od.MULTI_FUND_ID = #distinct_ids.MULTI_FUND_ID)             --IF OBJECT_ID('tempdb..#todays_trades', 'U') IS NOT NULL DROP TABLE #todays_trades     --SELECT DISTINCT ORD_NUM, MULTI_FUND_ID      --INTO #todays_trades     --FROM Vista_Reporting.dbo.TRADES      --WHERE CAST(PULL_DATE AS DATE) = CAST(GETDATE() AS DATE)             --IF OBJECT_ID('tempdb..#todays_trorders', 'U') IS NOT NULL DROP TABLE #todays_trorders     --SELECT DISTINCT tr.ORD_NUM      --INTO #todays_trorders     --FROM Vista_Reporting.dbo.TRD_ORDERS tr     --WHERE EXISTS (SELECT ORD_NUM FROM #todays_trades WHERE ORD_NUM = tr.ORD_NUM)             --IF OBJECT_ID('tempdb..#todays_pmorders', 'U') IS NOT NULL DROP TABLE #todays_pmorders     --SELECT DISTINCT pm.ORD_NUM      --INTO #todays_pmorders      --FROM Vista_Reporting.dbo.PM_ORDERS pm     --LEFT JOIN Vista_Reporting.dbo.ORDERS_CROSS oc ON oc.PM_ORD = pm.ORD_NUM     --WHERE EXISTS (SELECT ORD_NUM FROM #todays_trades WHERE ORD_NUM = oc.TRD_ORD)             IF OBJECT_ID('tempdb..#trades_metadata', 'U') IS NOT NULL DROP TABLE #trades_metadata     SELECT DISTINCT      t.MULTI_FUND_ID,      t.TRD_COUNTERPARTY,      t.CLIENT_EXECUTION_NUM,      t.COMMENTS,      t.INDICATIVE_COMMENTS,      t.EXECUTION_TIME,      t.ORD_NUM,      t.CUSIP,      t.PLACEMENT_NUM,      t.TRD_AUTH_TIME,      t.B3Q_RATIONALE,      t.NWQ_RATIONALE,      t.TRAN_TYPE,      t.TRD_CURRENCY,      t.TRD_PRICE,      t.TRD_PRICING_SPREAD,      t.TRD_COUPON,      t.TRD_ORIG_FACE,      t.TRD_YIELD,      t.TRD_ENTRY_TIME,      t.TRD_TRADE_DATE,      t.ACTIVITY_TYPE,      t.ACTIVITY_TYPE_DECODE,      t.TRDCOMM_COMMENTS,      t.EXECUTION_TYPE_DECODE,      t.NET_CONSIDERATION_GBP,      t.COUNTERPARTY_CODE,      t.PORTFOLIOS_PORTFOLIO_NAME,      t.SM_CURRENCY,      t.TRD_PURPOSE,      t.TRD_EX_DESK_TYPE,      t.CONTRACT_SIZE,      t.FinalFlag,      t.FinalFlagMFIDLevel     INTO #trades_metadata     FROM VISTA_REPORTING.dbo.TRADES t     WHERE FinalFlagMFIDLevel = 1 AND EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)             IF OBJECT_ID('tempdb..#trd_orders_metadata', 'U') IS NOT NULL DROP TABLE #trd_orders_metadata     SELECT DISTINCT      tr.ORD_NUM,      tr.ACTIVE_TIME,      tr.AUTH_TIME,      tr.PM_FULL_NAME,      tr.BROKER_CODE,      tr.SEC_DESC1,      tr.ORDER_REASON,      tr.ORD_GROUP,      tr.DEALING_DESK,      tr.CUSIP,      tr.TRADER,      tr.LIMIT_TYPE,      tr.LIMIT_VALUE     INTO #trd_orders_metadata     FROM VISTA_REPORTING.dbo.TRD_ORDERS tr     WHERE EXISTS (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = tr.ORD_NUM)             IF OBJECT_ID('tempdb..#pm_orders_metadata', 'U') IS NOT NULL DROP TABLE #pm_orders_metadata     SELECT DISTINCT      pm.ORD_NUM      ,pm.UPDATE_INSTR     INTO #pm_orders_metadata     FROM VISTA_REPORTING.dbo.PM_ORDERS pm     WHERE UPDATE_INSTR IS NOT NULL     AND EXISTS (SELECT DISTINCT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = pm.ORD_NUM)             IF OBJECT_ID('tempdb..#prim_metadata', 'U') IS NOT NULL DROP TABLE #prim_metadata     SELECT DISTINCT      pr.DEBT_DERIV      ,pr.DESC_INSTMT      ,pr.INST_TYPE      ,pr.ORDER_INST_TYPE      ,pr.SM_SEC_TYPE      ,pr.SM_SEC_GROUP      ,pr.TRD_CURRENCY      ,pr.TRAN_TYPE      ,pr.TWEB_CLOSE_DEALING      ,pr.[1615_DEALING]      ,pr.PRIMARY_MARKET      ,pr.INTERFUND_TRANSFER      ,pr.LINKED_MULTI_FUND      ,pr.MULTI_FUND_ID      ,pr.DEALING_DESK      ,pr.ICDS_DETAIL      ,pr.TRD_PURPOSE      ,pr.[Parent_trade_ID]     INTO #prim_metadata     FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr     WHERE EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = pr.MULTI_FUND_ID)             IF OBJECT_ID('tempdb..#PM_comments', 'U') IS NOT NULL DROP TABLE #PM_comments     SELECT DISTINCT      dc.VALUE,      t.MULTI_FUND_ID     INTO #PM_comments     FROM VISTA_STAGING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON t.ORD_NUM = oc.TRD_ORD     LEFT JOIN (SELECT DISTINCT PM,ORD_NUM,UPDATE_INSTR FROM VISTA_REPORTING.dbo.PM_ORDERS) pm ON oc.PM_ORD = pm.ORD_NUM     LEFT JOIN (SELECT DISTINCT VALUE,TAG_NAME,CODE FROM VISTA_REPORTING.dbo.DECODES) dc ON dc.TAG_NAME = 'PM_INSTRUCTION' AND dc.CODE=pm.UPDATE_INSTR     WHERE pm.PM IS NOT NULL AND EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)             IF OBJECT_ID('tempdb..#PM_INST_concat', 'U') IS NOT NULL DROP TABLE #PM_INST_concat     SELECT        MULTI_FUND_ID,       STUFF((      SELECT DISTINCT ', ' + LTRIM(RTRIM(VALUE))      FROM #PM_comments       WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID) order by ', ' + LTRIM(RTRIM(VALUE))      FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')       ,1,2,'') AS PM_INST_concat     INTO #PM_INST_concat     FROM #PM_comments Results     GROUP BY MULTI_FUND_ID             IF OBJECT_ID('tempdb..#PM', 'U') IS NOT NULL DROP TABLE #PM     SELECT DISTINCT      pm.PM,      t.MULTI_FUND_ID     INTO #PM     FROM VISTA_STAGING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc      ON t.ORD_NUM = oc.TRD_ORD     LEFT JOIN VISTA_REPORTING.dbo.PM_ORDERS pm      ON oc.PM_ORD = pm.ORD_NUM     WHERE pm.PM <> 'MERGED' -- MERGED is not a PM so we don't need to include      AND pm.PM IS NOT NULL -- This filter should not be necessary if the business follows the proper process, but is done to safeguard against trades in Aladdin with no associated PM order.      AND EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)             IF OBJECT_ID('tempdb..#PMs_concat', 'U') IS NOT NULL DROP TABLE #PMs_concat     SELECT        MULTI_FUND_ID,       STUFF((      SELECT DISTINCT ', ' + LTRIM(RTRIM(PM))      FROM #PM       WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID) order by ', ' + LTRIM(RTRIM(PM))      FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')       ,1,2,'') AS PMs_concat     INTO #PMs_concat     FROM #PM Results     GROUP BY MULTI_FUND_ID             --Concatenate PCT_OF_NAV wih FUND and NAV_CUT_OFF with FUND by MFID     IF OBJECT_ID('tempdb..#PCT_NAV', 'U') IS NOT NULL DROP TABLE #PCT_NAV     SELECT DISTINCT      t.MULTI_FUND_ID,      t.CLIENT_EXECUTION_NUM,      CONCAT(t.PORTFOLIOS_PORTFOLIO_NAME,        ': ',        CASE         WHEN nav.nav_value_gbp != 0          THEN ABS(CONVERT(DECIMAL(30,2),100.0*(t.NET_CONSIDERATION_GBP)/nav.nav_value_gbp)) ELSE NULL         END) AS PCT_NAV_CONCAT,      CONCAT(t.PORTFOLIOS_PORTFOLIO_NAME, ': ', nc.CUTOFF) AS CUTOFF     INTO #PCT_NAV     FROM #trades_metadata t     OUTER APPLY (SELECT TOP 1 nav.* from VISTA_REPORTING.dbo.NAV         WHERE nav.PORTFOLIO_NAME = t.PORTFOLIOS_PORTFOLIO_NAME AND nav.NAV_PORT_DATE <= CONVERT(DATE, t.TRD_AUTH_TIME)         ORDER BY nav.NAV_PORT_DATE DESC) nav     LEFT JOIN VISTA_STAGING.dbo.NAV_CUT_OFFS nc ON nc.CLIENT_FUND=t.PORTFOLIOS_PORTFOLIO_NAME             IF OBJECT_ID('tempdb..#pct_nav_concat', 'U') IS NOT NULL DROP TABLE #pct_nav_concat     SELECT       MULTI_FUND_ID,      STUFF((       SELECT DISTINCT ' | ' + PCT_NAV_CONCAT       FROM #PCT_NAV        WHERE (MULTI_FUND_ID = pc_nav.MULTI_FUND_ID) order by ' | ' + PCT_NAV_CONCAT       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')       ,1,2,'') AS NAV_PCT_concat,      STUFF((       SELECT DISTINCT ' | ' + CUTOFF       FROM #PCT_NAV        WHERE (MULTI_FUND_ID = pc_nav.MULTI_FUND_ID) order by ' | ' + CUTOFF       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')       ,1,2,'') AS NAV_CUT_concat,      STUFF((       SELECT DISTINCT ' | ' + CLIENT_EXECUTION_NUM       FROM #PCT_NAV        WHERE (MULTI_FUND_ID = pc_nav.MULTI_FUND_ID) order by ' | ' + CLIENT_EXECUTION_NUM       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')       ,1,2,'') AS CL_EX_concat     INTO #pct_nav_concat     FROM #PCT_NAV pc_nav     GROUP BY MULTI_FUND_ID             --2. Get latest TRD_TRADE_DATE associated with a trade     IF OBJECT_ID('tempdb..#Latest_TRD_TRADE_DATE', 'U') IS NOT NULL DROP TABLE #Latest_TRD_TRADE_DATE     SELECT DISTINCT      MULTI_FUND_ID,      TRD_TRADE_DATE,      EXECUTION_TIME,      TRD_PURPOSE,      TRD_AUTH_TIME,      TRAN_TYPE,      SM_CURRENCY,      TRD_PRICE,      TRD_PRICING_SPREAD,      TRD_YIELD,      TRD_COUNTERPARTY,      TRD_COUPON,      TRD_ENTRY_TIME,      TRDCOMM_COMMENTS,      ACTIVITY_TYPE,      ACTIVITY_TYPE_DECODE,      TRD_CURRENCY     INTO #Latest_TRD_TRADE_DATE     FROM #trades_metadata     WHERE FinalFlagMFIDLevel = 1         --3. Get Investment desks associated with all funds on a trade     IF OBJECT_ID('tempdb..#MFID_inv_Desk', 'U') IS NOT NULL DROP TABLE #MFID_inv_Desk     SELECT DISTINCT       t.MULTI_FUND_ID,       p.ancestor     INTO #MFID_inv_Desk     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_STAGING.dbo.PORTFOLIO_GROUP_CLOSURE_TABLE p ON t.PORTFOLIOS_PORTFOLIO_NAME = p.descendant     WHERE p.ancestor IN ('MG_ATCRED','MG_RET_FI','MG_INSTI','MG_INTER','MG_RESTCT','MG_IN_CAP','MG_LEVFIN','MG_MIB','MG_REDEBT') -- This is the list of investment desks provided in the business requirements documents           AND EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)         IF OBJECT_ID('tempdb..#Inv_desk_concat', 'U') IS NOT NULL DROP TABLE #Inv_desk_concat     SELECT        MULTI_FUND_ID,       STUFF((      SELECT DISTINCT ', ' + LTRIM(RTRIM(ancestor))      FROM #MFID_inv_Desk       WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID) order by  ', ' + LTRIM(RTRIM(ancestor))      FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')       ,1,2,'') AS Inv_Desk_Concat     INTO #Inv_desk_concat     FROM #MFID_inv_Desk Results     GROUP BY MULTI_FUND_ID         --4. Get latest comments value associated with a trade     IF OBJECT_ID('tempdb..#Latest_Comment', 'U') IS NOT NULL DROP TABLE #Latest_Comment     SELECT DISTINCT      o.ORD_NUM,      o.COMMENTS_VALUE     INTO #Latest_Comment     FROM VISTA_REPORTING.dbo.TRD_ORDERS o     INNER JOIN (SELECT         o2.ORD_NUM,         MAX(o2.TOUCH_COUNT) AS MAX_TOUCH        FROM VISTA_REPORTING.dbo.TRD_ORDERS o2        WHERE EXISTS (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = o2.ORD_NUM)        GROUP BY ORD_NUM) o2 ON o.ORD_NUM = o2.ORD_NUM AND o.TOUCH_COUNT = o2.MAX_TOUCH     WHERE NULLIF(o.COMMENTS_VALUE,'') IS NOT NULL        AND EXISTS (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = o.ORD_NUM)             IF OBJECT_ID('tempdb..#min_touch', 'U') IS NOT NULL DROP TABLE #min_touch     SELECT DISTINCT      t1.MULTI_FUND_ID      ,t1.TRD_TRADER AS TRADER      ,D.FULL_NAME as TRADER_FULL_NAME     INTO #min_touch     FROM VISTA_REPORTING.dbo.TRADES as t1     JOIN (       SELECT        t1.MULTI_FUND_ID        ,MIN(t1.TOUCH_COUNT) as MIN_TOUCH       FROM VISTA_REPORTING.dbo.TRADES as t1       WHERE EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t1.MULTI_FUND_ID)       GROUP BY t1.MULTI_FUND_ID      )      as t2 on t1.MULTI_FUND_ID=t2.MULTI_FUND_ID and t1.TOUCH_COUNT=t2.MIN_TOUCH     LEFT JOIN VISTA_REPORTING.DBO.DEALER_AND_DESK D ON D.INITIALS = t1.TRD_TRADER     WHERE EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t1.MULTI_FUND_ID)             IF OBJECT_ID('tempdb..#max_touch', 'U') IS NOT NULL DROP TABLE #max_touch     SELECT      t3.ORD_NUM      ,t3.TRADER      ,t3.TRADER_FULL_NAME      ,t3.FACE     INTO #max_touch     FROM VISTA_REPORTING.dbo.TRD_ORDERS as t3     INNER JOIN (SELECT         t1.ORD_NUM         ,MAX(t1.TOUCH_COUNT) as MAX_TOUCH        FROM VISTA_REPORTING.dbo.TRD_ORDERS as t1        --INNER JOIN VISTA_REPORTING.dbo.TRD_ORDERS as t2 on t1.ORD_NUM=t2.ORD_NUM        WHERE EXISTS (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = t1.ORD_NUM)        GROUP BY t1.ORD_NUM        ) t2 on t3.ORD_NUM=t2.ORD_NUM and t3.TOUCH_COUNT=t2.MAX_TOUCH     WHERE EXISTS (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = t3.ORD_NUM)             IF OBJECT_ID('tempdb..#temp_oc', 'U') IS NOT NULL DROP TABLE #temp_oc     SELECT DISTINCT       PM_ORD, TRD_ORD INTO #temp_oc      FROM VISTA_REPORTING.dbo.ORDERS_CROSS oc     WHERE EXISTS (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = oc.TRD_ORD)             IF OBJECT_ID('tempdb..#temp_t', 'U') IS NOT NULL DROP TABLE #temp_t     SELECT       mt.MULTI_FUND_ID,       SUM(ABS(t.TRD_ORIG_FACE)) AS SUM_TRD_ORIG_FACE,      --SUM(ABS(TRD_PRINCIPAL)) AS SUM_TRD_PRINCIPAL,      SUM(ABS(t.TRD_PRINCIPAL_GBP)) AS SUM_TRD_PRINCIPAL_GBP,      SUM(ABS(t.NET_CONSIDERATION_GBP)) AS SUM_NET_CONSIDERATION_GBP     INTO #temp_t      FROM (SELECT DISTINCT MULTI_FUND_ID FROM VISTA_REPORTING.dbo.TRADES t1        WHERE FinalFlag = 1 AND EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t1.MULTI_FUND_ID)       UNION        SELECT DISTINCT MULTI_FUND_ID FROM VISTA_REPORTING.dbo.TRADES t2        WHERE FinalFlagMFIDLevel = 1 AND EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t2.MULTI_FUND_ID)) mt     LEFT JOIN VISTA_REPORTING.dbo.TRADES t on mt.MULTI_FUND_ID = t.MULTI_FUND_ID     WHERE t.FinalFlag = 1 OR t.FinalFlagMFIDLevel = 1     GROUP BY mt.MULTI_FUND_ID                    --IF OBJECT_ID('tempdb..#average_daily_temp', 'U') IS NOT NULL DROP TABLE #average_daily_temp     --SELECT DISTINCT     --oc.PM_ORD AS ORD_NUM,      --t.MULTI_FUND_ID,      --ABS(pm.FACE) AS FACE,     --t.TRD_ORIG_FACE,     --pb.ACCUMULATED_VOLUME_UNSCALED     --INTO #average_daily_temp     --FROM VISTA_REPORTING.dbo.TRADES t      --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON t.ORD_NUM = oc.TRD_ORD      --LEFT JOIN VISTA_REPORTING.dbo.REUTERS_PRICE_BENCHMARK_TABLE pb on pb.MULTI_FUND_ID=T.MULTI_FUND_ID     --LEFT JOIN (SELECT DISTINCT pm.ORD_NUM, TOUCH_COUNT, FACE FROM VISTA_REPORTING.dbo.PM_ORDERS pm     --  inner join (SELECT DISTINCT ORD_NUM, MAX(TOUCH_COUNT) AS MAX_TOUCH FROM VISTA_REPORTING.dbo.PM_ORDERS GROUP BY ORD_NUM) mt      --  on pm.ORD_NUM = mt.ORD_NUM and pm.TOUCH_COUNT = mt.MAX_TOUCH) pm ON oc.PM_ORD = pm.ORD_NUM     --WHERE FinalFlag = 1 AND oc.PM_ORD IS NOT NULL         IF OBJECT_ID('tempdb..#average_daily_temp', 'U') IS NOT NULL DROP TABLE #average_daily_temp     SELECT DISTINCT      t.ORD_NUM,       t.MULTI_FUND_ID,       ABS(tr.FACE) AS FACE,      t.TRD_ORIG_FACE,      pb.ACCUMULATED_VOLUME_UNSCALED     INTO #average_daily_temp     FROM #trades_metadata t     --LEFT JOIN #temp_oc oc ON oc.TRD_ORD = t.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.REUTERS_PRICE_BENCHMARK_TABLE pb on pb.MULTI_FUND_ID=T.MULTI_FUND_ID     LEFT JOIN (SELECT tr.ORD_NUM, TOUCH_COUNT, FACE, DEALING_DESK FROM VISTA_REPORTING.dbo.TRD_ORDERS tr       inner join (SELECT DISTINCT ORD_NUM, MAX(TOUCH_COUNT) AS MAX_TOUCH FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) mt        on tr.ORD_NUM = mt.ORD_NUM and tr.TOUCH_COUNT = mt.MAX_TOUCH) tr ON t.ORD_NUM = tr.ORD_NUM              IF OBJECT_ID('tempdb..#average_daily_remain', 'U') IS NOT NULL DROP TABLE #average_daily_remain     SELECT       ORD_NUM,       --MULTI_FUND_ID,       --SUM(ABS(TRD_ORIG_FACE)) AS [Booked Amt],      --FACE - SUM(ABS(TRD_ORIG_FACE)) AS [Remain Amt],      [ACCUMULATED_VOLUME_UNSCALED] AS [Average daily volume],      CONVERT(DECIMAL(10,2) , 100.0*(FACE - SUM(ABS(TRD_ORIG_FACE)))/NULLIF([ACCUMULATED_VOLUME_UNSCALED], 0)) AS [Remain Amt as percent of daily volume]     INTO #average_daily_remain     FROM #average_daily_temp     GROUP BY       ORD_NUM,       --MULTI_FUND_ID,       FACE,      [ACCUMULATED_VOLUME_UNSCALED]             IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     SELECT DISTINCT      mf.Broker_Quotes,      mf.DEALING_DESK,      mf.FM_Name_Comment,      mf.Fund_Investment_Number,      mf.MULTI_FUND_ID,      mf.VG_01,      mf.VG_01_3QO,      mf.VG_01_3QO_CREATETIME AS VG_01_3QO_CREATETIME,      mf.VG_01_3QR,      mf.VG_01_3QR_CREATETIME AS VG_01_3QR_CREATETIME,      mf.VG_01_CREATETIME AS VG_01_CREATETIME,      mf.VG_01_NUM_INDICATIVE_QUOTES,      mf.VG_01_QUOTES_OBTAINED,      mf.VG_01_QUOTES_REQUESTED,      mf.VG_07,      mf.VG_07_CREATETIME AS VG_07_CREATETIME,      mf.VG_10,      mf.VG_10_CREATETIME AS VG_10_CREATETIME,      mf.VG_10_NAV,      mf.VG_10_NAV_CREATETIME AS VG_10_NAV_CREATETIME,      mf.VG_25,      mf.VG_25_CREATETIME AS VG_25_CREATETIME,      CASE        WHEN NULLIF(tr.BROKER_CODE,'') IS NULL THEN 'na'       WHEN pr.DEBT_DERIV = 'DEBT' AND tr.BROKER_CODE = t.COUNTERPARTY_CODE THEN t.TRD_COUNTERPARTY       WHEN pr.DEBT_DERIV = 'DEBT' AND tr.BROKER_CODE != t.COUNTERPARTY_CODE THEN 'No'       ELSE 'na'       END AS [Axe] ,      pmc.PM_INST_concat AS Instruction,      dc1.VALUE AS [Purpose],      lst_cm.COMMENTS_VALUE as [General Comment],      t.ORD_NUM as [Order],      CASE       WHEN pr.DEALING_DESK='Fixed Income'       THEN        CASE         WHEN pr.DEBT_DERIV = 'DEBT'          THEN          CASE           WHEN lst_trd.TRD_COUPON IS NOT NULL AND i2.TICKER IS NOT NULL AND i2.MATURITY IS NOT NULL            THEN CONCAT(ISNULL(i2.TICKER,''),' ', CAST(ISNULL(lst_trd.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))           ELSE  CONCAT(ISNULL(tr.SEC_DESC1,''),' ', CAST(ISNULL(lst_trd.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))          END         ELSE pr.DESC_INSTMT        END       WHEN pr.DEALING_DESK='Equity'       THEN tr.SEC_DESC1       WHEN pr.DEALING_DESK='Leveraged Finance'       THEN pr.DESC_INSTMT      END AS [Description],        t5.FACE AS [Ord Amt],      CONVERT(DECIMAL(24,2),sum_oface.SUM_TRD_ORIG_FACE) as [Booked Amt],      pr.INST_TYPE,      CASE        WHEN pr.DEALING_DESK = 'Equity' THEN       CASE        WHEN t.TRD_EX_DESK_TYPE IN ('ALGO', 'ALGO-EU', 'ALGO-US') THEN 'ALGO'         WHEN tr.ORD_GROUP IS NOT NULL THEN 'PROGRAMME'         ELSE 'GENERAL'       END       ELSE NULL      END AS [Desk],      lst_trd.TRAN_TYPE as [Side],      lst_trd.SM_CURRENCY as [Ccy],      i2.ISIN AS [ISIN],      t.CUSIP,      case when pr.dealing_desk = 'Leveraged Finance'       then convert(varchar,convert(decimal(18,4),lst_trd.TRD_PRICE))       else convert(varchar,convert(decimal(18,2),lst_trd.TRD_PRICE)) end as [Px],      CONVERT(DECIMAL(18,2),lst_trd.TRD_PRICING_SPREAD) as [Spread],      CASE       WHEN pr.DEALING_DESK='Fixed Income'       THEN          CASE          WHEN pr.SM_SEC_GROUP = 'SWAP' AND pr.SM_SEC_TYPE IN ('SWAP','CSWAP') THEN CONVERT(DECIMAL(18,2),lst_trd.TRD_COUPON)         WHEN pr.DEBT_DERIV = 'DEBT' THEN CONVERT(DECIMAL(18,2),lst_trd.TRD_YIELD)        END       WHEN pr.DEALING_DESK='Equity'       THEN CONVERT(DECIMAL(18,2),lst_trd.TRD_YIELD)       WHEN pr.DEALING_DESK='Leveraged Finance'       THEN CONVERT(DECIMAL(18,2),lst_trd.TRD_YIELD)      END AS [Rate],       lst_trd.TRD_COUNTERPARTY,      t.COUNTERPARTY_CODE,      ISNULL(pl.VENUE,'Manual') as [Platform],      CASE       WHEN pr.DEALING_DESK = 'Fixed Income'       THEN        CASE         WHEN pr.TWEB_CLOSE_DEALING = 1 THEN 'TWEB Close'         WHEN pr.[1615_DEALING] = 1 THEN '1615 Dealing'         WHEN lst_trd.ACTIVITY_TYPE = 'MG.FI 1. Proces' THEN 'VPT'        END       WHEN pr.DEALING_DESK='Equity'       THEN NULL       WHEN pr.DEALING_DESK='Leveraged Finance'       THEN NULL      END AS [Method],      --CASE      -- WHEN pr.PRIMARY_MARKET = 1 THEN 'Y'      -- WHEN pr.PRIMARY_MARKET = 0 THEN 'N'      --END AS [Primary_Market],      pr.PRIMARY_MARKET,      pr.[Parent_trade_ID],      lst_trd.TRD_TRADE_DATE AS [Trade Date],       lst_trd.EXECUTION_TIME as [Exec Date],      lst_trd.TRD_AUTH_TIME as [Entry Date],      null as [Package Strategy],      CASE        WHEN t.TRDCOMM_COMMENTS LIKE '%<SDI>%' THEN        REPLACE(RIGHT(lst_trd.TRDCOMM_COMMENTS,LEN(lst_trd.TRDCOMM_COMMENTS) -CHARINDEX('<SDI>',lst_trd.TRDCOMM_COMMENTS,1)+1),'<SDI>','')        ELSE t.TRDCOMM_COMMENTS      END AS [Dealer Comment],      t.TRDCOMM_COMMENTS AS [Internal Comment],      lst_trd.ACTIVITY_TYPE_DECODE AS [Activity],      mf.Funds AS [Fund],      inv_desk.Inv_Desk_Concat AS [Inv Desk],       mf.VG_10_TRADE_TYPE AS TR_TYPE,      mf.VG_10_Timespan AS Timespan,      pct_nav.CL_EX_concat AS CLIENT_EXECUTION_NUM,      t.INDICATIVE_COMMENTS,      t.PLACEMENT_NUM,      t.B3Q_RATIONALE,      t.NWQ_RATIONALE,      lst_trd.TRD_ENTRY_TIME AS TRD_ENTRY_TIME,      t.TRD_YIELD,      sum_oface.SUM_NET_CONSIDERATION_GBP AS NET_CONSIDERATION_GBP,      t.FinalFlag,      t.FinalFlagMFIDLevel,      tr.ACTIVE_TIME AS ACTIVE_TIME,      tr.AUTH_TIME AS AUTH_TIME,      t3.TRADER as [Dealer],      t3.TRADER_FULL_NAME,      tr.PM_FULL_NAME,      tr.BROKER_CODE,      tr.SEC_DESC1,      tr.ORDER_REASON,      i2.SM_SEC_GROUP,      i2.SM_SEC_TYPE,      pl.ROUTE_DATETIME AS RELEASE_DATETIME,      dd.ALADDIN_USER_ID,      oc.PM_ORD,      t.EXECUTION_TYPE_DECODE,      CONCAT(YEAR(tr.AUTH_TIME),'-',left(datename(m,tr.AUTH_TIME),3)) AS MONTH_YEAR,      concat(i2.SM_SEC_GROUP,'/',i2.SM_SEC_TYPE) as [Asset_Type/Subtype],      --po.COMMENTS_VALUE AS [Instruction],       NULL AS [Type], -- Dummy column added to help front end development. Column to be filled when requirements are confirmed.      pm.PMs_concat AS [PM],       lst_trd.TRD_CURRENCY as [Sett Ccy],      i2.SEDOL as [SEDOL],      tr.LIMIT_TYPE as [Limit Type],      tr.LIMIT_VALUE as [Limit Value],      null as [List ID],      null as [List Name],      null as [Linked Trade],      CASE       WHEN pr.DEALING_DESK = 'Equity' THEN        CASE         WHEN CAST(lst_trd.EXECUTION_TIME AS time) > CAST('16:30:00' AS time) --if EXECUTION_TIME is later than 16:30 then rebase the cut off datetime to 08:00 the next working day         AND lst_trd.TRD_AUTH_TIME < '2018-08-17 00:00:00.000'-- anything traded before 17 August 2018 has an 8:00AM cutoff         THEN CONVERT(VARCHAR(5),           DATEDIFF(minute,lst_trd.TRD_AUTH_TIME,              DATEADD(day, 1, DATEADD(day, DATEDIFF(day, 0, lst_trd.EXECUTION_TIME), '08:00:00'))            )           ) + ' mins'         WHEN CAST(lst_trd.EXECUTION_TIME AS time) < CAST('07:00:00' AS time) --if EXECUTION_TIME is later than 16:30 then rebase the cut off datetime to 08:00 the next working day         AND lst_trd.TRD_AUTH_TIME < '2018-08-17 00:00:00.000' -- anything traded before 17 August 2018 has an 8:00AM cutoff         THEN CONVERT(VARCHAR(5),             DATEDIFF(minute,lst_trd.TRD_AUTH_TIME,             DATEADD(day, DATEDIFF(day, 0, lst_trd.EXECUTION_TIME), '08:00:00')            )           ) + 'mins'         WHEN CAST(lst_trd.EXECUTION_TIME AS time) > CAST('16:30:00' AS time) --if EXECUTION_TIME is later than 16:30 then rebase the cut off datetime to 08:00 the next working day         AND lst_trd.TRD_AUTH_TIME >= '2018-08-17 00:00:00.000'-- anything traded on or after 17 August 2018 has an 09:00AM cutoff         THEN CONVERT(VARCHAR(5),           DATEDIFF(minute,lst_trd.TRD_AUTH_TIME,              DATEADD(day, 1, DATEADD(day, DATEDIFF(day, 0, lst_trd.EXECUTION_TIME), '09:00:00'))            )           ) + ' mins'         WHEN CAST(lst_trd.EXECUTION_TIME AS time) < CAST('07:00:00' AS time) --if EXECUTION_TIME is later than 16:30 then rebase the cut off datetime to 08:00 the next working day         AND lst_trd.TRD_AUTH_TIME >= '2018-08-17 00:00:00.000' -- anything traded on or after 17 August 2018 has an 09:00AM cutoff         THEN CONVERT(VARCHAR(5),             DATEDIFF(minute,lst_trd.TRD_AUTH_TIME,             DATEADD(day, DATEDIFF(day, 0, lst_trd.EXECUTION_TIME), '09:00:00')            )           ) + 'mins'         WHEN CAST(lst_trd.EXECUTION_TIME AS time) BETWEEN  CAST('07:00:00' AS time) AND CAST('16:30:00' AS time) --if EXECUTION_TIMEis earlier than 16:30 then check differenece between EXECUTION_TIME AND TRD_AUTH_TIME is less than 60 if not raise exception         THEN CONVERT(VARCHAR(5),DATEDIFF(minute, lst_trd.EXECUTION_TIME, lst_trd.TRD_AUTH_TIME) - 60 ) + ' mins'        END       WHEN pr.DEALING_DESK = 'Fixed Income' THEN        CASE          WHEN  lst_trd.TRD_TRADE_DATE <> CONVERT(DATE, lst_trd.TRD_AUTH_TIME) THEN 'Across days'         WHEN DATEDIFF(minute, lst_trd.EXECUTION_TIME, lst_trd.TRD_AUTH_TIME) < 60 THEN ''         ELSE CONVERT(VARCHAR(5),DATEDIFF(minute, lst_trd.EXECUTION_TIME, lst_trd.TRD_AUTH_TIME) - 60) + ' mins'        END       WHEN pr.DEALING_DESK = 'Leveraged Finance' THEN        case         when NOT (ISNULL(pr.PRIMARY_MARKET,0) = 1 and pr.TRD_CURRENCY = 'USD') -- DO not flag for USD based primary market debt, we do this in the step below.           THEN CONVERT(VARCHAR(5),             DATEDIFF(day,              lst_trd.TRD_TRADE_DATE,               CONVERT(DATE,lst_trd.TRD_AUTH_TIME)             )             ) + ' days' -- Whenever the trade date is before the auth date         when pr.TRD_CURRENCY = 'USD' and pr.PRIMARY_MARKET = 1          THEN CONVERT(VARCHAR(5),                DATEDIFF(MINUTE,                lst_trd.TRD_AUTH_TIME,                  DATEADD(day,1, DATEADD(day, DATEDIFF(day, 0, lst_trd.TRD_TRADE_DATE), '10:00:00'))               )             ) + ' mins'        end      END as [Time Late By],        CASE       WHEN pr.DEALING_DESK = 'Equity' THEN        CASE         WHEN CAST(lst_trd.EXECUTION_TIME AS time) > CAST('16:30:00' AS time) --if EXECUTION_TIME is later than 16:30 then rebase the cut off datetime to 08:00 the next working day         AND lst_trd.TRD_AUTH_TIME < '2018-08-17 00:00:00.000'-- anything traded before 17 August 2018 has an 8:00AM cutoff         THEN 'T + 1 08:00AM'         WHEN CAST(lst_trd.EXECUTION_TIME AS time) < CAST('07:00:00' AS time) --if EXECUTION_TIME is later than 16:30 then rebase the cut off datetime to 08:00 the next working day         AND lst_trd.TRD_AUTH_TIME < '2018-08-17 00:00:00.000' -- anything traded before 17 August 2018 has an 8:00AM cutoff         THEN 'T + 1 08:00AM'         WHEN CAST(lst_trd.EXECUTION_TIME AS time) > CAST('16:30:00' AS time) --if EXECUTION_TIME is later than 16:30 then rebase the cut off datetime to 08:00 the next working day         AND lst_trd.TRD_AUTH_TIME >= '2018-08-17 00:00:00.000'-- anything traded on or after 17 August 2018 has an 09:00AM cutoff         THEN 'T + 1 09:00AM'         WHEN CAST(lst_trd.EXECUTION_TIME AS time) < CAST('07:00:00' AS time) --if EXECUTION_TIME is later than 16:30 then rebase the cut off datetime to 08:00 the next working day         AND lst_trd.TRD_AUTH_TIME >= '2018-08-17 00:00:00.000' -- anything traded on or after 17 August 2018 has an 09:00AM cutoff         THEN 'T + 1 09:00AM'         WHEN CAST(lst_trd.EXECUTION_TIME AS time) BETWEEN  CAST('07:00:00' AS time) AND CAST('16:30:00' AS time) --if EXECUTION_TIMEis earlier than 16:30 then check differenece between EXECUTION_TIME AND TRD_AUTH_TIME is less than 60 if not raise exception         THEN '60 mins'        END       WHEN pr.DEALING_DESK = 'Fixed Income' THEN        CASE          WHEN  lst_trd.TRD_TRADE_DATE <> CONVERT(DATE, lst_trd.TRD_AUTH_TIME) THEN 'Across days'         ELSE '60 mins'        END       WHEN pr.DEALING_DESK = 'Leveraged Finance' THEN        case         when NOT (ISNULL(pr.PRIMARY_MARKET,0) = 1 and pr.TRD_CURRENCY = 'USD') -- DO not flag for USD based primary market debt, we do this in the step below.           THEN 'across days' -- Whenever the trade date is before the auth date         when pr.TRD_CURRENCY = 'USD' and pr.PRIMARY_MARKET = 1          THEN 'T + 1 10:00AM'        end      END  as [Threshold],      NULL AS [Outstanding Quantity], -- Dummy column added to help front end development. Column to be filled when requirements are confirmed.      t.TRD_PRICING_SPREAD AS [Bps],      pr.LINKED_MULTI_FUND as LINKED_TRADE,      NULL AS [NUM_Parent_Trades],      case       when ISNULL(pl.VENUE,'') NOT IN ('FIXLQNTEQ', 'FIXLQNTFI') and pr.INTERFUND_TRANSFER=0 and pr.TWEB_CLOSE_DEALING=0 and pr.PRIMARY_MARKET=0 AND CONVERT(DATE, tr2.PULL_DATE) < '2019-04-26'        then        case         when (not (ISNULL(pr.INST_TYPE, '') in ('RMBS', 'CMBS', 'ABS', 'CDO','MBS','ARM','CMO') and pr.TRAN_TYPE = 'BUY')            and not (ISNULL(pr.INST_TYPE, '') in ('OIS', 'IRS', 'BASIS', 'ZCS', 'ASWP', 'IFS', 'CASWP', 'CCS','SWAP'))           and not (ISNULL(pr.INST_TYPE, '') in ('HY CORP', 'IG CORP','NR CORP') and pr.TRD_CURRENCY = 'USD')           and not (ISNULL(pr.INST_TYPE, '') in ('HY CORP','NR CORP') and pr.TRD_CURRENCY in ('GBP', 'EUR')))           and not (ISNULL(pr.INST_TYPE, '') IN ('IRFUT','BNDFUT','OPTFUT','ETD')) -- No   quote exceptions for ETDs (IRFUT, BNDFUT, OPTFUT)           then '3 firm quotes'         when pr.INST_TYPE in ('OIS', 'IRS', 'BASIS', 'ZCS', 'ASWP', 'IFS', 'CASWP', 'CCS','SWAP')           then '2 firm quotes'         when (ISNULL(pr.INST_TYPE, '') in ('HY CORP', 'IG CORP','NR CORP') and pr.TRD_CURRENCY = 'USD')           then '3 firm quotes or indicative quotes'         when (ISNULL(pr.INST_TYPE, '') in ('HY CORP','NR CORP') and pr.TRD_CURRENCY in ('GBP', 'EUR'))           then '2 firm quotes and 1 indicative quote'         else 'NA'        end       WHEN ISNULL(pl.VENUE,'') NOT IN ('FIXLQNTEQ', 'FIXLQNTFI') and pr.INTERFUND_TRANSFER=0 and pr.TWEB_CLOSE_DEALING=0 and pr.PRIMARY_MARKET=0 AND CONVERT(DATE, tr2.PULL_DATE) >= '2019-04-26'        then        case         when (not (ISNULL(pr.INST_TYPE, '') in ('RMBS', 'CMBS', 'ABS', 'CDO','MBS','ARM','CMO') and pr.TRAN_TYPE = 'BUY')            and not (ISNULL(pr.INST_TYPE, '') in ('HY CORP', 'IG CORP','NR CORP') and pr.TRD_CURRENCY = 'USD')           and not (ISNULL(pr.INST_TYPE, '') in ('HY CORP','NR CORP') and pr.TRD_CURRENCY in ('GBP', 'EUR')))           and not (ISNULL(pr.INST_TYPE, '') IN ('IRFUT','BNDFUT','OPTFUT','ETD')) -- No   quote exceptions for ETDs (IRFUT, BNDFUT, OPTFUT)           then '3 firm quotes'         when (ISNULL(pr.INST_TYPE, '') in ('HY CORP', 'IG CORP','NR CORP') and pr.TRD_CURRENCY = 'USD')           then '3 firm quotes or indicative quotes'         when (ISNULL(pr.INST_TYPE, '') in ('HY CORP','NR CORP') and pr.TRD_CURRENCY in ('GBP', 'EUR'))           then '2 firm quotes and 1 indicative quote'         else 'NA'        end       else 'NA'       end as [Baseline_PDP],              case                   when pr.INST_TYPE = 'GOVBIL'                          and pr.PRIMARY_MARKET = 1                          then 'Government bills - Primary'                  when pr.INST_TYPE in ('GOV', 'IGOV', 'SSA', 'GOVBIL')                          and pr.PRIMARY_MARKET = 1                          then 'Government & SSA bonds - Primary'                  when pr.INST_TYPE in ('IG CORP', 'HY CORP', 'NR CORP', 'COV', 'CORP')                          and pr.PRIMARY_MARKET = 1                          then 'Corporates & Covered - Primary'                  when pr.INST_TYPE in ('EM GOV', 'EM GOVBIL', 'EM CORP')                          and pr.PRIMARY_MARKET = 1                          then 'EM - Primary'                  when pr.INST_TYPE in ('RMBS', 'CMBS', 'CDO', 'ABS', 'MBS', ' ARM')                          and pr.PRIMARY_MARKET = 1                          then 'Securitised - Primary'                  when pr.INST_TYPE = 'GOVBIL'                          then 'Government bills - Secondary'                  when pr.INST_TYPE in ('GOV', 'IGOV',  'GOVBIL')                          then 'Government bonds - Secondary'         when pr.INST_TYPE in ('EM GOV', 'EM GOVBIL', 'EM CORP')                          then 'EM - Secondary'                  when pr.INST_TYPE in ('RMBS', 'CMBS', 'CDO', 'ABS', 'MBS', ' ARM')                          then 'Securitised - Secondary'                  when pr.INST_TYPE = 'SSA'                          then 'SSA bonds - Secondary'                  when pr.INST_TYPE ='HY Corp'                           AND pr.TRD_CURRENCY IN ('EUR','GBP')                           then 'European HY Corporates - Secondary'                  when (pr.INST_TYPE ='HY Corp'                           AND t.TRD_CURRENCY NOT IN ('EUR','GBP','USD'))                             or (pr.INST_TYPE in ('IG CORP', 'NR CORP') AND t.TRD_CURRENCY IN ('EUR','GBP'))                             or (pr.ORDER_INST_TYPE = 'CORP' and t.TRD_CURRENCY != 'USD')                           then 'European IG Corporates & Other - Secondary'         when (pr.INST_TYPE in ('HY CORP', 'IG CORP', 'NR CORP','CORP') OR pr.ORDER_INST_TYPE = 'CORP') and t.TRD_CURRENCY = 'USD'                                           then 'USD Corporates - Secondary'                  when pr.INST_TYPE in ('COV')                                            then 'Covered Bonds - Secondary'                      when pr.INST_TYPE = 'PFD'                                           then 'Pref. Shares - Secondary'                  when pr.INST_TYPE = 'SCDS'                                           and pr.TRD_CURRENCY = 'EUR'                                           then 'SCDS EUR'                  when pr.INST_TYPE = 'SCDS'                                           and pr.TRD_CURRENCY = 'USD'                                           then 'SCDS USD'                  when pr.INST_TYPE = 'ICDS'                                           and pr.ICDS_DETAIL = 'ITRAXX EUROPE MAIN'                                           then 'iTraxx Europe'                  when pr.INST_TYPE = 'ICDS'                                           and pr.ICDS_DETAIL = 'ITRAXX EUROPE CROSSOVER'                                           then 'iTraxx Crossover'                  when pr.INST_TYPE = 'ICDS'                                           and pr.ICDS_DETAIL = 'CDX NA IG'                                           then 'CDX NA IG'                  when pr.INST_TYPE = 'ICDS'                                           and pr.ICDS_DETAIL = 'CDX NA HY'                                           then 'CDX NA HY'                  when pr.INST_TYPE in ('ICDS', 'SCDS')                                           then 'CDS Other'                  when pr.INST_TYPE in ('IRFUT')                                           and ISNULL(pr.TRD_PURPOSE,'') <> 'MG004'                                           then 'Interest Rate Futures'                  when pr.INST_TYPE in ('BNDFUT')                                           and ISNULL(pr.TRD_PURPOSE,'') <> 'MG004'                                           then 'Bond Futures'                  when pr.INST_TYPE in ('OPTFUT')                                           and ISNULL(pr.TRD_PURPOSE,'') <> 'MG004'                                           then 'Option Futures'                  when pr.INST_TYPE in ('ETD')                                           and ISNULL(pr.TRD_PURPOSE,'') <> 'MG004'                                           then 'ETD Not Rollover'                  when pr.INST_TYPE in ('IRFUT','BNDFUT','OPTFUT','ETD')                                           and pr.TRD_PURPOSE = 'MG004'                                           then 'ETD Rollover'                  when pr.INST_TYPE in ('IRS','BASIS','ZCS','SWAP')                                           then 'IRS'                  when pr.INST_TYPE = 'IFS'                                           then 'IFS'         when pr.INST_TYPE = 'OIS'                                           then 'OIS'                  when pr.INST_TYPE = 'ASWP'                                           then 'ASWP'                  when pr.INST_TYPE in ('CCS','CASWP')                                           then 'Cross Currency'                  end AS [DMC Asset Type],      CONVERT(DECIMAL(18,2),sum_oface.SUM_TRD_PRINCIPAL_GBP) AS Nominal,      --Convert(varchar(10),nv.CUTOFF) as NAV_CUT_OFF,      case        when        cast(tr2.EXECUTION_TIME as time) < convert(time,CUTOFF) then        case when cast(tr2.TRD_AUTH_TIME as time) > convert(time,CUTOFF) then 'Y'          else 'N' end       else 'N'       end as NAV_IMPACT_ELIGIBLE,      pct_nav.NAV_PCT_concat AS PCT_OF_NAV,      pct_nav.NAV_CUT_concat AS NAV_CUT_OFF,      --case       --when nav1.nav_value_gbp != 0 then      --100.0*(NET_CONSIDERATION_GBP/nav1.nav_value_gbp) else null end as PCT_OF_NAV,      i2.MARKET,      TR2.SETTLE_DATE,      pr.INTERFUND_TRANSFER,      avg_d.[Average daily volume],      avg_d.[Remain Amt as percent of daily volume]     INTO #temp_final_master_table     FROM VISTA_REPORTING.dbo.MULTI_FUND_EXCEPTION_TABLE mf     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID,TRD_PRICING_SPREAD,EXECUTION_TIME,CLIENT_EXECUTION_NUM,INDICATIVE_COMMENTS,PLACEMENT_NUM,B3Q_RATIONALE,NWQ_RATIONALE,TRD_YIELD,FinalFlag,FinalFlagMFIDLevel     ,COUNTERPARTY_CODE,CUSIP,TRD_COUNTERPARTY,TRDCOMM_COMMENTS,NET_CONSIDERATION_GBP,EXECUTION_TYPE_DECODE,PORTFOLIOS_PORTFOLIO_NAME,ORD_NUM,TRD_AUTH_TIME, TRD_CURRENCY, TRD_EX_DESK_TYPE      FROM #trades_metadata) as t ON t.MULTI_FUND_ID=mf.MULTI_FUND_ID     LEFT JOIN #trd_orders_metadata tr ON tr.ORD_NUM=t.ORD_NUM AND mf.DEALING_DESK = tr.DEALING_DESK      OUTER APPLY (SELECT TOP 1 i.* FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=coalesce(t.CUSIP, tr.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(t.EXECUTION_TIME, tr.AUTH_TIME)))         ORDER BY i.DATE DESC) as i2     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID,SUM_TRD_ORIG_FACE,SUM_TRD_PRINCIPAL_GBP,SUM_NET_CONSIDERATION_GBP FROM #temp_t) sum_oface ON sum_oface.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN (SELECT DISTINCT VENUE, ROUTE_DATETIME, PLACEMENT_NUM FROM VISTA_REPORTING.dbo.PLACEMENTS) pl ON pl.PLACEMENT_NUM=t.PLACEMENT_NUM     LEFT JOIN (SELECT DISTINCT INITIALS,ALADDIN_USER_ID FROM VISTA_REPORTING.dbo.DEALER_AND_DESK) dd ON dd.INITIALS=tr.TRADER     LEFT JOIN (SELECT PM_ORD, TRD_ORD FROM #temp_oc) oc ON oc.TRD_ORD=tr.ORD_NUM     LEFT JOIN (SELECT ORD_NUM FROM #pm_orders_metadata) as po ON oc.PM_ORD = po.ORD_NUM     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID,INST_TYPE,TRD_CURRENCY,DEALING_DESK,PRIMARY_MARKET,[Parent_trade_ID], ORDER_INST_TYPE, ICDS_DETAIL, TRD_PURPOSE,     TWEB_CLOSE_DEALING,INTERFUND_TRANSFER,LINKED_MULTI_FUND,[1615_DEALING],DEBT_DERIV,SM_SEC_GROUP,DESC_INSTMT,SM_SEC_TYPE,TRAN_TYPE     FROM #prim_metadata) pr on pr.MULTI_FUND_ID=t.MULTI_FUND_ID AND pr.DEALING_DESK = mf.DEALING_DESK     LEFT JOIN (SELECT MULTI_FUND_ID,TRADER_FULL_NAME,TRADER FROM #min_touch) as t3 on t3.MULTI_FUND_ID = mf.MULTI_FUND_ID     LEFT JOIN (SELECT DISTINCT ORD_NUM,FACE FROM #max_touch) as t5 on t5.ORD_NUM = t.ORD_NUM     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID,PMs_concat FROM #PMs_concat) pm ON t.MULTI_FUND_ID = pm.MULTI_FUND_ID     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID,TRD_COUPON,TRAN_TYPE,SM_CURRENCY,TRD_PRICE,TRD_PRICING_SPREAD,TRD_YIELD,TRD_COUNTERPARTY,     ACTIVITY_TYPE,TRD_TRADE_DATE,TRD_AUTH_TIME,EXECUTION_TIME,TRD_PURPOSE,TRDCOMM_COMMENTS,ACTIVITY_TYPE_DECODE,TRD_ENTRY_TIME,TRD_CURRENCY     FROM #Latest_TRD_TRADE_DATE) lst_trd ON t.MULTI_FUND_ID = lst_trd.MULTI_FUND_ID     LEFT JOIN (SELECT DISTINCT Inv_Desk_Concat,MULTI_FUND_ID FROM #Inv_desk_concat) inv_desk ON t.MULTI_FUND_ID = inv_desk.MULTI_FUND_ID     LEFT JOIN (SELECT DISTINCT TAG_NAME,VALUE,CODE FROM VISTA_REPORTING.dbo.DECODES) dc1 ON dc1.TAG_NAME = 'TrdPurpose' AND dc1.CODE=lst_trd.TRD_PURPOSE     LEFT JOIN (SELECT DISTINCT COMMENTS_VALUE,ORD_NUM FROM #Latest_Comment) lst_cm ON t.ORD_NUM = lst_cm.ORD_NUM     LEFT JOIN (SELECT PM_INST_concat,MULTI_FUND_ID FROM #PM_INST_concat) pmc ON pmc.MULTI_FUND_ID = mf.MULTI_FUND_ID     LEFT JOIN (SELECT DISTINCT client_fund,CUTOFF FROM  VISTA_STAGING.dbo.NAV_CUT_OFFS) nv on nv.client_fund = t.PORTFOLIOS_PORTFOLIO_NAME     LEFT JOIN (SELECT ORD_NUM, [Average daily volume], [Remain Amt as percent of daily volume] FROM #average_daily_remain) avg_d on oc.PM_ORD = avg_d.ORD_NUM     LEFT JOIN #pct_nav_concat pct_nav ON pct_nav.MULTI_FUND_ID = mf.MULTI_FUND_ID     LEFT JOIN   (       SELECT DISTINCT         tr.ORD_NUM        ,tr.MULTI_FUND_ID        ,tr.TRD_CURRENCY        ,tr.EXECUTION_TIME        ,tr.TRD_AUTH_TIME        ,tr.TRD_TRADE_DATE        ,T2.SETTLE_DATE        ,tr.PULL_DATE       FROM VISTA_REPORTING.dbo.TRADES as tr       INNER JOIN (         SELECT MULTI_FUND_ID, MAX(TOUCH_COUNT) AS MAX_TOUCH ,max(TRD_SETTLE_DATE) AS SETTLE_DATE         FROM VISTA_REPORTING.dbo.TRADES         GROUP BY MULTI_FUND_ID       ) as t2 on (tr.MULTI_FUND_ID=t2.MULTI_FUND_ID) and (tr.TOUCH_COUNT=t2.MAX_TOUCH)      ) as tr2 ON tr2.MULTI_FUND_ID = mf.MULTI_FUND_ID     --OUTER APPLY (SELECT TOP 1 nav.* from VISTA_REPORTING.dbo.NAV      --   WHERE nav.PORTFOLIO_NAME = t.PORTFOLIOS_PORTFOLIO_NAME AND nav.NAV_PORT_DATE <= CONVERT(DATE, t.TRD_AUTH_TIME)      --   ORDER BY nav.NAV_PORT_DATE DESC) nav1     --OUTER APPLY (SELECT TOP 1 e.* FROM VISTA_REPORTING.dbo.FX_RATES e      --    WHERE e.CURRENCY = t.TRD_CURRENCY and CONVERT(date, e.MARKDATE) <= CONVERT(date, t.EXECUTION_TIME)     --    ORDER BY e.MARKDATE DESC) e          --left join VISTA_REPORTING.dbo.NAV nav on nav.PORTFOLIO_NAME = t.PORTFOLIOS_PORTFOLIO_NAME     --WHERE t.PORTFOLIOS_PORTFOLIO_NAME in ('DRC_VANG', 'DRC_EPIS', 'DRC_ECIF', 'DRC_AOFB', 'DRC_TRCI', 'DRC_ELF')     WHERE EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = mf.MULTI_FUND_ID)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE', 'U') IS NOT NULL     DELETE FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE     WHERE MULTI_FUND_ID IN (SELECT DISTINCT MULTI_FUND_ID FROM #distinct_ids)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE     SELECT *     FROM #temp_final_master_table         ELSE         SELECT *     INTO VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE     FROM #temp_final_master_table             IF OBJECT_ID('tempdb..#trades_metadata', 'U') IS NOT NULL DROP TABLE #trades_metadata     IF OBJECT_ID('tempdb..#trd_orders_metadata', 'U') IS NOT NULL DROP TABLE #trd_orders_metadata     IF OBJECT_ID('tempdb..#pm_orders_metadata', 'U') IS NOT NULL DROP TABLE #pm_orders_metadata     IF OBJECT_ID('tempdb..#prim_metadata', 'U') IS NOT NULL DROP TABLE #prim_metadata     IF OBJECT_ID('tempdb..#PM_comments', 'U') IS NOT NULL DROP TABLE #PM_comments     IF OBJECT_ID('tempdb..#PM_INST_concat', 'U') IS NOT NULL DROP TABLE #PM_INST_concat     IF OBJECT_ID('tempdb..#PM', 'U') IS NOT NULL DROP TABLE #PM     IF OBJECT_ID('tempdb..#PMs_concat', 'U') IS NOT NULL DROP TABLE #PMs_concat     IF OBJECT_ID('tempdb..#Latest_TRD_TRADE_DATE', 'U') IS NOT NULL DROP TABLE #Latest_TRD_TRADE_DATE     IF OBJECT_ID('tempdb..#MFID_inv_Desk', 'U') IS NOT NULL DROP TABLE #MFID_inv_Desk     IF OBJECT_ID('tempdb..#Inv_desk_concat', 'U') IS NOT NULL DROP TABLE #Inv_desk_concat     IF OBJECT_ID('tempdb..#Latest_Comment', 'U') IS NOT NULL DROP TABLE #Latest_Comment     IF OBJECT_ID('tempdb..#min_touch', 'U') IS NOT NULL DROP TABLE #min_touch     IF OBJECT_ID('tempdb..#max_touch', 'U') IS NOT NULL DROP TABLE #max_touch     --IF OBJECT_ID('tempdb..#todays_pmorders', 'U') IS NOT NULL DROP TABLE #todays_pmorders     --IF OBJECT_ID('tempdb..#todays_trorders', 'U') IS NOT NULL DROP TABLE #todays_trorders     --IF OBJECT_ID('tempdb..#todays_trades', 'U') IS NOT NULL DROP TABLE #todays_trades     IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids                           IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_idx1')           DROP INDEX mmf_idx1      ON VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE         CREATE NONCLUSTERED INDEX mmf_idx1     ON VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE      ([MULTI_FUND_ID], [Order], CUSIP,  Parent_trade_ID, [List ID], VG_01_3QO_CREATETIME, VG_07_CREATETIME, VG_10_CREATETIME, VG_10_NAV_CREATETIME, VG_25_CREATETIME)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_idx2')           DROP INDEX mmf_idx2      ON VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE          CREATE NONCLUSTERED INDEX mmf_idx2     ON VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE      (Dealing_Desk)              IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_idx3')           DROP INDEX mmf_idx3      ON VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE          CREATE NONCLUSTERED INDEX mmf_idx3     ON VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE      ([Exec Date])             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_3qo_idx4')           DROP INDEX mmf_3qo_idx4      ON VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE          CREATE NONCLUSTERED INDEX mmf_3qo_idx4     ON VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE      (VG_01_3QO_CREATETIME)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_3qr_idx5')           DROP INDEX mmf_3qr_idx5     ON VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE          CREATE NONCLUSTERED INDEX mmf_3qr_idx5     ON VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE      (VG_01_3QR_CREATETIME)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg1_idx6')           DROP INDEX mmf_vg1_idx6      ON VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE          CREATE NONCLUSTERED INDEX mmf_vg1_idx6     ON VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE      (VG_01_CREATETIME)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg7_idx7')           DROP INDEX mmf_vg7_idx7      ON VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE          CREATE NONCLUSTERED INDEX mmf_vg7_idx7     ON VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE      (VG_07_CREATETIME)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg10_idx8')           DROP INDEX mmf_vg10_idx8      ON VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE          CREATE NONCLUSTERED INDEX mmf_vg10_idx8     ON VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE      (VG_10_CREATETIME)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg10_nav_idx9')           DROP INDEX mmf_vg10_nav_idx9      ON VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE          CREATE NONCLUSTERED INDEX mmf_vg10_nav_idx9     ON VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE      (VG_10_NAV_CREATETIME)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg25_nav_idx10')           DROP INDEX mmf_vg25_nav_idx10      ON VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE          CREATE NONCLUSTERED INDEX mmf_vg25_nav_idx10     ON VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE      (VG_25_CREATETIME)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_idx11')           DROP INDEX mmf_idx11      ON VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE          CREATE NONCLUSTERED INDEX mmf_idx11     ON VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE      ([Trade Date])              IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(     'MASTER_MULTI_FUND_ID_TABLE', --TABLE_NAME     @START_TIME, --START_TIME     GETDATE(), --END_TIME     DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS     CAST(GETDATE() as date)) --COMPLETION_DATE             END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_ORDER_PRIORITY_TABLE  CreateDate: 2025-06-26 17:59:13.647  ModifyDate: 2025-06-26 17:59:13.647  --- DEFINITION START ---      CREATE PROCEDURE [dbo].[MASTER_ORDER_PRIORITY_TABLE]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,         -- VERSION HISTORY    -- 2018-06-03 WH: Created procedure - Appropriated from the MASTER_TRD_ORDER_TABLE stored procedure        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;             DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()             IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids     SELECT DISTINCT       ol.ORD_NUM as TRD_ORD,      oc.PM_ORD AS ORD_NUM,      t.MULTI_FUND_ID     INTO #distinct_ids     FROM Vista_Reporting.dbo.TRD_ORDER_LEVEL_EXCEPTION_TABLE ol     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = ol.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM = oc.TRD_ORD               IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_ORDER_PRIORITY_TABLE', 'U') IS NOT NULL     DELETE FROM #distinct_ids where NOT EXISTS (SELECT DISTINCT od.TRD_ORD                  FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                  WHERE od.TRD_ORD = #distinct_ids.TRD_ORD)             --1. Get a concatenated list of investment desks for each trader order     IF OBJECT_ID('tempdb..#Ord_inv_Desk', 'U') IS NOT NULL DROP TABLE #Ord_inv_Desk     SELECT DISTINCT       od.ORD_NUM,       p.ancestor      INTO #Ord_inv_Desk     FROM VISTA_STAGING.dbo.ORDERS_DETAIL od -- This will give us the details for PM Orders and TRD Orders     LEFT JOIN VISTA_STAGING.dbo.PORTFOLIO_GROUP_CLOSURE_TABLE p     ON od.PORTFOLIO_NAME = p.descendant     WHERE p.ancestor IN ('MG_ATCRED','MG_RET_FI','MG_INSTI','MG_INTER','MG_RESTCT','MG_IN_CAP','MG_LEVFIN','MG_MIB','MG_REDEBT') -- This is the list of investment desks provided in the business requirements documents        AND EXISTS (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = od.ORD_NUM)             IF OBJECT_ID('tempdb..#Inv_desk_concat', 'U') IS NOT NULL DROP TABLE #Inv_desk_concat     SELECT       ORD_NUM,             STUFF((                  SELECT DISTINCT ', ' + ANCESTOR                  FROM #Ord_inv_Desk b                  WHERE (b.ORD_NUM = Results.ORD_NUM)                  FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')             ,1,2,'') AS Inv_Desk_Concat      INTO #Inv_desk_concat     FROM #Ord_inv_Desk Results     GROUP BY ORD_NUM                --2. Get a concatenated list of PMs on the trader order      IF OBJECT_ID('tempdb..#PM', 'U') IS NOT NULL DROP TABLE #PM     SELECT DISTINCT       oc.TRD_ORD AS ORD_NUM,       LTRIM(RTRIM(pm.PM)) AS PM,       AUTH_TIME     INTO #PM     FROM VISTA_REPORTING.dbo.PM_ORDERS pm     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc     ON pm.ORD_NUM = oc.PM_ORD     WHERE pm.PM <> 'MERGED' -- MERGED is not a PM so we don't need to include        AND pm.PM IS NOT NULL        AND EXISTS (SELECT DISTINCT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = pm.ORD_NUM)             IF OBJECT_ID('tempdb..#PM_concat', 'U') IS NOT NULL DROP TABLE #PM_concat     SELECT       a.ORD_NUM,             STUFF((                  SELECT DISTINCT ', ' + PM                  FROM #pm Results                  WHERE a.ORD_NUM = Results.ORD_NUM                  FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')             ,1,2,'') AS PM_concat      INTO #PM_concat     FROM #pm a     WHERE NULLIF(ORD_NUM,0) IS NOT NULL     GROUP BY a.ORD_NUM             --3. Get a list of the latest version of the trader order details     IF OBJECT_ID('tempdb..#trade_order_details', 'U') IS NOT NULL DROP TABLE #trade_order_details     SELECT DISTINCT      ord1.ORD_NUM      ,ord1.AUTH_TIME      ,ord1.ACTIVE_TIME      ,ord1.COMMENTS_VALUE      ,ord1.LIMIT_TYPE      ,ord1.LIMIT_VALUE      ,COALESCE(ORDER_REASON_DECODE,ORDER_REASON) AS ORDER_REASON_DECODE      ,SEC_DESC1      ,dc1.VALUE as [Instruction]     INTO #trade_order_details     FROM VISTA_REPORTING.dbo.TRD_ORDERS ord1     INNER JOIN ( SELECT  ORD_NUM          ,MAX(TOUCH_COUNT) AS MAX_TOUCH        FROM VISTA_REPORTING.dbo.TRD_ORDERS        GROUP BY ORD_NUM        )     AS ord2 on ord1.ORD_NUM = ord2.ORD_NUM and ord1.TOUCH_COUNT = ord2.MAX_TOUCH     LEFT JOIN VISTA_REPORTING.dbo.DECODES dc1 ON dc1.TAG_NAME = 'PM_INSTRUCTION' AND dc1.CODE=ord1.UPDATE_INSTR     WHERE EXISTS (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = ord1.ORD_NUM)             --3. Get a list of columns in the latest version of trades     IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades     SELECT DISTINCT      CONCAT(trd1.ORD_NUM,'_',trd1.MULTI_FUND_ID) AS ID      ,trd1.MULTI_FUND_ID      ,trd1.TRD_TRADER      ,trd1.TRD_PRICE      ,CONVERT(DECIMAL(30,2),trd1.TRD_PRICING_SPREAD) AS TRD_PRICING_SPREAD      ,CASE       WHEN prim.DEALING_DESK IS NULL THEN NULL       WHEN prim.DEALING_DESK = 'Fixed Income'        THEN        CASE         WHEN prim.SM_SEC_GROUP = 'SWAP' AND prim.SM_SEC_TYPE IN ('SWAP','CSWAP')          THEN CONVERT(DECIMAL(30,2),TRD_COUPON)         WHEN prim.DEBT_DERIV = 'DEBT'           THEN CONVERT(DECIMAL(30,2),TRD_YIELD)        END       ELSE CONVERT(DECIMAL(30,2),TRD_YIELD)      END AS Rate      ,trd1.TRD_COUNTERPARTY      ,trd1.TRAN_TYPE      ,CASE       WHEN prim.DEALING_DESK='Fixed income'       THEN        CASE         WHEN prim.DEBT_DERIV = 'DEBT'          THEN         CASE          WHEN trd1.TRD_COUPON IS NOT NULL AND i2.TICKER IS NOT NULL AND i2.MATURITY IS NOT NULL           THEN CONCAT(ISNULL(i2.TICKER,''),' ', CAST(ISNULL(trd1.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))          ELSE  CONCAT(ISNULL(trd_o.SEC_DESC1,''),' ', CAST(ISNULL(trd1.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))         END         ELSE prim.DESC_INSTMT        END       ELSE NULL      END AS [Description]      ,trd1.EXECUTION_TYPE_DECODE      ,trd1.TRD_CURRENCY      ,i2.ISIN      ,i2.CUSIP      ,i2.SEDOL      ,trd1.TRD_TRADE_DATE      ,trd1.EXECUTION_TIME      ,trd1.TRD_AUTH_TIME      ,plc.ROUTE_DATETIME as RELEASE_DATETIME      ,CASE       WHEN prim.TWEB_CLOSE_DEALING = 1 THEN 'TWEB Close'       WHEN prim.[1615_DEALING] = 1 THEN '1615 Dealing'       WHEN trd1.ACTIVITY_TYPE = 'MG.FI 1. Proces' THEN 'VPT'      END AS [Method]      ,prim.PRIMARY_MARKET      ,prim.VENUE      ,trd1.ACTIVITY_TYPE_DECODE      ,trd1.TRDCOMM_COMMENTS      ,i2.MATURITY      ,prim.INST_TYPE      ,trd1.SM_SEC_GROUP      ,trd1.SM_SEC_TYPE      ,trd1.PORTFOLIOS_PORTFOLIO_NAME      ,dd.FULL_NAME     INTO #trades     FROM VISTA_REPORTING.dbo.TRADES trd1     INNER JOIN ( SELECT  MULTI_FUND_ID          ,MAX(TOUCH_COUNT) AS MAX_TOUCH        FROM VISTA_REPORTING.dbo.TRADES        GROUP BY MULTI_FUND_ID        ) AS trd2 on trd1.MULTI_FUND_ID = trd2.MULTI_FUND_ID and trd1.TOUCH_COUNT = trd2.MAX_TOUCH     LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE prim ON trd1.MULTI_FUND_ID = prim.MULTI_FUND_ID     OUTER APPLY (SELECT TOP 1 i.* FROM VISTA_REPORTING.dbo.INSTRUMENTS i        WHERE (i.CUSIP=trd1.CUSIP AND i.DATE<=CONVERT(DATE, trd1.EXECUTION_TIME))        ORDER BY i.DATE DESC) as i2     LEFT JOIN VISTA_REPORTING.dbo.PLACEMENTS plc ON trd1.PLACEMENT_NUM = plc.PLACEMENT_NUM     LEFT JOIN VISTA_REPORTING.dbo.DEALER_AND_DESK dd ON trd1.TRD_TRADER = dd.INITIALS     LEFT JOIN #trade_order_details trd_o ON trd1.ORD_NUM = trd_o.ORD_NUM     WHERE EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = trd1.MULTI_FUND_ID)             --4. Get the latest version of the booked amount and the fund for each trade     IF OBJECT_ID('tempdb..#trades1', 'U') IS NOT NULL DROP TABLE #trades1     SELECT DISTINCT      trd1.MULTI_FUND_ID,      trd1.PORTFOLIOS_PORTFOLIO_NAME,      ABS(trd1.TRD_ORIG_FACE) AS [TRD_ORIG_FACE]     INTO #trades1       FROM VISTA_REPORTING.dbo.TRADES trd1     INNER JOIN (SELECT          MULTI_FUND_ID         ,MAX(TOUCH_COUNT) AS MAX_TOUCH        FROM VISTA_REPORTING.dbo.TRADES        GROUP BY MULTI_FUND_ID        ) AS trd2 on trd1.MULTI_FUND_ID = trd2.MULTI_FUND_ID and trd1.TOUCH_COUNT = trd2.MAX_TOUCH     WHERE EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = trd1.MULTI_FUND_ID)             IF OBJECT_ID('tempdb..#trades_concat', 'U') IS NOT NULL DROP TABLE #trades_concat     SELECT       a.MULTI_FUND_ID,      STUFF((        SELECT DISTINCT ', ' + PORTFOLIOS_PORTFOLIO_NAME        FROM #trades1 Results        WHERE (a.MULTI_FUND_ID = Results.MULTI_FUND_ID)        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS Funds,       SUM(TRD_ORIG_FACE) AS [SUM_TRD_ORIG_FACE]     INTO #trades_concat     FROM #trades1 a     GROUP BY a.MULTI_FUND_ID             IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     SELECT DISTINCT       NULL                 AS [OA_ID],      CONVERT(VARCHAR(250),ex.Prior_Orders)         AS [Missed_Orders],      ex.OP_ID,      ex.Prior_Orders,      ex.ORD_NUM,      DEALING_DESK,      NULL                 AS [VG_13],      CONVERT(DATETIME,NULL)             AS [VG_13_CREATETIME],      ex.VG_14,      ex.VG_14_CREATETIME              AS VG_14_CREATETIME,      pm.PM_concat               AS [PM],      trd_o.ORDER_REASON_DECODE            AS [Purpose],      pm_o.[AUTH_TIME]              AS [Auth Time],      trd_o.ACTIVE_TIME              AS [Active Time],      t.MULTI_FUND_ID               AS [MFID],      t.TRD_TRADER               AS [Dealer],      t_concat.SUM_TRD_ORIG_FACE            AS [Booked Amt],      case when ex.dealing_desk = 'Leveraged Finance'       then convert(varchar,convert(DECIMAL(30,4),t.TRD_PRICE))       else convert(varchar,convert(DECIMAL(30,2),t.TRD_PRICE)) end  AS [Price],      t.TRD_PRICING_SPREAD             AS [Spread],      t.Rate                 AS [Rate],      t.TRD_COUNTERPARTY              AS [TRD_COUNTERPARTY],      t.TRAN_TYPE                AS [TRAN_TYPE],      CASE        WHEN ex.DEALING_DESK = 'Fixed Income' THEN t.Description          ELSE trd_o.SEC_DESC1      END                  AS [Description],      t.ISIN                 AS [ISIN],      t.CUSIP                 AS [CUSIP],      t.SEDOL                 AS [SEDOL],      t.TRD_TRADE_DATE              AS [Trade Date],      t.RELEASE_DATETIME              AS [Send Date],      t.EXECUTION_TIME              AS [Exec Date],      t.TRD_AUTH_TIME               AS [Entry Date],      t.Method                AS [Method],      t.PRIMARY_MARKET              AS [Primary Market],      t.Venue                 AS [Platform],      t.ACTIVITY_TYPE_DECODE             AS [Activity],      NULLIF(trd_o.COMMENTS_VALUE,'')           AS [Genral Comments],      t.TRDCOMM_COMMENTS              AS [Dealer Comment],      t.MATURITY                AS [Maturity Date],      t_concat.Funds               AS [Fund],      inv_desk.Inv_Desk_Concat            AS [Inv desk],      t.INST_TYPE                AS [INST_TYPE],      CONCAT(YEAR(pm_o.AUTH_TIME),'-',left(datename(m,pm_o.AUTH_TIME),3)) AS [MONTH_YEAR],      concat(t.SM_SEC_GROUP,'/',t.SM_SEC_TYPE)        AS [Asset_Type/Subtype],      Null                 AS [List ID],      trd_o.LIMIT_TYPE              AS [Limit Type],      trd_o.LIMIT_VALUE              AS [Limit Value],      NULL                  AS [List Name],      trd_o.SEC_DESC1                  AS SEC_DESC1,      t.FULL_NAME                AS [TRADER_FULL_NAME],      NULLIF(trd_o.COMMENTS_VALUE,'')           AS [COMMENTS_VALUE],      t.SM_SEC_GROUP               AS [SM_SEC_GROUP],      t.SM_SEC_TYPE               AS [SM_SEC_TYPE],      NULL                 AS [CLIENT_EXECUTION_NUM],      NULL                 AS [Indicative_Comments],      NULL                 AS [Placement_Num],      t.EXECUTION_TYPE_DECODE             AS [Execution_Type_Decode],      t.TRDCOMM_COMMENTS              AS [Internal Comment],      Null                 as [Order Group],      NUll                 as [Merged Order],      null                 as [Ccy],      Null                as [Picked up Date],      CONVERT(VARCHAR(50),Null)            as UPDATE_INSTR,      trd_o.Instruction              AS Instruction     INTO #temp_final_master_table     FROM VISTA_REPORTING.dbo.TRD_ORDER_LEVEL_EXCEPTION_TABLE ex     LEFT JOIN #trade_order_details trd_o ON ex.ORD_NUM = trd_o.ORD_NUM     LEFT JOIN #trades t ON ex.OP_Trade = t.MULTI_FUND_ID     LEFT JOIN #PM_concat pm ON ex.ORD_NUM = pm.ORD_NUM     LEFT JOIN #trades_concat t_concat ON t.MULTI_FUND_ID = t_concat.MULTI_FUND_ID     LEFT JOIN #Inv_desk_concat inv_desk ON ex.ORD_NUM = inv_desk.ORD_NUM     LEFT JOIN #PM pm_o ON pm_o.ORD_NUM=ex.ORD_NUM     --WHERE ISNULL(t.PORTFOLIOS_PORTFOLIO_NAME,'DRC_VANG') in ('DRC_VANG', 'DRC_EPIS', 'DRC_ECIF', 'DRC_AOFB', 'DRC_TRCI', 'DRC_ELF')     WHERE EXISTS (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = ex.ORD_NUM)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_ORDER_PRIORITY_TABLE', 'U') IS NOT NULL     DELETE FROM VISTA_REPORTING.dbo.MASTER_ORDER_PRIORITY_TABLE     WHERE ORD_NUM IN (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_ORDER_PRIORITY_TABLE', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_ORDER_PRIORITY_TABLE     SELECT *     FROM #temp_final_master_table         ELSE         SELECT *     INTO VISTA_REPORTING.dbo.MASTER_ORDER_PRIORITY_TABLE     FROM #temp_final_master_table             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(     'MASTER_ORDER_PRIORITY_TABLE', --TABLE_NAME     @START_TIME, --START_TIME     GETDATE(), --END_TIME     DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS     CAST(GETDATE() as date)) --COMPLETION_DATE             IF OBJECT_ID('tempdb..#Ord_inv_Desk', 'U') IS NOT NULL DROP TABLE #Ord_inv_Desk     IF OBJECT_ID('tempdb..#PM', 'U') IS NOT NULL DROP TABLE #PM     IF OBJECT_ID('tempdb..#PM_concat', 'U') IS NOT NULL DROP TABLE #PM_concat     IF OBJECT_ID('tempdb..#trade_order_details', 'U') IS NOT NULL DROP TABLE #trade_order_details     IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades     IF OBJECT_ID('tempdb..#trades1', 'U') IS NOT NULL DROP TABLE #trades1     IF OBJECT_ID('tempdb..#trades_concat', 'U') IS NOT NULL DROP TABLE #trades_concat     IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table         --CREATE NONCLUSTERED INDEX MASTER_ORDER_PRIORITY_INDEX     --ON VISTA_REPORTING.[dbo].MASTER_ORDER_PRIORITY_TABLE (OA_ID, OP_ID, ORD_NUM,  MFID, [List ID])         IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'master_op_idx')           DROP INDEX master_op_idx      ON VISTA_REPORTING.[dbo].MASTER_ORDER_PRIORITY_TABLE      CREATE NONCLUSTERED INDEX master_op_idx ON VISTA_REPORTING.[dbo].MASTER_ORDER_PRIORITY_TABLE (ORD_NUM, OP_ID)         IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'master_op_idx2')           DROP INDEX master_op_idx2      ON VISTA_REPORTING.[dbo].MASTER_ORDER_PRIORITY_TABLE      CREATE NONCLUSTERED INDEX master_op_idx2 ON VISTA_REPORTING.[dbo].MASTER_ORDER_PRIORITY_TABLE (DEALING_DESK)         IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'master_op_idx3')           DROP INDEX master_op_idx3      ON VISTA_REPORTING.[dbo].MASTER_ORDER_PRIORITY_TABLE      CREATE NONCLUSTERED INDEX master_op_idx3 ON VISTA_REPORTING.[dbo].MASTER_ORDER_PRIORITY_TABLE ([Auth Time])         IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'master_op_idx4')           DROP INDEX master_op_idx4      ON VISTA_REPORTING.[dbo].MASTER_ORDER_PRIORITY_TABLE      CREATE NONCLUSTERED INDEX master_op_idx4 ON VISTA_REPORTING.[dbo].MASTER_ORDER_PRIORITY_TABLE (VG_13_CREATETIME)         IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'master_op_idx5')           DROP INDEX master_op_idx5      ON VISTA_REPORTING.[dbo].MASTER_ORDER_PRIORITY_TABLE      CREATE NONCLUSTERED INDEX master_op_idx5 ON VISTA_REPORTING.[dbo].MASTER_ORDER_PRIORITY_TABLE (VG_14_CREATETIME)        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_PM_ORDER_TABLE  CreateDate: 2025-06-26 17:59:40.113  ModifyDate: 2025-06-26 17:59:40.113  --- DEFINITION START ---  -- =============================================    -- Author:  <???>    -- Create date: <???>    -- Description: <Build a master table containing all necessary     --    information required in the front end for PM Orders>    -- =============================================        -- ***************VERSION CONTROL***************    -- 2018-02-16 WH: Changed the #temp_pl_table to group to the PM ORD level because we    --      want the first release datetime associated with a PM Order.        -- 2018-03-21 - WH: Removed reference to BUY_SELL_FLAG - used TRAN_TYPE instead    -- 2018-08-01 - WH: Adsded an index to increase front end speed.    -- 2018-08-13 - KR: Removed the code for Index creation on PM_ORDERS table and added it to ORDERS_SPLIT SPROC.    -- 2018-09-05 - KR: Added two new columns [Average daily volume] and [Remain Amt as percent of daily volume] into PM_ORDERs table.    -- 2019-03-12 - DDC: Column added showing how late an exeption is based on the criteria. If there is no exception raised the default is 0    -- 2020-04-24 - DDC: One day processing implemented    -- *********************************************        CREATE PROCEDURE [dbo].[MASTER_PM_ORDER_TABLE]        AS    BEGIN         DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()         -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids     SELECT DISTINCT       ol.ORD_NUM,      oc.TRD_ORD,      t.MULTI_FUND_ID     INTO #distinct_ids     FROM Vista_Reporting.dbo.ORDER_LEVEL_EXCEPTION_TABLE ol     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD = ol.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM = oc.TRD_ORD               IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER', 'U') IS NOT NULL     DELETE FROM #distinct_ids where NOT EXISTS (SELECT DISTINCT od.PM_ORD                FROM (SELECT DISTINCT PM_ORD                    FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN                   UNION                   SELECT DISTINCT vg.ORD_NUM                    FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_EQ_TABLE vg                    WHERE vg.TIMELY_EXECUTION_EXCEPTION != 0 AND vg.CREATETIME > DATEADD(YEAR, -1, CAST(@START_TIME AS DATE))                   UNION                   SELECT DISTINCT vg.ORD_NUM                    FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE vg                    WHERE vg.TIMELY_EXECUTION_EXCEPTION != 0 AND vg.CREATETIME > DATEADD(YEAR, -1, CAST(@START_TIME AS DATE))                   UNION                   SELECT DISTINCT vg.ORD_NUM                    FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_LL_TABLE vg                    WHERE vg.TIMELY_EXECUTION_EXCEPTION != 0 AND vg.CREATETIME > DATEADD(YEAR, -1, CAST(@START_TIME AS DATE))) od WHERE od.PM_ORD=#distinct_ids.ORD_NUM)             --IF OBJECT_ID('tempdb..#todays_pmorders', 'U') IS NOT NULL DROP TABLE #todays_pmorders     --SELECT DISTINCT ORD_NUM      --INTO #todays_pmorders     --FROM Vista_Reporting.dbo.PM_ORDERS WHERE CAST(PULL_DATE AS DATE) >= CAST(GETDATE() AS DATE)             --IF OBJECT_ID('tempdb..#todays_trorders', 'U') IS NOT NULL DROP TABLE #todays_trorders     --SELECT DISTINCT tr.ORD_NUM      --INTO #todays_trorders     --FROM Vista_Reporting.dbo.TRD_ORDERS tr     --LEFT JOIN Vista_Reporting.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = tr.ORD_NUM     --WHERE EXISTS (SELECT pm.ORD_NUM FROM #todays_pmorders pm WHERE pm.ORD_NUM = oc.PM_ORD)              --IF OBJECT_ID('tempdb..#todays_trades', 'U') IS NOT NULL DROP TABLE #todays_trades     --SELECT DISTINCT t.MULTI_FUND_ID      --INTO #todays_trades     --FROM Vista_Reporting.dbo.TRADES t     --WHERE EXISTS (SELECT tro.ORD_NUM FROM #todays_trorders tro WHERE tro.ORD_NUM = t.ORD_NUM)             --1. Get Investment desks associated with all funds on the TRD order     IF OBJECT_ID('tempdb..#Ord_inv_Desk', 'U') IS NOT NULL DROP TABLE #Ord_inv_Desk     SELECT DISTINCT       od.ORD_NUM,       p.ancestor     INTO #Ord_inv_Desk     FROM VISTA_STAGING.dbo.ORDERS_DETAIL od -- This will give us the details for PM Orders and TRD Orders     LEFT JOIN VISTA_STAGING.dbo.PORTFOLIO_GROUP_CLOSURE_TABLE p     ON od.PORTFOLIO_NAME = p.descendant     WHERE p.ancestor IN ('MG_ATCRED','MG_RET_FI','MG_INSTI','MG_INTER','MG_RESTCT','MG_IN_CAP','MG_LEVFIN','MG_MIB','MG_REDEBT') -- This is the list of investment desks provided in the business requirements documents        AND EXISTS (SELECT DISTINCT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = od.ORD_NUM)     ORDER BY od.ORD_NUM             IF OBJECT_ID('tempdb..#temp_oc', 'U') IS NOT NULL DROP TABLE #temp_oc     SELECT DISTINCT       oc.PM_ORD,       oc.TRD_ORD      INTO #temp_oc      FROM VISTA_REPORTING.dbo.ORDERS_CROSS oc     WHERE EXISTS (SELECT DISTINCT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = oc.PM_ORD)             IF OBJECT_ID('tempdb..#temp_trades', 'U') IS NOT NULL DROP TABLE #temp_trades     SELECT DISTINCT       t.ORD_NUM,      t.MULTI_FUND_ID,      t.PLACEMENT_NUM,      t.CLIENT_EXECUTION_NUM,      t.PORTFOLIOS_PORTFOLIO_NAME,      t.EXECUTION_TIME,      t.TRD_CURRENCY,      t.ACTIVITY_TYPE,      t.TRD_TRADE_DATE,      t.TRD_AUTH_TIME,      t.CUSIP,      t.TRDCOMM_COMMENTS,      t.TRD_ORIG_FACE,      t.TRD_COUNTERPARTY,      t.TRD_COUPON,      t.TRD_YIELD,      t.TRD_PRICING_SPREAD,      t.TRD_PRICE,      t.ACTIVITY_TYPE_DECODE,      t.EXECUTION_TYPE_DECODE,      t.FinalFlag,      toc.PM_ORD,       i2.TICKER AS TICKER_I,       i2.MATURITY AS MATURITY_I     INTO #temp_trades     FROM Vista_Reporting.dbo.TRADES t     LEFT JOIN #temp_oc toc ON toc.TRD_ORD = t.ORD_NUM     OUTER APPLY (SELECT TOP 1 i.TICKER, i.MATURITY FROM VISTA_REPORTING.dbo.INSTRUMENTS i                    WHERE (i.CUSIP=t.CUSIP AND i.DATE<=CONVERT(DATE, t.EXECUTION_TIME))                    ORDER BY i.DATE DESC) as i2     WHERE EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)-- AND t.FinalFlag = 1             ----2. Concatenate all funds on a trade that received an allocation     IF OBJECT_ID('tempdb..#Funds', 'U') IS NOT NULL DROP TABLE #Funds     SELECT DISTINCT        PM_ORD AS ORD_NUM,       MULTI_FUND_ID,       PORTFOLIOS_PORTFOLIO_NAME     INTO #Funds     FROM #temp_trades      ORDER BY PM_ORD, MULTI_FUND_ID     --LEFT JOIN (SELECT DISTINCT ORD_NUM, PORTFOLIOS_PORTFOLIO_NAME FROM #temp_trades) t ON oc.TRD_ORD = t.ORD_NUM         --CREATE CLUSTERED INDEX Fund_idx ON #Funds (ORD_NUM)             --IF OBJECT_ID('tempdb..#Funds_concat', 'U') IS NOT NULL DROP TABLE #Funds_concat     --SELECT     -- RESULTS.ORD_NUM,     -- STUFF((     --  SELECT DISTINCT ', ' + LTRIM(RTRIM(PORTFOLIOS_PORTFOLIO_NAME))     --  FROM #Funds     --  WHERE (ORD_NUM = Results.ORD_NUM)     --  FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')     -- ,1,2,'') AS Funds_concat     --INTO #Funds_concat     --FROM #Funds Results     --GROUP BY RESULTS.ORD_NUM             IF OBJECT_ID('tempdb..#Inv_desk_concat', 'U') IS NOT NULL DROP TABLE #Inv_desk_concat     SELECT      Results.ORD_NUM,      STUFF((       SELECT DISTINCT ', ' + LTRIM(RTRIM(oi.ancestor))       FROM (SELECT ORD_NUM, ancestor FROM #Ord_inv_Desk) oi       WHERE (oi.ORD_NUM = Results.ORD_NUM)       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS Inv_Desk_Concat     INTO #Inv_desk_concat     FROM #Ord_inv_Desk Results     GROUP BY ORD_NUM             IF OBJECT_ID('tempdb..#temp_pl_table', 'U') IS NOT NULL DROP TABLE #temp_pl_table     SELECT DISTINCT      oc.PM_ORD,      MIN(CASE        WHEN (pm.AUTH_TIME) < '2018-06-19' AND (p.RELEASE_DATETIME) > (pm.AUTH_TIME) THEN (p.RELEASE_DATETIME)  -- T RElease Exceptions before 19/6/2018 are calculated using the RELEASE_DATETEIME - therefore display this column.       WHEN trd.DEALING_DESK = 'Equity' AND (pm.AUTH_TIME) >= '2018-06-19' AND (p.ROUTE_DATETIME) > (pm.AUTH_TIME) THEN (p.ROUTE_DATETIME)--T RElease Exceptions before 19/6/2018 are calculated using the ROUTE_DATETEIME - therefore display this column.       WHEN (p.RELEASE_DATETIME) > (pm.AUTH_TIME) THEN (p.RELEASE_DATETIME)       END) AS MIN_RELEASE_DATETIME         INTO #temp_pl_table     FROM VISTA_REPORTING.dbo.PLACEMENTS p     INNER JOIN #temp_oc oc ON oc.TRD_ORD = p.ORD_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM, AUTH_TIME, DEALING_DESK FROM VISTA_REPORTING.dbo.TRD_ORDERS tr        WHERE EXISTS (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = tr.ORD_NUM)) trd ON oc.TRD_ORD = trd.ORD_NUM     --INNER JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON trd.ORD_NUM = oc.TRD_ORD     LEFT JOIN (SELECT DISTINCT ORD_NUM, AUTH_TIME FROM VISTA_REPORTING.dbo.PM_ORDERS pm          WHERE EXISTS (SELECT DISTINCT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = pm.ORD_NUM)) pm ON oc.PM_ORD = pm.ORD_NUM     --WHERE p.STATUS != 'C'     GROUP BY oc.PM_ORD, trd.DEALING_DESK             IF OBJECT_ID('tempdb..#Min_Exec_Time', 'U') IS NOT NULL DROP TABLE #Min_Exec_Time     SELECT      pm.ORD_NUM,      MIN(AUTH_TIME) AS MIN_AUTH_TIME,      MIN(t.EXECUTION_TIME) AS MIN_EXEC_TIME,      MAX(t.EXECUTION_TIME) AS MAX_EXEC_TIME     INTO #Min_Exec_Time     FROM VISTA_REPORTING.dbo.PM_ORDERS pm     INNER JOIN #temp_oc oc ON oc.PM_ORD=pm.ORD_NUM     LEFT JOIN #temp_trades t ON oc.TRD_ORD=t.ORD_NUM     WHERE EXISTS (SELECT DISTINCT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = pm.ORD_NUM)     GROUP BY               pm.ORD_NUM             IF OBJECT_ID('tempdb..#max_touch_table', 'U') IS NOT NULL DROP TABLE #max_touch_table     select distinct      pm.ORD_NUM,      MAX(pm.TOUCH_COUNT) AS MAX_TOUCH     into #max_touch_table     from VISTA_REPORTING.dbo.PM_ORDERS pm     --INNER JOIN VISTA_REPORTING.dbo.ORDER_LEVEL_EXCEPTION_TABLE olt ON olt.ORD_NUM = pm.ORD_NUM     WHERE EXISTS (SELECT DISTINCT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = pm.ORD_NUM)     group by pm.ORD_NUM             IF OBJECT_ID('tempdb..#ord_auth_filled', 'U') IS NOT NULL DROP TABLE #ord_auth_filled     SELECT DISTINCT      pm.ORD_NUM,      ABS(pm.FACE) AS ABS_FACE,      SUM(ABS(tr.FILL_AMT)) AS ABS_FILL_AMT,      te.REBASED_AUTH_TIME,       (ABS(pm.FACE)-SUM(ABS(tr.FILL_AMT))) AS FILLED     into #ord_auth_filled     from VISTA_REPORTING.dbo.PM_ORDERS pm     inner join #max_touch_table mt ON mt.ORD_NUM=pm.ORD_NUM AND pm.TOUCH_COUNT=mt.MAX_TOUCH     left join (SELECT DISTINCT ORD_NUM, REBASED_AUTH_TIME FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE UNION SELECT DISTINCT ORD_NUM, AUTH_TIME FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_LL_TABLE) te ON te.ORD_NUM=pm.ORD_NUM     left join VISTA_REPORTING.dbo.TRD_ORDERS tr ON tr.ORD_NUM=mt.ORD_NUM AND tr.TOUCH_COUNT=mt.MAX_TOUCH     WHERE EXISTS (SELECT DISTINCT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = pm.ORD_NUM)     group by pm.ORD_NUM, pm.FACE, te.REBASED_AUTH_TIME             --IF OBJECT_ID('tempdb..#concat_trader', 'U') IS NOT NULL DROP TABLE #concat_trader     --SELECT pm1.ORD_NUM,     --   (STUFF((SELECT DISTINCT CAST(', ' + RTRIM(pm2.TRADER) AS VARCHAR(MAX))     --                    FROM VISTA_REPORTING.dbo.PM_ORDERS pm2     --                    WHERE (pm2.ORD_NUM=pm1.ORD_NUM)     --                    FOR XML PATH('')),1,2,'')) AS CONC_TRADER     --INTO #concat_trader     --FROM VISTA_REPORTING.dbo.PM_ORDERS pm1     --GROUP BY pm1.ORD_NUM                             IF OBJECT_ID('tempdb..#min_auth_face', 'U') IS NOT NULL DROP TABLE #min_auth_face     SELECT DISTINCT      po.ORD_NUM,      po.FACE,      po.TRADER,      po.AUTH_TIME,      MIN(po.ACTIVE_TIME) AS MIN_ACTIVE_TIME,      MAX(t.TRD_TRADE_DATE) AS MAX_TRD_DATE_AUTH,      MAX(t.TRD_AUTH_TIME) AS MAX_TRD_AUTH,      MAX(t.EXECUTION_TIME) AS MAX_EXEC_AUTH     INTO #min_auth_face     FROM VISTA_REPORTING.dbo.PM_ORDERS po     INNER JOIN (        SELECT          ORD_NUM,          MIN(TOUCH_COUNT) AS MIN_TOUCH          FROM VISTA_REPORTING.dbo.PM_ORDERS         WHERE AUTH_TIME IS NOT NULL         GROUP BY ORD_NUM       ) po2 ON po2.ORD_NUM=po.ORD_NUM AND po2.MIN_TOUCH=po.TOUCH_COUNT     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD=po.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM=oc.TRD_ORD     WHERE EXISTS (SELECT DISTINCT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = po.ORD_NUM)     GROUP BY       po.ORD_NUM,       po.FACE,       po.TRADER,       po.AUTH_TIME     --HAVING po.AUTH_TIME=MIN(po.AUTH_TIME)                 IF OBJECT_ID('tempdb..#sum_oface_table', 'U') IS NOT NULL DROP TABLE #sum_oface_table     SELECT DISTINCT       t.ORD_NUM,       SUM(ABS(t.TRD_ORIG_FACE)) AS SUM_TRD_ORIG_FACE     INTO #sum_oface_table     FROM VISTA_REPORTING.dbo.TRADES t     --INNER JOIN #temp_oc toc on toc.TRD_ORD = t.ORD_NUM     WHERE EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)     GROUP BY ORD_NUM                IF OBJECT_ID('tempdb..#temp_PRIM_INST', 'U') IS NOT NULL DROP TABLE #temp_PRIM_INST        SELECT DISTINCT       pr.ORD_NUM,       pr.SM_SEC_GROUP,       pr.DEBT_DERIV,       pr.SM_SEC_TYPE,       pr.INST_TYPE,       pr.PRIMARY_MARKET_ORDER_LEVEL,       pr.DESC_INSTMT,       pr.VENUE,       pr.TWEB_CLOSE_DEALING,       pr.[1615_DEALING],       pr.INTERFUND_TRANSFER,       pr.DEALING_DESK,       pr.ORDER_INST_TYPE,       pr.MULTI_FUND_ID     INTO #temp_PRIM_INST      FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr     WHERE EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = pr.MULTI_FUND_ID)     --INNER JOIN #temp_oc toc ON toc.TRD_ORD = pr.ORD_NUM             IF OBJECT_ID('tempdb..#Latest_pm_ord', 'U') IS NOT NULL DROP TABLE #Latest_pm_ord     SELECT pm.*      INTO #Latest_pm_ord     FROM VISTA_REPORTING.dbo.PM_ORDERS pm     INNER JOIN #max_touch_table mt ON mt.ORD_NUM=pm.ORD_NUM AND mt.MAX_TOUCH=pm.TOUCH_COUNT     WHERE EXISTS (SELECT DISTINCT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = pm.ORD_NUM)             IF OBJECT_ID('tempdb..#Latest_pm_ord_comm', 'U') IS NOT NULL DROP TABLE #Latest_pm_ord_comm     SELECT pm.COMMENTS_VALUE,      pm.ORD_NUM      INTO #Latest_pm_ord_comm     FROM VISTA_REPORTING.dbo.PM_ORDERS pm     INNER JOIN #max_touch_table mt ON mt.ORD_NUM=pm.ORD_NUM AND mt.MAX_TOUCH=pm.TOUCH_COUNT     WHERE COMMENTS_VALUE IS NOT NULL AND EXISTS (SELECT DISTINCT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = pm.ORD_NUM)             IF OBJECT_ID('tempdb..#Latest_pm_ord_reason', 'U') IS NOT NULL DROP TABLE #Latest_pm_ord_reason     SELECT DISTINCT       pm.ORDER_REASON,      pm.ORD_NUM      INTO #Latest_pm_ord_reason     FROM VISTA_REPORTING.dbo.PM_ORDERS pm     INNER JOIN #max_touch_table mt ON mt.ORD_NUM=pm.ORD_NUM AND mt.MAX_TOUCH=pm.TOUCH_COUNT     WHERE ORDER_REASON IS NOT NULL AND EXISTS (SELECT DISTINCT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = pm.ORD_NUM)              IF OBJECT_ID('tempdb..#Latest_temp_trades_distinct', 'U') IS NOT NULL DROP TABLE #Latest_temp_trades_distinct     SELECT DISTINCT     oc.PM_ORD AS ORD_NUM,      t.MULTI_FUND_ID,      t.TRD_CURRENCY,     ISNULL(p.Venue,'Manual') AS Venue,     CASE      WHEN prim.TWEB_CLOSE_DEALING = 1 THEN 'TWEB Close'      WHEN prim.[1615_DEALING] = 1 THEN '1615 Dealing'      WHEN t.ACTIVITY_TYPE = 'MG.FI 1. Proces' THEN 'VPT'     END AS [Method],     p.RELEASE_DATETIME,     t.CLIENT_EXECUTION_NUM,     t.EXECUTION_TIME,     t.TRD_TRADE_DATE,     t.TRD_AUTH_TIME,     t.TRDCOMM_COMMENTS,     t.CUSIP,     ABS(lpm.FACE) AS FACE,     t.TRD_ORIG_FACE,     --SUM(ABS(TRD_ORIG_FACE)) AS [Booked Amt],     --ABS(lpm.FACE) - SUM(ABS(TRD_ORIG_FACE)) AS [Remain Amt],     pb.[ACCUMULATED_VOLUME_UNSCALED],     t.TRD_COUNTERPARTY,     t.ACTIVITY_TYPE_DECODE,     t.EXECUTION_TYPE_DECODE,     CASE      WHEN prim.DEALING_DESK='Fixed Income'       THEN       CASE        WHEN prim.DEBT_DERIV = 'DEBT'         THEN         CASE          WHEN t.TRD_COUPON IS NOT NULL AND t.TICKER_I IS NOT NULL AND t.MATURITY_I IS NOT NULL           THEN CONCAT(ISNULL(t.TICKER_I,''),' ', CAST(ISNULL(t.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(t.MATURITY_I, 'dd/MM/yyyy'),''))          ELSE  CONCAT(ISNULL(lpm.SEC_DESC1,''),' ', CAST(ISNULL(t.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(t.MATURITY_I, 'dd/MM/yyyy'),''))         END        ELSE prim.DESC_INSTMT       END      WHEN prim.DEALING_DESK='Equity'      THEN lpm.SEC_DESC1      WHEN prim.DEALING_DESK='Leveraged Finance'      THEN prim.DESC_INSTMT     END AS [Description],     t.TRD_COUPON,     CASE      WHEN prim.DEALING_DESK IS NOT NULL THEN t.TRD_YIELD      ELSE NULL     END AS TRD_YIELD,     t.TRD_PRICING_SPREAD,     t.TRD_PRICE,     t.PORTFOLIOS_PORTFOLIO_NAME     INTO #Latest_temp_trades_distinct     FROM #temp_oc oc      INNER JOIN #temp_trades t ON t.ORD_NUM = oc.TRD_ORD      LEFT JOIN (SELECT Venue, RELEASE_DATETIME, PLACEMENT_NUM FROM VISTA_REPORTING.dbo.PLACEMENTS) p ON t.PLACEMENT_NUM = p.PLACEMENT_NUM     LEFT JOIN #temp_PRIM_INST prim ON t.MULTI_FUND_ID =prim.MULTI_FUND_ID     LEFT JOIN VISTA_REPORTING.dbo.REUTERS_PRICE_BENCHMARK_TABLE pb on pb.MULTI_FUND_ID=T.MULTI_FUND_ID     LEFT JOIN #Latest_pm_ord lpm ON oc.PM_ORD = lpm.ORD_NUM        --OUTER APPLY (SELECT TOP 1 i.TICKER, i.MATURITY FROM VISTA_REPORTING.dbo.INSTRUMENTS i        --                WHERE (i.CUSIP=t.CUSIP AND i.DATE<=CONVERT(DATE, t.EXECUTION_TIME))        --                ORDER BY i.DATE DESC) as i2     WHERE FinalFlag = 1 AND oc.PM_ORD IS NOT NULL --AND EXISTS (SELECT ORD_NUM FROM #todays_pmorders WHERE ORD_NUM=oc.PM_ORD)             IF OBJECT_ID('tempdb..#Latest_temp_trades', 'U') IS NOT NULL DROP TABLE #Latest_temp_trades     SELECT       ORD_NUM,       MULTI_FUND_ID,       TRD_CURRENCY,      Venue,      [Method],      RELEASE_DATETIME,      EXECUTION_TIME,      TRD_TRADE_DATE,      TRD_AUTH_TIME,      TRDCOMM_COMMENTS,      CUSIP,      SUM(ABS(TRD_ORIG_FACE)) AS [Booked Amt],      FACE - SUM(ABS(TRD_ORIG_FACE)) AS [Remain Amt],      [ACCUMULATED_VOLUME_UNSCALED] AS [Average daily volume],      CONVERT(DECIMAL(10,2) , 100.0*(FACE - SUM(ABS(TRD_ORIG_FACE)))/NULLIF([ACCUMULATED_VOLUME_UNSCALED], 0)) AS [Remain Amt as percent of daily volume],      TRD_COUNTERPARTY,      ACTIVITY_TYPE_DECODE,      EXECUTION_TYPE_DECODE,      [Description],      TRD_COUPON,      TRD_YIELD,      TRD_PRICING_SPREAD,      TRD_PRICE     INTO #Latest_temp_trades      FROM #Latest_temp_trades_distinct ltt     GROUP BY       ORD_NUM,       MULTI_FUND_ID,       TRD_CURRENCY,      Venue,      [Method],      RELEASE_DATETIME,      EXECUTION_TIME,      TRD_TRADE_DATE,      TRD_AUTH_TIME,      TRDCOMM_COMMENTS,      CUSIP,      FACE,      TRD_COUNTERPARTY,      ACTIVITY_TYPE_DECODE,      EXECUTION_TYPE_DECODE,      [Description],      TRD_COUPON,      [ACCUMULATED_VOLUME_UNSCALED],      TRD_YIELD,      TRD_PRICING_SPREAD,      TRD_PRICE             CREATE CLUSTERED INDEX #concat_idx ON #Latest_temp_trades (ORD_NUM)     CREATE CLUSTERED INDEX #concat_idx ON #Funds (ORD_NUM)             IF OBJECT_ID('tempdb..#concat_ord', 'U') IS NOT NULL DROP TABLE #concat_ord     SELECT       t.PM_ORD AS ORD_NUM,      STUFF((       SELECT '| ' + CAST(MULTI_FUND_ID AS VARCHAR(50))        FROM #Latest_temp_trades Results       WHERE (t.PM_ORD = Results.ORD_NUM) order by Results.MULTI_FUND_ID asc       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS MFID_concat,      STUFF((       SELECT '| ' + CAST(TRD_CURRENCY AS VARCHAR(50))        FROM #Latest_temp_trades Results        WHERE (t.PM_ORD = Results.ORD_NUM)  order by Results.MULTI_FUND_ID asc       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS Sett_CCy_concat,      STUFF((       SELECT '| ' + CAST(Venue AS VARCHAR(50))        FROM #Latest_temp_trades Results       WHERE (t.PM_ORD = Results.ORD_NUM)  order by Results.MULTI_FUND_ID asc       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS Venue_concat,         STUFF((       SELECT '| ' + CAST([Method] AS VARCHAR(50))        FROM #Latest_temp_trades Results       WHERE (t.PM_ORD = Results.ORD_NUM)  order by Results.MULTI_FUND_ID asc       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS Method_concat,           STUFF((       SELECT '| ' + CAST(RELEASE_DATETIME AS VARCHAR(50))       FROM #Latest_temp_trades Results       WHERE (t.PM_ORD = Results.ORD_NUM)  order by Results.MULTI_FUND_ID asc       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS RELEASE_DATETIME_concat,       STUFF((       SELECT '| ' + CONCAT(CONVERT(VARCHAR(25),CONVERT(date,NULLIF(EXECUTION_TIME,'')),103),' ',CONVERT(TIME(0),NULLIF(EXECUTION_TIME,'')))        FROM #Latest_temp_trades Results       WHERE (t.PM_ORD = Results.ORD_NUM)  order by Results.MULTI_FUND_ID asc       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS EXECUTION_TIME_concat,          STUFF((       SELECT '| ' + CONVERT(VARCHAR(50),TRD_TRADE_DATE,103)        FROM #Latest_temp_trades Results       WHERE (t.PM_ORD = Results.ORD_NUM)  order by Results.MULTI_FUND_ID asc       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS TRD_TRADE_DATE_concat,             STUFF((       SELECT '| ' + CONCAT(CONVERT(VARCHAR(25),CONVERT(date,NULLIF(TRD_AUTH_TIME,'')),103),' ',CONVERT(TIME(0),NULLIF(TRD_AUTH_TIME,'')))       FROM #Latest_temp_trades Results       WHERE (t.PM_ORD = Results.ORD_NUM)  order by Results.MULTI_FUND_ID asc       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS TRD_AUTH_TIME_concat,        STUFF((       SELECT DISTINCT '| ' + CAST(TRDCOMM_COMMENTS AS VARCHAR(1000))        FROM #Latest_temp_trades Results       WHERE (t.PM_ORD = Results.ORD_NUM)       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS TRDCOMM_COMMENTS_concat,          STUFF((       SELECT '| ' + CAST(format([Booked Amt], 'N2') AS VARCHAR(50))        FROM #Latest_temp_trades Results       WHERE (t.PM_ORD = Results.ORD_NUM)  order by Results.MULTI_FUND_ID asc       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS Booked_amt_concat,       STUFF((       SELECT '| ' + CAST(FORMAT([Remain Amt],'N2') AS VARCHAR(50))        FROM #Latest_temp_trades Results       WHERE (t.PM_ORD = Results.ORD_NUM)  order by Results.MULTI_FUND_ID asc       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS Remain_amt_concat,          STUFF((       SELECT '| ' + CAST([Description] AS VARCHAR(1000))        FROM #Latest_temp_trades Results       WHERE (t.PM_ORD = Results.ORD_NUM)  order by Results.MULTI_FUND_ID asc       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS [Description_Concat],          STUFF((       SELECT '| ' + CAST([ACTIVITY_TYPE_DECODE] AS VARCHAR(50))        FROM #Latest_temp_trades Results       WHERE (t.PM_ORD = Results.ORD_NUM)  order by Results.MULTI_FUND_ID asc       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS [Activity_Type_Concat],      STUFF((       SELECT '| ' + CAST(format([Average daily volume],'N2') AS VARCHAR(50))        FROM #Latest_temp_trades Results       WHERE (t.PM_ORD = Results.ORD_NUM)  order by Results.MULTI_FUND_ID asc       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')       ,1,2,'') AS [Average daily volume],         STUFF((       SELECT '| ' + CAST([Remain Amt as percent of daily volume] AS VARCHAR(50))        FROM #Latest_temp_trades Results       WHERE (t.PM_ORD = Results.ORD_NUM)  order by Results.MULTI_FUND_ID asc       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')       ,1,2,'') AS [Remain Amt as percent of daily volume],         STUFF((       SELECT '| ' + CAST(CONVERT(DECIMAL(18,2),TRD_PRICE) AS VARCHAR(50))        FROM #Latest_temp_trades Results       WHERE (t.PM_ORD = Results.ORD_NUM) order by Results.MULTI_FUND_ID asc       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')       ,1,2,'') AS TRD_PRICE_concat,      STUFF((       SELECT DISTINCT  ', ' + LTRIM(RTRIM(PORTFOLIOS_PORTFOLIO_NAME))       FROM #Funds Results       WHERE (t.PM_ORD = Results.ORD_NUM) --order by Results.MULTI_FUND_ID asc       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS Funds_concat     INTO #concat_ord     FROM #temp_oc t     GROUP BY t.PM_ORD             IF OBJECT_ID('tempdb..#max_touch_table_trader_pmo', 'U') IS NOT NULL DROP TABLE #max_touch_table_trader_pmo        select distinct                pm.ORD_NUM,                MAX(pm.TOUCH_COUNT) AS MAX_TOUCH        into #max_touch_table_trader_pmo        from VISTA_REPORTING.dbo.PM_ORDERS pm     WHERE TRADER IS NOT NULL AND EXISTS (SELECT DISTINCT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = pm.ORD_NUM)        --WHERE TRADER IS NOT NULL     group by pm.ORD_NUM             IF OBJECT_ID('tempdb..#max_touch_table_trader_trdo', 'U') IS NOT NULL DROP TABLE #max_touch_table_trader_trdo        select distinct         tr.ORD_NUM,                MAX(tr.TOUCH_COUNT) AS MAX_TOUCH        into #max_touch_table_trader_trdo        from VISTA_REPORTING.dbo.TRD_ORDERS tr     WHERE TRADER IS NOT NULL AND EXISTS (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = tr.ORD_NUM)        --WHERE TRADER IS NOT NULL     group by tr.ORD_NUM             IF OBJECT_ID('tempdb..#Latest_trader_trdo', 'U') IS NOT NULL DROP TABLE #Latest_trader_trdo        select distinct                oc.PM_ORD AS ORD_NUM,       MAX(TRADER) AS [TRADER] -- Take the max trader to avoid duplication        into #Latest_trader_trdo        from (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc     LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS trdo ON oc.TRD_ORD = trdo.ORD_NUM        INNER JOIN #max_touch_table_trader_trdo mx  ON trdo.ORD_NUM = mx.ORD_NUM AND trdo.TOUCH_COUNT = mx.MAX_TOUCH     WHERE EXISTS (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = trdo.ORD_NUM)     group by oc.PM_ORD              IF OBJECT_ID('tempdb..#Latest_trader', 'U') IS NOT NULL DROP TABLE #Latest_trader     SELECT        pm.ORD_NUM,        MIN(COALESCE(pm.TRADER, lt.TRADER)) AS TRADER,        MIN(COALESCE(d.FULL_NAME, d2.FULL_NAME)) AS TRADER_FULL_NAME     INTO #Latest_trader     FROM VISTA_REPORTING.dbo.PM_ORDERS pm     LEFT JOIN #max_touch_table_trader_pmo mt ON mt.ORD_NUM=pm.ORD_NUM AND mt.MAX_TOUCH=pm.TOUCH_COUNT     LEFT JOIN VISTA_REPORTING.dbo.DEALER_AND_DESK D ON pm.TRADER = D.INITIALS     LEFT JOIN #Latest_trader_trdo lt ON pm.ORD_NUM = lt.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.DEALER_AND_DESK D2 ON lt.TRADER = D2.INITIALS     WHERE mt.ORD_NUM IS NOT NULL OR lt.ORD_NUM IS NOT NULL      AND EXISTS (SELECT DISTINCT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = pm.ORD_NUM)     GROUP BY pm.ORD_NUM             IF OBJECT_ID('tempdb..#max_touch_table_PM', 'U') IS NOT NULL DROP TABLE #max_touch_table_PM        select distinct                ORD_NUM,                MAX(TOUCH_COUNT) AS MAX_TOUCH        into #max_touch_table_PM         from VISTA_REPORTING.dbo.PM_ORDERS pm        WHERE NULLIF(PM,'MERGED') IS NOT NULL AND EXISTS (SELECT DISTINCT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = pm.ORD_NUM)     group by ORD_NUM             IF OBJECT_ID('tempdb..#Latest_PM', 'U') IS NOT NULL DROP TABLE #Latest_PM     SELECT DISTINCT       pm.ORD_NUM,       pm.PM     INTO #Latest_PM     FROM VISTA_REPORTING.dbo.PM_ORDERS pm     INNER JOIN #max_touch_table_PM mt ON mt.ORD_NUM=pm.ORD_NUM AND mt.MAX_TOUCH=pm.TOUCH_COUNT     WHERE EXISTS (SELECT DISTINCT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = pm.ORD_NUM)             IF OBJECT_ID('tempdb..#temp_OL_table', 'U') IS NOT NULL DROP TABLE #temp_OL_table     SELECT DISTINCT      e.ORD_NUM,      e.[VG_11_CREATETIME],      e.[VG_11],      e.[VG_09_POLICY_CREATETIME],       e.[VG_09_POLICY],      e.[VG_09_80_DAY_CREATETIME],      e.[VG_09_80_DAY],      e.[VG_09_5_DAY],      e.[VG_09_5_CREATETIME],      e.[VG_09_40_DAY_CREATETIME],      e.[VG_09_40_DAY],      e.[VG_09_20_DAY_CREATETIME],      e.[VG_09_20_DAY],      e.[VG_09_160_DAY_CREATETIME],      e.[VG_09_160_DAY],      e.[VG_09_10_DAY_CREATETIME],      e.[VG_09_10_DAY],      e.[Exception_Type],      e.[DEALING_DESK],      e.Timespan,      e.AUTH_TIME,      e.Reversion_Time,      trr.TR_CB_THREHOLD,      trr.TR_NONCB_THRESHOLD,      e.TR_CRITERIA_ELAPSED     INTO #temp_OL_table     FROM VISTA_REPORTING.dbo.ORDER_LEVEL_EXCEPTION_TABLE e     LEFT JOIN VISTA_STAGING.dbo.TIMELY_RELEASE_REFERENCE_TABLE trr ON e.AUTH_TIME >= trr.DATE_FROM AND e.AUTH_TIME < trr.DATE_TO     WHERE EXISTS (SELECT DISTINCT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = e.ORD_NUM)             IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     SELECT DISTINCT      e.[VG_11_CREATETIME] AS VG_11_CREATETIME,      e.[VG_11],      e.[VG_09_POLICY_CREATETIME] AS VG_09_POLICY_CREATETIME,       e.[VG_09_POLICY],      e.[VG_09_80_DAY_CREATETIME] AS VG_09_80_DAY_CREATETIME,      e.[VG_09_80_DAY],      e.[VG_09_5_DAY],      e.[VG_09_5_CREATETIME] AS VG_09_5_DAY_CREATETIME,      e.[VG_09_40_DAY_CREATETIME] AS VG_09_40_DAY_CREATETIME,      e.[VG_09_40_DAY],      e.[VG_09_20_DAY_CREATETIME] AS VG_09_20_DAY_CREATETIME,      e.[VG_09_20_DAY],      e.[VG_09_160_DAY_CREATETIME] AS VG_09_160_DAY_CREATETIME,      e.[VG_09_160_DAY],      e.[VG_09_10_DAY_CREATETIME] AS VG_09_10_DAY_CREATETIME,      e.[VG_09_10_DAY],      CASE        WHEN po.DEALING_DESK = 'Equity' AND ISNULL(oaf.FILLED,-1) = 0 THEN CONVERT(VARCHAR(3),DATEDIFF(d,e.AUTH_TIME,MAX_EXEC_TIME)) + ' days'       WHEN po.DEALING_DESK = 'Equity' AND ISNULL(oaf.FILLED,-1) <> 0 THEN CONVERT(VARCHAR(3),DATEDIFF(d,e.AUTH_TIME,GETDATE())) + ' days'      ELSE e.[Timespan]      END AS [Timespan],      e.[ORD_NUM],      e.[Exception_Type],      e.[DEALING_DESK],      dc1.VALUE as [Instruction],       lpm.ORDER_REASON_DECODE as [Purpose],      lpmc.COMMENTS_VALUE as [General Comment],      e.ORD_NUM as [Order],      pm.PM as [FM],      lpm.TRAN_TYPE as [Side],      lpm.CURRENCY as [Ccy],      conc_ord.[Sett_Ccy_Concat] as [Sett Ccy],      i2.ISIN as [ISIN],      i2.SEDOL,      lpm.[CUSIP],      CASE        WHEN po.DEALING_DESK = 'EQUITY' THEN po.[SEC_DESC1]       ELSE conc_ord.[Description_Concat]       END as [Description],        --conc_trader.CONC_TRADER as [Dealer],      lst_trdr.TRADER AS Trader,      lst_trdr.TRADER AS Dealer,      conc_ord.[Venue_Concat] AS Platform,--ISNULL(p.VENUE,'Manual') as [Platform],      conc_ord.Method_Concat AS [Method],--CASE      -- WHEN p.TWEB_CLOSE_DEALING = 1 THEN 'TWEB Close'      -- WHEN p.[1615_DEALING] = 1 THEN '1615 Dealing'      -- WHEN lt.ACTIVITY_TYPE = 'MG.FI 1. Proces' THEN 'VPT'      --END AS [Method],      p.PRIMARY_MARKET_ORDER_LEVEL AS PRIMARY_MARKET,      CONVERT(DECIMAL(18,2),ABS(lpm.FACE)) AS [Ord Amt],      conc_ord.Remain_amt_concat AS [Remain Amt],--oaf.ABS_FACE-oaf.ABS_FILL_AMT as [Remain Amt],      conc_ord.Booked_amt_concat AS  [Booked Amt],--ABS_FILL_AMT as [Booked Amt],      po2.[MIN_ACTIVE_TIME] AS [Active Date],      conc_ord.RELEASE_DATETIME_concat AS  [Send Date],--pl.MIN_RELEASE_DATETIME as [Send Date],      conc_ord.TRD_TRADE_DATE_concat AS  [Trade Date],--po2.MAX_TRD_DATE_AUTH as [Trade Date],      conc_ord.EXECUTION_TIME_concat AS  [Exec Date],--po2.MAX_EXEC_AUTH as [Exec Date],      conc_ord.TRD_AUTH_TIME_concat AS  [Entry Date],--po2.MAX_TRD_AUTH as [Entry Date],      conc_ord.TRDCOMM_COMMENTS_concat AS  [Dealer Comment],      lt.TRDCOMM_COMMENTS as MIN_DEALER_COMMENT,      CASE       WHEN e.Exception_Type ='Inter' THEN 'Unfilled'       WHEN e.Exception_Type ='Intra' THEN 'Filled Outside'       ELSE NULL      END AS [TE Type],      CASE        WHEN p.DEALING_DESK = 'Fixed Income' AND p.INST_TYPE in ('GOV', 'IGOV', 'GOVBIL', 'EM GOV', 'EM GOVBIL', 'IRFUT', 'BNDFUT', 'OPTFUT') THEN 60       WHEN p.DEALING_DESK = 'Fixed Income' AND p.INST_TYPE in ('IG CORP', 'HY CORP','NR CORP', 'EM Corp', 'SCDS', 'ICDS', 'SSA') THEN 120       WHEN p.DEALING_DESK = 'Fixed Income' AND p.INST_TYPE in ('RMBS', 'CMBS', 'CDO', 'ABS', 'IRS', 'OIS', 'IFS', 'BASIS', 'ZCS', 'CCS') THEN 180       WHEN p.DEALING_DESK = 'Fixed Income' AND p.INST_TYPE in ('ASWP', 'CASWP') THEN 240       ELSE NULL      END AS [Threshold],      conc_ord.Funds_concat as [Fund],      inv_desk.Inv_Desk_Concat as [Inv Desk],      DATEDIFF(MINUTE, po2.AUTH_TIME, po2.MIN_ACTIVE_TIME) as [Pickup Timespan],      me.MIN_EXEC_TIME AS [First Execution],      DATEDIFF(MINUTE, po2.AUTH_TIME, me.MIN_EXEC_TIME) as [First Execution Timespan],      CASE       WHEN oaf.FILLED = 0 THEN 'YES'       ELSE 'NO'      END AS [Completed Orders],      CASE       WHEN (e.VG_09_POLICY + e.VG_09_5_DAY + e.VG_09_10_DAY + e.VG_09_20_DAY + e.VG_09_40_DAY + e.VG_09_80_DAY + e.VG_09_160_DAY) = 0 AND e.DEALING_DESK = 'Fixed Income' THEN 'YES'       WHEN (e.VG_09_POLICY + e.VG_09_5_DAY + e.VG_09_10_DAY + e.VG_09_20_DAY + e.VG_09_40_DAY + e.VG_09_80_DAY + e.VG_09_160_DAY) != 0 AND e.DEALING_DESK = 'Fixed Income' THEN 'NO'       WHEN (e.VG_09_POLICY + e.VG_09_5_DAY + e.VG_09_10_DAY + e.VG_09_20_DAY + e.VG_09_40_DAY + e.VG_09_80_DAY + e.VG_09_160_DAY) = 0 AND e.DEALING_DESK = 'Leveraged Finance' THEN 'YES'       WHEN (e.VG_09_POLICY + e.VG_09_5_DAY + e.VG_09_10_DAY + e.VG_09_20_DAY + e.VG_09_40_DAY + e.VG_09_80_DAY + e.VG_09_160_DAY) != 0 AND e.DEALING_DESK = 'Leveraged Finance' THEN 'NO'       ELSE NULL      END AS [Completed Inside Threshold],      CASE       WHEN e.Exception_Type ='Inter' THEN 'YES'       ELSE 'NO'      END AS [Outstanding Orders],      CASE       WHEN e.Exception_Type='Inter' THEN e.Timespan      END AS [Outstanding Orders Timespan],      me.MAX_EXEC_TIME AS [Last Execution],      e.Reversion_Time AS [Reversion Time],      DATEDIFF(minute,CASE           WHEN COALESCE(p.DEALING_DESK,po.DEALING_DESK) = 'Equity' THEN e.AUTH_TIME           WHEN COALESCE(p.DEALING_DESK,po.DEALING_DESK) = 'Fixed Income' THEN e.AUTH_TIME           WHEN COALESCE(p.DEALING_DESK,po.DEALING_DESK) = 'Leveraged Finance' THEN e.AUTH_TIME          END , Reversion_Time) as [Reversion Timespan],      CASE       WHEN COALESCE(p.DEALING_DESK,po.DEALING_DESK) = 'Equity' THEN e.AUTH_TIME       WHEN COALESCE(p.DEALING_DESK,po.DEALING_DESK) = 'Fixed Income' THEN e.AUTH_TIME       WHEN COALESCE(p.DEALING_DESK,po.DEALING_DESK) = 'Leveraged Finance' THEN e.AUTH_TIME      END AS AUTH_TIME,      p.INST_TYPE,      --lt.MULTI_FUND_ID,      NULL AS CLIENT_EXECUTION_NUM,      NULL AS PLACEMENT_NUM,--lt.PLACEMENT_NUM,      lst_trdr.[TRADER_FULL_NAME],      --d.[ALADDIN_USER_ID],      i2.[SM_SEC_GROUP],      i2.[SM_SEC_TYPE],      po.[SEC_DESC1],      --po.COMMENTS_VALUE,      po.BROKER_CODE,      --CASE      -- WHEN p.SM_SEC_GROUP='SWAP' AND p.SM_SEC_TYPE in ('SWAP', 'CSWAP') THEN lt.TRD_COUPON      -- WHEN p.DEBT_DERIV = 'DEBT' THEN lt.TRD_YIELD      --END AS Rate,      --po.BUY_SELL_FLAG,      --t.[COMMENTS] as [General Comment],      NULL AS [INDICATIVE_COMMENTS],      po.PM_FULL_NAME,      --po.[AUTH_TIME],      lpmor.ORDER_REASON AS ORDER_REASON,      --pl.VENUE,      pl.MIN_RELEASE_DATETIME AS MIN_RELEASE_DATETIME,      lpm.FACE,      lt.TRD_COUNTERPARTY AS TRD_COUNTERPARTY,      lt.EXECUTION_TYPE_DECODE,      conc_ord.[MFID_Concat] as Multi_Fund_ID,      --lt.ACTIVITY_TYPE_DECODE as [Activity],      conc_ord.TRDCOMM_COMMENTS_concat as [Internal Comment], -- Needs to be removed      CONVERT(VARCHAR(50),NULL) as [UPDATE_INSTR], -- Needs to be removed      CONCAT(YEAR(e.AUTH_TIME),'-',left(datename(m,e.AUTH_TIME),3)) AS MONTH_YEAR,      concat(i2.SM_SEC_GROUP,'/',i2.SM_SEC_TYPE) as [Asset_Type/Subtype],      p.ORDER_INST_TYPE as [Order Inst Type],      CASE WHEN p.INTERFUND_TRANSFER = 1 THEN 'Y' ELSE 'N' END as [INTERFUND_TRANSFER],      conc_ord.Activity_Type_Concat as [Activity Type],      null as [Delay in Execution],      null as [Filled Unfilled],      tr.LIMIT_TYPE as [Limit Type],      tr.LIMIT_VALUE as [Limit Value],      CASE WHEN i2.EMERGING_MARKET = 1 THEN 'Y' ELSE 'N' END as [EM Non EM],      conc_ord.TRD_PRICE_concat as [px],      CASE       WHEN p.INST_TYPE IN ('ET Options','CONV BOND','TRS') THEN 180       WHEN p.INST_TYPE NOT IN ('ET Options','CONV BOND','TRS') AND CONVERT(DATE, me.MIN_AUTH_TIME) > '2019-02-12' THEN 20       ELSE 32      END AS [Release_Threshold],      --DATEDIFF(minute,po2.AUTH_TIME,pl.MIN_RELEASE_DATETIME) AS [Num_mins_Late],      CASE        --WHEN (VG_11=1) AND (e.TR_CRITERIA_ELAPSED - (CASE       --             WHEN p.INST_TYPE IN ('ET Options','CONV BOND','TRS') THEN 180       --             WHEN p.INST_TYPE NOT IN ('ET Options','CONV BOND','TRS') AND CONVERT(DATE, me.MIN_AUTH_TIME) > '2019-02-12' THEN 20       --             ELSE 32       --            END)) > 0        --  THEN (e.TR_CRITERIA_ELAPSED - (CASE       --           WHEN p.INST_TYPE IN ('ET Options','CONV BOND','TRS') THEN 180       --           WHEN p.INST_TYPE NOT IN ('ET Options','CONV BOND','TRS') AND CONVERT(DATE, me.MIN_AUTH_TIME) > '2019-02-12' THEN 20       --           ELSE 32       --          END))       --ELSE 0       WHEN VG_11 = 1 AND e.TR_CRITERIA_ELAPSED > 0 THEN TR_CRITERIA_ELAPSED       ELSE 0      END AS [Num_mins_Late], -- this the number of minutes passed the threshold that the exception is 'late'      conc_ord.[Average daily volume],      conc_ord.[Remain Amt as percent of daily volume],      CASE      WHEN p.DEALING_DESK='Fixed Income'      THEN         CASE         WHEN p.SM_SEC_GROUP = 'SWAP' AND p.SM_SEC_TYPE IN ('SWAP','CSWAP') THEN CONVERT(DECIMAL(18,2),lt.TRD_COUPON)        WHEN p.DEBT_DERIV = 'DEBT' THEN CONVERT(DECIMAL(18,2),lt.TRD_YIELD)       END      --WHEN pr.DEALING_DESK='Equity'      --THEN CONVERT(DECIMAL(18,2),lst_trd.TRD_YIELD)      --WHEN pr.DEALING_DESK='Leveraged Finance'      --THEN CONVERT(DECIMAL(18,2),lst_trd.TRD_YIELD)      END AS [Rate],      CONVERT(DECIMAL(18,2),lt.TRD_PRICING_SPREAD) as [Spread]     INTO #temp_final_master_table        FROM #temp_OL_table as e        LEFT JOIN (SELECT DISTINCT CUSIP,AUTH_TIME,DEALING_DESK,ORD_NUM,[SEC_DESC1],BROKER_CODE,PM_FULL_NAME FROM [VISTA_REPORTING].[dbo].[PM_ORDERS]) as po on po.ORD_NUM = e.ORD_NUM AND e.DEALING_DESK = po.DEALING_DESK --AND po.AUTH_TIME = e.AUTH_TIME        LEFT JOIN (SELECT DISTINCT ORD_NUM,[MIN_ACTIVE_TIME],AUTH_TIME FROM #min_auth_face) po2 ON po2.ORD_NUM=e.ORD_NUM        LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM #temp_oc) as oc on oc.PM_ORD = e.ORD_NUM        LEFT JOIN (SELECT DISTINCT ORD_NUM,LIMIT_TYPE,LIMIT_VALUE FROM VISTA_REPORTING.dbo.TRD_ORDERS) as tr on tr.ORD_NUM = oc.TRD_ORD        LEFT JOIN (SELECT DISTINCT ORD_NUM,MULTI_FUND_ID,TRDCOMM_COMMENTS,TRD_COUNTERPARTY,TRD_COUPON,TRD_YIELD, EXECUTION_TYPE_DECODE,EXECUTION_TIME,CUSIP, TRD_PRICING_SPREAD FROM #Latest_temp_trades) as lt ON lt.ORD_NUM=oc.PM_ORD        LEFT JOIN (SELECT DISTINCT PM,ORD_NUM FROM #Latest_PM) pm ON e.ORD_NUM = pm.ORD_NUM        OUTER APPLY (SELECT TOP 1          i.ISIN,          i.SEDOL,          i.SM_SEC_GROUP,          i.SM_SEC_TYPE,          i.EMERGING_MARKET         FROM VISTA_REPORTING.dbo.INSTRUMENTS i                    WHERE (i.CUSIP=coalesce(lt.CUSIP, po.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(lt.EXECUTION_TIME, po.AUTH_TIME)))                    ORDER BY i.DATE DESC) as i2        LEFT JOIN (SELECT DISTINCT PM_ORD,MIN_RELEASE_DATETIME FROM #temp_pl_table) as pl on pl.PM_ORD = e.ORD_NUM        LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID ,ORDER_INST_TYPE,SM_SEC_GROUP,SM_SEC_TYPE,DEBT_DERIV,ORD_NUM,INST_TYPE,PRIMARY_MARKET_ORDER_LEVEL,INTERFUND_TRANSFER, DEALING_DESK FROM #temp_PRIM_INST) p ON p.MULTI_FUND_ID = lt.MULTI_FUND_ID AND p.DEALING_DESK = e.DEALING_DESK        LEFT JOIN (SELECT DISTINCT ORD_NUM,Inv_Desk_Concat FROM #Inv_desk_concat) inv_desk ON e.ORD_NUM = inv_desk.ORD_NUM        --LEFT JOIN (SELECT DISTINCT ORD_NUM,Funds_concat FROM #Funds_concat) fnd ON e.ORD_NUM = fnd.ORD_NUM        LEFT JOIN (SELECT DISTINCT ORD_NUM FROM #sum_oface_table) sum_oface ON sum_oface.ORD_NUM=lt.ORD_NUM        LEFT JOIN (SELECT DISTINCT ORD_NUM,MAX_EXEC_TIME, MIN_EXEC_TIME, MIN_AUTH_TIME FROM #Min_Exec_Time) me ON me.ORD_NUM=e.ORD_NUM        LEFT JOIN (SELECT DISTINCT ORD_NUM,FILLED FROM #ord_auth_filled) oaf on oaf.ORD_NUM=e.ORD_NUM        LEFT JOIN #concat_ord conc_ord ON conc_ord.ORD_NUM=e.ORD_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM,FACE,CUSIP,CURRENCY,TRAN_TYPE,ORDER_REASON_DECODE,UPDATE_INSTR FROM #Latest_pm_ord) lpm ON lpm.ORD_NUM=e.ORD_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM,COMMENTS_VALUE FROM #Latest_pm_ord_comm) lpmc ON lpmc.ORD_NUM = e.ORD_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM,ORDER_REASON FROM #Latest_pm_ord_reason) lpmor ON lpmor.ORD_NUM = e.ORD_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM,TRADER, TRADER_FULL_NAME FROM #Latest_trader) lst_trdr ON e.ORD_NUM = lst_trdr.ORD_NUM     LEFT JOIN (SELECT DISTINCT TAG_NAME,CODE,VALUE FROM VISTA_REPORTING.dbo.DECODES) dc1 ON dc1.TAG_NAME = 'PM_INSTRUCTION' AND dc1.CODE=lpm.UPDATE_INSTR     --LEFT JOIN VISTA_STAGING.dbo.TIMELY_RELEASE_REFERENCE_TABLE trr ON e.AUTH_TIME >= trr.DATE_FROM AND e.AUTH_TIME < trr.DATE_TO        WHERE                e.DEALING_DESK in ('Equity', 'Fixed Income','Leveraged Finance') AND EXISTS (SELECT DISTINCT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = e.ORD_NUM)                 -- AND ISNULL(lt.PORTFOLIOS_PORTFOLIO_NAME,'DRC_VANG') in ('DRC_VANG', 'DRC_EPIS', 'DRC_ECIF', 'DRC_AOFB', 'DRC_TRCI', 'DRC_ELF')                 IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'vg_09_policy_mpo_idx')           DROP INDEX vg_09_policy_mpo_idx      ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER]          IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'vg_09_5_day_mpo_idx')           DROP INDEX vg_09_5_day_mpo_idx      ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER]              IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'vg_09_10_day_mpo_idx')           DROP INDEX vg_09_10_day_mpo_idx      ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER]          IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'vg_09_20_day_mpo_idx')           DROP INDEX vg_09_20_day_mpo_idx      ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER]          IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'vg_09_40_day_mpo_idx')           DROP INDEX vg_09_40_day_mpo_idx      ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER]          IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'vg_09_80_day_mpo_idx')           DROP INDEX vg_09_80_day_mpo_idx      ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER]          IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'vg_09_160_day_mpo_idx')           DROP INDEX vg_09_160_day_mpo_idx      ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER]          IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'vg_11_mpo_idx')           DROP INDEX vg_11_mpo_idx      ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER]          IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'vg_09P_mpo_idx')           DROP INDEX vg_09P_mpo_idx      ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER]          IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'vg_095_mpo_idx')           DROP INDEX vg_095_mpo_idx      ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER]          IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'vg_0910_mpo_idx')           DROP INDEX vg_0910_mpo_idx      ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER]          IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'vg_0920_mpo_idx')           DROP INDEX vg_0920_mpo_idx      ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER]          IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'vg_0940_mpo_idx')           DROP INDEX vg_0940_mpo_idx      ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER]          IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'vg_0980_mpo_idx')           DROP INDEX vg_0980_mpo_idx      ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER]          IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'vg_09160_mpo_idx')           DROP INDEX vg_09160_mpo_idx      ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER]          IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'vg_auth_time_mpo_idx')           DROP INDEX vg_auth_time_mpo_idx      ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER]          IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'vg_dd_mpo_idx')           DROP INDEX vg_dd_mpo_idx      ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER]          IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'vg_ord_num_mpo_idx')           DROP INDEX vg_ord_num_mpo_idx      ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER]          IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'vg_exc_type_mpo_idx')           DROP INDEX vg_exc_type_mpo_idx      ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER]              IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER', 'U') IS NOT NULL     DELETE FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER     WHERE ORD_NUM IN (SELECT DISTINCT ORD_NUM FROM #distinct_ids)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER     SELECT *     FROM #temp_final_master_table         ELSE         SELECT *     INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER     FROM #temp_final_master_table             UPDATE VISTA_REPORTING.dbo.MASTER_PM_ORDER     SET Timespan = CONVERT(VARCHAR(3), DATEDIFF(d, AUTH_TIME, GETDATE())) + ' days'     WHERE DEALING_DESK = 'Equity'         AND [Completed Orders] = 'NO'          CREATE NONCLUSTERED INDEX vg_09_policy_mpo_idx ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER] (VG_09_POLICY)     CREATE NONCLUSTERED INDEX vg_09_5_day_mpo_idx ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER] (VG_09_5_DAY)     CREATE NONCLUSTERED INDEX vg_09_10_day_mpo_idx ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER] ([VG_09_10_DAY])     CREATE NONCLUSTERED INDEX vg_09_20_day_mpo_idx ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER] ([VG_09_20_DAY])     CREATE NONCLUSTERED INDEX vg_09_40_day_mpo_idx ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER] ([VG_09_40_DAY])     CREATE NONCLUSTERED INDEX vg_09_80_day_mpo_idx ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER] ([VG_09_80_DAY])     CREATE NONCLUSTERED INDEX vg_09_160_day_mpo_idx ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER] ([VG_09_160_DAY])     CREATE NONCLUSTERED INDEX vg_11_mpo_idx ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER] (ORD_NUM, VG_11_CREATETIME)     CREATE NONCLUSTERED INDEX vg_09P_mpo_idx ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER] (ORD_NUM, VG_09_POLICY_CREATETIME)     CREATE NONCLUSTERED INDEX vg_095_mpo_idx ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER] (ORD_NUM, VG_09_5_DAY_CREATETIME)     CREATE NONCLUSTERED INDEX vg_0910_mpo_idx ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER] (ORD_NUM, VG_09_10_DAY_CREATETIME)     CREATE NONCLUSTERED INDEX vg_0920_mpo_idx ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER] (ORD_NUM, VG_09_20_DAY_CREATETIME)     CREATE NONCLUSTERED INDEX vg_0940_mpo_idx ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER] (ORD_NUM, VG_09_40_DAY_CREATETIME)     CREATE NONCLUSTERED INDEX vg_0980_mpo_idx ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER] (ORD_NUM, VG_09_80_DAY_CREATETIME)     CREATE NONCLUSTERED INDEX vg_09160_mpo_idx ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER] (ORD_NUM, VG_09_160_DAY_CREATETIME)     CREATE NONCLUSTERED INDEX vg_auth_time_mpo_idx ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER] (AUTH_TIME)     CREATE NONCLUSTERED INDEX vg_ord_num_mpo_idx ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER] (ORD_NUM)     CREATE NONCLUSTERED INDEX vg_dd_mpo_idx ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER] (DEALING_DESK)     CREATE NONCLUSTERED INDEX vg_exc_type_mpo_idx ON VISTA_REPORTING.[dbo].[MASTER_PM_ORDER] (Exception_Type)             --ALTER INDEX ALL ON  VISTA_REPORTING.[dbo].[MASTER_PM_ORDER] REBUILD              IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(     'MASTER_PM_ORDER', --TABLE_NAME     @START_TIME, --START_TIME     GETDATE(), --END_TIME     DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS      CAST(GETDATE() as date)) --COMPLETION_DATE             IF OBJECT_ID('tempdb..#Ord_inv_Desk', 'U') IS NOT NULL DROP TABLE #Ord_inv_Desk     IF OBJECT_ID('tempdb..#temp_oc', 'U') IS NOT NULL DROP TABLE #temp_oc     IF OBJECT_ID('tempdb..#temp_trades', 'U') IS NOT NULL DROP TABLE #temp_trades     IF OBJECT_ID('tempdb..#Inv_desk_concat', 'U') IS NOT NULL DROP TABLE #Inv_desk_concat     IF OBJECT_ID('tempdb..#temp_pl_table', 'U') IS NOT NULL DROP TABLE #temp_pl_table     IF OBJECT_ID('tempdb..#Min_Exec_Time', 'U') IS NOT NULL DROP TABLE #Min_Exec_Time     IF OBJECT_ID('tempdb..#max_touch_table', 'U') IS NOT NULL DROP TABLE #max_touch_table     IF OBJECT_ID('tempdb..#ord_auth_filled', 'U') IS NOT NULL DROP TABLE #ord_auth_filled                  IF OBJECT_ID('tempdb..#min_auth_face', 'U') IS NOT NULL DROP TABLE #min_auth_face      IF OBJECT_ID('tempdb..#sum_oface_table', 'U') IS NOT NULL DROP TABLE #sum_oface_table        IF OBJECT_ID('tempdb..#temp_PRIM_INST', 'U') IS NOT NULL DROP TABLE #temp_PRIM_INST     IF OBJECT_ID('tempdb..#Latest_pm_ord', 'U') IS NOT NULL DROP TABLE #Latest_pm_ord     IF OBJECT_ID('tempdb..#Latest_pm_ord_comm', 'U') IS NOT NULL DROP TABLE #Latest_pm_ord_comm     IF OBJECT_ID('tempdb..#Latest_pm_ord_reason', 'U') IS NOT NULL DROP TABLE #Latest_pm_ord_reason     IF OBJECT_ID('tempdb..#Latest_temp_trades_distinct', 'U') IS NOT NULL DROP TABLE #Latest_temp_trades_distinct     IF OBJECT_ID('tempdb..#Latest_temp_trades', 'U') IS NOT NULL DROP TABLE #Latest_temp_trades     IF OBJECT_ID('tempdb..#concat_ord', 'U') IS NOT NULL DROP TABLE #concat_ord     IF OBJECT_ID('tempdb..#max_touch_table_trader_pmo', 'U') IS NOT NULL DROP TABLE #max_touch_table_trader_pmo     IF OBJECT_ID('tempdb..#max_touch_table_trader_trdo', 'U') IS NOT NULL DROP TABLE #max_touch_table_trader_trdo     IF OBJECT_ID('tempdb..#Latest_trader_trdo', 'U') IS NOT NULL DROP TABLE #Latest_trader_trdo     IF OBJECT_ID('tempdb..#Latest_trader', 'U') IS NOT NULL DROP TABLE #Latest_trader     IF OBJECT_ID('tempdb..#max_touch_table_PM', 'U') IS NOT NULL DROP TABLE #max_touch_table_PM     IF OBJECT_ID('tempdb..#Latest_PM', 'U') IS NOT NULL DROP TABLE #Latest_PM     IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids     IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table            END                --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_PM_ORDER_TABLE_VG_09_TIMELY_EXECUTION_CASH  CreateDate: 2025-06-26 18:00:05.913  ModifyDate: 2025-06-26 18:00:05.913  --- DEFINITION START ---  -- =============================================    -- Author:  <Lizzie Reynolds>    -- Create date: <26/06/2019>    -- Description: <master script for cash timely ex>        -- 26/04/2023 - created for ticket:    -- SURVG-800 - Added TRD Counterparty field to be used for trades from Aladdin side    -- 11/06/2024 - created for ticket:    -- SURVG-918 - Changed the Order By of a "Rate" column to make sure that "bank" column array of values aligns to "rates" column array of values.    -- =============================================    CREATE PROCEDURE [dbo].[MASTER_PM_ORDER_TABLE_VG_09_TIMELY_EXECUTION_CASH]         AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         --Used to track total time stored procedure took to run     DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()         IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids     SELECT DISTINCT ORDER_ID, SOURCE     INTO #distinct_ids     FROM VISTA_STAGING.DBO.VG_09_TIMELY_EXECUTION_CASH_MM_TABLE         UNION ALL         SELECT DISTINCT ORDER_ID, SOURCE     FROM VISTA_STAGING.DBO.VG_09_TIMELY_EXECUTION_CASH_RR_TABLE             --If the master table doesn't exist then we want to use all the data available, otherwise just the most recent data    IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE', 'U') IS NOT NULL    AND OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_RR_TABLE', 'U') IS NOT NULL    DELETE FROM #distinct_ids     where NOT EXISTS (SELECT od.ORDER_ID          FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_CASH od          WHERE od.ORDER_ID = #distinct_ids.ORDER_ID)    AND #distinct_ids.SOURCE = 'CM'        IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_RR_TABLE', 'U') IS NOT NULL    AND OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE', 'U') IS NOT NULL    DELETE FROM #distinct_ids     where NOT EXISTS (SELECT od.PM_ORD          FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od          WHERE od.PM_ORD = #distinct_ids.ORDER_ID)    AND #distinct_ids.SOURCE = 'AL'             IF OBJECT_ID('tempdb..#temp_cash_trades', 'U') IS NOT NULL DROP TABLE #temp_cash_trades     SELECT DISTINCT t.TRANSACTION_NUMBER     INTO #temp_cash_trades     FROM Vista_Reporting.dbo.CASH_TRADES t     INNER JOIN #distinct_ids di ON di.ORDER_ID = t.ORDER_ID          UNION          SELECT DISTINCT tr.MULTI_FUND_ID     FROM Vista_Reporting.dbo.ORDERS_CROSS oc     INNER JOIN #distinct_ids di ON di.ORDER_ID = oc.PM_ORD     LEFT JOIN Vista_Reporting.dbo.TRADES tr on oc.TRD_ORD = tr.ORD_NUM              IF OBJECT_ID('tempdb..#distinct_trade_ids', 'U') IS NOT NULL DROP TABLE #distinct_trade_ids     SELECT DISTINCT       oc.TRD_ORD,      t.MULTI_FUND_ID     INTO #distinct_trade_ids     FROM #distinct_ids di     LEFT JOIN Vista_Reporting.dbo.ORDERS_CROSS oc ON oc.PM_ORD = di.ORDER_ID     INNER JOIN Vista_Reporting.dbo.TRADES t ON t.ORD_NUM = oc.TRD_ORD                 IF OBJECT_ID('tempdb..#temp_max_trade_touch', 'U') IS NOT NULL DROP TABLE #temp_max_trade_touch     SELECT      t.MULTI_FUND_ID,      MAX(t.TOUCH_COUNT) AS MAX_TOUCH     INTO #temp_max_trade_touch     FROM VISTA_REPORTING.dbo.TRADES t     INNER JOIN #distinct_trade_ids tid ON tid.MULTI_FUND_ID=t.MULTI_FUND_ID     INNER JOIN #temp_cash_trades tct ON tct.TRANSACTION_NUMBER = t.MULTI_FUND_ID     GROUP BY t.MULTI_FUND_ID             IF OBJECT_ID('tempdb..#temp_max_ORDER_touch', 'U') IS NOT NULL DROP TABLE #temp_max_ORDER_touch     SELECT      po.ORD_NUM,      MAX(po.TOUCH_COUNT) AS MAX_TOUCH     INTO #temp_max_ORDER_touch     FROM VISTA_REPORTING.dbo.PM_ORDERS po     INNER JOIN #distinct_ids di ON di.ORDER_ID=po.ORD_NUM     GROUP BY ORD_NUM                 IF OBJECT_ID('tempdb..#temp_recent_dealer_al', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_al     SELECT DISTINCT oc.PM_ORD AS ORD_NUM,      trd_trader      INTO #temp_recent_dealer_al      FROM VISTA_REPORTING.dbo.TRADES t      INNER JOIN #distinct_trade_ids tid ON tid.MULTI_FUND_ID=t.MULTI_FUND_ID      LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = t.ORD_NUM      INNER JOIN (SELECT         OC.PM_ORD AS ORD_NUM,         MAX(EXECUTION_TIME) AS MAX_EXEC,         MAX(TOUCH_COUNT) AS MAX_TOUCH         FROM VISTA_REPORTING.dbo.TRADES T         LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS OC ON OC.TRD_ORD = T.ORD_NUM         GROUP BY OC.PM_ORD) T2 ON T2.ORD_NUM = OC.PM_ORD                AND T2.MAX_EXEC = t.EXECUTION_TIME               AND T2.MAX_TOUCH = t.TOUCH_COUNT      INNER JOIN #distinct_ids di ON di.ORDER_ID = t.ORD_NUM               IF OBJECT_ID('tempdb..#temp_max_ORDER_CM', 'U') IS NOT NULL DROP TABLE #temp_max_ORDER_CM     SELECT      co.order_id,      max(co.api_requested_date) AS max_date     INTO #temp_max_order_cm     FROM VISTA_REPORTING.dbo.CASH_ORDERS co     INNER JOIN #distinct_ids di ON di.ORDER_ID=co.ORDER_ID     GROUP BY co.ORDER_ID             IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades     SELECT      ct.TRANSACTION_NUMBER,      MAX(ct.API_REQUESTED_DATE) AS MAX_API_REQ     INTO #temp_max_req_trades     FROM VISTA_REPORTING.dbo.CASH_TRADES ct     INNER JOIN #distinct_ids di ON di.ORDER_ID=ct.ORDER_ID     GROUP BY ct.TRANSACTION_NUMBER             IF OBJECT_ID('tempdb..#temp_recent_dealer_cm', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_cm     SELECT DISTINCT     ct.ORDER_ID,         ct.DEALER_NAME     INTO #temp_recent_dealer_cm     FROM VISTA_REPORTING.dbo.CASH_TRADES ct     INNER JOIN #distinct_ids di ON di.ORDER_ID=ct.ORDER_ID     INNER JOIN (SELECT           ORDER_ID,          MAX(EXECUTED_DATETIME) AS MAX_EXEC,          MAX(API_REQUESTED_DATE) AS MAX_API_REQ          FROM VISTA_REPORTING.dbo.CASH_TRADES          GROUP BY ORDER_ID) ct2 ON nullif(ct2.ORDER_ID, '0') = ct.ORDER_ID                AND ct2.MAX_EXEC = ct.EXECUTED_DATETIME               AND ct2.MAX_API_REQ = ct.API_REQUESTED_DATE                -- SURVG-800         IF OBJECT_ID('tempdb..#temp_mf_conc_mm', 'U') IS NOT NULL DROP TABLE #temp_mf_conc_mm     SELECT DISTINCT      e.[ORDER_ID]      ,CASE WHEN e.SOURCE = 'AL' THEN T.MULTI_FUND_ID WHEN e.SOURCE = 'CM' THEN CT.TRANSACTION_NUMBER END AS [TRANSACTION_NUMBER]      ,CASE WHEN e.SOURCE = 'AL' THEN T.TRD_ORIG_FACE WHEN e.SOURCE = 'CM' THEN CT.DEALT_AMOUNT END AS  [DEALT_AMOUNT]      ,CASE WHEN e.SOURCE = 'AL' THEN T.TRAN_TYPE WHEN e.SOURCE = 'CM' THEN CT.TRANSACTION_TYPE END AS  [TRANSACTION_TYPE]      , PROPOSED_DATE_TIME      , CONFIRMED_DATETIME      , EXECUTED_DATETIME      ,CASE WHEN e.SOURCE = 'AL' THEN DATEDIFF(MINUTE, PM.ACTIVE_TIME, max(T.EXECUTION_TIME)) WHEN e.SOURCE = 'CM' THEN DATEDIFF(MINUTE, CO.ACCEPTED_DATETIME, max(CT.EXECUTED_DATETIME)) END AS [TIME_ELAPSED_BETWEEN_EXECUTED_TO_ACCEPTED_MINS]      ,CASE WHEN e.SOURCE = 'AL' THEN DATEDIFF(MINUTE, PM.AUTH_TIME, max(T.EXECUTION_TIME)) WHEN e.SOURCE = 'CM' THEN DATEDIFF(MINUTE, CO.OMQ_DATE_TIME, max(CT.EXECUTED_DATETIME)) END AS [TIME_ELAPSED_BETWEEN_EXECUTED_TO_INSTRUCTION_MINS]      ,CT.[TIMELY_EXECUTION_EXCEPTION_REASON]      ,CT.[TIMELY_EXECUTION_EXCEPTION_NARRATION]      ,T.TRD_AUTH_TIME      ,CASE WHEN E.SOURCE = 'AL' THEN T.TRD_PRICE WHEN E.SOURCE = 'CM' THEN CT.EXECUTED_RATE END AS [EXECUTED_RATE]      ,CASE WHEN e.SOURCE = 'AL' THEN T.TRD_COUNTERPARTY WHEN e.SOURCE = 'CM' THEN ct.BANK END AS EXECUTED_BANK     INTO #temp_mf_conc_mm     FROM VISTA_STAGING.DBO.VG_09_TIMELY_EXECUTION_CASH_MM_TABLE e     LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.PM_ORD = e.ORDER_ID AND e.SOURCE = 'AL'     LEFT JOIN (SELECT DISTINCT ORD_NUM,  T.MULTI_FUND_ID, EXECUTION_TIME,  TRD_ORIG_FACE, TRD_PRICE, TRD_EX_BROKER_CODE, TRD_ENTRY_TIME,TRD_COUNTERPARTY, PULL_DATE, TOUCH_COUNT, TRAN_TYPE, TRD_AUTH_TIME           FROM VISTA_REPORTING.DBO.TRADES T          INNER JOIN #temp_max_trade_touch mtt ON mtt.MULTI_FUND_ID=t.MULTI_FUND_ID AND mtt.MAX_TOUCH=t.TOUCH_COUNT) T ON T.ORD_NUM = OC.TRD_ORD     LEFT JOIN (SELECT DISTINCT ORDER_ID, CT.TRANSACTION_NUMBER, EXECUTED_DATETIME, DEALT_AMOUNT, EXECUTED_RATE, BANK, UPLOADED_DATE_TIME,  PULL_DATE, TRANSACTION_TYPE,          PROPOSED_DATE_TIME, CONFIRMED_DATETIME, TIMELY_EXECUTION_EXCEPTION_NARRATION, TIMELY_EXECUTION_EXCEPTION_REASON           FROM VISTA_REPORTING.DBO.CASH_TRADES CT          INNER JOIN #temp_max_req_trades REQ ON REQ.TRANSACTION_NUMBER = CT.TRANSACTION_NUMBER AND REQ.MAX_API_REQ = CT.API_REQUESTED_DATE) CT ON CT.ORDER_ID = e.ORDER_ID     LEFT JOIN (SELECT DISTINCT PM.ORD_NUM, TOUCH_COUNT, ACTIVE_TIME, AUTH_TIME           FROM VISTA_REPORTING.DBO.PM_ORDERS PM          INNER JOIN #temp_max_ORDER_touch MOT ON MOT.ORD_NUM = PM.ORD_NUM AND MOT.MAX_TOUCH = PM.TOUCH_COUNT) PM ON PM.ORD_NUM = e.ORDER_ID     LEFT JOIN (SELECT DISTINCT ORDER_ID, ACCEPTED_DATETIME, INSTRUCTION_RECEIVED_DATE, OMQ_DATE_TIME FROM VISTA_REPORTING.DBO.CASH_ORDERS) CO ON CO.ORDER_ID = CT.ORDER_ID     INNER JOIN #distinct_ids di ON di.ORDER_ID = e.ORDER_ID     GROUP BY     E.ORDER_ID,     E.SOURCE,     T.MULTI_FUND_ID,     CT.TRANSACTION_NUMBER,     T.TRD_ORIG_FACE,     CT.DEALT_AMOUNT,     T.TRAN_TYPE,     CT.TRANSACTION_TYPE,     PROPOSED_DATE_TIME,     CONFIRMED_DATETIME,     EXECUTED_DATETIME,     ACTIVE_TIME,     ACCEPTED_DATETIME,     PM.AUTH_TIME,     CO.INSTRUCTION_RECEIVED_DATE,     TIMELY_EXECUTION_EXCEPTION_NARRATION,     TIMELY_EXECUTION_EXCEPTION_REASON,     T.TRD_AUTH_TIME,     ct.EXECUTED_RATE,     T.TRD_PRICE,     CO.OMQ_DATE_TIME,     CT.BANK,     T.TRD_COUNTERPARTY    -- END of SURVG-800         IF OBJECT_ID('tempdb..#temp_order_conc_mm', 'U') IS NOT NULL DROP TABLE #temp_order_conc_mm     SELECT DISTINCT       e.ORDER_ID      ,CASE WHEN e.SOURCE = 'AL' THEN CAST(ASD.STATUS_DECODE AS VARCHAR(20)) WHEN e.SOURCE = 'CM' THEN CAST(CO.INSTRUCTION_STATUS_DECODE AS VARCHAR(20)) END AS [INSTRUCTION_STATUS]      ,CASE WHEN e.SOURCE = 'AL' THEN CAST(ASD.STATUS_DECODE AS VARCHAR(20)) WHEN e.SOURCE = 'CM' THEN CAST(CT.TRANSACTION_STATUS_DECODE AS VARCHAR(20)) END AS [TRANSACTION_STATUS]      ,e.SOURCE     INTO #temp_order_conc_mm     FROM VISTA_STAGING.DBO.VG_09_TIMELY_EXECUTION_CASH_MM_TABLE e     LEFT JOIN (SELECT DISTINCT PM.ORD_NUM, STATUS, TOUCH_COUNT, ACTIVE_TIME FROM VISTA_REPORTING.DBO.PM_ORDERS PM     INNER JOIN #temp_max_ORDER_touch MOT ON MOT.ORD_NUM = PM.ORD_NUM AND MOT.MAX_TOUCH = PM.TOUCH_COUNT) PM ON PM.ORD_NUM = e.ORDER_ID AND e.SOURCE = 'AL'     LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.PM_ORD = e.ORDER_ID AND e.SOURCE = 'AL'     LEFT JOIN (SELECT DISTINCT ORD_NUM, T.MULTI_FUND_ID, TRD_STATUS, TOUCH_COUNT FROM VISTA_REPORTING.DBO.TRADES T      INNER JOIN #temp_max_trade_touch MTT ON MTT.MAX_TOUCH = T.TOUCH_COUNT AND MTT.MULTI_FUND_ID = T.MULTI_FUND_ID) T ON T.ORD_NUM = OC.TRD_ORD AND e.SOURCE = 'AL'     LEFT JOIN VISTA_STAGING.DBO.REF_cash_ALADDIN_STATUS_DECODE ASD ON e.SOURCE = 'AL' AND (ASD.[STATUS] = T.TRD_STATUS OR ASD.[STATUS] = PM.STATUS)     LEFT JOIN (SELECT DISTINCT INSTRUCTION_STATUS_DECODE, ORDER_ID FROM VISTA_REPORTING.DBO.CASH_ORDERS) CO ON e.SOURCE = 'CM' AND e.ORDER_ID = CO.ORDER_ID     LEFT JOIN (SELECT DISTINCT TRANSACTION_STATUS_DECODE, ORDER_ID FROM VISTA_REPORTING.DBO.CASH_TRADES) CT ON e.SOURCE = 'CM' AND e.ORDER_ID = CT.ORDER_ID     INNER JOIN #distinct_ids di ON di.ORDER_ID = e.ORDER_ID        -- SURVG-800     IF OBJECT_ID('tempdb..#temp_mf_conc_rr', 'U') IS NOT NULL DROP TABLE #temp_mf_conc_rr     SELECT DISTINCT      e.[ORDER_ID]      ,CT.TRANSACTION_NUMBER AS [TRANSACTION_NUMBER]      ,CT.DEALT_AMOUNT  AS  [DEALT_AMOUNT]      ,CT.TRANSACTION_TYPE AS  [TRANSACTION_TYPE]      , PROPOSED_DATE_TIME      , CONFIRMED_DATETIME      , EXECUTED_DATETIME      ,CASE WHEN e.SOURCE = 'AL' THEN DATEDIFF(MINUTE, PM.ACTIVE_TIME, max(T.EXECUTION_TIME)) WHEN e.SOURCE = 'CM' THEN DATEDIFF(MINUTE, CO.ACCEPTED_DATETIME, CT.EXECUTED_DATETIME) END AS [TIME_ELAPSED_BETWEEN_EXECUTED_TO_ACCEPTED_MINS]      ,CASE WHEN e.SOURCE = 'AL' THEN DATEDIFF(MINUTE, PM.AUTH_TIME, max(T.EXECUTION_TIME)) WHEN e.SOURCE = 'CM' THEN DATEDIFF(MINUTE, CO.OMQ_DATE_TIME, CT.EXECUTED_DATETIME) END AS [TIME_ELAPSED_BETWEEN_EXECUTED_TO_INSTRUCTION_MINS]      ,CT.[TIMELY_EXECUTION_EXCEPTION_REASON]      ,CT.[TIMELY_EXECUTION_EXCEPTION_NARRATION]      ,TDD.FULL_NAME  AS [DEALER_NAME]       ,CT.EXECUTED_RATE      ,CASE WHEN e.SOURCE = 'AL' THEN T.TRD_COUNTERPARTY WHEN e.SOURCE = 'CM' THEN  ct.BANK END AS EXECUTED_BANK     INTO #temp_mf_conc_rr     FROM VISTA_STAGING.DBO.VG_09_TIMELY_EXECUTION_CASH_RR_TABLE e     LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.PM_ORD = e.ORDER_ID AND e.SOURCE = 'AL'     LEFT JOIN (SELECT DISTINCT ORD_NUM,  T.MULTI_FUND_ID, EXECUTION_TIME,  TRD_ORIG_FACE, TRD_PRICE, TRD_EX_BROKER_CODE, TRD_ENTRY_TIME, TRD_COUNTERPARTY, PULL_DATE, TOUCH_COUNT, TRAN_TYPE           FROM VISTA_REPORTING.DBO.TRADES T          INNER JOIN #temp_max_trade_touch mtt ON mtt.MULTI_FUND_ID=t.MULTI_FUND_ID AND mtt.MAX_TOUCH=t.TOUCH_COUNT) T ON T.ORD_NUM = OC.TRD_ORD     LEFT JOIN (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, DEALER_NAME, EXECUTED_DATETIME, DEALT_AMOUNT, EXECUTED_RATE, BANK, UPLOADED_DATE_TIME,  PULL_DATE, TRANSACTION_TYPE,          PROPOSED_DATE_TIME, CONFIRMED_DATETIME, TIMELY_EXECUTION_EXCEPTION_NARRATION, TIMELY_EXECUTION_EXCEPTION_REASON           FROM VISTA_REPORTING.DBO.CASH_TRADES) CT ON CT.ORDER_ID = e.ORDER_ID AND e.SOURCE = 'CM'     LEFT JOIN (SELECT DISTINCT PM.ORD_NUM, TOUCH_COUNT, ACTIVE_TIME, AUTH_TIME           FROM VISTA_REPORTING.DBO.PM_ORDERS PM     INNER JOIN #temp_max_ORDER_touch MOT ON MOT.ORD_NUM = PM.ORD_NUM AND MOT.MAX_TOUCH = PM.TOUCH_COUNT) PM ON PM.ORD_NUM = e.ORDER_ID AND e.SOURCE = 'AL'     LEFT JOIN (SELECT DISTINCT ORDER_ID, ACCEPTED_DATETIME, INSTRUCTION_RECEIVED_DATE, OMQ_DATE_TIME, PULL_DATE FROM VISTA_REPORTING.DBO.CASH_ORDERS) CO ON CO.ORDER_ID = CT.ORDER_ID        LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD ON (TDD.CASH_MANAGER_USER_ID = CT.DEALER_NAME AND e.SOURCE = 'CM')                          AND CAST(CO.PULL_DATE AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE)     INNER JOIN #distinct_ids di ON di.ORDER_ID = e.ORDER_ID     GROUP BY     e.ORDER_ID,     CT.TRANSACTION_NUMBER,     CT.DEALT_AMOUNT,     CT.TRANSACTION_TYPE,     PROPOSED_DATE_TIME,     CONFIRMED_DATETIME,     EXECUTED_DATETIME,     e.SOURCE,     PM.ACTIVE_TIME,     CO.ACCEPTED_DATETIME,     PM.AUTH_TIME,     CT.TIMELY_EXECUTION_EXCEPTION_NARRATION,     CT.TIMELY_EXECUTION_EXCEPTION_REASON,     CO.INSTRUCTION_RECEIVED_DATE,     TDD.FULL_NAME,     CT.EXECUTED_RATE,     CO.OMQ_DATE_TIME,     CT.BANK,     T.TRD_COUNTERPARTY        --End of SURVG-800         IF OBJECT_ID('tempdb..#temp_order_conc_rr', 'U') IS NOT NULL DROP TABLE #temp_order_conc_rr     SELECT DISTINCT       e.ORDER_ID      ,CASE WHEN e.SOURCE = 'AL' THEN CAST(ASD.STATUS_DECODE AS VARCHAR(20)) WHEN e.SOURCE = 'CM' THEN CAST(CO.INSTRUCTION_STATUS_DECODE AS VARCHAR(20)) END AS [INSTRUCTION_STATUS]      ,CASE WHEN e.SOURCE = 'AL' THEN CAST(ASD.STATUS_DECODE AS VARCHAR(20)) WHEN e.SOURCE = 'CM' THEN CAST(CT.TRANSACTION_STATUS_DECODE AS VARCHAR(20)) END AS [TRANSACTION_STATUS]      ,e.SOURCE      INTO #temp_order_conc_rr      FROM VISTA_STAGING.DBO.VG_09_TIMELY_EXECUTION_CASH_RR_TABLE e      LEFT JOIN (SELECT DISTINCT PM.ORD_NUM, STATUS, TOUCH_COUNT FROM VISTA_REPORTING.DBO.PM_ORDERS PM      INNER JOIN #temp_max_ORDER_touch MOT ON MOT.ORD_NUM = PM.ORD_NUM AND MOT.MAX_TOUCH = PM.TOUCH_COUNT) PM ON PM.ORD_NUM = e.ORDER_ID AND e.SOURCE = 'AL'      LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.PM_ORD = e.ORDER_ID AND e.SOURCE = 'AL'      LEFT JOIN (SELECT DISTINCT ORD_NUM, T.MULTI_FUND_ID, TRD_STATUS, TOUCH_COUNT FROM VISTA_REPORTING.DBO.TRADES T       INNER JOIN #temp_max_trade_touch MTT ON MTT.MAX_TOUCH = T.TOUCH_COUNT AND MTT.MULTI_FUND_ID = T.MULTI_FUND_ID) T ON T.ORD_NUM = OC.TRD_ORD AND e.SOURCE = 'AL'      LEFT JOIN VISTA_STAGING.DBO.REF_cash_ALADDIN_STATUS_DECODE ASD ON e.SOURCE = 'AL' AND (ASD.[STATUS] = T.TRD_STATUS OR ASD.[STATUS] = PM.STATUS)      LEFT JOIN (SELECT DISTINCT INSTRUCTION_STATUS_DECODE, ORDER_ID FROM VISTA_REPORTING.DBO.CASH_ORDERS) CO ON e.SOURCE = 'CM' AND e.ORDER_ID = CO.ORDER_ID      LEFT JOIN (SELECT DISTINCT TRANSACTION_STATUS_DECODE, ORDER_ID FROM VISTA_REPORTING.DBO.CASH_TRADES) CT ON e.SOURCE = 'CM' AND e.ORDER_ID = CT.ORDER_ID      INNER JOIN #distinct_ids di ON di.ORDER_ID = e.ORDER_ID             IF OBJECT_ID('tempdb..#TEMP_TRADES_DISTINCT', 'U') IS NOT NULL DROP TABLE #TEMP_TRADES_DISTINCT     SELECT DISTINCT        oc.PM_ORD AS ORD_NUM,        t.MULTI_FUND_ID,        ABS(pm.FACE) AS FACE,       t.TRD_ORIG_FACE     INTO #TEMP_TRADES_DISTINCT     FROM VISTA_REPORTING.DBO.TRADES T     INNER JOIN #distinct_trade_ids tid on tid.MULTI_FUND_ID=T.MULTI_FUND_ID     LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.TRD_ORD = T.ORD_NUM     LEFT JOIN(SELECT PM.ORD_NUM, PM.FACE, PM.FILL_AMT, PM.TOUCH_COUNT FROM  VISTA_REPORTING.DBO.PM_ORDERS PM INNER JOIN #temp_max_ORDER_touch MOT ON MOT.ORD_NUM = PM.ORD_NUM AND MOT.MAX_TOUCH = PM.TOUCH_COUNT) PM ON OC.PM_ORD = PM.ORD_NUM     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, DEALING_DESK FROM VISTA_REPORTING.DBO.PRIMARY_INST_TYPE_TABLE) PRIM ON PRIM.MULTI_FUND_ID = T.MULTI_FUND_ID     INNER JOIN #temp_cash_trades tct ON tct.TRANSACTION_NUMBER = T.MULTI_FUND_ID             IF OBJECT_ID('tempdb..#REMAIN_AMT', 'U') IS NOT NULL DROP TABLE #REMAIN_AMT     SELECT DISTINCT      ORD_NUM AS ORDER_ID,       MULTI_FUND_ID,      SUM(ABS(TRD_ORIG_FACE)) AS [Booked_Amt],      FACE - SUM(ABS(TRD_ORIG_FACE)) AS [Remain_Amt],      'AL' AS SOURCE     INTO #REMAIN_AMT     FROM #TEMP_TRADES_DISTINCT T      GROUP BY      ORD_NUM,      MULTI_FUND_ID,      FACE         IF OBJECT_ID('tempdb..#TEMP_TRADES_DISTINCT_CM', 'U') IS NOT NULL DROP TABLE #TEMP_TRADES_DISTINCT_CM      SELECT DISTINCT CO.ORDER_ID       , CT.TRANSACTION_NUMBER       , INSTRUCTED_AMOUNT       , DEALT_AMOUNT      INTO #TEMP_TRADES_DISTINCT_CM      FROM VISTA_REPORTING.DBO.CASH_TRADES CT      LEFT JOIN (SELECT DISTINCT ORDER_ID, INSTRUCTED_AMOUNT FROM VISTA_REPORTING.DBO.CASH_ORDERS) CO ON CO.ORDER_ID = CT.ORDER_ID             IF OBJECT_ID('tempdb..#REMAIN_AMT_CM', 'U') IS NOT NULL DROP TABLE #REMAIN_AMT_CM     SELECT DISTINCT      ORDER_ID,      TRANSACTION_NUMBER,      SUM(ABS(DEALT_AMOUNT)) AS INSTRUCTION_COMPLETED_AMOUNT,      INSTRUCTED_AMOUNT - SUM(ABS(DEALT_AMOUNT)) AS INSTRUCTION_REMAINING_AMOUNT,      'CM' AS SOURCE     INTO #REMAIN_AMT_CM     FROM #TEMP_TRADES_DISTINCT_CM      GROUP BY      ORDER_ID,      TRANSACTION_NUMBER,      DEALT_AMOUNT,      INSTRUCTED_AMOUNT                     IF OBJECT_ID('tempdb..#concat_mm', 'U') IS NOT NULL DROP TABLE #concat_mm     SELECT      vg.ORDER_ID,      vg.SOURCE,      STUFF((       SELECT  ' | ' + CAST(TRANSACTION_NUMBER AS VARCHAR(50))       FROM #temp_mf_conc_mm       WHERE (ORDER_ID = vg.ORDER_ID        --AND SOURCE = vg.SOURCE        AND TRANSACTION_NUMBER is NOT NULL) ORDER BY TRANSACTION_NUMBER       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS TRANSACTION_NUMBER,      STUFF((       SELECT  ' | ' + CAST(TRANSACTION_STATUS AS VARCHAR(50))       FROM #temp_order_conc_mm       WHERE (ORDER_ID = vg.ORDER_ID        --AND SOURCE = vg.SOURCE        AND TRANSACTION_STATUS is NOT NULL) ORDER BY ORDER_ID, TRANSACTION_STATUS       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS TRANSACTION_STATUS,       STUFF((       SELECT  ' | ' + CAST(INSTRUCTION_STATUS AS VARCHAR(50))       FROM #temp_order_conc_mm       WHERE (ORDER_ID = vg.ORDER_ID        --AND SOURCE = vg.SOURCE        AND INSTRUCTION_STATUS is NOT NULL)       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS INSTRUCTION_STATUS,      STUFF((       SELECT  ' | ' + CAST(FORMAT(CONVERT(DECIMAL(38,2),DEALT_AMOUNT), '#,0.00') AS VARCHAR(50))       FROM #temp_mf_conc_mm       WHERE (ORDER_ID = vg.ORDER_ID        --AND SOURCE = vg.SOURCE        AND DEALT_AMOUNT is NOT NULL) ORDER BY TRANSACTION_NUMBER       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS DEALT_AMOUNT,       STUFF((       SELECT  ' | ' + CAST(TRANSACTION_TYPE AS VARCHAR(50))       FROM #temp_mf_conc_mm       WHERE (ORDER_ID = vg.ORDER_ID        --AND SOURCE = vg.SOURCE        AND TRANSACTION_TYPE is NOT NULL) ORDER BY TRANSACTION_NUMBER       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS TRANSACTION_TYPE,        STUFF((       SELECT  ' | ' + CAST(FORMAT(PROPOSED_DATE_TIME, 'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50))       FROM #temp_mf_conc_mm       WHERE (ORDER_ID = vg.ORDER_ID        --AND SOURCE = vg.SOURCE        AND PROPOSED_DATE_TIME is NOT NULL) ORDER BY TRANSACTION_NUMBER       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS PROPOSED_DATE_TIME,        STUFF((       SELECT  ' | ' + CAST(FORMAT(CONFIRMED_DATETIME, 'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50))       FROM #temp_mf_conc_mm       WHERE (ORDER_ID = vg.ORDER_ID        --AND SOURCE = vg.SOURCE        AND CONFIRMED_DATETIME is NOT NULL) ORDER BY TRANSACTION_NUMBER       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS CONFIRMED_DATETIME,        STUFF((       SELECT  ' | ' + CAST(convert(datetime2,EXECUTED_DATETIME) AS VARCHAR(50))       FROM #temp_mf_conc_mm       WHERE (ORDER_ID = vg.ORDER_ID        --AND SOURCE = vg.SOURCE        AND EXECUTED_DATETIME is NOT NULL) ORDER BY TRANSACTION_NUMBER       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS EXECUTED_DATETIME,      STUFF((       SELECT  ' | ' + CAST(FORMAT(CONVERT(DECIMAL(38,2),Booked_Amt), '#,0.00') AS VARCHAR(50))        FROM #REMAIN_AMT r       WHERE (ORDER_ID = vg.ORDER_ID        AND r.SOURCE = vg.SOURCE        AND Booked_Amt is NOT NULL) ORDER BY r.MULTI_FUND_ID       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS INSTRUCTION_COMPLETED_AMOUNT_AL,      STUFF((       SELECT  ' | ' + CAST(FORMAT(CONVERT(DECIMAL(38,2),Remain_Amt), '#,0.00') AS VARCHAR(50))        FROM #REMAIN_AMT r       WHERE (ORDER_ID = vg.ORDER_ID        AND r.SOURCE = vg.SOURCE        AND Remain_Amt is NOT NULL )ORDER BY  r.MULTI_FUND_ID       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS INSTRUCTION_REMAINING_AMOUNT_AL,      STUFF((       SELECT  ' | ' + CAST(FORMAT(CONVERT(DECIMAL(38,2),INSTRUCTION_COMPLETED_AMOUNT), '#,0.00') AS VARCHAR(50))       FROM #REMAIN_AMT_CM r       WHERE (ORDER_ID = vg.ORDER_ID        AND r.SOURCE = vg.SOURCE        AND INSTRUCTION_COMPLETED_AMOUNT is NOT NULL) ORDER BY TRANSACTION_NUMBER       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS INSTRUCTION_COMPLETED_AMOUNT_CM,      STUFF((       SELECT  ' | ' + CAST(FORMAT(CONVERT(DECIMAL(38,2),INSTRUCTION_REMAINING_AMOUNT), '#,0.00') AS VARCHAR(50))       FROM #REMAIN_AMT_CM r       WHERE (ORDER_ID = vg.ORDER_ID        AND r.SOURCE = vg.SOURCE        AND INSTRUCTION_REMAINING_AMOUNT is NOT NULL) ORDER BY TRANSACTION_NUMBER       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS INSTRUCTION_REMAINING_AMOUNT_CM,      STUFF((       SELECT  ' | ' + CAST([TIME_ELAPSED_BETWEEN_EXECUTED_TO_ACCEPTED_MINS] AS VARCHAR(50))       FROM #temp_mf_conc_mm       WHERE (ORDER_ID = vg.ORDER_ID        --AND SOURCE = vg.SOURCE        AND [TIME_ELAPSED_BETWEEN_EXECUTED_TO_ACCEPTED_MINS] is NOT NULL)        ORDER BY TRANSACTION_NUMBER, ' | ' + CAST([TIME_ELAPSED_BETWEEN_EXECUTED_TO_ACCEPTED_MINS] AS VARCHAR(50))       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS [TIME_ELAPSED_BETWEEN_EXECUTED_TO_ACCEPTED_MINS],      STUFF((       SELECT  ' | ' + CAST([TIME_ELAPSED_BETWEEN_EXECUTED_TO_INSTRUCTION_MINS] AS VARCHAR(50))       FROM #temp_mf_conc_mm       WHERE (ORDER_ID = vg.ORDER_ID        --AND SOURCE = vg.SOURCE        AND [TIME_ELAPSED_BETWEEN_EXECUTED_TO_INSTRUCTION_MINS] is NOT NULL)        ORDER BY TRANSACTION_NUMBER, ' | ' + CAST([TIME_ELAPSED_BETWEEN_EXECUTED_TO_INSTRUCTION_MINS] AS VARCHAR(50))       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS [TIME_ELAPSED_BETWEEN_EXECUTED_TO_INSTRUCTION_MINS],      STUFF((       SELECT  ' | ' + CAST([TIMELY_EXECUTION_EXCEPTION_REASON] AS VARCHAR(MAX))       FROM #temp_mf_conc_mm       WHERE (ORDER_ID = vg.ORDER_ID        --AND SOURCE = vg.SOURCE        AND [TIMELY_EXECUTION_EXCEPTION_REASON] is NOT NULL)        ORDER BY TRANSACTION_NUMBER, ' | ' + CAST([TIMELY_EXECUTION_EXCEPTION_REASON] AS VARCHAR(MAX))       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS [TIMELY_EXECUTION_EXCEPTION_REASON],      STUFF((       SELECT  ' | ' + CAST(TIMELY_EXECUTION_EXCEPTION_NARRATION AS VARCHAR(MAX))       FROM #temp_mf_conc_mm       WHERE (ORDER_ID = vg.ORDER_ID        --AND SOURCE = vg.SOURCE        AND TIMELY_EXECUTION_EXCEPTION_NARRATION is NOT NULL)        ORDER BY TRANSACTION_NUMBER, ' | ' + CAST(TIMELY_EXECUTION_EXCEPTION_NARRATION AS VARCHAR(MAX))       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS TIMELY_EXECUTION_EXCEPTION_NARRATION,      STUFF((       SELECT  ' | ' + CAST(FORMAT(TRD_AUTH_TIME, 'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50))       FROM #temp_mf_conc_mm       WHERE (ORDER_ID = vg.ORDER_ID        --AND SOURCE = vg.SOURCE        AND TRD_AUTH_TIME is NOT NULL) ORDER BY TRANSACTION_NUMBER       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS TRD_AUTH_TIME,      STUFF((       SELECT  ' | ' + CAST(CONVERT(DECIMAL(38,4),EXECUTED_RATE) AS varchar(50))       FROM #temp_mf_conc_mm       WHERE (ORDER_ID = vg.ORDER_ID        --AND SOURCE = vg.SOURCE        AND EXECUTED_RATE is NOT NULL) ORDER BY TRANSACTION_NUMBER       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS EXECUTED_RATE,        STUFF((       SELECT  ' | ' + CAST(EXECUTED_BANK AS varchar(50))       FROM #temp_mf_conc_mm        WHERE (ORDER_ID = vg.ORDER_ID        --AND SOURCE = vg.SOURCE        AND EXECUTED_BANK is NOT NULL) ORDER BY TRANSACTION_NUMBER       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS EXECUTED_BANK     INTO #concat_mm     FROM VISTA_STAGING.DBO.VG_09_TIMELY_EXECUTION_CASH_MM_TABLE VG     INNER JOIN #distinct_ids di ON di.ORDER_ID = VG.ORDER_ID             IF OBJECT_ID('tempdb..#concat_rr', 'U') IS NOT NULL DROP TABLE #concat_rr     SELECT      vg.ORDER_ID,      vg.SOURCE,      STUFF((       SELECT  ' | ' + CAST(tmc.TRANSACTION_NUMBER AS VARCHAR(50))       FROM #temp_mf_conc_rr tmc       WHERE (tmc.ORDER_ID = vg.ORDER_ID            --AND tmc.SOURCE = vg.SOURCE            AND tmc.TRANSACTION_NUMBER is NOT NULL) ORDER BY tmc.TRANSACTION_NUMBER       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS TRANSACTION_NUMBER,      STUFF((       SELECT  ' | ' + CAST(toc.TRANSACTION_STATUS AS VARCHAR(50))       FROM #temp_order_conc_rr toc       WHERE (toc.ORDER_ID = vg.ORDER_ID            AND toc.SOURCE = vg.SOURCE            AND toc.TRANSACTION_STATUS is NOT NULL) ORDER BY toc.ORDER_ID, toc.TRANSACTION_STATUS       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS TRANSACTION_STATUS,      STUFF((       SELECT  ' | '  + CAST(FORMAT(CONVERT(DECIMAL(38,2), tmc.DEALT_AMOUNT), '#,0.00') AS VARCHAR(50))       FROM #temp_mf_conc_rr tmc       WHERE (tmc.ORDER_ID = vg.ORDER_ID               --AND tmc.SOURCE = vg.SOURCE            AND tmc.DEALT_AMOUNT is NOT NULL) ORDER BY tmc.TRANSACTION_NUMBER       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS DEALT_AMOUNT,       STUFF((       SELECT  ' | ' + CAST(tmc.TRANSACTION_TYPE AS VARCHAR(50))       FROM #temp_mf_conc_rr tmc       WHERE (tmc.ORDER_ID = vg.ORDER_ID            --AND tmc.SOURCE = vg.SOURCE            AND tmc.TRANSACTION_TYPE is NOT NULL) ORDER BY tmc.TRANSACTION_NUMBER       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS TRANSACTION_TYPE,        STUFF((       SELECT  ' | ' + CAST(FORMAT(tmc.PROPOSED_DATE_TIME, 'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50))       FROM #temp_mf_conc_rr tmc       WHERE (tmc.ORDER_ID = vg.ORDER_ID            --AND tmc.SOURCE = vg.SOURCE            AND tmc.PROPOSED_DATE_TIME is NOT NULL) ORDER BY tmc.TRANSACTION_NUMBER       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS PROPOSED_DATE_TIME,        STUFF((       SELECT  ' | ' + CAST(FORMAT(tmc.CONFIRMED_DATETIME, 'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50))       FROM #temp_mf_conc_rr tmc       WHERE (tmc.ORDER_ID = vg.ORDER_ID            --AND tmc.SOURCE = vg.SOURCE            AND tmc.CONFIRMED_DATETIME is NOT NULL) ORDER BY tmc.TRANSACTION_NUMBER       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS CONFIRMED_DATETIME,        STUFF((       SELECT  ' | ' + CAST(FORMAT(tmc.EXECUTED_DATETIME, 'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50))       FROM #temp_mf_conc_rr tmc       WHERE (tmc.ORDER_ID = vg.ORDER_ID            --AND tmc.SOURCE = vg.SOURCE            AND tmc.EXECUTED_DATETIME is NOT NULL) ORDER BY tmc.TRANSACTION_NUMBER       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS EXECUTED_DATETIME,      STUFF((       SELECT  ' | ' + CAST(FORMAT(CONVERT(DECIMAL(38,2), r.Booked_Amt), '#,0.00') AS VARCHAR(50))       FROM #REMAIN_AMT r       WHERE (r.ORDER_ID = vg.ORDER_ID            AND r.SOURCE = vg.SOURCE            AND r.Booked_Amt is NOT NULL) ORDER BY  r.MULTI_FUND_ID       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS INSTRUCTION_COMPLETED_AMOUNT_AL,      STUFF((       SELECT  ' | ' + CAST(FORMAT(CONVERT(DECIMAL(38,2),r.Remain_Amt), '#,0.00') AS VARCHAR(50))       FROM #REMAIN_AMT r       WHERE (r.ORDER_ID = vg.ORDER_ID            AND r.SOURCE = vg.SOURCE            AND r.Remain_Amt is NOT NULL) ORDER BY  r.MULTI_FUND_ID       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS INSTRUCTION_REMAINING_AMOUNT_AL,      STUFF((       SELECT  ' | ' + CAST(FORMAT(CONVERT(DECIMAL(38,2), r.INSTRUCTION_COMPLETED_AMOUNT), '#,0.00') AS VARCHAR(50))       FROM #REMAIN_AMT_CM r       WHERE (r.ORDER_ID = vg.ORDER_ID            AND r.SOURCE = vg.SOURCE            AND r.INSTRUCTION_COMPLETED_AMOUNT is NOT NULL) ORDER BY  r.TRANSACTION_NUMBER       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS INSTRUCTION_COMPLETED_AMOUNT_CM,      STUFF((       SELECT  ' | ' + CAST(FORMAT(CONVERT(DECIMAL(38,2),r.INSTRUCTION_REMAINING_AMOUNT), '#,0.00') AS VARCHAR(50))       FROM #REMAIN_AMT_CM r       WHERE (r.ORDER_ID = vg.ORDER_ID            AND r.SOURCE = vg.SOURCE            AND r.INSTRUCTION_REMAINING_AMOUNT is NOT NULL) ORDER BY  r.TRANSACTION_NUMBER       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS INSTRUCTION_REMAINING_AMOUNT_CM,      STUFF((       SELECT  ' | ' + CAST(tmc.[TIME_ELAPSED_BETWEEN_EXECUTED_TO_ACCEPTED_MINS] AS VARCHAR(50))       FROM #temp_mf_conc_rr tmc       WHERE (tmc.ORDER_ID = vg.ORDER_ID            --AND tmc.SOURCE = vg.SOURCE            AND tmc.[TIME_ELAPSED_BETWEEN_EXECUTED_TO_ACCEPTED_MINS] is NOT NULL)            ORDER BY tmc.TRANSACTION_NUMBER, ' | ' + CAST(tmc.[TIME_ELAPSED_BETWEEN_EXECUTED_TO_ACCEPTED_MINS] AS VARCHAR(50))       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS [TIME_ELAPSED_BETWEEN_EXECUTED_TO_ACCEPTED_MINS],      STUFF((       SELECT  ' | ' + CAST(tmc.[TIME_ELAPSED_BETWEEN_EXECUTED_TO_INSTRUCTION_MINS] AS VARCHAR(50))       FROM #temp_mf_conc_rr tmc       WHERE (tmc.ORDER_ID = vg.ORDER_ID            --AND tmc.SOURCE = vg.SOURCE            AND tmc.[TIME_ELAPSED_BETWEEN_EXECUTED_TO_INSTRUCTION_MINS] is NOT NULL)            ORDER BY tmc.TRANSACTION_NUMBER,  ' | ' + CAST(tmc.[TIME_ELAPSED_BETWEEN_EXECUTED_TO_INSTRUCTION_MINS] AS VARCHAR(50))       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS [TIME_ELAPSED_BETWEEN_EXECUTED_TO_INSTRUCTION_MINS],      STUFF((       SELECT  ' | ' + CAST(tmc.[TIMELY_EXECUTION_EXCEPTION_REASON] AS VARCHAR(MAX))       FROM #temp_mf_conc_rr tmc       WHERE (tmc.ORDER_ID = vg.ORDER_ID            --AND tmc.SOURCE = vg.SOURCE            AND tmc.[TIMELY_EXECUTION_EXCEPTION_REASON] is NOT NULL)            ORDER BY tmc.TRANSACTION_NUMBER, ' | ' + CAST(tmc.[TIMELY_EXECUTION_EXCEPTION_REASON] AS VARCHAR(MAX))       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS [TIMELY_EXECUTION_EXCEPTION_REASON],      STUFF((       SELECT  ' | ' + CAST(tmc.TIMELY_EXECUTION_EXCEPTION_NARRATION AS VARCHAR(MAX))       FROM #temp_mf_conc_rr tmc       WHERE (tmc.ORDER_ID = vg.ORDER_ID            --AND tmc.SOURCE = vg.SOURCE            AND tmc.TIMELY_EXECUTION_EXCEPTION_NARRATION is NOT NULL)            ORDER BY tmc.TRANSACTION_NUMBER, ' | ' + CAST(tmc.TIMELY_EXECUTION_EXCEPTION_NARRATION AS VARCHAR(MAX))       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS TIMELY_EXECUTION_EXCEPTION_NARRATION,     STUFF((       SELECT  ' | ' + CAST(tmc.DEALER_NAME AS VARCHAR(50))       FROM #temp_mf_conc_rr tmc       WHERE (tmc.ORDER_ID = vg.ORDER_ID            --AND tmc.SOURCE = vg.SOURCE            AND tmc.DEALER_NAME is NOT NULL)       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS DEALER_NAME,      STUFF((       SELECT  ' | ' + CAST(CONVERT(DECIMAL(38,4), tmc.EXECUTED_RATE) AS varchar(50))       FROM #temp_mf_conc_rr tmc       WHERE (tmc.ORDER_ID = vg.ORDER_ID            --AND tmc.SOURCE = vg.SOURCE            AND tmc.EXECUTED_RATE is NOT NULL)            ORDER BY tmc.TRANSACTION_NUMBER       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS EXECUTED_RATE,      STUFF((       SELECT  ' | ' + CAST(tmc.EXECUTED_BANK AS varchar(50))       FROM #temp_mf_conc_rr tmc       WHERE (tmc.ORDER_ID = vg.ORDER_ID           --AND tmc.SOURCE = vg.SOURCE #           AND tmc.EXECUTED_BANK is NOT NULL)            ORDER BY tmc.TRANSACTION_NUMBER       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS EXECUTED_BANK     INTO #concat_rr     FROM VISTA_STAGING.DBO.VG_09_TIMELY_EXECUTION_CASH_RR_TABLE VG     INNER JOIN #distinct_ids di ON di.ORDER_ID = VG.ORDER_ID             --Losing Bank for CM     IF OBJECT_ID('tempdb..#losingbanktemp', 'U') IS NOT NULL DROP TABLE #losingbanktemp      SELECT DISTINCT      ex.[ORDER_ID],      BANK_CODE = STUFF((          SELECT  ', ' + BANK_CODE         FROM VISTA_REPORTING.dbo.CASH_BANK_RATES cbr         left join VISTA_REPORTING.dbo.CASH_TRADES ct         on cbr.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]         left join VISTA_REPORTING.dbo.CASH_ORDERS co         on ct.[ORDER_ID] = co.[ORDER_ID]         WHERE co.[ORDER_ID] = ex.[ORDER_ID] and cbr.[BANK_CODE] != ct.[BANK] and ex.SOURCE = 'CM'          ORDER BY ct.[TRANSACTION_NUMBER], ', ' + BANK_CODE          FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''),      RATE = STUFF((          SELECT  ', ' + CAST(CONVERT(DECIMAL(38,4),RATE) AS varchar(50))         FROM VISTA_REPORTING.dbo.CASH_BANK_RATES cbr         left join VISTA_REPORTING.dbo.CASH_TRADES ct         on cbr.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]         left join VISTA_REPORTING.dbo.CASH_ORDERS co         on ct.[ORDER_ID] = co.[ORDER_ID]         WHERE co.[ORDER_ID] = ex.[ORDER_ID] and cbr.[BANK_CODE] != ct.[BANK] and ex.SOURCE = 'CM'    -- SURVG-918         ORDER BY ct.[TRANSACTION_NUMBER], ', ' + BANK_CODE    -- /SURVG-918         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '')     INTO #losingbanktemp     FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_RR_TABLE ex     INNER JOIN #distinct_ids di ON di.ORDER_ID = ex.ORDER_ID     UNION     SELECT DISTINCT      ex.[ORDER_ID],      BANK_CODE = STUFF((          SELECT  ', ' + BANK_CODE         FROM VISTA_REPORTING.dbo.CASH_BANK_RATES cbr         left join VISTA_REPORTING.dbo.CASH_TRADES ct         on cbr.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]         WHERE ct.[ORDER_ID] = ex.[ORDER_ID] and cbr.[BANK_CODE] != ct.[BANK] and ex.SOURCE = 'CM'          ORDER BY ct.[TRANSACTION_NUMBER], ', ' + BANK_CODE         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''),      RATE = STUFF((          SELECT ', ' + CAST(CONVERT(DECIMAL(38,4),RATE) AS varchar(50))         FROM VISTA_REPORTING.dbo.CASH_BANK_RATES cbr         left join VISTA_REPORTING.dbo.CASH_TRADES ct         on cbr.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]         WHERE ct.[ORDER_ID] = ex.[ORDER_ID] and cbr.[BANK_CODE] != ct.[BANK] and ex.SOURCE = 'CM'     -- SURVG-918         ORDER BY ct.[TRANSACTION_NUMBER], ', ' + BANK_CODE     -- /SURVG-918         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '')     FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_MM_TABLE ex     INNER JOIN #distinct_ids di ON di.ORDER_ID = ex.ORDER_ID             --Losing Bank for AL     IF OBJECT_ID('tempdb..#losingquotetemp', 'U') IS NOT NULL DROP TABLE #losingquotetemp      SELECT DISTINCT      ex.[ORDER_ID],      TRD_COUNTERPARTY = STUFF((          SELECT  ', ' + c.TRD_COUNTERPARTY         FROM VISTA_REPORTING.dbo.TRADES t         left join VISTA_REPORTING.dbo.QUOTES q         on q.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]         left join VISTA_REPORTING.dbo.COUNTERPARTIES c         on c.[COUNTERPARTY_CODE] = q.[BROKER]         left join VISTA_REPORTING.dbo.ORDERS_CROSS oc         on t.ORD_NUM = oc.TRD_ORD         WHERE oc.[PM_ORD] = ex.[ORDER_ID] and q.[QUOTE_ORIGIN] = 'QUOTE' and t.[COUNTERPARTY_CODE] != q.[BROKER] and EX.SOURCE = 'AL' ORDER BY T.MULTI_FUND_ID         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''),      QUOTE_VALUE = STUFF((          SELECT  ', ' + CAST(CONVERT(DECIMAL(38,4),q.[QUOTE_VALUE]) AS varchar(50))         FROM VISTA_REPORTING.dbo.TRADES t         left join VISTA_REPORTING.dbo.QUOTES q         on q.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]         left join VISTA_REPORTING.dbo.COUNTERPARTIES c         on c.[COUNTERPARTY_CODE] = q.[BROKER]         left join VISTA_REPORTING.dbo.ORDERS_CROSS oc         on t.ORD_NUM = oc.TRD_ORD         WHERE oc.[PM_ORD] = ex.[ORDER_ID] and q.[QUOTE_ORIGIN] = 'QUOTE' and t.[COUNTERPARTY_CODE] != q.[BROKER] and EX.SOURCE = 'AL' ORDER BY T.MULTI_FUND_ID         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '')     INTO #losingquotetemp     FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_MM_TABLE ex     INNER JOIN #distinct_ids di ON di.ORDER_ID = ex.ORDER_ID             IF OBJECT_ID('tempdb..#temp_final_master_table_mm', 'U') IS NOT NULL DROP TABLE #temp_final_master_table_mm     SELECT DISTINCT       COALESCE(TDD.FULL_NAME, TDD2.FULL_NAME, dd.default_dealer)  AS [DEALER_NAME]       ,C.TIMELY_EXECUTION_EXCEPTION_REASON      ,C.TIMELY_EXECUTION_EXCEPTION_NARRATION      ,CASE WHEN e.SOURCE = 'AL' THEN format(PM.AUTH_TIME, 'dd/MM/yyyy HH:mm:ss') WHEN e.SOURCE = 'CM' THEN CAST(FORMAT(CO.INSTRUCTION_RECEIVED_DATE, 'dd/MM/yyyy HH:mm:ss') AS varchar(30)) END AS [INSTRUCTION_RECEIVED_DATE_TIME]      ,c.EXECUTED_BANK AS EXECUTED_BANK      ,CASE WHEN e.SOURCE = 'AL' THEN CAST(FORMAT(PM.ACTIVE_TIME, 'dd/MM/yyyy HH:mm:ss') AS varchar(30)) WHEN e.SOURCE = 'CM' THEN FORMAT(CO.OMQ_DATE_TIME, 'dd/MM/yyyy HH:mm:ss') END AS [OMQ_DATE_TIME]      ,CASE WHEN e.SOURCE = 'AL' THEN CAST(FORMAT(PM.ACTIVE_TIME, 'dd/MM/yyyy HH:mm:ss') AS varchar(30)) WHEN e.SOURCE = 'CM' THEN FORMAT(CO.ACCEPTED_DATETIME, 'dd/MM/yyyy HH:mm:ss') END AS  [ACCEPTED_DATE_TIME]      ,CASE WHEN e.SOURCE = 'AL' THEN CAST(FORMAT(PM.ACTIVE_TIME, 'dd/MM/yyyy HH:mm:ss') AS varchar(30)) WHEN e.SOURCE = 'CM' THEN C.PROPOSED_DATE_TIME END AS [PROPOSED_DATE_TIME] -- DIFFERENT FROM MM      ,CASE WHEN e.SOURCE = 'AL' THEN C.TRD_AUTH_TIME WHEN e.SOURCE = 'CM' THEN C.CONFIRMED_DATETIME END AS [CONFIRMED_DATE_TIME]      ,CASE WHEN e.SOURCE = 'AL' THEN DATEDIFF(MINUTE, PM.AUTH_TIME, PM.ACTIVE_TIME)  WHEN e.SOURCE = 'CM' THEN DATEDIFF(MINUTE, CO.OMQ_DATE_TIME, CO.ACCEPTED_DATETIME) END AS [TIME_ELAPSED_BETWEEN_ACCEPTED_TO_INSTRUCTION_MINS] -- we need to use omq_date_time for future dated orders (otherwise this field would be inflated)      ,C.TIME_ELAPSED_BETWEEN_EXECUTED_TO_ACCEPTED_MINS      ,c.TIME_ELAPSED_BETWEEN_EXECUTED_TO_INSTRUCTION_MINS      ,(e.TIMELY_EXEC_THRESHOLD_MINS)/60 AS [TIMELY_EXECUTION_THRESHOLD_MINS]      ,E.vg_09 as [EXCEPTION_FLAG]      , FORMAT(CO.INSTRUCTION_HOLDOVER_DATE_TIME, 'dd/MM/yyyy HH:mm:ss') AS [INSTRUCTION_HOLDOVER_DATE_TIME]      ,FORMAT(CO.INSTRUCTION_KNOCKEDBACK_DATETIME, 'dd/MM/yyyy HH:mm:ss') AS [INSTRUCTION_KNOCKED_BACK_DATE_TIME]      ,CASE WHEN e.SOURCE = 'CM' THEN CAST(CT.CLIENT_FUND_OR_POOL_CODE AS VARCHAR(30)) WHEN e.SOURCE = 'AL' THEN CAST(T.FUND AS VARCHAR(30))  END AS  [CLIENT_FUND_POOL_CODE]      ,CASE WHEN e.SOURCE = 'CM' THEN CAST(CT.BASE_FUND_CODE AS VARCHAR(30)) WHEN e.SOURCE = 'AL' THEN CAST(PO.PORTFOLIOS_PORTFOLIO_NAME AS VARCHAR(30)) END AS [BASE_FUND_CODE]      ,CASE WHEN e.SOURCE = 'AL' THEN PM.CURRENCY WHEN e.SOURCE = 'CM' THEN CO.INSTRUCTED_CURRENCY END AS INSTRUCTED_CURRENCY      ,CASE WHEN e.SOURCE = 'AL' THEN PM.SM_SEC_TYPE WHEN e.SOURCE = 'CM' THEN CO.PRODUCT END AS [PRODUCT]      ,CASE WHEN e.SOURCE = 'AL' THEN FORMAT(PM.FACE, '#,0.00') WHEN e.SOURCE = 'CM' THEN FORMAT(CO.INSTRUCTED_AMOUNT, '#,0.00') END AS [INSTRUCTED_AMOUNT]      ,CASE WHEN e.SOURCE = 'AL' THEN concat(DATEDIFF(DAY, CAST(T.TRD_TRADE_DATE AS DATE), CAST(SETTLE_DATE AS DATE)), ' Days')        WHEN e.SOURCE = 'CM' THEN ct.TERM END AS [TERM] --TAKEN THIS FROM COMPLIANCE OR WE COULD USE JUST CM TERM FIELD BUT NOT SURE      ,CASE WHEN e.SOURCE = 'AL' THEN  DATEDIFF(DAY,TRD_TRADE_DATE,SETTLE_DATE) WHEN e.SOURCE = 'CM' THEN DATEDIFF(DAY,VALUE_DATE, MATURITY_DATE) END  AS NO_OF_DAYS      ,CASE WHEN e.SOURCE = 'AL' THEN FORMAT(T.TRD_TRADE_DATE, 'dd/MM/yyyy HH:mm:ss')WHEN e.SOURCE = 'CM' THEN FORMAT(CO.TRADE_DATE, 'dd/MM/yyyy HH:mm:ss') END AS [TRADE_DATE]      ,CASE WHEN e.SOURCE = 'AL' THEN FORMAT(T.TRD_TRADE_DATE, 'dd/MM/yyyy HH:mm:ss') WHEN e.SOURCE = 'CM' THEN FORMAT(CO.VALUE_DATE, 'dd/MM/yyyy HH:mm:ss') END AS [VALUE_DATE]      ,CASE WHEN e.SOURCE = 'AL' THEN  FORMAT(PM.SETTLE_DATE, 'dd/MM/yyyy HH:mm:ss')  WHEN e.SOURCE = 'CM' THEN FORMAT(CO.MATURITY_DATE, 'dd/MM/yyyy HH:mm:ss')  END AS [MATURITY_DATE]      ,C.[TRANSACTION_TYPE]      ,CASE WHEN e.SOURCE = 'AL' THEN PM.COMMENTS_VALUE WHEN e.SOURCE = 'CM' THEN CO.CUSTOM_INSTRUCTION END AS CUSTOM_INSTRUCTION -- TO ADD      ,CASE WHEN e.SOURCE = 'CM' THEN CO.BUSINESS_GROUP WHEN e.SOURCE = 'AL' THEN        CASE        WHEN pot.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP'       WHEN pot.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG'       WHEN (pot.[PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR pot.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM'      ELSE NULL      END       END AS [BUSINESS_GROUP]       , CASE WHEN e.SOURCE = 'AL' THEN PM.PM WHEN e.SOURCE = 'CM' THEN CO.INSTRUCTED_BY END AS INSTRUCTED_BY      ,CASE WHEN e.SOURCE = 'AL' THEN PM.TRADER WHEN e.SOURCE = 'CM' THEN CO.ACCEPTED_BY END AS [ACCEPTED_BY]      ,CO.FREEZE_DATETIME AS [FREEZE_DATE_TIME]      ,CO.FREEZEREASON AS [FREEZE_REASON]      ,CO.[FREEZE_REASON_NARRATION]      ,CO.RELEASE_DATETIME AS [RELEASE_DATE_TIME]      ,CO.RELEASE_REASON AS [RELEASE_REASON]      ,CO.RELEASE_REASON_NARRATION AS [RELEASE_REASON_NARRATION]      ,DATEDIFF(MINUTE,CO.FREEZE_DATETIME, CO.RELEASE_DATETIME) AS  [TIME_ELAPSED_BETWEEN_FREEZE_AND_RELEASE]      ,C.INSTRUCTION_STATUS AS  [INSTRUCTION_STATUS]      ,e.[ORDER_ID]      ,C.[TRANSACTION_NUMBER]      ,C.[TRANSACTION_STATUS]      ,C.[DEALT_AMOUNT]      ,CASE WHEN e.SOURCE = 'AL' THEN C.INSTRUCTION_COMPLETED_AMOUNT_AL WHEN e.SOURCE = 'CM' THEN C.INSTRUCTION_COMPLETED_AMOUNT_CM END AS [INSTRUCTION_COMPLETED_AMOUNT] --SUM OF DEALT AMOUNT FOR EACH INSTRUCTION? HOW DO I DO THIS      ,CASE WHEN e.SOURCE = 'AL' THEN C.INSTRUCTION_REMAINING_AMOUNT_AL WHEN e.SOURCE = 'CM' THEN C.INSTRUCTION_REMAINING_AMOUNT_CM END AS [INSTRUCTION_REMAINING_AMOUNT] --INSTRUCTED AMOUNT - INSTRUCTION COMPLETED AMOUNT?      ,(e.TIMELY_ACK_THRESHOLD_MINS)/60 as [TIMELY_ACKNOWLEDGED_THRESHOLD_MINS]      ,CO.[TIMELY_ACKNOWLEDGEMENT_EXCEPTION_REASON]      ,CO.[TIMELY_ACKNOWLEDGEMENT_NARRATION]      ,CASE WHEN E.SOURCE = 'AL' THEN lqt.[TRD_COUNTERPARTY] WHEN E.SOURCE = 'CM' THEN lbt.[BANK_CODE] END as LOSING_BANKS      ,CASE WHEN E.SOURCE = 'AL' THEN lqt.[QUOTE_VALUE] WHEN E.SOURCE = 'CM' THEN lbt.[RATE] END as LOSING_RATES      ,C.EXECUTED_RATE      ,e.VG_09_CREATETIME AS  [CREATE_DATE]       ,CASE WHEN e.SOURCE = 'CM' THEN CO.OMQ_DATE_TIME WHEN e.SOURCE = 'AL' THEN PM.ACTIVE_TIME END AS OS_OMQ_DATE_TIME      ,e.SOURCE AS [DATA_SOURCE]     INTO #temp_final_master_table_mm     FROM VISTA_STAGING.[dbo].[VG_09_TIMELY_EXECUTION_CASH_MM_TABLE] e     INNER JOIN #distinct_ids di on di.ORDER_ID = e.ORDER_ID AND e.SOURCE = di.SOURCE     LEFT JOIN #concat_mm C ON C.SOURCE = e.SOURCE AND C.ORDER_ID = e.ORDER_ID     LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.PM_ORD = e.ORDER_ID     LEFT JOIN (SELECT DISTINCT SETTLE_DATE, PM.ORD_NUM, PM, PULL_DATE, CURRENCY, FACE, STATUS, TOUCH_COUNT, ACTIVE_TIME, SM_SEC_TYPE, TRADER, AUTH_TIME, COMMENTS_VALUE           FROM VISTA_REPORTING.DBO.PM_ORDERS PM          INNER JOIN #temp_max_ORDER_touch mOt ON mOt.ORD_NUM=PM.ORD_NUM AND mOt.MAX_TOUCH=PM.TOUCH_COUNT) PM ON PM.ORD_NUM = e.ORDER_ID     LEFT JOIN (SELECT DISTINCT ORD_NUM, TRD_AUTH_TIME, FUND, TRD_TRADE_DATE, T.MULTI_FUND_ID, EXECUTION_TIME, TRAN_TYPE, TRD_ORIG_FACE,          TRD_PRICE, TRD_EX_BROKER_CODE, TRD_ENTRY_TIME, TRD_TRADER, PULL_DATE, TRD_STATUS, NET_CONSIDERATION_GBP           FROM VISTA_REPORTING.DBO.TRADES T          INNER JOIN #temp_max_trade_touch mtt ON mtt.MULTI_FUND_ID=t.MULTI_FUND_ID AND mtt.MAX_TOUCH=t.TOUCH_COUNT) T ON T.ORD_NUM = OC.TRD_ORD     LEFT JOIN (SELECT DISTINCT co.ORDER_ID, INSTRUCTION_RECEIVED_DATE, TRADE_DATE, CUSTOM_INSTRUCTION, api_requested_date, VALUE_DATE, MATURITY_DATE, INSTRUCTED_BY,          PULL_DATE, INSTRUCTED_CURRENCY,  INSTRUCTION_STATUS_DECODE, INSTRUCTED_AMOUNT, ACCEPTED_DATETIME, PRODUCT, ACCEPTED_BY, INSTRUCTION_HOLDOVER_DATE_TIME,          INSTRUCTION_KNOCKEDBACK_DATETIME, FREEZE_DATETIME, FREEZE_REASON_NARRATION, FREEZEREASON, RELEASE_DATETIME, RELEASE_REASON, RELEASE_REASON_NARRATION,          TIMELY_ACKNOWLEDGEMENT_EXCEPTION_REASON, TIMELY_ACKNOWLEDGEMENT_NARRATION, OMQ_DATE_TIME, BUSINESS_GROUP           FROM VISTA_REPORTING.DBO.CASH_ORDERS co          INNER JOIN #temp_max_order_cm mocm on mocm.max_date = co.API_REQUESTED_DATE and mocm.ORDER_ID = co.ORDER_ID) CO ON CO.ORDER_ID = e.ORDER_ID     LEFT JOIN (SELECT DISTINCT ORDER_ID, CLIENT_FUND_OR_POOL_CODE, BASE_FUND_CODE, PRODUCT_TYPE, TERM, CT.TRANSACTION_NUMBER, EXECUTED_DATETIME, TRANSACTION_TYPE, DEALT_AMOUNT,         EXECUTED_RATE, BANK, UPLOADED_DATE_TIME, DEALER_NAME, PULL_DATE, TRANSACTION_STATUS_DECODE,  PROPOSED_DATE_TIME, CONFIRMED_DATETIME, TIMELY_EXECUTION_EXCEPTION_NARRATION,          TIMELY_EXECUTION_EXCEPTION_REASON           FROM VISTA_REPORTING.DBO.CASH_TRADES CT           INNER JOIN #temp_max_req_trades REQ ON REQ.TRANSACTION_NUMBER = CT.TRANSACTION_NUMBER AND REQ.MAX_API_REQ = CT.API_REQUESTED_DATE) CT ON CT.ORDER_ID = e.ORDER_ID     LEFT JOIN (SELECT DISTINCT FUND, PORTFOLIOS_PORTFOLIO_NAME           FROM VISTA_REPORTING.DBO.PORTFOLIO) PO ON PO.FUND = T.FUND     LEFT JOIN #losingbanktemp lbt on e.ORDER_ID = lbt.ORDER_ID     LEFT JOIN #losingquotetemp lqt on e.[ORDER_ID] = lqt.ORDER_ID     LEFT JOIN #temp_recent_dealer_al RAL ON RAL.ORD_NUM  = e.ORDER_ID     LEFT JOIN #temp_recent_dealer_cm RCM ON RCM.ORDER_ID = e.ORDER_ID     LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD ON ((TDD.MG_USER_ID = RCM.DEALER_NAME AND e.SOURCE = 'CM')                     OR (TDD.INITIALS = RAL.TRD_TRADER AND e.SOURCE = 'AL'))                     AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE) AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE)     LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD2 ON ((TDD2.MG_USER_ID  = COALESCE(CO.ACCEPTED_BY, CO.INSTRUCTED_BY) AND e.SOURCE = 'CM')                     OR (TDD2.INITIALS = PM.TRADER AND e.SOURCE = 'AL'))                     AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE) AS DATE) BETWEEN CAST(TDD2.DATE_FROM AS DATE) AND CAST(TDD2.DATE_TO AS DATE)     LEFT JOIN VISTA_STAGING.DBO.REF_cash_ALADDIN_STATUS_DECODE ASD ON e.SOURCE = 'AL' AND (ASD.[STATUS] = T.TRD_STATUS OR ASD.[STATUS] = PM.STATUS)     LEFT JOIN (SELECT DISTINCT FUND_ID, PORTFOLIO_GROUP_NAME           FROM VISTA_REPORTING.DBO.PORTFOLIO_GROUPS_TREASURY) POt ON T.FUND = POt.FUND_ID     LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'Timely Execution MM'                      AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE) AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)         --RR MASTER TABLE     IF OBJECT_ID('tempdb..#temp_final_master_table_rr', 'U') IS NOT NULL DROP TABLE #temp_final_master_table_rr     SELECT DISTINCT       COALESCE(TDD.FULL_NAME, TDD2.FULL_NAME, dd.default_dealer)  AS [DEALER_NAME]       ,C.TIMELY_EXECUTION_EXCEPTION_REASON      ,C.TIMELY_EXECUTION_EXCEPTION_NARRATION      ,FORMAT(CO.INSTRUCTION_RECEIVED_DATE, 'dd/MM/yyyy HH:mm:ss')AS [INSTRUCTION_RECEIVED_DATE_TIME]      ,c.EXECUTED_BANK AS EXECUTED_BANK      ,FORMAT(CO.OMQ_DATE_TIME, 'dd/MM/yyyy HH:mm:ss') AS [OMQ_DATE_TIME]      ,FORMAT(CO.ACCEPTED_DATETIME, 'dd/MM/yyyy HH:mm:ss') AS  [ACCEPTED_DATE_TIME]      ,FORMAT(CO.INSTRUCTION_RECEIVED_DATE, 'dd/MM/yyyy HH:mm:ss') as INSTRUCTION_INITIATION_DATE_TIME      ,C.[EXECUTED_DATETIME] AS EXECUTED_DATE_TIME      ,DATEDIFF(MINUTE, CO.OMQ_DATE_TIME, CO.ACCEPTED_DATETIME) AS [TIME_ELAPSED_BETWEEN_ACCEPTED_TO_INSTRUCTION_MINS]      ,C.TIME_ELAPSED_BETWEEN_EXECUTED_TO_ACCEPTED_MINS      ,c.TIME_ELAPSED_BETWEEN_EXECUTED_TO_INSTRUCTION_MINS      ,(e.TIMELY_EXEC_THRESHOLD_MINS)/60 AS [TIMELY_EXECUTION_THRESHOLD_MINS]      ,E.vg_09 as [EXCEPTION_FLAG]      ,FORMAT(CO.[INSTRUCTION_HOLDOVER_DATE_TIME], 'dd/MM/yyyy HH:mm:ss') AS [INSTRUCTION_HOLDOVER_DATE_TIME]      ,FORMAT(CO.INSTRUCTION_KNOCKEDBACK_DATETIME, 'dd/MM/yyyy HH:mm:ss') AS [INSTRUCTION_KNOCKED_BACK_DATE_TIME]      ,CAST(CT.CLIENT_FUND_OR_POOL_CODE AS VARCHAR(30)) AS  [CLIENT_FUND_POOL_CODE]      ,CAST(CT.BASE_FUND_CODE AS VARCHAR(30)) AS [BASE_FUND_CODE]      ,CO.INSTRUCTED_CURRENCY  AS INSTRUCTED_CURRENCY      ,CO.PRODUCT AS [PRODUCT]      ,FORMAT(CO.INSTRUCTED_AMOUNT, '#,0.00') AS [INSTRUCTED_AMOUNT]      ,cT.TERM  AS [TERM] --TAKEN THIS FROM COMPLIANCE OR WE COULD USE JUST CM TERM FIELD BUT NOT SURE      , DATEDIFF(DAY,VALUE_DATE, MATURITY_DATE) AS NO_OF_DAYS      ,FORMAT(CO.TRADE_DATE, 'dd/MM/yyyy HH:mm:ss') AS [TRADE_DATE]      ,FORMAT(CO.VALUE_DATE, 'dd/MM/yyyy HH:mm:ss') AS [VALUE_DATE]      ,FORMAT(CO.MATURITY_DATE, 'dd/MM/yyyy HH:mm:ss') AS [MATURITY_DATE]      ,C.[TRANSACTION_TYPE]      , CO.CUSTOM_INSTRUCTION AS CUSTOM_INSTRUCTION      , CO.BUSINESS_GROUP AS BUSINESS_GROUP      , CO.INSTRUCTED_BY AS INSTRUCTED_BY      ,CO.ACCEPTED_BY AS [ACCEPTED_BY]      ,FORMAT(CO.FREEZE_DATETIME, 'dd/MM/yyyy HH:mm:ss')AS [FREEZE_DATE_TIME]      ,CO.FREEZEREASON AS [FREEZE_REASON]      ,CO.[FREEZE_REASON_NARRATION]      ,FORMAT(CO.RELEASE_DATETIME, 'dd/MM/yyyy HH:mm:ss') AS [RELEASE_DATE_TIME]      ,CO.RELEASE_REASON AS [RELEASE_REASON]      ,CO.RELEASE_REASON_NARRATION AS [RELEASE_REASON_NARRATION]      ,DATEDIFF(MINUTE,CO.FREEZE_DATETIME, CO.RELEASE_DATETIME) AS  [TIME_ELAPSED_BETWEEN_FREEZE_AND_RELEASE_MINS]      ,CAST(CO.INSTRUCTION_STATUS_DECODE AS VARCHAR(20))  AS [INSTRUCTION_STATUS]      ,e.[ORDER_ID]      ,C.[TRANSACTION_NUMBER]      ,C.[TRANSACTION_STATUS]      ,C.[DEALT_AMOUNT]      ,C.INSTRUCTION_COMPLETED_AMOUNT_CM AS [INSTRUCTION_COMPLETED_AMOUNT] --SUM OF DEALT AMOUNT FOR EACH INSTRUCTION? HOW DO I DO THIS      ,C.INSTRUCTION_REMAINING_AMOUNT_CM  AS [INSTRUCTION_REMAINING_AMOUNT] --INSTRUCTED AMOUNT - INSTRUCTION COMPLETED AMOUNT?      ,(e.TIMELY_ACK_THRESHOLD_MINS)/60 as [TIMELY_ACKNOWLEDGED_THRESHOLD_MINS]      ,CO.[TIMELY_ACKNOWLEDGEMENT_EXCEPTION_REASON]      ,CO.[TIMELY_ACKNOWLEDGEMENT_NARRATION]      --,TDD.FULL_NAME  AS [DEALER_NAME]       ,lbt.[BANK_CODE] AS LOSING_BANKS      ,lbt.[RATE] AS LOSING_RATES      ,C.EXECUTED_RATE      ,e.VG_09_CREATETIME AS  [CREATE_DATE]       ,CO.OMQ_DATE_TIME AS OS_OMQ_DATE_TIME      ,e.SOURCE AS [DATA_SOURCE]     INTO #temp_final_master_table_rr     FROM VISTA_STAGING.[dbo].[VG_09_TIMELY_EXECUTION_CASH_RR_TABLE] e     INNER JOIN #distinct_ids di on di.ORDER_ID = e.ORDER_ID and e.SOURCE = di.SOURCE     LEFT JOIN #concat_rr C ON C.SOURCE = e.SOURCE AND C.ORDER_ID = e.ORDER_ID     LEFT JOIN #temp_recent_dealer_cm RCM ON RCM.ORDER_ID = e.ORDER_ID     LEFT JOIN (SELECT DISTINCT co.ORDER_ID, CUSTOM_INSTRUCTION, BUSINESS_GROUP, INSTRUCTION_RECEIVED_DATE, TRADE_DATE, VALUE_DATE,          MATURITY_DATE, INSTRUCTED_BY, PULL_DATE, INSTRUCTED_CURRENCY, INSTRUCTED_AMOUNT, INSTRUCTION_STATUS_DECODE, ACCEPTED_DATETIME,          PRODUCT, ACCEPTED_BY, INSTRUCTION_HOLDOVER_DATE_TIME, INSTRUCTION_KNOCKEDBACK_DATETIME, FREEZE_DATETIME, FREEZE_REASON_NARRATION,          FREEZEREASON, RELEASE_DATETIME, RELEASE_REASON, RELEASE_REASON_NARRATION, TIMELY_ACKNOWLEDGEMENT_EXCEPTION_REASON, TIMELY_ACKNOWLEDGEMENT_NARRATION, OMQ_DATE_TIME           FROM VISTA_REPORTING.DBO.CASH_ORDERS co          INNER JOIN #temp_max_order_cm mocm on mocm.ORDER_ID = co.ORDER_ID and mocm.max_date = co.API_REQUESTED_DATE) CO ON CO.ORDER_ID = e.ORDER_ID     LEFT JOIN (SELECT DISTINCT ORDER_ID, CLIENT_FUND_OR_POOL_CODE, BASE_FUND_CODE, PRODUCT_TYPE, TERM, CT.TRANSACTION_NUMBER, EXECUTED_DATETIME, TRANSACTION_TYPE,          DEALT_AMOUNT, EXECUTED_RATE, BANK, UPLOADED_DATE_TIME, DEALER_NAME, PULL_DATE, TRANSACTION_STATUS_DECODE,  PROPOSED_DATE_TIME, CONFIRMED_DATETIME,          TIMELY_EXECUTION_EXCEPTION_NARRATION, TIMELY_EXECUTION_EXCEPTION_REASON           FROM VISTA_REPORTING.DBO.CASH_TRADES CT          INNER JOIN #temp_max_req_trades REQ ON REQ.MAX_API_REQ = CT.API_REQUESTED_DATE AND REQ.TRANSACTION_NUMBER = CT.TRANSACTION_NUMBER) CT ON CT.ORDER_ID = e.ORDER_ID     LEFT JOIN #losingbanktemp lbt on e.ORDER_ID = lbt.ORDER_ID     LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD ON (TDD.MG_USER_ID = RCM.DEALER_NAME AND e.SOURCE = 'CM')                       AND CAST( CO.PULL_DATE AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE)     LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD2 ON (TDD2.MG_USER_ID = COALESCE(CO.ACCEPTED_BY, CO.INSTRUCTED_BY)                     AND e.SOURCE = 'CM')                     AND CAST(CO.PULL_DATE AS DATE) BETWEEN CAST(TDD2.DATE_FROM AS DATE) AND CAST(TDD2.DATE_TO AS DATE)     LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'Timely Execution RR' AND CAST(CO.PULL_DATE AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)              IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE', 'U') IS NOT NULL    DELETE FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE    WHERE EXISTS (SELECT DISTINCT ORDER_ID     FROM #distinct_ids    WHERE #distinct_ids.ORDER_ID = VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE.ORDER_ID)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_RR_TABLE', 'U') IS NOT NULL    DELETE FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_RR_TABLE    WHERE EXISTS (SELECT DISTINCT ORDER_ID     FROM #distinct_ids    WHERE #distinct_ids.ORDER_ID = VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_RR_TABLE.ORDER_ID)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE    SELECT *    FROM #temp_final_master_table_mm        ELSE        SELECT *    INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE    FROM #temp_final_master_table_mm            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_RR_TABLE', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_RR_TABLE    SELECT *    FROM #temp_final_master_table_rr        ELSE        SELECT *    INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_RR_TABLE    FROM #temp_final_master_table_rr            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(    'MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_RR/MM_TABLE', --TABLE_NAME    @START_TIME, --START_TIME    GETDATE(), --END_TIME    DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS    CAST(GETDATE() as date)) --COMPLETION_DATE             IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids     IF OBJECT_ID('tempdb..#temp_cash_trades', 'U') IS NOT NULL DROP TABLE #temp_cash_trades     IF OBJECT_ID('tempdb..#distinct_trade_ids', 'U') IS NOT NULL DROP TABLE #distinct_trade_ids     IF OBJECT_ID('tempdb..#temp_max_trade_touch', 'U') IS NOT NULL DROP TABLE #temp_max_trade_touch     IF OBJECT_ID('tempdb..#temp_max_ORDER_touch', 'U') IS NOT NULL DROP TABLE #temp_max_ORDER_touch     IF OBJECT_ID('tempdb..#temp_recent_dealer_al', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_al     IF OBJECT_ID('tempdb..#temp_max_ORDER_CM', 'U') IS NOT NULL DROP TABLE #temp_max_ORDER_CM     IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades     IF OBJECT_ID('tempdb..#temp_recent_dealer_cm', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_cm     IF OBJECT_ID('tempdb..#temp_mf_conc_mm', 'U') IS NOT NULL DROP TABLE #temp_mf_conc_mm     IF OBJECT_ID('tempdb..#temp_order_conc_mm', 'U') IS NOT NULL DROP TABLE #temp_order_conc_mm     IF OBJECT_ID('tempdb..#temp_mf_conc_rr', 'U') IS NOT NULL DROP TABLE #temp_mf_conc_rr     IF OBJECT_ID('tempdb..#temp_order_conc_rr', 'U') IS NOT NULL DROP TABLE #temp_order_conc_rr     IF OBJECT_ID('tempdb..#TEMP_TRADES_DISTINCT', 'U') IS NOT NULL DROP TABLE #TEMP_TRADES_DISTINCT     IF OBJECT_ID('tempdb..#REMAIN_AMT', 'U') IS NOT NULL DROP TABLE #REMAIN_AMT     IF OBJECT_ID('tempdb..#TEMP_TRADES_DISTINCT_CM', 'U') IS NOT NULL DROP TABLE #TEMP_TRADES_DISTINCT_CM     IF OBJECT_ID('tempdb..#REMAIN_AMT_CM', 'U') IS NOT NULL DROP TABLE #REMAIN_AMT_CM     IF OBJECT_ID('tempdb..#concat_mm', 'U') IS NOT NULL DROP TABLE #concat_mm     IF OBJECT_ID('tempdb..#concat_rr', 'U') IS NOT NULL DROP TABLE #concat_rr     IF OBJECT_ID('tempdb..#losingbanktemp', 'U') IS NOT NULL DROP TABLE #losingbanktemp      IF OBJECT_ID('tempdb..#losingquotetemp', 'U') IS NOT NULL DROP TABLE #losingquotetemp      IF OBJECT_ID('tempdb..#temp_final_master_table_mm', 'U') IS NOT NULL DROP TABLE #temp_final_master_table_mm     IF OBJECT_ID('tempdb..#temp_final_master_table_rr', 'U') IS NOT NULL DROP TABLE #temp_final_master_table_rr                   IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg09_cash_mm_idx1')           DROP INDEX mmf_vg09_cash_mm_idx1            ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE                CREATE NONCLUSTERED INDEX mmf_vg09_cash_mm_idx1           ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE            (INSTRUCTION_RECEIVED_DATE_TIME)               IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg09_cash_mm_idx2')           DROP INDEX mmf_vg09_cash_mm_idx2            ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE                CREATE NONCLUSTERED INDEX mmf_vg09_cash_mm_idx2           ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE            (EXCEPTION_FLAG)               IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg09_cash_mm_idx3')           DROP INDEX mmf_vg09_cash_mm_idx3            ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE                CREATE NONCLUSTERED INDEX mmf_vg09_cash_mm_idx3           ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_MM_TABLE            (CREATE_DATE)               IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg09_cash_rr_idx1')           DROP INDEX mmf_vg09_cash_rr_idx1            ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_RR_TABLE                CREATE NONCLUSTERED INDEX mmf_vg09_cash_rr_idx1           ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_RR_TABLE            (INSTRUCTION_RECEIVED_DATE_TIME)               IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg09_cash_rr_idx2')           DROP INDEX mmf_vg09_cash_rr_idx2            ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_RR_TABLE                CREATE NONCLUSTERED INDEX mmf_vg09_cash_rr_idx2           ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_RR_TABLE            (EXCEPTION_FLAG)               IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg09_cash_rr_idx3')           DROP INDEX mmf_vg09_cash_rr_idx3            ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_RR_TABLE                CREATE NONCLUSTERED INDEX mmf_vg09_cash_rr_idx3           ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_CASH_RR_TABLE            (CREATE_DATE)                END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_PM_ORDER_TABLE_VG_09_TIMELY_EXECUTION_DMG  CreateDate: 2025-06-26 18:00:30.723  ModifyDate: 2025-06-26 18:00:30.723  --- DEFINITION START ---      CREATE PROCEDURE [dbo].[MASTER_PM_ORDER_TABLE_VG_09_TIMELY_EXECUTION_DMG]        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         --Used to track total time stored procedure took to run     DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()          IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids     SELECT DISTINCT       pm.ORD_NUM,      oc.TRD_ORD     INTO #distinct_ids     FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_DMG_TABLE vg     INNER JOIN Vista_Reporting.dbo.PM_ORDERS pm on pm.ORD_NUM = vg.ORD_NUM     INNER JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD = vg.ORD_NUM         --If the master table doesn't exist then we want to use all the data available, otherwise just the most recent data     IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE', 'U') IS NOT NULL     DELETE FROM #distinct_ids where NOT EXISTS (SELECT od.PM_ORD                   FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                   WHERE od.PM_ORD = #distinct_ids.ORD_NUM                UNION                   SELECT DISTINCT vg.ORD_NUM                 FROM Vista_STAGING.dbo.VG_09_TIMELY_EXECUTION_DMG_TABLE vg                 WHERE vg.VG_09 != 0 AND vg.CREATETIME > DATEADD(YEAR, -1, CAST(@START_TIME AS DATE)))             IF OBJECT_ID('tempdb..#trades_metadata', 'U') IS NOT NULL DROP TABLE #trades_metadata     SELECT DISTINCT t.*,         di.ORD_NUM as PM_ORD      INTO #trades_metadata     FROM VISTA_REPORTING.dbo.TRADES t     INNER JOIN #distinct_ids di ON di.TRD_ORD = t.ORD_NUM              --2. Concatenate all funds on a trade that received an allocation     IF OBJECT_ID('tempdb..#funds', 'U') IS NOT NULL DROP TABLE #funds     SELECT DISTINCT       di.ORD_NUM,      LTRIM(RTRIM(t.PORTFOLIOS_PORTFOLIO_NAME)) AS PORTFOLIOS_PORTFOLIO_NAME     into #funds     FROM #distinct_ids di     LEFT JOIN (SELECT ORD_NUM, PORTFOLIOS_PORTFOLIO_NAME FROM #trades_metadata) t ON di.TRD_ORD = t.ORD_NUM         IF OBJECT_ID('tempdb..#FUNDS_CONCAT', 'U') IS NOT NULL DROP TABLE #FUNDS_CONCAT      SELECT        RESULTS.ORD_NUM,        STUFF((       SELECT DISTINCT ', ' + PORTFOLIOS_PORTFOLIO_NAME       FROM #funds       WHERE (ORD_NUM = Results.ORD_NUM)       ORDER BY ', ' + PORTFOLIOS_PORTFOLIO_NAME       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS Funds_concat     INTO #FUNDS_CONCAT     FROM #funds Results     GROUP BY RESULTS.ORD_NUM         -- Get Investment desks associated with all funds on the TRD order     IF OBJECT_ID('tempdb..#INV', 'U') IS NOT NULL DROP TABLE #INV     SELECT DISTINCT      di.ORD_NUM,      LTRIM(RTRIM(p.ancestor)) AS ancestor     INTO #INV     FROM #distinct_ids di      LEFT JOIN VISTA_STAGING.dbo.ORDERS_DETAIL od ON od.ORD_NUM = di.ORD_NUM     LEFT JOIN VISTA_STAGING.dbo.PORTFOLIO_GROUP_CLOSURE_TABLE p     ON od.PORTFOLIO_NAME = p.descendant     --WHERE p.ancestor IN ('MG_ATCRED','MG_RET_FI','MG_INSTI','MG_INTER','MG_RESTCT','MG_IN_CAP','MG_LEVFIN','MG_MIB','MG_REDEBT') -- This is the list of investment desks provided in the business requirements documents NEED TO CHECK FOR DMG DESK             IF OBJECT_ID('tempdb..#Inv_desk_concat', 'U') IS NOT NULL DROP TABLE #Inv_desk_concat     SELECT       ORD_NUM,       STUFF((         SELECT DISTINCT ', ' + ancestor         FROM #INV         WHERE (ORD_NUM = Results.ORD_NUM)         ORDER BY ', ' + ancestor         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')       ,1,2,'') AS Inv_Desk_Concat     INTO #Inv_desk_concat     FROM #INV Results     GROUP BY ORD_NUM             IF OBJECT_ID('tempdb..#max_touch_table', 'U') IS NOT NULL DROP TABLE #max_touch_table          SELECT DISTINCT         pm.ORD_NUM,         MAX(pm.TOUCH_COUNT) AS MAX_TOUCH     INTO #max_touch_table     FROM VISTA_REPORTING.dbo.PM_ORDERS pm     INNER JOIN #distinct_ids di ON di.ORD_NUM = pm.ORD_NUM     --WHERE DEALING_DESK = 'DMG'     group by pm.ORD_NUM             IF OBJECT_ID('tempdb..#max_touch_trades', 'U') IS NOT NULL DROP TABLE #max_touch_trades          select distinct         t.ORD_NUM,         MAX(t.TOUCH_COUNT) AS MAX_TOUCH     into #max_touch_trades     from #trades_metadata t     INNER JOIN #distinct_ids di ON di.TRD_ORD = t.ORD_NUM     group by t.ORD_NUM         IF OBJECT_ID('tempdb..#Min_Exec_Time', 'U') IS NOT NULL DROP TABLE #Min_Exec_Time     SELECT DISTINCT       PM.ORD_NUM,       MIN(T.EXECUTION_TIME) AS MIN_EXEC_TIME,       MAX(T.EXECUTION_TIME) AS MAX_EXEC_TIME,       MIN(PM.ACTIVE_TIME) AS MIN_ACTIVE_TIME,       PM.AUTH_TIME     INTO #Min_Exec_Time     FROM (SELECT ORD_NUM, AUTH_TIME, ACTIVE_TIME FROM VISTA_REPORTING.dbo.PM_ORDERS) PM     INNER JOIN #distinct_ids di ON di.ORD_NUM = PM.ORD_NUM     LEFT JOIN (SELECT EXECUTION_TIME, ORD_NUM FROM  #trades_metadata) T ON di.TRD_ORD=T.ORD_NUM     WHERE PM.AUTH_TIME IS NOT NULL        --AND PM.DEALING_DESK = 'DMG'     GROUP BY                 PM.ORD_NUM, PM.AUTH_TIME                IF OBJECT_ID('tempdb..#max_touch_table_trader_pmo', 'U') IS NOT NULL DROP TABLE #max_touch_table_trader_pmo     SELECT DISTINCT       pm.ORD_NUM,       MAX(pm.TOUCH_COUNT) AS MAX_TOUCH     INTO #max_touch_table_trader_pmo     FROM VISTA_REPORTING.dbo.PM_ORDERS pm     INNER JOIN #distinct_ids di ON di.ORD_NUM = pm.ORD_NUM     WHERE TRADER IS NOT NULL     GROUP BY pm.ORD_NUM             --IF OBJECT_ID('tempdb..#max_touch_table_trader_trdo', 'U') IS NOT NULL DROP TABLE #max_touch_table_trader_trdo     --select distinct     --    ORD_NUM,     --    MAX(TOUCH_COUNT) AS MAX_TOUCH     --into #max_touch_table_trader_trdo     --from VISTA_REPORTING.dbo.PM_ORDERS     --WHERE TRADER IS NOT NULL     --   AND DEALING_DESK = 'DMG'     --group by ORD_NUM             IF OBJECT_ID('tempdb..#Latest_trader_trdo', 'U') IS NOT NULL DROP TABLE #Latest_trader_trdo     select distinct         di.ORD_NUM AS ORD_NUM,         trdo.TRADER AS [TRADER] -- Take the max trader to avoid duplication     into #Latest_trader_trdo     from #distinct_ids di     LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS trdo ON di.TRD_ORD = trdo.ORD_NUM     INNER JOIN #max_touch_table_trader_pmo mx ON trdo.ORD_NUM = mx.ORD_NUM AND trdo.TOUCH_COUNT = mx.MAX_TOUCH     --group by oc.PM_ORD              IF OBJECT_ID('tempdb..#Latest_trader', 'U') IS NOT NULL DROP TABLE #Latest_trader     SELECT        pm.ORD_NUM,       COALESCE(pm.TRADER, lt.TRADER) AS TRADER,       COALESCE(d.FULL_NAME, d2.FULL_NAME) AS TRADER_FULL_NAME     INTO #Latest_trader     FROM VISTA_REPORTING.dbo.PM_ORDERS pm     INNER JOIN #max_touch_table_trader_pmo mt ON mt.ORD_NUM=pm.ORD_NUM AND mt.MAX_TOUCH=pm.TOUCH_COUNT     LEFT JOIN VISTA_REPORTING.dbo.DEALER_AND_DESK D ON pm.TRADER = D.INITIALS     LEFT JOIN #Latest_trader_trdo lt ON pm.ORD_NUM = lt.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.DEALER_AND_DESK D2 ON lt.TRADER = D2.INITIALS     WHERE mt.ORD_NUM IS NOT NULL OR lt.ORD_NUM IS NOT NULL     --GROUP BY pm.ORD_NUM             IF OBJECT_ID('tempdb..#Latest_temp_trades_distinct', 'U') IS NOT NULL DROP TABLE #Latest_temp_trades_distinct     SELECT DISTINCT     di.ORD_NUM,     t.ORD_NUM as TRD_ORD,     t.MULTI_FUND_ID,      t.TRD_CURRENCY,     ISNULL(PL.Venue,'Manual') AS Venue,     CASE      WHEN prim.TWEB_CLOSE_DEALING = 1 THEN 'TWEB Close'      WHEN prim.[1615_DEALING] = 1 THEN '1615 Dealing'      WHEN t.ACTIVITY_TYPE = 'MG.FI 1. Proces' THEN 'VPT'     END AS [Method],     PL.RELEASE_DATETIME,     t.EXECUTION_TIME,     t.TRD_TRADE_DATE,     t.TRD_AUTH_TIME,     t.TRDCOMM_COMMENTS,     ABS(PM.FACE) AS FACE,     t.TRD_ORIG_FACE,     t.ACTIVITY_TYPE_DECODE,     t.EXECUTION_TYPE_DECODE,     CASE      WHEN prim.DEALING_DESK='DMG' --this bit probably needs further checks      THEN       CASE        WHEN prim.DEBT_DERIV = 'DEBT'         THEN         CASE          WHEN t.TRD_COUPON IS NOT NULL AND i2.TICKER IS NOT NULL AND i2.MATURITY IS NOT NULL           THEN CONCAT(ISNULL(i2.TICKER,''),' ', CAST(ISNULL(t.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))          ELSE  CONCAT(ISNULL(PM.SEC_DESC1,''),' ', CAST(ISNULL(t.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))         END        ELSE prim.DESC_INSTMT       END     END AS [Description],     t.TRD_EX_BROKER_CODE,     t.[TRD_COUNTERPARTY],     t.[MATURITY],   pl.[FULL_NAME_VENUE]     INTO #Latest_temp_trades_distinct     FROM #trades_metadata T      LEFT JOIN #distinct_ids di ON T.ORD_NUM = di.TRD_ORD     LEFT JOIN (SELECT PLACEMENT_NUM, VENUE, RELEASE_DATETIME, FULL_NAME_VENUE FROM  VISTA_REPORTING.dbo.PLACEMENTS) PL ON T.PLACEMENT_NUM = PL.PLACEMENT_NUM     LEFT JOIN (SELECT MULTI_FUND_ID, DESC_INSTMT, DEALING_DESK, DEBT_DERIV, [1615_DEALING], TWEB_CLOSE_DEALING           FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) prim ON t.MULTI_FUND_ID =prim.MULTI_FUND_ID     LEFT JOIN VISTA_REPORTING.dbo.REUTERS_PRICE_BENCHMARK_TABLE pb on pb.MULTI_FUND_ID=T.MULTI_FUND_ID     LEFT JOIN (SELECT PM2.ORD_NUM, TOUCH_COUNT, FACE, SEC_DESC1, DEALING_DESK          FROM VISTA_REPORTING.DBO.PM_ORDERS PM2 INNER JOIN #max_touch_table mt ON mt.ORD_NUM=PM2.ORD_NUM AND mt.MAX_TOUCH=PM2.TOUCH_COUNT) PM ON di.ORD_NUM = PM.ORD_NUM     OUTER APPLY (SELECT TOP 1 i.TICKER, i.MATURITY FROM VISTA_REPORTING.dbo.INSTRUMENTS i           WHERE (i.CUSIP=t.CUSIP AND i.DATE<=CONVERT(DATE, t.EXECUTION_TIME))           ORDER BY i.DATE DESC) as i2     WHERE FinalFlag = 1     AND di.ORD_NUM IS NOT NULL AND pm.DEALING_DESK ='DMG'             --Adding this in due to Remain Amount not showing correctly     IF OBJECT_ID('tempdb..#Latest_temp_trades_total', 'U') IS NOT NULL DROP TABLE #Latest_temp_trades_total     SELECT       ORD_NUM,      SUM(ABS(TRD_ORIG_FACE)) as TOTAL_AMT     INTO #Latest_temp_trades_total     FROM #Latest_temp_trades_distinct     GROUP BY ORD_NUM         --Adding in Settlement date so it can be concatonated and added in final table     IF OBJECT_ID('tempdb..#settle_date_temp', 'U') IS NOT NULL DROP TABLE #settle_date_temp     SELECT DISTINCT       tr.ORD_NUM      ,tr.MULTI_FUND_ID      --,tr.TRD_CURRENCY      --,tr.EXECUTION_TIME      --,tr.TRD_AUTH_TIME      --,tr.TRD_TRADE_DATE      ,T2.SETTLE_DATE      ,tr.PULL_DATE     INTO #settle_date_temp     FROM #trades_metadata as tr     inner join (SELECT          MULTI_FUND_ID,         MAX(TOUCH_COUNT) AS MAX_TOUCH,         max(TRD_SETTLE_DATE) AS SETTLE_DATE        FROM #trades_metadata        GROUP BY MULTI_FUND_ID) as t2      on (tr.MULTI_FUND_ID=t2.MULTI_FUND_ID) and (tr.TOUCH_COUNT=t2.MAX_TOUCH)         IF OBJECT_ID('tempdb..#Latest_temp_trades', 'U') IS NOT NULL DROP TABLE #Latest_temp_trades     SELECT      ltd.ORD_NUM,      ltd.TRD_ORD,     ltd.MULTI_FUND_ID,     ltd.TRD_CURRENCY,     ltd.Venue,     ltd.[Method],     ltd.RELEASE_DATETIME,     ltd.EXECUTION_TIME,     ltd.TRD_TRADE_DATE,     ltd.TRD_AUTH_TIME,     ltd.TRDCOMM_COMMENTS,     SUM(ABS(ltd.TRD_ORIG_FACE)) AS [Booked Amt],     ltd.FACE - lt.[TOTAL_AMT] AS [Remain Amt],     ltd.ACTIVITY_TYPE_DECODE,     ltd.[Description],     ltd.TRD_EX_BROKER_CODE,     ltd.TRD_COUNTERPARTY,     ltd.MATURITY,     sett_temp.SETTLE_DATE,     ltd.[FULL_NAME_VENUE],     ltd.EXECUTION_TYPE_DECODE     INTO #Latest_temp_trades     FROM #Latest_temp_trades_distinct ltd     left join #Latest_temp_trades_total lt     on ltd.ORD_NUM = lt.ORD_NUM     left join #settle_date_temp sett_temp     on sett_temp.ORD_NUM = ltd.ORD_NUM     GROUP BY       ltd.ORD_NUM,       ltd.TRD_ORD,      ltd.MULTI_FUND_ID,      ltd.TRD_CURRENCY,      ltd.Venue,      ltd.[Method],      ltd.RELEASE_DATETIME,      ltd.EXECUTION_TIME,      ltd.TRD_TRADE_DATE,      ltd.TRD_AUTH_TIME,      ltd.TRDCOMM_COMMENTS,      ltd.ACTIVITY_TYPE_DECODE,      ltd.[Description],      ltd.FACE,      ltd.TRD_EX_BROKER_CODE,      lt.[TOTAL_AMT],      ltd.TRD_COUNTERPARTY,      ltd.MATURITY,      sett_temp.SETTLE_DATE,      ltd.[FULL_NAME_VENUE],      ltd.EXECUTION_TYPE_DECODE             IF OBJECT_ID('tempdb..#concat_ord', 'U') IS NOT NULL DROP TABLE #concat_ord     SELECT       ORD_NUM,      STUFF((       SELECT '| ' + CAST(TRD_ORD AS VARCHAR(50))        FROM #Latest_temp_trades Results       WHERE (t.ORD_NUM = Results.ORD_NUM)        ORDER BY '| ' + CAST(TRD_ORD AS VARCHAR(50))        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS TRD_ORDER_concat,      STUFF((       SELECT '| ' + CAST(MULTI_FUND_ID AS VARCHAR(50))        FROM #Latest_temp_trades Results       WHERE (t.ORD_NUM = Results.ORD_NUM)        ORDER BY '| ' + CAST(MULTI_FUND_ID AS VARCHAR(50))      FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS MFID_concat,      STUFF((       SELECT '| ' + CAST(TRD_CURRENCY AS VARCHAR(50))        FROM #Latest_temp_trades Results        WHERE (t.ORD_NUM = Results.ORD_NUM)        ORDER BY '| ' + CAST(TRD_CURRENCY AS VARCHAR(50))        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS Sett_CCy_concat,      STUFF((       SELECT '| ' + CAST(FULL_NAME_VENUE AS VARCHAR(50))        FROM #Latest_temp_trades Results       WHERE (t.ORD_NUM = Results.ORD_NUM)        ORDER BY '| ' + CAST(FULL_NAME_VENUE AS VARCHAR(50))        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS FULL_NAME_Venue_concat,         STUFF((       SELECT '| ' + CAST([Method] AS VARCHAR(50))        FROM #Latest_temp_trades Results       WHERE (t.ORD_NUM = Results.ORD_NUM)        ORDER BY '| ' + CAST([Method] AS VARCHAR(50))        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS Method_concat,           STUFF((       SELECT '| ' + CAST(RELEASE_DATETIME AS VARCHAR(50))       FROM #Latest_temp_trades Results       WHERE (t.ORD_NUM = Results.ORD_NUM)        ORDER BY '| ' + CAST(RELEASE_DATETIME AS VARCHAR(50))        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS RELEASE_DATETIME_concat,       STUFF((       SELECT '| ' + CONCAT(CONVERT(VARCHAR(25),CONVERT(date,NULLIF(EXECUTION_TIME,'')),103),' ',CONVERT(TIME(0),NULLIF(EXECUTION_TIME,'')))        FROM #Latest_temp_trades Results       WHERE (t.ORD_NUM = Results.ORD_NUM)        ORDER BY '| ' + CONCAT(CONVERT(VARCHAR(25),CONVERT(date,NULLIF(EXECUTION_TIME,'')),103),' ',CONVERT(TIME(0),NULLIF(EXECUTION_TIME,'')))        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS EXECUTION_TIME_concat,          STUFF((       SELECT '| ' + CONVERT(VARCHAR(50),TRD_TRADE_DATE,103)        FROM #Latest_temp_trades Results       WHERE (t.ORD_NUM = Results.ORD_NUM)        ORDER BY  '| ' + CONVERT(VARCHAR(50),TRD_TRADE_DATE,103)        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS TRD_TRADE_DATE_concat,             STUFF((       SELECT '| ' + CONCAT(CONVERT(VARCHAR(25),CONVERT(date,NULLIF(TRD_AUTH_TIME,'')),103),' ',CONVERT(TIME(0),NULLIF(TRD_AUTH_TIME,'')))       FROM #Latest_temp_trades Results       WHERE (t.ORD_NUM = Results.ORD_NUM)        ORDER BY '| ' + CONCAT(CONVERT(VARCHAR(25),CONVERT(date,NULLIF(TRD_AUTH_TIME,'')),103),' ',CONVERT(TIME(0),NULLIF(TRD_AUTH_TIME,'')))       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS TRD_AUTH_TIME_concat,        STUFF((       SELECT '| ' + CAST(TRDCOMM_COMMENTS AS VARCHAR(1000))        FROM #Latest_temp_trades Results       WHERE (t.ORD_NUM = Results.ORD_NUM)        ORDER BY '| ' + CAST(TRDCOMM_COMMENTS AS VARCHAR(1000))        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS TRDCOMM_COMMENTS_concat,          STUFF((       SELECT '| ' + CAST(format([Booked amt],'N2') AS VARCHAR(50))        FROM #Latest_temp_trades Results       WHERE (t.ORD_NUM = Results.ORD_NUM)        ORDER BY '| ' + CAST(format([Booked amt],'N2') AS VARCHAR(50))        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS Booked_amt_concat,       STUFF((       SELECT '| ' + CAST(format([Remain Amt],'N2') AS VARCHAR(50))        FROM #Latest_temp_trades Results       WHERE (t.ORD_NUM = Results.ORD_NUM)        ORDER BY '| ' + CAST(format([Remain Amt],'N2') AS VARCHAR(50))        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS Remain_amt_concat,          STUFF((       SELECT '| ' + CAST([Description] AS VARCHAR(1000))        FROM #Latest_temp_trades Results       WHERE (t.ORD_NUM = Results.ORD_NUM)        ORDER BY '| ' + CAST([Description] AS VARCHAR(1000))        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS [Description_Concat],          STUFF((       SELECT '| ' + CAST([ACTIVITY_TYPE_DECODE] AS VARCHAR(50))        FROM #Latest_temp_trades Results       WHERE (t.ORD_NUM = Results.ORD_NUM)        ORDER BY '| ' + CAST([ACTIVITY_TYPE_DECODE] AS VARCHAR(50))        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS [Activity_Type_Concat],      STUFF((       SELECT '| ' + CAST(TRD_EX_BROKER_CODE AS VARCHAR(50))        FROM #Latest_temp_trades Results       WHERE (t.ORD_NUM = Results.ORD_NUM)        ORDER BY  '| ' + CAST(TRD_EX_BROKER_CODE AS VARCHAR(50))        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS TRD_EX_BROKER_CODE,      STUFF((       SELECT '| ' + CAST(TRD_COUNTERPARTY AS VARCHAR(50))        FROM #Latest_temp_trades Results       WHERE (t.ORD_NUM = Results.ORD_NUM)        ORDER BY  '| ' + CAST(TRD_COUNTERPARTY AS VARCHAR(50))        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS TRD_COUNTERPARTY,      STUFF((       SELECT '| ' + CAST(SETTLE_DATE AS VARCHAR(50))        FROM #Latest_temp_trades Results       WHERE (t.ORD_NUM = Results.ORD_NUM)        ORDER BY  '| ' + CAST(SETTLE_DATE AS VARCHAR(50))        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS SETTLE_DATE,      STUFF((       SELECT DISTINCT '| ' + CAST(ISNULL(EXECUTION_TYPE_DECODE, '') AS VARCHAR(50))        FROM #Latest_temp_trades Results       WHERE (t.ORD_NUM = Results.ORD_NUM)        ORDER BY '| ' + CAST(ISNULL(EXECUTION_TYPE_DECODE, '') AS VARCHAR(50))        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS EXECUTION_TYPE_DECODE     INTO #CONCAT_ORD     FROM #Latest_temp_trades t     GROUP BY ORD_NUM          IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     SELECT DISTINCT       PM.AUTH_TIME,      MET.MIN_EXEC_TIME AS FIRST_EXECUTION,      MET.MAX_EXEC_TIME AS LAST_EXECUTION,      conc_ord.TRDCOMM_COMMENTS_concat AS  [DEALER_COMMENT],      PM.COMMENTS_VALUE AS GENERAL_COMMENT,      E.ORD_NUM as [ORDER],      PM.PM AS FM,      PM.TRAN_TYPE AS SIDE,      conc_ord.TRD_EX_BROKER_CODE as EX_CPTY,      PM.CURRENCY AS CCY,      conc_ord.[Sett_Ccy_Concat] as [SETT_CCY],      i2.ISIN,      PM.CUSIP,      i2.SEDOL,      conc_ord.[Description_Concat] as [DESCRIPTION],      conc_ord.[TRD_ORDER_concat] as [Trader Order Number],      lst_trdr.TRADER as DEALER,-- have taken out the temp tables that made these previously as unsure they are relevant, if we see duplicates/null values we can add them back in      ISNULL(conc_ord.[FULL_NAME_Venue_concat] ,'Manual') AS [PLATFORM],      conc_ord.Method_Concat AS [METHOD],      CONVERT(DECIMAL(18,2),ABS(PM.FACE)) AS [ORDER_AMOUNT],      lt.[Remain Amt] AS [Remain_Amt],      conc_ord.Booked_amt_concat AS  [BOOKED_AMOUNT],      MET.[MIN_ACTIVE_TIME] AS ACTIVE_DATE,      conc_ord.RELEASE_DATETIME_concat AS  [SEND_DATE],      conc_ord.[MFID_Concat] as MFID,      conc_ord.TRD_TRADE_DATE_concat AS  [TRADE_DATE],      conc_ord.EXECUTION_TIME_concat AS  [EXEC_DATE],      conc_ord.TRD_AUTH_TIME_concat AS  [ENTRY_DATE],      CASE         WHEN e.Exception_Type ='Inter' THEN 'Unfilled'         WHEN e.Exception_Type ='Intra' THEN 'Filled Outside'         ELSE NULL        END AS [TE_Type],      CASE       WHEN PRIM.DEALING_DESK = 'DMG' AND PRIM.INST_TYPE = ('GOV') THEN 60      WHEN PRIM.DEALING_DESK = 'DMG' AND PRIM.INST_TYPE in ( 'SCDS', 'ICDS') THEN 120      WHEN PRIM.DEALING_DESK = 'DMG' AND PRIM.INST_TYPE in ('IFS', 'OIS', 'IRS', 'TRS', 'EQOPT', 'FXOPT', 'ASWP') THEN 180--need to add asset swaps in here         ELSE NULL        END AS [THRESHOLD],      E.TIMESPAN,      FND.FUNDS_CONCAT AS [FUND],      DATEDIFF(MINUTE, MET.AUTH_TIME, MET.MIN_ACTIVE_TIME) AS PICKUP_TIMESPAN,      DATEDIFF(MINUTE, MET.AUTH_TIME, MET.MIN_EXEC_TIME) AS FIRST_EXECUTION_TIMESPAN,      CASE       WHEN (ABS(PM.FACE)-max(ABS(TRD.FILL_AMT))) = 0 THEN 'YES'            ELSE 'NO'        END AS [COMPLETED_ORDERS],      DATEDIFF(minute,PM.AUTH_TIME, Reversion_Time) as [REVERSION_TIMESPAN],      PRIM.INST_TYPE,      conc_ord.Activity_Type_Concat as [ACTIVITY_TYPE],      CASE WHEN PRIM.INTERFUND_TRANSFER = 1 THEN 'Y' ELSE 'N' END as PUT_THROUGH,      CASE WHEN i2.EMERGING_MARKET = 1 THEN 'Y' ELSE 'N' END AS EM_NON_EM,      E.REVERSION_TIME,      lt.MATURITY as [MATURITY_DATE],      conc_ord.SETTLE_DATE as [SETTLEMENT_DATE],       CASE WHEN E.VG_09=1 THEN 1 ELSE 0 END AS VG_09_POLICY,       CASE WHEN E.VG_09=1 THEN E.CREATETIME ELSE NULL END AS VG_09_POLICY_CREATETIME,       CASE WHEN E.VG_09=5 THEN 1 ELSE 0 END AS VG_09_5_DAY,       CASE WHEN E.VG_09=5 THEN E.CREATETIME ELSE NULL END AS VG_09_5_DAY_CREATETIME,       CASE WHEN E.VG_09=10 THEN 1 ELSE 0 END AS VG_09_10_DAY,       CASE WHEN E.VG_09=10 THEN E.CREATETIME ELSE NULL END AS VG_09_10_DAY_CREATETIME,       CASE WHEN E.VG_09=20 THEN 1 ELSE 0 END AS VG_09_20_DAY,       CASE WHEN E.VG_09=20 THEN E.CREATETIME ELSE NULL END AS VG_09_20_DAY_CREATETIME,       CASE WHEN E.VG_09=40 THEN 1 ELSE 0 END AS VG_09_40_DAY,       CASE WHEN E.VG_09=40 THEN E.CREATETIME ELSE NULL END AS VG_09_40_DAY_CREATETIME,       CASE WHEN E.VG_09=80 THEN 1 ELSE 0 END AS VG_09_80_DAY,       CASE WHEN E.VG_09=80 THEN E.CREATETIME ELSE NULL END AS VG_09_80_DAY_CREATETIME,       CASE WHEN E.VG_09=160 THEN 1 ELSE 0 END AS VG_09_160_DAY,       CASE WHEN E.VG_09=160 THEN E.CREATETIME ELSE NULL END AS VG_09_160_DAY_CREATETIME,        CASE WHEN E.VG_09 = 0 THEN 0 ELSE 1 END AS EXCEPTION_FLAG,      E.CREATETIME AS CREATE_DATE,      CONCAT(EXCEPTION_TYPE,VG_09) AS AUX,      concat(i2.SM_SEC_GROUP,'/',i2.SM_SEC_TYPE) as [Asset_Type/Subtype],      conc_ord.TRD_COUNTERPARTY AS CPTY,      conc_ord.EXECUTION_TYPE_DECODE      --TRD.LIMIT_TYPE,      --TRD.LIMIT_VALUE,      --E.[VG_11_CREATETIME] AS VG_11_CREATETIME,      --E.[VG_11],      --INV.INV_DESK_CONCAT AS [INV_DESK],      --CONCAT(YEAR(PM.AUTH_TIME),'-',left(datename(m,PM.AUTH_TIME),3)) AS MONTH_YEAR,      --i2.SM_SEC_GROUP,      --T.TRD_PURPOSE,      --dc1.[VALUE] AS INSTRUCTION,      --PM.ORDER_REASON_DECODE AS PURPOSE,           --E.DEALING_DESK,         --E.EXCEPTION_TYPE,       ----PRIM.PRIMARY_MARKET_ORDER_LEVEL AS PRIMARY_MARKET,      --PM.SEC_DESC1,      --PM.PM_FULL_NAME,      --PM.ORDER_REASON,      --lst_trdr.TRADER_FULL_NAME,      ----(ABS(PM.FACE)-ABS(TRD.FILL_AMT)) AS FILLED,      --conc_ord.Remain_amt_concat AS [Remain Amt],      --NULL AS INTERNAL_COMMENT,      --NULL AS DELAY_IN_EXECUTION,      --NULL AS FILLED_UNFILLED,      -- T.B3Q_RATIONALE,      -- T.NWQ_RATIONALE     INTO #temp_final_master_table     FROM (SELECT *  FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_DMG_TABLE) E     inner join #distinct_ids d on d.ORD_NUM = E.ORD_NUM     LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON E.ORD_NUM = OC.PM_ORD     --LEFT JOIN (SELECT T2.ORD_NUM, B3Q_RATIONALE, NWQ_RATIONALE, TOUCH_COUNT, EXECUTION_TYPE_DECODE, TRD_PURPOSE, TRD_ORIG_FACE      --           FROM VISTA_REPORTING.DBO.TRADES T2     --     INNER JOIN #max_touch_trades MTT ON MTT.ORD_NUM = T2.ORD_NUM AND MTT.MAX_TOUCH = T2.TOUCH_COUNT) T ON T.ORD_NUM = OC.TRD_ORD     LEFT JOIN (SELECT ORD_NUM, INST_TYPE, PRIMARY_MARKET_ORDER_LEVEL ,INTERFUND_TRANSFER, DEALING_DESK           FROM VISTA_REPORTING.DBO.PRIMARY_INST_TYPE_TABLE) PRIM ON PRIM.ORD_NUM = OC.TRD_ORD AND PRIM.DEALING_DESK = E.DEALING_DESK     LEFT JOIN (SELECT ORD_NUM, LIMIT_TYPE, LIMIT_VALUE, FILL_AMT FROM VISTA_REPORTING.DBO.TRD_ORDERS) TRD ON OC.TRD_ORD = TRD.ORD_NUM      LEFT JOIN (SELECT ORD_NUM,MULTI_FUND_ID,TRDCOMM_COMMENTS,EXECUTION_TIME,[Remain Amt],MATURITY FROM #Latest_temp_trades) as lt ON lt.ORD_NUM=oc.PM_ORD     LEFT JOIN (SELECT PM2.ORD_NUM, SEC_DESC1, AUTH_TIME, BROKER_CODE, PM_FULL_NAME, PM, UPDATE_INSTR,           CUSIP, CURRENCY, ORDER_REASON_DECODE, TRAN_TYPE, COMMENTS_VALUE, ORDER_REASON,            TRADER, TRADER_FULL_NAME, FACE          FROM VISTA_REPORTING.DBO.PM_ORDERS PM2           INNER JOIN  #max_touch_table MT ON MT.ORD_NUM = PM2.ORD_NUM AND MT.MAX_TOUCH = PM2.TOUCH_COUNT) PM ON PM.ORD_NUM = E.ORD_NUM     OUTER APPLY (SELECT TOP 1          i.ISIN,         i.SEDOL,         i.EMERGING_MARKET,         i.SM_SEC_GROUP,         i.SM_SEC_TYPE         FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=PM.CUSIP AND i.DATE<=CONVERT(DATE, PM.AUTH_TIME))         ORDER BY i.DATE DESC) as i2     LEFT JOIN (select * from #FUNDS_CONCAT) FND ON FND.ORD_NUM = E.ORD_NUM     LEFT JOIN (select * from  #INV_DESK_CONCAT) INV ON INV.ORD_NUM = e.ORD_NUM     LEFT JOIN (SELECT TAG_NAME,CODE,[VALUE] FROM VISTA_REPORTING.dbo.DECODES) dc1 ON dc1.TAG_NAME = 'PM_INSTRUCTION' AND dc1.CODE= PM.UPDATE_INSTR     LEFT JOIN (SELECT ORD_NUM,MAX_EXEC_TIME, MIN_EXEC_TIME, MIN_ACTIVE_TIME, AUTH_TIME FROM #Min_Exec_Time) MET ON MET.ORD_NUM=E.ORD_NUM AND MET.AUTH_TIME=e.REBASED_AUTH_TIME     LEFT JOIN (SELECT ORD_NUM, [TRD_ORDER_concat], [Sett_Ccy_Concat], [Description_Concat], [FULL_NAME_Venue_Concat],            Method_Concat, Remain_amt_concat, Booked_amt_concat, RELEASE_DATETIME_concat,           TRD_TRADE_DATE_concat, EXECUTION_TIME_concat, TRD_AUTH_TIME_concat,            TRDCOMM_COMMENTS_concat, [MFID_Concat], Activity_Type_Concat, TRD_EX_BROKER_CODE,           TRD_COUNTERPARTY, SETTLE_DATE, EXECUTION_TYPE_DECODE          FROM #concat_ord) conc_ord ON conc_ord.ORD_NUM=e.ORD_NUM     LEFT JOIN (SELECT ORD_NUM,TRADER, TRADER_FULL_NAME FROM #Latest_trader) lst_trdr ON e.ORD_NUM = lst_trdr.ORD_NUM     GROUP BY      dc1.[VALUE],      PM.ORDER_REASON_DECODE,      PM.COMMENTS_VALUE,      E.ORD_NUM,      PM.PM,      PM.TRAN_TYPE,      PM.CURRENCY,      conc_ord.[Sett_Ccy_Concat],      i2.ISIN,      PM.CUSIP,      i2.SEDOL,      conc_ord.[Description_Concat],      lst_trdr.TRADER,-- have taken out the temp tables that made these previously as unsure they are relevant, if we see duplicates/null values we can add them back in      conc_ord.Method_Concat,      PM.FACE,      --T.TRD_ORIG_FACE,      conc_ord.Booked_amt_concat,      MET.[MIN_ACTIVE_TIME],      conc_ord.RELEASE_DATETIME_concat,      conc_ord.[MFID_Concat],      conc_ord.TRD_TRADE_DATE_concat,      conc_ord.EXECUTION_TIME_concat,      conc_ord.TRD_AUTH_TIME_concat,      conc_ord.TRDCOMM_COMMENTS_concat,      PRIM.DEALING_DESK,       PRIM.INST_TYPE,      E.TIMESPAN,      FND.FUNDS_CONCAT,      INV.INV_DESK_CONCAT,      MET.AUTH_TIME,       MET.MIN_ACTIVE_TIME,      MET.MIN_EXEC_TIME,      MET.MAX_EXEC_TIME,      Reversion_Time,      PM.AUTH_TIME,      PRIM.INST_TYPE,      conc_ord.Activity_Type_Concat,      PRIM.INTERFUND_TRANSFER,      --TRD.LIMIT_TYPE,      --TRD.LIMIT_VALUE,      i2.EMERGING_MARKET,      E.REVERSION_TIME,      E.VG_09,      E.CREATETIME,      conc_ord.TRD_COUNTERPARTY,      i2.SM_SEC_GROUP,      i2.SM_SEC_TYPE,      conc_ord.EXECUTION_TYPE_DECODE,      PM.AUTH_TIME,      --T.TRD_PURPOSE,      E.Exception_Type,      conc_ord.TRD_EX_BROKER_CODE,      lt.[Remain Amt],      CONCAT(EXCEPTION_TYPE,VG_09),      lt.MATURITY,      conc_ord.SETTLE_DATE,      conc_ord.FULL_NAME_Venue_concat,      conc_ord.TRD_ORDER_concat         IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE', 'U') IS NOT NULL      delete from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE     where [ORDER] in (SELECT ORD_NUM from #distinct_ids)          IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE     SELECT *     FROM #temp_final_master_table          ELSE          SELECT *     INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE     FROM #temp_final_master_table          IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(     'MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE', --TABLE_NAME     @START_TIME, --START_TIME     GETDATE(), --END_TIME     DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS     CAST(GETDATE() as date)) --COMPLETION_DATE         IF OBJECT_ID('tempdb..#FUNDS_CONCAT', 'U') IS NOT NULL DROP TABLE #FUNDS_CONCAT     IF OBJECT_ID('tempdb..#Inv_desk_concat', 'U') IS NOT NULL DROP TABLE #Inv_desk_concat     IF OBJECT_ID('tempdb..#max_touch_table', 'U') IS NOT NULL DROP TABLE #max_touch_table     IF OBJECT_ID('tempdb..#max_touch_trades', 'U') IS NOT NULL DROP TABLE #max_touch_trades      IF OBJECT_ID('tempdb..#Min_Exec_Time', 'U') IS NOT NULL DROP TABLE #Min_Exec_Time     IF OBJECT_ID('tempdb..#max_touch_table_trader_pmo', 'U') IS NOT NULL DROP TABLE #max_touch_table_trader_pmo     IF OBJECT_ID('tempdb..#max_touch_table_trader_trdo', 'U') IS NOT NULL DROP TABLE #max_touch_table_trader_trdo     IF OBJECT_ID('tempdb..#Latest_trader_trdo', 'U') IS NOT NULL DROP TABLE #Latest_trader_trdo     IF OBJECT_ID('tempdb..#Latest_trader', 'U') IS NOT NULL DROP TABLE #Latest_trader     IF OBJECT_ID('tempdb..#Latest_temp_trades_distinct', 'U') IS NOT NULL DROP TABLE #Latest_temp_trades_distinct     IF OBJECT_ID('tempdb..#Latest_temp_trades_total', 'U') IS NOT NULL DROP TABLE #Latest_temp_trades_total     IF OBJECT_ID('tempdb..#settle_date_temp', 'U') IS NOT NULL DROP TABLE #settle_date_temp     IF OBJECT_ID('tempdb..#Latest_temp_trades', 'U') IS NOT NULL DROP TABLE #Latest_temp_trades     IF OBJECT_ID('tempdb..#concat_ord', 'U') IS NOT NULL DROP TABLE #concat_ord     IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids     IF OBJECT_ID('tempdb..#trades_metadata', 'U') IS NOT NULL DROP TABLE #trades_metadata        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_PM_ORDER_TABLE_VG_09_TIMELY_EXECUTION_DMG_delete  CreateDate: 2025-06-26 18:00:45.423  ModifyDate: 2025-06-26 18:00:45.423  --- DEFINITION START ---      CREATE PROCEDURE [dbo].[MASTER_PM_ORDER_TABLE_VG_09_TIMELY_EXECUTION_DMG_delete]        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;           --2. Concatenate all funds on a trade that received an allocation     IF OBJECT_ID('tempdb..#funds', 'U') IS NOT NULL DROP TABLE #funds     SELECT DISTINCT       vg.ORD_NUM,      PORTFOLIOS_PORTFOLIO_NAME     into #funds     FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_DMG_TABLE vg     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD = vg.ORD_NUM     LEFT JOIN (SELECT ORD_NUM, PORTFOLIOS_PORTFOLIO_NAME FROM  VISTA_REPORTING.dbo.TRADES) t ON oc.TRD_ORD = t.ORD_NUM         IF OBJECT_ID('tempdb..#FUNDS_CONCAT', 'U') IS NOT NULL DROP TABLE #FUNDS_CONCAT     SELECT       RESULTS.ORD_NUM,       STUFF((            SELECT DISTINCT ', ' + LTRIM(RTRIM(PORTFOLIOS_PORTFOLIO_NAME))            FROM #funds            WHERE (ORD_NUM = Results.ORD_NUM)            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')       ,1,2,'') AS Funds_concat    INTO #FUNDS_CONCAT    FROM #funds Results    GROUP BY RESULTS.ORD_NUM        -- Get Investment desks associated with all funds on the TRD order    IF OBJECT_ID('tempdb..#Inv_desk_concat', 'U') IS NOT NULL DROP TABLE #Inv_desk_concat    ; WITH INV AS (SELECT DISTINCT           od.ORD_NUM,           p.ancestor    FROM VISTA_STAGING.dbo.ORDERS_DETAIL od    LEFT JOIN VISTA_STAGING.dbo.PORTFOLIO_GROUP_CLOSURE_TABLE p    ON od.PORTFOLIO_NAME = p.descendant    --WHERE p.ancestor IN ('MG_ATCRED','MG_RET_FI','MG_INSTI','MG_INTER','MG_RESTCT','MG_IN_CAP','MG_LEVFIN','MG_MIB','MG_REDEBT') -- This is the list of investment desks provided in the business requirements documents NEED TO CHECK FOR DMG DESK    )    SELECT      ORD_NUM,      STUFF((           SELECT DISTINCT ', ' + LTRIM(RTRIM(ancestor))           FROM INV           WHERE (ORD_NUM = Results.ORD_NUM)           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS Inv_Desk_Concat    INTO #Inv_desk_concat    FROM INV Results    GROUP BY ORD_NUM        IF OBJECT_ID('tempdb..#max_touch_table', 'U') IS NOT NULL DROP TABLE #max_touch_table         select distinct           ORD_NUM,           MAX(TOUCH_COUNT) AS MAX_TOUCH    into #max_touch_table    from VISTA_REPORTING.dbo.PM_ORDERS    group by ORD_NUM        IF OBJECT_ID('tempdb..#max_touch_trades', 'U') IS NOT NULL DROP TABLE #max_touch_trades         select distinct           ORD_NUM,           MAX(TOUCH_COUNT) AS MAX_TOUCH    into #max_touch_trades    from VISTA_REPORTING.dbo.TRADES    group by ORD_NUM            IF OBJECT_ID('tempdb..#Min_Exec_Time', 'U') IS NOT NULL DROP TABLE #Min_Exec_Time    SELECT DISTINCT      PM.ORD_NUM,      MIN(T.EXECUTION_TIME) AS MIN_EXEC_TIME,      MAX(T.EXECUTION_TIME) AS MAX_EXEC_TIME,      MIN(PM.ACTIVE_TIME) AS MIN_ACTIVE_TIME,      PM.AUTH_TIME    INTO #Min_Exec_Time    FROM VISTA_REPORTING.dbo.PM_ORDERS PM    LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS OC ON OC.PM_ORD=PM.ORD_NUM    LEFT JOIN (SELECT EXECUTION_TIME, ORD_NUM FROM  VISTA_REPORTING.dbo.TRADES) T ON OC.TRD_ORD=T.ORD_NUM    WHERE PM.AUTH_TIME IS NOT NULL    GROUP BY                   PM.ORD_NUM, PM.AUTH_TIME             IF OBJECT_ID('tempdb..#max_touch_table_trader_pmo', 'U') IS NOT NULL DROP TABLE #max_touch_table_trader_pmo    select distinct           ORD_NUM,           MAX(TOUCH_COUNT) AS MAX_TOUCH    into #max_touch_table_trader_pmo    from VISTA_REPORTING.dbo.PM_ORDERS    WHERE TRADER IS NOT NULL    group by ORD_NUM        IF OBJECT_ID('tempdb..#max_touch_table_trader_trdo', 'U') IS NOT NULL DROP TABLE #max_touch_table_trader_trdo    select distinct           ORD_NUM,           MAX(TOUCH_COUNT) AS MAX_TOUCH    into #max_touch_table_trader_trdo    from VISTA_REPORTING.dbo.TRD_ORDERS    WHERE TRADER IS NOT NULL    group by ORD_NUM        IF OBJECT_ID('tempdb..#Latest_trader_trdo', 'U') IS NOT NULL DROP TABLE #Latest_trader_trdo    select distinct           oc.PM_ORD AS ORD_NUM,        TRADER AS [TRADER] -- Take the max trader to avoid duplication    into #Latest_trader_trdo    from (SELECT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc    LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS trdo    ON oc.TRD_ORD = trdo.ORD_NUM    INNER JOIN #max_touch_table_trader_trdo mx    ON trdo.ORD_NUM = mx.ORD_NUM AND trdo.TOUCH_COUNT = mx.MAX_TOUCH    --group by oc.PM_ORD         IF OBJECT_ID('tempdb..#Latest_trader', 'U') IS NOT NULL DROP TABLE #Latest_trader    SELECT       pm.ORD_NUM,      COALESCE(pm.TRADER, lt.TRADER) AS TRADER,      COALESCE(d.FULL_NAME, d2.FULL_NAME) AS TRADER_FULL_NAME    INTO #Latest_trader    FROM VISTA_REPORTING.dbo.PM_ORDERS pm    LEFT JOIN #max_touch_table_trader_pmo mt ON mt.ORD_NUM=pm.ORD_NUM AND mt.MAX_TOUCH=pm.TOUCH_COUNT    LEFT JOIN VISTA_REPORTING.dbo.DEALER_AND_DESK D ON pm.TRADER = D.INITIALS    LEFT JOIN #Latest_trader_trdo lt ON pm.ORD_NUM = lt.ORD_NUM    LEFT JOIN VISTA_REPORTING.dbo.DEALER_AND_DESK D2 ON lt.TRADER = D2.INITIALS    WHERE mt.ORD_NUM IS NOT NULL OR lt.ORD_NUM IS NOT NULL    --GROUP BY pm.ORD_NUM         IF OBJECT_ID('tempdb..#Latest_temp_trades_distinct', 'U') IS NOT NULL DROP TABLE #Latest_temp_trades_distinct    SELECT DISTINCT    oc.PM_ORD AS ORD_NUM,     t.MULTI_FUND_ID,     t.TRD_CURRENCY,    ISNULL(PL.Venue,'Manual') AS Venue,    CASE     WHEN prim.TWEB_CLOSE_DEALING = 1 THEN 'TWEB Close'     WHEN prim.[1615_DEALING] = 1 THEN '1615 Dealing'     WHEN t.ACTIVITY_TYPE = 'MG.FI 1. Proces' THEN 'VPT'    END AS [Method],    PL.RELEASE_DATETIME,    t.EXECUTION_TIME,    t.TRD_TRADE_DATE,    t.TRD_AUTH_TIME,    t.TRDCOMM_COMMENTS,    ABS(PM.FACE) AS FACE,    t.TRD_ORIG_FACE,    t.ACTIVITY_TYPE_DECODE,    CASE     WHEN prim.DEALING_DESK='DMG' --this bit probably needs further checks     THEN      CASE       WHEN prim.DEBT_DERIV = 'DEBT'        THEN        CASE         WHEN t.TRD_COUPON IS NOT NULL AND i2.TICKER IS NOT NULL AND i2.MATURITY IS NOT NULL          THEN CONCAT(ISNULL(i2.TICKER,''),' ', CAST(ISNULL(t.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))         ELSE  CONCAT(ISNULL(PM.SEC_DESC1,''),' ', CAST(ISNULL(t.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))        END       ELSE prim.DESC_INSTMT      END    END AS [Description],    t.TRD_EX_BROKER_CODE,    t.[TRD_COUNTERPARTY],    t.[MATURITY],    pl.[FULL_NAME_VENUE]    INTO #Latest_temp_trades_distinct    FROM VISTA_REPORTING.dbo.TRADES T    LEFT JOIN (SELECT * FROM VISTA_REPORTING.DBO.ORDERS_CROSS) OC    ON T.ORD_NUM = OC.TRD_ORD    LEFT JOIN (SELECT PLACEMENT_NUM, VENUE, RELEASE_DATETIME, FULL_NAME_VENUE FROM  VISTA_REPORTING.dbo.PLACEMENTS) PL    ON T.PLACEMENT_NUM = PL.PLACEMENT_NUM    LEFT JOIN (SELECT MULTI_FUND_ID,DESC_INSTmt, DEALING_DESK, DEBT_DERIV, [1615_DEALING], TWEB_CLOSE_DEALING  FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) prim    ON t.MULTI_FUND_ID =prim.MULTI_FUND_ID    LEFT JOIN VISTA_REPORTING.dbo.REUTERS_PRICE_BENCHMARK_TABLE pb    on pb.MULTI_FUND_ID=T.MULTI_FUND_ID    LEFT JOIN (SELECT PM2.ORD_NUM, TOUCH_COUNT, FACE, SEC_DESC1      FROM VISTA_REPORTING.DBO.PM_ORDERS PM2 INNER JOIN #max_touch_table mt ON mt.ORD_NUM=PM2.ORD_NUM AND mt.MAX_TOUCH=PM2.TOUCH_COUNT) PM    ON oc.PM_ORD = PM.ORD_NUM    OUTER APPLY (SELECT TOP 1 i.TICKER, i.MATURITY FROM VISTA_REPORTING.dbo.INSTRUMENTS i                   WHERE (i.CUSIP=t.CUSIP AND i.DATE<=CONVERT(DATE, t.EXECUTION_TIME))                   ORDER BY i.DATE DESC) as i2    WHERE FinalFlag = 1    AND OC.PM_ORD IS NOT NULL        --Adding this in due to Remain Amount not showing correctly    IF OBJECT_ID('tempdb..#Latest_temp_trades_total', 'U') IS NOT NULL DROP TABLE #Latest_temp_trades_total    SELECT      ORD_NUM,     SUM(ABS(TRD_ORIG_FACE)) as TOTAL_AMT    INTO #Latest_temp_trades_total    FROM #Latest_temp_trades_distinct    GROUP BY ORD_NUM        --Adding in Settlement date so it can be concatonated and added in final table    IF OBJECT_ID('tempdb..#settle_date_temp', 'U') IS NOT NULL DROP TABLE #settle_date_temp    SELECT DISTINCT      tr.ORD_NUM     ,tr.MULTI_FUND_ID     --,tr.TRD_CURRENCY     --,tr.EXECUTION_TIME     --,tr.TRD_AUTH_TIME     --,tr.TRD_TRADE_DATE     ,T2.SETTLE_DATE     ,tr.PULL_DATE    INTO #settle_date_temp    FROM VISTA_REPORTING.dbo.TRADES as tr    inner join (SELECT         MULTI_FUND_ID,        MAX(TOUCH_COUNT) AS MAX_TOUCH,        max(TRD_SETTLE_DATE) AS SETTLE_DATE       FROM VISTA_REPORTING.dbo.TRADES       GROUP BY MULTI_FUND_ID) as t2     on (tr.MULTI_FUND_ID=t2.MULTI_FUND_ID) and (tr.TOUCH_COUNT=t2.MAX_TOUCH)        IF OBJECT_ID('tempdb..#Latest_temp_trades', 'U') IS NOT NULL DROP TABLE #Latest_temp_trades    SELECT     ltd.ORD_NUM,     ltd.MULTI_FUND_ID,    ltd.TRD_CURRENCY,    ltd.Venue,    ltd.[Method],    ltd.RELEASE_DATETIME,    ltd.EXECUTION_TIME,    ltd.TRD_TRADE_DATE,    ltd.TRD_AUTH_TIME,    ltd.TRDCOMM_COMMENTS,    SUM(ABS(ltd.TRD_ORIG_FACE)) AS [Booked Amt],    ltd.FACE - lt.[TOTAL_AMT] AS [Remain Amt],    ltd.ACTIVITY_TYPE_DECODE,    ltd.[Description],    ltd.TRD_EX_BROKER_CODE,    ltd.TRD_COUNTERPARTY,    ltd.MATURITY,    sett_temp.SETTLE_DATE,    ltd.[FULL_NAME_VENUE]    INTO #Latest_temp_trades    FROM #Latest_temp_trades_distinct ltd    left join #Latest_temp_trades_total lt    on ltd.ORD_NUM = lt.ORD_NUM    left join #settle_date_temp sett_temp    on sett_temp.ORD_NUM = ltd.ORD_NUM    GROUP BY      ltd.ORD_NUM,      ltd.MULTI_FUND_ID,     ltd.TRD_CURRENCY,     ltd.Venue,     ltd.[Method],     ltd.RELEASE_DATETIME,     ltd.EXECUTION_TIME,     ltd.TRD_TRADE_DATE,     ltd.TRD_AUTH_TIME,     ltd.TRDCOMM_COMMENTS,     ltd.ACTIVITY_TYPE_DECODE,     ltd.[Description],     ltd.FACE,     ltd.TRD_EX_BROKER_CODE,     lt.[TOTAL_AMT],     ltd.TRD_COUNTERPARTY,     ltd.MATURITY,     sett_temp.SETTLE_DATE,     ltd.[FULL_NAME_VENUE]                IF OBJECT_ID('tempdb..#concat_ord', 'U') IS NOT NULL DROP TABLE #concat_ord       SELECT        ORD_NUM,        STUFF((        SELECT '| ' + CAST(MULTI_FUND_ID AS VARCHAR(50))         FROM #Latest_temp_trades Results        WHERE (t.ORD_NUM = Results.ORD_NUM)         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS MFID_concat,        STUFF((        SELECT '| ' + CAST(TRD_CURRENCY AS VARCHAR(50))         FROM #Latest_temp_trades Results         WHERE (t.ORD_NUM = Results.ORD_NUM)         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS Sett_CCy_concat,        STUFF((        SELECT '| ' + CAST(FULL_NAME_VENUE AS VARCHAR(50))         FROM #Latest_temp_trades Results        WHERE (t.ORD_NUM = Results.ORD_NUM)         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS FULL_NAME_Venue_concat,           STUFF((        SELECT '| ' + CAST([Method] AS VARCHAR(50))         FROM #Latest_temp_trades Results        WHERE (t.ORD_NUM = Results.ORD_NUM)         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS Method_concat,             STUFF((        SELECT '| ' + CAST(RELEASE_DATETIME AS VARCHAR(50))        FROM #Latest_temp_trades Results        WHERE (t.ORD_NUM = Results.ORD_NUM)         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS RELEASE_DATETIME_concat,         STUFF((        SELECT '| ' + CONCAT(CONVERT(VARCHAR(25),CONVERT(date,NULLIF(EXECUTION_TIME,'')),103),' ',CONVERT(TIME(0),NULLIF(EXECUTION_TIME,'')))         FROM #Latest_temp_trades Results        WHERE (t.ORD_NUM = Results.ORD_NUM)         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS EXECUTION_TIME_concat,            STUFF((        SELECT '| ' + CONVERT(VARCHAR(50),TRD_TRADE_DATE,103)         FROM #Latest_temp_trades Results        WHERE (t.ORD_NUM = Results.ORD_NUM)         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS TRD_TRADE_DATE_concat,               STUFF((        SELECT '| ' + CONCAT(CONVERT(VARCHAR(25),CONVERT(date,NULLIF(TRD_AUTH_TIME,'')),103),' ',CONVERT(TIME(0),NULLIF(TRD_AUTH_TIME,'')))        FROM #Latest_temp_trades Results        WHERE (t.ORD_NUM = Results.ORD_NUM)         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS TRD_AUTH_TIME_concat,          STUFF((        SELECT '| ' + CAST(TRDCOMM_COMMENTS AS VARCHAR(1000))         FROM #Latest_temp_trades Results        WHERE (t.ORD_NUM = Results.ORD_NUM)         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS TRDCOMM_COMMENTS_concat,            STUFF((        SELECT '| ' + CAST(CONVERT(DECIMAL(19,2),[Booked amt]) AS VARCHAR(50))         FROM #Latest_temp_trades Results        WHERE (t.ORD_NUM = Results.ORD_NUM)         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS Booked_amt_concat,         STUFF((        SELECT '| ' + CAST(CONVERT(DECIMAL(19,2),[Remain Amt]) AS VARCHAR(50))         FROM #Latest_temp_trades Results        WHERE (t.ORD_NUM = Results.ORD_NUM)         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS Remain_amt_concat,            STUFF((        SELECT '| ' + CAST([Description] AS VARCHAR(1000))         FROM #Latest_temp_trades Results        WHERE (t.ORD_NUM = Results.ORD_NUM)         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS [Description_Concat],            STUFF((        SELECT '| ' + CAST([ACTIVITY_TYPE_DECODE] AS VARCHAR(50))         FROM #Latest_temp_trades Results        WHERE (t.ORD_NUM = Results.ORD_NUM)         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS [Activity_Type_Concat],      STUFF((        SELECT '| ' + CAST(TRD_EX_BROKER_CODE AS VARCHAR(50))         FROM #Latest_temp_trades Results        WHERE (t.ORD_NUM = Results.ORD_NUM)         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS TRD_EX_BROKER_CODE,      STUFF((        SELECT '| ' + CAST(TRD_COUNTERPARTY AS VARCHAR(50))         FROM #Latest_temp_trades Results        WHERE (t.ORD_NUM = Results.ORD_NUM)         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS TRD_COUNTERPARTY,      STUFF((        SELECT '| ' + CAST(SETTLE_DATE AS VARCHAR(50))         FROM #Latest_temp_trades Results        WHERE (t.ORD_NUM = Results.ORD_NUM)         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS SETTLE_DATE     INTO #CONCAT_ORD     FROM #Latest_temp_trades t     GROUP BY ORD_NUM              IF OBJECT_ID('VISTA_REPORTING.DBO.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.DBO.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE        SELECT DISTINCT      PM.AUTH_TIME,     MET.MIN_EXEC_TIME AS FIRST_EXECUTION,     MET.MAX_EXEC_TIME AS LAST_EXECUTION,     conc_ord.TRDCOMM_COMMENTS_concat AS  [DEALER_COMMENT],     PM.COMMENTS_VALUE AS GENERAL_COMMENT,     E.ORD_NUM as [ORDER],     PM.PM AS FM,     PM.TRAN_TYPE AS SIDE,     conc_ord.TRD_EX_BROKER_CODE as EX_CPTY,     PM.CURRENCY AS CCY,     conc_ord.[Sett_Ccy_Concat] as [SETT_CCY],     i2.ISIN,     PM.CUSIP,     i2.SEDOL,     conc_ord.[Description_Concat] as [DESCRIPTION],     lst_trdr.TRADER as DEALER,-- have taken out the temp tables that made these previously as unsure they are relevant, if we see duplicates/null values we can add them back in     ISNULL(conc_ord.[FULL_NAME_Venue_concat] ,'Manual') AS [PLATFORM],     conc_ord.Method_Concat AS [METHOD],     CONVERT(DECIMAL(18,2),ABS(PM.FACE)) AS [ORDER_AMOUNT],     lt.[Remain Amt] AS [Remain_Amt],     conc_ord.Booked_amt_concat AS  [BOOKED_AMOUNT],     MET.[MIN_ACTIVE_TIME] AS ACTIVE_DATE,     conc_ord.RELEASE_DATETIME_concat AS  [SEND_DATE],     conc_ord.[MFID_Concat] as MFID,     conc_ord.TRD_TRADE_DATE_concat AS  [TRADE_DATE],     conc_ord.EXECUTION_TIME_concat AS  [EXEC_DATE],     conc_ord.TRD_AUTH_TIME_concat AS  [ENTRY_DATE],     CASE        WHEN e.Exception_Type ='Inter' THEN 'Unfilled'        WHEN e.Exception_Type ='Intra' THEN 'Filled Outside'        ELSE NULL       END AS [TE_Type],     CASE      WHEN PRIM.DEALING_DESK = 'DMG' AND PRIM.INST_TYPE = ('GOV') THEN 60     WHEN PRIM.DEALING_DESK = 'DMG' AND PRIM.INST_TYPE in ( 'SCDS', 'ICDS') THEN 120     WHEN PRIM.DEALING_DESK = 'DMG' AND PRIM.INST_TYPE in ('IFS', 'OIS', 'IRS', 'TRS', 'EQOPT', 'FXOPT', 'ASWP') THEN 180--need to add asset swaps in here        ELSE NULL       END AS [THRESHOLD],     E.TIMESPAN,     FND.FUNDS_CONCAT AS [FUND],     DATEDIFF(MINUTE, MET.AUTH_TIME, MET.MIN_ACTIVE_TIME) AS PICKUP_TIMESPAN,     DATEDIFF(MINUTE, MET.AUTH_TIME, MET.MIN_EXEC_TIME) AS FIRST_EXECUTION_TIMESPAN,     CASE      WHEN (ABS(PM.FACE)-max(ABS(TRD.FILL_AMT))) = 0 THEN 'YES'           ELSE 'NO'       END AS [COMPLETED_ORDERS],     DATEDIFF(minute,PM.AUTH_TIME, Reversion_Time) as [REVERSION_TIMESPAN],     PRIM.INST_TYPE,     conc_ord.Activity_Type_Concat as [ACTIVITY_TYPE],     CASE WHEN PRIM.INTERFUND_TRANSFER = 1 THEN 'Y' ELSE 'N' END as PUT_THROUGH,     CASE WHEN i2.EMERGING_MARKET = 1 THEN 'Y' ELSE 'N' END AS EM_NON_EM,     E.REVERSION_TIME,     lt.MATURITY as [MATURITY_DATE],     conc_ord.SETTLE_DATE as [SETTLEMENT_DATE],      CASE WHEN E.VG_09=1 THEN 1 ELSE 0 END AS VG_09_POLICY,      CASE WHEN E.VG_09=1 THEN E.CREATETIME ELSE NULL END AS VG_09_POLICY_CREATETIME,      CASE WHEN E.VG_09=5 THEN 1 ELSE 0 END AS VG_09_5_DAY,      CASE WHEN E.VG_09=5 THEN E.CREATETIME ELSE NULL END AS VG_09_5_DAY_CREATETIME,      CASE WHEN E.VG_09=10 THEN 1 ELSE 0 END AS VG_09_10_DAY,      CASE WHEN E.VG_09=10 THEN E.CREATETIME ELSE NULL END AS VG_09_10_DAY_CREATETIME,      CASE WHEN E.VG_09=20 THEN 1 ELSE 0 END AS VG_09_20_DAY,      CASE WHEN E.VG_09=20 THEN E.CREATETIME ELSE NULL END AS VG_09_20_DAY_CREATETIME,      CASE WHEN E.VG_09=40 THEN 1 ELSE 0 END AS VG_09_40_DAY,      CASE WHEN E.VG_09=40 THEN E.CREATETIME ELSE NULL END AS VG_09_40_DAY_CREATETIME,      CASE WHEN E.VG_09=80 THEN 1 ELSE 0 END AS VG_09_80_DAY,      CASE WHEN E.VG_09=80 THEN E.CREATETIME ELSE NULL END AS VG_09_80_DAY_CREATETIME,      CASE WHEN E.VG_09=160 THEN 1 ELSE 0 END AS VG_09_160_DAY,      CASE WHEN E.VG_09=160 THEN E.CREATETIME ELSE NULL END AS VG_09_160_DAY_CREATETIME,       CASE WHEN E.VG_09 = 0 THEN 0 ELSE 1 END AS EXCEPTION_FLAG,     E.CREATETIME AS CREATE_DATE,     CONCAT(EXCEPTION_TYPE,VG_09) AS AUX,     concat(i2.SM_SEC_GROUP,'/',i2.SM_SEC_TYPE) as [Asset_Type/Subtype],     conc_ord.TRD_COUNTERPARTY AS CPTY,     T.EXECUTION_TYPE_DECODE     --TRD.LIMIT_TYPE,     --TRD.LIMIT_VALUE,     --E.[VG_11_CREATETIME] AS VG_11_CREATETIME,     --E.[VG_11],     --INV.INV_DESK_CONCAT AS [INV_DESK],     --CONCAT(YEAR(PM.AUTH_TIME),'-',left(datename(m,PM.AUTH_TIME),3)) AS MONTH_YEAR,     --i2.SM_SEC_GROUP,     --T.TRD_PURPOSE,     --dc1.[VALUE] AS INSTRUCTION,     --PM.ORDER_REASON_DECODE AS PURPOSE,          --E.DEALING_DESK,        --E.EXCEPTION_TYPE,      ----PRIM.PRIMARY_MARKET_ORDER_LEVEL AS PRIMARY_MARKET,     --PM.SEC_DESC1,     --PM.PM_FULL_NAME,     --PM.ORDER_REASON,     --lst_trdr.TRADER_FULL_NAME,     ----(ABS(PM.FACE)-ABS(TRD.FILL_AMT)) AS FILLED,     --conc_ord.Remain_amt_concat AS [Remain Amt],     --NULL AS INTERNAL_COMMENT,     --NULL AS DELAY_IN_EXECUTION,     --NULL AS FILLED_UNFILLED,     -- T.B3Q_RATIONALE,     -- T.NWQ_RATIONALE    INTO VISTA_REPORTING.DBO.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_DMG_TABLE    FROM (SELECT *  FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_DMG_TABLE) E    LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON E.ORD_NUM = OC.PM_ORD    LEFT JOIN (SELECT T2.ORD_NUM, B3Q_RATIONALE, NWQ_RATIONALE, TOUCH_COUNT, EXECUTION_TYPE_DECODE, TRD_PURPOSE, TRD_ORIG_FACE FROM VISTA_REPORTING.DBO.TRADES T2     INNER JOIN #max_touch_trades MTT ON MTT.ORD_NUM = T2.ORD_NUM AND MTT.MAX_TOUCH = T2.TOUCH_COUNT) T     ON T.ORD_NUM = OC.TRD_ORD    LEFT JOIN (SELECT ORD_NUM, INST_TYPE, PRIMARY_MARKET_ORDER_LEVEL ,INTERFUND_TRANSFER, DEALING_DESK FROM VISTA_REPORTING.DBO.PRIMARY_INST_TYPE_TABLE) PRIM ON PRIM.ORD_NUM = OC.TRD_ORD AND PRIM.DEALING_DESK = E.DEALING_DESK    LEFT JOIN (SELECT ORD_NUM, LIMIT_TYPE, LIMIT_VALUE, FILL_AMT FROM VISTA_REPORTING.DBO.TRD_ORDERS) TRD ON OC.TRD_ORD = TRD.ORD_NUM     LEFT JOIN (SELECT ORD_NUM,MULTI_FUND_ID,TRDCOMM_COMMENTS,EXECUTION_TIME,[Remain Amt],MATURITY FROM #Latest_temp_trades) as lt ON lt.ORD_NUM=oc.PM_ORD    LEFT JOIN (SELECT PM2.ORD_NUM, SEC_DESC1, AUTH_TIME, BROKER_CODE, PM_FULL_NAME, PM, UPDATE_INSTR, CUSIP, CURRENCY, ORDER_REASON_DECODE, TRAN_TYPE, COMMENTS_VALUE, ORDER_REASON       , TRADER, TRADER_FULL_NAME, FACE       FROM VISTA_REPORTING.DBO.PM_ORDERS PM2      INNER JOIN (select * from #max_touch_table) MT ON MT.ORD_NUM = PM2.ORD_NUM AND MT.MAX_TOUCH = PM2.TOUCH_COUNT) PM ON PM.ORD_NUM = E.ORD_NUM    OUTER APPLY (SELECT TOP 1         i.ISIN,        i.SEDOL,        i.EMERGING_MARKET,        i.SM_SEC_GROUP,        i.SM_SEC_TYPE        FROM VISTA_REPORTING.dbo.INSTRUMENTS i                 WHERE (i.CUSIP=PM.CUSIP AND i.DATE<=CONVERT(DATE, PM.AUTH_TIME))                 ORDER BY i.DATE DESC) as i2    LEFT JOIN (select * from #FUNDS_CONCAT) FND ON FND.ORD_NUM = E.ORD_NUM    LEFT JOIN (select * from  #INV_DESK_CONCAT) INV ON INV.ORD_NUM = e.ORD_NUM    LEFT JOIN (SELECT TAG_NAME,CODE,[VALUE] FROM VISTA_REPORTING.dbo.DECODES) dc1 ON dc1.TAG_NAME = 'PM_INSTRUCTION' AND dc1.CODE= PM.UPDATE_INSTR    LEFT JOIN (SELECT ORD_NUM,MAX_EXEC_TIME, MIN_EXEC_TIME, MIN_ACTIVE_TIME, AUTH_TIME FROM #Min_Exec_Time) MET ON MET.ORD_NUM=E.ORD_NUM    LEFT JOIN (SELECT ORD_NUM,[Sett_Ccy_Concat],[Description_Concat],[FULL_NAME_Venue_Concat],Method_Concat,Remain_amt_concat,Booked_amt_concat,         RELEASE_DATETIME_concat,TRD_TRADE_DATE_concat,EXECUTION_TIME_concat,TRD_AUTH_TIME_concat,TRDCOMM_COMMENTS_concat,[MFID_Concat],Activity_Type_Concat,TRD_EX_BROKER_CODE,TRD_COUNTERPARTY,SETTLE_DATE         FROM #concat_ord) conc_ord ON conc_ord.ORD_NUM=e.ORD_NUM    LEFT JOIN (SELECT ORD_NUM,TRADER, TRADER_FULL_NAME FROM #Latest_trader) lst_trdr ON e.ORD_NUM = lst_trdr.ORD_NUM    GROUP BY     dc1.[VALUE],     PM.ORDER_REASON_DECODE,     PM.COMMENTS_VALUE,     E.ORD_NUM,     PM.PM,     PM.TRAN_TYPE,     PM.CURRENCY,     conc_ord.[Sett_Ccy_Concat],     i2.ISIN,     PM.CUSIP,     i2.SEDOL,     conc_ord.[Description_Concat],     lst_trdr.TRADER,-- have taken out the temp tables that made these previously as unsure they are relevant, if we see duplicates/null values we can add them back in     conc_ord.Method_Concat,     PM.FACE,     T.TRD_ORIG_FACE,     conc_ord.Booked_amt_concat,     MET.[MIN_ACTIVE_TIME],     conc_ord.RELEASE_DATETIME_concat,     conc_ord.[MFID_Concat],     conc_ord.TRD_TRADE_DATE_concat,     conc_ord.EXECUTION_TIME_concat,     conc_ord.TRD_AUTH_TIME_concat,     conc_ord.TRDCOMM_COMMENTS_concat,     PRIM.DEALING_DESK,      PRIM.INST_TYPE,     E.TIMESPAN,     FND.FUNDS_CONCAT,     INV.INV_DESK_CONCAT,     MET.AUTH_TIME,      MET.MIN_ACTIVE_TIME,     MET.MIN_EXEC_TIME,     MET.MAX_EXEC_TIME,     Reversion_Time,     PM.AUTH_TIME,     PRIM.INST_TYPE,     conc_ord.Activity_Type_Concat,     PRIM.INTERFUND_TRANSFER,     TRD.LIMIT_TYPE,     TRD.LIMIT_VALUE,     i2.EMERGING_MARKET,     E.REVERSION_TIME,     E.VG_09,     E.CREATETIME,     conc_ord.TRD_COUNTERPARTY,     i2.SM_SEC_GROUP,     i2.SM_SEC_TYPE,     T.EXECUTION_TYPE_DECODE,     PM.AUTH_TIME,     T.TRD_PURPOSE,     E.Exception_Type,     conc_ord.TRD_EX_BROKER_CODE,     lt.[Remain Amt],     CONCAT(EXCEPTION_TYPE,VG_09),     lt.MATURITY,     conc_ord.SETTLE_DATE,     conc_ord.FULL_NAME_Venue_concat             IF OBJECT_ID('tempdb..#FUNDS_CONCAT', 'U') IS NOT NULL DROP TABLE #FUNDS_CONCAT     IF OBJECT_ID('tempdb..#Inv_desk_concat', 'U') IS NOT NULL DROP TABLE #Inv_desk_concat     IF OBJECT_ID('tempdb..#max_touch_table', 'U') IS NOT NULL DROP TABLE #max_touch_table     IF OBJECT_ID('tempdb..#max_touch_trades', 'U') IS NOT NULL DROP TABLE #max_touch_trades      IF OBJECT_ID('tempdb..#Min_Exec_Time', 'U') IS NOT NULL DROP TABLE #Min_Exec_Time     IF OBJECT_ID('tempdb..#max_touch_table_trader_pmo', 'U') IS NOT NULL DROP TABLE #max_touch_table_trader_pmo     IF OBJECT_ID('tempdb..#max_touch_table_trader_trdo', 'U') IS NOT NULL DROP TABLE #max_touch_table_trader_trdo     IF OBJECT_ID('tempdb..#Latest_trader_trdo', 'U') IS NOT NULL DROP TABLE #Latest_trader_trdo     IF OBJECT_ID('tempdb..#Latest_trader', 'U') IS NOT NULL DROP TABLE #Latest_trader     IF OBJECT_ID('tempdb..#Latest_temp_trades_distinct', 'U') IS NOT NULL DROP TABLE #Latest_temp_trades_distinct     IF OBJECT_ID('tempdb..#Latest_temp_trades_total', 'U') IS NOT NULL DROP TABLE #Latest_temp_trades_total     IF OBJECT_ID('tempdb..#settle_date_temp', 'U') IS NOT NULL DROP TABLE #settle_date_temp     IF OBJECT_ID('tempdb..#Latest_temp_trades', 'U') IS NOT NULL DROP TABLE #Latest_temp_trades     IF OBJECT_ID('tempdb..#concat_ord', 'U') IS NOT NULL DROP TABLE #concat_ord            END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_PM_ORDER_TABLE_VG_09_TIMELY_EXECUTION_FX  CreateDate: 2025-06-26 18:01:01.240  ModifyDate: 2025-06-26 18:01:01.240  --- DEFINITION START ---  -- =============================================    -- Author:  <LIZZIE REYNOLDS>    -- Create date: <10/07/2019>    -- Description: <MASTER TABLE FOR FX TIMELY EX>    -- =============================================    CREATE PROCEDURE [dbo].[MASTER_PM_ORDER_TABLE_VG_09_TIMELY_EXECUTION_FX]     -- Add the parameters for the stored procedure here        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;             DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()             IF OBJECT_ID('tempdb..#distinct_ids_al', 'U') IS NOT NULL DROP TABLE #distinct_ids_al     SELECT DISTINCT       pr.ORD_NUM as TRD_ORD,      oc.PM_ORD AS ORD_NUM,      pr.MULTI_FUND_ID     INTO #distinct_ids_al     FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = pr.ORD_NUM     WHERE pr.DEALING_DESK = 'FX'             IF OBJECT_ID('tempdb..#distinct_ids_fx', 'U') IS NOT NULL DROP TABLE #distinct_ids_fx     SELECT DISTINCT      fxt.ORDER_ID AS TRD_ORD,      vg.ORDER_ID,      fxt.TRADE_ID AS MULTI_FUND_ID      INTO #distinct_ids_fx     FROM Vista_Staging.dbo.VG_09_TIMELY_EXECUTION_FX_TABLE vg     LEFT JOIN Vista_Reporting.dbo.FX_ORDERS fxo ON fxo.FXM_ORDER_ID = vg.ORDER_ID     LEFT JOIN Vista_Reporting.dbo.FX_TRADES fxt ON fxt.ORDER_ID = fxo.FXM_ORDER_ID               IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE', 'U') IS NOT NULL     DELETE FROM #distinct_ids_fx where NOT EXISTS (SELECT DISTINCT od.FXM_ORDER_ID                   FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_FX od                   WHERE od.FXM_ORDER_ID = #distinct_ids_fx.ORDER_ID)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE', 'U') IS NOT NULL     DELETE FROM #distinct_ids_al where NOT EXISTS (SELECT DISTINCT od.PM_ORD                   FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                   WHERE od.PM_ORD = #distinct_ids_al.ORD_NUM)             IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE  #distinct_ids     SELECT *      INTO #distinct_ids     FROM #distinct_ids_al         UNION ALL         SELECT *      FROM #distinct_ids_fx                -- Insert statements for procedure here         IF OBJECT_ID('tempdb..#max_touch_pm', 'U') IS NOT NULL DROP TABLE #max_touch_pm     SELECT DISTINCT       pm.ORD_NUM,       MAX(pm.TOUCH_COUNT) as MAX_TOUCH      INTO #max_touch_pm     FROM VISTA_REPORTING.dbo.PM_ORDERS pm     WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = pm.ORD_NUM)     GROUP BY ORD_NUM             IF OBJECT_ID('tempdb..#max_touch_t', 'U') IS NOT NULL DROP TABLE #max_touch_t     SELECT DISTINCT       t.MULTI_FUND_ID,       MAX(t.TOUCH_COUNT) as MAX_TOUCH      INTO #max_touch_t     FROM VISTA_REPORTING.dbo.TRADES t     WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)     GROUP BY MULTI_FUND_ID             IF OBJECT_ID('tempdb..#max_touch_fxo', 'U') IS NOT NULL DROP TABLE #max_touch_fxo     SELECT DISTINCT       fxo.FXM_ORDER_ID,       MAX(fxo.API_REQUESTED_DATE) as MAX_API_REQUESTED_DATE      INTO #max_touch_fxo     FROM VISTA_STAGING.dbo.FX_ORDERS fxo     WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = fxo.FXM_ORDER_ID)     GROUP BY FXM_ORDER_ID             IF OBJECT_ID('tempdb..#max_api_req_tr', 'U') IS NOT NULL DROP TABLE #max_api_req_tr     SELECT DISTINCT       fxt.ORDER_ID,       MAX(fxt.API_REQUESTED_DATE) as MAX_API_REQUESTED_DATE      INTO #max_api_req_tr     FROM VISTA_STAGING.dbo.FX_TRADES fxt     WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = fxt.TRADE_ID)     GROUP BY ORDER_ID             IF OBJECT_ID('tempdb..#thr_ex', 'U') IS NOT NULL DROP TABLE #thr_ex     SELECT DISTINCT       fxo.FXM_ORDER_ID AS ORDER_ID,       DATEDIFF(MINUTE, fxo.INSTRUCTION_RECEIVED_DATE_TIME, MAX(fxt.ACCEPTED_DATE_TIME)) AS ACHKNOWLEDGED_MINS,      (COALESCE(ter.[TIMELY_ACK_THRESHOLD],ter2.[TIMELY_ACK_THRESHOLD]))/60 as TIMELY_ACK_THRESHOLD,      DATEDIFF(MINUTE, fxo.INSTRUCTION_RECEIVED_DATE_TIME, MAX(fxt.EXECUTED_DATE_TIME)) AS EXECUTED_MINS,      CASE        WHEN fxo.[INSTRUCTION_TYPE] in ('SPOT')        THEN (COALESCE(ter.[SPOT_TIMELY_EX_THRESHOLD],ter2.[SPOT_TIMELY_EX_THRESHOLD]))/60       WHEN fxo.[INSTRUCTION_TYPE] in ('Forward','NDS','NDF','FX Swap') THEN (COALESCE(ter.[FWD_TIMELY_EX_THRESHOLD],ter2.[FWD_TIMELY_EX_THRESHOLD]))/60      END AS TIMELY_EX_THRESHOLD,      DATEDIFF(MINUTE,fxo.INSTRUCTION_RECEIVED_DATE_TIME, MAX(fxt.MARKET_ARRIVAL_DATE_TIME)) AS MARKET_ARRIVAL_MINS,      CASE        WHEN fxo.[INSTRUCTION_TYPE] in ('SPOT')        THEN (COALESCE(ter.[SPOT_TIMELY_MARKET_ARRIVAL_THRESHOLD],ter2.[SPOT_TIMELY_MARKET_ARRIVAL_THRESHOLD]))/60       WHEN fxo.[INSTRUCTION_TYPE] in ('Forward','NDS','NDF','FX Swap') THEN (COALESCE(ter.[FWD_TIMELY_MARKET_ARRIVAL_THRESHOLD],ter2.[FWD_TIMELY_MARKET_ARRIVAL_THRESHOLD]))/60      END AS TIMELY_MARKET_THRESHOLD,      'FX' AS [SOURCE]     INTO #thr_ex     FROM VISTA_REPORTING.dbo.FX_ORDERS fxo     LEFT JOIN VISTA_REPORTING.dbo.FX_TRADES fxt ON fxt.ORDER_ID=fxo.FXM_ORDER_ID     LEFT JOIN VISTA_STAGING.dbo.REF_FX_TIMELY_EX_REC_THRESHOLD ter ON fxo.[BUY_CCY] = ter.[BASE_CCY] and fxo.[SELL_CCY] = ter.[CONTRA_CCY] and fxo.INSTRUCTION_RECEIVED_DATE_TIME BETWEEN ter.DATE_FROM AND ter.DATE_TO     LEFT JOIN VISTA_STAGING.dbo.REF_FX_TIMELY_EX_REC_THRESHOLD ter2 ON fxo.[BUY_CCY] = ter2.[CONTRA_CCY] and fxo.[SELL_CCY] = ter2.[BASE_CCY] and fxo.INSTRUCTION_RECEIVED_DATE_TIME BETWEEN ter2.DATE_FROM AND ter2.DATE_TO     WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = fxo.FXM_ORDER_ID)     GROUP BY        fxo.FXM_ORDER_ID,      fxo.INSTRUCTION_RECEIVED_DATE_TIME,       ter.[TIMELY_ACK_THRESHOLD],      ter2.[TIMELY_ACK_THRESHOLD],      fxo.INSTRUCTION_TYPE,      ter.[SPOT_TIMELY_EX_THRESHOLD],      ter2.[SPOT_TIMELY_EX_THRESHOLD],      ter.[SPOT_TIMELY_MARKET_ARRIVAL_THRESHOLD],      ter2.[SPOT_TIMELY_MARKET_ARRIVAL_THRESHOLD],      ter.[FWD_TIMELY_MARKET_ARRIVAL_THRESHOLD],      ter2.[FWD_TIMELY_MARKET_ARRIVAL_THRESHOLD],      ter.[FWD_TIMELY_EX_THRESHOLD],      ter2.[FWD_TIMELY_EX_THRESHOLD]             UNION         SELECT DISTINCT       pm.ord_num,      DATEDIFF(MINUTE, pm.AUTH_TIME, MAX(pm.ACTIVE_TIME)),      (COALESCE(ter.TIMELY_ACK_THRESHOLD,ter2.TIMELY_ACK_THRESHOLD))/60,      DATEDIFF(MINUTE, pm.AUTH_TIME,MAX(t.EXECUTION_TIME)),      (COALESCE(ter.[FWD_TIMELY_EX_THRESHOLD],ter2.[FWD_TIMELY_EX_THRESHOLD]))/60 AS TIMELY_EX_THRESHOLD,      DATEDIFF(MINUTE,pm.AUTH_TIME, MAX(t.EXECUTION_TIME)) AS MARKET_ARRIVAL_MINS,      (COALESCE(ter.[FWD_TIMELY_MARKET_ARRIVAL_THRESHOLD],ter2.[FWD_TIMELY_MARKET_ARRIVAL_THRESHOLD]))/60 AS TIMELY_MARKET_THRESHOLD,      'AL' as [SOURCE]     from VISTA_REPORTING.dbo.PM_ORDERS pm     inner join #max_touch_pm mot ON mot.MAX_TOUCH = pm.TOUCH_COUNT and mot.ORD_NUM = pm.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD = pm.ORD_NUM     LEFT JOIN (select distinct ord_num, execution_time from VISTA_REPORTING.dbo.TRADES) t ON t.ORD_NUM = oc.TRD_ORD     LEFT JOIN VISTA_STAGING.dbo.REF_FX_TIMELY_EX_REC_THRESHOLD ter     ON SUBSTRING(pm.SEC_DESC1, 1,3) = ter.[BASE_CCY] and SUBSTRING(pm.SEC_DESC1, 7,3) = ter.[CONTRA_CCY] and pm.AUTH_TIME BETWEEN ter.DATE_FROM AND ter.DATE_TO     LEFT JOIN VISTA_STAGING.dbo.REF_FX_TIMELY_EX_REC_THRESHOLD ter2     ON SUBSTRING(pm.SEC_DESC1, 1,3) = ter.[CONTRA_CCY] and SUBSTRING(pm.SEC_DESC1, 7,3) = ter.[BASE_CCY] and pm.AUTH_TIME BETWEEN ter2.DATE_FROM AND ter2.DATE_TO     WHERE pm.[DEALING_DESK] = 'FX'         AND pm.SM_SEC_GROUP = 'OPTION'         AND EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = pm.ORD_NUM)     group by       pm.ord_num,      pm.AUTH_TIME,      ter.[FWD_TIMELY_EX_THRESHOLD],      ter.[FWD_TIMELY_MARKET_ARRIVAL_THRESHOLD],      ter.[TIMELY_ACK_THRESHOLD],      ter2.[FWD_TIMELY_EX_THRESHOLD],      ter2.[FWD_TIMELY_MARKET_ARRIVAL_THRESHOLD],      ter2.[TIMELY_ACK_THRESHOLD]             IF OBJECT_ID('tempdb..#thr_rec', 'U') IS NOT NULL DROP TABLE #thr_rec     SELECT DISTINCT       fxt.[TRADE_ID],       fxo.FXM_ORDER_ID,      MAX(fxt.UPLOADED_DATE_TIME) AS MAX_EXECUTED_DATE_TIME,      DATEDIFF(MINUTE, fxt.EXECUTED_DATE_TIME, MAX(fxt.UPLOADED_DATE_TIME)) AS RECORDING_MINS,      CASE        WHEN fxo.[INSTRUCTION_TYPE] in ('SPOT')        THEN (COALESCE(ter.[SPOT_TIMELY_REC_THRESHOLD],ter2.[SPOT_TIMELY_REC_THRESHOLD]))/60       WHEN fxo.[INSTRUCTION_TYPE] in ('Forward','NDS','NDF','FX Swap') THEN (COALESCE(ter.[FWD_TIMELY_REC_THRESHOLD],ter2.[FWD_TIMELY_REC_THRESHOLD]))/60      END AS TIMELY_REC_THRESHOLD,      'FX' AS [SOURCE]     INTO #thr_rec     FROM  VISTA_REPORTING.dbo.FX_TRADES fxt     left join VISTA_REPORTING.dbo.FX_ORDERS fxo on fxt.[ORDER_ID] = fxo.[FXM_ORDER_ID]     LEFT JOIN VISTA_STAGING.dbo.REF_FX_TIMELY_EX_REC_THRESHOLD ter ON fxt.[BUY_CCY] = ter.[BASE_CCY] and fxt.[SELL_CCY] = ter.[CONTRA_CCY] and fxt.[UPLOADED_DATE_TIME] BETWEEN ter.DATE_FROM AND ter.DATE_TO     LEFT JOIN VISTA_STAGING.dbo.REF_FX_TIMELY_EX_REC_THRESHOLD ter2 ON fxt.[BUY_CCY] = ter2.[CONTRA_CCY] and fxt.[SELL_CCY] = ter2.[BASE_CCY] and fxt.[UPLOADED_DATE_TIME] BETWEEN ter2.DATE_FROM AND ter2.DATE_TO     WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = fxt.TRADE_ID)     GROUP BY        fxt.TRADE_ID,       fxo.INSTRUCTION_TYPE,      fxt.EXECUTED_DATE_TIME,      fxt.UPLOADED_DATE_TIME,      ter.[SPOT_TIMELY_REC_THRESHOLD],      ter.[FWD_TIMELY_REC_THRESHOLD],      ter2.[SPOT_TIMELY_REC_THRESHOLD],      ter2.[FWD_TIMELY_REC_THRESHOLD],      fxo.FXM_ORDER_ID         UNION         SELECT DISTINCT       t.MULTI_FUND_ID,      pm.ORD_NUM,      MAX(t.EXECUTION_TIME),       DATEDIFF(MINUTE, t.TRD_AUTH_TIME, MAX(t.EXECUTION_TIME)),      (COALESCE(ter.FWD_TIMELY_REC_THRESHOLD,ter2.FWD_TIMELY_REC_THRESHOLD))/60,      'AL' as [SOURCE]     FROM VISTA_REPORTING.dbo.TRADES t     INNER JOIN #max_touch_t mtt ON mtt.MAX_TOUCH = t.TOUCH_COUNT and mtt.MULTI_FUND_ID = t.MULTI_FUND_ID     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = t.[ORD_NUM]     LEFT JOIN (select distinct ORD_NUM, SEC_DESC1, DEALING_DESK, SM_SEC_GROUP from VISTA_REPORTING.dbo.PM_ORDERS) pm ON pm.ORD_NUM = oc.PM_ORD     LEFT JOIN VISTA_STAGING.dbo.REF_FX_TIMELY_EX_REC_THRESHOLD ter     ON SUBSTRING(pm.SEC_DESC1, 1,3) = ter.[BASE_CCY] and SUBSTRING(pm.SEC_DESC1, 7,3) = ter.[CONTRA_CCY] and t.TRD_AUTH_TIME BETWEEN ter.DATE_FROM AND ter.DATE_TO     LEFT JOIN VISTA_STAGING.dbo.REF_FX_TIMELY_EX_REC_THRESHOLD ter2     ON SUBSTRING(pm.SEC_DESC1, 1,3) = ter.[CONTRA_CCY] and SUBSTRING(pm.SEC_DESC1, 7,3) = ter.[BASE_CCY] and t.TRD_AUTH_TIME BETWEEN ter2.DATE_FROM AND ter2.DATE_TO     WHERE pm.[DEALING_DESK] = 'FX'         AND pm.SM_SEC_GROUP = 'OPTION'        AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)     group by       t.MULTI_FUND_ID,      pm.ORD_NUM,      t.SM_SEC_TYPE,      t.TRD_AUTH_TIME,      ter.FWD_TIMELY_REC_THRESHOLD,      ter2.FWD_TIMELY_REC_THRESHOLD             --FX Concatonated fields     IF OBJECT_ID('tempdb..#conc_fx', 'U') IS NOT NULL DROP TABLE #conc_fx      SELECT DISTINCT      ex.[ORDER_ID],      TIMELY_RECORDING_MINS = STUFF((          SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),RECORDING_MINS)         FROM #thr_rec thr_rec         WHERE thr_rec.FXM_ORDER_ID = ex.[ORDER_ID] and ex.[SOURCE] = 'FX'         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'')     INTO #conc_fx     FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FX_TABLE ex     WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ex.ORDER_ID)             IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     SELECT DISTINCT       COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) AS DEALER_NAME,      FORMAT(FXO.AUTH_TIME,'dd/MM/yyyy HH:mm:ss') as AUTHORISED_DATE_TIME,      FORMAT(fxo.INSTRUCTION_RECEIVED_DATE_TIME,'dd/MM/yyyy HH:mm:ss') as ORDER_RECEIVED_DATE_TIME,      FXTC.ACCEPTED_DATE_TIME,--FORMAT(FXTC.ACCEPTED_DATE_TIME,'dd/MM/yyyy HH:mm:ss') AS ACCEPTED_DATE_TIME,      FXTC.MARKET_ARRIVAL_DATE_TIME,--FORMAT(FXTC.MARKET_ARRIVAL_DATE_TIME,'dd/MM/yyyy HH:mm:ss') AS MARKET_ARRIVAL_DATE_TIME,      FXTC.EXECUTED_DATE_TIME AS EXECUTED_DATE_TIME,      FXTC.UPLOADED_DATE_TIME AS UPLOADED_DATE_TIME,      thr_tex.ACHKNOWLEDGED_MINS AS TIMELY_ACKNOWLEDGEMENT_MINS,      thr_tex.TIMELY_ACK_THRESHOLD AS TIMELY_ACKNOWLEDGEMENT_THRESHOLD,      thr_tex.MARKET_ARRIVAL_MINS AS TIMELY_MARKET_ARRIVAL_MINS,      thr_tex.TIMELY_MARKET_THRESHOLD AS TIMELY_MARKET_ARRIVAL_THRESHOLD,      thr_tex.EXECUTED_MINS AS TIMELY_EXECUTION_MINS,      thr_tex.TIMELY_EX_THRESHOLD AS TIMELY_EXECUTION_THRESHOLD,      cc_fx.TIMELY_RECORDING_MINS AS TIMELY_RECORDING_MINS,      thr_rex.TIMELY_REC_THRESHOLD AS TIMELY_RECORDING_THRESHOLD,      FXO.TIMELY_EXC_REASON_NOT_ACK AS TIMELY_ACKNOWLEDGEMENT_REASON,      FXO.TIMELY_EXC_REASON_NOT_ACK_NARRATION AS TIMELY_ACKNOWLEDGEMENT_REASON_NARRATION,      FXTC.TIMELY_EXC_REASON_NOT_PLACED AS TIMELY_MARKET_ARRIVAL_REASON,      FXTC.TIMELY_EXC_REASON_NOT_PLACED_NARRATION AS TIMELY_MARKET_ARRIVAL_REASON_NARRATION,      FXTC.TIMELY_EXECUTION_REASON,      FXTC.TIMELY_EXECUTION_REASON_NARRATION,      FXTC.TIMELY_RECORDING_REASON,      FXTC.TIMELY_RECORDING_REASON_NARRATION,      FXO.CLIENT_FUND,      FXO.BASE_FUND,      FXTC.INSTRUCTION_TYPE as PRODUCT,      CASE WHEN FXO.FR_LEG_PRODUCT IS NULL   THEN CONVERT(VARCHAR(50),FXTC.NR_LEG_PRODUCT)         WHEN FXO.FR_LEG_PRODUCT IS NOT NULL  THEN CONCAT(FXTC.NR_LEG_PRODUCT, ' | ', FXO.FR_LEG_PRODUCT) END AS FXM_PRODUCT,      CASE WHEN NULLIF(FXO.ACTION2,'') IS NULL  THEN CONVERT(VARCHAR(50),FXO.ACTION1)         WHEN NULLIF(FXO.ACTION2,'') IS NOT NULL THEN (FXO.ACTION1 + ISNULL(' | ' + NULLIF(FXO.ACTION2,''),'')) END AS ACTION,      CASE WHEN FXO.NOTIONAL_CCY_FAR IS NULL   THEN CONVERT(VARCHAR(50),FXO.NOTIONAL_CCY)         WHEN FXO.NOTIONAL_CCY_FAR IS NOT NULL  THEN CONCAT(FXO.NOTIONAL_CCY, ' | ', FXO.NOTIONAL_CCY_FAR) END AS INSTRUCTED_CURRENCY,      CASE WHEN FXO.BUY_CCY_LEG2 IS NULL    THEN CONVERT(VARCHAR(50),FXO.BUY_CCY)         WHEN FXO.BUY_CCY_LEG2 IS NOT NULL   THEN CONCAT(FXO.BUY_CCY, ' | ', FXO.BUY_CCY_LEG2) END AS BUY_CURRENCY,      CASE WHEN FXO.SELL_CCY_LEG2 IS NULL    THEN CONVERT(VARCHAR(50),FXO.SELL_CCY)         WHEN FXO.SELL_CCY_LEG2 IS NOT NULL   THEN CONCAT(FXO.SELL_CCY, ' | ', FXO.SELL_CCY_LEG2) END AS SELL_CURRENCY,      CASE WHEN FXO.NOTIONAL_AMOUNT_FAR IS NULL THEN FXTC.NOTIONAL_AMOUNT         WHEN FXO.NOTIONAL_AMOUNT_FAR IS NOT NULL THEN CONCAT(FXTC.NOTIONAL_AMOUNT, ' | ',FORMAT(CONVERT(DECIMAL(38,2),FXO.NOTIONAL_AMOUNT_FAR),'#,0.00')) END AS INSTRUCTED_AMOUNT,      FXTC.TRADE_DATE,--FORMAT(FXTC.TRADE_DATE,'dd/MM/yyyy') AS TRADE_DATE,      CASE WHEN FXO.VALUE_DATE_FAR IS NULL   THEN CONVERT(VARCHAR(50),FORMAT(FXO.VALUE_DATE_NEAR,'dd/MM/yyyy'))         WHEN FXO.VALUE_DATE_FAR IS NOT NULL  THEN CONCAT(FORMAT(FXO.VALUE_DATE_NEAR,'dd/MM/yyyy'), ' | ', FORMAT(FXO.VALUE_DATE_FAR,'dd/MM/yyyy')) END AS VALUE_DATE,      --CASE WHEN FXTC.EXECUTED_AMOUNT_FAR IS NULL  THEN CONVERT(VARCHAR(50),FORMAT(CONVERT(DECIMAL(38,2),FXTC.EXECUTED_AMOUNT),'#,0.00'))       --  WHEN FXTC.EXECUTED_AMOUNT_FAR IS NOT NULL THEN CONCAT(FORMAT(CONVERT(DECIMAL(38,2),FXTC.EXECUTED_AMOUNT),'#,0.00'), ' | ' ,FORMAT(CONVERT(DECIMAL(38,2), FXTC.EXECUTED_AMOUNT_FAR),'#,0.00')) END AS EXECUTED_AMOUNT,      CASE WHEN FXTC.EXECUTED_AMOUNT_FAR IS NULL  THEN FXTC.EXECUTED_AMOUNT        WHEN FXTC.EXECUTED_AMOUNT_FAR IS NOT NULL THEN CONCAT(FXTC.EXECUTED_AMOUNT, ' | ', FXTC.EXECUTED_AMOUNT_FAR) END AS EXECUTED_AMOUNT,           FXTC.SWAP_TYPE,      FXTC.NET_EXPOSURE_TRADE AS NET_EXPOSURE,      COALESCE(fxo.PM,fxo.INSTRUCTED_BY) as INSTRUCTED_BY,      FXO.CREATED_FROM AS ORDER_SOURCE,      FXO.FM_COMMENTS,      FXO.TRADE_PURPOSE,      fxo.[MARKER],      --CASE WHEN FXTC.FIXING_DATE_LEG2 IS NULL   THEN CONVERT(VARCHAR(50),FORMAT(FXTC.FIXING_DATE,'dd/MM/yyyy'))       --  WHEN FXTC.FIXING_DATE_LEG2 IS NOT NULL  THEN CONCAT(FORMAT(FXTC.FIXING_DATE,'dd/MM/yyyy'), ' | ',FORMAT(FXTC.FIXING_DATE_LEG2,'dd/MM/yyyy')) END AS FIXING_DATE,      CASE WHEN FXTC.FIXING_DATE_LEG2 IS NULL   THEN FXTC.FIXING_DATE         WHEN FXTC.FIXING_DATE_LEG2 IS NOT NULL  THEN CONCAT(FXTC.FIXING_DATE, ' | ',FXTC.FIXING_DATE_LEG2) END AS FIXING_DATE,               FXO.BUSINESS_GROUP,    FXO.TRADE_VENUE AS PLACEMENT_VENUE,       FXTC.EXECUTED_BANK,      CASE WHEN FXTC.EXECUTED_RATE_FAR IS NULL   THEN CONVERT(VARCHAR(50),FXTC.EXECUTED_RATE)         WHEN FXTC.EXECUTED_RATE_FAR IS NOT NULL  THEN CONCAT(FXTC.EXECUTED_RATE, ' | ', FXTC.EXECUTED_RATE_FAR) END AS ALL_IN_RATE,      CASE WHEN FXTC.FORWARD_POINTS_FAR IS NULL  THEN CONVERT(VARCHAR(50),FXTC.FORWARD_POINTS)         WHEN FXTC.FORWARD_POINTS_FAR IS NOT NULL THEN CONCAT(FXTC.FORWARD_POINTS, ' | ', FXTC.FORWARD_POINTS_FAR) END AS FORWARD_POINTS,      CASE WHEN FXTC.SPOT_RATE_FAR IS NULL    THEN CONVERT(VARCHAR(50),FXTC.SPOT_RATE)         WHEN FXTC.SPOT_RATE_FAR IS NOT NULL   THEN CONCAT(FXTC.SPOT_RATE, ' | ', FXTC.SPOT_RATE_FAR) END AS SPOT_RATE,      FXTC.SWAP_POINTS,      FXTC.[TRADE_STATUS],      ex.[ORDER_ID] as ORDER_ID,      COALESCE(FXO.ORD_NUM,fxo.FXM_ORDER_ID) as PM_ORDER_ID,       FXTC.trade_id as TRANSACTION_NUMBER,      FXO.ALADDIN_COMMON_ID as ALADDIN_COMMON_IDENTIFIER,      FXTC.EXC_SESSION_ID AS SESSION_ID,      FXTC.EXC_SESSION_TYPE AS SESSION_TYPE,      FXTC.ORDER_STRATEGY AS NETTING_STRATEGY_USED,      EX.VG_09 as EXCEPTION_FLAG,      EX.VG_09_CREATETIME as CREATE_DATE,      EX.SOURCE AS DATA_SOURCE,      FXTC.EXECUTED_DATE_TIME as OS_EXECUTED_DATE_TIME,      CONVERT(varchar(5),DATEDIFF(s, fxo.FREEZE_DATE_TIME, fxo.RELEASE_DATE_TIME)/3600)+':'          +CONVERT(varchar(5),DATEDIFF(s, fxo.FREEZE_DATE_TIME, fxo.RELEASE_DATE_TIME)%3600/60)+':'          +CONVERT(varchar(5),(DATEDIFF(s, fxo.FREEZE_DATE_TIME, fxo.RELEASE_DATE_TIME)%60)) AS FREEZE_RELEASE_TIMESPAN,      fxo.FREEZE_BY AS FROZEN_BY,      fxo.FREEZE_DATE_TIME,      fxo.FREEZE_REASON,      fxo.RELEASE_BY,      fxo.RELEASE_DATE_TIME,      fxo.RELEASE_REASON     INTO #temp_final_master_table     FROM VISTA_STAGING.DBO.VG_09_TIMELY_EXECUTION_FX_TABLE EX     LEFT JOIN VISTA_REPORTING.DBO.FX_ORDERS FXO      ON EX.ORDER_ID = FXO.FXM_ORDER_ID     LEFT JOIN VISTA_REPORTING.DBO.FX_TRADES FXT ON EX.ORDER_ID = FXT.ORDER_ID      left join #thr_ex thr_tex      on thr_tex.[ORDER_ID] = EX.[ORDER_ID]      left join #thr_rec thr_rex     on thr_rex.[TRADE_ID] = FXT.[TRADE_ID]     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd     on tdd.[MG_USER_ID] = fxt.[DEALT_BY] AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2     on tdd2.[MG_USER_ID] = fxt.[ACCEPTED_BY] AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)     left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd      on dd.[REPORT_NAME] = 'Timely Execution' AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)     left join (select FXTC.* from VISTA_REPORTING.dbo.FX_TRADES_CONCAT FXTC inner join #max_api_req_tr mtr on mtr.MAX_API_REQUESTED_DATE = FXTC.API_REQUESTED_DATE and mtr.ORDER_ID = FXTC.ORDER_ID) FXTC      on ex.[ORDER_ID] = FXTC.[ORDER_ID]     left join #conc_fx cc_fx     on cc_fx.ORDER_ID = ex.ORDER_ID     WHERE EX.SOURCE = 'FX' AND EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ex.ORDER_ID)         UNION         SELECT DISTINCT       COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) as DEALER_NAME       ,FORMAT(PMO.AUTH_TIME,'dd/MM/yyyy HH:mm:ss') as AUTHORISED_DATE_TIME       ,FORMAT(PMO.AUTH_TIME,'dd/MM/yyyy HH:mm:ss') as ORDER_RECEIVED_DATE_TIME       ,FORMAT(PMO.ACTIVE_TIME,'dd/MM/yyyy HH:mm:ss') as ACCEPTED_DATE_TIME       ,cast(FORMAT(TRD.EXECUTION_TIME,'dd/MM/yyyy HH:mm:ss') as varchar(100)) as MARKET_ARRIVAL_DATE_TIME       ,cast(FORMAT(TRD.EXECUTION_TIME,'dd/MM/yyyy HH:mm:ss') as varchar(100)) as EXECUTED_DATETIME       ,CAST(NULL AS VARCHAR(50)) as UPLOADED_DATE_TIME --Trades.FINISH_TIME is what table says       ,thr_tex.ACHKNOWLEDGED_MINS AS TIMELY_ACKNOWLEDGEMENT_MINS       ,thr_tex.TIMELY_ACK_THRESHOLD AS TIMELY_ACKNOWLEDGEMENT_THRESHOLD       ,thr_tex.MARKET_ARRIVAL_MINS AS TIMELY_MARKET_ARRIVAL_MINS       ,thr_tex.TIMELY_MARKET_THRESHOLD AS TIMELY_MARKET_ARRIVAL_THRESHOLD       ,thr_tex.EXECUTED_MINS AS TIMELY_EXECUTION_MINS       ,thr_tex.TIMELY_EX_THRESHOLD AS TIMELY_EXECUTION_THRESHOLD       ,cast(thr_rex.RECORDING_MINS as varchar(100)) AS TIMELY_RECORDING_MINS       ,thr_rex.TIMELY_REC_THRESHOLD AS TIMELY_RECORDING_THRESHOLD       ,NULL AS TIMELY_ACKNOWLEDGEMENT_REASON       ,NULL AS TIMELY_ACKNOWLEDGEMENT_REASON_NARRATION       ,NULL AS TIMELY_MARKET_ARRIVAL_REASON       ,NULL AS TIMELY_MARKET_ARRIVAL_REASON_NARRATION       ,PMO.COMMENTS_VALUE as TIMELY_EXECUTION_REASON       ,NULL as TIMELY_EXECUTION_REASON_NARRATION       ,PMO.COMMENTS_VALUE as  TIMELY_RECORDING_REASON       ,NULL as TIMELY_RECORDING_REASON_NARRATION       ,CAST(NULL as varchar(50)) as CLIENT_FUND       ,TRD.PORTFOLIOS_PORTFOLIO_NAME as BASE_FUND       ,PMO.SM_SEC_TYPE as PRODUCT       ,PMO.SM_SEC_TYPE as FXM_PRODUCT       ,CAST(NULL as varchar(50)) as ACTION       ,TRD.FX_PAY_CURR as INSTRUCTED_CURRENCY       ,CAST(NULL as varchar(50)) as BUY_CURRENCY       ,CAST(NULL as varchar(50)) as SELL_CURRENCY       ,cast(FORMAT(PLA.QUANTITY,'#,0.00') as varchar(50)) as INSTRUCTED_AMOUNT       ,FORMAT(PMO.[OPEN_DATE],'dd/MM/yyyy') as TRADE_DATE       ,cast(COALESCE(FORMAT(PMO.SETTLE_DATE,'dd/MM/yyyy'),FORMAT(PMO.MATURITY,'dd/MM/yyyy')) as varchar(50)) as VALUE_DATE       ,cast(FORMAT(PMO.FILL_AMT,'#,0.00') as varchar(50)) as EXECUTED_AMOUNT       ,CAST(NULL as varchar(50)) as SWAP_TYPE       ,CAST(NULL as varchar(50)) as NET_EXPOSURE       ,PMO.[PM] as INSTRUCTED_BY       ,'Aladdin' as ORDER_SOURCE       ,PMO.COMMENTS_VALUE as FM_COMMENTS       ,TRD.TRD_PURPOSE as TRADE_PURPOSE       ,CAST(NULL as varchar(50)) as MARKER       ,CAST(NULL as varchar(50)) as FIXING_DATE       ,CASE        WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP'        WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG'        WHEN (pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM'        ELSE NULL        END AS [BUSINESS_GROUP]       ,cast(PLA.VENUE as varchar(50)) as PLACEMENT_VENUE       ,PLA.BROKER as EXECUTED_BANK       ,CAST(NULL as varchar(50)) as ALL_IN_RATE --Trades.TRDQUOTES_set is what it says on the mapping sheet       ,CAST(NULL as varchar(50)) AS FORWARD_POINTS       ,CAST(NULL as varchar(50)) as SPOT_RATE --Trades.TRDQUOTES_set is what it says on the mapping sheet       ,CAST(NULL as varchar(50)) as SWAP_POINTS       ,TRD.TRD_STATUS AS TRADE_STATUS       ,cast(EX.ORDER_ID as varchar(50)) as ORDER_ID       ,cast(PMO.ORD_NUM as varchar(50)) as PM_ORDER_ID        ,TRD.MULTI_FUND_ID as TRANSACTION_NUMBER       ,cast(REQ.REQUEST_ID as varchar(50)) as ALADDIN_COMMON_IDENTIFIER       ,CAST(NULL as varchar(50)) as SESSION_ID       ,CAST(NULL as varchar(50)) as SESSION_TYPE       ,CAST(NULL as varchar(50)) as NETTING_STRATEGY_USED       ,EX.VG_09 as EXCEPTION_FLAG       ,EX.VG_09_CREATETIME as CREATE_DATE       ,EX.SOURCE AS DATA_SOURCE       ,cast(TRD.EXECUTION_TIME as varchar(100)) as OS_EXECUTED_DATE_TIME       ,NULL       ,NULL       ,NULL       ,NULL       ,NULL       ,NULL       ,NULL     FROM VISTA_STAGING.DBO.VG_09_TIMELY_EXECUTION_FX_TABLE EX     left join (SELECT DISTINCT         PMO.ORD_NUM,        PMO.AUTH_TIME,        PMO.STATUS,        PMO.PM,        PMO.ACTIVE_TIME,        PMO.TRADER,        PMO.COMMENTS_VALUE,        PMO.OPEN_DATE,        PMO.SETTLE_DATE,        PMO.MATURITY,        PMO.SM_SEC_TYPE,        PMO.FILL_AMT,        pmo.pull_Date        from VISTA_REPORTING.dbo.PM_ORDERS PMO         inner join #max_touch_pm mtp on mtp.ORD_NUM = PMO.ORD_NUM and mtp.[MAX_TOUCH] = PMO.[TOUCH_COUNT]) PMO on PMO.ORD_NUM = EX.ORDER_ID     left join (SELECT         ORD_NUM,         PLACEMENT_NUM,        STATUS,        QUANTITY,        BROKER,        VENUE        from VISTA_REPORTING.dbo.PLACEMENTS) PLA      on PLA.ORD_NUM = PMO.ORD_NUM     left join (SELECT         PLACEMENT_NUM,         REQUEST_ID        FROM VISTA_STAGING.dbo.REQUEST_LOOKUP) REQ      on REQ.PLACEMENT_NUM = PLA.PLACEMENT_NUM     left join VISTA_REPORTING.dbo.ORDERS_CROSS OC on OC.PM_ORD = PMO.ORD_NUM     left join (SELECT        TRD.MULTI_FUND_ID,        TRD.EXECUTION_TIME,        TRD.ORD_NUM,        TRD.TRD_STATUS,        TRD.TRD_TRADER,        TRD.[PORTFOLIOS_PORTFOLIO_NAME],        TRD.FUND,        TRD.TRD_PURPOSE,        TRD.FX_PAY_CURR,        trd.[TOUCH_COUNT],        trd.[PULL_DATE]        FROM VISTA_REPORTING.dbo.TRADES TRD        inner join #max_touch_t mtt on mtt.MULTI_FUND_ID = TRD.MULTI_FUND_ID and mtt.[MAX_TOUCH] = TRD.TOUCH_COUNT) TRD      on TRD.ORD_NUM = OC.TRD_ORD     left join (SELECT DISTINCT FUND_ID, PORTFOLIO_GROUP_NAME FROM VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY) pgt     on TRD.[FUND] = pgt.[FUND_ID]     left join #thr_ex thr_tex      on thr_tex.[ORDER_ID] = EX.[ORDER_ID]     left join #thr_rec thr_rex     on thr_rex.[TRADE_ID] = trd.[MULTI_FUND_ID]     left join VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd      on tdd.[INITIALS]  = trd.[TRD_TRADER] AND CAST(trd.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2     on tdd2.[INITIALS] = pmo.[TRADER] AND CAST(pmo.[PULL_DATE] AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)     left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd      on dd.[REPORT_NAME] = 'Timely Execution' AND CAST(COALESCE(trd.[PULL_DATE],pmo.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)     where EX.SOURCE = 'AL' AND EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ex.ORDER_ID)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE', 'U') IS NOT NULL     DELETE FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE     WHERE EXISTS (SELECT DISTINCT ORDER_ID FROM #distinct_ids di WHERE di.ORD_NUM = ORDER_ID)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE     SELECT *     FROM #temp_final_master_table         ELSE         SELECT *     INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE     FROM #temp_final_master_table               IF OBJECT_ID('tempdb..#conc_fx', 'U') IS NOT NULL DROP TABLE #conc_fx       IF OBJECT_ID('tempdb..#thr_rec', 'U') IS NOT NULL DROP TABLE #thr_rec     IF OBJECT_ID('tempdb..#max_api_req_tr', 'U') IS NOT NULL DROP TABLE #max_api_req_tr     IF OBJECT_ID('tempdb..#thr_ex', 'U') IS NOT NULL DROP TABLE #thr_ex     IF OBJECT_ID('tempdb..#max_touch_fxo', 'U') IS NOT NULL DROP TABLE #max_touch_fxo      IF OBJECT_ID('tempdb..#max_touch_t', 'U') IS NOT NULL DROP TABLE #max_touch_t      IF OBJECT_ID('tempdb..#max_touch_pm', 'U') IS NOT NULL DROP TABLE #max_touch_pm     IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     IF OBJECT_ID('tempdb..#distinct_ids_al', 'U') IS NOT NULL DROP TABLE #distinct_ids_al     IF OBJECT_ID('tempdb..#distinct_ids_fx', 'U') IS NOT NULL DROP TABLE #distinct_ids_fx     IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE  #distinct_ids             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg09_fx_idx1')           DROP INDEX mmf_vg09_fx_idx1      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg09_fx_idx1     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE      (ORDER_ID)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg09_fx_idx2')           DROP INDEX mmf_vg09_fx_idx2      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg09_fx_idx2     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE      (AUTHORISED_DATE_TIME)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg09_fx_idx3')           DROP INDEX mmf_vg09_fx_idx3      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg09_fx_idx3     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE      (DEALER_NAME)              IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg09_fx_idx4')           DROP INDEX mmf_vg09_fx_idx4      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg09_fx_idx4     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE      (CREATE_DATE)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg09_fx_idx5')           DROP INDEX mmf_vg09_fx_idx5      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg09_fx_idx5     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE      (ORDER_RECEIVED_DATE_TIME)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg09_fx_idx6')           DROP INDEX mmf_vg09_fx_idx6     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg09_fx_idx6     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE      (EXCEPTION_FLAG)              IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(     'MASTER_PM_ORDER_VG_09_TIMELY_EXECUTION_FX_TABLE', --TABLE_NAME     @START_TIME, --START_TIME     GETDATE(), --END_TIME     DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS     CAST(GETDATE() as date)) --COMPLETION_DATE            END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_PM_ORDER_TABLE_VG_17_COUNTERPARTY_DIRECTION_CASH  CreateDate: 2025-06-26 18:01:22.160  ModifyDate: 2025-06-26 18:01:22.160  --- DEFINITION START ---      -- =============================================    -- Author:  <da Costa, David>    -- Create date: <2019-06-12>    -- Description: <Build a master table for the Counterparty direction table for CASH     -- for the front end to display.>    -- Adapted from a previous version COUNTERPARTY_DIRECTION_DMG    -- =============================================        -- ***************VERSION CONTROL***************    -- MN - Added a Distinct on line 326 to remove dupes    -- *********************************************        CREATE PROCEDURE [dbo].[MASTER_PM_ORDER_TABLE_VG_17_COUNTERPARTY_DIRECTION_CASH]        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.    SET NOCOUNT ON;             --Used to track total time stored procedure took to run     DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()            IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids    SELECT DISTINCT ORD_NUM, DATA_SOURCE    INTO #distinct_ids    FROM VISTA_STAGING.DBO.VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE            --If the master table doesn't exist then we want to use all the data available, otherwise just the most recent data    IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE', 'U') IS NOT NULL    DELETE FROM #distinct_ids     where NOT EXISTS (SELECT od.ORDER_ID          FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_CASH od          WHERE od.ORDER_ID = #distinct_ids.ORD_NUM)    AND #distinct_ids.[DATA_SOURCE] = 'CM'        IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE', 'U') IS NOT NULL    DELETE FROM #distinct_ids     where NOT EXISTS (SELECT od.PM_ORD          FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od          WHERE od.PM_ORD = #distinct_ids.ORD_NUM)    AND #distinct_ids.DATA_SOURCE = 'AL'            IF OBJECT_ID('tempdb..#temp_cash_trades', 'U') IS NOT NULL DROP TABLE #temp_cash_trades    SELECT DISTINCT t.TRANSACTION_NUMBER    INTO #temp_cash_trades    FROM Vista_Reporting.dbo.CASH_TRADES t    INNER JOIN #distinct_ids di ON di.ORD_NUM = t.ORDER_ID        UNION        SELECT DISTINCT tr.MULTI_FUND_ID    FROM Vista_Reporting.dbo.ORDERS_CROSS oc    INNER JOIN #distinct_ids di ON di.ORD_NUM = oc.PM_ORD    LEFT JOIN Vista_Reporting.dbo.TRADES tr ON oc.TRD_ORD = tr.ORD_NUM            IF OBJECT_ID('tempdb..#temp_max_trade_touch', 'U') IS NOT NULL DROP TABLE #temp_max_trade_touch    SELECT     MULTI_FUND_ID,     MAX(TOUCH_COUNT) AS MAX_TOUCH    INTO #temp_max_trade_touch    FROM VISTA_REPORTING.dbo.TRADES t    INNER JOIN #temp_cash_trades tct ON tct.TRANSACTION_NUMBER = t.MULTI_FUND_ID     GROUP BY MULTI_FUND_ID            IF OBJECT_ID('tempdb..#temp_max_ORDER_CM', 'U') IS NOT NULL DROP TABLE #temp_max_ORDER_CM    SELECT DISTINCT    ORDER_ID,    MAX(api_requested_date) AS max_date    INTO #temp_max_order_cm    FROM VISTA_REPORTING.dbo.CASH_ORDERS co    INNER JOIN #distinct_ids di ON di.ORD_NUM = co.ORDER_ID     GROUP BY ORDER_ID            IF OBJECT_ID('tempdb..#temp_max_ORDER_touch', 'U') IS NOT NULL DROP TABLE #temp_max_ORDER_touch    SELECT     pm.ORD_NUM,     MAX(TOUCH_COUNT) AS MAX_TOUCH    INTO #temp_max_ORDER_touch    FROM VISTA_REPORTING.dbo.PM_ORDERS pm    INNER JOIN #distinct_ids di ON di.ORD_NUM = pm.ORD_NUM     GROUP BY pm.ORD_NUM            IF OBJECT_ID('tempdb..#temp_recent_dealer_al', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_al    SELECT DISTINCT oc.PM_ORD as ORD_NUM,     trd_trader     INTO #temp_recent_dealer_al     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = t.ORD_NUM     INNER JOIN (SELECT        OC.PM_ORD AS ORD_NUM,        MAX(EXECUTION_TIME) AS MAX_EXEC,        MAX(TOUCH_COUNT) AS MAX_TOUCH        FROM VISTA_REPORTING.dbo.TRADES T        LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS OC ON OC.TRD_ORD = T.ORD_NUM        GROUP BY OC.PM_ORD) T2 ON T2.ORD_NUM = OC.PM_ORD               AND T2.MAX_EXEC = t.EXECUTION_TIME              AND T2.MAX_TOUCH = t.TOUCH_COUNT     INNER JOIN #distinct_ids di ON di.ORD_NUM = T.ORD_NUM              IF OBJECT_ID('tempdb..#temp_recent_dealer_cm', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_cm    SELECT DISTINCT    ct.ORDER_ID,           ct.DEALER_NAME    INTO #temp_recent_dealer_cm    FROM VISTA_REPORTING.dbo.CASH_TRADES ct    INNER JOIN (SELECT                   ORDER_ID,                  MAX(EXECUTED_DATETIME) AS MAX_EXEC,                  MAX(API_REQUESTED_DATE) AS MAX_API_REQ                  FROM VISTA_REPORTING.dbo.CASH_TRADES                  GROUP BY ORDER_ID) ct2 ON nullif(ct2.ORDER_ID, '0') = ct.ORDER_ID                                             AND ct2.MAX_EXEC = ct.EXECUTED_DATETIME                                            AND ct2.MAX_API_REQ = ct.API_REQUESTED_DATE    INNER JOIN #distinct_ids di ON di.ORD_NUM = ct.ORDER_ID            IF OBJECT_ID('tempdb..#temp_mf_conc', 'U') IS NOT NULL DROP TABLE #temp_mf_conc    SELECT DISTINCT     vg.ORD_NUM,      ct.TRANSACTION_NUMBER AS MEx,     NULL AS TRADE_DATE,     ct.VALUE_DATE,     ct.CONFIRMED_DATETIME AS cDT,     DATEDIFF(DAY, ct.VALUE_DATE, ct.MATURITY_DATE) AS NO_OF_DAYS,     ct.DEALT_AMOUNT,     ct.EXECUTED_RATE,     ct.REUTERS_RATE,     ct.BANK,     cr.BANK_CODE,     cr.RATE,     ct.STATIC_BANK_COUNT,     ct.NOOF_QUOTES,     be.NWQ_EXCEPTION,     be.B3Q_EXCEPTION,     be.NO_OF_QUOTES_THRESHOLD,     ref_crr.TOLERANCE,     (ct.EXECUTED_RATE - crr.INDICATIVE_REF_RATE) AS DIFF_BPS,     be.CRR_EXCEPTION,     ct.DEALER_NAME_DECODE as DEALER_NAME,     ct.TRANSACTION_STATUS_DECODE AS TRANSACTION_STATUS,     ct.TRANSACTION_TYPE    INTO #temp_mf_conc    FROM VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE vg    LEFT JOIN VISTA_REPORTING.dbo.CASH_TRADES ct ON ct.ORDER_ID=vg.ORD_NUM    LEFT JOIN VISTA_REPORTING.dbo.CASH_REFERENCE_RATES crr ON crr.TRANSACTION_NUMBER=ct.TRANSACTION_NUMBER    LEFT JOIN VISTA_REPORTING.dbo.CASH_BANK_RATES cr ON cr.TRANSACTION_NUMBER=ct.TRANSACTION_NUMBER AND cr.BANK_CODE != ct.BANK    --LEFT JOIN VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_MM_CASH_TABLE be ON be.TRANSACTION_NUMBER=ct.TRANSACTION_NUMBER    LEFT JOIN VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE be ON be.TRANSACTION_NUMBER=ct.TRANSACTION_NUMBER    LEFT JOIN VISTA_STAGING.dbo.REF_CASH_CRR_THRESHOLD ref_crr ON ref_crr.[CURRENCY] = ct.[TRADE_CURRENCY] AND ref_crr.[PRODUCT] = ct.[PRODUCT] AND CAST(ct.[PULL_DATE] as DATE) BETWEEN CAST(ref_crr.[DATE_FROM] as date) AND CAST(ref_crr.[DATE_TO] as DATE)    INNER JOIN #distinct_ids di ON di.ORD_NUM = vg.ORD_NUM    WHERE ISNULL(ct.ORDER_ID, 0) != 0 and vg.DATA_SOURCE = 'CM'    UNION    SELECT DISTINCT     vg.ORD_NUM,     t.MULTI_FUND_ID AS MEx,     t.TRD_TRADE_DATE,     t.TRD_TRADE_DATE,     t.EXECUTION_TIME,     DATEDIFF(DAY, t.TRD_TRADE_DATE, t.MATURITY),     t.TRD_ORIG_FACE,     t.TRD_PRICE,     NULL,     COALESCE(t.TRD_EX_BROKER_CODE, t.TRD_COUNTERPARTY),     c.TRD_COUNTERPARTY,     q.QUOTE_VALUE,     NULL,     COUNT(DISTINCT q.BROKER),     be.NWQ_EXCEPTION,     be.B3Q_EXCEPTION,     be.[NO_OF_QUOTES_THRESHOLD],     NULL,     NULL,     be.CRR_EXCEPTION,     t.TRD_TRADER,     t.TRD_STATUS,     t.TRAN_TYPE    FROM VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE vg    LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD=vg.ORD_NUM    LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM=oc.TRD_ORD    INNER JOIN #temp_max_trade_touch mtt ON mtt.MULTI_FUND_ID=t.MULTI_FUND_ID AND mtt.MAX_TOUCH=t.TOUCH_COUNT    LEFT JOIN VISTA_REPORTING.dbo.QUOTES q ON q.MULTI_FUND_ID=t.MULTI_FUND_ID AND q.QUOTE_ORIGIN='QUOTE' AND q.BROKER != t.COUNTERPARTY_CODE    LEFT JOIN VISTA_REPORTING.dbo.COUNTERPARTIES c ON c.COUNTERPARTY_CODE=q.BROKER    LEFT JOIN VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE be ON be.TRANSACTION_NUMBER=t.MULTI_FUND_ID    INNER JOIN #distinct_ids di ON di.ORD_NUM = vg.ORD_NUM    WHERE vg.DATA_SOURCE = 'AL'    GROUP BY     vg.ORD_NUM,     t.MULTI_FUND_ID,     t.EXECUTION_TIME,     t.TRD_TRADE_DATE,      t.MATURITY,     t.TRD_ORIG_FACE,     t.TRD_PRICE,     COALESCE(t.TRD_EX_BROKER_CODE, t.TRD_COUNTERPARTY),     c.TRD_COUNTERPARTY,     q.QUOTE_VALUE,     be.NWQ_EXCEPTION,     be.B3Q_EXCEPTION,     be.[NO_OF_QUOTES_THRESHOLD],     be.CRR_EXCEPTION,     t.TRD_TRADER,     t.TRD_STATUS,     t.TRAN_TYPE            IF OBJECT_ID('tempdb..#concat', 'U') IS NOT NULL DROP TABLE #concat    SELECT     vg.ORD_NUM,        STUFF((            SELECT  ' | ' + CAST(MEx AS VARCHAR(50))            FROM #temp_mf_conc            WHERE (ORD_NUM = vg.ORD_NUM AND MEx is NOT NULL) order by MEx            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS T_NUM_COMP,        STUFF((            SELECT  ' | ' + CAST(COALESCE(convert(varchar, co.TRADE_DATE, 103), convert(varchar, tmc.TRADE_DATE, 103)) AS VARCHAR(50))            FROM #temp_mf_conc tmc      LEFT JOIN VISTA_STAGING.dbo.CASH_ORDERS co ON co.ORDER_ID=tmc.ORD_NUM            WHERE (ORD_NUM = vg.ORD_NUM AND COALESCE(co.TRADE_DATE, tmc.TRADE_DATE) is NOT NULL)  order by MEx            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS TRD_DT_NUM_COMP,        STUFF((            SELECT  ' | ' + convert(varchar, VALUE_DATE, 103)            FROM #temp_mf_conc            WHERE (ORD_NUM = vg.ORD_NUM AND VALUE_DATE is NOT NULL)  order by MEx            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS VAL_DT_NUM_COMP,     STUFF((            SELECT  ' | ' + CAST(cDT AS VARCHAR(50))            FROM #temp_mf_conc            WHERE (ORD_NUM = vg.ORD_NUM AND cDT is NOT NULL)  order by MEx            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS C_DT_COMP,     STUFF((            SELECT  ' | ' + CAST(NO_OF_DAYS AS VARCHAR(50))            FROM #temp_mf_conc            WHERE (ORD_NUM = vg.ORD_NUM AND NO_OF_DAYS is NOT NULL)  order by MEx            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS NOD_COMP,     STUFF((            SELECT  ' | ' + CAST(DEALT_AMOUNT AS VARCHAR(50))            FROM #temp_mf_conc            WHERE (ORD_NUM = vg.ORD_NUM AND DEALT_AMOUNT is NOT NULL)  order by MEx            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS DA_COMP,     STUFF((            SELECT  ' | ' + CAST(convert(decimal(38,4),EXECUTED_RATE) AS VARCHAR(50))            FROM #temp_mf_conc            WHERE (ORD_NUM = vg.ORD_NUM AND EXECUTED_RATE is NOT NULL)  order by MEx            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS ER_COMP,     STUFF((            SELECT  ' | ' + CAST(convert(decimal(38,4),REUTERS_RATE) AS VARCHAR(50))            FROM #temp_mf_conc            WHERE (ORD_NUM = vg.ORD_NUM AND REUTERS_RATE is NOT NULL)  order by MEx            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS RR_COMP,     STUFF((            SELECT  ' | ' + CAST(BANK AS VARCHAR(50))            FROM #temp_mf_conc            WHERE (ORD_NUM = vg.ORD_NUM AND BANK is NOT NULL)  order by MEx            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS BNK_COMP,     STUFF((            SELECT  ' | ' + CAST(BANK_CODE AS VARCHAR(50))            FROM #temp_mf_conc            WHERE (ORD_NUM = vg.ORD_NUM AND BANK_CODE is NOT NULL)  order by MEx, ' | ' + CAST(BANK_CODE AS VARCHAR(50))            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS LBNK_COMP,     STUFF((            SELECT  ' | ' + CAST(convert(decimal(38,4),RATE) AS VARCHAR(50))            FROM #temp_mf_conc            WHERE (ORD_NUM = vg.ORD_NUM AND RATE is NOT NULL)  order by MEx,  ' | ' + CAST(convert(decimal(38,4),RATE) AS VARCHAR(50))            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS RT_COMP,     STUFF((            SELECT ' | ' + CAST(STATIC_BANK_COUNT AS VARCHAR(50))            FROM #temp_mf_conc            WHERE (ORD_NUM = vg.ORD_NUM AND STATIC_BANK_COUNT is NOT NULL)  order by MEx            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS STBNK_COMP,     STUFF((            SELECT  ' | ' + CAST(NOOF_QUOTES AS VARCHAR(50))            FROM #temp_mf_conc            WHERE (ORD_NUM = vg.ORD_NUM AND NOOF_QUOTES is NOT NULL)  order by MEx            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS QTS_COMP,     STUFF((            SELECT  ' | ' + CAST(NWQ_EXCEPTION AS VARCHAR(50))            FROM #temp_mf_conc            WHERE (ORD_NUM = vg.ORD_NUM AND NWQ_EXCEPTION is NOT NULL)  order by MEx            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS NWQ_COMP,     STUFF((            SELECT  ' | ' + CAST(B3Q_EXCEPTION AS VARCHAR(50))            FROM #temp_mf_conc            WHERE (ORD_NUM = vg.ORD_NUM AND B3Q_EXCEPTION is NOT NULL)  order by MEx            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS B3Q_COMP,     STUFF((            SELECT  ' | ' + CAST(NO_OF_QUOTES_THRESHOLD AS VARCHAR(50))            FROM #temp_mf_conc            WHERE (ORD_NUM = vg.ORD_NUM AND NO_OF_QUOTES_THRESHOLD is NOT NULL) order by MEx            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS Q_THRESH_COMP,     STUFF((            SELECT  ' | ' + CAST(TOLERANCE AS VARCHAR(50))            FROM #temp_mf_conc            WHERE (ORD_NUM = vg.ORD_NUM AND TOLERANCE is NOT NULL) order by MEx            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS CRR_THRESH_COMP,     STUFF((            SELECT  ' | ' + CAST(DIFF_BPS AS VARCHAR(50))            FROM #temp_mf_conc            WHERE (ORD_NUM = vg.ORD_NUM AND DIFF_BPS is NOT NULL) order by MEx            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS BPS_COMP,     STUFF((            SELECT  ' | ' + CAST(CRR_EXCEPTION AS VARCHAR(50))            FROM #temp_mf_conc            WHERE (ORD_NUM = vg.ORD_NUM AND CRR_EXCEPTION is NOT NULL) order by MEx            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS CRR_COMP,     STUFF((            SELECT  ' | ' + CAST(DEALER_NAME AS VARCHAR(50))            FROM #temp_mf_conc            WHERE (ORD_NUM = vg.ORD_NUM AND DEALER_NAME is NOT NULL) order by MEx            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS DN_COMP,     STUFF((            SELECT  ' | ' + CAST(TRANSACTION_STATUS AS VARCHAR(50))            FROM #temp_mf_conc            WHERE (ORD_NUM = vg.ORD_NUM AND TRANSACTION_STATUS is NOT NULL) order by MEx            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS TS_COMP,     STUFF((            SELECT  ' | ' + CAST(TRANSACTION_TYPE AS VARCHAR(50))            FROM #temp_mf_conc            WHERE (ORD_NUM = vg.ORD_NUM AND TRANSACTION_TYPE is NOT NULL) order by MEx            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS TT_COMP    INTO #concat    FROM VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE vg    INNER JOIN #distinct_ids di ON di.ORD_NUM = vg.ORD_NUM            IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table    SELECT DISTINCT      vg.ORD_NUM AS ORDER_ID,     cc.T_NUM_COMP AS TRANSACTION_NUMBER,     co.CLIENT_FUND_OR_POOL_CODE AS CLIENT_FUND,     co.BASE_FUND_CODE,     co.PRODUCT,     co.ORDER_TERM,     cc.TRD_DT_NUM_COMP AS TRADE_DATE,     cc.VAL_DT_NUM_COMP AS VALUE_DATE,     convert(varchar, COALESCE(co.MATURITY_DATE, po.MATURITY), 103) AS MATURITY_DATE,     cc.C_DT_COMP AS CONFIRMED_DATE_TIME,     cc.NOD_COMP AS NO_OF_DAYS,     co.INSTRUCTED_CURRENCY AS CURRENCY,     cc.DA_COMP AS DEALT_AMOUNT,     cc.ER_COMP AS EXECUTED_RATE,     cc.RR_COMP AS REUTERS_REFERENCE_RATE,     cc.BNK_COMP AS BANK,     cc.LBNK_COMP AS LOSING_BANKS,     cc.RT_COMP AS LOSING_RATES,     cc.STBNK_COMP AS STATIC_BANK_COUNT,     cc.QTS_COMP NO_OF_QUOTES,     cc.Q_THRESH_COMP AS BANK_COUNT_THRESHOLD,     cc.NWQ_COMP AS NWQ_EXCEPTION,     cc.B3Q_COMP AS B3Q_EXCEPTION,     cc.CRR_THRESH_COMP AS THRESHOLD_FOR_DEPOSITS,     cc.BPS_COMP AS DIFFERENCE_BPS,     cc.CRR_COMP AS CRR_EXCEPTION,     COALESCE(TDD.FULL_NAME, TDD2.FULL_NAME, dd.[DEFAULT_DEALER])  AS [DEALER_NAME],     co.CUSTOM_INSTRUCTION,     co.INSTRUCTION_STATUS_DECODE as INSTRUCTION_STATUS,     cc.TS_COMP AS TRANSACTION_STATUS,     cc.TT_COMP AS TRANSACTION_TYPE,     vg.VG_17_CREATETIME AS CREATE_DATE,     vg.VG_17 AS EXCEPTION_FLAG,     vg.[DATA_SOURCE] as [DATA_SOURCE]    INTO #temp_final_master_table    FROM VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE vg    INNER JOIN #distinct_ids di on di.ORD_NUM = vg.ORD_NUM and di.DATA_SOURCE = vg.DATA_SOURCE    LEFT JOIN #concat cc ON cc.ORD_NUM=vg.ORD_NUM    LEFT JOIN ( SELECT DISTINCT CO.* FROM  VISTA_REPORTING.dbo.CASH_ORDERS CO    INNER JOIN #temp_max_order_cm MOO ON MOO.max_date = CO.API_REQUESTED_DATE AND MOO.ORDER_ID = CO.ORDER_ID) co ON co.ORDER_ID=vg.ORD_NUM    LEFT JOIN (SELECT DISTINCT PO.* FROM VISTA_REPORTING.dbo.PM_ORDERS PO    INNER JOIN #temp_max_ORDER_touch MOO ON MOO.ORD_NUM = PO.ORD_NUM AND MOO.MAX_TOUCH = PO.TOUCH_COUNT) po ON po.ORD_NUM=vg.ORD_NUM    LEFT JOIN #temp_recent_dealer_al RAL ON RAL.ORD_NUM  = vg.ORD_NUM AND vg.data_SOURCE = 'AL'    LEFT JOIN #temp_recent_dealer_cm RCM ON RCM.ORDER_ID = vg.ORD_NUM AND vg.data_SOURCE = 'CM'    LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD ON ((TDD.MG_USER_ID  = RCM.DEALER_NAME AND VG.DATA_SOURCE = 'CM') OR (TDD.INITIALS = RAL.TRD_TRADER AND VG.DATA_SOURCE = 'AL'))  AND CAST(COALESCE(CO.PULL_DATE, PO.PULL_DATE) AS DATE) BETWEEN CAST(TDD  .DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE)    LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD2 ON ((TDD2.MG_USER_ID  = COALESCE(CO.ACCEPTED_BY, CO.INSTRUCTED_BY) AND VG.DATA_SOURCE = 'CM') OR (TDD2.INITIALS = PO.TRADER AND VG.DATA_SOURCE = 'AL')) AND CAST(COALESCE(CO.PULL_DATE, PO.PULL_DATE) AS DATE) BETWEEN CAST(TDD2.DATE_FROM AS DATE) AND CAST(TDD2.DATE_TO AS DATE)    left join VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER dd     on dd.[REPORT_NAME] = 'Best Execution MM' and CAST(COALESCE(co.[PULL_DATE],po.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE', 'U') IS NOT NULL    DELETE FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE    WHERE EXISTS (SELECT DISTINCT ORD_NUM     FROM #distinct_ids    WHERE #distinct_ids.ORD_NUM = VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE.ORDER_ID)            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE    SELECT *    FROM #temp_final_master_table        ELSE        SELECT *    INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE    FROM #temp_final_master_table            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(    'MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE', --TABLE_NAME    @START_TIME, --START_TIME    GETDATE(), --END_TIME    DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS    CAST(GETDATE() as date)) --COMPLETION_DATE            IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids    IF OBJECT_ID('tempdb..#temp_cash_trades', 'U') IS NOT NULL DROP TABLE #temp_cash_trades    IF OBJECT_ID('tempdb..#temp_max_trade_touch', 'U') IS NOT NULL DROP TABLE #temp_max_trade_touch    IF OBJECT_ID('tempdb..#temp_max_ORDER_CM', 'U') IS NOT NULL DROP TABLE #temp_max_ORDER_CM    IF OBJECT_ID('tempdb..#temp_max_ORDER_touch', 'U') IS NOT NULL DROP TABLE #temp_max_ORDER_touch    IF OBJECT_ID('tempdb..#temp_recent_dealer_al', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_al    IF OBJECT_ID('tempdb..#temp_recent_dealer_cm', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_cm    IF OBJECT_ID('tempdb..#temp_mf_conc', 'U') IS NOT NULL DROP TABLE #temp_mf_conc    IF OBJECT_ID('tempdb..#concat', 'U') IS NOT NULL DROP TABLE #concat    IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table                   IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg17_cash_idx1')           DROP INDEX mmf_vg17_cash_idx1            ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE                CREATE NONCLUSTERED INDEX mmf_vg17_cash_idx1           ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE            (EXCEPTION_FLAG)                   IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg17_cash_idx2')           DROP INDEX mmf_vg17_cash_idx2            ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE                CREATE NONCLUSTERED INDEX mmf_vg17_cash_idx2           ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE            (CREATE_DATE)            END            --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_PM_ORDER_TABLE_VG_17_COUNTERPARTY_DIRECTION_DMG  CreateDate: 2025-06-26 18:01:45.207  ModifyDate: 2025-07-01 11:50:38.083  --- DEFINITION START ---          CREATE    PROCEDURE [dbo].[MASTER_PM_ORDER_TABLE_VG_17_COUNTERPARTY_DIRECTION_DMG]                AS        BEGIN         -- SET NOCOUNT ON added to prevent extra result sets from         -- interfering with SELECT statements.                 SET NOCOUNT ON                 --Used to track total time stored procedure took to run         DECLARE @START_TIME as datetime         SET @START_TIME = GETDATE()                 IF OBJECT_ID('tempdb..#pm_order_pop', 'U') IS NOT NULL DROP TABLE #pm_order_pop         select pm.*         into #pm_order_pop         from Vista_Reporting.dbo.PM_ORDERS pm         inner join Vista_Staging.dbo.VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE vg on vg.ORD_NUM = pm.ORD_NUM                 --If the master table doesn't exist then we want to use all the data available, otherwise just the most recent data         IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE', 'U') IS NOT NULL         DELETE FROM #pm_order_pop where NOT EXISTS (SELECT od.PM_ORD                      FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                      WHERE od.PM_ORD = #pm_order_pop.ORD_NUM)                         IF OBJECT_ID('tempdb..#oc_pop', 'U') IS NOT NULL DROP TABLE #oc_pop         select PM_ORD,         TRD_ORD         into #oc_pop         FROM Vista_Reporting.dbo.ORDERS_CROSS         where PM_ORD in (select distinct ord_num from #pm_order_pop)                 IF OBJECT_ID('tempdb..#trades_pop', 'U') IS NOT NULL DROP TABLE #trades_pop         SELECT *         INTO #trades_pop         FROM Vista_Reporting.dbo.TRADES         where ORD_NUM in (SELECT DISTINCT TRD_ORD FROM #oc_pop)                 IF OBJECT_ID('tempdb..#trd_ord_pop', 'U') IS NOT NULL DROP TABLE #trd_ord_pop         SELECT *         INTO #trd_ord_pop         FROM Vista_Reporting.dbo.TRD_ORDERS         WHERE ORD_NUM in (SELECT DISTINCT TRD_ORD FROM #oc_pop)                 IF OBJECT_ID('tempdb..#max_trades_touch', 'U') IS NOT NULL DROP TABLE #max_trades_touch         select distinct           MULTI_FUND_ID,          MAX(TOUCH_COUNT) AS MAX_TCH          INTO #MAX_TRADES_TOUCH         FROM #trades_pop         GROUP BY MULTI_FUND_ID                   IF OBJECT_ID('tempdb..#multi_fund_ids', 'U') IS NOT NULL DROP TABLE #multi_fund_ids         select distinct --using the filetered table created earlier extract relevant Trades          t.MULTI_FUND_ID,          t.TRAN_TYPE,--o.BUY_SELL_FLAG          t.B3Q_RATIONALE,          t.TRD_STATUS         into #multi_fund_ids         from #trades_pop t         --inner join #orders o on o.ORD_NUM=t.ORD_NUM         INNER JOIN #MAX_TRADES_TOUCH MTT ON MTT.MULTI_FUND_ID = t.MULTI_FUND_ID AND MTT.MAX_TCH = t.TOUCH_COUNT         --where ISNULL(t.TRD_STATUS,'') != 'C'                IF OBJECT_ID('tempdb..#dist_ord_mf', 'U') IS NOT NULL DROP TABLE #dist_ord_mf                 select distinct          ORD_NUM,          MULTI_FUND_ID,          QUOTE_VALUE,          BROKER,          QUOTE_ORIGIN         into #dist_ord_mf         from VISTA_REPORTING.dbo.QUOTES q         where q.MULTI_FUND_ID in (SELECT DISTINCT MULTI_FUND_ID from #trades_pop)                 IF OBJECT_ID('tempdb..#quotes', 'U') IS NOT NULL DROP TABLE #quotes         select distinct --create Quotes table            q.MULTI_FUND_ID,           (SELECT COUNT(DISTINCT BROKER)             FROM #dist_ord_mf             WHERE (ISNULL(QUOTE_VALUE, 0) != 0 OR QUOTE_ORIGIN = 'TRADE')               AND MULTI_FUND_ID=q.MULTI_FUND_ID) AS QUOTES_OBTAINED, --Count distinct BROKER where QUOTE_VALUE is NOT NULL OR 0           count(distinct BROKER) as QUOTES_REQUESTED --A quote is required for every MULTI_FUND_ID         into #quotes         from #dist_ord_mf q         inner join #multi_fund_ids o on o.MULTI_FUND_ID=q.MULTI_FUND_ID         group by             q.MULTI_FUND_ID                 --1.d. Create a temp table containing the counterparty and value for each quote associated with the MFI (except for the actual counterparty)         IF OBJECT_ID('tempdb..#Brkr', 'U') IS NOT NULL DROP TABLE #Brkr                       SELECT DISTINCT             qt.ORD_NUM,                      qt.MULTI_FUND_ID,        CONVERT(DECIMAL(21,3),qt.QUOTE_VALUE) AS QUOTE_VALUE,                       ISNULL(brk.TRD_COUNTERPARTY,'') AS COUNTERPARTY          INTO #Brkr               FROM #dist_ord_mf qt               LEFT JOIN VISTA_REPORTING.dbo.COUNTERPARTIES brk               ON qt.BROKER = brk.COUNTERPARTY_CODE           WHERE NULLIF(qt.QUOTE_VALUE,0) IS NOT NULL           --AND qt.QUOTE_ORIGIN <> 'TRADE'                         IF OBJECT_ID('tempdb..#Broker', 'U') IS NOT NULL DROP TABLE #Broker         SELECT            ORD_NUM,           MULTI_FUND_ID,           STUFF((               SELECT                       ', ' + ISNULL(COUNTERPARTY,'') + ': ' + ISNULL(CONVERT(VARCHAR(250),QUOTE_VALUE),'')                FROM #Brkr                WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)             order by ', ' + ISNULL(COUNTERPARTY,'') + ': ' + ISNULL(CONVERT(VARCHAR(250),QUOTE_VALUE),'')                FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')                      ,1,2,'') AS Broker_Quotes         INTO #Broker         FROM #Brkr Results            GROUP BY ORD_NUM,             MULTI_FUND_ID                             IF OBJECT_ID('tempdb..#Broker_comp', 'U') IS NOT NULL DROP TABLE #Broker_comp         SELECT           ORD_NUM,             STUFF((             SELECT '| ' + CAST(BROKER_QUOTES AS VARCHAR(50))              FROM #Broker brk             WHERE (b.ORD_NUM = brk.ORD_NUM)              order by  '| ' + CAST(BROKER_QUOTES AS VARCHAR(50))              FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')           ,1,2,'') AS BROKER_COMP         INTO #Broker_comp          FROM #Broker b           GROUP BY ORD_NUM                  -- 1.b. Create a temp table with concatenated fund/s associated with the MFI         IF OBJECT_ID('tempdb..#Fund', 'U') IS NOT NULL DROP TABLE #Fund                       SELECT DISTINCT                      trd.MULTI_FUND_ID,                      ISNULL(trd.PORTFOLIOS_PORTFOLIO_NAME,'') AS Fund,            INVNUM           INTO #Fund               FROM #trades_pop trd                                 IF OBJECT_ID('tempdb..#Funds', 'U') IS NOT NULL DROP TABLE #Funds         SELECT            MULTI_FUND_ID,           STUFF((               SELECT                       ', ' + LTRIM(RTRIM(Fund))               FROM #Fund                WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)             ORDER BY ', ' + LTRIM(RTRIM(Fund))               FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')                      ,1,2,'') AS Funds,          STUFF((               SELECT                       ', ' + CONCAT(LTRIM(RTRIM(Fund)), LTRIM(RTRIM(INVNUM)))               FROM #Fund                WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)             ORDER BY ', ' + CONCAT(LTRIM(RTRIM(Fund)), LTRIM(RTRIM(INVNUM)))               FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')                      ,1,2,'') AS Fund_Investment_Number         INTO #Funds         FROM #Fund Results         GROUP BY MULTI_FUND_ID                  --2. Concatenate all funds on a trade that received an allocation        -- IF OBJECT_ID('tempdb..#FUNDS_CONCAT', 'U') IS NOT NULL DROP TABLE #FUNDS_CONCAT        -- ; WITH funds AS (        -- SELECT DISTINCT PM_ORD AS ORD_NUM,        --   PORTFOLIOS_PORTFOLIO_NAME        -- FROM (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc        -- LEFT JOIN (SELECT DISTINCT ORD_NUM, PORTFOLIOS_PORTFOLIO_NAME FROM  VISTA_REPORTING.dbo.TRADES) t        -- ON oc.TRD_ORD = t.ORD_NUM        -- )        -- SELECT        --   RESULTS.ORD_NUM,        --   STUFF((        --        SELECT DISTINCT ', ' + LTRIM(RTRIM(PORTFOLIOS_PORTFOLIO_NAME))        --        FROM funds        --        WHERE (ORD_NUM = Results.ORD_NUM)        --        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        --   ,1,2,'') AS Funds_concat        --INTO #FUNDS_CONCAT        --FROM funds Results        --GROUP BY RESULTS.ORD_NUM                -- Get Investment desks associated with all funds on the TRD order        --IF OBJECT_ID('tempdb..#Inv_desk_concat', 'U') IS NOT NULL DROP TABLE #Inv_desk_concat        --; WITH INV AS (SELECT DISTINCT        --       od.ORD_NUM,        --       p.ancestor        --FROM VISTA_STAGING.dbo.ORDERS_DETAIL od        --LEFT JOIN VISTA_STAGING.dbo.PORTFOLIO_GROUP_CLOSURE_TABLE p        --ON od.PORTFOLIO_NAME = p.descendant        ----WHERE p.ancestor IN ('MG_ATCRED','MG_RET_FI','MG_INSTI','MG_INTER','MG_RESTCT','MG_IN_CAP','MG_LEVFIN','MG_MIB','MG_REDEBT') -- This is the list of investment desks provided in the business requirements documents NEED TO CHECK FOR DMG DESK        --)        --SELECT        --  ORD_NUM,        --  STUFF((        --       SELECT DISTINCT ', ' + LTRIM(RTRIM(ancestor))        --       FROM INV        --       WHERE (ORD_NUM = Results.ORD_NUM)        --       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        --  ,1,2,'') AS Inv_Desk_Concat        --INTO #Inv_desk_concat        --FROM INV Results        --GROUP BY ORD_NUM                IF OBJECT_ID('tempdb..#max_touch_table', 'U') IS NOT NULL DROP TABLE #max_touch_table             select distinct               ORD_NUM,               MAX(TOUCH_COUNT) AS MAX_TOUCH        into #max_touch_table        from #pm_order_pop        --WHERE DEALING_DESK='DMG'        group by ORD_NUM                IF OBJECT_ID('tempdb..#max_touch_trades', 'U') IS NOT NULL DROP TABLE #max_touch_trades             select distinct               ORD_NUM,               MAX(TOUCH_COUNT) AS MAX_TOUCH        into #max_touch_trades        from VISTA_REPORTING.dbo.TRADES        group by ORD_NUM                IF OBJECT_ID('tempdb..#Min_Exec_Time', 'U') IS NOT NULL DROP TABLE #Min_Exec_Time        SELECT DISTINCT          PM.ORD_NUM,          MIN(T.EXECUTION_TIME) AS MIN_EXEC_TIME,          MAX(T.EXECUTION_TIME) AS MAX_EXEC_TIME,          MIN(PM.ACTIVE_TIME) AS MIN_ACTIVE_TIME,          PM.AUTH_TIME        INTO #Min_Exec_Time        FROM #pm_order_pop PM        LEFT JOIN #oc_pop OC ON OC.PM_ORD=PM.ORD_NUM        LEFT JOIN (SELECT DISTINCT EXECUTION_TIME, ORD_NUM FROM #trades_pop) T ON OC.TRD_ORD=T.ORD_NUM        WHERE pm.DEALING_DESK = 'DMG'        GROUP BY                       PM.ORD_NUM, PM.AUTH_TIME                     IF OBJECT_ID('tempdb..#max_touch_table_trader_pmo', 'U') IS NOT NULL DROP TABLE #max_touch_table_trader_pmo        select distinct               ORD_NUM,               MAX(TOUCH_COUNT) AS MAX_TOUCH        into #max_touch_table_trader_pmo        from #pm_order_pop        WHERE TRADER IS NOT NULL AND DEALING_DESK = 'DMG'        group by ORD_NUM                IF OBJECT_ID('tempdb..#max_touch_table_trader_trdo', 'U') IS NOT NULL DROP TABLE #max_touch_table_trader_trdo        select distinct               ORD_NUM,               MAX(TOUCH_COUNT) AS MAX_TOUCH        into #max_touch_table_trader_trdo        from #trd_ord_pop        WHERE TRADER IS NOT NULL AND DEALING_DESK='DMG'        group by ORD_NUM                IF OBJECT_ID('tempdb..#Latest_trader_trdo', 'U') IS NOT NULL DROP TABLE #Latest_trader_trdo        select distinct               oc.PM_ORD AS ORD_NUM,            TRADER AS [TRADER] -- Take the max trader to avoid duplication        into #Latest_trader_trdo        from (SELECT DISTINCT PM_ORD, TRD_ORD FROM #oc_pop) oc        LEFT JOIN #trd_ord_pop trdo        ON oc.TRD_ORD = trdo.ORD_NUM        INNER JOIN #max_touch_table_trader_trdo mx        ON trdo.ORD_NUM = mx.ORD_NUM AND trdo.TOUCH_COUNT = mx.MAX_TOUCH        --group by oc.PM_ORD                 IF OBJECT_ID('tempdb..#Latest_trader', 'U') IS NOT NULL DROP TABLE #Latest_trader        SELECT DISTINCT         pm.ORD_NUM,          COALESCE(pm.TRADER, lt.TRADER) AS TRADER,          COALESCE(d.FULL_NAME, d2.FULL_NAME) AS TRADER_FULL_NAME        INTO #Latest_trader        FROM #pm_order_pop pm        LEFT JOIN #max_touch_table_trader_pmo mt ON mt.ORD_NUM=pm.ORD_NUM AND mt.MAX_TOUCH=pm.TOUCH_COUNT        LEFT JOIN VISTA_REPORTING.dbo.DEALER_AND_DESK D ON pm.TRADER = D.INITIALS        LEFT JOIN #Latest_trader_trdo lt ON pm.ORD_NUM = lt.ORD_NUM        LEFT JOIN VISTA_REPORTING.dbo.DEALER_AND_DESK D2 ON lt.TRADER = D2.INITIALS        WHERE mt.ORD_NUM IS NOT NULL OR lt.ORD_NUM IS NOT NULL AND pm.DEALING_DESK='DMG'        --GROUP BY pm.ORD_NUM                 IF OBJECT_ID('tempdb..#Latest_temp_trades_distinct', 'U') IS NOT NULL DROP TABLE #Latest_temp_trades_distinct        SELECT DISTINCT        oc.PM_ORD AS ORD_NUM,         oc.TRD_ORD AS TRD_ORD,        t.MULTI_FUND_ID,         t.TRD_CURRENCY,        ISNULL(PL.Venue,'Manual') AS Venue,        CASE         WHEN prim.TWEB_CLOSE_DEALING = 1 THEN 'TWEB Close'         WHEN prim.[1615_DEALING] = 1 THEN '1615 Dealing'         WHEN t.ACTIVITY_TYPE = 'MG.FI 1. Proces' THEN 'VPT'        END AS [Method],        PL.RELEASE_DATETIME,        t.EXECUTION_TIME,        t.TRD_TRADE_DATE,        t.TRD_AUTH_TIME,        t.TRDCOMM_COMMENTS,        ABS(PM.FACE) AS FACE,        t.TRD_ORIG_FACE,        t.ACTIVITY_TYPE_DECODE,        CASE         WHEN prim.DEALING_DESK='DMG' --this bit probably needs further checks         THEN          CASE           WHEN prim.DEBT_DERIV = 'DEBT'            THEN            CASE             WHEN t.TRD_COUPON IS NOT NULL AND i2.TICKER IS NOT NULL AND i2.MATURITY IS NOT NULL              THEN CONCAT(ISNULL(i2.TICKER,''),' ', CAST(ISNULL(t.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))             ELSE  CONCAT(ISNULL(PM.SEC_DESC1,''),' ', CAST(ISNULL(t.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))            END           ELSE prim.DESC_INSTMT          END        END AS [Description],        T.TRD_COUNTERPARTY,        f.Fund_Investment_Number,        t.TRD_EX_BROKER_CODE,        t.[MATURITY],        convert(varchar,convert(decimal(18,2),T.TRD_PRICE)) as PX,        CASE          WHEN PRIM.DEALING_DESK IS NULL THEN NULL           WHEN PRIM.SM_SEC_GROUP = 'SWAP' AND PRIM.SM_SEC_TYPE IN ('SWAP','CSWAP') THEN CONVERT(DECIMAL(18,2),T.TRD_COUPON)         WHEN PRIM.DEBT_DERIV = 'DEBT' THEN CONVERT(DECIMAL(18,2),T.TRD_YIELD)        END as [RATE],        PL.FULL_NAME_VENUE                INTO #Latest_temp_trades_distinct        FROM #trades_pop T        LEFT JOIN (SELECT DISTINCT PLACEMENT_NUM, VENUE, RELEASE_DATETIME, FULL_NAME_VENUE FROM  VISTA_REPORTING.dbo.PLACEMENTS) PL        ON T.PLACEMENT_NUM = PL.PLACEMENT_NUM        LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID,DESC_INSTmt, DEALING_DESK, DEBT_DERIV, [1615_DEALING], TWEB_CLOSE_DEALING,SM_SEC_GROUP,SM_SEC_TYPE  FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) prim        ON t.MULTI_FUND_ID =prim.MULTI_FUND_ID        LEFT JOIN VISTA_REPORTING.dbo.REUTERS_PRICE_BENCHMARK_TABLE pb        on pb.MULTI_FUND_ID=T.MULTI_FUND_ID        LEFT JOIN (SELECT DISTINCT * FROM VISTA_REPORTING.DBO.ORDERS_CROSS) OC        ON T.ORD_NUM = OC.TRD_ORD        LEFT JOIN (SELECT DISTINCT PM2.ORD_NUM, TOUCH_COUNT, FACE, SEC_DESC1          FROM VISTA_REPORTING.DBO.PM_ORDERS PM2 INNER JOIN #max_touch_table mt ON mt.ORD_NUM=PM2.ORD_NUM AND mt.MAX_TOUCH=PM2.TOUCH_COUNT) PM        ON oc.PM_ORD = PM.ORD_NUM        OUTER APPLY (SELECT TOP 1 i.TICKER, i.MATURITY FROM VISTA_REPORTING.dbo.INSTRUMENTS i                       WHERE (i.CUSIP=t.CUSIP AND i.DATE<=CONVERT(DATE, t.EXECUTION_TIME))                       ORDER BY i.DATE DESC) as i2        LEFT JOIN (SELECT Fund_Investment_Number, MULTI_FUND_ID from #Funds) f        on f.MULTI_FUND_ID = t.MULTI_FUND_ID        WHERE FinalFlag = 1        AND OC.PM_ORD IS NOT NULL        AND prim.DEALING_DESK = 'DMG'                --Adding this in due to Remain Amount not showing correctly        IF OBJECT_ID('tempdb..#Latest_temp_trades_total', 'U') IS NOT NULL DROP TABLE #Latest_temp_trades_total        SELECT          ORD_NUM,         SUM(ABS(TRD_ORIG_FACE)) as TOTAL_AMT        INTO #Latest_temp_trades_total        FROM #Latest_temp_trades_distinct        GROUP BY ORD_NUM                --Adding in Settlement date so it can be concatonated and added in final table        IF OBJECT_ID('tempdb..#settle_date_temp', 'U') IS NOT NULL DROP TABLE #settle_date_temp        SELECT DISTINCT          tr.ORD_NUM         ,tr.MULTI_FUND_ID         --,tr.TRD_CURRENCY         --,tr.EXECUTION_TIME         --,tr.TRD_AUTH_TIME         --,tr.TRD_TRADE_DATE         ,T2.SETTLE_DATE         ,tr.PULL_DATE        INTO #settle_date_temp        FROM #trades_pop as tr        inner join (SELECT             MULTI_FUND_ID,            MAX(TOUCH_COUNT) AS MAX_TOUCH,          max(TRD_SETTLE_DATE) AS SETTLE_DATE           FROM VISTA_REPORTING.dbo.TRADES           GROUP BY MULTI_FUND_ID) as t2         on (tr.MULTI_FUND_ID=t2.MULTI_FUND_ID) and (tr.TOUCH_COUNT=t2.MAX_TOUCH)                IF OBJECT_ID('tempdb..#Latest_temp_trades', 'U') IS NOT NULL DROP TABLE #Latest_temp_trades        SELECT         ltd.ORD_NUM,         ltd.TRD_ORD,        ltd.MULTI_FUND_ID,        ltd.TRD_CURRENCY,        ltd.Venue,        ltd.[Method],        ltd.RELEASE_DATETIME,        ltd.EXECUTION_TIME,        ltd.TRD_TRADE_DATE,        ltd.TRD_AUTH_TIME,        ltd.TRDCOMM_COMMENTS,        SUM(ABS(ltd.TRD_ORIG_FACE)) AS [Booked Amt],        ltd.FACE - lt.[TOTAL_AMT] AS [Remain Amt],        ltd.ACTIVITY_TYPE_DECODE,        ltd.[Description],        ltd.TRD_COUNTERPARTY,        ltd.Fund_Investment_Number,        ltd.TRD_EX_BROKER_CODE,        ltd.PX,        ltd.RATE,        q.QUOTES_OBTAINED,        q.QUOTES_REQUESTED,        ltd.MATURITY,        sett_temp.SETTLE_DATE,        ltd.[FULL_NAME_VENUE]        INTO #Latest_temp_trades        FROM #Latest_temp_trades_distinct ltd        left join #Latest_temp_trades_total lt        on ltd.ORD_NUM = lt.ORD_NUM        LEFT JOIN (SELECT DISTINCT QUOTES_OBTAINED, QUOTES_REQUESTED, MULTI_FUND_ID from #quotes) q on q.MULTI_FUND_ID = ltd.MULTI_FUND_ID        left join #settle_date_temp sett_temp        on sett_temp.ORD_NUM = ltd.ORD_NUM        GROUP BY          ltd.ORD_NUM,          ltd.TRD_ORD,         ltd.MULTI_FUND_ID,         ltd.TRD_CURRENCY,         ltd.Venue,         ltd.[Method],         ltd.RELEASE_DATETIME,         ltd.EXECUTION_TIME,         ltd.TRD_TRADE_DATE,         ltd.TRD_AUTH_TIME,         ltd.TRDCOMM_COMMENTS,         ltd.ACTIVITY_TYPE_DECODE,         ltd.[Description],         ltd.FACE,         ltd.TRD_COUNTERPARTY,         ltd.Fund_Investment_Number,         ltd.TRD_EX_BROKER_CODE,         ltd.PX,         ltd.RATE,         q.QUOTES_OBTAINED,         q.QUOTES_REQUESTED,         lt.[TOTAL_AMT],         ltd.MATURITY,         sett_temp.SETTLE_DATE,         ltd.[FULL_NAME_VENUE]                                IF OBJECT_ID('tempdb..#concat_ord', 'U') IS NOT NULL DROP TABLE #concat_ord           SELECT            ORD_NUM,            STUFF((            SELECT '| ' + CAST(TRD_ORD AS VARCHAR(50))             FROM #Latest_temp_trades Results            WHERE (t.ORD_NUM = Results.ORD_NUM)             ORDER BY '| ' + CAST(TRD_ORD AS VARCHAR(50))            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')          ,1,2,'') AS TRD_ORD_concat,            STUFF((            SELECT '| ' + CAST(MULTI_FUND_ID AS VARCHAR(50))             FROM #Latest_temp_trades Results            WHERE (t.ORD_NUM = Results.ORD_NUM)             ORDER BY '| ' + CAST(MULTI_FUND_ID AS VARCHAR(50))            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')          ,1,2,'') AS MFID_concat,            STUFF((            SELECT '| ' + CAST(TRD_CURRENCY AS VARCHAR(50))             FROM #Latest_temp_trades Results             WHERE (t.ORD_NUM = Results.ORD_NUM)             ORDER BY '| ' + CAST(TRD_CURRENCY AS VARCHAR(50))            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')          ,1,2,'') AS Sett_CCy_concat,            STUFF((            SELECT '| ' + CAST(FULL_NAME_VENUE AS VARCHAR(50))             FROM #Latest_temp_trades Results            WHERE (t.ORD_NUM = Results.ORD_NUM)             ORDER BY '| ' + CAST(FULL_NAME_VENUE AS VARCHAR(50))            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')          ,1,2,'') AS FULL_NAME_Venue_concat,               STUFF((            SELECT '| ' + CAST([Method] AS VARCHAR(50))             FROM #Latest_temp_trades Results            WHERE (t.ORD_NUM = Results.ORD_NUM)             ORDER BY '| ' + CAST([Method] AS VARCHAR(50))            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')          ,1,2,'') AS Method_concat,                 STUFF((            SELECT '| ' + CAST(RELEASE_DATETIME AS VARCHAR(50))            FROM #Latest_temp_trades Results            WHERE (t.ORD_NUM = Results.ORD_NUM)             ORDER BY '| ' + CAST(RELEASE_DATETIME AS VARCHAR(50))            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')          ,1,2,'') AS RELEASE_DATETIME_concat,             STUFF((            SELECT '| ' + CONCAT(CONVERT(VARCHAR(25),CONVERT(date,NULLIF(EXECUTION_TIME,'')),103),' ',CONVERT(TIME(0),NULLIF(EXECUTION_TIME,'')))             FROM #Latest_temp_trades Results            WHERE (t.ORD_NUM = Results.ORD_NUM)             ORDER BY '| ' + CONCAT(CONVERT(VARCHAR(25),CONVERT(date,NULLIF(EXECUTION_TIME,'')),103),' ',CONVERT(TIME(0),NULLIF(EXECUTION_TIME,'')))             FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')          ,1,2,'') AS EXECUTION_TIME_concat,                STUFF((            SELECT '| ' + CONVERT(VARCHAR(50),TRD_TRADE_DATE,103)             FROM #Latest_temp_trades Results            WHERE (t.ORD_NUM = Results.ORD_NUM)             ORDER BY '| ' + CONVERT(VARCHAR(50),TRD_TRADE_DATE,103)             FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')          ,1,2,'') AS TRD_TRADE_DATE_concat,                   STUFF((            SELECT '| ' + CONCAT(CONVERT(VARCHAR(25),CONVERT(date,NULLIF(TRD_AUTH_TIME,'')),103),' ',CONVERT(TIME(0),NULLIF(TRD_AUTH_TIME,'')))            FROM #Latest_temp_trades Results            WHERE (t.ORD_NUM = Results.ORD_NUM)             ORDER BY '| ' + CONCAT(CONVERT(VARCHAR(25),CONVERT(date,NULLIF(TRD_AUTH_TIME,'')),103),' ',CONVERT(TIME(0),NULLIF(TRD_AUTH_TIME,'')))            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')          ,1,2,'') AS TRD_AUTH_TIME_concat,              STUFF((            SELECT '| ' + CAST(TRDCOMM_COMMENTS AS VARCHAR(1000))             FROM #Latest_temp_trades Results            WHERE (t.ORD_NUM = Results.ORD_NUM)             ORDER BY '| ' + CAST(TRDCOMM_COMMENTS AS VARCHAR(1000))             FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')          ,1,2,'') AS TRDCOMM_COMMENTS_concat,                STUFF((            SELECT '| ' + CAST(CONVERT(DECIMAL(19,2),[Booked amt]) AS VARCHAR(50))             FROM #Latest_temp_trades Results            WHERE (t.ORD_NUM = Results.ORD_NUM)             ORDER BY '| ' + CAST(CONVERT(DECIMAL(19,2),[Booked amt]) AS VARCHAR(50))             FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')          ,1,2,'') AS Booked_amt_concat,             STUFF((            SELECT '| ' + CAST(CONVERT(DECIMAL(19,2),[Remain Amt]) AS VARCHAR(50))             FROM #Latest_temp_trades Results            WHERE (t.ORD_NUM = Results.ORD_NUM)             ORDER BY '| ' + CAST(CONVERT(DECIMAL(19,2),[Remain Amt]) AS VARCHAR(50))             FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')          ,1,2,'') AS Remain_amt_concat,                STUFF((            SELECT '| ' + CAST([Description] AS VARCHAR(1000))             FROM #Latest_temp_trades Results            WHERE (t.ORD_NUM = Results.ORD_NUM)             ORDER BY '| ' + CAST([Description] AS VARCHAR(1000))             FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')          ,1,2,'') AS [Description_Concat],                STUFF((            SELECT '| ' + CAST([ACTIVITY_TYPE_DECODE] AS VARCHAR(50))             FROM #Latest_temp_trades Results            WHERE (t.ORD_NUM = Results.ORD_NUM)             ORDER BY '| ' + CAST([ACTIVITY_TYPE_DECODE] AS VARCHAR(50))            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')          ,1,2,'') AS [Activity_Type_Concat],          STUFF((            SELECT '| ' + CAST([TRD_COUNTERPARTY] AS VARCHAR(50))             FROM #Latest_temp_trades Results            WHERE (t.ORD_NUM = Results.ORD_NUM)             ORDER BY '| ' + CAST([TRD_COUNTERPARTY] AS VARCHAR(50))             FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')          ,1,2,'') AS [TRD_COUNTERPARTY],          STUFF((            SELECT '| ' + CAST([Fund_Investment_Number] AS VARCHAR(50))             FROM #Latest_temp_trades Results            WHERE (t.ORD_NUM = Results.ORD_NUM)             ORDER BY '| ' + CAST([Fund_Investment_Number] AS VARCHAR(50))             FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')          ,1,2,'') AS [Fund_Investment_Number],          STUFF((            SELECT '| ' + CAST(TRD_EX_BROKER_CODE AS VARCHAR(50))             FROM #Latest_temp_trades Results            WHERE (t.ORD_NUM = Results.ORD_NUM)            ORDER BY '| ' + CAST(TRD_EX_BROKER_CODE AS VARCHAR(50))             FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')          ,1,2,'') AS TRD_EX_BROKER_CODE,          STUFF((            SELECT '| ' + CAST(PX AS VARCHAR(50))             FROM #Latest_temp_trades Results            WHERE (t.ORD_NUM = Results.ORD_NUM)             ORDER BY '| ' + CAST(PX AS VARCHAR(50))             FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')          ,1,2,'') AS PX,          STUFF((            SELECT '| ' + CAST(RATE AS VARCHAR(50))             FROM #Latest_temp_trades Results            WHERE (t.ORD_NUM = Results.ORD_NUM)             ORDER BY '| ' + CAST(RATE AS VARCHAR(50))            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')          ,1,2,'') AS RATE,          STUFF((            SELECT '| ' + CAST(QUOTES_OBTAINED AS VARCHAR(50))             FROM #Latest_temp_trades Results            WHERE (t.ORD_NUM = Results.ORD_NUM)             ORDER BY '| ' + CAST(QUOTES_OBTAINED AS VARCHAR(50))             FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')          ,1,2,'') AS QUOTES_OBTAINED,          STUFF((            SELECT '| ' + CAST(QUOTES_REQUESTED AS VARCHAR(50))             FROM #Latest_temp_trades Results            WHERE (t.ORD_NUM = Results.ORD_NUM)             ORDER BY '| ' + CAST(QUOTES_REQUESTED AS VARCHAR(50))            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')          ,1,2,'') AS QUOTES_REQUESTED,          STUFF((            SELECT '| ' + CAST(SETTLE_DATE AS VARCHAR(50))             FROM #Latest_temp_trades Results            WHERE (t.ORD_NUM = Results.ORD_NUM)             ORDER BY '| ' + CAST(SETTLE_DATE AS VARCHAR(50))             FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')          ,1,2,'') AS SETTLE_DATE         INTO #CONCAT_ORD         FROM #Latest_temp_trades t         --GROUP BY ORD_NUM, f.Fund_Investment_Number, f.MULTI_FUND_ID                          IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table        SELECT DISTINCT          CONVERT(DECIMAL(18,2),ABS(PM.FACE)) AS [ORD_AMT],         conc_ord.QUOTES_OBTAINED as QUOTES,         brk_c.BROKER_COMP as [COMP_QUOTE],         conc_ord.QUOTES_REQUESTED as REQUESTS,         conc_ord.TRDCOMM_COMMENTS_concat AS  [DEALER_COMMENT],         PM.COMMENTS_VALUE AS GENERAL_COMMENT,         e.[ORD_NUM] as [ORDER],         conc_ord.[MFID_Concat] as MFID,         conc_ord.[Description_Concat] as [DESCRIPTION],         conc_ord.[TRD_ORD_concat] as [Trader Order Number],         lst_trdr.TRADER as DEALER,-- have taken out the temp tables that made these previously as unsure they are relevant, if we see duplicates/null values we can add them back in         conc_ord.Booked_amt_concat AS  [BOOKED_AMT],         PRIM.INST_TYPE,         PM.TRAN_TYPE AS SIDE,         PM.CURRENCY AS CCY,         i2.ISIN,         PM.CUSIP,         i2.SEDOL,         conc_ord.PX,         CONVERT(DECIMAL(18,2),T.TRD_PRICING_SPREAD) as [Spread],         conc_ord.RATE,         conc_ord.[TRD_COUNTERPARTY] AS CPTY,         conc_ord.TRD_EX_BROKER_CODE as EX_CPTY,         ISNULL(conc_ord.[FULL_NAME_Venue_concat],'Manual') AS [PLATFORM],         conc_ord.Method_Concat AS [METHOD],         conc_ord.TRD_TRADE_DATE_concat AS  [TRADE_DATE],         conc_ord.EXECUTION_TIME_concat AS  [EXEC_DATE],         conc_ord.TRD_AUTH_TIME_concat AS  [ENTRY_DATE],         conc_ord.Activity_Type_Concat as [ACTIVITY],         conc_ord.Fund_Investment_Number as FUND_INVESTMENT_NUMBER,         E.CREATETIME AS CREATE_DATE,         '3 Firm Quotes' as  [BASELINE_PDP],         conc_ord.[Sett_Ccy_Concat] as [SETT_CCY],         conc_ord.Remain_amt_concat AS [REMAIN_AMOUNT],         ltt.MATURITY as [MATURITY_DATE],         conc_ord.SETTLE_DATE as [SETTLEMENT_DATE],         E.[VG_17] as [EXCEPTION_FLAG],         dc1.[VALUE] AS INSTRUCTION,         PM.ORDER_REASON_DECODE AS PURPOSE,         concat(i2.SM_SEC_GROUP,'/',i2.SM_SEC_TYPE) as [Asset_Type/Subtype],         T.EXECUTION_TYPE_DECODE         --OC.TRD_ORD AS [TRD_ORD],         --INV.INV_DESK_CONCAT AS [INV_DESK],         --TRD.LIMIT_TYPE,         --TRD.LIMIT_VALUE,         --CONCAT(YEAR(PM.AUTH_TIME),'-',left(datename(m,PM.AUTH_TIME),3)) AS MONTH_YEAR,         --i2.SM_SEC_GROUP,         --T.TRD_PURPOSE,                 --ABS(PM.FACE) - ABS(T.TRD_ORIG_FACE) AS [Remain_Amt],         --MET.[MIN_ACTIVE_TIME] AS ACTIVE_DATE,         --conc_ord.RELEASE_DATETIME_concat AS  [SEND_DATE],                         --CASE         --   WHEN e.Exception_Type ='Inter' THEN 'Unfilled'         --   WHEN e.Exception_Type ='Intra' THEN 'Filled Outside'         --   ELSE NULL         --  END AS [TE_Type],         --CASE          --WHEN PRIM.DEALING_DESK = 'DMG' AND PRIM.INST_TYPE = ('GOV') THEN 60         --WHEN PRIM.DEALING_DESK = 'DMG' AND PRIM.INST_TYPE in ( 'SCDS', 'ICDS') THEN 120         --WHEN PRIM.DEALING_DESK = 'DMG' AND PRIM.INST_TYPE in ('IFS', 'OIS', 'IRS', 'TRS', 'EQOPT', 'FXOPT', 'ASWP') THEN 180--need to add asset swaps in here         --   ELSE NULL         --  END AS [THRESHOLD],         --E.TIMESPAN,         --FND.FUNDS_CONCAT AS [FUND],                 --DATEDIFF(MINUTE, MET.AUTH_TIME, MET.MIN_ACTIVE_TIME) AS PICKUP_TIMESPAN,         --MET.MIN_EXEC_TIME AS FIRST_EXECUTION,         --DATEDIFF(MINUTE, MET.AUTH_TIME, MET.MIN_EXEC_TIME) AS FIRST_EXECUTION_TIMESPAN,         --CASE         -- WHEN (ABS(PM.FACE)-max(ABS(TRD.FILL_AMT))) = 0 THEN 'YES'              -- ELSE 'NO'         --  END AS [COMPLETED_ORDERS],         --MET.MAX_EXEC_TIME AS LAST_EXECUTION,         --DATEDIFF(minute,PM.AUTH_TIME, Reversion_Time) as [REVERSION_TIMESPAN],         --PM.AUTH_TIME,                 --CASE WHEN PRIM.INTERFUND_TRANSFER = 1 THEN 'Y' ELSE 'N' END as PUT_THROUGH,                         --CASE WHEN i2.EMERGING_MARKET = 1 THEN 'Y' ELSE 'N' END AS EM_NON_EM,         --E.REVERSION_TIME,         --E.[VG_11_CREATETIME] AS VG_11_CREATETIME,         --E.[VG_11],                  --CONCAT(EXCEPTION_TYPE,VG_09) AS AUX                          --E.DEALING_DESK,            --E.EXCEPTION_TYPE,          ----PRIM.PRIMARY_MARKET_ORDER_LEVEL AS PRIMARY_MARKET,         --PM.SEC_DESC1,         --PM.PM_FULL_NAME,         --PM.ORDER_REASON,         --lst_trdr.TRADER_FULL_NAME,         ----(ABS(PM.FACE)-ABS(TRD.FILL_AMT)) AS FILLED,         --NULL AS INTERNAL_COMMENT,         --NULL AS DELAY_IN_EXECUTION,         --NULL AS FILLED_UNFILLED,         -- T.B3Q_RATIONALE,         -- T.NWQ_RATIONALE        INTO #temp_final_master_table        FROM (SELECT DISTINCT *  FROM VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE) E        INNER JOIN #pm_order_pop pm_nums on pm_nums.ORD_NUM = E.ORD_NUM        LEFT JOIN #oc_pop OC ON E.ORD_NUM = OC.PM_ORD        LEFT JOIN (SELECT DISTINCT T2.ORD_NUM, B3Q_RATIONALE, NWQ_RATIONALE, TOUCH_COUNT, EXECUTION_TYPE_DECODE, TRD_PURPOSE, TRD_ORIG_FACE, TRD_PRICE, TRD_PRICING_SPREAD, TRD_COUPON, TRD_YIELD FROM Vista_Reporting.dbo.TRADES T2         INNER JOIN #max_touch_trades MTT ON MTT.ORD_NUM = T2.ORD_NUM AND MTT.MAX_TOUCH = T2.TOUCH_COUNT) T         ON T.ORD_NUM = OC.TRD_ORD        LEFT JOIN (SELECT DISTINCT ORD_NUM, INST_TYPE, PRIMARY_MARKET_ORDER_LEVEL ,INTERFUND_TRANSFER, DEALING_DESK, SM_SEC_GROUP, SM_SEC_TYPE, DEBT_DERIV FROM VISTA_REPORTING.DBO.PRIMARY_INST_TYPE_TABLE) PRIM ON PRIM.ORD_NUM = OC.TRD_ORD AND PRIM.DEALING_DESK = E.DEALING_DESK        LEFT JOIN (SELECT DISTINCT ORD_NUM, LIMIT_TYPE, LIMIT_VALUE, FILL_AMT FROM #trd_ord_pop) TRD ON OC.TRD_ORD = TRD.ORD_NUM         LEFT JOIN (SELECT DISTINCT PM2.ORD_NUM, SEC_DESC1, AUTH_TIME, BROKER_CODE, PM_FULL_NAME, PM, UPDATE_INSTR, CUSIP, CURRENCY, ORDER_REASON_DECODE, TRAN_TYPE, COMMENTS_VALUE, ORDER_REASON , TRADER, TRADER_FULL_NAME, FACE           FROM #pm_order_pop PM2          INNER JOIN (select * from #max_touch_table) MT ON MT.ORD_NUM = PM2.ORD_NUM AND MT.MAX_TOUCH = PM2.TOUCH_COUNT) PM ON PM.ORD_NUM = E.ORD_NUM        OUTER APPLY (SELECT TOP 1             i.ISIN,            i.SEDOL,            i.SM_SEC_GROUP,            i.SM_SEC_TYPE            FROM VISTA_REPORTING.dbo.INSTRUMENTS i                              WHERE (i.CUSIP=PM.CUSIP AND i.DATE<=CONVERT(DATE, PM.AUTH_TIME))                              ORDER BY i.DATE DESC) as i2        --LEFT JOIN (select distinct * from #FUNDS_CONCAT) FND ON FND.ORD_NUM = E.ORD_NUM        --LEFT JOIN (select distinct * from  #INV_DESK_CONCAT) INV ON INV.ORD_NUM = e.ORD_NUM        LEFT JOIN (SELECT TAG_NAME,CODE,[VALUE] FROM VISTA_REPORTING.dbo.DECODES) dc1 ON dc1.TAG_NAME = 'PM_INSTRUCTION' AND dc1.CODE= PM.UPDATE_INSTR        LEFT JOIN (SELECT ORD_NUM,MAX_EXEC_TIME, MIN_EXEC_TIME, MIN_ACTIVE_TIME, AUTH_TIME FROM #Min_Exec_Time) MET ON MET.ORD_NUM=E.ORD_NUM        LEFT JOIN (SELECT ORD_NUM,[Sett_Ccy_Concat], [TRD_ORD_concat], FULL_NAME_Venue_concat,Method_Concat,Remain_amt_concat,Booked_amt_concat, Description_Concat,             RELEASE_DATETIME_concat,TRD_TRADE_DATE_concat,EXECUTION_TIME_concat,TRD_AUTH_TIME_concat,TRDCOMM_COMMENTS_concat,[MFID_Concat],Activity_Type_Concat,TRD_COUNTERPARTY,Fund_Investment_Number,TRD_EX_BROKER_CODE,PX,RATE,QUOTES_OBTAINED,QUOTES_REQUESTED,SETTLE_DATE             FROM #concat_ord) conc_ord ON conc_ord.ORD_NUM=e.ORD_NUM        LEFT JOIN (SELECT ORD_NUM,TRADER, TRADER_FULL_NAME FROM #Latest_trader) lst_trdr ON e.ORD_NUM = lst_trdr.ORD_NUM        LEFT JOIN (SELECT ORD_NUM, MULTI_FUND_ID,MATURITY from #Latest_temp_trades) ltt on ltt.ORD_NUM = E.ORD_NUM        LEFT JOIN (SELECT Broker_Quotes, MULTI_FUND_ID from #Broker) brkr on brkr.MULTI_FUND_ID = ltt.MULTI_FUND_ID        LEFT JOIN (SELECT BROKER_COMP, ORD_NUM from #Broker_comp) brk_c on brk_c.ORD_NUM = e.ORD_NUM        LEFT JOIN (SELECT QUOTES_OBTAINED, QUOTES_REQUESTED, MULTI_FUND_ID from #quotes) q on q.MULTI_FUND_ID = ltt.MULTI_FUND_ID                        IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE', 'U') IS NOT NULL         delete from VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE        where [ORDER] in (SELECT ORD_NUM from #pm_order_pop)                IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE', 'U') IS NOT NULL        INSERT INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE        SELECT *        FROM #temp_final_master_table                ELSE                SELECT *        INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE        FROM #temp_final_master_table                IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL        INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(        'MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE', --TABLE_NAME        @START_TIME, --START_TIME        GETDATE(), --END_TIME        DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS        CAST(GETDATE() as date)) --COMPLETION_DATE                        IF OBJECT_ID('tempdb..#max_trades_touch', 'U') IS NOT NULL DROP TABLE #max_trades_touch        IF OBJECT_ID('tempdb..#multi_fund_ids', 'U') IS NOT NULL DROP TABLE #multi_fund_ids        IF OBJECT_ID('tempdb..#dist_ord_mf', 'U') IS NOT NULL DROP TABLE #dist_ord_mf        IF OBJECT_ID('tempdb..#quotes', 'U') IS NOT NULL DROP TABLE #quotes        IF OBJECT_ID('tempdb..#Brkr', 'U') IS NOT NULL DROP TABLE #Brkr        IF OBJECT_ID('tempdb..#Broker', 'U') IS NOT NULL DROP TABLE #Broker        IF OBJECT_ID('tempdb..#Broker_comp', 'U') IS NOT NULL DROP TABLE #Broker_comp        IF OBJECT_ID('tempdb..#Fund', 'U') IS NOT NULL DROP TABLE #Fund        IF OBJECT_ID('tempdb..#Funds', 'U') IS NOT NULL DROP TABLE #Funds        --IF OBJECT_ID('tempdb..#FUNDS_CONCAT', 'U') IS NOT NULL DROP TABLE #FUNDS_CONCAT        --IF OBJECT_ID('tempdb..#Inv_desk_concat', 'U') IS NOT NULL DROP TABLE #Inv_desk_concat        IF OBJECT_ID('tempdb..#max_touch_table', 'U') IS NOT NULL DROP TABLE #max_touch_table           IF OBJECT_ID('tempdb..#max_touch_trades', 'U') IS NOT NULL DROP TABLE #max_touch_trades        IF OBJECT_ID('tempdb..#Min_Exec_Time', 'U') IS NOT NULL DROP TABLE #Min_Exec_Time        IF OBJECT_ID('tempdb..#max_touch_table_trader_pmo', 'U') IS NOT NULL DROP TABLE #max_touch_table_trader_pmo        IF OBJECT_ID('tempdb..#max_touch_table_trader_trdo', 'U') IS NOT NULL DROP TABLE #max_touch_table_trader_trdo        IF OBJECT_ID('tempdb..#Latest_trader_trdo', 'U') IS NOT NULL DROP TABLE #Latest_trader_trdo        IF OBJECT_ID('tempdb..#Latest_trader', 'U') IS NOT NULL DROP TABLE #Latest_trader        IF OBJECT_ID('tempdb..#Latest_temp_trades_distinct', 'U') IS NOT NULL DROP TABLE #Latest_temp_trades_distinct        IF OBJECT_ID('tempdb..#Latest_temp_trades_total', 'U') IS NOT NULL DROP TABLE #Latest_temp_trades_total        IF OBJECT_ID('tempdb..#settle_date_temp', 'U') IS NOT NULL DROP TABLE #settle_date_temp        IF OBJECT_ID('tempdb..#Latest_temp_trades', 'U') IS NOT NULL DROP TABLE #Latest_temp_trades        IF OBJECT_ID('tempdb..#concat_ord', 'U') IS NOT NULL DROP TABLE #concat_ord        IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table                END   --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_PM_ORDER_TABLE_VG_17_COUNTERPARTY_DIRECTION_FX  CreateDate: 2025-06-26 18:01:58.060  ModifyDate: 2025-07-01 11:05:58.260  --- DEFINITION START ---  -- =============================================      -- Author:  <Samad, Mehreen>      -- Create date: <10/07/2019>      -- Description:       -- <Master exception table for Counterparty      -- Direction Exception test for FX.>      -- =============================================            -- ***************VERSION CONTROL***************            -- *********************************************            CREATE   PROCEDURE [dbo].[MASTER_PM_ORDER_TABLE_VG_17_COUNTERPARTY_DIRECTION_FX]       -- Add the parameters for the stored procedure here       --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,             AS      BEGIN       -- SET NOCOUNT ON added to prevent extra result sets from       -- interfering with SELECT statements.       SET NOCOUNT ON;                    DECLARE @START_TIME as datetime       SET @START_TIME = GETDATE()                   IF OBJECT_ID('tempdb..#distinct_ids_al', 'U') IS NOT NULL DROP TABLE #distinct_ids_al       SELECT DISTINCT         pr.ORD_NUM as TRD_ORD,        oc.PM_ORD AS ORD_NUM,        pr.MULTI_FUND_ID       INTO #distinct_ids_al       FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr       LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = pr.ORD_NUM       WHERE pr.DEALING_DESK = 'FX'                   IF OBJECT_ID('tempdb..#distinct_ids_fx', 'U') IS NOT NULL DROP TABLE #distinct_ids_fx       SELECT DISTINCT        fxt.ORDER_ID AS TRD_ORD,        vg.ORDER_ID,        fxt.TRADE_ID AS MULTI_FUND_ID        INTO #distinct_ids_fx       FROM Vista_Staging.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE vg       LEFT JOIN Vista_Reporting.dbo.FX_ORDERS fxo ON fxo.FXM_ORDER_ID = vg.ORDER_ID       LEFT JOIN Vista_Reporting.dbo.FX_TRADES fxt ON fxt.ORDER_ID = fxo.FXM_ORDER_ID                     IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_FX_TABLE', 'U') IS NOT NULL       DELETE FROM #distinct_ids_fx where NOT EXISTS (SELECT DISTINCT od.FXM_ORDER_ID                     FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_FX od                     WHERE od.FXM_ORDER_ID = #distinct_ids_fx.ORDER_ID)                   IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_FX_TABLE', 'U') IS NOT NULL       DELETE FROM #distinct_ids_al where NOT EXISTS (SELECT DISTINCT od.PM_ORD                     FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                     WHERE od.PM_ORD = #distinct_ids_al.ORD_NUM)                   IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE  #distinct_ids       SELECT *        INTO #distinct_ids       FROM #distinct_ids_al             UNION ALL             SELECT *        FROM #distinct_ids_fx                   IF OBJECT_ID('tempdb..#max_api_o', 'U') IS NOT NULL DROP TABLE #max_api_o       SELECT DISTINCT        fxo.[FXM_ORDER_ID],         MAX(fxo.[API_REQUESTED_DATE]) as MAX_API_DATE       INTO #max_api_o        FROM VISTA_REPORTING.dbo.FX_ORDERS fxo       WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = fxo.FXM_ORDER_ID)       GROUP BY fxo.[FXM_ORDER_ID]                   IF OBJECT_ID('tempdb..#max_touch_pm', 'U') IS NOT NULL DROP TABLE #max_touch_pm       SELECT DISTINCT         pm.ORD_NUM,         MAX(pm.TOUCH_COUNT) as MAX_TOUCH        INTO #max_touch_pm       FROM VISTA_REPORTING.dbo.PM_ORDERS pm       WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = pm.ORD_NUM)       GROUP BY ORD_NUM                   IF OBJECT_ID('tempdb..#losing_bank_trades', 'U') IS NOT NULL DROP TABLE #losing_bank_trades       SELECT DISTINCT         ex.ORDER_ID,        CONVERT(VARCHAR(20), FXB.LOSING_BANK) AS LOSING_BANK,         CONVERT(VARCHAR(20), FXB.PROFIT_OR_LOSS) AS PROFIT_OR_LOSS,         CONVERT(VARCHAR(20), FXB.ALL_IN_RATE) AS ALL_IN_RATE,         CONVERT(VARCHAR(20), FXB.SWAP_POINTS) AS SWAP_POINTS,        FXT.EXECUTED_BANK       INTO #losing_bank_trades       FROM VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE ex       LEFT JOIN VISTA_REPORTING.dbo.FX_TRADES FXT on FXT.ORDER_ID = ex.ORDER_ID       LEFT JOIN VISTA_REPORTING.dbo.FX_LOSING_BANKS FXB ON FXB.TRADE_ID = FXT.TRADE_ID       WHERE FXT.ORDER_ID = ex.ORDER_ID           AND FXB.LOSING_BANK != FXT.EXECUTED_BANK           AND ex.[DATA_SOURCE] = 'FX'          AND EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ex.ORDER_ID)                   IF OBJECT_ID('tempdb..#mapped_bank_best_ex', 'U') IS NOT NULL DROP TABLE #mapped_bank_best_ex       SELECT DISTINCT        ex.ORDER_ID,        CONVERT(VARCHAR(20),FXB.BANK_NAME) AS BANK_NAME       INTO #mapped_bank_best_ex       FROM VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE ex       LEFT JOIN VISTA_REPORTING.dbo.FX_TRADES FXT on FXT.ORDER_ID = ex.ORDER_ID       INNER JOIN VISTA_REPORTING.dbo.FX_MAPPED_BANKS fxb ON fxb.TRADE_ID=FXT.TRADE_ID       WHERE ex.DATA_SOURCE = 'FX'          AND EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ex.ORDER_ID)                   --Losing Bank temp       IF OBJECT_ID('tempdb..#losingbanktemp', 'U') IS NOT NULL DROP TABLE #losingbanktemp        SELECT DISTINCT        ex.[ORDER_ID],        STUFF((          SELECT ', ' + LOSING_BANK         FROM #losing_bank_trades fxb         WHERE fxb.ORDER_ID = ex.ORDER_ID         ORDER BY LOSING_BANK         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS LOSING_BANK,        STUFF((          SELECT ', ' + PROFIT_OR_LOSS         FROM #losing_bank_trades fxb         WHERE fxb.ORDER_ID = ex.ORDER_ID          ORDER BY PROFIT_OR_LOSS         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS PROFIT_OR_LOSS,         STUFF((          SELECT ', ' + ALL_IN_RATE         FROM #losing_bank_trades fxb         WHERE fxb.ORDER_ID = ex.ORDER_ID          ORDER BY ALL_IN_RATE         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS ALL_IN_RATE,         STUFF((          SELECT ', ' + SWAP_POINTS         FROM #losing_bank_trades fxb         WHERE fxb.ORDER_ID = ex.ORDER_ID          ORDER BY SWAP_POINTS         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS SWAP_POINTS,         STUFF((          SELECT ', ' + FXB.BANK_NAME         FROM #mapped_bank_best_ex fxb         WHERE fxb.ORDER_ID = ex.ORDER_ID          ORDER BY BANK_NAME         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS MAPPED_BANKS       INTO #losingbanktemp       FROM VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE ex       WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ex.ORDER_ID)                   --Losing Bank count for FX       IF OBJECT_ID('tempdb..#losingbankcount', 'U') IS NOT NULL DROP TABLE #losingbankcount       SELECT DISTINCT        ex.[ORDER_ID],        COUNT(DISTINCT ex.[LOSING_BANK]) as LOSING_BANK_COUNT       INTO #losingbankcount       FROM #losing_bank_trades ex       GROUP BY ex.ORDER_ID                   IF OBJECT_ID('tempdb..#trades_orders', 'U') IS NOT NULL DROP TABLE #trades_orders       SELECT DISTINCT         ex.ORDER_ID,         CONVERT(VARCHAR(20), fxo.INSTRUCTION_TYPE) AS INSTRUCTION_TYPE,        CONVERT(VARCHAR(20), fxo.NR_LEG_PRODUCT) AS NR_LEG_PRODUCT,        CONVERT(VARCHAR(20), fxo.FR_LEG_PRODUCT) AS FR_LEG_PRODUCT       INTO #trades_orders       FROM VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE ex       --LEFT JOIN VISTA_REPORTING.dbo.FX_TRADES fxt on fxt.ORDER_ID = ex.ORDER_ID       LEFT JOIN VISTA_REPORTING.dbo.FX_ORDERS fxo ON fxo.[FXM_ORDER_ID] = ex.[ORDER_ID]       WHERE fxo.FXM_ORDER_ID = ex.ORDER_ID           AND ex.[DATA_SOURCE] = 'FX'          AND EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ex.ORDER_ID)                   --FX Concatonated fields       IF OBJECT_ID('tempdb..#conc_fx', 'U') IS NOT NULL DROP TABLE #conc_fx        SELECT DISTINCT        ex.[ORDER_ID],        INSTRUCTION_TYPE = STUFF((            SELECT ' | ' + INSTRUCTION_TYPE           FROM (SELECT DISTINCT ORDER_ID, INSTRUCTION_TYPE FROM #trades_orders) fxo           WHERE fxo.ORDER_ID = ex.[ORDER_ID]            ORDER BY INSTRUCTION_TYPE           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),        NR_LEG_PRODUCT = STUFF((            SELECT ' | ' + NR_LEG_PRODUCT           FROM (SELECT DISTINCT ORDER_ID, NR_LEG_PRODUCT FROM #trades_orders) fxo           WHERE fxo.ORDER_ID = ex.[ORDER_ID]            ORDER BY NR_LEG_PRODUCT           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),        FR_LEG_PRODUCT = STUFF((            SELECT ' | ' + FR_LEG_PRODUCT           FROM (SELECT DISTINCT ORDER_ID, FR_LEG_PRODUCT FROM #trades_orders) fxo           WHERE fxo.ORDER_ID = ex.[ORDER_ID]            ORDER BY FR_LEG_PRODUCT           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'')       INTO #conc_fx       FROM VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE ex       WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ex.ORDER_ID)                   IF OBJECT_ID('tempdb..#AL_trades_orders', 'U') IS NOT NULL DROP TABLE #AL_trades_orders       SELECT DISTINCT        ex.ORDER_ID,        t.TRD_COUNTERPARTY,        q.QUOTE_VALUE,        pl.BROKER       INTO #AL_trades_orders       FROM VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE ex       left join VISTA_REPORTING.dbo.TRADES t on ex.ORDER_ID = t.ORD_NUM       left join VISTA_REPORTING.dbo.QUOTES q on q.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]       left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on t.[ORD_NUM] = oc.[TRD_ORD]       left join VISTA_REPORTING.dbo.PM_ORDERS pm on oc.[PM_ORD] = pm.[ORD_NUM]       left join (SELECT DISTINCT ORD_NUM, [BROKER] FROM VISTA_REPORTING.dbo.PLACEMENTS) pl on pm.[ORD_NUM] = pl.[ORD_NUM]       WHERE ex.[DATA_SOURCE] = 'AL'           AND t.ORD_NUM = ex.ORDER_ID           AND q.[QUOTE_ORIGIN] = 'QUOTE'           AND pl.[BROKER] != q.[BROKER]          AND EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ex.ORDER_ID)                   --Losing Bank count for AL       IF OBJECT_ID('tempdb..#losingbankcount_al', 'U') IS NOT NULL DROP TABLE #losingbankcount_al       SELECT DISTINCT        [ORDER_ID],        COUNT(DISTINCT [BROKER]) as LOSING_BANK_COUNT       INTO #losingbankcount_al       FROM #AL_trades_orders       GROUP BY ORDER_ID                   --Losing Bank for AL       IF OBJECT_ID('tempdb..#losingquotetemp_al', 'U') IS NOT NULL DROP TABLE #losingquotetemp_al        SELECT DISTINCT        ex.[ORDER_ID],        TRD_COUNTERPARTY = STUFF((            SELECT ', ' + TRD_COUNTERPARTY           FROM (SELECT DISTINCT ORDER_ID, TRD_COUNTERPARTY FROM #AL_trades_orders) ato           WHERE ato.ORDER_ID = ex.ORDER_ID           ORDER BY TRD_COUNTERPARTY           FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''),        QUOTE_VALUE = STUFF((            SELECT ', ' + CAST(CONVERT(DECIMAL(38,8),ato.[QUOTE_VALUE]) AS varchar(50)) as QUOTE_VALUE           FROM (SELECT DISTINCT ORDER_ID, QUOTE_VALUE FROM #AL_trades_orders) ato           WHERE ato.ORDER_ID = ex.ORDER_ID           ORDER BY QUOTE_VALUE           FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '')       INTO #losingquotetemp_al       FROM VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE ex       WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ex.ORDER_ID)                   --Static Bank count for AL       IF OBJECT_ID('tempdb..#staticbankcount_al', 'U') IS NOT NULL DROP TABLE #staticbankcount_al       SELECT DISTINCT        ex.[ORDER_ID],        COUNT(DISTINCT pl.[BROKER]) as BROKER_COUNT       INTO #staticbankcount_al       FROM VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE ex       left join VISTA_REPORTING.dbo.TRADES t on ex.[ORDER_ID] = t.[ORD_NUM] and ex.[DATA_SOURCE] = 'AL'       left join VISTA_REPORTING.dbo.QUOTES q on q.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]       left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on t.[ORD_NUM] = oc.[TRD_ORD]       left join VISTA_REPORTING.dbo.PM_ORDERS pm on oc.[PM_ORD] = pm.[ORD_NUM]       left join (SELECT DISTINCT ORD_NUM, [BROKER] FROM VISTA_REPORTING.dbo.PLACEMENTS) pl on pm.[ORD_NUM] = pl.[ORD_NUM]       WHERE t.[ORD_NUM] = ex.[ORDER_ID]           AND q.[QUOTE_ORIGIN] = 'QUOTE'           AND ex.[DATA_SOURCE] = 'AL'          AND EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ex.ORDER_ID)       GROUP BY ex.[ORDER_ID]                   --Static Banks for AL       IF OBJECT_ID('tempdb..#staticbanktemp_al', 'U') IS NOT NULL DROP TABLE #staticbanktemp_al        SELECT DISTINCT        ex.[ORDER_ID],        TRD_COUNTERPARTY = STUFF((            SELECT ', ' + t.TRD_COUNTERPARTY           FROM VISTA_REPORTING.dbo.TRADES t           left join VISTA_REPORTING.dbo.QUOTES q           on q.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]           left join VISTA_REPORTING.dbo.ORDERS_CROSS oc           on t.[ORD_NUM] = oc.[TRD_ORD]           left join VISTA_REPORTING.dbo.PM_ORDERS pm           on oc.[PM_ORD] = pm.[ORD_NUM]           left join (SELECT DISTINCT ORD_NUM, [BROKER] FROM VISTA_REPORTING.dbo.PLACEMENTS) pl            on pm.[ORD_NUM] = pl.[ORD_NUM]           WHERE t.[ORD_NUM] = ex.[ORDER_ID] and q.[QUOTE_ORIGIN] = 'QUOTE' and ex.[DATA_SOURCE] = 'AL'           FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '')       INTO #staticbanktemp_al       FROM VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE ex       WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ex.ORDER_ID)                   IF OBJECT_ID('tempdb..#trader_name', 'U') IS NOT NULL DROP TABLE #trader_name       SELECT DISTINCT        fxt.TRADE_ID,        fxo.FXM_ORDER_ID,        coalesce(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) AS ACCEPTED_DEALER       INTO #trader_name       FROM VISTA_REPORTING.dbo.FX_ORDERS fxo       LEFT JOIN  Vista_Reporting.dbo.FX_TRADES fxt on fxt.[ORDER_ID] = fxo.[FXM_ORDER_ID]       left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd on tdd.[MG_USER_ID] = fxt.[DEALT_BY] AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)       left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2 on tdd.[MG_USER_ID] = fxt.[ACCEPTED_BY] AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)       left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd on CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)       WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = fxo.FXM_ORDER_ID)                   --Create Master table        IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table       SELECT DISTINCT        ex.[ORDER_ID] as ORDER_ID,        CASE         WHEN fxo.[ORD_NUM] IS NULL THEN ex.[ORDER_ID]        ELSE fxo.[ORD_NUM]        END AS PM_ORDER_ID,        fxo.[ALADDIN_COMMON_ID] as ALADDIN_COMMON_IDENTIFIER,        fxt.[TRADE_ID] as TRANSACTION_NUMBER,        fxo.[INSTRUCTION_RECEIVED_DATE_TIME] as ORDER_RECEIVED_DATE_TIME,        fxt.[MARKET_ARRIVAL_DATE_TIME],        fxt.[EXECUTED_DATE_TIME],        DATEDIFF(MINUTE,fxt.[MARKET_ARRIVAL_DATE_TIME],fxt.[EXECUTED_DATE_TIME]) as TIME_ELAPSED_BETWEEN_MARKET_ARRIVAL_AND_EXECUTED_DATE_TIME_MINS,        fxt.[EXECUTED_BANK],        --COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) as TRADER_NAME,        tn.ACCEPTED_DEALER AS TRADER_NAME,        fxo.[CLIENT_FUND],        fxo.[BASE_FUND],        fxo.[BUSINESS_GROUP],        (CAST(fxt.[EXECUTED_RATE] as varchar(50)) + ' | ' + CAST(fxt.[EXECUTED_RATE_FAR] as varchar(50))) as [ALL_IN_RATE],        (CAST(fxt.[SPOT_RATE] as varchar(50)) + ' | ' + CAST(fxt.[SPOT_RATE_FAR] as varchar(50))) as [SPOT_RATE],        (CAST(fxt.[FORWARD_POINTS] as varchar(50)) + ' | ' + CAST(fxt.[FORWARD_POINTS_FAR] as varchar(50))) as [FORWARD_POINTS],        fxt.[SWAP_POINTS],        (CAST(fxt.[MARKET_ARRIVAL_INDICATIVE_ALL_IN_NEAR_RATE] as varchar(50)) + ' | ' + CAST(fxt.[MARKET_ARRIVAL_INDICATIVE_ALL_IN_FAR_RATE] as varchar(50))) as [INDICATIVE_ALL_IN_PRICE_MARKET_ARRIVAL],        (CAST(fxt.[MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE] as varchar(50)) + ' | ' + CAST(fxt.[MARKET_ARRIVAL_INDICATIVE_SPOT_FAR_PRICE] as varchar(50))) as [INDICATIVE_SPOT_PRICE_MARKET_ARRIVAL],        (CAST(fxt.[MARKET_ARRIVAL_INDICATIVE_FORWARD_NEAR_POINTS] as varchar(50)) + ' | ' + CAST(fxt.[MARKET_ARRIVAL_INDICATIVE_FORWARD_FAR_POINTS] as varchar(50))) as [INDICATIVE_FORWARD_POINTS_MARKET_ARRIVAL],        fxt.[MARKET_ARRIVAL_INDICATIVE_PRICE_DATE_TIME],        spot_ref.[SPOT_TOLERANCE_THRESHOLD] as SPOT_THRESHOLD,        fxt.[SPOT_TOLERANCE_REASON] as OUT_OF_TOLERANCE_EXCEPTION_REASON,        fxt.[SPOT_TOLERANCE_REASON_NARRATION] as OUT_OF_TOLERANCE_EXCEPTION_REASON_NARRATION,        fxo.[CREATED_FROM] as ORDER_SOURCE,        fxt.[THREE_BANK_QUOTES_EXCEPTION_REASON] as NUMBER_OF_QUOTES_EXCEPTION_REASON,        fxt.[THREE_BANK_QUOTES_EXCEPTION_REASON_NARRATION] as NUMBER_OF_QUOTES_EXCEPTION_REASON_NARRATION,        lbc.[LOSING_BANK_COUNT] as LOSING_BANKS_COUNT,        lbt.[LOSING_BANK] as LOSING_BANKS,        lbt.[PROFIT_OR_LOSS] as LOSING_BANKS_PROFIT_OR_LOSS,        lbt.[ALL_IN_RATE] as LOSING_BANKS_ALL_IN_RATE,        lbt.[SWAP_POINTS] as LOSING_BANKS_SWAP_POINTS,        fxt.[MAPPED_BANK_COUNT] as STATIC_BANKS_COUNT,        lbt.[MAPPED_BANKS] as STATIC_BANKS,        fxt.[PRICE_REASON] as NWQ_REASON,        fxt.[PRICE_REASON_NARRATION] as NWQ_REASON_NARRATION,        fxt.[PROFIT_OR_LOSS],        fxo.[FM_COMMENTS],        fxo.[TRADE_PURPOSE],        fxo.[MARKER],        fxt.[TRADE_DATE],        fxo.[INSTRUCTION_STATUS],        cc_fx.[INSTRUCTION_TYPE],        (fxo.[ACTION1]  + ISNULL(' | ' + NULLIF(fxo.[ACTION2],''),'')) as [ACTION],         (fxo.[NOTIONAL_CCY] + ISNULL(' | ' + fxo.[NOTIONAL_CCY_FAR],'')) as [INSTRUCTED_CURRENCY],        (fxo.[BUY_CCY]  + ISNULL(' | ' + fxo.[BUY_CCY_LEG2],'')) as [BUY_CURRENCY],        (fxo.[SELL_CCY]  + ISNULL(' | ' + fxo.[SELL_CCY_LEG2],'')) as [SELL_CURRENCY],        (CAST(CAST(fxo.[NOTIONAL_AMOUNT] as decimal(38,2)) as varchar(50)) + ' | ' + CAST(CAST(fxo.[NOTIONAL_AMOUNT_FAR] as decimal(38,2)) as varchar(50))) as [INSTRUCTED_AMOUNT],        (CAST(fxo.[VALUE_DATE_NEAR] as varchar(50)) + ' | ' + CAST(fxo.[VALUE_DATE_FAR] as varchar(50))) as [VALUE_DATE],        (cc_fx.[NR_LEG_PRODUCT] + ISNULL(' | ' + cc_fx.[FR_LEG_PRODUCT],'')) as PRODUCT,        (CAST(fxt.[EXECUTED_AMOUNT] as varchar(50)) + ' | ' + CAST(fxt.[EXECUTED_AMOUNT_FAR] as varchar(50))) as [EXECUTED_AMOUNT],        fxo.[SWAP_TYPE],        fxo.[NET_EXPOSURE_ORDER] as NET_EXPOSURE,        (CAST(fxo.[FIXING_DATE] as varchar(50)) + ' | ' + CAST(fxo.[FIXING_DATE_LEG2] as varchar(50))) as [FIXING_DATE],        fxo.[TRADE_VENUE] as PLACEMENT_VENUE,        fxt.[EXC_SESSION_ID] as SESSION_ID,        fxt.[EXC_SESSION_TYPE] as SESSION_TYPE,        fxt.[ORDER_STRATEGY] as NETTING_STRATEGY_USED,        ex.[VG_17_CREATETIME] as CREATE_DATE,        ex.[VG_17] as EXCEPTION_FLAG,        ex.[DATA_SOURCE]       INTO #temp_final_master_table       FROM VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE ex       left join (SELECT DISTINCT fx_o.* FROM VISTA_REPORTING.dbo.FX_ORDERS fx_o            inner join #max_api_o mao             on fx_o.[FXM_ORDER_ID] = mao.[FXM_ORDER_ID] and fx_o.[API_REQUESTED_DATE] = mao.[MAX_API_DATE]) as fxo on ex.[ORDER_ID] = fxo.[FXM_ORDER_ID]       left join VISTA_REPORTING.dbo.FX_TRADES fxt on fxo.FXM_ORDER_ID = fxt.[ORDER_ID]       left join #trader_name tn ON tn.FXM_ORDER_ID = fxo.FXM_ORDER_ID       --left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd on tdd.[MG_USER_ID] = fxt.[DEALT_BY] AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)       --left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2 on tdd2.[MG_USER_ID] = fxt.[ACCEPTED_BY] AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)       --left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd on CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)       left join VISTA_STAGING.dbo.REF_FX_SPOT_TOLERANCE_THRESHOLD spot_ref on spot_ref.[BASE_CCY] = fxt.[BUY_CCY] and spot_ref.[CONTRA_CCY] = fxt.[SELL_CCY] AND CAST(fxt.[PULL_DATE] AS DATE) BETWEEN CAST(spot_ref.[DATE_FROM] AS DATE) AND CAST(spot_ref.[DATE_TO] AS DATE)       left join #losingbanktemp lbt on lbt.[ORDER_ID] = ex.[ORDER_ID]       left join #losingbankcount lbc on lbc.[ORDER_ID] = ex.[ORDER_ID]       left join #conc_fx cc_fx on cc_fx.[ORDER_ID] = ex.[ORDER_ID]       WHERE ex.[DATA_SOURCE] = 'FX'          AND EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ex.ORDER_ID)             UNION             SELECT DISTINCT        pm.[ORD_NUM] as [ORDER_ID],        pm.[ORD_NUM] as PM_ORDER_ID,        r.[REQUEST_ID] as [ALADDIN_COMMON_IDENTIFIER],        t.[MULTI_FUND_ID] as TRANSACTION_NUMBER,        pm.[AUTH_TIME] as [ORDER_RECEIVED_DATE_TIME],        t.[EXECUTION_TIME] as [MARKET_ARRIVAL_DATE_TIME],        t.[EXECUTION_TIME] as [EXECUTED_DATE_TIME],        DATEDIFF(MINUTE,t.[EXECUTION_TIME],t.[EXECUTION_TIME]) as TIME_ELAPSED_BETWEEN_MARKET_ARRIVAL_AND_EXECUTED_DATE_TIME_MINS,        pl.[BROKER] as EXECUTED_BANK,        COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) as [TRADER_NAME],        NULL as [CLIENT_FUND],        t.[PORTFOLIOS_PORTFOLIO_NAME] as [BASE_FUND],         CASE         WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP'         WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG'         WHEN (pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM'        ELSE NULL        END AS [BUSINESS_GROUP], --Guessing the logic is same as DMG?        CAST(COALESCE(pl.[AVG_PRICE],t.[FX_PRICE]) as varchar(50)) as [ALL_IN_RATE],        NULL as [SPOT_RATE], -- Given as Trades.FX_PRICE_SPOT        NULL as [FORWARD_POINTS],        NULL as [SWAP_POINTS],        NULL as [INDICATIVE_ALL_IN_PRICE_MARKET_ARRIVAL],        NULL as [INDICATIVE_SPOT_PRICE_MARKET_ARRIVAL],        NULL as [INDICATIVE_FORWARD_POINTS_MARKET_ARRIVAL],        NULL as [MARKET_ARRIVAL_INDICATIVE_PRICE_DATE_TIME],        NULL as [SPOT_THRESHOLD],        NULL as [OUT_OF_TOLERANCE_EXCEPTION_REASON],        NULL as [OUT_OF_TOLERANCE_EXCEPTION_REASON_NARRATION],        'Aladdin' as [ORDER_SOURCE], --N/A given as mapping field, using this as assumption (?)        t.[B3Q_RATIONALE] as [NUMBER_OF_QUOTES_EXCEPTION_REASON],        NULL as [NUMBER_OF_QUOTES_EXCEPTION_REASON_NARRATION],        lb_al.[LOSING_BANK_COUNT] as [LOSING_BANKS_COUNT], --need to do this        lq_al.[TRD_COUNTERPARTY] as LOSING_BANKS,        NULL as LOSING_BANKS_PROFIT_OR_LOSS,         NULL as LOSING_BANKS_ALL_IN_RATE, -- Given as Trades.TRDQUOTES_set        NULL as LOSING_BANKS_SWAP_POINTS,        sbc_al.[BROKER_COUNT] as STATIC_BANKS_COUNT,         sb_al.[TRD_COUNTERPARTY] as STATIC_BANKS,        t.[NWQ_RATIONALE] as [NWQ_REASON],        NULL as [NWQ_REASON_NARRATION],        NULL as [PROFIT_OR_LOSS],        pm.[COMMENTS_VALUE] as [FM_COMMENTS],        t.[TRD_PURPOSE] as [TRADE_PURPOSE],        NULL as [MARKER],        pm.[OPEN_DATE] as [TRADE_DATE],        pl.[STATUS] as [INSTRUCTION_STATUS],        pm.[SM_SEC_TYPE] as [INSTRUCTION_TYPE],        NULL as [ACTION],        CAST(t.[FX_PAY_CURR] as varchar(50)) as [INSTRUCTED_CURRENCY],        NULL as [BUY_CURRENCY],        NULL as [SELL_CURRENCY],        CAST(pl.[QUANTITY] as varchar(50)) as [INSTRUCTED_AMOUNT],        (CONVERT(VARCHAR(50),pm.[SETTLE_DATE]) + ISNULL(' | ' + CONVERT(VARCHAR(50),pm.[MATURITY]),'')) as [VALUE_DATE],        NULL as [PRODUCT],        CAST(pm.[FILL_AMT] as varchar(50)) as [EXECUTED_AMOUNT],        NULL as [SWAP_TYPE],        NULL as [NET_EXPOSURE],        NULL as [FIXING_DATE], --Given as Trades.SECURITY.SMARTCUT.FXNDF_ANNOUNCE_DATE        pl.[VENUE] as [PLACEMENT_VENUE],        NULL as [SESSION_ID],        NULL as [SESSION_TYPE],        NULL as [NETTING_STRATEGY_USED],        ex.[VG_17_CREATETIME] as [CREATE_DATE],        ex.[VG_17] as [EXCEPTION_FLAG],        ex.[DATA_SOURCE]       FROM VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE ex       left join VISTA_REPORTING.dbo.PM_ORDERS pm on ex.[ORDER_ID] = pm.[ORD_NUM]       inner join #max_touch_pm mtt on pm.[ORD_NUM] = mtt.[ORD_NUM] and pm.[TOUCH_COUNT] = mtt.[MAX_TOUCH]       left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on pm.[ORD_NUM] = oc.[PM_ORD]       left join VISTA_REPORTING.dbo.TRADES t on ex.[ORDER_ID] = t.[ORD_NUM]       left join #losingquotetemp_al lq_al on ex.[ORDER_ID] = lq_al.[ORDER_ID]       left join #losingbankcount_al lb_al on ex.[ORDER_ID] = lb_al.[ORDER_ID]        left join #staticbankcount_al sbc_al on ex.[ORDER_ID] = sbc_al.[ORDER_ID]        left join #staticbanktemp_al sb_al on ex.[ORDER_ID] = sb_al.[ORDER_ID]        left join (SELECT DISTINCT FUND_ID, PORTFOLIO_GROUP_NAME FROM VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY) pgt on t.[FUND] = pgt.[FUND_ID]       left join (SELECT DISTINCT ORD_NUM, PLACEMENT_NUM, [STATUS], QUANTITY, [BROKER], AVG_PRICE, VENUE FROM VISTA_REPORTING.dbo.PLACEMENTS) pl on pm.[ORD_NUM] = pl.[ORD_NUM]       left join (SELECT PLACEMENT_NUM, REQUEST_ID FROM VISTA_STAGING.dbo.REQUEST_LOOKUP) r on pl.[PLACEMENT_NUM] = r.[PLACEMENT_NUM]       left join VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd on tdd.[MG_USER_ID]  = t.[TRD_TRADER] AND CAST(t.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)       left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2 on tdd2.[INITIALS] = pm.[TRADER] AND CAST(pm.[PULL_DATE] AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)       left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd on CAST(COALESCE(t.[PULL_DATE],pm.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)       WHERE ex.[DATA_SOURCE] = 'AL'          AND EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ex.ORDER_ID)                   IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_FX_TABLE', 'U') IS NOT NULL       DELETE FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_FX_TABLE       WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ORDER_ID)                   IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_FX_TABLE', 'U') IS NOT NULL       INSERT INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_FX_TABLE       SELECT *       FROM #temp_final_master_table             ELSE             SELECT *       INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_FX_TABLE       FROM #temp_final_master_table                   IF OBJECT_ID('tempdb..#max_api_o', 'U') IS NOT NULL DROP TABLE #max_api_o       IF OBJECT_ID('tempdb..#max_touch_pm', 'U') IS NOT NULL DROP TABLE #max_touch_pm       IF OBJECT_ID('tempdb..#losingbanktemp', 'U') IS NOT NULL DROP TABLE #losingbanktemp       IF OBJECT_ID('tempdb..#losingbankcount', 'U') IS NOT NULL DROP TABLE #losingbankcount       IF OBJECT_ID('tempdb..#conc_fx', 'U') IS NOT NULL DROP TABLE #conc_fx       IF OBJECT_ID('tempdb..#losingbankcount_al', 'U') IS NOT NULL DROP TABLE #losingbankcount_al       IF OBJECT_ID('tempdb..#losingquotetemp_al', 'U') IS NOT NULL DROP TABLE #losingquotetemp_al       IF OBJECT_ID('tempdb..#staticbankcount_al', 'U') IS NOT NULL DROP TABLE #staticbankcount_al       IF OBJECT_ID('tempdb..#staticbanktemp_al', 'U') IS NOT NULL DROP TABLE #staticbanktemp_al       IF OBJECT_ID('tempdb..#losing_bank_trades', 'U') IS NOT NULL DROP TABLE #losing_bank_trades       IF OBJECT_ID('tempdb..#mapped_bank_best_ex', 'U') IS NOT NULL DROP TABLE #mapped_bank_best_ex       IF OBJECT_ID('tempdb..#trades_orders', 'U') IS NOT NULL DROP TABLE #trades_orders       IF OBJECT_ID('tempdb..#AL_trades_orders', 'U') IS NOT NULL DROP TABLE #AL_trades_orders       IF OBJECT_ID('tempdb..#losingbankcount_al', 'U') IS NOT NULL DROP TABLE #losingbankcount_al       IF OBJECT_ID('tempdb..#losingquotetemp_al', 'U') IS NOT NULL DROP TABLE #losingquotetemp_al        IF OBJECT_ID('tempdb..#trader_name', 'U') IS NOT NULL DROP TABLE #trader_name       IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table       IF OBJECT_ID('tempdb..#distinct_ids_al', 'U') IS NOT NULL DROP TABLE #distinct_ids_al       IF OBJECT_ID('tempdb..#distinct_ids_fx', 'U') IS NOT NULL DROP TABLE #distinct_ids_fx       IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE  #distinct_ids                   IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                    WHERE name = N'mmf_vg17_fx_idx1')             DROP INDEX mmf_vg17_fx_idx1        ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_FX_TABLE              CREATE NONCLUSTERED INDEX mmf_vg17_fx_idx1       ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_FX_TABLE        (ORDER_ID)                   IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                    WHERE name = N'mmf_vg17_fx_idx2')             DROP INDEX mmf_vg17_fx_idx2        ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_FX_TABLE              CREATE NONCLUSTERED INDEX mmf_vg17_fx_idx2       ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_FX_TABLE        (ORDER_RECEIVED_DATE_TIME)                   IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                    WHERE name = N'mmf_vg17_fx_idx3')             DROP INDEX mmf_vg17_fx_idx3        ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_FX_TABLE              CREATE NONCLUSTERED INDEX mmf_vg17_fx_idx3       ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_FX_TABLE        (TRADER_NAME)                    IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                    WHERE name = N'mmf_vg17_fx_idx4')             DROP INDEX mmf_vg17_fx_idx4        ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_FX_TABLE              CREATE NONCLUSTERED INDEX mmf_vg17_fx_idx4       ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_FX_TABLE        (CREATE_DATE)                    IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                    WHERE name = N'mmf_vg17_fx_idx5')             DROP INDEX mmf_vg17_fx_idx5       ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_FX_TABLE              CREATE NONCLUSTERED INDEX mmf_vg17_fx_idx5       ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_FX_TABLE        (EXCEPTION_FLAG)                   IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL       INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(       'MASTER_PM_ORDER_VG_17_COUNTERPARTY_DIRECTION_FX_TABLE', --TABLE_NAME       @START_TIME, --START_TIME       GETDATE(), --END_TIME       DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS       CAST(GETDATE() as date)) --COMPLETION_DATE                        END            --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_PM_ORDER_TABLE_VG_500_DEALER_LIMIT_FX  CreateDate: 2025-06-26 18:02:14.460  ModifyDate: 2025-06-26 18:02:14.460  --- DEFINITION START ---  -- =============================================    -- Author:  <Samad, Mehreen>    -- Create date: <08/07/2019>    -- Description:     -- <Master exception table for Dealer Limit    -- Exception test for FX.>    -- =============================================        -- ***************VERSION CONTROL***************        -- *********************************************        CREATE PROCEDURE [dbo].[MASTER_PM_ORDER_TABLE_VG_500_DEALER_LIMIT_FX]     -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,         AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;              DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()             IF OBJECT_ID('tempdb..#distinct_ids_al', 'U') IS NOT NULL DROP TABLE #distinct_ids_al     SELECT DISTINCT       pr.ORD_NUM as TRD_ORD,      oc.PM_ORD AS ORD_NUM,      pr.MULTI_FUND_ID     INTO #distinct_ids_al     FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = pr.ORD_NUM     WHERE pr.DEALING_DESK = 'FX'             IF OBJECT_ID('tempdb..#distinct_ids_fx', 'U') IS NOT NULL DROP TABLE #distinct_ids_fx     SELECT DISTINCT      fxt.ORDER_ID AS TRD_ORD,      vg.ORDER_ID,      fxt.TRADE_ID AS MULTI_FUND_ID      INTO #distinct_ids_fx     FROM Vista_Staging.dbo.VG_500_DEALER_LIMIT_FX_TABLE vg     LEFT JOIN Vista_Reporting.dbo.FX_ORDERS fxo ON fxo.FXM_ORDER_ID = vg.ORDER_ID     LEFT JOIN Vista_Reporting.dbo.FX_TRADES fxt ON fxt.ORDER_ID = fxo.FXM_ORDER_ID               IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE', 'U') IS NOT NULL     DELETE FROM #distinct_ids_fx where NOT EXISTS (SELECT DISTINCT od.FXM_ORDER_ID                   FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_FX od                   WHERE od.FXM_ORDER_ID = #distinct_ids_fx.ORDER_ID)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE', 'U') IS NOT NULL     DELETE FROM #distinct_ids_al where NOT EXISTS (SELECT DISTINCT od.PM_ORD                   FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                   WHERE od.PM_ORD = #distinct_ids_al.ORD_NUM)             IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE  #distinct_ids     SELECT *      INTO #distinct_ids     FROM #distinct_ids_al         UNION ALL         SELECT *      FROM #distinct_ids_fx             IF OBJECT_ID('tempdb..#max_touch_pm', 'U') IS NOT NULL DROP TABLE #max_touch_pm     SELECT        pm.ORD_NUM,       MAX(pm.TOUCH_COUNT) as MAX_TOUCH      INTO #max_touch_pm     FROM VISTA_REPORTING.dbo.PM_ORDERS pm     WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = pm.ORD_NUM)     GROUP BY pm.ORD_NUM             IF OBJECT_ID('tempdb..#max_touch_t', 'U') IS NOT NULL DROP TABLE #max_touch_t     SELECT        t.MULTI_FUND_ID,       MAX(t.TOUCH_COUNT) as MAX_TOUCH      INTO #max_touch_t     FROM VISTA_REPORTING.dbo.TRADES t     WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)     GROUP BY MULTI_FUND_ID             IF OBJECT_ID('tempdb..#max_touch_fxo', 'U') IS NOT NULL DROP TABLE #max_touch_fxo     SELECT        fxo.FXM_ORDER_ID,       MAX(fxo.API_REQUESTED_DATE) as MAX_API_REQUESTED_DATE      INTO #max_touch_fxo     FROM VISTA_REPORTING.dbo.FX_ORDERS fxo     WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = fxo.FXM_ORDER_ID)     GROUP BY FXM_ORDER_ID             IF OBJECT_ID('tempdb..#max_touch_fxt', 'U') IS NOT NULL DROP TABLE #max_touch_fxt     SELECT        fxt.ORDER_ID,       MAX(fxt.API_REQUESTED_DATE) as MAX_API_REQUESTED_DATE      INTO #max_touch_fxt     FROM VISTA_REPORTING.dbo.FX_TRADES fxt     WHERE EXISTS (SELECT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = fxt.ORDER_ID)     GROUP BY ORDER_ID             IF OBJECT_ID('tempdb..#order_pop', 'U') IS NOT NULL DROP TABLE #order_pop     SELECT DISTINCT      fxo.FXM_ORDER_ID      ,fxo.INSTRUCTION_TYPE      ,fxo.NR_LEG_PRODUCT      ,fxo.[INSTRUCTION_RECEIVED_DATE_TIME]      ,fxo.[NOTIONAL_AMOUNT_GBP]      ,fxo.[INSTRUCTION_STATUS]      ,fxo.[CLIENT_FUND]      ,fxo.[BASE_FUND]      ,fxo.[FR_LEG_PRODUCT]      ,fxo.[ACTION1]      ,fxo.[ACTION2]      ,fxo.[NOTIONAL_CCY]      ,fxo.[NOTIONAL_CCY_FAR]      ,fxo.[BUY_CCY]      ,fxo.[BUY_CCY_LEG2]      ,fxo.[SELL_CCY]      ,fxo.[SELL_CCY_LEG2]      ,fxo.[NOTIONAL_AMOUNT]      ,fxo.[NOTIONAL_AMOUNT_FAR]      ,fxo.[NOTIONAL_AMOUNT_GBP_FAR]      ,fxo.[VALUE_DATE_NEAR]      ,fxo.[VALUE_DATE_FAR]      ,fxo.[SWAP_TYPE]      ,fxo.[PM]      ,fxo.[INSTRUCTED_BY]      ,fxo.[CREATED_FROM]      ,fxo.[FM_COMMENTS]      ,fxo.[TRADE_PURPOSE]      ,fxo.[MARKER]      ,fxo.[BUSINESS_GROUP]      ,fxo.[TRADE_VENUE]      ,fxo.[ORD_NUM]      ,fxo.[ALADDIN_COMMON_ID]      ,fxo.[AUTH_TIME]      ,fxo.[NET_EXPOSURE_ORDER]      ,fxo.PULL_DATE     INTO #order_pop     FROM VISTA_REPORTING.dbo.FX_ORDERS fxo      inner join #max_touch_fxo mtf on mtf.[FXM_ORDER_ID] = fxo.[FXM_ORDER_ID] and mtf.[MAX_API_REQUESTED_DATE] = fxo.[API_REQUESTED_DATE]     WHERE EXISTS (SELECT vg.ORDER_ID FROM Vista_Staging.dbo.VG_500_DEALER_LIMIT_FX_TABLE vg WHERE vg.ORDER_ID = fxo.FXM_ORDER_ID)             IF OBJECT_ID('tempdb..#trades_pop', 'U') IS NOT NULL DROP TABLE #trades_pop     SELECT DISTINCT      fxt.[DEALER_SPOT_LIMIT],      fxt.[DEALER_FORWARD_LIMIT],      fxt.[DEALER_NDF_LIMIT],      fxt.[APPROVER_SPOT_LIMIT],      fxt.[APPROVER_FORWARD_LIMIT],      fxt.[APPROVER_NDF_LIMIT],      fxt.[APPROVAL_DATE_TIME],      fxt.[APPROVED_BY],      fxt.IS_DEALER_LIMIT_BREACHED,      fxt.[TRADE_DATE],      fxt.[EXECUTED_AMOUNT],      fxt.[EXECUTED_AMOUNT_FAR],      fxt.[FIXING_DATE],      fxt.[FIXING_DATE_LEG2],      fxt.[EXECUTED_BANK],      fxt.[EXECUTED_DATE_TIME],      fxt.[EXECUTED_RATE],      fxt.[FORWARD_POINTS],      fxt.[SPOT_RATE],      fxt.[EXECUTED_RATE_FAR],      fxt.[FORWARD_POINTS_FAR],      fxt.[SPOT_RATE_FAR],      fxt.[SWAP_POINTS],      fxt.API_REQUESTED_DATE,      fxt.ORDER_ID,      fxt.[PULL_DATE],      fxt.[DEALT_BY],      fxt.[ACCEPTED_BY],      NULL AS BASE_FUND,      NULL AS AL_INSTRUCTED_CCY,      NULL AS TRD_PURPOSE      --fxt.TRADE_ID     INTO #trades_pop     FROM VISTA_REPORTING.dbo.FX_TRADES fxt     inner join #max_touch_fxt mtt on mtt.ORDER_ID = fxt.ORDER_ID and mtt.MAX_API_REQUESTED_DATE = fxt.API_REQUESTED_DATE     WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = fxt.TRADE_ID)         UNION          SELECT DISTINCT      NULL,      NULL,      NULL,      NULL,      NULL,      NULL,      NULL,      NULL,      NULL,      NULL,      NULL,      NULL,      NULL,      NULL,      t.TRD_COUNTERPARTY,      t.EXECUTION_TIME,      NULL,      NULL,      NULL,      NULL,      NULL,      NULL,      NULL,      NULL,      oc.PM_ORD,      t.[PULL_DATE],      t.[TRD_TRADER],      NULL,      t.PORTFOLIOS_PORTFOLIO_NAME,      t.FX_PAY_CURR,      t.TRD_PURPOSE      --t.MULTI_FUND_ID     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = t.ORD_NUM     INNER JOIN #max_touch_t mtt ON mtt.MULTI_FUND_ID = t.MULTI_FUND_ID AND mtt.MAX_TOUCH = t.TOUCH_COUNT     WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)             --FX Concatenated fields     IF OBJECT_ID('tempdb..#conc_fx', 'U') IS NOT NULL DROP TABLE #conc_fx      SELECT DISTINCT      ex.[ORDER_ID],      STUFF((SELECT DISTINCT ' | ' + FORMAT(CONVERT(DECIMAL(38,2),fxt.DEALER_SPOT_LIMIT),'#,0.00')        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS DEALER_SPOT_LIMIT,      STUFF((SELECT DISTINCT ' | ' + FORMAT(CONVERT(DECIMAL(38,2),fxt.DEALER_FORWARD_LIMIT),'#,0.00')        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS DEALER_FORWARD_LIMIT,      STUFF((SELECT DISTINCT ' | ' + FORMAT(CONVERT(DECIMAL(38,2),fxt.DEALER_NDF_LIMIT),'#,0.00')        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS DEALER_NDF_LIMIT,      STUFF((SELECT DISTINCT ' | ' + FORMAT(CONVERT(DECIMAL(38,2),fxt.APPROVER_SPOT_LIMIT),'#,0.00')        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS APPROVER_SPOT_LIMIT,      STUFF((SELECT DISTINCT ' | ' + FORMAT(CONVERT(DECIMAL(38,2),fxt.[APPROVER_FORWARD_LIMIT]),'#,0.00')        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS APPROVER_FORWARD_LIMIT,      STUFF((SELECT DISTINCT ' | ' + FORMAT(CONVERT(DECIMAL(38,2),fxt.[APPROVER_NDF_LIMIT]),'#,0.00')        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS APPROVER_NDF_LIMIT,      STUFF((SELECT DISTINCT ' | ' + FORMAT(fxt.[APPROVAL_DATE_TIME],'dd/MM/yyyy HH:mm:ss')        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS APPROVAL_DATE_TIME,      STUFF((SELECT DISTINCT ' | ' + fxt.APPROVED_BY        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS APPROVED_BY,      --STUFF((SELECT DISTINCT ' | ' + fxt.IS_DEALER_LIMIT_BREACHED      --  FROM #trades_pop fxt      --  WHERE fxt.ORDER_ID = ex.[ORDER_ID]      --  FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS DEALER_LIMIT_BREACHED_STATUS,      STUFF((SELECT DISTINCT ' | ' + CAST(fxt.IS_DEALER_LIMIT_BREACHED AS VARCHAR)        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS DEALER_LIMIT_BREACHED_STATUS,      STUFF((SELECT DISTINCT ' | ' + FORMAT(fxt.[TRADE_DATE],'dd/MM/yyyy HH:mm:ss')        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS TRADE_DATE,      STUFF((SELECT DISTINCT ' | ' + fxt.EXECUTED_BANK        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS EXECUTED_BANK,      STUFF((SELECT DISTINCT ' | ' + FORMAT(fxt.[EXECUTED_DATE_TIME],'dd/MM/yyyy HH:mm:ss')        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS EXECUTED_DATE_TIME,      STUFF((SELECT DISTINCT ' | ' + CAST(fxt.SWAP_POINTS AS VARCHAR)        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS SWAP_POINTS,      STUFF((SELECT DISTINCT ' | ' + fxt.AL_INSTRUCTED_CCY        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS AL_INSTRUCTED_CCY,      STUFF((SELECT DISTINCT ' | ' + (FORMAT(CONVERT(DECIMAL(38,2), fxt.[EXECUTED_AMOUNT]),'#,0.00') + ISNULL(' / ' + FORMAT(CONVERT(DECIMAL(38,2),fxt.[EXECUTED_AMOUNT_FAR]),'#,0.00'),''))        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS [EXECUTED_AMOUNT],      STUFF((SELECT DISTINCT ' | ' + (CAST(FORMAT(fxt.[FIXING_DATE],'dd/MM/yyyy') as varchar(50))   + ISNULL(' / ' + CAST(FORMAT(fxt.[FIXING_DATE_LEG2],'dd/MM/yyyy') as varchar(50)),''))        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS [FIXING_DATE],      STUFF((SELECT DISTINCT ' | ' + (CAST(fxt.[EXECUTED_RATE] as varchar(50)) + ISNULL(' / ' + CAST(fxt.[EXECUTED_RATE_FAR] as varchar(50)),''))        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS [ALL_IN_RATE],      STUFF((SELECT DISTINCT ' | ' + (CAST(fxt.[FORWARD_POINTS] as varchar(50)) + ISNULL(' / ' + CAST(fxt.[FORWARD_POINTS_FAR] as varchar(50)),''))        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS [FORWARD_POINTS],      STUFF((SELECT DISTINCT ' | ' + (CAST(fxt.[SPOT_RATE] as varchar(50))  + ISNULL(' / ' + CAST(fxt.[SPOT_RATE_FAR] as varchar(50)),''))        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS [SPOT_RATE],      STUFF((SELECT DISTINCT ' | ' + fxt.BASE_FUND        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS BASE_FUND,      STUFF((SELECT DISTINCT ' | ' + fxt.AL_INSTRUCTED_CCY        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS INSTRUCTED_CURRENCY,      STUFF((SELECT DISTINCT ' | ' + fxt.TRD_PURPOSE        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS TRADE_PURPOSE         INTO #conc_fx     FROM VISTA_STAGING.dbo.VG_500_DEALER_LIMIT_FX_TABLE ex     WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ex.ORDER_ID)             --Create Master table      IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     SELECT DISTINCT      COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) as DEALER_NAME,      FORMAT(fxo.[INSTRUCTION_RECEIVED_DATE_TIME],'dd/MM/yyyy HH:mm:ss') as ORDER_RECEIVED_DATE_TIME,      (CAST(FORMAT(CAST(fxo.[NOTIONAL_AMOUNT_GBP] as decimal(38,2)),'#,0.00') as varchar(50)) + ISNULL(' | ' + CAST(FORMAT(CAST(fxo.[NOTIONAL_AMOUNT_GBP_FAR] as decimal(38,2)),'#,0.00') as varchar(50)),'')) as [GBP_EQUIVALENT_AMOUNT],      cc_fx.DEALER_SPOT_LIMIT,      cc_fx.DEALER_FORWARD_LIMIT,      cc_fx.DEALER_NDF_LIMIT,      cc_fx.[APPROVED_BY],      cc_fx.APPROVER_SPOT_LIMIT,      cc_fx.APPROVER_FORWARD_LIMIT,      cc_fx.APPROVER_NDF_LIMIT,      cc_fx.APPROVAL_DATE_TIME,      NULL as PM_ORDER_STATUS,      fxo.[INSTRUCTION_STATUS],      cc_fx.DEALER_LIMIT_BREACHED_STATUS,      fxo.[CLIENT_FUND],      fxo.[BASE_FUND],      fxo.[INSTRUCTION_TYPE] as PRODUCT,      (fxo.[NR_LEG_PRODUCT] + ISNULL(' | ' + fxo.[FR_LEG_PRODUCT],'')) as FXM_PRODUCT,      (fxo.[ACTION1]   + ISNULL(' | ' + NULLIF(fxo.[ACTION2],''),'')) as [ACTION],       (fxo.[NOTIONAL_CCY]  + ISNULL(' | ' + fxo.[NOTIONAL_CCY_FAR],'')) as [INSTRUCTED_CURRENCY],      (fxo.[BUY_CCY]   + ISNULL(' | ' + fxo.[BUY_CCY_LEG2],'')) as [BUY_CURRENCY],      (fxo.[SELL_CCY]   + ISNULL(' | ' + fxo.[SELL_CCY_LEG2],'')) as [SELL_CURRENCY],      (CAST(FORMAT(CONVERT(DECIMAL(38,2),fxo.[NOTIONAL_AMOUNT]),'#,0.00') as varchar(50)) + ISNULL(' | ' + CAST(FORMAT(CONVERT(DECIMAL(38,2),fxo.[NOTIONAL_AMOUNT_FAR]),'#,0.00') as varchar(50)),'')) as [INSTRUCTED_AMOUNT],      cc_fx.TRADE_DATE,      (CAST(FORMAT(fxo.[VALUE_DATE_NEAR],'dd/MM/yyyy HH:mm:ss') as varchar(50)) + ISNULL(' | ' + CAST(FORMAT(fxo.[VALUE_DATE_FAR],'dd/MM/yyyy HH:mm:ss') as varchar(50)),'')) as [VALUE_DATE],      cc_fx.[EXECUTED_AMOUNT],      fxo.[SWAP_TYPE],      FORMAT(CONVERT(DECIMAL(38,2),fxo.[NET_EXPOSURE_ORDER]),'#,0.00') as NET_EXPOSURE,      COALESCE(fxo.[PM],fxo.[INSTRUCTED_BY]) as INSTRUCTED_BY,      fxo.[CREATED_FROM] as ORDER_SOURCE,      fxo.[FM_COMMENTS],      fxo.[TRADE_PURPOSE],      fxo.[MARKER],      cc_fx.[FIXING_DATE],      fxo.[BUSINESS_GROUP],      fxo.[TRADE_VENUE] as PLACEMENT_VENUE,      cc_fx.[EXECUTED_BANK],      cc_fx.EXECUTED_DATE_TIME,      cc_fx.[ALL_IN_RATE],      cc_fx.[FORWARD_POINTS],      cc_fx.[SPOT_RATE],      cc_fx.[SWAP_POINTS],      ex.[ORDER_ID],      CASE       WHEN fxo.[ORD_NUM] IS NULL THEN ex.[ORDER_ID]      ELSE fxo.[ORD_NUM]      END AS PM_ORDER_ID,      fxo.[ALADDIN_COMMON_ID] as ALADDIN_COMMON_IDENTIFIER,      FORMAT(fxo.[AUTH_TIME],'dd/MM/yyyy HH:mm:ss') as AUTHORISED_DATE_TIME,      ex.[EXCEPTION_FLAG_CREATETIME] as CREATE_DATE,      ex.[VG_500] as EXCEPTION_FLAG,      ex.[SOURCE] as [DATA_SOURCE],      fxo.[INSTRUCTION_RECEIVED_DATE_TIME] as OS_ORDER_RECEIVED_DATE_TIME     INTO #temp_final_master_table     FROM VISTA_STAGING.dbo.VG_500_DEALER_LIMIT_FX_TABLE ex     left join #order_pop fxo on fxo.[FXM_ORDER_ID] = ex.[ORDER_ID]     left join #trades_pop fxt ON fxt.[ORDER_ID] = fxo.[FXM_ORDER_ID]     left join #conc_fx cc_fx on cc_fx.[ORDER_ID] = ex.[ORDER_ID]      left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd on tdd.[MG_USER_ID] = fxt.[DEALT_BY]                      AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE)                                       AND CAST(tdd.[DATE_TO] AS DATE)     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2 on tdd.[MG_USER_ID] = fxt.[ACCEPTED_BY]                      AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE)                                       AND CAST(tdd2.[DATE_TO] AS DATE)     left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd on dd.[REPORT_NAME] = 'Dealer Limit'                      AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE)                                       AND CAST(dd.[DATE_TO] AS DATE)     WHERE ex.SOURCE = 'FX' AND EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ex.ORDER_ID)         UNION          SELECT DISTINCT       COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) as DEALER_NAME      ,FORMAT(PMO.AUTH_TIME,'dd/MM/yyyy HH:mm:ss') AS ORDER_RECEIVED_DATETIME      ,NULL as GBP_EQUIVALENT_AMOUNT --IT JUST SAYS VISTA IN SPREADSHEET SO FIGURE OUT HOW TO DO THIS      ,NULL as DEALER_SPOT_LIMIT      ,NULL as DEALER_FORWARD_LIMIT      ,NULL as DEALER_NDF_LIMIT      ,NULL as APPROVED_BY      ,NULL as APPROVER_SPOT_LIMIT      ,NULL as APPROVER_FORWARD_LIMIT      ,NULL as APPROVER_NDF_LIMIT      ,NULL as APPROVAL_DATE_TIME      ,PMO.status as PM_ORDER_STATUS      ,PLA.STATUS as INSTRUCTION_STATUS      ,NULL as DEALER_LIMIT_BREACHED_STATUS      ,NULL AS CLIENT_FUND      ,cc_fx.BASE_FUND      ,PMO.SM_SEC_TYPE as PRODUCT      ,PMO.SM_SEC_TYPE as FXM_PRODUCT      ,NULL as ACTION      ,cc_fx.AL_INSTRUCTED_CCY as INSTRUCTED_CURRENCY      ,NULL as BUY_CURRENCY      ,NULL as SELL_CURRENCY      ,cast(FORMAT(PLA.QUANTITY,'#,0.00') as varchar(50)) as INSTRUCTED_AMOUNT      ,FORMAT(PMO.OPEN_DATE,'dd/MM/yyyy HH:mm:ss') as TRADE_DATE      ,cast(COALESCE(FORMAT(PMO.SETTLE_DATE,'dd/MM/yyyy HH:mm:ss'),FORMAT(PMO.MATURITY,'dd/MM/yyyy HH:mm:ss')) as varchar(50)) as VALUE_DATE       ,cast(FORMAT(PMO.FILL_AMT,'#,0.00') as varchar(50)) as EXECUTED_AMOUNT      ,NULL AS SWAP_TYPE      ,NULL AS NET_EXPOSURE      ,PMO.[PM] as INSTRUCTED_BY       ,'Aladdin' as ORDER_SOURCE      ,PMO.COMMENTS_VALUE as FM_COMMENTS      ,cc_fx.TRADE_PURPOSE      ,NULL AS MARKER      ,NULL as FIXING_DATE      ,CASE       WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP'       WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG'       WHEN (pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM'      ELSE NULL      END AS [BUSINESS_GROUP]      ,PLA.VENUE as PLACEMENT_VENUE      ,PLA.[BROKER] as EXECUTED_BANK      ,FORMAT(TRD.execution_Time,'dd/MM/yyyy HH:mm:ss') as EXECUTED_DATE_TIME      ,NULL as ALL_IN_RATE --Trades.TRDQUOTES_set is what it says on the mapping sheet      ,NULL AS FORWARD_POINTS      ,NULL as SPOT_RATE --Trades.TRDQUOTES_set is what it says on the mapping sheet      ,NULL as SWAP_POINTS      ,cast(PMO.ORD_NUM as varchar(50)) as ORDER_ID      ,cast(PMO.ORD_NUM as varchar(50)) as PM_ORDER_ID      ,cast(REQ.REQUEST_ID as varchar(50)) as ALADDIN_COMMON_IDENTIFIER      ,FORMAT(PMO.AUTH_TIME,'dd/MM/yyyy HH:mm:ss') as AUTHORISED_DATE_TIME      ,EX.EXCEPTION_FLAG_CREATETIME as CREATE_DATE      ,EX.VG_500 as EXCEPTION_FLAG      ,EX.SOURCE AS DATA_SOURCE      ,PMO.AUTH_TIME as OS_ORDER_RECEIVED_DATE_TIME     FROM VISTA_STAGING.DBO.VG_500_DEALER_LIMIT_FX_TABLE EX     left join #conc_fx cc_fx ON cc_fx.ORDER_ID = ex.ORDER_ID     left join (SELECT DISTINCT         PMO.ORD_NUM,        PMO.AUTH_TIME,        PMO.STATUS,        PMO.PM,        PMO.ACTIVE_TIME,        PMO.TRADER,        PMO.COMMENTS_VALUE,        PMO.OPEN_DATE,        PMO.SETTLE_DATE,        PMO.MATURITY,        PMO.SM_SEC_TYPE,        PMO.FILL_AMT,        PMO.[PULL_DATE]        from VISTA_REPORTING.dbo.PM_ORDERS PMO         inner join #max_touch_pm mtp on mtp.ORD_NUM = PMO.ORD_NUM and mtp.[MAX_TOUCH] = PMO.TOUCH_COUNT) PMO on PMO.ORD_NUM = EX.ORDER_ID     left join (SELECT         ORD_NUM,         PLACEMENT_NUM,        STATUS,        QUANTITY,        BROKER,        VENUE        from VISTA_REPORTING.dbo.PLACEMENTS) PLA on PLA.ORD_NUM = PMO.ORD_NUM     left join (SELECT         PLACEMENT_NUM,         REQUEST_ID        FROM VISTA_STAGING.dbo.REQUEST_LOOKUP) REQ      on REQ.PLACEMENT_NUM = PLA.PLACEMENT_NUM     left join VISTA_REPORTING.dbo.ORDERS_CROSS OC on OC.PM_ORD = PMO.ORD_NUM     left join (SELECT        TRD.MULTI_FUND_ID,        TRD.EXECUTION_TIME,        TRD.ORD_NUM,        TRD.TRD_STATUS,        TRD.TRD_TRADER,        TRD.[PORTFOLIOS_PORTFOLIO_NAME],        TRD.FUND,        TRD.TRD_PURPOSE,        TRD.FX_PAY_CURR,        TRD.[PULL_DATE]        FROM VISTA_REPORTING.dbo.TRADES TRD        inner join #max_touch_t mtt on mtt.MULTI_FUND_ID = TRD.MULTI_FUND_ID and mtt.MAX_TOUCH = TRD.TOUCH_COUNT) TRD on TRD.ORD_NUM = OC.TRD_ORD     left join (SELECT DISTINCT FUND_ID, PORTFOLIO_GROUP_NAME FROM VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY) pgt on TRD.[FUND] = pgt.[FUND_ID]     left join VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd on tdd.[INITIALS] = trd.[TRD_TRADER]                      AND CAST(trd.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE)                               AND CAST(tdd.[DATE_TO] AS DATE)     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2 on tdd.[INITIALS] = pmo.[TRADER]                      AND CAST(pmo.[PULL_DATE] AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE)                               AND CAST(tdd2.[DATE_TO] AS DATE)     left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd on dd.[REPORT_NAME] = 'Dealer Limit'                      AND CAST(COALESCE(trd.[PULL_DATE],pmo.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE)                               AND CAST(dd.[DATE_TO] AS DATE)     WHERE EX.SOURCE = 'AL' AND EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ex.ORDER_ID)              IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE', 'U') IS NOT NULL     DELETE FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE     WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM=ORDER_ID)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE     SELECT *     FROM #temp_final_master_table         ELSE         SELECT *     INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE     FROM #temp_final_master_table             IF OBJECT_ID('tempdb..#max_touch_pm', 'U') IS NOT NULL DROP TABLE #max_touch_pm     IF OBJECT_ID('tempdb..#max_touch_t', 'U') IS NOT NULL DROP TABLE #max_touch_t     IF OBJECT_ID('tempdb..#max_touch_fxo', 'U') IS NOT NULL DROP TABLE #max_touch_fxo     IF OBJECT_ID('tempdb..#max_touch_fxt', 'U') IS NOT NULL DROP TABLE #max_touch_fxt     IF OBJECT_ID('tempdb..#order_pop', 'U') IS NOT NULL DROP TABLE #order_pop     IF OBJECT_ID('tempdb..#conc_fx', 'U') IS NOT NULL DROP TABLE #conc_fx      IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     IF OBJECT_ID('tempdb..#distinct_ids_al', 'U') IS NOT NULL DROP TABLE #distinct_ids_al     IF OBJECT_ID('tempdb..#distinct_ids_fx', 'U') IS NOT NULL DROP TABLE #distinct_ids_fx     IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE  #distinct_ids     IF OBJECT_ID('tempdb..#trades_pop', 'U') IS NOT NULL DROP TABLE #trades_pop             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg500_fx_idx1')           DROP INDEX mmf_vg500_fx_idx1      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg500_fx_idx1     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE      (ORDER_ID)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg500_fx_idx2')           DROP INDEX mmf_vg500_fx_idx2      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg500_fx_idx2     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE      (AUTHORISED_DATE_TIME)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg500_fx_idx3')           DROP INDEX mmf_vg500_fx_idx3      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg500_fx_idx3     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE      (DEALER_NAME)              IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg500_fx_idx4')           DROP INDEX mmf_vg500_fx_idx4      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg500_fx_idx4     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE     (CREATE_DATE)              IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg500_fx_idx5')           DROP INDEX mmf_vg500_fx_idx5      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg500_fx_idx5     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE     (ORDER_RECEIVED_DATE_TIME)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg500_fx_idx6')           DROP INDEX mmf_vg500_fx_idx6      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg500_fx_idx6     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE     (EXCEPTION_FLAG)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(     'MASTER_PM_ORDER_VG_500_DEALER_LIMIT_FX_TABLE', --TABLE_NAME     @START_TIME, --START_TIME     GETDATE(), --END_TIME     DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS     CAST(GETDATE() as date)) --COMPLETION_DATE        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_PM_ORDER_TABLE_VG_601_OUT_OF_HOURS_CASH  CreateDate: 2025-06-26 18:02:27.703  ModifyDate: 2025-07-01 11:45:21.277  --- DEFINITION START ---  -- =============================================        -- Author:  <LIZZIE REYNOLDS>        -- Create date: <19/06/2019>        -- Description: <CREATES THE MASTER TABLE FOR THE FRONT END>        -- =============================================        CREATE    PROCEDURE [dbo].[MASTER_PM_ORDER_TABLE_VG_601_OUT_OF_HOURS_CASH]                AS        BEGIN                 --Used to track total time stored procedure took to run         DECLARE @START_TIME as datetime         SET @START_TIME = GETDATE()                 IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids         SELECT DISTINCT vg.ORDER_ID, vg.SOURCE, vg.TRANSACTION_NUMBER         INTO #distinct_ids         FROM VISTA_STAGING.DBO.VG_601_OUT_OF_HOURS_CASH_TABLE vg                        --If the master table doesn't exist then we want to use all the data available, otherwise just the most recent data        IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_CASH_TABLE', 'U') IS NOT NULL        DELETE FROM #distinct_ids         where NOT EXISTS (SELECT od.TRANSACTION_NUMBER              FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_CASH od              WHERE od.TRANSACTION_NUMBER = #distinct_ids.TRANSACTION_NUMBER)        AND #distinct_ids.SOURCE = 'CM'                IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_CASH_TABLE', 'U') IS NOT NULL        DELETE FROM #distinct_ids         where NOT EXISTS (SELECT od.MULTI_FUND_ID              FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od              WHERE od.MULTI_FUND_ID = #distinct_ids.TRANSACTION_NUMBER)        AND #distinct_ids.SOURCE = 'AL'                         -- SET NOCOUNT ON added to prevent extra result sets from         -- interfering with SELECT statements.         SET NOCOUNT ON;                IF OBJECT_ID('tempdb..#temp_max_trade_touch', 'U') IS NOT NULL DROP TABLE #temp_max_trade_touch        SELECT         MULTI_FUND_ID,         MAX(TOUCH_COUNT) AS MAX_TOUCH        INTO #temp_max_trade_touch        FROM VISTA_REPORTING.dbo.TRADES t        INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = t.MULTI_FUND_ID        GROUP BY MULTI_FUND_ID                        IF OBJECT_ID('tempdb..#temp_max_ORDER_touch', 'U') IS NOT NULL DROP TABLE #temp_max_ORDER_touch        SELECT         ORD_NUM,         MAX(TOUCH_COUNT) AS MAX_TOUCH        INTO #temp_max_ORDER_touch        FROM VISTA_REPORTING.dbo.PM_ORDERS pm        INNER JOIN #distinct_ids di ON di.ORDER_ID = pm.ORD_NUM        GROUP BY ORD_NUM                        IF OBJECT_ID('tempdb..#temp_max_ORDER_CM', 'U') IS NOT NULL DROP TABLE #temp_max_ORDER_CM        SELECT DISTINCT        co.ORDER_ID,        MAX(api_requested_date) AS max_date        INTO #temp_max_order_cm        FROM VISTA_REPORTING.dbo.CASH_ORDERS co        INNER JOIN #distinct_ids di ON di.ORDER_ID = co.ORDER_ID        GROUP BY co.ORDER_ID                        IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades        SELECT          t.TRANSACTION_NUMBER,         MAX(API_REQUESTED_DATE) AS MAX_API_REQ        INTO #temp_max_req_trades        FROM VISTA_REPORTING.dbo.CASH_TRADES t        INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = t.TRANSACTION_NUMBER        GROUP BY t.TRANSACTION_NUMBER                        IF OBJECT_ID('tempdb..#temp_recent_dealer_al', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_al        SELECT DISTINCT oc.PM_ORD as ORD_NUM,         trd_trader         INTO #temp_recent_dealer_al         FROM VISTA_REPORTING.dbo.TRADES t         LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = t.ORD_NUM         INNER JOIN (SELECT            OC.PM_ORD AS ORD_NUM,            MAX(EXECUTION_TIME) AS MAX_EXEC,            MAX(TOUCH_COUNT) AS MAX_TOUCH            FROM VISTA_REPORTING.dbo.TRADES T            LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS OC ON OC.TRD_ORD = T.ORD_NUM            GROUP BY OC.PM_ORD) T2 ON T2.ORD_NUM = OC.PM_ORD                   AND T2.MAX_EXEC = t.EXECUTION_TIME                  AND T2.MAX_TOUCH = t.TOUCH_COUNT         INNER JOIN #distinct_ids di ON di.ORDER_ID = t.ORD_NUM                        IF OBJECT_ID('tempdb..#temp_recent_dealer_cm', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_cm        SELECT DISTINCT        ct.ORDER_ID,               ct.DEALER_NAME        INTO #temp_recent_dealer_cm        FROM VISTA_REPORTING.dbo.CASH_TRADES ct        INNER JOIN (SELECT                       ORDER_ID,                      MAX(EXECUTED_DATETIME) AS MAX_EXEC,                      MAX(API_REQUESTED_DATE) AS MAX_API_REQ                      FROM VISTA_REPORTING.dbo.CASH_TRADES                      GROUP BY ORDER_ID) ct2 ON nullif(ct2.ORDER_ID, '0') = ct.ORDER_ID                                                 AND ct2.MAX_EXEC = ct.EXECUTED_DATETIME                                                AND ct2.MAX_API_REQ = ct.API_REQUESTED_DATE        INNER JOIN #distinct_ids di ON di.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER                        --Concatonated fields for AL        IF OBJECT_ID('tempdb..#cm_concat_ord', 'U') IS NOT NULL DROP TABLE #cm_concat_ord        SELECT DISTINCT         ex.[ORDER_ID],         TRADE_DATE = STUFF((             SELECT  ' | ' +  + CAST(FORMAT(co.TRADE_DATE, 'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50))            FROM VISTA_REPORTING.dbo.CASH_ORDERS co            WHERE co.ORDER_ID = ex.[ORDER_ID] and ex.SOURCE = 'CM'            FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),         VALUE_DATE = STUFF((             SELECT  ' | ' +  + CAST(FORMAT(co.VALUE_DATE, 'dd/MM/yyyy') AS VARCHAR(50))            FROM VISTA_REPORTING.dbo.CASH_ORDERS co            WHERE co.ORDER_ID = ex.[ORDER_ID] and ex.SOURCE = 'CM'            FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),         TRADE_DATE_TRADES = nullif(STUFF((             SELECT DISTINCT ' | ' +  + CAST(FORMAT(cast(co.TRADE_DATE as date), 'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50))            FROM VISTA_REPORTING.dbo.CASH_TRADES co            WHERE co.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER and ex.SOURCE = 'CM'            FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''), ''),         VALUE_DATE_TRADES = nullif(STUFF((             SELECT DISTINCT ' | ' +  + CAST(FORMAT(cast(co.VALUE_DATE as date), 'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50))            FROM VISTA_REPORTING.dbo.CASH_TRADES co            WHERE co.TRANSACTION_NUMBER = ex.TRANSACTION_NUMBER and ex.SOURCE = 'CM'            FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),'')        INTO #cm_concat_ord        FROM VISTA_STAGING.dbo.VG_601_OUT_OF_HOURS_CASH_TABLE ex        INNER JOIN #distinct_ids di ON di.ORDER_ID = ex.ORDER_ID                        IF OBJECT_ID('tempdb..#temp_final', 'U') IS NOT NULL DROP TABLE #temp_final        SELECT DISTINCT               COALESCE(TDD.FULL_NAME, TDD2.FULL_NAME,dd.default_dealer)  AS [DEALER_NAME]               ,CASE WHEN e.SOURCE = 'AL' THEN FORMAT(PM.[AUTH_TIME], 'dd/MM/yyyy HH:mm:ss') WHEN e.SOURCE = 'CM' THEN FORMAT(CO.INSTRUCTION_RECEIVED_DATE, 'dd/MM/yyyy HH:mm:ss') END AS [INSTRUCTION_RECEIVED_DATE_TIME]              ,FORMAT(e.EXECUTED_DATETIME, 'dd/MM/yyyy HH:mm:ss')  AS [EXECUTED_DATE_TIME]              ,CASE WHEN e.[ORDER_EXCEPTION] = 1 THEN 'Exception' WHEN e.ORDER_EXCEPTION = 0 THEN '' END AS ORDER_EXCEPTION              ,CASE WHEN e.TRADE_EXCEPTION = 1 THEN 'Exception' WHEN e.TRADE_EXCEPTION = 0 THEN '' END AS [TRADE_EXCEPTION]              ,CASE WHEN e.SOURCE = 'CM' THEN CAST(COALESCE(CT.CLIENT_FUND_OR_POOL_CODE, CO.CLIENT_FUND_OR_POOL_CODE) AS VARCHAR(30)) WHEN e.SOURCE = 'AL' THEN CAST(T.FUND AS VARCHAR(30))  END AS  [CLIENT_FUND_POOL_CODE]              ,CASE WHEN e.SOURCE = 'CM' THEN CAST(COALESCE(CT.BASE_FUND_CODE, CO.BASE_FUND_CODE) AS VARCHAR(30)) WHEN e.SOURCE = 'AL' THEN CAST(T.PORTFOLIOS_PORTFOLIO_NAME AS VARCHAR(30)) END AS [BASE_FUND_CODE]              ,CASE WHEN e.SOURCE = 'AL' THEN PM.CURRENCY WHEN e.SOURCE = 'CM' THEN CO.INSTRUCTED_CURRENCY END AS [INSTRUCTED_CURRENCY]              ,CASE WHEN e.SOURCE = 'AL' THEN PRIM.INST_TYPE WHEN e.SOURCE = 'CM' THEN COALESCE(CT.PRODUCT, CO.PRODUCT) END AS [PRODUCT]              ,CASE WHEN e.SOURCE = 'AL' THEN FORMAT(PM.FACE, '#,0.00') WHEN e.SOURCE = 'CM' THEN FORMAT(CONVERT(DECIMAL(38,2),CO.INSTRUCTED_AMOUNT), '#,0.00') END AS [INSTRUCTED_AMOUNT]           ,CASE WHEN e.SOURCE = 'CM' THEN CT.TERM WHEN e.SOURCE = 'AL' THEN NULL END AS TERM -- NEEDS FILLING FOR ALADDIN DATA              ,CASE WHEN e.SOURCE = 'AL' THEN cast(FORMAT(T.TRD_TRADE_DATE, 'dd/MM/yyyy HH:mm:ss') As varchar(30)) WHEN e.SOURCE = 'CM' THEN COALESCE(CONC_CM.TRADE_date_trades,conc_cm.TRADE_DATE) END AS [TRADE_DATE]              ,CASE WHEN e.SOURCE = 'AL' THEN cast(FORMAT(T.TRD_TRADE_DATE, 'dd/MM/yyyy HH:mm:ss') As varchar(30)) WHEN e.SOURCE = 'CM' THEN coalesce(conc_cm.VALUE_DATE_TRADES,conc_cm.VALUE_DATE) END AS [VALUE_DATE] --THIS CANNOT BE RIGHT NEEDS UPDATING              ,CASE WHEN e.SOURCE = 'AL' THEN FORMAT(PM.SETTLE_DATE, 'dd/MM/yyyy HH:mm:ss') WHEN e.SOURCE = 'CM' THEN FORMAT(COALESCE(CO.MATURITY_DATE, CT.MATURITY_DATE), 'dd/MM/yyyy HH:mm:ss') END AS [MATURITY_DATE]              ,CASE WHEN e.SOURCE = 'AL' THEN null WHEN e.SOURCE = 'CM' THEN FORMAT(CO.ACCEPTED_DATETIME, 'dd/MM/yyyy HH:mm:ss') END AS [ACCEPTED_DATE_TIME]              ,CASE WHEN e.SOURCE = 'AL' THEN CAST(ASD2.STATUS_DECODE AS VARCHAR(30)) WHEN e.SOURCE = 'CM' THEN CAST(CO.INSTRUCTION_STATUS_DECODE AS VARCHAR(20)) END AS [INSTRUCTION_STATUS]              ,CASE WHEN e.SOURCE = 'AL' THEN CAST(ASD.STATUS_DECODE AS VARCHAR(30)) WHEN e.SOURCE = 'CM' THEN CAST(CT.TRANSACTION_STATUS_DECODE AS VARCHAR(20)) END AS [TRANSACTION_STATUS]              ,CASE WHEN e.SOURCE = 'CM' THEN COALESCE(CT.BUSINESS_GROUP, CO.BUSINESS_GROUP) WHEN e.SOURCE = 'AL' THEN                                      CASE                                      WHEN po.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP'                                     WHEN po.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG'                                     WHEN (po.[PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR po.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM'                                    ELSE NULL                                    END                                    END AS [BUSINESS_GROUP]               ,CASE WHEN e.SOURCE = 'AL' THEN 'Cash Products' WHEN e.SOURCE = 'CM' THEN COALESCE(CT.PRODUCT_TYPE, CO.PRODUCT_TYPE) END AS [PRODUCT_TYPE]              ,CASE WHEN e.SOURCE = 'AL' THEN T.TRAN_TYPE WHEN e.SOURCE = 'CM' THEN CT.TRANSACTION_TYPE END AS [TRANSACTION_TYPE]              ,CASE WHEN e.SOURCE = 'AL' THEN FORMAT(CONVERT(DECIMAL(38,2),T.TRD_ORIG_FACE), '#,0.00') WHEN e.SOURCE = 'CM' THEN FORMAT(CONVERT(DECIMAL(38,2),CT.DEALT_AMOUNT), '#,0.00') END AS  [DEALT_AMOUNT]              ,CASE WHEN e.SOURCE = 'AL' THEN cast(PM.CUSIP as varchar(30)) WHEN e.SOURCE = 'CM' THEN cast(CO.ASSET_ID as varchar(30)) END AS [ASSET_ID]              ,CASE WHEN e.SOURCE = 'AL' THEN PM.COMMENTS_VALUE WHEN e.SOURCE = 'CM' THEN CO.CUSTOM_INSTRUCTION END AS [CUSTOM_INSTRUCTION]           ,e.[ORDER_ID]           ,e.[TRANSACTION_NUMBER]           ,CASE WHEN e.SOURCE = 'AL' THEN CONVERT(DECIMAL(38,4),T.TRD_PRICE) WHEN e.SOURCE = 'CM' THEN CONVERT(DECIMAL(38,4),CT.EXECUTED_RATE) END AS [EXECUTED_RATE]              ,CASE WHEN e.SOURCE = 'AL' THEN T.TRD_EX_BROKER_CODE WHEN e.SOURCE = 'CM' THEN CT.BANK END AS  [BANK] --NOT SURE ABOUT ALADDIN ENTRY HERE              ,e.VG_601_CREATETIME AS [CREATE_DATE]              ,e.VG_601 AS [EXCEPTION_FLAG]           ,CASE WHEN E.SOURCE = 'CM' THEN CO.INSTRUCTION_RECEIVED_DATE WHEN e.SOURCE = 'AL' THEN PM.AUTH_TIME END AS OS_INSTRUCTION_RECEIVED_DATE_TIME           ,e.SOURCE AS [DATA_SOURCE]           ,CASE WHEN e.SOURCE = 'AL' THEN PM.PM WHEN e.SOURCE = 'CM' THEN CO.INSTRUCTED_BY END AS INSTRUCTED_BY               ,CASE WHEN e.SOURCE = 'AL' THEN PM.TRADER WHEN e.SOURCE = 'CM' THEN CO.ACCEPTED_BY END AS [ACCEPTED_BY]            INTO #temp_final          FROM [VISTA_STAGING].[dbo].[VG_601_OUT_OF_HOURS_CASH_TABLE] e          INNER JOIN #distinct_ids di on di.TRANSACTION_NUMBER = e.TRANSACTION_NUMBER and di.SOURCE = e.SOURCE          LEFT JOIN (SELECT DISTINCT T.MULTI_FUND_ID, TRD_AUTH_TIME, FUND, TRD_TRADE_DATE, TRAN_TYPE, TRD_ORIG_FACE, TRD_PRICE, TRD_EX_BROKER_CODE, TRD_TRADER, PULL_DATE, TRD_STATUS, TOUCH_COUNT, PORTFOLIOS_PORTFOLIO_NAME FROM VISTA_REPORTING.DBO.TRADES T          INNER JOIN #temp_max_trade_touch MTT ON MTT.MAX_TOUCH = T.TOUCH_COUNT AND MTT.MULTI_FUND_ID = T.MULTI_FUND_ID) T ON T.MULTI_FUND_ID = e.TRANSACTION_NUMBER AND e.SOURCE = 'AL'          LEFT JOIN (SELECT DISTINCT PM.ORD_NUM, SETTLE_DATE, CUSIP, COMMENTS_VALUE, CURRENCY, FACE, ACTIVE_TIME, STATUS, TOUCH_COUNT, AUTH_TIME, PULL_DATE, TRADER, PM FROM VISTA_REPORTING.DBO.PM_ORDERS PM          INNER JOIN #temp_max_ORDER_touch MOT ON MOT.ORD_NUM = PM.ORD_NUM AND MOT.MAX_TOUCH = PM.TOUCH_COUNT  ) PM ON PM.ORD_NUM = e.ORDER_ID AND e.SOURCE = 'AL'          LEFT JOIN (SELECT DISTINCT CO.ORDER_ID, INSTRUCTION_RECEIVED_DATE, ACCEPTED_DATETIME, INSTRUCTION_STATUS_DECODE, TRADE_DATE, MATURITY_DATE, VALUE_DATE, ASSET_ID, CUSTOM_INSTRUCTION, INSTRUCTED_CURRENCY, INSTRUCTED_AMOUNT,          BASE_FUND_CODE, BUSINESS_GROUP, CLIENT_FUND_OR_POOL_CODE, PRODUCT_TYPE, PRODUCT, INSTRUCTED_BY, ACCEPTED_BY, PULL_DATE FROM VISTA_REPORTING.DBO.CASH_ORDERS CO          INNER JOIN #temp_max_order_cm MOO ON MOO.ORDER_ID = CO.ORDER_ID AND MOO.max_date = CO.API_REQUESTED_DATE ) CO ON CO.ORDER_ID = e.ORDER_ID AND e.SOURCE = 'CM'          LEFT JOIN (SELECT DISTINCT CT.TRANSACTION_NUMBER, TRANSACTION_STATUS_DECODE, TERM, CLIENT_FUND_OR_POOL_CODE, BASE_FUND_CODE, PRODUCT_TYPE, PRODUCT, TRANSACTION_TYPE, DEALT_AMOUNT, EXECUTED_RATE, BANK, MATURITY_DATE, DEALER_NAME, PULL_DATE, BUSINESS_GROUP FROM VISTA_REPORTING.DBO.CASH_TRADES CT          INNER JOIN #temp_max_req_trades MTT ON MTT.TRANSACTION_NUMBER = CT.TRANSACTION_NUMBER AND MTT.MAX_API_REQ = CT.API_REQUESTED_DATE ) CT ON CT.TRANSACTION_NUMBER = e.TRANSACTION_NUMBER AND e.SOURCE = 'CM'          LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, INST_TYPE FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) PRIM ON PRIM.MULTI_FUND_ID = e.TRANSACTION_NUMBER AND e.SOURCE = 'AL'          LEFT JOIN (SELECT DISTINCT FUND_ID, PORTFOLIO_GROUP_NAME FROM VISTA_REPORTING.DBO.PORTFOLIO_GROUPS_TREASURY) PO ON T.FUND = PO.FUND_ID          LEFT JOIN VISTA_STAGING.DBO.REF_cash_ALADDIN_STATUS_DECODE ASD ON e.SOURCE = 'AL' AND (ASD.[STATUS] = T.TRD_STATUS)          LEFT JOIN VISTA_STAGING.DBO.REF_cash_ALADDIN_STATUS_DECODE ASD2 ON e.SOURCE = 'AL' AND (ASD2.[STATUS] = PM.STATUS)          LEFT JOIN (SELECT FUND, PORTFOLIO_GROUP  FROM VISTA_REPORTING.DBO.PORTFOLIO ) PCG ON PCG.FUND = CONVERT(VARCHAR(30), T.FUND) AND e.SOURCE = 'AL'          LEFT JOIN #cm_concat_ord conc_cm on conc_cm.ORDER_ID = e.ORDER_ID          LEFT JOIN #temp_recent_dealer_al RAL ON RAL.ORD_NUM  = e.ORDER_ID AND e.SOURCE = 'AL'          LEFT JOIN #temp_recent_dealer_cm RCM ON RCM.ORDER_ID = e.ORDER_ID AND e.SOURCE = 'CM'          LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD ON ((TDD.MG_USER_ID  = RCM.DEALER_NAME AND e.SOURCE = 'CM') OR (TDD.INITIALS = RAL.TRD_TRADER AND e.SOURCE = 'AL'))  AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE, ct.pull_date, t.pull_date) AS DATE)             BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE)          LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD2 ON ((TDD2.MG_USER_ID  = COALESCE(ct.dealer_name, CO.ACCEPTED_BY, CO.INSTRUCTED_BY) AND e.SOURCE = 'CM') OR (TDD2.INITIALS = coalesce(PM.TRADER, t.trd_trader) AND e.SOURCE = 'AL')) AND CAST(COALESCE            (CO.PULL_DATE, PM.PULL_DATE, ct.pull_date, t.pull_date) AS DATE) BETWEEN CAST(TDD2.DATE_FROM AS DATE) AND CAST(TDD2.DATE_TO AS DATE)          LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'Out Of Hours' AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE, ct.pull_date, t.pull_date) AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)                        --In cases where there are duplicate transaction numbers this occurs where one instance has order id populated        --and the other case has order id = NULL, we want to remove the cases where it is null so there are no duplicates.        IF OBJECT_ID('tempdb..#temp_duplicates', 'U') IS NOT NULL DROP TABLE #temp_duplicates        SELECT TRANSACTION_NUMBER        INTO #temp_duplicates        FROM #temp_final        GROUP BY TRANSACTION_NUMBER        HAVING COUNT(TRANSACTION_NUMBER) > 1                        IF OBJECT_ID('tempdb..#temp_null_removed', 'U') IS NOT NULL DROP TABLE #temp_null_removed        SELECT tf.*        INTO #temp_null_removed        FROM #temp_duplicates td        LEFT JOIN #temp_final tf ON tf.TRANSACTION_NUMBER = td.TRANSACTION_NUMBER        WHERE tf.ORDER_ID IS NOT NULL                        IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table        SELECT *         INTO #temp_final_master_table        FROM #temp_null_removed        UNION         (SELECT * FROM #temp_final WHERE TRANSACTION_NUMBER NOT IN (SELECT t.TRANSACTION_NUMBER FROM #temp_duplicates t))                        IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_CASH_TABLE', 'U') IS NOT NULL        DELETE FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_CASH_TABLE         WHERE EXISTS (SELECT DISTINCT TRANSACTION_NUMBER         FROM #distinct_ids di         WHERE di.TRANSACTION_NUMBER =         VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_CASH_TABLE.TRANSACTION_NUMBER)                        IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_CASH_TABLE', 'U') IS NOT NULL        INSERT INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_CASH_TABLE        SELECT *        FROM #temp_final_master_table                ELSE                SELECT *        INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_CASH_TABLE        FROM #temp_final_master_table                        IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL        INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(        'MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_CASH_TABLE', --TABLE_NAME        @START_TIME, --START_TIME        GETDATE(), --END_TIME        DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS        CAST(GETDATE() as date)) --COMPLETION_DATE                        IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids        IF OBJECT_ID('tempdb..#temp_max_trade_touch', 'U') IS NOT NULL DROP TABLE #temp_max_trade_touch        IF OBJECT_ID('tempdb..#temp_max_ORDER_touch', 'U') IS NOT NULL DROP TABLE #temp_max_ORDER_touch        IF OBJECT_ID('tempdb..#temp_max_ORDER_CM', 'U') IS NOT NULL DROP TABLE #temp_max_ORDER_CM        IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades        IF OBJECT_ID('tempdb..#temp_recent_dealer_al', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_al        IF OBJECT_ID('tempdb..#temp_recent_dealer_cm', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_cm        IF OBJECT_ID('tempdb..#cm_concat_ord', 'U') IS NOT NULL DROP TABLE #cm_concat_ord        IF OBJECT_ID('tempdb..#temp_final', 'U') IS NOT NULL DROP TABLE #temp_final        IF OBJECT_ID('tempdb..#temp_null_removed', 'U') IS NOT NULL DROP TABLE #temp_null_removed        IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table        IF OBJECT_ID('tempdb..#temp_duplicates', 'U') IS NOT NULL DROP TABLE #temp_duplicates                               IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                      WHERE name = N'mmf_vg601_cash_idx1')               DROP INDEX mmf_vg601_cash_idx1                ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_CASH_TABLE                        CREATE NONCLUSTERED INDEX mmf_vg601_cash_idx1               ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_CASH_TABLE                (INSTRUCTION_RECEIVED_DATE_TIME)                       IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                      WHERE name = N'mmf_vg601_cash_idx2')               DROP INDEX mmf_vg601_cash_idx2                ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_CASH_TABLE                        CREATE NONCLUSTERED INDEX mmf_vg601_cash_idx2               ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_CASH_TABLE                (EXCEPTION_FLAG)                       IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                      WHERE name = N'mmf_vg601_cash_idx3')               DROP INDEX mmf_vg601_cash_idx3                ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_CASH_TABLE                        CREATE NONCLUSTERED INDEX mmf_vg601_cash_idx3               ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_CASH_TABLE                (CREATE_DATE)                        END   --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_PM_ORDER_TABLE_VG_601_OUT_OF_HOURS_FX  CreateDate: 2025-06-26 18:02:42.120  ModifyDate: 2025-06-26 18:02:42.120  --- DEFINITION START ---  -- =============================================    -- Author:  <LIZZIE REYNOLDS>    -- Create date: <08/07/2019>    -- Description: <CREATING THE MASTE TABLE FOR FX OUT OF HOURS TEST>        -- ***************VERSION CONTROL***************    --2022-02-09; Matej Miter - created for Jira:    --SURVG-639 - Changed instructed amount field to be taken from fx notional amount or notional amount far instead of gbp values; This should be align accross all reports    -- *********************************************    -- =============================================    CREATE PROCEDURE [dbo].[MASTER_PM_ORDER_TABLE_VG_601_OUT_OF_HOURS_FX]     -- Add the parameters for the stored procedure here        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;              DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()             IF OBJECT_ID('tempdb..#distinct_ids_al', 'U') IS NOT NULL DROP TABLE #distinct_ids_al     SELECT DISTINCT       vg.TRADE_ID as TRD_ORD,      oc.PM_ORD AS ORD_NUM,      t.MULTI_FUND_ID     INTO #distinct_ids_al     FROM Vista_Staging.dbo.VG_601_OUT_OF_HOURS_FX_TABLE vg     LEFT JOIN Vista_Reporting.dbo.TRADES t ON t.MULTI_FUND_ID = vg.TRADE_ID     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = t.ORD_NUM     WHERE vg.SOURCE = 'AL'             IF OBJECT_ID('tempdb..#distinct_ids_fx', 'U') IS NOT NULL DROP TABLE #distinct_ids_fx     SELECT DISTINCT      fxt.ORDER_ID AS TRD_ORD,      vg.ORDER_ID,      fxt.TRADE_ID AS MULTI_FUND_ID      INTO #distinct_ids_fx     FROM Vista_Staging.dbo.VG_601_OUT_OF_HOURS_FX_TABLE vg     LEFT JOIN Vista_Reporting.dbo.FX_ORDERS fxo ON fxo.FXM_ORDER_ID = vg.ORDER_ID     LEFT JOIN Vista_Reporting.dbo.FX_TRADES fxt ON fxt.ORDER_ID = fxo.FXM_ORDER_ID     WHERE vg.SOURCE = 'FX'               IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE', 'U') IS NOT NULL     DELETE FROM #distinct_ids_fx where NOT EXISTS (SELECT DISTINCT od.TRADE_ID                   FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_FX od                   WHERE CAST(od.TRADE_ID AS varchar) = CAST(#distinct_ids_fx.TRD_ORD AS varchar)                   OR CAST(od.FXM_ORDER_ID AS varchar) = CAST(#distinct_ids_fx.ORDER_ID AS varchar))             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE', 'U') IS NOT NULL     DELETE FROM #distinct_ids_al where NOT EXISTS (SELECT DISTINCT od.MULTI_FUND_ID                   FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                   WHERE od.TRD_ORD = #distinct_ids_al.TRD_ORD)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE', 'U') IS NOT NULL     DELETE FROM #distinct_ids_al where NOT EXISTS (SELECT DISTINCT od.MULTI_FUND_ID                   FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                   WHERE od.PM_ORD = #distinct_ids_al.ORD_NUM)             IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE  #distinct_ids     SELECT *      INTO #distinct_ids     FROM #distinct_ids_al         UNION ALL         SELECT *      FROM #distinct_ids_fx             IF OBJECT_ID('tempdb..#max_touch_pm', 'U') IS NOT NULL DROP TABLE #max_touch_pm     SELECT DISTINCT       pm.ORD_NUM,       MAX(pm.TOUCH_COUNT) as MAX_TOUCH      INTO #max_touch_pm     FROM VISTA_REPORTING.dbo.PM_ORDERS pm     WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = pm.ORD_NUM)     GROUP BY ORD_NUM             IF OBJECT_ID('tempdb..#max_touch_t', 'U') IS NOT NULL DROP TABLE #max_touch_t     SELECT DISTINCT       t.MULTI_FUND_ID,       MAX(t.TOUCH_COUNT) as MAX_TOUCH      INTO #max_touch_t     FROM VISTA_REPORTING.dbo.TRADES t     WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)     GROUP BY MULTI_FUND_ID             IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     SELECT DISTINCT       COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) AS DEALER_NAME,      FORMAT(FXO.AUTH_TIME,'dd/MM/yyyy HH:mm:ss') as AUTHORISED_DATE_TIME,      FORMAT(FXO.INSTRUCTION_RECEIVED_DATE_TIME,'dd/MM/yyyy HH:mm:ss') AS ORDER_RECEIVED_DATETIME,      FORMAT(FXT.EXECUTED_DATE_TIME,'dd/MM/yyyy HH:mm:ss') AS EXECUTED_DATETIME,      FORMAT(FXT.ACCEPTED_DATE_TIME,'dd/MM/yyyy HH:mm:ss') AS ACCEPTED_DATE_TIME,      FORMAT(fxt.MARKET_ARRIVAL_DATE_TIME,'dd/MM/yyyy HH:mm:ss') AS MARKET_ARRIVAL_DATE_TIME,      CASE WHEN FXT.EXECUTED_RATE_FAR IS NULL   THEN CONVERT(VARCHAR(50),FXT.EXECUTED_RATE)         WHEN FXT.EXECUTED_RATE_FAR IS NOT NULL  THEN CONCAT(FXT.EXECUTED_RATE, ' | ', FXT.EXECUTED_RATE_FAR) END AS ALL_IN_RATE,      CASE WHEN FXT.FORWARD_POINTS_FAR IS NULL  THEN CONVERT(VARCHAR(50),FXT.FORWARD_POINTS)         WHEN FXT.FORWARD_POINTS_FAR IS NOT NULL THEN CONCAT(FXT.FORWARD_POINTS, ' | ', FXT.FORWARD_POINTS_FAR) END AS FORWARD_POINTS,      CASE WHEN FXT.SPOT_RATE_FAR IS NULL    THEN CONVERT(VARCHAR(50),FXT.SPOT_RATE)         WHEN FXT.SPOT_RATE_FAR IS NOT NULL   THEN CONCAT(FXT.SPOT_RATE, ' | ', FXT.SPOT_RATE_FAR) END AS SPOT_RATE,      cast(FXT.SWAP_POINTS as varchar(50)) as SWAP_POINTS,      FXO.CLIENT_FUND,      FXO.BASE_FUND,      fxo.INSTRUCTION_TYPE as PRODUCT,      CASE WHEN FXO.FR_LEG_PRODUCT IS NULL   THEN CONVERT(VARCHAR(50),FXO.NR_LEG_PRODUCT)         WHEN FXO.FR_LEG_PRODUCT IS NOT NULL  THEN CONCAT(FXO.NR_LEG_PRODUCT, ' | ', FXO.FR_LEG_PRODUCT) END AS FXM_PRODUCT,      CASE WHEN NULLIF(FXO.ACTION2,'') IS NULL  THEN CONVERT(VARCHAR(50),FXO.ACTION1)         WHEN NULLIF(FXO.ACTION2,'') IS NOT NULL THEN (FXO.ACTION1 + ISNULL(' | ' + NULLIF(FXO.ACTION2,''),'')) END AS ACTION,      CASE WHEN FXO.NOTIONAL_CCY_FAR IS NULL   THEN CONVERT(VARCHAR(50),FXO.NOTIONAL_CCY)         WHEN FXO.NOTIONAL_CCY_FAR IS NOT NULL  THEN CONCAT(FXO.NOTIONAL_CCY, ' | ', FXO.NOTIONAL_CCY_FAR) END AS INSTRUCTED_CURRENCY,      CASE WHEN FXO.BUY_CCY_LEG2 IS NULL    THEN CONVERT(VARCHAR(50),FXO.BUY_CCY)         WHEN FXO.BUY_CCY_LEG2 IS NOT NULL   THEN CONCAT(FXO.BUY_CCY, ' | ', FXO.BUY_CCY_LEG2) END AS BUY_CURRENCY,      CASE WHEN FXO.SELL_CCY_LEG2 IS NULL    THEN CONVERT(VARCHAR(50),FXO.SELL_CCY)         WHEN FXO.SELL_CCY_LEG2 IS NOT NULL   THEN CONCAT(FXO.SELL_CCY, ' | ', FXO.SELL_CCY_LEG2) END AS SELL_CURRENCY,      --SURVG-639      CASE WHEN FXO.NOTIONAL_AMOUNT_FAR IS NULL THEN CAST(FORMAT(FXO.NOTIONAL_AMOUNT,'#,0.00') AS varchar(200))         WHEN FXO.NOTIONAL_AMOUNT_FAR IS NOT NULL THEN CONCAT(FORMAT(FXO.NOTIONAL_AMOUNT,'#,0.00'), ' | ',FORMAT(FXO.NOTIONAL_AMOUNT_FAR,'#,0.00')) END AS INSTRUCTED_AMOUNT,      --End of SURVG-639      FORMAT(FXT.TRADE_DATE,'dd/MM/yyyy HH:mm:ss') AS TRADE_DATE,      CASE WHEN FXO.VALUE_DATE_FAR IS NULL   THEN CONVERT(VARCHAR(50),FORMAT(FXO.VALUE_DATE_NEAR,'dd/MM/yyyy HH:mm:ss'))         WHEN FXO.VALUE_DATE_FAR IS NOT NULL  THEN CONCAT(FORMAT(FXO.VALUE_DATE_NEAR,'dd/MM/yyyy HH:mm:ss'), ' | ',FORMAT(FXO.VALUE_DATE_FAR,'dd/MM/yyyy HH:mm:ss')) END AS VALUE_DATE,      CASE WHEN FXT.EXECUTED_AMOUNT_FAR IS NULL  THEN CONVERT(VARCHAR(50),FORMAT(FXT.EXECUTED_AMOUNT,'#,0.00'))         WHEN FXT.EXECUTED_AMOUNT_FAR IS NOT NULL THEN CONCAT(FORMAT(FXT.EXECUTED_AMOUNT,'#,0.00'), ' | ' ,FORMAT(FXT.EXECUTED_AMOUNT_FAR,'#,0.00')) END AS EXECUTED_AMOUNT,      FXT.SWAP_TYPE,      cast(FXT.NET_EXPOSURE_TRADE as varchar(100)) AS NET_EXPOSURE,      CASE WHEN FXO.PM IS NOT NULL THEN FXO.PM ELSE FXO.INSTRUCTED_BY END AS INSTRUCTED_BY,      FXO.CREATED_FROM AS ORDER_SOURCE,      FXO.FM_COMMENTS,      FXO.TRADE_PURPOSE,      FXO.MARKER,      CASE WHEN FXT.FIXING_DATE_LEG2 IS NULL   THEN CONVERT(VARCHAR(50),FORMAT(FXT.FIXING_DATE,'dd/MM/yyyy HH:mm:ss'))         WHEN FXT.FIXING_DATE_LEG2 IS NOT NULL  THEN CONCAT(FORMAT(FXT.FIXING_DATE,'dd/MM/yyyy HH:mm:ss'), ' | ',FORMAT(FXT.FIXING_DATE_LEG2,'dd/MM/yyyy HH:mm:ss')) END AS FIXING_DATE,      FXO.BUSINESS_GROUP,      FXO.TRADE_VENUE AS PLACEMENT_VENUE,      FXT.EXECUTED_BANK,      FXO.INSTRUCTION_STATUS,      FXT.TRADE_STATUS,      FXT.ACCEPTED_BY AS TAKEN_OVER_BY,      cast(ex.[ORDER_ID] as varchar(50)) as ORDER_ID,      cast(COALESCE(FXO.ORD_NUM,fxo.FXM_ORDER_ID) as varchar(50)) as PM_ORDER_ID,       FXT.TRADE_ID as TRANSACTION_NUMBER,      FXO.ALADDIN_COMMON_ID as ALADDIN_COMMON_IDENTIFIER,      EX.ORDER_EXCEPTION as ORDER_EXCEPTION,      EX.TRADE_EXCEPTION as TRADE_EXCEPTION,      EX.VG_601 as EXCEPTION_FLAG,      EX.VG_601_CREATETIME as CREATE_DATE,      EX.SOURCE AS DATA_SOURCE,      FXO.INSTRUCTION_RECEIVED_DATE_TIME as OS_ORDER_RECEIVED_DATE_TIME     INTO #temp_final_master_table     FROM VISTA_STAGING.DBO.VG_601_OUT_OF_HOURS_FX_TABLE EX     LEFT JOIN VISTA_REPORTING.DBO.FX_ORDERS FXO ON EX.ORDER_ID = FXO.FXM_ORDER_ID      LEFT JOIN VISTA_REPORTING.DBO.FX_TRADES FXT ON FXO.FXM_ORDER_ID = FXT.ORDER_ID      left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd     on tdd.[MG_USER_ID] = fxt.[DEALT_BY] AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2     on tdd2.[MG_USER_ID] = fxt.[ACCEPTED_BY] AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)     left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd      on dd.[REPORT_NAME] = 'Out of Hours' AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)     WHERE EX.SOURCE = 'FX' AND EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ex.ORDER_ID OR di.TRD_ORD = ex.TRADE_ID)         UNION         SELECT DISTINCT      COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) as DEALER_NAME      ,FORMAT(PMO.AUTH_TIME,'dd/MM/yyyy HH:mm:ss') as AUTHORISED_DATE_TIME      ,FORMAT(PMO.AUTH_TIME,'dd/MM/yyyy HH:mm:ss') AS ORDER_RECEIVED_DATE_TIME      ,FORMAT(TRD.EXECUTION_TIME,'dd/MM/yyyy HH:mm:ss') as EXECUTED_DATE_TIME      ,FORMAT(PMO.ACTIVE_TIME,'dd/MM/yyyy HH:mm:ss') as ACCEPTED_DATE_TIME      ,FORMAT(TRD.EXECUTION_TIME,'dd/MM/yyyy HH:mm:ss') as MARKET_ARRIVAL_DATE_TIME      ,CAST(COALESCE(PLA.AVG_PRICE,TRD.FX_PRICE) as varchar(30)) as ALL_IN_RATE       ,CAST(NULL as varchar(50)) AS FORWARD_POINTS      ,CAST(TRD.FX_PRICE_SPOT as varchar(50)) as SPOT_RATE       ,CAST(NULL as varchar(50)) as SWAP_POINTS      ,CAST(NULL as varchar(50)) AS CLIENT_FUND      ,TRD.PORTFOLIOS_PORTFOLIO_NAME as BASE_FUND      ,PMO.SM_SEC_TYPE as PRODUCT      ,PMO.SM_SEC_TYPE as FXM_PRODUCT      ,CAST(NULL as varchar(50)) as ACTION      ,TRD.FX_PAY_CURR as INSTRUCTED_CURRENCY      ,CAST(NULL as varchar(50)) as BUY_CURRENCY      ,CAST(NULL as varchar(50)) as SELL_CURRENCY      ,cast(FORMAT(PLA.QUANTITY,'#,0.00') as varchar(50)) as INSTRUCTED_AMOUNT      ,FORMAT(PMO.OPEN_DATE,'dd/MM/yyyy HH:mm:ss') as TRADE_DATE      ,cast(COALESCE(FORMAT(PMO.SETTLE_DATE,'dd/MM/yyyy HH:mm:ss'),FORMAT(PMO.MATURITY,'dd/MM/yyyy HH:mm:ss')) as varchar(50)) as VALUE_DATE       ,cast(FORMAT(PMO.FILL_AMT,'#,0.00') as varchar(50)) as EXECUTED_AMOUNT      ,CAST(NULL as varchar(50)) AS SWAP_TYPE      ,CAST(NULL as varchar(50)) AS NET_EXPOSURE      ,PMO.PM as INSTRUCTED_BY      ,'Aladdin' as ORDER_SOURCE      ,PMO.COMMENTS_VALUE as FM_COMMENTS      ,TRD.TRD_PURPOSE as TRADE_PURPOSE      ,CAST(NULL as varchar(50)) AS MARKER      ,CAST(NULL as varchar(50)) as FIXING_DATE      ,CASE       WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP'       WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG'       WHEN (pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM'      ELSE NULL      END AS [BUSINESS_GROUP]      ,cast(PLA.VENUE as varchar(50)) as PLACEMENT_VENUE      ,PLA.BROKER as EXECUTED_BANK      ,PLA.STATUS as INSTRUCTION_STATUS      ,TRD.TRD_STATUS as TRADE_STATUS      ,TRD.TRD_TRADER as TAKEN_OVER_BY      ,cast(EX.ORDER_ID as varchar(50)) as ORDER_ID      ,cast(EX.ORDER_ID as varchar(50)) as PM_ORDER_ID      ,TRD.MULTI_FUND_ID as TRANSACTION_NUMBER      ,cast(REQ.REQUEST_ID as varchar(50)) as ALADDIN_COMMON_IDENTIFIER      ,EX.ORDER_EXCEPTION as ORDER_EXCEPTION      ,EX.TRADE_EXCEPTION as TRADE_EXCEPTION      ,EX.VG_601 as EXCEPTION_FLAG      ,EX.VG_601_CREATETIME as CREATE_DATE      ,EX.SOURCE AS DATA_SOURCE      ,PMO.AUTH_TIME as OS_ORDER_RECEIVED_DATE_TIME     FROM VISTA_STAGING.DBO.VG_601_OUT_OF_HOURS_FX_TABLE EX     left join (SELECT DISTINCT         PMO.ORD_NUM,        PMO.AUTH_TIME,        PMO.STATUS,        PMO.PM,        PMO.ACTIVE_TIME,        PMO.TRADER,        PMO.COMMENTS_VALUE,        PMO.OPEN_DATE,        PMO.SETTLE_DATE,        PMO.MATURITY,        PMO.SM_SEC_TYPE,        PMO.FILL_AMT,        PMO.PULL_DATE,        PMO.TOUCH_COUNT        from VISTA_REPORTING.dbo.PM_ORDERS PMO         inner join #max_touch_pm mtp on mtp.ORD_NUM = PMO.ORD_NUM and mtp.MAX_TOUCH = PMO.TOUCH_COUNT) PMO on PMO.ORD_NUM = EX.ORDER_ID     left join (SELECT         ORD_NUM,         PLACEMENT_NUM,        STATUS,        QUANTITY,        BROKER,        VENUE,        AVG_PRICE        from VISTA_REPORTING.dbo.PLACEMENTS) PLA on PLA.ORD_NUM = PMO.ORD_NUM     left join (SELECT         PLACEMENT_NUM,         REQUEST_ID        FROM VISTA_STAGING.dbo.REQUEST_LOOKUP) REQ on REQ.PLACEMENT_NUM = PLA.PLACEMENT_NUM     left join VISTA_REPORTING.dbo.ORDERS_CROSS OC on OC.PM_ORD = PMO.ORD_NUM     left join (SELECT        TRD.MULTI_FUND_ID,        TRD.EXECUTION_TIME,        TRD.ORD_NUM,        TRD.TRD_STATUS,        TRD.TRD_TRADER,        TRD.[PORTFOLIOS_PORTFOLIO_NAME],        TRD.FUND,        TRD.TRD_PURPOSE,        TRD.FX_PAY_CURR,        TRD.[PULL_DATE],        FX_PRICE,        fx_PRICE_SPOT,        TRD.[TOUCH_COUNT]        FROM VISTA_REPORTING.dbo.TRADES TRD        inner join #max_touch_t mtt on mtt.MULTI_FUND_ID = TRD.MULTI_FUND_ID and mtt.MAX_TOUCH = TRD.TOUCH_COUNT) TRD on (TRD.ORD_NUM = OC.TRD_ORD and EX.[TRADE_ID] is null)                                       or (TRD.MULTI_FUND_ID = EX.TRADE_ID and EX.[TRADE_ID] is not null)     left join (SELECT DISTINCT FUND_ID, PORTFOLIO_GROUP_NAME FROM VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY) pgt on TRD.[FUND] = pgt.[FUND_ID]     left join VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd on tdd.[INITIALS]  = trd.[TRD_TRADER] AND CAST(trd.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2 on tdd2.[INITIALS] = pmo.[TRADER] AND CAST(pmo.[PULL_DATE] AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)     left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd on dd.[REPORT_NAME] = 'Out of Hours' AND CAST(COALESCE(trd.[PULL_DATE],pmo.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)     WHERE EX.SOURCE = 'AL' AND EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ex.ORDER_ID OR di.TRD_ORD = ex.TRADE_ID)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE', 'U') IS NOT NULL     DELETE FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE     WHERE ORDER_ID IN (SELECT DISTINCT ORD_NUM FROM #distinct_ids)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE     SELECT *     FROM #temp_final_master_table         ELSE         SELECT *     INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE     FROM #temp_final_master_table             IF OBJECT_ID('tempdb..#temp_max_trade_touch', 'U') IS NOT NULL DROP TABLE #temp_max_trade_touch     IF OBJECT_ID('tempdb..#temp_max_ORDER_touch', 'U') IS NOT NULL DROP TABLE #temp_max_ORDER_touch     IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     IF OBJECT_ID('tempdb..#distinct_ids_al', 'U') IS NOT NULL DROP TABLE #distinct_ids_al     IF OBJECT_ID('tempdb..#distinct_ids_fx', 'U') IS NOT NULL DROP TABLE #distinct_ids_fx     IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE  #distinct_ids             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg601_fx_idx1')           DROP INDEX mmf_vg601_fx_idx1      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg601_fx_idx1     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE      (ORDER_ID)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg601_fx_idx2')           DROP INDEX mmf_vg601_fx_idx2      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg601_fx_idx2     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE      (AUTHORISED_DATE_TIME)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg601_fx_idx3')           DROP INDEX mmf_vg601_fx_idx3      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg601_fx_idx3     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE      (DEALER_NAME)              IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg601_fx_idx4')           DROP INDEX mmf_vg601_fx_idx4      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg601_fx_idx4     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE     (CREATE_DATE)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg601_fx_idx5')           DROP INDEX mmf_vg601_fx_idx5     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg601_fx_idx5     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE      (ORDER_RECEIVED_DATETIME)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg601_fx_idx6')           DROP INDEX mmf_vg601_fx_idx6     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg601_fx_idx6     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE      (EXCEPTION_FLAG)              IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(     'MASTER_PM_ORDER_VG_601_OUT_OF_HOURS_FX_TABLE', --TABLE_NAME     @START_TIME, --START_TIME     GETDATE(), --END_TIME     DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS     CAST(GETDATE() as date)) --COMPLETION_DATE        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_PM_ORDER_TABLE_VG_602_EOD_HOLDOVERS_CASH  CreateDate: 2025-06-26 18:02:54.420  ModifyDate: 2025-07-01 11:40:57.890  --- DEFINITION START ---  -- =============================================      -- Author:  <Samad, Mehreen>      -- Create date: <18/06/2019>      -- Description:       -- <Master exception table for EOD Holdovers       -- Exception test for CASH.>      -- =============================================            -- ***************VERSION CONTROL***************            -- *********************************************            CREATE   PROCEDURE [dbo].[MASTER_PM_ORDER_TABLE_VG_602_EOD_HOLDOVERS_CASH]       -- Add the parameters for the stored procedure here       --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,             AS      BEGIN       -- SET NOCOUNT ON added to prevent extra result sets from       -- interfering with SELECT statements.       SET NOCOUNT ON;              --Used to track total time stored procedure took to run       DECLARE @START_TIME as datetime       SET @START_TIME = GETDATE()             IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids       SELECT DISTINCT t.ORDER_ID, t.DATA_SOURCE       INTO #distinct_ids       FROM VISTA_STAGING.DBO.VG_602_EOD_HOLDOVERS_CASH_TABLE t             --If the master table doesn't exist then we want to use all the data available, otherwise just the most recent data      IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_CASH_TABLE', 'U') IS NOT NULL      DELETE FROM #distinct_ids       where NOT EXISTS (SELECT od.ORDER_ID            FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_CASH od            WHERE od.ORDER_ID = #distinct_ids.ORDER_ID)      AND #distinct_ids.DATA_SOURCE = 'CM'            IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_CASH_TABLE', 'U') IS NOT NULL      DELETE FROM #distinct_ids       where NOT EXISTS (SELECT od.PM_ORD            FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od            WHERE od.PM_ORD = #distinct_ids.ORDER_ID)      AND #distinct_ids.DATA_SOURCE = 'AL'                  IF OBJECT_ID('tempdb..#temp_cash_trades', 'U') IS NOT NULL DROP TABLE #temp_cash_trades      SELECT DISTINCT t.TRANSACTION_NUMBER      into #temp_cash_trades      from Vista_Reporting.dbo.CASH_TRADES t      INNER JOIN #distinct_ids di ON di.ORDER_ID = t.ORDER_ID            UNION            SELECT DISTINCT tr.MULTI_FUND_ID      FROM Vista_Reporting.dbo.ORDERS_CROSS oc      INNER JOIN #distinct_ids di ON di.ORDER_ID = oc.PM_ORD      LEFT JOIN Vista_Reporting.dbo.TRADES tr on oc.TRD_ORD = tr.ORD_NUM                  IF OBJECT_ID('tempdb..#TEMP_TRADES_DISTINCT_CM', 'U') IS NOT NULL DROP TABLE #TEMP_TRADES_DISTINCT_CM       SELECT DISTINCT CO.ORDER_ID,           CO.INSTRUCTED_AMOUNT - CT.DEALT_AMOUNT as INSTRUCTION_REMAINING_AMOUNT       INTO #TEMP_TRADES_DISTINCT_CM       FROM VISTA_REPORTING.DBO.CASH_TRADES CT       LEFT JOIN (SELECT DISTINCT ORDER_ID, INSTRUCTED_AMOUNT FROM VISTA_REPORTING.DBO.CASH_ORDERS) CO ON CO.ORDER_ID = CT.ORDER_ID       INNER JOIN #temp_cash_trades tct ON tct.TRANSACTION_NUMBER = CT.TRANSACTION_NUMBER                  IF OBJECT_ID('tempdb..#temp_recent_dealer_al', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_al       SELECT DISTINCT oc.PM_ORD AS ORD_NUM,       trd_trader       INTO #temp_recent_dealer_al       FROM VISTA_REPORTING.dbo.TRADES t       LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = t.ORD_NUM       INNER JOIN (SELECT          OC.PM_ORD AS ORD_NUM,          MAX(EXECUTION_TIME) AS MAX_EXEC,          MAX(TOUCH_COUNT) AS MAX_TOUCH          FROM VISTA_REPORTING.dbo.TRADES T          LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS OC ON OC.TRD_ORD = T.ORD_NUM          GROUP BY OC.PM_ORD) T2 ON T2.ORD_NUM = OC.PM_ORD                 AND T2.MAX_EXEC = t.EXECUTION_TIME                AND T2.MAX_TOUCH = t.TOUCH_COUNT       INNER JOIN #distinct_ids di ON di.ORDER_ID = T.ORD_NUM                   IF OBJECT_ID('tempdb..#temp_recent_dealer_cm', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_cm      SELECT DISTINCT      ct.ORDER_ID,             ct.DEALER_NAME      INTO #temp_recent_dealer_cm      FROM VISTA_REPORTING.dbo.CASH_TRADES ct      INNER JOIN (SELECT                     ORDER_ID,                    MAX(EXECUTED_DATETIME) AS MAX_EXEC,                    MAX(API_REQUESTED_DATE) AS MAX_API_REQ                    FROM VISTA_REPORTING.dbo.CASH_TRADES                    GROUP BY ORDER_ID) ct2 ON nullif(ct2.ORDER_ID, '0') = ct.ORDER_ID                                               AND ct2.MAX_EXEC = ct.EXECUTED_DATETIME                                              AND ct2.MAX_API_REQ = ct.API_REQUESTED_DATE      INNER JOIN #temp_cash_trades tct ON tct.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER                  IF OBJECT_ID('tempdb..#max_touch_al', 'U') IS NOT NULL DROP TABLE #max_touch_al      SELECT DISTINCT        ORD_NUM,        MAX(TOUCH_COUNT) as MAX_TOUCH       INTO #max_touch_al      FROM VISTA_REPORTING.dbo.PM_ORDERS pm      INNER JOIN #distinct_ids di ON di.ORDER_ID = pm.ORD_NUM      GROUP BY ORD_NUM            IF OBJECT_ID('tempdb..#max_touch_cm', 'U') IS NOT NULL DROP TABLE #max_touch_cm      SELECT DISTINCT        pm.ORDER_ID,        MAX(API_REQUESTED_DATE) as MAX_API_REQUESTED_DATE       INTO #max_touch_cm      FROM VISTA_STAGING.dbo.CASH_ORDERS pm      INNER JOIN #distinct_ids di ON di.ORDER_ID = pm.ORDER_ID      GROUP BY pm.ORDER_ID            -- Concatonated fields for CM      IF OBJECT_ID('tempdb..#cm_concat_ord', 'U') IS NOT NULL DROP TABLE #cm_concat_ord      SELECT DISTINCT       ex.[ORDER_ID],       DEALT_AMOUNT = STUFF((           SELECT  ' | ' +  + CAST(FORMAT(DEALT_AMOUNT, '#,0.00') AS VARCHAR(50))          FROM VISTA_REPORTING.dbo.CASH_TRADES ct          WHERE ct.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'CM'  ORDER BY TRANSACTION_NUMBER          FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),       PRODUCT = STUFF((           SELECT  ' | ' +  + CAST(PRODUCT AS VARCHAR(50))          FROM VISTA_REPORTING.dbo.CASH_TRADES ct          WHERE ct.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'CM'  ORDER BY TRANSACTION_NUMBER          FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),       VALUE_DATE = nullif(STUFF((           SELECT  ' | ' +  + CAST(FORMAT(VALUE_DATE, 'dd/MM/yyyy') AS VARCHAR(50))          FROM VISTA_REPORTING.dbo.CASH_TRADES ct          WHERE ct.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'CM'  ORDER BY TRANSACTION_NUMBER          FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''), ''),       VALUE_DATE_orders = STUFF((           SELECT  ' | ' +  + CAST(FORMAT(VALUE_DATE, 'dd/MM/yyyy') AS VARCHAR(50))          FROM VISTA_REPORTING.dbo.CASH_ORDERS ct          WHERE ct.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'CM'          FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),       EXECUTED_DATE_TIME = STUFF((           SELECT  ' | ' +  + CAST(FORMAT(EXECUTED_DATETIME, 'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50))          FROM VISTA_REPORTING.dbo.CASH_TRADES ct          WHERE ct.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'CM'  ORDER BY TRANSACTION_NUMBER          FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),       INSTRUCTION_REMAINING_AMOUNT = STUFF((           SELECT  ' | ' +  + CASE WHEN INSTRUCTION_REMAINING_AMOUNT = '0' THEN '0.0' ELSE CAST(FORMAT(INSTRUCTION_REMAINING_AMOUNT, '#,0.00') AS VARCHAR(50)) END          FROM #TEMP_TRADES_DISTINCT_CM ttdc          WHERE ttdc.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'CM' order by INSTRUCTION_REMAINING_AMOUNT          FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),       [DEALER_NAME_DECODE] = STUFF((           SELECT  ' | ' +  + CAST([DEALER_NAME_DECODE] AS VARCHAR(50))          FROM VISTA_REPORTING.dbo.CASH_TRADES ct          WHERE ct.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'CM'  ORDER BY TRANSACTION_NUMBER          FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, '')      INTO #cm_concat_ord      FROM VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_CASH_TABLE ex      INNER JOIN #distinct_ids di ON di.ORDER_ID = ex.ORDER_ID            --Concatonated fields for AL            IF OBJECT_ID('tempdb..#TEMP_TRADES_DISTINCT', 'U') IS NOT NULL DROP TABLE #TEMP_TRADES_DISTINCT      SELECT --DISTINCT         oc.PM_ORD AS ORD_NUM,         t.MULTI_FUND_ID,         ABS(pm.FACE) AS FACE,        t.TRD_ORIG_FACE,        t.EXECUTION_TIME      INTO #TEMP_TRADES_DISTINCT      FROM VISTA_REPORTING.DBO.TRADES T      LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.TRD_ORD = T.ORD_NUM      LEFT JOIN (SELECT PM.ORD_NUM, PM.FACE, PM.FILL_AMT, PM.TOUCH_COUNT FROM  VISTA_REPORTING.DBO.PM_ORDERS PM INNER JOIN #max_touch_al MOT ON MOT.ORD_NUM = PM.ORD_NUM AND MOT.MAX_TOUCH = PM.TOUCH_COUNT) PM ON OC.PM_ORD = PM.ORD_NUM      INNER JOIN #temp_cash_trades tct ON tct.TRANSACTION_NUMBER = T.MULTI_FUND_ID      WHERE EXISTS (SELECT ORDER_ID FROM VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_CASH_TABLE WHERE ORDER_ID = oc.PM_ORD)                  IF OBJECT_ID('tempdb..#REMAIN_AMT', 'U') IS NOT NULL DROP TABLE #REMAIN_AMT      SELECT --DISTINCT       ORD_NUM AS ORDER_ID,        MULTI_FUND_ID,       SUM(ABS(TRD_ORIG_FACE)) AS [Booked_Amt],       FACE - SUM(ABS(TRD_ORIG_FACE)) AS [Remain_Amt],       'AL' AS SOURCE      INTO #REMAIN_AMT      FROM #TEMP_TRADES_DISTINCT       GROUP BY       ORD_NUM,       MULTI_FUND_ID,       FACE                  IF OBJECT_ID('tempdb..#al_concat_ord', 'U') IS NOT NULL DROP TABLE #al_concat_ord      SELECT DISTINCT       ex.[ORDER_ID],       TRD_ORIG_FACE = STUFF((           SELECT  ' | ' +  + CAST(FORMAT(TRD_ORIG_FACE, '#,0.00') AS VARCHAR(50))          FROM #TEMP_TRADES_DISTINCT tt          WHERE tt.ORD_NUM = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'AL'          ORDER BY MULTI_FUND_ID          FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),       [STATUS] = STUFF((           SELECT  ' | ' +  + CAST([STATUS] AS VARCHAR(50))          FROM VISTA_REPORTING.dbo.PM_ORDERS pm          WHERE pm.[ORD_NUM] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'AL' AND EXISTS (SELECT ORDER_ID FROM VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_CASH_TABLE WHERE ORDER_ID = pm.ORD_NUM)          FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),       EXECUTION_TIME = STUFF((           SELECT  ' | ' +  + CAST(FORMAT(EXECUTION_TIME, 'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50))          FROM #TEMP_TRADES_DISTINCT tt          WHERE tt.ORD_NUM = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'AL'           ORDER BY MULTI_FUND_ID          FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),       INSTRUCTION_COMPLETED_AMOUNT_AL = STUFF((              SELECT  ' | ' + CAST(FORMAT(CONVERT(DECIMAL(38,2),Booked_Amt), '#,0.00') AS VARCHAR(50))              FROM #REMAIN_AMT ra              WHERE (ra.ORDER_ID = EX.ORDER_ID AND SOURCE = EX.DATA_SOURCE AND Booked_Amt is NOT NULL)              FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')          ,1,2,''),       INSTRUCTION_REMAINING_AMOUNT = STUFF((              SELECT  ' | ' + CAST(FORMAT(CONVERT(DECIMAL(38,2),Remain_Amt), '#,0.00') AS VARCHAR(50))              FROM #REMAIN_AMT ra              WHERE (ra.ORDER_ID = ex.ORDER_ID AND SOURCE = EX.DATA_SOURCE AND Remain_Amt is NOT NULL) order by Remain_Amt              FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')          ,1,2,'')      INTO #al_concat_ord      FROM VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_CASH_TABLE ex      INNER JOIN #distinct_ids di ON di.ORDER_ID = ex.ORDER_ID                  IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table      SELECT DISTINCT       COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME], dd.default_dealer) as DEALER_NAME,       co.[HOLDOVER_REASON],       co.[HOLDOVER_REASON_NARRATION],       co.[HOLDOVER_DEALER_NAME] as HOLDOVER_BY, -- Does not say this in mapping table, instead says Holdover By is HOLDOVER_BY, but this does not exist in CASH_ORDERS (?)       coalesce(ct.[CLIENT_FUND_OR_POOL_CODE], co.client_fund_or_pool_code) as CLIENT_FUND_POOL_CODE,       COALESCE(ct.[BASE_FUND_CODE], CO.BASE_FUND_CODE) AS BASE_FUND_CODE,       co.[INSTRUCTED_CURRENCY],       co.[PRODUCT],       FORMAT(co.[INSTRUCTED_AMOUNT], '#,0.00') AS INSTRUCTED_AMOUNT,       COALESCE(CT.TERM, CO.ORDER_TERM) AS TERM,       FORMAT(co.[TRADE_DATE], 'dd/MM/yyyy HH:mm:ss') AS TRADE_DATE,       coalesce(conc_cm.value_date_orders, conc_cm.[VALUE_DATE]) as VALUE_DATE,       FORMAT(COALESCE(ct.[MATURITY_DATE], CO.MATURITY_DATE), 'dd/MM/yyyy HH:mm:ss') AS MATURITY_DATE,       CAST(co.[INSTRUCTION_TYPE] as VARCHAR(20)) as INSTRUCTION_TYPE,       co.[CUSTOM_INSTRUCTION],       co.BUSINESS_GROUP AS BUSINESS_GROUP,       co.[INSTRUCTED_BY],       co.ACCEPTED_BY AS ACCEPTED_BY,       CAST(co.[ASSET_ID] as VARCHAR(20)) as ASSET_ID,       FORMAT(co.INSTRUCTION_RECEIVED_DATE, 'dd/MM/yyyy HH:mm:ss') as INSTRUCTION_RECEIVED_DATE_TIME,       conc_cm.INSTRUCTION_REMAINING_AMOUNT, --(co.[INSTRUCTED_AMOUNT] - ct.[INSTRUCTION_COMPLETED_AMOUNT]) as INSTRUCTION_REMAINING_AMOUNT,       conc_cm.[DEALT_AMOUNT],       conc_cm.EXECUTED_DATE_TIME,       CASE WHEN ex.VG_602 = 1 THEN 'Exception' ELSE '' END AS EXCEPTION,       ex.[ORDER_ID],       CAST(co.[INSTRUCTION_STATUS_DECODE] as VARCHAR(50)) as [INSTRUCTION_STATUS],       co.[PRODUCT_TYPE],          ex.[VG_602_CREATETIME] as CREATE_DATE,          ex.[VG_602] as EXCEPTION_FLAG,       CO.INSTRUCTION_RECEIVED_DATE AS OS_INSTRUCTION_RECEIVED_DATE_TIME,       ex.[DATA_SOURCE] --This needs to be added in VG script      INTO #temp_final_master_table      FROM VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_CASH_TABLE ex      INNER JOIN #distinct_ids di on di.ORDER_ID = ex.ORDER_ID and di.DATA_SOURCE = ex.DATA_SOURCE      LEFT JOIN (SELECT ORDER_ID, CLIENT_FUND_OR_POOL_CODE, BASE_FUND_CODE, PRODUCT_TYPE, MATURITY_DATE, INSTRUCTION_COMPLETED_AMOUNT, DEALER_NAME_DECODE, MAX(EXECUTED_DATETIME) AS [MAX_EXECUTED_DATETIME], TERM, PULL_DATE         FROM VISTA_REPORTING.dbo.CASH_TRADES          GROUP BY ORDER_ID, CLIENT_FUND_OR_POOL_CODE, BASE_FUND_CODE, PRODUCT_TYPE, MATURITY_DATE, INSTRUCTION_COMPLETED_AMOUNT, DEALER_NAME_DECODE, TERM, PULL_DATE) ct on ct.[ORDER_ID] = ex.[ORDER_ID]      LEFT JOIN (SELECT co.ORDER_ID,co.INSTRUCTION_RECEIVED_DATE,co.[PRODUCT_TYPE],co.[PRODUCT],co.[TRADE_DATE],co.[INSTRUCTED_CURRENCY],co.[INSTRUCTED_AMOUNT],co.[ASSET_ID],co.[CUSTOM_INSTRUCTION],co.[INSTRUCTION_TYPE],         co.[INSTRUCTION_STATUS_DECODE],co.[INSTRUCTED_BY],co.[HOLDOVER_DEALER_NAME],co.[HOLDOVER_REASON],co.[HOLDOVER_REASON_NARRATION] , co.BASE_FUND_CODE, co.VALUE_DATE, co.MATURITY_DATE, BUSINESS_GROUP, ACCEPTED_BY, co.[PULL_DATE], co.CLIENT_FUND_OR_POOL_CODE, co.ORDER_TERM         from VISTA_REPORTING.dbo.CASH_ORDERS co          inner join #max_touch_cm cm          on co.ORDER_ID = cm.ORDER_ID          and co.API_REQUESTED_DATE = cm.MAX_API_REQUESTED_DATE) co on ex.[ORDER_ID] = co.[ORDER_ID]      LEFT JOIN #cm_concat_ord conc_cm on conc_cm.[ORDER_ID] = ex.[ORDER_ID]      LEFT JOIN #temp_recent_dealer_cm RCM ON RCM.ORDER_ID = ex.ORDER_ID AND ex.data_SOURCE = 'CM'      LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD ON (TDD.MG_USER_ID  = RCM.DEALER_NAME AND ex.data_SOURCE = 'CM')  AND CAST(COALESCE(CT.PULL_DATE,CO.PULL_DATE) AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE)      LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD2 ON (TDD2.MG_USER_ID  = COALESCE(CO.ACCEPTED_BY, CO.INSTRUCTED_BY) AND ex.data_SOURCE = 'CM') AND CAST(CO.PULL_DATE AS DATE) BETWEEN CAST(TDD2.DATE_FROM AS DATE) AND CAST(TDD2.DATE_TO AS DATE)      LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'EOD Holdovers' AND CAST(CO.PULL_DATE AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)                  WHERE ex.[DATA_SOURCE] = 'CM'            UNION            SELECT DISTINCT       COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME], DD.DEFAULT_DEALER) as DEALER_NAME,       NULL as [HOLDOVER_REASON], -- No value given       NULL as [HOLDOVER_REASON_NARRATION], -- No value given       NULL as HOLDOVER_BY, -- No value given       NULL as CLIENT_FUND_POOL_CODE, -- No value given       t.[PORTFOLIOS_PORTFOLIO_NAME] as [BASE_FUND_CODE],       pm.[CURRENCY] as INSTRUCTED_CURRENCY,       coalesce(pm.SM_SEC_TYPE, t.sm_sec_type) as PRODUCT, -- No value given       FORMAT(PM.FACE, '#,0.00') as INSTRUCTED_AMOUNT, -- Not sure what to use for 'ORDERS.ORD_DETAIL_FACE'?       NULL AS TERM,       FORMAT(t.[TRD_TRADE_DATE], 'dd/MM/yyyy HH:mm:ss') as [TRADE_DATE],       FORMAT(t.[TRD_TRADE_DATE], 'dd/MM/yyyy') as [VALUE_DATE], -- Same as TRADE DATE?       FORMAT(pm.SETTLE_DATE, 'dd/MM/yyyy HH:mm:ss') as [MATURITY_DATE], -- Shouldn't this be MATURITY?       TRAN_TYPE as INSTRUCTION_TYPE, --THIS IS AN ODD ONE       pm.[COMMENTS_VALUE] as [CUSTOM_INSTRUCTION],       CASE        WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP'        WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG'        WHEN (pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM'       ELSE NULL       END AS BUSINESS_GROUP,       pm.[PM] as INSTRUCTED_BY,       ral.TRD_TRADER AS ACCEPTED_BY,       pm.[CUSIP] as ASSET_ID,       FORMAT(pm.AUTH_TIME, 'dd/MM/yyyy HH:mm:ss') as INSTRUCTION_RECEIVED_DATE_TIME,       conc_al.INSTRUCTION_REMAINING_AMOUNT as INSTRUCTION_REMAINING_AMOUNT, --Need confirmation on INSTRUCTED_AMOUNT first to calculate this       conc_al.[TRD_ORIG_FACE] as DEALT_AMOUNT,       conc_al.EXECUTION_TIME as EXECUTED_DATE_TIME,       CASE WHEN ex.VG_602 = 1 THEN 'Exception' ELSE '' END AS EXCEPTION,       ex.[ORDER_ID] as ORDER_ID,       conc_al.[STATUS] as [INSTRUCTION_STATUS],       'Cash Products' as PRODUCT_TYPE, -- No value given          ex.[VG_602_CREATETIME] as CREATE_DATE,          ex.[VG_602] as EXCEPTION_FLAG,       COALESCE(PM.AUTH_TIME, T.MAX_EXECUTED_DATETIME) AS OS_INSTRUCTION_RECEIVED_DATE_TIME,       ex.[DATA_SOURCE]      FROM VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_CASH_TABLE ex      INNER JOIN #distinct_ids di on di.ORDER_ID = ex.ORDER_ID and di.DATA_SOURCE = ex.DATA_SOURCE      LEFT JOIN (select distinct pm.ord_num, CUSIP, COMMENTS_VALUE, CURRENCY, pm, AUTH_TIME, FACE, PULL_DATE, trader, SM_SEC_TYPE, SETTLE_DATE from VISTA_REPORTING.dbo.PM_ORDERS pm      INNER JOIN #max_touch_al al on al.ORD_NUM = pm.ORD_NUM and al.MAX_TOUCH = pm.TOUCH_COUNT) pm on EX.ORDER_ID = pm.[ORD_NUM] AND ex.DATA_SOURCE = 'AL'      LEFT JOIN (select distinct ORD_NUM, TRD_TRADE_DATE, TRD_SETTLE_DATE, PORTFOLIOS_PORTFOLIO_NAME, TRD_TRADER, SM_SEC_GROUP, MAX(EXECUTION_TIME) AS [MAX_EXECUTED_DATETIME] , SM_SEC_TYPE, FUND, TRAN_TYPE         from VISTA_REPORTING.dbo.TRADES         group by ORD_NUM, TRD_TRADE_DATE, TRD_SETTLE_DATE, PORTFOLIOS_PORTFOLIO_NAME, TRD_TRADER, SM_SEC_GROUP, SM_SEC_TYPE, FUND, TRAN_TYPE) t on ex.[ORDER_ID] = t.[ORD_NUM]      LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc on t.[ORD_NUM] = oc.[TRD_ORD]      LEFT JOIN #al_concat_ord conc_al on conc_al.[ORDER_ID] = t.[ORD_NUM]      LEFT JOIN #temp_recent_dealer_al RAL ON RAL.ORD_NUM  = ex.ORDER_ID AND ex.data_SOURCE = 'AL'      LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD ON (TDD.INITIALS = RAL.TRD_TRADER AND ex.data_SOURCE = 'AL')  AND CAST( PM.PULL_DATE AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE)      LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD2 ON  (TDD2.INITIALS = PM.TRADER AND ex.data_SOURCE = 'AL') AND CAST( PM.PULL_DATE AS DATE) BETWEEN CAST(TDD2.DATE_FROM AS DATE) AND CAST(TDD2.DATE_TO AS DATE)      LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'EOD Holdovers' AND CAST( PM.PULL_DATE AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)      LEFT JOIN (SELECT DISTINCT FUND_ID, PORTFOLIO_GROUP_NAME FROM VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY) pgt      ON T.[FUND] = pgt.[FUND_ID]      WHERE ex.[DATA_SOURCE] = 'AL'                  IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_CASH_TABLE', 'U') IS NOT NULL      DELETE FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_CASH_TABLE      WHERE EXISTS (SELECT DISTINCT ORDER_ID      FROM #distinct_ids      WHERE #distinct_ids.ORDER_ID = VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_CASH_TABLE.ORDER_ID)                        IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_CASH_TABLE', 'U') IS NOT NULL      INSERT INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_CASH_TABLE      SELECT *      FROM #temp_final_master_table            ELSE            SELECT *      INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_CASH_TABLE      FROM #temp_final_master_table                  IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL      INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(      'MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_CASH_TABLE', --TABLE_NAME      @START_TIME, --START_TIME      GETDATE(), --END_TIME      DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS      CAST(GETDATE() as date)) --COMPLETION_DATE                  IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids      IF OBJECT_ID('tempdb..#temp_cash_trades', 'U') IS NOT NULL DROP TABLE #temp_cash_trades      IF OBJECT_ID('tempdb..#TEMP_TRADES_DISTINCT_CM', 'U') IS NOT NULL DROP TABLE #TEMP_TRADES_DISTINCT_CM      IF OBJECT_ID('tempdb..#temp_recent_dealer_al', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_al      IF OBJECT_ID('tempdb..#temp_recent_dealer_cm', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_cm      IF OBJECT_ID('tempdb..#max_touch_al', 'U') IS NOT NULL DROP TABLE #max_touch_al      IF OBJECT_ID('tempdb..#max_touch_cm', 'U') IS NOT NULL DROP TABLE #max_touch_cm      IF OBJECT_ID('tempdb..#cm_concat_ord', 'U') IS NOT NULL DROP TABLE #cm_concat_ord      IF OBJECT_ID('tempdb..#TEMP_TRADES_DISTINCT', 'U') IS NOT NULL DROP TABLE #TEMP_TRADES_DISTINCT      IF OBJECT_ID('tempdb..#REMAIN_AMT', 'U') IS NOT NULL DROP TABLE #REMAIN_AMT      IF OBJECT_ID('tempdb..#al_concat_ord', 'U') IS NOT NULL DROP TABLE #al_concat_ord      IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table                  IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                    WHERE name = N'mmf_vg602_cash_idx1')             DROP INDEX mmf_vg602_cash_idx1              ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_CASH_TABLE                    CREATE NONCLUSTERED INDEX mmf_vg602_cash_idx1             ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_CASH_TABLE              (INSTRUCTION_RECEIVED_DATE_TIME)            IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                    WHERE name = N'mmf_vg602_cash_idx2')             DROP INDEX mmf_vg602_cash_idx2              ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_CASH_TABLE                    CREATE NONCLUSTERED INDEX mmf_vg602_cash_idx2             ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_CASH_TABLE             (EXCEPTION_FLAG)            IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                    WHERE name = N'mmf_vg602_cash_idx3')             DROP INDEX mmf_vg602_cash_idx3              ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_CASH_TABLE                    CREATE NONCLUSTERED INDEX mmf_vg602_cash_idx3             ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_CASH_TABLE             (CREATE_DATE)                  END            --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_PM_ORDER_TABLE_VG_602_EOD_HOLDOVERS_FX  CreateDate: 2025-06-26 18:03:06.437  ModifyDate: 2025-06-26 18:03:06.437  --- DEFINITION START ---  -- =============================================    -- Author:  <Samad, Mehreen>    -- Create date: <08/07/2019>    -- Description:     -- <Master exception table for EOD Holdovers    -- Exception test for FX.>    -- =============================================        -- ***************VERSION CONTROL***************    --2022-02-09; Matej Miter - created for Jira:    --SURVG-639 - Changed instructed amount field to be taken from fxo notional amount or notional amount far instead of gbp values; This should be align accross all reports    -- *********************************************        CREATE PROCEDURE [dbo].[MASTER_PM_ORDER_TABLE_VG_602_EOD_HOLDOVERS_FX]     -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,         AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;              DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()             IF OBJECT_ID('tempdb..#distinct_ids_al', 'U') IS NOT NULL DROP TABLE #distinct_ids_al     SELECT DISTINCT       pr.ORD_NUM as TRD_ORD,      oc.PM_ORD AS ORD_NUM,      pr.MULTI_FUND_ID     INTO #distinct_ids_al     FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = pr.ORD_NUM     WHERE pr.DEALING_DESK = 'FX'             IF OBJECT_ID('tempdb..#distinct_ids_fx', 'U') IS NOT NULL DROP TABLE #distinct_ids_fx     SELECT DISTINCT      fxt.ORDER_ID AS TRD_ORD,      vg.FXM_ORDER_ID,      fxt.TRADE_ID AS MULTI_FUND_ID      INTO #distinct_ids_fx     FROM Vista_Staging.dbo.VG_602_EOD_HOLDOVERS_FX_TABLE vg     LEFT JOIN Vista_Reporting.dbo.FX_ORDERS fxo ON fxo.FXM_ORDER_ID = vg.FXM_ORDER_ID     LEFT JOIN Vista_Reporting.dbo.FX_TRADES fxt ON fxt.ORDER_ID = fxo.FXM_ORDER_ID               IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE', 'U') IS NOT NULL     DELETE FROM #distinct_ids_fx where NOT EXISTS (SELECT DISTINCT od.FXM_ORDER_ID                   FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_FX od                   WHERE od.FXM_ORDER_ID = #distinct_ids_fx.FXM_ORDER_ID)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE', 'U') IS NOT NULL     DELETE FROM #distinct_ids_al where NOT EXISTS (SELECT DISTINCT od.PM_ORD                   FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                   WHERE od.PM_ORD = #distinct_ids_al.ORD_NUM)             IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE  #distinct_ids     SELECT *      INTO #distinct_ids     FROM #distinct_ids_al         UNION ALL         SELECT *      FROM #distinct_ids_fx             IF OBJECT_ID('tempdb..#max_touch_pm', 'U') IS NOT NULL DROP TABLE #max_touch_pm     SELECT DISTINCT       pm.ORD_NUM,       MAX(pm.TOUCH_COUNT) as MAX_TOUCH      INTO #max_touch_pm     FROM VISTA_REPORTING.dbo.PM_ORDERS pm     WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = pm.ORD_NUM)     GROUP BY ORD_NUM             IF OBJECT_ID('tempdb..#max_touch_fxo', 'U') IS NOT NULL DROP TABLE #max_touch_fxo     SELECT DISTINCT       FXM_ORDER_ID,       MAX(API_REQUESTED_DATE) as MAX_API_REQUESTED_DATE      INTO #max_touch_fxo     FROM VISTA_REPORTING.dbo.FX_ORDERS     GROUP BY FXM_ORDER_ID             IF OBJECT_ID('tempdb..#max_touch_fxt', 'U') IS NOT NULL DROP TABLE #max_touch_fxt     SELECT DISTINCT       t.ORDER_ID,       MAX(t.API_REQUESTED_DATE) as MAX_API_REQUESTED_DATE      INTO #max_touch_fxt     FROM VISTA_REPORTING.dbo.FX_TRADES t     WHERE EXISTS (SELECT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = t.ORDER_ID)     GROUP BY ORDER_ID             --FX Concatonated fields     IF OBJECT_ID('tempdb..#conc_fx', 'U') IS NOT NULL DROP TABLE #conc_fx      SELECT DISTINCT      ex.[FXM_ORDER_ID],      TRADE_VENUE = STUFF((          SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),TRADE_VENUE)         FROM VISTA_REPORTING.dbo.FX_ORDERS fxo         WHERE fxo.[FXM_ORDER_ID] = ex.[FXM_ORDER_ID] and ex.[DATA_SOURCE] = 'FX'         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),      HOLDOVER_DATE_TIME = STUFF((          SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),FORMAT(HOLDOVER_DATE_TIME,'dd/MM/yyyy HH:mm:ss'))         FROM VISTA_REPORTING.dbo.FX_ORDERS fxo         WHERE fxo.[FXM_ORDER_ID] = ex.[FXM_ORDER_ID] and ex.[DATA_SOURCE] = 'FX'         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),      HOLDOVER_REASON = STUFF((          SELECT DISTINCT ' | ' + CONVERT(VARCHAR(MAX),HOLDOVER_REASON)         FROM VISTA_REPORTING.dbo.FX_ORDERS fxo         WHERE fxo.[FXM_ORDER_ID] = ex.[FXM_ORDER_ID] and ex.[DATA_SOURCE] = 'FX'         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),      INSTRUCTION_TYPE = STUFF((          SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),INSTRUCTION_TYPE)         FROM VISTA_REPORTING.dbo.FX_ORDERS fxo         WHERE fxo.[FXM_ORDER_ID] = ex.[FXM_ORDER_ID] and ex.[DATA_SOURCE] = 'FX'         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),      NR_LEG_PRODUCT = STUFF((          SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),NR_LEG_PRODUCT)         FROM VISTA_REPORTING.dbo.FX_ORDERS fxo         WHERE fxo.[FXM_ORDER_ID] = ex.[FXM_ORDER_ID] and ex.[DATA_SOURCE] = 'FX'         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'')     INTO #conc_fx     FROM VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_FX_TABLE ex     WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ex.FXM_ORDER_ID)             --Create Master table      IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     SELECT DISTINCT      COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) as DEALER_NAME,      FORMAT(fxo.[INSTRUCTION_RECEIVED_DATE_TIME],'dd/MM/yyyy HH:mm:ss') as ORDER_RECEIVED_DATE_TIME,      NULL as PM_ORDER_STATUS,      fxo.[INSTRUCTION_STATUS],      cc_fx.[HOLDOVER_REASON],      fxo.[HOLDOVER_REASON_NARRATION],      cc_fx.[HOLDOVER_DATE_TIME],      FORMAT(fxt.[ACCEPTED_DATE_TIME],'dd/MM/yyyy HH:mm:ss') as ACCEPTED_DATE_TIME, --Not given in Mapping table but I'm guessing it's this      FORMAT(fxt.[MARKET_ARRIVAL_DATE_TIME],'dd/MM/yyyy HH:mm:ss') as MARKET_ARRIVAL_DATE_TIME,      FORMAT(fxt.[EXECUTED_DATE_TIME],'dd/MM/yyyy HH:mm:ss') as EXECUTED_DATE_TIME,      fxo.[CLIENT_FUND],      fxo.[BASE_FUND],      cc_fx.[INSTRUCTION_TYPE] as PRODUCT,      CASE WHEN FXO.FR_LEG_PRODUCT IS NULL   THEN CONVERT(VARCHAR(50),FXO.NR_LEG_PRODUCT)         WHEN FXO.FR_LEG_PRODUCT IS NOT NULL  THEN CONCAT(FXO.NR_LEG_PRODUCT, ' | ', FXO.FR_LEG_PRODUCT) END AS FXM_PRODUCT,      CASE WHEN NULLIF(FXO.ACTION2,'') IS NULL  THEN CONVERT(VARCHAR(50),FXO.ACTION1)         WHEN NULLIF(FXO.ACTION2,'') IS NOT NULL THEN (FXO.ACTION1 + ISNULL(' | ' + NULLIF(FXO.ACTION2,''),'')) END AS ACTION,      CASE WHEN FXO.NOTIONAL_CCY_FAR IS NULL   THEN CONVERT(VARCHAR(50),FXO.NOTIONAL_CCY)         WHEN FXO.NOTIONAL_CCY_FAR IS NOT NULL  THEN CONCAT(FXO.NOTIONAL_CCY, ' | ', FXO.NOTIONAL_CCY_FAR) END AS INSTRUCTED_CURRENCY,      CASE WHEN FXO.BUY_CCY_LEG2 IS NULL    THEN CONVERT(VARCHAR(50),FXO.BUY_CCY)         WHEN FXO.BUY_CCY_LEG2 IS NOT NULL   THEN CONCAT(FXO.BUY_CCY, ' | ', FXO.BUY_CCY_LEG2) END AS BUY_CURRENCY,      CASE WHEN FXO.SELL_CCY_LEG2 IS NULL    THEN CONVERT(VARCHAR(50),FXO.SELL_CCY)         WHEN FXO.SELL_CCY_LEG2 IS NOT NULL   THEN CONCAT(FXO.SELL_CCY, ' | ', FXO.SELL_CCY_LEG2) END AS SELL_CURRENCY,      --SURVG-639      CASE WHEN FXO.NOTIONAL_AMOUNT_FAR IS NULL THEN CONVERT(VARCHAR(50),FORMAT(CONVERT(DECIMAL(38,2),FXO.NOTIONAL_AMOUNT), '#,0.00'))         WHEN FXO.NOTIONAL_AMOUNT_FAR IS NOT NULL THEN CONCAT(FORMAT(CONVERT(DECIMAL(38,2),FXO.NOTIONAL_AMOUNT), '#,0.00'), ' | ',FORMAT(CONVERT(DECIMAL(38,2),FXO.NOTIONAL_AMOUNT_FAR), '#,0.00')) END AS INSTRUCTED_AMOUNT,      --End of SURVG-639      FORMAT(fxt.[TRADE_DATE],'dd/MM/yyyy') as TRADE_DATE,      CASE WHEN FXO.VALUE_DATE_FAR IS NULL   THEN CONVERT(VARCHAR(50),FORMAT(FXO.VALUE_DATE_NEAR,'dd/MM/yyyy'))         WHEN FXO.VALUE_DATE_FAR IS NOT NULL  THEN CONCAT(FORMAT(FXO.VALUE_DATE_NEAR,'dd/MM/yyyy'), ' | ', FORMAT(FXO.VALUE_DATE_FAR,'dd/MM/yyyy')) END AS VALUE_DATE,      CASE WHEN FXT.EXECUTED_AMOUNT_FAR IS NULL  THEN CONVERT(VARCHAR(50),FORMAT(CONVERT(DECIMAL(38,2),FXT.EXECUTED_AMOUNT), '#,0.00'))         WHEN FXT.EXECUTED_AMOUNT_FAR IS NOT NULL THEN CONCAT(FORMAT(CONVERT(DECIMAL(38,2),FXT.EXECUTED_AMOUNT), '#,0.00'), ' | ' ,FORMAT(CONVERT(DECIMAL(38,2), FXT.EXECUTED_AMOUNT_FAR), '#,0.00')) END AS EXECUTED_AMOUNT,      fxo.[NET_EXPOSURE_ORDER] as NET_EXPOSURE,      COALESCE(fxo.[PM],fxo.[INSTRUCTED_BY]) as INSTRUCTED_BY,      fxo.[SWAP_TYPE],      fxo.[MARKER],      CASE WHEN FXT.FIXING_DATE_LEG2 IS NULL   THEN CONVERT(VARCHAR(50),FORMAT(FXT.FIXING_DATE,'dd/MM/yyyy'))         WHEN FXT.FIXING_DATE_LEG2 IS NOT NULL  THEN CONCAT(FORMAT(FXT.FIXING_DATE,'dd/MM/yyyy'), ' | ', FORMAT(FXT.FIXING_DATE_LEG2,'dd/MM/yyyy')) END AS FIXING_DATE,      fxo.[BUSINESS_GROUP],      fxo.[FM_COMMENTS],      fxo.[CREATED_FROM] as ORDER_SOURCE,      fxo.[TRADE_PURPOSE],      cc_fx.[TRADE_VENUE] as PLACEMENT_VENUE,      fxt.[EXECUTED_BANK],      CASE WHEN FXT.EXECUTED_RATE_FAR IS NULL   THEN CONVERT(VARCHAR(50),FXT.EXECUTED_RATE)         WHEN FXT.EXECUTED_RATE_FAR IS NOT NULL  THEN CONCAT(FXT.EXECUTED_RATE, ' | ', FXT.EXECUTED_RATE_FAR) END AS ALL_IN_RATE,      fxt.[SWAP_POINTS],      ex.[FXM_ORDER_ID] as ORDER_ID,      CASE       WHEN fxo.[ORD_NUM] IS NULL THEN ex.[FXM_ORDER_ID]      ELSE fxo.[ORD_NUM]      END AS PM_ORDER_ID,      fxo.[ALADDIN_COMMON_ID] as ALADDIN_COMMON_IDENTIFIER,      FORMAT(fxo.[AUTH_TIME],'dd/MM/yyyy HH:mm:ss') as AUTHORISED_DATE_TIME,      ex.[VG_602_CREATETIME] as CREATE_DATE,      ex.[VG_602] as EXCEPTION_FLAG,      ex.[DATA_SOURCE],      fxo.[INSTRUCTION_RECEIVED_DATE_TIME] as OS_ORDER_RECEIVED_DATE_TIME     INTO #temp_final_master_table     FROM VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_FX_TABLE ex     left join (SELECT DISTINCT fxo.* FROM VISTA_REPORTING.dbo.FX_ORDERS fxo           inner join #max_touch_fxo mtf on mtf.[FXM_ORDER_ID] = fxo.[FXM_ORDER_ID]                 and mtf.[MAX_API_REQUESTED_DATE] = fxo.[API_REQUESTED_DATE]) fxo on fxo.[FXM_ORDER_ID] = ex.[FXM_ORDER_ID]     left join (SELECT DISTINCT FXT.* FROM VISTA_REPORTING.dbo.FX_TRADES fxt           inner join #max_touch_fxt mtf on mtf.[ORDER_ID] = fxt.[ORDER_ID]                 and mtf.[MAX_API_REQUESTED_DATE] = fxt.[API_REQUESTED_DATE]) fxt on fxt.[ORDER_ID] = ex.[FXM_ORDER_ID]     left join #conc_fx cc_fx on ex.[FXM_ORDER_ID] = cc_fx.[FXM_ORDER_ID]     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd on tdd.[MG_USER_ID] = fxt.[DEALT_BY]                      AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE)                                       AND CAST(tdd.[DATE_TO] AS DATE)     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2 on tdd2.[MG_USER_ID] = fxt.[ACCEPTED_BY]                      AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE)                                       AND CAST(tdd2.[DATE_TO] AS DATE)     left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd on dd.[REPORT_NAME] = 'EOD Holdovers'                      AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE)                                       AND CAST(dd.[DATE_TO] AS DATE)     WHERE ex.[DATA_SOURCE] = 'FX' AND EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ex.FXM_ORDER_ID)         UNION         SELECT DISTINCT      COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) as [DEALER_NAME],      FORMAT(pm.[AUTH_TIME],'dd/MM/yyyy HH:mm:ss') as [ORDER_RECEIVED_DATE_TIME],      pm.[STATUS] as [PM_ORDER_STATUS],      pl.[STATUS] as [INSTRUCTION_STATUS],      NULL as [HOLDOVER_REASON],      NULL as  [HOLDOVER_REASON_NARRATION],      CAST(NULL AS varchar(50)) as [HOLDOVER_DATE_TIME],      FORMAT(pm.[ACTIVE_TIME],'dd/MM/yyyy HH:mm:ss') as [ACCEPTED_DATE_TIME], --Not given in Mapping table      FORMAT(t.[EXECUTION_TIME],'dd/MM/yyyy HH:mm:ss') as [MARKET_ARRIVAL_DATE_TIME],      FORMAT(t.[EXECUTION_TIME],'dd/MM/yyyy HH:mm:ss') as [EXECUTED_DATE_TIME],      NULL as [CLIENT_FUND],      t.[PORTFOLIOS_PORTFOLIO_NAME] as [BASE_FUND],       pm.[SM_SEC_TYPE] as [PRODUCT],      NULL as [FXM_PRODUCT],      NULL as [ACTION],      CAST(t.[FX_PAY_CURR] as varchar(50)) as [INSTRUCTED_CURRENCY],      NULL as [BUY_CURRENCY],      NULL as [SELL_CURRENCY],      CAST(FORMAT(pl.[QUANTITY], '#,0.00') as varchar(50)) as [INSTRUCTED_AMOUNT],      FORMAT(pm.[OPEN_DATE],'dd/MM/yyyy') as TRADE_DATE,      (CONVERT(VARCHAR(50),FORMAT(pm.[SETTLE_DATE],'dd/MM/yyyy')) + ISNULL(' | ' + CONVERT(VARCHAR(50),FORMAT(pm.[MATURITY],'dd/MM/yyyy')),'')) as [VALUE_DATE],      CAST(FORMAT(pm.[FILL_AMT], '#,0.00') as varchar(50)) as [EXECUTED_AMOUNT],      NULL as [NET_EXPOSURE],      pm.[PM] as [INSTRUCTED_BY],      NULL as [SWAP_TYPE],      NULL as [MARKER],      CAST(NULL AS varchar(50)) as [FIXING_DATE], --Given as Trades.SECURITY.SMARTCUT.FXNDF_ANNOUNCE_DATE      CASE       WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP'       WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG'       WHEN (pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM'      ELSE NULL      END AS [BUSINESS_GROUP], --Guessing the logic is same as DMG?      pm.[COMMENTS_VALUE] as [FM_COMMENTS],      'Aladdin' as [ORDER_SOURCE], --N/A given as mapping field, using this as assumption (?)      t.[TRD_PURPOSE] as [TRADE_PURPOSE],      pl.[VENUE] as [PLACEMENT_VENUE],      pl.[BROKER] as [EXECUTED_BANK],      CAST(COALESCE(pl.[AVG_PRICE],t.[FX_PRICE]) as varchar(50)) as [ALL_IN_RATE],      NULL as [SWAP_POINTS],      ex.[FXM_ORDER_ID] as [ORDER_ID],      pm.[ORD_NUM] as PM_ORDER_ID,      r.[REQUEST_ID] as [ALADDIN_COMMON_IDENTIFIER],      FORMAT(pm.[AUTH_TIME],'dd/MM/yyyy HH:mm:ss') as [AUTHORISED_DATE_TIME],      ex.[VG_602_CREATETIME] as [CREATE_DATE],      ex.[VG_602] as [EXCEPTION_FLAG],      ex.[DATA_SOURCE],      pm.[AUTH_TIME] as OS_ORDER_RECEIVED_DATE_TIME     FROM VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_FX_TABLE ex     left join VISTA_REPORTING.dbo.PM_ORDERS pm on ex.[FXM_ORDER_ID] = pm.[ORD_NUM]     inner join #max_touch_pm mtt on pm.[ORD_NUM] = mtt.[ORD_NUM] and pm.[TOUCH_COUNT] = mtt.[MAX_TOUCH]     left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on pm.[ORD_NUM] = oc.[PM_ORD]     left join VISTA_REPORTING.dbo.TRADES t on ex.[FXM_ORDER_ID] = t.[ORD_NUM]     left join (SELECT DISTINCT FUND_ID, PORTFOLIO_GROUP_NAME FROM VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY) pgt on t.[FUND] = pgt.[FUND_ID]     left join (SELECT DISTINCT ORD_NUM, PLACEMENT_NUM, [STATUS], QUANTITY, [BROKER], AVG_PRICE, VENUE FROM VISTA_REPORTING.dbo.PLACEMENTS) pl on pm.[ORD_NUM] = pl.[ORD_NUM]     left join (SELECT PLACEMENT_NUM, REQUEST_ID FROM VISTA_STAGING.dbo.REQUEST_LOOKUP) r on pl.[PLACEMENT_NUM] = r.[PLACEMENT_NUM]     left join VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd on tdd.[INITIALS]  = t.[TRD_TRADER] AND CAST(t.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2 on tdd2.[INITIALS] = pm.[TRADER] AND CAST(pm.[PULL_DATE] AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)     left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd on dd.[REPORT_NAME] = 'EOD Holdovers' AND CAST(COALESCE(t.[PULL_DATE],pm.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)     WHERE ex.[DATA_SOURCE] = 'AL' AND EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ex.FXM_ORDER_ID)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE', 'U') IS NOT NULL     DELETE FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE     WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM=ORDER_ID)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE     SELECT *     FROM #temp_final_master_table         ELSE         SELECT *     INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE     FROM #temp_final_master_table             IF OBJECT_ID('tempdb..#max_touch_pm', 'U') IS NOT NULL DROP TABLE #max_touch_pm     IF OBJECT_ID('tempdb..#conc_fx', 'U') IS NOT NULL DROP TABLE #conc_fx     IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     IF OBJECT_ID('tempdb..#distinct_ids_al', 'U') IS NOT NULL DROP TABLE #distinct_ids_al     IF OBJECT_ID('tempdb..#distinct_ids_fx', 'U') IS NOT NULL DROP TABLE #distinct_ids_fx     IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE  #distinct_ids             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg602_fx_idx1')           DROP INDEX mmf_vg602_fx_idx1      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg602_fx_idx1     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE      (ORDER_ID)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg602_fx_idx2')           DROP INDEX mmf_vg602_fx_idx2      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg602_fx_idx2     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE      (AUTHORISED_DATE_TIME)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg602_fx_idx3')           DROP INDEX mmf_vg602_fx_idx3      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg602_fx_idx3     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE      (DEALER_NAME)              IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg602_fx_idx4')           DROP INDEX mmf_vg602_fx_idx4      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg602_fx_idx4     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE     (CREATE_DATE)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg602_fx_idx5')           DROP INDEX mmf_vg602_fx_idx5      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg602_fx_idx5     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE      (EXCEPTION_FLAG)              IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg602_fx_idx6')           DROP INDEX mmf_vg602_fx_idx6      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg602_fx_idx6     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE     (ORDER_RECEIVED_DATE_TIME)              IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(     'MASTER_PM_ORDER_VG_602_EOD_HOLDOVERS_FX_TABLE', --TABLE_NAME     @START_TIME, --START_TIME     GETDATE(), --END_TIME     DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS     CAST(GETDATE() as date)) --COMPLETION_DATE            END            --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_PM_ORDER_TABLE_VG_603_LARGE_TRADES_CASH  CreateDate: 2025-06-26 18:04:32.313  ModifyDate: 2025-06-26 18:04:32.313  --- DEFINITION START ---  -- =============================================    -- Author:  <LIZZIE REYNOLDS>    -- Create date: <19/06/2019>    -- Description: <MASTER TABLE SCRIPT FOR LARGE TRADES NEEDS TO CHANGE TO ORDER LEVEL>        --2022-03-23: Matej Miter created for jitra:    --SURVG-666 -Added filter to not show underlying cancelled trades and it's data within orders of this report     -- =============================================    CREATE PROCEDURE [dbo].[MASTER_PM_ORDER_TABLE_VG_603_LARGE_TRADES_CASH]        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;              --Used to track total time stored procedure took to run     DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()        IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids    SELECT DISTINCT ORDER_ID, SOURCE    INTO #distinct_ids    FROM VISTA_STAGING.DBO.VG_603_LARGE_TRADES_CASH_TABLE            --If the master table doesn't exist then we want to use all the data available, otherwise just the most recent data    IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_CASH_TABLE', 'U') IS NOT NULL    DELETE FROM #distinct_ids     where NOT EXISTS (SELECT od.ORDER_ID          FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_CASH od          WHERE od.ORDER_ID = #distinct_ids.ORDER_ID)    AND #distinct_ids.SOURCE = 'CM'        IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_CASH_TABLE', 'U') IS NOT NULL    DELETE FROM #distinct_ids     where NOT EXISTS (SELECT od.PM_ORD          FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od          WHERE od.PM_ORD = #distinct_ids.ORDER_ID)    AND #distinct_ids.SOURCE = 'AL'            IF OBJECT_ID('tempdb..#temp_cash_trades', 'U') IS NOT NULL DROP TABLE #temp_cash_trades    SELECT DISTINCT t.TRANSACTION_NUMBER    into #temp_cash_trades    from Vista_Reporting.dbo.CASH_TRADES t    INNER JOIN #distinct_ids di ON di.ORDER_ID = t.ORDER_ID        UNION        SELECT DISTINCT tr.MULTI_FUND_ID    FROM Vista_Reporting.dbo.ORDERS_CROSS oc    INNER JOIN #distinct_ids di ON di.ORDER_ID = oc.PM_ORD    LEFT JOIN Vista_Reporting.dbo.TRADES tr on oc.TRD_ORD = tr.ORD_NUM            IF OBJECT_ID('tempdb..#temp_max_trade_touch', 'U') IS NOT NULL DROP TABLE #temp_max_trade_touch    SELECT     MULTI_FUND_ID,     MAX(TOUCH_COUNT) AS MAX_TOUCH    INTO #temp_max_trade_touch    FROM VISTA_REPORTING.dbo.TRADES t    INNER JOIN #temp_cash_trades c ON C.TRANSACTION_NUMBER = t.MULTI_FUND_ID    GROUP BY MULTI_FUND_ID            IF OBJECT_ID('tempdb..#temp_max_ORDER_touch', 'U') IS NOT NULL DROP TABLE #temp_max_ORDER_touch    SELECT     ORD_NUM,     MAX(TOUCH_COUNT) AS MAX_TOUCH    INTO #temp_max_ORDER_touch    FROM VISTA_REPORTING.dbo.PM_ORDERS pm    INNER JOIN #distinct_ids di ON di.ORDER_ID = pm.ORD_NUM    GROUP BY ORD_NUM            IF OBJECT_ID('tempdb..#temp_max_ORDER_CM', 'U') IS NOT NULL DROP TABLE #temp_max_ORDER_CM    SELECT DISTINCT    co.ORDER_ID,    MAX(api_requested_date) as max_date    INTO #temp_max_order_cm    FROM VISTA_REPORTING.dbo.CASH_ORDERS co    INNER JOIN #distinct_ids di ON di.ORDER_ID = co.ORDER_ID    GROUP BY co.ORDER_ID            IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades    SELECT      ct.TRANSACTION_NUMBER,     MAX(API_REQUESTED_DATE) AS MAX_API_REQ    INTO #temp_max_req_trades    FROM VISTA_REPORTING.dbo.CASH_TRADES ct    INNER JOIN #temp_cash_trades t ON T.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER    GROUP BY ct.TRANSACTION_NUMBER            IF OBJECT_ID('tempdb..#temp_recent_dealer_al', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_al    select distinct oc.PM_ORD as ORD_NUM,     trd_trader     into #temp_recent_dealer_al     from VISTA_REPORTING.dbo.TRADES t     left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on oc.TRD_ORD = t.ORD_NUM     INNER JOIN (SELECT        OC.PM_ORD AS ORD_NUM,        MAX(EXECUTION_TIME) AS MAX_EXEC,        MAX(TOUCH_COUNT) AS MAX_TOUCH        FROM VISTA_REPORTING.dbo.TRADES t        LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS OC ON OC.TRD_ORD = t.ORD_NUM        GROUP BY OC.PM_ORD) T2 ON T2.ORD_NUM = OC.PM_ORD               AND T2.MAX_EXEC = t.EXECUTION_TIME              AND T2.MAX_TOUCH = t.TOUCH_COUNT     INNER JOIN #temp_cash_trades ct ON ct.TRANSACTION_NUMBER = t.MULTI_FUND_ID            IF OBJECT_ID('tempdb..#temp_recent_dealer_cm', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_cm    SELECT DISTINCT    ct.ORDER_ID,           ct.DEALER_NAME    into #temp_recent_dealer_cm    FROM VISTA_REPORTING.dbo.CASH_TRADES ct    INNER JOIN (SELECT                   ORDER_ID,                  MAX(EXECUTED_DATETIME) AS MAX_EXEC,                  MAX(API_REQUESTED_DATE) AS MAX_API_REQ                  FROM VISTA_REPORTING.dbo.CASH_TRADES                  GROUP BY ORDER_ID) ct2 ON nullif(ct2.ORDER_ID, '0') = ct.ORDER_ID                                             AND ct2.MAX_EXEC = ct.EXECUTED_DATETIME                                            AND ct2.MAX_API_REQ = ct.API_REQUESTED_DATE    INNER JOIN #temp_cash_trades t ON t.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER        --SURVG-666 - for all fields in these table additional filter has been applied to capture only records from not cancelled trades    IF OBJECT_ID('tempdb..#temp_mf_conc', 'U') IS NOT NULL DROP TABLE #temp_mf_conc    SELECT distinct     e.[ORDER_ID]     ,CASE WHEN e.SOURCE = 'AL' THEN T.MULTI_FUND_ID WHEN e.SOURCE = 'CM' and CT.TRANSACTION_STATUS_DECODE != 'Cancelled' THEN CT.TRANSACTION_NUMBER END AS [TRANSACTION_NUMBER]     ,CASE WHEN e.SOURCE = 'AL' THEN T.EXECUTION_TIME WHEN e.SOURCE = 'CM' and CT.TRANSACTION_STATUS_DECODE != 'Cancelled' THEN CT.EXECUTED_DATETIME END AS  [EXECUTED_DATE_TIME]     ,CASE WHEN e.SOURCE = 'AL' THEN T.TRD_ORIG_FACE WHEN e.SOURCE = 'CM' and CT.TRANSACTION_STATUS_DECODE != 'Cancelled' THEN CT.DEALT_AMOUNT END AS  [DEALT_AMOUNT]     ,CASE WHEN e.SOURCE = 'AL' THEN T.TRD_PRICE WHEN e.SOURCE = 'CM'  and CT.TRANSACTION_STATUS_DECODE != 'Cancelled' THEN CT.EXECUTED_RATE END AS [EXECUTED_RATE]     ,CASE WHEN e.SOURCE = 'AL' THEN T.TRD_EX_BROKER_CODE WHEN e.SOURCE = 'CM' and CT.TRANSACTION_STATUS_DECODE != 'Cancelled' THEN CT.BANK END AS  [BANK] --NOT SURE ABOUT ALADDIN ENTRY HERE     ,CASE WHEN e.SOURCE = 'AL' THEN T.TRD_ENTRY_TIME WHEN e.SOURCE = 'CM' and CT.TRANSACTION_STATUS_DECODE != 'Cancelled' THEN CT.UPLOADED_DATE_TIME END AS  [UPLOADED_DATE_TIME]     ,CASE WHEN e.SOURCE = 'AL' THEN FORMAT(convert(decimal(38,2),T.NET_CONSIDERATION_GBP), '#,0.00') WHEN e.SOURCE = 'CM' and CT.TRANSACTION_STATUS_DECODE != 'Cancelled' THEN FORMAT(convert(decimal(28,2), CT.DEALT_AMOUNT_GBP), '#,0.00') END AS GBP_EQUIVALENT_TRANSACTION     ,e.SOURCE     ,CASE WHEN e.SOURCE = 'AL' THEN T.TRAN_TYPE WHEN e.SOURCE = 'CM' THEN CT.TRANSACTION_TYPE END AS [TRANSACTION_TYPE]     INTO #temp_mf_conc     FROM VISTA_STAGING.DBO.VG_603_LARGE_TRADES_CASH_TABLE e     LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.PM_ORD = e.ORDER_ID AND e.SOURCE = 'AL'     LEFT JOIN (SELECT DISTINCT ORD_NUM,  T.MULTI_FUND_ID, EXECUTION_TIME,TRAN_TYPE,  TRD_ORIG_FACE, TRD_PRICE, TRD_EX_BROKER_CODE, TRD_ENTRY_TIME,  PULL_DATE, TOUCH_COUNT, NET_CONSIDERATION_GBP FROM VISTA_REPORTING.DBO.TRADES T     INNER JOIN #temp_max_trade_touch mtt ON mtt.MULTI_FUND_ID=t.MULTI_FUND_ID AND mtt.MAX_TOUCH=t.TOUCH_COUNT) T ON T.ORD_NUM = OC.TRD_ORD     LEFT JOIN (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER, EXECUTED_DATETIME, DEALT_AMOUNT, EXECUTED_RATE,TRANSACTION_TYPE, BANK, UPLOADED_DATE_TIME,  PULL_DATE, DEALT_AMOUNT_GBP,TRANSACTION_STATUS_DECODE FROM VISTA_REPORTING.DBO.CASH_TRADES) CT ON CT.ORDER_ID = e.ORDER_ID AND e.SOURCE = 'CM'     INNER JOIN #distinct_ids di ON di.ORDER_ID = e.ORDER_ID    --End of SURVG-666        IF OBJECT_ID('tempdb..#temp_order_conc', 'U') IS NOT NULL DROP TABLE #temp_order_conc    SELECT DISTINCT      e.ORDER_ID     ,CASE WHEN e.SOURCE = 'AL' THEN CAST(ASD.STATUS_DECODE AS VARCHAR(20)) WHEN e.SOURCE = 'CM' THEN CAST(CO.INSTRUCTION_STATUS_DECODE AS VARCHAR(20)) END AS [INSTRUCTION_STATUS]        ,CASE WHEN e.SOURCE = 'AL' THEN CAST(ASD.STATUS_DECODE AS VARCHAR(20)) WHEN e.SOURCE = 'CM' THEN CAST(CT.TRANSACTION_STATUS_DECODE AS VARCHAR(20)) END AS [TRANSACTION_STATUS]     ,CASE WHEN e.SOURCE = 'AL' THEN PM.AUTH_TIME WHEN e.SOURCE = 'CM' THEN CO.INSTRUCTION_RECEIVED_DATE END AS [INSTRUCTION_RECEIVED_DATE_TIME]      ,e.SOURCE     ,CASE WHEN e.SOURCE = 'AL' THEN T.TRAN_TYPE WHEN e.SOURCE = 'CM' THEN CT.TRANSACTION_TYPE END AS [TRANSACTION_TYPE]     INTO #temp_order_conc     FROM VISTA_STAGING.DBO.VG_603_LARGE_TRADES_CASH_TABLE e     LEFT JOIN (SELECT DISTINCT PM.ORD_NUM, STATUS, TOUCH_COUNT, AUTH_TIME FROM VISTA_REPORTING.DBO.PM_ORDERS PM     INNER JOIN #temp_max_ORDER_touch MOT ON MOT.ORD_NUM = PM.ORD_NUM AND MOT.MAX_TOUCH = PM.TOUCH_COUNT) PM ON PM.ORD_NUM = e.ORDER_ID AND e.SOURCE = 'AL'     LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.PM_ORD = e.ORDER_ID AND e.SOURCE = 'AL'     LEFT JOIN (SELECT DISTINCT ORD_NUM, T.MULTI_FUND_ID,TRAN_TYPE, TRD_STATUS, TOUCH_COUNT, TRD_AUTH_TIME FROM VISTA_REPORTING.DBO.TRADES T      INNER JOIN #temp_max_trade_touch MTT ON MTT.MAX_TOUCH = T.TOUCH_COUNT AND MTT.MULTI_FUND_ID = T.MULTI_FUND_ID) T ON T.ORD_NUM = OC.TRD_ORD AND e.SOURCE = 'AL'     LEFT JOIN VISTA_STAGING.DBO.REF_cash_ALADDIN_STATUS_DECODE ASD ON e.SOURCE = 'AL' AND (ASD.[STATUS] = T.TRD_STATUS OR ASD.[STATUS] = PM.STATUS)     LEFT JOIN (SELECT DISTINCT INSTRUCTION_STATUS_DECODE, ORDER_ID, INSTRUCTION_RECEIVED_DATE FROM VISTA_REPORTING.DBO.CASH_ORDERS) CO ON e.SOURCE = 'CM' AND e.ORDER_ID = CO.ORDER_ID     LEFT JOIN (SELECT DISTINCT TRANSACTION_STATUS_DECODE, ORDER_ID, TRANSACTION_TYPE FROM VISTA_REPORTING.DBO.CASH_TRADES) CT ON e.SOURCE = 'CM' AND e.ORDER_ID = CT.ORDER_ID     INNER JOIN #distinct_ids di ON di.ORDER_ID = e.ORDER_ID        IF OBJECT_ID('tempdb..#concat', 'U') IS NOT NULL DROP TABLE #concat    SELECT     vg.ORDER_ID,     vg.SOURCE,        STUFF((            SELECT ' | ' + CAST(TRANSACTION_NUMBER AS VARCHAR(50))            FROM #temp_mf_conc            WHERE (ORDER_ID = vg.ORDER_ID AND SOURCE = vg.SOURCE AND TRANSACTION_NUMBER is NOT NULL) order by TRANSACTION_NUMBER            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS TRANSACTION_NUMBER,     STUFF((            SELECT ' | ' + CAST(FORMAT(EXECUTED_DATE_TIME, 'dd/MM/yyyy HH:mm:ss')AS VARCHAR(50))            FROM #temp_mf_conc            WHERE (ORDER_ID = vg.ORDER_ID AND SOURCE = vg.SOURCE AND EXECUTED_DATE_TIME is NOT NULL) order by TRANSACTION_NUMBER            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS EXECUTED_DATE_TIME,     STUFF((            SELECT ' | ' + CAST(FORMAT(convert(decimal(38,2),DEALT_AMOUNT), '#,0.00') AS VARCHAR(50))            FROM #temp_mf_conc            WHERE (ORDER_ID = vg.ORDER_ID AND SOURCE = vg.SOURCE AND DEALT_AMOUNT is NOT NULL) order by TRANSACTION_NUMBER            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS DEALT_AMOUNT,     STUFF((            SELECT ' | ' + CAST(GBP_EQUIVALENT_TRANSACTION AS VARCHAR(50))            FROM #temp_mf_conc            WHERE (ORDER_ID = vg.ORDER_ID AND SOURCE = vg.SOURCE AND GBP_EQUIVALENT_TRANSACTION is NOT NULL) order by TRANSACTION_NUMBER            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS GBP_EQUIVALENT_TRANSACTION,     STUFF((            SELECT ' | ' + CAST(convert(decimal(38,4), EXECUTED_RATE) AS VARCHAR(50))            FROM #temp_mf_conc            WHERE (ORDER_ID = vg.ORDER_ID AND SOURCE = vg.SOURCE AND EXECUTED_RATE is NOT NULL) order by TRANSACTION_NUMBER            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS EXECUTED_RATE,     STUFF((            SELECT ' | ' + CAST(BANK AS VARCHAR(50))            FROM #temp_mf_conc            WHERE (ORDER_ID = vg.ORDER_ID AND SOURCE = vg.SOURCE AND BANK is NOT NULL) order by TRANSACTION_NUMBER            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS BANK,     STUFF((            SELECT ' | ' + CAST(FORMAT(UPLOADED_DATE_TIME, 'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50))            FROM #temp_mf_conc            WHERE (ORDER_ID = vg.ORDER_ID AND SOURCE = vg.SOURCE AND UPLOADED_DATE_TIME is NOT NULL) order by TRANSACTION_NUMBER    FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS UPLOADED_DATE_TIME,      STUFF((            SELECT ' | ' + CAST(INSTRUCTION_STATUS AS VARCHAR(50))            FROM #temp_ORDER_conc            WHERE (ORDER_ID = vg.ORDER_ID AND SOURCE = vg.SOURCE AND INSTRUCTION_STATUS is NOT NULL)             FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS INSTRUCTION_STATUS,      STUFF((            SELECT  ' | ' + CAST(TRANSACTION_STATUS AS VARCHAR(50))            FROM #temp_order_conc            WHERE (ORDER_ID = vg.ORDER_ID AND SOURCE = vg.SOURCE AND TRANSACTION_STATUS is NOT NULL) ORDER BY ORDER_ID, TRANSACTION_STATUS            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS TRANSACTION_STATUS,      STUFF((            SELECT  ' | ' + CAST(FORMAT([INSTRUCTION_RECEIVED_DATE_TIME],'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50))            FROM #temp_order_conc            WHERE (ORDER_ID = vg.ORDER_ID AND SOURCE = vg.SOURCE AND [INSTRUCTION_RECEIVED_DATE_TIME] is NOT NULL)            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS [INSTRUCTION_RECEIVED_DATE_TIME],     STUFF((            SELECT ' | ' + CAST(TRANSACTION_TYPE AS VARCHAR(50))            FROM #temp_order_conc            WHERE (ORDER_ID = vg.ORDER_ID AND SOURCE = vg.SOURCE AND TRANSACTION_TYPE is NOT NULL) ORDER BY ORDER_ID, TRANSACTION_TYPE            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')        ,1,2,'') AS TRANSACTION_TYPE     INTO #concat     FROM VISTA_STAGING.DBO.VG_603_LARGE_TRADES_CASH_TABLE VG     INNER JOIN #distinct_ids di ON di.ORDER_ID = vg.ORDER_ID        IF OBJECT_ID('tempdb..#lt_ext', 'U') IS NOT NULL DROP TABLE #lt_ext    SELECT      ex.ORDER_ID,     ext.TRANSACTION_NUMBER,     ex.SOURCE,     CASE WHEN ext.EXCEPTION_FLAG = 1 THEN 'Y' ELSE 'N' END AS LARGE_TRADE_EXCEPTION    INTO #lt_ext    FROM VISTA_STAGING.dbo.VG_603_LARGE_TRADES_CASH_TABLE ex    LEFT JOIN (SELECT DISTINCT ORDER_ID, TRANSACTION_NUMBER FROM VISTA_REPORTING.dbo.CASH_TRADES) ct    on ex.ORDER_ID = ct.ORDER_ID    LEFT JOIN VISTA_STAGING.dbo.VG_603T_LARGE_TRADES_CASH_TABLE ext    on ct.TRANSACTION_NUMBER = ext.TRANSACTION_NUMBER and ex.SOURCE = ext.SOURCE    INNER JOIN  #distinct_ids di ON di.ORDER_ID = ex.ORDER_ID        IF OBJECT_ID('tempdb..#lt_ext_conc', 'U') IS NOT NULL DROP TABLE #lt_ext_conc    SELECT     exc.ORDER_ID,     exc.SOURCE,     STUFF((            SELECT ' | ' + CAST(LARGE_TRADE_EXCEPTION AS VARCHAR(50))            FROM #lt_ext            WHERE (ORDER_ID = exc.ORDER_ID AND SOURCE = exc.SOURCE) order by TRANSACTION_NUMBER            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')         ,1,2,'') AS LARGE_TRADE_EXCEPTION    INTO #lt_ext_conc    FROM VISTA_STAGING.dbo.VG_603_LARGE_TRADES_CASH_TABLE exc    INNER JOIN  #distinct_ids di ON di.ORDER_ID = exc.ORDER_ID             IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table    SELECT DISTINCT           COALESCE(TDD.FULL_NAME, TDD2.FULL_NAME, DD.DEFAULT_DEALER)  AS [DEALER_NAME]           ,CASE WHEN e.SOURCE = 'AL' THEN FORMAT(convert(decimal(38,2), FACE/fx.GBP_INDEX_RATE), '#,0.00') WHEN e.SOURCE = 'CM' THEN FORMAT(convert(decimal(38,2), CO.INSTRUCTED_AMOUNT_GBP), '#,0.00') END AS [GBP_EQUIVALENT_INSTRUCTION]          , C.[GBP_EQUIVALENT_TRANSACTION]          ,FORMAT(LTT.LIMIT_GBP, '#,0.00') AS [LIMIT_GBP_MILLION]          ,CASE WHEN LTT.INSTRUMENT in ( 'Repo', 'Reverse Repo') THEN 'SECURED' ELSE 'UNSECURED' END AS [SECURED_UNSECURED]          ,CASE WHEN e.SOURCE = 'CM' THEN CAST(CT.CLIENT_FUND_OR_POOL_CODE AS VARCHAR(30)) WHEN e.SOURCE = 'AL' THEN CAST(T.FUND AS VARCHAR(30))  END AS  [CLIENT_FUND_POOL_CODE]          ,CASE WHEN e.SOURCE = 'CM' THEN CAST(CT.BASE_FUND_CODE AS VARCHAR(30)) WHEN e.SOURCE = 'AL' THEN CAST(PO.PORTFOLIOS_PORTFOLIO_NAME AS VARCHAR(30)) END AS [BASE_FUND_CODE]          ,CASE WHEN e.SOURCE = 'AL' THEN PM.CURRENCY WHEN e.SOURCE = 'CM' THEN CO.INSTRUCTED_CURRENCY END AS [INSTRUCTED_CURRENCY]          ,e.[PRODUCT]          ,CASE WHEN e.SOURCE = 'AL' THEN FORMAT(PM.FACE, '#,0.00') WHEN e.SOURCE = 'CM' THEN FORMAT(convert( decimal(38,2), CO.INSTRUCTED_AMOUNT), '#,0.00') END AS [INSTRUCTED_AMOUNT]          ,C.[DEALT_AMOUNT]          ,CASE WHEN e.SOURCE = 'AL' THEN NULL WHEN e.SOURCE = 'CM' THEN CT.TERM END AS [TERM]       ,CASE WHEN e.SOURCE = 'CM' THEN DATEDIFF(DAY, CO.VALUE_DATE, CO.MATURITY_DATE) WHEN e.SOURCE = 'AL' THEN DATEDIFF(DAY, PM.SETTLE_DATE, T.TRD_TRADE_DATE) END AS NO_OF_DAYS          ,CASE WHEN e.SOURCE = 'AL' THEN FORMAT(T.TRD_TRADE_DATE,'dd/MM/yyyy') WHEN e.SOURCE = 'CM' THEN FORMAT(CO.TRADE_DATE, 'dd/MM/yyyy') END AS [TRADE_DATE]          ,CASE WHEN e.SOURCE = 'AL' THEN FORMAT(T.TRD_TRADE_DATE,'dd/MM/yyyy') WHEN e.SOURCE = 'CM' THEN FORMAT(CO.VALUE_DATE, 'dd/MM/yyyy') END AS [VALUE_DATE] --THIS CANNOT BE RIGHT NEEDS UPDATING          ,CASE WHEN e.SOURCE = 'AL' THEN FORMAT(PM.SETTLE_DATE,'dd/MM/yyyy') WHEN e.SOURCE = 'CM' THEN FORMAT(CO.MATURITY_DATE, 'dd/MM/yyyy') END AS [MATURITY_DATE] --SETTLE DATE IS DUPLICATING ALADDIN ORDERS OUT LOADS TAKEN MAX TOUCH OF PM          ,C.[EXECUTED_DATE_TIME]          ,FORMAT(CO.INSTRUCTION_RECEIVED_DATE,'dd/MM/yyyy HH:mm:ss') as INSTRUCTION_RECEIVED_DATE_TIME--C.[INSTRUCTION_RECEIVED_DATE_TIME]          ,CASE WHEN e.SOURCE = 'AL' THEN 'Cash Products' WHEN e.SOURCE = 'CM' THEN CT.PRODUCT_TYPE END AS [PRODUCT_TYPE]           , CASE WHEN e.SOURCE = 'CM' THEN CO.BUSINESS_GROUP WHEN e.SOURCE = 'AL' AND PCG.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP'       WHEN e.SOURCE = 'AL' AND PCG.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG'       WHEN e.SOURCE = 'AL' AND (PCG.[PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR PCG.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM'       ELSE NULL          END as BUSINESS_GROUP          ,C.[TRANSACTION_NUMBER]          ,C.[BANK] --NOT SURE ABOUT ALADDIN ENTRY HERE          ,C.[UPLOADED_DATE_TIME]          ,C.[EXECUTED_RATE]          ,C.[TRANSACTION_TYPE] AS [TRANSACTION_TYPE]--,CASE WHEN e.SOURCE = 'AL' THEN T.TRAN_TYPE WHEN e.SOURCE = 'CM' THEN CT.TRANSACTION_TYPE END AS [TRANSACTION_TYPE]          ,C.[INSTRUCTION_STATUS]          ,C.[TRANSACTION_STATUS]       , e.[ORDER_ID]       --CASE WHEN e.SOURCE = 'CM' THEN CT.BUSINESS_GROUP WHEN e.SOURCE = 'AL' THEN PCG.PORTFOLIO_GROUP_FULL_NAME END AS BUSINESS_GROUP COMMENTED THIS OUT UNTIL COLUMN REORDERING.          ,CASE WHEN e.EXCEPTION_FLAG = 1 THEN 'YES' ELSE 'NO' END AS [TRANS_AMT_FLAG] --NOT CLEAR WHAT THEY ARE LOOKING FOR HERE PLEASE CONFIRM          ,CASE WHEN e.SOURCE = 'CM' THEN CO.INSTRUCTED_BY WHEN e.SOURCE = 'AL' THEN PM.PM_FULL_NAME END  AS INSTRUCTED_BY       ,ext_cc.LARGE_TRADE_EXCEPTION AS IS_LARGE_TRADE          ,e.EXCEPTION_CREATETIME AS [CREATE_DATE]          ,e.[EXCEPTION_FLAG]       ,CASE WHEN e.SOURCE = 'AL' THEN PM.AUTH_TIME WHEN e.SOURCE = 'CM' THEN CO.INSTRUCTION_RECEIVED_DATE END AS OS_EXECUTED_DATE_TIME --CHANGED THIS TO AVOID DUPLICATION       ,e.SOURCE AS [DATA_SOURCE]       ,CASE WHEN e.SOURCE = 'CM' THEN CO.CUSTOM_INSTRUCTION WHEN e.SOURCE = 'AL' THEN PM.COMMENTS_VALUE END AS CUSTOM_INSTRUCTION       INTO  #temp_final_master_table--VISTA_REPORTING.DBO.MASTER_PM_ORDER_VG_603_LARGE_TRADES_CASH_TABLE      FROM   VISTA_STAGING.DBO.VG_603_LARGE_TRADES_CASH_TABLE e      INNER JOIN #distinct_ids di on di.ORDER_ID = e.ORDER_ID and di.SOURCE = e.SOURCE      LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.PM_ORD = e.ORDER_ID AND e.SOURCE = 'AL'      LEFT JOIN #concat C ON C.SOURCE = e.SOURCE AND C.ORDER_ID = e.ORDER_ID      LEFT JOIN (SELECT DISTINCT SETTLE_DATE, PM.ORD_NUM, PM, PULL_DATE, CURRENCY, FACE, AUTH_TIME, STATUS, TOUCH_COUNT, TRADER, COMMENTS_VALUE, PM_FULL_NAME FROM VISTA_REPORTING.DBO.PM_ORDERS PM      INNER JOIN #temp_max_ORDER_touch mOt ON mOt.ORD_NUM=PM.ORD_NUM AND mOt.MAX_TOUCH=PM.TOUCH_COUNT) PM ON e.SOURCE = 'AL' AND PM.ORD_NUM = e.ORDER_ID      LEFT JOIN (SELECT DISTINCT ORD_NUM, TRD_AUTH_TIME, FUND, TRD_TRADE_DATE, T.MULTI_FUND_ID, EXECUTION_TIME, TRAN_TYPE, TRD_ORIG_FACE, TRD_PRICE, TRD_EX_BROKER_CODE, TRD_ENTRY_TIME, TRD_TRADER, PULL_DATE, TRD_STATUS, NET_CONSIDERATION_GBP FROM VISTA_REPORTING.DBO.TRADES T      INNER JOIN #temp_max_trade_touch mtt ON mtt.MULTI_FUND_ID=t.MULTI_FUND_ID AND mtt.MAX_TOUCH=t.TOUCH_COUNT) T ON T.ORD_NUM = OC.TRD_ORD      LEFT JOIN (SELECT DISTINCT co.ORDER_ID, INSTRUCTION_RECEIVED_DATE, BUSINESS_GROUP, TRADE_DATE, VALUE_DATE, MATURITY_DATE, INSTRUCTED_BY, PULL_DATE, INSTRUCTED_CURRENCY, INSTRUCTED_AMOUNT, INSTRUCTION_STATUS_DECODE, INSTRUCTED_AMOUNT_GBP, ACCEPTED_BY, CUSTOM_INSTRUCTION FROM VISTA_REPORTING.DBO.CASH_ORDERS co      inner join #temp_max_order_cm moo on moo.max_date = co.API_REQUESTED_DATE and moo.ORDER_ID = co.ORDER_ID) CO ON CO.ORDER_ID = e.ORDER_ID AND e.SOURCE = 'CM'      LEFT JOIN (SELECT DISTINCT ORDER_ID, CLIENT_FUND_OR_POOL_CODE, BASE_FUND_CODE, PRODUCT_TYPE, TERM, ct.TRANSACTION_NUMBER, EXECUTED_DATETIME, DEALT_AMOUNT, EXECUTED_RATE, BANK, UPLOADED_DATE_TIME, DEALER_NAME, PULL_DATE, TRANSACTION_STATUS_DECODE, DEALT_AMOUNT_GBP FROM VISTA_REPORTING.DBO.CASH_TRADES ct      inner join #temp_max_req_trades req on req.MAX_API_REQ = ct.API_REQUESTED_DATE and req.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER) CT ON CT.ORDER_ID = e.ORDER_ID AND e.SOURCE = 'CM'      LEFT JOIN (SELECT DISTINCT FUND, PORTFOLIOS_PORTFOLIO_NAME FROM VISTA_REPORTING.DBO.PORTFOLIO) PO ON PO.FUND = T.FUND AND e.SOURCE = 'AL'      LEFT JOIN VISTA_STAGING.dbo.REF_CASH_LARGE_TRADE_THRESHOLD LTT ON LTT.PRODUCT = e.PRODUCT AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE) AS DATE) BETWEEN CAST(LTT.DATE_FROM AS DATE) AND CAST(LTT.DATE_TO AS DATE)      LEFT JOIN VISTA_STAGING.DBO.REF_cash_ALADDIN_STATUS_DECODE ASD ON e.SOURCE = 'AL' AND (ASD.[STATUS] = T.TRD_STATUS OR ASD.[STATUS] = PM.STATUS)      OUTER APPLY (SELECT TOP 1 e.* FROM VISTA_REPORTING.dbo.FX_RATES e         WHERE e.CURRENCY = PM.CURRENCY and CONVERT(date, e.MARKDATE) <= CONVERT(date, PM.AUTH_TIME)        ORDER BY e.MARKDATE DESC) FX       LEFT JOIN (SELECT PORTFOLIO_NAME, PORTFOLIO_GROUP_FULL_NAME, PORTFOLIO_GROUP_NAME  FROM VISTA_REPORTING.DBO.PORTFOLIO_GROUPS_TREASURY ) PCG ON PCG.PORTFOLIO_NAME = CONVERT(VARCHAR(30), T.FUND) AND e.SOURCE = 'AL'       LEFT JOIN #lt_ext_conc ext_cc on ext_cc.ORDER_ID = e.ORDER_ID and ext_cc.SOURCE = E.SOURCE       LEFT JOIN #temp_recent_dealer_al RAL ON RAL.ORD_NUM  = e.ORDER_ID AND e.SOURCE = 'AL'      LEFT JOIN #temp_recent_dealer_cm RCM ON RCM.ORDER_ID = e.ORDER_ID AND e.SOURCE = 'CM'      LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD ON ((TDD.MG_USER_ID  = RCM.DEALER_NAME AND e.SOURCE = 'CM') OR (TDD.INITIALS = RAL.TRD_TRADER AND e.SOURCE = 'AL'))  AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE) AS DATE) BETWEEN CAST(TDD.DATE_FROM   AS DATE) AND CAST(TDD.DATE_TO AS DATE)      LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD2 ON ((TDD2.MG_USER_ID  = COALESCE(CO.ACCEPTED_BY, CO.INSTRUCTED_BY) AND e.SOURCE = 'CM') OR (TDD2.INITIALS = PM.TRADER AND e.SOURCE = 'AL')) AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE) AS DATE) BETWEEN CAST(TDD2.DATE_FROM AS DATE) AND CAST(TDD2.DATE_TO AS DATE)       LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'Large Trades' AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE) AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)           IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_CASH_TABLE', 'U') IS NOT NULL    DELETE FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_CASH_TABLE    WHERE EXISTS (SELECT DISTINCT ORDER_ID    FROM #distinct_ids    WHERE #distinct_ids.ORDER_ID = VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_CASH_TABLE.ORDER_ID)            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_CASH_TABLE', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_CASH_TABLE    SELECT *    FROM #temp_final_master_table        ELSE        SELECT *    INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_CASH_TABLE    FROM #temp_final_master_table            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(    'MASTER_PM_ORDER_VG_603_LARGE_TRADES_CASH_TABLE', --TABLE_NAME    @START_TIME, --START_TIME    GETDATE(), --END_TIME    DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS    CAST(GETDATE() as date)) --COMPLETION_DATE         IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids     IF OBJECT_ID('tempdb..#temp_cash_trades', 'U') IS NOT NULL DROP TABLE #temp_cash_trades     IF OBJECT_ID('tempdb..#temp_max_trade_touch', 'U') IS NOT NULL DROP TABLE #temp_max_trade_touch     IF OBJECT_ID('tempdb..#temp_max_ORDER_touch', 'U') IS NOT NULL DROP TABLE #temp_max_ORDER_touch     IF OBJECT_ID('tempdb..#temp_max_ORDER_CM', 'U') IS NOT NULL DROP TABLE #temp_max_ORDER_CM     IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades     IF OBJECT_ID('tempdb..#temp_recent_dealer_al', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_al     IF OBJECT_ID('tempdb..#temp_recent_dealer_cm', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_cm     IF OBJECT_ID('tempdb..#temp_mf_conc', 'U') IS NOT NULL DROP TABLE #temp_mf_conc     IF OBJECT_ID('tempdb..#temp_order_conc', 'U') IS NOT NULL DROP TABLE #temp_order_conc     IF OBJECT_ID('tempdb..#concat', 'U') IS NOT NULL DROP TABLE #concat     IF OBJECT_ID('tempdb..#lt_ext', 'U') IS NOT NULL DROP TABLE #lt_ext     IF OBJECT_ID('tempdb..#lt_ext_conc', 'U') IS NOT NULL DROP TABLE #lt_ext_conc     IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg603_cash_idx1')           DROP INDEX mmf_vg603_cash_idx1            ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_CASH_TABLE                CREATE NONCLUSTERED INDEX mmf_vg603_cash_idx1           ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_CASH_TABLE            (INSTRUCTION_RECEIVED_DATE_TIME)        IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg603_cash_idx2')           DROP INDEX mmf_vg603_cash_idx2            ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_CASH_TABLE                CREATE NONCLUSTERED INDEX mmf_vg603_cash_idx2           ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_CASH_TABLE           (EXCEPTION_FLAG)        IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg603_cash_idx3')           DROP INDEX mmf_vg603_cash_idx3            ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_CASH_TABLE                CREATE NONCLUSTERED INDEX mmf_vg603_cash_idx3           ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_CASH_TABLE           (CREATE_DATE)                  END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_PM_ORDER_TABLE_VG_603_LARGE_TRADES_FX  CreateDate: 2025-06-26 18:04:49.830  ModifyDate: 2025-06-26 18:04:49.830  --- DEFINITION START ---  -- =============================================    -- Author:  <LIZZIE REYNOLDS>    -- Create date: <10/07/2019>    -- Description: <MASTER LARGE TRADES FX,,>    -- =============================================    CREATE PROCEDURE [dbo].[MASTER_PM_ORDER_TABLE_VG_603_LARGE_TRADES_FX]         AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;             DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()             IF OBJECT_ID('tempdb..#distinct_ids_al', 'U') IS NOT NULL DROP TABLE #distinct_ids_al     SELECT DISTINCT       pr.ORD_NUM as TRD_ORD,      oc.PM_ORD AS ORD_NUM,      pr.MULTI_FUND_ID     INTO #distinct_ids_al     FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = pr.ORD_NUM     WHERE pr.DEALING_DESK = 'FX'             IF OBJECT_ID('tempdb..#distinct_ids_fx', 'U') IS NOT NULL DROP TABLE #distinct_ids_fx     SELECT DISTINCT      fxt.ORDER_ID AS TRD_ORD,      vg.ORDER_ID,      fxt.TRADE_ID AS MULTI_FUND_ID      INTO #distinct_ids_fx     FROM Vista_Staging.dbo.VG_603_LARGE_TRADES_FX_TABLE vg     LEFT JOIN Vista_Reporting.dbo.FX_ORDERS fxo ON fxo.FXM_ORDER_ID = vg.ORDER_ID     LEFT JOIN Vista_Reporting.dbo.FX_TRADES fxt ON fxt.ORDER_ID = fxo.FXM_ORDER_ID               IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE', 'U') IS NOT NULL     DELETE FROM #distinct_ids_fx where NOT EXISTS (SELECT DISTINCT od.FXM_ORDER_ID                   FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_FX od                   WHERE od.FXM_ORDER_ID = #distinct_ids_fx.ORDER_ID)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE', 'U') IS NOT NULL     DELETE FROM #distinct_ids_al where NOT EXISTS (SELECT DISTINCT od.PM_ORD                   FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                   WHERE od.PM_ORD = #distinct_ids_al.ORD_NUM)             IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE  #distinct_ids     SELECT *      INTO #distinct_ids     FROM #distinct_ids_al         UNION ALL         SELECT *      FROM #distinct_ids_fx             IF OBJECT_ID('tempdb..#max_touch_pm', 'U') IS NOT NULL DROP TABLE #max_touch_pm     SELECT DISTINCT       pm.ORD_NUM,       MAX(pm.TOUCH_COUNT) as MAX_TOUCH      INTO #max_touch_pm     FROM VISTA_REPORTING.dbo.PM_ORDERS pm     WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = pm.ORD_NUM)     GROUP BY ORD_NUM             IF OBJECT_ID('tempdb..#max_touch_t', 'U') IS NOT NULL DROP TABLE #max_touch_t     SELECT DISTINCT       t.MULTI_FUND_ID,       MAX(t.TOUCH_COUNT) as MAX_TOUCH      INTO #max_touch_t     FROM VISTA_REPORTING.dbo.TRADES t     WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)     GROUP BY MULTI_FUND_ID             IF OBJECT_ID('tempdb..#max_touch_fxt', 'U') IS NOT NULL DROP TABLE #max_touch_fxt     SELECT        fxt.ORDER_ID,       MAX(fxt.API_REQUESTED_DATE) as MAX_API_REQUESTED_DATE      INTO #max_touch_fxt     FROM VISTA_REPORTING.dbo.FX_TRADES fxt     WHERE EXISTS (SELECT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = fxt.ORDER_ID)     GROUP BY ORDER_ID             IF OBJECT_ID('tempdb..#API_REQ_ORDERS', 'U') IS NOT NULL DROP TABLE #API_REQ_ORDERS     SELECT DISTINCT       fxo.FXM_ORDER_ID,      MAX(fxo.API_REQUESTED_DATE) AS MAX_DATE     into #api_req_orders     FROM VISTA_REPORTING.dbo.FX_ORDERS fxo     WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = fxo.FXM_ORDER_ID)     group by FXM_ORDER_ID             IF OBJECT_ID('tempdb..#lt_ext', 'U') IS NOT NULL DROP TABLE #lt_ext     SELECT DISTINCT      ex.ORDER_ID,      ex.SOURCE,      CASE WHEN ext.EXCEPTION_FLAG = 1 THEN 1 ELSE 0 END AS LARGE_TRADE_EXCEPTION     INTO #lt_ext     FROM VISTA_STAGING.dbo.VG_603_LARGE_TRADES_FX_TABLE ex     left join (SELECT DISTINCT ORDER_ID, TRADE_ID FROM VISTA_REPORTING.dbo.FX_TRADES) fxt on ex.ORDER_ID = fxt.ORDER_ID     left join VISTA_STAGING.dbo.VG_603T_LARGE_TRADES_FX_TABLE ext on fxt.TRADE_ID = ext.TRANSACTION_NUMBER and ex.SOURCE = ext.SOURCE   WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ex.ORDER_ID)             IF OBJECT_ID('tempdb..#trades_pop', 'U') IS NOT NULL DROP TABLE #trades_pop     SELECT DISTINCT      fxt.TRADE_AMOUNT_GBP_FAR,      fxt.TRADE_AMOUNT_GBP,      fxt.ACCEPTED_DATE_TIME,      fxt.MARKET_ARRIVAL_DATE_TIME,      fxt.EXECUTED_DATE_TIME,      fxt.EXECUTED_RATE_FAR,      fxt.EXECUTED_RATE,      fxt.FORWARD_POINTS_FAR,      fxt.FORWARD_POINTS,      fxt.SPOT_RATE_FAR,      fxt.SPOT_RATE,      fxt.SWAP_POINTS,      fxt.TRADE_DATE,      fxt.EXECUTED_AMOUNT_FAR,      fxt.EXECUTED_AMOUNT,      fxt.SWAP_TYPE,      fxt.NET_EXPOSURE_TRADE,      fxt.FIXING_DATE_LEG2,      fxt.FIXING_DATE,      fxt.EXECUTED_BANK,      fxt.TRADE_STATUS,      fxt.ACCEPTED_BY,      fxt.TRADE_ID,      NULL AS GBP_EQUIVALENT_AMOUNT_TRADE,      NULL AS BASE_FUND,      NULL AS ALL_IN_RATE_AL,      NULL AS INSTRUCTED_CURRENCY,      NULL AS TRADE_PURPOSE,      fxt.ORDER_ID     INTO #trades_pop     FROM VISTA_REPORTING.dbo.FX_TRADES fxt     inner join #max_touch_fxt mtt on mtt.ORDER_ID = fxt.ORDER_ID and mtt.MAX_API_REQUESTED_DATE = fxt.API_REQUESTED_DATE     WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = fxt.TRADE_ID)         UNION          SELECT DISTINCT      NULL,      NULL,      NULL,      t.EXECUTION_TIME,      t.EXECUTION_TIME,      NULL,      NULL,      NULL,      NULL,      NULL,      NULL,      NULL,      t.TRD_TRADE_DATE,      NULL,      NULL,      NULL,      NULL,      NULL,      NULL,      t.TRD_COUNTERPARTY,      t.TRD_STATUS,      t.TRD_TRADER,      t.MULTI_FUND_ID,      CAST(FORMAT(CAST((1.0*t.TRD_ORIG_FACE/fx.GBP_INDEX_RATE) as decimal(38,2)), '#,0.00') as varchar(50)) AS GBP_EQUIVALENT_AMOUNT_TRADE,      t.PORTFOLIOS_PORTFOLIO_NAME AS BASE_FUND,      t.FX_PRICE AS ALL_IN_RATE_AL,      t.FX_PAY_CURR AS INSTRUCTED_CURRENCY,      t.TRD_PURPOSE AS TRADE_PURPOSE,      oc.PM_ORD     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = t.ORD_NUM     INNER JOIN #max_touch_t mtt ON mtt.MULTI_FUND_ID = t.MULTI_FUND_ID AND mtt.MAX_TOUCH = t.TOUCH_COUNT     OUTER APPLY (SELECT TOP 1 e.*             FROM VISTA_REPORTING.dbo.FX_RATES e             WHERE e.CURRENCY = t.TRD_CURRENCY and CONVERT(date, e.MARKDATE) <= CONVERT(date, t.TRD_AUTH_TIME)            ORDER BY e.MARKDATE DESC) fx     WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = t.MULTI_FUND_ID)                  --FX Concatenated fields     IF OBJECT_ID('tempdb..#conc_fx', 'U') IS NOT NULL DROP TABLE #conc_fx      SELECT DISTINCT      ex.[ORDER_ID],      STUFF((SELECT DISTINCT          CASE           WHEN fxt.TRADE_AMOUNT_GBP_FAR IS NULL THEN ' | ' + FORMAT(CONVERT(DECIMAL(38,2),fxt.TRADE_AMOUNT_GBP), '#,0.00')          ELSE ' | ' + CONCAT(FORMAT(CONVERT(DECIMAL(38,2),fxt.TRADE_AMOUNT_GBP), '#,0.00'), ' / ',FORMAT(CONVERT(DECIMAL(38,2),fxt.TRADE_AMOUNT_GBP_FAR), '#,0.00'))         END        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS GBP_EQUIVALENT_AMOUNT_TRADE,      STUFF((SELECT DISTINCT ' | ' + FORMAT(FXT.ACCEPTED_DATE_TIME,'dd/MM/yyyy HH:mm:ss')        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS ACCEPTED_DATE_TIME,      STUFF((SELECT DISTINCT ' | ' + FORMAT(FXT.MARKET_ARRIVAL_DATE_TIME,'dd/MM/yyyy HH:mm:ss')        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS MARKET_ARRIVAL_DATE_TIME,      STUFF((SELECT DISTINCT ' | ' + FORMAT(FXT.EXECUTED_DATE_TIME,'dd/MM/yyyy HH:mm:ss')        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS EXECUTED_DATE_TIME,      STUFF((SELECT DISTINCT ' | ' + CONCAT(FXT.EXECUTED_RATE, ' | ', FXT.EXECUTED_RATE_FAR)        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS ALL_IN_RATE,      STUFF((SELECT DISTINCT ' | ' + CONCAT(FXT.FORWARD_POINTS, ' | ', FXT.FORWARD_POINTS_FAR)        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS FORWARD_POINTS,      STUFF((SELECT DISTINCT ' | ' + CONCAT(FXT.SPOT_RATE, ' | ', FXT.SPOT_RATE_FAR)        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS SPOT_RATE,      STUFF((SELECT DISTINCT ' | ' + FORMAT(fxt.[TRADE_DATE],'dd/MM/yyyy HH:mm:ss')        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS TRADE_DATE,      STUFF((SELECT DISTINCT          CASE          WHEN fxt.EXECUTED_AMOUNT_FAR IS NULL THEN  ' | ' + FORMAT(CONVERT(DECIMAL(38,2),FXT.EXECUTED_AMOUNT), '#,0.00')          ELSE ' | ' + CONCAT(FORMAT(CONVERT(DECIMAL(38,2),FXT.EXECUTED_AMOUNT), '#,0.00'), ' / ' ,FORMAT(CONVERT(DECIMAL(38,2), FXT.EXECUTED_AMOUNT_FAR), '#,0.00'))         END        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS EXECUTED_AMOUNT,      STUFF((SELECT DISTINCT ' | ' + fxt.SWAP_TYPE        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS SWAP_TYPE,      STUFF((SELECT DISTINCT ' | ' + CAST(fxt.SWAP_POINTS AS VARCHAR)        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS SWAP_POINTS,      STUFF((SELECT DISTINCT ' | ' + CAST(fxt.NET_EXPOSURE_TRADE AS VARCHAR)        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS NET_EXPOSURE,      STUFF((SELECT DISTINCT          CASE           WHEN fxt.FIXING_DATE_LEG2 IS NULL THEN ' | ' + CONCAT(CONVERT(VARCHAR(10),FIXING_DATE, 103), ' ' , CONVERT(VARCHAR(8),FIXING_DATE, 14))          ELSE ' | ' + CONCAT(CONCAT(CONVERT(VARCHAR(10),FIXING_DATE, 103), ' ' , CONVERT(VARCHAR(8),FIXING_DATE, 14)) , ' / ', CONCAT(CONVERT(VARCHAR(10),FIXING_DATE_LEG2, 103), ' ' , CONVERT(VARCHAR(8),FIXING_DATE_LEG2, 14)))         END        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS FIXING_DATE,      STUFF((SELECT DISTINCT ' | ' + fxt.EXECUTED_BANK        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS EXECUTED_BANK,      STUFF((SELECT DISTINCT ' | ' + fxt.TRADE_STATUS        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS TRADE_STATUS,      STUFF((SELECT DISTINCT ' | ' + ACCEPTED_BY        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS TAKEN_OVER_BY,      STUFF((SELECT DISTINCT ' | ' + fxt.TRADE_ID        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS TRADE_ID,      STUFF((SELECT DISTINCT ' | ' + fxt.BASE_FUND        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS BASE_FUND_AL,      STUFF((SELECT DISTINCT ' | ' + CAST(fxt.ALL_IN_RATE_AL AS VARCHAR)        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS ALL_IN_RATE_AL,      STUFF((SELECT DISTINCT ' | ' + fxt.INSTRUCTED_CURRENCY        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS INSTRUCTED_CURRENCY_AL,      STUFF((SELECT DISTINCT ' | ' + fxt.GBP_EQUIVALENT_AMOUNT_TRADE        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS GBP_EQUIVALENT_AMOUNT_TRADE_AL,      STUFF((SELECT DISTINCT ' | ' + fxt.TRADE_PURPOSE        FROM #trades_pop fxt        WHERE fxt.ORDER_ID = ex.[ORDER_ID]        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'') AS TRADE_PURPOSE     INTO #conc_fx     FROM VISTA_STAGING.dbo.VG_603_LARGE_TRADES_FX_TABLE ex     WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ex.ORDER_ID)             --Create Master table     IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     SELECT DISTINCT       COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) AS DEALER_NAME,      CASE WHEN FXO.NOTIONAL_AMOUNT_GBP_FAR IS NULL  THEN CONVERT(VARCHAR(50),FORMAT(CONVERT(DECIMAL(38,2),FXO.NOTIONAL_AMOUNT_GBP),'#,0.00'))         WHEN FXO.NOTIONAL_AMOUNT_GBP_FAR IS NOT NULL THEN CONCAT(FORMAT(CONVERT(DECIMAL(38,2),FXO.NOTIONAL_AMOUNT_GBP), '#,0.00'), ' | ',FORMAT(CONVERT(DECIMAL(38,2),FXO.NOTIONAL_AMOUNT_GBP_FAR), '#,0.00')) END AS GBP_EQUIVALENT_AMOUNT,      cc_fx.GBP_EQUIVALENT_AMOUNT_TRADE,      CASE         WHEN fxo.INSTRUCTION_TYPE = 'SPOT'  THEN CAST(FORMAT(CAST(REF.LIMIT_1 as decimal(38,2)), '#,0.00') as varchar(30))         WHEN fxo.INSTRUCTION_TYPE = 'Forward' THEN CAST(FORMAT(CAST(REF.LIMIT_2 as decimal(38,2)), '#,0.00') as varchar(30))         WHEN fxo.INSTRUCTION_TYPE = 'NDF'  THEN CAST(FORMAT(CAST(REF.LIMIT_3 as decimal(38,2)), '#,0.00') as varchar(30))        WHEN fxo.INSTRUCTION_TYPE = 'NDS'  THEN CAST(FORMAT(CAST(REF.LIMIT_4 as decimal(38,2)), '#,0.00') as varchar(30))         WHEN fxo.INSTRUCTION_TYPE = 'FX Swap' AND ABS(FXO.NOTIONAL_AMOUNT_GBP- FXO.NOTIONAL_AMOUNT_GBP_FAR) >= REF.LIMIT_5 THEN CAST(FORMAT(CAST(REF.LIMIT_5 as decimal(38,2)), '#,0.00') as varchar(30))        WHEN fxo.INSTRUCTION_TYPE = 'FX Swap' AND FXO.NOTIONAL_AMOUNT_GBP_FAR >= REF.LIMIT_6 THEN CAST(FORMAT(CAST(REF.LIMIT_6 as decimal(38,2)), '#,0.00') as varchar(30))         WHEN fxo.INSTRUCTION_TYPE = 'FX Swap' THEN (CAST(FORMAT(CAST(REF.LIMIT_5 as decimal(38,2)), '#,0.00') as varchar(30)) + ' | '+ CAST(FORMAT(CAST(REF.LIMIT_6 as decimal(38,2)), '#,0.00') as varchar(30)))      ELSE NULL      END AS LARGE_TRADE_THRESHOLD,      CASE WHEN ext.LARGE_TRADE_EXCEPTION = 1 THEN 'Y' WHEN ext.LARGE_TRADE_EXCEPTION = 0 THEN 'N' ELSE NULL END AS IS_LARGE_TRADE,      cc_fx.ACCEPTED_DATE_TIME,      cc_fx.MARKET_ARRIVAL_DATE_TIME,      FORMAT(FXO.INSTRUCTION_RECEIVED_DATE_TIME,'dd/MM/yyyy HH:mm:ss') AS ORDER_RECEIVED_DATE_TIME,      cc_fx.EXECUTED_DATE_TIME,      cc_fx.ALL_IN_RATE,      cc_fx.FORWARD_POINTS,      cc_fx.SPOT_RATE,      cc_fx.SWAP_POINTS,      FXO.CLIENT_FUND,      FXO.BASE_FUND,      FXO.INSTRUCTION_TYPE AS PRODUCT,      CASE WHEN FXO.FR_LEG_PRODUCT IS NULL   THEN CONVERT(VARCHAR(50),FXO.NR_LEG_PRODUCT)         WHEN FXO.FR_LEG_PRODUCT IS NOT NULL  THEN CONCAT(FXO.NR_LEG_PRODUCT, ' | ', FXO.FR_LEG_PRODUCT) END AS FXM_PRODUCT,      CASE WHEN NULLIF(FXO.ACTION2,'') IS NULL  THEN CONVERT(VARCHAR(50),FXO.ACTION1)         WHEN NULLIF(FXO.ACTION2,'') IS NOT NULL THEN (FXO.ACTION1 + ISNULL(' | ' + NULLIF(FXO.ACTION2,''),'')) END AS ACTION,      CASE WHEN FXO.NOTIONAL_CCY_FAR IS NULL   THEN CONVERT(VARCHAR(50),FXO.NOTIONAL_CCY)         WHEN FXO.NOTIONAL_CCY_FAR IS NOT NULL  THEN CONCAT(FXO.NOTIONAL_CCY, ' | ', FXO.NOTIONAL_CCY_FAR) END AS INSTRUCTED_CURRENCY,      CASE WHEN FXO.BUY_CCY_LEG2 IS NULL    THEN CONVERT(VARCHAR(50),FXO.BUY_CCY)         WHEN FXO.BUY_CCY_LEG2 IS NOT NULL   THEN CONCAT(FXO.BUY_CCY, ' | ', FXO.BUY_CCY_LEG2) END AS BUY_CURRENCY,      CASE WHEN FXO.SELL_CCY_LEG2 IS NULL    THEN CONVERT(VARCHAR(50),FXO.SELL_CCY)         WHEN FXO.SELL_CCY_LEG2 IS NOT NULL   THEN CONCAT(FXO.SELL_CCY, ' | ', FXO.SELL_CCY_LEG2) END AS SELL_CURRENCY,      CASE WHEN FXO.NOTIONAL_AMOUNT_FAR IS NULL THEN CONVERT(VARCHAR(50),FORMAT(CONVERT(DECIMAL(38,2),FXO.NOTIONAL_AMOUNT), '#,0.00'))         WHEN FXO.NOTIONAL_AMOUNT_FAR IS NOT NULL THEN CONCAT(FORMAT(CONVERT(DECIMAL(38,2),FXO.NOTIONAL_AMOUNT), '#,0.00'), ' | ',FORMAT(CONVERT(DECIMAL(38,2),FXO.NOTIONAL_AMOUNT_FAR), '#,0.00')) END AS INSTRUCTED_AMOUNT,      cc_fx.TRADE_DATE,      CASE WHEN FXO.VALUE_DATE_FAR IS NULL   THEN CONVERT(VARCHAR(50),FORMAT(FXO.VALUE_DATE_NEAR, 'dd/MM/yyyy hh:mm:ss'))         WHEN FXO.VALUE_DATE_FAR IS NOT NULL  THEN CONCAT(FORMAT(FXO.VALUE_DATE_NEAR, 'dd/MM/yyyy hh:mm:ss'), ' | ', FORMAT(FXO.VALUE_DATE_FAR, 'dd/MM/yyyy hh:mm:ss')) END AS VALUE_DATE,      cc_fx.EXECUTED_AMOUNT,      cc_fx.SWAP_TYPE,      cc_fx.NET_EXPOSURE,      CASE WHEN FXO.PM IS NOT NULL THEN FXO.PM ELSE FXO.INSTRUCTED_BY END AS INSTRUCTED_BY,      FXO.CREATED_FROM AS ORDER_SOURCE,      FXO.FM_COMMENTS,      FXO.TRADE_PURPOSE,      FXO.MARKER,      cc_fx.FIXING_DATE,      FXO.BUSINESS_GROUP,      FXO.TRADE_VENUE AS PLACEMENT_VENUE,      cc_fx.EXECUTED_BANK,      FXO.INSTRUCTION_STATUS,      cc_fx.TRADE_STATUS,      cc_fx.TAKEN_OVER_BY,      ex.[ORDER_ID] as ORDER_ID,      COALESCE(FXO.ORD_NUM,FXO.FXM_ORDER_ID) as PM_ORDER_ID,       cc_fx.TRADE_ID as TRANSACTION_NUMBER,      FXO.ALADDIN_COMMON_ID as ALADDIN_COMMON_IDENTIFIER,      FORMAT(FXO.AUTH_TIME,'dd/MM/yyyy HH:mm:ss') as AUTHORISED_DATE_TIME,      EX.VG_603 as EXCEPTION_FLAG,      EX.VG_603_CREATETIME as CREATE_DATE,      EX.SOURCE AS DATA_SOURCE,      cc_fx.EXECUTED_DATE_TIME as OS_EXECUTED_DATE_TIME     INTO #temp_final_master_table     FROM VISTA_STAGING.DBO.VG_603_LARGE_TRADES_FX_TABLE EX     LEFT JOIN #conc_fx cc_fx ON cc_fx.ORDER_ID = ex.ORDER_ID     LEFT JOIN (SELECT DISTINCT FXO.* FROM VISTA_REPORTING.DBO.FX_ORDERS FXO          INNER JOIN #api_req_orders api on api.FXM_ORDER_ID = fxo.FXM_ORDER_ID                  and api.MAX_DATE = fxo.API_REQUESTED_DATE) FXO ON EX.ORDER_ID = FXO.FXM_ORDER_ID     LEFT JOIN #lt_ext ext on ext.ORDER_ID = ex.ORDER_ID and ext.SOURCE = EX.SOURCE     LEFT JOIN VISTA_STAGING.dbo.REF_FX_LARGE_TRADE_THRESHOLDS REF ON CAST(fxo.PULL_DATE AS DATE) BETWEEN CAST(REF.DATE_FROM AS DATE) AND CAST(REF.DATE_TO AS DATE)     LEFT JOIN VISTA_REPORTING.DBO.FX_TRADES FXT ON EX.ORDER_ID = FXT.ORDER_ID      left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd on tdd.[MG_USER_ID] = fxt.[DEALT_BY]                      AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE)                                       AND CAST(tdd.[DATE_TO] AS DATE)     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2 on tdd.[MG_USER_ID] = fxt.[ACCEPTED_BY]                      AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE)                                       AND CAST(tdd2.[DATE_TO] AS DATE)     left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd on dd.[REPORT_NAME] = 'Large Trades'                      AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE)                                       AND CAST(dd.[DATE_TO] AS DATE)     WHERE EX.SOURCE = 'FX' AND EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ex.ORDER_ID)         UNION         SELECT DISTINCT       COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) AS DEALER_NAME,      CAST(FORMAT(PLA.QUANTITY, '#,0.00') as varchar(50)) as GBP_EQUIVALENT_AMOUNT, --No need for CASE WHEN here as notional_amount and notional_amount_far both map to Quantity      cc_fx.GBP_EQUIVALENT_AMOUNT_TRADE_AL, --Mapping table states there is no AL field for this - ER: CONFIRM WITH BUSINESS      CAST(FORMAT(CAST(REF.LIMIT_7 as decimal(38,2)), '#,0.00') as varchar(50)) AS LARGE_TRADE_THRESHOLD,      CASE WHEN ext.LARGE_TRADE_EXCEPTION = 1 THEN 'Y' WHEN ext.LARGE_TRADE_EXCEPTION = 0 THEN 'N' ELSE NULL END AS IS_LARGE_TRADE,      FORMAT(PMO.ACTIVE_TIME,'dd/MM/yyyy HH:mm:ss') as ACCEPTED_DATE_TIME,      cc_fx.MARKET_ARRIVAL_DATE_TIME,      FORMAT(PMO.AUTH_TIME,'dd/MM/yyyy HH:mm:ss') as ORDER_RECEIVED_DATE_TIME,      cc_fx.EXECUTED_DATE_TIME,      cc_fx.ALL_IN_RATE_AL, --Mapping is ambiguous so need to confirm what to do here - ER: CONFIRM WITH BUSINESS WHAT TO USE AS ALL_IN_RATE FOR OPTION CUROTC      CAST(NULL AS varchar(50)) as FORWARD_POINTS, --Mapping table states there is no AL field for this - ER: PROBABLY CORRECT WORTH CONFIRMING BELOW 3 FOR OPTION CUROTC      CAST(NULL AS VARCHAR(50)) as SPOT_RATE, --Mapping table says Trades.FX_PRICE_SPOT but this doesn't seem to exist in our DB      NULL as SWAP_POINTS, --Mapping table states there is no AL field for this      CAST(NULL AS VARCHAR(50)) as CLIENT_FUND, --Mapping table states there is no AL field for this  - ER: ASK BUSINESS      cc_fx.BASE_FUND_AL,      PMO.SM_SEC_TYPE as PRODUCT,      CAST(NULL as varchar(50)) as FXM_PRODUCT, --Mapping table states there is no AL field for this - ER: THIS COULD BE 'FX OPTION' AS THEY ARE ALL THAT, ASK THANOS      CAST(NULL as varchar(50)) as [ACTION], --Mapping table states there is no AL field for this - ER : ASK BUSINESS      cc_fx.INSTRUCTED_CURRENCY_AL, --No need for CASE WHEN here as instructed_currency_far does not exist in AL - ER: ASK THANOS/BUSINESS AS THIS IS A STRANGE CURRENCY TO USE      CAST(NULL AS VARCHAR(50)) as BUY_CURRENCY, --Mapping table states there is no AL field for this - ER: ASK BUSINESS WHAT WE SHOW FOR BUY/SELL CCY FOR OPTION/CUROTC      CAST(NULL AS VARCHAR(50)) as SELL_CURRENCY, --Mapping table states there is no AL field for this      CAST(FORMAT(PLA.QUANTITY, '#,0.00') as varchar(30)) as INSTRUCTED_AMOUNT,      FORMAT(PMO.OPEN_DATE,'dd/MM/yyyy HH:mm:ss') as TRADE_DATE,      CASE WHEN PMO.MATURITY IS NULL THEN CONVERT(VARCHAR(50),FORMAT(PMO.SETTLE_DATE, 'dd/MM/yyyy hh:mm:ss')) WHEN PMO.MATURITY IS NOT NULL THEN CONCAT(FORMAT(PMO.SETTLE_DATE, 'dd/MM/yyyy hh:mm:ss'), ' | ', FORMAT(PMO.MATURITY, 'dd/MM/yyyy hh:mm:ss')) END AS   VALUE_DATE, --Mapping table was ambiguous but this shows the most info      CAST(FORMAT(PMO.FILL_AMT, '#,0.00') as varchar(50)) as EXECUTED_AMOUNT, --No need for CASE WHEN here as executed_amount_far does not exist in AL       CAST(NULL as varchar(50)) as SWAP_TYPE, --Mapping table states there is no AL field for this - ER: CORRECT AS THERE IS NO SWAPS IN ALADDIN ONLY DATA       CAST(NULL as varchar(50)) as NET_EXPOSURE, --Mapping table states there is no AL field for this - ER: CHECK WITH THANOS THAT NET EXPOSURE CANT HAPPEN OUT OF SWAPS      PMO.PM as INSTRUCTED_BY,      'Aladdin' as ORDER_SOURCE, --I am only assuming we want 'Aladdin' here at all times as the sheet says N/A - ER: GET CONFIRMATION WITH BUSINESS      PMO.COMMENTS_VALUE as FM_COMMENTS,      cc_fx.TRADE_PURPOSE,      CAST(NULL as varchar(50)) as MARKER, --Mapping table states there is no AL field for this - ER: ASK BUSINESS      CAST(NULL as varchar(50)) as FIXING_DATE, --If we figure out what Trades.SECURITY.SMARTCUT.FXNDF_ANNOUNCE_DATE means then it should be that - ER: ASK THANOS/BUSINESS         CASE       WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP'       WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG'       WHEN (pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM'      ELSE NULL      END AS [BUSINESS_GROUP],      PLA.VENUE as PLACEMENT_VENUE,      PLA.BROKER as EXECUTED_BANK,      PLA.[STATUS] as INSTRUCTION_STATUS,      cc_fx.TRADE_STATUS,      cc_fx.TAKEN_OVER_BY,      ex.ORDER_ID as ORDER_ID, --This is always null as there is no order ID for non-FXM orders      PMO.ORD_NUM as PM_ORDER_ID,      cc_fx.TRADE_ID,      cast(REQ.REQUEST_ID AS varchar(50)) as ALADDIN_COMMON_IDENTIFIER,      FORMAT(PMO.AUTH_TIME,'dd/MM/yyyy HH:mm:ss') as AUTHORISED_DATE_TIME,      EX.VG_603 as EXCEPTION_FLAG,      EX.VG_603_CREATETIME as CREATE_DATE,      EX.SOURCE AS DATA_SOURCE,      cc_fx.EXECUTED_DATE_TIME AS OS_EXECUTED_DATE_TIME     FROM VISTA_STAGING.DBO.VG_603_LARGE_TRADES_FX_TABLE EX     LEFT JOIN #conc_fx cc_fx ON cc_fx.ORDER_ID = ex.ORDER_ID     LEFT JOIN (SELECT distinct           PM.ORD_NUM,          PM.AUTH_TIME,          PM.STATUS,          PM.PM,          PM.ACTIVE_TIME,          PM.COMMENTS_VALUE,          PM.OPEN_DATE,          PM.SM_SEC_TYPE,          PM.MATURITY,          PM.FILL_AMT,          PM.SETTLE_DATE,         PM.[PULL_DATE],         pm.[TRADER]       FROM VISTA_REPORTING.dbo.PM_ORDERS PM        INNER JOIN #max_touch_pm MPM on PM.ORD_NUM = MPM.ORD_NUM and PM.TOUCH_COUNT = MPM.MAX_TOUCH) PMO on EX.ORDER_ID = PMO.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS OC on oc.PM_ORD = PMO.ORD_NUM     LEFT JOIN (SELECT distinct          TR.ORD_NUM,          TR.TRD_TRADER,          TR.PULL_DATE,          TR.FX_PAY_CURR,          TR.EXECUTION_TIME,          TR.TRD_STATUS,          TR.PORTFOLIOS_PORTFOLIO_NAME,          TR.TRD_PURPOSE,          TR.MULTI_FUND_ID,         TR.FX_PRICE,         TR.FUND,         TR.TRD_CURRENCY,         TR.TRD_AUTH_TIME,         TR.TRD_ORIG_FACE,         e.GBP_INDEX_RATE        FROM VISTA_REPORTING.dbo.TRADES TR        INNER JOIN #max_touch_t MTT on TR.MULTI_FUND_ID = MTT.MULTI_FUND_ID and TR.TOUCH_COUNT = MTT.MAX_TOUCH        outer apply (SELECT TOP 1 e.*             FROM VISTA_REPORTING.dbo.FX_RATES e             WHERE e.CURRENCY = TR.TRD_CURRENCY and CONVERT(date, e.MARKDATE) <= CONVERT(date, TR.TRD_AUTH_TIME)            ORDER BY e.MARKDATE DESC) e         )TRD ON trd.ORD_NUM = OC.trd_ORD     LEFT JOIN (SELECT distinct ORD_NUM, PLACEMENT_NUM, [STATUS], QUANTITY, BROKER, AVG_PRICE, VENUE FROM VISTA_REPORTING.dbo.PLACEMENTS) PLA ON EX.ORDER_ID = PLA.ORD_NUM -- THIS NEEDS TO BE TRADER ORDER NUMBER ON PLACEMENTS I THINK?      LEFT JOIN (SELECT distinct PLACEMENT_NUM, REQUEST_ID FROM VISTA_STAGING.dbo.REQUEST_LOOKUP) REQ ON PLA.PLACEMENT_NUM = REQ.PLACEMENT_NUM     left join (SELECT DISTINCT FUND_ID, PORTFOLIO_GROUP_NAME FROM VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY) pgt on TRD.[FUND] = pgt.[FUND_ID]     LEFT JOIN #lt_ext ext on ext.ORDER_ID = ex.ORDER_ID and ext.SOURCE = EX.SOURCE     LEFT JOIN VISTA_STAGING.dbo.REF_FX_LARGE_TRADE_THRESHOLDS REF ON CAST(pmo.PULL_DATE AS DATE) BETWEEN CAST(REF.DATE_FROM AS DATE) AND CAST(REF.DATE_TO AS DATE)     left join VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd on tdd.[INITIALS]  = trd.[TRD_TRADER]                      AND CAST(trd.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE)                               AND CAST(tdd.[DATE_TO] AS DATE)     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2 on tdd.[INITIALS] = pmo.[TRADER]                      AND CAST(pmo.[PULL_DATE] AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE)                               AND CAST(tdd2.[DATE_TO] AS DATE)     left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd on dd.[REPORT_NAME] = 'Large Trades'                      AND CAST(COALESCE(trd.[PULL_DATE],pmo.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE)                               AND CAST(dd.[DATE_TO] AS DATE)     WHERE EX.SOURCE = 'AL' AND EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ex.ORDER_ID)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE', 'U') IS NOT NULL     DELETE FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE     WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM=ORDER_ID)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE     SELECT *     FROM #temp_final_master_table         ELSE         SELECT *     INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE     FROM #temp_final_master_table             IF OBJECT_ID('tempdb..#max_touch_pm', 'U') IS NOT NULL DROP TABLE #max_touch_pm     IF OBJECT_ID('tempdb..#max_touch_t', 'U') IS NOT NULL DROP TABLE #max_touch_t     IF OBJECT_ID('tempdb..#API_REQ_ORDERS', 'U') IS NOT NULL DROP TABLE #API_REQ_ORDERS     IF OBJECT_ID('tempdb..#lt_ext', 'U') IS NOT NULL DROP TABLE #lt_ext     IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     IF OBJECT_ID('tempdb..#distinct_ids_al', 'U') IS NOT NULL DROP TABLE #distinct_ids_al     IF OBJECT_ID('tempdb..#distinct_ids_fx', 'U') IS NOT NULL DROP TABLE #distinct_ids_fx     IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE  #distinct_ids     IF OBJECT_ID('tempdb..#conc_fx', 'U') IS NOT NULL DROP TABLE #conc_fx     IF OBJECT_ID('tempdb..#trades_pop', 'U') IS NOT NULL DROP TABLE #trades_pop             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg603_fx_idx1')           DROP INDEX mmf_vg603_fx_idx1      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg603_fx_idx1     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE      (ORDER_ID)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg603_fx_idx2')           DROP INDEX mmf_vg603_fx_idx2      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg603_fx_idx2     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE      (AUTHORISED_DATE_TIME)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg603_fx_idx3')           DROP INDEX mmf_vg603_fx_idx3      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg603_fx_idx3     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE      (DEALER_NAME)              IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg603_fx_idx4')           DROP INDEX mmf_vg603_fx_idx4      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg603_fx_idx4     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE     (CREATE_DATE)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg603_fx_idx5')           DROP INDEX mmf_vg603_fx_idx5      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg603_fx_idx5     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE     (EXCEPTION_FLAG)         --IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes       --           WHERE name = N'mmf_vg603_fx_idx6')        --   DROP INDEX mmf_vg603_fx_idx6      --ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE          --CREATE NONCLUSTERED INDEX mmf_vg603_fx_idx6     --ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE     --(EXECUTED_DATE_TIME)              IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(     'MASTER_PM_ORDER_VG_603_LARGE_TRADES_FX_TABLE', --TABLE_NAME     @START_TIME, --START_TIME     GETDATE(), --END_TIME     DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS     CAST(GETDATE() as date)) --COMPLETION_DATE        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_PM_ORDER_TABLE_VG_604_CLIENT_ORDER_HANDLING_CASH  CreateDate: 2025-06-26 18:05:21.973  ModifyDate: 2025-06-26 18:05:21.973  --- DEFINITION START ---  -- =============================================    -- Author:  <Samad, Mehreen>    -- Create date: <18/06/2019>    -- Description:     -- <Master exception table for CLIENT ORDER     -- HANDLING RR & MM Exception test for CASH.>    -- =============================================        -- ***************VERSION CONTROL***************    --10/05/2023 - Matej Miter, created for Jira    --SURVG-804 - Within #al_concat_ord table that is within final master join added Bank,Executed_rates,fund and TRD_Counterparty.    --Also changed the join within #temp_combo_orders to actually get PM Order rather than trd ord which later was used to connect to pm order and not giving any expected results         --14/07/2023 - Matej Miter, created for Jira:    --SURVG-843 - Adding additional temp table in concatonated to remove duplicated values happening on order level when we have only 1 transaction for CP/CD products coming from AL side    -- *********************************************        CREATE PROCEDURE [dbo].[MASTER_PM_ORDER_TABLE_VG_604_CLIENT_ORDER_HANDLING_CASH]     -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,         AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         --Used to track total time stored procedure took to run     DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()         IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids     SELECT DISTINCT ORDER_ID, DATA_SOURCE     INTO #distinct_ids     FROM VISTA_STAGING.DBO.VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE         UNION ALL         SELECT DISTINCT ORDER_ID, DATA_SOURCE     FROM VISTA_STAGING.DBO.VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE;             --If the master table doesn't exist then we want to use all the data available, otherwise just the most recent data    IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE', 'U') IS NOT NULL    AND OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE', 'U') IS NOT NULL    DELETE FROM #distinct_ids     where NOT EXISTS (SELECT od.ORDER_ID          FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_CASH od          WHERE od.ORDER_ID = #distinct_ids.ORDER_ID)    AND #distinct_ids.DATA_SOURCE = 'CM';        IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE', 'U') IS NOT NULL    AND OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE', 'U') IS NOT NULL    DELETE FROM #distinct_ids     where NOT EXISTS (SELECT od.PM_ORD          FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od          WHERE od.PM_ORD = #distinct_ids.ORDER_ID)    AND #distinct_ids.DATA_SOURCE = 'AL';                IF OBJECT_ID('tempdb..#temp_cash_trades', 'U') IS NOT NULL DROP TABLE #temp_cash_trades    SELECT DISTINCT t.TRANSACTION_NUMBER    into #temp_cash_trades    from Vista_Reporting.dbo.CASH_TRADES t    INNER JOIN #distinct_ids di ON di.ORDER_ID = t.ORDER_ID        UNION        SELECT DISTINCT tr.MULTI_FUND_ID    FROM Vista_Reporting.dbo.ORDERS_CROSS oc    INNER JOIN #distinct_ids di ON di.ORDER_ID = oc.PM_ORD    LEFT JOIN Vista_Reporting.dbo.TRADES tr on oc.TRD_ORD = tr.ORD_NUM;            IF OBJECT_ID('tempdb..#temp_max_trade_touch', 'U') IS NOT NULL DROP TABLE #temp_max_trade_touch    SELECT     MULTI_FUND_ID,     MAX(TOUCH_COUNT) AS MAX_TOUCH    INTO #temp_max_trade_touch    FROM VISTA_REPORTING.dbo.TRADES t    INNER JOIN #temp_cash_trades c ON C.TRANSACTION_NUMBER = t.MULTI_FUND_ID    GROUP BY MULTI_FUND_ID;        --SURVG-843 - adding temp table for max touch count with Order numbner to use in concatonated table below    IF OBJECT_ID('tempdb..#temp_max_trade_touch_concat', 'U') IS NOT NULL DROP TABLE #temp_max_trade_touch_concat    SELECT     MULTI_FUND_ID,     ORD_NUM,     MAX(TOUCH_COUNT) AS MAX_TOUCH    INTO #temp_max_trade_touch_concat    FROM VISTA_REPORTING.dbo.TRADES t    GROUP BY MULTI_FUND_ID,ORD_NUM;    --End of SURVG-843        IF OBJECT_ID('tempdb..#temp_max_ORDER_touch', 'U') IS NOT NULL DROP TABLE #temp_max_ORDER_touch    SELECT     ORD_NUM,     MAX(TOUCH_COUNT) AS MAX_TOUCH    INTO #temp_max_ORDER_touch    FROM VISTA_REPORTING.dbo.PM_ORDERS pm    INNER JOIN #distinct_ids di ON di.ORDER_ID = pm.ORD_NUM    GROUP BY ORD_NUM;        IF OBJECT_ID('tempdb..#temp_max_ORDER_CM', 'U') IS NOT NULL DROP TABLE #temp_max_ORDER_CM    SELECT DISTINCT    pm.order_id,    max(api_requested_date) as max_date    into #temp_max_order_cm    from VISTA_REPORTING.dbo.CASH_ORDERS pm    INNER JOIN #distinct_ids di ON di.ORDER_ID = pm.ORDER_ID    group by pm.ORDER_ID;                IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades    SELECT      ct.TRANSACTION_NUMBER,     MAX(API_REQUESTED_DATE) AS MAX_API_REQ    INTO #temp_max_req_trades    FROM VISTA_REPORTING.dbo.CASH_TRADES ct    INNER JOIN #temp_cash_trades t ON T.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER    GROUP BY ct.TRANSACTION_NUMBER;            IF OBJECT_ID('tempdb..#temp_recent_dealer_al', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_al    SELECT DISTINCT oc.PM_ORD as ORD_NUM,     trd_trader     INTO #temp_recent_dealer_al     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc on oc.TRD_ORD = t.ORD_NUM     INNER JOIN (SELECT        OC.PM_ORD AS ORD_NUM,        MAX(EXECUTION_TIME) AS MAX_EXEC,        MAX(TOUCH_COUNT) AS MAX_TOUCH        FROM VISTA_REPORTING.dbo.TRADES T        LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS OC ON OC.TRD_ORD = T.ORD_NUM        GROUP BY OC.PM_ORD) T2 ON T2.ORD_NUM = OC.PM_ORD               AND T2.MAX_EXEC = t.EXECUTION_TIME              AND T2.MAX_TOUCH = t.TOUCH_COUNT     INNER JOIN #temp_cash_trades ct ON ct.TRANSACTION_NUMBER = t.MULTI_FUND_ID;        IF OBJECT_ID('tempdb..#temp_recent_dealer_cm', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_cm    SELECT DISTINCT    ct.ORDER_ID,           ct.DEALER_NAME    INTO #temp_recent_dealer_cm    FROM VISTA_REPORTING.dbo.CASH_TRADES ct    INNER JOIN (SELECT                   ORDER_ID,                  MAX(EXECUTED_DATETIME) AS MAX_EXEC,                  MAX(API_REQUESTED_DATE) AS MAX_API_REQ                  FROM VISTA_REPORTING.dbo.CASH_TRADES                  GROUP BY ORDER_ID) ct2 ON nullif(ct2.ORDER_ID, '0') = ct.ORDER_ID                                             AND ct2.MAX_EXEC = ct.EXECUTED_DATETIME                                            AND ct2.MAX_API_REQ = ct.API_REQUESTED_DATE    INNER JOIN #temp_cash_trades t ON t.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER;            --Concatonated fields for CM    IF OBJECT_ID('tempdb..#cm_concat_ord', 'U') IS NOT NULL DROP TABLE #cm_concat_ord    SELECT DISTINCT     ex.[ORDER_ID],     CONFIRMED_DATETIME = STUFF((         SELECT  ' | ' +  + CAST(FORMAT(CONFIRMED_DATETIME, 'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50))        FROM VISTA_REPORTING.dbo.CASH_TRADES ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'CM' order by TRANSACTION_NUMBER        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     PRODUCT = STUFF((         SELECT  ' | ' +  + CAST(PRODUCT AS VARCHAR(50))        FROM VISTA_REPORTING.dbo.CASH_TRADES ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'CM' order by TRANSACTION_NUMBER        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     TRANSACTION_NUMBER = STUFF((         SELECT  ' | ' +  + CAST(TRANSACTION_NUMBER AS VARCHAR(50))        FROM VISTA_REPORTING.dbo.CASH_TRADES ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'CM' order by TRANSACTION_NUMBER        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     EXECUTED_DATETIME = STUFF((        SELECT  ' | '+  + CAST(FORMAT(CT.EXECUTED_DATETIME, 'dd/MM/yyyy HH:mm:ss') AS varchar(50))          FROM VISTA_REPORTING.dbo.CASH_TRADES ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'CM' order by TRANSACTION_NUMBER        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     DEALT_AMOUNT = STUFF((        SELECT  ' | '+  + CAST(FORMAT(CT.DEALT_AMOUNT, '#,0.00') AS varchar(50))         FROM VISTA_REPORTING.dbo.CASH_TRADES ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'CM' order by TRANSACTION_NUMBER        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     TRANSACTION_TYPE = STUFF((        SELECT  ' | '+  + CAST(CT.TRANSACTION_TYPE AS varchar(50))         FROM VISTA_REPORTING.dbo.CASH_TRADES ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'CM' order by TRANSACTION_NUMBER        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),      EXECUTED_BANK = STUFF((        SELECT  ' | '+  + CAST(CT.BANK AS varchar(50))        FROM VISTA_REPORTING.dbo.CASH_TRADES ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'CM' order by TRANSACTION_NUMBER        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     EXECUTED_RATE = STUFF((        SELECT  ' | ' + CAST(CONVERT(DECIMAL(38,4), ct.EXECUTED_RATE) AS varchar(50))        FROM VISTA_REPORTING.dbo.CASH_TRADES ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'CM' order by TRANSACTION_NUMBER        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)') ,1,2,'')    INTO #cm_concat_ord    FROM VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE ex    WHERE ex.[DATA_SOURCE] = 'CM'    UNION    SELECT DISTINCT     ex.[ORDER_ID],     CONFIRMED_DATETIME = STUFF((         SELECT  ' | ' +  + CAST(FORMAT(CONFIRMED_DATETIME, 'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50))        FROM VISTA_REPORTING.dbo.CASH_TRADES ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'CM' order by TRANSACTION_NUMBER        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     PRODUCT = STUFF((         SELECT  ' | ' +  + CAST(PRODUCT AS VARCHAR(50))        FROM VISTA_REPORTING.dbo.CASH_TRADES ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'CM' order by TRANSACTION_NUMBER        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     TRANSACTION_NUMBER = STUFF((         SELECT  ' | ' +  + CAST(TRANSACTION_NUMBER AS VARCHAR(50))        FROM VISTA_REPORTING.dbo.CASH_TRADES ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'CM' order by TRANSACTION_NUMBER        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     EXECUTED_DATETIME = STUFF((        SELECT  ' | '+  + CAST(FORMAT(CT.EXECUTED_DATETIME, 'dd/MM/yyyy HH:mm:ss') AS varchar(50))         FROM VISTA_REPORTING.dbo.CASH_TRADES ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'CM' order by TRANSACTION_NUMBER        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     DEALT_AMOUNT = STUFF((        SELECT  ' | '+  + CAST(FORMAT(CT.DEALT_AMOUNT, '#,0.00') AS varchar(50))         FROM VISTA_REPORTING.dbo.CASH_TRADES ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'CM' order by TRANSACTION_NUMBER        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     TRANSACTION_TYPE = STUFF((        SELECT  ' | '+  + CAST(CT.TRANSACTION_TYPE AS varchar(50))         FROM VISTA_REPORTING.dbo.CASH_TRADES ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'CM' order by TRANSACTION_NUMBER        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     EXECUTED_BANK = STUFF((        SELECT  ' | '+  + CAST(CT.BANK AS varchar(50))         FROM VISTA_REPORTING.dbo.CASH_TRADES ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'CM' order by TRANSACTION_NUMBER        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     EXECUTED_RATE = STUFF((        SELECT  ' | ' + CAST(CONVERT(DECIMAL(38,4), ct.EXECUTED_RATE) AS varchar(50))        FROM VISTA_REPORTING.dbo.CASH_TRADES ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'CM' order by TRANSACTION_NUMBER        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)') ,1,2,'')    FROM VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE ex    INNER JOIN #distinct_ids di ON di.ORDER_ID = ex.ORDER_ID    WHERE ex.[DATA_SOURCE] = 'CM';            --SURVG-804    --SURVG-843 - added #temp_max_trade_touch_concat table with join for max touch count to remove duplicates when only one transaction under order    --Concatonated fields for AL     IF OBJECT_ID('tempdb..#al_concat_ord', 'U') IS NOT NULL DROP TABLE #al_concat_ord    SELECT DISTINCT     ex.[ORDER_ID],     EXECUTION_TIME = STUFF((         SELECT  ' | ' +  + CAST(EXECUTION_TIME AS VARCHAR(50))        FROM VISTA_REPORTING.dbo.TRADES t        inner join #temp_max_trade_touch_concat v on t.MULTI_FUND_ID = v.MULTI_FUND_ID and t.TOUCH_COUNT = v.MAX_TOUCH        WHERE  v.[ORD_NUM] = oc.TRD_ORD and ex.[DATA_SOURCE] = 'AL' ORDER BY t.MULTI_FUND_ID        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     TRANSACTION_NUMBER = STUFF((         SELECT  ' | ' +  + CAST(ct.MULTI_FUND_ID AS VARCHAR(50))        FROM VISTA_REPORTING.dbo.TRADES ct        inner join #temp_max_trade_touch_concat v on ct.MULTI_FUND_ID = v.MULTI_FUND_ID and ct.TOUCH_COUNT = v.MAX_TOUCH        WHERE v.[ORD_NUM] = oc.TRD_ORD and ex.[DATA_SOURCE] = 'AL' ORDER BY ct.MULTI_FUND_ID        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     EXECUTED_DATETIME = STUFF((        SELECT  ' | '+  + CAST(FORMAT(CT.EXECUTION_TIME, 'dd/MM/yyyy HH:mm:ss') AS varchar(50))         FROM VISTA_REPORTING.dbo.TRADES ct             inner join #temp_max_trade_touch_concat v on ct.MULTI_FUND_ID = v.MULTI_FUND_ID and ct.TOUCH_COUNT = v.MAX_TOUCH        WHERE v.ORD_NUM = oc.TRD_ORD and ex.[DATA_SOURCE] = 'AL' ORDER BY ct.MULTI_FUND_ID        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     DEALT_AMOUNT = STUFF((        SELECT  ' | '+  + CAST(FORMAT(CT.TRD_ORIG_FACE, '#,0.00') AS varchar(50))         FROM VISTA_REPORTING.dbo.TRADES ct             inner join #temp_max_trade_touch_concat v on ct.MULTI_FUND_ID = v.MULTI_FUND_ID and ct.TOUCH_COUNT = v.MAX_TOUCH        WHERE v.[ORD_num] = oc.TRD_ORD and ex.[DATA_SOURCE] = 'AL'  ORDER BY ct.MULTI_FUND_ID        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     EXECUTED_BANK = STUFF((        SELECT  ' | '+  + CAST(CT.TRD_COUNTERPARTY AS varchar(50))         FROM VISTA_REPORTING.dbo.TRADES ct             inner join #temp_max_trade_touch_concat v on ct.MULTI_FUND_ID = v.MULTI_FUND_ID and ct.TOUCH_COUNT = v.MAX_TOUCH        WHERE v.[ORD_num] = oc.TRD_ORD and ex.[DATA_SOURCE] = 'AL' ORDER BY ct.MULTI_FUND_ID        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     EXECUTED_RATE = STUFF((        SELECT  ' | '+  + CAST(FORMAT(CT.TRD_PRICE, '#,0.00') AS varchar(50))         FROM VISTA_REPORTING.dbo.TRADES ct             inner join #temp_max_trade_touch_concat v on ct.MULTI_FUND_ID = v.MULTI_FUND_ID and ct.TOUCH_COUNT = v.MAX_TOUCH        WHERE v.[ORD_num] = oc.TRD_ORD and ex.[DATA_SOURCE] = 'AL' ORDER BY ct.MULTI_FUND_ID        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     FUND = STUFF((        SELECT  ' | '+  + CAST(CT.FUND AS varchar(50))         FROM VISTA_REPORTING.dbo.TRADES ct             inner join #temp_max_trade_touch_concat v on ct.MULTI_FUND_ID = v.MULTI_FUND_ID and ct.TOUCH_COUNT = v.MAX_TOUCH        WHERE v.[ORD_num] = oc.TRD_ORD and ex.[DATA_SOURCE] = 'AL' ORDER BY ct.MULTI_FUND_ID        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, '')    INTO #al_concat_ord    FROM VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE ex    LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc on ex.ORDER_ID = oc.PM_ORD    INNER JOIN #distinct_ids di ON di.ORDER_ID = ex.ORDER_ID    WHERE ex.[DATA_SOURCE] = 'AL';    --Enf of SURVG-843     --End of SURVG-804            IF OBJECT_ID('tempdb..#temp_combo_orders', 'U') IS NOT NULL DROP TABLE #temp_combo_orders    SELECT DISTINCT     co.ORDER_ID,     ACCEPTED_DATETIME,     INSTRUCTION_RECEIVED_DATE,     INSTRUCTION_INITIATION_DATE_TIME,     INSTRUCTED_CURRENCY,     TRADE_DATE,     INSTRUCTED_AMOUNT,     INSTRUCTED_BY,     SEQUENCE_EXCEPTION_REASON,     SEQUENCE_EXCEPTION_NARRATION,     DELETED_REASON,     DELETED_REASON_NARRATION,     INSTRUCTION_STATUS_DECODE,     FREEZE_DATETIME,     FREEZEREASON,     FREEZE_REASON_NARRATION,     RELEASE_DATETIME,     RELEASE_REASON,     RELEASE_REASON_NARRATION,     CUSTOM_INSTRUCTION,     ACCEPTED_BY,     TRANSACTION_TYPE,     PULL_DATE,     PRODUCT    INTO #temp_combo_orders    FROM VISTA_REPORTING.dbo.CASH_ORDERS co    INNER JOIN #temp_max_order_cm moo ON moo.ORDER_ID = CO.order_id AND moo.max_date = CO.api_requested_date    INNER JOIN #distinct_ids di ON di.ORDER_ID = co.ORDER_ID        UNION        SELECT DISTINCT     pm.ORD_NUM,     pm.ACTIVE_TIME,     pm.AUTH_TIME,     pm.ACTIVE_TIME,     pm.CURRENCY,     null,     pm.FACE,     pm.PM,     NULL,     NULL,     NULL,     NULL,     pm.[STATUS],     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     pm.COMMENTS_VALUE,     TRADER,     TRAN_TYPE,     pm.PULL_DATE,     SM_SEC_TYPE as product    FROM VISTA_REPORTING.dbo.PM_ORDERS pm    INNER JOIN #temp_max_ORDER_touch mot on mot.ORD_NUM = pm.ORD_NUM and mot.MAX_TOUCH = pm.TOUCH_COUNT    LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD=pm.ORD_NUM    INNER JOIN #distinct_ids di ON di.ORDER_ID = pm.ORD_NUM    where pm.DEALING_DESK = 'cash';            IF OBJECT_ID('tempdb..#temp_combo_trades', 'U') IS NOT NULL DROP TABLE #temp_combo_trades    SELECT DISTINCT     ORDER_ID,     CLIENT_FUND_OR_POOL_CODE,     BASE_FUND_CODE,     cast(VALUE_DATE as date) as VALUE_DATE, --vishal said value date should be date only and this si causing duplications     MATURITY_DATE,     DEALER_NAME_DECODE,     TERM,     BUSINESS_GROUP,     DEALER_NAME,     DEALT_AMOUNT,     EXECUTED_DATETIME,     BANK AS EXECUTED_BANK    INTO #temp_combo_trades    FROM VISTA_REPORTING.dbo.CASH_TRADES ct    INNER JOIN #temp_max_req_trades req ON req.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER and req.MAX_API_REQ = ct.API_REQUESTED_DATE    INNER JOIN #temp_cash_trades t ON t.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER        UNION    --SURVG-804        SELECT DISTINCT     oc.PM_ORD,     NULL,     t.PORTFOLIOS_PORTFOLIO_NAME,     cast(TRD_TRADE_DATE as date) as value_date,     t.TRD_SETTLE_DATE,     t.TRD_TRADER,     NULL,     case when PCG.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP'       WHEN PCG.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG'       WHEN  (PCG.[PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR PCG.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM' else null end as business_group,     t.TRD_TRADER,     NULL,     t.EXECUTION_TIME,     NULL    FROM VISTA_REPORTING.dbo.TRADES t    INNER JOIN #temp_max_trade_touch mtt on mtt.MAX_TOUCH = t.TOUCH_COUNT and mtt.MULTI_FUND_ID = t.MULTI_FUND_ID    LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD=t.ORD_NUM    LEFT JOIN (SELECT DISTINCT ORD_NUM, INST_TYPE, DEALING_DESK FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr ON pr.ORD_NUM=t.ORD_NUM    LEFT JOIN (SELECT PORTFOLIO_NAME, PORTFOLIO_GROUP_FULL_NAME, PORTFOLIO_GROUP_NAME  FROM VISTA_REPORTING.DBO.PORTFOLIO_GROUPS_TREASURY ) PCG ON PCG.PORTFOLIO_NAME = CONVERT(VARCHAR(30), T.FUND)     INNER JOIN #temp_cash_trades tct ON tct.TRANSACTION_NUMBER = t.MULTI_FUND_ID    WHERE  pr.DEALING_DESK = 'CASH' AND EXECUTION_TIME IS NOT NULL;    --End of SURVG-804        IF OBJECT_ID('tempdb..#temp_final_master_table_rr', 'U') IS NOT NULL DROP TABLE #temp_final_master_table_rr    SELECT DISTINCT         COALESCE(TDD.FULL_NAME, TDD2.FULL_NAME, dd.default_dealer)  AS [DEALER_NAME] ,     co.[SEQUENCE_EXCEPTION_REASON],     co.[SEQUENCE_EXCEPTION_NARRATION],     ct.[CLIENT_FUND_OR_POOL_CODE] as CLIENT_FUND_POOL_CODE,     conc_cm.[PRODUCT],     co.[INSTRUCTED_CURRENCY] as INSTRUCTED_CURRENCY,     FORMAT(convert(decimal(38,2), co.[INSTRUCTED_AMOUNT]), '#,0.00') as INSTRUCTED_AMOUNT,     FORMAT(co.INSTRUCTION_RECEIVED_DATE, 'dd/MM/yyyy HH:mm:ss') as INSTRUCTION_RECEIVED_DATE_TIME,     conc_cm.EXECUTED_BANK AS BANK,     conc_cm.EXECUTED_RATE,     FORMAT(co.[ACCEPTED_DATETIME], 'dd/MM/yyyy HH:mm:ss') AS ACCEPTED_DATE_TIME,     conc_cm.[CONFIRMED_DATETIME] as CONFIRMED_DATE_TIME,     CONC_CM.EXECUTED_DATETIME AS EXECUTED_DATE_TIME,     CASE      WHEN cl.FIRM_FUND IS NULL THEN 'CLIENT'      ELSE 'FIRM'     END AS FIRM_VS_CLIENT,     IMPACTED as IMPACTED_ORDERS,      FORMAT(co.[TRADE_DATE], 'dd/MM/yyyy HH:mm:ss') AS TRADE_DATE,     FORMAT(ct.[VALUE_DATE], 'dd/MM/yyyy HH:mm:ss') AS VALUE_DATE,     FORMAT(ct.[MATURITY_DATE], 'dd/MM/yyyy HH:mm:ss')  AS MATURITY_DATE,     ct.[TERM],     conc_cm.TRANSACTION_TYPE AS TRANSACTION_TYPE,     co.[CUSTOM_INSTRUCTION],     ct.[BASE_FUND_CODE],     ct.[BUSINESS_GROUP],     co.[INSTRUCTED_BY],     CO.ACCEPTED_BY,      conc_cm.DEALT_AMOUNT,     co.[DELETED_REASON],     co.[DELETED_REASON_NARRATION],     FORMAT(co.[FREEZE_DATETIME], 'dd/MM/yyyy HH:mm:ss')  as FREEZE_DATE_TIME,     co.[FREEZEREASON] as FREEZE_REASON,     co.[FREEZE_REASON_NARRATION],     FORMAT(co.[RELEASE_DATETIME], 'dd/MM/yyyy HH:mm:ss')  as RELEASE_DATE_TIME,     co.[RELEASE_REASON],     co.[RELEASE_REASON_NARRATION],     DATEDIFF(MINUTE,co.[RELEASE_DATETIME],co.[FREEZE_DATETIME]) as TIME_ELAPSED_BETWEEN_FREEZE_AND_RELEASE, -- Is this going to be in MINS?     co.[INSTRUCTION_STATUS_DECODE] as INSTRUCTION_STATUS,     ex.[ORDER_ID],     conc_cm.TRANSACTION_NUMBER AS TRANSACTION_NUMBER,     CASE WHEN ex.VG_604 = 1 THEN 'Exception' ELSE '' END AS EXCEPTION,      ex.[VG_604_CREATETIME] as CREATE_DATE,        ex.[VG_604] as EXCEPTION_FLAG,     ex.[DATA_SOURCE],     DATEDIFF(DAY,VALUE_DATE,MATURITY_DATE)  AS NO_OF_DAYS --Not in Vishals excel so should not be in FE    INTO #temp_final_master_table_rr    FROM VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE ex    left join #temp_combo_trades ct on ct.[ORDER_ID] = ex.[ORDER_ID]    left join #temp_combo_orders co on ex.[ORDER_ID] = co.[ORDER_ID]    left join #cm_concat_ord conc_cm on conc_cm.[ORDER_ID] = ex.[ORDER_ID]    LEFT JOIN #temp_recent_dealer_al RAL ON RAL.ORD_NUM  = eX.ORDER_ID AND eX.DATA_SOURCE = 'AL'    LEFT JOIN #temp_recent_dealer_cm RCM ON RCM.ORDER_ID = eX.ORDER_ID AND eX.DATA_SOURCE = 'CM'    LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD ON (TDD.MG_USER_ID  = RCM.DEALER_NAME AND eX.DATA_SOURCE = 'CM') OR (TDD.INITIALS = RAL.TRD_TRADER AND eX.DATA_SOURCE = 'AL')  AND CAST(CO.PULL_DATE AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE)    LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD2 ON (TDD2.MG_USER_ID  = COALESCE(CO.ACCEPTED_BY, CO.INSTRUCTED_BY)) AND CAST(CO.PULL_DATE AS DATE) BETWEEN CAST(TDD2.DATE_FROM AS DATE) AND CAST(TDD2.DATE_TO AS DATE)    LEFT JOIN VISTA_STAGING.dbo.REF_COH_FIRM_FUND_LIST cl ON cl.FIRM_FUND=ct.CLIENT_FUND_OR_POOL_CODE AND co.INSTRUCTION_RECEIVED_DATE BETWEEN cl.DATE_FROM AND cl.DATE_TO    LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'Client Order Handling RR'  AND CAST(CO.PULL_DATE AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)    INNER JOIN #distinct_ids di ON di.ORDER_ID = ex.ORDER_ID;        --SURVG-804    IF OBJECT_ID('tempdb..#temp_final_master_table_mm', 'U') IS NOT NULL DROP TABLE #temp_final_master_table_mm    SELECT DISTINCT         COALESCE(TDD.FULL_NAME, TDD2.FULL_NAME, dd.default_dealer)  AS [DEALER_NAME] ,     co.[SEQUENCE_EXCEPTION_REASON],     co.[SEQUENCE_EXCEPTION_NARRATION],     COALESCE(ct.[CLIENT_FUND_OR_POOL_CODE],CONC_AL.FUND) as CLIENT_FUND_POOL_CODE,     case when ex.DATA_SOURCE = 'cm' then conc_cm.[PRODUCT] when ex.DATA_SOURCE = 'al' then co.PRODUCT end as PRODUCT,     co.[INSTRUCTED_CURRENCY] as INSTRUCTED_CURRENCY,     FORMAT(CONVERT(DECIMAL(38,2),co.[INSTRUCTED_AMOUNT]), '#,0.00') AS INSTRUCTED_AMOUNT,     FORMAT(co.INSTRUCTION_RECEIVED_DATE, 'dd/MM/yyyy HH:mm:ss')  as INSTRUCTION_RECEIVED_DATE_TIME,     COALESCE(conc_cm.EXECUTED_BANK,CONC_AL.EXECUTED_BANK) AS BANK,     COALESCE(conc_cm.EXECUTED_RATE,CONC_AL.EXECUTED_RATE) as EXECUTED_RATE,     FORMAT(co.[ACCEPTED_DATETIME], 'dd/MM/yyyy HH:mm:ss')  as ACCEPTED_DATE_TIME,     FORMAT(co.[INSTRUCTION_INITIATION_DATE_TIME], 'dd/MM/yyyy HH:mm:ss')  AS INSTRUCTION_INITIATION_DATE_TIME,     conc_cm.[CONFIRMED_DATETIME] as CONFIRMED_DATE_TIME,      CASE      WHEN cl.FIRM_FUND IS NULL THEN 'CLIENT'      ELSE 'FIRM'     END AS FIRM_VS_CLIENT,     IMPACTED as IMPACTED_ORDERS,      case when ex.DATA_SOURCE = 'cm' then  FORMAT(co.[TRADE_DATE], 'dd/MM/yyyy HH:mm:ss') when ex.DATA_SOURCE = 'al' then  FORMAT(ct.VALUE_DATE, 'dd/MM/yyyy HH:mm:ss') end  AS TRADE_DATE,     FORMAT(ct.[VALUE_DATE], 'dd/MM/yyyy HH:mm:ss') AS VALUE_DATE,     FORMAT(ct.[MATURITY_DATE], 'dd/MM/yyyy HH:mm:ss')  AS MATURITY_DATE,     ct.[TERM],     case when ex.DATA_SOURCE = 'cm' then  conc_cm.TRANSACTION_TYPE when ex.DATA_SOURCE = 'al' then co.TRANSACTION_TYPE end AS TRANSACTION_TYPE,     co.[CUSTOM_INSTRUCTION],      ct.[BASE_FUND_CODE],      ct.[BUSINESS_GROUP],     co.[INSTRUCTED_BY],     co.[ACCEPTED_BY],     case when ex.DATA_SOURCE = 'cm' then conc_cm.DEALT_AMOUNT when ex.DATA_SOURCE = 'al' then CONC_AL.DEALT_AMOUNT end AS DEALT_AMOUNT,     co.[DELETED_REASON],     co.[DELETED_REASON_NARRATION],     FORMAT(co.[FREEZE_DATETIME], 'dd/MM/yyyy HH:mm:ss')  as FREEZE_DATE_TIME,     co.[FREEZEREASON] as FREEZE_REASON,     co.[FREEZE_REASON_NARRATION],     FORMAT(co.[RELEASE_DATETIME], 'dd/MM/yyyy HH:mm:ss')  as RELEASE_DATE_TIME,     co.[RELEASE_REASON],     co.[RELEASE_REASON_NARRATION],     DATEDIFF(MINUTE,co.[RELEASE_DATETIME],co.[FREEZE_DATETIME]) as TIME_ELAPSED_BETWEEN_FREEZE_AND_RELEASE, -- Is this going to be in MINS?     co.[INSTRUCTION_STATUS_DECODE] as INSTRUCTION_STATUS,     ex.[ORDER_ID],     CASE WHEN ex.DATA_SOURCE = 'CM' THEN conc_cm.TRANSACTION_NUMBER WHEN ex.DATA_SOURCE = 'AL' THEN CONC_AL.TRANSACTION_NUMBER END  AS TRANSACTION_NUMBER,     CASE WHEN ex.VG_604 = 1 THEN 'Exception' ELSE '' END AS EXCEPTION,     ex.[VG_604_CREATETIME] as CREATE_DATE,        ex.[VG_604] as EXCEPTION_FLAG,     CO.INSTRUCTION_RECEIVED_DATE AS OS_INSTRUCTION_RECEIVED_DATE_TIME,     ex.[DATA_SOURCE],     CASE WHEN ex.DATA_SOURCE = 'AL' THEN CONC_AL.EXECUTED_DATETIME WHEN ex.DATA_SOURCE = 'CM' THEN conc_cm.EXECUTED_DATETIME END AS EXECUTED_DATE_TIME, --Not in Vishals excel so should not be in FE     DATEDIFF(DAY,VALUE_DATE,MATURITY_DATE)  AS NO_OF_DAYS --Not in Vishals excel so should not be in FE    INTO #temp_final_master_table_mm    FROM VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE ex    left join #temp_combo_trades ct on ct.[ORDER_ID] = ex.[ORDER_ID]    left join #temp_combo_orders co on ex.[ORDER_ID] = co.[ORDER_ID]    left join #cm_concat_ord conc_cm on conc_cm.[ORDER_ID] = ex.[ORDER_ID] AND ex.DATA_SOURCE = 'CM'    LEFT JOIN #al_concat_ord CONC_AL ON CONC_AL.ORDER_ID = ex.ORDER_ID AND ex.DATA_SOURCE = 'AL'    LEFT JOIN #temp_recent_dealer_al RAL ON RAL.ORD_NUM  = eX.ORDER_ID AND eX.DATA_SOURCE = 'AL'    LEFT JOIN #temp_recent_dealer_cm RCM ON RCM.ORDER_ID = eX.ORDER_ID AND eX.DATA_SOURCE = 'CM'    LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD ON (TDD.MG_USER_ID  = RCM.DEALER_NAME AND eX.DATA_SOURCE = 'CM') OR (TDD.INITIALS = RAL.TRD_TRADER AND eX.DATA_SOURCE = 'AL')  AND CAST(CO.PULL_DATE AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE)    LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD2 ON (TDD2.MG_USER_ID  = COALESCE(CO.ACCEPTED_BY, CO.INSTRUCTED_BY)) AND CAST(CO.PULL_DATE AS DATE) BETWEEN CAST(TDD2.DATE_FROM AS DATE) AND CAST(TDD2.DATE_TO AS DATE)    LEFT JOIN VISTA_STAGING.dbo.REF_COH_FIRM_FUND_LIST cl ON cl.FIRM_FUND=ct.CLIENT_FUND_OR_POOL_CODE AND co.INSTRUCTION_RECEIVED_DATE BETWEEN cl.DATE_FROM AND cl.DATE_TO    LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'Client Order Handling MM'  AND CAST(CO.PULL_DATE AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)    INNER JOIN #distinct_ids di ON di.ORDER_ID = ex.ORDER_ID;    --End of SURVG-804          IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE', 'U') IS NOT NULL    DELETE FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE    WHERE EXISTS (SELECT DISTINCT    ORDER_ID    FROM #distinct_ids    WHERE #distinct_ids.ORDER_ID = VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE.ORDER_ID);            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE', 'U') IS NOT NULL    DELETE FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE    WHERE EXISTS (SELECT DISTINCT    ORDER_ID    FROM #distinct_ids    WHERE #distinct_ids.ORDER_ID = VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE.ORDER_ID);            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE    SELECT *    FROM #temp_final_master_table_mm        ELSE        SELECT *    INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE    FROM #temp_final_master_table_mm;            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE    SELECT *    FROM #temp_final_master_table_rr        ELSE        SELECT *    INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE    FROM #temp_final_master_table_rr;            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(    'MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_RR/MM_TABLE', --TABLE_NAME    @START_TIME, --START_TIME    GETDATE(), --END_TIME    DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS    CAST(GETDATE() as date)) --COMPLETION_DATE              IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids      IF OBJECT_ID('tempdb..#temp_cash_trades', 'U') IS NOT NULL DROP TABLE #temp_cash_trades      IF OBJECT_ID('tempdb..#temp_max_trade_touch', 'U') IS NOT NULL DROP TABLE #temp_max_trade_touch      IF OBJECT_ID('tempdb..#temp_max_ORDER_touch', 'U') IS NOT NULL DROP TABLE #temp_max_ORDER_touch      IF OBJECT_ID('tempdb..#temp_max_ORDER_CM', 'U') IS NOT NULL DROP TABLE #temp_max_ORDER_CM      IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades      IF OBJECT_ID('tempdb..#temp_recent_dealer_cm', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_cm      IF OBJECT_ID('tempdb..#temp_recent_dealer_al', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_al      IF OBJECT_ID('tempdb..#cm_concat_ord', 'U') IS NOT NULL DROP TABLE #cm_concat_ord      IF OBJECT_ID('tempdb..#al_concat_ord', 'U') IS NOT NULL DROP TABLE #al_concat_ord      IF OBJECT_ID('tempdb..#temp_combo_orders', 'U') IS NOT NULL DROP TABLE #temp_combo_orders      IF OBJECT_ID('tempdb..#temp_combo_trades', 'U') IS NOT NULL DROP TABLE #temp_combo_trades      IF OBJECT_ID('tempdb..#temp_final_master_table_rr', 'U') IS NOT NULL DROP TABLE #temp_final_master_table_rr      IF OBJECT_ID('tempdb..#temp_final_master_table_mm', 'U') IS NOT NULL DROP TABLE #temp_final_master_table_mm            IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg604_cash_rr_idx1')           DROP INDEX mmf_vg604_cash_rr_idx1            ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE                CREATE NONCLUSTERED INDEX mmf_vg604_cash_rr_idx1           ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE            (INSTRUCTION_RECEIVED_DATE_TIME)        IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg604_cash_rr_idx2')           DROP INDEX mmf_vg604_cash_rr_idx2            ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE                CREATE NONCLUSTERED INDEX mmf_vg604_cash_rr_idx2           ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE            (EXCEPTION_FLAG)        IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg604_cash_rr_idx3')           DROP INDEX mmf_vg604_cash_rr_idx3            ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE                CREATE NONCLUSTERED INDEX mmf_vg604_cash_rr_idx3           ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE            (CREATE_DATE)        IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg604_cash_mm_idx1')           DROP INDEX mmf_vg604_cash_mm_idx1            ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE                CREATE NONCLUSTERED INDEX mmf_vg604_cash_mm_idx1           ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE            (INSTRUCTION_RECEIVED_DATE_TIME)        IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg604_cash_mm_idx2')           DROP INDEX mmf_vg604_cash_mm_idx2            ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE                CREATE NONCLUSTERED INDEX mmf_vg604_cash_mm_idx2           ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE            (EXCEPTION_FLAG)        IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg604_cash_mm_idx3')           DROP INDEX mmf_vg604_cash_mm_idx3            ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE                CREATE NONCLUSTERED INDEX mmf_vg604_cash_mm_idx3           ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE            (CREATE_DATE)            END            --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_PM_ORDER_TABLE_VG_604_CLIENT_ORDER_HANDLING_FX  CreateDate: 2025-06-26 18:06:05.453  ModifyDate: 2025-06-26 18:06:05.453  --- DEFINITION START ---  -- =============================================    -- Author:  <Samad, Mehreen>    -- Create date: <18/06/2019>    -- Description:     -- <Master exception table for CLIENT ORDER     -- HANDLING Exception test for FX.>    -- =============================================        -- ***************VERSION CONTROL***************        -- *********************************************        CREATE PROCEDURE [dbo].[MASTER_PM_ORDER_TABLE_VG_604_CLIENT_ORDER_HANDLING_FX]     -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,         AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;             DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()             IF OBJECT_ID('tempdb..#distinct_ids_al', 'U') IS NOT NULL DROP TABLE #distinct_ids_al     SELECT DISTINCT       pr.ORD_NUM as TRD_ORD,      oc.PM_ORD AS ORD_NUM,      pr.MULTI_FUND_ID     INTO #distinct_ids_al     FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = pr.ORD_NUM     WHERE pr.DEALING_DESK = 'FX'             IF OBJECT_ID('tempdb..#distinct_ids_fx', 'U') IS NOT NULL DROP TABLE #distinct_ids_fx     SELECT DISTINCT      fxt.ORDER_ID AS TRD_ORD,      vg.ORDER_ID,      fxt.TRADE_ID AS MULTI_FUND_ID      INTO #distinct_ids_fx     FROM Vista_Staging.dbo.VG_604_CLIENT_ORDER_HANDLING_FX_TABLE vg     LEFT JOIN Vista_Reporting.dbo.FX_ORDERS fxo ON fxo.FXM_ORDER_ID = vg.ORDER_ID     LEFT JOIN Vista_Reporting.dbo.FX_TRADES fxt ON fxt.ORDER_ID = fxo.FXM_ORDER_ID               IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE', 'U') IS NOT NULL     DELETE FROM #distinct_ids_fx where NOT EXISTS (SELECT DISTINCT od.FXM_ORDER_ID                   FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_FX od                   WHERE od.FXM_ORDER_ID = #distinct_ids_fx.ORDER_ID)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE', 'U') IS NOT NULL     DELETE FROM #distinct_ids_al where NOT EXISTS (SELECT DISTINCT od.PM_ORD                   FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                   WHERE od.PM_ORD = #distinct_ids_al.ORD_NUM)             IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE  #distinct_ids     SELECT *      INTO #distinct_ids     FROM #distinct_ids_al         UNION ALL         SELECT *      FROM #distinct_ids_fx             IF OBJECT_ID('tempdb..#max_touch_pm', 'U') IS NOT NULL DROP TABLE #max_touch_pm     SELECT DISTINCT       pm.ORD_NUM,       MAX(pm.TOUCH_COUNT) as MAX_TOUCH      INTO #max_touch_pm     FROM VISTA_REPORTING.dbo.PM_ORDERS pm      WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = pm.ORD_NUM)     GROUP BY ORD_NUM             --Concatonated fields for CM     IF OBJECT_ID('tempdb..#cm_concat_ord', 'U') IS NOT NULL DROP TABLE #cm_concat_ord     SELECT DISTINCT      ex.[ORDER_ID],      CONFIRMED_DATETIME = STUFF((          SELECT DISTINCT ' | ' +  CAST(FORMAT(EXECUTED_DATE_TIME, 'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50))         FROM VISTA_REPORTING.dbo.FX_TRADES ct         WHERE ct.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'FX'         FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),      PRODUCT = STUFF((          SELECT DISTINCT ' | ' +  CAST(INSTRUCTION_TYPE AS VARCHAR(50))         FROM VISTA_REPORTING.dbo.FX_TRADES ct         WHERE ct.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'FX'         FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),      EXEC_AMNT = STUFF((          SELECT DISTINCT ' | ' +  CAST(CASE WHEN EXECUTED_AMOUNT_FAR IS NOT NULL THEN  CONCAT(format(convert(decimal(38,2),EXECUTED_AMOUNT), '#,0.00'),'-',format(convert(decimal(38,2),EXECUTED_AMOUNT_FAR), '#,0.00')) ELSE convert(varchar,format(convert(decimal(38,2),EXECUTED_AMOUNT), '#,0.00')) END AS VARCHAR(50))         FROM VISTA_REPORTING.dbo.FX_TRADES ct         WHERE ct.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'FX'        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),      ALL_IN_RATE = STUFF((          SELECT DISTINCT ' | ' + CASE               WHEN ct.EXECUTED_RATE_FAR IS NULL                THEN CONVERT(VARCHAR(50),ct.EXECUTED_RATE)                ELSE CONVERT(VARCHAR(50), CONCAT(ct.EXECUTED_RATE, ' | ', ct.EXECUTED_RATE_FAR))              END         FROM VISTA_REPORTING.dbo.FX_TRADES ct         WHERE ct.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'FX'         FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),      INDICATIVE_ALL_IN_PRICE_MARKET_ARRIVAL = STUFF((          SELECT DISTINCT ' | ' +  CASE               WHEN ct.MARKET_ARRIVAL_INDICATIVE_ALL_IN_FAR_RATE IS NULL                THEN CONVERT(VARCHAR(50),ct.MARKET_ARRIVAL_INDICATIVE_ALL_IN_NEAR_RATE)                ELSE CONVERT(VARCHAR(50), CONCAT(ct.MARKET_ARRIVAL_INDICATIVE_ALL_IN_NEAR_RATE, '-', ct.MARKET_ARRIVAL_INDICATIVE_ALL_IN_FAR_RATE))              END         FROM VISTA_REPORTING.dbo.FX_TRADES ct         WHERE ct.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'FX'         FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),      TRADE_VENUE = STUFF((          SELECT DISTINCT ' | ' +  CAST(TRADE_VENUE AS VARCHAR(50))         FROM VISTA_REPORTING.dbo.FX_ORDERS ct         WHERE ct.[FXM_ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'FX'         FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),      MARKET_ARRIVAL_DATETIME =  STUFF((          SELECT  ' | ' + CONVERT(VARCHAR(50),FORMAT(MARKET_ARRIVAL_DATE_TIME,'dd/MM/yyyy HH:mm:ss'))         FROM VISTA_REPORTING.dbo.FX_TRADES fxo         WHERE fxo.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'FX' ORDER BY TRADE_ID         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),      EXECUTED_DATETIME =  STUFF((          SELECT  ' | ' + CONVERT(VARCHAR(50),FORMAT(EXECUTED_DATE_TIME,'dd/MM/yyyy HH:mm:ss'))         FROM VISTA_REPORTING.dbo.FX_TRADES fxo         WHERE fxo.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'FX' ORDER BY TRADE_ID         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),      EXECUTED_BANK =  STUFF((          SELECT  ' | ' + CONVERT(VARCHAR(50),EXECUTED_BANK)         FROM VISTA_REPORTING.dbo.FX_TRADES fxo         WHERE fxo.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'FX' ORDER BY TRADE_ID         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),      EXECUTED_AMOUNT =  STUFF((          SELECT  ' | ' +  CASE             WHEN fxo.EXECUTED_AMOUNT_FAR IS NULL              THEN CAST(FORMAT(CONVERT(DECIMAL(38,2),fxo.[EXECUTED_AMOUNT]),'#,0.00') as varchar(50))             ELSE CAST(FORMAT(CONVERT(DECIMAL(38,2),fxo.[EXECUTED_AMOUNT]),'#,0.00') as varchar(50)) + ' | ' + CAST(FORMAT(CONVERT(DECIMAL(38,2),fxo.[EXECUTED_AMOUNT_FAR]),'#,0.00') as varchar(50))            END           FROM VISTA_REPORTING.dbo.FX_TRADES fxo         WHERE fxo.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'FX' ORDER BY TRADE_ID         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),      ACCEPTED_BY =  STUFF((          SELECT  ' | ' + CONVERT(VARCHAR(50),ACCEPTED_BY)         FROM VISTA_REPORTING.dbo.FX_TRADES fxo         WHERE fxo.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'FX' ORDER BY TRADE_ID         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),      TRADE_DATE =  STUFF((          SELECT  ' | ' + CONVERT(VARCHAR(50),FORMAT(TRADE_DATE,'dd/MM/yyyy'))         FROM VISTA_REPORTING.dbo.FX_TRADES fxo         WHERE fxo.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'FX' ORDER BY TRADE_ID         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),      FIXING_DATE =  STUFF((          SELECT  ' | ' +  CASE             WHEN fxo.FIXING_DATE_LEG2 IS NULL              THEN CAST(FORMAT(fxo.[FIXING_DATE],'dd/MM/yyyy') as varchar(50))             ELSE (CAST(FORMAT(fxo.[FIXING_DATE],'dd/MM/yyyy') as varchar(50)) + ' | ' + CAST(FORMAT(fxo.[FIXING_DATE_LEG2],'dd/MM/yyyy') as varchar(50)))            END           FROM VISTA_REPORTING.dbo.FX_TRADES fxo         WHERE fxo.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'FX' ORDER BY TRADE_ID         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),      NULL AS BASE_FUND,      NULL AS TRADE_PURPOSE,      NULL INSTRUCTED_CURRENCY,      ACCEPTED_DATE_TIME =  STUFF((          SELECT  ' | ' + CONVERT(VARCHAR(50),FORMAT(fxo.ACCEPTED_DATE_TIME,'dd/MM/yyyy HH:mm:ss'))         FROM VISTA_REPORTING.dbo.FX_TRADES fxo         WHERE fxo.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'FX' ORDER BY TRADE_ID         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'')     INTO #cm_concat_ord     FROM VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_FX_TABLE ex     WHERE ex.[DATA_SOURCE] = 'FX' AND EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ex.ORDER_ID)         UNION         --Concatonated fields for AL      SELECT DISTINCT      ex.[ORDER_ID],      EXECUTION_TIME = STUFF((          SELECT DISTINCT ' | ' +  CAST(format(EXECUTION_TIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50))         FROM VISTA_REPORTING.dbo.TRADES t         WHERE t.[ORD_NUM] = ex.[ORDER_ID]         FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),      PRODUCT = STUFF((          SELECT DISTINCT ' | ' +  CAST(format(EXECUTION_TIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50))         FROM VISTA_REPORTING.dbo.TRADES t         WHERE t.[ORD_NUM] = ex.[ORDER_ID]         FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),      EXEC_AMNT = STUFF((          SELECT DISTINCT ' | ' +  CAST(CONCAT(FX_PAY_AMT,'-',FX_RCV_AMT) AS VARCHAR(50))         FROM VISTA_REPORTING.dbo.TRADES t         WHERE t.[ORD_NUM] = ex.[ORDER_ID]         FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),      EXEC_RATE = STUFF((          SELECT DISTINCT ' | ' +  CAST(FX_PRICE AS VARCHAR(50))         FROM VISTA_REPORTING.dbo.TRADES t         WHERE t.[ORD_NUM] = ex.[ORDER_ID]         FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),      NULL,      NULL,      NULL,      NULL,      NULL,      NULL,      NULL,      NULL,      NULL,      BASE_FUND = STUFF((          SELECT DISTINCT ' | ' +  CAST(t.PORTFOLIOS_PORTFOLIO_NAME AS VARCHAR(50))         FROM VISTA_REPORTING.dbo.TRADES t         WHERE t.[ORD_NUM] = ex.[ORDER_ID]         FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),      TRADE_PURPOSE = STUFF((          SELECT DISTINCT ' | ' +  CAST(t.TRD_PURPOSE AS VARCHAR(50))         FROM VISTA_REPORTING.dbo.TRADES t         WHERE t.[ORD_NUM] = ex.[ORDER_ID]         FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),      INSTRUCTED_CURRENCY = STUFF((          SELECT DISTINCT ' | ' +  CAST(t.FX_PAY_CURR AS VARCHAR(50))         FROM VISTA_REPORTING.dbo.TRADES t         WHERE t.[ORD_NUM] = ex.[ORDER_ID]         FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),      NULL     FROM VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_FX_TABLE ex     WHERE ex.[DATA_SOURCE] = 'AL' AND EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ex.ORDER_ID)                 --Create Master table for RR     IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     SELECT DISTINCT      COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) AS DEALER_NAME,      format(fxo.AUTH_TIME,'dd/MM/yyyy HH:mm:ss') AS [AUTHORISED_DATE_TIME],      FORMAT(fxo.INSTRUCTION_RECEIVED_DATE_TIME,'dd/MM/yyyy HH:mm:ss') AS [ORDER_RECEIVED_DATETIME],      conc_cm.ACCEPTED_DATE_TIME AS [ACCEPTED_DATETIME],      conc_cm.[MARKET_ARRIVAL_DATETIME],      conc_cm.[EXECUTED_DATETIME],      CASE        WHEN fxo.FREEZE_MARKER = 1 AND fxo.SEQUENCE_EXCEPTION_REASON IS NULL THEN 'Freeze/Release'       ELSE fxo.SEQUENCE_EXCEPTION_REASON      END AS [OUT_OF_SEQUENCE_EXCEPTION_REASON],      fxo.SEQUENCE_EXCEPTION_REASON_NARRATION AS [OUT_OF_SEQUENCE_EXCEPTION_REASON_NARRATION],      ex.IMPACTED AS IMPACTED_ORDERS,      CASE WHEN ex.VG_604 = 1 THEN 'Exception' ELSE '' END AS EXCEPTION,      conc_cm.EXECUTED_BANK,      conc_cm.ALL_IN_RATE,      conc_cm.INDICATIVE_ALL_IN_PRICE_MARKET_ARRIVAL,      fxo.CLIENT_FUND,      fxo.BASE_FUND,      fxo.INSTRUCTION_TYPE AS PRODUCT,      CASE WHEN FXO.FR_LEG_PRODUCT IS NULL THEN fxo.[NR_LEG_PRODUCT] ELSE  (fxo.[NR_LEG_PRODUCT] + ISNULL(' | ' + fxo.[FR_LEG_PRODUCT],'')) END  as FXM_PRODUCT,      case when NULLIF(fxo.ACTION2, '') is null then fxo.action1 else  (fxo.[ACTION1]  + ISNULL(' | ' + NULLIF(fxo.[ACTION2],''),'')) end as [ACTION],       case when fxo.NOTIONAL_CCY_FAR is null then fxo.NOTIONAL_CCY else (fxo.[NOTIONAL_CCY] + ' | ' + fxo.[NOTIONAL_CCY_FAR]) end  as [INSTRUCTED_CURRENCY],      CASE WHEN FXO.NOTIONAL_AMOUNT_FAR IS NULL THEN CAST(FORMAT(convert(decimal(38,2),fxo.[NOTIONAL_AMOUNT]),  '#,0.00') as varchar(50)) ELSE  (CAST(FORMAT(convert(decimal(38,2),fxo.[NOTIONAL_AMOUNT]), '#,0.00') as varchar(50)) + ' | ' + CAST(FORMAT(convert  (decimal(38,2),fxo.[NOTIONAL_AMOUNT_FAR]), '#,0.00') as varchar(50))) END as [INSTRUCTED_AMOUNT],      case when fxo.buy_ccy_leg2 is null then fxo.BUY_CCY else (fxo.[BUY_CCY]  + ' | ' + fxo.[BUY_CCY_LEG2]) end as [BUY_CURRENCY],      case when fxo.SELL_CCY_LEG2 is null then fxo.SELL_CCY else  (fxo.[SELL_CCY]  + ' | ' + fxo.[SELL_CCY_LEG2]) end as [SELL_CURRENCY],      conc_cm.TRADE_DATE,      CASE WHEN FXO.VALUE_DATE_FAR IS NULL THEN CAST(FORMAT(fxo.[VALUE_DATE_NEAR],'dd/MM/yyyy')  as varchar(50)) ELSE (CAST(FORMAT(fxo.[VALUE_DATE_NEAR] ,'dd/MM/yyyy') as varchar(50)) + ' | ' + CAST(FORMAT(fxo.[VALUE_DATE_FAR],'dd/MM/yyyy') as varchar(50))) END as [VALUE_DATE],      conc_cm.EXECUTED_AMOUNT,      fxo.SWAP_TYPE,      fxo.NET_EXPOSURE_ORDER AS NET_EXPOSURE,      COALESCE(fxo.[PM],fxo.INSTRUCTED_BY) as INSTRUCTED_BY,      fxo.CREATED_FROM AS ORDER_SOURCE,      fxo.FM_COMMENTS,      fxo.TRADE_PURPOSE,      fxo.MARKER,      conc_cm.[FIXING_DATE],      fxo.BUSINESS_GROUP,      FXo.TRADE_VENUE AS PLACEMENT_VENUE,      conc_cm.ACCEPTED_BY AS TAKEN_OVER_BY,      ex.ORDER_ID AS ORDER_ID,      CASE       WHEN fxo.[ORD_NUM] IS NULL THEN FXO.[FXM_ORDER_ID]      ELSE fxo.[ORD_NUM]      END AS PM_ORDER_ID,      fxo.ALADDIN_COMMON_ID AS [ALADDIN_COMMON_IDENTIFIER],      fxo.INSTRUCTION_STATUS,      ex.VG_604 as EXCEPTION_FLAG,      ex.VG_604_CREATETIME AS CREATE_DATE,      ex.DATA_SOURCE AS [DATA_SOURCE],      fxo.INSTRUCTION_RECEIVED_DATE_TIME as OS_INSTRUCTION_RECEIVED_DATE_TIME,      ex.IMPACTED_DUE_TO_BATCH AS IMPACTED_ORDER_DUE_TO_SAME_BATCH,      ex.SAME_QUOTE_PAIR as IMPACTED_DUE_TO_DIFFERENT_CCY_PAIR,      ex.AUTO_VALIDATED,      fxo.ALADDIN_BASKET_ID,      fxo.FUND_MANAGER_EMAIL_ADDRESS,      ex.FREEZE_RELEASE_TIMESPAN,      ex.FROZEN_BY,      fxo.FREEZE_DATE_TIME,      fxo.FREEZE_REASON,      fxo.RELEASE_BY,      fxo.RELEASE_DATE_TIME,      fxo.RELEASE_REASON     INTO #temp_final_master_table     FROM VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_FX_TABLE ex     left join VISTA_REPORTING.dbo.FX_TRADES fxt on fxt.[ORDER_ID] = ex.[ORDER_ID]     left join VISTA_REPORTING.dbo.FX_ORDERS fxo on fxo.FXM_ORDER_ID = ex.[ORDER_ID]     left join #cm_concat_ord conc_cm on conc_cm.[ORDER_ID] = ex.[ORDER_ID]      left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd     on tdd.[MG_USER_ID] = fxt.[DEALT_BY] AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2     on tdd2.[MG_USER_ID] = fxt.[ACCEPTED_BY] AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)     left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd      on dd.[REPORT_NAME] = 'Client Order Handling' AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)     WHERE ex.[DATA_SOURCE] = 'FX' AND EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ex.ORDER_ID)             UNION         SELECT DISTINCT      COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) as [DEALER_NAME],      FORMAT(pm.[AUTH_TIME],'dd/MM/yyyy HH:mm:ss') as [AUTHORISED_DATE_TIME],      FORMAT(pm.[AUTH_TIME],'dd/MM/yyyy HH:mm:ss') as [ORDER_RECEIVED_DATE_TIME],      FORMAT(pm.[ACTIVE_TIME],'dd/MM/yyyy HH:mm:ss') as [ACCEPTED_DATE_TIME], --Not given in Mapping table      conc_cm.EXECUTED_DATETIME as [MARKET_ARRIVAL_DATE_TIME],      conc_cm.[EXECUTED_DATETIME],      NULL as [OUT_OF_SEQUENCE_EXCEPTION_REASON],      NULL as [OUT_OF_SEQUENCE_EXCEPTION_REASON_NARRATION],      ex.[IMPACTED] as IMPACTED_ORDERS,      CASE WHEN ex.VG_604 = 1 THEN 'Exception' ELSE '' END AS EXCEPTION,      pl.[BROKER] as EXECUTED_BANK,      CAST(COALESCE(pl.[AVG_PRICE],t.[FX_PRICE]) as varchar(50)) as [ALL_IN_RATE],      NULL as [INDICATIVE_ALL_IN_PRICE_MARKET_ARRIVAL],      NULL as [CLIENT_FUND],      conc_cm.BASE_FUND,       pm.[SM_SEC_TYPE] as [PRODUCT],      NULL AS FXM_PRODUCT,      NULL as [ACTION],      conc_cm.[INSTRUCTED_CURRENCY],      CAST(FORMAT(CONVERT(DECIMAL(38,2),pl.[QUANTITY]), '#,0.00') as varchar(50)) as [INSTRUCTED_AMOUNT],      NULL as [BUY_CURRENCY],      NULL as [SELL_CURRENCY],      FORMAT(pm.[OPEN_DATE],'dd/MM/yyyy') as [TRADE_DATE],      FORMAT(pm.[SETTLE_DATE],'dd/MM/yyyy') as [VALUE_DATE],      CAST(pm.[FILL_AMT] as varchar(50)) as [EXECUTED_AMOUNT],      NULL as [SWAP_TYPE],      NULL as [NET_EXPOSURE],      pm.[PM] as [INSTRUCTED_BY],      'Aladdin' as [ORDER_SOURCE], --N/A given as mapping field, using this as assumption (?)      pm.[COMMENTS_VALUE] as [FM_COMMENTS],      conc_cm.[TRADE_PURPOSE],      NULL as [MARKER],      NULL as [FIXING_DATE], --Given as Trades.SECURITY.SMARTCUT.FXNDF_ANNOUNCE_DATE      CASE       WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP'       WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG'       WHEN (pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM'      ELSE NULL      END AS [BUSINESS_GROUP], --Guessing the logic is same as DMG?      pl.[VENUE] as [PLACEMENT_VENUE],      NULL as TAKEN_OVER_BY,      ex.[ORDER_ID] as [ORDER_ID],      pm.[ORD_NUM] as PM_ORDER_ID,      r.[REQUEST_ID] as [ALADDIN_COMMON_IDENTIFIER],      pl.[STATUS] as [INSTRUCTION_STATUS],      ex.[VG_604] as [EXCEPTION_FLAG],      ex.[VG_604_CREATETIME] as [CREATE_DATE],      ex.[DATA_SOURCE],      pm.AUTH_TIME as os_instruction_received_date_time,      ex.IMPACTED_DUE_TO_BATCH,      ex.SAME_QUOTE_PAIR as IMPACTED_DUE_TO_DIFFERENT_CCY_PAIR,      ex.AUTO_VALIDATED,      NULL,      NULL,      NULL,      NULL,      NULL,      NULL,      NULL,      NULL,      NULL     FROM VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_FX_TABLE ex     left join #cm_concat_ord conc_cm on conc_cm.[ORDER_ID] = ex.[ORDER_ID]      left join VISTA_REPORTING.dbo.PM_ORDERS pm on conc_cm.[ORDER_ID] = pm.[ORD_NUM]     inner join #max_touch_pm mtt on pm.[ORD_NUM] = mtt.[ORD_NUM] and pm.[TOUCH_COUNT] = mtt.[MAX_TOUCH]     left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on pm.[ORD_NUM] = oc.[PM_ORD]     left join VISTA_REPORTING.dbo.TRADES t on oc.TRD_ORD = t.[ORD_NUM]      left join (SELECT DISTINCT FUND_ID, PORTFOLIO_GROUP_NAME FROM VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY) pgt on t.[FUND] = pgt.[FUND_ID]     left join (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, PLACEMENT_NUM, [STATUS], QUANTITY, [BROKER], AVG_PRICE, VENUE FROM VISTA_REPORTING.dbo.PLACEMENTS) pl on t.MULTI_FUND_ID = pl.MULTI_FUND_ID     left join (SELECT PLACEMENT_NUM, REQUEST_ID FROM VISTA_STAGING.dbo.REQUEST_LOOKUP) r on pl.[PLACEMENT_NUM] = r.[PLACEMENT_NUM]     left join VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd on tdd.[INITIALS]  = t.[TRD_TRADER]                      AND CAST(t.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE)                      AND CAST(tdd.[DATE_TO] AS DATE)     left join VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd2 on tdd2.[INITIALS]  = pm.[TRADER]                      AND CAST(pm.[PULL_DATE] AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE)                      AND CAST(tdd2.[DATE_TO] AS DATE)     left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd on dd.[REPORT_NAME] = 'Client Order Handling'                      AND CAST(COALESCE(t.[PULL_DATE],pm.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE)                      AND CAST(dd.[DATE_TO] AS DATE)     WHERE ex.[DATA_SOURCE] = 'AL' AND EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ex.ORDER_ID)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE', 'U') IS NOT NULL     DELETE FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE     WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM=ORDER_ID)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE     SELECT *     FROM #temp_final_master_table         ELSE         SELECT *     INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE     FROM #temp_final_master_table             IF OBJECT_ID('tempdb..#max_touch_pm', 'U') IS NOT NULL DROP TABLE #max_touch_pm     IF OBJECT_ID('tempdb..#cm_concat_ord', 'U') IS NOT NULL DROP TABLE #cm_concat_ord     IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     IF OBJECT_ID('tempdb..#distinct_ids_al', 'U') IS NOT NULL DROP TABLE #distinct_ids_al     IF OBJECT_ID('tempdb..#distinct_ids_fx', 'U') IS NOT NULL DROP TABLE #distinct_ids_fx     IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE  #distinct_ids              IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg604_fx_idx1')           DROP INDEX mmf_vg604_fx_idx1      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg604_fx_idx1     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE      (ORDER_ID)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg604_fx_idx2')           DROP INDEX mmf_vg604_fx_idx2      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg604_fx_idx2     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE      (AUTHORISED_DATE_TIME)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg604_fx_idx3')           DROP INDEX mmf_vg604_fx_idx3      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg604_fx_idx3     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE      (DEALER_NAME)              IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg604_fx_idx4')           DROP INDEX mmf_vg604_fx_idx4      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg604_fx_idx4     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE     (CREATE_DATE)              IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg604_fx_idx5')           DROP INDEX mmf_vg604_fx_idx5      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg604_fx_idx5     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE     (EXCEPTION_FLAG)             --IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes       --           WHERE name = N'mmf_vg604_fx_idx6')        --   DROP INDEX mmf_vg604_fx_idx6      --ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE          --CREATE NONCLUSTERED INDEX mmf_vg604_fx_idx6     --ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE     --(EXECUTED_DATETIME)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(     'MASTER_PM_ORDER_VG_604_CLIENT_ORDER_HANDLING_FX_TABLE', --TABLE_NAME     @START_TIME, --START_TIME     GETDATE(), --END_TIME     DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS     CAST(GETDATE() as date)) --COMPLETION_DATE        END                --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_PM_ORDER_TABLE_VG_608_TA_KNOCKBACK_FX  CreateDate: 2025-06-26 18:07:37.810  ModifyDate: 2025-06-26 18:07:37.810  --- DEFINITION START ---  -- =============================================    -- Author:  <Samad, Mehreen>    -- Create date: <08/07/2019>    -- Description:     -- <Master exception table for TA Knockback    -- Exception test for FX.>    -- =============================================        -- ***************VERSION CONTROL***************        -- *********************************************        CREATE PROCEDURE [dbo].[MASTER_PM_ORDER_TABLE_VG_608_TA_KNOCKBACK_FX]     -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,         AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;             DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()             IF OBJECT_ID('tempdb..#distinct_ids_al', 'U') IS NOT NULL DROP TABLE #distinct_ids_al     SELECT DISTINCT       pr.ORD_NUM as TRD_ORD,      oc.PM_ORD AS ORD_NUM,      pr.MULTI_FUND_ID     INTO #distinct_ids_al     FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = pr.ORD_NUM     WHERE pr.DEALING_DESK = 'FX'             IF OBJECT_ID('tempdb..#distinct_ids_fx', 'U') IS NOT NULL DROP TABLE #distinct_ids_fx     SELECT DISTINCT      fxt.ORDER_ID AS TRD_ORD,      vg.FXM_ORDER_ID,      fxt.TRADE_ID AS MULTI_FUND_ID      INTO #distinct_ids_fx     FROM Vista_Staging.dbo.VG_608_TA_KNOCKBACK_FX_TABLE vg     LEFT JOIN Vista_Reporting.dbo.FX_ORDERS fxo ON fxo.FXM_ORDER_ID = vg.FXM_ORDER_ID     LEFT JOIN Vista_Reporting.dbo.FX_TRADES fxt ON fxt.ORDER_ID = fxo.FXM_ORDER_ID               IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE', 'U') IS NOT NULL     DELETE FROM #distinct_ids_fx where NOT EXISTS (SELECT DISTINCT od.FXM_ORDER_ID                   FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_FX od                   WHERE od.FXM_ORDER_ID = #distinct_ids_fx.FXM_ORDER_ID)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE', 'U') IS NOT NULL     DELETE FROM #distinct_ids_al where NOT EXISTS (SELECT DISTINCT od.PM_ORD                   FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                   WHERE od.PM_ORD = #distinct_ids_al.ORD_NUM)             IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE  #distinct_ids     SELECT *      INTO #distinct_ids     FROM #distinct_ids_al         UNION ALL         SELECT *      FROM #distinct_ids_fx             IF OBJECT_ID('tempdb..#max_api_o', 'U') IS NOT NULL DROP TABLE #max_api_o     SELECT DISTINCT      fxo.[FXM_ORDER_ID],       MAX(fxo.[API_REQUESTED_DATE]) as MAX_API_DATE     INTO #max_api_o      FROM VISTA_REPORTING.dbo.FX_ORDERS fxo     WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = fxo.FXM_ORDER_ID)     GROUP BY fxo.[FXM_ORDER_ID]             IF OBJECT_ID('tempdb..#max_touch_pm', 'U') IS NOT NULL DROP TABLE #max_touch_pm     SELECT DISTINCT       pm.ORD_NUM,       MAX(pm.TOUCH_COUNT) as MAX_TOUCH      INTO #max_touch_pm     FROM VISTA_REPORTING.dbo.PM_ORDERS pm     WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = pm.ORD_NUM)     GROUP BY ORD_NUM             --FX Concatonated fields     IF OBJECT_ID('tempdb..#conc_fx', 'U') IS NOT NULL DROP TABLE #conc_fx      SELECT DISTINCT      ex.[FXM_ORDER_ID],      INSTRUCTION_TYPE = STUFF((          SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),INSTRUCTION_TYPE)         FROM VISTA_REPORTING.dbo.FX_ORDERS fxo         WHERE fxo.[FXM_ORDER_ID] = ex.[FXM_ORDER_ID] and ex.[DATA_SOURCE] = 'FX'         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),      NR_LEG_PRODUCT = STUFF((          SELECT DISTINCT ' | ' + CONVERT(VARCHAR(50),NR_LEG_PRODUCT)         FROM VISTA_REPORTING.dbo.FX_ORDERS fxo         WHERE fxo.[FXM_ORDER_ID] = ex.[FXM_ORDER_ID] and ex.[DATA_SOURCE] = 'FX'         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),      CANCEL_REASON =  STUFF((          SELECT  ' | ' + CONVERT(VARCHAR(50),CANCEL_REASON)         FROM VISTA_REPORTING.dbo.FX_TRADES fxo         WHERE fxo.[ORDER_ID] = ex.[FXM_ORDER_ID] and ex.[DATA_SOURCE] = 'FX' ORDER BY TRADE_ID         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),      CANCEL_by =  STUFF((          SELECT  ' | ' + CONVERT(VARCHAR(50),CANCEL_BY)         FROM VISTA_REPORTING.dbo.FX_TRADES fxo         WHERE fxo.[ORDER_ID] = ex.[FXM_ORDER_ID] and ex.[DATA_SOURCE] = 'FX' ORDER BY TRADE_ID         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),      CANCEL_REASON_NARRATION =  STUFF((          SELECT  ' | ' + CONVERT(VARCHAR(50),CANCEL_REASON_NARRATION)         FROM VISTA_REPORTING.dbo.FX_TRADES fxo         WHERE fxo.[ORDER_ID] = ex.[FXM_ORDER_ID] and ex.[DATA_SOURCE] = 'FX' ORDER BY TRADE_ID         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),      CANCEL_DATE_TIME =  STUFF((          SELECT  ' | ' + CONVERT(VARCHAR(50),FORMAT(CANCEL_DATE_TIME, 'dd/MM/yyyy HH:mm:ss'))         FROM VISTA_REPORTING.dbo.FX_TRADES fxo         WHERE fxo.[ORDER_ID] = ex.[FXM_ORDER_ID] and ex.[DATA_SOURCE] = 'FX' ORDER BY TRADE_ID         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),      TRADE_DATE =  STUFF((          SELECT  ' | ' + CONVERT(VARCHAR(50),FORMAT(TRADE_DATE, 'dd/MM/yyyy'))         FROM VISTA_REPORTING.dbo.FX_TRADES fxo         WHERE fxo.[ORDER_ID] = ex.[FXM_ORDER_ID] and ex.[DATA_SOURCE] = 'FX' ORDER BY TRADE_ID         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),      EXECUTED_AMOUNT =  STUFF((          SELECT  ' || ' + CONVERT(VARCHAR(50), CASE WHEN EXECUTED_AMOUNT_FAR  IS NOT NULL THEN (CAST(FORMAT(CONVERT(DECIMAL(38,2),[EXECUTED_AMOUNT]),'#,0.00') as varchar(50)) + ' | ' + CAST(FORMAT(CONVERT(DECIMAL(38,2),[EXECUTED_AMOUNT_FAR]),'#,0.00')   as varchar(50)))  ELSE  CAST(FORMAT(CONVERT(DECIMAL(38,2),[EXECUTED_AMOUNT]),'#,0.00') as varchar(50)) END )         FROM VISTA_REPORTING.dbo.FX_TRADES fxo         WHERE fxo.[ORDER_ID] = ex.[FXM_ORDER_ID] and ex.[DATA_SOURCE] = 'FX' ORDER BY TRADE_ID         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'')     INTO #conc_fx     FROM VISTA_STAGING.dbo.VG_608_TA_KNOCKBACK_FX_TABLE ex     WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ex.FXM_ORDER_ID)             --Create Master table      IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     SELECT DISTINCT      COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) as DEALER_NAME,      format(fxo.[AUTH_TIME], 'dd/MM/yyyy HH:mm:ss') as AUTHORISED_DATE_TIME,      format(fxo.[INSTRUCTION_RECEIVED_DATE_TIME], 'dd/MM/yyyy HH:mm:ss') as ORDER_RECEIVED_DATE_TIME,      fxo.[ALADDIN_STATUS] as PM_ORDER_STATUS,      fxo.[INSTRUCTION_STATUS],      FXO.[CANCEL_REASON] as CANCEL_KNOCKBACK_REASON,      FXO.[CANCEL_BY] as CANCELLED_KNOCKED_BACK_BY,      FXO.[CANCEL_REASON_NARRATION] as CANCEL_KNOCKBACK_REASON_NARRATION,      FORMAT(FXO.CANCEL_DATE_TIME,'dd/MM/yyyy HH:mm:ss')  AS FXM_CANCEL_DATE_TIME,--format(CC_FX.[CANCEL_DATE_TIME], 'dd/MM/yyyy HH:mm:ss') as FXM_CANCEL_DATE_TIME,      FXO.[CANCEL_BY] as CANCELLED_BY, --Not given in Mapping table      fxo.[CLIENT_FUND],      fxo.[BASE_FUND],      cc_fx.[INSTRUCTION_TYPE] AS PRODUCT,      CASE WHEN FXO.FR_LEG_PRODUCT IS NULL THEN fxo.[NR_LEG_PRODUCT] ELSE  (fxo.[NR_LEG_PRODUCT] + ISNULL(' | ' + fxo.[FR_LEG_PRODUCT],'')) END  as FXM_PRODUCT,      case when NULLIF(fxo.ACTION2,'') is null then fxo.action1 else  (fxo.[ACTION1]  + ISNULL(' | ' + NULLIF(fxo.[ACTION2],''),'')) end as [ACTION],       case when fxo.NOTIONAL_CCY_FAR is null then fxo.NOTIONAL_CCY else (fxo.[NOTIONAL_CCY] + ' | ' + fxo.[NOTIONAL_CCY_FAR]) end  as [INSTRUCTED_CURRENCY],      case when fxo.buy_ccy_leg2 is null then fxo.BUY_CCY else (fxo.[BUY_CCY]  + ' | ' + fxo.[BUY_CCY_LEG2]) end as [BUY_CURRENCY],      case when fxo.SELL_CCY_LEG2 is null then fxo.SELL_CCY else  (fxo.[SELL_CCY]  + ' | ' + fxo.[SELL_CCY_LEG2]) end as [SELL_CURRENCY],      CASE WHEN FXO.NOTIONAL_AMOUNT_FAR IS NULL THEN CAST(FORMAT(CONVERT(DECIMAL(38,2),fxo.[NOTIONAL_AMOUNT]), '#,0.00')  as varchar(50)) ELSE  (CAST(FORMAT(CONVERT(DECIMAL(38,2),fxo.[NOTIONAL_AMOUNT]), '#,0.00')  as varchar(50)) + ' | ' + CAST(FORMAT(CONVERT  (DECIMAL(38,2),fxo.[NOTIONAL_AMOUNT_FAR]), '#,0.00')  as varchar(50))) END as [INSTRUCTED_AMOUNT],      format(FXO.ORDER_TRADE_DATE, 'dd/MM/yyyy') as TRADE_DATE,      CASE WHEN FXO.VALUE_DATE_FAR IS NULL THEN CAST(format(fxo.[VALUE_DATE_NEAR], 'dd/MM/yyyy') as varchar(50)) ELSE (CAST(format(fxo.[VALUE_DATE_NEAR], 'dd/MM/yyyy') as varchar(50)) + ' | ' + CAST(format(fxo.[VALUE_DATE_FAR], 'dd/MM/yyyy') as varchar(50)))   END as [VALUE_DATE],      cc_fx.EXECUTED_AMOUNT AS EXECUTED_AMOUNT,--CASE WHEN FXT.EXECUTED_AMOUNT_FAR IS NULL THEN CAST(fxt.[EXECUTED_AMOUNT] as varchar(50)) ELSE  (CAST(fxt.[EXECUTED_AMOUNT] as varchar(50)) + ' | ' + CAST(fxt.[EXECUTED_AMOUNT_FAR] as varchar(50))) END as [EXECUTED_AMOUNT],      fxo.[SWAP_TYPE],      fxo.[NET_EXPOSURE_ORDER] as NET_EXPOSURE,      COALESCE(fxo.[PM],fxo.INSTRUCTED_BY) AS INSTRUCTED_BY,      fxo.[CREATED_FROM] as ORDER_SOURCE,      fxo.[FM_COMMENTS],      fxo.[TRADE_PURPOSE],      fxo.[MARKER],      CASE WHEN FXT.FIXING_DATE_LEG2 IS NULL THEN CAST(format(FXT.[FIXING_DATE], 'dd/MM/yyyy') as varchar(50)) ELSE (CAST(format(FXT.[FIXING_DATE], 'dd/MM/yyyy') as varchar(50)) + ' | ' + CAST(format(FXT.[FIXING_DATE_LEG2], 'dd/MM/yyyy') as varchar(50))) END    as [FIXING_DATE],      fxo.BUSINESS_GROUP,      ex.[FXM_ORDER_ID] as ORDER_ID,      CASE       WHEN fxo.[ORD_NUM] IS NULL THEN ex.[FXM_ORDER_ID]      ELSE fxo.[ORD_NUM]      END AS PM_ORDER_ID,      fxo.[ALADDIN_COMMON_ID] as ALADDIN_COMMON_IDENTIFIER,      ex.[VG_608_CREATETIME] as CREATE_DATE,      ex.[VG_608] as EXCEPTION_FLAG,      ex.[DATA_SOURCE],      fxo.INSTRUCTION_RECEIVED_DATE_TIME AS OS_INSTRUCTION_RECEIVED_DATE_TIME     INTO #temp_final_master_table     FROM VISTA_STAGING.dbo.VG_608_TA_KNOCKBACK_FX_TABLE ex     left join (SELECT DISTINCT fx_o.* FROM VISTA_REPORTING.dbo.FX_ORDERS fx_o          inner join #max_api_o mao           on fx_o.[FXM_ORDER_ID] = mao.[FXM_ORDER_ID] and fx_o.[API_REQUESTED_DATE] = mao.[MAX_API_DATE]) as fxo on ex.[FXM_ORDER_ID] = fxo.[FXM_ORDER_ID]      left join VISTA_REPORTING.dbo.FX_TRADES fxt on fxt.[ORDER_ID] = fxo.[FXM_ORDER_ID]     left join #conc_fx cc_fx on ex.[FXM_ORDER_ID] = cc_fx.[FXM_ORDER_ID]     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd on tdd.[MG_USER_ID] = fxt.[DEALT_BY]                      AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE)                                       AND CAST(tdd.[DATE_TO] AS DATE)     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2 on tdd2.[MG_USER_ID] = fxt.[ACCEPTED_BY]                      AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE)                                       AND CAST(tdd2.[DATE_TO] AS DATE)     left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd on dd.[REPORT_NAME] = 'Order Request Return'                      AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE)                                       AND CAST(dd.[DATE_TO] AS DATE)     WHERE ex.[DATA_SOURCE] = 'FX' AND EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ex.FXM_ORDER_ID)         UNION         SELECT DISTINCT      COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) as [DEALER_NAME],      FORMAT(pm.[AUTH_TIME], 'dd/MM/yyyy HH:mm:ss') as [AUTHORISED_DATE_TIME],      FORMAT(pm.[AUTH_TIME], 'dd/MM/yyyy HH:mm:ss') as [ORDER_RECEIVED_DATE_TIME],      pm.[STATUS] as [PM_ORDER_STATUS],      pl.[STATUS] as [INSTRUCTION_STATUS],      t.[TRD_AMEND_TYPE] as [CANCEL_KNOCKBACK_REASON],      NULL as [CANCEL_KNOCKBACK_REASON_NARRATION],      t.[TRD_MODIFIED_BY] as [CANCELLED_KNOCKED_BACK_BY],      FORMAT(t.[TRD_MODIFY_TIME], 'dd/MM/yyyy HH:mm:ss') as [FXM_CANCEL_DATE_TIME],      NULL as [CANCELLED_BY], --Not given in Mapping table      NULL as [CLIENT_FUND],      t.[PORTFOLIOS_PORTFOLIO_NAME] as [BASE_FUND],       pm.SM_SEC_TYPE as [PRODUCT],      null as FXM_PRODUCT,      NULL as [ACTION],      CAST(t.[FX_PAY_CURR] as varchar(50)) as [INSTRUCTED_CURRENCY],      NULL as [BUY_CURRENCY],      NULL as [SELL_CURRENCY],      CAST(FORMAT(CONVERT(DECIMAL(38,2),pl.[QUANTITY]), '#,0.00')  as varchar(50)) as [INSTRUCTED_AMOUNT],      FORMAT(pm.[OPEN_DATE], 'dd/MM/yyyy') as [TRADE_DATE],      (CONVERT(VARCHAR(50),FORMAT(pm.[SETTLE_DATE], 'dd/MM/yyyy')) + ISNULL(' | ' + CONVERT(VARCHAR(50),FORMAT(pm.[MATURITY], 'dd/MM/yyyy')),'')) as [VALUE_DATE],      CAST(FORMAT(CONVERT(DECIMAL(38,2),pm.[FILL_AMT]), '#,0.00')  as varchar(50)) as [EXECUTED_AMOUNT],      NULL as [SWAP_TYPE],      NULL as [NET_EXPOSURE],      pm.[PM] as [INSTRUCTED_BY],      'Aladdin' as [ORDER_SOURCE], --N/A given as mapping field, using this as assumption (?)      pm.[COMMENTS_VALUE] as [FM_COMMENTS],      t.[TRD_PURPOSE] as [TRADE_PURPOSE],      NULL as [MARKER],      NULL as [FIXING_DATE], --Given as Trades.SECURITY.SMARTCUT.FXNDF_ANNOUNCE_DATE       CASE       WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP'       WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG'       WHEN (pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM'      ELSE NULL      END AS [BUSINESS_GROUP], --Guessing the logic is same as DMG?      pm.ORD_NUM as [ORDER_ID],      ex.[FXM_ORDER_ID] as PM_ORDER_ID,      r.[REQUEST_ID] as [ALADDIN_COMMON_IDENTIFIER],      ex.[VG_608_CREATETIME] as [CREATE_DATE],      ex.[VG_608] as [EXCEPTION_FLAG],      ex.[DATA_SOURCE],      pm.AUTH_TIME as OS_INSTRUCTION_RECEIVED_DATE_TIME     FROM VISTA_STAGING.dbo.VG_608_TA_KNOCKBACK_FX_TABLE ex     left join VISTA_REPORTING.dbo.PM_ORDERS pm on ex.[FXM_ORDER_ID] = pm.[ORD_NUM]      inner join #max_touch_pm mtt on pm.[ORD_NUM] = mtt.[ORD_NUM] and pm.[TOUCH_COUNT] = mtt.[MAX_TOUCH]     left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on pm.[ORD_NUM] = oc.[PM_ORD]     left join VISTA_REPORTING.dbo.TRADES t on ex.[FXM_ORDER_ID] = t.[ORD_NUM]      left join (SELECT DISTINCT FUND_ID, PORTFOLIO_GROUP_NAME FROM VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY) pgt on t.[FUND] = pgt.[FUND_ID]     left join (SELECT DISTINCT ORD_NUM, PLACEMENT_NUM, [STATUS], QUANTITY, [BROKER], AVG_PRICE, VENUE FROM VISTA_REPORTING.dbo.PLACEMENTS) pl on pm.[ORD_NUM] = pl.[ORD_NUM]     left join (SELECT PLACEMENT_NUM, REQUEST_ID FROM VISTA_STAGING.dbo.REQUEST_LOOKUP) r on pl.[PLACEMENT_NUM] = r.[PLACEMENT_NUM]     left join VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd on tdd.[MG_USER_ID]  = t.[TRD_TRADER]                      AND CAST(t.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE)                                AND CAST(tdd.[DATE_TO] AS DATE)     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2 on tdd2.[INITIALS] = pm.[TRADER]                       AND CAST(pm.[PULL_DATE] AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE)                                AND CAST(tdd2.[DATE_TO] AS DATE)     left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd on dd.[REPORT_NAME] = 'Order Request Return'                    AND CAST(COALESCE(t.[PULL_DATE],pm.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE)                                AND CAST(dd.[DATE_TO] AS DATE)     WHERE ex.[DATA_SOURCE] = 'AL' AND EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM = ex.FXM_ORDER_ID)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE', 'U') IS NOT NULL     DELETE FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE     WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM=ORDER_ID)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE     SELECT *     FROM #temp_final_master_table         ELSE         SELECT *     INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE     FROM #temp_final_master_table             IF OBJECT_ID('tempdb..#cm_concat_ord', 'U') IS NOT NULL DROP TABLE #cm_concat_ord     IF OBJECT_ID('tempdb..#al_concat_ord', 'U') IS NOT NULL DROP TABLE #al_concat_ord     IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     IF OBJECT_ID('tempdb..#distinct_ids_al', 'U') IS NOT NULL DROP TABLE #distinct_ids_al     IF OBJECT_ID('tempdb..#distinct_ids_fx', 'U') IS NOT NULL DROP TABLE #distinct_ids_fx     IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE  #distinct_ids     IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table              IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg608_fx_idx1')           DROP INDEX mmf_vg608_fx_idx1      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg608_fx_idx1     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE      (ORDER_ID)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg608_fx_idx2')           DROP INDEX mmf_vg608_fx_idx2      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg608_fx_idx2     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE      (AUTHORISED_DATE_TIME)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg608_fx_idx3')           DROP INDEX mmf_vg608_fx_idx3      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg608_fx_idx3     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE      (DEALER_NAME)              IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg608_fx_idx4')           DROP INDEX mmf_vg608_fx_idx4      ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg608_fx_idx4     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE     (CREATE_DATE)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg608_fx_idx5')           DROP INDEX mmf_vg608_fx_idx5     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg608_fx_idx5     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE     (ORDER_RECEIVED_DATE_TIME)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg608_fx_idx6')           DROP INDEX mmf_vg608_fx_idx6     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg608_fx_idx6     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE     (EXCEPTION_FLAG)               IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'mmf_vg608_fx_idx7')           DROP INDEX mmf_vg608_fx_idx7     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE          CREATE NONCLUSTERED INDEX mmf_vg608_fx_idx7     ON VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE     (OS_INSTRUCTION_RECEIVED_DATE_TIME)              IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(     'MASTER_PM_ORDER_VG_608_TA_KNOCKBACK_FX_TABLE', --TABLE_NAME     @START_TIME, --START_TIME     GETDATE(), --END_TIME     DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS     CAST(GETDATE() as date)) --COMPLETION_DATE        END            --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_PM_ORDER_TABLE_VG_611_ORDER_AGGREGATION_CASH  CreateDate: 2025-06-26 18:07:51.993  ModifyDate: 2025-06-26 18:07:51.993  --- DEFINITION START ---          CREATE PROCEDURE [dbo].[MASTER_PM_ORDER_TABLE_VG_611_ORDER_AGGREGATION_CASH]        AS         -- 11/06/2024 - created for ticket:    -- SURVG-918 - Changed the Order By of a "Rate" column to make sure that "bank" column array of values aligns to "rates" column array of values.        DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()                IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids;    SELECT DISTINCT ORDER_ID, DATA_SOURCE    INTO #distinct_ids    FROM VISTA_STAGING.DBO.VG_611_ORDER_AGGREGATION_CASH_MM_TABLE        UNION ALL        SELECT DISTINCT ORDER_ID, DATA_SOURCE    FROM VISTA_STAGING.DBO.VG_611_ORDER_AGGREGATION_CASH_RR_TABLE;            IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_MM_TABLE', 'U') IS NOT NULL    AND OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_RR_TABLE', 'U') IS NOT NULL    DELETE FROM #distinct_ids     WHERE NOT EXISTS (SELECT od.ORDER_ID          FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_CASH od          WHERE od.ORDER_ID = #distinct_ids.ORDER_ID)    AND #distinct_ids.DATA_SOURCE = 'CM';            IF  OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_MM_TABLE', 'U') IS NOT NULL    AND OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_RR_TABLE', 'U') IS NOT NULL    DELETE FROM #distinct_ids     where NOT EXISTS (SELECT od.PM_ORD          FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od          WHERE od.PM_ORD = #distinct_ids.ORDER_ID)    AND #distinct_ids.DATA_SOURCE = 'AL';            IF OBJECT_ID('tempdb..#temp_cash_trades', 'U') IS NOT NULL DROP TABLE #temp_cash_trades    SELECT DISTINCT t.TRANSACTION_NUMBER    INTO #temp_cash_trades    FROM Vista_Reporting.dbo.CASH_TRADES t    INNER JOIN #distinct_ids di ON di.ORDER_ID = t.ORDER_ID        UNION        SELECT DISTINCT tr.MULTI_FUND_ID    FROM Vista_Reporting.dbo.ORDERS_CROSS oc    INNER JOIN #distinct_ids di ON di.ORDER_ID = oc.PM_ORD    LEFT JOIN Vista_Reporting.dbo.TRADES tr on oc.PM_ORD = tr.ORD_NUM;             IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades;    SELECT ct.TRANSACTION_NUMBER,      MAX(ct.API_REQUESTED_DATE) AS MAX_API_REQ    INTO #temp_max_req_trades    FROM VISTA_REPORTING.dbo.CASH_TRADES ct    INNER JOIN #distinct_ids di ON di.ORDER_ID=ct.ORDER_ID    GROUP BY ct.TRANSACTION_NUMBER;            IF OBJECT_ID('tempdb..#temp_max_trade_touch', 'U') IS NOT NULL DROP TABLE #temp_max_trade_touch;    SELECT t.MULTI_FUND_ID,      MAX(t.TOUCH_COUNT) AS MAX_TOUCH    INTO #temp_max_trade_touch    FROM VISTA_REPORTING.dbo.TRADES t    INNER JOIN #distinct_ids di ON t.ORD_NUM = di.ORDER_ID    GROUP BY t.MULTI_FUND_ID;            --Beginning of optimised #temp_combo_trades    IF OBJECT_ID('tempdb..#temp_combo_trades', 'U') IS NOT NULL DROP TABLE #temp_combo_trades    SELECT DISTINCT ct.ORDER_ID,        ct.TRANSACTION_NUMBER,        ct.CLIENT_FUND_OR_POOL_CODE,        ct.BASE_FUND_CODE,        CAST(ct.VALUE_DATE AS DATE) as VALUE_DATE,         CAST(ct.MATURITY_DATE AS DATE) AS MATURITY_DATE,        ct.DEALER_NAME_DECODE,        ct.TERM,        ct.BUSINESS_GROUP,        ct.DEALER_NAME,        ct.DEALT_AMOUNT,        ct.EXECUTED_DATETIME,        CAST(ct.BANK AS VARCHAR(50)) AS BANK,        ct.PULL_DATE,        ct.EXECUTED_RATE,        ct.CONFIRMED_DATETIME,        CAST(ct.TRADE_DATE AS DATE) AS TRADE_DATE,        ct.TRANSACTION_TYPE,        ct.PRODUCT,        ct.NOOF_QUOTES AS NO_OF_QUOTES    INTO #temp_combo_trades    FROM VISTA_REPORTING.dbo.CASH_TRADES ct    INNER JOIN #temp_max_req_trades req on req.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER                 AND req.MAX_API_REQ = ct.API_REQUESTED_DATE    INNER JOIN #temp_cash_trades t ON t.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER        UNION        SELECT DISTINCT t.ORD_NUM,         t.MULTI_FUND_ID AS TRANSACTION_NUMBER,        NULL,        t.PORTFOLIOS_PORTFOLIO_NAME,        CAST(t.TRD_TRADE_DATE AS DATE) AS value_date,        t.TRD_SETTLE_DATE,        t.TRD_TRADER,        NULL,        CASE WHEN PCG.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP'          WHEN PCG.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG'          WHEN (PCG.[PORTFOLIO_GROUP_NAME] = 'MG_PROD'           OR PCG.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM'           ELSE NULL          END AS BUSINESS_GROUP,        t.TRD_TRADER,        NULL,        t.EXECUTION_TIME,        NULL,        t.PULL_DATE,        t.TRD_PRICE,        t.EXECUTION_TIME,        CAST(t.TRD_TRADE_DATE AS DATE),        NULL,        NULL AS PRODUCT,        NULL AS NO_OF_QUOTES    FROM VISTA_REPORTING.dbo.TRADES t    INNER JOIN #temp_max_trade_touch mtt ON mtt.MAX_TOUCH = t.TOUCH_COUNT AND mtt.MULTI_FUND_ID = t.MULTI_FUND_ID    LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = t.ORD_NUM    INNER JOIN #distinct_ids di ON di.ORDER_ID = oc.PM_ORD     LEFT JOIN ( SELECT DISTINCT PORTFOLIO_NAME, PORTFOLIO_GROUP_FULL_NAME, PORTFOLIO_GROUP_NAME, FUND_ID       FROM VISTA_REPORTING.DBO.PORTFOLIO_GROUPS_TREASURY ) PCG ON PCG.FUND_ID = CONVERT(VARCHAR(30), T.FUND )       AND EXECUTION_TIME IS NOT NULL    WHERE di.DATA_SOURCE = 'AL';        IF OBJECT_ID('tempdb..#temp_max_ORDER_touch', 'U') IS NOT NULL DROP TABLE #temp_max_ORDER_touch;    SELECT DISTINCT po.ORD_NUM,      MAX(po.TOUCH_COUNT) AS MAX_TOUCH    INTO #temp_max_ORDER_touch    FROM VISTA_REPORTING.dbo.PM_ORDERS po    INNER JOIN #distinct_ids di ON di.ORDER_ID = po.ORD_NUM    GROUP BY ORD_NUM;            IF OBJECT_ID('tempdb..#distinct_trade_ids', 'U') IS NOT NULL DROP TABLE #distinct_trade_ids;    SELECT DISTINCT oc.TRD_ORD,        t.MULTI_FUND_ID    INTO #distinct_trade_ids    FROM #distinct_ids di    LEFT JOIN Vista_Reporting.dbo.ORDERS_CROSS oc ON oc.PM_ORD = di.ORDER_ID    INNER JOIN Vista_Reporting.dbo.TRADES t ON t.ORD_NUM = oc.TRD_ORD;            IF OBJECT_ID('tempdb..#temp_max_ORDER_CM', 'U') IS NOT NULL DROP TABLE #temp_max_ORDER_CM;    SELECT DISTINCT co.ORDER_ID,    MAX(API_REQUESTED_DATE) as max_date    INTO #temp_max_order_cm    FROM VISTA_REPORTING.dbo.CASH_ORDERS co    INNER JOIN #distinct_ids di ON co.ORDER_ID = di.ORDER_ID    GROUP BY co.ORDER_ID;            IF OBJECT_ID('tempdb..#temp_combo_orders', 'U') IS NOT NULL DROP TABLE #temp_combo_orders;    SELECT DISTINCT     co.ORDER_ID,     ACCEPTED_DATETIME,     INSTRUCTION_RECEIVED_DATE,     INSTRUCTION_INITIATION_DATE_TIME,     INSTRUCTED_CURRENCY,     CAST(TRADE_DATE AS DATE) AS TRADE_DATE,     INSTRUCTED_AMOUNT,     INSTRUCTED_BY,     SEQUENCE_EXCEPTION_REASON,     SEQUENCE_EXCEPTION_NARRATION,     DELETED_REASON,     DELETED_REASON_NARRATION,     INSTRUCTION_STATUS_DECODE,     FREEZE_DATETIME,     FREEZEREASON,     FREEZE_REASON_NARRATION,     RELEASE_DATETIME,     RELEASE_REASON,     RELEASE_REASON_NARRATION,     CUSTOM_INSTRUCTION,     ACCEPTED_BY,     TRANSACTION_TYPE,     PULL_DATE,     PRODUCT,     CLIENT_FUND_OR_POOL_CODE,     CAST(INSTRUCTION_STATUS AS NVARCHAR(50)) AS INSTRUCTION_STATUS,     CAST(VALUE_DATE AS DATE) AS VALUE_DATE,     CAST(MATURITY_DATE AS DATE) AS MATURITY_DATE    INTO #temp_combo_orders    FROM VISTA_REPORTING.dbo.CASH_ORDERS co    INNER JOIN #temp_max_order_cm moo on moo.ORDER_ID = CO.order_id and moo.max_date = CO.api_requested_date        UNION        SELECT DISTINCT     pm.ORD_NUM,     pm.ACTIVE_TIME,     pm.AUTH_TIME,     pm.ACTIVE_TIME,     pm.CURRENCY,     null,     pm.FACE,     pm.PM,     NULL,     NULL,     NULL,     NULL,     pm.[STATUS],     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     pm.COMMENTS_VALUE,     TRADER,     TRAN_TYPE,     pm.PULL_DATE,     SM_SEC_TYPE as PRODUCT,     NULL AS CLIENT_FUND_OR_POOL_CODE,     CAST(pm.STATUS AS NVARCHAR(50)) AS INSTRUCTION_STATUS,     NULL,     NULL    FROM VISTA_REPORTING.dbo.PM_ORDERS pm    INNER JOIN #temp_max_ORDER_touch mot on mot.ORD_NUM = pm.ORD_NUM and mot.MAX_TOUCH = pm.TOUCH_COUNT    LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD=pm.ORD_NUM    where pm.DEALING_DESK = 'Cash';            --Concatenate     IF OBJECT_ID('tempdb..#conc_datatemp_rr', 'U') IS NOT NULL DROP TABLE #conc_datatemp_rr;    SELECT DISTINCT      ex.[ORDER_ID],     CONFIRMED_DATETIME = STUFF((         SELECT  ' | ' + CAST(FORMAT(CONFIRMED_DATETIME, 'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50))        FROM #temp_combo_trades ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] order by TRANSACTION_NUMBER        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     PRODUCT = STUFF((         SELECT  ' | ' + CAST(PRODUCT AS VARCHAR(50))        FROM #temp_combo_orders ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] order by [ORDER_ID]        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     TRANSACTION_NUMBER = STUFF((         SELECT  ' | ' + CAST(TRANSACTION_NUMBER AS VARCHAR(50))        FROM #temp_combo_trades ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] order by TRANSACTION_NUMBER        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     DEALT_AMOUNT = STUFF((        SELECT  ' | ' + CAST(FORMAT(CT.DEALT_AMOUNT, '#,0.00') AS varchar(50))         FROM #temp_combo_trades ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] order by TRANSACTION_NUMBER        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     TRANSACTION_TYPE = STUFF((        SELECT  ' | '+ CAST(CT.TRANSACTION_TYPE AS varchar(50))         FROM #temp_combo_trades ct        WHERE ct.[ORDER_ID]  = ex.[ORDER_ID] order by TRANSACTION_NUMBER        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),      EXECUTED_BANK = STUFF((        SELECT  ' | ' + CAST(CT.BANK AS varchar(50))        FROM #temp_combo_trades ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] order by TRANSACTION_NUMBER        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     EXECUTED_RATE = STUFF((        SELECT  ' | ' + CAST(CONVERT(DECIMAL(38,4), ct.EXECUTED_RATE) AS varchar(50))        FROM #temp_combo_trades ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] order by TRANSACTION_NUMBER        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)') ,1,2,''),     TRADE_DATE = STUFF((        SELECT  ' | ' + CAST(FORMAT(TRADE_DATE, 'dd/MM/yyyy') AS VARCHAR(50))        FROM #temp_combo_trades ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] order by TRANSACTION_NUMBER        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)') ,1,2,''),     TERM = STUFF((        SELECT  ' | ' + CAST(CT.TERM AS VARCHAR(50))        FROM #temp_combo_trades ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] order by TRANSACTION_NUMBER        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)') ,1,2,''),     EXECUTED_DATETIME = STUFF ((        SELECT  ' | ' + CAST(FORMAT(CT.EXECUTED_DATETIME, 'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50))        FROM #temp_combo_trades ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] order by TRANSACTION_NUMBER        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)') ,1,2,''),     VALUE_DATE = STUFF((         SELECT  ' | ' + CAST(FORMAT(VALUE_DATE,'dd/MM/yyyy') AS VARCHAR(50))        FROM #temp_combo_orders ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] order by [ORDER_ID]        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     MATURITY_DATE = STUFF((         SELECT  ' | ' + CAST(FORMAT(MATURITY_DATE, 'dd/MM/yyyy') AS VARCHAR(50))        FROM #temp_combo_orders ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] order by [ORDER_ID]        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     NO_OF_QUOTES =  STUFF((        SELECT  ' | ' + CAST(CT.NO_OF_QUOTES AS VARCHAR(50))        FROM #temp_combo_trades ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] order by TRANSACTION_NUMBER        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)') ,1,2,''),     'RR' AS CM_SOURCE    INTO #conc_datatemp_rr    FROM VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_RR_TABLE ex    INNER JOIN #distinct_ids di ON di.ORDER_ID = ex.ORDER_ID;            IF OBJECT_ID('tempdb..#conc_datatemp_mm', 'U') IS NOT NULL DROP TABLE #conc_datatemp_mm;    SELECT DISTINCT      ex.[ORDER_ID],     CONFIRMED_DATETIME = STUFF((           SELECT  ' | ' + CAST(FORMAT(CONFIRMED_DATETIME, 'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50))          FROM #temp_combo_trades ct          WHERE ct.[ORDER_ID] = ex.[ORDER_ID] order by TRANSACTION_NUMBER          FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     PRODUCT = STUFF((           SELECT  ' | ' + CAST(PRODUCT AS VARCHAR(50))          FROM #temp_combo_orders ct          WHERE ct.[ORDER_ID] = ex.[ORDER_ID] order by [ORDER_ID]          FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     TRANSACTION_NUMBER = STUFF((           SELECT  ' | '  + CAST(TRANSACTION_NUMBER AS VARCHAR(50))          FROM #temp_combo_trades ct          WHERE ct.[ORDER_ID] = ex.[ORDER_ID] order by TRANSACTION_NUMBER          FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     DEALT_AMOUNT = STUFF((         SELECT  ' | ' + CAST(FORMAT(CT.DEALT_AMOUNT, '#,0.00') AS varchar(50))          FROM #temp_combo_trades ct         WHERE ct.[ORDER_ID] = ex.[ORDER_ID] order by TRANSACTION_NUMBER         FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     TRANSACTION_TYPE = STUFF((         SELECT  ' | '+  CAST(CT.TRANSACTION_TYPE AS varchar(50))          FROM #temp_combo_trades ct         WHERE ct.[ORDER_ID] = ex.[ORDER_ID] order by TRANSACTION_NUMBER         FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     EXECUTED_BANK = STUFF((         SELECT  ' | '+  CAST(ct.BANK AS varchar(50))          FROM #temp_combo_trades ct         WHERE ct.[ORDER_ID] = ex.[ORDER_ID] order by TRANSACTION_NUMBER         FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     EXECUTED_RATE = STUFF((         SELECT  ' | ' + CAST(CONVERT(DECIMAL(38,4), ct.EXECUTED_RATE) AS varchar(50))         FROM #temp_combo_trades ct         WHERE ct.[ORDER_ID] = ex.[ORDER_ID] order by TRANSACTION_NUMBER         FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)') ,1,2,''),     TRADE_DATE = STUFF((        SELECT  ' | ' + CAST(FORMAT(TRADE_DATE, 'dd/MM/yyyy') AS VARCHAR(50))        FROM #temp_combo_trades ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] order by TRANSACTION_NUMBER        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)') ,1,2,''),     TERM = STUFF((        SELECT  ' | ' + CAST(CT.TERM AS VARCHAR(50))        FROM #temp_combo_trades ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] order by TRANSACTION_NUMBER        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)') ,1,2,''),     EXECUTED_DATETIME = STUFF ((        SELECT  ' | ' + CAST(FORMAT(CT.EXECUTED_DATETIME, 'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50))        FROM #temp_combo_trades ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] order by TRANSACTION_NUMBER        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)') ,1,2,''),     VALUE_DATE = STUFF((         SELECT  ' | ' + CAST(FORMAT(VALUE_DATE, 'dd/MM/yyyy') AS VARCHAR(50))        FROM #temp_combo_orders ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] order by [ORDER_ID]        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     MATURITY_DATE = STUFF((         SELECT  ' | ' + CAST(FORMAT(MATURITY_DATE, 'dd/MM/yyyy') AS VARCHAR(50))        FROM #temp_combo_orders ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] order by [ORDER_ID]        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),     NO_OF_QUOTES =  STUFF((        SELECT  ' | ' + CAST(CT.NO_OF_QUOTES AS VARCHAR(50))        FROM #temp_combo_trades ct        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] order by TRANSACTION_NUMBER        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)') ,1,2,''),     'MM' AS CM_SOURCE    INTO #conc_datatemp_mm    FROM VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_MM_TABLE ex    INNER JOIN #distinct_ids di ON di.ORDER_ID = ex.ORDER_ID;            IF OBJECT_ID('tempdb..#losingbanktemp_rr', 'U') IS NOT NULL DROP TABLE #losingbanktemp_rr    SELECT DISTINCT     ex.[ORDER_ID],     BANK_CODE = STUFF((         SELECT  ', ' + BANK_CODE        FROM VISTA_REPORTING.dbo.CASH_BANK_RATES cbr        left join VISTA_REPORTING.dbo.CASH_TRADES ct        on cbr.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] and cbr.[BANK_CODE] != ct.[BANK] and ex.DATA_SOURCE = 'CM' ORDER BY ct.[TRANSACTION_NUMBER], ', ' + BANK_CODE        FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''),     RATE = STUFF((         SELECT ', ' + CAST(CONVERT(DECIMAL(38,4),RATE) AS varchar(50))        FROM VISTA_REPORTING.dbo.CASH_BANK_RATES cbr        left join VISTA_REPORTING.dbo.CASH_TRADES ct        on cbr.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] and cbr.[BANK_CODE] != ct.[BANK] and ex.DATA_SOURCE = 'CM'     -- SURVG-918        ORDER BY ct.[TRANSACTION_NUMBER], ', ' + BANK_CODE    -- /SURVG-918        FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '')    INTO #losingbanktemp_rr    FROM VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_RR_TABLE ex    INNER JOIN #distinct_ids di ON di.ORDER_ID = ex.ORDER_ID;            IF OBJECT_ID('tempdb..#losingbanktemp_mm', 'U') IS NOT NULL DROP TABLE #losingbanktemp_mm    SELECT DISTINCT     ex.[ORDER_ID],     BANK_CODE = STUFF((         SELECT  ', ' + BANK_CODE        FROM VISTA_REPORTING.dbo.CASH_BANK_RATES cbr        left join VISTA_REPORTING.dbo.CASH_TRADES ct        on cbr.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] and cbr.[BANK_CODE] != ct.[BANK] and ex.DATA_SOURCE = 'CM' ORDER BY ct.[TRANSACTION_NUMBER], ', ' + BANK_CODE        FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, ''),     RATE = STUFF((         SELECT ', ' + CAST(CONVERT(DECIMAL(38,4),RATE) AS varchar(50))        FROM VISTA_REPORTING.dbo.CASH_BANK_RATES cbr        left join VISTA_REPORTING.dbo.CASH_TRADES ct        on cbr.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]        WHERE ct.[ORDER_ID] = ex.[ORDER_ID] and cbr.[BANK_CODE] != ct.[BANK] and ex.DATA_SOURCE = 'CM'     -- SURVG-918        ORDER BY ct.[TRANSACTION_NUMBER], ', ' + BANK_CODE    -- /SURVG-918        FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '')    INTO #losingbanktemp_mm    FROM VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_MM_TABLE ex    INNER JOIN #distinct_ids di ON di.ORDER_ID = ex.ORDER_ID;            IF OBJECT_ID('tempdb..#TEMP_TRADES_DISTINCT_CM', 'U') IS NOT NULL DROP TABLE #TEMP_TRADES_DISTINCT_CM    SELECT DISTINCT CO.ORDER_ID     , CT.TRANSACTION_NUMBER     , INSTRUCTED_AMOUNT     , DEALT_AMOUNT    INTO #TEMP_TRADES_DISTINCT_CM    FROM VISTA_REPORTING.DBO.CASH_TRADES CT    LEFT JOIN ( SELECT DISTINCT ORDER_ID, INSTRUCTED_AMOUNT        FROM VISTA_REPORTING.DBO.CASH_ORDERS ) CO ON CO.ORDER_ID = CT.ORDER_ID;            IF OBJECT_ID('tempdb..#TEMP_TRADES_DISTINCT', 'U') IS NOT NULL DROP TABLE #TEMP_TRADES_DISTINCT    SELECT DISTINCT       oc.PM_ORD AS ORD_NUM,       t.MULTI_FUND_ID,       ABS(pm.FACE) AS FACE,      t.TRD_ORIG_FACE    INTO #TEMP_TRADES_DISTINCT    FROM VISTA_REPORTING.DBO.TRADES T    INNER JOIN #distinct_trade_ids tid on tid.MULTI_FUND_ID=T.MULTI_FUND_ID    LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.TRD_ORD = T.ORD_NUM    LEFT JOIN( SELECT PM.ORD_NUM, PM.FACE, PM.FILL_AMT, PM.TOUCH_COUNT        FROM VISTA_REPORTING.DBO.PM_ORDERS PM        INNER JOIN #temp_max_ORDER_touch MOT        ON MOT.ORD_NUM = PM.ORD_NUM AND MOT.MAX_TOUCH = PM.TOUCH_COUNT ) PM        ON OC.PM_ORD = PM.ORD_NUM    LEFT JOIN ( SELECT DISTINCT MULTI_FUND_ID, DEALING_DESK        FROM VISTA_REPORTING.DBO.PRIMARY_INST_TYPE_TABLE ) PRIM        ON PRIM.MULTI_FUND_ID = T.MULTI_FUND_ID    INNER JOIN #temp_cash_trades tct ON tct.TRANSACTION_NUMBER = T.MULTI_FUND_ID;            --Remain AMT for AL    IF OBJECT_ID('tempdb..#REMAIN_AMT', 'U') IS NOT NULL DROP TABLE #REMAIN_AMT    SELECT DISTINCT ORD_NUM AS ORDER_ID,         MULTI_FUND_ID,        SUM(ABS(TRD_ORIG_FACE)) AS [Booked_Amt],        FACE - SUM(ABS(TRD_ORIG_FACE)) AS [Remain_Amt],        'AL' AS SOURCE    INTO #REMAIN_AMT    FROM #TEMP_TRADES_DISTINCT     GROUP BY ORD_NUM,       MULTI_FUND_ID,       FACE;        IF OBJECT_ID('tempdb..#temp_recent_dealer_cm', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_cm    SELECT DISTINCT    ct.ORDER_ID,        ct.DEALER_NAME    INTO #temp_recent_dealer_cm    FROM VISTA_REPORTING.dbo.CASH_TRADES ct    INNER JOIN #distinct_ids di ON di.ORDER_ID=ct.ORDER_ID    INNER JOIN (SELECT          ORDER_ID,         MAX(EXECUTED_DATETIME) AS MAX_EXEC,         MAX(API_REQUESTED_DATE) AS MAX_API_REQ         FROM VISTA_REPORTING.dbo.CASH_TRADES         GROUP BY ORDER_ID) ct2 ON nullif(ct2.ORDER_ID, '0') = ct.ORDER_ID               AND ct2.MAX_EXEC = ct.EXECUTED_DATETIME              AND ct2.MAX_API_REQ = ct.API_REQUESTED_DATE;        IF OBJECT_ID('tempdb..#temp_recent_dealer_al', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_al    SELECT DISTINCT oc.PM_ORD AS ORD_NUM,    trd_trader    INTO #temp_recent_dealer_al    FROM VISTA_REPORTING.dbo.TRADES t    INNER JOIN #distinct_trade_ids tid ON tid.MULTI_FUND_ID=t.MULTI_FUND_ID    LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = t.ORD_NUM    INNER JOIN (SELECT       OC.PM_ORD AS ORD_NUM,       MAX(EXECUTION_TIME) AS MAX_EXEC,       MAX(TOUCH_COUNT) AS MAX_TOUCH       FROM VISTA_REPORTING.dbo.TRADES T       LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS OC ON OC.TRD_ORD = T.ORD_NUM       GROUP BY OC.PM_ORD) T2 ON T2.ORD_NUM = OC.PM_ORD              AND T2.MAX_EXEC = t.EXECUTION_TIME             AND T2.MAX_TOUCH = t.TOUCH_COUNT    INNER JOIN #distinct_ids di ON di.ORDER_ID = t.ORD_NUM;            --Temp final master table     IF OBJECT_ID('tempdb..#temp_final_master_rr', 'U') IS NOT NULL DROP TABLE #temp_final_master_rr;    SELECT DISTINCT COALESCE(TDD.FULL_NAME, TDD2.FULL_NAME, dd.default_dealer)  AS [DEALER_NAME],        co.SEQUENCE_EXCEPTION_REASON,        co.SEQUENCE_EXCEPTION_NARRATION,        co.CLIENT_FUND_OR_POOL_CODE AS CLIENT_FUND,        cdt.PRODUCT,        co.INSTRUCTED_CURRENCY,        CAST(co.INSTRUCTED_AMOUNT AS DECIMAL(32,2)) AS INSTRUCTED_AMOUNT,        CAST(FORMAT(co.INSTRUCTION_RECEIVED_DATE,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) AS INSTRUCTION_RECEIVED_DATE_TIME,        cdt.EXECUTED_BANK AS BANK,        cdt.EXECUTED_RATE,        CAST(FORMAT(co.ACCEPTED_DATETIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) AS ACCEPTED_DATETIME,        CAST(FORMAT(co.INSTRUCTION_INITIATION_DATE_TIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) AS INSTRUCTION_INITIATION_DATE_TIME,        cdt.CONFIRMED_DATETIME AS CONFIRMED_DATETIME,        cdt.EXECUTED_DATETIME AS EXECUTED_DATETIME,        CASE WHEN cl.FIRM_FUND IS NULL          THEN 'CLIENT'         ELSE 'FIRM'         END AS FIRM_VS_CLIENT,        lbt.[BANK_CODE] AS LOSING_BANK,         lbt.[RATE] AS LOSING_RATE,         cdt.NO_OF_QUOTES,        STATIC_BANK_PANEL = STUFF((        SELECT  ' | ' + CAST(cmb.BANK_NAME AS VARCHAR(50))        FROM VISTA_REPORTING.dbo.CASH_MAPPED_BANKS cmb        WHERE cmb.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER -- order by cmb.TRANSACTION_NUMBER        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)') ,1,2,''),        cdt.TRADE_DATE AS TRADE_DATE,        cdt.VALUE_DATE AS VALUE_DATE,        cdt.MATURITY_DATE AS MATURITY_DATE,        cdt.TERM,        cdt.TRANSACTION_TYPE,        co.CUSTOM_INSTRUCTION,        ct.BASE_FUND_CODE,        ct.BUSINESS_GROUP,        co.INSTRUCTED_BY,        co.ACCEPTED_BY,        cdt.DEALT_AMOUNT,        co.DELETED_REASON,        co.DELETED_REASON_NARRATION,        CAST(FORMAT(co.FREEZE_DATETIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) AS FREEZE_DATETIME,        co.FREEZEREASON AS FREEZE_REASON,        co.FREEZE_REASON_NARRATION,        CAST(FORMAT(co.RELEASE_DATETIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) AS RELEASE_DATETIME,        co.RELEASE_REASON,        co.RELEASE_REASON_NARRATION,        DATEDIFF(MINUTE,CO.FREEZE_DATETIME, CO.RELEASE_DATETIME) AS  [TIME_ELAPSED_BETWEEN_FREEZE_AND_RELEASE],        co.INSTRUCTION_STATUS,        ex.ORDER_ID,        cdt.TRANSACTION_NUMBER,        EX.VG_611_CREATETIME,        EX.DATA_SOURCE,        CAST(ex.VG_611 AS INT) AS EXCEPTION    INTO #temp_final_master_rr    FROM VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_RR_TABLE ex    LEFT JOIN #temp_combo_orders co on ex.ORDER_ID = co.ORDER_ID    LEFT JOIN #temp_combo_trades ct on ct.ORDER_ID = ex.ORDER_ID    LEFT JOIN VISTA_STAGING.dbo.REF_COH_FIRM_FUND_LIST cl ON cl.FIRM_FUND = ct.CLIENT_FUND_OR_POOL_CODE      AND co.INSTRUCTION_RECEIVED_DATE BETWEEN cl.DATE_FROM AND cl.DATE_TO    LEFT JOIN #conc_datatemp_rr cdt on ex.ORDER_ID = cdt.ORDER_ID    LEFT JOIN #temp_recent_dealer_al RAL ON RAL.ORD_NUM  = ex.ORDER_ID    LEFT JOIN #temp_recent_dealer_cm RCM ON RCM.ORDER_ID = ex.ORDER_ID    LEFT JOIN #losingbanktemp_rr lbt ON LBT.ORDER_ID = ex.ORDER_ID    LEFT JOIN (SELECT DISTINCT SETTLE_DATE, PM.ORD_NUM, PM, PULL_DATE, CURRENCY, FACE, STATUS, TOUCH_COUNT, ACTIVE_TIME, SM_SEC_TYPE, TRADER, AUTH_TIME, COMMENTS_VALUE           FROM VISTA_REPORTING.DBO.PM_ORDERS PM          INNER JOIN #temp_max_ORDER_touch mOt ON mOt.ORD_NUM=PM.ORD_NUM AND mOt.MAX_TOUCH=PM.TOUCH_COUNT) PM ON PM.ORD_NUM = ex.ORDER_ID    LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD ON ((TDD.MG_USER_ID = RCM.DEALER_NAME AND ex.DATA_SOURCE = 'CM')                    OR (TDD.INITIALS = RAL.TRD_TRADER AND ex.DATA_SOURCE = 'AL'))                    AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE) AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE)    LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD2 ON ((TDD2.MG_USER_ID  = COALESCE(CO.ACCEPTED_BY, CO.INSTRUCTED_BY) AND ex.DATA_SOURCE = 'CM')                    OR (TDD2.INITIALS = PM.TRADER AND ex.DATA_SOURCE = 'AL'))                    AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE) AS DATE) BETWEEN CAST(TDD2.DATE_FROM AS DATE) AND CAST(TDD2.DATE_TO AS DATE)    LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'Order Aggregation RR'                      AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE) AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)    WHERE EXISTS (SELECT di.ORDER_ID FROM #distinct_ids di WHERE di.ORDER_ID = ex.ORDER_ID);            --Temp final master table mm    IF OBJECT_ID('tempdb..#temp_final_master_mm', 'U') IS NOT NULL DROP TABLE #temp_final_master_mm;    SELECT DISTINCT COALESCE(TDD.FULL_NAME, TDD2.FULL_NAME, dd.default_dealer)  AS [DEALER_NAME],        co.SEQUENCE_EXCEPTION_REASON,        co.SEQUENCE_EXCEPTION_NARRATION,        co.CLIENT_FUND_OR_POOL_CODE AS CLIENT_FUND,        cdt.PRODUCT,        co.INSTRUCTED_CURRENCY,        CAST(co.INSTRUCTED_AMOUNT AS DECIMAL(32,2)) AS INSTRUCTED_AMOUNT,        CAST(FORMAT(co.INSTRUCTION_RECEIVED_DATE,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) AS INSTRUCTION_RECEIVED_DATE_TIME,        cdt.EXECUTED_BANK AS BANK,        cdt.EXECUTED_RATE,        CAST(FORMAT(co.ACCEPTED_DATETIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) AS ACCEPTED_DATETIME,        CAST(FORMAT(co.INSTRUCTION_INITIATION_DATE_TIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) AS INSTRUCTION_INITIATION_DATE_TIME,        cdt.CONFIRMED_DATETIME AS CONFIRMED_DATETIME,        CASE WHEN cl.FIRM_FUND IS NULL          THEN 'CLIENT'         ELSE 'FIRM'         END AS FIRM_VS_CLIENT,        lbt.[BANK_CODE] AS LOSING_BANK,         lbt.[RATE] AS LOSING_RATE,         cdt.NO_OF_QUOTES,        STATIC_BANK_PANEL = STUFF((        SELECT  ' | ' + CAST(cmb.BANK_NAME AS VARCHAR(50))        FROM VISTA_REPORTING.dbo.CASH_MAPPED_BANKS cmb        WHERE cmb.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER --order by cmb.TRANSACTION_NUMBER        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)') ,1,2,''),        cdt.TRADE_DATE AS TRADE_DATE,        cdt.VALUE_DATE AS VALUE_DATE,        cdt.MATURITY_DATE AS MATURITY_DATE,        cdt.TERM,        cdt.TRANSACTION_TYPE,        co.CUSTOM_INSTRUCTION,        ct.BASE_FUND_CODE,        ct.BUSINESS_GROUP,        co.INSTRUCTED_BY,        co.ACCEPTED_BY,        cdt.DEALT_AMOUNT,        co.DELETED_REASON,        co.DELETED_REASON_NARRATION,        CAST(FORMAT(co.FREEZE_DATETIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) AS FREEZE_DATETIME,        co.FREEZEREASON AS FREEZE_REASON,        co.FREEZE_REASON_NARRATION,        CAST(FORMAT(co.RELEASE_DATETIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) AS RELEASE_DATETIME,        co.RELEASE_REASON,        co.RELEASE_REASON_NARRATION,        DATEDIFF(MINUTE,CO.FREEZE_DATETIME, CO.RELEASE_DATETIME) AS [TIME_ELAPSED_BETWEEN_FREEZE_AND_RELEASE],        co.INSTRUCTION_STATUS,        ex.ORDER_ID,        cdt.TRANSACTION_NUMBER,        EX.VG_611_CREATETIME,        EX.DATA_SOURCE,        CAST(ex.VG_611 AS INT) AS EXCEPTION    INTO #temp_final_master_mm    FROM VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_MM_TABLE ex    LEFT JOIN #temp_combo_orders co on ex.ORDER_ID = co.ORDER_ID    LEFT JOIN #temp_combo_trades ct on ct.ORDER_ID = ex.ORDER_ID    LEFT JOIN VISTA_STAGING.dbo.REF_COH_FIRM_FUND_LIST cl ON cl.FIRM_FUND = ct.CLIENT_FUND_OR_POOL_CODE      AND co.INSTRUCTION_RECEIVED_DATE BETWEEN cl.DATE_FROM AND cl.DATE_TO    LEFT JOIN #conc_datatemp_mm cdt on ex.ORDER_ID = cdt.ORDER_ID    LEFT JOIN #temp_recent_dealer_al RAL ON RAL.ORD_NUM  = ex.ORDER_ID    LEFT JOIN #temp_recent_dealer_cm RCM ON RCM.ORDER_ID = ex.ORDER_ID    LEFT JOIN #losingbanktemp_mm lbt ON LBT.ORDER_ID = ex.ORDER_ID        LEFT JOIN (SELECT DISTINCT SETTLE_DATE, PM.ORD_NUM, PM, PULL_DATE, CURRENCY, FACE, STATUS, TOUCH_COUNT, ACTIVE_TIME, SM_SEC_TYPE, TRADER, AUTH_TIME, COMMENTS_VALUE           FROM VISTA_REPORTING.DBO.PM_ORDERS PM          INNER JOIN #temp_max_ORDER_touch mOt ON mOt.ORD_NUM=PM.ORD_NUM AND mOt.MAX_TOUCH=PM.TOUCH_COUNT) PM ON PM.ORD_NUM = ex.ORDER_ID    LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD ON ((TDD.MG_USER_ID = RCM.DEALER_NAME AND ex.DATA_SOURCE = 'CM')                    OR (TDD.INITIALS = RAL.TRD_TRADER AND ex.DATA_SOURCE = 'AL'))                    AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE) AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE)    LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD2 ON ((TDD2.MG_USER_ID  = COALESCE(CO.ACCEPTED_BY, CO.INSTRUCTED_BY) AND ex.DATA_SOURCE = 'CM')                    OR (TDD2.INITIALS = PM.TRADER AND ex.DATA_SOURCE = 'AL'))                    AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE) AS DATE) BETWEEN CAST(TDD2.DATE_FROM AS DATE) AND CAST(TDD2.DATE_TO AS DATE)    LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'Order Aggregation MM'                      AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE) AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)    WHERE EXISTS (SELECT di.ORDER_ID FROM #distinct_ids di WHERE di.ORDER_ID = ex.ORDER_ID);            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_RR_TABLE', 'U') IS NOT NULL    DELETE FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_RR_TABLE    WHERE EXISTS (SELECT DISTINCT    ORDER_ID    FROM #distinct_ids    WHERE #distinct_ids.ORDER_ID = VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_RR_TABLE.ORDER_ID);            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_MM_TABLE', 'U') IS NOT NULL    DELETE FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_MM_TABLE    WHERE EXISTS (SELECT DISTINCT    ORDER_ID    FROM #distinct_ids    WHERE #distinct_ids.ORDER_ID = VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_MM_TABLE.ORDER_ID);            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_RR_TABLE', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_rr_TABLE    SELECT *    FROM #temp_final_master_rr        ELSE        SELECT *     INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_RR_TABLE    FROM #temp_final_master_rr;            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_MM_TABLE', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_MM_TABLE    SELECT *    FROM #temp_final_master_mm        ELSE        SELECT *     INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_MM_TABLE    FROM #temp_final_master_mm;            --Drop temp tables     IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE  #distinct_ids;    IF OBJECT_ID('tempdb..#temp_cash_trades', 'U') IS NOT NULL DROP TABLE #temp_cash_trades;    IF OBJECT_ID('tempdb..#losingbanktemp', 'U') IS NOT NULL DROP TABLE #losingbanktemp;     IF OBJECT_ID('tempdb..#losingquotetemp', 'U') IS NOT NULL DROP TABLE #losingquotetemp;    IF OBJECT_ID('tempdb..#temp_max_order_touch', 'U') IS NOT NULL DROP TABLE #temp_max_order_touch;    IF OBJECT_ID('tempdb..#temp_max_trade_touch', 'U') IS NOT NULL DROP TABLE #temp_max_trade_touch;    IF OBJECT_ID('tempdb..#distinct_trade_ids', 'U') IS NOT NULL DROP TABLE #distinct_trade_ids;    IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades;    IF OBJECT_ID('tempdb..#temp_mf_conc_mm', 'U') IS NOT NULL DROP TABLE #temp_mf_conc_mm;    IF OBJECT_ID('tempdb..#cm_concat_ord', 'U') IS NOT NULL DROP TABLE #cm_concat_ord;    IF OBJECT_ID('tempdb..#temp_max_order_cm', 'U') IS NOT NULL DROP TABLE #temp_max_order_cm;    IF OBJECT_ID('tempdb..#temp_combo_orders', 'U') IS NOT NULL DROP TABLE #temp_combo_orders;    IF OBJECT_ID('tempdb..#temp_combo_trades', 'U') IS NOT NULL DROP TABLE #temp_combo_trades    IF OBJECT_ID('tempdb..#temp_final_master', 'U') IS NOT NULL DROP TABLE #temp_final_master;            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(    'MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_MM_TABLE', --TABLE_NAME    @START_TIME, --START_TIME    GETDATE(), --END_TIME    DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS    CAST(GETDATE() as date)) --COMPLETION_DATE            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(    'MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_CASH_RR_TABLE', --TABLE_NAME    @START_TIME, --START_TIME    GETDATE(), --END_TIME    DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS    CAST(GETDATE() as date)) --COMPLETION_DATE            --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_PM_ORDER_TABLE_VG_611_ORDER_AGGREGATION_FX  CreateDate: 2025-06-26 18:08:03.850  ModifyDate: 2025-06-26 18:08:03.850  --- DEFINITION START ---  -- ***************VERSION CONTROL***************    --2022-02-09; Matej Miter - created for Jira:    --SURVG-639 - Changed instructed amount field to be taken from fxo notional amount or notional amount far instead of gbp values; This should be align accross all reports    -- *********************************************    CREATE PROCEDURE [dbo].[MASTER_PM_ORDER_TABLE_VG_611_ORDER_AGGREGATION_FX]        AS        BEGIN        SET NOCOUNT ON;            DECLARE @START_TIME as datetime    SET @START_TIME = GETDATE()            IF OBJECT_ID('tempdb..#distinct_ids_al', 'U') IS NOT NULL DROP TABLE #distinct_ids_al    SELECT DISTINCT oc.PM_ORD AS ORDER_ID,        pr.MULTI_FUND_ID    INTO #distinct_ids_al    FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr    LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = pr.ORD_NUM    WHERE pr.DEALING_DESK = 'FX';            IF OBJECT_ID('tempdb..#distinct_ids_fx', 'U') IS NOT NULL DROP TABLE #distinct_ids_fx    SELECT DISTINCT vg.ORDER_ID,        fxt.TRADE_ID AS MULTI_FUND_ID     INTO #distinct_ids_fx    FROM VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_FX_TABLE vg    LEFT JOIN Vista_Reporting.dbo.FX_ORDERS fxo ON fxo.FXM_ORDER_ID = vg.ORDER_ID    LEFT JOIN Vista_Reporting.dbo.FX_TRADES fxt ON fxt.ORDER_ID = fxo.FXM_ORDER_ID;            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_FX_TABLE', 'U') IS NOT NULL    DELETE FROM #distinct_ids_fx where NOT EXISTS (SELECT DISTINCT od.FXM_ORDER_ID                   FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_FX od                   WHERE od.FXM_ORDER_ID = #distinct_ids_fx.ORDER_ID);            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_FX_TABLE', 'U') IS NOT NULL     DELETE FROM #distinct_ids_al where NOT EXISTS (SELECT DISTINCT od.PM_ORD                   FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                   WHERE od.PM_ORD = #distinct_ids_al.ORDER_ID);            IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE  #distinct_ids    SELECT *     INTO #distinct_ids    FROM #distinct_ids_al        UNION ALL        SELECT *     FROM #distinct_ids_fx;            --1) Concatenating FXM Product    IF OBJECT_ID('tempdb..#FXM_prod', 'U') IS NOT NULL DROP TABLE  #FXM_prod    SELECT DISTINCT ex.ORDER_ID,         CASE WHEN FXO.FR_LEG_PRODUCT IS NULL              THEN CONVERT(VARCHAR(50),FXO.NR_LEG_PRODUCT)            WHEN FXO.FR_LEG_PRODUCT IS NOT NULL AND FXO.FR_LEG_PRODUCT <> ''             THEN CONCAT(FXO.NR_LEG_PRODUCT, ' | ', FXO.FR_LEG_PRODUCT)            END AS FXM_PRODUCT    INTO #FXM_prod    FROM VISTA_STAGING.DBO.VG_611_ORDER_AGGREGATION_FX_TABLE EX    LEFT JOIN VISTA_REPORTING.DBO.FX_ORDERS FXO ON FXO.FXM_ORDER_ID = EX.ORDER_ID    WHERE EXISTS (SELECT di.ORDER_ID FROM #distinct_ids di WHERE di.ORDER_ID = ex.ORDER_ID);            --Purpose: this is an order level report so want to see one row per order. Need to concatenate the orders that    --contained multiple trades.    --Concatonated fields for CM    IF OBJECT_ID('tempdb..#concat_ord', 'U') IS NOT NULL DROP TABLE #concat_ord    SELECT DISTINCT ex.ORDER_ID,        CONFIRMED_DATETIME = STUFF((            SELECT DISTINCT ' | ' +  CAST(FORMAT(EXECUTED_DATE_TIME, 'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50))           FROM VISTA_REPORTING.dbo.FX_TRADES ct           WHERE ct.ORDER_ID = ex.ORDER_ID and ex.DATA_SOURCE = 'FX'           FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),        PRODUCT = STUFF((            SELECT DISTINCT ' | ' +  CAST(INSTRUCTION_TYPE AS VARCHAR(50))           FROM VISTA_REPORTING.dbo.FX_ORDERS ct           WHERE ct.FXM_ORDER_ID = ex.ORDER_ID and ex.DATA_SOURCE = 'FX'           FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),        TRADE_VENUE = STUFF((            SELECT DISTINCT ' | ' +  CAST(TRADE_VENUE AS VARCHAR(50))           FROM VISTA_REPORTING.dbo.FX_ORDERS ct           WHERE ct.[FXM_ORDER_ID] = ex.ORDER_ID and ex.DATA_SOURCE = 'FX'           FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),        --MARKET_ARRIVAL_DATE_TIME =  STUFF((         --   SELECT  ' | ' + CONVERT(VARCHAR(50),FORMAT(MARKET_ARRIVAL_DATE_TIME,'dd/MM/yyyy HH:mm:ss'))        --   FROM VISTA_REPORTING.dbo.FX_TRADES fxo        --   WHERE fxo.ORDER_ID = ex.ORDER_ID and ex.DATA_SOURCE = 'FX' ORDER BY TRADE_ID        --   FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),        EXECUTED_DATE_TIME =  STUFF((            SELECT  ' | ' + CONVERT(VARCHAR(50),FORMAT(EXECUTED_DATE_TIME,'dd/MM/yyyy HH:mm:ss'))           FROM VISTA_REPORTING.dbo.FX_TRADES fxo           WHERE fxo.ORDER_ID = ex.ORDER_ID and ex.DATA_SOURCE = 'FX' ORDER BY TRADE_ID           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),        EXECUTED_BANK =  STUFF((            SELECT  ' | ' + CONVERT(VARCHAR(50),EXECUTED_BANK)           FROM VISTA_REPORTING.dbo.FX_TRADES fxo           WHERE fxo.ORDER_ID = ex.ORDER_ID and ex.DATA_SOURCE = 'FX' ORDER BY TRADE_ID           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),        EXECUTED_AMOUNT =  STUFF((            SELECT  ' | ' + CONVERT(VARCHAR(50), CASE WHEN EXECUTED_AMOUNT_FAR IS NOT NULL            THEN (CAST(FORMAT(CONVERT(DECIMAL(38,2),[EXECUTED_AMOUNT]),'#,0.00') as varchar(50)) + ' | '            + CAST(FORMAT(CONVERT(DECIMAL(38,2),[EXECUTED_AMOUNT_FAR]),'#,0.00') as varchar(50)))            ELSE CAST(FORMAT(CONVERT(DECIMAL(38,2),[EXECUTED_AMOUNT]),'#,0.00') as varchar(50))   END )           FROM VISTA_REPORTING.dbo.FX_TRADES fxo           WHERE fxo.ORDER_ID = ex.ORDER_ID and ex.DATA_SOURCE = 'FX' ORDER BY TRADE_ID           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),        TRADE_DATE =  STUFF((            SELECT  ' | ' + CONVERT(VARCHAR(50),FORMAT(TRADE_DATE,'dd/MM/yyyy'))           FROM VISTA_REPORTING.dbo.FX_TRADES fxo           WHERE fxo.ORDER_ID = ex.ORDER_ID and ex.DATA_SOURCE = 'FX' ORDER BY TRADE_ID           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),        ACCEPTED_DATE_TIME = STUFF((            SELECT  ' | ' + CONVERT(VARCHAR(50),FORMAT(ACCEPTED_DATE_TIME,'dd/MM/yyyy HH:mm:ss'))           FROM VISTA_REPORTING.dbo.FX_TRADES fxo           WHERE fxo.ORDER_ID = ex.ORDER_ID and ex.DATA_SOURCE = 'FX' ORDER BY TRADE_ID           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),        UPLOADED_DATE_TIME = STUFF((            SELECT  ' | ' + CONVERT(VARCHAR(50),FORMAT(UPLOADED_DATE_TIME,'dd/MM/yyyy HH:mm:ss'))           FROM VISTA_REPORTING.dbo.FX_TRADES fxo           WHERE fxo.ORDER_ID = ex.ORDER_ID and ex.DATA_SOURCE = 'FX' ORDER BY TRADE_ID           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),        SWAP_TYPE = STUFF((            SELECT  ' | ' + CONVERT(VARCHAR(50),SWAP_TYPE)           FROM VISTA_REPORTING.dbo.FX_TRADES_CONCAT fxo           WHERE fxo.ORDER_ID = ex.ORDER_ID and ex.DATA_SOURCE = 'FX' ORDER BY TRADE_ID           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),        SPOT_RATE = STUFF((            SELECT  ' | ' + CONVERT(VARCHAR(50),ROUND(SPOT_RATE, 8))           FROM VISTA_REPORTING.dbo.FX_TRADES fxo           WHERE fxo.ORDER_ID = ex.ORDER_ID and ex.DATA_SOURCE = 'FX' ORDER BY TRADE_ID           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),        FORWARD_POINTS = STUFF((            SELECT  ' | ' + CONVERT(VARCHAR(50),ROUND(FORWARD_POINTS, 8))           FROM VISTA_REPORTING.dbo.FX_TRADES fxo           WHERE fxo.ORDER_ID = ex.ORDER_ID and ex.DATA_SOURCE = 'FX' ORDER BY TRADE_ID           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),        MAPPED_BANK_COUNT = STUFF((            SELECT  ' | ' + CONVERT(VARCHAR(50),MAPPED_BANK_COUNT)           FROM VISTA_REPORTING.dbo.FX_TRADES fxo           WHERE fxo.ORDER_ID = ex.ORDER_ID and ex.DATA_SOURCE = 'FX' ORDER BY TRADE_ID           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),        LOSING_BANK_COUNT = STUFF((            SELECT  ' | ' + CONVERT(VARCHAR(50),LOSING_BANK_COUNT)           FROM VISTA_REPORTING.dbo.FX_TRADES fxo           WHERE fxo.ORDER_ID = ex.ORDER_ID and ex.DATA_SOURCE = 'FX' ORDER BY TRADE_ID          FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),        EXC_SESSION_TYPE = STUFF((            SELECT  ' | ' + CONVERT(VARCHAR(50),EXC_SESSION_TYPE)           FROM VISTA_REPORTING.dbo.FX_TRADES fxo           WHERE fxo.ORDER_ID = ex.ORDER_ID and ex.DATA_SOURCE = 'FX' ORDER BY TRADE_ID           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),        ORDER_STRATEGY = STUFF((            SELECT  ' | ' + CONVERT(VARCHAR(50),ORDER_STRATEGY)           FROM VISTA_REPORTING.dbo.FX_TRADES_CONCAT fxo           WHERE fxo.ORDER_ID = ex.ORDER_ID and ex.DATA_SOURCE = 'FX' ORDER BY TRADE_ID           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),        FIXING_DATE = STUFF((            SELECT  ' | ' + CONVERT(VARCHAR(50),FORMAT(FIXING_DATE,'dd/MM/yyyy HH:mm:ss'))           FROM VISTA_REPORTING.dbo.FX_TRADES fxo           WHERE fxo.ORDER_ID = ex.ORDER_ID and ex.DATA_SOURCE = 'FX' ORDER BY TRADE_ID           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),        NET_EXPOSURE_TRADE = STUFF((            SELECT  ' | ' + FORMAT(NET_EXPOSURE_TRADE, '#,0.00')           FROM VISTA_REPORTING.dbo.FX_TRADES fxo           WHERE fxo.ORDER_ID = ex.ORDER_ID and ex.DATA_SOURCE = 'FX' ORDER BY TRADE_ID           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),        TRADE_ID = STUFF((            SELECT  ' | ' + CONVERT(VARCHAR(50),TRADE_ID)           FROM VISTA_REPORTING.dbo.FX_TRADES fxo           WHERE fxo.ORDER_ID = ex.ORDER_ID and ex.DATA_SOURCE = 'FX' ORDER BY TRADE_ID           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),        TRADE_STATUS = STUFF((            SELECT  ' | ' + CONVERT(VARCHAR(50),TRADE_STATUS)           FROM VISTA_REPORTING.dbo.FX_TRADES fxo           WHERE fxo.ORDER_ID = ex.ORDER_ID and ex.DATA_SOURCE = 'FX' ORDER BY TRADE_ID           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),        --SURVG-639        NOTIONAL_AMOUNT = STUFF((            SELECT  ' | ' + CONVERT(VARCHAR(50),FORMAT(NOTIONAL_AMOUNT, '#,0.00'))           FROM VISTA_REPORTING.dbo.FX_ORDERS fxo           WHERE fxo.FXM_ORDER_ID = ex.ORDER_ID and ex.DATA_SOURCE = 'FX' ORDER BY FXM_ORDER_ID           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),        --End of SURVG-639        ORDER_RECEIVED_DATE_TIME = STUFF((            SELECT ' | ' + CONVERT(VARCHAR,format(INSTRUCTION_RECEIVED_DATE_TIME,'dd/MM/yyyy HH:mm:ss'), 20)           FROM VISTA_REPORTING.dbo.FX_ORDERS fxo           WHERE fxo.FXM_ORDER_ID = ex.ORDER_ID           ORDER BY ORDER_ID           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),        CLIENT_FUND = STUFF((            SELECT  ' | ' + CONVERT(VARCHAR(50),CLIENT_FUND)           FROM VISTA_REPORTING.dbo.FX_ORDERS fxo           WHERE fxo.FXM_ORDER_ID = ex.ORDER_ID and ex.DATA_SOURCE = 'FX' ORDER BY FXM_ORDER_ID           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),        BUSINESS_GROUP = STUFF((            SELECT  ' | ' + CONVERT(VARCHAR(50),BUSINESS_GROUP)           FROM VISTA_REPORTING.dbo.FX_ORDERS fxo           WHERE fxo.FXM_ORDER_ID = ex.ORDER_ID and ex.DATA_SOURCE = 'FX' ORDER BY FXM_ORDER_ID           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),        FXM_PRODUCT = STUFF((            SELECT DISTINCT ' | ' +  CAST(FXM_PRODUCT AS VARCHAR(50))           FROM #FXM_prod FX           WHERE FX.ORDER_ID = ex.ORDER_ID and ex.DATA_SOURCE = 'FX'           FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),        FUND_MANAGER_EMAIL_ADDRESS = STUFF((            SELECT  ' | ' + CONVERT(VARCHAR(50),FUND_MANAGER_EMAIL_ADDRESS)           FROM VISTA_REPORTING.dbo.FX_ORDERS fxo           WHERE fxo.FXM_ORDER_ID = ex.ORDER_ID and ex.DATA_SOURCE = 'FX' ORDER BY FXM_ORDER_ID           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),        'FX' AS SOURCE    INTO #concat_ord    FROM VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_FX_TABLE ex    WHERE ex.DATA_SOURCE = 'FX' AND EXISTS (SELECT di.ORDER_ID FROM #distinct_ids di WHERE di.ORDER_ID = ex.ORDER_ID)            UNION        --Concatonated fields for AL     SELECT DISTINCT ex.[ORDER_ID],        EXECUTION_TIME = STUFF((            SELECT DISTINCT ' | ' +  CAST(format(EXECUTION_TIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50))           FROM VISTA_REPORTING.dbo.TRADES t           WHERE t.ORD_NUM = ex.ORDER_ID and ex.DATA_SOURCE = 'AL'           FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),        PRODUCT = STUFF((            SELECT DISTINCT ' | ' +  CAST(format(EXECUTION_TIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50))           FROM VISTA_REPORTING.dbo.TRADES t           WHERE t.ORD_NUM = ex.ORDER_ID and ex.DATA_SOURCE = 'AL'           FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, ''),        NULL,        NULL,        --NULL,        NULL,        NULL,        NULL,        NULL,        NULL,        NULL,        NULL,        NULL,        NULL,        NULL,        NULL,        NULL,        NULL,        NULL,        MULTI_FUND_ID = STUFF((            SELECT  ' | ' + CONVERT(VARCHAR(50),MULTI_FUND_ID)           FROM VISTA_REPORTING.dbo.TRADES fxo           WHERE fxo.ORD_NUM = ex.ORDER_ID and ex.DATA_SOURCE = 'FX' ORDER BY MULTI_FUND_ID           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),        TRADE_STATUS = STUFF((            SELECT  ' | ' + CONVERT(VARCHAR(50),MULTI_FUND_ID)           FROM VISTA_REPORTING.dbo.TRADES fxo           WHERE fxo.ORD_NUM = ex.ORDER_ID and ex.DATA_SOURCE = 'FX' ORDER BY MULTI_FUND_ID           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),        NULL,        ORDER_RECEIVED_DATE_TIME = STUFF((            SELECT ' | ' + format(AUTH_TIME,'dd/MM/yyyy HH:mm:ss')           FROM VISTA_REPORTING.dbo.PM_ORDERS pm           WHERE pm.ORD_NUM = ex.order_id           ORDER BY ORDER_ID           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,''),        NULL,        NULL,        NULL,        NULL,        'AL' AS SOURCE    FROM VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_FX_TABLE ex    WHERE ex.DATA_SOURCE = 'AL' AND EXISTS (SELECT di.ORDER_ID FROM #distinct_ids di WHERE di.ORDER_ID = ex.ORDER_ID);            --Purpose: joining in FX_LOSING_BANKS to get three columns used in the master table.     --Question: should I put this in the master table as its not a massive/complicated join?    --Losing bank trades    IF OBJECT_ID('tempdb..#losing_bank_trades', 'U') IS NOT NULL DROP TABLE #losing_bank_trades    SELECT DISTINCT ex.ORDER_ID,        CONVERT(VARCHAR(20), FXB.LOSING_BANK) AS LOSING_BANK,         CONVERT(VARCHAR(20), FXB.ALL_IN_RATE) AS ALL_IN_RATE,         CONVERT(VARCHAR(20), FXB.SWAP_POINTS) AS SWAP_POINTS    INTO #losing_bank_trades    FROM VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_FX_TABLE ex    LEFT JOIN VISTA_REPORTING.dbo.FX_TRADES fxt on fxt.ORDER_ID = ex.ORDER_ID    LEFT JOIN VISTA_REPORTING.dbo.FX_LOSING_BANKS FXB ON fxb.TRADE_ID = fxt.TRADE_ID     WHERE FXB.TRADE_ID = FXT.TRADE_ID       AND FXB.LOSING_BANK != FXT.EXECUTED_BANK       AND ex.DATA_SOURCE = 'FX'      AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.ORDER_ID = ex.ORDER_ID);                --Purpose: used below in the concatenations of a list of banks    --Question: can we not do this in the table below? Assuming the answer is no due to the inner join     --Mapped bank best ex    IF OBJECT_ID('tempdb..#mapped_bank_best_ex', 'U') IS NOT NULL DROP TABLE #mapped_bank_best_ex;    SELECT DISTINCT ex.ORDER_ID,        CONVERT(VARCHAR(20),FXB.BANK_NAME) AS BANK_NAME    INTO #mapped_bank_best_ex    FROM VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_FX_TABLE ex    LEFT JOIN VISTA_REPORTING.dbo.FX_TRADES fxt on fxt.ORDER_ID = ex.ORDER_ID    INNER JOIN VISTA_REPORTING.dbo.FX_MAPPED_BANKS fxb ON fxb.TRADE_ID = fxt.TRADE_ID    WHERE ex.DATA_SOURCE = 'FX'        AND EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.ORDER_ID = ex.ORDER_ID);             --Losing bank temp    IF OBJECT_ID('tempdb..#losingbanktemp', 'U') IS NOT NULL DROP TABLE #losingbanktemp;     SELECT DISTINCT fxt.ORDER_ID,        STUFF((          SELECT ', ' + LOSING_BANK         FROM #losing_bank_trades fxb         WHERE fxb.ORDER_ID = fxt.ORDER_ID          ORDER BY LOSING_BANK         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS LOSING_BANK,        STUFF((          SELECT ', ' + ALL_IN_RATE          FROM #losing_bank_trades fxb         WHERE fxb.ORDER_ID = fxt.ORDER_ID          ORDER BY ALL_IN_RATE         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS ALL_IN_RATE,        STUFF((          SELECT ', ' + SWAP_POINTS         FROM #losing_bank_trades fxb         WHERE fxb.ORDER_ID = fxt.ORDER_ID          ORDER BY SWAP_POINTS         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS SWAP_POINTS,         STUFF((          SELECT ', ' + FXB.BANK_NAME         FROM #mapped_bank_best_ex fxb         WHERE fxb.ORDER_ID = fxt.ORDER_ID          ORDER BY BANK_NAME         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') AS MAPPED_BANKS    INTO #losingbanktemp    FROM VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_FX_TABLE ex    LEFT JOIN VISTA_REPORTING.dbo.FX_TRADES fxt ON ex.ORDER_ID = fxt.ORDER_ID    WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.ORDER_ID = ex.ORDER_ID);            --Temp final master table    IF OBJECT_ID('tempdb..#temp_final_master', 'U') IS NOT NULL DROP TABLE #temp_final_master;    SELECT COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) AS DEALER_NAME      ,CONC_ORD.CLIENT_FUND      ,conc_ord.EXECUTED_BANK      ,conc_ord.FUND_MANAGER_EMAIL_ADDRESS      ,FXO.FM_COMMENTS      ,FXO.MARKER      ,FXO.TRADE_PURPOSE      ,CAST(FORMAT(FXO.AUTH_TIME,'dd/MM/yyyy HH:mm:ss') AS VARCHAR(50)) AS AUTHORISED_DATE_TIME      ,conc_ord.ORDER_RECEIVED_DATE_TIME      ,conc_ord.ACCEPTED_DATE_TIME      ,CAST(FXTC.MARKET_ARRIVAL_DATE_TIME AS VARCHAR(50)) AS MARKET_ARRIVAL_DATE_TIME      ,conc_ord.EXECUTED_DATE_TIME      ,conc_ord.UPLOADED_DATE_TIME      ,conc_ord.PRODUCT      ,conc_ord.SWAP_TYPE      ,conc_ord.FXM_PRODUCT      ,CASE WHEN NULLIF(FXO.ACTION2,'') IS NULL          THEN CONVERT(VARCHAR(50),FXO.ACTION1)         WHEN NULLIF(FXO.ACTION2,'') IS NOT NULL         THEN (FXO.ACTION1 + ISNULL(' | ' + NULLIF(FXO.ACTION2,''),''))         END AS ACTION      ,CASE WHEN FXO.NOTIONAL_CCY_FAR IS NULL           THEN CONVERT(VARCHAR(50),FXO.NOTIONAL_CCY)         WHEN FXO.NOTIONAL_CCY_FAR IS NOT NULL          THEN CONCAT(FXO.NOTIONAL_CCY, ' | ', FXO.NOTIONAL_CCY_FAR)         END AS INSTRUCTED_CURRENCY      --SURVG-639      ,CONC_ORD.NOTIONAL_AMOUNT as INSTRUCTED_AMOUNT      --End of SURVG-639      ,CASE WHEN FXO.BUY_CCY_LEG2 IS NULL            THEN CONVERT(VARCHAR(50),FXO.BUY_CCY)         WHEN FXO.BUY_CCY_LEG2 IS NOT NULL AND FXO.BUY_CCY_LEG2 <> ''          THEN CONCAT(FXO.BUY_CCY, ' | ', FXO.BUY_CCY_LEG2)       END AS BUY_CURRENCY      ,CASE WHEN FXO.SELL_CCY_LEG2 IS NULL            THEN CONVERT(VARCHAR(50),FXO.SELL_CCY)         WHEN FXO.SELL_CCY_LEG2 IS NOT NULL AND FXO.SELL_CCY_LEG2 <> ''          THEN CONCAT(FXO.SELL_CCY, ' | ', FXO.SELL_CCY_LEG2)       END AS SELL_CURRENCY      ,conc_ord.[TRADE_DATE]      ,CASE WHEN FXO.VALUE_DATE_FAR IS NULL OR FXO.VALUE_DATE_FAR = '1900-01-01 00:00:00.000'           THEN CONVERT(VARCHAR(50),FORMAT(FXO.VALUE_DATE_NEAR,'dd/MM/yyyy'))         WHEN FXO.VALUE_DATE_FAR IS NOT NULL OR FXO.VALUE_DATE_FAR <> '1900-01-01 00:00:00.000'          THEN CONCAT(FORMAT(FXO.VALUE_DATE_NEAR,'dd/MM/yyyy'), ' | ', FORMAT(FXO.VALUE_DATE_FAR,'dd/MM/yyyy'))         END AS VALUE_DATE      ,conc_ord.EXECUTED_AMOUNT      ,lbt.ALL_IN_RATE      ,conc_ord.SPOT_RATE      ,conc_ord.FORWARD_POINTS      ,conc_ord.MAPPED_BANK_COUNT AS STATIC_BANK_COUNT --logic taken from spot rate reference      ,LBT.MAPPED_BANKS AS STATIC_BANK_LIST --logic taken from spot rate reference      ,conc_ord.LOSING_BANK_COUNT      ,lbt.LOSING_BANK AS LOSING_BANK_LIST      ,FXO.BASE_FUND      ,conc_ord.BUSINESS_GROUP      ,FXO.INSTRUCTED_BY      ,FXO.[CREATED_FROM] as ORDER_SOURCE      ,conc_ord.TRADE_VENUE AS PLACEMENT_VENUE      ,conc_ord.EXC_SESSION_TYPE AS SESSION_TYPE      ,conc_ord.ORDER_STRATEGY AS NETTING_STRATEGY_USED --logic taken from spot reference rate       ,conc_ord.FIXING_DATE      ,lbt.SWAP_POINTS      ,conc_ord.NET_EXPOSURE_TRADE AS NET_EXPOSURE --logic taken from spot reference rate      ,EX.ORDER_ID AS FX_ORDER_ID  --confirm correct      ,conc_ord.TRADE_ID      ,CASE WHEN FXO.FXM_ORDER_ID IS NULL THEN FXO.[FXM_ORDER_ID] --logic taken from EOD      ELSE FXO.FXM_ORDER_ID      END AS PM_ORDER_ID      ,FXO.ALADDIN_COMMON_ID      ,conc_ord.TRADE_STATUS      ,EX.VG_611_CREATETIME      ,EX.DATA_SOURCE      ,CAST(EX.VG_611 AS INT) AS EXCEPTION    INTO #temp_final_master     FROM VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_FX_TABLE ex    LEFT JOIN VISTA_REPORTING.dbo.FX_ORDERS FXO ON fxo.FXM_ORDER_ID = ex.ORDER_ID        LEFT JOIN Vista_REPORTING.dbo.FX_TRADES FXT ON FXT.ORDER_ID = ex.ORDER_ID    LEFT JOIN #concat_ord conc_ord ON conc_ord.ORDER_ID = ex.ORDER_ID AND conc_ord.SOURCE = 'FX'    LEFT JOIN VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd ON tdd.[MG_USER_ID] = fxt.[DEALT_BY]      AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE)      AND CAST(tdd.[DATE_TO] AS DATE)    LEFT JOIN VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2 ON tdd2.[MG_USER_ID] = fxt.ACCEPTED_BY --accepted by is in conc_ord, is this the correct one to use here?     AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE)      AND CAST(tdd2.[DATE_TO] AS DATE)     LEFT JOIN VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd ON dd.[REPORT_NAME] = 'Order Aggregation'      AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE)      AND CAST(dd.[DATE_TO] AS DATE)    LEFT JOIN Vista_REPORTING.dbo.FX_TRADES_CONCAT FXTC ON FXT.ORDER_ID = FXTC.ORDER_ID    LEFT JOIN #losingbanktemp lbt ON LBT.ORDER_ID = EX.ORDER_ID     WHERE ex.DATA_SOURCE = 'FX' AND EXISTS (SELECT di.ORDER_ID FROM #distinct_ids di WHERE di.ORDER_ID = ex.ORDER_ID)         UNION         SELECT DISTINCT COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) AS DEALER_NAME        ,NULL AS CLIENT_FUND --NA in FX excel columns comparison        ,pl.BROKER AS EXECUTED_BANK        ,NULL AS FUND_MANAGER_EMAIL_ADDRESS        ,pm.COMMENTS_VALUE AS FM_COMMENTS        ,NULL AS MAKER --cannot find in the excel or other tables        ,fxt.TRD_PURPOSE AS TRADE_PURPOSE        ,FORMAT(pm.AUTH_TIME,'dd/MM/yyyy HH:mm:ss') AS AUTHORISED_DATE_TIME        ,conc_ord.ORDER_RECEIVED_DATE_TIME        ,FORMAT(pm.ACTIVE_TIME,'dd/MM/yyyy HH:mm:ss') AS ACCEPTED_DATE_TIME        ,FORMAT(fxt.EXECUTION_TIME,'dd/MM/yyyy HH:mm:ss') AS MARKET_ARRIVAL_DATE_TIME        ,FORMAT(fxt.EXECUTION_TIME,'dd/MM/yyyy HH:mm:ss') AS EXECUTED_DATE_TIME        ,NULL AS UPLOADED_DATE_TIME        ,conc_ord.PRODUCT        ,NULL AS SWAP_TYPE --cannot find in the excel or other tables        ,NULL AS FXM_PRODUCT        ,NULL AS ACTION        ,CAST(fxt.[FX_PAY_CURR] as varchar(50)) as [INSTRUCTED_CURRENCY] --logic from EOD        ,CAST(FORMAT(pl.[QUANTITY], '#,0.00') as varchar(50)) as [INSTRUCTED_AMOUNT]        ,NULL AS BUY_CURRENCY        ,NULL as SELL_CURRENCY        ,conc_ord.TRADE_DATE        ,CAST(FORMAT(pm.[SETTLE_DATE], 'dd/MM/yyyy') AS VARCHAR(50))+ ISNULL(' | ' + CAST(FORMAT(pm.[MATURITY], 'dd/MM/yyyy') AS VARCHAR(50)),'') as [VALUE_DATE]        ,CAST(FORMAT(pm.[FILL_AMT], '#,0.00') as varchar(50)) as [EXECUTED_AMOUNT]        ,CAST(COALESCE(pl.[AVG_PRICE],fxt.[FX_PRICE]) as varchar(50)) as [ALL_IN_RATE] --logic from EOD, confirm as there is a different column used in the alternative excel         ,CAST(fxt.FX_PRICE_SPOT AS VARCHAR(50)) as SPOT_RATE        ,NULL AS FORWARD_POINTS --cannot find in the excel or other tables        ,NULL AS STATIC_BANK_COUNT --NA in FX excel columns comparison        ,NULL AS STATIC_BANK_LIST --MAPPED_BANKS is NA in FX excel columns comparison        ,NULL AS LOSING_BANK_COUNT --excel referred to 'vista' as the source of this column?        ,NULL AS LOSING_BANK_LIST        ,fxt.PORTFOLIOS_PORTFOLIO_NAME AS BASE_FUND --logic from EOD        ,CASE WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PCAP_PROD' THEN 'PRUCAP'          WHEN pgt.[PORTFOLIO_GROUP_NAME] = 'PPMG_PROD' THEN 'PPMG'          WHEN (pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PROD' OR pgt.[PORTFOLIO_GROUP_NAME] = 'MG_PCAP') THEN 'MAGIM'        ELSE NULL        END AS [BUSINESS_GROUP] --logic taken from COH which is also an order level report         ,pm.PM AS INSTRUCTED_BY --found column in excel        ,NULL AS ORDER_SOURCE        ,pl.VENUE as PLACEMENT_VENUE        ,NULL AS SESSION_TYPE        ,NULL AS NETTING_STRATEGY_USED --cannot find in the excel or other tables, is null in SRR        ,NULL AS FIXING_DATE --confirm as there is a column for this in the alternative columns excel but it is not standard        ,NULL AS SWAP_POINTS        ,NULL AS NET_EXPOSURE        ,EX.ORDER_ID AS FX_ORDER_ID         ,FXT.MULTI_FUND_ID AS TRADE_ID        ,NULL AS PM_ORDER_ID        ,r.[REQUEST_ID] as [ALADDIN_COMMON_IDENTIFIER] --logic from COH        ,conc_ord.TRADE_STATUS        ,EX.VG_611_CREATETIME        ,EX.DATA_SOURCE        ,CAST(EX.VG_611 AS INT) AS EXCEPTION    FROM VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_FX_TABLE ex    LEFT JOIN VISTA_REPORTING.dbo.PM_ORDERS pm ON pm.ORD_NUM = CAST(FORMAT(pm.[FILL_AMT], '#,0.00') as varchar(50))    LEFT JOIN VISTA_REPORTING.dbo.PLACEMENTS pl ON pl.ORD_NUM = ex.ORDER_ID    LEFT JOIN VISTA_REPORTING.dbo.TRADES fxt ON fxt.ORD_NUM = ex.ORDER_ID    LEFT JOIN #concat_ord conc_ord ON conc_ord.ORDER_ID = ex.ORDER_ID AND conc_ord.SOURCE = 'AL'    LEFT JOIN (SELECT DISTINCT FUND_ID, PORTFOLIO_GROUP_NAME FROM VISTA_STAGING.dbo.PORTFOLIO_GROUPS_TREASURY) pgt on fxt.[FUND] = pgt.[FUND_ID] --remove if logic for business group is wrong    LEFT JOIN (SELECT PLACEMENT_NUM, REQUEST_ID FROM VISTA_STAGING.dbo.REQUEST_LOOKUP) r on pl.[PLACEMENT_NUM] = r.[PLACEMENT_NUM]    LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd on tdd.[INITIALS]  = fxt.[TRD_TRADER]      AND CAST(fxt.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE)      AND CAST(tdd.[DATE_TO] AS DATE)    LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd2 on tdd2.[INITIALS]  = pm.[TRADER]      AND CAST(pm.[PULL_DATE] AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE)      AND CAST(tdd2.[DATE_TO] AS DATE)    LEFT JOIN VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd on dd.[REPORT_NAME] = 'Order Aggregation'      AND CAST(COALESCE(fxt.[PULL_DATE],pm.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE)      AND CAST(dd.[DATE_TO] AS DATE)    WHERE ex.DATA_SOURCE = 'AL' AND EXISTS (SELECT di.ORDER_ID FROM #distinct_ids di WHERE di.ORDER_ID = ex.ORDER_ID);            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_FX_TABLE', 'U') IS NOT NULL    DELETE FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_FX_TABLE    WHERE FX_ORDER_ID IN (SELECT DISTINCT ORDER_ID FROM #distinct_ids);        IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_FX_TABLE', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_FX_TABLE    SELECT *    FROM #temp_final_master        ELSE        SELECT *     INTO VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_FX_TABLE    FROM #temp_final_master;        --Drop temp tables     IF OBJECT_ID('tempdb..#distinct_ids_al', 'U') IS NOT NULL DROP TABLE #distinct_ids_al;    IF OBJECT_ID('tempdb..#distinct_ids_fx', 'U') IS NOT NULL DROP TABLE #distinct_ids_fx;    IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE  #distinct_ids;    IF OBJECT_ID('tempdb..#cm_concat_ord', 'U') IS NOT NULL DROP TABLE #cm_concat_ord;    IF OBJECT_ID('tempdb..#losing_bank_trades', 'U') IS NOT NULL DROP TABLE #losing_bank_trades;    IF OBJECT_ID('tempdb..#mapped_bank_best_ex', 'U') IS NOT NULL DROP TABLE #mapped_bank_best_ex;    IF OBJECT_ID('tempdb..#losingbanktemp', 'U') IS NOT NULL DROP TABLE #losingbanktemp;     IF OBJECT_ID('tempdb..#temp_final_master', 'U') IS NOT NULL DROP TABLE #temp_final_master;            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(    'MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_FX_TABLE', --TABLE_NAME    @START_TIME, --START_TIME    GETDATE(), --END_TIME    DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS    CAST(GETDATE() as date)) --COMPLETION_DATE            END                --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_PT_AMENDMENT_FLAG_TABLE  CreateDate: 2025-06-26 18:08:57.860  ModifyDate: 2025-06-26 18:08:57.860  --- DEFINITION START ---  -- =============================================    -- Author:  <Pertsinis, Athanasios>    -- Create date: <01/10/2019>    -- Master table for post trade amendments for     -- the below desks:    -- EQ,FI,LL,DMG and CASH    -- =============================================        -- ***************VERSION CONTROL***************    --    -- *********************************************        CREATE PROCEDURE [dbo].[MASTER_PT_AMENDMENT_FLAG_TABLE]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,         AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;             IF OBJECT_ID('tempdb..#Latest_trd', 'U') IS NOT NULL DROP TABLE #Latest_trd     SELECT       MULTI_FUND_ID,      SUM(TRD_ORIG_FACE) AS TRD_ORIG_FACE,      TRD_SETTLE_DATE,      ACTIVITY_TYPE,      MAX(TRD_MODIFY_TIME) AS TRD_MODIFY_TIME,      TOUCH_COUNT     INTO #Latest_trd     FROM VISTA_REPORTING.dbo.TRADES     GROUP BY      MULTI_FUND_ID,      TRD_SETTLE_DATE,      ACTIVITY_TYPE,      TOUCH_COUNT             IF OBJECT_ID('tempdb..#max_trd_ord', 'U') IS NOT NULL DROP TABLE #max_trd_ord     SELECT       ORD_NUM,      MAX(TOUCH_COUNT) AS TRD_MAX_TOUCH     INTO #max_trd_ord     FROM Vista_Reporting.dbo.TRD_ORDERS     GROUP BY ORD_NUM             IF OBJECT_ID('tempdb..#max_trd_comm', 'U') IS NOT NULL DROP TABLE #max_trd_comm     SELECT       tr.ORD_NUM,      tr.COMMENTS_VALUE     INTO #max_trd_comm     FROM Vista_Reporting.dbo.TRD_ORDERS tr     INNER JOIN #max_trd_ord mto ON mto.ORD_NUM = tr.ORD_NUM and mto.TRD_MAX_TOUCH = tr.TOUCH_COUNT             IF OBJECT_ID('tempdb..#Funds_concat', 'U') IS NOT NULL DROP TABLE #Funds_concat     SELECT      MULTI_FUND_ID,      STUFF((       SELECT DISTINCT ', ' + LTRIM(RTRIM(PORTFOLIOS_PORTFOLIO_NAME))       FROM VISTA_REPORTING.dbo.TRADES       WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS Funds_concat     INTO #Funds_concat     FROM VISTA_REPORTING.dbo.TRADES Results     WHERE NULLIF(Results.PORTFOLIOS_PORTFOLIO_NAME,'') IS NOT NULL AND (Results.AmendmentFlag = 1 OR Results.CancellationFlag = 1)     GROUP BY MULTI_FUND_ID             IF OBJECT_ID('tempdb..#min_Dealer', 'U') IS NOT NULL DROP TABLE #min_Dealer     SELECT DISTINCT      t1.MULTI_FUND_ID,      t1.TRD_TRADER      INTO #min_Dealer     FROM VISTA_REPORTING.dbo.TRADES t1     INNER JOIN (      SELECT MULTI_FUND_ID, MIN(TOUCH_COUNT)  AS min_tch      FROM VISTA_REPORTING.dbo.TRADES       WHERE NULLIF(TOUCH_COUNT,'') IS NOT NULL      GROUP BY MULTI_FUND_ID) t2     ON t1.MULTI_FUND_ID = t2.MULTI_FUND_ID AND t1.TOUCH_COUNT = t2.min_tch         --Check if there is a change in any of the following columns for each amendment: TRD_PRICE, SUM(ABS(TRD_ORIG_FACE)), TRD_COMMISSION, TRD_SETTLE_DATE, TRD_TRADE_DATE, EXECUTION_TIME.     IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades     SELECT       MULTI_FUND_ID,       TOUCH_COUNT,      SUM(TRD_ORIG_FACE) AS SUM_TRD_ORIG_FACE,      TRD_PRICE,      SUM(TRD_COMMISSION) AS SUM_TRD_COMMISSION,      TRD_SETTLE_DATE,      TRD_TRADE_DATE,      EXECUTION_TIME     INTO #trades     FROM (      SELECT DISTINCT        MULTI_FUND_ID,        CLIENT_EXECUTION_NUM,       TOUCH_COUNT,       CONVERT(DECIMAL(18,2),ABS(TRD_ORIG_FACE)) AS TRD_ORIG_FACE,       CONVERT(DECIMAL(18,2),TRD_PRICE) AS TRD_PRICE,       CONVERT(DECIMAL(18,2),TRD_COMMISSION) AS TRD_COMMISSION,       TRD_SETTLE_DATE,       TRD_TRADE_DATE,       EXECUTION_TIME      FROM VISTA_REPORTING.dbo.TRADES     ) a     GROUP BY      MULTI_FUND_ID,       TOUCH_COUNT,      TRD_PRICE,      --TRD_COMMISSION,      TRD_SETTLE_DATE,      TRD_TRADE_DATE,      EXECUTION_TIME          IF OBJECT_ID('tempdb..#changes1', 'U') IS NOT NULL DROP TABLE #changes1     SELECT DISTINCT       amnd.MULTI_FUND_ID,      amnd.TOUCH_COUNT,      CASE WHEN ISNULL(old.TRD_PRICE,'-1')    <> ISNULL(new.TRD_PRICE,'-1')    THEN CONCAT('Price: '   ,ISNULL(CONVERT(VARCHAR(100),old.TRD_PRICE   ),'blank') , '-> ' , ISNULL(CONVERT(VARCHAR(100),new.TRD_PRICE   ), 'blank')) END AS [Price_Change],      CASE WHEN ISNULL(old.SUM_TRD_ORIG_FACE,'-1')  <> ISNULL(new.SUM_TRD_ORIG_FACE,'-1')  THEN CONCAT('Nominal: '   ,ISNULL(CONVERT(VARCHAR(100),old.SUM_TRD_ORIG_FACE ),'blank') , '-> ' , ISNULL(CONVERT(VARCHAR(100),new.SUM_TRD_ORIG_FACE ), 'blank')) END AS   [Nominal_Change],      CASE WHEN ISNULL(old.SUM_TRD_COMMISSION,'-1')  <> ISNULL(new.SUM_TRD_COMMISSION,'-1')  THEN CONCAT('Commission: '  ,ISNULL(CONVERT(VARCHAR(100),old.SUM_TRD_COMMISSION ),'blank') , '-> ' , ISNULL(CONVERT(VARCHAR(100),new.SUM_TRD_COMMISSION), 'blank')) END AS [Commission_Change],      CASE WHEN ISNULL(old.TRD_SETTLE_DATE,'1900-01-01') <> ISNULL(new.TRD_SETTLE_DATE,'1900-01-01') THEN CONCAT('Settle Date: '  ,ISNULL(CONVERT(VARCHAR(100),old.TRD_SETTLE_DATE ),'blank') , '-> ' , ISNULL(CONVERT(VARCHAR(100),new.TRD_SETTLE_DATE ), 'blank')  ) END AS [Settle_Date_Change],      CASE WHEN ISNULL(old.TRD_TRADE_DATE,'1900-01-01') <> ISNULL(new.TRD_TRADE_DATE,'1900-01-01') THEN CONCAT('Trade Date: '  ,ISNULL(CONVERT(VARCHAR(100),old.TRD_TRADE_DATE  ),'blank') , '-> ' , ISNULL(CONVERT(VARCHAR(100),new.TRD_TRADE_DATE ), 'blank')) END AS [Trade_Date_Change],      CASE WHEN ISNULL(old.EXECUTION_TIME,'1900-01-01') <> ISNULL(new.EXECUTION_TIME,'')   THEN CONCAT('Execution time: ' ,ISNULL(CONVERT(VARCHAR(100),old.EXECUTION_TIME  ),'blank') , '-> ' , ISNULL(CONVERT(VARCHAR(100),new.EXECUTION_TIME ), 'blank')) END AS   [Execution_Time_Change]      INTO #changes1      FROM       (SELECT MULTI_FUND_ID, TOUCH_COUNT FROM VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_EQ_TABLE --Need the EQ table       UNION       SELECT MULTI_FUND_ID, TOUCH_COUNT FROM VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_FI_TABLE --Need the FI table       UNION       SELECT MULTI_FUND_ID, TOUCH_COUNT FROM VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_LL_TABLE --Need the LL table       UNION       SELECT MULTI_FUND_ID, TOUCH_COUNT FROM VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_DMG_TABLE --Need the DMG table       UNION       SELECT MULTI_FUND_ID, TOUCH_COUNT FROM VISTA_STAGING.dbo.VG_19_PT_TBILLS_CP_CD_CASH_TABLE --Need the CASH table     ) amnd      LEFT JOIN #trades new      ON amnd.MULTI_FUND_ID = new.MULTI_FUND_ID AND amnd.TOUCH_COUNT = new.TOUCH_COUNT      OUTER APPLY (SELECT TOP 1 * FROM #trades old WHERE new.MULTI_FUND_ID = old.MULTI_FUND_ID AND new.TOUCH_COUNT > old.TOUCH_COUNT ORDER BY old.TOUCH_COUNT DESC) old                  IF OBJECT_ID('tempdb..#changes2', 'U') IS NOT NULL DROP TABLE #changes2     SELECT       MULTI_FUND_ID,      TOUCH_COUNT,      CONCAT(Price_Change + ', ',Nominal_Change + ', ',Commission_Change + ', ',Settle_Date_Change + ', ',Trade_Date_Change + ', ',Execution_Time_Change + ', ') AS [Change_Record]      INTO #changes2     FROM #changes1                IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PT_AMENDMENT_FLAG_TABLE', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.MASTER_PT_AMENDMENT_FLAG_TABLE     SELECT DISTINCT      --t.CLIENT_EXECUTION_NUM,      --TP: Coded out the below as will not be used for ops users as they will not be on dealer and desk      --t.TRD_MODIFIED_BY,      --LTRIM(RTRIM(COALESCE(dd.INITIALS,t.TRD_MODIFIED_BY))) AS [Amending_Dealer],      --TP 01102019: Cancellations are not part of this report so this is not required    --  CASE     --   WHEN [Amendment_Cancellation] = 'Cancellation'     --    THEN  'Cancellation - NA'     --   ELSE       t.ORD_NUM,    --  t.PLACEMENT_NUM,      t.MULTI_FUND_ID,      a.TOUCH_COUNT,      CONVERT(DECIMAL(21,2),ltrd.TRD_ORIG_FACE) as BOOKED_AMT,      p.INST_TYPE,      tr.CUSIP,      t.ISIN as [ISIN],      t.EXECUTION_TIME,      ltrd.TRD_SETTLE_DATE AS SETTLEMENT_DATE,      convert(decimal(18,4),t.TRD_PRICE) AS TRD_PRICE,      t.TRD_CURRENCY,      t.TRAN_TYPE,      md.TRD_TRADER AS TRADER,      tr.TRADER_FULL_NAME,      t.TRD_MODIFIED_BY as [AMENDING_DEALER],      ltrd.TRD_MODIFY_TIME,       CASE          WHEN LEFT(REVERSE(chng.Change_Record),2) = ' ,'           THEN  LEFT(chng.Change_Record,LEN(chng.Change_Record) - 1)         ELSE chng.Change_Record        END as [CHANGE_RECORD],    --  END as [Change Record],      t.TRD_COUNTERPARTY,      t.COMMENTS,      t.INDICATIVE_COMMENTS,      --t.TRD_AUTH_TIME,      tr.SEC_DESC1,      --tr.AUTH_TIME,      --tr.ACTIVE_TIME,      p.DEALING_DESK,      p.SM_SEC_GROUP,      p.SM_SEC_TYPE,      --pl.ROUTE_DATETIME AS RELEASE_DATETIME,      --t.TRD_ENTRY_TIME,      --p.PRIMARY_MARKET,      --p.[Parent_trade_ID],      --t.EXECUTION_TYPE_DECODE,      t.TRD_PURPOSE,      t.TRD_AMEND_TYPE,      --t.[Amendment_Cancellation],      --CONVERT(DECIMAL(15,2),ltrd.TRD_ORIG_FACE) AS TRD_ORIG_FACE,      --fund_conc.Funds_concat as [Fund],      --t.FUND,    --TP: Coded out the below for consistency as one team will oversee all post trade exceptions across desks    --  case when p.dealing_desk = 'Leveraged Finance'    --   then convert(varchar,convert(decimal(18,4),t.TRD_PRICE))    --   else convert(varchar,convert(decimal(18,2),t.TRD_PRICE)) end as TRD_PRICE,      pl.VENUE as [PLATFORM],      CASE       WHEN p.DEALING_DESK='Fixed Income'        THEN        CASE         WHEN p.DEBT_DERIV = 'DEBT'          THEN          CASE           WHEN t.TRD_COUPON IS NOT NULL AND i2.TICKER IS NOT NULL AND i2.MATURITY IS NOT NULL            THEN CONCAT(ISNULL(i2.TICKER,''),' ', CAST(ISNULL(t.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))           ELSE  CONCAT(ISNULL(tr.SEC_DESC1,''),' ', CAST(ISNULL(t.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))          END          ELSE p.DESC_INSTMT        END       WHEN p.DEALING_DESK='Equity'       THEN tr.SEC_DESC1       WHEN p.DEALING_DESK in ('Leveraged Finance','DMG','CASH')       THEN p.DESC_INSTMT      END AS [DESCRIPTION],       t.TRDCOMM_COMMENTS as [DEALER COMMENT],      mtc.COMMENTS_VALUE as [GENERAL COMMENT],      --null as [Num Parent Trades],    --  CASE    --   WHEN p.DEALING_DESK = 'Fixed Income'    --   THEN     --    CASE    --     WHEN p.TWEB_CLOSE_DEALING = 1 THEN 'TWEB Close'    --     WHEN p.[1615_DEALING] = 1 THEN '1615 Dealing'    --     WHEN ltrd.ACTIVITY_TYPE = 'MG.FI 1. Proces' THEN 'VPT'    --    END    --   WHEN p.DEALING_DESK='Equity'    --   THEN NULL    --   WHEN p.DEALING_DESK='Leveraged Finance'    --   THEN NULL    --  END AS [Method],    --  t.TRD_ENTRY_TIME AS [Entry Date],    --  coaLesce(t.ACTIVITY_TYPE_DECODE, t.activity_type) as [Activity],    --  null as [Primary],      CONCAT(YEAR(tr.AUTH_TIME),'-',left(datename(m,tr.AUTH_TIME),3)) AS MONTH_YEAR,      concat(p.SM_SEC_GROUP,'/',p.SM_SEC_TYPE) as [ASSET_TYPE/SUBTYPE],      a.AMENDMENT_FLAG_CREATETIME AS CREATE_DATE    --  BROKER_QUOTES     INTO VISTA_REPORTING.dbo.MASTER_PT_AMENDMENT_FLAG_TABLE     FROM       (SELECT MULTI_FUND_ID, TOUCH_COUNT, DEALING_DESK, AMENDMENT_FLAG, AMENDMENT_FLAG_CREATETIME FROM VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_EQ_TABLE --Need the EQ table       UNION       SELECT MULTI_FUND_ID, TOUCH_COUNT, DEALING_DESK, AMENDMENT_FLAG, AMENDMENT_FLAG_CREATETIME FROM VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_FI_TABLE --Need the FI table       UNION       SELECT MULTI_FUND_ID, TOUCH_COUNT, DEALING_DESK, AMENDMENT_FLAG, AMENDMENT_FLAG_CREATETIME FROM VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_LL_TABLE --Need the LL table       UNION       SELECT MULTI_FUND_ID, TOUCH_COUNT, DEALING_DESK, AMENDMENT_FLAG, AMENDMENT_FLAG_CREATETIME FROM VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_DMG_TABLE --Need the DMG table       UNION       SELECT MULTI_FUND_ID, TOUCH_COUNT, DEALING_DESK, AMENDMENT_FLAG, AMENDMENT_FLAG_CREATETIME FROM VISTA_STAGING.dbo.VG_19_PT_TBILLS_CP_CD_CASH_TABLE --Need the CASH table      ) a     LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON a.MULTI_FUND_ID = t.MULTI_FUND_ID AND a.TOUCH_COUNT = t.TOUCH_COUNT     LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS tr ON tr.ORD_NUM=t.ORD_NUM     LEFT JOIN #max_trd_comm mtc ON mtc.ORD_NUM = tr.ORD_NUM     --LEFT JOIN VISTA_REPORTING.dbo.INSTRUMENTS i ON i.CUSIP=tr.CUSIP     LEFT JOIN VISTA_REPORTING.dbo.PLACEMENTS pl ON pl.PLACEMENT_NUM=t.PLACEMENT_NUM     --LEFT JOIN VISTA_REPORTING.dbo.DEALER_AND_DESK dd ON dd.INITIALS=tr.TRADER     LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p ON p.MULTI_FUND_ID = t.MULTI_FUND_ID     --LEFT JOIN VISTA_REPORTING.DBO.DEALER_AND_DESK d ON d.FULL_NAME = t.     LEFT JOIN #min_Dealer md ON t.MULTI_FUND_ID = md.MULTI_FUND_ID     LEFT JOIN #changes2 chng ON a.MULTI_FUND_ID = chng.MULTI_FUND_ID AND a.TOUCH_COUNT = chng.TOUCH_COUNT     OUTER APPLY (SELECT TOP 1 i.* FROM VISTA_REPORTING.dbo.INSTRUMENTS i                    WHERE (i.CUSIP=coalesce(t.CUSIP, tr.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(t.EXECUTION_TIME, tr.AUTH_TIME)))                    ORDER BY i.DATE DESC) as i2     LEFT JOIN #Funds_concat fund_conc ON fund_conc.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN #Latest_trd ltrd ON ltrd.MULTI_FUND_ID=t.MULTI_FUND_ID AND ltrd.TOUCH_COUNT = a.TOUCH_COUNT     LEFT JOIN VISTA_REPORTING.dbo.DEALER_AND_DESK dd ON t.TRD_MODIFIED_BY = dd.ALADDIN_USER_ID     LEFT JOIN VISTA_REPORTING.dbo.MULTI_FUND_EXCEPTION_TABLE E ON E.MULTI_FUND_ID=T.MULTI_FUND_ID         --WHERE  t.PORTFOLIOS_PORTFOLIO_NAME in ('DRC_VANG', 'DRC_EPIS', 'DRC_ECIF', 'DRC_AOFB', 'DRC_TRCI', 'DRC_ELF')        IF OBJECT_ID('tempdb..#Latest_trd', 'U') IS NOT NULL DROP TABLE #Latest_trd    IF OBJECT_ID('tempdb..#Funds_concat', 'U') IS NOT NULL DROP TABLE #Funds_concat    IF OBJECT_ID('tempdb..#min_Dealer', 'U') IS NOT NULL DROP TABLE #min_Dealer    IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades    IF OBJECT_ID('tempdb..#changes1', 'U') IS NOT NULL DROP TABLE #changes1    IF OBJECT_ID('tempdb..#changes2', 'U') IS NOT NULL DROP TABLE #changes2        CREATE NONCLUSTERED INDEX MASTER_AMENDMENT_FLAG_INDEX     ON VISTA_REPORTING.dbo.MASTER_PT_AMENDMENT_FLAG_TABLE (TRD_MODIFY_TIME, ORD_NUM, --PLACEMENT_NUM,     MULTI_FUND_ID)--, Parent_Trade_ID)        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_TRD_ORDER_TABLE  CreateDate: 2025-06-26 18:09:14.490  ModifyDate: 2025-06-26 18:09:14.490  --- DEFINITION START ---          CREATE PROCEDURE [dbo].[MASTER_TRD_ORDER_TABLE]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,         -- VERSION HISTORY    -- 2018-03-21 - WH: Removed reference to BUY_SELL_FLAG - used TRAN_TYPE instead        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()             IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids     SELECT DISTINCT       ol.ORD_NUM as TRD_ORD,      oc.PM_ORD AS ORD_NUM,      t.MULTI_FUND_ID     INTO #distinct_ids     FROM Vista_Reporting.dbo.TRD_ORDER_LEVEL_EXCEPTION_TABLE ol     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = ol.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM = oc.TRD_ORD               IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TRD_ORDER_TABLE', 'U') IS NOT NULL     DELETE FROM #distinct_ids where NOT EXISTS (SELECT DISTINCT od.TRD_ORD                  FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                  WHERE od.TRD_ORD = #distinct_ids.TRD_ORD)             -- Create daily ID tables     --IF OBJECT_ID('tempdb..#todays_trorders', 'U') IS NOT NULL DROP TABLE #todays_trorders     --SELECT DISTINCT ORD_NUM      --INTO #todays_trorders     --FROM Vista_Reporting.dbo.TRD_ORDERS WHERE CAST(PULL_DATE AS DATE) = CAST(GETDATE() AS DATE)             --IF OBJECT_ID('tempdb..#todays_trades', 'U') IS NOT NULL DROP TABLE #todays_trades     --SELECT DISTINCT t.MULTI_FUND_ID      --INTO #todays_trades     --FROM Vista_Reporting.dbo.TRADES t     --WHERE EXISTS (SELECT ORD_NUM FROM #todays_trorders WHERE ORD_NUM = t.ORD_NUM)             --IF OBJECT_ID('tempdb..#todays_pmorders', 'U') IS NOT NULL DROP TABLE #todays_pmorders     --SELECT DISTINCT pm.ORD_NUM      --INTO #todays_pmorders     --FROM Vista_Reporting.dbo.PM_ORDERS pm     --LEFT JOIN Vista_Reporting.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = pm.ORD_NUM     --WHERE EXISTS (SELECT ORD_NUM FROM #todays_trorders WHERE ORD_NUM = oc.TRD_ORD)              --1. Get a concatenated list of investment desks for each trader order     IF OBJECT_ID('tempdb..#Ord_inv_Desk', 'U') IS NOT NULL DROP TABLE #Ord_inv_Desk     SELECT DISTINCT       od.ORD_NUM,       p.ancestor      INTO #Ord_inv_Desk     FROM VISTA_STAGING.dbo.ORDERS_DETAIL od -- This will give us the details for PM Orders and TRD Orders     LEFT JOIN VISTA_STAGING.dbo.PORTFOLIO_GROUP_CLOSURE_TABLE p     ON od.PORTFOLIO_NAME = p.descendant     WHERE p.ancestor IN ('MG_ATCRED','MG_RET_FI','MG_INSTI','MG_INTER','MG_RESTCT','MG_IN_CAP','MG_LEVFIN','MG_MIB','MG_REDEBT') -- This is the list of investment desks provided in the business requirements documents        AND EXISTS (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = od.ORD_NUM)        ORDER BY od.ORD_NUM              IF OBJECT_ID('tempdb..#Inv_desk_concat', 'U') IS NOT NULL DROP TABLE #Inv_desk_concat     SELECT       ORD_NUM,             STUFF((                  SELECT DISTINCT ', ' + ANCESTOR                  FROM #Ord_inv_Desk a                  WHERE (a.ORD_NUM = Results.ORD_NUM)                  FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')             ,1,2,'') AS Inv_Desk_Concat      INTO #Inv_desk_concat     FROM #Ord_inv_Desk Results     GROUP BY ORD_NUM              --2. Get a concatenated list of PMs on the trader order      IF OBJECT_ID('tempdb..#PM', 'U') IS NOT NULL DROP TABLE #PM     SELECT DISTINCT       oc.TRD_ORD AS ORD_NUM,       LTRIM(RTRIM(pm.PM)) AS PM     INTO #PM     FROM VISTA_REPORTING.dbo.PM_ORDERS pm     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc     ON pm.ORD_NUM = oc.PM_ORD     WHERE pm.PM <> 'MERGED' -- MERGED is not a PM so we don't need to include        AND pm.PM IS NOT NULL        AND EXISTS (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = oc.TRD_ORD)              IF OBJECT_ID('tempdb..#PM_concat', 'U') IS NOT NULL DROP TABLE #PM_concat     SELECT       a.ORD_NUM,             STUFF((                  SELECT DISTINCT ', ' + PM                  FROM #pm Results                  WHERE a.ORD_NUM = Results.ORD_NUM                  FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')             ,1,2,'') AS PM_concat      INTO #PM_concat     FROM #pm a     WHERE NULLIF(ORD_NUM,0) IS NOT NULL     GROUP BY a.ORD_NUM             --3. Get a list of the latest version of the trader order details     IF OBJECT_ID('tempdb..#trade_order_details', 'U') IS NOT NULL DROP TABLE #trade_order_details      SELECT DISTINCT       ord1.ORD_NUM       ,ord1.AUTH_TIME       ,ord1.ACTIVE_TIME       ,ord1.COMMENTS_VALUE       ,ord1.LIMIT_TYPE       ,ord1.LIMIT_VALUE       ,COALESCE(ORDER_REASON_DECODE,ORDER_REASON) AS ORDER_REASON_DECODE       ,SEC_DESC1       ,dc1.VALUE as [Instruction]      INTO #trade_order_details      FROM VISTA_REPORTING.dbo.TRD_ORDERS ord1      INNER JOIN (SELECT          ORD_NUM          ,MAX(TOUCH_COUNT) AS MAX_TOUCH         FROM VISTA_REPORTING.dbo.TRD_ORDERS         GROUP BY ORD_NUM         )      AS ord2 on ord1.ORD_NUM = ord2.ORD_NUM and ord1.TOUCH_COUNT = ord2.MAX_TOUCH      LEFT JOIN VISTA_REPORTING.dbo.DECODES dc1 ON dc1.TAG_NAME = 'PM_INSTRUCTION' AND dc1.CODE=ord1.UPDATE_INSTR      WHERE EXISTS (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = ord1.ORD_NUM)              --3. Get a list of columns in the latest version of trades     IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades     SELECT DISTINCT      CONCAT(trd1.ORD_NUM,'_',trd1.MULTI_FUND_ID) AS ID      ,trd1.MULTI_FUND_ID      ,trd1.TRD_TRADER      ,trd1.TRD_PRICE      ,CONVERT(DECIMAL(30,2),trd1.TRD_PRICING_SPREAD) AS TRD_PRICING_SPREAD      ,CASE        WHEN prim.DEALING_DESK IS NULL THEN NULL       WHEN prim.DEALING_DESK = 'Fixed Income'        THEN        CASE         WHEN prim.SM_SEC_GROUP = 'SWAP' AND prim.SM_SEC_TYPE IN ('SWAP','CSWAP')          THEN CONVERT(DECIMAL(30,2),TRD_COUPON)         WHEN prim.DEBT_DERIV = 'DEBT'           THEN CONVERT(DECIMAL(30,2),TRD_YIELD)        END       ELSE CONVERT(DECIMAL(30,2),TRD_YIELD)      END AS Rate      ,trd1.TRD_COUNTERPARTY      ,trd1.TRAN_TYPE      ,CASE       WHEN prim.DEALING_DESK='Fixed income'       THEN        CASE         WHEN prim.DEBT_DERIV = 'DEBT'          THEN         CASE          WHEN trd1.TRD_COUPON IS NOT NULL AND i2.TICKER IS NOT NULL AND i2.MATURITY IS NOT NULL           THEN CONCAT(ISNULL(i2.TICKER,''),' ', CAST(ISNULL(trd1.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))          ELSE  CONCAT(ISNULL(trd_o.SEC_DESC1,''),' ', CAST(ISNULL(trd1.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))         END         ELSE prim.DESC_INSTMT        END       ELSE NULL      END AS [Description]      ,trd1.EXECUTION_TYPE_DECODE      ,trd1.TRD_CURRENCY      ,i2.ISIN      ,i2.CUSIP      ,i2.SEDOL      ,trd1.TRD_TRADE_DATE      ,trd1.EXECUTION_TIME      ,trd1.TRD_AUTH_TIME      ,plc.ROUTE_DATETIME as RELEASE_DATETIME      ,CASE       WHEN prim.TWEB_CLOSE_DEALING = 1 THEN 'TWEB Close'       WHEN prim.[1615_DEALING] = 1 THEN '1615 Dealing'       WHEN trd1.ACTIVITY_TYPE = 'MG.FI 1. Proces' THEN 'VPT'      END AS [Method]      ,prim.PRIMARY_MARKET      ,prim.VENUE      ,trd1.ACTIVITY_TYPE_DECODE      ,trd1.TRDCOMM_COMMENTS      ,i2.MATURITY      ,prim.INST_TYPE      ,trd1.SM_SEC_GROUP      ,trd1.SM_SEC_TYPE      ,trd1.PORTFOLIOS_PORTFOLIO_NAME      ,dd.FULL_NAME     INTO #trades     FROM VISTA_REPORTING.dbo.TRADES trd1     INNER JOIN ( SELECT  MULTI_FUND_ID          ,MAX(TOUCH_COUNT) AS MAX_TOUCH        FROM VISTA_REPORTING.dbo.TRADES        GROUP BY MULTI_FUND_ID        ) AS trd2 on trd1.MULTI_FUND_ID = trd2.MULTI_FUND_ID and trd1.TOUCH_COUNT = trd2.MAX_TOUCH     LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE prim  ON trd1.MULTI_FUND_ID = prim.MULTI_FUND_ID     OUTER APPLY (SELECT TOP 1          i.TICKER,         i.MATURITY,         i.ISIN,         i.CUSIP,         i.SEDOL          FROM VISTA_REPORTING.dbo.INSTRUMENTS i        WHERE (i.CUSIP=trd1.CUSIP AND i.DATE<=CONVERT(DATE, trd1.EXECUTION_TIME))        ORDER BY i.DATE DESC) as i2     LEFT JOIN VISTA_REPORTING.dbo.PLACEMENTS plc ON trd1.PLACEMENT_NUM = plc.PLACEMENT_NUM     LEFT JOIN VISTA_REPORTING.dbo.DEALER_AND_DESK dd ON trd1.TRD_TRADER = dd.INITIALS     LEFT JOIN #trade_order_details trd_o ON trd1.ORD_NUM = trd_o.ORD_NUM     WHERE EXISTS (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = trd1.ORD_NUM)             --4. Get the latest version of the booked amount and the fund for each trade     IF OBJECT_ID('tempdb..#trades1', 'U') IS NOT NULL DROP TABLE #trades1     SELECT DISTINCT      trd1.MULTI_FUND_ID,      trd1.PORTFOLIOS_PORTFOLIO_NAME,      ABS(trd1.TRD_ORIG_FACE) AS [TRD_ORIG_FACE],      trd1.TRDCOMM_COMMENTS     INTO #trades1       FROM VISTA_REPORTING.dbo.TRADES trd1     INNER JOIN ( SELECT  MULTI_FUND_ID          ,MAX(TOUCH_COUNT) AS MAX_TOUCH        FROM VISTA_REPORTING.dbo.TRADES        GROUP BY MULTI_FUND_ID        ) AS trd2 on trd1.MULTI_FUND_ID = trd2.MULTI_FUND_ID and trd1.TOUCH_COUNT = trd2.MAX_TOUCH     WHERE EXISTS (SELECT DISTINCT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID = trd1.MULTI_FUND_ID)      ORDER BY trd1.MULTI_FUND_ID             IF OBJECT_ID('tempdb..#trades_concat', 'U') IS NOT NULL DROP TABLE #trades_concat     SELECT       a.MULTI_FUND_ID,      STUFF((           SELECT DISTINCT ', ' + PORTFOLIOS_PORTFOLIO_NAME           FROM #trades1 Results           WHERE (a.MULTI_FUND_ID = Results.MULTI_FUND_ID)           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS Funds,      STUFF((           SELECT DISTINCT '| ' + TRDCOMM_COMMENTS           FROM #trades1 Results           WHERE (a.MULTI_FUND_ID = Results.MULTI_FUND_ID)           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS TRDCOMM_COMMENTS,       SUM(TRD_ORIG_FACE) AS [SUM_TRD_ORIG_FACE]     INTO #trades_concat     FROM #trades1 a     GROUP BY a.MULTI_FUND_ID             IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     SELECT DISTINCT       ex.*,      pm.PM_concat               AS [PM],      trd_o.ORDER_REASON_DECODE            AS [Purpose],      dateadd(millisecond, -datepart(millisecond, trd_o.AUTH_TIME), trd_o.AUTH_TIME) AS [Auth Time], -- Remove milliseconds due to data quality issue      trd_o.ACTIVE_TIME              AS [Active Time],      t.MULTI_FUND_ID               AS [MFID],      t.TRD_TRADER               AS [Dealer],      t_concat.SUM_TRD_ORIG_FACE            AS [Booked Amt],        case when ex.dealing_desk = 'Leveraged Finance'       then convert(varchar,convert(DECIMAL(30,4),t.TRD_PRICE))       else convert(varchar,convert(DECIMAL(30,2),t.TRD_PRICE)) end  AS [Price],      t.TRD_PRICING_SPREAD             AS [Spread],      t.Rate                 AS [Rate],      t.TRD_COUNTERPARTY              AS [TRD_COUNTERPARTY],      t.TRAN_TYPE                AS [TRAN_TYPE],      CASE        WHEN ex.DEALING_DESK = 'Fixed Income' THEN t.Description          ELSE trd_o.SEC_DESC1      END                  AS [Description],      t.ISIN                 AS [ISIN],      t.CUSIP                 AS [CUSIP],      t.SEDOL                 AS [SEDOL],      t.TRD_TRADE_DATE              AS [Trade Date],      dateadd(millisecond, -datepart(millisecond, t.RELEASE_DATETIME), t.RELEASE_DATETIME) AS [Send Date], -- Remove milliseconds due to data quality issue      t.EXECUTION_TIME              AS [Exec Date],      t.TRD_AUTH_TIME               AS [Entry Date],      t.Method                AS [Method],      t.PRIMARY_MARKET              AS [Primary Market],      t.Venue                 AS [Platform],      t.ACTIVITY_TYPE_DECODE             AS [Activity],      NULLIF(trd_o.COMMENTS_VALUE,'')           AS [Genral Comments],      t.TRDCOMM_COMMENTS              AS [Dealer Comment],      t_concat.TRDCOMM_COMMENTS            AS [Internal Comment],      t.MATURITY                AS [Maturity Date],      t_concat.Funds               AS [Fund],      inv_desk.Inv_Desk_Concat            AS [Inv desk],      t.INST_TYPE                AS [INST_TYPE],      CONCAT(YEAR(trd_o.AUTH_TIME),'-',left(datename(m,trd_o.AUTH_TIME),3)) AS [MONTH_YEAR],      concat(t.SM_SEC_GROUP,'/',t.SM_SEC_TYPE)        AS [Asset_Type/Subtype],      Null                 AS [List ID],      trd_o.LIMIT_TYPE              AS [Limit Type],      trd_o.LIMIT_VALUE              AS [Limit Value],      NULL                  AS [List Name],      trd_o.SEC_DESC1                  AS SEC_DESC1,      t.FULL_NAME                AS [TRADER_FULL_NAME],      NULLIF(trd_o.COMMENTS_VALUE,'')           AS [COMMENTS_VALUE],      t.SM_SEC_GROUP               AS [SM_SEC_GROUP],      t.SM_SEC_TYPE               AS [SM_SEC_TYPE],      NULL                 AS [CLIENT_EXECUTION_NUM],      NULL                 AS [Indicative_Comments],      NULL                 AS [Placement_Num],      t.EXECUTION_TYPE_DECODE             AS [Execution_Type_Decode],      Null                 as [Order Group],      NUll                 as [Merged Order],      t.trd_currency               as [Ccy],      Null                 as [Picked up Date],      CONVERT(VARCHAR(50),Null)            as UPDATE_INSTR,      trd_o.Instruction              AS Instruction     INTO #temp_final_master_table     FROM VISTA_REPORTING.dbo.TRD_ORDER_LEVEL_EXCEPTION_TABLE ex     LEFT JOIN #trade_order_details trd_o ON ex.ORD_NUM = trd_o.ORD_NUM     LEFT JOIN #trades t ON ex.OA_ID = t.ID     LEFT JOIN #PM_concat pm ON ex.ORD_NUM = pm.ORD_NUM     LEFT JOIN #trades_concat t_concat ON t.MULTI_FUND_ID = t_concat.MULTI_FUND_ID     LEFT JOIN #Inv_desk_concat inv_desk ON ex.ORD_NUM = inv_desk.ORD_NUM     WHERE EXISTS (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di WHERE di.TRD_ORD = ex.ORD_NUM)             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TRD_ORDER_TABLE', 'U') IS NOT NULL     DELETE FROM VISTA_REPORTING.dbo.MASTER_TRD_ORDER_TABLE     WHERE ORD_NUM IN (SELECT DISTINCT di.TRD_ORD FROM #distinct_ids di)         IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TRD_ORDER_TABLE', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_TRD_ORDER_TABLE     SELECT *     FROM #temp_final_master_table         ELSE         SELECT *     INTO VISTA_REPORTING.dbo.MASTER_TRD_ORDER_TABLE     FROM #temp_final_master_table             IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL     INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(     'MASTER_TRD_ORDER_TABLE', --TABLE_NAME     @START_TIME, --START_TIME     GETDATE(), --END_TIME     DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS     CAST(GETDATE() as date)) --COMPLETION_DATE             --IF OBJECT_ID('tempdb..#todays_pmorders', 'U') IS NOT NULL DROP TABLE #todays_pmorders     --IF OBJECT_ID('tempdb..#todays_trorders', 'U') IS NOT NULL DROP TABLE #todays_trorders     --IF OBJECT_ID('tempdb..#todays_trades', 'U') IS NOT NULL DROP TABLE #todays_trades     IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids      IF OBJECT_ID('tempdb..#Ord_inv_Desk', 'U') IS NOT NULL DROP TABLE #Ord_inv_Desk     IF OBJECT_ID('tempdb..#Inv_desk_concat', 'U') IS NOT NULL DROP TABLE #Inv_desk_concat     IF OBJECT_ID('tempdb..#PM', 'U') IS NOT NULL DROP TABLE #PM     IF OBJECT_ID('tempdb..#PM_concat', 'U') IS NOT NULL DROP TABLE #PM_concat     IF OBJECT_ID('tempdb..#trade_order_details', 'U') IS NOT NULL DROP TABLE #trade_order_details     IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades     IF OBJECT_ID('tempdb..#trades1', 'U') IS NOT NULL DROP TABLE #trades1     IF OBJECT_ID('tempdb..#trades_concat', 'U') IS NOT NULL DROP TABLE #trades_concat     IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'master_trd_idx')           DROP INDEX master_trd_idx      ON VISTA_REPORTING.[dbo].MASTER_TRD_ORDER_TABLE      CREATE NONCLUSTERED INDEX master_trd_idx ON VISTA_REPORTING.[dbo].MASTER_TRD_ORDER_TABLE (ORD_NUM)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'master_trd_idx2')           DROP INDEX master_trd_idx2      ON VISTA_REPORTING.[dbo].MASTER_TRD_ORDER_TABLE      CREATE NONCLUSTERED INDEX master_trd_idx2 ON VISTA_REPORTING.[dbo].MASTER_TRD_ORDER_TABLE (DEALING_DESK)              IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'master_trd_idx3')           DROP INDEX master_trd_idx3      ON VISTA_REPORTING.[dbo].MASTER_TRD_ORDER_TABLE      CREATE NONCLUSTERED INDEX master_trd_idx3 ON VISTA_REPORTING.[dbo].MASTER_TRD_ORDER_TABLE ([Auth Time])             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'master_trd_idx4')           DROP INDEX master_trd_idx4      ON VISTA_REPORTING.[dbo].MASTER_TRD_ORDER_TABLE      CREATE NONCLUSTERED INDEX master_trd_idx4 ON VISTA_REPORTING.[dbo].MASTER_TRD_ORDER_TABLE (VG_13_CREATETIME)             IF EXISTS (SELECT name FROM VISTA_REPORTING.sys.indexes                  WHERE name = N'master_trd_idx5')           DROP INDEX master_trd_idx5      ON VISTA_REPORTING.[dbo].MASTER_TRD_ORDER_TABLE      CREATE NONCLUSTERED INDEX master_trd_idx5 ON VISTA_REPORTING.[dbo].MASTER_TRD_ORDER_TABLE (VG_14_CREATETIME)            END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_TRD_ORDER_VG_13_ORDER_AGGREGATION_DMG  CreateDate: 2025-06-26 18:09:26.957  ModifyDate: 2025-06-26 18:09:26.957  --- DEFINITION START ---  -- =============================================    -- Author:  <Samad, Mehreen>    -- Create date: <15/04/2019>    -- Description:     -- <Master exception table for ORDER AGGREGATION    -- for DMG.>    -- =============================================        -- ***************VERSION CONTROL***************    -- 2019-05-14 - DDC: Added PM_ORDER as the 'ORDER' field    --    MS: Added in TRD_EX_BROKER_CODE    -- *********************************************        CREATE PROCEDURE [dbo].[MASTER_TRD_ORDER_VG_13_ORDER_AGGREGATION_DMG]     -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,         AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;                --Used to track total time stored procedure took to run    DECLARE @START_TIME as datetime    SET @START_TIME = GETDATE()        IF OBJECT_ID('tempdb..#trd_orders_metadata', 'U') IS NOT NULL DROP TABLE #trd_orders_metadata    SELECT DISTINCT trd_o.*    INTO #trd_orders_metadata    FROM VISTA_REPORTING.dbo.TRD_ORDERS trd_o    INNER JOIN Vista_Staging.dbo.VG_13_ORDER_AGGREGATION_DMG_TABLE vg on trd_o.ORD_NUM = vg.ORD_NUM        --If the master table doesn't exist then we want to use all the data available, otherwise just the most recent data    IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_13_ORDER_AGGREGATION_DMG_TABLE', 'U') IS NOT NULL    DELETE FROM #trd_orders_metadata where NOT EXISTS (SELECT od.TRD_ORD                       FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                      WHERE od.TRD_ORD = #trd_orders_metadata.ORD_NUM)                IF OBJECT_ID('tempdb..#trades_metadata', 'U') IS NOT NULL DROP TABLE #trades_metadata    SELECT DISTINCT t.*    INTO #trades_metadata    FROM VISTA_REPORTING.dbo.TRADES t    WHERE ORD_NUM in (SELECT ORD_NUM from #trd_orders_metadata)        IF OBJECT_ID('tempdb..#prim_metadata', 'U') IS NOT NULL DROP TABLE #prim_metadata    SELECT DISTINCT *    INTO #prim_metadata    FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr    WHERE ORD_NUM in (SELECT ORD_NUM from #trd_orders_metadata)        IF OBJECT_ID('tempdb..#oc_metadata', 'U') IS NOT NULL DROP TABLE #oc_metadata    SELECT DISTINCT *    INTO #oc_metadata    FROM Vista_Reporting.dbo.ORDERS_CROSS oc    where oc.TRD_ORD in (SELECT ORD_NUM FROM #trd_orders_metadata)        IF OBJECT_ID('tempdb..#pm_metadata', 'U') IS NOT NULL DROP TABLE #pm_metadata    SELECT DISTINCT *    INTO #pm_metadata    FROM Vista_Reporting.dbo.PM_ORDERS pm    where pm.ORD_NUM in (SELECT PM_ORD FROM #oc_metadata)        --1. Get a concatenated list of investment desks for each trader order    IF OBJECT_ID('tempdb..#Ord_inv_Desk', 'U') IS NOT NULL DROP TABLE #Ord_inv_Desk    SELECT DISTINCT      od.ORD_NUM,      p.ancestor     INTO #Ord_inv_Desk    FROM VISTA_STAGING.dbo.ORDERS_DETAIL od -- This will give us the details for PM Orders and TRD Orders    left join VISTA_STAGING.dbo.PORTFOLIO_GROUP_CLOSURE_TABLE p    ON od.PORTFOLIO_NAME = p.descendant    --Not necessary for DMG    --WHERE p.ancestor IN ('MG_ATCRED','MG_RET_FI','MG_INSTI',    --        'MG_INTER','MG_RESTCT','MG_IN_CAP',    --        'MG_LEVFIN','MG_MIB','MG_REDEBT') -- This is the list of investment desks provided in the brd's    where od.ORD_NUM in (SELECT ORD_NUM from #trd_orders_metadata)        IF OBJECT_ID('tempdb..#Inv_desk_concat', 'U') IS NOT NULL DROP TABLE #Inv_desk_concat    SELECT      ORD_NUM,            STUFF((                SELECT DISTINCT ', ' + ANCESTOR                FROM #Ord_inv_Desk a                WHERE (a.ORD_NUM = Results.ORD_NUM)       ORDER BY ', ' + ANCESTOR                FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')            ,1,2,'') AS Inv_Desk_Concat     INTO #Inv_desk_concat    FROM #Ord_inv_Desk Results    GROUP BY ORD_NUM         --2. Get a concatenated list of PMs on the trader order     IF OBJECT_ID('tempdb..#PM', 'U') IS NOT NULL DROP TABLE #PM    SELECT DISTINCT      oc.TRD_ORD AS ORD_NUM,      LTRIM(RTRIM(pm.PM)) AS PM    INTO #PM    FROM #pm_metadata pm    left join #oc_metadata oc    ON pm.ORD_NUM = oc.PM_ORD    WHERE pm.PM <> 'MERGED' -- MERGED is not a PM so we don't need to include      AND pm.PM IS NOT NULL        IF OBJECT_ID('tempdb..#PM_concat', 'U') IS NOT NULL DROP TABLE #PM_concat    SELECT      a.ORD_NUM,            STUFF((                SELECT DISTINCT ', ' + PM                FROM #pm Results                WHERE a.ORD_NUM = Results.ORD_NUM       ORDER BY ', ' + PM                FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')            ,1,2,'') AS PM_concat     INTO #PM_concat    FROM #pm a    WHERE NULLIF(ORD_NUM,0) IS NOT NULL    GROUP BY a.ORD_NUM        --3. Get a list of the latest version of the trader order details    IF OBJECT_ID('tempdb..#trade_order_details', 'U') IS NOT NULL DROP TABLE #trade_order_details    SELECT DISTINCT     ord1.ORD_NUM     ,ord1.AUTH_TIME     ,ord1.ACTIVE_TIME     ,ord1.COMMENTS_VALUE     ,ord1.LIMIT_TYPE     ,ord1.LIMIT_VALUE     ,COALESCE(ORDER_REASON_DECODE,ORDER_REASON) AS ORDER_REASON_DECODE     ,SEC_DESC1     ,dc1.VALUE as [Instruction]    INTO #trade_order_details    FROM #trd_orders_metadata ord1    inner join (SELECT          ORD_NUM        ,MAX(TOUCH_COUNT) AS MAX_TOUCH       FROM #trd_orders_metadata       GROUP BY ORD_NUM) AS ord2     ON ord1.ORD_NUM = ord2.ORD_NUM and ord1.TOUCH_COUNT = ord2.MAX_TOUCH    left join VISTA_REPORTING.dbo.DECODES dc1     ON dc1.TAG_NAME = 'PM_INSTRUCTION' AND dc1.CODE=ord1.UPDATE_INSTR        --3. Get a list of columns in the latest version of trades    IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades    SELECT DISTINCT     CONCAT(trd1.ORD_NUM,'_',trd1.MULTI_FUND_ID) AS ID     ,trd1.MULTI_FUND_ID     ,trd1.TRD_TRADER     ,trd1.TRD_PRICE     ,CONVERT(DECIMAL(30,2),trd1.TRD_PRICING_SPREAD) AS TRD_PRICING_SPREAD     ,CASE       WHEN prim.DEALING_DESK IS NULL THEN NULL      WHEN prim.DEALING_DESK = 'DMG'       THEN       CASE        WHEN prim.SM_SEC_GROUP = 'SWAP' AND prim.SM_SEC_TYPE IN ('SWAP','CSWAP')         THEN CONVERT(DECIMAL(30,2),TRD_COUPON)        WHEN prim.DEBT_DERIV = 'DEBT'          THEN CONVERT(DECIMAL(30,2),TRD_YIELD)       END      ELSE CONVERT(DECIMAL(30,2),TRD_YIELD)     END AS Rate     ,trd1.TRD_COUNTERPARTY     ,trd1.TRAN_TYPE     ,CASE      WHEN prim.DEALING_DESK='DMG'      THEN       CASE        WHEN prim.DEBT_DERIV = 'DEBT'         THEN        CASE         WHEN trd1.TRD_COUPON IS NOT NULL AND i2.TICKER IS NOT NULL AND i2.MATURITY IS NOT NULL          THEN CONCAT(ISNULL(i2.TICKER,''),' ', CAST(ISNULL(trd1.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))         ELSE  CONCAT(ISNULL(trd_o.SEC_DESC1,''),' ', CAST(ISNULL(trd1.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))        END        ELSE prim.DESC_INSTMT       END      ELSE NULL     END AS [Description]     ,trd1.EXECUTION_TYPE_DECODE     ,trd1.TRD_CURRENCY     ,i2.ISIN     ,i2.CUSIP     ,i2.SEDOL     ,trd1.TRD_TRADE_DATE     ,trd1.EXECUTION_TIME     ,trd1.TRD_AUTH_TIME     ,plc.ROUTE_DATETIME as RELEASE_DATETIME     ,CASE      WHEN prim.TWEB_CLOSE_DEALING = 1 THEN 'TWEB Close'      WHEN prim.[1615_DEALING] = 1 THEN '1615 Dealing'      WHEN trd1.ACTIVITY_TYPE = 'MG.FI 1. Proces' THEN 'VPT'     END AS [Method]     ,prim.PRIMARY_MARKET     ,prim.VENUE     ,trd1.ACTIVITY_TYPE_DECODE     ,trd1.TRDCOMM_COMMENTS     ,i2.MATURITY     ,prim.INST_TYPE     ,trd1.SM_SEC_GROUP     ,trd1.SM_SEC_TYPE     ,trd1.PORTFOLIOS_PORTFOLIO_NAME     ,dd.FULL_NAME,     trd1.TRD_PURPOSE,     trd1.[TRD_EX_BROKER_CODE]    INTO #trades    FROM #trades_metadata trd1    INNER JOIN (SELECT          MULTI_FUND_ID        ,MAX(TOUCH_COUNT) AS MAX_TOUCH       FROM VISTA_REPORTING.dbo.TRADES       GROUP BY MULTI_FUND_ID) AS trd2     on trd1.MULTI_FUND_ID = trd2.MULTI_FUND_ID and trd1.TOUCH_COUNT = trd2.MAX_TOUCH    LEFT JOIN #prim_metadata prim    ON trd1.MULTI_FUND_ID = prim.MULTI_FUND_ID    OUTER APPLY (SELECT TOP 1         i.*         FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=trd1.CUSIP AND i.DATE<=CONVERT(DATE, trd1.EXECUTION_TIME))         ORDER BY i.DATE DESC) as i2    LEFT JOIN VISTA_REPORTING.dbo.PLACEMENTS plc    ON trd1.PLACEMENT_NUM = plc.PLACEMENT_NUM    LEFT JOIN VISTA_REPORTING.dbo.DEALER_AND_DESK dd    ON trd1.TRD_TRADER = dd.INITIALS    LEFT JOIN #trade_order_details trd_o    ON trd1.ORD_NUM = trd_o.ORD_NUM        --4. Get the latest version of the booked amount and the fund for each trade    IF OBJECT_ID('tempdb..#trades1', 'U') IS NOT NULL DROP TABLE #trades1    SELECT DISTINCT     trd1.MULTI_FUND_ID,     trd1.PORTFOLIOS_PORTFOLIO_NAME,     ABS(trd1.TRD_ORIG_FACE) AS [TRD_ORIG_FACE]    INTO #trades1      FROM #trades_metadata trd1    INNER JOIN (SELECT          MULTI_FUND_ID        ,MAX(TOUCH_COUNT) AS MAX_TOUCH       FROM #trades_metadata       GROUP BY MULTI_FUND_ID) AS trd2     on trd1.MULTI_FUND_ID = trd2.MULTI_FUND_ID and trd1.TOUCH_COUNT = trd2.MAX_TOUCH        IF OBJECT_ID('tempdb..#trades_concat', 'U') IS NOT NULL DROP TABLE #trades_concat    SELECT      a.MULTI_FUND_ID,     STUFF((       SELECT DISTINCT ', ' + PORTFOLIOS_PORTFOLIO_NAME       FROM #trades1 Results       WHERE (a.MULTI_FUND_ID = Results.MULTI_FUND_ID)       ORDER BY  ', ' + PORTFOLIOS_PORTFOLIO_NAME       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')     ,1,2,'') AS Funds,      SUM(TRD_ORIG_FACE) AS [SUM_TRD_ORIG_FACE]    INTO #trades_concat    FROM #trades1 a    GROUP BY a.MULTI_FUND_ID        --Adding in Settlement date so it can be concatonated and added in final table    IF OBJECT_ID('tempdb..#settle_date_temp', 'U') IS NOT NULL DROP TABLE #settle_date_temp    SELECT DISTINCT      tr.ORD_NUM     ,tr.MULTI_FUND_ID     --,tr.TRD_CURRENCY     --,tr.EXECUTION_TIME     --,tr.TRD_AUTH_TIME     --,tr.TRD_TRADE_DATE     ,T2.SETTLE_DATE     ,tr.PULL_DATE    INTO #settle_date_temp    FROM #trades_metadata as tr    inner join (SELECT         MULTI_FUND_ID,        MAX(TOUCH_COUNT) AS MAX_TOUCH,        max(TRD_SETTLE_DATE) AS SETTLE_DATE       FROM #trades_metadata       GROUP BY MULTI_FUND_ID) as t2     on (tr.MULTI_FUND_ID=t2.MULTI_FUND_ID) and (tr.TOUCH_COUNT=t2.MAX_TOUCH)        IF OBJECT_ID('tempdb..#concat_ord', 'U') IS NOT NULL DROP TABLE #concat_ord    SELECT      ORD_NUM,     STUFF((      SELECT '| ' + CAST(SETTLE_DATE AS VARCHAR(50))       FROM #settle_date_temp Results      WHERE (t.ORD_NUM = Results.ORD_NUM)       ORDER BY '| ' + CAST(SETTLE_DATE AS VARCHAR(50))       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')     ,1,2,'') AS SETTLE_DATE    INTO #CONCAT_ORD    FROM #settle_date_temp t    GROUP BY ORD_NUM              IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table    SELECT DISTINCT      NULLIF(trd_o.[COMMENTS_VALUE],'') as [GENERAL_COMMENT],     t.[TRDCOMM_COMMENTS] as [DEALER_COMMENT],     oc.PM_ORD as [ORDER],     ex.[ORD_NUM] as [Trader Order Number],     ex.[Orders_Concat] as [MISSED_ORDERS],     DATEADD(MILLISECOND, - DATEPART(MILLISECOND, trd_o.[AUTH_TIME]), trd_o.[AUTH_TIME]) as [AUTH_TIME], --Remove milliseconds due to data quality issue     trd_o.[ACTIVE_TIME] as [ACTIVE_TIME],     t.[MULTI_FUND_ID] as [MFID],     t.[TRD_TRADER] as [DEALER],     t_concat.[SUM_TRD_ORIG_FACE] as [BOOKED_AMT],     CONVERT(VARCHAR,CONVERT(DECIMAL(30,2),t.[TRD_PRICE])) as [PX],     t.[TRD_COUNTERPARTY] as [CPTY],     t.[TRD_EX_BROKER_CODE] as [EX_CPTY],     t.[TRAN_TYPE] as [SIDE],     trd_o.[SEC_DESC1] as [DESCRIPTION],     t.[ISIN] as [ISIN],     t.[CUSIP] as [CUSIP],     t.[SEDOL] as [SEDOL],     t.[TRD_TRADE_DATE] as [TRADE_DATE],     DATEADD(MILLISECOND, - DATEPART(MILLISECOND, t.[RELEASE_DATETIME]), t.[RELEASE_DATETIME]) as [SEND_DATE], --Remove milliseconds due to data quality issue     t.[EXECUTION_TIME] as [EXEC_DATE],     t.[TRD_AUTH_TIME] as [ENTRY_DATE],     t.[ACTIVITY_TYPE_DECODE] as [ACTIVITY],     t_concat.[Funds] as [FUND],     t.[INST_TYPE] as [INST_TYPE],     t.[MATURITY] as [MATURITY_DATE],     conc_ord.SETTLE_DATE as [SETTLEMENT_DATE],     ex.[CREATETIME] as [CREATE_DATE],     ex.[MERGE_EXCEPTION] as EXCEPTION_FLAG,     trd_o.[LIMIT_TYPE] as [LIMIT_TYPE],     trd_o.[LIMIT_VALUE] as [LIMIT_VALUE],     pm.[PM_concat] as [PM],     t.[TRD_PRICING_SPREAD] as [SPREAD],     t.[Rate] as [RATE],     trd_o.[ORDER_REASON_DECODE] as [PURPOSE],     t.[Method] as [METHOD],     concat(t.[SM_SEC_GROUP],'/',t.[SM_SEC_TYPE]) as [ASSET_TYPE/SUBTYPE],     t.[EXECUTION_TYPE_DECODE] as [EXECUTION_TYPE_DECODE]     --inv_desk.[Inv_Desk_Concat] as [INV_DESK],     --CONCAT(YEAR(trd_o.[AUTH_TIME]),'-',left(DATENAME(m,trd_o.[AUTH_TIME]),3)) as [MONTH_YEAR],     --t.[SM_SEC_GROUP] as [SM_SEC_GROUP],     --t.[TRD_PURPOSE] as [TRD_PURPOSE],     --t.[VENUE] as [PLATFORM],     --Null                 AS [List ID],     --NULL                  AS [List Name],     --trd_o.SEC_DESC1                    AS SEC_DESC1,     --t.FULL_NAME               AS [TRADER_FULL_NAME],     --NULLIF(trd_o.COMMENTS_VALUE,'')          AS [COMMENTS_VALUE],     --t.SM_SEC_GROUP              AS [SM_SEC_GROUP],     --NULL                 AS [CLIENT_EXECUTION_NUM],     --NULL                 AS [Indicative_Comments],     --NULL                 AS [Placement_Num],     --NULL                 AS [Internal Comment],     --Null                 as [Order Group],     --NUll                 as [Merged Order],     --t.trd_currency              as [Ccy],     --Null                 as [Picked up Date],     --CONVERT(VARCHAR(50),Null)            as UPDATE_INSTR,     --trd_o.Instruction              AS Instruction    INTO #temp_final_master_table    FROM  VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_DMG_TABLE ex    inner join #trade_order_details trd_o on ex.[ORD_NUM] = trd_o.[ORD_NUM]    left join #trades t on ex.[OA_ID] = t.[ID]    left join #PM_concat pm on ex.[ORD_NUM] = pm.[ORD_NUM]    left join #trades_concat t_concat on t.[MULTI_FUND_ID] = t_concat.[MULTI_FUND_ID]    left join #Inv_desk_concat inv_desk on ex.[ORD_NUM] = inv_desk.[ORD_NUM]    LEFT JOIN #oc_metadata oc ON oc.TRD_ORD = ex.ORD_NUM    LEFT JOIN #CONCAT_ORD conc_ord on conc_ord.ORD_NUM = ex.ORD_NUM    --WHERE t.PORTFOLIOS_PORTFOLIO_NAME in ('DRC_VANG', 'DRC_EPIS', 'DRC_ECIF', 'DRC_AOFB', 'DRC_TRCI', 'DRC_ELF')        --CREATE NONCLUSTERED INDEX MASTER_TRD_ORDER_INDEX    --ON VISTA_REPORTING.[dbo].MASTER_TRD_ORDER_TABLE_DMG_ORDER_PRIORITY (ORD_NUM, MFID, PLACEMENT_NUM, CLIENT_EXECUTION_NUM, ISIN, VG_13_CREATETIME, VG_14_CREATETIME )            IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_13_ORDER_AGGREGATION_DMG_TABLE', 'U') IS NOT NULL     delete from VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_13_ORDER_AGGREGATION_DMG_TABLE    where [ORDER] in (SELECT DISTINCT ORD_NUM from #pm_metadata) --No TRD_ORD in master table so have to use PM_ORD        IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_13_ORDER_AGGREGATION_DMG_TABLE', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_13_ORDER_AGGREGATION_DMG_TABLE    SELECT *    FROM #temp_final_master_table        ELSE        SELECT *    INTO VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_13_ORDER_AGGREGATION_DMG_TABLE    FROM #temp_final_master_table        IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(    'MASTER_TRD_ORDER_VG_13_ORDER_AGGREGATION_DMG_TABLE', --TABLE_NAME    @START_TIME, --START_TIME    GETDATE(), --END_TIME    DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS    CAST(GETDATE() as date)) --COMPLETION_DATE            IF OBJECT_ID('tempdb..#Ord_inv_Desk', 'U') IS NOT NULL DROP TABLE #Ord_inv_Desk    IF OBJECT_ID('tempdb..#PM', 'U') IS NOT NULL DROP TABLE #PM    IF OBJECT_ID('tempdb..#Inv_desk_concat', 'U') IS NOT NULL DROP TABLE #Inv_desk_concat    IF OBJECT_ID('tempdb..#PM_concat', 'U') IS NOT NULL DROP TABLE #PM_concat    IF OBJECT_ID('tempdb..#trade_order_details', 'U') IS NOT NULL DROP TABLE #trade_order_details    IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades    IF OBJECT_ID('tempdb..#trades1', 'U') IS NOT NULL DROP TABLE #trades1    IF OBJECT_ID('tempdb..#trades_concat', 'U') IS NOT NULL DROP TABLE #trades_concat    IF OBJECT_ID('tempdb..#settle_date_temp', 'U') IS NOT NULL DROP TABLE #settle_date_temp    IF OBJECT_ID('tempdb..#concat_ord', 'U') IS NOT NULL DROP TABLE #concat_ord        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG  CreateDate: 2025-06-26 18:30:48.647  ModifyDate: 2025-06-26 18:30:48.647  --- DEFINITION START ---  CREATE PROCEDURE [dbo].[MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,         -- ***************VERSION CONTROL***************    -- 2018-03-21 - WH: Removed reference to BUY_SELL_FLAG - used TRAN_TYPE instead    -- 2019-05-14 - DDC: Added PM_ORDER as the 'ORDER' field    --    MS: Added in TRD_EX_BROKER_CODE    -- 2019-05-30 - MS: Concatenated fields in final    --     table.    -- *********************************************            AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;             --Used to track total time stored procedure took to run     DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()          IF OBJECT_ID('tempdb..#trd_orders_metadata', 'U') IS NOT NULL DROP TABLE #trd_orders_metadata     SELECT DISTINCT trd_o.*     INTO #trd_orders_metadata     FROM VISTA_REPORTING.dbo.TRD_ORDERS trd_o     INNER JOIN Vista_Staging.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_DMG_TABLE vg on trd_o.ORD_NUM = vg.ORD_NUM          --If the master table doesn't exist then we want to use all the data available, otherwise just the most recent data     IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE', 'U') IS NOT NULL     DELETE FROM #trd_orders_metadata where NOT EXISTS (SELECT od.TRD_ORD                        FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                       WHERE od.TRD_ORD = #trd_orders_metadata.ORD_NUM)               IF OBJECT_ID('tempdb..#trades_metadata', 'U') IS NOT NULL DROP TABLE #trades_metadata     SELECT DISTINCT t.*     INTO #trades_metadata     FROM VISTA_REPORTING.dbo.TRADES t     WHERE ORD_NUM in (SELECT ORD_NUM from #trd_orders_metadata)          IF OBJECT_ID('tempdb..#prim_metadata', 'U') IS NOT NULL DROP TABLE #prim_metadata     SELECT DISTINCT *     INTO #prim_metadata     FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr     WHERE ORD_NUM in (SELECT ORD_NUM from #trd_orders_metadata)          IF OBJECT_ID('tempdb..#oc_metadata', 'U') IS NOT NULL DROP TABLE #oc_metadata     SELECT DISTINCT *     INTO #oc_metadata     FROM Vista_Reporting.dbo.ORDERS_CROSS oc     where oc.TRD_ORD in (SELECT ORD_NUM FROM #trd_orders_metadata)          IF OBJECT_ID('tempdb..#pm_metadata', 'U') IS NOT NULL DROP TABLE #pm_metadata     SELECT DISTINCT *     INTO #pm_metadata     FROM Vista_Reporting.dbo.PM_ORDERS pm     where pm.ORD_NUM in (SELECT PM_ORD FROM #oc_metadata)         --1. Get a concatenated list of investment desks for each trader order     IF OBJECT_ID('tempdb..#Ord_inv_Desk', 'U') IS NOT NULL DROP TABLE #Ord_inv_Desk     SELECT DISTINCT       od.ORD_NUM,       p.ancestor      INTO #Ord_inv_Desk     FROM VISTA_STAGING.dbo.ORDERS_DETAIL od -- This will give us the details for PM Orders and TRD Orders     LEFT JOIN VISTA_STAGING.dbo.PORTFOLIO_GROUP_CLOSURE_TABLE p ON od.PORTFOLIO_NAME = p.descendant     --WHERE p.ancestor IN ('MG_ATCRED','MG_RET_FI','MG_INSTI','MG_INTER','MG_RESTCT','MG_IN_CAP','MG_LEVFIN','MG_MIB','MG_REDEBT') -- This is the list of investment desks provided in the business requirements documents     WHERE ORD_NUM IN (SELECT ORD_NUM FROM #trd_orders_metadata)             IF OBJECT_ID('tempdb..#Inv_desk_concat', 'U') IS NOT NULL DROP TABLE #Inv_desk_concat     SELECT       ORD_NUM,             STUFF((                  SELECT DISTINCT ', ' + ANCESTOR                  FROM #Ord_inv_Desk a                  WHERE (a.ORD_NUM = Results.ORD_NUM)         ORDER BY  ', ' + ANCESTOR                  FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')             ,1,2,'') AS Inv_Desk_Concat      INTO #Inv_desk_concat     FROM #Ord_inv_Desk Results     GROUP BY ORD_NUM              --2. Get a concatenated list of PMs on the trader order      IF OBJECT_ID('tempdb..#PM', 'U') IS NOT NULL DROP TABLE #PM     SELECT DISTINCT       oc.TRD_ORD AS ORD_NUM,       LTRIM(RTRIM(pm.PM)) AS PM     INTO #PM     FROM #pm_metadata pm     LEFT JOIN #oc_metadata oc     ON pm.ORD_NUM = oc.PM_ORD     WHERE pm.PM <> 'MERGED' -- MERGED is not a PM so we don't need to include        AND pm.PM IS NOT NULL             IF OBJECT_ID('tempdb..#PM_concat', 'U') IS NOT NULL DROP TABLE #PM_concat     SELECT       a.ORD_NUM,             STUFF((                  SELECT DISTINCT ', ' + PM                  FROM #pm Results                  WHERE a.ORD_NUM = Results.ORD_NUM         ORDER BY ', ' + PM                  FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')             ,1,2,'') AS PM_concat      INTO #PM_concat     FROM #pm a     WHERE NULLIF(ORD_NUM,0) IS NOT NULL     GROUP BY a.ORD_NUM         --3. Get a list of the latest version of the trader order details     IF OBJECT_ID('tempdb..#trade_order_details', 'U') IS NOT NULL DROP TABLE #trade_order_details     SELECT DISTINCT      ord1.ORD_NUM      ,ord1.AUTH_TIME      ,ord1.ACTIVE_TIME      ,ord1.COMMENTS_VALUE      ,ord1.LIMIT_TYPE      ,ord1.LIMIT_VALUE      ,COALESCE(ORDER_REASON_DECODE,ORDER_REASON) AS ORDER_REASON_DECODE      ,SEC_DESC1      ,dc1.VALUE as [Instruction]     INTO #trade_order_details     FROM #trd_orders_metadata ord1     INNER JOIN ( SELECT  ORD_NUM          ,MAX(TOUCH_COUNT) AS MAX_TOUCH        FROM #trd_orders_metadata        GROUP BY ORD_NUM        )     AS ord2 on ord1.ORD_NUM = ord2.ORD_NUM and ord1.TOUCH_COUNT = ord2.MAX_TOUCH     LEFT JOIN VISTA_REPORTING.dbo.DECODES dc1 ON dc1.TAG_NAME = 'PM_INSTRUCTION' AND dc1.CODE=ord1.UPDATE_INSTR         --3. Get a list of columns in the latest version of trades     IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades     SELECT DISTINCT      --CONCAT(trd1.ORD_NUM,'_',trd1.MULTI_FUND_ID) AS ID      trd1.ORD_NUM AS ID      ,trd1.MULTI_FUND_ID      ,trd1.TRD_TRADER      ,trd1.TRD_PRICE      ,CONVERT(DECIMAL(30,2),trd1.TRD_PRICING_SPREAD) AS TRD_PRICING_SPREAD      ,CASE       WHEN prim.DEALING_DESK IS NULL THEN NULL       WHEN prim.DEALING_DESK = 'DMG'        THEN        CASE         WHEN prim.SM_SEC_GROUP = 'SWAP' AND prim.SM_SEC_TYPE IN ('SWAP','CSWAP')          THEN CONVERT(DECIMAL(30,2),TRD_COUPON)         WHEN prim.DEBT_DERIV = 'DEBT'           THEN CONVERT(DECIMAL(30,2),TRD_YIELD)        END       ELSE CONVERT(DECIMAL(30,2),TRD_YIELD)      END AS Rate      ,trd1.TRD_COUNTERPARTY      ,trd1.TRAN_TYPE      ,CASE       WHEN prim.DEALING_DESK='DMG'       THEN        CASE         WHEN prim.DEBT_DERIV = 'DEBT'          THEN         CASE          WHEN trd1.TRD_COUPON IS NOT NULL AND i2.TICKER IS NOT NULL AND i2.MATURITY IS NOT NULL           THEN CONCAT(ISNULL(i2.TICKER,''),' ', CAST(ISNULL(trd1.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))          ELSE  CONCAT(ISNULL(trd_o.SEC_DESC1,''),' ', CAST(ISNULL(trd1.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))         END         ELSE prim.DESC_INSTMT        END       ELSE NULL      END AS [Description]      ,trd1.EXECUTION_TYPE_DECODE      ,trd1.TRD_CURRENCY      ,i2.ISIN      ,i2.CUSIP      ,i2.SEDOL      ,trd1.TRD_TRADE_DATE      ,trd1.EXECUTION_TIME      ,trd1.TRD_AUTH_TIME      ,plc.ROUTE_DATETIME as RELEASE_DATETIME      ,CASE       WHEN prim.TWEB_CLOSE_DEALING = 1 THEN 'TWEB Close'       WHEN prim.[1615_DEALING] = 1 THEN '1615 Dealing'       WHEN trd1.ACTIVITY_TYPE = 'MG.FI 1. Proces' THEN 'VPT'      END AS [Method]      ,prim.PRIMARY_MARKET      ,prim.VENUE      ,trd1.ACTIVITY_TYPE_DECODE      ,trd1.TRDCOMM_COMMENTS      ,i2.MATURITY      ,prim.INST_TYPE      ,trd1.SM_SEC_GROUP      ,trd1.SM_SEC_TYPE      ,trd1.PORTFOLIOS_PORTFOLIO_NAME      ,dd.FULL_NAME,      trd1.TRD_PURPOSE,      trd1.[TRD_EX_BROKER_CODE],      plc.[FULL_NAME_VENUE]     INTO #trades     FROM #trades_metadata trd1     INNER JOIN ( SELECT  MULTI_FUND_ID          ,MAX(TOUCH_COUNT) AS MAX_TOUCH        FROM #trades_metadata        GROUP BY MULTI_FUND_ID        )     AS trd2 on trd1.MULTI_FUND_ID = trd2.MULTI_FUND_ID and trd1.TOUCH_COUNT = trd2.MAX_TOUCH     LEFT JOIN #prim_metadata prim  ON trd1.MULTI_FUND_ID = prim.MULTI_FUND_ID     OUTER APPLY (SELECT TOP 1 i.* FROM VISTA_REPORTING.dbo.INSTRUMENTS i        WHERE (i.CUSIP=trd1.CUSIP AND i.DATE<=CONVERT(DATE, trd1.EXECUTION_TIME))        ORDER BY i.DATE DESC) as i2     LEFT JOIN VISTA_REPORTING.dbo.PLACEMENTS plc ON trd1.PLACEMENT_NUM = plc.PLACEMENT_NUM     LEFT JOIN VISTA_REPORTING.dbo.DEALER_AND_DESK dd ON trd1.TRD_TRADER = dd.INITIALS     LEFT JOIN #trade_order_details trd_o ON trd1.ORD_NUM = trd_o.ORD_NUM         --4. Get the latest version of the booked amount and the fund for each trade     IF OBJECT_ID('tempdb..#trades1', 'U') IS NOT NULL DROP TABLE #trades1     SELECT DISTINCT      trd1.MULTI_FUND_ID,      trd1.PORTFOLIOS_PORTFOLIO_NAME,      ABS(trd1.TRD_ORIG_FACE) AS [TRD_ORIG_FACE]     INTO #trades1       FROM #trades_metadata trd1     INNER JOIN ( SELECT  MULTI_FUND_ID          ,MAX(TOUCH_COUNT) AS MAX_TOUCH        FROM #trades_metadata        GROUP BY MULTI_FUND_ID        ) AS trd2 on trd1.MULTI_FUND_ID = trd2.MULTI_FUND_ID and trd1.TOUCH_COUNT = trd2.MAX_TOUCH         IF OBJECT_ID('tempdb..#trades_concat', 'U') IS NOT NULL DROP TABLE #trades_concat     SELECT       a.MULTI_FUND_ID,      STUFF((           SELECT DISTINCT ', ' + PORTFOLIOS_PORTFOLIO_NAME           FROM #trades1 Results           WHERE (a.MULTI_FUND_ID = Results.MULTI_FUND_ID)        ORDER BY ', ' + PORTFOLIOS_PORTFOLIO_NAME           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS Funds,       SUM(TRD_ORIG_FACE) AS [SUM_TRD_ORIG_FACE]     INTO #trades_concat     FROM #trades1 a     GROUP BY a.MULTI_FUND_ID             --Adding in Settlement date so it can be concatonated and added in final table     IF OBJECT_ID('tempdb..#settle_date_temp', 'U') IS NOT NULL DROP TABLE #settle_date_temp     SELECT DISTINCT       tr.ORD_NUM      ,tr.MULTI_FUND_ID      --,tr.TRD_CURRENCY      --,tr.EXECUTION_TIME      --,tr.TRD_AUTH_TIME      --,tr.TRD_TRADE_DATE      ,T2.SETTLE_DATE      ,tr.PULL_DATE     INTO #settle_date_temp     FROM #trades_metadata as tr     inner join (SELECT          MULTI_FUND_ID,         MAX(TOUCH_COUNT) AS MAX_TOUCH,         max(TRD_SETTLE_DATE) AS SETTLE_DATE        FROM #trades_metadata        GROUP BY MULTI_FUND_ID) as t2 on (tr.MULTI_FUND_ID=t2.MULTI_FUND_ID) and (tr.TOUCH_COUNT=t2.MAX_TOUCH)         IF OBJECT_ID('tempdb..#trades_distinct', 'U') IS NOT NULL DROP TABLE #trades_distinct     SELECT DISTINCT      t.[ID] as [ORD_NUM],      t.[MULTI_FUND_ID],      t.[TRD_TRADER] as [DEALER],      t_c.[SUM_TRD_ORIG_FACE] as [BOOKED_AMT],      CONVERT(VARCHAR,CONVERT(DECIMAL(30,2),t.TRD_PRICE)) as PX,      t.[TRD_PRICING_SPREAD] as [SPREAD],      t.[Rate],      t.[TRD_COUNTERPARTY] as [CPTY],      t.[TRD_TRADE_DATE],      DATEADD(MILLISECOND, -DATEPART(MILLISECOND, t.RELEASE_DATETIME), t.RELEASE_DATETIME) as [SEND_DATE], -- Remove milliseconds due to data quality issue      t.[EXECUTION_TIME],      t.[TRD_AUTH_TIME],      t.[TRDCOMM_COMMENTS],      t_c.[Funds],      t.[TRD_EX_BROKER_CODE],      sett_temp.SETTLE_DATE     INTO #trades_distinct     FROM #trades t     left join #trades_concat t_c on t.MULTI_FUND_ID = t_c.MULTI_FUND_ID     left join #settle_date_temp sett_temp on t.MULTI_FUND_ID = sett_temp.MULTI_FUND_ID               IF OBJECT_ID('tempdb..#ordtrades_concat', 'U') IS NOT NULL DROP TABLE #ordtrades_concat     SELECT       t.ORD_NUM,      STUFF((       SELECT '| ' + CAST(MULTI_FUND_ID AS VARCHAR(50))        FROM #trades_distinct trd       WHERE (t.ORD_NUM = trd.ORD_NUM)        ORDER BY '| ' + CAST(MULTI_FUND_ID AS VARCHAR(50))        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS MFID_concat,      STUFF((       SELECT '| ' + CAST(DEALER AS VARCHAR(50))        FROM #trades_distinct trd       WHERE (t.ORD_NUM = trd.ORD_NUM)        ORDER BY '| ' + CAST(DEALER AS VARCHAR(50))        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS DEALER_concat,      STUFF((       SELECT '| ' + CAST(BOOKED_AMT AS VARCHAR(50))        FROM #trades_distinct trd       WHERE (t.ORD_NUM = trd.ORD_NUM)        ORDER BY '| ' + CAST(BOOKED_AMT AS VARCHAR(50))        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS BOOKED_AMT_concat,      STUFF((       SELECT '| ' + CAST(PX AS VARCHAR(50))        FROM #trades_distinct trd       WHERE (t.ORD_NUM = trd.ORD_NUM)        ORDER BY '| ' + CAST(PX AS VARCHAR(50))        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS PX_concat,      STUFF((       SELECT '| ' + CAST(SPREAD AS VARCHAR(50))        FROM #trades_distinct trd       WHERE (t.ORD_NUM = trd.ORD_NUM)        ORDER BY '| ' + CAST(SPREAD AS VARCHAR(50))        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS SPREAD_concat,      STUFF((       SELECT '| ' + CAST(Rate AS VARCHAR(50))        FROM #trades_distinct trd       WHERE (t.ORD_NUM = trd.ORD_NUM)        ORDER BY  '| ' + CAST(Rate AS VARCHAR(50))        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS RATE_concat,      STUFF((       SELECT '| ' + CAST(CPTY AS VARCHAR(50))        FROM #trades_distinct trd       WHERE (t.ORD_NUM = trd.ORD_NUM)        ORDER BY '| ' + CAST(CPTY AS VARCHAR(50))        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS CPTY_concat,      STUFF((       SELECT '| ' + CAST(TRD_TRADE_DATE AS VARCHAR(50))        FROM #trades_distinct trd       WHERE (t.ORD_NUM = trd.ORD_NUM)        ORDER BY '| ' + CAST(TRD_TRADE_DATE AS VARCHAR(50))        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS TRD_TRADE_DATE_concat,      STUFF((       SELECT '| ' + CAST(SEND_DATE AS VARCHAR(50))        FROM #trades_distinct trd       WHERE (t.ORD_NUM = trd.ORD_NUM)        ORDER BY  '| ' + CAST(SEND_DATE AS VARCHAR(50))       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS SEND_DATE_concat,      STUFF((       SELECT '| ' + CAST(EXECUTION_TIME AS VARCHAR(50))        FROM #trades_distinct trd       WHERE (t.ORD_NUM = trd.ORD_NUM)        ORDER BY  '| ' + CAST(EXECUTION_TIME AS VARCHAR(50))        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS EXECUTION_TIME_concat,      STUFF((       SELECT '| ' + CAST(TRD_AUTH_TIME AS VARCHAR(50))        FROM #trades_distinct trd       WHERE (t.ORD_NUM = trd.ORD_NUM)        ORDER BY '| ' + CAST(TRD_AUTH_TIME AS VARCHAR(50))        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS TRD_AUTH_TIME_concat,      STUFF((       SELECT '| ' + CAST(TRDCOMM_COMMENTS AS VARCHAR(50))        FROM #trades_distinct trd       WHERE (t.ORD_NUM = trd.ORD_NUM)        ORDER BY '| ' + CAST(TRDCOMM_COMMENTS AS VARCHAR(50))        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS TRDCOMM_COMMENTS_concat,      STUFF((       SELECT '| ' + CAST(Funds AS VARCHAR(50))        FROM #trades_distinct trd       WHERE (t.ORD_NUM = trd.ORD_NUM)        ORDER BY '| ' + CAST(Funds AS VARCHAR(50))        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS FUNDS_concat,      STUFF((       SELECT '| ' + CAST(TRD_EX_BROKER_CODE AS VARCHAR(50))        FROM #trades_distinct trd       WHERE (t.ORD_NUM = trd.ORD_NUM)        ORDER BY '| ' + CAST(TRD_EX_BROKER_CODE AS VARCHAR(50))        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS TRD_EX_BROKER_CODE_concat,      STUFF((       SELECT '| ' + CAST(SETTLE_DATE AS VARCHAR(50))        FROM #trades_distinct trd       WHERE (t.ORD_NUM = trd.ORD_NUM)        ORDER BY '| ' + CAST(SETTLE_DATE AS VARCHAR(50))        FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(255)')      ,1,2,'') AS SETTLE_DATE_concat     INTO #ordtrades_concat     FROM #trades_distinct t     GROUP BY t.ORD_NUM            IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table     SELECT DISTINCT       NULLIF(trd_o.COMMENTS_VALUE,'')           AS [GENERAL_COMMENT],      ot_concat.TRDCOMM_COMMENTS_concat          AS [DEALER_COMMENT],      oc.PM_ORD                AS [ORDER],      ex.prior_orders               AS [MISSED_ORDERS],      dateadd(millisecond, -datepart(millisecond, trd_o.AUTH_TIME), trd_o.AUTH_TIME) AS [AUTH_TIME], -- Remove milliseconds due to data quality issue      trd_o.ACTIVE_TIME              AS [ACTIVE_TIME],      ot_concat.MFID_concat             AS [MFID],      ot_concat.DEALER_concat             AS [DEALER],      ot_concat.BOOKED_AMT_concat            AS [BOOKED_AMT],      ot_concat.PX_concat              AS [PX],      ot_concat.SPREAD_concat             AS [SPREAD],      ot_concat.RATE_concat             AS [RATE],      ot_concat.CPTY_concat             AS [CPTY],      ot_concat.TRD_EX_BROKER_CODE_concat          AS [EX_CPTY],      t.TRAN_TYPE                AS [SIDE],         trd_o.SEC_DESC1                  AS [DESCRIPTION],      t.ISIN                 AS [ISIN],      t.CUSIP                 AS [CUSIP],      t.SEDOL                 AS [SEDOL],      ot_concat.TRD_TRADE_DATE_concat           AS [TRADE_DATE],      ot_concat.SEND_DATE_concat               AS [SEND_DATE], -- Remove milliseconds due to data quality issue      ot_concat.EXECUTION_TIME_concat           AS [EXEC_DATE],      ot_concat.TRD_AUTH_TIME_concat           AS [ENTRY_DATE],      t.Method                AS [METHOD],      ISNULL(t.FULL_NAME_VENUE,'Manual')          AS [PLATFORM],      t.ACTIVITY_TYPE_DECODE             AS [ACTIVITY],      ot_concat.FUNDS_concat             AS [FUND],      inv_desk.Inv_Desk_Concat            AS [INV_DESK],      t.INST_TYPE                AS [INST_TYPE],      trd_o.LIMIT_TYPE              AS [LIMIT_TYPE],      trd_o.LIMIT_VALUE              AS [LIMIT_VALUE],      t.MATURITY                AS [MATURITY_DATE],      ot_concat.SETTLE_DATE_concat           AS [SETTLEMENT_DATE],      EX.CREATETIME               AS CREATE_DATE,      EX.ORDER_PRIORITY_EXCEPTION            AS EXCEPTION_FLAG,       pm.PM_concat               AS [PM],      trd_o.ORDER_REASON_DECODE            AS [PURPOSE],      concat(t.SM_SEC_GROUP,'/',t.SM_SEC_TYPE)        AS [Asset_Type/Subtype],      t.EXECUTION_TYPE_DECODE             AS [Execution_Type_Decode],      --CONCAT(YEAR(trd_o.AUTH_TIME),'-',left(datename(m,trd_o.AUTH_TIME),3)) AS [MONTH_YEAR],      --t.SM_SEC_GROUP               AS [SM_SEC_GROUP],      ex.ORD_NUM                AS [Trader Order Number]      --t.trd_purpose               AS TRD_PURPOSE,      --Null                 AS [List ID],      --NULL                  AS [List Name],      --trd_o.SEC_DESC1                  AS SEC_DESC1,      --t.FULL_NAME                AS [TRADER_FULL_NAME],      --NULLIF(trd_o.COMMENTS_VALUE,'')           AS [COMMENTS_VALUE],      --t.SM_SEC_GROUP               AS [SM_SEC_GROUP],      --NULL                 AS [CLIENT_EXECUTION_NUM],      --NULL                 AS [Indicative_Comments],      --NULL                 AS [Placement_Num],      --NULL                 AS [Internal Comment],      --Null                 as [Order Group],      --NUll                 as [Merged Order],      --t.trd_currency               as [Ccy],      --Null                 as [Picked up Date],      --CONVERT(VARCHAR(50),Null)            as UPDATE_INSTR,      --trd_o.Instruction              AS Instruction     INTO #temp_final_master_table        FROM  VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_DMG_TABLE ex     INNER JOIN #trade_order_details trd_o ON ex.ORD_NUM = trd_o.ORD_NUM     LEFT JOIN #trades t ON ex.OP_ID = t.ID     LEFT JOIN #PM_concat pm ON ex.ORD_NUM = pm.ORD_NUM     LEFT JOIN #trades_concat t_concat ON t.MULTI_FUND_ID = t_concat.MULTI_FUND_ID     LEFT JOIN #Inv_desk_concat inv_desk ON ex.ORD_NUM = inv_desk.ORD_NUM     LEFT JOIN #ordtrades_concat ot_concat ON ex.ORD_NUM = ot_concat.ORD_NUM     LEFT JOIN #oc_metadata oc ON oc.TRD_ORD = ex.ORD_NUM     --WHERE t.PORTFOLIOS_PORTFOLIO_NAME in ('DRC_VANG', 'DRC_EPIS', 'DRC_ECIF', 'DRC_AOFB', 'DRC_TRCI', 'DRC_ELF')        --CREATE NONCLUSTERED INDEX MASTER_TRD_ORDER_INDEX    --ON VISTA_REPORTING.[dbo].MASTER_TRD_ORDER_TABLE_DMG_ORDER_PRIORITY (ORD_NUM, MFID, PLACEMENT_NUM, CLIENT_EXECUTION_NUM, ISIN, VG_13_CREATETIME, VG_14_CREATETIME )        IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE', 'U') IS NOT NULL     delete from VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE    where [ORDER] in (SELECT DISTINCT ORD_NUM from #pm_metadata) --No TRD_ORD in master table so have to use PM_ORD        IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE    SELECT *    FROM #temp_final_master_table        ELSE        SELECT *    INTO VISTA_REPORTING.dbo.MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE    FROM #temp_final_master_table        IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL    INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(    'MASTER_TRD_ORDER_VG_14_ORDER_PRIORITY_DMG_TABLE', --TABLE_NAME    @START_TIME, --START_TIME    GETDATE(), --END_TIME    DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS    CAST(GETDATE() as date)) --COMPLETION_DATE        IF OBJECT_ID('tempdb..#Ord_inv_Desk', 'U') IS NOT NULL DROP TABLE #Ord_inv_Desk    IF OBJECT_ID('tempdb..#Inv_desk_concat', 'U') IS NOT NULL DROP TABLE #Inv_desk_concat    IF OBJECT_ID('tempdb..#PM', 'U') IS NOT NULL DROP TABLE #PM    IF OBJECT_ID('tempdb..#PM_concat', 'U') IS NOT NULL DROP TABLE #PM_concat    IF OBJECT_ID('tempdb..#trade_order_details', 'U') IS NOT NULL DROP TABLE #trade_order_details    IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades    IF OBJECT_ID('tempdb..#trades1', 'U') IS NOT NULL DROP TABLE #trades1    IF OBJECT_ID('tempdb..#trades_concat', 'U') IS NOT NULL DROP TABLE #trades_concat    IF OBJECT_ID('tempdb..#settle_date_temp', 'U') IS NOT NULL DROP TABLE #settle_date_temp    IF OBJECT_ID('tempdb..#trades_distinct', 'U') IS NOT NULL DROP TABLE #trades_distinct    IF OBJECT_ID('tempdb..#ordtrades_concat', 'U') IS NOT NULL DROP TABLE #ordtrades_concat            END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MASTER_VG_15_AMENDMENT_FLAG_TABLE_DMG  CreateDate: 2025-06-26 18:09:50.883  ModifyDate: 2025-07-01 11:54:26.537  --- DEFINITION START ---                  CREATE    PROCEDURE [dbo].[MASTER_VG_15_AMENDMENT_FLAG_TABLE_DMG]          -- Add the parameters for the stored procedure here         --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,                 -- ***************VERSION CONTROL***************        -- 2019-05-14 - DDC: Added PM_ORDER as the 'ORDER' field        --    MS: Added in TRD_EX_BROKER_CODE        -- *********************************************                AS        BEGIN         -- SET NOCOUNT ON added to prevent extra result sets from         -- interfering with SELECT statements.         SET NOCOUNT ON;                 --Used to track total time stored procedure took to run         DECLARE @START_TIME as datetime         SET @START_TIME = GETDATE()                          IF OBJECT_ID('tempdb..#trades_metadata', 'U') IS NOT NULL DROP TABLE #trades_metadata         SELECT DISTINCT t.*         INTO #trades_metadata         FROM VISTA_REPORTING.dbo.TRADES t         INNER JOIN Vista_Staging.dbo.VG_15_AMENDMENT_FLAG_DMG_TABLE vg ON vg.MULTI_FUND_ID = t.MULTI_FUND_ID                 --If the master table doesn't exist then we want to use all the data available, otherwise just the most recent data         IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_VG_15_AMENDMENT_FLAG_DMG_TABLE', 'U') IS NOT NULL         DELETE FROM #trades_metadata where NOT EXISTS (SELECT od.MULTI_FUND_ID                        FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od                       WHERE od.MULTI_FUND_ID = #trades_metadata.MULTI_FUND_ID)                         IF OBJECT_ID('tempdb..#Latest_trd', 'U') IS NOT NULL DROP TABLE #Latest_trd         SELECT           MULTI_FUND_ID,          SUM(TRD_ORIG_FACE) AS TRD_ORIG_FACE,          TRD_SETTLE_DATE,          ACTIVITY_TYPE,          MAX(TRD_MODIFY_TIME) AS TRD_MODIFY_TIME,          TOUCH_COUNT         INTO #LATEST_TRD         FROM #trades_metadata         GROUP BY          MULTI_FUND_ID,          TRD_SETTLE_DATE,          ACTIVITY_TYPE,          TOUCH_COUNT                         IF OBJECT_ID('TEMPDB..#FUNDS_CONCAT', 'U') IS NOT NULL DROP TABLE #FUNDS_CONCAT         SELECT          MULTI_FUND_ID,          STUFF((           SELECT DISTINCT ', ' + LTRIM(RTRIM(PORTFOLIOS_PORTFOLIO_NAME))           FROM #trades_metadata           WHERE (MULTI_FUND_ID = T.MULTI_FUND_ID)           order by ', ' + LTRIM(RTRIM(PORTFOLIOS_PORTFOLIO_NAME))           FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')          ,1,2,'') AS FUNDS_CONCAT         INTO #FUNDS_CONCAT         FROM #trades_metadata T         WHERE NULLIF(T.PORTFOLIOS_PORTFOLIO_NAME,'') IS NOT NULL AND (T.AmendmentFlag = 1 OR T.CancellationFlag = 1)         GROUP BY MULTI_FUND_ID                         IF OBJECT_ID('TEMPDB..#MIN_DEALER', 'U') IS NOT NULL DROP TABLE #MIN_DEALER         SELECT DISTINCT          T.MULTI_FUND_ID,          T.TRD_TRADER          INTO #MIN_DEALER         FROM #trades_metadata T         INNER JOIN (          SELECT MULTI_FUND_ID, MIN(TOUCH_COUNT)  AS MIN_TCH          FROM #trades_metadata          WHERE NULLIF(TOUCH_COUNT,'') IS NOT NULL          GROUP BY MULTI_FUND_ID) T2         ON T.MULTI_FUND_ID = T2.MULTI_FUND_ID AND T.TOUCH_COUNT = T2.MIN_TCH                 --Check if there is a change in any of the following columns for each amendment: TRD_PRICE, SUM(ABS(TRD_ORIG_FACE)), TRD_COMMISSION, TRD_SETTLE_DATE, TRD_TRADE_DATE, EXECUTION_TIME.         IF OBJECT_ID('TEMPDB..#TRADES', 'U') IS NOT NULL DROP TABLE #TRADES         SELECT           T.MULTI_FUND_ID,           T.TOUCH_COUNT,          SUM(T.TRD_ORIG_FACE) AS SUM_TRD_ORIG_FACE,          T.TRD_PRICE,          T.TRD_COMMISSION,          T.TRD_SETTLE_DATE,          T.TRD_TRADE_DATE,          T.EXECUTION_TIME         INTO #TRADES         FROM (          SELECT DISTINCT            MULTI_FUND_ID,            CLIENT_EXECUTION_NUM,           TOUCH_COUNT,           CONVERT(DECIMAL(30,2),ABS(TRD_ORIG_FACE)) AS TRD_ORIG_FACE,           CONVERT(DECIMAL(30,2),TRD_PRICE) AS TRD_PRICE,           CONVERT(DECIMAL(30,2),TRD_COMMISSION) AS TRD_COMMISSION,           TRD_SETTLE_DATE,           TRD_TRADE_DATE,           EXECUTION_TIME          FROM #trades_metadata) T         GROUP BY          T.MULTI_FUND_ID,           T.TOUCH_COUNT,          T.TRD_PRICE,          T.TRD_COMMISSION,          T.TRD_SETTLE_DATE,          T.TRD_TRADE_DATE,          T.EXECUTION_TIME                  IF OBJECT_ID('TEMPDB..#CHANGES1', 'U') IS NOT NULL DROP TABLE #CHANGES1         SELECT DISTINCT           AMND.MULTI_FUND_ID,          AMND.TOUCH_COUNT,          CASE WHEN ISNULL(T2.TRD_PRICE,'-1')     <> ISNULL(T.TRD_PRICE,'-1')     THEN CONCAT('Price: '   ,ISNULL(CONVERT(VARCHAR(100),T2.TRD_PRICE   ),'blank') , '-> ' , ISNULL(CONVERT(VARCHAR(100),T.TRD_PRICE   ), 'blank')) END AS [Price_Change],          CASE WHEN ISNULL(T2.SUM_TRD_ORIG_FACE,'-1')   <> ISNULL(T.SUM_TRD_ORIG_FACE,'-1')   THEN CONCAT('Nominal: '   ,ISNULL(CONVERT(VARCHAR(100),T2.SUM_TRD_ORIG_FACE ),'blank') , '-> ' , ISNULL(CONVERT(VARCHAR(100),T.SUM_TRD_ORIG_FACE ), 'blank')) END AS [Nominal_Change],          CASE WHEN ISNULL(T2.TRD_COMMISSION,'-1')   <> ISNULL(T.TRD_COMMISSION,'-1')   THEN CONCAT('Commission: '  ,ISNULL(CONVERT(VARCHAR(100),T2.TRD_COMMISSION  ),'blank') , '-> ' , ISNULL(CONVERT(VARCHAR(100),T.TRD_COMMISSION  ), 'blank')) END AS [Commission_Change],          CASE WHEN ISNULL(T2.TRD_SETTLE_DATE,'1900-01-01') <> ISNULL(T.TRD_SETTLE_DATE,'1900-01-01') THEN CONCAT('Settle Date: '  ,ISNULL(CONVERT(VARCHAR(100),T2.TRD_SETTLE_DATE  ),'blank') , '-> ' , ISNULL(CONVERT(VARCHAR(100),T.TRD_SETTLE_DATE  ), 'blank')) END AS [Settle_Date_Change],          CASE WHEN ISNULL(T2.TRD_TRADE_DATE,'1900-01-01') <> ISNULL(T.TRD_TRADE_DATE,'1900-01-01') THEN CONCAT('Trade Date: '  ,ISNULL(CONVERT(VARCHAR(100),T2.TRD_TRADE_DATE  ),'blank') , '-> ' , ISNULL(CONVERT(VARCHAR(100),T.TRD_TRADE_DATE  ), 'blank')) END [Trade_Date_Change],          CASE WHEN ISNULL(T2.EXECUTION_TIME,'1900-01-01') <> ISNULL(T.EXECUTION_TIME,'')    THEN CONCAT('Execution time: ' ,ISNULL(CONVERT(VARCHAR(100),T2.EXECUTION_TIME  ),'blank') , '-> ' , ISNULL(CONVERT(VARCHAR(100),T.EXECUTION_TIME  ), 'blank')) END AS [Execution_Time_Change]          INTO #changes1          FROM           (SELECT MULTI_FUND_ID, TOUCH_COUNT FROM VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_DMG_TABLE ) AMND          LEFT JOIN #trades T          ON AMND.MULTI_FUND_ID = T.MULTI_FUND_ID AND AMND.TOUCH_COUNT = T.TOUCH_COUNT          OUTER APPLY (SELECT TOP 1 * FROM #trades T2 WHERE T.MULTI_FUND_ID = T2.MULTI_FUND_ID AND T.TOUCH_COUNT > T2.TOUCH_COUNT ORDER BY T2.TOUCH_COUNT DESC) T2                              IF OBJECT_ID('tempdb..#changes2', 'U') IS NOT NULL DROP TABLE #changes2         SELECT           MULTI_FUND_ID,          TOUCH_COUNT,          CONCAT(Price_Change + ', ',Nominal_Change + ', ',Commission_Change + ', ',Settle_Date_Change + ', ',Trade_Date_Change + ', ',Execution_Time_Change + ', ') AS [Change_Record]          INTO #changes2         FROM #changes1                         IF OBJECT_ID('tempdb..#Brkr', 'U') IS NOT NULL DROP TABLE #Brkr                        SELECT DISTINCT                        qt.MULTI_FUND_ID,                        CONVERT(DECIMAL(21,3),qt.QUOTE_VALUE) AS QUOTE_VALUE,                         ISNULL(brk.TRD_COUNTERPARTY,'') AS COUNTERPARTY          INTO #Brkr                FROM VISTA_REPORTING.dbo.QUOTES qt                LEFT JOIN VISTA_REPORTING.dbo.COUNTERPARTIES brk                ON qt.BROKER = brk.COUNTERPARTY_CODE          WHERE NULLIF(qt.QUOTE_VALUE,0) IS NOT NULL          and qt.MULTI_FUND_ID in (SELECT MULTI_FUND_ID from #trades_metadata)          --AND qt.QUOTE_ORIGIN <> 'TRADE'                            IF OBJECT_ID('tempdb..#Broker', 'U') IS NOT NULL DROP TABLE #Broker            SELECT               MULTI_FUND_ID,              STUFF((                  SELECT                          ', ' + ISNULL(COUNTERPARTY,'') + ': ' + ISNULL(CONVERT(VARCHAR(250),QUOTE_VALUE),'')                   FROM #Brkr                   WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)             ORDER BY ', ' + ISNULL(COUNTERPARTY,'') + ': ' + ISNULL(CONVERT(VARCHAR(250),QUOTE_VALUE),'')                   FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')                        ,1,2,'') AS Broker_Quotes            INTO #Broker            FROM #Brkr Results            GROUP BY MULTI_FUND_ID                         IF OBJECT_ID('tempdb..#temp_trd_table', 'U') IS NOT NULL DROP TABLE #temp_trd_table         SELECT DISTINCT           tr.TRADER_FULL_NAME,          tr.SEC_DESC1,           tr.CUSIP,           tr.AUTH_TIME,           tr.ACTIVE_TIME,           tr.DEALING_DESK,           tr.COMMENTS_VALUE,           tr.ORD_NUM         INTO #temp_trd_table          FROM VISTA_REPORTING.dbo.TRD_ORDERS tr                         IF OBJECT_ID('tempdb..#temp_final_master_table', 'U') IS NOT NULL DROP TABLE #temp_final_master_table         SELECT DISTINCT          oc.PM_ORD AS [ORDER],          AMND.TOUCH_COUNT,          T.MULTI_FUND_ID AS MFID,          md.TRD_TRADER AS DEALER,          LTRIM(RTRIM(COALESCE(dd.INITIALS,T.TRD_MODIFIED_BY))) AS [AMENDING_DEALER],          T.[Amendment_Cancellation] AS AMEND_OR_CANCEL,          T.TRD_AMEND_TYPE AS AMEND_TYPE,          T.TRDCOMM_COMMENTS as [DEALER_COMMENT],          TRD.COMMENTS_VALUE as [GENERAL_COMMENT],          T.TRAN_TYPE AS SIDE,          PR.INST_TYPE,          STUFF((                  SELECT DISTINCT                          ', ' + LTRIM(RTRIM(tr.CUSIP))                  FROM #temp_trd_table tr                  WHERE ORD_NUM = T.ORD_NUM                   FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')                ,1,2,'') AS CUSIP,          --TRD.CUSIP,          T.TRD_COUNTERPARTY AS CPTY,          T.TRD_EX_BROKER_CODE as EX_CPTY,          T.TRD_CURRENCY as CCY,          convert(varchar,convert(DECIMAL(30,2),T.TRD_PRICE)) as Px,          fund_conc.Funds_concat as [Fund],          ABS(CONVERT(DECIMAL(15,2),ltrd.TRD_ORIG_FACE)) AS FACE,          T.EXECUTION_TIME as [EXEC_DATE],          T.TRD_AUTH_TIME AS [ENTRY_DATE],          ltrd.TRD_MODIFY_TIME AS MODIFIED_TIME,          ISNULL(PL.FULL_NAME_VENUE,'Manual') as [Platform],          coaLesce(T.ACTIVITY_TYPE_DECODE, T.activity_type) as [Activity],          T.TRD_MODIFIED_BY as MODIFIED_BY,          CASE            WHEN [Amendment_Cancellation] = 'Cancellation'             THEN  'Cancellation - NA'            ELSE             CASE              WHEN LEFT(REVERSE(chng.Change_Record),2) = ' ,'               THEN  LEFT(chng.Change_Record,LEN(chng.Change_Record) - 1)             ELSE chng.Change_Record            END          END as [CHANGE_RECORD],          ABS(CONVERT(DECIMAL(30,2),ltrd.TRD_ORIG_FACE)) as [BOOKED_AMT],          ltrd.TRD_SETTLE_DATE AS [SETTLEMENT_DATE],          T.ISIN as [ISIN],          CASE          WHEN PR.DEALING_DESK = 'DMG' THEN           CASE            WHEN PR.TWEB_CLOSE_DEALING = 1 THEN 'TWEB Close'            WHEN PR.[1615_DEALING] = 1 THEN '1615 Dealing'            WHEN ltrd.ACTIVITY_TYPE = 'MG.FI 1. Proces' THEN 'VPT' END          END AS [METHOD],          CASE          WHEN PR.DEALING_DESK='DMG'           THEN           CASE            WHEN PR.DEBT_DERIV = 'DEBT'             THEN             CASE              WHEN T.TRD_COUPON IS NOT NULL AND i2.TICKER IS NOT NULL AND i2.MATURITY IS NOT NULL               THEN CONCAT(ISNULL(i2.TICKER,''),' ', CAST(ISNULL(T.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))              ELSE  CONCAT(ISNULL(TRD.SEC_DESC1,''),' ', CAST(ISNULL(T.TRD_COUPON, 0) AS NUMERIC(38,2)),' ', ISNULL(FORMAT(i2.MATURITY, 'dd/MM/yyyy'),''))             END             ELSE PR.DESC_INSTMT           END          END AS [DESCRIPTION],           E.BROKER_QUOTES AS COMP_QUOTE,          T.MATURITY as [MATURITY_DATE],          AMND.AMENDMENT_FLAG_CREATETIME AS CREATE_DATE,          AMND.AMENDMENT_FLAG AS EXCEPTION_FLAG,          concat(PR.SM_SEC_GROUP,'/',PR.SM_SEC_TYPE) as [Asset_Type/Subtype],          T.EXECUTION_TYPE_DECODE,          STUFF((                  SELECT DISTINCT             ', ' + LTRIM(RTRIM(tr.ORD_NUM))                  FROM #temp_trd_table tr                  WHERE ORD_NUM = T.ORD_NUM                   FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')                ,1,2,'') AS [Trader Order Number]          --CONCAT(YEAR(TRD.AUTH_TIME),'-',left(datename(m,TRD.AUTH_TIME),3)) AS MONTH_YEAR,          --PR.SM_SEC_GROUP,          --T.TRD_PURPOSE,          --T.ORD_NUM as TRD_ORDER,          --NULL as [SETTLEMENT_DATE]          --t.CLIENT_EXECUTION_NUM,          --T.COMMENTS,          --T.INDICATIVE_COMMENTS,          --T.PLACEMENT_NUM,          --T.EXECUTION_TIME,          --TRD.TRADER_FULL_NAME,          --TRD.SEC_DESC1,          --TRD.AUTH_TIME,          --TRD.ACTIVE_TIME,          --TRD.DEALING_DESK,          --PR.SM_SEC_TYPE,          --PL.ROUTE_DATETIME AS RELEASE_DATETIME,          --T.TRD_ENTRY_TIME,          --PR.PRIMARY_MARKET,          --PR.[Parent_trade_ID],          ----t.FUND,          --null as [Num Parent Trades],          --T.TRD_ENTRY_TIME AS [Entry Date],          --null as [Primary]         INTO #temp_final_master_table         FROM (SELECT MULTI_FUND_ID, TOUCH_COUNT, DEALING_DESK, AMENDMENT_FLAG, AMENDMENT_FLAG_CREATETIME             FROM VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_DMG_TABLE) AMND         INNER JOIN (SELECT DISTINCT TRD_MODIFIED_BY, TRD_COUNTERPARTY, COMMENTS, INDICATIVE_COMMENTS, ORD_NUM, PLACEMENT_NUM, MULTI_FUND_ID,                 EXECUTION_TIME, TRD_AUTH_TIME, EXECUTION_TYPE_DECODE, TRD_PURPOSE, TRD_AMEND_TYPE, Amendment_Cancellation,                TRAN_TYPE, TRD_CURRENCY, TRD_PRICE, TRD_COUPON, TRDCOMM_COMMENTS, ISIN, TRD_ENTRY_TIME, ACTIVITY_TYPE_DECODE,                 ACTIVITY_TYPE, TOUCH_COUNT, CUSIP, TRD_EX_BROKER_CODE, MATURITY            FROM #trades_metadata ) T ON AMND.MULTI_FUND_ID = T.MULTI_FUND_ID AND AMND.TOUCH_COUNT = T.TOUCH_COUNT         LEFT JOIN #temp_trd_table TRD ON TRD.ORD_NUM= T.ORD_NUM         LEFT JOIN (SELECT DISTINCT  ROUTE_DATETIME, VENUE, PLACEMENT_NUM, ORD_NUM, FULL_NAME_VENUE              FROM VISTA_REPORTING.dbo.PLACEMENTS) PL ON PL.PLACEMENT_NUM= T.PLACEMENT_NUM         LEFT JOIN (SELECT DISTINCT SM_SEC_GROUP, SM_SEC_TYPE, INST_TYPE, PRIMARY_MARKET, Parent_trade_ID,DEALING_DESK, TWEB_CLOSE_DEALING,                  [1615_DEALING], MULTI_FUND_ID, DEBT_DERIV, DESC_INSTMT               FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) PR ON PR.MULTI_FUND_ID = T.MULTI_FUND_ID         LEFT JOIN #min_Dealer md ON T.MULTI_FUND_ID = md.MULTI_FUND_ID         LEFT JOIN #changes2 chng ON AMND.MULTI_FUND_ID = chng.MULTI_FUND_ID AND AMND.TOUCH_COUNT = chng.TOUCH_COUNT         OUTER APPLY (SELECT TOP 1 i.* FROM VISTA_REPORTING.dbo.INSTRUMENTS i                         WHERE (i.CUSIP=coalesce(T.CUSIP, TRD.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(T.EXECUTION_TIME, TRD.AUTH_TIME)))                         ORDER BY i.DATE DESC) as i2         LEFT JOIN #Funds_concat fund_conc ON fund_conc.MULTI_FUND_ID=T.MULTI_FUND_ID         LEFT JOIN #Latest_trd ltrd ON ltrd.MULTI_FUND_ID=T.MULTI_FUND_ID AND ltrd.TOUCH_COUNT = AMND.TOUCH_COUNT         LEFT JOIN VISTA_REPORTING.dbo.DEALER_AND_DESK dd ON T.TRD_MODIFIED_BY = dd.ALADDIN_USER_ID         LEFT JOIN #Broker E ON E.MULTI_FUND_ID=T.MULTI_FUND_ID         LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = T.ORD_NUM                          IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_VG_15_AMENDMENT_FLAG_DMG_TABLE', 'U') IS NOT NULL          delete from VISTA_REPORTING.dbo.MASTER_VG_15_AMENDMENT_FLAG_DMG_TABLE         where MFID in (SELECT DISTINCT MULTI_FUND_ID from #trades_metadata)                 IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_VG_15_AMENDMENT_FLAG_DMG_TABLE', 'U') IS NOT NULL         INSERT INTO VISTA_REPORTING.dbo.MASTER_VG_15_AMENDMENT_FLAG_DMG_TABLE         SELECT *         FROM #temp_final_master_table                 ELSE                 SELECT *         INTO VISTA_REPORTING.dbo.MASTER_VG_15_AMENDMENT_FLAG_DMG_TABLE         FROM #temp_final_master_table                 IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES', 'U') IS NOT NULL         INSERT INTO VISTA_REPORTING.dbo.MASTER_TABLE_COMPLETION_TIMES VALUES(         'MASTER_VG_15_AMENDMENT_FLAG_DMG_TABLE', --TABLE_NAME         @START_TIME, --START_TIME         GETDATE(), --END_TIME         DATEDIFF(SECOND, @START_TIME, GETDATE()), --TIME_TAKEN_SECONDS         CAST(GETDATE() as date)) --COMPLETION_DATE                 IF OBJECT_ID('tempdb..#Latest_trd', 'U') IS NOT NULL DROP TABLE #Latest_trd         IF OBJECT_ID('TEMPDB..#FUNDS_CONCAT', 'U') IS NOT NULL DROP TABLE #FUNDS_CONCAT         IF OBJECT_ID('TEMPDB..#MIN_DEALER', 'U') IS NOT NULL DROP TABLE #MIN_DEALER         IF OBJECT_ID('TEMPDB..#TRADES', 'U') IS NOT NULL DROP TABLE #TRADES         IF OBJECT_ID('TEMPDB..#CHANGES1', 'U') IS NOT NULL DROP TABLE #CHANGES1         IF OBJECT_ID('tempdb..#changes2', 'U') IS NOT NULL DROP TABLE #changes2         IF OBJECT_ID('tempdb..#temp_trd_table', 'U') IS NOT NULL DROP TABLE #temp_trd_table                END   --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: MULTI_FUND_EXCEPTION  CreateDate: 2025-06-26 18:10:21.157  ModifyDate: 2025-06-26 18:10:21.157  --- DEFINITION START ---      -- =============================================    -- Author:  <Author,da Costa, David>    -- Create date: <>    -- Description: <Aggregated table showing all     -- MULTI_FUND_ID and any exceptions that have    -- been raised at that level>    -- =============================================            -- ***************VERSION CONTROL***************    --  2018-02-07 WH: Changes made to pull through:     --                  a) the PM initials & any of their comments for all PM orders associated with the MFI    --                  b) the fund/s associated with the MFI    --                  c) The counterparty and value for each quote associated with the MFI    --  2018-08-20 KR: Changes made to pull through the INVNUM field from Trades into the MULTI_FUND_ID_TABLE.    -- *********************************************        CREATE PROCEDURE [dbo].[MULTI_FUND_EXCEPTION]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;                IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades        SELECT           DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_AUTH_TIME        INTO #trades        FROM VISTA_REPORTING.dbo.TRADES             IF OBJECT_ID('tempdb..#trd_orders', 'U') IS NOT NULL DROP TABLE #trd_orders        SELECT           DISTINCT ORD_NUM, DEALING_DESK        INTO #trd_orders        FROM VISTA_REPORTING.dbo.TRD_ORDERS             IF OBJECT_ID('tempdb..#PM_orders', 'U') IS NOT NULL DROP TABLE #PM_orders        SELECT           DISTINCT ORD_NUM, COMMENTS_VALUE, PM        INTO #PM_orders        FROM VISTA_REPORTING.dbo.PM_ORDERS               IF OBJECT_ID('tempdb..#orders_cross', 'U') IS NOT NULL DROP TABLE #orders_cross        SELECT           DISTINCT PM_ORD, TRD_ORD        INTO #orders_cross        FROM VISTA_REPORTING.dbo.ORDERS_CROSS               -- 1.a. Create a temp table with concatenated  PM initials & any of their comments for all PM orders associated with each MFI        IF OBJECT_ID('tempdb..#PMname_comments_concat', 'U') IS NOT NULL DROP TABLE #PMname_comments_concat        --Get list of all PMs and comments against an MFI        SELECT DISTINCT                trd.MULTI_FUND_ID,                ISNULL(PM.PM,'') AS PM,                ISNULL(PM.COMMENTS_VALUE,'') AS COMMENTS_VALUE     INTO #PMname_comments_concat        FROM  #PM_orders PM        INNER JOIN #orders_cross oc        ON PM.ORD_NUM = oc.PM_ORD        INNER JOIN #trd_orders TR        ON oc.TRD_ORD = TR.ORD_NUM        INNER JOIN #trades trd        ON tr.ORD_NUM = trd.ORD_NUM        WHERE PM.PM IS NOT NULL             IF OBJECT_ID('tempdb..#PMname_comments', 'U') IS NOT NULL DROP TABLE #PMname_comments        SELECT           MULTI_FUND_ID,          STUFF((              SELECT                      ', ' + LTRIM(RTRIM(PM)) +                                              CASE                WHEN LTRIM(RTRIM(COMMENTS_VALUE)) <> '' THEN ': ''' + LTRIM(RTRIM(COMMENTS_VALUE)) + ''''               ELSE ''                                             END              FROM #PMname_comments_concat               WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)               FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')                     ,1,2,'') AS Name_comment        INTO #PMname_comments        FROM #PMname_comments_concat Results        GROUP BY MULTI_FUND_ID            --SELECT TOP 100 * FROM #MFI_PMname_comments            -- 1.b. Create a temp table with concatenated fund/s associated with the MFI        IF OBJECT_ID('tempdb..#Fund', 'U') IS NOT NULL DROP TABLE #Fund        SELECT DISTINCT                trd.MULTI_FUND_ID,                ISNULL(trd.PORTFOLIOS_PORTFOLIO_NAME,'') AS Fund,       INVNUM     INTO #Fund        FROM VISTA_REPORTING.dbo.TRADES trd                    IF OBJECT_ID('tempdb..#Funds', 'U') IS NOT NULL DROP TABLE #Funds        SELECT           MULTI_FUND_ID,          STUFF((              SELECT                      ', ' + LTRIM(RTRIM(Fund))              FROM #Fund               WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)               FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')                     ,1,2,'') AS Funds,       STUFF((              SELECT                      ', ' + CONCAT(LTRIM(RTRIM(Fund)), LTRIM(RTRIM(INVNUM)))              FROM #Fund               WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)               FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')                     ,1,2,'') AS Fund_Investment_Number        INTO #Funds        FROM #Fund Results        GROUP BY MULTI_FUND_ID            --SELECT TOP 100 * FROM #MFI_Funds            --1.c. Create a temp table containing the total order value for the trade order at the point in time when the trade was booked            --1.d. Create a temp table containing the counterparty and value for each quote associated with the MFI (except for the actual counterparty)        IF OBJECT_ID('tempdb..#Brkr', 'U') IS NOT NULL DROP TABLE #Brkr                  SELECT DISTINCT                     qt.MULTI_FUND_ID,                     CONVERT(DECIMAL(21,3),qt.QUOTE_VALUE) AS QUOTE_VALUE,                      ISNULL(brk.TRD_COUNTERPARTY,'') AS COUNTERPARTY       INTO #Brkr              FROM VISTA_REPORTING.dbo.QUOTES qt              LEFT JOIN VISTA_REPORTING.dbo.COUNTERPARTIES brk              ON qt.BROKER = brk.COUNTERPARTY_CODE        WHERE NULLIF(qt.QUOTE_VALUE,0) IS NOT NULL        --AND qt.QUOTE_ORIGIN <> 'TRADE'                IF OBJECT_ID('tempdb..#Broker', 'U') IS NOT NULL DROP TABLE #Broker        SELECT           MULTI_FUND_ID,          STUFF((              SELECT                      ', ' + ISNULL(COUNTERPARTY,'') + ': ' + ISNULL(CONVERT(VARCHAR(250),QUOTE_VALUE),'')               FROM #Brkr               WHERE (MULTI_FUND_ID = Results.MULTI_FUND_ID)        ORDER BY COUNTERPARTY               FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')                     ,1,2,'') AS Broker_Quotes        INTO #Broker        FROM #Brkr Results        GROUP BY MULTI_FUND_ID            -- Insert statements for procedure here     IF OBJECT_ID('tempdb..#temp_mf_exc', 'U') IS NOT NULL DROP TABLE #temp_mf_exc         --select * into #temp_mf_exc from (         SELECT distinct      t.MULTI_FUND_ID,      tr.DEALING_DESK,      vg1.QUOTES_OBTAINED AS VG_01_QUOTES_OBTAINED,      vg1.QUOTES_REQUESTED AS VG_01_QUOTES_REQUESTED,      vg1.NUM_INDICATIVE_QUOTES AS VG_01_NUM_INDICATIVE_QUOTES,      pm.Name_comment AS [FM_Name_Comment],      fnd.Funds,      fnd.Fund_Investment_Number,      brk.Broker_Quotes,      0 AS VG_01_3QR,      NULL AS VG_01_3QR_CREATETIME,      0 AS VG_01_3QO,      NULL AS VG_01_3QO_CREATETIME,      vg1.QUOTE_EXCEPTION AS VG_01,      vg1.QE_CREATE_TIME AS VG_01_CREATETIME,      vg2.NON_WINNING_QUOTE_EXCEPTION AS VG_07,      vg2.NWQ_CREATEIME AS VG_07_CREATETIME,      vg6.TIMELY_RECORDING_FLAG AS VG_10,      NULL  AS VG_10_TRADE_TYPE,      CONVERT(VARCHAR(5),DATEDIFF(MINUTE,t.EXECUTION_TIME,t.TRD_AUTH_TIME)) + ' mins' AS VG_10_Timespan,      vg6.TREC_CREATETIME AS VG_10_CREATETIME,      vg7.NAV_CUT_OFF_EXCEPTION AS VG_10_NAV,      vg7.NAV_CREATETIME AS VG_10_NAV_CREATETIME,      vg8.IT_FLAG AS VG_25,      vg8.IT_FLAG_CREATETIME AS VG_25_CREATETIME     INTO #temp_mf_exc     from #trades t     LEFT JOIN #trd_orders tr on tr.ORD_NUM = t.ORD_NUM     LEFT JOIN (SELECT MULTI_FUND_ID, QUOTES_OBTAINED, QUOTES_REQUESTED, NUM_INDICATIVE_QUOTES, QUOTE_EXCEPTION, QE_CREATE_TIME FROM VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_EQ_TABLE) vg1 on vg1.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN (SELECT MULTI_FUND_ID, NON_WINNING_QUOTE_EXCEPTION, NWQ_CREATEIME FROM VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_EQ_TABLE) vg2 on vg2.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN (SELECT MULTI_FUND_ID, TIMELY_RECORDING_FLAG, TREC_CREATETIME FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_EQ_TABLE) vg6 on vg6.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN (SELECT MULTI_FUND_ID, NAV_CUT_OFF_EXCEPTION, NAV_CREATETIME FROM VISTA_STAGING.dbo.VG_10_NAV_CUT_OFF_EQ_TABLE) vg7 on vg7.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN (SELECT MULTI_FUND_ID, IT_FLAG, IT_FLAG_CREATETIME FROM VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_EQ_TABLE) vg8 on vg8.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN #PMname_comments pm ON t.MULTI_FUND_ID = pm.MULTI_FUND_ID     LEFT JOIN #Funds fnd ON t.MULTI_FUND_ID = fnd.MULTI_FUND_ID     LEFT JOIN #Broker brk ON t.MULTI_FUND_ID = brk.MULTI_FUND_ID     where tr.DEALING_DESK = 'Equity'         union         SELECT distinct      t.MULTI_FUND_ID      , tr.DEALING_DESK      , vg3.QUOTES_OBTAINED AS VG_01_QUOTES_OBTAINED      , vg3.QUOTES_REQUESTED AS VG_01_QUOTES_REQUESTED      , vg3.NUM_INDICATIVE_QUOTES AS VG_01_NUM_INDICATIVE_QUOTES      , pm.Name_comment AS [FM_Name_Comment]      , fnd.Funds      , fnd.Fund_Investment_Number      , brk.Broker_Quotes      , vg3.[3QR_EXCEPTION] AS VG_01_3QR      , vg3.[3QR_CREATETIME] AS VG_01_3QR_CREATETIME      , vg3.[3QO_EXCEPTION] AS VG_01_3QO      , vg3.[3QO_CREATETIME] AS VG_01_3QO_CREATETIME      , vg3.QUOTE_EXCEPTION AS VG_01      , vg3.CREATETIME AS VG_01_CREATETIME      , vg4.NWQ_EXCEPTION AS VG_07      , vg4.NWQ_CREATEIME AS VG_07_CREATETIME      , vg5.TIMELY_RECORDING_EXCEPTION AS VG_10      , vg5.TRADE_TYPE AS VG_10_Trade_Type      , vg5.Timespan AS VG_10_Timespan      , vg5.TREC_CREATETIME AS VG_10_CREATETIME      , 0 AS VG_10_NAV      , NULL AS VG_10_NAV_CREATETIME      , vg6.IT_FLAG AS VG_25      , vg6.IT_FLAG_CREATETIME AS VG_25_CREATETIME     from #trades t     LEFT JOIN #trd_orders tr on tr.ORD_NUM = t.ORD_NUM     LEFT JOIN (SELECT MULTI_FUND_ID, QUOTES_OBTAINED, QUOTES_REQUESTED, NUM_INDICATIVE_QUOTES, QUOTE_EXCEPTION, CREATETIME, [3QR_EXCEPTION], [3QR_CREATETIME], [3QO_EXCEPTION], [3QO_CREATETIME] FROM VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI_TABLE) vg3 on vg3  .MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN (SELECT MULTI_FUND_ID, NWQ_EXCEPTION, NWQ_CREATEIME FROM VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_FI_TABLE) vg4 on vg4.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN (SELECT MULTI_FUND_ID, TIMELY_RECORDING_EXCEPTION, TREC_CREATETIME, TRADE_TYPE, Timespan FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FI_TABLE) vg5 on vg5.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN (SELECT MULTI_FUND_ID, IT_FLAG, IT_FLAG_CREATETIME FROM VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_FI_TABLE) vg6 on vg6.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN #PMname_comments pm ON t.MULTI_FUND_ID = pm.MULTI_FUND_ID     LEFT JOIN #Funds fnd ON t.MULTI_FUND_ID = fnd.MULTI_FUND_ID     LEFT JOIN #Broker brk ON t.MULTI_FUND_ID = brk.MULTI_FUND_ID     where tr.DEALING_DESK  = 'Fixed Income'         union         SELECT distinct      t.MULTI_FUND_ID      , tr.DEALING_DESK      , vg3.QUOTES_OBTAINED AS VG_01_QUOTES_OBTAINED      , vg3.QUOTES_REQUESTED AS VG_01_QUOTES_REQUESTED      , 0 AS VG_01_NUM_INDICATIVE_QUOTES      , pm.Name_comment AS [FM_Name_Comment]      , fnd.Funds      , fnd.Fund_Investment_Number      , brk.Broker_Quotes      , vg3.[3QR_EXCEPTION] AS VG_01_3QR      , vg3.[3QR_CREATETIME] AS VG_01_3QR_CREATETIME      , vg3.[3QO_EXCEPTION] AS VG_01_3QO      , vg3.[3QO_CREATETIME] AS VG_01_3QO_CREATETIME      , vg3.QUOTE_EXCEPTION AS VG_01      , vg3.CREATETIME AS VG_01_CREATETIME      , vg4.NWQ_EXCEPTION AS VG_07      , vg4.NWQ_CREATEIME AS VG_07_CREATETIME      , vg5.TIMELY_RECORDING_EXCEPTION AS VG_10      , vg5.TRADE_TYPE AS VG_10_Trade_Type      , vg5.Timespan AS VG_10_Timespan      , vg5.TREC_CREATETIME AS VG_10_CREATETIME      , 0 AS VG_10_NAV      , NULL AS VG_10_NAV_CREATETIME      , vg6.IT_FLAG AS VG_25      , vg6.IT_FLAG_CREATETIME AS VG_25_CREATETIME     from #trades t     LEFT JOIN #trd_orders tr on tr.ORD_NUM = t.ORD_NUM     LEFT JOIN (SELECT MULTI_FUND_ID, QUOTES_OBTAINED, QUOTES_REQUESTED, QUOTE_EXCEPTION, CREATETIME, [3QR_EXCEPTION], [3QR_CREATETIME], [3QO_EXCEPTION], [3QO_CREATETIME] FROM VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_LL_TABLE) vg3 on vg3.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN (SELECT MULTI_FUND_ID, NWQ_EXCEPTION, NWQ_CREATEIME FROM VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_LL_TABLE) vg4 on vg4.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN (SELECT MULTI_FUND_ID, TIMELY_RECORDING_EXCEPTION, TREC_CREATETIME, TRADE_TYPE, Timespan FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_LL_TABLE) vg5 on vg5.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN (SELECT MULTI_FUND_ID, IT_FLAG, IT_FLAG_CREATETIME FROM VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_LL_TABLE) vg6 on vg6.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN #PMname_comments pm ON t.MULTI_FUND_ID = pm.MULTI_FUND_ID     LEFT JOIN #Funds fnd ON t.MULTI_FUND_ID = fnd.MULTI_FUND_ID     LEFT JOIN #Broker brk ON t.MULTI_FUND_ID = brk.MULTI_FUND_ID     where tr.DEALING_DESK  = 'Leveraged Finance'         --)      --as tmp          IF OBJECT_ID('VISTA_REPORTING.dbo.MULTI_FUND_EXCEPTION_TABLE', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.MULTI_FUND_EXCEPTION_TABLE     select *     into VISTA_REPORTING.dbo.MULTI_FUND_EXCEPTION_TABLE     from #temp_mf_exc        IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades    IF OBJECT_ID('tempdb..#trd_orders', 'U') IS NOT NULL DROP TABLE #trd_orders    IF OBJECT_ID('tempdb..#PM_orders', 'U') IS NOT NULL DROP TABLE #PM_orders    IF OBJECT_ID('tempdb..#orders_cross', 'U') IS NOT NULL DROP TABLE #orders_cross    IF OBJECT_ID('tempdb..#PMname_comments_concat', 'U') IS NOT NULL DROP TABLE #PMname_comments_concat    IF OBJECT_ID('tempdb..#PMname_comments', 'U') IS NOT NULL DROP TABLE #PMname_comments    IF OBJECT_ID('tempdb..#Fund', 'U') IS NOT NULL DROP TABLE #Fund    IF OBJECT_ID('tempdb..#Funds', 'U') IS NOT NULL DROP TABLE #Funds    IF OBJECT_ID('tempdb..#Brkr', 'U') IS NOT NULL DROP TABLE #Brkr    IF OBJECT_ID('tempdb..#Broker', 'U') IS NOT NULL DROP TABLE #Broker    IF OBJECT_ID('tempdb..#temp_mf_exc', 'U') IS NOT NULL DROP TABLE #temp_mf_exc    END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: NAV_REFRESH  CreateDate: 2025-06-26 18:10:33.287  ModifyDate: 2025-06-26 18:10:33.287  --- DEFINITION START ---  -- =============================================    -- Author:  <Devereux, Alan>    -- Create date: <27/09/2017>    -- Description: <Stored procedure for transformation of staging data    --     into final NAV table.>    -- =============================================        CREATE PROCEDURE [dbo].[NAV_REFRESH]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        IF OBJECT_ID('VISTA_REPORTING.dbo.NAV', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.NAV          select distinct      n.PULL_DATE,     n.FUND,     n.PORTFOLIO_NAME,     n.PORTFOLIO_CURRENCY,     --f.CURRENCY,     n.NAV_PORT_DATE,     --f.MARKDATE,     --f.GBP_INDEX_RATE,     n.NAV_DATATYPE,     n.NAV_VALUE,     n.NAV_VALUE/f.INDEX_RATE AS NAV_VALUE_USD,     n.NAV_VALUE/f.GBP_INDEX_RATE as NAV_VALUE_GBP    into VISTA_REPORTING.dbo.NAV    from VISTA_STAGING.dbo.NAV n    join VISTA_REPORTING.dbo.FX_RATES f on f.CURRENCY=n.PORTFOLIO_CURRENCY and n.NAV_PORT_DATE=f.MARKDATE        END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: ONE_DAY_PROCESSING_IDS_ALADDIN_REFRESH  CreateDate: 2025-06-26 18:10:44.970  ModifyDate: 2025-06-26 18:10:44.970  --- DEFINITION START ---      CREATE PROCEDURE [dbo].[ONE_DAY_PROCESSING_IDS_ALADDIN_REFRESH]        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.         SET NOCOUNT ON        --We want to get the latest date where all tables ran through successfully    --To do this we look at max completion date for each table    --Then take then min across all of those     IF OBJECT_ID('tempdb..#max_comp_date_per_table', 'U') IS NOT NULL DROP TABLE #max_comp_date_per_table     select TABLE_NAME,       MAX(COMPLETION_DATE) as COMPLETION_DATE     into #max_comp_date_per_table     from Vista_Reporting.dbo.MASTER_TABLE_COMPLETION_TIMES     group by TABLE_NAME         DECLARE @PULL_DATE_START as date     SET @PULL_DATE_START = COALESCE((select MIN(COMPLETION_DATE) from #max_comp_date_per_table), '2018-01-01')         IF OBJECT_ID('tempdb..#todays_pm_ords', 'U') IS NOT NULL DROP TABLE #todays_pm_ords     select distinct       ORD_NUM     into #todays_pm_ords     from Vista_Reporting.dbo.PM_ORDERS pm      WHERE    pm.PULL_DATE   >= @PULL_DATE_START         IF OBJECT_ID('tempdb..#todays_trades', 'U') IS NOT NULL DROP TABLE #todays_trades     select distinct       ORD_NUM,      MULTI_FUND_ID     into #todays_trades     from Vista_Reporting.dbo.TRADES trd     WHERE    trd.PULL_DATE   >= @PULL_DATE_START         IF OBJECT_ID('tempdb..#todays_trd_orders', 'U') IS NOT NULL DROP TABLE #todays_trd_orders     select distinct       ORD_NUM     into #todays_trd_orders     from Vista_Reporting.dbo.TRD_ORDERS trdo     WHERE    trdo.PULL_DATE   >= @PULL_DATE_START         IF OBJECT_ID('tempdb..#todays_placements', 'U') IS NOT NULL DROP TABLE #todays_placements     select distinct       ORD_NUM,      PLACEMENT_NUM     into #todays_placements     from Vista_Reporting.dbo.PLACEMENTS pla     WHERE    pla.PULL_DATE   >= @PULL_DATE_START             IF OBJECT_ID('VISTA_REPORTING.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN      SELECT DISTINCT pm.ORD_NUM as PM_ORD      ,oc.TRD_ORD      ,trd.MULTI_FUND_ID      ,pla.PLACEMENT_NUM      ,'PM_ORDERS' as ROW_ORIGIN     into VISTA_REPORTING.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN     from #todays_pm_ords pm      LEFT JOIN Vista_Reporting.dbo.ORDERS_CROSS oc on oc.PM_ORD = pm.ORD_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID FROM Vista_Reporting.dbo.TRADES) trd on trd.ORD_NUM = oc.TRD_ORD     LEFT JOIN (SELECT DISTINCT ORD_NUM, PLACEMENT_NUM FROM Vista_Reporting.dbo.PLACEMENTS) pla on pla.ORD_NUM = oc.TRD_ORD         UNION ALL         SELECT DISTINCT oc.PM_ORD      ,trd.ORD_NUM as TRD_ORD      ,trd.MULTI_FUND_ID      ,pla.PLACEMENT_NUM      ,'TRADES' as ROW_ORIGIN     from #todays_trades trd     LEFT JOIN Vista_Reporting.dbo.ORDERS_CROSS oc on oc.TRD_ORD = trd.ORD_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM, PLACEMENT_NUM FROM Vista_Reporting.dbo.PLACEMENTS) pla on pla.ORD_NUM = trd.ORD_NUM         UNION ALL         SELECT DISTINCT oc.PM_ORD      ,trdo.ORD_NUM as TRD_ORD      ,trd.MULTI_FUND_ID      ,pla.PLACEMENT_NUM      ,'TRD_ORDERS' as ROW_ORIGIN     from #todays_trd_orders trdo     LEFT JOIN Vista_Reporting.dbo.ORDERS_CROSS oc on oc.TRD_ORD = trdo.ORD_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID FROM Vista_Reporting.dbo.TRADES) trd on trd.ORD_NUM = trdo.ORD_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM, PLACEMENT_NUM FROM Vista_Reporting.dbo.PLACEMENTS) pla on pla.ORD_NUM = trdo.ORD_NUM         UNION ALL         SELECT DISTINCT oc.PM_ORD      ,pla.ORD_NUM as TRD_ORD      ,trd.MULTI_FUND_ID      ,pla.PLACEMENT_NUM      ,'PLACEMENTS' as ROW_ORIGIN     from #todays_placements pla     LEFT JOIN Vista_Reporting.dbo.ORDERS_CROSS oc on oc.TRD_ORD = pla.ORD_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID FROM Vista_Reporting.dbo.TRADES) trd on trd.ORD_NUM = pla.ORD_NUM        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: ONE_DAY_PROCESSING_IDS_ALADDIN_REFRESH_SECONDARY  CreateDate: 2025-06-26 18:11:05.850  ModifyDate: 2025-06-26 18:11:05.850  --- DEFINITION START ---  -- =============================================    -- Author:  <Miter, Matej>    -- Create date: <19/06/2021>    -- Description: <Stored procedure to create a secondary check within Aladdin data to avoid having differences between staging and reporting area>    -- =============================================        CREATE  PROCEDURE [dbo].[ONE_DAY_PROCESSING_IDS_ALADDIN_REFRESH_SECONDARY]        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.         SET NOCOUNT ON          IF OBJECT_ID('tempdb..#secondary_check_combined', 'U') IS NOT NULL DROP TABLE #secondary_check_combined     select try_cast(ORD_NUM as varchar) as ID     into #secondary_check_combined     from ##secondary_IS_check     UNION ALL      select try_cast(ORD_NUM as varchar) as ID     from ##secondary_HL_check     UNION ALL      select try_cast(ORD_NUM as varchar) as ID     from ##secondary_OP_EQ_check     UNION ALL      select try_cast(ORD_NUM as varchar) as ID     from ##secondary_OP_FI_check     UNION ALL      select try_cast(ORD_NUM as varchar) as ID     from ##secondary_OP_LL_check     UNION ALL      select try_cast(ORD_NUM as varchar) as ID     from ##secondary_OP_DMG_check         IF OBJECT_ID('tempdb..#todays_pm_ords_secondary', 'U') IS NOT NULL DROP TABLE #todays_pm_ords_secondary     select distinct       ORD_NUM     into #todays_pm_ords_secondary     from Vista_Reporting.dbo.PM_ORDERS pm      WHERE    ORD_NUM in (select ID from #secondary_check_combined)         IF OBJECT_ID('tempdb..#todays_trades_secondary', 'U') IS NOT NULL DROP TABLE #todays_trades_secondary     select distinct       ORD_NUM,      MULTI_FUND_ID     into #todays_trades_secondary     from Vista_Reporting.dbo.TRADES trd     WHERE   ORD_NUM in (select ID from #secondary_check_combined)         IF OBJECT_ID('tempdb..#todays_trd_orders_secondary', 'U') IS NOT NULL DROP TABLE #todays_trd_orders_secondary     select distinct       ORD_NUM     into #todays_trd_orders_secondary     from Vista_Reporting.dbo.TRD_ORDERS trdo     WHERE    ORD_NUM in (select ID from #secondary_check_combined)         IF OBJECT_ID('tempdb..#todays_placements_secondary', 'U') IS NOT NULL DROP TABLE #todays_placements_secondary     select distinct       ORD_NUM,      PLACEMENT_NUM     into #todays_placements_secondary     from Vista_Reporting.dbo.PLACEMENTS pla     WHERE    TRY_CAST(ORD_NUM as varchar) in (select ID from #secondary_check_combined )              INSERT INTO VISTA_REPORTING.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN     SELECT * FROM (           SELECT DISTINCT pm.ORD_NUM as PM_ORD      ,oc.TRD_ORD      ,trd.MULTI_FUND_ID      ,pla.PLACEMENT_NUM      ,'PM_ORDERS' as ROW_ORIGIN     from #todays_pm_ords_secondary pm      LEFT JOIN Vista_Reporting.dbo.ORDERS_CROSS oc on oc.PM_ORD = pm.ORD_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID FROM Vista_Reporting.dbo.TRADES) trd on trd.ORD_NUM = oc.TRD_ORD     LEFT JOIN (SELECT DISTINCT ORD_NUM, PLACEMENT_NUM FROM Vista_Reporting.dbo.PLACEMENTS) pla on pla.ORD_NUM = oc.TRD_ORD          UNION               SELECT DISTINCT oc.PM_ORD      ,trd.ORD_NUM as TRD_ORD      ,trd.MULTI_FUND_ID      ,pla.PLACEMENT_NUM      ,'TRADES' as ROW_ORIGIN     from #todays_trades_secondary trd     LEFT JOIN Vista_Reporting.dbo.ORDERS_CROSS oc on oc.TRD_ORD = trd.ORD_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM, PLACEMENT_NUM FROM Vista_Reporting.dbo.PLACEMENTS) pla on pla.ORD_NUM = trd.ORD_NUM         UNION          SELECT DISTINCT oc.PM_ORD      ,trdo.ORD_NUM as TRD_ORD      ,trd.MULTI_FUND_ID      ,pla.PLACEMENT_NUM      ,'TRD_ORDERS' as ROW_ORIGIN     from #todays_trd_orders_secondary trdo     LEFT JOIN Vista_Reporting.dbo.ORDERS_CROSS oc on oc.TRD_ORD = trdo.ORD_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID FROM Vista_Reporting.dbo.TRADES) trd on trd.ORD_NUM = trdo.ORD_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM, PLACEMENT_NUM FROM Vista_Reporting.dbo.PLACEMENTS) pla on pla.ORD_NUM = trdo.ORD_NUM          UNION          SELECT DISTINCT oc.PM_ORD      ,pla.ORD_NUM as TRD_ORD      ,trd.MULTI_FUND_ID      ,pla.PLACEMENT_NUM      ,'PLACEMENTS' as ROW_ORIGIN     from #todays_placements_secondary pla     LEFT JOIN Vista_Reporting.dbo.ORDERS_CROSS oc on oc.TRD_ORD = pla.ORD_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID FROM Vista_Reporting.dbo.TRADES) trd on trd.ORD_NUM = pla.ORD_NUM) ONE_DAY_PROCESSING_IDS_ALADDIN             END            --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: ONE_DAY_PROCESSING_IDS_CASH_REFRESH  CreateDate: 2025-06-26 18:11:18.527  ModifyDate: 2025-06-26 18:11:18.527  --- DEFINITION START ---      CREATE PROCEDURE [dbo].[ONE_DAY_PROCESSING_IDS_CASH_REFRESH]        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.         SET NOCOUNT ON        --We want to get the latest date where all tables ran through successfully    --To do this we look at max completion date for each table    --Then take then min across all of those    IF OBJECT_ID('tempdb..#max_comp_date_per_table', 'U') IS NOT NULL DROP TABLE #max_comp_date_per_table    select TABLE_NAME,      MAX(COMPLETION_DATE) as COMPLETION_DATE    into #max_comp_date_per_table    from Vista_Reporting.dbo.MASTER_TABLE_COMPLETION_TIMES    group by TABLE_NAME        DECLARE @PULL_DATE_START as date    set @PULL_DATE_START = COALESCE((select MIN(COMPLETION_DATE) from #max_comp_date_per_table), '2018-01-01')        --No need for cash bank rates as this is a nested field from cash trades    IF OBJECT_ID('tempdb..#todays_cash_ords', 'U') IS NOT NULL DROP TABLE #todays_cash_ords    select distinct      ORDER_ID    into #todays_cash_ords    from Vista_Reporting.dbo.CASH_ORDERS co    WHERE    co.PULL_DATE   >= @PULL_DATE_START            IF OBJECT_ID('tempdb..#todays_cash_trades', 'U') IS NOT NULL DROP TABLE #todays_cash_trades    select distinct      TRANSACTION_NUMBER     ,ORDER_ID    into #todays_cash_trades    from Vista_Reporting.dbo.CASH_TRADES ct    WHERE    ct.PULL_DATE   >= @PULL_DATE_START        IF OBJECT_ID('tempdb..#todays_cash_ref_rates', 'U') IS NOT NULL DROP TABLE #todays_cash_ref_rates    select distinct      TRANSACTION_NUMBER    into #todays_cash_ref_rates    from Vista_Reporting.dbo.CASH_REFERENCE_RATES crr    WHERE    crr.PULL_DATE   >= @PULL_DATE_START        IF OBJECT_ID('VISTA_REPORTING.dbo.ONE_DAY_PROCESSING_IDS_CASH', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.ONE_DAY_PROCESSING_IDS_CASH    SELECT DISTINCT co.ORDER_ID,            ct.TRANSACTION_NUMBER,          'CASH_ORDERS' as ROW_ORIGIN    INTO VISTA_REPORTING.dbo.ONE_DAY_PROCESSING_IDS_CASH    FROM #todays_cash_ords co    LEFT JOIN Vista_Reporting.dbo.CASH_TRADES ct on co.ORDER_ID = ct.ORDER_ID        UNION ALL        SELECT DISTINCT co.ORDER_ID,           ct.TRANSACTION_NUMBER,        'CASH_TRADES' as ROW_ORIGIN    FROM #todays_cash_trades ct    LEFT JOIN Vista_Reporting.dbo.CASH_ORDERS co on ct.ORDER_ID = co.ORDER_ID        UNION ALL        SELECT DISTINCT co.ORDER_ID,           crr.TRANSACTION_NUMBER,        'CASH_REFERENCE_RATES' as ROW_ORIGIN    FROM #todays_cash_ref_rates crr    LEFT JOIN Vista_Reporting.dbo.CASH_TRADES ct on crr.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER    LEFT JOIN Vista_Reporting.dbo.CASH_ORDERS co on co.ORDER_ID = ct.ORDER_ID        END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: ONE_DAY_PROCESSING_IDS_FX_REFRESH  CreateDate: 2025-06-26 18:11:29.183  ModifyDate: 2025-06-26 18:11:29.183  --- DEFINITION START ---      CREATE PROCEDURE [dbo].[ONE_DAY_PROCESSING_IDS_FX_REFRESH]        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.         SET NOCOUNT ON         --We want to get the latest date where all tables ran through successfully     --To do this we look at max completion date for each table     --Then take then min across all of those     IF OBJECT_ID('tempdb..#max_comp_date_per_table', 'U') IS NOT NULL DROP TABLE #max_comp_date_per_table     SELECT TABLE_NAME,       MAX(COMPLETION_DATE) as COMPLETION_DATE     INTO #max_comp_date_per_table     FROM Vista_Reporting.dbo.MASTER_TABLE_COMPLETION_TIMES     GROUP BY TABLE_NAME             DECLARE @PULL_DATE_START AS DATE     SET @PULL_DATE_START = COALESCE((select MIN(COMPLETION_DATE) from #max_comp_date_per_table), '2018-01-01')             --No need for cash bank rates as this is a nested field from cash trades     IF OBJECT_ID('tempdb..#todays_fx_ords', 'U') IS NOT NULL DROP TABLE #todays_fx_ords     SELECT DISTINCT       FXM_ORDER_ID     INTO #todays_fx_ords     FROM Vista_Reporting.dbo.FX_ORDERS fxo     WHERE fxo.PULL_DATE >= @PULL_DATE_START             IF OBJECT_ID('tempdb..#todays_fx_trades', 'U') IS NOT NULL DROP TABLE #todays_fx_trades     SELECT DISTINCT       TRADE_ID      ,ORDER_ID     INTO #todays_fx_trades     FROM Vista_Reporting.dbo.FX_TRADES fxt     WHERE fxt.PULL_DATE >= @PULL_DATE_START             IF OBJECT_ID('VISTA_REPORTING.dbo.ONE_DAY_PROCESSING_IDS_FX', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.ONE_DAY_PROCESSING_IDS_FX     SELECT DISTINCT fxo.FXM_ORDER_ID,          fxt.TRADE_ID,           'FX_ORDERS' as ROW_ORIGIN     INTO VISTA_REPORTING.dbo.ONE_DAY_PROCESSING_IDS_FX     FROM #todays_fx_ords fxo     LEFT JOIN Vista_Reporting.dbo.FX_TRADES fxt on fxo.FXM_ORDER_ID = fxt.ORDER_ID         UNION ALL         SELECT DISTINCT fxt.ORDER_ID as FXM_ORDER_ID,         fxt.TRADE_ID,         'FX TRADES' as ROW_ORIGIN     FROM #todays_fx_trades fxt        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: OPERATIONAL_EFFICIENCY_REFRESH  CreateDate: 2025-06-26 18:11:42.627  ModifyDate: 2025-06-26 18:11:42.627  --- DEFINITION START ---  -- =============================================    -- Author:  <Michael Nasra>    -- Create date: <03/03/2020>    -- Description: <Refreshes the Operational Efficiency Table>        -- ***************VERSION CONTROL***************        --2022-01-27, Matej Miter; Created for Jira:    --SURVG-563 - New Cash Report Instructor to dealer 2022    -- =============================================    CREATE PROCEDURE [dbo].[OPERATIONAL_EFFICIENCY_REFRESH]        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         IF OBJECT_ID('tempdb..#cm_fx_statuses', 'U') IS NOT NULL DROP TABLE #cm_fx_statuses     SELECT DISTINCT      aud.ID      ,CASE       WHEN CHARINDEX('_10_', ID) > 0 THEN ct.TIMELY_RECORDING_EXCEPTION_REASON       WHEN CHARINDEX('_607_', ID) > 0 THEN ct.BEST_EXECUTION_RR_EXCEPTION_REASON       WHEN CHARINDEX('_608_', ID) > 0 THEN ct.TA_KNOCKBACK_EXCEPTION_REASON       WHEN CHARINDEX('_9_', ID) > 0 THEN COALESCE(ct.TIMELY_EXECUTION_EXCEPTION_REASON, co.TIMELY_ACKNOWLEDGEMENT_EXCEPTION_REASON)       WHEN CHARINDEX('_602_', ID) > 0 THEN co.HOLDOVER_REASON       WHEN CHARINDEX('_602_', ID) > 0 THEN co.HOLDOVER_REASON      END AS CM_FXM_REASON     INTO #cm_fx_statuses     FROM Vista_Reporting.dbo.AUDIT_TABLE_CASH aud     LEFT JOIN Vista_Reporting.dbo.CASH_ORDERS co ON co.ORDER_ID = aud.ORDER_ID     LEFT JOIN Vista_Reporting.dbo.CASH_TRADES ct ON ct.TRANSACTION_NUMBER = aud.TRANSACTION_NUMBER         UNION         SELECT DISTINCT      aud.ID      --,fxo.FXM_ORDER_ID      --,fxt.TRADE_ID0      ,CASE       WHEN CHARINDEX('_10_', ID) > 0 THEN fxt.TIMELY_RECORDING_REASON       WHEN CHARINDEX('_607_', ID) > 0 THEN COALESCE(NULLIF(fxt.PRICE_REASON, ''), NULLIF(fxt.THREE_BANK_QUOTES_EXCEPTION_REASON, ''), NULLIF(fxt.SPOT_TOLERANCE_REASON, ''))       WHEN CHARINDEX('_501_', ID) > 0 THEN fxt.SPOT_TOLERANCE_REASON       WHEN CHARINDEX('_608_', ID) > 0 THEN fxt.CANCEL_REASON       WHEN CHARINDEX('_604_', ID) > 0 THEN fxo.SEQUENCE_EXCEPTION_REASON       WHEN CHARINDEX('_9_', ID) > 0 THEN COALESCE(fxt.TIMELY_EXECUTION_REASON, fxo.TIMELY_EXC_REASON_NOT_ACK)       WHEN CHARINDEX('_602_', ID) > 0 THEN fxo.HOLDOVER_REASON      END AS FXM_REASON     FROM Vista_Reporting.dbo.AUDIT_TABLE_FX aud     LEFT JOIN Vista_Reporting.dbo.FX_ORDERS fxo ON fxo.FXM_ORDER_ID = aud.ORDER_ID     LEFT JOIN Vista_Reporting.dbo.FX_TRADES fxt ON fxt.TRADE_ID = aud.TRANSACTION_NUMBER             --We order by ID, TOUCH_COUNT so that we can see the status from and status to by using the lead function below     IF OBJECT_ID('tempdb..#status_getter', 'U') IS NOT NULL DROP TABLE #status_getter     select distinct      row_number() over (ORDER BY ert.ID, ert.TOUCH_COUNT) as row_no      ,fsut.id      ,mest.EXCEPTION_TYPE      ,ert.TOUCH_COUNT      ,CASE --If the next touch count is 1 then that's the end of the current ID       WHEN lead(ert.TOUCH_COUNT, 1, 1) over (ORDER BY ert.ID, ert.TOUCH_COUNT) = 1 then 'END'       WHEN ert.TOUCH_COUNT IS NULL THEN 'END'        ELSE cast(lead(ert.TOUCH_COUNT, 1, 1) over (ORDER BY ert.ID, ert.TOUCH_COUNT) as nvarchar(10))      END as TOUCH_COUNT_TO      ,st.STATUS_CODE as STATUS_FROM      ,CASE --If the next touch count is 1 then the status the ID is going to is the current status otherwise it's the next row's status       WHEN lead(ert.TOUCH_COUNT, 1, 1) over (ORDER BY ert.ID, ert.TOUCH_COUNT) = 1 then fsut.STATUS       ELSE lead(st.STATUS_CODE,  1, 1) over (ORDER BY ert.ID, ert.TOUCH_COUNT)      END as STATUS_TO       ,fsut.STATUS as CURRENT_STATUS      ,mest.DEALER      ,UR.name as REVIEWER      ,COALESCE(NULLIF(ert.REASON, ''), cf_s.CM_FXM_REASON, 'Unassigned Rationale') AS REASON      ,ert.COMMENT      ,fsut.DEALING_DESK      ,ert.UPDATED     into #status_getter     from VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE fsut      left join VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE ert on fsut.ID = ert.id     left join VISTA_REPORTING.dbo.STATUS_TABLE st on st.STATUS = ert.STATUS     inner join (select distinct ID_VG_NUMBER, EXCEPTION_TYPE, DEALER from Vista_Reporting.dbo.MASTER_EXECUTIVE_SUMMARY_TABLE) mest on mest.ID_VG_NUMBER = fsut.ID     left join VISTA_REPORTING.dbo.USER_RELATIONSHIP_FI_LL_EQ ur on ur.ID = ert.USERID     LEFT JOIN #cm_fx_statuses cf_s ON cf_s.ID = fsut.ID     WHERE mest.Exception_Type not in ('Counterparty Direction', 'Gifts and Hospitality') --The business does not want to see these reports             --Pull create time from all the audit tables dependent on dealing desk     IF OBJECT_ID('tempdb..#add_create_time', 'U') IS NOT NULL DROP TABLE #add_create_time     select distinct st.*     ,coalesce(au.CREATE_TIME, auc.create_time, aud.create_time,  auf.create_Time) as CREATE_TIME     into #add_create_time     from #status_getter st     left join Vista_REPORTING.dbo.AUDIT_TABLE au on au.id = st.id and st.DEALING_DESK = au.DEALER_DESK     left join Vista_REPORTING.dbo.AUDIT_TABLE_CASH auc on auc.id = st.id and st.DEALING_DESK = auc.DEALER_DESK     left join Vista_REPORTING.dbo.AUDIT_TABLE_DMG aud on aud.id = st.id and st.DEALING_DESK = aud.DEALER_DESK     left join Vista_REPORTING.dbo.AUDIT_TABLE_FX auf on auf.id = st.id and st.DEALING_DESK = auf.DEALER_DESK         --The time that the traders are expected to start reviewing exceptions HH:MM:SS, can be changed if required     declare @Traders_start_time nvarchar(8)     set @Traders_start_time = '07:00:00'          --The time that the traders are expected to leave work and not review excptions HH:MM:SS, can be changed if required     declare @Traders_end_time nvarchar(8)     set @Traders_end_time = '19:00:00'           --Rebase create time and updated time so that actions on weekends and evenings are rebased to weekday mornings     --First table deals with early mornings & evenings being moved to the trader start time     IF OBJECT_ID('tempdb..#rebase_create_time_to_trader_start_time', 'U') IS NOT NULL DROP TABLE #rebase_create_time_to_trader_start_time     select *,     case        --If exception is raised early morning then make rebased time the trader start time      when cast(CREATE_TIME as time) < @Traders_start_time then DATEADD(day, DATEDIFF(day, 0, CREATE_TIME),@Traders_start_time)           --If raised in the day this will be because our process failed, so we should push this to the next day at the trader start time      else DATEADD(day, 1, DATEADD(day, DATEDIFF(day, 0, CREATE_TIME), @Traders_start_time ))      end as CREATE_TIME_TRADER_WORKING_HOURS,         case       --If updated early morning then make rebased time the traders start time      when cast(UPDATED as time) < @Traders_start_time then DATEADD(day, DATEDIFF(day, 0, UPDATED), @Traders_start_time)          --If updated in the evening this means they worked out of hours so this should be rebased to the next morning to avoid punishing the next person      WHEN cast(UPDATED as time) > @Traders_end_time THEN DATEADD(day, 1, DATEADD(day, DATEDIFF(day, 0, UPDATED),  @Traders_start_time ))       ELSE UPDATED     end as UPDATED_TRADER_WORKING_HOURS         into #rebase_create_time_to_trader_start_time     from #add_create_time         --Second table checks if it was raised on a weekend and if so pushes it forward to Monday     IF OBJECT_ID('tempdb..#rebase_create_time_weekends', 'U') IS NOT NULL DROP TABLE #rebase_create_time_weekends     select *,     case --SQL counts Sunday as the 1st day of the week and Saturday as the 7th day      when datepart(weekday, CREATE_TIME_TRADER_WORKING_HOURS) = 7 --Saturday add 2 days       then DATEADD(day, 2, DATEADD(day, DATEDIFF(day, 0, CREATE_TIME_TRADER_WORKING_HOURS), @Traders_start_time))           when datepart(weekday, CREATE_TIME_TRADER_WORKING_HOURS) = 1 --Sunday add 1 day       then DATEADD(day, 1, DATEADD(day, DATEDIFF(day, 0, CREATE_TIME_TRADER_WORKING_HOURS), @Traders_start_time))           else CREATE_TIME_TRADER_WORKING_HOURS         end as CREATE_TIME_REBASED,         case --SQL counts Sunday as the 1st day of the week and Saturday as the 7th day      when datepart(weekday, UPDATED_TRADER_WORKING_HOURS) = 7 --Saturday add 2 days       then DATEADD(day, 2, DATEADD(day, DATEDIFF(day, 0, UPDATED_TRADER_WORKING_HOURS), @Traders_start_time))           when datepart(weekday, UPDATED_TRADER_WORKING_HOURS) = 1 --Sunday add 1 day       then DATEADD(day, 1, DATEADD(day, DATEDIFF(day, 0, UPDATED_TRADER_WORKING_HOURS), @Traders_start_time))           else UPDATED_TRADER_WORKING_HOURS         end as UPDATED_REBASED         into #rebase_create_time_weekends     from #rebase_create_time_to_trader_start_time             IF OBJECT_ID('tempdb..#initial_action_time', 'U') IS NOT NULL DROP TABLE #initial_action_time     select *,     case      when TOUCH_COUNT = 1 THEN CREATE_TIME_REBASED --First action time is between create time and action      else lag (UPDATED_REBASED,1) OVER (ORDER BY row_no) --All other action times between the last action and the current action      end as ACTION_FROM_TIME     into #initial_action_time     from #rebase_create_time_weekends             --Now count the number of holiday days/weekends between the 2 days so can be subtracted from the total time     IF OBJECT_ID('tempdb..#holiday_and_weekends', 'U') IS NOT NULL DROP TABLE #holiday_and_weekends     select *,     --Holidays reference table contains all public holidays that need to be counted     (select      count(*)       From Vista_STAGING.dbo.holidays       where COUNTRY_CODE = 'GB'       and convert(date,CLOSURE_DATES,103) >= ACTION_FROM_TIME        and convert(date,CLOSURE_DATES,103) <= UPDATED_REBASED)      as NUMBER_OF_HOLIDAY_DAYS,         --Now calculate number of weekend days       (DATEDIFF(wk, ACTION_FROM_TIME, UPDATED_REBASED) * 2) --2 weekend days per week        +(CASE WHEN DATENAME(dw, ACTION_FROM_TIME)  = 'Sunday'   THEN 1 ELSE 0 END) -- Add an extra day if the week starts on a sunday as the full week isnt counted        +(CASE WHEN DATENAME(dw, UPDATED_REBASED)   = 'Saturday' THEN 1 ELSE 0 END) -- Add an extra day if it ends on a saturday as the full week isnt counted        as NUMBER_OF_WEEKEND_DAYS     into #holiday_and_weekends     from #initial_action_time     order by row_no asc         --Amount of time outside of working hours per day to be discounted     declare @Time_discount_per_day int      set @Time_discount_per_day = 1440 - datediff(minute, @Traders_start_time, @Traders_end_time)         --Amount of extra time to subtract for each weekend and holiday day     declare @Time_discount_per_day_off int     set @Time_discount_per_day_off = datediff(minute, @Traders_start_time, @Traders_end_time)         --We now calculate the time difference between ACTION_FROM_TIME and UPDATED_REBASED but subtract time off due to weekends/holidays     IF OBJECT_ID('tempdb..#time_taken', 'U') IS NOT NULL DROP TABLE #time_taken     select *,       datediff(minute,ACTION_FROM_TIME,UPDATED_REBASED) --First take total time difference betwen 2 values     -(datediff(day,ACTION_FROM_TIME,UPDATED_REBASED)    * @Time_discount_per_day) --Find the total number of days between them and subtract mornings and evenings for each     -((NUMBER_OF_WEEKEND_DAYS + NUMBER_OF_HOLIDAY_DAYS) * @Time_discount_per_day_off) --Also subtract the working hours for holidays/weekends     as TIME_TAKEN_MINS_UNRAMPED     into #time_taken     from #holiday_and_weekends         --There are cases where an exception has been deleted and re-raised after comments have been made     --as well as other edge cases which means the time taken can be negative.      --To mitigate these we say if the time taken is negative then set it to 0     IF OBJECT_ID('tempdb..#ramp_function', 'U') IS NOT NULL DROP TABLE #ramp_function     select *,     case when TIME_TAKEN_MINS_UNRAMPED < 0 then 0        else TIME_TAKEN_MINS_UNRAMPED      end as TIME_TAKEN_MINS,           case when TIME_TAKEN_MINS_UNRAMPED < 0 then 0        else cast(cast(TIME_TAKEN_MINS_UNRAMPED as decimal(38,14))/datediff(minute, @Traders_start_time, @Traders_end_time)  as decimal(38,2))     end as TIME_TAKEN_DAYS --Use amount of mins in working day to determine number of days taken         into #ramp_function     from #time_taken         --Now we have calculated the amount of time per action we can analyse how different teams perform     --Table below extracts the team (1A1, 1A2, 1A3 are all in the A team)     IF OBJECT_ID('tempdb..#action_team', 'U') IS NOT NULL DROP TABLE #action_team     select *      ,right(left(STATUS_FROM,2),1) as ACTION_FROM_TEAM      ,ISNULL(right(left(STATUS_TO,2),1), right(left(CURRENT_STATUS,2),1)) as ACTION_TO_TEAM     into #action_team     from #ramp_function         --Add in flags that show whether the status has changed and whether the exception moved teams     IF OBJECT_ID('tempdb..#moved_teams', 'U') IS NOT NULL DROP TABLE #moved_teams     select *      ,case when ACTION_FROM_TEAM <> ACTION_TO_TEAM  then 1 else 0 end as MOVED_TEAMS_FLAG      ,case when STATUS_FROM  <> STATUS_TO    then 1 else 0 end as MOVED_STATUS_FLAG     into #moved_teams     from #action_team         IF OBJECT_ID('VISTA_REPORTING.DBO.OPERATIONAL_EFFICIENCY', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.DBO.OPERATIONAL_EFFICIENCY     SELECT *     INTO VISTA_REPORTING.DBO.OPERATIONAL_EFFICIENCY     FROM #moved_teams         ---------------------------------------------------------------------------     --Most recent rationales/comments section         IF OBJECT_ID('tempdb..#vista_reason', 'U') IS  NOT NULL DROP TABLE #vista_reason    SELECT DISTINCT     e.[ID],      e.[REASON],     e.[COMMENT],     e.[STATUS],     e.[TOUCH_COUNT]    INTO #vista_reason    FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE e    inner join (SELECT        [ID],        MAX(touch_count) as [MAX_TOUCH],        MAX(CREATED) as [MAX_CREATE_TIME]       FROM VISTA_REPORTING.dbo.EXCEPTION_REASON_TABLE       WHERE [STATUS] in ('For Review','With Dealer','With Reviewer','C&A Review Request') and NULLIF([REASON],'') is not null       --the above condition around status ensures that we only consider exceptions coming from the Dealing Desk       --only dealing desk has the ability to flag false positive exceptions       GROUP BY [ID]) a     on a.[ID] = e.[ID] and a.[MAX_TOUCH] = e.[TOUCH_COUNT] AND a.[MAX_CREATE_TIME] = e.[CREATED]        IF OBJECT_ID('tempdb..#temp_exception_table_cash', 'U') IS NOT NULL DROP TABLE #temp_exception_table_cash    SELECT *     INTO #temp_exception_table_cash    FROM (SELECT DISTINCT CONCAT(timrec.[TRANSACTION_NUMBER],'_10_',timrec.[SOURCE]) as ID,          CASE WHEN timrec.[VG_10] = 1 THEN           CASE WHEN NULLIF(e.[REASON],'') is null and ct.[TIMELY_RECORDING_EXCEPTION_REASON] is not null           THEN CAST(ct.[TIMELY_RECORDING_EXCEPTION_REASON] as varchar(500))          ELSE COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale')          END          ELSE NULL          END AS [1A_REASON]     FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_CASH_RR_TABLE timrec     left join #vista_reason e on CONCAT(timrec.[TRANSACTION_NUMBER],'_10_',timrec.[SOURCE]) = e.[ID]     left join (SELECT DISTINCT TRANSACTION_NUMBER, TIMELY_RECORDING_EXCEPTION_REASON, [TRADE_DATE] FROM VISTA_REPORTING.dbo.CASH_TRADES) ct      on ct.[TRANSACTION_NUMBER] = timrec.[TRANSACTION_NUMBER] AND timrec.[SOURCE] = 'CM'     WHERE VG_10 = 1         UNION         SELECT DISTINCT CONCAT(timrec.[TRANSACTION_NUMBER],'_10_',timrec.[SOURCE]) as EXCEPTION_ID,         CASE WHEN timrec.[VG_10] = 1          THEN CASE WHEN NULLIF(e.[REASON],'') is null and ct.[TIMELY_RECORDING_EXCEPTION_REASON] is not null          THEN CAST(ct.[TIMELY_RECORDING_EXCEPTION_REASON] as varchar(500))         ELSE COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale')         END         ELSE NULL         END AS [1A_REASON]     FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_CASH_MM_TABLE timrec     left join #vista_reason e on CONCAT(timrec.[TRANSACTION_NUMBER],'_10_',timrec.[SOURCE]) = e.[ID]     left join (SELECT DISTINCT TRANSACTION_NUMBER, TIMELY_RECORDING_EXCEPTION_REASON FROM VISTA_REPORTING.dbo.CASH_TRADES) ct      on ct.[TRANSACTION_NUMBER] = timrec.[TRANSACTION_NUMBER] AND timrec.[SOURCE] = 'CM'     WHERE VG_10 = 1          UNION         SELECT DISTINCT CONCAT(bestex.[TRANSACTION_NUMBER],'_607_',bestex.[DATA_SOURCE]) as EXCEPTION_ID,         CASE WHEN bestex.[VG_607_RR] = 1          THEN CASE          WHEN NULLIF(e.[REASON],'') is null and ISNULL(ct.[BEST_EXECUTION_RR_EXCEPTION_REASON],0) is not null          THEN CAST(ct.[BEST_EXECUTION_RR_EXCEPTION_REASON] as varchar(500))           ELSE COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale')         END         ELSE NULL         END AS [1A_REASON]     FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_RR_TABLE bestex     left join #vista_reason e on CONCAT(bestex.[TRANSACTION_NUMBER],'_607_',bestex.[DATA_SOURCE]) = e.[ID]     left join (SELECT DISTINCT TRANSACTION_NUMBER, BEST_EXECUTION_RR_EXCEPTION_REASON FROM VISTA_REPORTING.dbo.CASH_TRADES) ct      on ct.[TRANSACTION_NUMBER] = bestex.[TRANSACTION_NUMBER] AND bestex.[DATA_SOURCE] = 'CM'     WHERE VG_607_RR = 1          UNION         SELECT DISTINCT CONCAT(bestex.[TRANSACTION_NUMBER],'_607_',bestex.[DATA_SOURCE]) as EXCEPTION_ID,         CASE WHEN bestex.[B3Q_EXCEPTION] = 1          THEN COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale')         ELSE NULL         END AS [1A_REASON]     FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE bestex     left join #vista_reason e on CONCAT(bestex.[TRANSACTION_NUMBER],'_607_',bestex.[DATA_SOURCE]) = e.[ID]     WHERE VG_607_MM = 1          UNION         SELECT DISTINCT CONCAT(bestex.[TRANSACTION_NUMBER],'_607_',bestex.[DATA_SOURCE]) as EXCEPTION_ID,          CASE WHEN bestex.[NWQ_EXCEPTION] = 1          THEN COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale')         ELSE NULL         END AS [1A_REASON]     FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE bestex     left join #vista_reason e on CONCAT(bestex.[TRANSACTION_NUMBER],'_607_',bestex.[DATA_SOURCE]) = e.[ID]     WHERE VG_607_MM = 1          --SURVG-563          UNION         SELECT DISTINCT CONCAT(instdeal.[TRANSACTION_NUMBER],'_613_',instdeal.[SOURCE]) as EXCEPTION_ID,         CASE WHEN instdeal.[VG_613] = 1          THEN            COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale')         ELSE NULL         END AS [1A_REASON]     FROM VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE instdeal     left join #vista_reason e on CONCAT(instdeal.[TRANSACTION_NUMBER],'_613_',instdeal.[SOURCE]) = e.[ID]     left join (SELECT DISTINCT TRANSACTION_NUMBER, BEST_EXECUTION_RR_EXCEPTION_REASON FROM VISTA_REPORTING.dbo.CASH_TRADES) ct      on ct.[TRANSACTION_NUMBER] = instdeal.[TRANSACTION_NUMBER] AND instdeal.[SOURCE] = 'CM'     WHERE VG_613 = 1          UNION         SELECT DISTINCT CONCAT(instdeal.[TRANSACTION_NUMBER],'_613_',instdeal.[SOURCE]) as EXCEPTION_ID,         CASE WHEN instdeal.[VG_613] = 1          THEN COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale')         ELSE NULL         END AS [1A_REASON]     FROM VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE instdeal     left join #vista_reason e on CONCAT(instdeal.[TRANSACTION_NUMBER],'_613_',instdeal.[SOURCE]) = e.[ID]     WHERE VG_613 = 1             UNION     --End of SURVG-563         SELECT DISTINCT CONCAT(crr.[TRANSACTION_NUMBER],'_609_',crr.[DATA_SOURCE]) as EXCEPTION_ID,         CASE WHEN crr.CRR_EXCEPTION = 1 AND crr.NWQ_EXCEPTION = 0 AND crr.B3Q_EXCEPTION = 0          THEN COALESCE(NULLIF(e.[REASON],''), 'Unassigned Rationale')         WHEN crr.CRR_EXCEPTION = 1 AND (crr.NWQ_EXCEPTION = 1 OR crr.B3Q_EXCEPTION = 1)          THEN 'Reviewed under Best Execution'         ELSE NULL         END AS [1A_REASON]     FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE crr     left join #vista_reason e on CONCAT(crr.[TRANSACTION_NUMBER],'_609_',crr.[DATA_SOURCE]) = e.[ID] --This joins on 609 as that is the original VG number the exception was raised with     WHERE VG_607_MM = 1          UNION         SELECT DISTINCT CONCAT(tkb.[TRANSACTION_NUMBER],'_608_',tkb.[DATA_SOURCE]) as EXCEPTION_ID,         CASE WHEN tkb.[VG_608] = 1 THEN         CASE WHEN NULLIF(e.[REASON],'') is null and ct.[TA_KNOCKBACK_EXCEPTION_REASON] is not null          THEN CAST(ct.[TA_KNOCKBACK_EXCEPTION_REASON] as varchar(500))          ELSE COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale')         END         ELSE NULL         END AS [1A_REASON]     FROM VISTA_STAGING.dbo.VG_608_TA_KNOCKBACK_CASH_TABLE tkb     left join #vista_reason e on CONCAT(tkb.[TRANSACTION_NUMBER],'_608_',tkb.[DATA_SOURCE]) = e.[ID]     left join (SELECT DISTINCT TRANSACTION_NUMBER, TA_KNOCKBACK_EXCEPTION_REASON FROM VISTA_REPORTING.dbo.CASH_TRADES) ct      on ct.[TRANSACTION_NUMBER] = tkb.[TRANSACTION_NUMBER]     WHERE VG_608 = 1         UNION         SELECT DISTINCT CONCAT(tbills.[MULTI_FUND_ID],'_610_',tbills.[DATA_SOURCE]) as EXCEPTION_ID,         CASE WHEN tbills.[VG_610] = 1          THEN CASE         WHEN NULLIF(e.[REASON],'') is null and mast.[TRANSACTION_STATUS] = 'C'          THEN 'Cancellation'         WHEN NULLIF(e.[REASON],'') is null and mast.[TRANSACTION_STATUS] != 'C'          THEN mast.[CD_CP_CANCELLATION_REASON]         ELSE COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale')         END         ELSE NULL         END AS [1A_REASON]     FROM VISTA_STAGING.dbo.VG_610_TBILLS_CP_CD_CASH_TABLE tbills     left join #vista_reason e on CONCAT(tbills.[MULTI_FUND_ID],'_610_',tbills.[DATA_SOURCE]) = e.[ID]     left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, TRANSACTION_STATUS, CD_CP_CANCELLATION_REASON FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_610_TBILLS_CP_CD_CASH_TABLE) mast     on tbills.[MULTI_FUND_ID] = mast.[TRANSACTION_NUMBER]     WHERE VG_610 = 1         UNION         SELECT DISTINCT CONCAT(coh.[ORDER_ID],'_604_',coh.[DATA_SOURCE]) as EXCEPTION_ID,         CASE WHEN coh.[VG_604] = 1          THEN CASE         WHEN NULLIF(e.[REASON],'') is null and co.[SEQUENCE_EXCEPTION_REASON] is not null          THEN CAST(co.[SEQUENCE_EXCEPTION_REASON] as varchar(500))          ELSE COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale')         END         ELSE NULL         END AS [1A_REASON]     FROM VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE coh     left join #vista_reason e on CONCAT(coh.[ORDER_ID],'_604_',coh.[DATA_SOURCE]) = e.[ID]     left join (SELECT DISTINCT ORDER_ID, SEQUENCE_EXCEPTION_REASON FROM VISTA_REPORTING.dbo.CASH_ORDERS) co     on co.[ORDER_ID] = coh.[ORDER_ID]     WHERE VG_604 = 1         UNION         SELECT DISTINCT CONCAT(coh.[ORDER_ID],'_604_',coh.[DATA_SOURCE]) as EXCEPTION_ID,         CASE WHEN coh.[VG_604] = 1          THEN CASE WHEN NULLIF(e.[REASON],'') is null and co.[SEQUENCE_EXCEPTION_REASON] is not null          THEN CAST(co.[SEQUENCE_EXCEPTION_REASON] as varchar(500))          ELSE COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale')         END         ELSE NULL         END AS [1A_REASON]     FROM VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE coh     left join #vista_reason e on CONCAT(coh.[ORDER_ID],'_604_',coh.[DATA_SOURCE]) = e.[ID]      left join (SELECT DISTINCT ORDER_ID, SEQUENCE_EXCEPTION_REASON, TRADE_DATE, PRODUCT_TYPE, INSTRUCTION_STATUS_DECODE FROM VISTA_REPORTING.dbo.CASH_ORDERS) co     on coh.[ORDER_ID] = co.[ORDER_ID] and coh.[DATA_SOURCE] = 'CM'     WHERE VG_604 = 1         UNION         SELECT DISTINCT CONCAT(timex.[ORDER_ID],'_9_',timex.[SOURCE]) as EXCEPTION_ID,         CASE WHEN timex.[VG_09] > 0         THEN CASE         WHEN NULLIF(e.[REASON],'') is null and ct.[TIMELY_EXECUTION_EXCEPTION_REASON] is not null           THEN CAST(ct.[TIMELY_EXECUTION_EXCEPTION_REASON] as varchar(500))          WHEN NULLIF(e.[REASON],'') is null and co.[TIMELY_ACKNOWLEDGEMENT_EXCEPTION_REASON] is not null          THEN CAST(co.[TIMELY_ACKNOWLEDGEMENT_EXCEPTION_REASON] as varchar(500))          ELSE COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale')         END         ELSE NULL         END AS [1A_REASON]      FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_RR_TABLE timex     left join #vista_reason e on CONCAT(timex.[ORDER_ID],'_9_',timex.[SOURCE]) = e.[ID]     left join (SELECT DISTINCT ct.ORDER_ID, TRANSACTION_NUMBER, PRODUCT_TYPE, ctr.TIMELY_EXECUTION_EXCEPTION_REASON FROM VISTA_REPORTING.dbo.CASH_TRADES ct      outer apply (SELECT TOP 1 ORDER_ID, TIMELY_EXECUTION_EXCEPTION_REASON FROM Vista_REPORTING.dbo.CASH_TRADES ctr where TIMELY_EXECUTION_EXCEPTION_REASON is not null and ct.ORDER_ID = ctr.ORDER_ID) ctr) ct     on ct.[ORDER_ID] = timex.[ORDER_ID]     left join (SELECT DISTINCT ORDER_ID, TIMELY_ACKNOWLEDGEMENT_EXCEPTION_REASON, TRADE_DATE, PRODUCT_TYPE, INSTRUCTION_STATUS_DECODE FROM VISTA_REPORTING.dbo.CASH_ORDERS) co     on co.[ORDER_ID] = timex.[ORDER_ID]      WHERE VG_09 = 1         UNION         SELECT DISTINCT CONCAT(timex.[ORDER_ID],'_9_',timex.[SOURCE]) as EXCEPTION_ID,         CASE WHEN timex.[VG_09] = 1          THEN CASE WHEN NULLIF(e.[REASON],'') is null and ct.[TIMELY_EXECUTION_EXCEPTION_REASON] is not null           THEN CAST(ct.[TIMELY_EXECUTION_EXCEPTION_REASON] as varchar(500))          WHEN NULLIF(e.[REASON],'') is null and co.[TIMELY_ACKNOWLEDGEMENT_EXCEPTION_REASON] is not null          THEN CAST(co.[TIMELY_ACKNOWLEDGEMENT_EXCEPTION_REASON] as varchar(500))          ELSE COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale')         END ELSE NULL         END AS [1A_REASON]     FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_MM_TABLE timex     left join #vista_reason e on CONCAT(timex.[ORDER_ID],'_9_',timex.[SOURCE]) = e.[ID]     left join (SELECT DISTINCT ct.ORDER_ID, TRANSACTION_NUMBER, PRODUCT_TYPE, ctr.TIMELY_EXECUTION_EXCEPTION_REASON FROM VISTA_REPORTING.dbo.CASH_TRADES ct           outer apply (SELECT TOP 1 ORDER_ID, TIMELY_EXECUTION_EXCEPTION_REASON FROM Vista_REPORTING.dbo.CASH_TRADES ctr where TIMELY_EXECUTION_EXCEPTION_REASON is not null and ct.ORDER_ID = ctr.ORDER_ID) ctr) ct     on ct.[ORDER_ID] = timex.[ORDER_ID] and timex.[SOURCE] = 'CM'     left join (SELECT DISTINCT ORDER_ID, TIMELY_ACKNOWLEDGEMENT_EXCEPTION_REASON, TRADE_DATE, PRODUCT_TYPE, INSTRUCTION_STATUS_DECODE FROM VISTA_REPORTING.dbo.CASH_ORDERS) co     on timex.[ORDER_ID] = co.[ORDER_ID] and timex.[SOURCE] = 'CM'     WHERE VG_09 = 1          UNION         SELECT DISTINCT CONCAT(eod.[ORDER_ID],'_602_',eod.[DATA_SOURCE]) as EXCEPTION_ID,         CASE WHEN eod.[VG_602] > 0         THEN CASE WHEN NULLIF(e.[REASON],'') is null and co.[HOLDOVER_REASON] is not null          THEN CAST(co.[HOLDOVER_REASON] as varchar(500))          ELSE COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale')         END ELSE NULL         END AS [1A_REASON]     FROM VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_CASH_TABLE eod     left join #vista_reason e on CONCAT(eod.[ORDER_ID],'_602_',eod.[DATA_SOURCE]) = e.[ID]     left join (SELECT DISTINCT ORDER_ID, HOLDOVER_REASON, TRADE_DATE, PRODUCT_TYPE, INSTRUCTION_STATUS_DECODE FROM VISTA_REPORTING.dbo.CASH_ORDERS) co     on co.[ORDER_ID] = eod.[ORDER_ID] and eod.[DATA_SOURCE] = 'CM'     WHERE VG_602 = 1          UNION         SELECT DISTINCT CONCAT(ISNULL(ooh.[ORDER_ID],0),'_',ISNULL(ooh.[TRANSACTION_NUMBER],0), '_601_',ooh.[SOURCE]) as EXCEPTION_ID,         CASE WHEN ooh.[VG_601] > 0 THEN COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale')         ELSE NULL         END AS [1A_REASON]     FROM VISTA_STAGING.dbo.VG_601_OUT_OF_HOURS_CASH_TABLE ooh     left join #vista_reason e on CONCAT(ISNULL(ooh.[ORDER_ID],0),'_',ISNULL(ooh.[TRANSACTION_NUMBER],0), '_601_',ooh.[SOURCE]) = e.[ID]     WHERE VG_601 = 1         UNION         SELECT DISTINCT CONCAT(lt.[ORDER_ID],'_603_',lt.[SOURCE]) as EXCEPTION_ID,         CASE WHEN lt.[EXCEPTION_FLAG] > 0 THEN COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale')         ELSE NULL         END AS [1A_REASON]     FROM VISTA_STAGING.dbo.VG_603_LARGE_TRADES_CASH_TABLE lt     left join #vista_reason e on CONCAT(lt.[ORDER_ID],'_603_',lt.[SOURCE]) = e.[ID]     WHERE EXCEPTION_FLAG = 1         UNION         SELECT DISTINCT CONCAT(oar.ORDER_ID,'_611_',oar.[DATA_SOURCE]) as EXCEPTION_ID,         CASE WHEN oar.VG_611 > 0 THEN COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale')         ELSE NULL         END AS [1A_REASON]     FROM VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_RR_TABLE oar     left join #vista_reason e on CONCAT(oar.ORDER_ID,'_611_',oar.[DATA_SOURCE]) = e.[ID]     WHERE VG_611 = 1          UNION         SELECT DISTINCT CONCAT(oam.ORDER_ID,'_611_',oam.[DATA_SOURCE]) as EXCEPTION_ID,         CASE WHEN oam.VG_611 > 0 THEN COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale')         ELSE NULL         END AS [1A_REASON]     FROM VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_MM_TABLE oam     left join #vista_reason e on CONCAT(oam.ORDER_ID,'_611_',oam.[DATA_SOURCE]) = e.[ID]     WHERE VG_611 = 1          UNION         SELECT DISTINCT CONCAT(oar.TRANSACTION_NUMBER,'_612_',oar.[DATA_SOURCE]) as EXCEPTION_ID,         CASE WHEN oar.VG_612 > 0 THEN COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale')         ELSE NULL         END AS [1A_REASON]     FROM VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_RR_TABLE oar     left join #vista_reason e on CONCAT(oar.TRANSACTION_NUMBER,'_612_',oar.[DATA_SOURCE]) = e.[ID]     WHERE VG_612 = 1          UNION         SELECT DISTINCT CONCAT(oam.TRANSACTION_NUMBER,'_612_',oam.[DATA_SOURCE]) as EXCEPTION_ID,         CASE WHEN oam.VG_612 > 0 THEN COALESCE(NULLIF(e.[REASON],''),'Unassigned Rationale')         ELSE NULL         END AS [1A_REASON]     FROM VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_MM_TABLE oam     left join #vista_reason e on CONCAT(oam.TRANSACTION_NUMBER,'_612_',oam.[DATA_SOURCE]) = e.[ID]     WHERE VG_612 = 1              ) temp_exception          IF OBJECT_ID('tempdb..#temp_fx_trades', 'U') IS NOT NULL DROP TABLE #temp_fx_trades    SELECT DISTINCT      fxt.ORDER_ID,     fxt.TRADE_ID,     fxt.TRADE_DATE,     fxt.TIMELY_RECORDING_REASON,     fxt.SPOT_TOLERANCE_REASON,     fxt.CANCEL_REASON,     fxt.TIMELY_EXECUTION_REASON,     fxt.INSTRUCTION_TYPE    INTO #temp_fx_trades     FROM VISTA_REPORTING.dbo.FX_TRADES fxt;        IF OBJECT_ID('tempdb..#temp_fx_orders', 'U') IS NOT NULL DROP TABLE #temp_fx_orders    SELECT DISTINCT      fxo.FXM_ORDER_ID,     fxo.ORDER_TRADE_DATE,     fxo.SEQUENCE_EXCEPTION_REASON,     fxo.TIMELY_EXC_REASON_NOT_ACK,     fxo.INSTRUCTION_STATUS,     fxo.HOLDOVER_REASON    INTO #temp_fx_orders    FROM VISTA_REPORTING.dbo.FX_ORDERS fxo;        IF OBJECT_ID('tempdb..#temp_exception_table_fx', 'U') IS NOT NULL DROP TABLE #temp_exception_table_fx    SELECT *     INTO #temp_exception_table_fx    FROM (SELECT DISTINCT CONCAT(timrec.[TRADE_ID],'_10_',timrec.[SOURCE]) as ID,          CASE WHEN timrec.[VG_10] = 1           THEN CASE WHEN NULLIF(e.[REASON],'') is null and fxt.[TIMELY_RECORDING_REASON] is not null           THEN CAST(fxt.[TIMELY_RECORDING_REASON] as varchar(500))          ELSE COALESCE(e.[REASON],'Unassigned Rationale')          END          ELSE NULL          END AS [1A_REASON]     FROM VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FX_TABLE timrec     left join #vista_reason e on CONCAT(timrec.[TRADE_ID],'_10_',timrec.[SOURCE]) = e.[ID]     left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, TRADE_STATUS FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_10_TIMELY_RECORDING_FX_TABLE) mast     on timrec.[TRADE_ID] = mast.[TRANSACTION_NUMBER]     left join  #temp_fx_trades fxt on fxt.[TRADE_ID] = timrec.[TRADE_ID] AND timrec.[SOURCE] = 'FX'     WHERE VG_10 = 1         UNION         SELECT DISTINCT CONCAT(bestex.[TRADE_ID],'_607_',bestex.[DATA_SOURCE]) as EXCEPTION_ID,         CASE WHEN bestex.[B3Q_EXCEPTION] = 1          THEN CASE          WHEN NULLIF(e.[REASON],'') is null and mast.[NUMBER_OF_QUOTES_EXCEPTION_REASON] is not null          THEN CAST(mast.[NUMBER_OF_QUOTES_EXCEPTION_REASON] as varchar(500))         ELSE COALESCE(e.[REASON],'Unassigned Rationale')         END         ELSE NULL         END AS [1A_RATIONALE]     FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE bestex     left join #vista_reason e on CONCAT(bestex.[TRADE_ID],'_607_',bestex.[DATA_SOURCE]) = e.[ID]     left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, INSTRUCTION_STATUS, NUMBER_OF_QUOTES_EXCEPTION_REASON, PRODUCT FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE) mast     on bestex.[TRADE_ID] = mast.[TRANSACTION_NUMBER]     WHERE VG_607 = 1         UNION         SELECT DISTINCT CONCAT(bestex.[TRADE_ID],'_607_',bestex.[DATA_SOURCE]) as EXCEPTION_ID,         CASE WHEN bestex.[B3Q_EXCEPTION] = 1          THEN CASE WHEN NULLIF(e.[REASON],'') is null and mast.[NUMBER_OF_QUOTES_EXCEPTION_REASON] is not null          THEN CAST(mast.[NUMBER_OF_QUOTES_EXCEPTION_REASON] as varchar(500))         ELSE COALESCE(e.[REASON],'Unassigned Rationale')         END         ELSE NULL         END AS [1A_RATIONALE]     FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE bestex     left join #vista_reason e      on CONCAT(bestex.[TRADE_ID],'_607_',bestex.[DATA_SOURCE]) = e.[ID]     left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, INSTRUCTION_STATUS, NUMBER_OF_QUOTES_EXCEPTION_REASON, PRODUCT FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE) mast     on bestex.[TRADE_ID] = mast.[TRANSACTION_NUMBER]     WHERE VG_607 = 1         UNION         SELECT DISTINCT CONCAT(bestex.[TRADE_ID],'_607_',bestex.[DATA_SOURCE]) as EXCEPTION_ID,         CASE WHEN bestex.[NWQ_EXCEPTION] = 1          THEN CASE          WHEN NULLIF(e.[REASON],'') is null and mast.[NWQ_REASON] is not null          THEN CAST(mast.[NWQ_REASON] as varchar(500))         ELSE COALESCE(e.[REASON],'Unassigned Rationale')         END         ELSE NULL         END AS [1A_RATIONALE]     FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE bestex     left join #vista_reason e on CONCAT(bestex.[TRADE_ID],'_607_',bestex.[DATA_SOURCE]) = e.[ID]     left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, INSTRUCTION_STATUS, NWQ_REASON, PRODUCT FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE) mast     on bestex.[TRADE_ID] = mast.[TRANSACTION_NUMBER]     WHERE VG_607 = 1         UNION         SELECT DISTINCT CONCAT(bestex.[TRADE_ID],'_607_',bestex.[DATA_SOURCE]) as EXCEPTION_ID,         CASE WHEN bestex.[NWQ_EXCEPTION] = 1          THEN CASE WHEN NULLIF(e.[REASON],'') is null and mast.[NWQ_REASON] is not null          THEN CAST(mast.[NWQ_REASON] as varchar(500))         ELSE COALESCE(e.[REASON],'Unassigned Rationale')         END         ELSE NULL         END AS [1A_RATIONALE]     FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE bestex     left join #vista_reason e on CONCAT(bestex.[TRADE_ID],'_607_',bestex.[DATA_SOURCE]) = e.[ID]     left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, INSTRUCTION_STATUS, NWQ_REASON, PRODUCT FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_607_BEST_EXECUTION_FX_TABLE) mast     on bestex.[TRADE_ID] = mast.[TRANSACTION_NUMBER]     WHERE VG_607 = 1             --SURVG-563          UNION         SELECT DISTINCT CONCAT(instdeal.[TRADE_ID],'_613_',instdeal.[SOURCE]) as EXCEPTION_ID,         CASE WHEN instdeal.[VG_613] = 1          THEN COALESCE(e.[REASON],'Unassigned Rationale')         ELSE NULL         END AS [1A_RATIONALE]     FROM VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE instdeal     left join #vista_reason e on CONCAT(instdeal.[TRADE_ID],'_613_',instdeal.[SOURCE]) = e.[ID]     left join (SELECT DISTINCT TRANSACTION_NUMBER, DEALER_NAME, PRODUCT FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE) mast     on instdeal.[TRADE_ID] = mast.[TRANSACTION_NUMBER]     WHERE VG_613 = 1         UNION     --End of SURVG-563         SELECT DISTINCT CONCAT(bestex.[TRADE_ID],'_501_',bestex.[DATA_SOURCE]) as EXCEPTION_ID, --This joins on 501 as that was the original SRR VG NUMBER         CASE WHEN bestex.SRR_EXCEPTION = 1         THEN CASE WHEN NULLIF(e.[REASON],'') is null and fxt.SPOT_TOLERANCE_REASON is not null          THEN CAST(fxt.SPOT_TOLERANCE_REASON as varchar(500))         WHEN (bestex.NWQ_EXCEPTION = 1 OR bestex.B3Q_EXCEPTION = 1) AND fxt.SPOT_TOLERANCE_REASON is null          THEN 'Reviewed under Best Execution'         ELSE COALESCE(e.[REASON], 'Unassigned Rationale')         END         ELSE NULL         END AS [1A_RATIONALE]     FROM VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE bestex     left join #vista_reason e      on CONCAT(bestex.[TRADE_ID],'_501_',bestex.[DATA_SOURCE]) = e.[ID]      left join #temp_fx_trades fxt on fxt.[TRADE_ID] = bestex.[TRADE_ID] AND bestex.[DATA_SOURCE] = 'FX'     WHERE VG_607 = 1         UNION         SELECT DISTINCT CONCAT(tkb.[FXM_ORDER_ID],'_608_',tkb.[DATA_SOURCE]) as EXCEPTION_ID,         CASE WHEN tkb.[VG_608] = 1          THEN CASE WHEN NULLIF(e.[REASON],'') is null and fxt.[CANCEL_REASON] is not null          THEN CAST(fxt.[CANCEL_REASON] as varchar(500))          ELSE COALESCE(e.[REASON],'Unassigned Rationale')         END         ELSE NULL         END AS [1A_RATIONALE]     FROM VISTA_STAGING.dbo.VG_608_TA_KNOCKBACK_FX_TABLE tkb     left join #vista_reason e on CONCAT(tkb.[FXM_ORDER_ID],'_608_',[DATA_SOURCE]) = e.[ID]     left join #temp_fx_trades fxt on fxt.[ORDER_ID] = tkb.[FXM_ORDER_ID] AND tkb.[DATA_SOURCE] = 'FX'     WHERE VG_608 = 1          UNION         SELECT DISTINCT CONCAT(dl.[ORDER_ID],'_500_',dl.[SOURCE]) as EXCEPTION_ID,         CASE WHEN dl.[VG_500] = 1 THEN COALESCE(e.[REASON],'Unassigned Rationale')         ELSE NULL         END AS [1A_RATIONALE]     FROM VISTA_STAGING.dbo.VG_500_DEALER_LIMIT_FX_TABLE dl     left join #vista_reason e on CONCAT(dl.[ORDER_ID],'_500_',[SOURCE]) = e.[ID]     WHERE VG_500 = 1         UNION         SELECT DISTINCT CONCAT(coh.[ORDER_ID],'_604_',coh.[DATA_SOURCE]) as EXCEPTION_ID,         CASE WHEN coh.[VG_604] = 1 THEN          CASE WHEN NULLIF(e.[REASON],'') is null and fxo.[SEQUENCE_EXCEPTION_REASON] is not null          THEN CAST(fxo.[SEQUENCE_EXCEPTION_REASON] as varchar(500))         WHEN NULLIF(e.[REASON],'') is null and fxo.[SEQUENCE_EXCEPTION_REASON] is null and coh.FROZEN_BY is not NULL          THEN 'Freeze/Release'         ELSE COALESCE(e.[REASON],'Unassigned Rationale')         END         ELSE NULL         END AS [1A_RATIONALE]     FROM VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_FX_TABLE coh     left join #vista_reason e on CONCAT(coh.[ORDER_ID],'_604_',coh.[DATA_SOURCE]) = e.[ID]      left join #temp_fx_orders fxo on coh.[ORDER_ID] = fxo.[FXM_ORDER_ID] and coh.[DATA_SOURCE] = 'FX'     WHERE [VG_604] = 1         UNION         SELECT DISTINCT CONCAT(timex.[ORDER_ID],'_9_',timex.[SOURCE]) as EXCEPTION_ID,         CASE WHEN timex.[VG_09] = 1          THEN CASE WHEN NULLIF(e.[REASON],'') is null and fxt.[TIMELY_EXECUTION_REASON] is not null            THEN CAST(fxt.[TIMELY_EXECUTION_REASON] as varchar(500))          WHEN NULLIF(e.[REASON],'') is null and fxo.[TIMELY_EXC_REASON_NOT_ACK] is not null          THEN CAST(fxo.[TIMELY_EXC_REASON_NOT_ACK] as varchar(500))          ELSE COALESCE(e.[REASON],'Unassigned Rationale')         END         ELSE NULL         END AS [1A_RATIONALE]     FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FX_TABLE timex     left join #vista_reason e      on CONCAT(timex.[ORDER_ID],'_9_',timex.[SOURCE]) = e.[ID]     left join (SELECT DISTINCT fxt.ORDER_ID, TRADE_ID, fxtr.TIMELY_EXECUTION_REASON FROM #temp_fx_trades fxt          outer apply (SELECT TOP 1 ORDER_ID, TIMELY_EXECUTION_REASON FROM #temp_fx_trades fxtr WHERE TIMELY_EXECUTION_REASON is not null and fxt.ORDER_ID = fxtr.ORDER_ID) fxtr) fxt     on fxt.[ORDER_ID] = timex.[ORDER_ID] and timex.[SOURCE] = 'FX'     left join #temp_fx_orders fxo on timex.[ORDER_ID] = fxo.[FXM_ORDER_ID] and timex.[SOURCE] = 'FX'     WHERE VG_09 = 1         UNION         SELECT DISTINCT CONCAT(eod.[FXM_ORDER_ID],'_602_',eod.[DATA_SOURCE]) as EXCEPTION_ID,         CASE WHEN eod.[VG_602] > 0         THEN CASE WHEN NULLIF(e.[REASON],'') is null and fxo.[HOLDOVER_REASON] is not null          THEN CAST(fxo.[HOLDOVER_REASON] as varchar(500))          ELSE COALESCE(e.[REASON],'Unassigned Rationale')         END         ELSE NULL         END AS [1A_RATIONALE]     FROM VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_FX_TABLE eod     left join #vista_reason e on CONCAT(eod.[FXM_ORDER_ID],'_602_',eod.[DATA_SOURCE]) = e.[ID]     left join #temp_fx_orders fxo on fxo.[FXM_ORDER_ID] = eod.[FXM_ORDER_ID] and eod.[DATA_SOURCE] = 'FX'     WHERE VG_602 = 1         UNION         SELECT DISTINCT CONCAT(ISNULL(ooh.[ORDER_ID],0),'_',ISNULL(ooh.[TRADE_ID],0),'_601_',ooh.[SOURCE]) as EXCEPTION_ID,         CASE WHEN ooh.[VG_601] > 0 THEN COALESCE(e.[REASON],'Unassigned Rationale')         ELSE NULL         END AS [1A_RATIONALE]     FROM VISTA_STAGING.dbo.VG_601_OUT_OF_HOURS_FX_TABLE ooh     left join #vista_reason e on CONCAT(ISNULL(ooh.[ORDER_ID],0),'_',ISNULL(ooh.[TRADE_ID],0),'_601_',ooh.[SOURCE]) = e.[ID]     WHERE VG_601 = 1          UNION         SELECT DISTINCT CONCAT(lt.[ORDER_ID],'_603_',lt.[SOURCE]) as EXCEPTION_ID,         CASE WHEN lt.[VG_603] > 0 THEN COALESCE(e.[REASON],'Unassigned Rationale')         ELSE NULL         END AS [1A_RATIONALE]     FROM VISTA_STAGING.dbo.VG_603_LARGE_TRADES_FX_TABLE lt     left join #vista_reason e      on CONCAT(lt.[ORDER_ID],'_603_',lt.[SOURCE]) = e.[ID]     WHERE VG_603 = 1         UNION         SELECT DISTINCT CONCAT(ISNULL(vg.[ORDER_ID],0),'_',ISNULL(mast.TRADE_ID,0),'_611_',vg.DATA_SOURCE) as EXCEPTION_ID,         CASE WHEN vg.[VG_611] > 0 THEN COALESCE(e.[REASON],'Unassigned Rationale')         ELSE NULL         END AS [1A_RATIONALE]     FROM VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_FX_TABLE vg     left join (SELECT DISTINCT FX_ORDER_ID, DEALER_NAME, TRADE_STATUS, TRADE_ID FROM VISTA_REPORTING.dbo.MASTER_PM_ORDER_VG_611_ORDER_AGGREGATION_FX_TABLE) mast     on vg.[ORDER_ID] = mast.FX_ORDER_ID     left join #vista_reason e ON CONCAT(ISNULL(vg.[ORDER_ID],0),'_611_',vg.[DATA_SOURCE]) = e.[ID]     WHERE [VG_611] = 1         UNION         SELECT DISTINCT CONCAT(ISNULL(mast.FX_ORDER_ID,0),'_',ISNULL(vg.TRANSACTION_NUMBER,0),'_612_',vg.DATA_SOURCE) as EXCEPTION_ID,         CASE WHEN vg.[VG_612] > 0 THEN COALESCE(e.[REASON],'Unassigned Rationale')         ELSE NULL         END AS [1A_RATIONALE]     FROM VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_FX_TABLE vg     left join (SELECT DISTINCT FX_ORDER_ID, DEALER_NAME, TRADE_STATUS, TRADE_ID FROM VISTA_REPORTING.dbo.MASTER_MFID_VG_612_ORDER_ALLOCATION_FX_TABLE) mast     on vg.TRANSACTION_NUMBER = mast.TRADE_ID     left join #vista_reason e on CONCAT(ISNULL(mast.FX_ORDER_ID,0),'_',ISNULL(vg.TRANSACTION_NUMBER,0),'_612_',vg.[DATA_SOURCE]) = e.[ID]     WHERE [VG_612] = 1          ) temp_exception             --First find out which touch count the most recent comment occurred for each team     IF OBJECT_ID('tempdb..#most_recent_1a_touch', 'U') IS NOT NULL DROP TABLE #most_recent_1a_touch     select       ID,      MAX(TOUCH_COUNT) as TOUCH_COUNT     INTO #most_recent_1a_touch     from #moved_teams      WHERE ACTION_FROM_TEAM = 'A' and DEALING_DESK not in ('Cash','FX')     GROUP BY ID     UNION     select       ID,      MAX(TOUCH_COUNT) as TOUCH_COUNT     from #moved_teams      WHERE ACTION_FROM_TEAM = 'A' and REASON<>'Unassigned Rationale' and DEALING_DESK in ('Cash','FX')     GROUP BY ID             IF OBJECT_ID('tempdb..#most_recent_1b_touch', 'U') IS NOT NULL DROP TABLE #most_recent_1b_touch     select       ID,      MAX(TOUCH_COUNT) as TOUCH_COUNT     INTO #most_recent_1b_touch     from #moved_teams     WHERE ACTION_FROM_TEAM = 'B'     GROUP BY ID         IF OBJECT_ID('tempdb..#most_recent_1a_comments', 'U') IS NOT NULL DROP TABLE #most_recent_1a_comments     SELECT       mt.ID,      mt.COMMENT as LATEST_1A_COMMENT,      mt.REASON as LATEST_1A_REASON     INTO #most_recent_1a_comments     FROM #moved_teams mt     INNER JOIN #most_recent_1a_touch mra on mra.ID = mt.ID and mra.TOUCH_COUNT = mt.TOUCH_COUNT     UNION      SELECT ID     ,NULL AS LATEST_1A_COMMENT     ,[1A_REASON] AS LATEST_1A_REASON     FROM #temp_exception_table_cash      UNION      SELECT ID     ,NULL AS LATEST_1A_COMMENT     ,[1A_REASON] AS LATEST_1A_REASON     FROM #temp_exception_table_fx;         IF OBJECT_ID('tempdb..#most_recent_1b_comments', 'U') IS NOT NULL DROP TABLE #most_recent_1b_comments     SELECT       mt.ID,      mt.COMMENT as LATEST_1B_COMMENT,      mt.REASON as LATEST_1B_REASON     INTO #most_recent_1b_comments     FROM #moved_teams mt     INNER JOIN #most_recent_1b_touch mrb on mrb.ID = mt.ID and mrb.TOUCH_COUNT = mt.TOUCH_COUNT         IF OBJECT_ID('tempdb..#most_recent_comments', 'U') IS NOT NULL DROP TABLE #most_recent_comments     SELECT       COALESCE(mra.ID, mrb.ID) as ID,      max(mra.LATEST_1A_COMMENT) as LATEST_1A_COMMENT,      max(mra.LATEST_1A_REASON) as LATEST_1A_REASON,      max(mrb.LATEST_1B_COMMENT) as LATEST_1B_COMMENT,      max(mrb.LATEST_1B_REASON) as LATEST_1B_REASON     INTO #most_recent_comments     FROM #most_recent_1a_comments mra     FULL OUTER JOIN #most_recent_1b_comments mrb ON mra.ID = mrb.ID      GROUP BY COALESCE(mra.ID, mrb.ID)      --May be cases where comments are only in 1A or 1B so need to full outer join to capture all         IF OBJECT_ID('VISTA_REPORTING.DBO.OPERATIONAL_EFFICIENCY_MOST_RECENT_COMMENTS', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.DBO.OPERATIONAL_EFFICIENCY_MOST_RECENT_COMMENTS     SELECT *     INTO VISTA_REPORTING.DBO.OPERATIONAL_EFFICIENCY_MOST_RECENT_COMMENTS     FROM #most_recent_comments            END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: ORDER_LEVEL_EXCEPTION  CreateDate: 2025-06-26 18:11:56.060  ModifyDate: 2025-06-26 18:11:56.060  --- DEFINITION START ---  -- =============================================    -- Author:  <da Costa, David>    -- Create date: <20/10/2017>    -- Description:     -- <If difference between todays date and Approved Date    -- for live trades (not cancelled/expired and 100% filled)    -- is > 4 days raise exception. Raise exceptions for each    -- of the following date breaches >4, >9, >19, >39, >79 and    -- >159 days. Trigger dealer comments for Orders not being     -- 100% filled>    -- =============================================        CREATE PROCEDURE [dbo].[ORDER_LEVEL_EXCEPTION]     -- Add the parameters for the stored procedure here     -- @Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;            --Insert statements for procedure here     --Drop temporary timely_exec table if it exists         IF OBJECT_ID('tempdb..#grouped_table', 'U') IS NOT NULL DROP TABLE #grouped_table         SELECT      ORD_NUM,     MIN_AUTH,     CASE WHEN MAX(TIMELY_EXECUTION_EXCEPTION)>0 THEN 'Inter' ELSE NULL END AS Exception_Type,     MAX(TIMELY_EXECUTION_EXCEPTION) AS TIMELY_EXECUTION_EXCEPTION,     CREATETIME      INTO #grouped_table     FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_EQ_TABLE      GROUP BY ORD_NUM, MIN_AUTH, CREATETIME              IF OBJECT_ID('tempdb..#grouped_table_FI', 'U') IS NOT NULL DROP TABLE #grouped_table_FI         SELECT      ORD_NUM,     Dealing_Desk,     REBASED_AUTH_TIME,     Exception_Type,     Reversion_Time,     Timespan,     TIMELY_EXECUTION_EXCEPTION,     CREATETIME      INTO #grouped_table_FI     FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE      GROUP BY ORD_NUM, Dealing_Desk, REBASED_AUTH_TIME, Exception_Type, Reversion_Time, Timespan, TIMELY_EXECUTION_EXCEPTION, CREATETIME              IF OBJECT_ID('tempdb..#grouped_table_LL', 'U') IS NOT NULL DROP TABLE #grouped_table_LL         SELECT      ORD_NUM,     Dealing_Desk,     AUTH_TIME,     Exception_Type,     --Reversion_Time,     Timespan,     TIMELY_EXECUTION_EXCEPTION,     CREATETIME      INTO #grouped_table_LL     FROM VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_LL_TABLE      GROUP BY ORD_NUM, Dealing_Desk, AUTH_TIME, Exception_Type, Timespan, TIMELY_EXECUTION_EXCEPTION, CREATETIME          --select * from #grouped_table         IF OBJECT_ID('tempdb..#pivotedteetable', 'U') IS NOT NULL DROP TABLE #pivotedteetable            SELECT     ORD_NUM,     MIN_AUTH,     CASE WHEN Exception_Type IS NULL THEN NULL ELSE Exception_Type END AS Exception_Type,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=5 THEN 1 ELSE 0 END AS VG_09_POLICY,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=5 THEN CREATETIME ELSE NULL END AS VG_09_POLICY_CREATETIME,     NULL AS VG_09_5_DAY,     NULL AS VG_09_5_DAY_CREATETIME,     NULL AS VG_09_10_DAY,     NULL AS VG_09_10_DAY_CREATETIME,     NULL AS VG_09_20_DAY,     NULL AS VG_09_20_DAY_CREATETIME,     NULL AS VG_09_40_DAY,     NULL AS VG_09_40_DAY_CREATETIME,     NULL AS VG_09_80_DAY,     NULL AS VG_09_80_DAY_CREATETIME,     NULL AS VG_09_160_DAY,     NULL AS VG_09_160_DAY_CREATETIME     INTO #pivotedteetable     FROM #grouped_table     UNION     SELECT     ORD_NUM,     MIN_AUTH,     CASE WHEN Exception_Type IS NULL THEN NULL ELSE Exception_Type END AS Exception_Type,     NULL,     NULL,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=5 THEN 1 ELSE 0 END,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=5 THEN CREATETIME ELSE NULL END,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL      FROM #grouped_table     UNION     SELECT     ORD_NUM,     MIN_AUTH,     CASE WHEN Exception_Type IS NULL THEN NULL ELSE Exception_Type END AS Exception_Type,     NULL,     NULL,     NULL,     NULL,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=10 THEN 1 ELSE 0 END AS VG_09_10_DAY,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=10 THEN CREATETIME ELSE NULL END AS VG_09_10_DAY_CREATETIME,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL     FROM #grouped_table     UNION      SELECT     ORD_NUM,     MIN_AUTH,     CASE WHEN Exception_Type IS NULL THEN NULL ELSE Exception_Type END AS Exception_Type,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=20 THEN 1 ELSE 0 END AS VG_09_20_DAY,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=20 THEN CREATETIME ELSE NULL END AS VG_09_20_DAY_CREATETIME,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL     FROM #grouped_table     UNION      SELECT     ORD_NUM,     MIN_AUTH,     CASE WHEN Exception_Type IS NULL THEN NULL ELSE Exception_Type END AS Exception_Type,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=40 THEN 1 ELSE 0 END AS VG_09_40_DAY,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=40 THEN CREATETIME ELSE NULL END AS VG_09_40_DAY_CREATETIME,     NULL,     NULL,     NULL,     NULL     FROM #grouped_table     UNION      SELECT     ORD_NUM,     MIN_AUTH,     CASE WHEN Exception_Type IS NULL THEN NULL ELSE Exception_Type END AS Exception_Type,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=80 THEN 1 ELSE 0 END AS VG_09_80_DAY,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=80 THEN CREATETIME ELSE NULL END AS VG_09_80_DAY_CREATETIME,     NULL,     NULL     FROM #grouped_table     UNION      SELECT     ORD_NUM,     MIN_AUTH,     CASE WHEN Exception_Type IS NULL THEN NULL ELSE Exception_Type END AS Exception_Type,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=160 THEN 1 ELSE 0 END AS VG_09_160_DAY,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=160 THEN CREATETIME ELSE NULL END AS VG_09_160_DAY_CREATETIME     FROM #grouped_table         IF OBJECT_ID('tempdb..#pivotedteetable_FI', 'U') IS NOT NULL DROP TABLE #pivotedteetable_FI           SELECT     ORD_NUM,     Dealing_Desk,     REBASED_AUTH_TIME,     Exception_Type,     Reversion_Time,     Timespan,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=1 THEN 1 ELSE 0 END AS VG_09_POLICY,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=1 THEN CREATETIME ELSE NULL END AS VG_09_POLICY_CREATETIME,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=5 THEN 1 ELSE 0 END AS VG_09_5_DAY,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=5 THEN CREATETIME ELSE NULL END AS VG_09_5_DAY_CREATETIME,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=10 THEN 1 ELSE 0 END AS VG_09_10_DAY,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=10 THEN CREATETIME ELSE NULL END AS VG_09_10_DAY_CREATETIME,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=20 THEN 1 ELSE 0 END AS VG_09_20_DAY,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=20 THEN CREATETIME ELSE NULL END AS VG_09_20_DAY_CREATETIME,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=40 THEN 1 ELSE 0 END AS VG_09_40_DAY,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=40 THEN CREATETIME ELSE NULL END AS VG_09_40_DAY_CREATETIME,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=80 THEN 1 ELSE 0 END AS VG_09_80_DAY,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=80 THEN CREATETIME ELSE NULL END AS VG_09_80_DAY_CREATETIME,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=160 THEN 1 ELSE 0 END AS VG_09_160_DAY,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=160 THEN CREATETIME ELSE NULL END AS VG_09_160_DAY_CREATETIME     INTO #pivotedteetable_FI     FROM #grouped_table_FI         IF OBJECT_ID('tempdb..#pivotedteetable_LL', 'U') IS NOT NULL DROP TABLE #pivotedteetable_LL           SELECT     ORD_NUM,     Dealing_Desk,     AUTH_TIME,     Exception_Type,     --Reversion_Time,     Timespan,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=1 THEN 1 ELSE 0 END AS VG_09_POLICY,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=1 THEN CREATETIME ELSE NULL END AS VG_09_POLICY_CREATETIME,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=5 THEN 1 ELSE 0 END AS VG_09_5_DAY,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=5 THEN CREATETIME ELSE NULL END AS VG_09_5_DAY_CREATETIME,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=10 THEN 1 ELSE 0 END AS VG_09_10_DAY,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=10 THEN CREATETIME ELSE NULL END AS VG_09_10_DAY_CREATETIME,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=20 THEN 1 ELSE 0 END AS VG_09_20_DAY,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=20 THEN CREATETIME ELSE NULL END AS VG_09_20_DAY_CREATETIME,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=40 THEN 1 ELSE 0 END AS VG_09_40_DAY,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=40 THEN CREATETIME ELSE NULL END AS VG_09_40_DAY_CREATETIME,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=80 THEN 1 ELSE 0 END AS VG_09_80_DAY,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=80 THEN CREATETIME ELSE NULL END AS VG_09_80_DAY_CREATETIME,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=160 THEN 1 ELSE 0 END AS VG_09_160_DAY,     CASE WHEN TIMELY_EXECUTION_EXCEPTION=160 THEN CREATETIME ELSE NULL END AS VG_09_160_DAY_CREATETIME     INTO #pivotedteetable_LL     FROM #grouped_table_LL         IF OBJECT_ID('tempdb..#ord_level_table', 'U') IS NOT NULL DROP TABLE #ord_level_table         SELECT * INTO #ord_level_table FROM(         SELECT DISTINCT      po.ORD_NUM,      po.DEALING_DESK,      te.MIN_AUTH AS AUTH_TIME,      te.Exception_Type,      NULL AS Reversion_Time,      NULL AS Timespan,      tr.TR_CRITERIA_ELAPSED, -- included the time above threshold for each exception      (te.VG_09_5_DAY) AS VG_09_POLICY,      (te.VG_09_5_DAY_CREATETIME) AS VG_09_POLICY_CREATETIME,      (te.VG_09_5_DAY) AS VG_09_5_DAY,      (te.VG_09_5_DAY_CREATETIME) AS VG_09_5_CREATETIME,      (te.VG_09_10_DAY) AS VG_09_10_DAY,      (te.VG_09_10_DAY_CREATETIME) AS VG_09_10_DAY_CREATETIME,      (te.VG_09_20_DAY) AS VG_09_20_DAY,      (te.VG_09_20_DAY_CREATETIME) AS VG_09_20_DAY_CREATETIME,      (te.VG_09_40_DAY) AS VG_09_40_DAY,      (te.VG_09_40_DAY_CREATETIME) AS VG_09_40_DAY_CREATETIME,      (te.VG_09_80_DAY) AS VG_09_80_DAY,      (te.VG_09_80_DAY_CREATETIME) AS VG_09_80_DAY_CREATETIME,      (te.VG_09_160_DAY) AS VG_09_160_DAY,      (te.VG_09_160_DAY_CREATETIME) AS VG_09_160_DAY_CREATETIME,      tr.TIMELY_RELEASE_EXCEPTION AS VG_11,      (tr.TR_CREATETIME) AS VG_11_CREATETIME     FROM VISTA_REPORTING.dbo.PM_ORDERS po     LEFT JOIN #pivotedteetable te ON te.ORD_NUM=po.ORD_NUM     LEFT JOIN VISTA_STAGING.dbo.VG_11_TIMELY_RELEASE_EQ_TABLE tr ON tr.ORD_NUM=po.ORD_NUM     WHERE po.DEALING_DESK = 'Equity'      --GROUP BY      --po.ORD_NUM,     --po.DEALING_DESK,     --te.MIN_AUTH,     --te.Exception_Type,     --tr.TIMELY_RELEASE_EXCEPTION         UNION         SELECT DISTINCT      po.ORD_NUM,      po.Dealing_Desk,      te.REBASED_AUTH_TIME,      te.Exception_Type,      te.Reversion_Time,       te.Timespan AS Timespan,      NULL AS TR_CRITERIA_ELAPSED,      MAX(te.VG_09_POLICY) AS VG_09_POLICY,      MIN(te.VG_09_POLICY_CREATETIME) AS VG_09_POLICY_CREATETIME,      MAX(te.VG_09_5_DAY) AS VG_09_5_DAY,      MIN(te.VG_09_5_DAY_CREATETIME) AS VG_09_5_CREATETIME,      MAX(te.VG_09_10_DAY) AS VG_09_10_DAY,      MIN(te.VG_09_10_DAY_CREATETIME) AS VG_09_10_DAY_CREATETIME,      MAX(te.VG_09_20_DAY) AS VG_09_20_DAY,      MIN(te.VG_09_20_DAY_CREATETIME) AS VG_09_20_DAY_CREATETIME,      MAX(te.VG_09_40_DAY) AS VG_09_40_DAY,      MIN(te.VG_09_40_DAY_CREATETIME) AS VG_09_40_DAY_CREATETIME,      MAX(te.VG_09_80_DAY) AS VG_09_80_DAY,      MIN(te.VG_09_80_DAY_CREATETIME) AS VG_09_80_DAY_CREATETIME,      MAX(te.VG_09_160_DAY) AS VG_09_160_DAY,      MIN(te.VG_09_160_DAY_CREATETIME) AS VG_09_160_DAY_CREATETIME,      0 AS VG_11,      NULL AS VG_11_CREATETIME     FROM VISTA_REPORTING.dbo.PM_ORDERS po     LEFT JOIN #pivotedteetable_FI te ON te.ORD_NUM=po.ORD_NUM     WHERE po.DEALING_DESK = 'Fixed Income'      GROUP BY      po.ORD_NUM,     po.Dealing_Desk,     te.REBASED_AUTH_TIME,     te.Exception_Type,     Reversion_Time,     te.Timespan         UNION         SELECT DISTINCT      po.ORD_NUM,      po.Dealing_Desk,      te.AUTH_TIME,      te.Exception_Type,      null as Reversion_Time,       te.Timespan AS Timespan,      NULL AS TR_CRITERIA_ELAPSED,      MAX(te.VG_09_POLICY) AS VG_09_POLICY,      MIN(te.VG_09_POLICY_CREATETIME) AS VG_09_POLICY_CREATETIME,      MAX(te.VG_09_5_DAY) AS VG_09_5_DAY,      MIN(te.VG_09_5_DAY_CREATETIME) AS VG_09_5_CREATETIME,      MAX(te.VG_09_10_DAY) AS VG_09_10_DAY,      MIN(te.VG_09_10_DAY_CREATETIME) AS VG_09_10_DAY_CREATETIME,      MAX(te.VG_09_20_DAY) AS VG_09_20_DAY,      MIN(te.VG_09_20_DAY_CREATETIME) AS VG_09_20_DAY_CREATETIME,      MAX(te.VG_09_40_DAY) AS VG_09_40_DAY,      MIN(te.VG_09_40_DAY_CREATETIME) AS VG_09_40_DAY_CREATETIME,      MAX(te.VG_09_80_DAY) AS VG_09_80_DAY,      MIN(te.VG_09_80_DAY_CREATETIME) AS VG_09_80_DAY_CREATETIME,      MAX(te.VG_09_160_DAY) AS VG_09_160_DAY,      MIN(te.VG_09_160_DAY_CREATETIME) AS VG_09_160_DAY_CREATETIME,      0 AS VG_11,      NULL AS VG_11_CREATETIME     FROM VISTA_REPORTING.dbo.PM_ORDERS po     LEFT JOIN #pivotedteetable_LL te ON te.ORD_NUM=po.ORD_NUM     WHERE po.DEALING_DESK = 'Leveraged Finance'     GROUP BY      po.ORD_NUM,     po.Dealing_Desk,     te.AUTH_TIME,     te.Exception_Type,     te.Timespan                 )     as tmp              IF OBJECT_ID('VISTA_REPORTING.dbo.ORDER_LEVEL_EXCEPTION_TABLE', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.ORDER_LEVEL_EXCEPTION_TABLE         select *      into VISTA_REPORTING.dbo.ORDER_LEVEL_EXCEPTION_TABLE     from #ord_level_table         IF OBJECT_ID('tempdb..#grouped_table', 'U') IS NOT NULL DROP TABLE #grouped_table    IF OBJECT_ID('tempdb..#grouped_table_FI', 'U') IS NOT NULL DROP TABLE #grouped_table_FI    IF OBJECT_ID('tempdb..#grouped_table_LL', 'U') IS NOT NULL DROP TABLE #grouped_table_LL    IF OBJECT_ID('tempdb..#pivotedteetable', 'U') IS NOT NULL DROP TABLE #pivotedteetable    IF OBJECT_ID('tempdb..#pivotedteetable_FI', 'U') IS NOT NULL DROP TABLE #pivotedteetable_FI    IF OBJECT_ID('tempdb..#pivotedteetable_LL', 'U') IS NOT NULL DROP TABLE #pivotedteetable_LL    IF OBJECT_ID('tempdb..#ord_level_table', 'U') IS NOT NULL DROP TABLE #ord_level_table    END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: ORDER_SPLIT  CreateDate: 2025-06-26 18:12:37.890  ModifyDate: 2025-06-26 18:12:37.890  --- DEFINITION START ---  -- =============================================    -- Author:  <Devereux, Alan>    -- Create date: <2017/11/01>    -- Description: <Splits raw orders table into PM and Trader orders.>    -- 2018-08-13: KR : Added the code for creation of Index on PM_ORDERS table.    -- =============================================        CREATE PROCEDURE [dbo].[ORDER_SPLIT]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;                IF OBJECT_ID('VISTA_REPORTING.dbo.TRD_ORDERS', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.TRD_ORDERS    select distinct o.*    --into VISTA_TEMP_2.dbo.TRD_ORDERS    into VISTA_REPORTING.dbo.TRD_ORDERS    from VISTA_REPORTING.dbo.ORDERS o    join VISTA_REPORTING.dbo.ORDERS_CROSS oc on o.ORD_NUM=oc.TRD_ORD        --Create indexes to increase front end speed.    CREATE NONCLUSTERED INDEX TRD_ORDERS_idx1    ON VISTA_REPORTING.[dbo].TRD_ORDERS ([ORD_NUM], TOUCH_COUNT)        IF OBJECT_ID('VISTA_REPORTING.dbo.PM_ORDERS', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.PM_ORDERS    select distinct o.*    --into VISTA_TEMP_2.dbo.PM_ORDERS    into VISTA_REPORTING.dbo.PM_ORDERS    from VISTA_REPORTING.dbo.ORDERS o    join VISTA_REPORTING.dbo.ORDERS_CROSS oc on o.ORD_NUM=oc.PM_ORD    union    select distinct o.*     from VISTA_REPORTING.dbo.ORDERS o    left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on o.ORD_NUM=oc.PM_ORD    where DEALING_DESK = 'CASH' and oc.PM_ORD is null        --Create indexes to increase front end speed.    CREATE NONCLUSTERED INDEX PM_ORDERS_idx1    ON VISTA_REPORTING.[dbo].[PM_ORDERS] ([ORD_NUM], TOUCH_COUNT)        --IF OBJECT_ID('tempdb..#distinct_orders', 'U') IS NOT NULL DROP TABLE #distinct_orders    --select distinct ORD_NUM    --into #distinct_orders    --from VISTA_REPORTING.dbo.ORDERS        --select    -- --(select count(distinct ORD_NUM) from VISTA_TEMP_2.dbo.PM_ORDERS) as PM_ORDER_COUNT,    -- --(select count(distinct ORD_NUM) from VISTA_TEMP_2.dbo.TRD_ORDERS) as TRADER_ORDER_COUNT,    -- --(select count(distinct ORD_NUM) from #distinct_orders) as ORDER_COUNT,    -- --(select count(distinct ORD_NUM) from VISTA_TEMP_2.dbo.PM_ORDERS)+    -- --(select count(distinct ORD_NUM) from VISTA_TEMP_2.dbo.TRD_ORDERS)-    -- --(select count(distinct ORD_NUM) from #distinct_orders) as ORDER_DIFFERENCE,    -- --case    -- -- when     -- -- (select count(distinct ORD_NUM) from VISTA_TEMP_2.dbo.PM_ORDERS)+    -- -- (select count(distinct ORD_NUM) from VISTA_TEMP_2.dbo.TRD_ORDERS)=    -- -- (select count(distinct ORD_NUM) from #distinct_orders) then 0    -- -- else 1 end as ORDER_TRADER_SPLIT_ERROR    -- (select count(distinct ORD_NUM) from VISTA_REPORTING.dbo.PM_ORDERS) as PM_ORDER_COUNT,    -- (select count(distinct ORD_NUM) from VISTA_REPORTING.dbo.TRD_ORDERS) as TRADER_ORDER_COUNT,    -- (select count(distinct ORD_NUM) from #distinct_orders) as ORDER_COUNT,    -- (select count(distinct ORD_NUM) from VISTA_REPORTING.dbo.PM_ORDERS)+    -- (select count(distinct ORD_NUM) from VISTA_REPORTING.dbo.TRD_ORDERS)-    -- (select count(distinct ORD_NUM) from #distinct_orders) as ORDER_DIFFERENCE,    -- case    --  when     --  (select count(distinct ORD_NUM) from VISTA_REPORTING.dbo.PM_ORDERS)+    --  (select count(distinct ORD_NUM) from VISTA_REPORTING.dbo.TRD_ORDERS)=    --  (select count(distinct ORD_NUM) from #distinct_orders) then 0    --  else 1 end as ORDER_TRADER_SPLIT_ERROR        --IF OBJECT_ID('tempdb..#distinct_orders', 'U') IS NOT NULL DROP TABLE #distinct_orders        END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: ORDERS_CROSS_REFRESH  CreateDate: 2025-06-26 18:12:49.393  ModifyDate: 2025-06-26 18:12:49.393  --- DEFINITION START ---  -- =============================================    -- Author:  <Devereux, Alan>    -- Create date: <27/09/2017>    -- Description: <Stored procedure for transformation of staging data    --     into final ORDERS table.>    -- =============================================    CREATE PROCEDURE [dbo].[ORDERS_CROSS_REFRESH]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         DECLARE @TODAY DATE = CAST(GETDATE() AS DATE)         IF OBJECT_ID('VISTA_REPORTING.dbo.ORDERS_CROSS', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.ORDERS_CROSS         select *     into VISTA_REPORTING.dbo.ORDERS_CROSS     from VISTA_STAGING.dbo.ORDERS_CROSS         -- Below deals with PM Orders without a corresponding Trader Order         IF OBJECT_ID('tempdb..#PM_ORDERS', 'U') IS NOT NULL DROP TABLE #PM_ORDERS         SELECT DISTINCT(ORD_NUM)       INTO #PM_ORDERS       FROM [VISTA_REPORTING].[dbo].[ORDERS] o       LEFT JOIN [VISTA_REPORTING].[dbo].[ORDERS_CROSS] oc ON oc.PM_ORD=o.ORD_NUM       WHERE OWNER_TYPE IS NULL --applies to both cases below, added here to reduce computation.       AND oc.TRD_ORD IS NULL --only take values that don't already exist in the Orders Cross table             IF OBJECT_ID('tempdb..#HAVE_TRADES', 'U') IS NOT NULL DROP TABLE #HAVE_TRADES         SELECT DISTINCT(p.ORD_NUM)     INTO #HAVE_TRADES     FROM #PM_ORDERS as p     INNER JOIN [VISTA_STAGING].[dbo].[TRADES] as t on p.ORD_NUM = t.ORD_NUM         --These PM orders have a trade with the same ORD_NUM, so were raised and executed by the same trader.     MERGE [VISTA_REPORTING].[dbo].[ORDERS_CROSS] AS [TARGET]     USING #HAVE_TRADES AS [SOURCE] on [TARGET].PM_ORD = [SOURCE].ORD_NUM     WHEN MATCHED THEN UPDATE SET [TARGET].TRD_ORD = [SOURCE].ORD_NUM     WHEN NOT MATCHED THEN INSERT (PULL_DATE, PM_ORD, TRD_ORD) VALUES (@TODAY,[SOURCE].ORD_NUM,[SOURCE].ORD_NUM)     ;             IF OBJECT_ID('tempdb..#NO_TRADES', 'U') IS NOT NULL DROP TABLE #NO_TRADES         SELECT ORD_NUM     INTO #NO_TRADES     FROM #PM_ORDERS     EXCEPT SELECT * FROM #HAVE_TRADES         --These have no corresponding Trader Order and no trade, so are mid workflow     MERGE[VISTA_REPORTING].[dbo].[ORDERS_CROSS] AS [TARGET]     USING #NO_TRADES AS [SOURCE] on [TARGET].PM_ORD = [SOURCE].ORD_NUM     WHEN MATCHED THEN UPDATE SET [TARGET].TRD_ORD = NULL     WHEN NOT MATCHED THEN INSERT (PULL_DATE, PM_ORD, TRD_ORD) VALUES (@TODAY,[SOURCE].ORD_NUM, NULL)     ;         SELECT DISTINCT PM_ORD, TRD_ORD     INTO #temp_dist_oc     FROM Vista_Reporting.dbo.ORDERS_CROSS         DROP TABLE Vista_Reporting.dbo.ORDERS_CROSS         SELECT *     INTO Vista_Reporting.dbo.ORDERS_CROSS     FROM #temp_dist_oc             IF OBJECT_ID('tempdb..#PM_ORDERS', 'U') IS NOT NULL DROP TABLE #PM_ORDERS     IF OBJECT_ID('tempdb..#HAVE_TRADES', 'U') IS NOT NULL DROP TABLE #HAVE_TRADES     IF OBJECT_ID('tempdb..#NO_TRADES', 'U') IS NOT NULL DROP TABLE #NO_TRADES     IF OBJECT_ID('tempdb..#temp_dist_oc', 'U') IS NOT NULL DROP TABLE #temp_dist_oc             CREATE NONCLUSTERED INDEX oc_idx1     ON VISTA_REPORTING.[dbo].[ORDERS_CROSS] ([PM_ORD], [TRD_ORD])         --CREATE NONCLUSTERED INDEX oc_idx2     --ON VISTA_REPORTING.[dbo].[ORDERS_CROSS] ([TRD_ORD])     --INCLUDE ([PM_ORD])        END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: ORDERS_REFRESH  CreateDate: 2025-06-26 18:16:25.353  ModifyDate: 2025-06-26 18:16:25.353  --- DEFINITION START ---  -- =============================================    -- Author:  <Devereux, Alan>    -- Create date: <27/09/2017>    -- Description: <Stored procedure for transformation of staging data    --     into final ORDERS table.>    -- =============================================        -- ***************VERSION CONTROL***************    -- 04/01/2018 - DDC: PULL_DATE added.        -- 22/02/2018 - DDC: Added in validation to deal with the     -- fact that DATETIME values for AUTH_TIME and ACTIVE_TIME    -- have not all been NULL in the STAGING database. When     -- they are '1900-01-01 00:00:00.000' the new measures    -- will force the DATETIME to be NULL        -- 2018-03-21 - WH: Removed reference to BUY_SELL_FLAG - used TRAN_TYPE instead        -- 2018-04-08 - WH: Added in ASSIGNED_TO field - this is required to identify when a trader reverts an order back to a PM        -- 2019-03-04 - ER: added in [OPEN_DATE] FIELD  as required for FX desks        -- 2019-05-29 - MS: Changed join on TREASURY_DEALER_DESK table to consider pull date        -- 2019-05-31 - ER: Added in new logic to pull CASH dealing desk.        -- 2019-06-19 - DDC: Added temp table to exclude DMG orders that existed before go-live        -- 2019-06-26 - ER: Added in FX desk following updated BRD        -- 2019-07-05 - DDC: Amended script to only calculate dealing desk based on the rows associated witht the MAX(TOUCH_COUNT)        -- 2019-07-11 - ER: Updated FX desk logic to only include the Aladdin ONLY orders.     -- *********************************************        CREATE PROCEDURE [dbo].[ORDERS_REFRESH]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        --IF OBJECT_ID('tempdb..#single_asset_types', 'U') IS NOT NULL DROP TABLE #single_asset_types    --select    -- i.CUSIP    --into #single_asset_types    --from VISTA_STAGING.dbo.INSTRUMENTS i    --left join VISTA_STAGING.dbo.INITIAL_INSTRUMENTS ii on i.SM_SEC_TYPE=ii.ASSET_SUB_TYPE and i.SM_SEC_GROUP=ii.ASSET_TYPE    --group by i.CUSIP    --having count(distinct(ii.ASSET_CLASS)) = 1        --IF OBJECT_ID('tempdb..#asset_types', 'U') IS NOT NULL DROP TABLE #asset_types    --select distinct    -- i.CUSIP,    -- ii.ASSET_CLASS    --into #asset_types    --from #single_asset_types a    --join VISTA_STAGING.dbo.INSTRUMENTS i on a.CUSIP=i.CUSIP    --join VISTA_STAGING.dbo.INITIAL_INSTRUMENTS ii on i.SM_SEC_TYPE=ii.ASSET_SUB_TYPE and i.SM_SEC_GROUP=ii.ASSET_TYPE        --select * from #asset_types        --not required due to no 360t data    --IF OBJECT_ID('tempdb..#temp_360_table', 'U') IS NOT NULL DROP TABLE #temp_360_table    --SELECT DISTINCT    -- t.ORD_NUM,    -- tso.ALADDIN_PLACEMENT_ID,    -- p.PORTFOLIO_GROUP    --INTO #temp_360_table    --FROM VISTA_STAGING.dbo.[360T_ORDERS] tso    --LEFT JOIN VISTA_STAGING.dbo.REQUEST_LOOKUP rl ON rl.REQUEST_ID = tso.ALADDIN_PLACEMENT_ID    ----LEFT JOIN VISTA_STAGING.dbo.PLACEMENTS pl ON pl.PLACEMENT_NUM = rl.PLACEMENT_NUM    --LEFT JOIN(select distinct ord_num, placement_num, fund from VISTA_STAGING.dbo.TRADES) t ON t.PLACEMENT_NUM = rl.PLACEMENT_NUM    --LEFT JOIN (select distinct fund, portfolio_group from VISTA_STAGING.dbo.PORTFOLIO ) p ON p.FUND = t.FUND    ----    ----IF OBJECT_ID('tempdb..#temp_cash_trades', 'U') IS NOT NULL DROP TABLE #temp_cash_trades    ----select distinct     ---- t.MULTI_FUND_ID,    ---- t.ORD_NUM    ----from VISTA_reporting.dbo.TRADES t    ----where t.TRD_LOCATION = 'PCAP' and t.SM_SEC_GROUP = 'CASH' and t.SM_SEC_TYPE in ('CD', 'CP', 'TBILL')        --IF OBJECT_ID('tempdb..#temp_min_pdate_ord', 'U') IS NOT NULL DROP TABLE #temp_min_pdate_ord    --SELECT DISTINCT    -- o.ORD_NUM,    -- o.PULL_DATE    --INTO #temp_min_pdate_ord    --FROM VISTA_STAGING.dbo.ORDERS o    --WHERE NOT EXISTS (SELECT ORD_NUM FROM VISTA_STAGING.dbo.ORDERS WHERE ORD_NUM = o.ORD_NUM AND PULL_DATE < '2019-06-18 00:00:00.000')        --IF OBJECT_ID('tempdb..#temp_min_pdate_ord_cash', 'U') IS NOT NULL DROP TABLE #temp_min_pdate_ord_cash    --SELECT DISTINCT    -- o.ORD_NUM,    -- o.PULL_DATE    --INTO #temp_min_pdate_ord_cash    --FROM VISTA_STAGING.dbo.ORDERS o    --WHERE  NOT EXISTS (SELECT ORD_NUM FROM VISTA_STAGING.dbo.ORDERS WHERE ORD_NUM = o.ORD_NUM AND PULL_DATE < '2019-08-09 00:00:00.000')        --IF OBJECT_ID('tempdb..#temp_min_pdate_ord_fx', 'U') IS NOT NULL DROP TABLE #temp_min_pdate_ord_fx    --SELECT DISTINCT    -- o.ORD_NUM,    -- o.PULL_DATE    --INTO #temp_min_pdate_ord_fx     --FROM VISTA_STAGING.dbo.ORDERS o    --WHERE NOT EXISTS (SELECT ORD_NUM FROM VISTA_STAGING.dbo.ORDERS WHERE ORD_NUM = o.ORD_NUM AND PULL_DATE < '2019-08-23 00:00:00.000')            IF OBJECT_ID('tempdb..#temp_orders', 'U') IS NOT NULL DROP TABLE #temp_orders    SELECT      o.*,     CASE       WHEN o.PULL_DATE >= '2019-06-18 00:00:00.000'         AND NOT EXISTS (SELECT ORD_NUM FROM VISTA_STAGING.dbo.ORDERS WHERE ORD_NUM = o.ORD_NUM AND PULL_DATE < '2019-06-18 00:00:00.000') THEN 1      ELSE 0     END AS DMG_FLAG,     CASE       WHEN o.PULL_DATE >= '2019-08-09 00:00:00.000'       AND NOT EXISTS (SELECT ORD_NUM FROM VISTA_STAGING.dbo.ORDERS WHERE ORD_NUM = o.ORD_NUM AND PULL_DATE < '2019-08-09 00:00:00.000') THEN 1      ELSE 0     END AS CASH_FLAG,     CASE       WHEN o.PULL_DATE >= '2019-08-23 00:00:00.000'       AND NOT EXISTS (SELECT ORD_NUM FROM VISTA_STAGING.dbo.ORDERS WHERE ORD_NUM = o.ORD_NUM AND PULL_DATE < '2019-08-23 00:00:00.000') THEN 1      ELSE 0     END AS FX_FLAG    INTO #temp_orders    FROM Vista_Staging.dbo.ORDERS o            IF OBJECT_ID('tempdb..#max_touch', 'U') IS NOT NULL DROP TABLE #max_touch    SELECT      ORD_NUM,     MAX(TOUCH_COUNT) AS MAX_TOUCH    INTO #max_touch    FROM VISTA_STAGING.dbo.ORDERS    WHERE TRADER IS NOT NULL    GROUP BY ORD_NUM            IF OBJECT_ID('tempdb..#max_touch_dd', 'U') IS NOT NULL DROP TABLE #max_touch_dd    SELECT DISTINCT     o.ORD_NUM,     o.ASSIGNED_TO,     o.SM_SEC_GROUP,     o.SM_SEC_TYPE,     o.TRADER,     o.PM,     o.PORTFOLIO_NAME,     o.DMG_FLAG,     o.CASH_FLAG,     o.FX_FLAG,     CAST(o.PULL_DATE AS DATE) AS PULL_DATE,     o.SEC_DESC1,     tdd.DEALING_DESK AS T_DEALING_DESK,     tdd.DATE_FROM AS T_DATE_FROM,     tdd.DATE_TO AS T_DATE_TO,     PO.PORTFOLIO_GROUP    INTO #max_touch_dd    FROM #temp_orders o    INNER JOIN #max_touch mt ON mt.ORD_NUM=o.ORD_NUM AND mt.MAX_TOUCH=o.TOUCH_COUNT    LEFT JOIN (SELECT DISTINCT PORTFOLIO_GROUP, PORTFOLIOS_PORTFOLIO_NAME FROM VISTA_STAGING.DBO.PORTFOLIO) PO ON PO.PORTFOLIOS_PORTFOLIO_NAME = o.PORTFOLIO_NAME    LEFT JOIN (SELECT DISTINCT         INITIALS,         cast(DATE_FROM as date) AS DATE_FROM,         cast(DATE_TO AS DATE) AS DATE_TO,         DEALING_DESK        FROM VISTA_REPORTING.dbo.TREASURY_DEALER_DESK) tdd ON tdd.initials = o.TRADER and o.PULL_DATE between tdd.DATE_FROM and tdd.DATE_TO            IF OBJECT_ID('tempdb..#temp_max_dd_table', 'U') IS NOT NULL DROP TABLE #temp_max_dd_table    SELECT DISTINCT     o2.ORD_NUM,     CASE       --WHEN o2.ASSIGNED_TO = 'PRUCAP' AND o2.SM_SEC_GROUP = 'FX' AND TDD.DEALING_DESK = 'FX' AND CAST(o2.PULL_DATE AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE)      -- AND TMPFX.PULL_DATE IS NULL      -- THEN 'FX'      WHEN         o2.SM_SEC_GROUP = 'OPTION'         AND o2.SM_SEC_TYPE = 'CUROTC'         AND (o2.ASSIGNED_TO = 'PRUCAP' AND TRADER IS NULL AND ISNULL(o2.PORTFOLIO_GROUP , '') != 'MG_PCAP')        --OR (o2.ASSIGNED_TO IS NULL AND o2.T_DEALING_DESK = 'FX'))        AND o2.FX_FLAG = 1        THEN 'FX'      WHEN o2.SM_SEC_GROUP = 'OPTION'         AND o2.SM_SEC_TYPE = 'CUROTC'         --AND ((o2.ASSIGNED_TO = 'PRUCAP' AND TRADER IS NULL AND ISNULL(PO.PORTFOLIO_GROUP , '') != 'MG_PCAP')        AND (o2.ASSIGNED_TO IS NULL AND o2.T_DEALING_DESK = 'FX')        AND o2.FX_FLAG = 1        THEN 'FX'     -- WHEN o2.ASSIGNED_TO IS NULL AND tdd.dealing_desk = 'FX'       --         AND cast(o2.PULL_DATE as date) BETWEEN cast(tdd.DATE_FROM as date) AND cAST(TDD.DATE_TO AS DATE)       --AND TMPFX.PULL_DATE IS NULL       --THEN 'FX'      WHEN o2.ASSIGNED_TO = 'PRUCAP' AND o2.T_DEALING_DESK = 'DMG' --AND tdd.ID_SOURCE = 'ALADDIN'                and cast(o2.PULL_DATE as date) between cast(o2.T_DATE_FROM as date) and cast(o2.T_DATE_TO AS DATE)                and (o2.SM_SEC_GROUP != 'FX' and o2.SM_SEC_TYPE not in ('SPOT', 'FWRD'))               AND o2.DMG_FLAG = 1               THEN  'DMG'       WHEN o2.ASSIGNED_TO IS NULL AND o2.T_DEALING_DESK = 'DMG' --AND tdd.ID_SOURCE = 'ALADDIN'                AND cast(o2.PULL_DATE as date) BETWEEN cast(o2.T_DATE_FROM as date) AND cAST(o2.T_DATE_TO AS DATE)               AND (o2.SM_SEC_GROUP != 'FX' and o2.SM_SEC_TYPE not in ('SPOT', 'FWRD'))               AND o2.DMG_FLAG = 1               THEN  'DMG'       WHEN o2.SM_SEC_GROUP = 'OPTION'         AND o2.SM_SEC_TYPE = 'CUROTC'         AND (o2.ASSIGNED_TO = 'PRUCAP'  AND TRADER IS NULL AND ISNULL( o2.PORTFOLIO_GROUP , '') = 'MG_PCAP') --OR        --(o2.ASSIGNED_TO IS NULL AND o2.T_DEALING_DESK = 'DMG'))        AND o2.DMG_FLAG = 1        THEN 'DMG'      WHEN o2.SM_SEC_GROUP = 'OPTION'         AND o2.SM_SEC_TYPE = 'CUROTC'         --AND ((o2.ASSIGNED_TO = 'PRUCAP'  AND TRADER IS NULL AND ISNULL( PO.PORTFOLIO_GROUP , '') = 'MG_PCAP') OR        AND (o2.ASSIGNED_TO IS NULL AND o2.T_DEALING_DESK = 'DMG')        AND o2.DMG_FLAG = 1        THEN 'DMG'      --and cast(o.PULL_DATE as date) >= '2019-06-17 00:00:00' THEN 'DMG' --go live date      WHEN o2.ASSIGNED_TO = 'PRUCAP'         AND o2.DMG_FLAG = 1        --AND cast(o.PULL_DATE as date) >= '2019-06-17 00:00:00' --GO LIVE DATE.        AND (o2.SM_SEC_GROUP = 'SWAP' AND o2.SM_SEC_TYPE in ('CDSWAP',  'SWAP', 'TRSWAP'))          --OR (o2.SM_SEC_GROUP = 'SWAP' AND o2.SM_SEC_TYPE = 'SWAP')         --OR (o2.SM_SEC_GROUP = 'SWAP' AND o2.SM_SEC_TYPE = 'TRSWAP')         --(o2.SM_SEC_GROUP = 'BND' AND o2.SM_SEC_TYPE = 'GOVT')         --OR (o2.SM_SEC_GROUP = 'OPTION' AND o2.SM_SEC_TYPE = 'EQUITY'))         --OR (o.SM_SEC_GROUP = 'OPTION' AND o.SM_SEC_TYPE = 'CUROTC'))        THEN 'DMG'      WHEN o2.ASSIGNED_TO = 'PRUCAP'         AND o2.DMG_FLAG = 1        --AND cast(o.PULL_DATE as date) >= '2019-06-17 00:00:00' --GO LIVE DATE.        AND (  --o2.SM_SEC_GROUP = 'SWAP' AND o2.SM_SEC_TYPE in ('CDSWAP',  'SWAP', 'TRSWAP'))          --OR (o2.SM_SEC_GROUP = 'SWAP' AND o2.SM_SEC_TYPE = 'SWAP')         --OR (o2.SM_SEC_GROUP = 'SWAP' AND o2.SM_SEC_TYPE = 'TRSWAP')         (o2.SM_SEC_GROUP = 'BND' AND o2.SM_SEC_TYPE = 'GOVT')         OR (o2.SM_SEC_GROUP = 'OPTION' AND o2.SM_SEC_TYPE = 'EQUITY'))         --OR (o.SM_SEC_GROUP = 'OPTION' AND o.SM_SEC_TYPE = 'CUROTC'))        THEN 'DMG'      WHEN o2.ASSIGNED_TO = 'PRUCAP' and o2.SM_SEC_GROUP = 'CASH' and o2.SM_SEC_TYPE in ('CD', 'CP', 'TBILL')        AND nullif(o2.SEC_DESC1, '') not in ('PRUDENTIAL PLC', 'PRUDENTIAL CAPITAL PLC', 'PRUDENTIAL CAPITAL HOLDING COMPANY', 'PRUDENTIAL CAPITAL (SINGAPORE) PTE')        AND o2.CASH_FLAG = 1       THEN 'CASH'      WHEN o2.ASSIGNED_TO is null and o2.SM_SEC_GROUP = 'CASH' and o2.SM_SEC_TYPE in ('CD', 'CP', 'TBILL')  AND o2.T_DEALING_DESK = 'CASH'       AND nullif(o2.SEC_DESC1, '') not in ('PRUDENTIAL PLC', 'PRUDENTIAL CAPITAL PLC', 'PRUDENTIAL CAPITAL HOLDING COMPANY', 'PRUDENTIAL CAPITAL (SINGAPORE) PTE')        AND o2.CASH_FLAG = 1       THEN 'CASH'      ELSE        CASE         --WHEN o.ASSIGNED_TO_STATUS = 'RETURNED' AND o.TRADER IS NULL THEN dd4.DEALING_DESK        WHEN o2.ASSIGNED_TO = 'CLPSI' THEN 'CALPSI'        WHEN o2.ASSIGNED_TO = 'FUNDADPT' THEN 'Fund Adapter'        WHEN o2.ASSIGNED_TO = 'ITAP' THEN 'ITAP'        WHEN o2.ASSIGNED_TO = 'CIS-MANUAL' THEN 'CIS-MANUAL'        --WHEN o.ASSIGNED_TO = 'PRUCAP' OR (O.SM_SEC_GROUP = 'OPTION' AND O.SM_SEC_TYPE = 'CUROTC') OR SM_SEC_GROUP = 'FX' THEN 'FX'        WHEN o2.ASSIGNED_TO = 'EQ-Dealing' THEN 'Equity'        WHEN o2.ASSIGNED_TO = 'FI-Dealing' THEN 'Fixed Income'        WHEN o2.ASSIGNED_TO = 'PROBLEM' THEN 'PROBLEM'        WHEN o2.ASSIGNED_TO = 'RETURNED' THEN 'RETURNED'        WHEN o2.ASSIGNED_TO= 'Lev Finance' THEN 'Leveraged Finance'        WHEN o2.ASSIGNED_TO is NULL then d2.DEALING_DESK        else NULL        end     end as DEALING_DESK    INTO #temp_max_dd_table    FROM #max_touch_dd o2    --LEFT JOIN (SELECT DISTINCT PORTFOLIO_GROUP, PORTFOLIOS_PORTFOLIO_NAME FROM VISTA_STAGING.DBO.PORTFOLIO) PO ON PO.PORTFOLIOS_PORTFOLIO_NAME = o2.PORTFOLIO_NAME    LEFT JOIN (SELECT DISTINCT INITIALS, FULL_NAME, DEALING_DESK FROM VISTA_REPORTING.dbo.DEALER_AND_DESK) d2 ON d2.INITIALS=o2.TRADER    --LEFT JOIN #temp_min_pdate_ord tmpd ON tmpd.ORD_NUM=o2.ORD_NUM --AND CONVERT(DATE, tmpd.PULL_DATE) = CONVERT(DATE, o2.PULL_DATE)    --LEFT JOIN #temp_min_pdate_ord_fx TMPFX ON TMPFX.ORD_NUM = o2.ORD_NUM --AND CONVERT(DATE, TMPFX.PULL_DATE) = CONVERT(DATE, o2.PULL_DATE)    --LEFT JOIN #temp_min_pdate_ord_cash TMPc ON TMPc.ORD_NUM = o2.ORD_NUM --AND CONVERT(DATE, TMPc.PULL_DATE) = CONVERT(DATE, o2.PULL_DATE)    --LEFT JOIN (SELECT DISTINCT INITIALS, cast(DATE_FROM as date) AS DATE_FROM, cast(DATE_TO AS DATE) AS DATE_TO, DEALING_DESK FROM VISTA_REPORTING.dbo.TREASURY_DEALER_DESK) tdd ON tdd.initials = o2.TRADER and o2.PULL_DATE between tdd.DATE_FROM and tdd.DATE_TO            IF OBJECT_ID('VISTA_REPORTING.dbo.ORDERS', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.ORDERS    SELECT DISTINCT     o.PULL_DATE,     o.ORD_NUM,     o.ORIG_ORD_NUM,     o.ASSIGNED_TO,     o.ASSIGNED_TO_STATUS,     o.OWNER_TYPE,     o.PM,     o.TRADER,     d.FULL_NAME as PM_FULL_NAME,     d2.FULL_NAME as TRADER_FULL_NAME,     o.SEC_DESC1,     case      WHEN o.OWNER_TYPE = 'P' THEN ENTRY_TIME      else NULL      end as ENTRY_TIME,     case       WHEN o.AUTH_TIME='1900-01-01 00:00:00.000' THEN NULL      else o.AUTH_TIME     end as AUTH_TIME,     case       WHEN o.ACTIVE_TIME='1900-01-01 00:00:00.000' THEN NULL      else o.ACTIVE_TIME     end as ACTIVE_TIME,     o.BROKER_CODE,     o.COMMENTS_VALUE,     o.UPDATE_INSTR,     o.TRAN_TYPE,     o.LIMIT_TYPE,     o.LIMIT_VALUE,     o.MATURITY,     o.CUSIP,     o.ORD_GROUP,     o.FACE,     o.STATUS,     o.ORDER_REASON,     dc.VALUE as ORDER_REASON_DECODE,     o.SM_SEC_GROUP,     o.SM_SEC_TYPE,     o.FILL_AMT,     o.TOUCH_COUNT,     o.MODIFY_TIME,     o.SETTLE_DATE,     o.COUNTRY,     o.DIR_BROKER_ACCT,     o.CURRENCY,     o.ORD_REL_ID,     o.ORD_REL_TYPE,     dd.DEALING_DESK,     o.OPEN_DATE    into VISTA_REPORTING.dbo.ORDERS    FROM VISTA_STAGING.dbo.ORDERS o    LEFT JOIN (SELECT * FROM #temp_max_dd_table WHERE DEALING_DESK IS NOT NULL) dd ON dd.ORD_NUM=o.ORD_NUM    LEFT JOIN (SELECT CODE, [VALUE] FROM VISTA_STAGING.dbo.DECODES WHERE TAG_NAME='TrdPurpose') as dc on o.ORDER_REASON=dc.CODE    LEFT JOIN (SELECT DISTINCT INITIALS, FULL_NAME FROM VISTA_REPORTING.dbo.DEALER_AND_DESK) d ON d.INITIALS=o.PM    LEFT JOIN (SELECT DISTINCT INITIALS, FULL_NAME, DEALING_DESK FROM VISTA_REPORTING.dbo.DEALER_AND_DESK) d2 ON d2.INITIALS=o.TRADER              IF OBJECT_ID('tempdb..#temp_min_pdate_ord', 'U') IS NOT NULL DROP TABLE #temp_min_pdate_ord    IF OBJECT_ID('tempdb..#temp_min_pdate_ord_fx', 'U') IS NOT NULL DROP TABLE #temp_min_pdate_ord_fx    IF OBJECT_ID('tempdb..#max_touch', 'U') IS NOT NULL DROP TABLE #max_touch    IF OBJECT_ID('tempdb..#max_touch_dd', 'U') IS NOT NULL DROP TABLE #max_touch_dd    IF OBJECT_ID('tempdb..#temp_max_dd_table', 'U') IS NOT NULL DROP TABLE #temp_max_dd_table            --CREATE NONCLUSTERED INDEX ORDERS_idx1    --ON VISTA_REPORTING.[dbo].ORDERS ([ORD_NUM], TOUCH_COUNT)        IF EXISTS (SELECT name FROM sys.indexes                  WHERE name = N'ORDERS_idx1')       DROP INDEX ORDERS_idx1     ON VISTA_REPORTING.[dbo].ORDERS     CREATE NONCLUSTERED INDEX ORDERS_idx1 ON VISTA_REPORTING.[dbo].ORDERS (ORD_NUM, DEALING_DESK)        END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: PLACEMENTS_REFRESH  CreateDate: 2025-06-26 18:16:44.793  ModifyDate: 2025-06-26 18:16:44.793  --- DEFINITION START ---          -- =============================================    -- Author:  <Devereux, Alan>    -- Create date: <27/09/2017>    -- Description: <Stored procedure for transformation of staging data    --     into final PLACEMENTS table.>    -- =============================================        -- ***************VERSION CONTROL***************    -- 04/01/2018 - DDC: PULL_DATE added.        -- 15/02/2018 - DDC: Join between TRADES and PLACEMENTS    -- amended to be a LEFT JOIN on PLACEMENT_NUM to allow     -- mitigate the problem of multiple VENUES at MULTI_FUND_ID     -- level yet still be able to take the MIN(RELEASE_DATETIME)    -- across all PLACEMENTS        -- 2018-02-16 - WH: Added in the FULL_NAME from the decodes tables    -- 2018-07-23 - KR: Added temp tables to improve the performance    -- 2019-03-04 - ER: Added in new columns AVG_PRICE,BROKER_CODE, BROKER, FINISH_TIME as required for FX logics.    -- 2020-06-12 - DDC: Logic amended to remove SEND_TIME and CREATE_TIME from the ROUTE_DATETIME calculation    -- *********************************************    CREATE PROCEDURE [dbo].[PLACEMENTS_REFRESH]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        IF OBJECT_ID('tempdb..#venue_decode', 'U') IS NOT NULL DROP TABLE #venue_decode        SELECT DISTINCT     p.PULL_DATE,      p.PLACEMENT_NUM,     p.VENUE,     vd.SHORTNAME,     vd.FULL_NAME    INTO #venue_decode    FROM VISTA_STAGING.dbo.PLACEMENTS p    JOIN VISTA_STAGING.dbo.VENUE_DECODES vd ON CAST(vd.ACCT_CODE AS varchar)= CAST(p.VENUE AS varchar)        IF OBJECT_ID('tempdb..#trade', 'U') IS NOT NULL DROP TABLE #trade        SELECT DISTINCT    MULTI_FUND_ID,    PLACEMENT_NUM,    EXECUTION_TIME    INTO #trade    FROM VISTA_STAGING.dbo.TRADES        IF OBJECT_ID('tempdb..#requestlookup', 'U') IS NOT NULL DROP TABLE #requestlookup        SELECT DISTINCT    PLACEMENT_NUM,    REQUEST_ID    INTO #requestlookup    FROM VISTA_STAGING.dbo.REQUEST_LOOKUP        IF OBJECT_ID('tempdb..#emsxorders', 'U') IS NOT NULL DROP TABLE #emsxorders        SELECT DISTINCT    [Block ID],    [Order Number]    INTO #emsxorders    FROM VISTA_STAGING.dbo.EMSX_ORDERS        IF OBJECT_ID('tempdb..#emsxroutes', 'U') IS NOT NULL DROP TABLE #emsxroutes        SELECT DISTINCT [Order Number],    NULLIF(CONVERT(datetime, concat([route date], ' ', [route time]), 3),'1900-01-01') AS RD     INTO #emsxroutes    FROM  VISTA_STAGING.dbo.EMSX_ROUTES        CREATE INDEX TEMP_NAME ON #emsxroutes ([Order Number])        CREATE INDEX TEMP_NAME1 ON #emsxorders ([Order Number])            IF OBJECT_ID('tempdb..#placements', 'U') IS NOT NULL DROP TABLE #placements        SELECT DISTINCT    PULL_DATE,    PLACEMENT_NUM,    ORD_NUM,    QUANTITY_FILLED,    QUANTITY,    STATUS,    MODIFIED_TIME,    SEND_TIME,    CREATE_TIME,    VENUE,    AVG_PRICE,    BROKER_CODE,    [BROKER],    FINISH_TIME,    MODIFY_REASON    INTO #placements    FROM VISTA_STAGING.dbo.PLACEMENTS            IF OBJECT_ID('VISTA_REPORTING.DBO.PLACEMENTS', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.DBO.PLACEMENTS        select distinct     p.PULL_DATE,     p.PLACEMENT_NUM,     t.MULTI_FUND_ID,     p.ORD_NUM,     p.QUANTITY_FILLED,     p.QUANTITY,     p.STATUS,     p.MODIFIED_TIME,     COALESCE(p.SEND_TIME, p.CREATE_TIME, t.EXECUTION_TIME) as RELEASE_DATETIME,     COALESCE(RD, t.EXECUTION_TIME) as ROUTE_DATETIME,     case       when p.VENUE = 'nan' then 'MANUAL PL' else COALESCE(v.SHORTNAME, 'MANUAL PL')      end as VENUE,     case       when p.VENUE = 'nan' then 'MANUAL PL' else COALESCE(v.FULL_NAME, 'MANUAL PL')      end as FULL_NAME_VENUE,     AVG_PRICE,     BROKER_CODE,     [BROKER],     FINISH_TIME,     CREATE_TIME,     MODIFY_REASON    into VISTA_REPORTING.dbo.PLACEMENTS    from #placements p    left join #trade t on t.PLACEMENT_NUM=p.PLACEMENT_NUM    left join #venue_decode v on v.PLACEMENT_NUM=p.PLACEMENT_NUM    left join #requestlookup as rl on p.PLACEMENT_NUM=rl.PLACEMENT_NUM     left join #emsxorders as eo on rl.REQUEST_ID=eo.[Block ID]    left join #emsxroutes as er on eo.[Order Number]=er.[Order Number]            IF OBJECT_ID('tempdb..#venue_decode', 'U') IS NOT NULL DROP TABLE #venue_decode        END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: PORTFOLIO_GROUP_REFRESH  CreateDate: 2025-06-26 18:17:08.590  ModifyDate: 2025-06-26 18:17:08.590  --- DEFINITION START ---  ---------------------New Comment Style-------------------------------------------------    --2021-08-13;Matej Miter created for Jira:    --SURVG-505 - Remaped from MG_INSTI into MG_INTER as managed by internal team within M&G        --2021-08-16; Matej Miter Created for Jira:    --SURVG-511 - Added additional Parent funds for some base funds within porfolio groups closure table as per requirements within stated Jira        --2021-12-16; Matej Miter created for Jira:    --SURVG-628 - Changed mapping for multiple base funds to MG_ABS instead MG_ATCRED        --2022-01-17; Matej Miter created for Jira:    --SURVG-636 - Changed mapping for multiple base funds to MG_ABS instead MG_ATCRED, additionally remapped multiple based funds to MG_SPFIN and MG_CATA instaed of MG_ATCRED.            ----------------------------------------------------------------------------------------    CREATE PROCEDURE [dbo].[PORTFOLIO_GROUP_REFRESH]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         /****** Script for SelectTopNRows command from SSMS  ******/     IF OBJECT_ID('tempdb..#latest_port_groups', 'U') IS NOT NULL DROP TABLE #latest_port_groups         SELECT DISTINCT        p1.[ASOF_DATE]          ,p1.[Updated]          ,p1.[FUND]          ,p1.[PORTFOLIOS_PORTFOLIO_NAME]          ,p1.[PORTFOLIO_GROUP_FULL_NAME]          ,p1.[PORTFOLIO_GROUP_NAME]     INTO #latest_port_groups     FROM [VISTA_STAGING].[dbo].[PORTFOLIO_GROUPS] as p1     INNER JOIN (         SELECT           [PORTFOLIOS_PORTFOLIO_NAME]          ,MAX(Updated) as LATEST_UPDATE         FROM [VISTA_STAGING].[dbo].[PORTFOLIO_GROUPS]         GROUP BY PORTFOLIOS_PORTFOLIO_NAME       ) as p2 on p1.PORTFOLIOS_PORTFOLIO_NAME=p2.PORTFOLIOS_PORTFOLIO_NAME and p1.Updated=p2.LATEST_UPDATE           DELETE FROM [VISTA_STAGING].[dbo].[PORTFOLIO_GROUPS]           INSERT INTO [VISTA_STAGING].[dbo].[PORTFOLIO_GROUPS]       SELECT * FROM #latest_port_groups         IF OBJECT_ID('VISTA_STAGING.dbo.PORTFOLIO_GROUP_CLOSURE_TABLE', 'U') IS NOT NULL DROP TABLE VISTA_STAGING.dbo.PORTFOLIO_GROUP_CLOSURE_TABLE;     WITH portfolio_cte AS     (      SELECT       PORTFOLIOS_PORTFOLIO_NAME as ancestor,       PORTFOLIOS_PORTFOLIO_NAME as descendant,       0 as depth      FROM VISTA_STAGING.dbo.PORTFOLIO_GROUPS           UNION ALL      --Assigned additional base funds to client funds 'COALGL','COALJP','COATR','DNACH','DNAGL','DNAJP','DNATR'      --SURVG-511 -- Assigned additional base funds to client funds 'OBMBL','OBPAFE','OBPAFG','OBPAFU','OPMBL','OPPAFE','OPPAFG','OPPAFU'      --Additionally created few more parent funds when statements to incorporate changes for base funds 'OCMBL','PEFMBL','PUFMBL'      SELECT       CASE         WHEN PORTFOLIOS_PORTFOLIO_NAME in ('COALEM','COALGL','COALJP','COATR') THEN 'COAL_CF'        WHEN PORTFOLIOS_PORTFOLIO_NAME in ('DNAEM','DNACH','DNAGL','DNAJP','DNATR') THEN 'DNA_CF'        WHEN PORTFOLIOS_PORTFOLIO_NAME in ('OBMGFI', 'OBMGSD', 'OBUTRU','OBMBL','OBPAFE','OBPAFG','OBPAFU') THEN 'OBMG'        WHEN PORTFOLIOS_PORTFOLIO_NAME in ('OBPCFI', 'OBPCSD','OPMBL','OPPAFE','OPPAFG','OPPAFU') THEN 'OBPC'        WHEN PORTFOLIOS_PORTFOLIO_NAME in ('OCMGSD') THEN 'OCMG'        WHEN PORTFOLIOS_PORTFOLIO_NAME in ('SALFI') THEN 'SAL'        WHEN PORTFOLIOS_PORTFOLIO_NAME in ('SACFFI') THEN 'SACF'        WHEN PORTFOLIOS_PORTFOLIO_NAME in ('OCMBL') THEN 'OCMG'        WHEN PORTFOLIOS_PORTFOLIO_NAME in ('PEFMBL') THEN 'PEF'        WHEN PORTFOLIOS_PORTFOLIO_NAME in ('PUFMBL') THEN 'PUF'       END AS ancestor,       --End of SURVG-511       PORTFOLIOS_PORTFOLIO_NAME as descendant,       2 as depth      FROM VISTA_STAGING.dbo.PORTFOLIO_GROUPS      WHERE PORTFOLIOS_PORTFOLIO_NAME IN ('COALEM','COALGL','COALJP','COATR','DNAEM','DNACH','DNAGL','DNAJP','DNATR', 'OBMGFI', 'OBMGSD', 'OBUTRU', 'OBMBL', 'OBPAFE', 'OBPAFG', 'OBPAFU','OBPCFI', 'OBPCSD', 'OPMBL', 'OPPAFE', 'OPPAFG', 'OPPAFU', 'OCMGSD', 'SAL  FI', 'SACFFI', 'OCMBL', 'PEFMBL', 'PUFMBL')      UNION ALL          SELECT       'MG_RET_FI' AS ancestor,       PORTFOLIOS_PORTFOLIO_NAME as descendant,       4 as depth      FROM VISTA_STAGING.dbo.PORTFOLIO_GROUPS      WHERE PORTFOLIOS_PORTFOLIO_NAME IN ('EMMA', 'EMMIF')          UNION ALL          SELECT       CASE         WHEN CTE.ancestor = 'MG_ATCRED' AND P.PORTFOLIOS_PORTFOLIO_NAME = 'CIIT' THEN 'MG_INTER'        --SURVG-505 - Remaped from MG_INSTI into MG_INTER as managed by internal team within M&G        WHEN CTE.ancestor = 'MG_INSTI' AND P.PORTFOLIOS_PORTFOLIO_NAME in ('CDI2_CF','IBS_CF','PSSD_CF') THEN 'MG_INTER'        --End of SURVG-505        --SURVG-628 - Remapped from MG_ATCRED to MG_ABS as requested by Andrew         WHEN CTE.ancestor = 'MG_ATCRED' AND P.PORTFOLIOS_PORTFOLIO_NAME in ('DHL2A','DHL2B','IC7SA','ICOF2A','ICOF2B','ICOF3A','ICOF3B','ICOF4A','ICOF4B','ICOF5A','ICOF5B','ICOF6A','ICOF6B','ICOF7A','ICOFA','ICOFB','LDAF3A','WHL2A','WHL2B','ICOF3','MICH','LIO  17','KELDAU','LIO12','LIO14','CANOP','LIO4','DIAG','LIO16','DHL','DHLL','LION3','LION7','SABCF','TKPI','LIO15','DHLU','TRWPT','TRWPTU','KELDA','LIO17_CF') THEN 'MG_ABS'        --End of SURVG-628        --SURVG-636        WHEN CTE.ancestor = 'MG_ATCRED' AND P.PORTFOLIOS_PORTFOLIO_NAME in ('OPMBL','OPPAFU','PEFMBL','PCO1S','OPPAFG','PCO2S','OPPAFE','OBPAFU','OBPAFE','OBPAFG','PCOSC','OBMBL','PUFMBL','OCMBL') THEN 'MG_CATA'        WHEN CTE.ancestor = 'MG_ATCRED' AND P.PORTFOLIOS_PORTFOLIO_NAME in ('PLI1S','CIFG','MIFE','MIFG','SFFX','SFF','PLISC','SFCASH','SFF2','SFNOTE','LPEUR','SFF2E','SFF2G','LPGBP') THEN 'MG_SPFIN'        --End of SURVG-636        ELSE CTE.ancestor       END AS ancestor,       P.PORTFOLIOS_PORTFOLIO_NAME AS descendant,       CTE.depth + 1 AS depth      FROM VISTA_STAGING.dbo.PORTFOLIO_GROUPS as P      INNER JOIN portfolio_cte as CTE on P.PORTFOLIO_GROUP_NAME = CTE.descendant     )         SELECT *     INTO VISTA_STAGING.dbo.PORTFOLIO_GROUP_CLOSURE_TABLE     FROM portfolio_cte         IF OBJECT_ID('tempdb..#latest_port_groups', 'U') IS NOT NULL DROP TABLE #latest_port_groups        END                --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: PORTFOLIO_GROUP_TREASURY_REFRESH  CreateDate: 2025-06-26 18:17:23.247  ModifyDate: 2025-06-26 18:17:23.247  --- DEFINITION START ---  -- =============================================    -- Author:  <da Costa, David>    -- Create date: <10/06/2019>    -- Description: <Stored procedure to extract highest hierachy    -- portfolio group>    -- =============================================        -- ***************VERSION CONTROL***************            -- *********************************************        CREATE PROCEDURE [dbo].[PORTFOLIO_GROUP_TREASURY_REFRESH]        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        IF OBJECT_ID ('tempdb..#temp_min_hierachy_trable', 'U') IS NOT NULL DROP TABLE #temp_min_hierachy_trable    SELECT     FUND_ID,     PORTFOLIO_NAME,     MIN(TABLE_HIERACHY) AS MIN_HIER    INTO #temp_min_hierachy_trable    FROM VISTA_STAGING.dbo.PORTFOLIO_GROUPS_TREASURY     GROUP BY     FUND_ID,     PORTFOLIO_NAME            IF OBJECT_ID('VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY    SELECT     pgt.*    INTO VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY    FROM VISTA_STAGING.dbo.PORTFOLIO_GROUPS_TREASURY pgt    INNER JOIN #temp_min_hierachy_trable tmh ON tmh.FUND_ID=pgt.FUND_ID AND tmh.PORTFOLIO_NAME=pgt.PORTFOLIO_NAME AND tmh.MIN_HIER=pgt.TABLE_HIERACHY            IF OBJECT_ID ('tempdb..#temp_min_hierachy_trable', 'U') IS NOT NULL DROP TABLE #temp_min_hierachy_trable        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: PORTFOLIO_REFRESH  CreateDate: 2025-06-26 18:17:36.443  ModifyDate: 2025-06-26 18:17:36.443  --- DEFINITION START ---  -- =============================================    -- Author:  <Devereux, Alan>    -- Create date: <27/09/2017>    -- Description: <Stored procedure for transformation of staging data    --     into final PORTFOLIO table.>    -- =============================================        -- ***************VERSION CONTROL***************    -- 04/01/2018 - DDC: PULL_DATE added.    -- *********************************************        CREATE PROCEDURE [dbo].[PORTFOLIO_REFRESH]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         IF OBJECT_ID('tempdb..#latest_portfolios', 'U') IS NOT NULL DROP TABLE #latest_portfolios         SELECT FUND, MAX(PULL_DATE) as LATEST_PULL       INTO #latest_portfolios       FROM [VISTA_STAGING].[dbo].[PORTFOLIO]       GROUP BY FUND         IF OBJECT_ID('VISTA_REPORTING.dbo.PORTFOLIO', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.PORTFOLIO         select      P.PULL_DATE,      p.FUND,      p.PORTFOLIOS_PORTFOLIO_NAME,      p.PORTFOLIOS_FULL_NAME,      p.PORTFOLIO_GROUP,      p.BASE_CURRENCY,      case       when p.LOC_TYPE = 'FUTR' then p.LOC       else NULL end as ETD_CLEARER     into VISTA_REPORTING.dbo.PORTFOLIO     from VISTA_STAGING.dbo.PORTFOLIO p     inner join #latest_portfolios as p2 on p.FUND=p2.FUND and cast(p.PULL_DATE as date) = CAST(p2.LATEST_PULL AS DATE)          --DELETE FROM [VISTA_STAGING].[dbo].[PORTFOLIO]         --INSERT INTO [VISTA_STAGING].[dbo].[PORTFOLIO]     --SELECT * FROM #latest_portfolios         IF OBJECT_ID('tempdb..#latest_portfolios', 'U') IS NOT NULL DROP TABLE #latest_portfolios             CREATE NONCLUSTERED INDEX PORTFOLIO_idx1     ON [VISTA_REPORTING].[dbo].PORTFOLIO (PULL_DATE, FUND, BASE_CURRENCY)        END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: PRICE_BENCHMARK_TABLE  CreateDate: 2025-06-26 18:18:07.593  ModifyDate: 2025-06-26 18:18:07.593  --- DEFINITION START ---      -- =============================================    -- Author:  <da COsta, David>    -- Create date: <2018-05-23>    -- Description: <Procedure to implement compliance sampling>    -- =============================================        -- ***************VERSION CONTROL***************    -- *********************************************        CREATE PROCEDURE [dbo].[PRICE_BENCHMARK_TABLE]             AS    BEGIN         IF OBJECT_ID('tempdb..max_touch_pm', 'U') IS NOT NULL DROP TABLE #max_touch_pm     SELECT       ORD_NUM,      MAX(TOUCH_COUNT) AS MAX_TOUCH     INTO #max_touch_pm     FROM VISTA_REPORTING.dbo.PM_ORDERS     GROUP BY ORD_NUM         IF OBJECT_ID('tempdb..#average_daily_temp', 'U') IS NOT NULL DROP TABLE #average_daily_temp     SELECT DISTINCT      oc.PM_ORD AS ORD_NUM,       t.MULTI_FUND_ID,       ABS(pm.FACE) AS FACE,      t.TRD_ORIG_FACE,      pb.ACCUMULATED_VOLUME_UNSCALED     INTO #average_daily_temp     FROM VISTA_REPORTING.dbo.TRADES t      LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON t.ORD_NUM = oc.TRD_ORD      LEFT JOIN VISTA_REPORTING.dbo.REUTERS_PRICE_BENCHMARK_TABLE pb on pb.MULTI_FUND_ID=T.MULTI_FUND_ID     LEFT JOIN (SELECT DISTINCT pm.ORD_NUM, TOUCH_COUNT, FACE FROM VISTA_REPORTING.dbo.PM_ORDERS pm       inner join #max_touch_pm mt        on pm.ORD_NUM = mt.ORD_NUM and pm.TOUCH_COUNT = mt.MAX_TOUCH) pm ON oc.PM_ORD = pm.ORD_NUM     WHERE FinalFlag = 1 AND oc.PM_ORD IS NOT NULL          IF OBJECT_ID('tempdb..#average_daily_remain', 'U') IS NOT NULL DROP TABLE #average_daily_remain     SELECT       ORD_NUM,       MULTI_FUND_ID,       --SUM(ABS(TRD_ORIG_FACE)) AS [Booked Amt],      --FACE - SUM(ABS(TRD_ORIG_FACE)) AS [Remain Amt],      [ACCUMULATED_VOLUME_UNSCALED] AS [Average daily volume],      CONVERT(DECIMAL(10,2) , 100.0*(FACE - SUM(ABS(TRD_ORIG_FACE)))/NULLIF([ACCUMULATED_VOLUME_UNSCALED], 0)) AS [Remain Amt as percent of daily volume]     INTO #average_daily_remain     FROM #average_daily_temp     GROUP BY      ORD_NUM,      MULTI_FUND_ID,      FACE,     [ACCUMULATED_VOLUME_UNSCALED]         IF OBJECT_ID('VISTA_REPORTING.[dbo].[PRICE_BENCHMARK_TABLE]', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.[dbo].PRICE_BENCHMARK_TABLE       select DISTINCT      trd.MULTI_FUND_ID,      trd.ORD_NUM,      pmo.AUTH_TIME,      soc.SAMPLED_DATE as CREATE_TIME,      soc.DEALING_DESK,      TRD_PRICE,      TRD_YIELD,      TRD_PRICING_SPREAD,      trd.TRAN_TYPE,      trd.TRD_CURRENCY,      trd.ISIN,      TRD.CUSIP,      m2.INST_TYPE,      trd.TRD_TRADE_DATE,      trd.TRD_TRADER,      trd.TRD_AUTH_TIME AS ENTRY_TIME,      trd.EXECUTION_TIME,      cstat.STATUS,      BROKER_CODE as 'Axe',      pmo.UPDATE_INSTR as [Instruction],      trd.TRD_PURPOSE as [Purpose],      COMMENTS_VALUE as [General Comment],      m2.Description as [Description],      [Ord Amt] as [Ord Amt],      [Booked Amt] as [Booked Amt],      trd.TRAN_TYPE as [Side],      trd.TRD_CURRENCY as [Ccy],      TRD_PRICE as [Px],      TRD_PRICING_SPREAD as [Spread],      TRD_YIELD as [Rate],      CONVERT(DECIMAL(12,3),PRICE_BENCHMARK_VALUE) as [M&G Price],      CONVERT(DECIMAL(12,3),PRICE_BENCHMARK_PERCENT) as [M&G Price Percentage],      CONVERT(DECIMAL(12,3),UNIVERSAL_BID_PRICE) as [Reuters Bid Price],      CONVERT(DECIMAL(12,3),UNIVERSAL_ASK_PRICE) as [Reuters Ask Price],      CONVERT(DECIMAL(12,3),BENCHMARK_SPREAD) as [Reuters Spread],      trd.TRD_COUNTERPARTY as [Cpty],      prim.VENUE as [Platform],      Method as [Method],      [Package Strategy] as [Package Strategy],      TRDCOMM_COMMENTS as [Dealer Comment],      trd.ACTIVITY_TYPE_DECODE as [Activity],      VG_01_QUOTES_OBTAINED as [Quotes],      Broker_Quotes as [Comp Quote],      VG_01_QUOTES_REQUESTED as [Requests],      VG_01_NUM_INDICATIVE_QUOTES as [Indics],      --trd.PORTFOLIOS_PORTFOLIO_NAME as [Fund],      STUFF((       SELECT DISTINCT        ', ' + LTRIM(RTRIM(t2.PORTFOLIOS_PORTFOLIO_NAME))       FROM VISTA_REPORTING.dbo.TRADES t2       WHERE trd.MULTI_FUND_ID=t2.MULTI_FUND_ID       FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1,2,'') AS Fund,      [Inv Desk] as [Inv Des],      SEDOL,      avg_d.[Average daily volume],      avg_d.[Remain Amt as percent of daily volume],      TRDCOMM_COMMENTS as [Internal Comment]      --null as [Comment],      --null as [Workflow buttons]     INTO VISTA_REPORTING.[dbo].PRICE_BENCHMARK_TABLE      from [VISTA_REPORTING].[dbo].[SAMPLED_ORDERS_COMPLIANCE] soc     left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc     on oc.PM_ORD = soc.ORD_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, Tran_Type, TRD_PRICE, TRD_YIELD, TRD_PRICING_SPREAD, TRDCOMM_COMMENTS, SEDOL, TRD_CURRENCY, ISIN, CUSIP, TRD_TRADE_DATE, TRD_TRADER, TRD_AUTH_TIME, EXECUTION_TIME, TRD_PURPOSE, ACTIVITY_TYPE_DECODE, TRD_COUNTERPARTY, PORTFOLIOS_PORTFOLIO_NAME, FINALFlag FROM VISTA_REPORTING.dbo.trades) trd     ON oc.TRD_ORD = trd.ORD_NUM AND trd.FinalFlag = 1     left join VISTA_REPORTING.dbo.COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE cfs     on trd.MULTI_FUND_ID = cfs.MULTI_FUND_ID     left join VISTA_REPORTING.dbo.COMPLIANCE_EXCEPTIONS_STATUS_TABLE cstat     on cfs.Status = cstat.STATUS_CODE     left join (SELECT DISTINCT MULTI_FUND_ID, VENUE, INST_TYPE  FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) prim     on trd.MULTI_FUND_ID = prim.MULTI_FUND_ID     right join #max_touch_pm m     on m.ORD_NUM = oc.PM_ORD     left join (SELECT DISTINCT ORD_NUM, TOUCH_COUNT, AUTH_TIME, UPDATE_INSTR, BROKER_CODE, COMMENTS_VALUE FROM VISTA_REPORTING.dbo.PM_ORDERS) pmo     on pmo.ORD_NUM = oc.PM_ORD AND m.MAX_TOUCH = pmo.TOUCH_COUNT     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, Description, [Ord Amt], [Booked Amt], Method, [Package Strategy], Broker_Quotes, VG_01_QUOTES_OBTAINED, VG_01_QUOTES_REQUESTED, VG_01_NUM_INDICATIVE_QUOTES, [Inv Desk], INST_TYPE FROM VISTA_REPORTING.dbo.MASTER_MULTI_FUND_ID_TABLE ) m2 ON trd.MULTI_FUND_ID = m2.MULTI_FUND_ID     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, PRICE_BENCHMARK_VALUE,PRICE_BENCHMARK_PERCENT, UNIVERSAL_ASK_PRICE, UNIVERSAL_BID_PRICE, BENCHMARK_SPREAD  FROM VISTA_REPORTING.dbo.REUTERS_PRICE_BENCHMARK_TABLE) r ON trd.MULTI_FUND_ID = r.MULTI_FUND_ID     LEFT JOIN (SELECT DISTINCT ORD_NUM, MULTI_FUND_ID, [Average daily volume], [Remain Amt as percent of daily volume] FROM #average_daily_remain) avg_d on r.MULTI_FUND_ID = avg_d.MULTI_FUND_ID     where cfs.Exception_Type = 'PB'        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: QUOTES_REFRESH  CreateDate: 2025-06-26 18:18:21.400  ModifyDate: 2025-06-26 18:18:21.400  --- DEFINITION START ---  -- =============================================    -- Author:          <Devereux, Alan>    -- Create date: <27/09/2017>    -- Description:     <Stored procedure for transformation of staging data    --                         into final QUOTES table.>    -- =============================================        -- ***************VERSION CONTROL***************    -- 04/01/2018 - DDC: PULL_DATE added.        -- 09/02/2018 - DDC: Update to add in a quote for when a trade is executed     --                         against a broker that is not in the quotes table.    --                         e.g. the quotes table has three quotes against broker A, B and C.    --                               If the trade occurred against broker D then we add in a quote for this broker.    --                               Note: We do not add a quote where there is the same broker in quotes as in trades but with a different trade price.        -- 2018-02-13 - WH: Added a column which contains whether the 'quote' is from the QUOTES table, or whether it is a trade against a     --                                      broker that doesn't appear in the QUOTES table for that MFI.        -- 2018-03-23 - WH: Changed process to identifying if trade has been executed against a different broker & price as to what is in the quotes table.     --                         Consideration has been included for how to get the trade value from the trades file when quoted on different bases.        -- 2018-04-09 - WH: Changed process to find the QUOTE_VALUE for all quotes on a trade using a hierarchy:     --      1. If any of the quotes is on a rate basis, populate the QUOTE_VALUE using the associated rate fields     --      2. If any of the quotes is on a spread basis, populate the QUOTE_VALUE using the associated spread fields    --      3. Else populate the QUOTE_VALUE using the associated price fields.        -- 2018-04-09 - WH: Updated logic for tieing quotes on cancelled manual placements to a trade.        -- 2019-04-25 - DDC: Included DMG logic for quote_basis and MS updated quote_value        -- 2019-06-03 - DDC: Changed script to take dealing desk from PRIMARY_INST_TYPE_TABLE for DMG this mitigating any issues with Trades without orders    -- *********************************************        CREATE PROCEDURE [dbo].[QUOTES_REFRESH]    AS    BEGIN           -- SET NOCOUNT ON added to prevent extra result sets from           -- interfering with SELECT statements.           SET NOCOUNT ON;                               /********************************************************************************************************/                 /* There are 3 places a quote might appear:                                                                                                       */                 /*     1. A trade is implicitly a quote as clearly the broker agreed to sell to them at that price!          */                 /*  2. If a manual quote has been obtained but the trade was executed electronically, they are              */                 /*     entered by the dealer into a manual placement on the same order, which is then cancelled.      */                 /*  3. Nested json on the trade - these are extracted in python and placed in VISTA_STAGING.dbo.QUOTES  */                  /********************************************************************************************************/               /************************/           /* 1. Manual quotes on  */           /*    electronic trades */           /************************/               --1.a Find cancelled manual placements           IF OBJECT_ID('tempdb..#cancelled_manual_placements', 'U') IS NOT NULL DROP TABLE #cancelled_manual_placements            SELECT DISTINCT                    PLACEMENT_NUM,                    ORD_NUM,                    STATUS,                    MODIFIED_TIME, -- We want to use the point at which the placement was cancelled, is this the correct column to use? this will probably need to be pulled through to the VISTA_REPORTING table                    VENUE,                    CREATE_TIME           INTO #cancelled_manual_placements           FROM VISTA_STAGING.dbo.PLACEMENTS p           WHERE p.STATUS = 'C' AND ISNULL(p.Venue,'MANUAL') IN ('MANUAL','MANUAL PL')            --SELECT * FROM #cancelled_manual_placements WHERE ORD_NUM = '775336'                IF OBJECT_ID('tempdb..#max_quote_touch', 'U') IS NOT NULL DROP TABLE #max_quote_touch        SELECT        MULTI_FUND_ID,       MAX(TOUCH_COUNT) AS MAX_TOUCH        INTO #max_quote_touch        FROM VISTA_STAGING.dbo.QUOTES        GROUP BY MULTI_FUND_ID                          --1.b Find execution times (TRD_AUTH_TIME) of electronic trades           IF OBJECT_ID('tempdb..#elec_trades', 'U') IS NOT NULL DROP TABLE #elec_trades           SELECT DISTINCT                    t.ORD_NUM,                    t.MULTI_FUND_ID,                    t.TRD_AUTH_TIME           INTO #elec_trades           FROM VISTA_REPORTING.dbo.TRADES t           LEFT JOIN VISTA_REPORTING.dbo.PLACEMENTS p -- 2018-04-07 WH: changed from inner join to left join as we pull through everything and the where clause should filter out anything we don't want           ON t.PLACEMENT_NUM = p.PLACEMENT_NUM           WHERE ISNULL(p.Venue,'MANUAL') NOT IN ('MANUAL','MANUAL PL')           --SELECT * FROM #elec_trades WHERE ORD_NUM = '775336'                      --1.c Compare a) and b) for when trade is within an hour after the cancellation for the order. Consideration will need to be given so that you only pick up the first trade if there are more than one.           IF OBJECT_ID('tempdb..#manual_quote_elec_trade', 'U') IS NOT NULL DROP TABLE #manual_quote_elec_trade           SELECT                     p.ORD_NUM,                    p.PLACEMENT_NUM,                    p.MODIFIED_TIME,                    t.MULTI_FUND_ID,                    TRD_AUTH_TIME                    --ROW_NUMBER() OVER(PARTITION BY p.ORD_NUM                        --                         ORDER BY t.TRD_AUTH_TIME) as row_num           INTO #manual_quote_elec_trade           FROM #cancelled_manual_placements as p           LEFT JOIN #elec_trades as t           ON p.ORD_NUM = t.ORD_NUM            WHERE p.MODIFIED_TIME BETWEEN DATEADD(HOUR,-1,t.TRD_AUTH_TIME) AND t.TRD_AUTH_TIME -- Need to also make sure that we are only looking to the first trade associated with this manual cancelled placement - probably use a CROSS APPLY instead.                 AND DATEDIFF(day,p.CREATE_TIME,t.TRD_AUTH_TIME) = 0           --select * from #manual_quote_elec_trade WHERE ORD_NUM = '850251' ORDER BY 2               --1.d Apply the placement quotes to that trade           IF OBJECT_ID('tempdb..#trade_order_times', 'U') IS NOT NULL DROP TABLE #trade_order_times           SELECT                  MULTI_FUND_ID,                  ORD_NUM,                 MIN(TRD_AUTH_TIME) as earliest_trade,                  MAX(MODIFIED_TIME) as LAST_MODIFIED           INTO #trade_order_times           FROM #manual_quote_elec_trade           GROUP BY  MULTI_FUND_ID, ORD_NUM                      --1.e Link the placement to the trade           IF OBJECT_ID('tempdb..#placement_trade_link', 'U') IS NOT NULL DROP TABLE #placement_trade_link           SELECT                    t1.PLACEMENT_NUM,                   t1.MULTI_FUND_ID,                   t1.ORD_NUM           INTO #placement_trade_link           FROM #manual_quote_elec_trade t1           WHERE EXISTS (                 SELECT * FROM #trade_order_times as t2                         WHERE t1.MULTI_FUND_ID=t2.MULTI_FUND_ID and t1.TRD_AUTH_TIME=t2.earliest_trade and t1.MODIFIED_TIME=t2.LAST_MODIFIED)           AND NOT EXISTS (                 SELECT * FROM #trade_order_times t3                         WHERE t1.ORD_NUM = t3.ORD_NUM AND t1.MULTI_FUND_ID <> t3.MULTI_FUND_ID AND t1.TRD_AUTH_TIME NOT BETWEEN t3.LAST_MODIFIED AND t3.earliest_trade)           ORDER BY t1.MULTI_FUND_ID               --1.f Get quotes for the linked placement           IF OBJECT_ID('tempdb..#placement_trade_quotes', 'U') IS NOT NULL DROP TABLE #placement_trade_quotes           SELECT                  qt.PULL_DATE,                 t.ORD_NUM,                 t.MULTI_FUND_ID,                 qt.TYPE AS QUOTE_TYPE,                 CASE WHEN qt.SIDE = 'B' THEN NULLIF(qt.PRICE, 0) ELSE NULL END AS BID,                 CASE WHEN qt.SIDE = 'B' THEN NULLIF(qt.RATE, 0) ELSE NULL END AS BID_RATE,                 CASE WHEN qt.SIDE = 'B' THEN NULLIF(qt.SPREAD, 0) ELSE NULL END AS BID_SPREAD,                 CASE WHEN qt.SIDE = 'A' THEN NULLIF(qt.PRICE, 0) ELSE NULL END AS OFFER,                 CASE WHEN qt.SIDE = 'A' THEN NULLIF(qt.RATE, 0) ELSE NULL END AS OFFER_RATE,                 CASE WHEN qt.SIDE = 'A' THEN NULLIF(qt.SPREAD, 0) ELSE NULL END AS OFFER_SPREAD,                 qt.BROKER_CODE AS BROKER           INTO #placement_trade_quotes           FROM #placement_trade_link t           INNER JOIN VISTA_STAGING.dbo.QUOTES_PLACEMENTS qt           ON t.PLACEMENT_NUM = qt.PLACEMENT_NUM           ORDER BY t.MULTI_FUND_ID           --SELECT * FROM #placement_trade_quotes                      --1.g Get a combined list of quotes and placement quotes           IF OBJECT_ID('tempdb..#combined_quotes', 'U') IS NOT NULL DROP TABLE #combined_quotes           SELECT              q.PULL_DATE,                q.ORD_NUM,                q.MULTI_FUND_ID,                q.QUOTE_TYPE,                NULLIF(q.BID, 0) as BID,                NULLIF(q.BID_RATE, 0) as BID_RATE,                NULLIF(q.BID_SPREAD, 0) as BID_SPREAD,                NULLIF(q.OFFER, 0) as OFFER,                NULLIF(q.OFFER_RATE, 0) as OFFER_RATE,                NULLIF(q.OFFER_SPREAD, 0) as OFFER_SPREAD,                q.BROKER,                'QUOTE' as QUOTE_ORIGIN           INTO #combined_quotes           FROM VISTA_STAGING.dbo.QUOTES q        INNER JOIN #max_quote_touch mqt on mqt.MULTI_FUND_ID=q.MULTI_FUND_ID AND ISNULL(mqt.MAX_TOUCH, '')=ISNULL(q.TOUCH_COUNT,'')                   UNION               SELECT                  PULL_DATE,                 ORD_NUM,                 MULTI_FUND_ID,                 QUOTE_TYPE,                 BID,                 BID_RATE,                 BID_SPREAD,                 OFFER,                 OFFER_RATE,                 OFFER_SPREAD,                 BROKER,                 'PLACEMENT' as QUOTE_ORIGIN           FROM #placement_trade_quotes               --1.h From the combined list of quotes, use the following heirarchy to determine the overall quote & trade basis:           --           a. If any of the quotes has a 'Rate', assume all quotes are Rate quotes and the trade basis is a Rate.           --           b. If no quotes are 'Rate' and if any of the quotes has a 'Spread', assume all quotes are Spread quotes and the trade basis is a Spread.           --           b. If no quotes are 'Rate'/'Spread' and if any of the quotes has a 'Price', assume all quotes are Price quotes and the trade basis is a PRoce.           IF OBJECT_ID('tempdb..#quote_basis', 'U') IS NOT NULL DROP TABLE #quote_basis               SELECT                 c.MULTI_FUND_ID,                MAX(        CASE            WHEN pr.DEALING_DESK='Fixed Income' THEN             CASE             WHEN pr.DEBT_DERIV IN ('DEBT','EQUITY') THEN             CASE              WHEN c.QUOTE_TYPE  = 'R' THEN 3              WHEN c.QUOTE_TYPE  = 'S' THEN 2              WHEN c.QUOTE_TYPE  = 'P' THEN 1              ELSE NULL --Logic states that if the Quote_Type does not fall                  --into the three categories it should be NULL             END            WHEN pr.INST_TYPE IN ('FI TRS', 'TRS', 'CDSWAPTION') THEN             CASE              WHEN c.QUOTE_TYPE  = 'R' THEN 3              WHEN c.QUOTE_TYPE  = 'S' THEN 2              WHEN c.QUOTE_TYPE  = 'P' THEN 1              ELSE NULL --Logic states that if the Quote_Type does not fall                  --into the three categories it should be NULL             END            WHEN pr.ICDS_DETAIL IN ('CDX NA HY','CDX EM') THEN 3 --CDX NA HY & CDX EM are both always Rate based trades.            WHEN pr.INST_TYPE IN ('SCDS','ICDS') THEN 2 -- SCDS/ICDS is always a spread            WHEN pr.INST_TYPE IN ('OIS', 'IRS', 'IFS', 'CCS', 'CASWP', 'ASWP', 'ZCS', 'BASIS') THEN              CASE             WHEN pr.Trade_TRAN_TYPE LIKE '%INIT%' THEN -- Initiations              CASE               WHEN c.QUOTE_TYPE = 'R' THEN 3               WHEN c.QUOTE_TYPE = 'S' THEN 2               ELSE NULL --Logic states that if the Quote_Type does not fall                  --into RATE or SPREAD it should be NULL              END              -- Unwinds             WHEN pr.Trade_TRAN_TYPE LIKE '%UNWIND%' THEN 1 -- Unwinds for Swaps are always Price              END                ELSE NULL --I think that if none of the above conditions are met the it should be NULL             END            WHEN ISNULL(pr.DEALING_DESK, '') in ('Equity', 'DMG', 'FX', 'CASH') THEN            CASE            WHEN QUOTE_TYPE = 'R' THEN 3           WHEN QUOTE_TYPE = 'S' THEN 2           ELSE 1            END            WHEN ISNULL(pr.DEALING_DESK, '') = 'Leveraged Finance' THEN 1        END) AS Quote_Basis               INTO #quote_basis           FROM #combined_quotes c        LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID=c.MULTI_FUND_ID           GROUP BY c.MULTI_FUND_ID                   /********************************************************************************************/           /* We now need to choose the correct column to put as the quote price. This depends upon   */           /* where the quote originated (trades already have price) and the instrument type.                 */           /********************************************************************************************/               IF OBJECT_ID('VISTA_REPORTING.dbo.QUOTES', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.QUOTES           -- Add in quotes for Equity           select distinct                 q.PULL_DATE,                 q.ORD_NUM,                 q.MULTI_FUND_ID,                 q.QUOTE_TYPE,                 q.BID,                 q.BID_RATE,                 q.BID_SPREAD,                 q.OFFER,                 q.OFFER_RATE,                 q.OFFER_SPREAD,                 q.BROKER,        bs.Quote_Basis AS Quote_Basis,                 --o.DEALING_DESK, o.TRAN_TYPE, q.QUOTE_TYPE, i.INST_TYPE, -- This is useful for testing.                 case                        when o.TRAN_TYPE = 'BUY' and q.QUOTE_TYPE = 'P' then OFFER                        when o.TRAN_TYPE = 'BUY' and q.QUOTE_TYPE = 'R' then OFFER_RATE                        when o.TRAN_TYPE = 'BUY' and q.QUOTE_TYPE = 'S' then OFFER_SPREAD                        when o.TRAN_TYPE = 'SELL' and q.QUOTE_TYPE = 'P' then BID                        when o.TRAN_TYPE = 'SELL' and q.QUOTE_TYPE = 'R' then BID_RATE                        when o.TRAN_TYPE = 'SELL' and q.QUOTE_TYPE = 'S' then BID_SPREAD                        when o.TRAN_TYPE = 'RECPFL INIT' OR o.TRAN_TYPE = 'RPMI' then OFFER_SPREAD                        else NULL                 end as QUOTE_VALUE,                 QUOTE_ORIGIN           into VISTA_REPORTING.dbo.QUOTES           from #combined_quotes as q           left join VISTA_REPORTING.dbo.ORDERS as o on o.ORD_NUM=q.ORD_NUM           left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE as i on q.MULTI_FUND_ID=i.MULTI_FUND_ID        left join #quote_basis bs ON q.MULTI_FUND_ID = bs.MULTI_FUND_ID           WHERE o.DEALING_DESK = 'Equity'                UNION                   --Add in quotes for Fixed Income           select distinct                 q.PULL_DATE,                 q.ORD_NUM,                 q.MULTI_FUND_ID,                 q.QUOTE_TYPE,                 q.BID,                 q.BID_RATE,                 q.BID_SPREAD,                 q.OFFER,                 q.OFFER_RATE,                 q.OFFER_SPREAD,                 q.BROKER,        bs.Quote_Basis,                 case                        -- Instrument is Debt or Preferred Income Fund                        when (i.DEBT_DERIV = 'DEBT') or ((i.SM_SEC_GROUP='EQUITY') and (i.SM_SEC_TYPE='PFD'))                         --then COALESCE(q.QUOTE_TYPE_P, q.QUOTE_TYPE_R, q.QUOTE_TYPE_S)                        then                                case                                     when bs.Quote_Basis = 3 THEN COALESCE(q.BID_RATE,q.OFFER_RATE)                                     when bs.Quote_Basis = 2 THEN COALESCE(q.BID_SPREAD,q.OFFER_SPREAD)                                     when bs.Quote_Basis = 1 THEN COALESCE(q.BID,q.OFFER)                               end         when i.INST_TYPE IN ('FI TRS', 'TRS', 'CDSWAPTION')                        --then COALESCE(q.QUOTE_TYPE_P, q.QUOTE_TYPE_R, q.QUOTE_TYPE_S)                        then                                case                                     when bs.Quote_Basis = 3 THEN COALESCE(q.BID_RATE,q.OFFER_RATE)                                     when bs.Quote_Basis = 2 THEN COALESCE(q.BID_SPREAD,q.OFFER_SPREAD)                                     when bs.Quote_Basis = 1 THEN COALESCE(q.BID,q.OFFER)                               end                        -- Specific ICDS instruments that need to be treated differently.                        when i.ICDS_DETAIL in ('CDX NA HY', 'CDX EM')                        then COALESCE(q.BID_RATE,q.OFFER_RATE)                            -- Instrument is CDS or CDS Index                        when i.INST_TYPE in ('ICDS', 'SCDS')                        then COALESCE(q.BID_SPREAD,q.OFFER_SPREAD)                            -- Instrument is OIS, IRS, IFS, Cross Currency Swap, Asset Cross Currency Swap, Asset Swap, or Zero Coupon Swap                        when i.INST_TYPE in ('OIS', 'IRS', 'IFS', 'CCS', 'CASWP', 'ASWP', 'ZCS', 'BASIS')                        then                               case                                     -- Initiations                                     when i.Trade_TRAN_TYPE LIKE '%INIT%'                                            then                                                   case                                                         when bs.Quote_Basis = 3 THEN COALESCE(q.BID_RATE,q.OFFER_RATE)                                                         when bs.Quote_Basis = 2 THEN COALESCE(q.BID_SPREAD,q.OFFER_SPREAD)                                                   end                                     -- Unwinds                                     when i.Trade_TRAN_TYPE LIKE '%UNWIND%'                                     then COALESCE(q.BID,q.OFFER)                                     --then                                             --case                                            --     when i.INST_TYPE = 'BASIS'                                            --     then COALESCE(QUOTE_TYPE_P, QUOTE_TYPE_R, QUOTE_TYPE_S)                                            --end                               end                        else NULL                  end as QUOTE_VALUE,                 QUOTE_ORIGIN           from #combined_quotes as q           left join VISTA_REPORTING.dbo.ORDERS as o on o.ORD_NUM=q.ORD_NUM           left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE as i on q.MULTI_FUND_ID=i.MULTI_FUND_ID           left join #quote_basis bs ON q.MULTI_FUND_ID = bs.MULTI_FUND_ID           WHERE o.DEALING_DESK = 'Fixed Income'             UNION            --Add in quotes for DMG           select distinct                 q.PULL_DATE,                 q.ORD_NUM,                 q.MULTI_FUND_ID,                 q.QUOTE_TYPE,                 q.BID,                 q.BID_RATE,                 q.BID_SPREAD,                 q.OFFER,                 q.OFFER_RATE,                 q.OFFER_SPREAD,                 q.BROKER,        bs.Quote_Basis,                 case        when bs.Quote_Basis = 3 THEN COALESCE(q.BID_RATE,q.OFFER_RATE)        when bs.Quote_Basis = 2 THEN COALESCE(q.BID_SPREAD,q.OFFER_SPREAD)        when bs.Quote_Basis = 1 THEN COALESCE(q.BID,q.OFFER)                 end as QUOTE_VALUE,                 QUOTE_ORIGIN           from #combined_quotes as q           left join VISTA_REPORTING.dbo.ORDERS as o on o.ORD_NUM=q.ORD_NUM           left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE as i on q.MULTI_FUND_ID=i.MULTI_FUND_ID           left join #quote_basis bs ON q.MULTI_FUND_ID = bs.MULTI_FUND_ID           WHERE i.DEALING_DESK = 'DMG' --We take the dealing desk from PRIMRY_INST_TYPE_TABLE here for trades without orders                UNION            --Add in quotes for FX           select distinct                 q.PULL_DATE,                 q.ORD_NUM,                 q.MULTI_FUND_ID,                 q.QUOTE_TYPE,             q.BID,                 q.BID_RATE,                 q.BID_SPREAD,                 q.OFFER,                 q.OFFER_RATE,                 q.OFFER_SPREAD,                 q.BROKER,        bs.Quote_Basis,                 case        when bs.Quote_Basis = 3 THEN COALESCE(q.BID_RATE,q.OFFER_RATE)        when bs.Quote_Basis = 2 THEN COALESCE(q.BID_SPREAD,q.OFFER_SPREAD)        when bs.Quote_Basis = 1 THEN COALESCE(q.BID,q.OFFER)                 end as QUOTE_VALUE,                 QUOTE_ORIGIN           from #combined_quotes as q           left join VISTA_REPORTING.dbo.ORDERS as o on o.ORD_NUM=q.ORD_NUM           left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE as i on q.MULTI_FUND_ID=i.MULTI_FUND_ID           left join #quote_basis bs ON q.MULTI_FUND_ID = bs.MULTI_FUND_ID           WHERE i.DEALING_DESK = 'FX' --We take the dealing desk from PRIMRY_INST_TYPE_TABLE here for trades without orders                  UNION        --Add in quotes for cash           select distinct                 q.PULL_DATE,                 q.ORD_NUM,                 q.MULTI_FUND_ID,                 q.QUOTE_TYPE,                 q.BID,                 q.BID_RATE,                 q.BID_SPREAD,                 q.OFFER,                 q.OFFER_RATE,                 q.OFFER_SPREAD,                 q.BROKER,        bs.Quote_Basis,                 case        when bs.Quote_Basis = 3 THEN COALESCE(q.BID_RATE,q.OFFER_RATE)        when bs.Quote_Basis = 2 THEN COALESCE(q.BID_SPREAD,q.OFFER_SPREAD)        when bs.Quote_Basis = 1 THEN COALESCE(q.BID,q.OFFER)                 end as QUOTE_VALUE,                 QUOTE_ORIGIN           from #combined_quotes as q           left join VISTA_REPORTING.dbo.ORDERS as o on o.ORD_NUM=q.ORD_NUM           left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE as i on q.MULTI_FUND_ID=i.MULTI_FUND_ID           left join #quote_basis bs ON q.MULTI_FUND_ID = bs.MULTI_FUND_ID           WHERE i.DEALING_DESK = 'CASH' --We take the dealing desk from PRIMRY_INST_TYPE_TABLE here for trades without orders        UNION         select distinct                 q.PULL_DATE,                 q.ORD_NUM,                 q.MULTI_FUND_ID,                 q.QUOTE_TYPE,                 q.BID,                 q.BID_RATE,                 q.BID_SPREAD,                 q.OFFER,                 q.OFFER_RATE,                 q.OFFER_SPREAD,                 q.BROKER,        bs.Quote_Basis AS Quote_Basis,                 --o.DEALING_DESK, o.TRAN_TYPE, q.QUOTE_TYPE, i.INST_TYPE, -- This is useful for testing.                 case                        when q.QUOTE_TYPE='P' and (bid is not null and bid!= 0) then BID         when q.QUOTE_TYPE = 'P' and (offer is not null and offer!=0) then OFFER                        else NULL                 end as QUOTE_VALUE,                 QUOTE_ORIGIN           from #combined_quotes as q           left join VISTA_REPORTING.dbo.ORDERS as o on o.ORD_NUM=q.ORD_NUM           left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE as i on q.MULTI_FUND_ID=i.MULTI_FUND_ID        left join #quote_basis bs ON q.MULTI_FUND_ID = bs.MULTI_FUND_ID           WHERE o.DEALING_DESK = 'Leveraged Finance'                   /***********************/           /* 2. Trades as quotes */           /***********************/           -- Identify MFIDs where we have traded against a broker but a quote for this broker & trade value does not exist in the QUOTES table.                       --2.a. Find the broker and trade value for each trade.           --     Question: What happens if there is a trade that sits across multiple desks? E.g. 'SXB'.           IF OBJECT_ID('tempdb..#trade_value', 'U') IS NOT NULL DROP TABLE #trade_value           SELECT DISTINCT           t.MULTI_FUND_ID,           t.COUNTERPARTY_CODE,           CASE                  WHEN p.DEALING_DESK = 'Fixed Income' AND q.Quote_Basis = 3 THEN t.TRD_YIELD                 WHEN p.DEALING_DESK = 'Fixed Income' AND q.Quote_Basis = 2 THEN t.TRD_PRICING_SPREAD                 WHEN p.DEALING_DESK = 'Fixed Income' AND q.Quote_Basis = 1 THEN                                      CASE                                             WHEN (p.SM_SEC_GROUP = 'SWAP' AND p.SM_SEC_TYPE = 'SWAP') OR (p.SM_SEC_GROUP = 'SWAP' AND p.SM_SEC_TYPE = 'CSWAP') THEN t.TRD_COUPON                                            WHEN p.DEBT_DERIV IN ('DEBT','EQUITY') THEN t.TRD_PRICE              ELSE t.TRD_PRICE                                     END        WHEN p.DEALING_DESK = 'Fixed Income' AND q.Quote_Basis IS NULL AND p.ICDS_DETAIL IN ('CDX NA HY','CDX EM') THEN t.TRD_YIELD        WHEN p.DEALING_DESK = 'Fixed Income' AND q.Quote_Basis IS NULL AND p.INST_TYPE IN ('SCDS','ICDS') THEN t.TRD_PRICING_SPREAD        WHEN p.DEALING_DESK in ( 'DMG', 'FX', 'CASH')  AND q.Quote_Basis = 3 THEN t.TRD_YIELD                 WHEN p.DEALING_DESK in ('DMG', 'FX', 'CASH') AND q.Quote_Basis = 2 THEN t.TRD_PRICING_SPREAD        ELSE t.TRD_PRICE -- Default to TRD_PRICE for all other trades and desks. Consideration/updates will be required here if any M&G dealing desks decide to trade in new assets (SM_SEC_GROUP/SM_SEC_TYPE).           END AS TRADE_VALUE,           q.Quote_Basis           INTO #trade_value           FROM  VISTA_REPORTING.dbo.TRADES t           left join #quote_basis q on t.MULTI_FUND_ID = q.MULTI_FUND_ID           left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p ON t.MULTI_FUND_ID = p.MULTI_FUND_ID           --left join VISTA_REPORTING.dbo.COUNTERPARTIES c on c.COUNTERPARTY_CODE=t.COUNTERPARTY_CODE           where t.FinalFlag = 1                --2.c. Find any instance where we have a trade that has a different broker and trade value to any of the quotes for that trade.           IF OBJECT_ID('tempdb..#trade_is_a_quote', 'U') IS NOT NULL DROP TABLE #trade_is_a_quote           SELECT                  t.MULTI_FUND_ID,                 t.TRADE_VALUE,                 t.Quote_Basis           INTO #trade_is_a_quote           FROM #trade_value as t           LEFT JOIN VISTA_REPORTING.dbo.QUOTES as q                  on t.MULTI_FUND_ID = q.MULTI_FUND_ID -- We are able to use the VISTA_REPORTING version of this table because we have just inserted into it above using bona fide quotes and placement quotes.           GROUP BY t.MULTI_FUND_ID, t.TRADE_VALUE, t.Quote_Basis           HAVING (MAX(CASE WHEN t.COUNTERPARTY_CODE = q.BROKER AND t.TRADE_VALUE = q.QUOTE_VALUE THEN 1 ELSE 0 END) = 0) -- We don't want to count it if there's a matching broker and value as we'd then be double counting.               --2.d. Insert the 'trade is a quote' into the QUOTES table           INSERT INTO VISTA_REPORTING.dbo.QUOTES           select distinct                 t.PULL_DATE,                 t.ORD_NUM,                 t.MULTI_FUND_ID,                 CASE         WHEN q.Quote_Basis = 3 THEN 'R'        WHEN q.Quote_Basis = 2 THEN 'S'        ELSE 'P'        END AS QUOTE_TYPE,                 NULL AS BID,                 NULL AS BID_RATE,                 NULL AS BID_SPREAD,                 NULL AS OFFER,                 NULL AS OFFER_RATE,                 NULL AS OFFER_SPREAD,        CASE        WHEN pr.DEALING_DESK = 'DMG' THEN COALESCE(c.COUNTERPARTY_CODE, t.COUNTERPARTY_CODE)        ELSE t.COUNTERPARTY_CODE        END AS COUNTERPARTY_CODE,        q.Quote_Basis,                 q.TRADE_VALUE AS QUOTE_VALUE,                 'TRADE' AS QUOTE_ORIGIN           from #trade_is_a_quote q           left join VISTA_REPORTING.dbo.TRADES t on t.MULTI_FUND_ID=q.MULTI_FUND_ID            left join VISTA_REPORTING.dbo.COUNTERPARTIES c on c.TRD_COUNTERPARTY=t.TRD_EX_BROKER_CODE        left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr on pr.MULTI_FUND_ID=t.MULTI_FUND_ID           where t.FinalFlag = 1                              IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_QUOTES', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.MASTER_QUOTES           SELECT q.*           INTO VISTA_REPORTING.dbo.MASTER_QUOTES           FROM VISTA_REPORTING.dbo.QUOTES as q           LEFT join VISTA_REPORTING.dbo.TRADES as t on t.MULTI_FUND_ID=q.MULTI_FUND_ID           -- WHERE t.PORTFOLIOS_PORTFOLIO_NAME in ('DRC_VANG', 'DRC_EPIS', 'DRC_ECIF', 'DRC_AOFB', 'DRC_TRCI', 'DRC_ELF')           CREATE NONCLUSTERED INDEX MASTER_QUOTES_INDEX        ON VISTA_REPORTING.dbo.MASTER_QUOTES (PULL_DATE, ORD_NUM, MULTI_FUND_ID, BROKER, QUOTE_ORIGIN)                   -- COUNTERPARTY_VALUES is a table showing the total potential value of traders per broker,           -- regardless of whether they won the quote or not.           IF OBJECT_ID('tempdb..#quote_values', 'U') IS NOT NULL DROP TABLE #quote_values           SELECT                  q.MULTI_FUND_ID                 ,q.BROKER                 ,t.NET_CONSIDERATION_GBP                 ,CONVERT(DATE, t.TRD_AUTH_TIME) AS DATE           INTO #quote_values           FROM [VISTA_REPORTING].[dbo].[QUOTES] as q           LEFT JOIN [VISTA_REPORTING].[dbo].[TRADES] as t on q.MULTI_FUND_ID = t.MULTI_FUND_ID           WHERE q.QUOTE_VALUE is not null               -- Sum quote values for broker and date, as VISTA looks at days worth of data at a time.           IF OBJECT_ID('VISTA_REPORTING.dbo.COUNTERPARTY_VALUES', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.COUNTERPARTY_VALUES           SELECT                  BROKER                 ,sum(NET_CONSIDERATION_GBP) AS SUM_QUOTE_SHOWN_VALUE                 ,DATE           INTO VISTA_REPORTING.dbo.COUNTERPARTY_VALUES           FROM #quote_values           GROUP BY BROKER, DATE               --Move a copy of the COUNTERPARTIES table from STAGING to REPORTING, using only latest data by PULL_DATE           IF OBJECT_ID('tempdb..#latest_counterparties', 'U') IS NOT NULL DROP TABLE #latest_counterparties               SELECT COUNTERPARTY_CODE, MAX(PULL_DATE) as LATEST_PULL             INTO #latest_counterparties             FROM [VISTA_STAGING].[dbo].[COUNTERPARTIES]             GROUP BY COUNTERPARTY_CODE               IF OBJECT_ID('VISTA_REPORTING.dbo.COUNTERPARTIES', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.COUNTERPARTIES           SELECT c1.*            INTO VISTA_REPORTING.dbo.COUNTERPARTIES            FROM VISTA_STAGING.dbo.COUNTERPARTIES as c1           INNER JOIN #latest_counterparties as c2 on c1.COUNTERPARTY_CODE=c2.COUNTERPARTY_CODE and cast(c1.PULL_DATE as date)= cast(c2.LATEST_PULL as date)               --DELETE FROM VISTA_STAGING.dbo.COUNTERPARTIES               --INSERT INTO [VISTA_STAGING].[dbo].[COUNTERPARTIES]           --SELECT * FROM #latest_counterparties               IF OBJECT_ID('tempdb..#cancelled_manual_placements', 'U') IS NOT NULL DROP TABLE #cancelled_manual_placements            IF OBJECT_ID('tempdb..#elec_trades', 'U') IS NOT NULL DROP TABLE #elec_trades           IF OBJECT_ID('tempdb..#manual_quote_elec_trade', 'U') IS NOT NULL DROP TABLE #manual_quote_elec_trade           IF OBJECT_ID('tempdb..#trade_order_times', 'U') IS NOT NULL DROP TABLE #trade_order_times           IF OBJECT_ID('tempdb..#placement_trade_link', 'U') IS NOT NULL DROP TABLE #placement_trade_link           IF OBJECT_ID('tempdb..#placement_trade_quotes', 'U') IS NOT NULL DROP TABLE #placement_trade_quotes           IF OBJECT_ID('tempdb..#combined_quotes', 'U') IS NOT NULL DROP TABLE #combined_quotes           IF OBJECT_ID('tempdb..#quote_basis', 'U') IS NOT NULL DROP TABLE #quote_basis           IF OBJECT_ID('tempdb..#trade_value', 'U') IS NOT NULL DROP TABLE #trade_value           IF OBJECT_ID('tempdb..#trade_is_a_quote', 'U') IS NOT NULL DROP TABLE #trade_is_a_quote           IF OBJECT_ID('tempdb..#quote_values', 'U') IS NOT NULL DROP TABLE #quote_values           IF OBJECT_ID('tempdb..#latest_counterparties', 'U') IS NOT NULL DROP TABLE #latest_counterparties        END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: REFINITIV_TRADE_DATA_EQDD  CreateDate: 2025-06-26 18:18:33.190  ModifyDate: 2025-06-26 18:18:33.190  --- DEFINITION START ---      -- =============================================    -- Author:  <da Costa, David>    -- Create date: <02/04/2020>    -- Description:     -- Generate Equity data for     -- PRICE_BENCHMARK calculations    -- =============================================        -- ******************* NOTES *******************    -- Ensure you change the start and end times for     -- each extract. The end time historically has     -- been the last swecond of the last day you want    -- to include ie. '2020-03-31 23:59:59'    -- *********************************************            CREATE PROCEDURE [dbo].REFINITIV_TRADE_DATA_EQDD          @START_TIME DATETIME,     @END_TIME DATETIME          AS    BEGIN         --Equity     SELECT DISTINCT      t.SM_SEC_GROUP,       t.SM_SEC_TYPE,      t.EXECUTION_TIME,      t.TRD_TRADE_DATE,      --i2.DESC_INSTMT,      COALESCE(i2.DESC_INSTMT, i3.DESC_INSTMT) AS DESC_INSTMT,      o.SEC_DESC1,      COALESCE(i2.MIP_SEC_ID, i3.MIP_SEC_ID) AS RED_CODE,      COALESCE(i2.SEC_DESC2, i3.SEC_DESC2) AS SEC_DESC2,      COALESCE(i2.CUSIP, i3.CUSIP) AS CUSIP,      COALESCE(i2.SEDOL, i3.SEDOL) AS SEDOL,      COALESCE(i2.ISIN, i3.ISIN) AS ISIN,      COALESCE(i2.TICKER, i3.TICKER) AS TICKER,      COALESCE(i2.MATURITY, i3.MATURITY) AS MATURITY,      COALESCE(i2.CURRENCY, i3.CURRENCY) AS CURRENCY,      t.TRD_COUPON,      COALESCE(i2.COUNTRY, i3.COUNTRY) AS COUNTRY,      COALESCE(i2.RISK_COUNTRY, i3.RISK_COUNTRY) AS    RISK_COUNTRY,      COALESCE(i2.EXCHANGE, i3.EXCHANGE) AS    EXCHANGE     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS o ON o.ORD_NUM=t.ORD_NUM     --LEFT JOIN VISTA_REPORTING.dbo.INSTRUMENTS i2 ON i2.CUSIP=t.CUSIP     OUTER APPLY (SELECT TOP 1 i.* FROM VISTA_REPORTING.dbo.INSTRUMENTS i             WHERE (i.CUSIP=t.CUSIP AND i.DATE<=CONVERT(DATE, t.EXECUTION_TIME))             ORDER BY i.DATE DESC) as i2     OUTER APPLY (SELECT TOP 1 i.* FROM VISTA_REPORTING.dbo.INSTRUMENTS i             WHERE (i.CUSIP=o.CUSIP AND i.DATE<=CONVERT(DATE, o.AUTH_TIME))             ORDER BY i.DATE DESC) as i3     WHERE t.TRD_TRADE_DATE >= @START_TIME AND          t.TRD_TRADE_DATE <= @END_TIME     AND COALESCE(i2.CUSIP, i3.CUSIP) IS NOT NULL     AND o.DEALING_DESK = 'Equity'        END  --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: REFINITIV_TRADE_DATA_FIDD  CreateDate: 2025-06-26 18:18:44.927  ModifyDate: 2025-06-26 18:18:44.927  --- DEFINITION START ---      -- =============================================    -- Author:  <da Costa, David>    -- Create date: <02/04/2020>    -- Description:     -- Generate Fixed Income data for     -- PRICE_BENCHMARK calculations    -- =============================================        -- ******************* NOTES *******************    -- Ensure you change the start and end times for     -- each extract. The end time historically has     -- been the last swecond of the last day you want    -- to include ie. '2020-03-31 23:59:59'    -- *********************************************            CREATE PROCEDURE [dbo].REFINITIV_TRADE_DATA_FIDD          @START_TIME DATETIME,     @END_TIME DATETIME          AS    BEGIN         --Fixed Income     SELECT DISTINCT      t.SM_SEC_GROUP,       t.SM_SEC_TYPE,      t.EXECUTION_TIME,      t.TRD_TRADE_DATE,      --i2.DESC_INSTMT,      COALESCE(i2.DESC_INSTMT, i3.DESC_INSTMT) AS DESC_INSTMT,      o.SEC_DESC1,      COALESCE(i2.MIP_SEC_ID, i3.MIP_SEC_ID) AS RED_CODE,      COALESCE(i2.SEC_DESC2, i3.SEC_DESC2) AS SEC_DESC2,      COALESCE(i2.CUSIP, i3.CUSIP) AS CUSIP,      COALESCE(i2.SEDOL, i3.SEDOL) AS SEDOL,      COALESCE(i2.ISIN, i3.ISIN) AS ISIN,      COALESCE(i2.TICKER, i3.TICKER) AS TICKER,      COALESCE(i2.MATURITY, i3.MATURITY) AS MATURITY,      COALESCE(i2.CURRENCY, i3.CURRENCY) AS CURRENCY,      t.TRD_COUPON,      COALESCE(i2.COUNTRY, i3.COUNTRY) AS COUNTRY,      COALESCE(i2.RISK_COUNTRY, i3.RISK_COUNTRY) AS    RISK_COUNTRY,      COALESCE(i2.EXCHANGE, i3.EXCHANGE) AS    EXCHANGE     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS o ON o.ORD_NUM=t.ORD_NUM     --LEFT JOIN VISTA_REPORTING.dbo.INSTRUMENTS i2 ON i2.CUSIP=t.CUSIP     OUTER APPLY (SELECT TOP 1 i.* FROM VISTA_REPORTING.dbo.INSTRUMENTS i             WHERE (i.CUSIP=t.CUSIP AND i.DATE<=CONVERT(DATE, t.EXECUTION_TIME))             ORDER BY i.DATE DESC) as i2     OUTER APPLY (SELECT TOP 1 i.* FROM VISTA_REPORTING.dbo.INSTRUMENTS i             WHERE (i.CUSIP=o.CUSIP AND i.DATE<=CONVERT(DATE, o.AUTH_TIME))             ORDER BY i.DATE DESC) as i3     WHERE t.TRD_TRADE_DATE >= @START_TIME AND          t.TRD_TRADE_DATE <= @END_TIME     AND COALESCE(i2.CUSIP, i3.CUSIP) IS NOT NULL     AND o.DEALING_DESK = 'Fixed Income'        END  --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: REUTERS_PRICE_BENCHMARK  CreateDate: 2025-06-26 18:18:59.473  ModifyDate: 2025-06-26 18:18:59.473  --- DEFINITION START ---      -- =============================================    -- Author:  <da Costa, David>    -- Create date: <2018-05-23>    -- Description: <Procedure to implement compliance sampling>    -- =============================================        -- ***************VERSION CONTROL***************    -- 2018-07-27 DDC - Procedure created.    -- 2018-09-05 WH  - Addition of [ACCUMULATED_VOLUME_UNSCALED] to output table as well as logic for Trade_Weighting field (as per Compliance EQ Sampling business requirements doc)    -- *********************************************        CREATE PROCEDURE [dbo].[REUTERS_PRICE_BENCHMARK]        AS    BEGIN         IF OBJECT_ID('tempdb..#REUTERS', 'U') IS NOT NULL DROP TABLE #REUTERS     SELECT UNIVERSAL_ASK_PRICE,       UNIVERSAL_BID_PRICE,       BENCHMARK_SPREAD,       VWAP_PRICE,       OPEN_INTEREST,       ASSET_SWAP_SPREAD,       SWAP_SPREAD,       Z_SPREAD,CUSIP,       NULL AS [ACCUMULATED_VOLUME_UNSCALED],       --NULLIF(TRD_TRADE_DATE,'00/01/1900') AS TRD_TRADE_DATE       CASE         WHEN LEN(TRD_TRADE_DATE) > 10 THEN CONVERT(DATE, NULLIF(TRD_TRADE_DATE,'00/01/1900'))        WHEN LEN(TRD_TRADE_DATE) = 10 THEN CONVERT(DATE, NULLIF(TRD_TRADE_DATE,'00/01/1900'), 103)       END AS TRD_TRADE_DATE     INTO #REUTERS      FROM [dbo].[REUTERS]     UNION     SELECT UNIVERSAL_ASK_PRICE,       UNIVERSAL_BID_PRICE,       BENCHMARK_SPREAD,       VOLUME_WEIGHTED_AVERAGE_PRICE,OPEN_INTEREST,       ASSET_SWAP_SPREAD,       SWAP_SPREAD,       Z_SPREAD,CUSIP,       [ACCUMULATED_VOLUME_UNSCALED],       CASE         WHEN LEN(TRD_TRADE_DATE) > 10 THEN CONVERT(DATE, NULLIF(TRD_TRADE_DATE,'00/01/1900'))        WHEN LEN(TRD_TRADE_DATE) = 10 THEN CONVERT(DATE, NULLIF(TRD_TRADE_DATE,'00/01/1900'), 103)       END     FROM [dbo].[REUTERS_EQUITY]             IF OBJECT_ID('VISTA_REPORTING.dbo.REUTERS_PRICE_BENCHMARK_TABLE', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.REUTERS_PRICE_BENCHMARK_TABLE     SELECT DISTINCT      t.MULTI_FUND_ID,      t.SM_SEC_GROUP,       t.SM_SEC_TYPE,      t.TRD_TRADE_DATE,      COALESCE(i2.DESC_INSTMT, i3.DESC_INSTMT) AS DESC_INSTMT,      o.SEC_DESC1,      COALESCE(i2.MIP_SEC_ID, i3.MIP_SEC_ID) AS RED_CODE,      COALESCE(i2.SEC_DESC2, i3.SEC_DESC2) AS SEC_DESC2,      COALESCE(i2.CUSIP, i3.CUSIP) AS CUSIP,      COALESCE(i2.SEDOL, i3.SEDOL) AS SEDOL,      COALESCE(i2.ISIN, i3.ISIN) AS ISIN,      COALESCE(i2.TICKER, i3.TICKER) AS TICKER,      COALESCE(i2.MATURITY, i3.MATURITY) AS MATURITY,      COALESCE(i2.CURRENCY, i3.CURRENCY) AS CURRENCY,      t.TRD_COUPON,      r.UNIVERSAL_ASK_PRICE,      r.UNIVERSAL_BID_PRICE,      r.BENCHMARK_SPREAD,      r.VWAP_PRICE,      --eod.Volume,      --eod.[Volume Weighted Average Price],      r.OPEN_INTEREST,      r.ASSET_SWAP_SPREAD,      r.SWAP_SPREAD,      r.Z_SPREAD,      [ACCUMULATED_VOLUME_UNSCALED],      100.0 * TRD_ORIG_FACE / NULLIF([ACCUMULATED_VOLUME_UNSCALED],0) AS [Trade_Weighting], -- Trade weighting is a risk factor for Compliance EQ sampling      q.Quote_Basis,      pr.Trade_TRAN_TYPE,      pr.DEBT_DERIV,      pr.INST_TYPE,      CASE        WHEN r.CUSIP IS NULL THEN NULL       WHEN pr.DEBT_DERIV  IN ('DEBT','EQUITY') THEN       CASE         WHEN pr.Trade_TRAN_TYPE = 'Buy' THEN        CASE         WHEN q.Quote_Basis = 3 THEN NULL         WHEN q.Quote_Basis = 2 THEN CONVERT(DECIMAL(38,12), r.BENCHMARK_SPREAD)         WHEN q.Quote_Basis = 1 THEN CONVERT(DECIMAL(38,12), r.UNIVERSAL_ASK_PRICE)         ELSE 0        END        WHEN pr.Trade_TRAN_TYPE = 'Sell' THEN        CASE         WHEN q.Quote_Basis = 3 THEN NULL         WHEN q.Quote_Basis = 2 THEN CONVERT(DECIMAL(38,12), r.BENCHMARK_SPREAD)         WHEN q.Quote_Basis = 1 THEN CONVERT(DECIMAL(38,12), r.UNIVERSAL_BID_PRICE)         ELSE NULL        END        ELSE 0       END       WHEN pr.INST_TYPE IN ('SCDS','ICDS') AND ISNULL(pr.ICDS_DETAIL,'') NOT IN ('CDX NA HY','CDX EM') THEN        CASE          WHEN pr.Trade_TRAN_TYPE LIKE '%Buy%'  THEN CONVERT(DECIMAL(38,12), r.BENCHMARK_SPREAD)         WHEN pr.Trade_TRAN_TYPE LIKE '%Sell%' THEN CONVERT(DECIMAL(38,12), r.BENCHMARK_SPREAD)         ELSE NULL        END       WHEN pr.INST_TYPE IN ('OIS', 'IRS', 'IFS', 'CCS', 'CASWP', 'ASWP', 'ZCS', 'BASIS','SWAP') THEN        CASE               WHEN pr.Trade_TRAN_TYPE = 'PAYFIX INIT' THEN CONVERT(DECIMAL(38,12), r.BENCHMARK_SPREAD)              WHEN pr.Trade_TRAN_TYPE = 'RCVFIX INIT' THEN CONVERT(DECIMAL(38,12), r.BENCHMARK_SPREAD)        ELSE NULL        END       WHEN pr.DEALING_DESK = 'Equity' THEN        CASE          WHEN pr.TRAN_TYPE = 'Buy'  THEN CONVERT(DECIMAL(38,12), r.UNIVERSAL_ASK_PRICE)         WHEN pr.TRAN_TYPE = 'Sell' THEN CONVERT(DECIMAL(38,12), r.UNIVERSAL_BID_PRICE)         WHEN pr.TRAN_TYPE = 'RPMI' THEN CONVERT(DECIMAL(38,12), r.BENCHMARK_SPREAD)         WHEN pr.TRAN_TYPE = 'BTOC' THEN CONVERT(DECIMAL(38,12), r.UNIVERSAL_ASK_PRICE)         WHEN pr.TRAN_TYPE = 'SHRT' THEN CONVERT(DECIMAL(38,12), r.UNIVERSAL_BID_PRICE)         WHEN pr.TRAN_TYPE IN ('PPMU','RPMU') THEN CONVERT(DECIMAL(38,12), r.BENCHMARK_SPREAD)         ELSE NULL        END       ELSE NULL      END AS PRICE_BENCHMARK_VALUE,      CASE        WHEN r.CUSIP IS NULL THEN NULL       WHEN pr.DEBT_DERIV  IN ('DEBT','EQUITY') THEN       CASE         WHEN pr.Trade_TRAN_TYPE = 'Buy' THEN        CASE         WHEN q.Quote_Basis = 3 THEN NULL         WHEN q.Quote_Basis = 2 THEN (t.TRD_PRICING_SPREAD - CONVERT(DECIMAL(38,12), r.BENCHMARK_SPREAD))/NULLIF(t.TRD_PRICING_SPREAD,0)         WHEN q.Quote_Basis = 1 THEN (t.TRD_PRICE - CONVERT(DECIMAL(38,12), r.UNIVERSAL_ASK_PRICE))/NULLIF(t.TRD_PRICE,0)         ELSE NULL        END        WHEN pr.Trade_TRAN_TYPE = 'Sell' THEN        CASE         WHEN q.Quote_Basis = 3 THEN NULL         WHEN q.Quote_Basis = 2 THEN (t.TRD_PRICING_SPREAD - CONVERT(DECIMAL(38,12), r.BENCHMARK_SPREAD))/NULLIF(t.TRD_PRICING_SPREAD,0)         WHEN q.Quote_Basis = 1 THEN (t.TRD_PRICE - CONVERT(DECIMAL(38,12), r.UNIVERSAL_BID_PRICE))/NULLIF(t.TRD_PRICE,0)         ELSE NULL        END        ELSE NULL       END       WHEN pr.INST_TYPE IN ('SCDS','ICDS') AND ISNULL(pr.ICDS_DETAIL,'') NOT IN ('CDX NA HY','CDX EM') THEN        CASE          WHEN pr.Trade_TRAN_TYPE LIKE '%Buy%'  THEN (t.TRD_PRICING_SPREAD -  CONVERT(DECIMAL(38,12), r.BENCHMARK_SPREAD))/NULLIF(t.TRD_PRICING_SPREAD,0)         WHEN pr.Trade_TRAN_TYPE LIKE '%Sell%' THEN (t.TRD_PRICING_SPREAD -  CONVERT(DECIMAL(38,12), r.BENCHMARK_SPREAD))/NULLIF(t.TRD_PRICING_SPREAD,0)         ELSE NULL        END       WHEN pr.INST_TYPE IN ('OIS', 'IRS', 'IFS', 'CCS', 'CASWP', 'ASWP', 'ZCS', 'BASIS','SWAP') THEN        CASE               WHEN pr.Trade_TRAN_TYPE = 'PAYFIX INIT' THEN (t.TRD_COUPON -  CONVERT(DECIMAL(38,12), r.BENCHMARK_SPREAD))/NULLIF(t.TRD_COUPON,0)              WHEN pr.Trade_TRAN_TYPE = 'RCVFIX INIT' THEN (t.TRD_COUPON -  CONVERT(DECIMAL(38,12), r.BENCHMARK_SPREAD))/NULLIF(t.TRD_COUPON,0)        ELSE NULL        END       WHEN pr.DEALING_DESK = 'Equity' THEN        CASE          WHEN pr.TRAN_TYPE = 'Buy'  THEN (t.TRD_PRICE - CONVERT(DECIMAL(38,12), r.UNIVERSAL_ASK_PRICE))/NULLIF(t.TRD_PRICE,0)         WHEN pr.TRAN_TYPE = 'Sell' THEN (t.TRD_PRICE - CONVERT(DECIMAL(38,12), r.UNIVERSAL_BID_PRICE))/NULLIF(t.TRD_PRICE,0)         WHEN pr.TRAN_TYPE = 'RPMI' THEN (t.TRD_PRICING_SPREAD - CONVERT(DECIMAL(38,12), r.BENCHMARK_SPREAD))/NULLIF(t.TRD_PRICING_SPREAD,0)         WHEN pr.TRAN_TYPE = 'BTOC' THEN (t.TRD_PRICE - CONVERT(DECIMAL(38,12), r.UNIVERSAL_ASK_PRICE))/NULLIF(t.TRD_PRICE,0)         WHEN pr.TRAN_TYPE = 'SHRT' THEN (t.TRD_PRICE - CONVERT(DECIMAL(38,12), r.UNIVERSAL_BID_PRICE))/NULLIF(t.TRD_PRICE,0)         WHEN pr.TRAN_TYPE IN ('PPMU','RPMU') THEN NULL -- No direction given on these.         ELSE NULL        END       ELSE NULL      END AS PRICE_BENCHMARK_PERCENT,      CASE        WHEN r.CUSIP IS NULL THEN 1       WHEN pr.DEBT_DERIV  IN ('DEBT','EQUITY') THEN       CASE         WHEN pr.Trade_TRAN_TYPE = 'Buy' THEN        CASE         WHEN q.Quote_Basis = 3 THEN 1         WHEN q.Quote_Basis = 2 AND t.TRD_PRICING_SPREAD < CONVERT(DECIMAL(38,12), r.BENCHMARK_SPREAD) THEN 1         WHEN q.Quote_Basis = 1 AND t.TRD_PRICE > CONVERT(DECIMAL(38,12), r.UNIVERSAL_ASK_PRICE)  THEN 1         ELSE 0        END        WHEN pr.Trade_TRAN_TYPE = 'Sell' THEN        CASE         WHEN q.Quote_Basis = 3 THEN 1         WHEN q.Quote_Basis = 2 AND t.TRD_PRICING_SPREAD > CONVERT(DECIMAL(38,12), r.BENCHMARK_SPREAD) THEN 1         WHEN q.Quote_Basis = 1 AND t.TRD_PRICE < CONVERT(DECIMAL(38,12), r.UNIVERSAL_BID_PRICE) THEN 1         ELSE 0        END        ELSE 0       END       WHEN pr.INST_TYPE IN ('SCDS','ICDS') AND ISNULL(pr.ICDS_DETAIL,'') NOT IN ('CDX NA HY','CDX EM') THEN        CASE          WHEN pr.Trade_TRAN_TYPE LIKE '%Buy%'  AND t.TRD_PRICING_SPREAD >  CONVERT(DECIMAL(38,12), r.BENCHMARK_SPREAD) THEN 1         WHEN pr.Trade_TRAN_TYPE LIKE '%Sell%' AND t.TRD_PRICING_SPREAD <  CONVERT(DECIMAL(38,12), r.BENCHMARK_SPREAD) THEN 1         ELSE 0        END       WHEN pr.INST_TYPE IN ('OIS', 'IRS', 'IFS', 'CCS', 'CASWP', 'ASWP', 'ZCS', 'BASIS','SWAP') THEN        CASE          WHEN pr.Trade_TRAN_TYPE = 'PAYFIX INIT' AND t.TRD_COUPON >  CONVERT(DECIMAL(38,12), r.BENCHMARK_SPREAD) THEN 1         WHEN pr.Trade_TRAN_TYPE = 'RCVFIX INIT' AND t.TRD_COUPON <  CONVERT(DECIMAL(38,12), r.BENCHMARK_SPREAD) THEN 1         WHEN pr.Trade_TRAN_TYPE LIKE '%UNWIND%' THEN 1         WHEN q.Quote_Basis = 3 THEN 1         ELSE 0        END       WHEN pr.DEALING_DESK = 'Equity' THEN        CASE          WHEN pr.TRAN_TYPE = 'Buy' AND t.TRD_PRICE <= CONVERT(DECIMAL(38,12), r.UNIVERSAL_ASK_PRICE)  THEN 0 -- raise exception when trade price is greater than benchmark for a Buy         WHEN pr.TRAN_TYPE = 'Sell' AND t.TRD_PRICE >= CONVERT(DECIMAL(38,12), r.UNIVERSAL_BID_PRICE)  THEN 0 -- raise exception when trade price is less than benchmark for a Sell         WHEN pr.TRAN_TYPE = 'RPMI' AND t.TRD_PRICING_SPREAD >= CONVERT(DECIMAL(38,12), r.BENCHMARK_SPREAD)  THEN 0 -- raise exception when trade spread is less than benchmark for an RPMI         WHEN pr.TRAN_TYPE = 'BTOC' AND t.TRD_PRICE <= CONVERT(DECIMAL(38,12), r.UNIVERSAL_ASK_PRICE)  THEN 0 -- raise exception when trade price is greater than benchmark for a BTOC         WHEN pr.TRAN_TYPE = 'SHRT' AND t.TRD_PRICE >= CONVERT(DECIMAL(38,12), r.UNIVERSAL_BID_PRICE)  THEN 0 -- raise exception when trade price is less than benchmark for a SHRT         WHEN pr.TRAN_TYPE IN ('PPMU','RPMU') THEN 1 -- These ones default to exceptions         ELSE 1        END       ELSE 1      END AS PRICE_BENCHMARK_FLAG     INTO VISTA_REPORTING.dbo.REUTERS_PRICE_BENCHMARK_TABLE     FROM (SELECT MULTI_FUND_ID, SM_SEC_GROUP, SM_SEC_TYPE, TRD_TRADE_DATE, ORD_NUM, TRD_COUPON, EXECUTION_TIME, CUSIP, SUM(ABS(TRD_ORIG_FACE)) AS TRD_ORIG_FACE, TRD_PRICING_SPREAD, TRD_PRICE, MTG_SUBTYPE, EXECUTION_TYPE         FROM VISTA_REPORTING.dbo.TRADES         WHERE FinalFlag = 1         GROUP BY MULTI_FUND_ID, SM_SEC_GROUP, SM_SEC_TYPE, TRD_TRADE_DATE, ORD_NUM, TRD_COUPON, EXECUTION_TIME, CUSIP,  TRD_PRICING_SPREAD, TRD_PRICE, MTG_SUBTYPE, EXECUTION_TYPE) t     LEFT JOIN (SELECT DISTINCT ORD_NUM, AUTH_TIME, CUSIP, SEC_DESC1, ORD_GROUP           FROM VISTA_REPORTING.dbo.TRD_ORDERS) o ON o.ORD_NUM=t.ORD_NUM     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, TRADE_TRAN_TYPE, TRAN_TYPE, DEBT_DERIV, INST_TYPE, ICDS_DETAIL, DEALING_DESK           FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr ON pr.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, QUOTE_BASIS           FROM VISTA_REPORTING.dbo.QUOTES) q ON q.MULTI_FUND_ID=t.MULTI_FUND_ID     OUTER APPLY (SELECT TOP 1 i.* FROM VISTA_REPORTING.dbo.INSTRUMENTS i             WHERE (i.CUSIP=t.CUSIP AND i.DATE<=CONVERT(DATE, t.EXECUTION_TIME))             ORDER BY i.DATE DESC) as i2     OUTER APPLY (SELECT TOP 1 i.* FROM VISTA_REPORTING.dbo.INSTRUMENTS i             WHERE (i.CUSIP=o.CUSIP AND i.DATE<=CONVERT(DATE, o.AUTH_TIME))             ORDER BY i.DATE DESC) as i3     LEFT JOIN #REUTERS r ON r.CUSIP=COALESCE(i2.CUSIP, i3.CUSIP) AND CONVERT(DATE, r.TRD_TRADE_DATE)=COALESCE(t.TRD_TRADE_DATE, o.AUTH_TIME)              IF EXISTS (SELECT name FROM sys.indexes                  WHERE name = N'reuters_idx1')           DROP INDEX DMC_CASH_AGG_DATA      ON VISTA_REPORTING.[dbo].[REUTERS_PRICE_BENCHMARK_TABLE]          CREATE NONCLUSTERED INDEX reuters_idx1     ON VISTA_REPORTING.[dbo].[REUTERS_PRICE_BENCHMARK_TABLE] ([MULTI_FUND_ID])                    END;    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: SECTOR_REFRESH  CreateDate: 2025-06-26 18:19:14.347  ModifyDate: 2025-06-26 18:19:14.347  --- DEFINITION START ---      CREATE PROCEDURE [dbo].[SECTOR_REFRESH]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         IF OBJECT_ID('VISTA_REPORTING.dbo.SECTORS', 'U') IS NULL         SELECT * INTO VISTA_REPORTING.dbo.SECTORS FROM     (     SELECT s.CUSIP,        s.DATE,        s.TYPE,        CASE WHEN s.TYPE='ISS_ML' THEN 0         WHEN s.TYPE='ISS_SECTOR' THEN 1         WHEN s.TYPE='BARC_SECT' THEN 2         WHEN s.TYPE='GICS' THEN 3       END AS WATERFALL_PREFERENCE,       s.CODE AS LEVEL_4,       d1.VALUE AS LEVEL_4_DESC,        d2.VALUE AS LEVEL_3,        d3.VALUE AS LEVEL_3_DESC,       d4.VALUE AS LEVEL_2,       d5.VALUE AS LEVEL_2_DESC,        d6.VALUE AS LEVEL_1,       d7.VALUE AS LEVEL_1_DESC     FROM VISTA_STAGING.dbo.SECTORS AS s     LEFT JOIN VISTA_STAGING.dbo.DECODES AS d1 ON CONCAT(LTRIM(RTRIM(s.TYPE)), '_DESC')=d1.TAG_NAME AND s.CODE=d1.CODE     LEFT JOIN VISTA_STAGING.dbo.DECODES AS d2 ON s.TYPE=d2.TAG_NAME AND s.CODE=d2.CODE     LEFT JOIN VISTA_STAGING.dbo.DECODES AS d3 ON CONCAT(LTRIM(RTRIM(s.TYPE)), '_DESC')=d3.TAG_NAME AND d2.VALUE=d3.CODE     LEFT JOIN VISTA_STAGING.dbo.DECODES AS d4 ON s.TYPE=d4.TAG_NAME AND d2.VALUE=d4.CODE     LEFT JOIN VISTA_STAGING.dbo.DECODES AS d5 ON CONCAT(LTRIM(RTRIM(s.TYPE)), '_DESC')=d5.TAG_NAME AND d4.VALUE=d5.CODE     LEFT JOIN VISTA_STAGING.dbo.DECODES AS d6 ON s.TYPE=d6.TAG_NAME AND d4.VALUE=d6.CODE     LEFT JOIN VISTA_STAGING.dbo.DECODES AS d7 ON CONCAT(LTRIM(RTRIM(s.TYPE)), '_DESC')=d7.TAG_NAME AND d6.VALUE=d7.CODE     WHERE s.LEVEL=0         UNION         SELECT s.CUSIP,        s.DATE,        s.TYPE,       CASE WHEN s.TYPE='ISS_ML' THEN 0         WHEN s.TYPE='ISS_SECTOR' THEN 1         WHEN s.TYPE='BARC_SECT' THEN 2         WHEN s.TYPE='GICS' THEN 3       END AS WATERFALL_PREFERENCE,        NULL AS LEVEL_4,       NULL AS LEVEL_4_DESC,       s.CODE AS LEVEL_3,       d1.VALUE AS LEVEL_3_DESC,        d2.VALUE AS LEVEL_2,        d3.VALUE AS LEVEL_2_DESC,       d4.VALUE AS LEVEL_1,       d5.VALUE AS LEVEL_1_DESC     FROM VISTA_STAGING.dbo.SECTORS AS s     LEFT JOIN VISTA_STAGING.dbo.DECODES AS d1 ON CONCAT(LTRIM(RTRIM(s.TYPE)), '_DESC')=d1.TAG_NAME AND s.CODE=d1.CODE     LEFT JOIN VISTA_STAGING.dbo.DECODES AS d2 ON s.TYPE=d2.TAG_NAME AND s.CODE=d2.CODE     LEFT JOIN VISTA_STAGING.dbo.DECODES AS d3 ON CONCAT(LTRIM(RTRIM(s.TYPE)), '_DESC')=d3.TAG_NAME AND d2.VALUE=d3.CODE     LEFT JOIN VISTA_STAGING.dbo.DECODES AS d4 ON s.TYPE=d4.TAG_NAME AND d2.VALUE=d4.CODE     LEFT JOIN VISTA_STAGING.dbo.DECODES AS d5 ON CONCAT(LTRIM(RTRIM(s.TYPE)), '_DESC')=d5.TAG_NAME AND d4.VALUE=d5.CODE     WHERE s.LEVEL=1         UNION         SELECT s.CUSIP,        s.DATE,        s.TYPE,        CASE WHEN s.TYPE='ISS_ML' THEN 0         WHEN s.TYPE='ISS_SECTOR' THEN 1         WHEN s.TYPE='BARC_SECT' THEN 2         WHEN s.TYPE='GICS' THEN 3       END AS WATERFALL_PREFERENCE,        NULL AS LEVEL_4,       NULL AS LEVEL_4_DESC,       NULL AS LEVEL_3,       NULL AS LEVEL_3_DESC,       s.CODE AS LEVEL_2,       d1.VALUE AS LEVEL_2_DESC,        d2.VALUE AS LEVEL_1,       d3.VALUE AS LEVEL_1_DESC     FROM VISTA_STAGING.dbo.SECTORS AS s     LEFT JOIN VISTA_STAGING.dbo.DECODES AS d1 ON CONCAT(LTRIM(RTRIM(s.TYPE)), '_DESC')=d1.TAG_NAME AND s.CODE=d1.CODE     LEFT JOIN VISTA_STAGING.dbo.DECODES AS d2 ON s.TYPE=d2.TAG_NAME AND s.CODE=d2.CODE     LEFT JOIN VISTA_STAGING.dbo.DECODES AS d3 ON CONCAT(LTRIM(RTRIM(s.TYPE)), '_DESC')=d3.TAG_NAME AND d2.VALUE=d3.CODE     WHERE s.LEVEL=2         UNION         SELECT s.CUSIP,        s.DATE,        s.TYPE,        CASE WHEN s.TYPE='ISS_ML' THEN 0         WHEN s.TYPE='ISS_SECTOR' THEN 1         WHEN s.TYPE='BARC_SECT' THEN 2         WHEN s.TYPE='GICS' THEN 3       END AS WATERFALL_PREFERENCE,        NULL AS LEVEL_4,       NULL AS LEVEL_4_DESC,       NULL AS LEVEL_3,       NULL AS LEVEL_3_DESC,       NULL AS LEVEL_2,       NULL AS LEVEL_2_DESC,        s.CODE AS LEVEL_1,       d1.VALUE AS LEVEL_1_DESC     FROM VISTA_STAGING.dbo.SECTORS AS s     LEFT JOIN VISTA_STAGING.dbo.DECODES AS d1 ON CONCAT(LTRIM(RTRIM(s.TYPE)), '_DESC')=d1.TAG_NAME AND s.CODE=d1.CODE     WHERE s.LEVEL=3     ) as tmp;         ELSE         IF OBJECT_ID('tempdb..#new_sector_info', 'U') IS NOT NULL DROP TABLE #new_sector_info         SELECT DISTINCT CUSIP, DATE INTO #new_sector_info FROM [VISTA_STAGING].[dbo].[SECTORS]       EXCEPT     SELECT DISTINCT CUSIP, DATE FROM VISTA_REPORTING.dbo.SECTORS         IF OBJECT_ID('tempdb..#sectors', 'U') IS NOT NULL DROP TABLE #sectors         SELECT s1.*     INTO #sectors     FROM VISTA_STAGING.dbo.SECTORS AS s1     INNER JOIN #new_sector_info AS s2 ON s1.CUSIP=s2.CUSIP AND s1.DATE=s2.DATE         INSERT INTO VISTA_REPORTING.dbo.SECTORS     SELECT s.CUSIP,        s.DATE,        s.TYPE,        CASE WHEN s.TYPE='ISS_ML' THEN 0         WHEN s.TYPE='ISS_SECTOR' THEN 1         WHEN s.TYPE='BARC_SECT' THEN 2         WHEN s.TYPE='GICS' THEN 3       END AS WATERFALL_PREFERENCE,       s.CODE AS LEVEL_4,       d1.VALUE AS LEVEL_4_DESC,        d2.VALUE AS LEVEL_3,        d3.VALUE AS LEVEL_3_DESC,       d4.VALUE AS LEVEL_2,       d5.VALUE AS LEVEL_2_DESC,        d6.VALUE AS LEVEL_1,       d7.VALUE AS LEVEL_1_DESC     FROM #sectors AS s     LEFT JOIN VISTA_STAGING.dbo.DECODES AS d1 ON CONCAT(LTRIM(RTRIM(s.TYPE)), '_DESC')=d1.TAG_NAME AND s.CODE=d1.CODE     LEFT JOIN VISTA_STAGING.dbo.DECODES AS d2 ON s.TYPE=d2.TAG_NAME AND s.CODE=d2.CODE     LEFT JOIN VISTA_STAGING.dbo.DECODES AS d3 ON CONCAT(LTRIM(RTRIM(s.TYPE)), '_DESC')=d3.TAG_NAME AND d2.VALUE=d3.CODE     LEFT JOIN VISTA_STAGING.dbo.DECODES AS d4 ON s.TYPE=d4.TAG_NAME AND d2.VALUE=d4.CODE     LEFT JOIN VISTA_STAGING.dbo.DECODES AS d5 ON CONCAT(LTRIM(RTRIM(s.TYPE)), '_DESC')=d5.TAG_NAME AND d4.VALUE=d5.CODE     LEFT JOIN VISTA_STAGING.dbo.DECODES AS d6 ON s.TYPE=d6.TAG_NAME AND d4.VALUE=d6.CODE     LEFT JOIN VISTA_STAGING.dbo.DECODES AS d7 ON CONCAT(LTRIM(RTRIM(s.TYPE)), '_DESC')=d7.TAG_NAME AND d6.VALUE=d7.CODE     WHERE s.LEVEL=0         UNION         SELECT s.CUSIP,        s.DATE,        s.TYPE,       CASE WHEN s.TYPE='ISS_ML' THEN 0         WHEN s.TYPE='ISS_SECTOR' THEN 1         WHEN s.TYPE='BARC_SECT' THEN 2         WHEN s.TYPE='GICS' THEN 3       END AS WATERFALL_PREFERENCE,        NULL AS LEVEL_4,       NULL AS LEVEL_4_DESC,       s.CODE AS LEVEL_3,       d1.VALUE AS LEVEL_3_DESC,        d2.VALUE AS LEVEL_2,        d3.VALUE AS LEVEL_2_DESC,       d4.VALUE AS LEVEL_1,       d5.VALUE AS LEVEL_1_DESC     FROM #sectors AS s     LEFT JOIN VISTA_STAGING.dbo.DECODES AS d1 ON CONCAT(LTRIM(RTRIM(s.TYPE)), '_DESC')=d1.TAG_NAME AND s.CODE=d1.CODE     LEFT JOIN VISTA_STAGING.dbo.DECODES AS d2 ON s.TYPE=d2.TAG_NAME AND s.CODE=d2.CODE     LEFT JOIN VISTA_STAGING.dbo.DECODES AS d3 ON CONCAT(LTRIM(RTRIM(s.TYPE)), '_DESC')=d3.TAG_NAME AND d2.VALUE=d3.CODE     LEFT JOIN VISTA_STAGING.dbo.DECODES AS d4 ON s.TYPE=d4.TAG_NAME AND d2.VALUE=d4.CODE     LEFT JOIN VISTA_STAGING.dbo.DECODES AS d5 ON CONCAT(LTRIM(RTRIM(s.TYPE)), '_DESC')=d5.TAG_NAME AND d4.VALUE=d5.CODE     WHERE s.LEVEL=1         UNION         SELECT s.CUSIP,        s.DATE,        s.TYPE,        CASE WHEN s.TYPE='ISS_ML' THEN 0         WHEN s.TYPE='ISS_SECTOR' THEN 1         WHEN s.TYPE='BARC_SECT' THEN 2         WHEN s.TYPE='GICS' THEN 3       END AS WATERFALL_PREFERENCE,        NULL AS LEVEL_4,       NULL AS LEVEL_4_DESC,       NULL AS LEVEL_3,       NULL AS LEVEL_3_DESC,       s.CODE AS LEVEL_2,       d1.VALUE AS LEVEL_2_DESC,        d2.VALUE AS LEVEL_1,       d3.VALUE AS LEVEL_1_DESC     FROM #sectors AS s     LEFT JOIN VISTA_STAGING.dbo.DECODES AS d1 ON CONCAT(LTRIM(RTRIM(s.TYPE)), '_DESC')=d1.TAG_NAME AND s.CODE=d1.CODE     LEFT JOIN VISTA_STAGING.dbo.DECODES AS d2 ON s.TYPE=d2.TAG_NAME AND s.CODE=d2.CODE     LEFT JOIN VISTA_STAGING.dbo.DECODES AS d3 ON CONCAT(LTRIM(RTRIM(s.TYPE)), '_DESC')=d3.TAG_NAME AND d2.VALUE=d3.CODE     WHERE s.LEVEL=2         UNION         SELECT s.CUSIP,        s.DATE,        s.TYPE,        CASE WHEN s.TYPE='ISS_ML' THEN 0         WHEN s.TYPE='ISS_SECTOR' THEN 1         WHEN s.TYPE='BARC_SECT' THEN 2         WHEN s.TYPE='GICS' THEN 3       END AS WATERFALL_PREFERENCE,        NULL AS LEVEL_4,       NULL AS LEVEL_4_DESC,       NULL AS LEVEL_3,       NULL AS LEVEL_3_DESC,       NULL AS LEVEL_2,       NULL AS LEVEL_2_DESC,        s.CODE AS LEVEL_1,       d1.VALUE AS LEVEL_1_DESC     FROM #sectors AS s     LEFT JOIN VISTA_STAGING.dbo.DECODES AS d1 ON CONCAT(LTRIM(RTRIM(s.TYPE)), '_DESC')=d1.TAG_NAME AND s.CODE=d1.CODE     WHERE s.LEVEL=3          IF OBJECT_ID('tempdb..#new_sector_info', 'U') IS NOT NULL DROP TABLE #new_sector_info     IF OBJECT_ID('tempdb..#sectors', 'U') IS NOT NULL DROP TABLE #sectors            END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: sp_alterdiagram  CreateDate: 2025-06-26 18:31:25.587  ModifyDate: 2025-06-26 18:31:25.587  --- DEFINITION START ---       CREATE PROCEDURE dbo.sp_alterdiagram     (      @diagramname  sysname,      @owner_id int = null,      @version  int,      @definition  varbinary(max)     )     WITH EXECUTE AS 'dbo'     AS     BEGIN      set nocount on           declare @theId    int      declare @retval   int      declare @IsDbo    int            declare @UIDFound   int      declare @DiagId   int      declare @ShouldChangeUID int           if(@diagramname is null)      begin       RAISERROR ('Invalid ARG', 16, 1)       return -1      end           execute as caller;      select @theId = DATABASE_PRINCIPAL_ID();        select @IsDbo = IS_MEMBER(N'db_owner');       if(@owner_id is null)       select @owner_id = @theId;      revert;           select @ShouldChangeUID = 0      select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname             if(@DiagId IS NULL or (@IsDbo = 0 and @theId <> @UIDFound))      begin       RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1);       return -3      end           if(@IsDbo <> 0)      begin       if(@UIDFound is null or USER_NAME(@UIDFound) is null) -- invalid principal_id       begin        select @ShouldChangeUID = 1 ;       end      end          -- update dds data         update dbo.sysdiagrams set definition = @definition where diagram_id = @DiagId ;          -- change owner      if(@ShouldChangeUID = 1)       update dbo.sysdiagrams set principal_id = @theId where diagram_id = @DiagId ;          -- update dds version      if(@version is not null)       update dbo.sysdiagrams set version = @version where diagram_id = @DiagId ;          return 0     END       --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: sp_creatediagram  CreateDate: 2025-06-26 18:19:29.340  ModifyDate: 2025-06-26 18:19:29.340  --- DEFINITION START ---       CREATE PROCEDURE dbo.sp_creatediagram     (      @diagramname  sysname,      @owner_id  int = null,        @version   int,      @definition  varbinary(max)     )     WITH EXECUTE AS 'dbo'     AS     BEGIN      set nocount on           declare @theId int      declare @retval int      declare @IsDbo int      declare @userName sysname      if(@version is null or @diagramname is null)      begin       RAISERROR (N'E_INVALIDARG', 16, 1);       return -1      end           execute as caller;      select @theId = DATABASE_PRINCIPAL_ID();       select @IsDbo = IS_MEMBER(N'db_owner');      revert;             if @owner_id is null      begin       select @owner_id = @theId;      end      else      begin       if @theId <> @owner_id       begin        if @IsDbo = 0        begin         RAISERROR (N'E_INVALIDARG', 16, 1);         return -1        end        select @theId = @owner_id       end      end      -- next 2 line only for test, will be removed after define name unique      if EXISTS(select diagram_id from dbo.sysdiagrams where principal_id = @theId and name = @diagramname)      begin       RAISERROR ('The name is already used.', 16, 1);       return -2      end           insert into dbo.sysdiagrams(name, principal_id , version, definition)        VALUES(@diagramname, @theId, @version, @definition) ;            select @retval = @@IDENTITY       return @retval     END       --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: sp_dropdiagram  CreateDate: 2025-06-26 18:19:41.807  ModifyDate: 2025-06-26 18:19:41.807  --- DEFINITION START ---       CREATE PROCEDURE dbo.sp_dropdiagram     (      @diagramname  sysname,      @owner_id int = null     )     WITH EXECUTE AS 'dbo'     AS     BEGIN      set nocount on      declare @theId    int      declare @IsDbo    int            declare @UIDFound   int      declare @DiagId   int           if(@diagramname is null)      begin       RAISERROR ('Invalid value', 16, 1);       return -1      end           EXECUTE AS CALLER;      select @theId = DATABASE_PRINCIPAL_ID();      select @IsDbo = IS_MEMBER(N'db_owner');       if(@owner_id is null)       select @owner_id = @theId;      REVERT;             select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname       if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId))      begin       RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1)       return -3      end           delete from dbo.sysdiagrams where diagram_id = @DiagId;           return 0;     END       --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: sp_helpdiagramdefinition  CreateDate: 2025-06-26 18:19:59.250  ModifyDate: 2025-06-26 18:19:59.250  --- DEFINITION START ---       CREATE PROCEDURE dbo.sp_helpdiagramdefinition     (      @diagramname  sysname,      @owner_id int = null        )     WITH EXECUTE AS N'dbo'     AS     BEGIN      set nocount on          declare @theId   int      declare @IsDbo   int      declare @DiagId  int      declare @UIDFound int           if(@diagramname is null)      begin       RAISERROR (N'E_INVALIDARG', 16, 1);       return -1      end           execute as caller;      select @theId = DATABASE_PRINCIPAL_ID();      select @IsDbo = IS_MEMBER(N'db_owner');      if(@owner_id is null)       select @owner_id = @theId;      revert;            select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname;      if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId ))      begin       RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1);       return -3      end          select version, definition FROM dbo.sysdiagrams where diagram_id = @DiagId ;       return 0     END       --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: sp_helpdiagrams  CreateDate: 2025-06-26 18:20:10.710  ModifyDate: 2025-06-26 18:20:10.710  --- DEFINITION START ---       CREATE PROCEDURE dbo.sp_helpdiagrams     (      @diagramname sysname = NULL,      @owner_id int = NULL     )     WITH EXECUTE AS N'dbo'     AS     BEGIN      DECLARE @user sysname      DECLARE @dboLogin bit      EXECUTE AS CALLER;       SET @user = USER_NAME();       SET @dboLogin = CONVERT(bit,IS_MEMBER('db_owner'));      REVERT;      SELECT       [Database] = DB_NAME(),       [Name] = name,       [ID] = diagram_id,       [Owner] = USER_NAME(principal_id),       [OwnerID] = principal_id      FROM       sysdiagrams      WHERE       (@dboLogin = 1 OR USER_NAME(principal_id) = @user) AND       (@diagramname IS NULL OR name = @diagramname) AND       (@owner_id IS NULL OR principal_id = @owner_id)      ORDER BY       4, 5, 1     END       --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: sp_renamediagram  CreateDate: 2025-06-26 18:20:22.537  ModifyDate: 2025-06-26 18:20:22.537  --- DEFINITION START ---       CREATE PROCEDURE dbo.sp_renamediagram     (      @diagramname   sysname,      @owner_id  int = null,      @new_diagramname sysname          )     WITH EXECUTE AS 'dbo'     AS     BEGIN      set nocount on      declare @theId    int      declare @IsDbo    int            declare @UIDFound   int      declare @DiagId   int      declare @DiagIdTarg  int      declare @u_name   sysname      if((@diagramname is null) or (@new_diagramname is null))      begin       RAISERROR ('Invalid value', 16, 1);       return -1      end           EXECUTE AS CALLER;      select @theId = DATABASE_PRINCIPAL_ID();      select @IsDbo = IS_MEMBER(N'db_owner');       if(@owner_id is null)       select @owner_id = @theId;      REVERT;           select @u_name = USER_NAME(@owner_id)           select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname       if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId))      begin       RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1)       return -3      end           -- if((@u_name is not null) and (@new_diagramname = @diagramname)) -- nothing will change      -- return 0;           if(@u_name is null)       select @DiagIdTarg = diagram_id from dbo.sysdiagrams where principal_id = @theId and name = @new_diagramname      else       select @DiagIdTarg = diagram_id from dbo.sysdiagrams where principal_id = @owner_id and name = @new_diagramname           if((@DiagIdTarg is not null) and  @DiagId <> @DiagIdTarg)      begin       RAISERROR ('The name is already used.', 16, 1);       return -2      end             if(@u_name is null)       update dbo.sysdiagrams set [name] = @new_diagramname, principal_id = @theId where diagram_id = @DiagId      else       update dbo.sysdiagrams set [name] = @new_diagramname where diagram_id = @DiagId      return 0     END       --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: sp_upgraddiagrams  CreateDate: 2025-06-26 18:20:34.143  ModifyDate: 2025-06-26 18:20:34.143  --- DEFINITION START ---       CREATE PROCEDURE dbo.sp_upgraddiagrams     AS     BEGIN      IF OBJECT_ID(N'dbo.sysdiagrams') IS NOT NULL       return 0;           CREATE TABLE dbo.sysdiagrams      (       name sysname NOT NULL,       principal_id int NOT NULL, -- we may change it to varbinary(85)       diagram_id int PRIMARY KEY IDENTITY,       version int,            definition varbinary(max)       CONSTRAINT UK_principal_name UNIQUE       (        principal_id,        name       )      );              /* Add this if we need to have some form of extended properties for diagrams */      /*      IF OBJECT_ID(N'dbo.sysdiagram_properties') IS NULL      BEGIN       CREATE TABLE dbo.sysdiagram_properties       (        diagram_id int,        name sysname,        value varbinary(max) NOT NULL       )      END      */          IF OBJECT_ID(N'dbo.dtproperties') IS NOT NULL      begin       insert into dbo.sysdiagrams       (        [name],        [principal_id],        [version],        [definition]       )       select          convert(sysname, dgnm.[uvalue]),        DATABASE_PRINCIPAL_ID(N'dbo'),   -- will change to the sid of sa        0,       -- zero for old format, dgdef.[version],        dgdef.[lvalue]       from dbo.[dtproperties] dgnm        inner join dbo.[dtproperties] dggd on dggd.[property] = 'DtgSchemaGUID' and dggd.[objectid] = dgnm.[objectid]         inner join dbo.[dtproperties] dgdef on dgdef.[property] = 'DtgSchemaDATA' and dgdef.[objectid] = dgnm.[objectid]               where dgnm.[property] = 'DtgSchemaNAME' and dggd.[uvalue] like N'_EA3E6268-D998-11CE-9454-00AA00A3F36E_'        return 2;      end      return 1;     END       --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: spMBTEST  CreateDate: 2025-06-26 18:20:49.607  ModifyDate: 2025-06-26 18:20:49.607  --- DEFINITION START ---  CREATE PROCEDURE [dbo].[spMBTEST]    AS    CREATE TABLE MBTESTING (ID integer, NAMES Integer)    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: THINKFOLIO_DATA_SOURCE_TABLE  CreateDate: 2025-06-26 18:21:01.600  ModifyDate: 2025-06-26 18:21:01.600  --- DEFINITION START ---      CREATE PROCEDURE [dbo].[THINKFOLIO_DATA_SOURCE_TABLE]     -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,         AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         IF OBJECT_ID('tempdb..#temp_first_trader', 'U') IS NOT NULL DROP TABLE #temp_first_trader     SELECT DISTINCT       tr1.ORD_NUM,      tr1.TRADER      INTO #temp_first_trader     FROM VISTA_REPORTING.dbo.TRD_ORDERS tr1     JOIN (SELECT ORD_NUM, MIN(TOUCH_COUNT) AS MIN_TOUCH        FROM VISTA_REPORTING.dbo.TRD_ORDERS        WHERE TRADER IS NOT NULL        GROUP BY ORD_NUM) tr2 ON tr2.ORD_NUM=tr1.ORD_NUM AND tr1.TOUCH_COUNT=tr2.MIN_TOUCH             IF OBJECT_ID('tempdb..#max_comment_table', 'U') IS NOT NULL DROP TABLE #max_comment_table     SELECT DISTINCT      tr1.ORD_NUM,      tr1.COMMENTS_VALUE     INTO #max_comment_table     FROM VISTA_REPORTING.dbo.TRD_ORDERS tr1      INNER JOIN (SELECT ORD_NUM, MAX(TOUCH_COUNT) AS MAX_TOUCH         FROM VISTA_REPORTING.dbo.TRD_ORDERS         GROUP BY ORD_NUM) tr2         ON tr2.MAX_TOUCH=TR1.TOUCH_COUNT AND tr2.ORD_NUM=tr1.ORD_NUM               IF OBJECT_ID('tempdb..#concat_pm', 'U') IS NOT NULL DROP TABLE #concat_pm     SELECT tr1.ORD_NUM,        (STUFF((SELECT DISTINCT CAST(', ' + RTRIM(tr2.PM) AS VARCHAR(MAX))        FROM VISTA_REPORTING.dbo.TRD_ORDERS tr2        WHERE (tr2.ORD_NUM=tr1.ORD_NUM)        FOR XML PATH('')),1,2,'')) AS PM_INIT      INTO #concat_pm     FROM VISTA_REPORTING.dbo.TRD_ORDERS tr1 GROUP BY tr1.ORD_NUM             IF OBJECT_ID('tempdb..#sum_trd_orig_face', 'U') IS NOT NULL DROP TABLE #sum_trd_orig_face     SELECT       MULTI_FUND_ID,       SUM(TRD_ORIG_FACE) AS SUM_TRD_ORIG_FACE,      SUM(NET_CONSIDERATION_GBP) AS SUM_NET_CONSIDERATION_GBP     INTO #sum_trd_orig_face     FROM Vista_Reporting.dbo.TRADES     WHERE FinalFlag = 1      GROUP BY MULTI_FUND_ID             IF OBJECT_ID('VISTA_REPORTING.dbo.THINKFOLIO_DATA_SOURCE_TABLE', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.THINKFOLIO_DATA_SOURCE_TABLE     SELECT DISTINCT      t.TRD_ENTRY_TIME AS dtUpdated,      t.MULTI_FUND_ID AS diTradeId,      t.TRD_CURRENCY AS sBuyCurrency,      CAST(ROUND(ABS(sto.SUM_TRD_ORIG_FACE),2) AS DECIMAL (28,2)) AS dfBuyAmountMarket,      CAST(ROUND(t.TRD_PRICE, 2) AS DECIMAL(38,2)) AS dfRate,      CAST(ROUND(t.TRD_PRICING_SPREAD, 2) AS DECIMAL(38,2)) AS dfRateForward,      CAST(ROUND(t.TRD_FACTOR, 2) AS DECIMAL(38,2)) AS dfTradeFactor,      t.TRD_TRADE_DATE AS dtDeal,      t.TRD_ENTRY_TIME AS dtEnd,      t.TRD_COUNTERPARTY AS ExecutionCpartyShortCode,      c2.BROKER_TICKER AS QuoteCpartyShortCode,      c.COUNTERPARTY_NAME AS Counterparty,      t.TRAN_TYPE AS sBuySell,      dc.VALUE AS sReason,      CONCAT(t.TICKER,' ',i2.STRUCTURE,' ',REPLACE(CONVERT(DATE, t.MATURITY),'-','/')) AS sDescription,      --tr.PM AS sInputBy,      --tr.PM AS sAuthorisedBy,      cp.PM_INIT AS sInputBy,      cp.PM_INIT AS sAuthorisedBy,      mt.TRADER AS sWorkedBy,      mt.TRADER AS sFilledBy,      mc.COMMENTS_VALUE AS sComments,      CASE       WHEN pr.INST_TYPE in ('SCDS', 'ICDS') AND (t.MATURITY IS NOT NULL AND t.FIRST_PAY_DT IS NOT NULL)       THEN CONCAT(DATEDIFF(YEAR, t.FIRST_PAY_DT, t.MATURITY), 'yr')       ELSE NULL      END AS sTerm,      isr.LONG_NAME AS sIssuerLongName,      CONCAT(t.TICKER,' ',i2.STRUCTURE,' ',REPLACE(CONVERT(DATE, t.MATURITY),'-','/')) AS sStockName,      COALESCE(i2.UNDERLYING_CUSIP, i2.CUSIP_SWAP_AMORT) AS sLinkedSecId,      t.TRD_CURRENCY AS sPriceCurrency,      COALESCE(i2.SM_SEC_GROUP, t.SM_SEC_GROUP) AS sAssetClass,      COALESCE(i2.SM_SEC_TYPE, t.SM_SEC_TYPE) AS sFixedAssetClass,      t.FIRST_PAY_DT AS dtPrimaryFirstCoupon,      t.TICKER AS sBloombergTicker,      i2.ISIN AS sISIN,      tr.CUSIP AS sSedol,        i2.MIP_SEC_ID AS sRed,      NULL AS ighy,      pr.ICDS_DETAIL AS index_activity,      CASE        WHEN pr.INST_TYPE in ('SCDS', 'ICDS') THEN NULL       WHEN q.QUOTE_ORIGIN = 'TRADE' AND pr.INST_TYPE not in ('SCDS', 'ICDS') THEN q.QUOTE_VALUE        ELSE CAST(ROUND(COALESCE(q.BID, q.OFFER, t.TRD_PRICE), 2) AS DECIMAL(38,2))       END AS dfQuotePrice,      CAST(ROUND(COALESCE(q.BID_SPREAD, q.OFFER_SPREAD, t.TRD_PRICING_SPREAD), 2) AS DECIMAL(38,2)) AS dfQuoteSpread,      NULL AS Hit_Miss,      pr.INST_TYPE AS security_subtype,      CASE       WHEN ISNULL(pl.VENUE, 'MANUAL') in ('MANUAL', 'MANUAL PL') THEN 'FALSE'       ELSE 'TRUE'      END AS fix,      dc.VALUE AS reason2,      CASE        WHEN COALESCE(i2.SM_SEC_GROUP, t.SM_SEC_GROUP) = 'SWAP' THEN CAST(ROUND((ABS(sto.SUM_TRD_ORIG_FACE)/fx.GBP_INDEX_RATE),2) AS DECIMAL (38,2))       ELSE CAST(ROUND(ABS(sto.SUM_NET_CONSIDERATION_GBP), 2) AS DECIMAL(38,2))       END AS net_gbp_val,      NULL AS net_gbp_won,      CASE       WHEN t.COUNTERPARTY_CODE = q.BROKER AND q.QUOTE_ORIGIN='TRADE' THEN 1       WHEN t.COUNTERPARTY_CODE = q.BROKER          AND q.QUOTE_ORIGIN IN ('QUOTE','PLACEMENT')          AND pr.INST_TYPE IN ('SCDS', 'ICDS')          AND ISNULL(pr.ICDS_DETAIL,'') NOT IN ('CDX NA HY','CDX EM')         AND q.Quote_Basis=2          AND q.QUOTE_VALUE=t.TRD_PRICING_SPREAD THEN 1       WHEN t.COUNTERPARTY_CODE = q.BROKER          AND q.QUOTE_ORIGIN IN ('QUOTE','PLACEMENT')          AND pr.INST_TYPE IN ('SCDS', 'ICDS')          AND ISNULL(pr.ICDS_DETAIL,'') IN ('CDX NA HY','CDX EM') THEN 1       WHEN t.COUNTERPARTY_CODE = q.BROKER AND q.QUOTE_ORIGIN IN ('QUOTE','PLACEMENT') AND pr.INST_TYPE NOT IN ('SCDS', 'ICDS') THEN         CASE         WHEN q.Quote_Basis=3 AND q.QUOTE_VALUE=t.TRD_YIELD THEN 1         WHEN q.Quote_Basis=2 AND q.QUOTE_VALUE=t.TRD_PRICING_SPREAD THEN 1         WHEN q.Quote_Basis=1 AND q.QUOTE_VALUE=t.TRD_PRICE THEN 1         ELSE 0        END        ELSE 0      END AS execution_count,      CAST(ROUND(fx.GBP_INDEX_RATE, 4) AS DECIMAL(38,4)) AS fxrate,      NULL AS buy_amount_gbp,      CASE        WHEN t.TRD_PURPOSE='MG004' THEN 'Rolls'       ELSE NULL      END AS FuturesStatus,      t.TRD_TRADE_DATE     INTO VISTA_REPORTING.dbo.THINKFOLIO_DATA_SOURCE_TABLE     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS tr ON tr.ORD_NUM=t.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.FX_RATES fx ON fx.CURRENCY=t.TRD_CURRENCY AND CONVERT(date, fx.MARKDATE) = CONVERT(date, t.TRD_TRADE_DATE)     LEFT JOIN VISTA_REPORTING.dbo.PLACEMENTS pl ON pl.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN VISTA_REPORTING.dbo.QUOTES q ON q.MULTI_FUND_ID=t.MULTI_FUND_ID  --AND ((q.OFFER IS NOT NULL OR q.BID IS NOT NULL OR q.BID_SPREAD IS NOT NULL OR q.OFFER_SPREAD IS NOT NULL) OR q.QUOTE_ORIGIN = 'TRADE')     OUTER APPLY (SELECT TOP 1          i.STRUCTURE,          i.UNDERLYING_CUSIP,          i.CUSIP_SWAP_AMORT,          i.SM_SEC_GROUP,          i.SM_SEC_TYPE,         i.ISIN,         i.MIP_SEC_ID,         i.DATE,         i.ISSUER_ID         FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=coalesce(t.CUSIP, tr.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(t.EXECUTION_TIME, tr.AUTH_TIME)))         ORDER BY i.DATE DESC) as i2     LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN #temp_first_trader mt ON mt.ORD_NUM=t.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.COUNTERPARTIES c ON c.COUNTERPARTY_CODE=t.COUNTERPARTY_CODE     LEFT JOIN VISTA_REPORTING.dbo.COUNTERPARTIES c2 ON c2.COUNTERPARTY_CODE=q.BROKER     LEFT JOIN #max_comment_table mc ON mc.ORD_NUM=tr.ORD_NUM     LEFT JOIN VISTA_STAGING.dbo.DECODES dc ON dc.CODE=t.TRD_PURPOSE     LEFT JOIN #concat_pm cp ON cp.ORD_NUM=tr.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.ISSUERS isr ON isr.ISSUER_ID=i2.ISSUER_ID     LEFT JOIN #sum_trd_orig_face sto ON sto.MULTI_FUND_ID = t.MULTI_FUND_ID     WHERE       pr.DEALING_DESK = 'Fixed Income' and tr.DEALING_DESK = 'Fixed Income'      AND pr.DEBT_DERIV = 'DERIV'       AND pr.INST_TYPE in ('ICDS', 'SCDS', 'BNDFUT', 'IRFUT', 'OPTFUT')      AND t.FinalFlag=1      AND ISNULL(t.TRD_STATUS,'') <> 'C'      AND pr.INTERFUND_TRANSFER = 0                  IF OBJECT_ID('tempdb..#temp_first_trader', 'U') IS NOT NULL DROP TABLE #temp_first_trader    IF OBJECT_ID('tempdb..#max_comment_table', 'U') IS NOT NULL DROP TABLE #max_comment_table    IF OBJECT_ID('tempdb..#concat_pm', 'U') IS NOT NULL DROP TABLE #concat_pm        END  --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: TRADES_REFRESH  CreateDate: 2025-06-26 18:21:22.320  ModifyDate: 2025-06-26 18:21:22.320  --- DEFINITION START ---  -- =============================================    -- Author:  <Devereux, Alan>    -- Create date: <27/09/2017>    -- Description: <Stored procedure for transformation of staging data    --     into final TRADES table.>    -- =============================================        -- ***************VERSION CONTROL***************    -- 04/01/2018 - DDC: PULL_DATE added.    --    -- 26/01/2018 - DDC: Duplication arising from the     -- concatenation of comments resolved.    -- 2018-02-05 - WH: Change of AmendmentFlag logic to include the condition: and t.TRD_AUTH_TIME is not null        -- 2018-03-20 - WH: Change the logic to build NUM_INDICATIVE_QUOTES to using the TRAN_TYPE as the BUY_SELL_FLAG is obsolete.        -- 2018-03-21 - WH: Added in TRD_MODIFY_TIME to output table        -- 2018-04-09 - WH: Added in [Amendment_Cancellation] flag to TRADES        -- 2018-06-14 - WH: Change FX conversion so we now look at the latest FX rate on or before the date of execution. Also added in the CONTRACT_SIZE field (to be used for FUTURES trades)        -- 2018-08-01 - WH: Added in an index to improve performance        -- 2018-08-20 - KR: Added a new filed INVNUM to the VISTA_REPORTING.DBO.TRADES TABLE        -- 2019-03-04 - ER: Added in FX_PRICE, FX_PAY_AMT, FX_PAY_CURR, FX_RCV_AMT, FX_RCV_CURR for FX desk logics        -- 2019-05-14 - MS: Added in TRD_EX_BROKER_CODE        -- 2019-05-31 - ER: Added in TRD_Location        -- 2019-06-10 - ER: SOLVED NET_CONSIDERATION FOR DMG TRADES WITHOUT ORDERS.        -- 2020-01-08 - MN: Added new column that has FinalFlag for MFID level to be used when joining via MFID.        -- *********************************************        CREATE PROCEDURE [dbo].[TRADES_REFRESH]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        --IF OBJECT_ID('tempdb..#DIST_CUSIP', 'U') IS NOT NULL DROP TABLE #DIST_CUSIP    --select distinct     -- ORD_NUM,    -- CUSIP,    -- COMMENTS_VALUE,    -- TRAN_TYPE    --into #DIST_CUSIP    --from VISTA_REPORTING.dbo.ORDERS        IF OBJECT_ID('tempdb..#max_count_table', 'U') IS NOT NULL DROP TABLE #max_count_table    select distinct ORD_NUM, MAX(TOUCH_COUNT) as MAX_TOUCH --,CUSIP    into #max_count_table    from VISTA_REPORTING.dbo.ORDERS     group by ORD_NUM--, CUSIP        IF OBJECT_ID('tempdb..#max_comment_table', 'U') IS NOT NULL DROP TABLE #max_comment_table    select distinct     o.ORD_NUM,      o.COMMENTS_VALUE     into #max_comment_table    from (SELECT ORD_NUM, TOUCH_COUNT, COMMENTS_VALUE FROM VISTA_REPORTING.dbo.ORDERS) o    inner join #max_count_table mc on mc.ORD_NUM=o.ORD_NUM and mc.MAX_TOUCH=o.TOUCH_COUNT        IF OBJECT_ID('tempdb..#max_count_trades_table', 'U') IS NOT NULL DROP TABLE #max_count_trades_table    select distinct      ORD_NUM,     MULTI_FUND_ID,      MAX(TOUCH_COUNT) as MAX_TOUCH_TRADES    into #max_count_trades_table    from VISTA_STAGING.dbo.TRADES    group by ORD_NUM, MULTI_FUND_ID            IF OBJECT_ID('tempdb..#max_trades_comment_table', 'U') IS NOT NULL DROP TABLE #max_trades_comment_table    select distinct     t.ORD_NUM,      t.MULTI_FUND_ID,     t.TRDCOMM_COMMENTS,     t.TOUCH_COUNT    into #max_trades_comment_table    from (SELECT ORD_NUM, MULTI_FUND_ID, TRDCOMM_COMMENTS, TOUCH_COUNT FROM VISTA_STAGING.dbo.TRADES) t    inner join #max_count_trades_table tt on tt.ORD_NUM=t.ORD_NUM               and tt.MULTI_FUND_ID=t.MULTI_FUND_ID              and tt.MAX_TOUCH_TRADES=t.TOUCH_COUNT            IF OBJECT_ID('tempdb..#temp_trades', 'U') IS NOT NULL DROP TABLE #temp_trades    select distinct     t.PULL_DATE,     CONCAT(t.FUND, t.INVNUM) as CLIENT_EXECUTION_NUM,     t.PLACEMENT_NUM,     t.ORD_NUM,     t.MULTI_FUND_ID,     t.B3Q_RATIONALE,     t.ACTIVITY_TYPE,     case       when t.CUSIP like ('Z%') then t.TRD_COUNTERPARTY       else NULL      end as SWAP_CLEARER,     t.EXECUTION_TIME,     COALESCE(t.EXECUTION_TYPE, 'A') as EXECUTION_TYPE,     COALESCE(dc.VALUE,'Agency Basis') as EXECUTION_TYPE_DECODE,     --case     -- when t.EXECUTION_TYPE = 'A' or t.EXECUTION_TYPE is NULL then 'Agency Basis'     -- when t.EXECUTION_TYPE = 'P' then 'Principal Basis'     -- when t.EXECUTION_TYPE = 'R' then 'Riskless Principal'     -- when t.EXECUTION_TYPE = 'M' then 'Mixed (Ag & Prn)'     -- when t.EXECUTION_TYPE = 'I' then 'IPO Underwriting'     -- when t.EXECUTION_TYPE = 'S' then 'SPO Underwriting'     -- when t.EXECUTION_TYPE = 'L' then 'Primary'     -- when t.EXECUTION_TYPE = 'O' then 'Cross as agent'     -- when t.EXECUTION_TYPE = 'C' then 'Cross as principal'     --end as EXECUTION_TYPE_DECODE,     t.FUND,     t.TRAN_TYPE_DERIV,     t.CHARGE_RATE,     t.TOUCH_COUNT,     t.TRD_COUNTERPARTY,     t.TRD_CURRENCY,     t.TRD_ORIG_FACE,     t.TRD_PRICE,     t.TRD_PRICE/e.GBP_INDEX_RATE as TRD_PRICE_GBP,     abs(t.TRD_PRINCIPAL) as TRD_PRINCIPAL,     abs(t.TRD_PRINCIPAL)/e.GBP_INDEX_RATE as TRD_PRINCIPAL_GBP,     case      when coalesce(i2.SM_SEC_GROUP, '0') = 'SWAP' and coalesce(i2.SM_SEC_TYPE, '0') ='CDSWAP' then t.TRD_EX_COMMISSION      else t.TRD_INTEREST      end as TRADE_INTEREST,     --case      -- when t.TRAN_TYPE in ('BUY', 'BUYPROT INIT', 'BUYPROT UNWIND', 'PAYBASE INIT', 'PAYBASE UNWIND',     --      'PAYPFL INIT', 'PAYPFL UNWIND')     -- then     --  case     --   when coalesce(i2.SM_SEC_GROUP, '0')='SWAP' and coalesce(i2.SM_SEC_TYPE, '0')='CDSWAP'     --   then abs(t.TRD_EX_COMMISSION) + abs(t.TRD_PRINCIPAL) + abs(t.TRD_COMMISSION) + abs(t.TRD_OTHER_FEE)     --   else abs(t.TRD_INTEREST) + abs(t.TRD_PRINCIPAL) + abs(t.TRD_COMMISSION) + abs(t.TRD_OTHER_FEE)     --  end      -- when t.TRAN_TYPE in ('SELL', 'SELLPROT INIT', 'SELLPROT UNWIND', 'RCVBASE INIT', 'RCVBASE UNWIND',     --      'RCVFIX INIT', 'RECPFL UNWIND')     -- then     --  case     --   when coalesce(i2.SM_SEC_GROUP, '0')='SWAP' and coalesce(i2.SM_SEC_TYPE, '0')='CDSWAP'     --   then abs(t.TRD_EX_COMMISSION) + abs(t.TRD_PRINCIPAL) - abs(t.TRD_COMMISSION) - abs(t.TRD_OTHER_FEE)     --   else abs(t.TRD_INTEREST) + abs(t.TRD_PRINCIPAL) - abs(t.TRD_COMMISSION) - abs(t.TRD_OTHER_FEE)     --  end      --end      --case     -- when coalesce(i2.SM_SEC_GROUP, '0') = 'SWAP' and coalesce(i2.SM_SEC_TYPE, '0') ='CDSWAP'      --  then abs(t.TRD_EX_COMMISSION + t.TRD_PRINCIPAL + t.TRD_COMMISSION + t.TRD_OTHER_FEE)     -- else abs(t.TRD_INTEREST + t.TRD_PRINCIPAL + t.TRD_COMMISSION + t.TRD_OTHER_FEE)      --end as NET_CONSIDERATION,     CASE      WHEN tr.DEALING_DESK = 'Fixed Income'       THEN       CASE         WHEN ((ISNULL(i2.SM_SEC_TYPE, '') = 'FIN' AND ISNULL(i2.SM_SEC_GROUP, '') = 'FUTURE')          OR (ISNULL(i2.SM_SEC_TYPE, '') = 'FUTURE' AND ISNULL(i2.SM_SEC_GROUP, '') = 'OPTION'))        THEN ABS(t.TRD_ORIG_FACE*i2.CONTRACT_SIZE) -- For FI Futures, use the face amount multiplied by the contract size (as per DMC bus requirements)        WHEN ((ISNULL(i2.SM_SEC_GROUP, '') = 'SWAP'           AND ISNULL(i2.SM_SEC_TYPE, '') = 'SWAP'           AND (ISNULL(i2.SEC_DESC2, '')='IRS'            OR ISNULL(i2.SEC_DESC2,'')='OIS'            OR ISNULL(i2.SEC_DESC2,'')='BASIS'            OR ISNULL(i2.SEC_DESC2,'')='ZERO'           OR ISNULL(i2.SEC_DESC2, '') in ('IFS', 'LPI')           OR ISNULL(i2.SEC_DESC2, '')='ASP'))          OR (ISNULL(i2.SM_SEC_GROUP, '') = 'SWAP'            AND ISNULL(i2.SM_SEC_TYPE, '') = 'CSWAP')          OR (ISNULL(i2.SM_SEC_GROUP, '') = 'SWAP'            AND ISNULL(i2.SM_SEC_TYPE, '') = 'CDSWAP'           AND ISNULL(i2.SEC_DESC2,'') != 'CDS'))        THEN ABS(t.TRD_ORIG_FACE) -- For all FI swaps, use the face amount (as per DMC bus requirements)        ELSE -- For all other FI trades, use the Aladdin directed approach for calculating net consideration         CASE          WHEN coalesce(i2.SM_SEC_GROUP, '0') = 'SWAP' and coalesce(i2.SM_SEC_TYPE, '0') ='CDSWAP'           THEN abs(t.TRD_EX_COMMISSION + t.TRD_PRINCIPAL + t.TRD_COMMISSION + t.TRD_OTHER_FEE)          ELSE abs(t.TRD_INTEREST + t.TRD_PRINCIPAL + t.TRD_COMMISSION + t.TRD_OTHER_FEE)         END       END       WHEN (tr.DEALING_DESK = 'DMG') OR ((ISNULL(T.ORD_NUM, '') = '' AND TDD.INITIALS IS NOT NULL))--CHANGED THIS TO TAKE FROM PRIM INST TYPE TABLE TO INCLUDE TRADES WITHOUT ORDERS?       THEN        ABS(t.TRD_ORIG_FACE) -- For all FI swaps, use the face amount (as per DMC bus requirements)      WHEN (tr.DEALING_DESK = 'FX') OR ((ISNULL(T.ORD_NUM, '') = '' AND TDDFX.INITIALS IS NOT NULL))--CHANGED THIS TO TAKE FROM PRIM INST TYPE TABLE TO INCLUDE TRADES WITHOUT ORDERS?       THEN        ABS(t.TRD_ORIG_FACE)      ELSE-- For all other dealing desks, use the Aladdin directed approach for calculating net consideration       CASE        WHEN coalesce(i2.SM_SEC_GROUP, '0') = 'SWAP' and coalesce(i2.SM_SEC_TYPE, '0') ='CDSWAP'         THEN abs(t.TRD_EX_COMMISSION + t.TRD_PRINCIPAL + t.TRD_COMMISSION + t.TRD_OTHER_FEE)        ELSE abs(t.TRD_INTEREST + t.TRD_PRINCIPAL + t.TRD_COMMISSION + t.TRD_OTHER_FEE)       END      --THEN      -- CASE       --  WHEN pr.DEBT_DERIV = 'DEBT'       --  THEN       --   CASE      --    WHEN coalesce(i2.SM_SEC_GROUP, '0') = 'SWAP' and coalesce(i2.SM_SEC_TYPE, '0') ='CDSWAP'       --    THEN abs(t.TRD_EX_COMMISSION + t.TRD_PRINCIPAL + t.TRD_COMMISSION + t.TRD_OTHER_FEE)      --    ELSE abs(t.TRD_INTEREST + t.TRD_PRINCIPAL + t.TRD_COMMISSION + t.TRD_OTHER_FEE)      --   END      --  WHEN pr.INST_TYPE IN ('IRFUT','BNDFUT','OPTFUT') THEN abs(t.TRD_ORIG_FACE*i2.CONTRACT_SIZE)      --  ELSE abs(t.TRD_ORIG_FACE)      -- END      --ELSE          -- CASE      --  WHEN coalesce(i2.SM_SEC_GROUP, '0') = 'SWAP' and coalesce(i2.SM_SEC_TYPE, '0') ='CDSWAP'       --  THEN abs(t.TRD_EX_COMMISSION + t.TRD_PRINCIPAL + t.TRD_COMMISSION + t.TRD_OTHER_FEE)      --  ELSE abs(t.TRD_INTEREST + t.TRD_PRINCIPAL + t.TRD_COMMISSION + t.TRD_OTHER_FEE)      -- END     END AS NET_CONSIDERATION,     --case      -- when t.TRAN_TYPE in ('BUY', 'BUYPROT INIT', 'BUYPROT UNWIND', 'PAYBASE INIT', 'PAYBASE UNWIND',     --      'PAYPFL INIT', 'PAYPFL UNWIND')     -- then     --  case     --   when coalesce(i2.SM_SEC_GROUP, '0')='SWAP' and coalesce(i2.SM_SEC_TYPE, '0')='CDSWAP'     --   then (abs(t.TRD_EX_COMMISSION) + abs(t.TRD_PRINCIPAL) + abs(t.TRD_COMMISSION) + abs(t.TRD_OTHER_FEE))/e.GBP_INDEX_RATE     --   else (abs(t.TRD_INTEREST) + abs(t.TRD_PRINCIPAL) + abs(t.TRD_COMMISSION) + abs(t.TRD_OTHER_FEE))/e.GBP_INDEX_RATE     --  end      -- when t.TRAN_TYPE in ('SELL', 'SELLPROT INIT', 'SELLPROT UNWIND', 'RCVBASE INIT', 'RCVBASE UNWIND',     --      'RCVFIX INIT', 'RECPFL UNWIND')     -- then     --  case     --   when coalesce(i2.SM_SEC_GROUP, '0')='SWAP' and coalesce(i2.SM_SEC_TYPE, '0')='CDSWAP'     --   then (abs(t.TRD_EX_COMMISSION) + abs(t.TRD_PRINCIPAL) - abs(t.TRD_COMMISSION) - abs(t.TRD_OTHER_FEE))/e.GBP_INDEX_RATE     --   else (abs(t.TRD_INTEREST) + abs(t.TRD_PRINCIPAL) - abs(t.TRD_COMMISSION) - abs(t.TRD_OTHER_FEE))/e.GBP_INDEX_RATE     --  end      --end as NET_CONSIDERATION_GBP     --case     -- when coalesce(i2.SM_SEC_GROUP, '0') = 'SWAP' and coalesce(i2.SM_SEC_TYPE, '0') ='CDSWAP'      --  then abs(t.TRD_EX_COMMISSION + t.TRD_PRINCIPAL + t.TRD_COMMISSION + t.TRD_OTHER_FEE)/e.GBP_INDEX_RATE     -- else abs(t.TRD_INTEREST + t.TRD_PRINCIPAL + t.TRD_COMMISSION + t.TRD_OTHER_FEE)/e.GBP_INDEX_RATE     --end as NET_CONSIDERATION_GBP,     CASE      WHEN tr.DEALING_DESK = 'Fixed Income'       THEN       CASE         WHEN ((ISNULL(i2.SM_SEC_TYPE, '') = 'FIN' AND ISNULL(i2.SM_SEC_GROUP, '') = 'FUTURE')           OR (ISNULL(i2.SM_SEC_TYPE, '') = 'FUTURE' AND ISNULL(i2.SM_SEC_GROUP, '') = 'OPTION'))        THEN ABS(t.TRD_ORIG_FACE*i2.CONTRACT_SIZE)/e.GBP_INDEX_RATE -- For FI Futures, use the face amount multiplied by the contract size (as per DMC bus requirements)        WHEN ((ISNULL(i2.SM_SEC_GROUP, '') = 'SWAP'           AND ISNULL(i2.SM_SEC_TYPE, '') = 'SWAP'           AND (ISNULL(i2.SEC_DESC2, '')='IRS'            OR ISNULL(i2.SEC_DESC2,'')='OIS'           OR ISNULL(i2.SEC_DESC2,'')='BASIS'            OR ISNULL(i2.SEC_DESC2,'')='ZERO'           OR ISNULL(i2.SEC_DESC2, '') in ('IFS', 'LPI')           OR ISNULL(i2.SEC_DESC2, '')='ASP'))          OR (ISNULL(i2.SM_SEC_GROUP, '') = 'SWAP'            AND ISNULL(i2.SM_SEC_TYPE, '') = 'CSWAP')          OR (ISNULL(i2.SM_SEC_GROUP, '') = 'SWAP'            AND ISNULL(i2.SM_SEC_TYPE, '') = 'CDSWAP'           AND ISNULL(i2.SEC_DESC2,'') != 'CDS'))        THEN ABS(t.TRD_ORIG_FACE)/e.GBP_INDEX_RATE -- For all FI swaps, use the face amount (as per DMC bus requirements)        ELSE -- For all other FI trades, use the Aladdin directed approach for calculating net consideration            CASE          WHEN coalesce(i2.SM_SEC_GROUP, '0') = 'SWAP' and coalesce(i2.SM_SEC_TYPE, '0') ='CDSWAP'           THEN abs(t.TRD_EX_COMMISSION + t.TRD_PRINCIPAL + t.TRD_COMMISSION + t.TRD_OTHER_FEE)/e.GBP_INDEX_RATE          ELSE abs(t.TRD_INTEREST + t.TRD_PRINCIPAL + t.TRD_COMMISSION + t.TRD_OTHER_FEE)/e.GBP_INDEX_RATE         END       END      WHEN (tr.DEALING_DESK = 'DMG') OR ((ISNULL(T.ORD_NUM, '') = '' AND TDD.INITIALS IS NOT NULL))--CHANGED THIS TO TAKE FROM PRIM INST TYPE TABLE TO INCLUDE TRADES WITHOUT ORDERS?       THEN        ABS(t.TRD_ORIG_FACE) / e.GBP_INDEX_RATE            ELSE -- For all other dealing desks, use the Aladdin directed approach for calculating net consideration       CASE        WHEN coalesce(i2.SM_SEC_GROUP, '0') = 'SWAP' and coalesce(i2.SM_SEC_TYPE, '0') ='CDSWAP'         THEN abs(t.TRD_EX_COMMISSION + t.TRD_PRINCIPAL + t.TRD_COMMISSION + t.TRD_OTHER_FEE)/e.GBP_INDEX_RATE        ELSE abs(t.TRD_INTEREST + t.TRD_PRINCIPAL + t.TRD_COMMISSION + t.TRD_OTHER_FEE)/e.GBP_INDEX_RATE       END          -- CASE       --  WHEN pr.DEBT_DERIV = 'DEBT'       --  THEN       --   CASE      --    WHEN coalesce(i2.SM_SEC_GROUP, '0') = 'SWAP' and coalesce(i2.SM_SEC_TYPE, '0') ='CDSWAP'       --    THEN abs(t.TRD_EX_COMMISSION + t.TRD_PRINCIPAL + t.TRD_COMMISSION + t.TRD_OTHER_FEE)/e.GBP_INDEX_RATE      --    ELSE abs(t.TRD_INTEREST + t.TRD_PRINCIPAL + t.TRD_COMMISSION + t.TRD_OTHER_FEE)/e.GBP_INDEX_RATE      --   END      --  WHEN pr.INST_TYPE IN ('IRFUT','BNDFUT','OPTFUT') THEN abs(t.TRD_ORIG_FACE*i2.CONTRACT_SIZE)/e.GBP_INDEX_RATE      --  ELSE abs(t.TRD_ORIG_FACE)/e.GBP_INDEX_RATE      -- END      --ELSE          -- CASE      --  WHEN coalesce(i2.SM_SEC_GROUP, '0') = 'SWAP' and coalesce(i2.SM_SEC_TYPE, '0') ='CDSWAP'       --  THEN abs(t.TRD_EX_COMMISSION + t.TRD_PRINCIPAL + t.TRD_COMMISSION + t.TRD_OTHER_FEE)/e.GBP_INDEX_RATE      --  ELSE abs(t.TRD_INTEREST + t.TRD_PRINCIPAL + t.TRD_COMMISSION + t.TRD_OTHER_FEE)/e.GBP_INDEX_RATE      -- END     END AS NET_CONSIDERATION_GBP,     e.GBP_INDEX_RATE,     i2.CONTRACT_SIZE,     t.TRD_ENTRY_TIME,     t.TRD_SETTLE_DATE,     t.TRD_AUTH_TIME,     t.NWQ_RATIONALE,     concat(tc.TRDCOMM_COMMENTS, mc.COMMENTS_VALUE) as COMMENTS,     tc.TRDCOMM_COMMENTS,     case       when t.TRD_MODIFIED_BY != 'tsgops'       then t.TRD_MODIFIED_BY       else null      end as TRD_MODIFIED_BY,     t.TRD_MODIFY_TIME,     t.TRD_PRICING_SPREAD,     t.TRD_YIELD,     t.INDICATIVE_COMMENTS,     t.NUM_INDICATIVE_QUOTES_BID,     t.NUM_INDICATIVE_QUOTES_ASK,     t.PORTFOLIOS_PORTFOLIO_NAME,     t.COUNTERPARTY_CODE,     t.MTG_SUBTYPE,     t.SM_SEC_TYPE,     t.SM_SEC_GROUP,     t.CUSIP,     t.TRD_TRADE_DATE,     t.TRAN_TYPE,     t.ISIN,     t.SM_CURRENCY,     t.TRD_TRADER,     t.TRD_COUPON,     t.TICKER,     t.MATURITY,     t.TRD_FACTOR,     t.TRD_COMMISSION,     t.TRD_PURPOSE,     t.TRD_STATUS,     t.TRD_AMEND_TYPE,     t.FIRST_PAY_DT,     t.SEDOL,     t.DESC_INSTMT,     t.TRD_EX_DESK_TYPE,     t.INVNUM,     i2.FUTURE_CLASS,     t.FX_PRICE,     t.FX_PAY_AMT,     t.FX_PAY_CURR,     t.FX_RCV_AMT,     t.FX_RCV_CURR,     t.TRD_EX_BROKER_CODE,     t.TRD_LOCATION,     t.FX_PRICE_SPOT    into #temp_trades    from (SELECT TRD_MODIFY_TIME, TRD_PRICING_SPREAD, TRD_YIELD, INDICATIVE_COMMENTS, NUM_INDICATIVE_QUOTES_BID, NUM_INDICATIVE_QUOTES_ASK, PORTFOLIOS_PORTFOLIO_NAME, COUNTERPARTY_CODE,        MTG_SUBTYPE, SM_SEC_TYPE, SM_SEC_GROUP, CUSIP, TRD_TRADE_DATE, TRAN_TYPE, ISIN, SM_CURRENCY, TRD_TRADER, TRD_COUPON, TICKER, MATURITY,  TRD_FACTOR, TRD_COMMISSION,        TRD_PURPOSE, TRD_STATUS, TRD_AMEND_TYPE, FIRST_PAY_DT, SEDOL, DESC_INSTMT, TRD_EX_DESK_TYPE, INVNUM, FX_PRICE, FX_PAY_AMT, FX_PAY_CURR, FX_RCV_AMT, FX_RCV_CURR,         TRD_EX_BROKER_CODE, EXECUTION_TIME, TRD_COUNTERPARTY, TRD_CURRENCY, ORD_NUM, PULL_DATE, FUND, PLACEMENT_NUM, MULTI_FUND_ID, B3Q_RATIONALE, ACTIVITY_TYPE, EXECUTION_TYPE,        TRAN_TYPE_DERIV, CHARGE_RATE, TOUCH_COUNT, TRD_ORIG_FACE, TRD_PRICE, TRD_PRINCIPAL, TRD_EX_COMMISSION, TRD_INTEREST, TRD_OTHER_FEE, TRD_ENTRY_TIME, TRD_SETTLE_DATE, TRD_AUTH_TIME,        NWQ_RATIONALE, TRD_MODIFIED_BY, TRD_LOCATION, FX_PRICE_SPOT       FROM VISTA_STAGING.dbo.TRADES) t    OUTER APPLY (SELECT TOP 1 e.GBP_INDEX_RATE FROM VISTA_REPORTING.dbo.FX_RATES e         WHERE e.CURRENCY = t.TRD_CURRENCY and CONVERT(date, e.MARKDATE) <= CONVERT(date, t.EXECUTION_TIME)        ORDER BY e.MARKDATE DESC) e    OUTER APPLY (SELECT TOP 1         i.SM_SEC_GROUP,        i.SM_SEC_TYPE,        i.CONTRACT_SIZE,        i.SEC_DESC2,        i.FUTURE_CLASS         FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=t.CUSIP AND i.DATE<=CONVERT(DATE, t.EXECUTION_TIME))         ORDER BY i.DATE DESC) as i2    left join (SELECT CODE, VALUE FROM VISTA_STAGING.dbo.DECODES WHERE TAG_NAME = 'EXECUTION_TYPES') dc ON t.EXECUTION_TYPE = dc.CODE    left join #max_comment_table mc on mc.ORD_NUM=t.ORD_NUM    left join #max_trades_comment_table tc on tc.ORD_NUM=t.ORD_NUM and tc.MULTI_FUND_ID=t.MULTI_FUND_ID    left join (SELECT ORD_NUM, DEALING_DESK FROM VISTA_REPORTING.dbo.TRD_ORDERS) tr ON tr.ORD_NUM=t.ORD_NUM    left join (SELECT MULTI_FUND_ID, INST_TYPE, DEALING_DESK FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr ON pr.MULTI_FUND_ID=t.MULTI_FUND_ID    LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD ON T.TRD_TRADER = TDD.INITIALS AND CAST(T.PULL_DATE AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE) AND TDD.DEALING_DESK = 'DMG'    LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDDFX ON T.TRD_TRADER = TDDFX.INITIALS AND CAST(T.PULL_DATE AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE) AND TDDFX.DEALING_DESK = 'FX'            IF OBJECT_ID('tempdb..#min_touch', 'U') IS NOT NULL DROP TABLE #min_touch    select      CLIENT_EXECUTION_NUM     ,MIN(TOUCH_COUNT) as MIN_TOUCH    into #min_touch    from #temp_trades    where (TRD_MODIFIED_BY != 'tsgops') and (TRD_AUTH_TIME is not null)    group by CLIENT_EXECUTION_NUM            IF OBJECT_ID('tempdb..#temp_trades2', 'U') IS NOT NULL DROP TABLE #temp_trades2     select distinct     t.*,     mt.MIN_TOUCH     ,tr.DEALING_DESK as dd1     ,dd.DEALING_DESK as dd2     ,tdd.DEALING_DESK as dd3     ,dd.ALADDIN_USER_ID as user1     ,tdd.ALADDIN_USER_ID as user2     ,CASE       WHEN TRD_AMEND_TYPE IS NOT NULL AND dd.ALADDIN_USER_ID IS NOT NULL AND dd.DEALING_DESK = tr.DEALING_DESK THEN 1       WHEN TRD_AMEND_TYPE IS NOT NULL AND tdd.ALADDIN_USER_ID IS NOT NULL AND tdd.DEALING_DESK = tr.DEALING_DESK THEN 1      WHEN TRD_AMEND_TYPE IS NOT NULL AND tdd.ALADDIN_USER_ID IS NOT NULL AND ISNULL(t.ORD_NUM,'') = '' THEN 1 -- this is to capture trades without orders      ELSE 0     END as AmendmentFlag     --TP 01102019: Added the below to capture amendmnets that are NOT done by dealers on each desk. This also excludes tsgops as the trd_modified_by has been set to null in the above      ,CASE       WHEN t.TRD_AMEND_TYPE IS NOT NULL         AND COALESCE(dd.ALADDIN_USER_ID, tdd.ALADDIN_USER_ID) IS NULL         AND t.TRD_MODIFIED_BY IS NOT NULL        AND t.PULL_DATE >= '2019-11-18 00:00:00.000'         THEN 1       --when TRD_AMEND_TYPE IS NOT NULL AND tdd.ALADDIN_USER_ID IS NULL AND t.TRD_MODIFIED_BY IS NOT NULL THEN 1      WHEN t.TRD_AMEND_TYPE IS NOT NULL         AND COALESCE(dd.ALADDIN_USER_ID, tdd.ALADDIN_USER_ID) IS NULL         AND t.TRD_MODIFIED_BY IS NOT NULL         AND ISNULL(t.ORD_NUM,'') = ''         AND t.PULL_DATE >= '2019-11-18 00:00:00.000'         THEN 1 -- this is to capture trades without orders      ELSE 0     END as Post_trade_AmendmentFlag     ,case when TRD_STATUS = 'C' THEN 1 ELSE 0 END AS CancellationFlag     ,case      when t.TRAN_TYPE = 'BUY'      then t.NUM_INDICATIVE_QUOTES_ASK      else t.NUM_INDICATIVE_QUOTES_BID     end as NUM_INDICATIVE_QUOTES    into #temp_trades2     from #temp_trades as t    left join #min_touch as mt on t.CLIENT_EXECUTION_NUM = mt.CLIENT_EXECUTION_NUM    left join VISTA_REPORTING.dbo.DEALER_AND_DESK dd on dd.ALADDIN_USER_ID = t.TRD_MODIFIED_BY    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd on tdd.ALADDIN_USER_ID = t.TRD_MODIFIED_BY and cast(t.PULL_DATE as date) between CAST(tdd.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE)    left join VISTA_REPORTING.dbo.TRD_ORDERS tr ON tr.ORD_NUM = t.ORD_NUM            IF OBJECT_ID('tempdb..#temp_trades3', 'U') IS NOT NULL DROP TABLE #temp_trades3    SELECT DISTINCT     *,     CASE      WHEN CancellationFlag = 1 THEN 'Cancellation'       WHEN AmendmentFlag = 1 THEN 'Amendment'     END AS [Amendment_Cancellation]    INTO #temp_trades3    FROM #temp_trades2             IF OBJECT_ID('VISTA_REPORTING.dbo.TRADES', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.TRADES    select t.*,     CASE WHEN t.ACTIVITY_TYPE = 'MG.FI 1. Proces' THEN 'MG.FI 1. Process Trading'       WHEN t.ACTIVITY_TYPE = 'MG.FI 2. Contin' THEN 'MG.FI 2. Contingent Package'       WHEN t.ACTIVITY_TYPE = 'MG.FI 3. Top up' THEN 'MG.FI 3. Top up/Continuation'       WHEN t.ACTIVITY_TYPE = 'MG.FI 4. Put Th' THEN 'MG.FI 4. Put Through'       WHEN t.ACTIVITY_TYPE = 'MG.FI 5. Primar' THEN 'MG.FI 5. Primary Market'     end as ACTIVITY_TYPE_DECODE,     case      when ROW_NUMBER() OVER (PARTITION BY CLIENT_EXECUTION_NUM ORDER BY TOUCH_COUNT desc) = 1       and TRD_AUTH_TIME is not null       then 1      else 0      end as FinalFlag,         case      when ROW_NUMBER() OVER (PARTITION BY MULTI_FUND_ID ORDER BY TOUCH_COUNT desc) = 1       and TRD_AUTH_TIME is not null       then 1      else 0      end as FinalFlagMFIDLevel    into VISTA_REPORTING.dbo.TRADES    from #temp_trades3 as t            IF OBJECT_ID('VISTA_REPORTING.dbo.AMENDMENTS', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.AMENDMENTS    SELECT DISTINCT     MULTI_FUND_ID,     TRD_MODIFIED_BY,      TRD_MODIFY_TIME,     TRD_AMEND_TYPE,     AmendmentFlag,     CancellationFlag,     CASE       WHEN CancellationFlag = 1 THEN 'Cancellation'      WHEN AmendmentFlag = 1 THEN 'Amendment'       END AS [Amendment_Cancellation]    INTO VISTA_REPORTING.dbo.AMENDMENTS    FROM #temp_trades2             CREATE NONCLUSTERED INDEX [Trades_idx1]    ON VISTA_REPORTING.[dbo].[TRADES] (CLIENT_EXECUTION_NUM, MULTI_FUND_ID, [ORD_NUM], TOUCH_COUNT)         --Add in indexes for performance for the front end      --CREATE NONCLUSTERED INDEX [Trades_idx1]      --ON VISTA_REPORTING.[dbo].[TRADES] ([ORD_NUM],[FinalFlag])      --INCLUDE ([TRD_COUNTERPARTY],[TRD_TRADER])          --CREATE NONCLUSTERED INDEX TRADES_idx2      --ON VISTA_REPORTING.[dbo].[TRADES] ([FinalFlag])      --INCLUDE ([MULTI_FUND_ID],[FUND],[TRD_ORIG_FACE],[NET_CONSIDERATION_GBP],[GBP_INDEX_RATE],[CONTRACT_SIZE])          --CREATE NONCLUSTERED INDEX TRADES_idx3      --ON VISTA_REPORTING.[dbo].[TRADES] ([FinalFlag])      --INCLUDE ([MULTI_FUND_ID],[FUND])          --CREATE NONCLUSTERED INDEX TRADES_idx4      --ON VISTA_REPORTING.[dbo].[TRADES] ([MULTI_FUND_ID],[FinalFlag])      --INCLUDE ([FUND])          --CREATE NONCLUSTERED INDEX trades_idx5      --ON VISTA_REPORTING.[dbo].[TRADES] ([FinalFlag])      --INCLUDE ([MULTI_FUND_ID],[TRD_TRADE_DATE])        IF OBJECT_ID('tempdb..#max_count_table', 'U') IS NOT NULL DROP TABLE #max_count_table    IF OBJECT_ID('tempdb..#max_comment_table', 'U') IS NOT NULL DROP TABLE #max_comment_table    IF OBJECT_ID('tempdb..#max_count_trades_table', 'U') IS NOT NULL DROP TABLE #max_count_trades_table    IF OBJECT_ID('tempdb..#max_trades_comment_table', 'U') IS NOT NULL DROP TABLE #max_trades_comment_table    IF OBJECT_ID('tempdb..#temp_trades', 'U') IS NOT NULL DROP TABLE #temp_trades    IF OBJECT_ID('tempdb..#min_touch', 'U') IS NOT NULL DROP TABLE #min_touch    IF OBJECT_ID('tempdb..#temp_trades2', 'U') IS NOT NULL DROP TABLE #temp_trades2     IF OBJECT_ID('tempdb..#temp_trades3', 'U') IS NOT NULL DROP TABLE #temp_trades3        END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: TRD_ORDER_LEVEL_EXCEPTION_TABLE  CreateDate: 2025-06-26 18:21:40.517  ModifyDate: 2025-06-26 18:21:40.517  --- DEFINITION START ---  -- =============================================    -- Author:  <Author, da Costa, David>    -- Create date: <>    -- Description: <Table showing all Trader order     -- numbers and the exceptions raised at that     -- level>    -- =============================================    CREATE PROCEDURE [dbo].[TRD_ORDER_LEVEL_EXCEPTION_TABLE]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;            -- Insert statements for procedure here     IF OBJECT_ID('tempdb..#trd_lev_esc', 'U') IS NOT NULL DROP TABLE #trd_lev_esc     SELECT distinct      vg13.OA_ID,      vg13.Orders_Concat AS Missed_Orders,      vg14.OP_ID,      vg14.Trade AS [OP_Trade],      vg14.Prior_Orders,      t.ORD_NUM,      t.DEALING_DESK,      case       when vg13.MERGE_EXCEPTION is null then 0       else vg13.MERGE_EXCEPTION end as VG_13,      --NULL AS [VG_13_MISSED_MERGE],      vg13.CREATETIME AS VG_13_CREATETIME,      vg14.ORDER_PRIORITY_EXCEPTION AS VG_14,      --NULL AS [VG_14_PRIOR_ORDER],      vg14.CREATETIME AS VG_14_CREATETIME     into #trd_lev_esc     from VISTA_REPORTING.dbo.TRD_ORDERS t     left join VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_EQ_TABLE vg13 on vg13.ORD_NUM=t.ORD_NUM     left join VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_EQ_TABLE vg14 on vg14.ORD_NUM=t.ORD_NUM     where t.DEALING_DESK = 'Equity'          INSERT INTO #trd_lev_esc     SELECT distinct      vg13.OA_ID,      vg13.Orders_Concat AS Missed_Orders,      vg14.OP_ID,      vg14.Trade,      vg14.Prior_Orders,      t.ORD_NUM,      t.DEALING_DESK,      case       when vg13.MERGE_EXCEPTION is null then 0       else vg13.MERGE_EXCEPTION       end as VG_13,      --vg13.Missed_Merge AS [VG_13_MISSED_MERGE],      vg13.CREATETIME AS VG_13_CREATETIME,      vg14.ORDER_PRIORITY_EXCEPTION AS VG_14,      --vg14.PRIOR_ORDER AS [VG_14_PRIOR_ORDER],      vg14.CREATETIME AS VG_14_CREATETIME     from VISTA_REPORTING.dbo.TRD_ORDERS t     left join VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_FI_TABLE vg13 on vg13.ORD_NUM=t.ORD_NUM     left join VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_FI_TABLE vg14 on vg14.ORD_NUM=t.ORD_NUM     where t.DEALING_DESK = 'Fixed Income'          INSERT INTO #trd_lev_esc     SELECT distinct      vg13.OA_ID,      vg13.Orders_Concat AS Missed_Orders,      vg14.OP_ID,      vg14.Trade,      vg14.Prior_Orders,      t.ORD_NUM,      t.DEALING_DESK,      case       when vg13.MERGE_EXCEPTION is null then 0       else vg13.MERGE_EXCEPTION       end as VG_13,      --vg13.Missed_Merge AS [VG_13_MISSED_MERGE],      vg13.CREATETIME AS VG_13_CREATETIME,      vg14.ORDER_PRIORITY_EXCEPTION AS VG_14,      --vg14.PRIOR_ORDER AS [VG_14_PRIOR_ORDER],      vg14.CREATETIME AS VG_14_CREATETIME     from VISTA_REPORTING.dbo.TRD_ORDERS t     left join VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_LL_TABLE vg13 on vg13.ORD_NUM=t.ORD_NUM     left join VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_LL_TABLE vg14 on vg14.ORD_NUM=t.ORD_NUM     where t.DEALING_DESK = 'Leveraged Finance'      --select * from #trd_lev_esc WHERE ORD_NUM = 1000376              IF OBJECT_ID('VISTA_REPORTING.dbo.TRD_ORDER_LEVEL_EXCEPTION_TABLE', 'U') IS NOT NULL DROP TABLE VISTA_REPORTING.dbo.TRD_ORDER_LEVEL_EXCEPTION_TABLE     select *     into VISTA_REPORTING.dbo.TRD_ORDER_LEVEL_EXCEPTION_TABLE     from #trd_lev_esc     order by DEALING_DESK        IF OBJECT_ID('tempdb..#trd_lev_esc', 'U') IS NOT NULL DROP TABLE #trd_lev_esc    END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VA_07_FM_INDICATORS  CreateDate: 2025-06-26 18:22:03.723  ModifyDate: 2025-06-26 18:22:03.723  --- DEFINITION START ---  CREATE PROCEDURE [dbo].[VA_07_FM_INDICATORS]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         DECLARE @DATE_FILTER AS DATE --Declare date filter to only select data from current pull date     SET @DATE_FILTER = CONVERT(DATE, GETDATE())         IF OBJECT_ID('tempdb..#fm_exception', 'U') IS NOT NULL DROP TABLE #fm_exception         SELECT DISTINCT      t.MULTI_FUND_ID,      t.COUNTERPARTY_CODE,      po.BROKER_CODE,      qe.QUOTE_EXCEPTION AS EQ_QE,      nwq.NON_WINNING_QUOTE_EXCEPTION AS EQ_NWQ,      qef.QUOTE_EXCEPTION AS FI_QE,      nwqf.NWQ_EXCEPTION AS FI_NWQ,      CASE       WHEN po.BROKER_CODE IS NOT NULL or po.BROKER_CODE=t.COUNTERPARTY_CODE         AND qe.QUOTE_EXCEPTION = 1       THEN 1       WHEN po.BROKER_CODE IS NOT NULL or po.BROKER_CODE=t.COUNTERPARTY_CODE         AND qef.QUOTE_EXCEPTION = 1       THEN 1       WHEN (po.BROKER_CODE IS NOT NULL or po.BROKER_CODE=t.COUNTERPARTY_CODE)          AND qe.QUOTE_EXCEPTION = 0          AND nwq.NON_WINNING_QUOTE_EXCEPTION = 1       THEN 1       WHEN (po.BROKER_CODE IS NOT NULL or po.BROKER_CODE=t.COUNTERPARTY_CODE)          AND qef.QUOTE_EXCEPTION = 0          AND nwqf.NWQ_EXCEPTION = 1       THEN 1       ELSE 0      END AS FM_EXCEPTION,      CASE       WHEN qe.QUOTE_EXCEPTION is NULL       THEN 'FI'       ELSE 'EQ'      END AS DEALING_DESK     INTO #fm_exception     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS o ON o.ORD_NUM=t.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD=t.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.PM_ORDERS po ON po.ORD_NUM=oc.PM_ORD     LEFT JOIN VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_EQ_TABLE qe ON qe.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_EQ_TABLE nwq ON nwq.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI_TABLE qef ON qef.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_FI_TABLE nwqf ON nwqf.MULTI_FUND_ID=t.MULTI_FUND_ID     WHERE cast(t.PULL_DATE as date) =@DATE_FILTER         IF OBJECT_ID('VISTA_STAGING.dbo.VA_07_FM_EXCEPTION_TABLE', 'U') IS NOT NULL DROP TABLE VISTA_STAGING.dbo.VA_07_FM_EXCEPTION_TABLE         SELECT DISTINCT      MULTI_FUND_ID,      DEALING_DESK,      FM_EXCEPTION AS VA_07,      CASE       WHEN FM_EXCEPTION = 1 THEN GETDATE() ELSE NULL      END AS VA_07_CREATETIME     INTO VISTA_STAGING.dbo.VA_07_FM_EXCEPTION_TABLE     FROM #fm_exception        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_01_QUOTE_EXCEPTION_DMG  CreateDate: 2025-06-26 18:22:27.913  ModifyDate: 2025-06-26 18:22:27.913  --- DEFINITION START ---  -- =============================================    -- Author:  <ELIZABETH REYNOLDS>    -- Create date: <02/04/2019>    -- Description:     -- <Count distinct quote providers per market execution.     -- Compare it to the min quote requirement based on     -- Asset Subtype. If Count of Distinct Quote Provider    -- less then Min Quote: Quote Exception = True>    -- =============================================        -- ***************VERSION CONTROL***************    -- 2019-05-16 - MS: Added in PM Order Number in    --     Audit table and changed to     --     Audit table DMG.    -- *********************************************        CREATE PROCEDURE [dbo].[VG_01_QUOTE_EXCEPTION_DMG]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;          IF OBJECT_ID('tempdb..#orders', 'U') IS NOT NULL DROP TABLE #orders     select distinct --create a table that is filtered to just show dmg trades       ORD_NUM,       DEALING_DESK,       TRAN_TYPE--BUY_SELL_FLAG     into #orders     from VISTA_REPORTING.dbo.TRD_ORDERS     where DEALING_DESK='DMG' --and PULL_DATE=@DATE_FILTER         IF OBJECT_ID('tempdb..#max_trades_touch', 'U') IS NOT NULL DROP TABLE #max_trades_touch     select distinct       MULTI_FUND_ID,      MAX(TOUCH_COUNT) AS MAX_TCH      INTO #MAX_TRADES_TOUCH     FROM VISTA_REPORTING.DBO.TRADES     GROUP BY MULTI_FUND_ID             IF OBJECT_ID('tempdb..#multi_fund_ids', 'U') IS NOT NULL DROP TABLE #multi_fund_ids     select distinct --using the filetered table created earlier extract relevant Trades      t.MULTI_FUND_ID,      t.TRAN_TYPE,--o.BUY_SELL_FLAG      --t.B3Q_RATIONALE,      t.TRD_STATUS     into #multi_fund_ids     from VISTA_REPORTING.dbo.TRADES t     --inner join #orders o on o.ORD_NUM=t.ORD_NUM     INNER JOIN #MAX_TRADES_TOUCH MTT ON MTT.MULTI_FUND_ID = t.MULTI_FUND_ID AND MTT.MAX_TCH = t.TOUCH_COUNT     --where ISNULL(t.TRD_STATUS,'') != 'C'             IF OBJECT_ID('tempdb..#dist_ord_mf', 'U') IS NOT NULL DROP TABLE #dist_ord_mf         select distinct      --ORD_NUM,      MULTI_FUND_ID,      QUOTE_VALUE,      BROKER,      QUOTE_ORIGIN     into #dist_ord_mf     from VISTA_REPORTING.dbo.QUOTES         IF OBJECT_ID('tempdb..#quotes', 'U') IS NOT NULL DROP TABLE #quotes     select distinct --create Quotes table        q.MULTI_FUND_ID,       (SELECT COUNT(DISTINCT BROKER)         FROM #dist_ord_mf         WHERE (ISNULL(QUOTE_VALUE, 0) != 0 OR QUOTE_ORIGIN = 'TRADE')           AND MULTI_FUND_ID=q.MULTI_FUND_ID) AS QUOTES_OBTAINED, --Count distinct BROKER where QUOTE_VALUE is NOT NULL OR 0       count(distinct BROKER) as QUOTES_REQUESTED --A quote is required for every MULTI_FUND_ID     into #quotes     from #dist_ord_mf q     inner join #multi_fund_ids o on o.MULTI_FUND_ID=q.MULTI_FUND_ID     group by         q.MULTI_FUND_ID              IF OBJECT_ID('tempdb..#temptrades', 'U') IS NOT NULL DROP TABLE #temptrades     select distinct --Using Trades and multi_fund_ids temp table create a table of indicative quote       m.MULTI_FUND_ID,       t.TRAN_TYPE,       t.TRD_CURRENCY,       min(t.execution_time) as min_exec_time     into #temptrades     from VISTA_REPORTING.dbo.TRADES t      inner join #multi_fund_ids m on m.MULTI_FUND_ID=t.MULTI_FUND_ID     group by      m.MULTI_FUND_ID,       t.TRAN_TYPE,       t.TRD_CURRENCY             IF OBJECT_ID('tempdb..#quote_num', 'U') IS NOT NULL DROP TABLE #quote_num     select      m.MULTI_FUND_ID,      i.TRAN_TYPE,      i.TRD_CURRENCY,      m.TRD_STATUS,      coalesce(q.QUOTES_OBTAINED, 0) AS QUOTES_OBTAINED,      coalesce(q.QUOTES_REQUESTED, 0) AS QUOTES_REQUESTED,      i.min_exec_time     into #quote_num     from #multi_fund_ids m     left join #temptrades i on i.MULTI_FUND_ID=m.MULTI_FUND_ID     left join #quotes q on q.MULTI_FUND_ID=m.MULTI_FUND_ID        IF OBJECT_ID('tempdb..#qe_table', 'U') IS NOT NULL DROP TABLE #qe_table        select distinct     pm.ORD_NUM,     qn.MULTI_FUND_ID,     i.INST_TYPE,     i.PRIMARY_MARKET,     i.TRD_CURRENCY,     qn.QUOTES_REQUESTED,     qn.QUOTES_OBTAINED,     CASE      WHEN qn.TRD_STATUS = 'C' THEN 0      WHEN qn.QUOTES_REQUESTED < QERT.NUM_QUOTES THEN 1 ELSE 0     END AS [3QR_EXCEPTION],     CASE      WHEN qn.TRD_STATUS = 'C' THEN 0      WHEN qn.QUOTES_OBTAINED < QERT.NUM_QUOTES THEN 1 ELSE 0     END AS [3QO_EXCEPTION],     p.VENUE,     i.TRAN_TYPE,     CASE      WHEN qn.TRD_STATUS = 'C' AND i.INST_TYPE != 'DMG OTHER' THEN 0      WHEN qn.quotes_requested < QERT.NUM_QUOTES THEN 1       WHEN qn.quotes_obtained < QERT.NUM_QUOTES THEN 1      WHEN i.INST_TYPE = 'DMG OTHER' THEN 1 --This condition was requested by the business so that they can pick up any cases where the asset tree needs updating      ELSE 0        END AS VG_01,     CASE       WHEN qn.quotes_requested < QERT.NUM_QUOTES THEN GETDATE()       WHEN qn.quotes_obtained < QERT.NUM_QUOTES THEN  GETDATE()       WHEN i.INST_TYPE = 'DMG OTHER' THEN GETDATE()      ELSE NULL      END AS EXCEPTION_CREATETIME     into #qe_table    from #quote_num qn    left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE i on i.MULTI_FUND_ID=qn.MULTI_FUND_ID    left join VISTA_REPORTING.dbo.PLACEMENTS p on p.MULTI_FUND_ID=qn.MULTI_FUND_ID    left join (select distinct trd_trader, multi_fund_id, pull_date, ORD_NUM from VISTA_REPORTING.dbo.TRADES) t on t.MULTI_FUND_ID = qn.MULTI_FUND_ID    LEFT JOIN VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_REFERENCE_TABLE QERT ON QERT.DEALING_DESK = i.DEALING_DESK AND qn.MIN_EXEC_TIME BETWEEN QERT.DATE_FROM AND QERT.DATE_TO    LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.TRD_ORD = T.ORD_NUM    LEFT JOIN (SELECT ORD_NUM FROM VISTA_REPORTING.DBO.PM_ORDERS) PM ON OC.PM_ORD = PM.ORD_NUM    --LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD ON T.TRD_TRADER = TDD.INITIALS AND  CAST(T.PULL_DATE AS DATE) >= CAST(TDD.UPDATED AS DATE) AND TDD.DEALING_DESK = 'DMG'    where (i.DEALING_DESK='DMG') --or (PM.ORD_NUM IS NULL AND tdd.INITIALS is not null )          --Add record into the AUDIT_TABLE    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    SELECT DISTINCT     ex.MULTI_FUND_ID,     t.ORD_NUM AS TRD_ORD,     NULL AS PM_ORD,     'Quote Exception' AS Exception_Type,     CONCAT(ex.MULTI_FUND_ID,'_1') AS ID,     NULL AS REASON,     NULL AS COMMENT,     'For Review' AS Status,     NULL AS ClientExecID,     'DMG' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     TRD_TRADER AS DEALER,     '1A1' AS STATUS_ID,     AUTH_TIME AS ORD_AUTH,     EXECUTION_TIME AS TRADE_EXEC    INTO #temp_audit    FROM #qe_table ex    LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t    ON ex.MULTI_FUND_ID = t.MULTI_FUND_ID    LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o    ON t.ORD_NUM = trd_o.ORD_NUM    WHERE VG_01 = 1        MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_DMG AS T    USING #temp_audit AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);                 IF OBJECT_ID('VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_DMG_TABLE', 'U') IS  NULL      SELECT DISTINCT     t.MULTI_FUND_ID,     prim.DEALING_DESK,     case       when qe.QUOTES_OBTAINED is not NULL      then qe.QUOTES_OBTAINED      else 0     end as QUOTES_OBTAINED,     case      when qe.QUOTES_REQUESTED is not NULL      then qe.QUOTES_REQUESTED      else 0     end as QUOTES_REQUESTED,     --T.B3Q_RATIONALE,     COALESCE(MAX(qe.[3QR_EXCEPTION]), 0) as [3QR_EXCEPTION],     CASE      WHEN MAX(qe.[3QR_EXCEPTION]) = 1 THEN GETDATE() ELSE NULL --if exception flag is '1' create Timestamp     END AS [3QR_CREATETIME],     COALESCE(MAX(qe.[3QO_EXCEPTION]), 0) as [3QO_EXCEPTION],     CASE      WHEN MAX(qe.[3QO_EXCEPTION]) = 1 THEN GETDATE() ELSE NULL --if exception flag is '1' create Timestamp     END AS [3QO_CREATETIME],     COALESCE(MAX(qe.VG_01), 0) as VG_01,     CASE      WHEN MAX(VG_01) = 1 THEN GETDATE() ELSE NULL --if exception flag is '1' create Timestamp     END AS CREATETIME     INTO VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_DMG_TABLE     FROM VISTA_REPORTING.dbo.TRADES t     left join #qe_table qe on t.MULTI_FUND_ID=qe.MULTI_FUND_ID     left join VISTA_REPORTING.dbo.TRD_ORDERS trd on t.ORD_NUM=trd.ORD_NUM --THIS NEEDS TO BE REMOVED AND REPLACED WITH AN ALTERNATIVE TO ACCOUNT FOR TRADES WITHOUT ORDERS     left join (select distinct multi_fund_id, dealing_desk from VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) prim on t.MULTI_FUND_ID = prim.MULTI_FUND_ID     --LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.TRD_ORD = T.ORD_NUM     --LEFT JOIN (SELECT ORD_NUM FROM VISTA_REPORTING.DBO.PM_ORDERS) PM ON OC.PM_ORD = PM.ORD_NUM     --LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD ON T.TRD_TRADER = TDD.INITIALS AND  CAST(T.PULL_DATE AS DATE) >= CAST(TDD.UPDATED AS DATE) AND TDD.DEALING_DESK = 'DMG'     where (prim.DEALING_DESK='DMG') --or (PM.ORD_NUM IS NULL AND tdd.INITIALS is not null )         GROUP BY       t.MULTI_FUND_ID,      prim.DEALING_DESK,      qe.QUOTES_OBTAINED,      qe.QUOTES_REQUESTED      --T.B3Q_RATIONALE         ELSE         IF OBJECT_ID('tempdb..#temp_qe_table', 'U') IS NOT NULL DROP TABLE #temp_qe_table          SELECT DISTINCT     t.MULTI_FUND_ID,     prim.DEALING_DESK,     case       when qe.QUOTES_OBTAINED is not NULL      then qe.QUOTES_OBTAINED      else 0     end as QUOTES_OBTAINED,     case      when qe.QUOTES_REQUESTED is not NULL      then qe.QUOTES_REQUESTED      else 0     end as QUOTES_REQUESTED,     --T.B3Q_RATIONALE,     COALESCE(MAX(qe.[3QR_EXCEPTION]), 0) as [3QR_EXCEPTION],     CASE      WHEN MAX(qe.[3QR_EXCEPTION]) = 1 THEN GETDATE() ELSE NULL --if exception flag is '1' create Timestamp     END AS [3QR_CREATETIME],     COALESCE(MAX(qe.[3QO_EXCEPTION]), 0) as [3QO_EXCEPTION],     CASE      WHEN MAX(qe.[3QO_EXCEPTION]) = 1 THEN GETDATE() ELSE NULL --if exception flag is '1' create Timestamp     END AS [3QO_CREATETIME],     COALESCE(MAX(qe.VG_01), 0) as VG_01,     CASE      WHEN MAX(VG_01) = 1 THEN GETDATE() ELSE NULL --if exception flag is '1' create Timestamp     END AS CREATETIME     INTO #temp_qe_table     FROM VISTA_REPORTING.dbo.TRADES t     left join #qe_table qe on t.MULTI_FUND_ID=qe.MULTI_FUND_ID     left join VISTA_REPORTING.dbo.TRD_ORDERS trd on t.ORD_NUM=trd.ORD_NUM      left join (select distinct multi_fund_id, dealing_desk from VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) prim on t.MULTI_FUND_ID = prim.MULTI_FUND_ID     --LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.TRD_ORD = T.ORD_NUM     --LEFT JOIN (SELECT ORD_NUM FROM VISTA_REPORTING.DBO.PM_ORDERS) PM ON OC.PM_ORD = PM.ORD_NUM     --LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD ON T.TRD_TRADER = TDD.INITIALS AND  CAST(T.PULL_DATE AS DATE) >= CAST(TDD.UPDATED AS DATE) AND TDD.DEALING_DESK = 'DMG'     where prim.DEALING_DESK = 'DMG' --  or (PM.ORD_NUM IS NULL and tdd.dealing_desk is not null)     GROUP BY       t.MULTI_FUND_ID,      prim.DEALING_DESK,      qe.QUOTES_OBTAINED,      qe.QUOTES_REQUESTED      --T.B3Q_RATIONALE        -- Use #quote_exception to populate FINAL_STATUS_UPDATE_TABLE     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     select distinct      CONCAT(MULTI_FUND_ID,'_1') AS ID,      '1A1' AS STATUS,      NULL AS FINAL_UPDATED_TIME     into #temp_status_table     from #qe_table     where VG_01 = 1          MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET       T.ID=T.ID,       T.STATUS=T.STATUS,       T.DEALING_DESK = 'DMG',       T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME,'DMG');             MERGE VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_DMG_TABLE AS T     USING #temp_qe_table AS S     ON (T.MULTI_FUND_ID = S.MULTI_FUND_ID)     WHEN MATCHED      THEN       UPDATE SET       T.DEALING_DESK = S.DEALING_DESK,       T.QUOTES_OBTAINED =  CASE WHEN S.[3QO_EXCEPTION] > T.[3QO_EXCEPTION] THEN S.QUOTES_OBTAINED ELSE T.QUOTES_OBTAINED END,       T.QUOTES_REQUESTED = CASE WHEN S.[3QR_EXCEPTION] > T.[3QR_EXCEPTION] THEN S.QUOTES_REQUESTED ELSE T.QUOTES_REQUESTED END,       T.[3QR_EXCEPTION] = CASE WHEN S.[3QR_EXCEPTION] > T.[3QR_EXCEPTION] THEN S.[3QR_EXCEPTION] ELSE T.[3QR_EXCEPTION] END,       T.[3QR_CREATETIME] = CASE WHEN S.[3QR_EXCEPTION] > T.[3QR_EXCEPTION] THEN S.[3QR_CREATETIME] ELSE T.[3QR_CREATETIME] END,       T.[3QO_EXCEPTION] = CASE WHEN S.[3QO_EXCEPTION] > T.[3QO_EXCEPTION] THEN S.[3QO_EXCEPTION] ELSE T.[3QO_EXCEPTION] END,       T.[3QO_CREATETIME] = CASE WHEN S.[3QO_EXCEPTION] > T.[3QO_EXCEPTION] THEN S.[3QO_CREATETIME] ELSE T.[3QO_CREATETIME] END,       T.VG_01 = CASE WHEN S.VG_01 > T.VG_01 THEN S.VG_01 ELSE T.VG_01 END,       T.CREATETIME = CASE WHEN S.VG_01 > T.VG_01 THEN S.CREATETIME ELSE T.CREATETIME END          WHEN NOT MATCHED       THEN INSERT (MULTI_FUND_ID, DEALING_DESK, QUOTES_OBTAINED,              QUOTES_REQUESTED, [3QR_EXCEPTION], [3QR_CREATETIME],           [3QO_EXCEPTION], [3QO_CREATETIME],          VG_01, CREATETIME)         VALUES (S.MULTI_FUND_ID, S.DEALING_DESK, S.QUOTES_OBTAINED,              S.QUOTES_REQUESTED, S.[3QR_EXCEPTION], S.[3QR_CREATETIME],           S.[3QO_EXCEPTION], S.[3QO_CREATETIME],           S.VG_01, S.CREATETIME);         IF OBJECT_ID('tempdb..#orders', 'U') IS NOT NULL DROP TABLE #orders     IF OBJECT_ID('tempdb..#max_trades_touch', 'U') IS NOT NULL DROP TABLE #max_trades_touch     IF OBJECT_ID('tempdb..#multi_fund_ids', 'U') IS NOT NULL DROP TABLE #multi_fund_ids     IF OBJECT_ID('tempdb..#dist_ord_mf', 'U') IS NOT NULL DROP TABLE #dist_ord_mf     IF OBJECT_ID('tempdb..#quotes', 'U') IS NOT NULL DROP TABLE #quotes     IF OBJECT_ID('tempdb..#temptrades', 'U') IS NOT NULL DROP TABLE #temptrades     IF OBJECT_ID('tempdb..#quote_num', 'U') IS NOT NULL DROP TABLE #quote_num        IF OBJECT_ID('tempdb..#qe_table', 'U') IS NOT NULL DROP TABLE #qe_table     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     IF OBJECT_ID('tempdb..#temp_qe_table', 'U') IS NOT NULL DROP TABLE #temp_qe_table     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table            END                        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_01_QUOTE_EXCEPTION_EQ  CreateDate: 2025-06-26 18:23:00.217  ModifyDate: 2025-06-26 18:23:00.217  --- DEFINITION START ---  -- =============================================    -- Author:  <Devereux, Alan>    -- Create date: <10/10/2017>    -- Description:     -- <Count distinct quote providers per market execution.     -- Compare it to the min quote requirement based on     -- Asset Subtype. If Count of Distinct Quote Provider    -- less then Min Quote: Quote Exception = True>    -- =============================================        -- ***************VERSION CONTROL***************    -- 11/12/2017 - DDC: Changes made to ensure that script     -- only ever updates existing records always ensuring     -- the highest level exception is reported and     -- inserts new ones if no exception has been raised.        -- 04/01/2018 - DDC: Amendment made to only run  exception    -- calculations on the data for the day the exception is     -- being pulled        -- 2018-02-22 - WH: Added in ASSET_TYPE: 'EQUITY' and     --   ASSET_SUB_TYPE = 'PFD' for consideration     --  (using same conditions as for CORP BND)        -- 2018-03-20 - WH: Changed from BUY_SELL_FLAG to TRAN_TYPE    -- when looking at indicative quotes.        -- 04/04/2018 - DDC: Changed the logic to count quotes requested     -- as COUNT(DISTINCT BROKER) WHERE QUOTE_VALUE IS NOT NULL OR 0        -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.        -- *********************************************            CREATE PROCEDURE [dbo].[VG_01_QUOTE_EXCEPTION_EQ]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,         AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         --DECLARE @DATE_FILTER AS DATE --Declare date filter to only select data from current pull date     --SET @DATE_FILTER = CONVERT(DATE, GETDATE())         --IF OBJECT_ID('tempdb..#quotes', 'U') IS NOT NULL DROP TABLE #quotes         --select distinct --create a table pulling together QUOTES, TRD_ORDERS, TRADES, INSTRUMENTS AND INITIAL_INSTRUMENTS     -- t.ORD_NUM,     -- t.MULTI_FUND_ID,     -- q.BROKER,     -- o.ORD_GROUP,     -- t.EXECUTION_TYPE,     -- t.MTG_SUBTYPE,     -- t.SM_SEC_TYPE,     -- t.SM_SEC_GROUP,     -- i.CUSIP,     -- o.DEALING_DESK,     -- ii.ASSET_TYPE,     -- ii.ASSET_SUB_TYPE,     -- NUM_INDICATIVE_QUOTES = (case when t.BUY_SELL_FLAG = 'BUY' then t.NUM_INDICATIVE_QUOTES_ASK else t.NUM_INDICATIVE_QUOTES_BID end),     -- sum(case when (q.QUOTE_VALUE is null or q.quote_value = 0)  then 0 else 1 end) as QUOTES_OBTAINED, --Count quotes when Quote Value is valid     -- sum(1) as QUOTES_REQUESTED     --into #quotes     --from VISTA_REPORTING.dbo.QUOTES q      --left join VISTA_REPORTING.dbo.TRD_ORDERS o on q.ORD_NUM=o.ORD_NUM     --left join VISTA_REPORTING.dbo.TRADES t on o.ORD_NUM=t.ORD_NUM     --left join VISTA_REPORTING.dbo.INSTRUMENTS i on i.CUSIP=o.CUSIP     --left join VISTA_STAGING.dbo.INITIAL_INSTRUMENTS ii on i.SM_SEC_TYPE=ii.ASSET_SUB_TYPE and i.SM_SEC_GROUP=ii.ASSET_TYPE     --where o.DEALING_DESK = 'Equity' --filter data for Equity trades     --group by      -- t.ORD_NUM,     -- t.MULTI_FUND_ID,     -- q.BROKER,     -- o.ORD_GROUP,     -- t.EXECUTION_TYPE,     -- t.MTG_SUBTYPE,     -- t.SM_SEC_TYPE,     -- t.SM_SEC_GROUP,     -- i.CUSIP,     -- o.DEALING_DESK,     -- ii.ASSET_TYPE,     -- ii.ASSET_SUB_TYPE,     -- t.BUY_SELL_FLAG,     -- t.NUM_INDICATIVE_QUOTES_ASK,     -- t.NUM_INDICATIVE_QUOTES_BID         IF OBJECT_ID('tempdb..#ind_quote', 'U') IS NOT NULL DROP TABLE #ind_quote         select distinct      MULTI_FUND_ID,      case        when TRAN_TYPE = 'BUY'        then NUM_INDICATIVE_QUOTES_ASK       else NUM_INDICATIVE_QUOTES_BID      end as NUM_INDICATIVE_QUOTES     into #ind_quote     from VISTA_REPORTING.dbo.TRADES     --where PULL_DATE=@DATE_FILTER         IF OBJECT_ID('tempdb..#dist_ord_mf', 'U') IS NOT NULL DROP TABLE #dist_ord_mf         select distinct      MULTI_FUND_ID,      QUOTE_VALUE,      BROKER,      QUOTE_ORIGIN     into #dist_ord_mf     from VISTA_REPORTING.dbo.QUOTES         IF OBJECT_ID('tempdb..#quote_req_obt', 'U') IS NOT NULL DROP TABLE #quote_req_obt         select distinct      q.MULTI_FUND_ID,      COUNT(DISTINCT        CASE WHEN QUOTE_ORIGIN = 'TRADE' THEN BROKER --If a trade has occurred, you must have obtained a quote from this broker.       WHEN QUOTE_VALUE != 0 THEN BROKER        ELSE NULL        END) AS QUOTES_OBTAINED, --Count distinct BROKER where QUOTE_VALUE is NOT NULL OR 0      --sum(case when (QUOTE_VALUE is null or QUOTE_VALUE = 0)  then 0 else 1 end) as QUOTES_OBTAINED,      count(distinct q.BROKER) as QUOTES_REQUESTED     into #quote_req_obt     from #dist_ord_mf as q     group by       q.MULTI_FUND_ID         --select * from #quote_req_obt where MULTI_FUND_ID=519141         IF OBJECT_ID('tempdb..#quotes', 'U') IS NOT NULL DROP TABLE #quotes         select       t.ORD_NUM,      t.MULTI_FUND_ID,      q.BROKER,      o.ORD_GROUP,      t.EXECUTION_TYPE,      t.MTG_SUBTYPE,      t.SM_SEC_TYPE,      t.SM_SEC_GROUP,      i2.CUSIP,      o.DEALING_DESK,      t.TRAN_TYPE,      t.TRD_STATUS,      --i2.SM_SEC_TYPE,      --i2.SM_SEC_GROUP,      --ii.ASSET_TYPE,      --ii.ASSET_SUB_TYPE,      iq.NUM_INDICATIVE_QUOTES,      qot.QUOTES_OBTAINED,      qot.QUOTES_REQUESTED,      pr.PRIMARY_MARKET     into #quotes     from VISTA_REPORTING.dbo.TRADES t     left join VISTA_REPORTING.dbo.QUOTES q on q.MULTI_FUND_ID=t.MULTI_FUND_ID     left join #ind_quote iq on iq.MULTI_FUND_ID = t.MULTI_FUND_ID     left join #quote_req_obt qot on qot.MULTI_FUND_ID = t.MULTI_FUND_ID     left join VISTA_REPORTING.dbo.TRD_ORDERS o on t.ORD_NUM=o.ORD_NUM     --left join VISTA_REPORTING.dbo.INSTRUMENTS i on i.CUSIP=o.CUSIP     OUTER APPLY (SELECT TOP 1 i.* FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=coalesce(t.CUSIP, o.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(t.EXECUTION_TIME, o.AUTH_TIME)))         ORDER BY i.DATE DESC) as i2     --left join VISTA_STAGING.dbo.INITIAL_INSTRUMENTS ii on i.SM_SEC_TYPE=ii.ASSET_SUB_TYPE and i.SM_SEC_GROUP=ii.ASSET_TYPE     left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr on pr.MULTI_FUND_ID=t.MULTI_FUND_ID     where o.DEALING_DESK = 'Equity' and t.FinalFlag=1 and pr.PRIMARY_MARKET=0--and t.PULL_DATE=@DATE_FILTER     group by      t.ORD_NUM,      t.MULTI_FUND_ID,      iq.NUM_INDICATIVE_QUOTES,      q.BROKER,      o.ORD_GROUP,      t.EXECUTION_TYPE,      t.MTG_SUBTYPE,      t.SM_SEC_TYPE,      t.SM_SEC_GROUP,      i2.CUSIP,      o.DEALING_DESK,      t.TRAN_TYPE,      t.TRD_STATUS,      --i2.SM_SEC_TYPE,      --i2.SM_SEC_GROUP,      --ii.ASSET_TYPE,      --ii.ASSET_SUB_TYPE,      iq.NUM_INDICATIVE_QUOTES,      qot.QUOTES_OBTAINED,      qot.QUOTES_REQUESTED,      pr.PRIMARY_MARKET         --select * from #quotes where MULTI_FUND_ID=626697               IF OBJECT_ID('tempdb..#quote_exception', 'U') IS NOT NULL DROP TABLE #quote_exception         select       ORD_NUM,      MULTI_FUND_ID,      ORD_GROUP,      EXECUTION_TYPE,      SM_SEC_TYPE,      SM_SEC_GROUP,      MTG_SUBTYPE,      TRAN_TYPE,      QUOTES_OBTAINED,      QUOTES_REQUESTED,      sum(NUM_INDICATIVE_QUOTES) as NUM_INDICATIVE_QUOTES,      count(distinct m.BROKER) as QUOTE_NUM, --calculate number of quotes      case       when TRD_STATUS = 'C'         then 0       when ((SM_SEC_GROUP = 'BND'         and SM_SEC_TYPE='CORP')        or (SM_SEC_GROUP = 'EQUITY'         and SM_SEC_TYPE='PFD'))        and PRIMARY_MARKET=1        --and EXECUTION_TYPE in ('L', 'I')         then 0 --Primary Market Convertible Bonds are not flagged as exception       when SM_SEC_GROUP = 'BND'         and SM_SEC_TYPE='CORP'         and PRIMARY_MARKET=0        --and EXECUTION_TYPE not in ('L', 'I')         and count(distinct m.BROKER) < 2         then 1 --all other Corporate Bonds requires at least 2 quotes       when SM_SEC_GROUP = 'EQUITY'         and SM_SEC_TYPE='PFD'         and PRIMARY_MARKET=0        --and EXECUTION_TYPE not in ('L', 'I')         and count(distinct m.BROKER) < 2         then 1 --PFDs requires at least 2 quotes       when SM_SEC_GROUP = 'OPTION'         and count(distinct m.BROKER) < 2         then 1 --OPTIONS requires at least 2 quotes       when (MTG_SUBTYPE like 'ETF%')         and (SM_SEC_GROUP = 'EQUITY')         and (SM_SEC_TYPE = 'EQUITY')         and count(distinct m.BROKER) < 2         then 1 --Equity ETFs are flagged       when SM_SEC_GROUP = 'SWAP'         and SM_SEC_TYPE='TRSWAP'         and count(distinct m.BROKER) < 2         then 1       when TRAN_TYPE in ('BUY', 'SELL')         and EXECUTION_TYPE = 'P'         and ORD_GROUP is not null         and count(distinct BROKER) < 2         then 1 --Programme Trades are flagged       else 0       end as QUOTE_EXCEPTION     into #quote_exception     from #quotes m     group by      ORD_NUM,      MULTI_FUND_ID,      ORD_GROUP,      EXECUTION_TYPE,      PRIMARY_MARKET,      SM_SEC_TYPE,      SM_SEC_GROUP,      TRD_STATUS,      MTG_SUBTYPE,      TRAN_TYPE,      SM_SEC_TYPE,      SM_SEC_GROUP,      QUOTES_OBTAINED,      QUOTES_REQUESTED         --select * from #quote_exception where MULTI_FUND_ID = 515240     IF OBJECT_ID('tempdb..#quote_exception_final', 'U') IS NOT NULL DROP TABLE #quote_exception_final     SELECT       MULTI_FUND_ID,       QUOTES_OBTAINED,      QUOTES_REQUESTED,      NUM_INDICATIVE_QUOTES,      MAX(QUOTE_EXCEPTION) AS QUOTE_EXCEPTION     INTO #quote_exception_final     FROM #quote_exception      GROUP BY MULTI_FUND_ID, QUOTES_OBTAINED, QUOTES_REQUESTED, NUM_INDICATIVE_QUOTES         -- Use #quote_exception to populate FINAL_STATUS_UPDATE_TABLE     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     select distinct      CONCAT(MULTI_FUND_ID,'_1') AS ID,      '1A1' AS STATUS,      NULL AS FINAL_UPDATED_TIME     into #temp_status_table     from #quote_exception_final     where QUOTE_EXCEPTION = 1          --      MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET       T.ID=T.ID,       T.STATUS=T.STATUS,       T.DEALING_DESK = 'Equity',       T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME,'Equity');         --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      ex.MULTI_FUND_ID,      t.ORD_NUM AS TRD_ORD,      NULL AS PM_ORD,      'Quote Exception' AS Exception_Type,      CONCAT(ex.MULTI_FUND_ID,'_1') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'For Review' AS Status,      NULL AS ClientExecID,      'Equity' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      TRD_TRADER AS DEALER,      '1A1' AS STATUS_ID,      AUTH_TIME AS ORD_AUTH,      EXECUTION_TIME AS TRADE_EXEC     INTO #temp_audit     FROM #quote_exception_final ex     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t     ON ex.MULTI_FUND_ID = t.MULTI_FUND_ID     LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o     ON t.ORD_NUM = trd_o.ORD_NUM     WHERE QUOTE_EXCEPTION = 1         MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);         IF OBJECT_ID('VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_EQ_TABLE', 'U') IS NULL         --IF OBJECT_ID('VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_EQ_TABLE', 'U') IS NOT NULL DROP TABLE VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_EQ_TABLE     select distinct       --t.ORD_NUM,      tr.DEALING_DESK,      case        when q.QUOTES_OBTAINED is not NULL        then q.QUOTES_OBTAINED        else 0      end as QUOTES_OBTAINED,      case       when q.QUOTES_REQUESTED is not NULL        then q.QUOTES_REQUESTED       else 0      end as QUOTES_REQUESTED,      case       when q.NUM_INDICATIVE_QUOTES is not NULL        then q.NUM_INDICATIVE_QUOTES       else 0      end as NUM_INDICATIVE_QUOTES,      t.MULTI_FUND_ID,      coalesce(QUOTE_EXCEPTION, 0) as QUOTE_EXCEPTION,      case        when QUOTE_EXCEPTION=1 then GETDATE() else NULL end as QE_CREATE_TIME --If an excpetion has been raised create a Timestamp for that exception     into VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_EQ_TABLE     from VISTA_REPORTING.dbo.TRADES t     left join #quote_exception_final q on q.MULTI_FUND_ID=t.MULTI_FUND_ID     left join VISTA_REPORTING.dbo.TRD_ORDERS tr on tr.ORD_NUM=t.ORD_NUM     where tr.DEALING_DESK = 'Equity' --and t.PULL_DATE=@DATE_FILTER--         ELSE          IF OBJECT_ID('tempdb..#temp_qe_table', 'U') IS NOT NULL DROP TABLE #temp_qe_table         select distinct       --t.ORD_NUM,      tr.DEALING_DESK,      case        when q.QUOTES_OBTAINED is not NULL        then q.QUOTES_OBTAINED        else 0      end as QUOTES_OBTAINED,      case       when q.QUOTES_REQUESTED is not NULL        then q.QUOTES_REQUESTED       else 0      end as QUOTES_REQUESTED,      case       when q.NUM_INDICATIVE_QUOTES is not NULL        then q.NUM_INDICATIVE_QUOTES       else 0      end as NUM_INDICATIVE_QUOTES,      t.MULTI_FUND_ID,      coalesce(QUOTE_EXCEPTION, 0) as QUOTE_EXCEPTION,      case        when QUOTE_EXCEPTION=1 then GETDATE() else NULL end as QE_CREATE_TIME --If an excpetion has been raised create a Timestamp for that exception     into #temp_qe_table     from VISTA_REPORTING.dbo.TRADES t     left join #quote_exception_final q on q.MULTI_FUND_ID=t.MULTI_FUND_ID     left join VISTA_REPORTING.dbo.TRD_ORDERS tr on tr.ORD_NUM=t.ORD_NUM     where tr.DEALING_DESK = 'Equity' --and t.PULL_DATE=@DATE_FILTER     --order by t.ORD_NUM, tr.MULTI_FUND_ID               MERGE VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_EQ_TABLE AS T     USING #temp_qe_table AS S     ON (T.MULTI_FUND_ID = S.MULTI_FUND_ID)     WHEN MATCHED      THEN       UPDATE SET         T.DEALING_DESK = S.DEALING_DESK,       T.QUOTES_OBTAINED =  CASE WHEN S.QUOTE_EXCEPTION > T.QUOTE_EXCEPTION THEN S.QUOTES_OBTAINED ELSE T.QUOTES_OBTAINED END,       T.QUOTES_REQUESTED = CASE WHEN S.QUOTE_EXCEPTION > T.QUOTE_EXCEPTION THEN S.QUOTES_REQUESTED ELSE T.QUOTES_REQUESTED END,       T.NUM_INDICATIVE_QUOTES =  CASE WHEN S.QUOTE_EXCEPTION > T.QUOTE_EXCEPTION THEN S.NUM_INDICATIVE_QUOTES ELSE T.NUM_INDICATIVE_QUOTES END,       T.QUOTE_EXCEPTION = CASE WHEN S.QUOTE_EXCEPTION > T.QUOTE_EXCEPTION THEN S.QUOTE_EXCEPTION ELSE T.QUOTE_EXCEPTION END,       T.QE_CREATE_TIME = CASE WHEN S.QUOTE_EXCEPTION > T.QUOTE_EXCEPTION THEN S.QE_CREATE_TIME ELSE T.QE_CREATE_TIME END          WHEN NOT MATCHED       THEN INSERT (DEALING_DESK, MULTI_FUND_ID, QUOTES_OBTAINED,              QUOTES_REQUESTED, NUM_INDICATIVE_QUOTES, QUOTE_EXCEPTION, QE_CREATE_TIME)         VALUES (S.DEALING_DESK, S.MULTI_FUND_ID, S.QUOTES_OBTAINED,              S.QUOTES_REQUESTED, S.NUM_INDICATIVE_QUOTES, S.QUOTE_EXCEPTION, S.QE_CREATE_TIME);         IF OBJECT_ID('tempdb..#ind_quote', 'U') IS NOT NULL DROP TABLE #ind_quote     IF OBJECT_ID('tempdb..#dist_ord_mf', 'U') IS NOT NULL DROP TABLE #dist_ord_mf     IF OBJECT_ID('tempdb..#quote_req_obt', 'U') IS NOT NULL DROP TABLE #quote_req_obt     IF OBJECT_ID('tempdb..#quotes', 'U') IS NOT NULL DROP TABLE #quotes     IF OBJECT_ID('tempdb..#quote_exception', 'U') IS NOT NULL DROP TABLE #quote_exception     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     IF OBJECT_ID('tempdb..#temp_qe_table', 'U') IS NOT NULL DROP TABLE #temp_qe_table        END            --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_01_QUOTE_EXCEPTION_FI  CreateDate: 2025-06-26 18:23:12.730  ModifyDate: 2025-06-26 18:23:12.730  --- DEFINITION START ---  -- =============================================    -- Author:  <Devereux, Alan>    -- Create date: <10/10/2017>    -- Description:     -- <Count distinct quote providers per market execution.     -- Compare it to the min quote requirement based on     -- Asset Subtype. If Count of Distinct Quote Provider    -- less then Min Quote: Quote Exception = True>    -- =============================================            -- ***************VERSION CONTROL***************    -- 11/12/2017 - DDC: Changes made to ensure that script     -- only ever updates existing records always ensuring     -- the highest level exception is reported and     -- inserts new ones if no exception has been raised.        -- 04/01/2018 - DDC: Amendment made to only run  exception    -- calculations on the data for the day the exception is     -- being pulled        -- 20/03/2018 - DDC: Amendments made to reflect revised logic     -- detailed in Price Discovery document. Previous logic remains    -- commented out.        -- 2018-03-21 - WH: Removed reference to BUY_SELL_FLAG - used     -- TRAN_TYPE instead        -- 04/04/2018 - DDC: Changed the logic to count quotes requested     -- as COUNT(DISTINCT BROKER) WHERE QUOTE_VALUE IS NOT NULL OR 0        -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.        -- 2019-04-26 - DDC: Added clause into QE logic to make the threshold for    -- 'IRS', 'BASIS', 'ZCS', 'ASWP', 'IFS', 'CASWP', 'CCS','SWAP' is 3 QUOTES_OBTAINED    -- for any orders seen after 26/04/2019        --2023-04-06 - Crated manually Jira number to resolve duplication because of multiple trd currency on same multi fund id (Multi_fund_id:3510550(check with Thanos))    --SG54637 - Added deduplication table before Merge    -- *********************************************        CREATE PROCEDURE [dbo].[VG_01_QUOTE_EXCEPTION_FI]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         --DECLARE @DATE_FILTER AS DATE --Declare date filter to only select data from current pull date     --SET @DATE_FILTER = CONVERT(DATE, GETDATE())          IF OBJECT_ID('tempdb..#orders', 'U') IS NOT NULL DROP TABLE #orders     select distinct --create a table that is filtered to just show FI trades       ORD_NUM,       DEALING_DESK,       TRAN_TYPE--BUY_SELL_FLAG     into #orders     from VISTA_REPORTING.dbo.TRD_ORDERS     where DEALING_DESK='Fixed Income' --and PULL_DATE=@DATE_FILTER         IF OBJECT_ID('tempdb..#multi_fund_ids', 'U') IS NOT NULL DROP TABLE #multi_fund_ids     select distinct --using the filetered table created earlier extract relevant Trades      --o.ORD_NUM,      t.MULTI_FUND_ID,      o.TRAN_TYPE--o.BUY_SELL_FLAG     into #multi_fund_ids     from VISTA_REPORTING.dbo.TRADES t     join #orders o on o.ORD_NUM=t.ORD_NUM     where ISNULL(t.TRD_STATUS,'') != 'C'         --select * from #multi_fund_ids         IF OBJECT_ID('tempdb..#dist_ord_mf', 'U') IS NOT NULL DROP TABLE #dist_ord_mf         select distinct      --ORD_NUM,      MULTI_FUND_ID,      QUOTE_VALUE,      BROKER,      QUOTE_ORIGIN     into #dist_ord_mf     from VISTA_REPORTING.dbo.QUOTES         IF OBJECT_ID('tempdb..#quotes', 'U') IS NOT NULL DROP TABLE #quotes     select distinct --create Quotes table        --q.ORD_NUM,       q.MULTI_FUND_ID,       --q.BROKER,       --q.QUOTE_TYPE,       --q.QUOTE_VALUE,       (SELECT COUNT(DISTINCT BROKER)         FROM #dist_ord_mf         WHERE (ISNULL(QUOTE_VALUE, 0) != 0 OR QUOTE_ORIGIN = 'TRADE')           AND MULTI_FUND_ID=q.MULTI_FUND_ID) AS QUOTES_OBTAINED, --Count distinct BROKER where QUOTE_VALUE is NOT NULL OR 0       --sum(case when (q.QUOTE_VALUE is null or q.quote_value = 0)  then 0 else 1 end) as QUOTES_OBTAINED, --Count quotes when Quote Value is valid       count(distinct BROKER) as QUOTES_REQUESTED --A quote is required for every MULTI_FUND_ID     into #quotes     from #dist_ord_mf q     join #multi_fund_ids o on o.MULTI_FUND_ID=q.MULTI_FUND_ID     group by         --q.ORD_NUM,     q.MULTI_FUND_ID     --q.BROKER,     --q.QUOTE_TYPE,     --q.QUOTE_VALUE         --select * from #quotes          IF OBJECT_ID('tempdb..#indicative_quotes', 'U') IS NOT NULL DROP TABLE #indicative_quotes     select distinct --Using Trades and multi_fund_ids temp table create a table of indicative quote       --m.ORD_NUM,       m.MULTI_FUND_ID,       --m.BUY_SELL_FLAG,       t.INDICATIVE_COMMENTS,       t.TRAN_TYPE,       NUM_INDICATIVE_QUOTES = (case when m.TRAN_TYPE /*m.BUY_SELL_FLAG*/ = 'BUY' then t.NUM_INDICATIVE_QUOTES_ASK else t.NUM_INDICATIVE_QUOTES_BID end),       t.NUM_INDICATIVE_QUOTES_ASK,       t.NUM_INDICATIVE_QUOTES_BID,       t.TRD_CURRENCY     into #indicative_quotes     from VISTA_REPORTING.dbo.TRADES t      join #multi_fund_ids m on m.MULTI_FUND_ID=t.MULTI_FUND_ID             IF OBJECT_ID('tempdb..#quote_num', 'U') IS NOT NULL DROP TABLE #quote_num     select      --m.ORD_NUM,      m.MULTI_FUND_ID,      i.TRAN_TYPE,      i.TRD_CURRENCY,      coalesce(q.QUOTES_OBTAINED, 0) AS QUOTES_OBTAINED,      coalesce(q.QUOTES_REQUESTED, 0) AS QUOTES_REQUESTED,      sum(i.NUM_INDICATIVE_QUOTES) as NUM_INDICATIVE_QUOTES, --Count indicative quotes for each Order Number and Multi_Fund_Id      --sum(case when (q.QUOTE_VALUE is null or q.quote_value = 0)  then 0 else 1 end) as QUOTES_OBTAINED, --Count quotes when Quote Value is valid      --sum(1) as QUOTES_REQUESTED, --A quote is required for every MULTI_FUND_ID      sum(i.NUM_INDICATIVE_QUOTES_ASK) AS INDICATIVE_QUOTES_ASK,      sum(i.NUM_INDICATIVE_QUOTES_BID) AS INDICATIVE_QUOTES_BID     into #quote_num     from #multi_fund_ids m     left join #indicative_quotes i on i.MULTI_FUND_ID=m.MULTI_FUND_ID     left join #quotes q on q.MULTI_FUND_ID=m.MULTI_FUND_ID     group by m.MULTI_FUND_ID, i.TRAN_TYPE, i.TRD_CURRENCY, q.QUOTES_OBTAINED, q.QUOTES_REQUESTED         IF OBJECT_ID('tempdb..#qe_table', 'U') IS NOT NULL DROP TABLE #qe_table          select distinct      --qn.ORD_NUM,      t.PULL_DATE,      qn.MULTI_FUND_ID,      i.INST_TYPE,      i.PRIMARY_MARKET,      i.TRD_CURRENCY,      qn.QUOTES_REQUESTED,      qn.QUOTES_OBTAINED,      qn.NUM_INDICATIVE_QUOTES,      --qn.INDICATIVE_QUOTES_ASK,      --qn.INDICATIVE_QUOTES_BID,      CASE       WHEN qn.QUOTES_REQUESTED < 3 THEN 1 ELSE 0      END AS "3QR_EXCEPTION",      CASE       WHEN qn.QUOTES_OBTAINED < 3 THEN 1 ELSE 0      END AS "3QO_EXCEPTION",      p.VENUE,      i.TRAN_TYPE,--i.BUY_SELL_FLAG,      case       when        ISNULL(p.VENUE,'') not in ('38129', '38131') and i.INTERFUND_TRANSFER=0 and i.TWEB_CLOSE_DEALING=0 and i.PRIMARY_MARKET=0 and convert(DATE, t.PULL_DATE) < '2019-04-26'--and qn.QUOTES_REQUESTED < 3                --not(p.VENUE in ('MANUAL PL', '38129', '38131') OR p.VENUE is NULL) and qn.QUOTES_REQUESTED < 3        --p.VENUE not in ('MANUAL', 'MANUAL PL', 38129, 38131) and qn.QUOTES_REQUESTED < 3 --If Trade is not Liquidnet or Manual then request 3 quotes        then        case         when (not (ISNULL(i.INST_TYPE, '') in ('RMBS', 'CMBS', 'ABS', 'CDO','MBS','ARM','CMO') and i.TRAN_TYPE = 'BUY')            and not (ISNULL(i.INST_TYPE, '') in ('OIS', 'IRS', 'BASIS', 'ZCS', 'ASWP', 'IFS', 'CASWP', 'CCS','SWAP'))           and not (ISNULL(i.INST_TYPE, '') in ('HY CORP', 'IG CORP','NR CORP') and i.TRD_CURRENCY = 'USD')           and not (ISNULL(i.INST_TYPE, '') in ('HY CORP','NR CORP') and i.TRD_CURRENCY in ('GBP', 'EUR')))           and not (ISNULL(i.INST_TYPE, '') IN ('IRFUT','BNDFUT','OPTFUT','ETD')) -- No quote exceptions for ETDs (IRFUT, BNDFUT, OPTFUT)           and qn.QUOTES_OBTAINED < 3           then 1         when i.INST_TYPE in ('OIS', 'IRS', 'BASIS', 'ZCS', 'ASWP', 'IFS', 'CASWP', 'CCS','SWAP')           and qn.QUOTES_OBTAINED < 2           then 1         when (ISNULL(i.INST_TYPE, '') in ('HY CORP', 'IG CORP','NR CORP') and i.TRD_CURRENCY = 'USD')           and (qn.QUOTES_OBTAINED + qn.NUM_INDICATIVE_QUOTES) < 3           then 1         when (ISNULL(i.INST_TYPE, '') in ('HY CORP','NR CORP') and i.TRD_CURRENCY in ('GBP', 'EUR'))           and (qn.QUOTES_OBTAINED < 2 or (qn.QUOTES_OBTAINED = 2 and qn.NUM_INDICATIVE_QUOTES < 1))           then 1        end       when        ISNULL(p.VENUE,'') not in ('38129', '38131') and i.INTERFUND_TRANSFER=0 and i.TWEB_CLOSE_DEALING=0 and i.PRIMARY_MARKET=0 and convert(DATE, t.PULL_DATE) >= '2019-04-26'--and qn.QUOTES_REQUESTED < 3                --not(p.VENUE in ('MANUAL PL', '38129', '38131') OR p.VENUE is NULL) and qn.QUOTES_REQUESTED < 3        --p.VENUE not in ('MANUAL', 'MANUAL PL', 38129, 38131) and qn.QUOTES_REQUESTED < 3 --If Trade is not Liquidnet or Manual then request 3 quotes        then        case         when (not (ISNULL(i.INST_TYPE, '') in ('RMBS', 'CMBS', 'ABS', 'CDO','MBS','ARM','CMO') and i.TRAN_TYPE = 'BUY')            --and not (ISNULL(i.INST_TYPE, '') in ('IRS', 'BASIS', 'ZCS', 'ASWP', 'IFS', 'CASWP', 'CCS','SWAP'))           and not (ISNULL(i.INST_TYPE, '') in ('HY CORP', 'IG CORP','NR CORP') and i.TRD_CURRENCY = 'USD')           and not (ISNULL(i.INST_TYPE, '') in ('HY CORP','NR CORP') and i.TRD_CURRENCY in ('GBP', 'EUR'))           and not (ISNULL(i.INST_TYPE, '') in ('FI TRS','CDSWAPTION')))           and not (ISNULL(i.INST_TYPE, '') IN ('IRFUT','BNDFUT','OPTFUT','ETD')) -- No quote exceptions for ETDs (IRFUT, BNDFUT, OPTFUT)           and qn.QUOTES_OBTAINED < 3           then 1         --when i.INST_TYPE in ('IRS', 'BASIS', 'ZCS', 'ASWP', 'IFS', 'CASWP', 'CCS','SWAP')         --  and qn.QUOTES_OBTAINED < 2           --then 1         when (ISNULL(i.INST_TYPE, '') in ('HY CORP', 'IG CORP','NR CORP') and i.TRD_CURRENCY = 'USD')           and (qn.QUOTES_OBTAINED + qn.NUM_INDICATIVE_QUOTES) < 3           then 1         when (ISNULL(i.INST_TYPE, '') in ('HY CORP','NR CORP') and i.TRD_CURRENCY in ('GBP', 'EUR'))           and (qn.QUOTES_OBTAINED < 2 or (qn.QUOTES_OBTAINED = 2 and qn.NUM_INDICATIVE_QUOTES < 1))           then 1         when (ISNULL(i.INST_TYPE, '') in ('FI TRS','CDSWAPTION') AND qn.QUOTES_OBTAINED < 2)            then 1        end       --when       -- p.VENUE in ('38129', '38131')       -- then 1       --when i.INST_TYPE IS NULL        -- then 1       --when        --PRIMARY_MARKET = 0 and (p.VENUE in ('MANUAL', 'MANUAL PL')) --If Trade is Manual and it is NOT Primary Market then go to secondary level of validation        --PRIMARY_MARKET = 0 and (p.VENUE ='MANUAL PL' OR p.VENUE is NULL)        --then        --case        -- when         --  i.INST_TYPE in ('HY BND', 'HY IBND', 'COV', 'IG BND', 'IG IBND', 'SSA BND') --If Trade falls into any of these intrument types and currency is USD then 3 quotes are required        --  and i.TRD_CURRENCY = 'USD'        --  and (qn.QUOTES_OBTAINED + qn.NUM_INDICATIVE_QUOTES) < 3 then 1        -- when        --  i.INST_TYPE in ('HY BND', 'HY IBND', 'COV', 'SSA BND') --If Trade falls into any of these intrument types and currency is GBP or EUR then 3 quotes are required        --  and i.TRD_CURRENCY in ('GBP','EUR')        --  and (qn.QUOTES_OBTAINED < 2 or (qn.QUOTES_OBTAINED =2 and qn.NUM_INDICATIVE_QUOTES = 0)) then 1        -- when        --  not ((i.INST_TYPE in ('HY BND', 'HY IBND', 'COV', 'SSA BND') and i.TRD_CURRENCY in ('USD', 'GBP', 'EUR')) --if none of these conditions are true then 3 quotes are required        --  or (i.INST_TYPE in ('IG BND', 'IG IBND') and i.TRD_CURRENCY = 'USD')           --these are all represneted as a group 'not' statement        --  or (i.INST_TYPE in ('ABS', 'ARM', 'CMBS', 'CMO', 'MBS') and i.BUY_SELL_FLAG = 'BUY'))        --  and qn.QUOTES_OBTAINED < 3 then 1        -- when        --  i.INST_TYPE in ('IRS', 'IFS') and qn.QUOTES_OBTAINED < 2 then 1        -- else 0        --end        else 0        end as QUOTE_EXCEPTION     into #qe_table     from #quote_num qn     left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE i on i.MULTI_FUND_ID=qn.MULTI_FUND_ID     left join VISTA_REPORTING.dbo.PLACEMENTS p on p.MULTI_FUND_ID=qn.MULTI_FUND_ID     left join (SELECT MULTI_FUND_ID, MAX(CONVERT(DATE, PULL_DATE)) AS PULL_DATE FROM VISTA_REPORTING.dbo.TRADES GROUP BY MULTI_FUND_ID) t ON t.MULTI_FUND_ID = qn.MULTI_FUND_ID     where i.DEALING_DESK='Fixed Income'          --select * from #qe_table where INST_TYPE in ('IRS', 'BASIS', 'ZCS', 'ASWP', 'IFS', 'CASWP', 'CCS','SWAP') order by PULL_DATE desc         -- Use #quote_exception to populate FINAL_STATUS_UPDATE_TABLE     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     select distinct      CONCAT(MULTI_FUND_ID,'_1') AS ID,      '1A2' AS STATUS,      NULL AS FINAL_UPDATED_TIME     into #temp_status_table     from #qe_table     where QUOTE_EXCEPTION = 1          MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET       T.ID=T.ID,       T.STATUS=T.STATUS,       T.DEALING_DESK = 'Fixed Income',       T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME,'Fixed Income');         --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      ex.MULTI_FUND_ID,      t.ORD_NUM AS TRD_ORD,      NULL AS PM_ORD,      'Quote Exception' AS Exception_Type,      CONCAT(ex.MULTI_FUND_ID,'_1') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'With Reviewer' AS Status,      NULL AS ClientExecID,      'Fixed Income' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      TRD_TRADER AS DEALER,      '1A2' AS STATUS_ID,      AUTH_TIME AS ORD_AUTH,      EXECUTION_TIME AS TRADE_EXEC     INTO #temp_audit     FROM #qe_table ex     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t     ON ex.MULTI_FUND_ID = t.MULTI_FUND_ID     LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o     ON t.ORD_NUM = trd_o.ORD_NUM     WHERE QUOTE_EXCEPTION = 1         MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);         --select * from #qe_table where MULTI_FUND_ID=519143         IF OBJECT_ID('VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI_TABLE', 'U') IS  NULL          SELECT DISTINCT     --trd.ORD_NUM,     t.MULTI_FUND_ID,     trd.DEALING_DESK,     case       when qe.QUOTES_OBTAINED is not NULL      then qe.QUOTES_OBTAINED      else 0     end as QUOTES_OBTAINED,     case      when qe.QUOTES_REQUESTED is not NULL      then qe.QUOTES_REQUESTED      else 0     end as QUOTES_REQUESTED,     qe.NUM_INDICATIVE_QUOTES,     --qe.INDICATIVE_QUOTES_ASK,     --qe.INDICATIVE_QUOTES_BID,     COALESCE(MAX(qe."3QR_EXCEPTION"), 0) as "3QR_EXCEPTION",     CASE      WHEN MAX(qe."3QR_EXCEPTION") = 1 THEN GETDATE() ELSE NULL --if exception flag is '1' create Timestamp     END AS "3QR_CREATETIME",     COALESCE(MAX(qe."3QO_EXCEPTION"), 0) as "3QO_EXCEPTION",     CASE      WHEN MAX(qe."3QO_EXCEPTION") = 1 THEN GETDATE() ELSE NULL --if exception flag is '1' create Timestamp     END AS "3QO_CREATETIME",     COALESCE(MAX(qe.QUOTE_EXCEPTION), 0) as QUOTE_EXCEPTION,     CASE      WHEN MAX(QUOTE_EXCEPTION) = 1 THEN GETDATE() ELSE NULL --if exception flag is '1' create Timestamp     END AS CREATETIME     INTO VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI_TABLE     FROM VISTA_REPORTING.dbo.TRADES t     left join #qe_table qe on t.MULTI_FUND_ID=qe.MULTI_FUND_ID     join VISTA_REPORTING.dbo.TRD_ORDERS trd on t.ORD_NUM=trd.ORD_NUM      where trd.DEALING_DESK = 'Fixed Income' --and t.PULL_DATE=@DATE_FILTER     GROUP BY       t.MULTI_FUND_ID,      trd.DEALING_DESK,      qe.QUOTES_OBTAINED,      qe.QUOTES_REQUESTED,      qe.NUM_INDICATIVE_QUOTES         ELSE         IF OBJECT_ID('tempdb..#temp_qe_table', 'U') IS NOT NULL DROP TABLE #temp_qe_table         SELECT DISTINCT     --trd.ORD_NUM,     t.MULTI_FUND_ID,     trd.DEALING_DESK,     case       when qe.QUOTES_OBTAINED is not NULL      then qe.QUOTES_OBTAINED      else 0     end as QUOTES_OBTAINED,     case      when qe.QUOTES_REQUESTED is not NULL      then qe.QUOTES_REQUESTED      else 0     end as QUOTES_REQUESTED,     qe.NUM_INDICATIVE_QUOTES,     --qe.INDICATIVE_QUOTES_ASK,     --qe.INDICATIVE_QUOTES_BID,     COALESCE(MAX(qe."3QR_EXCEPTION"), 0) as "3QR_EXCEPTION",     CASE      WHEN MAX(qe."3QR_EXCEPTION") = 1 THEN GETDATE() ELSE NULL --if exception flag is '1' create Timestamp     END AS "3QR_CREATETIME",     COALESCE(MAX(qe."3QO_EXCEPTION"), 0) as "3QO_EXCEPTION",     CASE      WHEN MAX(qe."3QO_EXCEPTION") = 1 THEN GETDATE() ELSE NULL --if exception flag is '1' create Timestamp     END AS "3QO_CREATETIME",     COALESCE(MAX(qe.QUOTE_EXCEPTION), 0) as QUOTE_EXCEPTION,     CASE      WHEN MAX(QUOTE_EXCEPTION) = 1 THEN GETDATE() ELSE NULL --if exception flag is '1' create Timestamp     END AS CREATETIME     INTO #temp_qe_table     FROM VISTA_REPORTING.dbo.TRADES t     left join #qe_table qe on t.MULTI_FUND_ID=qe.MULTI_FUND_ID     join VISTA_REPORTING.dbo.TRD_ORDERS trd on t.ORD_NUM=trd.ORD_NUM     where trd.DEALING_DESK = 'Fixed Income' --and t.PULL_DATE=@DATE_FILTER     GROUP BY       t.MULTI_FUND_ID,      trd.DEALING_DESK,      qe.QUOTES_OBTAINED,      qe.QUOTES_REQUESTED,      qe.NUM_INDICATIVE_QUOTES;        --SG54637         with deduplication as     (     select *,ROW_NUMBER() over (partition by multi_fund_id order by multi_fund_id,createtime) as RN     from #temp_qe_table     )     delete from deduplication where RN <> 1                --End of SG54637         MERGE VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_FI_TABLE AS T     USING #temp_qe_table AS S     ON (T.MULTI_FUND_ID = S.MULTI_FUND_ID)     WHEN MATCHED      THEN       UPDATE SET       T.DEALING_DESK = S.DEALING_DESK,       T.QUOTES_OBTAINED =  CASE WHEN S.[3QO_EXCEPTION] > T.[3QO_EXCEPTION] THEN S.QUOTES_OBTAINED ELSE T.QUOTES_OBTAINED END,       T.QUOTES_REQUESTED = CASE WHEN S.[3QR_EXCEPTION] > T.[3QR_EXCEPTION] THEN S.QUOTES_REQUESTED ELSE T.QUOTES_REQUESTED END,       T.[3QR_EXCEPTION] = CASE WHEN S.[3QR_EXCEPTION] > T.[3QR_EXCEPTION] THEN S.[3QR_EXCEPTION] ELSE T.[3QR_EXCEPTION] END,       T.[3QR_CREATETIME] = CASE WHEN S.[3QR_EXCEPTION] > T.[3QR_EXCEPTION] THEN S.[3QR_CREATETIME] ELSE T.[3QR_CREATETIME] END,       T.[3QO_EXCEPTION] = CASE WHEN S.[3QO_EXCEPTION] > T.[3QO_EXCEPTION] THEN S.[3QO_EXCEPTION] ELSE T.[3QO_EXCEPTION] END,       T.[3QO_CREATETIME] = CASE WHEN S.[3QO_EXCEPTION] > T.[3QO_EXCEPTION] THEN S.[3QO_CREATETIME] ELSE T.[3QO_CREATETIME] END,       T.NUM_INDICATIVE_QUOTES = CASE WHEN S.QUOTE_EXCEPTION > T.QUOTE_EXCEPTION THEN S.NUM_INDICATIVE_QUOTES ELSE T.NUM_INDICATIVE_QUOTES END,       T.QUOTE_EXCEPTION = CASE WHEN S.QUOTE_EXCEPTION > T.QUOTE_EXCEPTION THEN S.QUOTE_EXCEPTION ELSE T.QUOTE_EXCEPTION END,       T.CREATETIME = CASE WHEN S.QUOTE_EXCEPTION > T.QUOTE_EXCEPTION THEN S.CREATETIME ELSE T.CREATETIME END          WHEN NOT MATCHED       THEN INSERT (MULTI_FUND_ID, DEALING_DESK, QUOTES_OBTAINED,              QUOTES_REQUESTED, [3QR_EXCEPTION], [3QR_CREATETIME],           [3QO_EXCEPTION], [3QO_CREATETIME], NUM_INDICATIVE_QUOTES,          QUOTE_EXCEPTION, CREATETIME)         VALUES (S.MULTI_FUND_ID, S.DEALING_DESK, S.QUOTES_OBTAINED,              S.QUOTES_REQUESTED, S.[3QR_EXCEPTION], S.[3QR_CREATETIME],           S.[3QO_EXCEPTION], S.[3QO_CREATETIME], S.NUM_INDICATIVE_QUOTES,          S.QUOTE_EXCEPTION, S.CREATETIME);         IF OBJECT_ID('tempdb..#orders', 'U') IS NOT NULL DROP TABLE #orders     IF OBJECT_ID('tempdb..#multi_fund_ids', 'U') IS NOT NULL DROP TABLE #multi_fund_ids     IF OBJECT_ID('tempdb..#dist_ord_mf', 'U') IS NOT NULL DROP TABLE #dist_ord_mf     IF OBJECT_ID('tempdb..#quotes', 'U') IS NOT NULL DROP TABLE #quotes     IF OBJECT_ID('tempdb..#indicative_quotes', 'U') IS NOT NULL DROP TABLE #indicative_quotes     IF OBJECT_ID('tempdb..#quote_num', 'U') IS NOT NULL DROP TABLE #quote_num     IF OBJECT_ID('tempdb..#qe_table', 'U') IS NOT NULL DROP TABLE #qe_table     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     IF OBJECT_ID('tempdb..#temp_qe_table', 'U') IS NOT NULL DROP TABLE #temp_qe_table            END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_01_QUOTE_EXCEPTION_LL  CreateDate: 2025-06-26 18:24:39.260  ModifyDate: 2025-06-26 18:24:39.260  --- DEFINITION START ---  -- =============================================    -- Author:  <Chandarana, Sohini>    -- Create date: <04/23/2018>    -- Description:     -- <Count distinct quote providers per market execution.     -- Compare it to the min quote requirement based on     -- Asset Subtype. If Count of Distinct Quote Provider    -- less then Min Quote: Quote Exception = True    -- Stored procedure as appropriated from VG_01_QUOTE_EXCEPTION_FI>    -- =============================================        -- ***************VERSION CONTROL***************    -- 2018-07-11 WH: Update to business requirements: All transaction types are considered for exceptions (was previously just BUY trans types).        -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.    -- 2019-30-01 ER: Added in new EQUITY WARRANT Asset type.    -- *********************************************        CREATE PROCEDURE [dbo].[VG_01_QUOTE_EXCEPTION_LL]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         --DECLARE @DATE_FILTER AS DATE --Declare date filter to only select data from current pull date     --SET @DATE_FILTER = CONVERT(DATE, GETDATE())          IF OBJECT_ID('tempdb..#orders', 'U') IS NOT NULL DROP TABLE #orders     select distinct --create a table that is filtered to just show FI trades       ORD_NUM,       DEALING_DESK,       TRAN_TYPE--BUY_SELL_FLAG     into #orders     from VISTA_REPORTING.dbo.TRD_ORDERS     where DEALING_DESK='Leveraged Finance' --and PULL_DATE=@DATE_FILTER         IF OBJECT_ID('tempdb..#multi_fund_ids', 'U') IS NOT NULL DROP TABLE #multi_fund_ids     select distinct --using the filtered table created earlier extract relevant Trades      --o.ORD_NUM,      t.MULTI_FUND_ID,      o.TRAN_TYPE--o.BUY_SELL_FLAG     into #multi_fund_ids     from VISTA_REPORTING.dbo.TRADES t     join #orders o on o.ORD_NUM=t.ORD_NUM     where ISNULL(t.TRD_STATUS,'') != 'C'     --select * from #multi_fund_ids         IF OBJECT_ID('tempdb..#dist_ord_mf', 'U') IS NOT NULL DROP TABLE #dist_ord_mf         select distinct      --ORD_NUM,      MULTI_FUND_ID,      QUOTE_VALUE,      BROKER,      QUOTE_ORIGIN     into #dist_ord_mf     from VISTA_REPORTING.dbo.QUOTES                  IF OBJECT_ID('tempdb..#quotes', 'U') IS NOT NULL DROP TABLE #quotes     select distinct --create Quotes table        --q.ORD_NUM,       q.MULTI_FUND_ID,       --q.BROKER,       --q.QUOTE_TYPE,       --q.QUOTE_VALUE,       (SELECT COUNT(DISTINCT BROKER)         FROM #dist_ord_mf         WHERE (ISNULL(QUOTE_VALUE, 0) != 0 OR QUOTE_ORIGIN='TRADE')           AND MULTI_FUND_ID=q.MULTI_FUND_ID) AS QUOTES_OBTAINED, --Count distinct BROKER where QUOTE_VALUE is NOT NULL OR 0       --sum(case when (q.QUOTE_VALUE is null or q.quote_value = 0)  then 0 else 1 end) as QUOTES_OBTAINED, --Count quotes when Quote Value is valid       count(distinct BROKER) as QUOTES_REQUESTED --A quote is required for every MULTI_FUND_ID     into #quotes     from #dist_ord_mf q     join #multi_fund_ids o on o.MULTI_FUND_ID=q.MULTI_FUND_ID     group by         --q.ORD_NUM,     q.MULTI_FUND_ID     --q.BROKER,     --q.QUOTE_TYPE,     --q.QUOTE_VALUE         --select * from #quotes                  IF OBJECT_ID('tempdb..#quote_num', 'U') IS NOT NULL DROP TABLE #quote_num     select      --m.ORD_NUM,      m.MULTI_FUND_ID,      coalesce(q.QUOTES_OBTAINED, 0) AS QUOTES_OBTAINED,      coalesce(q.QUOTES_REQUESTED, 0) AS QUOTES_REQUESTED     into #quote_num     from #multi_fund_ids m     left join #quotes q on q.MULTI_FUND_ID=m.MULTI_FUND_ID     group by m.MULTI_FUND_ID, q.QUOTES_OBTAINED, q.QUOTES_REQUESTED         IF OBJECT_ID('tempdb..#qe_table', 'U') IS NOT NULL DROP TABLE #qe_table          select distinct      --qn.ORD_NUM,      qn.MULTI_FUND_ID,      i.INST_TYPE,      i.PRIMARY_MARKET,      i.TRD_CURRENCY,      qn.QUOTES_REQUESTED,      qn.QUOTES_OBTAINED,      --qn.INDICATIVE_QUOTES_ASK,      --qn.INDICATIVE_QUOTES_BID,        CASE       WHEN qn.QUOTES_REQUESTED < 3 THEN 1 ELSE 0      END AS "3QR_EXCEPTION",      CASE       WHEN qn.QUOTES_OBTAINED < 3 THEN 1 ELSE 0      END AS "3QO_EXCEPTION",      p.VENUE,      i.TRAN_TYPE,--i.BUY_SELL_FLAG,      case       when        i.INTERFUND_TRANSFER=0 and i.PRIMARY_MARKET=0 and (i.INST_TYPE in ('SYND LOAN','STAPLED EQUITIES', 'EQUITY WARRANT'))           and qn.QUOTES_OBTAINED < 3           then 1           else 0       end as QUOTE_EXCEPTION     into #qe_table     from #quote_num qn     left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE i on i.MULTI_FUND_ID=qn.MULTI_FUND_ID     left join VISTA_REPORTING.dbo.PLACEMENTS p on p.MULTI_FUND_ID=qn.MULTI_FUND_ID     where i.DEALING_DESK='Leveraged Finance'          --select * from #qe_table where MULTI_FUND_ID=519065         -- Use #quote_exception to populate FINAL_STATUS_UPDATE_TABLE     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     select distinct      CONCAT(MULTI_FUND_ID,'_1') AS ID,      '1A1' AS STATUS,      NULL AS FINAL_UPDATED_TIME     into #temp_status_table     from #qe_table     where QUOTE_EXCEPTION = 1          MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET       T.ID=T.ID,       T.STATUS=T.STATUS,       T.DEALING_DESK = 'Leveraged Finance',       T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'Leveraged Finance');         --select * from #qe_table where MULTI_FUND_ID=519143         --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      ex.MULTI_FUND_ID,      t.ORD_NUM AS TRD_ORD,      NULL AS PM_ORD,      'Quote Exception' AS Exception_Type,      CONCAT(ex.MULTI_FUND_ID,'_1') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'For Review' AS Status,      NULL AS ClientExecID,      'Leveraged Finance' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      TRD_TRADER AS DEALER,      '1A1' AS STATUS_ID,      AUTH_TIME AS ORD_AUTH,      EXECUTION_TIME AS TRADE_EXEC     INTO #temp_audit     FROM #qe_table ex     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t     ON ex.MULTI_FUND_ID = t.MULTI_FUND_ID     LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o     ON t.ORD_NUM = trd_o.ORD_NUM     WHERE QUOTE_EXCEPTION = 1         MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);             IF OBJECT_ID('VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_LL_TABLE', 'U') IS  NULL          SELECT DISTINCT     --trd.ORD_NUM,     t.MULTI_FUND_ID,     trd.DEALING_DESK,     case       when qe.QUOTES_OBTAINED is not NULL      then qe.QUOTES_OBTAINED      else 0     end as QUOTES_OBTAINED,     case      when qe.QUOTES_REQUESTED is not NULL      then qe.QUOTES_REQUESTED      else 0     end as QUOTES_REQUESTED,     coalesce(qe."3QR_EXCEPTION", 0) as "3QR_EXCEPTION",     CASE      WHEN qe."3QR_EXCEPTION" = 1 THEN GETDATE() ELSE NULL --if exception flag is '1' create Timestamp     END AS "3QR_CREATETIME",     coalesce(qe."3QO_EXCEPTION", 0) as "3QO_EXCEPTION",     CASE      WHEN qe."3QO_EXCEPTION" = 1 THEN GETDATE() ELSE NULL --if exception flag is '1' create Timestamp     END AS "3QO_CREATETIME",     coalesce(qe.QUOTE_EXCEPTION, 0) as QUOTE_EXCEPTION,     CASE      WHEN QUOTE_EXCEPTION = 1 THEN GETDATE() ELSE NULL --if exception flag is '1' create Timestamp     END AS CREATETIME     INTO VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_LL_TABLE     FROM VISTA_REPORTING.dbo.TRADES t     left join #qe_table qe on t.MULTI_FUND_ID=qe.MULTI_FUND_ID     join VISTA_REPORTING.dbo.TRD_ORDERS trd on t.ORD_NUM=trd.ORD_NUM      where trd.DEALING_DESK = 'Leveraged Finance' --and t.PULL_DATE=@DATE_FILTER         ELSE         IF OBJECT_ID('tempdb..#temp_qe_table', 'U') IS NOT NULL DROP TABLE #temp_qe_table         SELECT DISTINCT     --trd.ORD_NUM,     t.MULTI_FUND_ID,     trd.DEALING_DESK,     case       when qe.QUOTES_OBTAINED is not NULL      then qe.QUOTES_OBTAINED      else 0     end as QUOTES_OBTAINED,     case      when qe.QUOTES_REQUESTED is not NULL      then qe.QUOTES_REQUESTED      else 0     end as QUOTES_REQUESTED,     coalesce(MAX(qe."3QR_EXCEPTION"), 0) as "3QR_EXCEPTION",     CASE      WHEN MAX(qe."3QR_EXCEPTION") = 1 THEN GETDATE() ELSE NULL --if exception flag is '1' create Timestamp     END AS "3QR_CREATETIME",     coalesce(MAX(qe."3QO_EXCEPTION"), 0) as "3QO_EXCEPTION",     CASE      WHEN MAX(qe."3QO_EXCEPTION") = 1 THEN GETDATE() ELSE NULL --if exception flag is '1' create Timestamp     END AS "3QO_CREATETIME",     coalesce(MAX(qe.QUOTE_EXCEPTION), 0) as QUOTE_EXCEPTION,     CASE      WHEN MAX(QUOTE_EXCEPTION) = 1 THEN GETDATE() ELSE NULL --if exception flag is '1' create Timestamp     END AS CREATETIME     INTO #temp_qe_table     FROM VISTA_REPORTING.dbo.TRADES t     left join #qe_table qe on t.MULTI_FUND_ID=qe.MULTI_FUND_ID     join VISTA_REPORTING.dbo.TRD_ORDERS trd on t.ORD_NUM=trd.ORD_NUM     where trd.DEALING_DESK = 'Leveraged Finance' --and t.PULL_DATE=@DATE_FILTER     GROUP BY      t.MULTI_FUND_ID,      trd.DEALING_DESK,      qe.QUOTES_OBTAINED,      qe.QUOTES_REQUESTED         MERGE VISTA_STAGING.dbo.VG_01_QUOTE_EXCEPTION_LL_TABLE AS T     USING #temp_qe_table AS S     ON (T.MULTI_FUND_ID = S.MULTI_FUND_ID)     WHEN MATCHED      THEN       UPDATE SET       T.DEALING_DESK = S.DEALING_DESK,       T.QUOTES_OBTAINED =  CASE WHEN S.[3QO_EXCEPTION] > T.[3QO_EXCEPTION] THEN S.QUOTES_OBTAINED ELSE T.QUOTES_OBTAINED END,       T.QUOTES_REQUESTED = CASE WHEN S.[3QR_EXCEPTION] > T.[3QR_EXCEPTION] THEN S.QUOTES_REQUESTED ELSE T.QUOTES_REQUESTED END,       T.[3QR_EXCEPTION] = CASE WHEN S.[3QR_EXCEPTION] > T.[3QR_EXCEPTION] THEN S.[3QR_EXCEPTION] ELSE T.[3QR_EXCEPTION] END,       T.[3QR_CREATETIME] = CASE WHEN S.[3QR_EXCEPTION] > T.[3QR_EXCEPTION] THEN S.[3QR_CREATETIME] ELSE T.[3QR_CREATETIME] END,       T.[3QO_EXCEPTION] = CASE WHEN S.[3QO_EXCEPTION] > T.[3QO_EXCEPTION] THEN S.[3QO_EXCEPTION] ELSE T.[3QO_EXCEPTION] END,       T.[3QO_CREATETIME] = CASE WHEN S.[3QO_EXCEPTION] > T.[3QO_EXCEPTION] THEN S.[3QO_CREATETIME] ELSE T.[3QO_CREATETIME] END,       T.QUOTE_EXCEPTION = CASE WHEN S.QUOTE_EXCEPTION > T.QUOTE_EXCEPTION THEN S.QUOTE_EXCEPTION ELSE T.QUOTE_EXCEPTION END,       T.CREATETIME = CASE WHEN S.QUOTE_EXCEPTION > T.QUOTE_EXCEPTION THEN S.CREATETIME ELSE T.CREATETIME END          WHEN NOT MATCHED       THEN INSERT (MULTI_FUND_ID, DEALING_DESK, QUOTES_OBTAINED,              QUOTES_REQUESTED, [3QR_EXCEPTION], [3QR_CREATETIME],           [3QO_EXCEPTION], [3QO_CREATETIME],          QUOTE_EXCEPTION, CREATETIME)         VALUES (S.MULTI_FUND_ID, S.DEALING_DESK, S.QUOTES_OBTAINED,              S.QUOTES_REQUESTED, S.[3QR_EXCEPTION], S.[3QR_CREATETIME],           S.[3QO_EXCEPTION], S.[3QO_CREATETIME],          S.QUOTE_EXCEPTION, S.CREATETIME);        IF OBJECT_ID('tempdb..#orders', 'U') IS NOT NULL DROP TABLE #orders    IF OBJECT_ID('tempdb..#multi_fund_ids', 'U') IS NOT NULL DROP TABLE #multi_fund_ids    IF OBJECT_ID('tempdb..#dist_ord_mf', 'U') IS NOT NULL DROP TABLE #dist_ord_mf    IF OBJECT_ID('tempdb..#quotes', 'U') IS NOT NULL DROP TABLE #quotes    IF OBJECT_ID('tempdb..#quote_num', 'U') IS NOT NULL DROP TABLE #quote_num    IF OBJECT_ID('tempdb..#qe_table', 'U') IS NOT NULL DROP TABLE #qe_table    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    IF OBJECT_ID('tempdb..#temp_qe_table', 'U') IS NOT NULL DROP TABLE #temp_qe_table    END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_06_NEW_ISSUE_ORDER_FLIPPING_EQ  CreateDate: 2025-06-26 18:24:42.040  ModifyDate: 2025-06-26 18:24:42.040  --- DEFINITION START ---  -- =============================================    -- Author:  <Devereux, Alan>    -- Create date: <10/10/2017>    -- Description:     -- <Flags all sales of primary market buys within a 30    -- day period as exceptions.>        -- =============================================            -- ***************VERSION CONTROL***************    -- 11/12/2017 - DDC: Changes made to ensure that script     -- only ever updates existing records always ensuring     -- the highest level exception is reported and     -- inserts new ones if no exception has been raised.        -- 04/01/2018 - DDC: Amendment made to only run  exception    -- calculations on the data for the day the exception is     -- being pulled        -- 2018-03-21 - WH: Removed reference to BUY_SELL_FLAG - used TRAN_TYPE instead        -- *********************************************            CREATE PROCEDURE [dbo].[VG_06_NEW_ISSUE_ORDER_FLIPPING_EQ]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         --DECLARE @DATE_FILTER AS DATE --Declare date filter to only select data from current pull date     --SET @DATE_FILTER = CONVERT(DATE, GETDATE())            -- Insert statements for procedure here     IF OBJECT_ID('tempdb..#primary_buy') IS NOT NULL drop table #primary_buy     select distinct        o.ORD_NUM,        t.FUND,        o.CUSIP,       o.STATUS,       t.EXECUTION_TYPE,       t.EXECUTION_TIME,       o.TRAN_TYPE,--o.BUY_SELL_FLAG,       o.AUTH_TIME     into #primary_buy     from VISTA_REPORTING.dbo.TRADES t     join VISTA_REPORTING.dbo.TRD_ORDERS o on o.ORD_NUM=t.ORD_NUM     where       t.EXECUTION_TYPE in ('L','I')       and o.DEALING_DESK = 'Equity'       and o.TRAN_TYPE = 'BUY' --o.BUY_SELL_FLAG = 'BUY'      --and t.PULL_DATE=@DATE_FILTER             --select * from #primary_buy         IF OBJECT_ID('tempdb..#primary_sell') IS NOT NULL drop table #primary_sell     select distinct        o.ORD_NUM,       t.FUND,        o.CUSIP,       o.STATUS,       t.EXECUTION_TYPE,       t.EXECUTION_TIME,       o.TRAN_TYPE,--o.BUY_SELL_FLAG,       datediff(day, p.AUTH_TIME, o.AUTH_TIME) as DATE_DIFF     into #primary_sell     from #primary_buy p      join VISTA_REPORTING.dbo.TRADES t on p.FUND=t.FUND      join VISTA_REPORTING.dbo.TRD_ORDERS o on p.CUSIP=o.CUSIP     where o.DEALING_DESK = 'Equity' and o.TRAN_TYPE = 'SELL'--o.BUY_SELL_FLAG = 'SELL'         --select * from #primary_sell         IF OBJECT_ID('VG_06_NEW_ISSUE_ORDER_FLIPPING_EQ_TABLE') IS NULL           select distinct      oc.PM_ORD,      p.DEALING_DESK,      case       when s.DATE_DIFF < 30 then 1       else 0 end as NEW_ISSUE_ORDER_FLIPPING_EXCEPTION,      case       when s.DATE_DIFF < 30 then GETDATE() else NULL end--if exception has been raised create TIMESTAMP       as CREATETIME     into VISTA_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_EQ_TABLE     from VISTA_REPORTING.dbo.TRD_ORDERS p     join VISTA_REPORTING.dbo.ORDERS_CROSS oc on p.ORD_NUM=oc.TRD_ORD     left join #primary_sell s on s.ORD_NUM=oc.TRD_ORD     where       p.DEALING_DESK='Equity'      --and p.PULL_DATE=@DATE_FILTER         ELSE          IF OBJECT_ID('tempdb..#temp_of_table') IS NOT NULL drop table #temp_of_table         select distinct      oc.PM_ORD,      p.DEALING_DESK,      case       when s.DATE_DIFF < 30 then 1       else 0 end as NEW_ISSUE_ORDER_FLIPPING_EXCEPTION,      case       when s.DATE_DIFF < 30 then GETDATE() else NULL end--if exception has been raised create TIMESTAMP       as CREATETIME     into #temp_of_table     from VISTA_REPORTING.dbo.TRD_ORDERS p     join VISTA_REPORTING.dbo.ORDERS_CROSS oc on p.ORD_NUM=oc.TRD_ORD     left join #primary_sell s on s.ORD_NUM=oc.TRD_ORD     where       p.DEALING_DESK='Equity'      --and p.PULL_DATE=@DATE_FILTER         MERGE VISTA_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_EQ_TABLE AS T     USING #temp_of_table AS S     ON (T.PM_ORD=S.PM_ORD)     WHEN MATCHED      THEN       UPDATE SET        T.DEALING_DESK = S.DEALING_DESK,       T.NEW_ISSUE_ORDER_FLIPPING_EXCEPTION = CASE WHEN S.NEW_ISSUE_ORDER_FLIPPING_EXCEPTION > T.NEW_ISSUE_ORDER_FLIPPING_EXCEPTION                    THEN S.NEW_ISSUE_ORDER_FLIPPING_EXCEPTION ELSE T.NEW_ISSUE_ORDER_FLIPPING_EXCEPTION END,       T.CREATETIME = CASE WHEN S.NEW_ISSUE_ORDER_FLIPPING_EXCEPTION > T.NEW_ISSUE_ORDER_FLIPPING_EXCEPTION              THEN S.CREATETIME ELSE T.CREATETIME END     WHEN NOT MATCHED       THEN INSERT (PM_ORD, DEALING_DESK, NEW_ISSUE_ORDER_FLIPPING_EXCEPTION, CREATETIME)        VALUES (S.PM_ORD, S.DEALING_DESK, S.NEW_ISSUE_ORDER_FLIPPING_EXCEPTION, S.CREATETIME);             IF OBJECT_ID('tempdb..#primary_buy') IS NOT NULL drop table #primary_buy     IF OBJECT_ID('tempdb..#primary_sell') IS NOT NULL drop table #primary_sell     IF OBJECT_ID('tempdb..#temp_of_table') IS NOT NULL drop table #temp_of_table            END                --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_06_NEW_ISSUE_ORDER_FLIPPING_FI  CreateDate: 2025-06-26 18:24:28.547  ModifyDate: 2025-06-26 18:24:28.547  --- DEFINITION START ---  -- =============================================    -- Author:  <Devereux, Alan>    -- Create date: <10/10/2017>    -- Description:     -- <Flags all sales of primary market buys within a 30    -- day period as exceptions.>        -- =============================================        -- ***************VERSION CONTROL***************    -- 11/12/2017 - DDC: Changes made to ensure that script     -- only ever updates existing records always ensuring     -- the highest level exception is reported and     -- inserts new ones if no exception has been raised.        -- 04/01/2018 - DDC: Amendment made to only run  exception    -- calculations on the data for the day the exception is     -- being pulled        -- 2018-03-21 - WH: Removed reference to BUY_SELL_FLAG -     -- used TRAN_TYPE instead        -- 03/04/2018 - DDC: Logic amended to match the FOLLOW_ON_ACTIVITY    -- business requirements. Previous code is commented out at the     -- bottom.        -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.        -- *********************************************    CREATE PROCEDURE [dbo].[VG_06_NEW_ISSUE_ORDER_FLIPPING_FI]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         --DECLARE @DATE_FILTER AS DATE --Declare date filter to only select data from current pull date     --SET @DATE_FILTER = CONVERT(DATE, GETDATE())            -- Insert statements for procedure here           IF OBJECT_ID('tempdb..#temp_follow_on_buy', 'U') IS NOT NULL DROP TABLE #temp_follow_on_buy         SELECT DISTINCT  -- Create a table with all 'BUY' TRAN_TYPE      t.MULTI_FUND_ID,      t.CLIENT_EXECUTION_NUM,      t.TRAN_TYPE,      tr.CUSIP,      t.ISIN,      t.EXECUTION_TIME,      t.FUND     INTO #temp_follow_on_buy     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS tr ON tr.ORD_NUM=t.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.PLACEMENTS pl ON pl.PLACEMENT_NUM=t.PLACEMENT_NUM     WHERE       pr.PRIMARY_MARKET=1 AND       tr.DEALING_DESK = 'Fixed Income' AND       t.FinalFlag=1             IF OBJECT_ID('tempdb..#temp_follow_on_sell', 'U') IS NOT NULL DROP TABLE #temp_follow_on_sell         SELECT DISTINCT      t.MULTI_FUND_ID,      t.CLIENT_EXECUTION_NUM,      t.TRAN_TYPE,      tr.CUSIP,      t.ISIN,      t.EXECUTION_TIME,      t.FUND     INTO #temp_follow_on_sell     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS tr ON tr.ORD_NUM=t.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.PLACEMENTS pl ON pl.PLACEMENT_NUM=t.PLACEMENT_NUM     WHERE       tr.TRAN_TYPE='SELL' AND       --tr.DEALING_DESK IN ('Fixed Income','Leveraged Finance') AND -- 20180411 WH: Commented out as we only consider if the Primary Market transaction was on the FI desk of the LL desk. Need confirmation from the business on this.      t.FinalFlag=1      AND ISNULL(t.TRD_STATUS,'') <> 'C'          IF OBJECT_ID('VISTA_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_FI_TABLE', 'U') IS NULL          SELECT DISTINCT      t.CLIENT_EXECUTION_NUM,      tr.DEALING_DESK,      CASE       WHEN ni.CLIENT_EXECUTION_NUM IS NULL THEN 0       ELSE 1      END AS NEW_ORDER_FLIPPING_EXCEPTION,      CASE       WHEN ni.CLIENT_EXECUTION_NUM IS NULL THEN NULL       ELSE GETDATE()      END AS NEW_ORDER_FLIPPING_EXCEPTION_CREATETIME     INTO VISTA_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_FI_TABLE     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS tr ON tr.ORD_NUM=t.ORD_NUM     LEFT JOIN (SELECT tfs.MULTI_FUND_ID,tfs.CLIENT_EXECUTION_NUM         FROM #temp_follow_on_buy tfb         JOIN #temp_follow_on_sell tfs ON tfs.CUSIP=tfb.CUSIP                AND tfs.FUND=tfb.FUND                AND tfs.EXECUTION_TIME BETWEEN tfb.EXECUTION_TIME AND DATEADD(DAY, 30, tfb.EXECUTION_TIME)) ni ON ni.CLIENT_EXECUTION_NUM=t.CLIENT_EXECUTION_NUM     WHERE tr.DEALING_DESK = 'Fixed Income'         ELSE         IF OBJECT_ID('tempdb..#temp_of_table', 'U') IS NOT NULL drop table #temp_of_table         SELECT DISTINCT      t.CLIENT_EXECUTION_NUM,      tr.DEALING_DESK,      CASE       WHEN ni.CLIENT_EXECUTION_NUM IS NULL THEN 0       ELSE 1      END AS NEW_ORDER_FLIPPING_EXCEPTION,      CASE       WHEN ni.CLIENT_EXECUTION_NUM IS NULL THEN NULL       ELSE GETDATE()      END AS NEW_ORDER_FLIPPING_EXCEPTION_CREATETIME     INTO #temp_of_table     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS tr ON tr.ORD_NUM=t.ORD_NUM     LEFT JOIN (SELECT tfs.MULTI_FUND_ID, tfs.CLIENT_EXECUTION_NUM         FROM #temp_follow_on_buy tfb         JOIN #temp_follow_on_sell tfs ON tfs.CUSIP=tfb.CUSIP                AND tfs.FUND=tfb.FUND                AND tfs.EXECUTION_TIME BETWEEN tfb.EXECUTION_TIME AND DATEADD(DAY, 30, tfb.EXECUTION_TIME)) ni ON ni.CLIENT_EXECUTION_NUM=t.CLIENT_EXECUTION_NUM     WHERE tr.DEALING_DESK = 'Fixed Income'     --SELECT CLIENT_EXECUTION_NUM, COUNT(*) FROM #temp_of_table GROUP BY CLIENT_EXECUTION_NUM ORDER BY 2 DESC         IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     select distinct      CONCAT(CLIENT_EXECUTION_NUM,'_6') AS ID,      '1A1' AS STATUS,      NULL AS FINAL_UPDATED_TIME     into #temp_status_table     from #temp_of_table     where NEW_ORDER_FLIPPING_EXCEPTION != 0          MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET       T.ID=T.ID,       T.STATUS=T.STATUS,       T.DEALING_DESK = 'Fixed Income',       T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME,'Fixed Income');         --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      t.MULTI_FUND_ID,      t.ORD_NUM AS TRD_ORD,      NULL AS PM_ORD,      'Follow on Activity' AS Exception_Type,      CONCAT(ex.CLIENT_EXECUTION_NUM,'_6') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'For Review' AS Status,      ex.CLIENT_EXECUTION_NUM AS ClientExecID,      'Fixed Income' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      TRD_TRADER AS DEALER,      '1A1' AS STATUS_ID,      AUTH_TIME AS ORD_AUTH,      EXECUTION_TIME AS TRADE_EXEC     INTO #temp_audit     FROM #temp_of_table ex     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, CLIENT_EXECUTION_NUM, EXECUTION_TIME, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t     ON ex.CLIENT_EXECUTION_NUM = t.CLIENT_EXECUTION_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o     ON t.ORD_NUM = trd_o.ORD_NUM     WHERE NEW_ORDER_FLIPPING_EXCEPTION != 0         MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);                   MERGE VISTA_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_FI_TABLE AS T     USING #temp_of_table AS S     ON (T.CLIENT_EXECUTION_NUM=S.CLIENT_EXECUTION_NUM)     WHEN MATCHED      THEN       UPDATE SET         T.DEALING_DESK = S.DEALING_DESK,       T.NEW_ORDER_FLIPPING_EXCEPTION = CASE WHEN S.NEW_ORDER_FLIPPING_EXCEPTION > T.NEW_ORDER_FLIPPING_EXCEPTION                    THEN S.NEW_ORDER_FLIPPING_EXCEPTION ELSE T.NEW_ORDER_FLIPPING_EXCEPTION END,       T.NEW_ORDER_FLIPPING_EXCEPTION_CREATETIME = CASE WHEN S.NEW_ORDER_FLIPPING_EXCEPTION > T.NEW_ORDER_FLIPPING_EXCEPTION              THEN S.NEW_ORDER_FLIPPING_EXCEPTION_CREATETIME ELSE T.NEW_ORDER_FLIPPING_EXCEPTION_CREATETIME END     WHEN NOT MATCHED       THEN INSERT (CLIENT_EXECUTION_NUM, DEALING_DESK, NEW_ORDER_FLIPPING_EXCEPTION, NEW_ORDER_FLIPPING_EXCEPTION_CREATETIME)        VALUES (S.CLIENT_EXECUTION_NUM, DEALING_DESK, S.NEW_ORDER_FLIPPING_EXCEPTION, S.NEW_ORDER_FLIPPING_EXCEPTION_CREATETIME);             --IF OBJECT_ID('tempdb..#primary_buy') IS NOT NULL drop table #primary_buy     --select distinct      --  o.ORD_NUM,      --  t.FUND,      --  --o.CUSIP,     --  t.ISIN,     --  o.STATUS,     --  t.EXECUTION_TYPE,     --  t.EXECUTION_TIME,     --  o.TRAN_TYPE,     --  --o.BUY_SELL_FLAG,     --  o.AUTH_TIME     --into #primary_buy     --from VISTA_REPORTING.dbo.TRADES t     --join VISTA_REPORTING.dbo.TRD_ORDERS o on o.ORD_NUM=t.ORD_NUM     --left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p on p.MULTI_FUND_ID=t.MULTI_FUND_ID     --where      -- p.PRIMARY_MARKET = 1      -- and o.DEALING_DESK = 'Fixed Income'      -- and t.ISIN is not NULL          --and o.BUY_SELL_FLAG = 'BUY'      --and t.PULL_DATE=@DATE_FILTER         --select * from #primary_buy         --IF OBJECT_ID('tempdb..#primary_sell') IS NOT NULL drop table #primary_sell     --select distinct      --  o.ORD_NUM,     --  t.FUND,      --  --o.CUSIP,     --  t.ISIN,     --  o.STATUS,     --  t.EXECUTION_TYPE,     --  t.EXECUTION_TIME,     --  o.TRAN_TYPE,     --  --o.BUY_SELL_FLAG,     --  datediff(day, p.AUTH_TIME, o.AUTH_TIME) as DATE_DIFF     --into #primary_sell     --from #primary_buy p      --join VISTA_REPORTING.dbo.TRADES t on p.FUND=t.FUND AND p.ISIN=t.ISIN     --join VISTA_REPORTING.dbo.TRD_ORDERS o on p.ORD_NUM=o.ORD_NUM     --where o.DEALING_DESK = 'Fixed Income' and o.TRAN_TYPE = 'SELL'--o.BUY_SELL_FLAG = 'SELL'         --select * from #primary_sell         --IF OBJECT_ID('VG_06_NEW_ISSUE_ORDER_FLIPPING_FI_TABLE') IS NULL      --select distinct     -- oc.PM_ORD,     -- p.DEALING_DESK,     -- case     --  when s.DATE_DIFF < 30 then 1     --  else 0 end as NEW_ISSUE_ORDER_FLIPPING_EXCEPTION,     -- case     --  when s.DATE_DIFF < 30 then GETDATE() else NULL end--if exception has been raised create TIMESTAMP     --  as CREATETIME     --into VISTA_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_FI_TABLE     --from VISTA_REPORTING.dbo.TRD_ORDERS p     --join VISTA_REPORTING.dbo.ORDERS_CROSS oc on p.ORD_NUM=oc.TRD_ORD     --left join #primary_sell s on s.ORD_NUM=oc.TRD_ORD     --where      -- p.DEALING_DESK='Fixed Income'      --and p.PULL_DATE=@DATE_FILTER         --ELSE          --IF OBJECT_ID('tempdb..#temp_of_table') IS NOT NULL drop table #temp_of_table         --select distinct     -- oc.PM_ORD,     -- p.DEALING_DESK,     -- case     --  when s.DATE_DIFF < 30 then 1     --  else 0 end as NEW_ISSUE_ORDER_FLIPPING_EXCEPTION,     -- case     --  when s.DATE_DIFF < 30 then GETDATE() else NULL end--if exception has been raised create TIMESTAMP     --  as CREATETIME     --into #temp_of_table     --from VISTA_REPORTING.dbo.TRD_ORDERS p     --join VISTA_REPORTING.dbo.ORDERS_CROSS oc on p.ORD_NUM=oc.TRD_ORD     --left join #primary_sell s on s.ORD_NUM=oc.TRD_ORD     --where      -- p.DEALING_DESK='Fixed Income'     -- --and p.PULL_DATE=@DATE_FILTER         --MERGE VISTA_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_FI_TABLE AS T     --USING #temp_of_table AS S     --ON (T.PM_ORD=S.PM_ORD)     --WHEN MATCHED     -- THEN      -- UPDATE SET       --  T.DEALING_DESK = S.DEALING_DESK,     --  T.NEW_ISSUE_ORDER_FLIPPING_EXCEPTION = CASE WHEN S.NEW_ISSUE_ORDER_FLIPPING_EXCEPTION > T.NEW_ISSUE_ORDER_FLIPPING_EXCEPTION      --              THEN S.NEW_ISSUE_ORDER_FLIPPING_EXCEPTION ELSE T.NEW_ISSUE_ORDER_FLIPPING_EXCEPTION END,     --  T.CREATETIME = CASE WHEN S.NEW_ISSUE_ORDER_FLIPPING_EXCEPTION > T.NEW_ISSUE_ORDER_FLIPPING_EXCEPTION      --        THEN S.CREATETIME ELSE T.CREATETIME END     --WHEN NOT MATCHED      -- THEN INSERT (PM_ORD, DEALING_DESK, NEW_ISSUE_ORDER_FLIPPING_EXCEPTION, CREATETIME)     --   VALUES (S.PM_ORD, DEALING_DESK, S.NEW_ISSUE_ORDER_FLIPPING_EXCEPTION, S.CREATETIME);         IF OBJECT_ID('tempdb..#temp_follow_on_buy', 'U') IS NOT NULL DROP TABLE #temp_follow_on_buy     IF OBJECT_ID('tempdb..#temp_follow_on_sell', 'U') IS NOT NULL DROP TABLE #temp_follow_on_sell     IF OBJECT_ID('tempdb..#temp_of_table', 'U') IS NOT NULL drop table #temp_of_table     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table            END                --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_06_NEW_ISSUE_ORDER_FLIPPING_LL  CreateDate: 2025-06-26 18:24:12.580  ModifyDate: 2025-06-26 18:24:12.580  --- DEFINITION START ---  -- =============================================    -- Author:  <Chandarana, Sohini>    -- Create date: <04/23/2018>    -- Description:     -- <Flags all sales of primary market buys within a 30    -- day period as exceptions.    -- Stored Procedure as appropriated from VG_06_NEW_ISSUE_ORDER_FLIPPING_FI>    -- =============================================        -- ***************VERSION CONTROL***************    -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.    -- *********************************************    CREATE PROCEDURE [dbo].[VG_06_NEW_ISSUE_ORDER_FLIPPING_LL]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         --DECLARE @DATE_FILTER AS DATE --Declare date filter to only select data from current pull date     --SET @DATE_FILTER = CONVERT(DATE, GETDATE())            -- Insert statements for procedure here           IF OBJECT_ID('tempdb..#temp_follow_on_buy', 'U') IS NOT NULL DROP TABLE #temp_follow_on_buy         SELECT DISTINCT  -- Create a table with all 'BUY' TRAN_TYPE      t.MULTI_FUND_ID,      t.CLIENT_EXECUTION_NUM,      t.TRAN_TYPE,      tr.CUSIP,      t.ISIN,      t.EXECUTION_TIME,      t.FUND     INTO #temp_follow_on_buy     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS tr ON tr.ORD_NUM=t.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.PLACEMENTS pl ON pl.PLACEMENT_NUM=t.PLACEMENT_NUM     WHERE       pr.PRIMARY_MARKET=1 AND       tr.DEALING_DESK = 'Leveraged Finance' AND       t.FinalFlag=1         IF OBJECT_ID('tempdb..#temp_follow_on_sell', 'U') IS NOT NULL DROP TABLE #temp_follow_on_sell         SELECT DISTINCT      t.MULTI_FUND_ID,      t.CLIENT_EXECUTION_NUM,      t.TRAN_TYPE,      tr.CUSIP,      t.ISIN,      t.EXECUTION_TIME,      t.FUND     INTO #temp_follow_on_sell     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS tr ON tr.ORD_NUM=t.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.PLACEMENTS pl ON pl.PLACEMENT_NUM=t.PLACEMENT_NUM     WHERE       tr.TRAN_TYPE='SELL'      AND t.FinalFlag=1      AND ISNULL(t.TRD_STATUS,'') <> 'C'          IF OBJECT_ID('VISTA_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_LL_TABLE', 'U') IS NULL          SELECT DISTINCT      t.CLIENT_EXECUTION_NUM,      tr.DEALING_DESK,      CASE       WHEN ni.CLIENT_EXECUTION_NUM IS NULL THEN 0       ELSE 1      END AS NEW_ORDER_FLIPPING_EXCEPTION,      CASE       WHEN ni.CLIENT_EXECUTION_NUM IS NULL THEN NULL       ELSE GETDATE()      END AS NEW_ORDER_FLIPPING_EXCEPTION_CREATETIME     INTO VISTA_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_LL_TABLE     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS tr ON tr.ORD_NUM=t.ORD_NUM     LEFT JOIN (SELECT tfs.MULTI_FUND_ID,tfs.CLIENT_EXECUTION_NUM         FROM #temp_follow_on_buy tfb         JOIN #temp_follow_on_sell tfs ON tfs.CUSIP=tfb.CUSIP                AND tfs.FUND=tfb.FUND                AND tfs.EXECUTION_TIME BETWEEN tfb.EXECUTION_TIME AND DATEADD(DAY, 30, tfb.EXECUTION_TIME)) ni ON ni.CLIENT_EXECUTION_NUM=t.CLIENT_EXECUTION_NUM     WHERE tr.DEALING_DESK = 'Leveraged Finance'         ELSE         IF OBJECT_ID('tempdb..#temp_of_table', 'U') IS NOT NULL drop table #temp_of_table         SELECT DISTINCT      t.CLIENT_EXECUTION_NUM,      tr.DEALING_DESK,      CASE       WHEN ni.CLIENT_EXECUTION_NUM IS NULL THEN 0       ELSE 1      END AS NEW_ORDER_FLIPPING_EXCEPTION,      CASE       WHEN ni.CLIENT_EXECUTION_NUM IS NULL THEN NULL       ELSE GETDATE()      END AS NEW_ORDER_FLIPPING_EXCEPTION_CREATETIME     INTO #temp_of_table     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS tr ON tr.ORD_NUM=t.ORD_NUM     LEFT JOIN (SELECT tfs.MULTI_FUND_ID, tfs.CLIENT_EXECUTION_NUM         FROM #temp_follow_on_buy tfb         JOIN #temp_follow_on_sell tfs ON tfs.CUSIP=tfb.CUSIP                AND tfs.FUND=tfb.FUND                AND tfs.EXECUTION_TIME BETWEEN tfb.EXECUTION_TIME AND DATEADD(DAY, 30, tfb.EXECUTION_TIME)) ni ON ni.CLIENT_EXECUTION_NUM=t.CLIENT_EXECUTION_NUM     WHERE tr.DEALING_DESK = 'Leveraged Finance'          --SELECT CLIENT_EXECUTION_NUM, COUNT(*) FROM #temp_of_table GROUP BY CLIENT_EXECUTION_NUM ORDER BY 2 DESC         IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     select distinct      CONCAT(CLIENT_EXECUTION_NUM,'_6') AS ID,      '1A1' AS STATUS,      NULL AS FINAL_UPDATED_TIME     into #temp_status_table     from #temp_of_table     where NEW_ORDER_FLIPPING_EXCEPTION != 0          MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET       T.ID=T.ID,       T.STATUS=T.STATUS,       T.DEALING_DESK = 'Leveraged Finance',       T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'Leveraged Finance');         --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      t.MULTI_FUND_ID,      t.ORD_NUM AS TRD_ORD,      NULL AS PM_ORD,      'Follow on Activity' AS Exception_Type,      CONCAT(ex.CLIENT_EXECUTION_NUM,'_6') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'For Review' AS Status,      ex.CLIENT_EXECUTION_NUM AS ClientExecID,      'Leveraged Finance' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      TRD_TRADER AS DEALER,      '1A1' AS STATUS_ID,      AUTH_TIME AS ORD_AUTH,      EXECUTION_TIME AS TRADE_EXEC     INTO #temp_audit     FROM #temp_of_table ex     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, CLIENT_EXECUTION_NUM, EXECUTION_TIME, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t     ON ex.CLIENT_EXECUTION_NUM = t.CLIENT_EXECUTION_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o     ON t.ORD_NUM = trd_o.ORD_NUM     WHERE NEW_ORDER_FLIPPING_EXCEPTION != 0         MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);              MERGE VISTA_STAGING.dbo.VG_06_NEW_ISSUE_ORDER_FLIPPING_LL_TABLE AS T     USING #temp_of_table AS S     ON (T.CLIENT_EXECUTION_NUM=S.CLIENT_EXECUTION_NUM)     WHEN MATCHED      THEN       UPDATE SET         T.DEALING_DESK = S.DEALING_DESK,       T.NEW_ORDER_FLIPPING_EXCEPTION = CASE WHEN S.NEW_ORDER_FLIPPING_EXCEPTION > T.NEW_ORDER_FLIPPING_EXCEPTION                    THEN S.NEW_ORDER_FLIPPING_EXCEPTION ELSE T.NEW_ORDER_FLIPPING_EXCEPTION END,       T.NEW_ORDER_FLIPPING_EXCEPTION_CREATETIME = CASE WHEN S.NEW_ORDER_FLIPPING_EXCEPTION > T.NEW_ORDER_FLIPPING_EXCEPTION              THEN S.NEW_ORDER_FLIPPING_EXCEPTION_CREATETIME ELSE T.NEW_ORDER_FLIPPING_EXCEPTION_CREATETIME END     WHEN NOT MATCHED       THEN INSERT (CLIENT_EXECUTION_NUM, DEALING_DESK, NEW_ORDER_FLIPPING_EXCEPTION, NEW_ORDER_FLIPPING_EXCEPTION_CREATETIME)        VALUES (S.CLIENT_EXECUTION_NUM, DEALING_DESK, S.NEW_ORDER_FLIPPING_EXCEPTION, S.NEW_ORDER_FLIPPING_EXCEPTION_CREATETIME);             IF OBJECT_ID('tempdb..#temp_follow_on_buy', 'U') IS NOT NULL DROP TABLE #temp_follow_on_buy     IF OBJECT_ID('tempdb..#temp_follow_on_sell', 'U') IS NOT NULL DROP TABLE #temp_follow_on_sell     IF OBJECT_ID('tempdb..#temp_of_table', 'U') IS NOT NULL drop table #temp_of_table     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table        END                --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_07_NON_WINNING_QUOTE_DMG  CreateDate: 2025-06-26 18:24:02.800  ModifyDate: 2025-06-26 18:24:02.800  --- DEFINITION START ---  -- =============================================    -- Author:  <Samad, Mehreen>    -- Create date: <29/03/2019>    -- Description:     -- <Looking at trades where the dealer has traded     -- at a level objectively inferior to any other     -- quote associated to the trade, considering quote     -- basis (price/spread/yield) and mechanics of     -- instrument, for all NON-CANCELLED trades     -- executed on T. (Execution Time = TODAY) >    -- =============================================        -- ***************VERSION CONTROL***************    -- 2019-05-16 - MS: Added in PM Order Number in    --     Audit table.    -- *********************************************        --13/12/2024 - Matej Miter for :    --INC0104838 - Changed the logic how we merge into our audit table and stg table to prevent duplications happened due to getting Nulls across Ord num column.        CREATE PROCEDURE [dbo].[VG_07_NON_WINNING_QUOTE_DMG]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        --Calculate the quote counterparties associated to the min(abs(quote value))    IF OBJECT_ID('tempdb..#min_abs_broker', 'U') IS NOT NULL DROP TABLE #min_abs_broker    SELECT DISTINCT     q.[MULTI_FUND_ID],     q.[QUOTE_VALUE],     cp.[BROKER_TICKER] AS MIN_ABS_BROKER,     cp.[COUNTERPARTY_CODE],     q2.[MIN_QUOTE]    INTO #min_abs_broker    FROM VISTA_REPORTING.dbo.QUOTES q    LEFT JOIN (SELECT DISTINCT         [BROKER_TICKER],         [COUNTERPARTY_CODE]          FROM VISTA_REPORTING.dbo.COUNTERPARTIES) cp    on q.[BROKER] = cp.[COUNTERPARTY_CODE]    inner join (SELECT         [MULTI_FUND_ID],                     NULLIF(MIN([QUOTE_VALUE]),0) AS MIN_QUOTE                FROM VISTA_REPORTING.dbo.QUOTES       WHERE QUOTE_ORIGIN = 'QUOTE'                GROUP BY [MULTI_FUND_ID]) q2    on q.[MULTI_FUND_ID] = q2.[MULTI_FUND_ID] AND q.[QUOTE_VALUE] = q2.[MIN_QUOTE]    where q.QUOTE_ORIGIN = 'QUOTE'        --Calculate the quote counterparties associated to the max(abs(quote value))    IF OBJECT_ID('tempdb..#max_abs_broker', 'U') IS NOT NULL DROP TABLE #max_abs_broker    SELECT DISTINCT     q.[MULTI_FUND_ID],     q.[QUOTE_VALUE],     cp.[BROKER_TICKER] AS MAX_ABS_BROKER,     cp.[COUNTERPARTY_CODE],     q2.[MAX_QUOTE]    INTO #max_abs_broker    FROM VISTA_REPORTING.dbo.QUOTES q    LEFT JOIN (SELECT DISTINCT         [BROKER_TICKER],         [COUNTERPARTY_CODE]          FROM VISTA_REPORTING.dbo.COUNTERPARTIES) cp    on q.[BROKER] = cp.[COUNTERPARTY_CODE]    inner join (SELECT         [MULTI_FUND_ID],                     NULLIF(MAX([QUOTE_VALUE]),0) AS MAX_QUOTE                FROM VISTA_REPORTING.dbo.QUOTES       WHERE QUOTE_ORIGIN = 'QUOTE'                GROUP BY [MULTI_FUND_ID]) q2    on q.[MULTI_FUND_ID] = q2.[MULTI_FUND_ID] AND q.[QUOTE_VALUE] = q2.[MAX_QUOTE]    where q.QUOTE_ORIGIN = 'QUOTE'             --Count number of quotes for FX Option    IF OBJECT_ID('tempdb..#count_fx_options', 'U') IS NOT NULL DROP TABLE #count_fx_options    SELECT      t.[MULTI_FUND_ID],     pr.[INST_TYPE],     COUNT(DISTINCT q.BROKER) as NUM_QUOTES    INTO #count_fx_options    FROM VISTA_REPORTING.dbo.TRADES t    LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr  on pr.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]    LEFT JOIN (SELECT *          FROM VISTA_REPORTING.dbo.QUOTES          WHERE NULLIF(QUOTE_VALUE,0) IS NOT NULL) q on t.[MULTI_FUND_ID] = q.[MULTI_FUND_ID]    WHERE pr.[INST_TYPE] = 'FXOPT'     GROUP BY       t.[MULTI_FUND_ID],      pr.[INST_TYPE]               --Obtain Quotes Requested and Quotes Obtained    IF OBJECT_ID('tempdb..#quotes_calc', 'U') IS NOT NULL DROP TABLE #quotes_calc    SELECT DISTINCT      q.[MULTI_FUND_ID],     (SELECT       COUNT(DISTINCT [BROKER])       FROM VISTA_REPORTING.dbo.QUOTES      WHERE ISNULL(QUOTE_VALUE, 0) != 0 -- We are only including quotes from the QUOTES table, QUOTE_ORIGIN='TRADE' are excluded         --OR QUOTE_ORIGIN = 'TRADE')        AND MULTI_FUND_ID = q.[MULTI_FUND_ID]) as QUOTES_OBTAINED, --Count distinct BROKER where QUOTE_VALUE is NOT NULL or 0     COUNT(DISTINCT [BROKER]) as QUOTES_REQUESTED --A quote is required for every MULTI_FUND_ID    INTO #quotes_calc    FROM VISTA_REPORTING.dbo.QUOTES q    GROUP BY q.[MULTI_FUND_ID]    ORDER BY QUOTES_OBTAINED        --Calculate Exceptions based on NWQ BRD    IF OBJECT_ID('tempdb..#exceptions', 'U') IS NOT NULL DROP TABLE #exceptions    SELECT DISTINCT     t.[MULTI_FUND_ID],     t.[TRD_PRICING_SPREAD],     t.[TRD_COUNTERPARTY],     t.[TRD_COUPON],     t.[TRD_PRICE],     t.[EXECUTION_TIME],     pr.[INST_TYPE],     pr.[Trade_TRAN_TYPE],     pr.[MULTI_FUND_ID] as PR_MULTI_FUND_ID,     pr.[DEALING_DESK],     q.[Quote_Basis], --is spread = 2 and is rate/yield = 3 and is price = 1 from quotes refresh     q_c.[QUOTES_OBTAINED],     q_c.[QUOTES_REQUESTED],     min_brk.[MIN_QUOTE],     min_brk.[MIN_ABS_BROKER],     max_brk.[MAX_QUOTE],     max_brk.[MAX_ABS_BROKER],     count_fx.[NUM_QUOTES],     CASE       WHEN pr.[INST_TYPE] IN ('SCDS','ICDS') --Asset Class: Credit Default Swap (CDS)       THEN       CASE         WHEN q.[Quote_Basis] = 2 OR q.[Quote_Basis] = 3   --Traded basis: Spread/Rate         THEN         CASE           WHEN pr.[Trade_TRAN_TYPE] like '%BUYPROT%'  AND COALESCE(t.TRD_EX_BROKER_CODE, t.[TRD_COUNTERPARTY]) NOT IN (SELECT DISTINCT [MIN_ABS_BROKER]                                        FROM #min_abs_broker minb                                        WHERE minb.MULTI_FUND_ID = t.MULTI_FUND_ID) THEN 1           WHEN pr.[Trade_TRAN_TYPE] like '%SELLPROT%' AND COALESCE(t.TRD_EX_BROKER_CODE, t.[TRD_COUNTERPARTY]) NOT IN (SELECT DISTINCT MAX_ABS_BROKER                                        FROM #max_abs_broker manb                                        WHERE manb.MULTI_FUND_ID = t.MULTI_FUND_ID) THEN 1          ELSE 0         END        WHEN q.[Quote_Basis] = 1 AND COALESCE(t.TRD_EX_BROKER_CODE, t.[TRD_COUNTERPARTY]) NOT IN (SELECT DISTINCT MAX_ABS_BROKER                                FROM #max_abs_broker manb                                WHERE manb.MULTI_FUND_ID = t.MULTI_FUND_ID) THEN 1 --Traded basis: Price       ELSE 0       END      WHEN pr.[INST_TYPE] in ('IRS', 'OIS', 'ASWP','SWAP', 'IFS', 'CCS', 'CASWP', 'BASIS', 'ZCS', 'CDSWAPTION') --Asset Class: Interest Rate Swap / Overnight Interest Swaps, Asset Swaps & SWAP       THEN       CASE         WHEN (q.[Quote_Basis] = 2 OR q.[Quote_Basis] = 3) --Traded basis: Spread OR Rate         THEN         CASE          WHEN pr.[Trade_TRAN_TYPE] like '%PAYFIX%' AND COALESCE(t.TRD_EX_BROKER_CODE, t.[TRD_COUNTERPARTY]) NOT IN (SELECT DISTINCT [MIN_ABS_BROKER]                                      FROM #min_abs_broker minb                                      WHERE minb.MULTI_FUND_ID = t.MULTI_FUND_ID) THEN 1           WHEN pr.[Trade_TRAN_TYPE] like '%RCVFIX%' AND COALESCE(t.TRD_EX_BROKER_CODE, t.[TRD_COUNTERPARTY]) NOT IN (SELECT DISTINCT MAX_ABS_BROKER                                      FROM #max_abs_broker manb                                      WHERE manb.MULTI_FUND_ID = t.MULTI_FUND_ID) THEN 1          ELSE 0         END        WHEN q.[Quote_Basis] = 1 AND COALESCE(t.TRD_EX_BROKER_CODE, t.[TRD_COUNTERPARTY]) NOT IN (SELECT DISTINCT MAX_ABS_BROKER                                FROM #max_abs_broker manb                                WHERE manb.MULTI_FUND_ID = t.MULTI_FUND_ID) THEN 1 --Traded basis: Price       ELSE 0       END      WHEN pr.[INST_TYPE] in ('TRS') --Asset Class: Total Return Swap       THEN       CASE         WHEN (q.[Quote_Basis] = 2 OR q.[Quote_Basis] = 3) --Traded basis: Spread OR Rate         THEN         CASE          WHEN pr.[Trade_TRAN_TYPE] like '%PAYPFL%' AND COALESCE(t.TRD_EX_BROKER_CODE, t.[TRD_COUNTERPARTY]) NOT IN (SELECT DISTINCT MAX_ABS_BROKER                                      FROM #max_abs_broker manb                                      WHERE manb.MULTI_FUND_ID = t.MULTI_FUND_ID) THEN 1          WHEN pr.[Trade_TRAN_TYPE] like '%RECPFL%' AND COALESCE(t.TRD_EX_BROKER_CODE, t.[TRD_COUNTERPARTY]) NOT IN (SELECT DISTINCT [MIN_ABS_BROKER]                                          FROM #min_abs_broker minb                                      WHERE minb.MULTI_FUND_ID = t.MULTI_FUND_ID) THEN 1          ELSE 0         END        WHEN q.[Quote_Basis] = 1 AND COALESCE(t.TRD_EX_BROKER_CODE, t.[TRD_COUNTERPARTY]) NOT IN (SELECT DISTINCT MAX_ABS_BROKER                                FROM #max_abs_broker manb                                WHERE manb.MULTI_FUND_ID = t.MULTI_FUND_ID) THEN 1 --Traded basis: Price       ELSE 0       END      WHEN pr.[INST_TYPE] in ('GOV', 'IGOV', 'EM GOV') --Asset Class: Government Bond       THEN       CASE         WHEN q.[Quote_Basis] = 1 --Traded basis: Price         THEN         CASE          WHEN pr.[Trade_TRAN_TYPE] like '%Buy%'  AND COALESCE(t.TRD_EX_BROKER_CODE, t.[TRD_COUNTERPARTY]) NOT IN (SELECT DISTINCT [MIN_ABS_BROKER]                                           FROM #min_abs_broker minb                                       WHERE minb.MULTI_FUND_ID = t.MULTI_FUND_ID) THEN 1          WHEN pr.[Trade_TRAN_TYPE] like '%Sell%' AND COALESCE(t.TRD_EX_BROKER_CODE, t.[TRD_COUNTERPARTY]) NOT IN (SELECT DISTINCT MAX_ABS_BROKER                                       FROM #max_abs_broker manb                                       WHERE manb.MULTI_FUND_ID = t.MULTI_FUND_ID) THEN 1         ELSE 0         END        WHEN q.[Quote_Basis] = 2 or q.[Quote_Basis] = 3 --Traded basis: Spread/Rate         THEN         CASE          WHEN pr.[Trade_TRAN_TYPE] like '%Buy%'  AND COALESCE(t.TRD_EX_BROKER_CODE, t.[TRD_COUNTERPARTY]) NOT IN (SELECT DISTINCT MAX_ABS_BROKER                                       FROM #max_abs_broker manb                                       WHERE manb.MULTI_FUND_ID = t.MULTI_FUND_ID) THEN 1          WHEN pr.[Trade_TRAN_TYPE] like '%Sell%' AND COALESCE(t.TRD_EX_BROKER_CODE, t.[TRD_COUNTERPARTY]) NOT IN (SELECT DISTINCT [MIN_ABS_BROKER]                                           FROM #min_abs_broker minb                                       WHERE minb.MULTI_FUND_ID = t.MULTI_FUND_ID) THEN 1         ELSE 0         END       ELSE 0       END      WHEN pr.[INST_TYPE] = 'EQOPT' --Asset Class: EQOPT       THEN       CASE         WHEN q.[Quote_Basis] = 1 OR q.[Quote_Basis] = 2 or q.[Quote_Basis] = 3 --Traded basis: Price/Spread/Rate         THEN         CASE          WHEN pr.[Trade_TRAN_TYPE] like '%Buy%'  AND COALESCE(t.TRD_EX_BROKER_CODE, t.[TRD_COUNTERPARTY]) NOT IN (SELECT DISTINCT [MIN_ABS_BROKER]                                           FROM #min_abs_broker minb                                       WHERE minb.MULTI_FUND_ID = t.MULTI_FUND_ID) THEN 1          WHEN pr.[Trade_TRAN_TYPE] like '%Sell%' AND COALESCE(t.TRD_EX_BROKER_CODE, t.[TRD_COUNTERPARTY]) NOT IN (SELECT DISTINCT MAX_ABS_BROKER                                       FROM #max_abs_broker manb                                       WHERE manb.MULTI_FUND_ID = t.MULTI_FUND_ID) THEN 1         ELSE 0         END       ELSE 0       END      WHEN (pr.[INST_TYPE] in ('FXOPT') --Asset Class: FX Option        AND count_fx.[NUM_QUOTES] > 1)         THEN 1     ELSE 0     END AS EXCEPTION_FLAG    INTO #exceptions    FROM VISTA_REPORTING.dbo.TRADES t    LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr on pr.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]    LEFT JOIN (SELECT * FROM VISTA_REPORTING.dbo.QUOTES          WHERE NULLIF(QUOTE_VALUE,0) IS NOT NULL) q on t.[MULTI_FUND_ID] = q.[MULTI_FUND_ID]    LEFT JOIN #min_abs_broker min_brk on t.[MULTI_FUND_ID] = min_brk.[MULTI_FUND_ID]    LEFT JOIN #max_abs_broker max_brk on t.[MULTI_FUND_ID] = max_brk.[MULTI_FUND_ID]    LEFT JOIN #count_fx_options count_fx on t.[MULTI_FUND_ID] = count_fx.[MULTI_FUND_ID]    LEFT JOIN #quotes_calc q_c on t.[MULTI_FUND_ID] = q_c.MULTI_FUND_ID    WHERE t.[FinalFlag] = 1       AND ISNULL(t.[TRD_STATUS],'') != 'C'      AND (pr.[DEALING_DESK] = 'DMG')                    --Compile final exceptions table with necessary columns    IF OBJECT_ID('tempdb..#nwq_table', 'U') IS NOT NULL DROP TABLE #nwq_table    SELECT DISTINCT     pm.[ORD_NUM],     t.MULTI_FUND_ID,     pr.[DEALING_DESK],     t.[NWQ_RATIONALE],     ex.[QUOTES_REQUESTED],     ex.[QUOTES_OBTAINED],     CASE       WHEN ex.[EXCEPTION_FLAG] = 1 THEN 1      ELSE 0      END AS VG_07,     CASE       WHEN ex.[EXCEPTION_FLAG] = 1 THEN GETDATE()      ELSE NULL      END AS VG_07_CREATETIME    INTO #nwq_table    FROM VISTA_REPORTING.dbo.TRADES t    LEFT JOIN (SELECT * FROM #exceptions) ex on t.[MULTI_FUND_ID] = ex.[MULTI_FUND_ID]    LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr on t.[MULTI_FUND_ID] = pr.[MULTI_FUND_ID]     LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.TRD_ORD = T.ORD_NUM    LEFT JOIN (SELECT ORD_NUM FROM VISTA_REPORTING.DBO.PM_ORDERS) PM ON OC.PM_ORD = PM.ORD_NUM    WHERE t.[FinalFlag] = 1     AND pr.[DEALING_DESK] = 'DMG'                --Add records into FINAL_STATUS_UPDATE_TABLE    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    SELECT DISTINCT     CONCAT(MULTI_FUND_ID,'_7') AS ID,     '1A1' AS STATUS,     NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table    FROM #nwq_table    WHERE VG_07 != 0        MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'DMG',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'DMG');        --Add records into AUDIT_TABLE    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    SELECT DISTINCT     nwq.[MULTI_FUND_ID],     t.[ORD_NUM] AS TRD_ORD,     nwq.[ORD_NUM] AS PM_ORD,     'NWQ' AS Exception_Type,     CONCAT(nwq.[MULTI_FUND_ID],'_7') AS ID,     NULL AS REASON,     NULL AS COMMENT,     'For Review' AS Status,     NULL AS ClientExecID,     'DMG' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     t.[TRD_TRADER] AS DEALER,     '1A1' AS STATUS_ID,     trd_o.[AUTH_TIME] AS ORD_AUTH,     t.[EXECUTION_TIME] AS TRADE_EXEC    INTO #temp_audit    FROM #nwq_table nwq    LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t ON nwq.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]    LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o ON t.[ORD_NUM] = trd_o.[ORD_NUM]    WHERE nwq.[VG_07] = 1    --INC0104838    MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_DMG AS T    USING #temp_audit AS S    ON (T.ID = S.ID AND (T.PM_ORD = S.PM_ORD OR (T.PM_ORD IS NULL AND S.PM_ORD IS NULL)))    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);    --End of INC0104838        --Update NWQ Table    IF      OBJECT_ID('VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_DMG_TABLE', 'U') IS NULL     SELECT *      INTO VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_DMG_TABLE      FROM #nwq_table    ELSE      IF OBJECT_ID('tempdb..#temp_CP_table', 'U') IS NOT NULL      DROP TABLE #temp_CP_table     SELECT *      INTO #TEMP_CP_TABLE     FROM #nwq_table    --INC0104838    MERGE VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_DMG_TABLE AS T     USING #TEMP_CP_TABLE AS S    ON (T.MULTI_FUND_ID = S.MULTI_FUND_ID AND (T.ORD_NUM = S.ORD_NUM OR (T.ORD_NUM IS NULL AND S.ORD_NUM IS NULL)))    WHEN MATCHED     THEN UPDATE     SET      [ORD_NUM] = CASE WHEN S.VG_07 > T.VG_07 THEN S.[ORD_NUM] ELSE T.[ORD_NUM] END,     [MULTI_FUND_ID] = CASE WHEN S.VG_07 > T.VG_07 THEN S.[MULTI_FUND_ID] ELSE T.[MULTI_FUND_ID] END,     [DEALING_DESK] = CASE WHEN S.VG_07 > T.VG_07 THEN S.[DEALING_DESK] ELSE T.[DEALING_DESK] END,     [NWQ_RATIONALE] = CASE WHEN S.VG_07 > T.VG_07 THEN S.[NWQ_RATIONALE] ELSE T.[NWQ_RATIONALE] END,     [QUOTES_REQUESTED] = CASE WHEN S.VG_07 > T.VG_07 THEN S.[QUOTES_REQUESTED] ELSE T.[QUOTES_REQUESTED] END,     [QUOTES_OBTAINED] = CASE WHEN S.VG_07 > T.VG_07 THEN S.[QUOTES_OBTAINED] ELSE T.[QUOTES_OBTAINED] END,     [VG_07] = CASE WHEN S.VG_07 > T.VG_07 THEN S.[VG_07] ELSE T.[VG_07] END,     [VG_07_CREATETIME] = CASE WHEN S.VG_07 > T.VG_07 THEN S.[VG_07_CREATETIME] ELSE T.[VG_07_CREATETIME] END    -- END of INC0104838    WHEN NOT MATCHED     THEN     INSERT     ([ORD_NUM],     [MULTI_FUND_ID],     [DEALING_DESK],     [NWQ_RATIONALE],     [QUOTES_REQUESTED],     [QUOTES_OBTAINED],     [VG_07],     [VG_07_CREATETIME])         VALUES     (S.[ORD_NUM],     S.[MULTI_FUND_ID],     S.[DEALING_DESK],     S.[NWQ_RATIONALE],     S.[QUOTES_REQUESTED],     S.[QUOTES_OBTAINED],     S.[VG_07],     S.[VG_07_CREATETIME]);        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_07_NON_WINNING_QUOTE_EQ  CreateDate: 2025-06-26 18:23:48.383  ModifyDate: 2025-06-26 18:23:48.383  --- DEFINITION START ---  -- =============================================    -- Author:  <Devereux, Alan>    -- Create date: <10/10/2017>    -- Description:     -- <For each trade with associated quotes, the price paid    -- must be better or equal to the best quote provided by    -- the broker. Otherwise, flag an exception.>    -- =============================================            -- ***************VERSION CONTROL***************    -- 29/11/2017 - DDC: Logic changed so that  all    -- calculations occur at MULTI_FUND_ID level and     -- included a validation to ensure only rows where    -- finalflag=1        -- 11/12/2017 - DDC: Changes made to ensure that script     -- only ever updates existing records always ensuring     -- the highest level exception is reported and     -- inserts new ones if no exception has been raised.        -- 04/01/2018 - DDC: Amendment made to only run  exception    -- calculations on the data for the day the exception is     -- being pulled        -- 2018-02-22 - WH: Added in ASSET_TYPE = 'EQUITY' and     --   ASSET_SUB_TYPE = 'PFD' for consideration.        -- 20/03/2018 - DDC: BUY_SELL_FLAG replaced with TRAN_TYPE    -- to deal with new logic and new ASSE_TYPE/ASSET_SUB_TYPE    -- added        -- 27/03/2018 - DDC: Logic 8changed to handles the situation     -- where you have identical winning votes from two different     -- brokers and trade with one of them. Previously it was     -- leading to duplicates        -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.        -- *********************************************            CREATE PROCEDURE [dbo].[VG_07_NON_WINNING_QUOTE_EQ]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         --DECLARE @DATE_FILTER AS DATE --Declare date filter to only select data from current pull date     --SET @DATE_FILTER = CONVERT(DATE, GETDATE())            -- Insert statements for procedure here          IF OBJECT_ID('tempdb..#quotes', 'U') IS NOT NULL DROP TABLE #quotes     select distinct        t.MULTI_FUND_ID,       --q.ORD_NUM,       q.QUOTE_TYPE,       --o.BUY_SELL_FLAG,       i2.SM_SEC_GROUP,       i2.SM_SEC_TYPE,       t.MTG_SUBTYPE,       t.EXECUTION_TYPE,       o.ORD_GROUP,       o.TRAN_TYPE,       BROKER,       QUOTE_VALUE     into #quotes     FROM VISTA_REPORTING.dbo.TRADES t     left join VISTA_REPORTING.dbo.QUOTES q on q.MULTI_FUND_ID=t.MULTI_FUND_ID     left join VISTA_REPORTING.dbo.TRD_ORDERS o on o.ORD_NUM=t.ORD_NUM     --left join VISTA_REPORTING.dbo.INSTRUMENTS i on i.CUSIP=o.CUSIP     OUTER APPLY (SELECT TOP 1 i.* FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=coalesce(t.CUSIP, o.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(t.EXECUTION_TIME, o.AUTH_TIME)))         ORDER BY i.DATE DESC) as i2     left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr on pr.MULTI_FUND_ID=t.MULTI_FUND_ID     --left join VISTA_STAGING.dbo.INITIAL_INSTRUMENTS ii on i.SM_SEC_TYPE=ii.ASSET_SUB_TYPE and i.SM_SEC_GROUP=ii.ASSET_TYPE     where o.DEALING_DESK = 'Equity' and t.FinalFlag=1 --exclude all non-Equity trades     --and t.EXECUTION_TYPE not in ('L', 'I')      and pr.PRIMARY_MARKET=0     --exclude Primary Market trades     and (      i2.SM_SEC_GROUP = 'OPTION'      or (i2.SM_SEC_GROUP = 'BND' and i2.SM_SEC_TYPE = 'CORP')      or (i2.SM_SEC_GROUP = 'EQUITY' and i2.SM_SEC_TYPE = 'PFD')      or (i2.SM_SEC_GROUP = 'EQUITY' and i2.SM_SEC_TYPE = 'EQUITY' and t.MTG_SUBTYPE like 'ETF%')      or (i2.SM_SEC_GROUP = 'SWAP' and i2.SM_SEC_TYPE = 'TRSWAP')      or (t.EXECUTION_TYPE = 'P' and o.ORD_GROUP is not null)  --Programme Trades      )     and q.QUOTE_VALUE!=0 --exclude all rows where there is no Quote value     --and q.QUOTE_TYPE = 'P'     --and t.PULL_DATE=@DATE_FILTER --Only use data from the current pull date         --select * from #quotes where multi_fund_id in ('515181','519015')         IF OBJECT_ID('tempdb..#best_value', 'U') IS NOT NULL DROP TABLE #best_value     select distinct      q.MULTI_FUND_ID,      --q.ORD_NUM,      q.QUOTE_TYPE,      q.TRAN_TYPE,      q.QUOTE_VALUE     into #best_value     from #quotes q     inner join --join the #quotes table on itself to extract the best value quote based on the trade direction       (      select        MULTI_FUND_ID,          --ORD_NUM,       case        when TRAN_TYPE = 'BUY' and QUOTE_TYPE = 'P' then min(QUOTE_VALUE) --take max or min depending on the trade direction        when TRAN_TYPE = 'SELL' and QUOTE_TYPE = 'P' then max(QUOTE_VALUE)        when TRAN_TYPE = 'RPMI' and QUOTE_TYPE = 'S' then min(QUOTE_VALUE)        else NULL end as QUOTE_VALUE      from #quotes      group by MULTI_FUND_ID, TRAN_TYPE, QUOTE_TYPE      ) q2 on q.MULTI_FUND_ID=q2.MULTI_FUND_ID and q.QUOTE_VALUE=q2.QUOTE_VALUE         --select * from #best_value         IF OBJECT_ID('tempdb..#brokers', 'U') IS NOT NULL DROP TABLE #brokers     select      b.MULTI_FUND_ID, --create a table of the best brokers based on quote value      --b.ORD_NUM,      q.BROKER,      b.QUOTE_VALUE     into #brokers     from #best_value b     join #quotes q on q.MULTI_FUND_ID=b.MULTI_FUND_ID --only return common values         and q.QUOTE_VALUE=b.QUOTE_VALUE         --select * from #brokers where multi_fund_id in ('515181','519015')         IF OBJECT_ID('tempdb..#broker_exception', 'U') IS NOT NULL DROP TABLE #broker_exception     select distinct      t.ORD_NUM,      t.MULTI_FUND_ID,      b.QUOTE_VALUE,      b.broker,      t.COUNTERPARTY_CODE,      t.TRD_COUNTERPARTY,      t.EXECUTION_TYPE,      case       when ISNULL(t.COUNTERPARTY_CODE, '') not in (SELECT DISTINCT BROKER FROM #brokers WHERE MULTI_FUND_ID=t.MULTI_FUND_ID)  --check that broker code and counterparty code are not equal       and b.MULTI_FUND_ID IS NOT NULL       and pr.PRIMARY_MARKET = 0  --check that it is not a Primary Market trade       and ISNULL(t.TRD_STATUS, '') != 'C'  --check that the trade has not been cancelled       then 1       else 0 end as BROKER_EXCEPTION --raise a broker exception flag     into #broker_exception     from VISTA_REPORTING.dbo.TRADES t      left join #brokers b on t.MULTI_FUND_ID=b.MULTI_FUND_ID     inner join VISTA_REPORTING.dbo.TRD_ORDERS tr on tr.ORD_NUM=t.ORD_NUM     left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr on pr.MULTI_FUND_ID=t.MULTI_FUND_ID     where tr.DEALING_DESK='Equity' and t.FinalFlag = 1 and pr.PRIMARY_MARKET=0         --select * from #broker_exception where multi_fund_id in ('515181','519015')         --IF OBJECT_ID('tempdb..#nwq_exception', 'U') IS NOT NULL DROP TABLE #nwq_exception     --select     -- ORD_NUM,     -- MULTI_FUND_ID,     -- case     --  when min(BROKER_EXCEPTION) != 0 --if there are any exceptions raised in the broker table then raise an NWQ Exception     --  then 1 else 0 end as NON_WINNING_QUOTE_EXCEPTION     --into #nwq_exception     --from #broker_exception b     --group by ORD_NUM, MULTI_FUND_ID         --select * from #nwq_exception         -- Use #quote_exception to populate FINAL_STATUS_UPDATE_TABLE     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     select distinct      CONCAT(MULTI_FUND_ID,'_7') AS ID,      '1A1' AS STATUS,      NULL AS FINAL_UPDATED_TIME     into #temp_status_table     from #broker_exception     where BROKER_EXCEPTION = 1          MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET       T.ID=T.ID,       T.STATUS=T.STATUS,       T.DEALING_DESK = 'Equity',       T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME,'Equity');             --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      ex.MULTI_FUND_ID,      t.ORD_NUM AS TRD_ORD,      NULL AS PM_ORD,      'NWQ' AS Exception_Type,      CONCAT(ex.MULTI_FUND_ID,'_7') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'For Review' AS Status,      NULL AS ClientExecID,      'Equity' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      TRD_TRADER AS DEALER,      '1A1' AS STATUS_ID,      AUTH_TIME AS ORD_AUTH,      EXECUTION_TIME AS TRADE_EXEC     INTO #temp_audit     FROM #broker_exception ex     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t     ON ex.MULTI_FUND_ID = t.MULTI_FUND_ID     LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o     ON t.ORD_NUM = trd_o.ORD_NUM     WHERE BROKER_EXCEPTION = 1         MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);             IF OBJECT_ID('VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_EQ_TABLE', 'U') IS NULL          select distinct      --t.ORD_NUM,      t.MULTI_FUND_ID,      tr.DEALING_DESK,      coalesce(BROKER_EXCEPTION, 0) as NON_WINNING_QUOTE_EXCEPTION,      case when BROKER_EXCEPTION=1 then GETDATE() else NULL end as NWQ_CREATEIME --if a NWQ Exception has been raised mark the current datetime.     into VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_EQ_TABLE     from VISTA_REPORTING.dbo.TRADES t     left join #broker_exception n on t.MULTI_FUND_ID=n.MULTI_FUND_ID     left join VISTA_REPORTING.dbo.TRD_ORDERS tr on tr.ORD_NUM=t.ORD_NUM     where tr.DEALING_DESK = 'Equity'      and t.MULTI_FUND_ID is not NULL     --and t.PULL_DATE=@DATE_FILTER         ELSE          IF OBJECT_ID('tempdb..#temp_nwq_table', 'U') IS NOT NULL DROP TABLE #temp_nwq_table         select distinct      --t.ORD_NUM,      t.MULTI_FUND_ID,      tr.DEALING_DESK,      coalesce(BROKER_EXCEPTION, 0) as NON_WINNING_QUOTE_EXCEPTION,      case when BROKER_EXCEPTION=1 then GETDATE() else NULL end as NWQ_CREATEIME --if a NWQ Exception has been raised mark the current datetime.     into #temp_nwq_table     from VISTA_REPORTING.dbo.TRADES t     left join #broker_exception n on t.MULTI_FUND_ID=n.MULTI_FUND_ID     left join VISTA_REPORTING.dbo.TRD_ORDERS tr on tr.ORD_NUM=t.ORD_NUM     where tr.DEALING_DESK = 'Equity'      and t.MULTI_FUND_ID is not NULL     --and t.PULL_DATE=@DATE_FILTER         MERGE VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_EQ_TABLE AS T     USING #temp_nwq_table AS S     ON T.MULTI_FUND_ID = S.MULTI_FUND_ID     WHEN MATCHED      THEN       UPDATE SET       T.DEALING_DESK = S.DEALING_DESK,       T.NON_WINNING_QUOTE_EXCEPTION =  CASE WHEN S.NON_WINNING_QUOTE_EXCEPTION > T.NON_WINNING_QUOTE_EXCEPTION                  THEN S.NON_WINNING_QUOTE_EXCEPTION ELSE T.NON_WINNING_QUOTE_EXCEPTION END,       T.NWQ_CREATEIME = CASE WHEN S.NON_WINNING_QUOTE_EXCEPTION > T.NON_WINNING_QUOTE_EXCEPTION              THEN S.NWQ_CREATEIME ELSE T.NWQ_CREATEIME END     WHEN NOT MATCHED       THEN INSERT (MULTI_FUND_ID, DEALING_DESK, NON_WINNING_QUOTE_EXCEPTION, NWQ_CREATEIME)        VALUES (S.MULTI_FUND_ID, S.DEALING_DESK, S.NON_WINNING_QUOTE_EXCEPTION, S.NWQ_CREATEIME);         IF OBJECT_ID('tempdb..#quotes', 'U') IS NOT NULL DROP TABLE #quotes     IF OBJECT_ID('tempdb..#best_value', 'U') IS NOT NULL DROP TABLE #best_value     IF OBJECT_ID('tempdb..#brokers', 'U') IS NOT NULL DROP TABLE #brokers     IF OBJECT_ID('tempdb..#broker_exception', 'U') IS NOT NULL DROP TABLE #broker_exception     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     IF OBJECT_ID('tempdb..#temp_nwq_table', 'U') IS NOT NULL DROP TABLE #temp_nwq_table        END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_07_NON_WINNING_QUOTE_FI  CreateDate: 2025-06-26 18:23:33.077  ModifyDate: 2025-06-26 18:23:33.077  --- DEFINITION START ---  -- =============================================    -- Author:  <Devereux, Alan>    -- Create date: <10/10/2017>    -- Description:     -- <For each trade with associated quotes, the price paid    -- must be better or equal to the best quote provided by    -- the broker. Otherwise, flag an exception.>    -- =============================================        -- ***************VERSION CONTROL***************    -- 11/12/2017 - DDC: Changes made to ensure that script     -- only ever updates existing records always ensuring     -- the highest level exception is reported and     -- inserts new ones if no exception has been raised.        -- 04/01/2018 - DDC: Amendment made to only run  exception    -- calculations on the data for the day the exception is     -- being pulled        -- 16/03/2018 - DDC: New logic implemented to include     -- additonal fields from PRIMARY_INST_TYP_TABLE. Previous     -- logic commented out.         -- 2018-03-21 - WH: Removed reference to BUY_SELL_FLAG - used TRAN_TYPE instead        -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.        -- *********************************************        CREATE PROCEDURE [dbo].[VG_07_NON_WINNING_QUOTE_FI]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         --DECLARE @DATE_FILTER AS DATE --Declare date filter to only select data from current pull date     --SET @DATE_FILTER = CONVERT(DATE, GETDATE())                --1. Determine the trade basis from the quotes bases in the quotes table.               --  The FIDD has provided logic to identify the trade basis for different asset classes.           --     Levels used are: 3 : Rate trade, 2 : Spread trade, 1 : Price trade.           --IF OBJECT_ID('tempdb..#trade_basis', 'U') IS NOT NULL DROP TABLE #trade_basis           --SELECT            --      q.MULTI_FUND_ID,            --      MAX(           --             CASE            --                    WHEN p.DEBT_DERIV  IN ('DEBT','EQUITY') THEN           --                          CASE           --                                 WHEN q.QUOTE_TYPE  = 'R' THEN 3           --                                 WHEN q.QUOTE_TYPE  = 'S' THEN 2           --                                 WHEN q.QUOTE_TYPE  = 'P' THEN 1           --                          ELSE 1           --                          END           --                    WHEN p.ICDS_DETAIL IN ('CDX NA HY','CDX EM') THEN 3 --CDX NA HY & CDX EM are both always Rate based trades.           --                    WHEN p.INST_TYPE IN ('SCDS','ICDS') THEN 2 -- SCDS/ICDS is always a spread           --         WHEN p.INST_TYPE IN ('IRS', 'IFS', 'CCS', 'CASWP', 'ASWP', 'ZCS', 'BASIS') THEN           --             CASE           --                   -- Initiations           --                   WHEN p.Trade_TRAN_TYPE LIKE '%INIT%' THEN           --                                              CASE           --                                                    WHEN q.QUOTE_TYPE = 'R' THEN 3           --                                                    WHEN q.QUOTE_TYPE = 'S' THEN 2           --                                              END           --                   -- Unwinds           --                   WHEN p.Trade_TRAN_TYPE LIKE '%UNWIND%' THEN 1 -- Unwinds for Swaps are always Price           --             END           --             ELSE 1           --             END) AS [Trade basis]           --INTO #trade_basis           --FROM VISTA_REPORTING.dbo.QUOTES q           --LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p           --ON q.MULTI_FUND_ID = p.MULTI_FUND_ID           --WHERE q.QUOTE_ORIGIN = 'Quote'           --GROUP BY q.MULTI_FUND_ID           --SELECT * FROM #trade_basis ORDER BY 2 DESC               --2. Determine the trade value (using the quote basis that was found above)           --     Levels used are: 3 : Rate trade, 2 : Spread trade, 1 : Price trade.        --   IF OBJECT_ID('tempdb..#trade_basis_value', 'U') IS NOT NULL DROP TABLE #trade_basis_value        --   SELECT DISTINCT        --         t.MULTI_FUND_ID,        --         t.TRD_COUNTERPARTY,        --         bs.[Trade Basis],        --         p.DEBT_DERIV,        --         p.ICDS_DETAIL,        --         p.INST_TYPE,        --         p.Trade_TRAN_TYPE,        --                CASE         --                       WHEN p.DEBT_DERIV  IN ('DEBT','EQUITY') THEN        --                             CASE        --                                    WHEN bs.[Trade Basis] = 3 THEN t.TRD_YIELD        --                                    WHEN bs.[Trade Basis] = 2 THEN t.TRD_PRICING_SPREAD        --                                    WHEN bs.[Trade Basis] = 1 THEN t.TRD_PRICE        --                             ELSE TRD_PRICE        --                             END        --                       WHEN p.ICDS_DETAIL IN ('CDX NA HY','CDX EM') THEN t.TRD_YIELD        --                       WHEN p.INST_TYPE IN ('SCDS','ICDS') THEN t.TRD_PRICING_SPREAD -- SCDS/ICDS is always a spread        --            WHEN p.INST_TYPE IN ('IRS', 'IFS', 'CCS', 'CASWP', 'ASWP', 'ZCS', 'BASIS') THEN        --                CASE        --                      -- Initiations        --                      WHEN p.Trade_TRAN_TYPE LIKE '%INIT%' THEN        --                                                 CASE        --                                                        WHEN bs.[Trade Basis] = 3 THEN t.TRD_COUPON        --                                                        WHEN bs.[Trade Basis] = 2 THEN t.TRD_COUPON        --                                                 END        --                      -- Unwinds        --                      WHEN p.Trade_TRAN_TYPE LIKE '%UNWIND%' THEN t.TRD_PRINCIPAL         --                END        --                ELSE TRD_PRICE        --                END AS [Trade Value]               --   INTO #trade_basis_value            --   FROM VISTA_REPORTING.dbo.TRADES t        --   LEFT JOIN #trade_basis bs        --   ON t.MULTI_FUND_ID = bs.MULTI_FUND_ID        --   LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p        --   ON t.MULTI_FUND_ID = p.MULTI_FUND_ID        --   WHERE t.FinalFlag = 1        --AND ISNULL(t.TRD_STATUS,'') <> 'C' --Do not consider cancelled trades            --select * from #trade_basis_value where MULTI_FUND_ID=508191               --3. Compare traded value to quotes according the logic set out by the business                 --3.a. For everything that requires a value to be assessed (everything apart from CDX NA HY, CDX EM and Swap unwinds)           IF OBJECT_ID('tempdb..#Exceptions1', 'U') IS NOT NULL DROP TABLE #Exceptions1           SELECT                  t.MULTI_FUND_ID,                 --t.[Trade basis],                 --t.[Trade Value],                 CASE         WHEN pr.DEBT_DERIV IN ('DEBT','EQUITY') OR pr.INST_TYPE = 'CDSWAPTION'         THEN         CASE           WHEN pr.Trade_TRAN_TYPE = 'Buy'           THEN           CASE            WHEN q.Quote_Basis = 3 AND t.TRD_YIELD < MAX(q.QUOTE_VALUE) THEN 1            WHEN q.Quote_Basis = 2 AND t.TRD_PRICING_SPREAD < MAX(q.QUOTE_VALUE) THEN 1            WHEN q.Quote_Basis = 1 AND t.TRD_PRICE > MIN(q.QUOTE_VALUE) THEN 1            ELSE 0           END          WHEN pr.Trade_TRAN_TYPE = 'Sell'           THEN           CASE            WHEN q.Quote_Basis = 3 AND t.TRD_YIELD > MIN(q.QUOTE_VALUE) THEN 1            WHEN q.Quote_Basis = 2 AND t.TRD_PRICING_SPREAD > MIN(q.QUOTE_VALUE) THEN 1            WHEN q.Quote_Basis = 1 AND t.TRD_PRICE < MAX(q.QUOTE_VALUE) THEN 1            ELSE 0           END                            ELSE 0                            END        WHEN pr.INST_TYPE IN ('SCDS','ICDS') AND ISNULL(pr.ICDS_DETAIL,'') NOT IN ('CDX NA HY','CDX EM')         THEN         CASE           WHEN pr.Trade_TRAN_TYPE LIKE '%Buy%'  AND t.TRD_PRICING_SPREAD > MIN(q.QUOTE_VALUE) THEN 1          WHEN pr.Trade_TRAN_TYPE LIKE '%Sell%' AND t.TRD_PRICING_SPREAD < MAX(q.QUOTE_VALUE) THEN 1          ELSE 0         END        WHEN pr.INST_TYPE IN ('IRS', 'IFS', 'OIS', 'CCS', 'CASWP', 'ASWP', 'ZCS', 'BASIS','SWAP') THEN         CASE           WHEN pr.Trade_TRAN_TYPE = 'PAYFIX INIT' AND t.TRD_COUPON > MIN(q.QUOTE_VALUE) THEN 1          WHEN pr.Trade_TRAN_TYPE = 'RCVFIX INIT' AND t.TRD_COUPON < MAX(q.QUOTE_VALUE) THEN 1          ELSE 0         END        WHEN pr.INST_TYPE IN ('TRS', 'FI TRS') THEN         CASE           WHEN pr.Trade_TRAN_TYPE = 'PAYPFL INIT' AND q.Quote_Basis = 3 AND t.TRD_YIELD < MAX(q.QUOTE_VALUE) THEN 1          WHEN pr.Trade_TRAN_TYPE = 'PAYPFL INIT' AND q.Quote_Basis = 2 AND t.TRD_PRICING_SPREAD < MAX(q.QUOTE_VALUE) THEN 1          WHEN pr.Trade_TRAN_TYPE = 'PAYPFL INIT' AND q.Quote_Basis = 1 AND t.TRD_PRICE < MAX(q.QUOTE_VALUE) THEN 1          WHEN pr.Trade_TRAN_TYPE = 'RECPFL INIT' AND q.Quote_Basis = 3 AND t.TRD_YIELD > MIN(q.QUOTE_VALUE) THEN 1          WHEN pr.Trade_TRAN_TYPE = 'RECPFL INIT' AND q.Quote_Basis = 2 AND t.TRD_PRICING_SPREAD > MIN(q.QUOTE_VALUE) THEN 1          WHEN pr.Trade_TRAN_TYPE = 'RECPFL INIT' AND q.Quote_Basis = 1 AND t.TRD_COUPON > MIN(q.QUOTE_VALUE) THEN 1          ELSE 0         END                                     --WHEN COUNT(DISTINCT q.BROKER) > 1 THEN 1                 ELSE NULL                 END AS [Exception]           INTO #Exceptions1           FROM VISTA_REPORTING.dbo.TRADES t        LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID=t.MULTI_FUND_ID           LEFT JOIN (SELECT * FROM VISTA_REPORTING.dbo.QUOTES WHERE NULLIF(QUOTE_VALUE,0) IS NOT NULL) q           ON t.MULTI_FUND_ID = q.MULTI_FUND_ID        WHERE t.FinalFlag=1 AND pr.INTERFUND_TRANSFER = 0           GROUP BY t.MULTI_FUND_ID,         q.Quote_Basis,         t.TRD_YIELD,         t.TRD_PRICING_SPREAD,         t.TRD_PRICE,          t.TRD_COUPON,        pr.DEBT_DERIV,         pr.Trade_TRAN_TYPE,         pr.INST_TYPE,         pr.ICDS_DETAIL                --select * from #Exceptions1 where Exception=1                                --3.b. For CDX NA HY, CDX EM               IF OBJECT_ID('tempdb..#max_broker', 'U') IS NOT NULL DROP TABLE #max_broker              SELECT                         q1.MULTI_FUND_ID,                        cp.BROKER_TICKER AS MAX_BROKER              INTO #max_broker              FROM VISTA_REPORTING.dbo.QUOTES q1              LEFT JOIN (SELECT DISTINCT BROKER_TICKER, COUNTERPARTY_CODE FROM VISTA_REPORTING.dbo.COUNTERPARTIES) cp              ON q1.BROKER = cp.COUNTERPARTY_CODE              INNER JOIN (                        SELECT                                MULTI_FUND_ID,                                MAX(NULLIF(QUOTE_VALUE,0)) AS min_quote                        FROM VISTA_REPORTING.dbo.QUOTES                        GROUP BY MULTI_FUND_ID                        ) q2              ON q1.MULTI_FUND_ID = q2.MULTI_FUND_ID AND                   q1.QUOTE_VALUE = q2.min_quote                  IF OBJECT_ID('tempdb..#min_broker', 'U') IS NOT NULL DROP TABLE #min_broker              SELECT                         q1.MULTI_FUND_ID,                        cp.BROKER_TICKER AS MIN_BROKER              INTO #min_broker              FROM VISTA_REPORTING.dbo.QUOTES q1              LEFT JOIN (SELECT DISTINCT BROKER_TICKER, COUNTERPARTY_CODE FROM VISTA_REPORTING.dbo.COUNTERPARTIES) cp              ON q1.BROKER = cp.COUNTERPARTY_CODE              INNER JOIN (                        SELECT                                MULTI_FUND_ID,                                MIN(NULLIF(QUOTE_VALUE,0)) AS min_quote                        FROM VISTA_REPORTING.dbo.QUOTES         --WHERE VALID_QUOTE_FLAG = 1                        GROUP BY MULTI_FUND_ID                        ) q2              ON q1.MULTI_FUND_ID = q2.MULTI_FUND_ID AND                   q1.QUOTE_VALUE = q2.min_quote                                IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades             SELECT DISTINCT                 t.MULTI_FUND_ID,                 t.TRAN_TYPE,                 t.TRD_COUNTERPARTY,                 t.TRD_PRINCIPAL,                 p.ICDS_DETAIL,                 p.INST_TYPE                      INTO #trades    FROM VISTA_REPORTING.dbo.TRADES t             LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p             ON t.MULTI_FUND_ID = p.MULTI_FUND_ID             WHERE t.FinalFlag = 1 AND                 p.ICDS_DETAIL IN ('CDX NA HY','CDX EM')        AND ISNULL(t.TRD_STATUS,'') <> 'C' --Do not consider cancelled trades        AND p.INTERFUND_TRANSFER = 0               IF OBJECT_ID('tempdb..#Exceptions2', 'U') IS NOT NULL DROP TABLE #Exceptions2             SELECT                  t.MULTI_FUND_ID,                 CASE                        WHEN t.ICDS_DETAIL IN ('CDX NA HY','CDX EM') THEN                               CASE                                    WHEN t.TRAN_TYPE LIKE '%Buy%'  AND MAX(CASE WHEN t.TRD_COUNTERPARTY = min_brk.MIN_BROKER THEN 1 ELSE 0 END) = 1 THEN 0                                   WHEN t.TRAN_TYPE LIKE '%Sell%' AND MAX(CASE WHEN t.TRD_COUNTERPARTY = max_brk.MAX_BROKER THEN 1 ELSE 0 END) = 1 THEN 0                                     ELSE 1                               END                 END AS [Exception]             INTO #Exceptions2               FROM #trades t             LEFT JOIN                 #min_broker min_brk             ON t.MULTI_FUND_ID = min_brk.MULTI_FUND_ID             LEFT JOIN                 #max_broker max_brk             ON t.MULTI_FUND_ID = max_brk.MULTI_FUND_ID             GROUP BY t.MULTI_FUND_ID, t.ICDS_DETAIL, t.TRAN_TYPE, t.INST_TYPE, t.TRD_PRINCIPAL           --select * from #Exceptions2 where Exception=1                   --3.c. Swap unwinds              IF OBJECT_ID('tempdb..#max_abs_broker', 'U') IS NOT NULL DROP TABLE #max_abs_broker              SELECT                         q1.MULTI_FUND_ID,                        cp.BROKER_TICKER AS MAX_ABS_BROKER              INTO #max_abs_broker              FROM VISTA_REPORTING.dbo.QUOTES q1              LEFT JOIN (SELECT DISTINCT BROKER_TICKER, COUNTERPARTY_CODE FROM VISTA_REPORTING.dbo.COUNTERPARTIES) cp              ON q1.BROKER = cp.COUNTERPARTY_CODE              INNER JOIN (                        SELECT                                MULTI_FUND_ID,                                MAX(NULLIF(ABS(QUOTE_VALUE),0)) AS max_quote                        FROM VISTA_REPORTING.dbo.QUOTES                        GROUP BY MULTI_FUND_ID                        ) q2              ON q1.MULTI_FUND_ID = q2.MULTI_FUND_ID AND                   ABS(q1.QUOTE_VALUE) = q2.max_quote                  IF OBJECT_ID('tempdb..#min_abs_broker', 'U') IS NOT NULL DROP TABLE #min_abs_broker              SELECT                         q1.MULTI_FUND_ID,                        cp.BROKER_TICKER AS MIN_ABS_BROKER              INTO #min_abs_broker              FROM VISTA_REPORTING.dbo.QUOTES q1              LEFT JOIN (SELECT DISTINCT BROKER_TICKER, COUNTERPARTY_CODE FROM VISTA_REPORTING.dbo.COUNTERPARTIES) cp              ON q1.BROKER = cp.COUNTERPARTY_CODE              INNER JOIN (                        SELECT                                MULTI_FUND_ID,                                MIN(NULLIF(ABS(QUOTE_VALUE),0)) AS min_quote                        FROM VISTA_REPORTING.dbo.QUOTES                        GROUP BY MULTI_FUND_ID                        ) q2              ON q1.MULTI_FUND_ID = q2.MULTI_FUND_ID AND                   ABS(q1.QUOTE_VALUE) = q2.min_quote                 IF OBJECT_ID('tempdb..#trades2', 'U') IS NOT NULL DROP TABLE #trades2             SELECT DISTINCT        t.PULL_DATE,                 t.MULTI_FUND_ID,                 t.TRAN_TYPE,                 t.TRD_COUNTERPARTY,                 t.TRD_PRINCIPAL,                 p.ICDS_DETAIL,                 p.INST_TYPE                      INTO #trades2             FROM VISTA_REPORTING.dbo.TRADES t             LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p             ON t.MULTI_FUND_ID = p.MULTI_FUND_ID             WHERE t.FinalFlag = 1 AND                 p.INST_TYPE IN ('IRS', 'IFS', 'OIS', 'CCS', 'CASWP', 'ASWP', 'ZCS', 'BASIS','SWAP') AND                  t.TRAN_TYPE LIKE '%UNW%'        AND ISNULL(t.TRD_STATUS,'') <> 'C' --Do not consider cancelled trades               IF OBJECT_ID('tempdb..#Exceptions3', 'U') IS NOT NULL DROP TABLE #Exceptions3       SELECT distinct                 t.MULTI_FUND_ID,        --q.BROKER,        t.TRD_PRINCIPAL,        q.BROKER_COUNT,        --t.TRD_COUNTERPARTY,        --CASE WHEN t.TRD_COUNTERPARTY = min_brk.MIN_ABS_BROKER THEN 1 ELSE 0 END as cpy_broker_min,        --CASE WHEN t.TRD_COUNTERPARTY = max_brk.MAX_ABS_BROKER THEN 1 ELSE 0 END as cpy_broker_max,        --min_brk.MIN_ABS_BROKER,        --max_brk.MAX_ABS_BROKER                 CASE        WHEN MIN(t.PULL_DATE) < '2019-06-03' THEN 0        WHEN MIN(t.PULL_DATE) >= '2019-06-03' THEN         CASE          WHEN t.INST_TYPE IN ('IRS', 'IFS', 'OIS', 'CCS', 'CASWP', 'ASWP', 'ZCS', 'BASIS','SWAP') AND t.TRAN_TYPE LIKE '%UNW%' THEN           CASE             WHEN ((t.TRD_PRINCIPAL < 0 AND MAX(CASE WHEN t.TRD_COUNTERPARTY = min_brk.MIN_ABS_BROKER THEN 1 ELSE 0 END) = 1) OR q.BROKER_COUNT = 1) THEN 0            WHEN ((t.TRD_PRINCIPAL > 0 AND MAX(CASE WHEN t.TRD_COUNTERPARTY = max_brk.MAX_ABS_BROKER THEN 1 ELSE 0 END) = 1) OR q.BROKER_COUNT = 1) THEN 0            ELSE 1           END                        END                 END AS [Exception]             INTO #Exceptions3              FROM #trades2 t             LEFT JOIN                 #min_abs_broker min_brk             ON t.MULTI_FUND_ID = min_brk.MULTI_FUND_ID             LEFT JOIN                 #max_abs_broker max_brk             ON t.MULTI_FUND_ID = max_brk.MULTI_FUND_ID       left join (SELECT distinct MULTI_FUND_ID, COUNT(DISTINCT BROKER) AS BROKER_COUNT FROM VISTA_REPORTING.dbo.QUOTES GROUP BY MULTI_FUND_ID) q ON q.MULTI_FUND_ID = t.MULTI_FUND_ID             GROUP BY t.MULTI_FUND_ID, t.TRAN_TYPE, t.INST_TYPE, t.TRD_PRINCIPAL, q.BROKER_COUNT                   --4. Consolidate exceptions           IF OBJECT_ID('tempdb..#nwq_exception', 'U') IS NOT NULL DROP TABLE #nwq_exception           SELECT DISTINCT                 t.MULTI_FUND_ID,                 COALESCE(ex1.Exception,ex2.Exception,ex3.Exception) AS NWQ_EXCEPTION           INTO #nwq_exception           FROM VISTA_REPORTING.dbo.TRADES t           LEFT JOIN (SELECT * FROM #Exceptions1 WHERE Exception IS NOT NULL) ex1           ON t.MULTI_FUND_ID = ex1.MULTI_FUND_ID           LEFT JOIN (SELECT * FROM #Exceptions2 WHERE Exception IS NOT NULL) ex2           ON t.MULTI_FUND_ID = ex2.MULTI_FUND_ID             LEFT JOIN (SELECT * FROM #Exceptions3 WHERE Exception IS NOT NULL) ex3           ON t.MULTI_FUND_ID = ex3.MULTI_FUND_ID         LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p        ON t.MULTI_FUND_ID = p.MULTI_FUND_ID         WHERE p.DEALING_DESK = 'Fixed Income'        AND t.FinalFlag = 1                   --SELECT * FROM #nwq_exception where NWQ_EXCEPTION=1               -- Use #nwq_exception to populate FINAL_STATUS_UPDATE_TABLE           IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table           select distinct                CONCAT(MULTI_FUND_ID,'_7') AS ID,                '1A2' AS STATUS,                NULL AS FINAL_UPDATED_TIME           into #temp_status_table           from #nwq_exception           where NWQ_EXCEPTION = 1               MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T           USING #temp_status_table AS S           ON (T.ID = S.ID)           WHEN MATCHED                THEN                 UPDATE SET                      T.ID=T.ID,                      T.STATUS=T.STATUS,          T.DEALING_DESK = 'Fixed Income',                      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME           WHEN NOT MATCHED                 THEN                 INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)                VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'Fixed Income');          --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      ex.MULTI_FUND_ID,      t.ORD_NUM AS TRD_ORD,      NULL AS PM_ORD,      'NWQ' AS Exception_Type,      CONCAT(ex.MULTI_FUND_ID,'_7') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'With Reviewer' AS Status,      NULL AS ClientExecID,      'Fixed Income' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      TRD_TRADER AS DEALER,      '1A2' AS STATUS_ID,      AUTH_TIME AS ORD_AUTH,      EXECUTION_TIME AS TRADE_EXEC     INTO #temp_audit     FROM #nwq_exception ex     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t     ON ex.MULTI_FUND_ID = t.MULTI_FUND_ID     LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o     ON t.ORD_NUM = trd_o.ORD_NUM     WHERE NWQ_EXCEPTION = 1          MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);                  --  Show exceptions by MULTI_FUND_ID, replace NULLs with 0.           IF OBJECT_ID('VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_FI_TABLE') IS NULL                       select distinct                --t.ORD_NUM,                tr.MULTI_FUND_ID,                p.DEALING_DESK,                coalesce(n.NWQ_EXCEPTION, 0) as NWQ_EXCEPTION, -- Replace NULL exception with 0                case when n.NWQ_EXCEPTION = 1 then GETDATE() else NULL end as NWQ_CREATEIME -- Adds exception create time           into VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_FI_TABLE           FROM VISTA_REPORTING.dbo.TRADES tr           LEFT JOIN #nwq_exception n ON tr.MULTI_FUND_ID=n.MULTI_FUND_ID           LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p ON tr.MULTI_FUND_ID = p.MULTI_FUND_ID           where p.DEALING_DESK = 'Fixed Income'                   --and tr.PULL_DATE=@DATE_FILTER               ELSE                IF OBJECT_ID('tempdb..#temp_nwq_table', 'U') IS NOT NULL DROP TABLE #temp_nwq_table               select distinct                --t.ORD_NUM,                tr.MULTI_FUND_ID,                p.DEALING_DESK,                coalesce(NWQ_EXCEPTION, 0) as NWQ_EXCEPTION, -- Replace NULL exception with 0                case when NWQ_EXCEPTION = 1 then GETDATE() else NULL end as NWQ_CREATEIME -- Adds exception create time           into #temp_nwq_table           FROM VISTA_REPORTING.dbo.TRADES tr           LEFT JOIN #nwq_exception n ON tr.MULTI_FUND_ID=n.MULTI_FUND_ID           LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p ON tr.MULTI_FUND_ID = p.MULTI_FUND_ID           where p.DEALING_DESK = 'Fixed Income'                   --and tr.PULL_DATE=@DATE_FILTER           --select * from #nwq_exception where MULTI_FUND_ID='522312      '           --select * from #temp_nwq_table where MULTI_FUND_ID='522312      '               MERGE VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_FI_TABLE AS T           USING #temp_nwq_table AS S           ON (T.MULTI_FUND_ID = S.MULTI_FUND_ID)           WHEN MATCHED                THEN                 UPDATE SET                       T.DEALING_DESK = S.DEALING_DESK,                      T.NWQ_EXCEPTION =  CASE WHEN S.NWQ_EXCEPTION > T.NWQ_EXCEPTION                                                                                          THEN S.NWQ_EXCEPTION ELSE T.NWQ_EXCEPTION END,                      T.NWQ_CREATEIME = CASE WHEN S.NWQ_EXCEPTION > T.NWQ_EXCEPTION                                                               THEN S.NWQ_CREATEIME ELSE T.NWQ_CREATEIME END           WHEN NOT MATCHED                 THEN INSERT (DEALING_DESK, MULTI_FUND_ID, NWQ_EXCEPTION, NWQ_CREATEIME)                      VALUES (S.DEALING_DESK, S.MULTI_FUND_ID, S.NWQ_EXCEPTION, S.NWQ_CREATEIME);               IF OBJECT_ID('tempdb..#Exceptions1', 'U') IS NOT NULL DROP TABLE #Exceptions1           IF OBJECT_ID('tempdb..#max_broker', 'U') IS NOT NULL DROP TABLE #max_broker           IF OBJECT_ID('tempdb..#min_broker', 'U') IS NOT NULL DROP TABLE #min_broker           IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades           IF OBJECT_ID('tempdb..#Exceptions2', 'U') IS NOT NULL DROP TABLE #Exceptions2           IF OBJECT_ID('tempdb..#max_abs_broker', 'U') IS NOT NULL DROP TABLE #max_abs_broker           IF OBJECT_ID('tempdb..#min_abs_broker', 'U') IS NOT NULL DROP TABLE #min_abs_broker           IF OBJECT_ID('tempdb..#trades2', 'U') IS NOT NULL DROP TABLE #trades2           IF OBJECT_ID('tempdb..#Exceptions3', 'U') IS NOT NULL DROP TABLE #Exceptions3           IF OBJECT_ID('tempdb..#nwq_exception', 'U') IS NOT NULL DROP TABLE #nwq_exception           IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table           IF OBJECT_ID('tempdb..#temp_nwq_table', 'U') IS NOT NULL DROP TABLE #temp_nwq_table            END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_07_NON_WINNING_QUOTE_LL  CreateDate: 2025-06-26 18:23:21.617  ModifyDate: 2025-06-26 18:23:21.617  --- DEFINITION START ---  -- =============================================    -- Author:  <Chandarana, Sohini>    -- Create date: <04/23//2018>    -- Description:     -- <For each trade with associated quotes, the price paid    -- must be better or equal to the best quote provided by    -- the broker. Otherwise, flag an exception.    -- Stored procedure appropriated from VG_07_NON_WINNING_QUOTE_FI>    -- =============================================        -- ***************VERSION CONTROL***************    -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.    -- *********************************************        CREATE PROCEDURE [dbo].[VG_07_NON_WINNING_QUOTE_LL]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         --DECLARE @DATE_FILTER AS DATE --Declare date filter to only select data from current pull date     --SET @DATE_FILTER = CONVERT(DATE, GETDATE())                 --3. Compare traded value to quotes according the logic set out by the business                 --3.a. For everything that requires a value to be assessed (everything apart from CDX NA HY, CDX EM and Swap unwinds)           IF OBJECT_ID('tempdb..#Exceptions1', 'U') IS NOT NULL DROP TABLE #Exceptions1           SELECT                  t.MULTI_FUND_ID,                 --t.[Trade basis],                 --t.[Trade Value],                  CASE WHEN pr.Trade_TRAN_TYPE = 'Buy' THEN                               CASE              WHEN q.Quote_Basis = 1 AND t.TRD_PRICE > MIN(q.QUOTE_VALUE) THEN 1                               ELSE 0                               END                        WHEN pr.Trade_TRAN_TYPE = 'Sell' THEN                               CASE              WHEN q.Quote_Basis = 1 AND t.TRD_PRICE < MAX(q.QUOTE_VALUE) THEN 1                               ELSE 0                               END                 ELSE NULL                 END AS [NWQ_Exception]           INTO #Exceptions1           FROM VISTA_REPORTING.dbo.TRADES t        LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID=t.MULTI_FUND_ID           LEFT JOIN (SELECT * FROM VISTA_REPORTING.dbo.QUOTES WHERE NULLIF(QUOTE_VALUE,0) IS NOT NULL) q           ON t.MULTI_FUND_ID = q.MULTI_FUND_ID        WHERE t.FinalFlag=1 AND pr.INTERFUND_TRANSFER = 0 AND pr.DEALING_DESK = 'Leveraged Finance' --AND t.TRD_STATUS != 'C'           GROUP BY t.MULTI_FUND_ID,         q.Quote_Basis,          t.TRD_PRICE,          pr.Trade_TRAN_TYPE               -- Use #nwq_exception to populate FINAL_STATUS_UPDATE_TABLE           IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table           select distinct                CONCAT(MULTI_FUND_ID,'_7') AS ID,                '1A1' AS STATUS,                NULL AS FINAL_UPDATED_TIME           into #temp_status_table           from #Exceptions1           where NWQ_EXCEPTION = 1               MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T           USING #temp_status_table AS S           ON (T.ID = S.ID)           WHEN MATCHED                THEN                 UPDATE SET                      T.ID=T.ID,                      T.STATUS=T.STATUS,          T.DEALING_DESK = 'Leveraged Finance',                      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME           WHEN NOT MATCHED                 THEN                 INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)                VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'Leveraged Finance');         --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      ex.MULTI_FUND_ID,      t.ORD_NUM AS TRD_ORD,      NULL AS PM_ORD,      'NWQ' AS Exception_Type,      CONCAT(ex.MULTI_FUND_ID,'_7') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'For Review' AS Status,      NULL AS ClientExecID,      'Leveraged Finance' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      TRD_TRADER AS DEALER,      '1A1' AS STATUS_ID,      AUTH_TIME AS ORD_AUTH,      EXECUTION_TIME AS TRADE_EXEC     INTO #temp_audit     FROM #Exceptions1 ex     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t     ON ex.MULTI_FUND_ID = t.MULTI_FUND_ID     LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o     ON t.ORD_NUM = trd_o.ORD_NUM     WHERE NWQ_Exception = 1          MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);                  --  Show exceptions by MULTI_FUND_ID, replace NULLs with 0.           IF OBJECT_ID('VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_LL_TABLE') IS NULL                       select distinct                --t.ORD_NUM,                tr.MULTI_FUND_ID,                p.DEALING_DESK,                coalesce(n.NWQ_EXCEPTION, 0) as NWQ_EXCEPTION, -- Replace NULL exception with 0                case when n.NWQ_EXCEPTION = 1 then GETDATE() else NULL end as NWQ_CREATEIME -- Adds exception create time           into VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_LL_TABLE           FROM VISTA_REPORTING.dbo.TRADES tr           LEFT JOIN #Exceptions1 n ON tr.MULTI_FUND_ID=n.MULTI_FUND_ID           LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p ON tr.MULTI_FUND_ID = p.MULTI_FUND_ID           where p.DEALING_DESK = 'Leveraged Finance'                   --and tr.PULL_DATE=@DATE_FILTER               ELSE                IF OBJECT_ID('tempdb..#temp_nwq_table', 'U') IS NOT NULL DROP TABLE #temp_nwq_table               select distinct                --t.ORD_NUM,                tr.MULTI_FUND_ID,                p.DEALING_DESK,                coalesce(NWQ_EXCEPTION, 0) as NWQ_EXCEPTION, -- Replace NULL exception with 0                case when NWQ_EXCEPTION = 1 then GETDATE() else NULL end as NWQ_CREATEIME -- Adds exception create time           into #temp_nwq_table           FROM VISTA_REPORTING.dbo.TRADES tr           LEFT JOIN #Exceptions1 n ON tr.MULTI_FUND_ID=n.MULTI_FUND_ID           LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p ON tr.MULTI_FUND_ID = p.MULTI_FUND_ID           where p.DEALING_DESK = 'Leveraged Finance'                   --and tr.PULL_DATE=@DATE_FILTER           --select * from #nwq_exception where MULTI_FUND_ID='522312      '           --select * from #temp_nwq_table where MULTI_FUND_ID='522312      '               MERGE VISTA_STAGING.dbo.VG_07_NON_WINNING_QUOTE_LL_TABLE AS T           USING #temp_nwq_table AS S           ON (T.MULTI_FUND_ID = S.MULTI_FUND_ID)           WHEN MATCHED                THEN                 UPDATE SET                       T.DEALING_DESK = S.DEALING_DESK,                      T.NWQ_EXCEPTION =  CASE WHEN S.NWQ_EXCEPTION > T.NWQ_EXCEPTION                                                                                          THEN S.NWQ_EXCEPTION ELSE T.NWQ_EXCEPTION END,                      T.NWQ_CREATEIME = CASE WHEN S.NWQ_EXCEPTION > T.NWQ_EXCEPTION                                                               THEN S.NWQ_CREATEIME ELSE T.NWQ_CREATEIME END           WHEN NOT MATCHED                 THEN INSERT (DEALING_DESK, MULTI_FUND_ID, NWQ_EXCEPTION, NWQ_CREATEIME)                      VALUES (S.DEALING_DESK, S.MULTI_FUND_ID, S.NWQ_EXCEPTION, S.NWQ_CREATEIME);        IF OBJECT_ID('tempdb..#trade_basis', 'U') IS NOT NULL DROP TABLE #trade_basis    IF OBJECT_ID('tempdb..#trade_basis_value', 'U') IS NOT NULL DROP TABLE #trade_basis_value    IF OBJECT_ID('tempdb..#Exceptions1', 'U') IS NOT NULL DROP TABLE #Exceptions1    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    IF OBJECT_ID('tempdb..#temp_nwq_table', 'U') IS NOT NULL DROP TABLE #temp_nwq_table    END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_08_ORDER_INFLATION_EQ  CreateDate: 2025-06-26 18:23:10.220  ModifyDate: 2025-06-26 18:23:10.220  --- DEFINITION START ---  -- =============================================    -- Author:  <Devereux, Alan>    -- Create date: <10/10/2017>    -- Description:     -- <Checks that the value of each trade is lower than the    -- NAV threshold, currently 1%. Flags trades as exceptions if    -- otherwise.>        -- =============================================        -- ***************VERSION CONTROL***************    -- 04/01/2018 - DDC: Amendment made to only run  exception    -- calculations on the data for the day the exception is     -- being pulled    -- *********************************************        CREATE PROCEDURE [dbo].[VG_08_ORDER_INFLATION_EQ]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         --DECLARE @DATE_FILTER AS DATE --Declare date filter to only select data from current pull date     --SET @DATE_FILTER = CONVERT(DATE, GETDATE())                  -- Insert statements for procedure here     IF OBJECT_ID('VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_EQ_TABLE', 'U') IS NULL     select distinct      oc.PM_ORD,      trd.FUND,      t.DEALING_DESK,      convert(date,trd.EXECUTION_TIME) as EXECUTION_TIME,      n.NAV_PORT_DATE,      --f.BASE_FUND_CODE,      n.PORTFOLIO_NAME,      n.NAV_VALUE_GBP,      trd.NET_CONSIDERATION_GBP,      --f.ORDER_INFLATION_TOLERANCE,      1.0*(trd.NET_CONSIDERATION_GBP/n.NAV_VALUE_GBP) as TRADE_PERCENTAGE,      case       when 1.0*(trd.NET_CONSIDERATION_GBP/n.NAV_VALUE_GBP) > 0.01 then 1       else 0 end as ORDER_INFLATION_EXCEPTION     into VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_EQ_TABLE     from VISTA_REPORTING.dbo.ORDERS_CROSS oc     join VISTA_REPORTING.dbo.TRD_ORDERS t on t.ORD_NUM=oc.TRD_ORD     join VISTA_REPORTING.dbo.TRADES trd on t.ORD_NUM=trd.ORD_NUM     left join VISTA_REPORTING.dbo.NAV n on n.FUND=trd.FUND and n.NAV_PORT_DATE=convert(date, trd.EXECUTION_TIME)     --left join VISTA_STAGING.dbo.FUND_GROUP f on f.BASE_FUND_NAME=n.PORTFOLIO_NAME     where       t.DEALING_DESK = 'Equity'      --and trd.PULL_DATE=@DATE_FILTER         ELSE          IF OBJECT_ID('tempdb..#temp_oi_table', 'U') IS NOT NULL DROP TABLE #temp_oi_table         select distinct      oc.PM_ORD,      trd.FUND,      t.DEALING_DESK,      convert(date,trd.EXECUTION_TIME) as EXECUTION_TIME,      n.NAV_PORT_DATE,      --f.BASE_FUND_CODE,      n.PORTFOLIO_NAME,      n.NAV_VALUE_GBP,      trd.NET_CONSIDERATION_GBP,      --f.ORDER_INFLATION_TOLERANCE,      1.0*(trd.NET_CONSIDERATION_GBP/n.NAV_VALUE_GBP) as TRADE_PERCENTAGE,      case       when 1.0*(trd.NET_CONSIDERATION_GBP/n.NAV_VALUE_GBP) > 0.01 then 1       else 0 end as ORDER_INFLATION_EXCEPTION         into #temp_oi_table     from VISTA_REPORTING.dbo.ORDERS_CROSS oc     join VISTA_REPORTING.dbo.TRD_ORDERS t on t.ORD_NUM=oc.TRD_ORD     join VISTA_REPORTING.dbo.TRADES trd on t.ORD_NUM=trd.ORD_NUM     left join VISTA_REPORTING.dbo.NAV n on n.FUND=trd.FUND and n.NAV_PORT_DATE=convert(date, trd.EXECUTION_TIME)     --left join VISTA_STAGING.dbo.FUND_GROUP f on f.BASE_FUND_NAME=n.PORTFOLIO_NAME     where       t.DEALING_DESK = 'Equity'      --and trd.PULL_DATE=@DATE_FILTER         IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     select distinct      CONCAT(PM_ORD,'_8') AS ID,      '1B1' AS STATUS,      NULL AS FINAL_UPDATED_TIME     into #temp_status_table     from #temp_oi_table     where ORDER_INFLATION_EXCEPTION != 0          MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET       T.ID=T.ID,       T.STATUS=T.STATUS,       T.DEALING_DESK = 'Equity',       T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'Equity');             MERGE VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_EQ_TABLE AS T     USING #temp_oi_table AS S     ON (T.PM_ORD = S.PM_ORD AND T.FUND=S.FUND)     WHEN MATCHED      THEN       UPDATE SET        T.DEALING_DESK = S.DEALING_DESK,       T.EXECUTION_TIME =  CASE WHEN S.ORDER_INFLATION_EXCEPTION > T.ORDER_INFLATION_EXCEPTION THEN S.EXECUTION_TIME ELSE T.EXECUTION_TIME END,       T.NAV_PORT_DATE = CASE WHEN S.ORDER_INFLATION_EXCEPTION > T.ORDER_INFLATION_EXCEPTION THEN S.NAV_PORT_DATE ELSE T.NAV_PORT_DATE END,       T.PORTFOLIO_NAME =  CASE WHEN S.ORDER_INFLATION_EXCEPTION > T.ORDER_INFLATION_EXCEPTION THEN S.PORTFOLIO_NAME ELSE T.PORTFOLIO_NAME END,       T.NAV_VALUE_GBP = CASE WHEN S.ORDER_INFLATION_EXCEPTION > T.ORDER_INFLATION_EXCEPTION THEN S.NAV_VALUE_GBP ELSE T.NAV_VALUE_GBP END,       T.NET_CONSIDERATION_GBP = CASE WHEN S.ORDER_INFLATION_EXCEPTION > T.ORDER_INFLATION_EXCEPTION THEN S.NET_CONSIDERATION_GBP ELSE T.NET_CONSIDERATION_GBP END,       T.TRADE_PERCENTAGE = CASE WHEN S.ORDER_INFLATION_EXCEPTION > T.ORDER_INFLATION_EXCEPTION THEN S.TRADE_PERCENTAGE ELSE T.TRADE_PERCENTAGE END,       T.ORDER_INFLATION_EXCEPTION = CASE WHEN S.ORDER_INFLATION_EXCEPTION > T.ORDER_INFLATION_EXCEPTION THEN S.ORDER_INFLATION_EXCEPTION ELSE T.ORDER_INFLATION_EXCEPTION END      WHEN NOT MATCHED       THEN INSERT (PM_ORD, FUND, DEALING_DESK, EXECUTION_TIME, NAV_PORT_DATE, PORTFOLIO_NAME,              NAV_VALUE_GBP, NET_CONSIDERATION_GBP, TRADE_PERCENTAGE, ORDER_INFLATION_EXCEPTION)         VALUES (S.PM_ORD, S.FUND, S.DEALING_DESK, S.EXECUTION_TIME, S.NAV_PORT_DATE, PORTFOLIO_NAME,             S.NAV_VALUE_GBP, S.NET_CONSIDERATION_GBP, S.TRADE_PERCENTAGE, S.ORDER_INFLATION_EXCEPTION);            END            --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_08_ORDER_INFLATION_FI  CreateDate: 2025-06-26 18:20:20.110  ModifyDate: 2025-06-26 18:20:20.110  --- DEFINITION START ---  -- =============================================    -- Author:  <Chandarana, Sohini>    -- Create date: <04/23/2018>    -- Description:     -- <Checks that the value of each trade is lower than the    -- NAV threshold, currently 1%. Flags trades as exceptions if    -- otherwise.    -- Stored procedure as appropriated from VG_08_ORDER_INFLATION_FI>    -- =============================================        -- ***************VERSION CONTROL***************    -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.    -- 2020-07-10 - DDC: Added enhancements requested by Andrew Woo detailed in the    --                   Enhancements V documentation            ----------------------New Comment style-----------------------------------        --2021-08-02 Matej Miter Created for Jira:    --T-0-17044 - Added Additional logic within temp_nav_date_table to extract the max port date with Nav value from Nav table;    -- Created additional trade_prices table to accomodate logic for conversion of trd price which is used for calculation of Order inflation exceptions        --2021-08-13, Matej Miter created for Jira:    --T-0-17285 - Fixed typo within  tables in order to retrive correct client funds for specific base funds        --2021-10-15, Matej Miter created for Jira:    --T-0-17591 - Overhauled code for Order Inflation FI in order to bring stability for raising an exceptions over time (refer to Nav values and how to extract proper max pull date and port date)    -- *********************************************        CREATE PROCEDURE [dbo].[VG_08_ORDER_INFLATION_FI]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         --DECLARE @DATE_FILTER AS DATE --Declare date filter to only select data from current pull date     --SET @DATE_FILTER = CONVERT(DATE, GETDATE())             IF OBJECT_ID('tempdb..#max_face', 'U') IS NOT NULL DROP TABLE #max_face     SELECT DISTINCT      od.ORD_NUM      ,ORD_DETAIL_FUND      ,CASE       WHEN ccy.CURRENCY IS NULL AND t.TRD_CURRENCY != t.SM_CURRENCY THEN MAX(od.ORD_DETAIL_FACE)/e.GBP_INDEX_RATE       WHEN ccy.CURRENCY IS NOT NULL AND t.TRD_CURRENCY != t.SM_CURRENCY THEN MAX(od.ORD_DETAIL_FACE)/e.INDEX_RATE       ELSE MAX(od.ORD_DETAIL_FACE)      END AS MAX_FACE,     oc.TRD_ORD     INTO #max_face     FROM VISTA_STAGING.dbo.ORDERS_DETAIL od     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD = od.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM = oc.TRD_ORD     LEFT JOIN VISTA_STAGING.dbo.REF_FI_OI_EMCCY_TO_USD ccy ON ccy.CURRENCY = t.SM_CURRENCY AND t.EXECUTION_TIME BETWEEN ccy.DATE_FROM AND ccy.DATE_TO      OUTER APPLY (SELECT TOP 1 e.GBP_INDEX_RATE, e.INDEX_RATE, e.INDEX_NAME FROM VISTA_REPORTING.dbo.FX_RATES e          WHERE e.CURRENCY = t.SM_CURRENCY and CONVERT(date, e.MARKDATE) <= CONVERT(date, t.EXECUTION_TIME)         ORDER BY e.MARKDATE DESC) e     WHERE EXISTS (SELECT tr.ORD_NUM FROM Vista_REPORTING.dbo.TRD_ORDERS tr WHERE tr.DEALING_DESK = 'Fixed Income' AND tr.ORD_NUM = t.ORD_NUM)     GROUP BY od.ORD_NUM, ORD_DETAIL_FUND, t.SM_CURRENCY, t.TRD_CURRENCY, e.GBP_INDEX_RATE, e.INDEX_RATE, ccy.CURRENCY, oc.TRD_ORD                 IF OBJECT_ID('tempdb..#temp_oi_portgolio_groups', 'U') IS NOT NULL DROP TABLE #temp_oi_portgolio_groups     SELECT DISTINCT      pg.*,      CASE        WHEN pg2.descendant IS NOT NULL THEN 1       ELSE 0      END AS MG_RET_FI_FLAG     INTO #temp_oi_portgolio_groups     FROM VISTA_STAGING.dbo.PORTFOLIO_GROUP_CLOSURE_TABLE pg     LEFT JOIN (SELECT DISTINCT descendant FROM Vista_STAGING.dbo.PORTFOLIO_GROUP_CLOSURE_TABLE where ancestor = 'MG_RET_FI') pg2 ON pg2.descendant = pg.descendant             IF OBJECT_ID('tempdb..#temp_oi_trades', 'U') IS NOT NULL DROP TABLE #temp_oi_trades     SELECT DISTINCT      trd.CLIENT_EXECUTION_NUM,      CONVERT(DATE, trd.EXECUTION_TIME) AS EXECUTION_TIME,      trd.FUND,       pg.ancestor,      pg.descendant,      pg.depth     INTO #temp_oi_trades     FROM VISTA_REPORTING.dbo.TRADES trd      LEFT JOIN #temp_oi_portgolio_groups pg ON pg.descendant = trd.PORTFOLIOS_PORTFOLIO_NAME     --T-0-17285 - changed MG_AALPXL into MG_ALLPXL as it was typo     WHERE (pg.ancestor IN ('MG_PRIL', 'MG_ALLPXL', 'MG_ZI', 'MG_ZIB', 'MG_BT_PEN', 'MG_C_INS', 'MG_C_PEN', 'MG_PPL', 'MG_PSPS') OR CHARINDEX('_CF', pg.ancestor) > 0)        AND EXISTS (SELECT tr.ORD_NUM FROM Vista_REPORTING.dbo.TRD_ORDERS tr WHERE tr.DEALING_DESK = 'Fixed Income' AND tr.ORD_NUM = trd.ORD_NUM)       AND pg.depth != 0     --ENd of T-0-17285         --T-0-17591 - created max port table that takes into account both cases of Nav datatypes when extracting max port dates from netasetvalues     IF OBJECT_ID('tempdb..#max_port', 'U') IS NOT NULL DROP TABLE #max_port     select       CLIENT_EXECUTION_NUM     , PORTFOLIO_NAME     , a.FUND     , MAX(NAV_PORT_DATE) AS MAX_PORT_DATE     into #max_port     from Vista_Reporting..NAV a     INNER JOIN #temp_oi_portgolio_groups pg ON pg.descendant=a.PORTFOLIO_NAME     left join #temp_oi_trades b on pg.ancestor = b.ancestor     where NAV_PORT_DATE <= EXECUTION_TIME      and NAV_DATATYPE = 'NAV_FUND'         AND pg.ancestor NOT IN ('MG_PPL', 'MG_PRIL', 'MG_PXLF', 'PLI_CF', 'SFF_CF')      group by PORTFOLIO_NAME, a.FUND, CLIENT_EXECUTION_NUM         UNION         select       CLIENT_EXECUTION_NUM     , PORTFOLIO_NAME     , a.FUND     , MAX(NAV_PORT_DATE) AS MAX_PORT_DATE     from Vista_Reporting..NAV a     INNER JOIN #temp_oi_portgolio_groups pg ON pg.descendant=a.PORTFOLIO_NAME     left join #temp_oi_trades b on pg.ancestor = b.ancestor     where NAV_PORT_DATE <= EXECUTION_TIME      and NAV_DATATYPE = 'TOT_ASSETS'         AND pg.ancestor IN ('MG_PPL', 'MG_PRIL', 'MG_PXLF', 'PLI_CF', 'SFF_CF')      group by PORTFOLIO_NAME, a.FUND, CLIENT_EXECUTION_NUM         -- Created max pull table that extracts max pull dates from netasetvalues taking into consideration max port date from above     IF OBJECT_ID('tempdb..#max_pull', 'U') IS NOT NULL DROP TABLE #max_pull     select       CLIENT_EXECUTION_NUM     , a.PORTFOLIO_NAME     , a.FUND     , MAX_PORT_DATE     , MAX(PULL_DATE) as MAX_PULL_DATE     into #max_pull     from Vista_Reporting..NAV a     inner join #max_port b on a.PORTFOLIO_NAME = b.PORTFOLIO_NAME and a.FUND = b.FUND and a.NAV_PORT_DATE = b.MAX_PORT_DATE      group by a.PORTFOLIO_NAME, a.FUND, CLIENT_EXECUTION_NUM, MAX_PORT_DATE         --going back into netasetvalues table in order to bring in the most appropriate results based on two above tables     IF OBJECT_ID('tempdb..#latest_nav', 'U') IS NOT NULL DROP TABLE #latest_nav     select b.CLIENT_EXECUTION_NUM, a.*     into #latest_nav     from Vista_Reporting..NAV a     inner join #max_pull b on a.FUND = b.FUND and a.PORTFOLIO_NAME = b.PORTFOLIO_NAME and a.NAV_PORT_DATE = b.MAX_PORT_DATE and a.PULL_DATE = b.MAX_PULL_DATE         -- created Sum table of all base funds under associated client fund     IF OBJECT_ID('tempdb..#client_nav', 'U') IS NOT NULL DROP TABLE #client_nav     select distinct a.CLIENT_EXECUTION_NUM, sum(NAV_VALUE_GBP) as CLIENT_NAV_VALUE, pg.MG_RET_FI_FLAG     into #client_nav     from #latest_nav a     INNER JOIN #temp_oi_portgolio_groups pg ON pg.descendant=a.PORTFOLIO_NAME     inner join #temp_oi_trades tr on pg.ancestor = tr.ancestor and a.CLIENT_EXECUTION_NUM = tr.CLIENT_EXECUTION_NUM     where (pg.ancestor IN ('MG_PRIL', 'MG_ALLPXL', 'MG_ZI', 'MG_ZIB', 'MG_BT_PEN', 'MG_C_INS', 'MG_C_PEN', 'MG_PPL', 'MG_PSPS') OR CHARINDEX('_CF', pg.ancestor) > 0)     and pg.depth != 0      group by a.CLIENT_EXECUTION_NUM, pg.MG_RET_FI_FLAG         -- created no sum table with all base fund of associated client fund      IF OBJECT_ID('tempdb..#client_nav_no_sum', 'U') IS NOT NULL DROP TABLE #client_nav_no_sum     select distinct a.CLIENT_EXECUTION_NUM, NAV_VALUE_GBP, NAV_VALUE, pg.MG_RET_FI_FLAG     into #client_nav_no_sum     from #latest_nav a     INNER JOIN #temp_oi_portgolio_groups pg ON pg.descendant=a.PORTFOLIO_NAME     inner join #temp_oi_trades tr on pg.ancestor = tr.ancestor and a.CLIENT_EXECUTION_NUM = tr.CLIENT_EXECUTION_NUM     where (pg.ancestor IN ('MG_PRIL', 'MG_ALLPXL', 'MG_ZI', 'MG_ZIB', 'MG_BT_PEN', 'MG_C_INS', 'MG_C_PEN', 'MG_PPL', 'MG_PSPS') OR CHARINDEX('_CF', pg.ancestor) > 0)     and pg.depth != 0           --End of T-0-17591         -- T-0-17044 - Created temp trade_prices table to accomodate currency conversion logic to be implemented for calculation of Order inflation exception     IF OBJECT_ID('tempdb..#trades_prices', 'U') IS NOT NULL DROP TABLE #trades_prices     SELECT      t.CLIENT_EXECUTION_NUM,     t.ORD_NUM,     CASE       WHEN ccy.CURRENCY IS NOT NULL AND t.TRD_CURRENCY != t.SM_CURRENCY THEN t.TRD_PRICE/e.INDEX_RATE       ELSE t.TRD_PRICE_GBP      END AS TRD_PRICE_CONVERTED,      CASE       WHEN ccy.CURRENCY IS NOT NULL AND t.TRD_CURRENCY != t.SM_CURRENCY THEN t.TRD_PRICE/e.GBP_INDEX_RATE       ELSE t.TRD_PRICE_GBP      END AS TRD_PRICE_CONVERTED_GBP     INTO #trades_prices     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN Vista_STAGING.dbo.REF_FI_OI_EMCCY_TO_USD ccy ON ccy.CURRENCY = t.SM_CURRENCY AND t.EXECUTION_TIME BETWEEN ccy.DATE_FROM AND ccy.DATE_TO       OUTER APPLY (SELECT TOP 1 e.GBP_INDEX_RATE, e.INDEX_RATE, e.INDEX_NAME FROM VISTA_REPORTING.dbo.FX_RATES e          WHERE e.CURRENCY = t.SM_CURRENCY and CONVERT(date, e.MARKDATE) <= CONVERT(date, t.EXECUTION_TIME)         ORDER BY e.MARKDATE DESC) e     --End of T-0-17044         IF OBJECT_ID('tempdb..#base_lev_oi', 'U') IS NOT NULL DROP TABLE #base_lev_oi      SELECT DISTINCT      od.ORD_NUM AS ORD_NUM,      trd.CLIENT_EXECUTION_NUM,      t.DEALING_DESK,      trd.PORTFOLIOS_PORTFOLIO_NAME,      pg.ancestor,      --T-0-17044 - We received few base funds under MG_RET_FI port group that have their own thresholdssaved within ref table      CASE        WHEN pg.MG_RET_FI_FLAG = 1 THEN COALESCE(ref.PERCENTAGE_THRESHOLD, 1.75)       WHEN pg.MG_RET_FI_FLAG = 0 THEN COALESCE(ref.PERCENTAGE_THRESHOLD, 1)      END AS PERCENTAGE_THRESHOLD,      --End of T-0-17044       ref.NOMINAL_THRESHOLD,      ((od.MAX_FACE*trd.TRD_PRICE_GBP)/n.NAV_VALUE_GBP) AS NON_EM_CALC,      ((od.MAX_FACE*trd.TRD_PRICE)/n.NAV_VALUE) AS EM_CALC,      n.NAV_VALUE_GBP,      pr.EMERGING_MARKET,      pg.MG_RET_FI_FLAG,      n.NAV_VALUE,      --T-0-17044 -- Added TRD_PRICE_CONVERTED from trade_prices table in order to use proper trd price within same currency, additionally added few more case when to capture changes within MG_RET_FI port group thresholds properly      CASE       WHEN trd.EXECUTION_TIME < '2020-08-01' THEN 0       WHEN n.NAV_VALUE = 0 THEN 0 -- Need to guard against divide by zero errors       WHEN pg.MG_RET_FI_FLAG = 1         AND ccy.CURRENCY IS NOT NULL           AND ref.[FUND CODE] IS NOT NULL            AND ref.PERCENTAGE_THRESHOLD IS NOT NULL            AND ((od.MAX_FACE*trd2.TRD_PRICE_CONVERTED)/n.NAV_VALUE) > ref.PERCENTAGE_THRESHOLD THEN 1       WHEN pg.MG_RET_FI_FLAG = 1         AND ccy.CURRENCY IS NULL           AND ref.[FUND CODE] IS NOT NULL            AND ref.PERCENTAGE_THRESHOLD IS NOT NULL          AND ((od.MAX_FACE*trd.TRD_PRICE_GBP)/n.NAV_VALUE) > ref.PERCENTAGE_THRESHOLD THEN 1 -- Use threshold table where possible and default to 1.75% where not       WHEN pg.MG_RET_FI_FLAG = 1          AND ccy.CURRENCY IS NOT NULL           AND ref.[FUND CODE] IS NOT NULL            AND ref.NOMINAL_THRESHOLD IS NOT NULL            AND (od.MAX_FACE*trd2.TRD_PRICE_CONVERTED) > ref.NOMINAL_THRESHOLD THEN 1       WHEN pg.MG_RET_FI_FLAG = 1          AND ccy.CURRENCY IS NULL           AND ref.[FUND CODE] IS NOT NULL            AND ref.NOMINAL_THRESHOLD IS NOT NULL          AND (od.MAX_FACE*trd.TRD_PRICE_GBP) > ref.NOMINAL_THRESHOLD THEN 1 -- Use threshold table where possible and default to 1.75% where not       WHEN pg.MG_RET_FI_FLAG = 1          AND ccy.CURRENCY IS NOT NULL         AND ref.[FUND CODE] IS NULL         AND ((od.MAX_FACE*trd2.TRD_PRICE_CONVERTED)/n.NAV_VALUE) > 1.75 THEN 1       WHEN pg.MG_RET_FI_FLAG = 1          AND ccy.CURRENCY IS NULL         AND ref.[FUND CODE] IS NULL          AND ((od.MAX_FACE*trd.TRD_PRICE_GBP)/n.NAV_VALUE_GBP) > 1.75 THEN 1       WHEN pg.MG_RET_FI_FLAG = 0        AND ccy.CURRENCY IS NOT NULL           AND ref.[FUND CODE] IS NOT NULL            AND ref.PERCENTAGE_THRESHOLD IS NOT NULL            AND ((od.MAX_FACE*trd2.TRD_PRICE_CONVERTED)/n.NAV_VALUE) > ref.PERCENTAGE_THRESHOLD THEN 1       WHEN pg.MG_RET_FI_FLAG = 0         AND ccy.CURRENCY IS NULL           AND ref.[FUND CODE] IS NOT NULL            AND ref.PERCENTAGE_THRESHOLD IS NOT NULL          AND ((od.MAX_FACE*trd.TRD_PRICE_GBP)/n.NAV_VALUE_GBP) > ref.PERCENTAGE_THRESHOLD THEN 1 -- Use threshold table where possible and default to 1% where not       WHEN pg.MG_RET_FI_FLAG = 0          AND ccy.CURRENCY IS NOT NULL           AND ref.[FUND CODE] IS NOT NULL            AND ref.NOMINAL_THRESHOLD IS NOT NULL            AND (od.MAX_FACE*trd2.TRD_PRICE_CONVERTED) > ref.NOMINAL_THRESHOLD THEN 1       WHEN pg.MG_RET_FI_FLAG = 0          AND ccy.CURRENCY IS NULL           AND ref.[FUND CODE] IS NOT NULL            AND ref.NOMINAL_THRESHOLD IS NOT NULL          AND (od.MAX_FACE*trd.TRD_PRICE_GBP) > ref.NOMINAL_THRESHOLD THEN 1 -- Use threshold table where possible and default to 1% where not       WHEN pg.MG_RET_FI_FLAG = 0          AND ccy.CURRENCY IS NOT NULL            AND ref.[FUND CODE] IS NULL            AND ((od.MAX_FACE*trd2.TRD_PRICE_CONVERTED)/n.NAV_VALUE) > 1 THEN 1       WHEN pg.MG_RET_FI_FLAG = 0          AND ccy.CURRENCY IS NULL           AND ref.[FUND CODE] IS NULL            AND ((od.MAX_FACE*trd.TRD_PRICE_GBP)/n.NAV_VALUE_GBP) > 1  THEN 1       ELSE 0      END AS ORDER_INFLATION_EXCEPTION     --End of T-0-17044     INTO #base_lev_oi     FROM VISTA_REPORTING.dbo.TRADES trd      --T-0-17044 -- Added left join to trades_prices table to get TRD_PRICE_CONVERTED field      left JOIN #trades_prices trd2 on trd2.CLIENT_EXECUTION_NUM = trd.CLIENT_EXECUTION_NUM      --End of T-0-17044     LEFT JOIN Vista_STAGING.dbo.REF_FI_OI_EMCCY_TO_USD ccy ON ccy.CURRENCY = trd.SM_CURRENCY AND trd.EXECUTION_TIME BETWEEN ccy.DATE_FROM AND ccy.DATE_TO       LEFT JOIN #temp_oi_portgolio_groups pg ON pg.descendant = trd.PORTFOLIOS_PORTFOLIO_NAME     LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS t on t.ORD_NUM=trd.ORD_NUM     LEFT JOIN #max_face od ON od.TRD_ORD=t.ORD_NUM AND trd.FUND = od.ORD_DETAIL_FUND     left Join #client_nav_no_sum n ON n.CLIENT_EXECUTION_NUM = trd.CLIENT_EXECUTION_NUM     LEFT JOIN (SELECT MULTI_FUND_ID, PRIMARY_MARKET, MAX(EMERGING_MARKET) AS EMERGING_MARKET           FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE          GROUP BY MULTI_FUND_ID, PRIMARY_MARKET) pr ON trd.MULTI_FUND_ID = pr.MULTI_FUND_ID     LEFT JOIN VISTA_STAGING.dbo.REF_FI_LL_ORDER_INFLATION_THRESHOLD ref ON ref.[FUND CODE] = trd.PORTFOLIOS_PORTFOLIO_NAME                          AND t.AUTH_TIME BETWEEN ref.DATE_FROM AND ref.DATE_TO     WHERE       t.DEALING_DESK = 'Fixed Income'      AND NOT EXISTS (SELECT pg2.descendant           FROM #temp_oi_portgolio_groups pg2          WHERE pg2.descendant = pg.descendant          --T-0-17285 - fixed typo in portfolio group             AND (pg2.ancestor IN ('MG_PRIL', 'MG_PXLF', 'MG_ALLPXL', 'MG_ZI', 'MG_ZIB', 'MG_BT_PEN', 'MG_C_INS', 'MG_C_PEN', 'MG_PPL', 'MG_PSPS') OR CHARINDEX('_CF', ancestor) > 0))          --End of T-0-17285      AND pr.PRIMARY_MARKET = 1      AND trd.FinalFlag = 1      AND od.ORD_DETAIL_FUND IS NOT NULL          UNION         SELECT DISTINCT      od.ORD_NUM AS ORD_NUM,      trd.CLIENT_EXECUTION_NUM,      t.DEALING_DESK,      trd.PORTFOLIOS_PORTFOLIO_NAME,      pg.ancestor,      --T-0-17044 - We received few base funds under MG_RET_FI port group that have their own thresholdssaved within ref table      CASE        WHEN pg.MG_RET_FI_FLAG = 1 THEN COALESCE(ref.PERCENTAGE_THRESHOLD, 1.75)       ELSE COALESCE(ref.PERCENTAGE_THRESHOLD, 1)      END AS PERCENTAGE_THRESHOLD,      --End of T-0-17044       ref.NOMINAL_THRESHOLD,      CASE WHEN nvt.CLIENT_NAV_VALUE !=0 THEN ((od.MAX_FACE*trd.TRD_PRICE_GBP)/nvt.CLIENT_NAV_VALUE) ELSE NULL END,      CASE WHEN nvt.CLIENT_NAV_VALUE !=0 THEN ((od.MAX_FACE*trd.TRD_PRICE)/nvt.CLIENT_NAV_VALUE) ELSE NULL END,      nvt.CLIENT_NAV_VALUE,      pr.EMERGING_MARKET,      pg.MG_RET_FI_FLAG,      nvt.CLIENT_NAV_VALUE,      --T-0-17044 -- Added TRD_PRICE_CONVERTED from trade_prices table in order to use proper trd price within same currency, additionally added few more case when to capture changes within MG_RET_FI port group thresholds properly      CASE       WHEN trd.EXECUTION_TIME < '2020-08-01' THEN 0       WHEN ISNULL(nvt.CLIENT_NAV_VALUE, 0) = 0 THEN 0 -- Need to guard against divide by zero errors       WHEN pg.MG_RET_FI_FLAG = 1         AND ccy.CURRENCY IS NOT NULL           AND ref.[FUND CODE] IS NOT NULL            AND ref.PERCENTAGE_THRESHOLD IS NOT NULL            AND ((od.MAX_FACE*trd2.TRD_PRICE_CONVERTED)/nvt.CLIENT_NAV_VALUE) > ref.PERCENTAGE_THRESHOLD THEN 1       WHEN pg.MG_RET_FI_FLAG = 1         AND ccy.CURRENCY IS NULL           AND ref.[FUND CODE] IS NOT NULL            AND ref.PERCENTAGE_THRESHOLD IS NOT NULL          AND ((od.MAX_FACE*trd.TRD_PRICE_GBP)/nvt.CLIENT_NAV_VALUE) > ref.PERCENTAGE_THRESHOLD THEN 1 -- Use threshold table where possible and default to 1.75% where not       WHEN pg.MG_RET_FI_FLAG = 1          AND ccy.CURRENCY IS NOT NULL           AND ref.[FUND CODE] IS NOT NULL            AND ref.NOMINAL_THRESHOLD IS NOT NULL            AND (od.MAX_FACE*trd2.TRD_PRICE_CONVERTED) > ref.NOMINAL_THRESHOLD THEN 1       WHEN pg.MG_RET_FI_FLAG = 1          AND ccy.CURRENCY IS NULL           AND ref.[FUND CODE] IS NOT NULL            AND ref.NOMINAL_THRESHOLD IS NOT NULL          AND (od.MAX_FACE*trd.TRD_PRICE_GBP) > ref.NOMINAL_THRESHOLD THEN 1 -- Use threshold table where possible and default to 1.75% where not       WHEN pg.MG_RET_FI_FLAG = 1         AND ccy.CURRENCY IS NOT NULL          AND ref.[FUND CODE] IS NULL          AND ((od.MAX_FACE*trd2.TRD_PRICE_CONVERTED)/nvt.CLIENT_NAV_VALUE) > 1.75 THEN 1       WHEN pg.MG_RET_FI_FLAG = 1         AND ccy.CURRENCY IS NULL         AND ref.[FUND CODE] IS NULL          AND ((od.MAX_FACE*trd.TRD_PRICE_GBP)/nvt.CLIENT_NAV_VALUE) > 1.75 THEN 1       WHEN pg.MG_RET_FI_FLAG = 0         AND ccy.CURRENCY IS NOT NULL         AND ref.[FUND CODE] IS NOT NULL          AND ref.PERCENTAGE_THRESHOLD IS NOT NULL          AND ((od.MAX_FACE*trd2.TRD_PRICE_CONVERTED)/nvt.CLIENT_NAV_VALUE) > ref.PERCENTAGE_THRESHOLD THEN 1 -- Use threshold table where possible and default to 1% where not       WHEN pg.MG_RET_FI_FLAG = 0         AND ccy.CURRENCY IS NULL         AND ref.[FUND CODE] IS NOT NULL          AND ref.PERCENTAGE_THRESHOLD IS NOT NULL          AND ((od.MAX_FACE*trd.TRD_PRICE_GBP)/nvt.CLIENT_NAV_VALUE) > ref.PERCENTAGE_THRESHOLD THEN 1 -- Use threshold table where possible and default to 1% where not       WHEN pg.MG_RET_FI_FLAG = 0         AND ccy.CURRENCY IS NOT NULL         AND ref.[FUND CODE] IS NOT NULL          AND ref.NOMINAL_THRESHOLD IS NOT NULL         AND (od.MAX_FACE*trd2.TRD_PRICE_CONVERTED) > ref.NOMINAL_THRESHOLD THEN 1 -- Use threshold table where possible and default to 1% where not       WHEN pg.MG_RET_FI_FLAG = 0         AND ccy.CURRENCY IS NULL         AND ref.[FUND CODE] IS NOT NULL          AND ref.NOMINAL_THRESHOLD IS NOT NULL         AND (od.MAX_FACE*trd.TRD_PRICE_GBP) > ref.NOMINAL_THRESHOLD THEN 1 -- Use threshold table where possible and default to 1% where not       WHEN pg.MG_RET_FI_FLAG = 0         AND ccy.CURRENCY IS NOT NULL              AND ref.[FUND CODE] IS NULL          AND ((od.MAX_FACE*trd2.TRD_PRICE_CONVERTED)/nvt.CLIENT_NAV_VALUE) > 1 THEN 1       WHEN pg.MG_RET_FI_FLAG = 0         AND ccy.CURRENCY IS NULL              AND ref.[FUND CODE] IS NULL          AND ((od.MAX_FACE*trd.TRD_PRICE_GBP)/nvt.CLIENT_NAV_VALUE) > 1 THEN 1       ELSE 0      END AS ORDER_INFLATION_EXCEPTION      --End of T-0-17044     FROM VISTA_REPORTING.dbo.TRADES trd      --T-0-17044 -- Added left join to trades_prices table to get TRD_PRICE_CONVERTED field      left JOIN #trades_prices trd2 on trd2.CLIENT_EXECUTION_NUM = trd.CLIENT_EXECUTION_NUM      --End of T-0-17044     LEFT JOIN Vista_STAGING.dbo.REF_FI_OI_EMCCY_TO_USD ccy ON ccy.CURRENCY = trd.SM_CURRENCY AND trd.EXECUTION_TIME BETWEEN ccy.DATE_FROM AND ccy.DATE_TO         LEFT JOIN #client_nav nvt ON nvt.CLIENT_EXECUTION_NUM = trd.CLIENT_EXECUTION_NUM     LEFT JOIN #temp_oi_portgolio_groups pg ON pg.descendant = trd.PORTFOLIOS_PORTFOLIO_NAME     LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS t on t.ORD_NUM=trd.ORD_NUM     LEFT JOIN #max_face od ON od.TRD_ORD=t.ORD_NUM AND trd.FUND = od.ORD_DETAIL_FUND     LEFT JOIN (SELECT MULTI_FUND_ID, PRIMARY_MARKET, MAX(EMERGING_MARKET) AS EMERGING_MARKET           FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE          GROUP BY MULTI_FUND_ID, PRIMARY_MARKET) pr ON trd.MULTI_FUND_ID = pr.MULTI_FUND_ID     LEFT JOIN VISTA_STAGING.dbo.REF_FI_LL_ORDER_INFLATION_THRESHOLD ref ON ref.[FUND CODE] = trd.PORTFOLIOS_PORTFOLIO_NAME                          AND t.AUTH_TIME BETWEEN ref.DATE_FROM AND ref.DATE_TO     WHERE       t.DEALING_DESK = 'Fixed Income'      AND EXISTS (SELECT pg2.descendant FROM #temp_oi_portgolio_groups pg2         WHERE pg2.descendant = pg.descendant         --T-0-17285 - fixed typo in portfolio group            AND (pg2.ancestor IN ('MG_PRIL', 'MG_PXLF', 'MG_ALLPXL', 'MG_ZI', 'MG_ZIB', 'MG_BT_PEN', 'MG_C_INS', 'MG_C_PEN', 'MG_PPL', 'MG_PSPS') OR CHARINDEX('_CF', ancestor) > 0))         --End of T-0-17285       AND pr.PRIMARY_MARKET = 1      AND trd.FinalFlag = 1      AND od.ORD_DETAIL_FUND IS NOT NULL             IF OBJECT_ID('tempdb..#base_level_oi_final', 'U') IS NOT NULL DROP TABLE #base_level_oi_final     SELECT      ORD_NUM,      CLIENT_EXECUTION_NUM,      DEALING_DESK,      PORTFOLIOS_PORTFOLIO_NAME,      MAX(ORDER_INFLATION_EXCEPTION) AS ORDER_INFLATION_EXCEPTION,      CASE WHEN MAX(ORDER_INFLATION_EXCEPTION) = 1 THEN GETDATE() ELSE NULL END AS OI_CREATETIME     INTO #base_level_oi_final     FROM #base_lev_oi     GROUP BY      ORD_NUM,      CLIENT_EXECUTION_NUM,      DEALING_DESK,      PORTFOLIOS_PORTFOLIO_NAME         --Adding Monitoring table in order to easier see where the problems occur in the future     IF OBJECT_ID('VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_FI_MONITORING_TABLE', 'U') IS NULL     select *     into VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_FI_MONITORING_TABLE     from #base_lev_oi         ELSE         INSERT INTO VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_FI_MONITORING_TABLE     SELECT * FROM #base_lev_oi         --------------------         IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     select distinct      CONCAT(CLIENT_EXECUTION_NUM,'_8') AS ID,      '1A1' AS STATUS,      NULL AS FINAL_UPDATED_TIME     into #temp_status_table     from #base_level_oi_final     where ORDER_INFLATION_EXCEPTION != 0          MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET       T.ID=T.ID,       T.STATUS=T.STATUS,       T.DEALING_DESK = 'Fixed Income',       T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'Fixed Income');             --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      t.MULTI_FUND_ID,      t.ORD_NUM AS TRD_ORD,      NULL AS PM_ORD,      'Order Inflation' AS Exception_Type,      CONCAT(ex.CLIENT_EXECUTION_NUM,'_8') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'For Review' AS Status,      ex.CLIENT_EXECUTION_NUM AS ClientExecID,      'Fixed Income' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      TRD_TRADER AS DEALER,      '1A1' AS STATUS_ID,      AUTH_TIME AS ORD_AUTH,      EXECUTION_TIME AS TRADE_EXEC     INTO #temp_audit     FROM #base_level_oi_final ex     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID,CLIENT_EXECUTION_NUM,  ORD_NUM, EXECUTION_TIME, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t     ON ex.CLIENT_EXECUTION_NUM = t.CLIENT_EXECUTION_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o     ON t.ORD_NUM = trd_o.ORD_NUM     WHERE ORDER_INFLATION_EXCEPTION != 0          MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);             IF OBJECT_ID('VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_FI_TABLE', 'U') IS NULL     SELECT *     INTO VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_FI_TABLE     FROM #base_level_oi_final         ELSE         MERGE VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_FI_TABLE AS T     USING #base_level_oi_final AS S     ON (T.ORD_NUM = S.ORD_NUM      AND T.CLIENT_EXECUTION_NUM = S.CLIENT_EXECUTION_NUM       AND T.DEALING_DESK = S.DEALING_DESK      AND T.PORTFOLIOS_PORTFOLIO_NAME = S.PORTFOLIOS_PORTFOLIO_NAME)     WHEN MATCHED      THEN       UPDATE SET         T.ORDER_INFLATION_EXCEPTION = CASE WHEN S.ORDER_INFLATION_EXCEPTION > T.ORDER_INFLATION_EXCEPTION THEN S.ORDER_INFLATION_EXCEPTION ELSE T.ORDER_INFLATION_EXCEPTION END,       T.OI_CREATETIME = CASE WHEN S.ORDER_INFLATION_EXCEPTION > T.ORDER_INFLATION_EXCEPTION THEN S.OI_CREATETIME ELSE T.OI_CREATETIME END     WHEN NOT MATCHED       THEN INSERT (ORD_NUM,           CLIENT_EXECUTION_NUM,           DEALING_DESK,           PORTFOLIOS_PORTFOLIO_NAME,           ORDER_INFLATION_EXCEPTION,           OI_CREATETIME)        VALUES (S.ORD_NUM, S.CLIENT_EXECUTION_NUM, S.DEALING_DESK, S.PORTFOLIOS_PORTFOLIO_NAME,           S.ORDER_INFLATION_EXCEPTION, S.OI_CREATETIME);         IF OBJECT_ID('tempdb..#base_lev_oi', 'U') IS NOT NULL DROP TABLE #base_lev_oi     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     IF OBJECT_ID('tempdb..#base_level_oi_final', 'U') IS NOT NULL DROP TABLE #base_level_oi_final     IF OBJECT_ID('tempdb..#temp_oi_portgolio_groups', 'U') IS NOT NULL DROP TABLE #temp_oi_portgolio_groups     IF OBJECT_ID('tempdb..#max_face', 'U') IS NOT NULL DROP TABLE #max_face     IF OBJECT_ID('tempdb..#temp_oi_trades', 'U') IS NOT NULL DROP TABLE #temp_oi_trades     IF OBJECT_ID('tempdb..#temp_nav_date_table', 'U') IS NOT NULL DROP TABLE #temp_nav_date_table     IF OBJECT_ID('tempdb..#temp_nav_val_table', 'U') IS NOT NULL DROP TABLE #temp_nav_val_table     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit            END            --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_08_ORDER_INFLATION_FI_UNTIL_2021_08_10  CreateDate: 2025-06-26 18:20:36.573  ModifyDate: 2025-06-26 18:20:36.573  --- DEFINITION START ---  -- =============================================    -- Author:  <Chandarana, Sohini>    -- Create date: <04/23/2018>    -- Description:     -- <Checks that the value of each trade is lower than the    -- NAV threshold, currently 1%. Flags trades as exceptions if    -- otherwise.    -- Stored procedure as appropriated from VG_08_ORDER_INFLATION_FI>    -- =============================================        -- ***************VERSION CONTROL***************    -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.    -- 2020-07-10 - DDC: Added enhancements requested by Andrew Woo detailed in the    --                   Enhancements V documentation    -- *********************************************        Create PROCEDURE [dbo].[VG_08_ORDER_INFLATION_FI_UNTIL_2021_08_10]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         --DECLARE @DATE_FILTER AS DATE --Declare date filter to only select data from current pull date     --SET @DATE_FILTER = CONVERT(DATE, GETDATE())         IF OBJECT_ID('tempdb..#max_face', 'U') IS NOT NULL DROP TABLE #max_face     SELECT DISTINCT      od.ORD_NUM      ,od.ORD_DETAIL_FUND      ,CASE       WHEN ccy.CURRENCY IS NULL AND t.TRD_CURRENCY != t.SM_CURRENCY THEN MAX(od.ORD_DETAIL_FACE)/e.GBP_INDEX_RATE       WHEN ccy.CURRENCY IS NOT NULL AND t.TRD_CURRENCY != t.SM_CURRENCY THEN MAX(od.ORD_DETAIL_FACE)/e.INDEX_RATE       ELSE MAX(od.ORD_DETAIL_FACE)      END AS MAX_FACE      ,oc.TRD_ORD     INTO #max_face     FROM VISTA_STAGING.dbo.ORDERS_DETAIL od     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD = od.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM = oc.TRD_ORD     LEFT JOIN VISTA_STAGING.dbo.REF_FI_OI_EMCCY_TO_USD ccy ON ccy.CURRENCY = t.SM_CURRENCY AND t.EXECUTION_TIME BETWEEN ccy.DATE_FROM AND ccy.DATE_TO      OUTER APPLY (SELECT TOP 1 e.GBP_INDEX_RATE, e.INDEX_RATE, e.INDEX_NAME FROM VISTA_REPORTING.dbo.FX_RATES e          WHERE e.CURRENCY = t.SM_CURRENCY and CONVERT(date, e.MARKDATE) <= CONVERT(date, t.EXECUTION_TIME)         ORDER BY e.MARKDATE DESC) e      WHERE EXISTS (SELECT tr.ORD_NUM FROM Vista_REPORTING.dbo.TRD_ORDERS tr WHERE tr.DEALING_DESK = 'Fixed Income' AND tr.ORD_NUM = t.ORD_NUM)     GROUP BY od.ORD_NUM, od.ORD_DETAIL_FUND, oc.TRD_ORD, t.SM_CURRENCY, t.TRD_CURRENCY, e.GBP_INDEX_RATE, e.INDEX_RATE, ccy.CURRENCY             IF OBJECT_ID('tempdb..#temp_oi_portgolio_groups', 'U') IS NOT NULL DROP TABLE #temp_oi_portgolio_groups     SELECT DISTINCT      pg.*,      CASE        WHEN pg2.descendant IS NOT NULL THEN 1       ELSE 0      END AS MG_RET_FI_FLAG     INTO #temp_oi_portgolio_groups     FROM VISTA_STAGING.dbo.PORTFOLIO_GROUP_CLOSURE_TABLE pg     LEFT JOIN (SELECT DISTINCT descendant FROM Vista_STAGING.dbo.PORTFOLIO_GROUP_CLOSURE_TABLE where ancestor = 'MG_RET_FI') pg2 ON pg2.descendant = pg.descendant             IF OBJECT_ID('tempdb..#temp_oi_trades', 'U') IS NOT NULL DROP TABLE #temp_oi_trades     SELECT DISTINCT      trd.CLIENT_EXECUTION_NUM,      CONVERT(DATE, trd.EXECUTION_TIME) AS EXECUTION_TIME,      trd.FUND,       pg.ancestor,      pg.descendant,      pg.depth     INTO #temp_oi_trades     FROM VISTA_REPORTING.dbo.TRADES trd      LEFT JOIN #temp_oi_portgolio_groups pg ON pg.descendant = trd.PORTFOLIOS_PORTFOLIO_NAME     WHERE (pg.ancestor IN ('MG_PRIL', 'MG_AALPXL', 'MG_ZI', 'MG_ZIB', 'MG_BT_PEN', 'MG_C_INS', 'MG_C_PEN', 'MG_PPL', 'MG_PSPS') OR CHARINDEX('_CF', pg.ancestor) > 0)        AND EXISTS (SELECT tr.ORD_NUM FROM Vista_REPORTING.dbo.TRD_ORDERS tr WHERE tr.DEALING_DESK = 'Fixed Income' AND tr.ORD_NUM = trd.ORD_NUM)       AND pg.depth != 0             IF OBJECT_ID('tempdb..#temp_nav', 'U') IS NOT NULL DROP TABLE #temp_nav      SELECT DISTINCT       n.PORTFOLIO_NAME,      n.FUND,      CONVERT(DATE, n.NAV_PORT_DATE) AS NAV_PORT_DATE,      PULL_DATE,      pg.ancestor      INTO #temp_nav     FROM Vista_REPORTING.dbo.NAV n     INNER JOIN #temp_oi_portgolio_groups pg ON pg.descendant=n.PORTFOLIO_NAME     WHERE EXISTS (SELECT tot.ancestor FROM #temp_oi_trades tot WHERE tot.ancestor = pg.ancestor)             IF OBJECT_ID('tempdb..#temp_nav_pl', 'U') IS NOT NULL DROP TABLE #temp_nav_pl      SELECT DISTINCT       n.FUND,      n.PORTFOLIO_NAME,      n.NAV_PORT_DATE,      n.NAV_VALUE,      n.NAV_VALUE_GBP,      n.NAV_VALUE_USD,      n.PULL_DATE     INTO #temp_nav_pl     FROM Vista_REPORTING.dbo.NAV n     LEFT JOIN #temp_oi_portgolio_groups pg ON pg.descendant = n.PORTFOLIO_NAME     WHERE n.NAV_DATATYPE = 'NAV_FUND'         AND pg.ancestor NOT IN ('MG_PPL', 'MG_PRIL', 'MG_PXLF', 'PLI_CF', 'SFF_CF')         UNION          SELECT DISTINCT       n.FUND,      n.PORTFOLIO_NAME,      n.NAV_PORT_DATE,      n.NAV_VALUE,      n.NAV_VALUE_GBP,      n.NAV_VALUE_USD,      n.PULL_DATE     FROM Vista_REPORTING.dbo.NAV n     LEFT JOIN #temp_oi_portgolio_groups pg ON pg.descendant = n.PORTFOLIO_NAME     WHERE n.NAV_DATATYPE = 'TOT_ASSETS'         AND pg.ancestor IN ('MG_PPL', 'MG_PRIL', 'MG_PXLF', 'PLI_CF', 'SFF_CF')                 IF OBJECT_ID('tempdb..#temp_nav_date_table', 'U') IS NOT NULL DROP TABLE #temp_nav_date_table     SELECT DISTINCT      trd.CLIENT_EXECUTION_NUM,      trd.ancestor,      trd.depth,      n.PORTFOLIO_NAME,      n.FUND,      MAX(n.NAV_PORT_DATE) AS MAX_NAV_PORT,      MAX(n.PULL_DATE) AS MAX_PULL_DATE     INTO #temp_nav_date_table     FROM #temp_oi_trades trd      LEFT JOIN #temp_oi_portgolio_groups pg ON pg.ancestor = trd.ancestor     LEFT JOIN (SELECT DISTINCT PORTFOLIO_NAME, NAV_PORT_DATE, FUND, PULL_DATE          FROM #temp_nav) n         ON n.PORTFOLIO_NAME = pg.descendant AND n.NAV_PORT_DATE <= trd.EXECUTION_TIME     WHERE pg.depth != 0     group by       trd.CLIENT_EXECUTION_NUM,      trd.ancestor,      n.PORTFOLIO_NAME,      n.FUND,      trd.depth             IF OBJECT_ID('tempdb..#temp_nav_val_table', 'U') IS NOT NULL DROP TABLE #temp_nav_val_table     SELECT      trd.CLIENT_EXECUTION_NUM,      CASE        WHEN ccy.CURRENCY IS NOT NULL THEN SUM(distinct n.NAV_VALUE_USD)       ELSE SUM(distinct n.NAV_VALUE_GBP)      END AS NAV_VALUE_SUM     INTO #temp_nav_val_table     FROM VISTA_REPORTING.dbo.TRADES trd      LEFT JOIN Vista_STAGING.dbo.REF_FI_OI_EMCCY_TO_USD ccy ON ccy.CURRENCY = trd.SM_CURRENCY AND trd.EXECUTION_TIME BETWEEN ccy.DATE_FROM AND ccy.DATE_TO     LEFT JOIN #temp_nav_date_table ndt ON ndt.CLIENT_EXECUTION_NUM = trd.CLIENT_EXECUTION_NUM     LEFT JOIN #temp_nav_pl n ON n.FUND = ndt.FUND             AND n.NAV_PORT_DATE = ndt.MAX_NAV_PORT             AND n.PULL_DATE = ndt.MAX_PULL_DATE     LEFT JOIN (SELECT MULTI_FUND_ID, PRIMARY_MARKET, EMERGING_MARKET FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr ON trd.MULTI_FUND_ID = pr.MULTI_FUND_ID     WHERE EXISTS (SELECT pg2.descendant FROM #temp_oi_portgolio_groups pg2          WHERE pg2.descendant = TRD.PORTFOLIOS_PORTFOLIO_NAME          AND (pg2.ancestor IN ('MG_PRIL', 'MG_PXLF', 'MG_AALPXL', 'MG_ZI', 'MG_ZIB', 'MG_BT_PEN', 'MG_C_INS', 'MG_C_PEN', 'MG_PPL', 'MG_PSPS') OR CHARINDEX('_CF', ancestor) > 0))      AND ndt.depth != 0      AND pr.PRIMARY_MARKET = 1      AND trd.FinalFlag = 1         GROUP BY       trd.CLIENT_EXECUTION_NUM,      ccy.CURRENCY             IF OBJECT_ID('tempdb..#temp_nav_val_table_no_sum', 'U') IS NOT NULL DROP TABLE #temp_nav_val_table_no_sum     SELECT      trd.CLIENT_EXECUTION_NUM,      --ndt.      ndt.PORTFOLIO_NAME,      n.NAV_VALUE,      n.NAV_VALUE_GBP,      pr.EMERGING_MARKET,      trd.TRD_CURRENCY,      trd.EXECUTION_TIME,      n.NAV_PORT_DATE     INTO #temp_nav_val_table_no_sum     FROM VISTA_REPORTING.dbo.TRADES trd      LEFT JOIN #temp_nav_date_table ndt ON ndt.CLIENT_EXECUTION_NUM = trd.CLIENT_EXECUTION_NUM     LEFT JOIN #temp_nav_pl n ON n.FUND = ndt.FUND             AND n.NAV_PORT_DATE = ndt.MAX_NAV_PORT             AND n.PULL_DATE = ndt.MAX_PULL_DATE     LEFT JOIN (SELECT MULTI_FUND_ID, PRIMARY_MARKET, EMERGING_MARKET FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr ON trd.MULTI_FUND_ID = pr.MULTI_FUND_ID     WHERE EXISTS (SELECT pg2.descendant FROM #temp_oi_portgolio_groups pg2          WHERE pg2.descendant = TRD.PORTFOLIOS_PORTFOLIO_NAME          AND (pg2.ancestor IN ('MG_PRIL', 'MG_PXLF', 'MG_AALPXL', 'MG_ZI', 'MG_ZIB', 'MG_BT_PEN', 'MG_C_INS', 'MG_C_PEN', 'MG_PPL', 'MG_PSPS') OR CHARINDEX('_CF', ancestor) > 0))      AND ndt.depth != 0      AND pr.PRIMARY_MARKET = 1      AND trd.FinalFlag = 1             IF OBJECT_ID('tempdb..#base_lev_oi', 'U') IS NOT NULL DROP TABLE #base_lev_oi      SELECT DISTINCT      od.ORD_NUM AS ORD_NUM,      trd.CLIENT_EXECUTION_NUM,      t.DEALING_DESK,      trd.PORTFOLIOS_PORTFOLIO_NAME,      pg.ancestor,      CASE        WHEN pg.MG_RET_FI_FLAG = 1 THEN 1.75       WHEN pg.MG_RET_FI_FLAG = 0 THEN COALESCE(ref.PERCENTAGE_THRESHOLD, 1)      END AS PERCENTAGE_THRESHOLD,      ref.NOMINAL_THRESHOLD,      ((od.MAX_FACE*trd.TRD_PRICE_GBP)/n.NAV_VALUE_GBP) AS NON_EM_CALC,      ((od.MAX_FACE*trd.TRD_PRICE)/n.NAV_VALUE) AS EM_CALC,      n.NAV_VALUE_GBP,      pr.EMERGING_MARKET,      pg.MG_RET_FI_FLAG,      n.NAV_VALUE,      CASE       WHEN trd.EXECUTION_TIME < '2020-08-01' THEN 0       WHEN n.NAV_VALUE = 0 THEN 0 -- Need to guard against divide by zero errors       WHEN pg.MG_RET_FI_FLAG = 1          AND ccy.CURRENCY IS NOT NULL         AND ((od.MAX_FACE*trd.TRD_PRICE)/n.NAV_VALUE) > 1.75 THEN 1       WHEN pg.MG_RET_FI_FLAG = 1          AND ccy.CURRENCY IS NULL          AND ((od.MAX_FACE*trd.TRD_PRICE_GBP)/n.NAV_VALUE_GBP) > 1.75 THEN 1       WHEN pg.MG_RET_FI_FLAG = 0          AND ccy.CURRENCY IS NOT NULL           AND ref.[FUND CODE] IS NOT NULL            AND ref.PERCENTAGE_THRESHOLD IS NOT NULL            AND ((od.MAX_FACE*trd.TRD_PRICE)/n.NAV_VALUE) > ref.PERCENTAGE_THRESHOLD THEN 1       WHEN pg.MG_RET_FI_FLAG = 0         AND ccy.CURRENCY IS NULL           AND ref.[FUND CODE] IS NOT NULL            AND ref.PERCENTAGE_THRESHOLD IS NOT NULL          AND ((od.MAX_FACE*trd.TRD_PRICE_GBP)/n.NAV_VALUE_GBP) > ref.PERCENTAGE_THRESHOLD THEN 1 -- Use threshold table where possible and default to 1% where not       WHEN pg.MG_RET_FI_FLAG = 0          AND ccy.CURRENCY IS NOT NULL           AND ref.[FUND CODE] IS NOT NULL            AND ref.NOMINAL_THRESHOLD IS NOT NULL            AND (od.MAX_FACE*trd.TRD_PRICE) > ref.NOMINAL_THRESHOLD THEN 1       WHEN pg.MG_RET_FI_FLAG = 0          AND ccy.CURRENCY IS NULL           AND ref.[FUND CODE] IS NOT NULL            AND ref.NOMINAL_THRESHOLD IS NOT NULL          AND (od.MAX_FACE*trd.TRD_PRICE_GBP) > ref.NOMINAL_THRESHOLD THEN 1 -- Use threshold table where possible and default to 1% where not       WHEN pg.MG_RET_FI_FLAG = 0          AND ccy.CURRENCY IS NOT NULL            AND ref.[FUND CODE] IS NULL            AND ((od.MAX_FACE*trd.TRD_PRICE)/n.NAV_VALUE) > 1 THEN 1       WHEN pg.MG_RET_FI_FLAG = 0          AND ccy.CURRENCY IS NULL           AND ref.[FUND CODE] IS NULL            AND ((od.MAX_FACE*trd.TRD_PRICE_GBP)/n.NAV_VALUE_GBP) > 1  THEN 1       ELSE 0      END AS ORDER_INFLATION_EXCEPTION     INTO #base_lev_oi     FROM VISTA_REPORTING.dbo.TRADES trd      LEFT JOIN Vista_STAGING.dbo.REF_FI_OI_EMCCY_TO_USD ccy ON ccy.CURRENCY = trd.SM_CURRENCY AND trd.EXECUTION_TIME BETWEEN ccy.DATE_FROM AND ccy.DATE_TO       LEFT JOIN #temp_oi_portgolio_groups pg ON pg.descendant = trd.PORTFOLIOS_PORTFOLIO_NAME     LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS t on t.ORD_NUM=trd.ORD_NUM     LEFT JOIN #max_face od ON od.TRD_ORD=t.ORD_NUM AND trd.FUND = od.ORD_DETAIL_FUND     OUTER APPLY (SELECT TOP 1 n.NAV_VALUE, n.NAV_VALUE_GBP          FROM #temp_nav_pl n          INNER JOIN #temp_nav_date_table ndt on ndt.FUND = n.FUND and ndt.MAX_PULL_DATE = n.PULL_DATE         WHERE n.FUND=trd.FUND and n.NAV_PORT_DATE<=convert(date, t.AUTH_TIME) AND NAV_VALUE <> 0          ORDER BY n.NAV_PORT_DATE DESC) n     LEFT JOIN (SELECT MULTI_FUND_ID, PRIMARY_MARKET, MAX(EMERGING_MARKET) AS EMERGING_MARKET           FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE          GROUP BY MULTI_FUND_ID, PRIMARY_MARKET) pr ON trd.MULTI_FUND_ID = pr.MULTI_FUND_ID     LEFT JOIN VISTA_STAGING.dbo.REF_FI_LL_ORDER_INFLATION_THRESHOLD ref ON ref.[FUND CODE] = trd.PORTFOLIOS_PORTFOLIO_NAME                          AND t.AUTH_TIME BETWEEN ref.DATE_FROM AND ref.DATE_TO     WHERE       t.DEALING_DESK = 'Fixed Income'      AND NOT EXISTS (SELECT pg2.descendant           FROM #temp_oi_portgolio_groups pg2          WHERE pg2.descendant = pg.descendant             AND (pg2.ancestor IN ('MG_PRIL', 'MG_PXLF', 'MG_AALPXL', 'MG_ZI', 'MG_ZIB', 'MG_BT_PEN', 'MG_C_INS', 'MG_C_PEN', 'MG_PPL', 'MG_PSPS') OR CHARINDEX('_CF', ancestor) > 0))      AND pr.PRIMARY_MARKET = 1      AND trd.FinalFlag = 1      AND od.ORD_DETAIL_FUND IS NOT NULL          UNION         SELECT DISTINCT      od.ORD_NUM AS ORD_NUM,      trd.CLIENT_EXECUTION_NUM,      t.DEALING_DESK,      trd.PORTFOLIOS_PORTFOLIO_NAME,      pg.ancestor,      CASE        WHEN pg.MG_RET_FI_FLAG = 1 THEN 1.75       ELSE COALESCE(ref.PERCENTAGE_THRESHOLD, 1)       END AS PERCENTAGE_THRESHOLD,      ref.NOMINAL_THRESHOLD,      CASE WHEN nvt.NAV_VALUE_SUM !=0 THEN ((od.MAX_FACE*trd.TRD_PRICE_GBP)/nvt.NAV_VALUE_SUM) ELSE NULL END,      CASE WHEN nvt.NAV_VALUE_SUM !=0 THEN ((od.MAX_FACE*trd.TRD_PRICE)/nvt.NAV_VALUE_SUM) ELSE NULL END,      nvt.NAV_VALUE_SUM,      pr.EMERGING_MARKET,      pg.MG_RET_FI_FLAG,      nvt.NAV_VALUE_SUM,      CASE       WHEN trd.EXECUTION_TIME < '2020-08-01' THEN 0       WHEN ISNULL(nvt.NAV_VALUE_SUM, 0) = 0 THEN 0 -- Need to guard against divide by zero errors       WHEN pg.MG_RET_FI_FLAG = 1         AND ccy.CURRENCY IS NOT NULL          AND ((od.MAX_FACE*trd.TRD_PRICE)/nvt.NAV_VALUE_SUM) > 1.75 THEN 1       WHEN pg.MG_RET_FI_FLAG = 1         AND ccy.CURRENCY IS NULL         AND ((od.MAX_FACE*trd.TRD_PRICE_GBP)/nvt.NAV_VALUE_SUM) > 1.75 THEN 1       WHEN pg.MG_RET_FI_FLAG = 0         AND ccy.CURRENCY IS NOT NULL         AND ref.[FUND CODE] IS NOT NULL          AND ref.PERCENTAGE_THRESHOLD IS NOT NULL          AND ((od.MAX_FACE*trd.TRD_PRICE)/nvt.NAV_VALUE_SUM) > ref.PERCENTAGE_THRESHOLD THEN 1 -- Use threshold table where possible and default to 1% where not       WHEN pg.MG_RET_FI_FLAG = 0         AND ccy.CURRENCY IS NULL         AND ref.[FUND CODE] IS NOT NULL          AND ref.PERCENTAGE_THRESHOLD IS NOT NULL          AND ((od.MAX_FACE*trd.TRD_PRICE_GBP)/nvt.NAV_VALUE_SUM) > ref.PERCENTAGE_THRESHOLD THEN 1 -- Use threshold table where possible and default to 1% where not       WHEN pg.MG_RET_FI_FLAG = 0         AND ccy.CURRENCY IS NOT NULL         AND ref.[FUND CODE] IS NOT NULL          AND ref.NOMINAL_THRESHOLD IS NOT NULL         AND (od.MAX_FACE*trd.TRD_PRICE) > ref.NOMINAL_THRESHOLD THEN 1 -- Use threshold table where possible and default to 1% where not       WHEN pg.MG_RET_FI_FLAG = 0         AND ccy.CURRENCY IS NULL         AND ref.[FUND CODE] IS NOT NULL          AND ref.NOMINAL_THRESHOLD IS NOT NULL         AND (od.MAX_FACE*trd.TRD_PRICE_GBP) > ref.NOMINAL_THRESHOLD THEN 1 -- Use threshold table where possible and default to 1% where not       WHEN pg.MG_RET_FI_FLAG = 0         AND ccy.CURRENCY IS NOT NULL              AND ref.[FUND CODE] IS NULL          AND ((od.MAX_FACE*trd.TRD_PRICE)/nvt.NAV_VALUE_SUM) > 1 THEN 1       WHEN pg.MG_RET_FI_FLAG = 0         AND ccy.CURRENCY IS NULL              AND ref.[FUND CODE] IS NULL          AND ((od.MAX_FACE*trd.TRD_PRICE_GBP)/nvt.NAV_VALUE_SUM) > 1 THEN 1       ELSE 0      END AS ORDER_INFLATION_EXCEPTION     FROM VISTA_REPORTING.dbo.TRADES trd      LEFT JOIN Vista_STAGING.dbo.REF_FI_OI_EMCCY_TO_USD ccy ON ccy.CURRENCY = trd.SM_CURRENCY AND trd.EXECUTION_TIME BETWEEN ccy.DATE_FROM AND ccy.DATE_TO         LEFT JOIN #temp_nav_val_table nvt ON nvt.CLIENT_EXECUTION_NUM = trd.CLIENT_EXECUTION_NUM     LEFT JOIN #temp_oi_portgolio_groups pg ON pg.descendant = trd.PORTFOLIOS_PORTFOLIO_NAME     LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS t on t.ORD_NUM=trd.ORD_NUM     LEFT JOIN #max_face od ON od.TRD_ORD=t.ORD_NUM AND trd.FUND = od.ORD_DETAIL_FUND     LEFT JOIN (SELECT MULTI_FUND_ID, PRIMARY_MARKET, MAX(EMERGING_MARKET) AS EMERGING_MARKET           FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE          GROUP BY MULTI_FUND_ID, PRIMARY_MARKET) pr ON trd.MULTI_FUND_ID = pr.MULTI_FUND_ID     LEFT JOIN VISTA_STAGING.dbo.REF_FI_LL_ORDER_INFLATION_THRESHOLD ref ON ref.[FUND CODE] = trd.PORTFOLIOS_PORTFOLIO_NAME                          AND t.AUTH_TIME BETWEEN ref.DATE_FROM AND ref.DATE_TO     WHERE       t.DEALING_DESK = 'Fixed Income'      AND EXISTS (SELECT pg2.descendant FROM #temp_oi_portgolio_groups pg2         WHERE pg2.descendant = pg.descendant            AND (pg2.ancestor IN ('MG_PRIL', 'MG_PXLF', 'MG_AALPXL', 'MG_ZI', 'MG_ZIB', 'MG_BT_PEN', 'MG_C_INS', 'MG_C_PEN', 'MG_PPL', 'MG_PSPS') OR CHARINDEX('_CF', ancestor) > 0))      AND pr.PRIMARY_MARKET = 1      AND trd.FinalFlag = 1      AND od.ORD_DETAIL_FUND IS NOT NULL             IF OBJECT_ID('tempdb..#base_level_oi_final', 'U') IS NOT NULL DROP TABLE #base_level_oi_final     SELECT      ORD_NUM,      CLIENT_EXECUTION_NUM,      DEALING_DESK,      PORTFOLIOS_PORTFOLIO_NAME,      MAX(ORDER_INFLATION_EXCEPTION) AS ORDER_INFLATION_EXCEPTION,      CASE WHEN MAX(ORDER_INFLATION_EXCEPTION) = 1 THEN GETDATE() ELSE NULL END AS OI_CREATETIME     INTO #base_level_oi_final     FROM #base_lev_oi     GROUP BY      ORD_NUM,      CLIENT_EXECUTION_NUM,      DEALING_DESK,      PORTFOLIOS_PORTFOLIO_NAME             IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     select distinct      CONCAT(CLIENT_EXECUTION_NUM,'_8') AS ID,      '1A1' AS STATUS,      NULL AS FINAL_UPDATED_TIME     into #temp_status_table     from #base_level_oi_final     where ORDER_INFLATION_EXCEPTION != 0          MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET       T.ID=T.ID,       T.STATUS=T.STATUS,       T.DEALING_DESK = 'Fixed Income',       T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'Fixed Income');             --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      t.MULTI_FUND_ID,      t.ORD_NUM AS TRD_ORD,      NULL AS PM_ORD,      'Order Inflation' AS Exception_Type,      CONCAT(ex.CLIENT_EXECUTION_NUM,'_8') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'For Review' AS Status,      ex.CLIENT_EXECUTION_NUM AS ClientExecID,      'Fixed Income' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      TRD_TRADER AS DEALER,      '1A1' AS STATUS_ID,      AUTH_TIME AS ORD_AUTH,      EXECUTION_TIME AS TRADE_EXEC     INTO #temp_audit     FROM #base_level_oi_final ex     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID,CLIENT_EXECUTION_NUM,  ORD_NUM, EXECUTION_TIME, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t     ON ex.CLIENT_EXECUTION_NUM = t.CLIENT_EXECUTION_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o     ON t.ORD_NUM = trd_o.ORD_NUM     WHERE ORDER_INFLATION_EXCEPTION != 0          MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);             IF OBJECT_ID('VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_FI_TABLE', 'U') IS NULL     SELECT *     INTO VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_FI_TABLE     FROM #base_level_oi_final         ELSE         MERGE VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_FI_TABLE AS T     USING #base_level_oi_final AS S     ON (T.ORD_NUM = S.ORD_NUM      AND T.CLIENT_EXECUTION_NUM = S.CLIENT_EXECUTION_NUM       AND T.DEALING_DESK = S.DEALING_DESK      AND T.PORTFOLIOS_PORTFOLIO_NAME = S.PORTFOLIOS_PORTFOLIO_NAME)     WHEN MATCHED      THEN       UPDATE SET         T.ORDER_INFLATION_EXCEPTION = CASE WHEN S.ORDER_INFLATION_EXCEPTION > T.ORDER_INFLATION_EXCEPTION THEN S.ORDER_INFLATION_EXCEPTION ELSE T.ORDER_INFLATION_EXCEPTION END,       T.OI_CREATETIME = CASE WHEN S.ORDER_INFLATION_EXCEPTION > T.ORDER_INFLATION_EXCEPTION THEN S.OI_CREATETIME ELSE T.OI_CREATETIME END     WHEN NOT MATCHED       THEN INSERT (ORD_NUM,           CLIENT_EXECUTION_NUM,           DEALING_DESK,           PORTFOLIOS_PORTFOLIO_NAME,           ORDER_INFLATION_EXCEPTION,           OI_CREATETIME)        VALUES (S.ORD_NUM, S.CLIENT_EXECUTION_NUM, S.DEALING_DESK, S.PORTFOLIOS_PORTFOLIO_NAME,           S.ORDER_INFLATION_EXCEPTION, S.OI_CREATETIME);         IF OBJECT_ID('tempdb..#base_lev_oi', 'U') IS NOT NULL DROP TABLE #base_lev_oi     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     IF OBJECT_ID('tempdb..#base_level_oi_final', 'U') IS NOT NULL DROP TABLE #base_level_oi_final     IF OBJECT_ID('tempdb..#temp_oi_portgolio_groups', 'U') IS NOT NULL DROP TABLE #temp_oi_portgolio_groups     IF OBJECT_ID('tempdb..#max_face', 'U') IS NOT NULL DROP TABLE #max_face     IF OBJECT_ID('tempdb..#temp_oi_trades', 'U') IS NOT NULL DROP TABLE #temp_oi_trades     IF OBJECT_ID('tempdb..#temp_nav_date_table', 'U') IS NOT NULL DROP TABLE #temp_nav_date_table     IF OBJECT_ID('tempdb..#temp_nav_val_table', 'U') IS NOT NULL DROP TABLE #temp_nav_val_table     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit            END            --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_08_ORDER_INFLATION_FI_UNTIL_2021_10_15  CreateDate: 2025-06-26 18:35:31.090  ModifyDate: 2025-06-26 18:35:31.090  --- DEFINITION START ---  -- =============================================    -- Author:  <Chandarana, Sohini>    -- Create date: <04/23/2018>    -- Description:     -- <Checks that the value of each trade is lower than the    -- NAV threshold, currently 1%. Flags trades as exceptions if    -- otherwise.    -- Stored procedure as appropriated from VG_08_ORDER_INFLATION_FI>    -- =============================================        -- ***************VERSION CONTROL***************    -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.    -- 2020-07-10 - DDC: Added enhancements requested by Andrew Woo detailed in the    --                   Enhancements V documentation            ----------------------New Comment style-----------------------------------        --2021-08-02 Matej Miter Created for Jira:    --T-0-17044 - Added Additional logic within temp_nav_date_table to extract the max port date with Nav value from Nav table;    -- Created additional trade_prices table to accomodate logic for conversion of trd price which is used for calculation of Order inflation exceptions        --2021-08-13, Matej Miter created for Jira:    --T-0-17285 - Fixed typo within  tables in order to retrive correct client funds for specific base funds    -- *********************************************        CREATE PROCEDURE [dbo].[VG_08_ORDER_INFLATION_FI_UNTIL_2021_10_15]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         --DECLARE @DATE_FILTER AS DATE --Declare date filter to only select data from current pull date     --SET @DATE_FILTER = CONVERT(DATE, GETDATE())         IF OBJECT_ID('tempdb..#max_face', 'U') IS NOT NULL DROP TABLE #max_face     SELECT DISTINCT      od.ORD_NUM      ,od.ORD_DETAIL_FUND      ,CASE       WHEN ccy.CURRENCY IS NULL AND t.TRD_CURRENCY != t.SM_CURRENCY THEN MAX(od.ORD_DETAIL_FACE)/e.GBP_INDEX_RATE       WHEN ccy.CURRENCY IS NOT NULL AND t.TRD_CURRENCY != t.SM_CURRENCY THEN MAX(od.ORD_DETAIL_FACE)/e.INDEX_RATE       ELSE MAX(od.ORD_DETAIL_FACE)      END AS MAX_FACE      ,oc.TRD_ORD     INTO #max_face     FROM VISTA_STAGING.dbo.ORDERS_DETAIL od     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD = od.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM = oc.TRD_ORD     LEFT JOIN VISTA_STAGING.dbo.REF_FI_OI_EMCCY_TO_USD ccy ON ccy.CURRENCY = t.SM_CURRENCY AND t.EXECUTION_TIME BETWEEN ccy.DATE_FROM AND ccy.DATE_TO      OUTER APPLY (SELECT TOP 1 e.GBP_INDEX_RATE, e.INDEX_RATE, e.INDEX_NAME FROM VISTA_REPORTING.dbo.FX_RATES e          WHERE e.CURRENCY = t.SM_CURRENCY and CONVERT(date, e.MARKDATE) <= CONVERT(date, t.EXECUTION_TIME)         ORDER BY e.MARKDATE DESC) e      WHERE EXISTS (SELECT tr.ORD_NUM FROM Vista_REPORTING.dbo.TRD_ORDERS tr WHERE tr.DEALING_DESK = 'Fixed Income' AND tr.ORD_NUM = t.ORD_NUM)     GROUP BY od.ORD_NUM, od.ORD_DETAIL_FUND, oc.TRD_ORD, t.SM_CURRENCY, t.TRD_CURRENCY, e.GBP_INDEX_RATE, e.INDEX_RATE, ccy.CURRENCY             IF OBJECT_ID('tempdb..#temp_oi_portgolio_groups', 'U') IS NOT NULL DROP TABLE #temp_oi_portgolio_groups     SELECT DISTINCT      pg.*,      CASE        WHEN pg2.descendant IS NOT NULL THEN 1       ELSE 0      END AS MG_RET_FI_FLAG     INTO #temp_oi_portgolio_groups     FROM VISTA_STAGING.dbo.PORTFOLIO_GROUP_CLOSURE_TABLE pg     LEFT JOIN (SELECT DISTINCT descendant FROM Vista_STAGING.dbo.PORTFOLIO_GROUP_CLOSURE_TABLE where ancestor = 'MG_RET_FI') pg2 ON pg2.descendant = pg.descendant             IF OBJECT_ID('tempdb..#temp_oi_trades', 'U') IS NOT NULL DROP TABLE #temp_oi_trades     SELECT DISTINCT      trd.CLIENT_EXECUTION_NUM,      CONVERT(DATE, trd.EXECUTION_TIME) AS EXECUTION_TIME,      trd.FUND,       pg.ancestor,      pg.descendant,      pg.depth     INTO #temp_oi_trades     FROM VISTA_REPORTING.dbo.TRADES trd      LEFT JOIN #temp_oi_portgolio_groups pg ON pg.descendant = trd.PORTFOLIOS_PORTFOLIO_NAME     --T-0-17285 - changed MG_AALPXL into MG_ALLPXL as it was typo     WHERE (pg.ancestor IN ('MG_PRIL', 'MG_ALLPXL', 'MG_ZI', 'MG_ZIB', 'MG_BT_PEN', 'MG_C_INS', 'MG_C_PEN', 'MG_PPL', 'MG_PSPS') OR CHARINDEX('_CF', pg.ancestor) > 0)        AND EXISTS (SELECT tr.ORD_NUM FROM Vista_REPORTING.dbo.TRD_ORDERS tr WHERE tr.DEALING_DESK = 'Fixed Income' AND tr.ORD_NUM = trd.ORD_NUM)       AND pg.depth != 0     --ENd of T-0-17285         IF OBJECT_ID('tempdb..#temp_nav', 'U') IS NOT NULL DROP TABLE #temp_nav      SELECT DISTINCT       n.PORTFOLIO_NAME,      n.FUND,      --T-0-17044 - Added Nav Dataype for later use within temp_nav_date_table      n.NAV_DATATYPE,      --End of T-0-17044      CONVERT(DATE, n.NAV_PORT_DATE) AS NAV_PORT_DATE,      PULL_DATE,      pg.ancestor      INTO #temp_nav     FROM Vista_REPORTING.dbo.NAV n     INNER JOIN #temp_oi_portgolio_groups pg ON pg.descendant=n.PORTFOLIO_NAME     WHERE EXISTS (SELECT tot.ancestor FROM #temp_oi_trades tot WHERE tot.ancestor = pg.ancestor)             IF OBJECT_ID('tempdb..#temp_nav_pl', 'U') IS NOT NULL DROP TABLE #temp_nav_pl      SELECT DISTINCT       n.FUND,      n.PORTFOLIO_NAME,      n.NAV_PORT_DATE,      n.NAV_VALUE,      n.NAV_VALUE_GBP,      n.NAV_VALUE_USD,      n.PULL_DATE     INTO #temp_nav_pl     FROM Vista_REPORTING.dbo.NAV n     LEFT JOIN #temp_oi_portgolio_groups pg ON pg.descendant = n.PORTFOLIO_NAME     WHERE n.NAV_DATATYPE = 'NAV_FUND'         AND pg.ancestor NOT IN ('MG_PPL', 'MG_PRIL', 'MG_PXLF', 'PLI_CF', 'SFF_CF')         UNION          SELECT DISTINCT       n.FUND,      n.PORTFOLIO_NAME,      n.NAV_PORT_DATE,      n.NAV_VALUE,      n.NAV_VALUE_GBP,      n.NAV_VALUE_USD,      n.PULL_DATE     FROM Vista_REPORTING.dbo.NAV n     LEFT JOIN #temp_oi_portgolio_groups pg ON pg.descendant = n.PORTFOLIO_NAME     WHERE n.NAV_DATATYPE = 'TOT_ASSETS'         AND pg.ancestor IN ('MG_PPL', 'MG_PRIL', 'MG_PXLF', 'PLI_CF', 'SFF_CF')             --T-0-17044 - Added additional filter with Nav_Datatype in order to extarct correct max pull_date/Nav port date from Nav table     IF OBJECT_ID('tempdb..#temp_nav_date_table', 'U') IS NOT NULL DROP TABLE #temp_nav_date_table     SELECT DISTINCT      trd.CLIENT_EXECUTION_NUM,      trd.ancestor,      trd.depth,      n.PORTFOLIO_NAME,      n.FUND,      MAX(n.NAV_PORT_DATE) AS MAX_NAV_PORT,      MAX(n.PULL_DATE) AS MAX_PULL_DATE     INTO #temp_nav_date_table     FROM #temp_oi_trades trd      LEFT JOIN #temp_oi_portgolio_groups pg ON pg.ancestor = trd.ancestor     LEFT JOIN (SELECT DISTINCT PORTFOLIO_NAME, NAV_PORT_DATE, FUND, PULL_DATE, NAV_DATATYPE         FROM #temp_nav) n         ON n.PORTFOLIO_NAME = pg.descendant AND n.NAV_PORT_DATE <= trd.EXECUTION_TIME     WHERE pg.depth != 0      AND n.NAV_DATATYPE = 'NAV_FUND'         AND pg.ancestor NOT IN ('MG_PPL', 'MG_PRIL', 'MG_PXLF', 'PLI_CF', 'SFF_CF')      group by       trd.CLIENT_EXECUTION_NUM,      trd.ancestor,      n.PORTFOLIO_NAME,      n.FUND,      trd.depth            UNION         SELECT DISTINCT      trd.CLIENT_EXECUTION_NUM,      trd.ancestor,      trd.depth,      n.PORTFOLIO_NAME,      n.FUND,      MAX(n.NAV_PORT_DATE) AS MAX_NAV_PORT,      MAX(n.PULL_DATE) AS MAX_PULL_DATE     FROM #temp_oi_trades trd      LEFT JOIN #temp_oi_portgolio_groups pg ON pg.ancestor = trd.ancestor     LEFT JOIN (SELECT DISTINCT PORTFOLIO_NAME, NAV_PORT_DATE, FUND, PULL_DATE, NAV_DATATYPE         FROM #temp_nav) n         ON n.PORTFOLIO_NAME = pg.descendant AND n.NAV_PORT_DATE <= trd.EXECUTION_TIME     WHERE pg.depth != 0 AND     n.NAV_DATATYPE = 'TOT_ASSETS'         AND pg.ancestor IN ('MG_PPL', 'MG_PRIL', 'MG_PXLF', 'PLI_CF', 'SFF_CF')      group by       trd.CLIENT_EXECUTION_NUM,      trd.ancestor,      n.PORTFOLIO_NAME,      n.FUND,      trd.depth            --End of T-0-17044         IF OBJECT_ID('tempdb..#temp_nav_val_table', 'U') IS NOT NULL DROP TABLE #temp_nav_val_table     SELECT      trd.CLIENT_EXECUTION_NUM,      CASE        WHEN ccy.CURRENCY IS NOT NULL THEN SUM(distinct n.NAV_VALUE_USD)       ELSE SUM(distinct n.NAV_VALUE_GBP)      END AS NAV_VALUE_SUM     INTO #temp_nav_val_table     FROM VISTA_REPORTING.dbo.TRADES trd      LEFT JOIN Vista_STAGING.dbo.REF_FI_OI_EMCCY_TO_USD ccy ON ccy.CURRENCY = trd.SM_CURRENCY AND trd.EXECUTION_TIME BETWEEN ccy.DATE_FROM AND ccy.DATE_TO     LEFT JOIN #temp_nav_date_table ndt ON ndt.CLIENT_EXECUTION_NUM = trd.CLIENT_EXECUTION_NUM     LEFT JOIN #temp_nav_pl n ON n.FUND = ndt.FUND             AND n.NAV_PORT_DATE = ndt.MAX_NAV_PORT             AND n.PULL_DATE = ndt.MAX_PULL_DATE     LEFT JOIN (SELECT MULTI_FUND_ID, PRIMARY_MARKET, EMERGING_MARKET FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr ON trd.MULTI_FUND_ID = pr.MULTI_FUND_ID     WHERE EXISTS (SELECT pg2.descendant FROM #temp_oi_portgolio_groups pg2     --T-0-17285 - fixed typo in portfolio group          WHERE pg2.descendant = TRD.PORTFOLIOS_PORTFOLIO_NAME          AND (pg2.ancestor IN ('MG_PRIL', 'MG_PXLF', 'MG_ALLPXL', 'MG_ZI', 'MG_ZIB', 'MG_BT_PEN', 'MG_C_INS', 'MG_C_PEN', 'MG_PPL', 'MG_PSPS') OR CHARINDEX('_CF', ancestor) > 0))      AND ndt.depth != 0      AND pr.PRIMARY_MARKET = 1      AND trd.FinalFlag = 1     --End of T-0-17285      GROUP BY       trd.CLIENT_EXECUTION_NUM,      ccy.CURRENCY             IF OBJECT_ID('tempdb..#temp_nav_val_table_no_sum', 'U') IS NOT NULL DROP TABLE #temp_nav_val_table_no_sum     SELECT      trd.CLIENT_EXECUTION_NUM,      --ndt.      ndt.PORTFOLIO_NAME,      n.NAV_VALUE,      n.NAV_VALUE_GBP,      pr.EMERGING_MARKET,      trd.TRD_CURRENCY,      trd.EXECUTION_TIME,      n.NAV_PORT_DATE     INTO #temp_nav_val_table_no_sum     FROM VISTA_REPORTING.dbo.TRADES trd      LEFT JOIN #temp_nav_date_table ndt ON ndt.CLIENT_EXECUTION_NUM = trd.CLIENT_EXECUTION_NUM     LEFT JOIN #temp_nav_pl n ON n.FUND = ndt.FUND             AND n.NAV_PORT_DATE = ndt.MAX_NAV_PORT             AND n.PULL_DATE = ndt.MAX_PULL_DATE     LEFT JOIN (SELECT MULTI_FUND_ID, PRIMARY_MARKET, EMERGING_MARKET FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr ON trd.MULTI_FUND_ID = pr.MULTI_FUND_ID     WHERE EXISTS (SELECT pg2.descendant FROM #temp_oi_portgolio_groups pg2     --T-0-17285 - fixed typo in portfolio group          WHERE pg2.descendant = TRD.PORTFOLIOS_PORTFOLIO_NAME          AND (pg2.ancestor IN ('MG_PRIL', 'MG_PXLF', 'MG_ALLPXL', 'MG_ZI', 'MG_ZIB', 'MG_BT_PEN', 'MG_C_INS', 'MG_C_PEN', 'MG_PPL', 'MG_PSPS') OR CHARINDEX('_CF', ancestor) > 0))      AND ndt.depth != 0      AND pr.PRIMARY_MARKET = 1      AND trd.FinalFlag = 1     -- END of T-0-17285         -- T-0-17044 - Created temp trade_prices table to accomodate currency conversion logic to be implemented for calculation of Order inflation exception     IF OBJECT_ID('tempdb..#trades_prices', 'U') IS NOT NULL DROP TABLE #trades_prices     SELECT      t.CLIENT_EXECUTION_NUM,     t.ORD_NUM,     CASE       WHEN ccy.CURRENCY IS NOT NULL AND t.TRD_CURRENCY != t.SM_CURRENCY THEN t.TRD_PRICE/e.INDEX_RATE       ELSE t.TRD_PRICE_GBP      END AS TRD_PRICE_CONVERTED,      CASE       WHEN ccy.CURRENCY IS NOT NULL AND t.TRD_CURRENCY != t.SM_CURRENCY THEN t.TRD_PRICE/e.GBP_INDEX_RATE       ELSE t.TRD_PRICE_GBP      END AS TRD_PRICE_CONVERTED_GBP     INTO #trades_prices     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN Vista_STAGING.dbo.REF_FI_OI_EMCCY_TO_USD ccy ON ccy.CURRENCY = t.SM_CURRENCY AND t.EXECUTION_TIME BETWEEN ccy.DATE_FROM AND ccy.DATE_TO       OUTER APPLY (SELECT TOP 1 e.GBP_INDEX_RATE, e.INDEX_RATE, e.INDEX_NAME FROM VISTA_REPORTING.dbo.FX_RATES e          WHERE e.CURRENCY = t.SM_CURRENCY and CONVERT(date, e.MARKDATE) <= CONVERT(date, t.EXECUTION_TIME)         ORDER BY e.MARKDATE DESC) e     --End of T-0-17044         IF OBJECT_ID('tempdb..#base_lev_oi', 'U') IS NOT NULL DROP TABLE #base_lev_oi      SELECT DISTINCT      od.ORD_NUM AS ORD_NUM,      trd.CLIENT_EXECUTION_NUM,      t.DEALING_DESK,      trd.PORTFOLIOS_PORTFOLIO_NAME,      pg.ancestor,      --T-0-17044 - We received few base funds under MG_RET_FI port group that have their own thresholdssaved within ref table      CASE        WHEN pg.MG_RET_FI_FLAG = 1 THEN COALESCE(ref.PERCENTAGE_THRESHOLD, 1.75)       WHEN pg.MG_RET_FI_FLAG = 0 THEN COALESCE(ref.PERCENTAGE_THRESHOLD, 1)      END AS PERCENTAGE_THRESHOLD,      --End of T-0-17044       ref.NOMINAL_THRESHOLD,      ((od.MAX_FACE*trd.TRD_PRICE_GBP)/n.NAV_VALUE_GBP) AS NON_EM_CALC,      ((od.MAX_FACE*trd.TRD_PRICE)/n.NAV_VALUE) AS EM_CALC,      n.NAV_VALUE_GBP,      pr.EMERGING_MARKET,      pg.MG_RET_FI_FLAG,      n.NAV_VALUE,      --T-0-17044 -- Added TRD_PRICE_CONVERTED from trade_prices table in order to use proper trd price within same currency, additionally added few more case when to capture changes within MG_RET_FI port group thresholds properly      CASE       WHEN trd.EXECUTION_TIME < '2020-08-01' THEN 0       WHEN n.NAV_VALUE = 0 THEN 0 -- Need to guard against divide by zero errors       WHEN pg.MG_RET_FI_FLAG = 1         AND ccy.CURRENCY IS NOT NULL           AND ref.[FUND CODE] IS NOT NULL            AND ref.PERCENTAGE_THRESHOLD IS NOT NULL            AND ((od.MAX_FACE*trd2.TRD_PRICE_CONVERTED)/n.NAV_VALUE) > ref.PERCENTAGE_THRESHOLD THEN 1       WHEN pg.MG_RET_FI_FLAG = 1         AND ccy.CURRENCY IS NULL           AND ref.[FUND CODE] IS NOT NULL            AND ref.PERCENTAGE_THRESHOLD IS NOT NULL          AND ((od.MAX_FACE*trd.TRD_PRICE_GBP)/n.NAV_VALUE) > ref.PERCENTAGE_THRESHOLD THEN 1 -- Use threshold table where possible and default to 1.75% where not       WHEN pg.MG_RET_FI_FLAG = 1          AND ccy.CURRENCY IS NOT NULL           AND ref.[FUND CODE] IS NOT NULL            AND ref.NOMINAL_THRESHOLD IS NOT NULL            AND (od.MAX_FACE*trd2.TRD_PRICE_CONVERTED) > ref.NOMINAL_THRESHOLD THEN 1       WHEN pg.MG_RET_FI_FLAG = 1          AND ccy.CURRENCY IS NULL           AND ref.[FUND CODE] IS NOT NULL            AND ref.NOMINAL_THRESHOLD IS NOT NULL          AND (od.MAX_FACE*trd.TRD_PRICE_GBP) > ref.NOMINAL_THRESHOLD THEN 1 -- Use threshold table where possible and default to 1.75% where not       WHEN pg.MG_RET_FI_FLAG = 1          AND ccy.CURRENCY IS NOT NULL         AND ref.[FUND CODE] IS NULL         AND ((od.MAX_FACE*trd2.TRD_PRICE_CONVERTED)/n.NAV_VALUE) > 1.75 THEN 1       WHEN pg.MG_RET_FI_FLAG = 1          AND ccy.CURRENCY IS NULL         AND ref.[FUND CODE] IS NULL          AND ((od.MAX_FACE*trd.TRD_PRICE_GBP)/n.NAV_VALUE_GBP) > 1.75 THEN 1       WHEN pg.MG_RET_FI_FLAG = 0          AND ccy.CURRENCY IS NOT NULL           AND ref.[FUND CODE] IS NOT NULL            AND ref.PERCENTAGE_THRESHOLD IS NOT NULL            AND ((od.MAX_FACE*trd2.TRD_PRICE_CONVERTED)/n.NAV_VALUE) > ref.PERCENTAGE_THRESHOLD THEN 1       WHEN pg.MG_RET_FI_FLAG = 0         AND ccy.CURRENCY IS NULL           AND ref.[FUND CODE] IS NOT NULL            AND ref.PERCENTAGE_THRESHOLD IS NOT NULL          AND ((od.MAX_FACE*trd.TRD_PRICE_GBP)/n.NAV_VALUE_GBP) > ref.PERCENTAGE_THRESHOLD THEN 1 -- Use threshold table where possible and default to 1% where not       WHEN pg.MG_RET_FI_FLAG = 0          AND ccy.CURRENCY IS NOT NULL           AND ref.[FUND CODE] IS NOT NULL            AND ref.NOMINAL_THRESHOLD IS NOT NULL            AND (od.MAX_FACE*trd2.TRD_PRICE_CONVERTED) > ref.NOMINAL_THRESHOLD THEN 1       WHEN pg.MG_RET_FI_FLAG = 0          AND ccy.CURRENCY IS NULL           AND ref.[FUND CODE] IS NOT NULL            AND ref.NOMINAL_THRESHOLD IS NOT NULL          AND (od.MAX_FACE*trd.TRD_PRICE_GBP) > ref.NOMINAL_THRESHOLD THEN 1 -- Use threshold table where possible and default to 1% where not       WHEN pg.MG_RET_FI_FLAG = 0          AND ccy.CURRENCY IS NOT NULL            AND ref.[FUND CODE] IS NULL            AND ((od.MAX_FACE*trd2.TRD_PRICE_CONVERTED)/n.NAV_VALUE) > 1 THEN 1       WHEN pg.MG_RET_FI_FLAG = 0          AND ccy.CURRENCY IS NULL           AND ref.[FUND CODE] IS NULL            AND ((od.MAX_FACE*trd.TRD_PRICE_GBP)/n.NAV_VALUE_GBP) > 1  THEN 1       ELSE 0      END AS ORDER_INFLATION_EXCEPTION     --End of T-0-17044     INTO #base_lev_oi     FROM VISTA_REPORTING.dbo.TRADES trd      --T-0-17044 -- Added left join to trades_prices table to get TRD_PRICE_CONVERTED field      left JOIN #trades_prices trd2 on trd2.CLIENT_EXECUTION_NUM = trd.CLIENT_EXECUTION_NUM      --End of T-0-17044     LEFT JOIN Vista_STAGING.dbo.REF_FI_OI_EMCCY_TO_USD ccy ON ccy.CURRENCY = trd.SM_CURRENCY AND trd.EXECUTION_TIME BETWEEN ccy.DATE_FROM AND ccy.DATE_TO       LEFT JOIN #temp_oi_portgolio_groups pg ON pg.descendant = trd.PORTFOLIOS_PORTFOLIO_NAME     LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS t on t.ORD_NUM=trd.ORD_NUM     LEFT JOIN #max_face od ON od.TRD_ORD=t.ORD_NUM AND trd.FUND = od.ORD_DETAIL_FUND     OUTER APPLY (SELECT TOP 1 n.NAV_VALUE, n.NAV_VALUE_GBP          FROM #temp_nav_pl n          INNER JOIN #temp_nav_date_table ndt on ndt.FUND = n.FUND and ndt.MAX_PULL_DATE = n.PULL_DATE         WHERE n.FUND=trd.FUND and n.NAV_PORT_DATE<=convert(date, t.AUTH_TIME) AND NAV_VALUE <> 0          ORDER BY n.NAV_PORT_DATE DESC) n     LEFT JOIN (SELECT MULTI_FUND_ID, PRIMARY_MARKET, MAX(EMERGING_MARKET) AS EMERGING_MARKET           FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE          GROUP BY MULTI_FUND_ID, PRIMARY_MARKET) pr ON trd.MULTI_FUND_ID = pr.MULTI_FUND_ID     LEFT JOIN VISTA_STAGING.dbo.REF_FI_LL_ORDER_INFLATION_THRESHOLD ref ON ref.[FUND CODE] = trd.PORTFOLIOS_PORTFOLIO_NAME                          AND t.AUTH_TIME BETWEEN ref.DATE_FROM AND ref.DATE_TO     WHERE       t.DEALING_DESK = 'Fixed Income'      AND NOT EXISTS (SELECT pg2.descendant           FROM #temp_oi_portgolio_groups pg2          WHERE pg2.descendant = pg.descendant          --T-0-17285 - fixed typo in portfolio group             AND (pg2.ancestor IN ('MG_PRIL', 'MG_PXLF', 'MG_ALLPXL', 'MG_ZI', 'MG_ZIB', 'MG_BT_PEN', 'MG_C_INS', 'MG_C_PEN', 'MG_PPL', 'MG_PSPS') OR CHARINDEX('_CF', ancestor) > 0))          --End of T-0-17285      AND pr.PRIMARY_MARKET = 1      AND trd.FinalFlag = 1      AND od.ORD_DETAIL_FUND IS NOT NULL          UNION         SELECT DISTINCT      od.ORD_NUM AS ORD_NUM,      trd.CLIENT_EXECUTION_NUM,      t.DEALING_DESK,      trd.PORTFOLIOS_PORTFOLIO_NAME,      pg.ancestor,      --T-0-17044 - We received few base funds under MG_RET_FI port group that have their own thresholdssaved within ref table      CASE        WHEN pg.MG_RET_FI_FLAG = 1 THEN COALESCE(ref.PERCENTAGE_THRESHOLD, 1.75)       ELSE COALESCE(ref.PERCENTAGE_THRESHOLD, 1)      END AS PERCENTAGE_THRESHOLD,      --End of T-0-17044       ref.NOMINAL_THRESHOLD,      CASE WHEN nvt.NAV_VALUE_SUM !=0 THEN ((od.MAX_FACE*trd.TRD_PRICE_GBP)/nvt.NAV_VALUE_SUM) ELSE NULL END,      CASE WHEN nvt.NAV_VALUE_SUM !=0 THEN ((od.MAX_FACE*trd.TRD_PRICE)/nvt.NAV_VALUE_SUM) ELSE NULL END,      nvt.NAV_VALUE_SUM,      pr.EMERGING_MARKET,      pg.MG_RET_FI_FLAG,      nvt.NAV_VALUE_SUM,      --T-0-17044 -- Added TRD_PRICE_CONVERTED from trade_prices table in order to use proper trd price within same currency, additionally added few more case when to capture changes within MG_RET_FI port group thresholds properly      CASE       WHEN trd.EXECUTION_TIME < '2020-08-01' THEN 0       WHEN ISNULL(nvt.NAV_VALUE_SUM, 0) = 0 THEN 0 -- Need to guard against divide by zero errors       WHEN pg.MG_RET_FI_FLAG = 1         AND ccy.CURRENCY IS NOT NULL           AND ref.[FUND CODE] IS NOT NULL            AND ref.PERCENTAGE_THRESHOLD IS NOT NULL            AND ((od.MAX_FACE*trd2.TRD_PRICE_CONVERTED)/nvt.NAV_VALUE_SUM) > ref.PERCENTAGE_THRESHOLD THEN 1       WHEN pg.MG_RET_FI_FLAG = 1         AND ccy.CURRENCY IS NULL           AND ref.[FUND CODE] IS NOT NULL            AND ref.PERCENTAGE_THRESHOLD IS NOT NULL          AND ((od.MAX_FACE*trd.TRD_PRICE_GBP)/nvt.NAV_VALUE_SUM) > ref.PERCENTAGE_THRESHOLD THEN 1 -- Use threshold table where possible and default to 1.75% where not       WHEN pg.MG_RET_FI_FLAG = 1          AND ccy.CURRENCY IS NOT NULL           AND ref.[FUND CODE] IS NOT NULL            AND ref.NOMINAL_THRESHOLD IS NOT NULL            AND (od.MAX_FACE*trd2.TRD_PRICE_CONVERTED) > ref.NOMINAL_THRESHOLD THEN 1       WHEN pg.MG_RET_FI_FLAG = 1          AND ccy.CURRENCY IS NULL           AND ref.[FUND CODE] IS NOT NULL            AND ref.NOMINAL_THRESHOLD IS NOT NULL          AND (od.MAX_FACE*trd.TRD_PRICE_GBP) > ref.NOMINAL_THRESHOLD THEN 1 -- Use threshold table where possible and default to 1.75% where not       WHEN pg.MG_RET_FI_FLAG = 1         AND ccy.CURRENCY IS NOT NULL          AND ref.[FUND CODE] IS NULL          AND ((od.MAX_FACE*trd2.TRD_PRICE_CONVERTED)/nvt.NAV_VALUE_SUM) > 1.75 THEN 1       WHEN pg.MG_RET_FI_FLAG = 1         AND ccy.CURRENCY IS NULL         AND ref.[FUND CODE] IS NULL          AND ((od.MAX_FACE*trd.TRD_PRICE_GBP)/nvt.NAV_VALUE_SUM) > 1.75 THEN 1       WHEN pg.MG_RET_FI_FLAG = 0         AND ccy.CURRENCY IS NOT NULL         AND ref.[FUND CODE] IS NOT NULL          AND ref.PERCENTAGE_THRESHOLD IS NOT NULL          AND ((od.MAX_FACE*trd2.TRD_PRICE_CONVERTED)/nvt.NAV_VALUE_SUM) > ref.PERCENTAGE_THRESHOLD THEN 1 -- Use threshold table where possible and default to 1% where not       WHEN pg.MG_RET_FI_FLAG = 0         AND ccy.CURRENCY IS NULL         AND ref.[FUND CODE] IS NOT NULL          AND ref.PERCENTAGE_THRESHOLD IS NOT NULL          AND ((od.MAX_FACE*trd.TRD_PRICE_GBP)/nvt.NAV_VALUE_SUM) > ref.PERCENTAGE_THRESHOLD THEN 1 -- Use threshold table where possible and default to 1% where not       WHEN pg.MG_RET_FI_FLAG = 0         AND ccy.CURRENCY IS NOT NULL         AND ref.[FUND CODE] IS NOT NULL          AND ref.NOMINAL_THRESHOLD IS NOT NULL         AND (od.MAX_FACE*trd2.TRD_PRICE_CONVERTED) > ref.NOMINAL_THRESHOLD THEN 1 -- Use threshold table where possible and default to 1% where not       WHEN pg.MG_RET_FI_FLAG = 0         AND ccy.CURRENCY IS NULL         AND ref.[FUND CODE] IS NOT NULL          AND ref.NOMINAL_THRESHOLD IS NOT NULL         AND (od.MAX_FACE*trd.TRD_PRICE_GBP) > ref.NOMINAL_THRESHOLD THEN 1 -- Use threshold table where possible and default to 1% where not       WHEN pg.MG_RET_FI_FLAG = 0         AND ccy.CURRENCY IS NOT NULL              AND ref.[FUND CODE] IS NULL          AND ((od.MAX_FACE*trd2.TRD_PRICE_CONVERTED)/nvt.NAV_VALUE_SUM) > 1 THEN 1       WHEN pg.MG_RET_FI_FLAG = 0         AND ccy.CURRENCY IS NULL              AND ref.[FUND CODE] IS NULL          AND ((od.MAX_FACE*trd.TRD_PRICE_GBP)/nvt.NAV_VALUE_SUM) > 1 THEN 1       ELSE 0      END AS ORDER_INFLATION_EXCEPTION      --End of T-0-17044     FROM VISTA_REPORTING.dbo.TRADES trd      --T-0-17044 -- Added left join to trades_prices table to get TRD_PRICE_CONVERTED field      left JOIN #trades_prices trd2 on trd2.CLIENT_EXECUTION_NUM = trd.CLIENT_EXECUTION_NUM      --End of T-0-17044     LEFT JOIN Vista_STAGING.dbo.REF_FI_OI_EMCCY_TO_USD ccy ON ccy.CURRENCY = trd.SM_CURRENCY AND trd.EXECUTION_TIME BETWEEN ccy.DATE_FROM AND ccy.DATE_TO         LEFT JOIN #temp_nav_val_table nvt ON nvt.CLIENT_EXECUTION_NUM = trd.CLIENT_EXECUTION_NUM     LEFT JOIN #temp_oi_portgolio_groups pg ON pg.descendant = trd.PORTFOLIOS_PORTFOLIO_NAME     LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS t on t.ORD_NUM=trd.ORD_NUM     LEFT JOIN #max_face od ON od.TRD_ORD=t.ORD_NUM AND trd.FUND = od.ORD_DETAIL_FUND     LEFT JOIN (SELECT MULTI_FUND_ID, PRIMARY_MARKET, MAX(EMERGING_MARKET) AS EMERGING_MARKET           FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE          GROUP BY MULTI_FUND_ID, PRIMARY_MARKET) pr ON trd.MULTI_FUND_ID = pr.MULTI_FUND_ID     LEFT JOIN VISTA_STAGING.dbo.REF_FI_LL_ORDER_INFLATION_THRESHOLD ref ON ref.[FUND CODE] = trd.PORTFOLIOS_PORTFOLIO_NAME                          AND t.AUTH_TIME BETWEEN ref.DATE_FROM AND ref.DATE_TO     WHERE       t.DEALING_DESK = 'Fixed Income'      AND EXISTS (SELECT pg2.descendant FROM #temp_oi_portgolio_groups pg2         WHERE pg2.descendant = pg.descendant         --T-0-17285 - fixed typo in portfolio group            AND (pg2.ancestor IN ('MG_PRIL', 'MG_PXLF', 'MG_ALLPXL', 'MG_ZI', 'MG_ZIB', 'MG_BT_PEN', 'MG_C_INS', 'MG_C_PEN', 'MG_PPL', 'MG_PSPS') OR CHARINDEX('_CF', ancestor) > 0))         --End of T-0-17285       AND pr.PRIMARY_MARKET = 1      AND trd.FinalFlag = 1      AND od.ORD_DETAIL_FUND IS NOT NULL             IF OBJECT_ID('tempdb..#base_level_oi_final', 'U') IS NOT NULL DROP TABLE #base_level_oi_final     SELECT      ORD_NUM,      CLIENT_EXECUTION_NUM,      DEALING_DESK,      PORTFOLIOS_PORTFOLIO_NAME,      MAX(ORDER_INFLATION_EXCEPTION) AS ORDER_INFLATION_EXCEPTION,      CASE WHEN MAX(ORDER_INFLATION_EXCEPTION) = 1 THEN GETDATE() ELSE NULL END AS OI_CREATETIME     INTO #base_level_oi_final     FROM #base_lev_oi     GROUP BY      ORD_NUM,      CLIENT_EXECUTION_NUM,      DEALING_DESK,      PORTFOLIOS_PORTFOLIO_NAME             IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     select distinct      CONCAT(CLIENT_EXECUTION_NUM,'_8') AS ID,      '1A1' AS STATUS,      NULL AS FINAL_UPDATED_TIME     into #temp_status_table     from #base_level_oi_final     where ORDER_INFLATION_EXCEPTION != 0          MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET       T.ID=T.ID,       T.STATUS=T.STATUS,       T.DEALING_DESK = 'Fixed Income',       T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'Fixed Income');             --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      t.MULTI_FUND_ID,      t.ORD_NUM AS TRD_ORD,      NULL AS PM_ORD,      'Order Inflation' AS Exception_Type,      CONCAT(ex.CLIENT_EXECUTION_NUM,'_8') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'For Review' AS Status,      ex.CLIENT_EXECUTION_NUM AS ClientExecID,      'Fixed Income' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      TRD_TRADER AS DEALER,      '1A1' AS STATUS_ID,      AUTH_TIME AS ORD_AUTH,      EXECUTION_TIME AS TRADE_EXEC     INTO #temp_audit     FROM #base_level_oi_final ex     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID,CLIENT_EXECUTION_NUM,  ORD_NUM, EXECUTION_TIME, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t     ON ex.CLIENT_EXECUTION_NUM = t.CLIENT_EXECUTION_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o     ON t.ORD_NUM = trd_o.ORD_NUM     WHERE ORDER_INFLATION_EXCEPTION != 0          MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);             IF OBJECT_ID('VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_FI_TABLE', 'U') IS NULL     SELECT *     INTO VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_FI_TABLE     FROM #base_level_oi_final         ELSE         MERGE VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_FI_TABLE AS T     USING #base_level_oi_final AS S     ON (T.ORD_NUM = S.ORD_NUM      AND T.CLIENT_EXECUTION_NUM = S.CLIENT_EXECUTION_NUM       AND T.DEALING_DESK = S.DEALING_DESK      AND T.PORTFOLIOS_PORTFOLIO_NAME = S.PORTFOLIOS_PORTFOLIO_NAME)     WHEN MATCHED      THEN       UPDATE SET         T.ORDER_INFLATION_EXCEPTION = CASE WHEN S.ORDER_INFLATION_EXCEPTION > T.ORDER_INFLATION_EXCEPTION THEN S.ORDER_INFLATION_EXCEPTION ELSE T.ORDER_INFLATION_EXCEPTION END,       T.OI_CREATETIME = CASE WHEN S.ORDER_INFLATION_EXCEPTION > T.ORDER_INFLATION_EXCEPTION THEN S.OI_CREATETIME ELSE T.OI_CREATETIME END     WHEN NOT MATCHED       THEN INSERT (ORD_NUM,           CLIENT_EXECUTION_NUM,           DEALING_DESK,           PORTFOLIOS_PORTFOLIO_NAME,           ORDER_INFLATION_EXCEPTION,           OI_CREATETIME)        VALUES (S.ORD_NUM, S.CLIENT_EXECUTION_NUM, S.DEALING_DESK, S.PORTFOLIOS_PORTFOLIO_NAME,           S.ORDER_INFLATION_EXCEPTION, S.OI_CREATETIME);         IF OBJECT_ID('tempdb..#base_lev_oi', 'U') IS NOT NULL DROP TABLE #base_lev_oi     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     IF OBJECT_ID('tempdb..#base_level_oi_final', 'U') IS NOT NULL DROP TABLE #base_level_oi_final     IF OBJECT_ID('tempdb..#temp_oi_portgolio_groups', 'U') IS NOT NULL DROP TABLE #temp_oi_portgolio_groups     IF OBJECT_ID('tempdb..#max_face', 'U') IS NOT NULL DROP TABLE #max_face     IF OBJECT_ID('tempdb..#temp_oi_trades', 'U') IS NOT NULL DROP TABLE #temp_oi_trades     IF OBJECT_ID('tempdb..#temp_nav_date_table', 'U') IS NOT NULL DROP TABLE #temp_nav_date_table     IF OBJECT_ID('tempdb..#temp_nav_val_table', 'U') IS NOT NULL DROP TABLE #temp_nav_val_table     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit            END            --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_08_ORDER_INFLATION_LL  CreateDate: 2025-06-26 18:18:39.980  ModifyDate: 2025-06-26 18:19:49.777  --- DEFINITION START ---  -- =============================================    -- Author:  <Chandarana, Sohini>    -- Create date: <04/23/2018>    -- Description:     -- <Checks that the value of each trade is lower than the    -- NAV threshold, currently 1%. Flags trades as exceptions if    -- otherwise.    -- Stored procedure as appropriated from VG_08_ORDER_INFLATION_FI>    -- =============================================        -- ***************VERSION CONTROL***************    -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.    -- *********************************************        ----------------------New Comment style-----------------------------------        --2021-09-03 Sam Radage Created for Jira:    --T-0-17432 - Adding enhancements for LL, thresholds will now be specific to the portfolios, and the Client NAV will    --     be used instead of base fund NAV    --    -- *********************************************        CREATE   PROCEDURE [dbo].[VG_08_ORDER_INFLATION_LL]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         --DECLARE @DATE_FILTER AS DATE --Declare date filter to only select data from current pull date     --SET @DATE_FILTER = CONVERT(DATE, GETDATE())         IF OBJECT_ID('tempdb..#max_face', 'U') IS NOT NULL DROP TABLE #max_face         SELECT DISTINCT      a.ORD_NUM      ,ORD_DETAIL_FUND      ,MAX(ORD_DETAIL_FACE) AS MAX_FACE     INTO #max_face     FROM VISTA_STAGING.dbo.ORDERS_DETAIL a     GROUP BY a.ORD_NUM, ORD_DETAIL_FUND         --T-0-17432 START         IF OBJECT_ID('tempdb..#temp_oi_portgolio_groups', 'U') IS NOT NULL DROP TABLE #temp_oi_portgolio_groups     SELECT DISTINCT      pg.*,      CASE        WHEN pg2.descendant IS NOT NULL THEN 1       ELSE 0      END AS MG_RET_FI_FLAG     INTO #temp_oi_portgolio_groups     FROM VISTA_STAGING.dbo.PORTFOLIO_GROUP_CLOSURE_TABLE pg     LEFT JOIN (SELECT DISTINCT descendant FROM Vista_STAGING.dbo.PORTFOLIO_GROUP_CLOSURE_TABLE where ancestor = 'MG_RET_FI') pg2 ON pg2.descendant = pg.descendant             IF OBJECT_ID('tempdb..#temp_oi_trades', 'U') IS NOT NULL DROP TABLE #temp_oi_trades     SELECT DISTINCT      trd.CLIENT_EXECUTION_NUM,      CONVERT(DATE, trd.EXECUTION_TIME) AS EXECUTION_TIME,      CONVERT(DATE, trd_o.AUTH_TIME) AS AUTH_TIME,      trd.FUND,       pg.ancestor,      pg.descendant,      pg.depth     INTO #temp_oi_trades     FROM VISTA_REPORTING.dbo.TRADES trd      left join Vista_Reporting.dbo.TRD_ORDERS trd_o on trd.ORD_NUM = trd_o.ORD_NUM      LEFT JOIN #temp_oi_portgolio_groups pg ON pg.descendant = trd.PORTFOLIOS_PORTFOLIO_NAME     where DEALING_DESK = 'Leveraged Finance'         IF OBJECT_ID('tempdb..#max_port', 'U') IS NOT NULL DROP TABLE #max_port     select       CLIENT_EXECUTION_NUM     , PORTFOLIO_NAME     , a.FUND     , MAX(NAV_PORT_DATE) AS MAX_PORT_DATE     into #max_port     from Vista_Reporting..NAV a     INNER JOIN #temp_oi_portgolio_groups pg ON pg.descendant=a.PORTFOLIO_NAME     left join #temp_oi_trades b on pg.ancestor = b.ancestor     where NAV_PORT_DATE <= AUTH_TIME      and (pg.ancestor IN ('MG_PRIL', 'MG_ALLPXL', 'MG_ZI', 'MG_ZIB', 'MG_BT_PEN', 'MG_C_INS', 'MG_C_PEN', 'MG_PPL', 'MG_PSPS') OR CHARINDEX('_CF', pg.ancestor) > 0)     group by PORTFOLIO_NAME, a.FUND, CLIENT_EXECUTION_NUM         IF OBJECT_ID('tempdb..#max_pull', 'U') IS NOT NULL DROP TABLE #max_pull     select       CLIENT_EXECUTION_NUM     , a.PORTFOLIO_NAME     , a.FUND     , MAX_PORT_DATE     , MAX(PULL_DATE) as MAX_PULL_DATE     into #max_pull     from Vista_Reporting..NAV a     inner join #max_port b on a.PORTFOLIO_NAME = b.PORTFOLIO_NAME and a.FUND = b.FUND and a.NAV_PORT_DATE = b.MAX_PORT_DATE      group by a.PORTFOLIO_NAME, a.FUND, CLIENT_EXECUTION_NUM, MAX_PORT_DATE         IF OBJECT_ID('tempdb..#latest_nav', 'U') IS NOT NULL DROP TABLE #latest_nav     select b.CLIENT_EXECUTION_NUM, a.*     into #latest_nav     from Vista_Reporting..NAV a     inner join #max_pull b on a.FUND = b.FUND and a.PORTFOLIO_NAME = b.PORTFOLIO_NAME and a.NAV_PORT_DATE = b.MAX_PORT_DATE and a.PULL_DATE = b.MAX_PULL_DATE         IF OBJECT_ID('tempdb..#client_nav', 'U') IS NOT NULL DROP TABLE #client_nav     select distinct a.CLIENT_EXECUTION_NUM, sum(NAV_VALUE_GBP) as CLIENT_NAV_VALUE, pg.MG_RET_FI_FLAG     into #client_nav     from #latest_nav a     INNER JOIN #temp_oi_portgolio_groups pg ON pg.descendant=a.PORTFOLIO_NAME     inner join #temp_oi_trades tr on pg.ancestor = tr.ancestor and a.CLIENT_EXECUTION_NUM = tr.CLIENT_EXECUTION_NUM     where (pg.ancestor IN ('MG_PRIL', 'MG_ALLPXL', 'MG_ZI', 'MG_ZIB', 'MG_BT_PEN', 'MG_C_INS', 'MG_C_PEN', 'MG_PPL', 'MG_PSPS') OR CHARINDEX('_CF', pg.ancestor) > 0)     and pg.depth != 0     group by a.CLIENT_EXECUTION_NUM, pg.MG_RET_FI_FLAG                    -- Insert statements for procedure here     IF OBJECT_ID('tempdb..#pre_lev_oi', 'U') IS NOT NULL DROP TABLE #pre_lev_oi          select distinct      oc.PM_ORD AS ORD_NUM,      trd.CLIENT_EXECUTION_NUM,      t.DEALING_DESK,      trd.PORTFOLIOS_PORTFOLIO_NAME,      --(od.ORD_DETAIL_FACE*trd.TRD_PRICE_GBP) AS GROSS_CONSIDERATION,      CASE       WHEN cl.CLIENT_NAV_VALUE = 0 THEN 0 -- Need to guard against divide by zero errors       ELSE  ((od.MAX_FACE*trd.TRD_PRICE_GBP)/cl.CLIENT_NAV_VALUE)      END AS p_v,      ISNULL(PERCENTAGE_THRESHOLD,1) AS PERCENTAGE_THRESHOLD,      CASE       WHEN cl.CLIENT_NAV_VALUE = 0 THEN 0 -- Need to guard against divide by zero errors       WHEN ((od.MAX_FACE*trd.TRD_PRICE_GBP)/cl.CLIENT_NAV_VALUE ) > ISNULL(PERCENTAGE_THRESHOLD,1) THEN 1       ELSE 0      END AS ORDER_INFLATION_EXCEPTION,      CASE       WHEN cl.CLIENT_NAV_VALUE  = 0 THEN NULL -- Need to guard against divide by zero errors       WHEN ((od.MAX_FACE*trd.TRD_PRICE_GBP)/cl.CLIENT_NAV_VALUE ) > ISNULL(PERCENTAGE_THRESHOLD,1) THEN GETDATE()       ELSE NULL      END AS OI_CREATETIME      --od.ORD_DETAIL_FACE AS PROPOSED_QUANTITY,      --(od.ORD_DETAIL_FACE*trd.TRD_PRICE_GBP/100) AS PROPOSED_VALUE,      --((od.ORD_DETAIL_FACE*trd.TRD_PRICE_GBP)/n.NAV_VALUE_GBP) AS PROPOSED_PERCENT,      --trd.TRD_ORIG_FACE / od.ORD_DETAIL_FACE * 100 AS PERCENT_ALLOCATION,      --NAV_VALUE_GBP,      --(trd.TRD_ORIG_FACE*trd.TRD_PRICE_GBP/100) AS EXECUTED_VALUE ,      --((trd.TRD_ORIG_FACE*trd.TRD_PRICE_GBP)/n.NAV_VALUE_GBP) AS EXECUTED_PERCENT      into #pre_lev_oi     from VISTA_REPORTING.dbo.TRADES trd      join VISTA_REPORTING.dbo.TRD_ORDERS t on t.ORD_NUM=trd.ORD_NUM     --LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr on trd.MULTI_FUND_ID=pr.MULTI_FUND_ID     left join VISTA_REPORTING.dbo.ORDERS_CROSS oc ON t.ORD_NUM=oc.TRD_ORD     LEFT JOIN #max_face od ON od.ORD_NUM=oc.PM_ORD AND trd.FUND = od.ORD_DETAIL_FUND     left join #client_nav cl on cl.CLIENT_EXECUTION_NUM = trd.CLIENT_EXECUTION_NUM     --left join VISTA_STAGING.dbo.FUND_GROUP f on f.BASE_FUND_CODE=n.PORTFOLIO_NAME     left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON trd.MULTI_FUND_ID = pr.MULTI_FUND_ID     LEFT JOIN VISTA_STAGING.dbo.REF_FI_LL_ORDER_INFLATION_THRESHOLD ref ON ref.[FUND CODE] = trd.PORTFOLIOS_PORTFOLIO_NAME                        AND t.AUTH_TIME BETWEEN ref.DATE_FROM AND ref.DATE_TO     where       t.DEALING_DESK = 'Leveraged Finance'      AND cl.MG_RET_FI_FLAG = 0      AND pr.PRIMARY_MARKET = 1      --and trd.PULL_DATE=@DATE_FILTER      AND trd.FinalFlag = 1      AND od.ORD_DETAIL_FUND IS NOT NULL          UNION         select distinct      oc.PM_ORD AS ORD_NUM,      trd.CLIENT_EXECUTION_NUM,      t.DEALING_DESK,      trd.PORTFOLIOS_PORTFOLIO_NAME,      --(od.ORD_DETAIL_FACE*trd.TRD_PRICE_GBP) AS GROSS_CONSIDERATION,      CASE       WHEN cl.CLIENT_NAV_VALUE = 0 THEN 0 -- Need to guard against divide by zero errors       ELSE  ((od.MAX_FACE*trd.TRD_PRICE_GBP)/cl.CLIENT_NAV_VALUE)      END AS p_v,      ISNULL(PERCENTAGE_THRESHOLD,1.75) AS PERCENTAGE_THRESHOLD,      CASE       WHEN cl.CLIENT_NAV_VALUE = 0 THEN 0 -- Need to guard against divide by zero errors       WHEN ((od.MAX_FACE*trd.TRD_PRICE_GBP)/cl.CLIENT_NAV_VALUE) > ISNULL(PERCENTAGE_THRESHOLD,1.75) THEN 1       ELSE 0      END AS ORDER_INFLATION_EXCEPTION,      CASE       WHEN cl.CLIENT_NAV_VALUE = 0 THEN NULL -- Need to guard against divide by zero errors       WHEN ((od.MAX_FACE*trd.TRD_PRICE_GBP)/cl.CLIENT_NAV_VALUE) > ISNULL(PERCENTAGE_THRESHOLD,1.75) THEN GETDATE()       ELSE NULL      END AS OI_CREATETIME      --od.ORD_DETAIL_FACE AS PROPOSED_QUANTITY,      --(od.ORD_DETAIL_FACE*trd.TRD_PRICE_GBP/100) AS PROPOSED_VALUE,      --((od.ORD_DETAIL_FACE*trd.TRD_PRICE_GBP)/n.NAV_VALUE_GBP) AS PROPOSED_PERCENT,      --trd.TRD_ORIG_FACE / od.ORD_DETAIL_FACE * 100 AS PERCENT_ALLOCATION,      --NAV_VALUE_GBP,      --(trd.TRD_ORIG_FACE*trd.TRD_PRICE_GBP/100) AS EXECUTED_VALUE ,      --((trd.TRD_ORIG_FACE*trd.TRD_PRICE_GBP)/n.NAV_VALUE_GBP) AS EXECUTED_PERCENT      from VISTA_REPORTING.dbo.TRADES trd      join VISTA_REPORTING.dbo.TRD_ORDERS t on t.ORD_NUM=trd.ORD_NUM     --LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr on trd.MULTI_FUND_ID=pr.MULTI_FUND_ID     left join VISTA_REPORTING.dbo.ORDERS_CROSS oc ON t.ORD_NUM=oc.TRD_ORD     LEFT JOIN #max_face od ON od.ORD_NUM=oc.PM_ORD AND trd.FUND = od.ORD_DETAIL_FUND     left join #client_nav cl on cl.CLIENT_EXECUTION_NUM = trd.CLIENT_EXECUTION_NUM     --left join VISTA_STAGING.dbo.FUND_GROUP f on f.BASE_FUND_CODE=n.PORTFOLIO_NAME     left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON trd.MULTI_FUND_ID = pr.MULTI_FUND_ID     LEFT JOIN VISTA_STAGING.dbo.REF_FI_LL_ORDER_INFLATION_THRESHOLD ref ON ref.[FUND CODE] = trd.PORTFOLIOS_PORTFOLIO_NAME                        AND t.AUTH_TIME BETWEEN ref.DATE_FROM AND ref.DATE_TO     where       t.DEALING_DESK = 'Leveraged Finance'      AND cl.MG_RET_FI_FLAG = 1      AND pr.PRIMARY_MARKET = 1      AND trd.FinalFlag = 1      AND od.ORD_DETAIL_FUND IS NOT NULL          --T-0-17432 END         IF OBJECT_ID('tempdb..#base_lev_oi', 'U') IS NOT NULL DROP TABLE #base_lev_oi         SELECT       ORD_NUM,      CLIENT_EXECUTION_NUM,      DEALING_DESK,      PORTFOLIOS_PORTFOLIO_NAME,      MAX(ORDER_INFLATION_EXCEPTION) AS ORDER_INFLATION_EXCEPTION,      MAX(OI_CREATETIME) AS OI_CREATETIME     INTO #base_lev_oi     FROM #pre_lev_oi     GROUP BY      ORD_NUM,      CLIENT_EXECUTION_NUM,      DEALING_DESK,      PORTFOLIOS_PORTFOLIO_NAME             IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     select distinct      CONCAT(CLIENT_EXECUTION_NUM,'_8') AS ID,      '1A1' AS STATUS,      NULL AS FINAL_UPDATED_TIME     into #temp_status_table     from #base_lev_oi     where ORDER_INFLATION_EXCEPTION != 0          MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET       T.ID=T.ID,       T.STATUS=T.STATUS,       T.DEALING_DESK = 'Leveraged Finance',       T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME,'Leveraged Finance');           --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      t.MULTI_FUND_ID,      t.ORD_NUM AS TRD_ORD,      NULL AS PM_ORD,      'Order Inflation' AS Exception_Type,      CONCAT(ex.CLIENT_EXECUTION_NUM,'_8') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'For Review' AS Status,      ex.CLIENT_EXECUTION_NUM AS ClientExecID,      'Leveraged Finance' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      TRD_TRADER AS DEALER,      '1A1' AS STATUS_ID,      AUTH_TIME AS ORD_AUTH,      EXECUTION_TIME AS TRADE_EXEC     INTO #temp_audit     FROM #base_lev_oi ex     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID,CLIENT_EXECUTION_NUM,  ORD_NUM, EXECUTION_TIME, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t     ON ex.CLIENT_EXECUTION_NUM = t.CLIENT_EXECUTION_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o     ON t.ORD_NUM = trd_o.ORD_NUM     WHERE ORDER_INFLATION_EXCEPTION != 0          MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);            --SELECT * FROM #base_lev_oi where CLIENT_EXECUTION_NUM = '4715-572'     IF OBJECT_ID('VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_LL_TABLE', 'U') IS NULL         SELECT *     INTO VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_LL_TABLE     FROM #base_lev_oi         ELSE         MERGE VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_LL_TABLE AS T     USING #base_lev_oi AS S     ON (T.ORD_NUM = S.ORD_NUM      AND T.CLIENT_EXECUTION_NUM = S.CLIENT_EXECUTION_NUM       AND T.DEALING_DESK = S.DEALING_DESK      AND T.PORTFOLIOS_PORTFOLIO_NAME = S.PORTFOLIOS_PORTFOLIO_NAME)     WHEN MATCHED      THEN       UPDATE SET         T.ORDER_INFLATION_EXCEPTION = CASE WHEN S.ORDER_INFLATION_EXCEPTION > T.ORDER_INFLATION_EXCEPTION THEN S.ORDER_INFLATION_EXCEPTION ELSE T.ORDER_INFLATION_EXCEPTION END,       T.OI_CREATETIME = CASE WHEN S.ORDER_INFLATION_EXCEPTION > T.ORDER_INFLATION_EXCEPTION THEN S.OI_CREATETIME ELSE T.OI_CREATETIME END       --T.PROPOSED_QUANTITY = CASE WHEN S.ORDER_INFLATION_EXCEPTION > T.ORDER_INFLATION_EXCEPTION THEN S.PROPOSED_QUANTITY ELSE T.PROPOSED_QUANTITY END,       --T.PROPOSED_VALUE = CASE WHEN S.ORDER_INFLATION_EXCEPTION > T.ORDER_INFLATION_EXCEPTION THEN S.PROPOSED_VALUE ELSE T.PROPOSED_VALUE END,       --T.PROPOSED_PERCENT = CASE WHEN S.ORDER_INFLATION_EXCEPTION > T.ORDER_INFLATION_EXCEPTION THEN S.PROPOSED_PERCENT ELSE T.PROPOSED_PERCENT END,       --T.PERCENT_ALLOCATION = CASE WHEN S.ORDER_INFLATION_EXCEPTION > T.ORDER_INFLATION_EXCEPTION THEN S.PERCENT_ALLOCATION ELSE T.PERCENT_ALLOCATION END,       --T.NAV_VALUE_GBP = CASE WHEN S.ORDER_INFLATION_EXCEPTION > T.ORDER_INFLATION_EXCEPTION THEN S.NAV_VALUE_GBP ELSE T.NAV_VALUE_GBP END,       --T.EXECUTED_VALUE = CASE WHEN S.ORDER_INFLATION_EXCEPTION > T.ORDER_INFLATION_EXCEPTION THEN S.EXECUTED_VALUE ELSE T.EXECUTED_VALUE END,       --T.EXECUTED_PERCENT = CASE WHEN S.ORDER_INFLATION_EXCEPTION > T.ORDER_INFLATION_EXCEPTION THEN S.EXECUTED_PERCENT ELSE T.EXECUTED_PERCENT END     WHEN NOT MATCHED       THEN INSERT (ORD_NUM, CLIENT_EXECUTION_NUM, DEALING_DESK, PORTFOLIOS_PORTFOLIO_NAME,           ORDER_INFLATION_EXCEPTION, OI_CREATETIME)           --PROPOSED_QUANTITY,          --PROPOSED_VALUE,PROPOSED_PERCENT,PERCENT_ALLOCATION,NAV_VALUE_GBP,          --EXECUTED_VALUE, EXECUTED_PERCENT)         VALUES (S.ORD_NUM, S.CLIENT_EXECUTION_NUM, S.DEALING_DESK, S.PORTFOLIOS_PORTFOLIO_NAME,           S.ORDER_INFLATION_EXCEPTION, S.OI_CREATETIME);          --S.PROPOSED_QUANTITY,          --S.PROPOSED_VALUE,S.PROPOSED_PERCENT,S.PERCENT_ALLOCATION,S.NAV_VALUE_GBP,          --S.EXECUTED_VALUE, S.EXECUTED_PERCENT);         IF OBJECT_ID('tempdb..#base_lev_oi', 'U') IS NOT NULL DROP TABLE #base_lev_oi     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    END            --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_08_ORDER_INFLATION_LL_UNTIL_2021_09_03  CreateDate: 2025-06-26 18:36:24.303  ModifyDate: 2025-06-26 18:36:24.303  --- DEFINITION START ---  -- =============================================    -- Author:  <Chandarana, Sohini>    -- Create date: <04/23/2018>    -- Description:     -- <Checks that the value of each trade is lower than the    -- NAV threshold, currently 1%. Flags trades as exceptions if    -- otherwise.    -- Stored procedure as appropriated from VG_08_ORDER_INFLATION_FI>    -- =============================================        -- ***************VERSION CONTROL***************    -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.    -- *********************************************        CREATE PROCEDURE [dbo].[VG_08_ORDER_INFLATION_LL_UNTIL_2021_09_03]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         --DECLARE @DATE_FILTER AS DATE --Declare date filter to only select data from current pull date     --SET @DATE_FILTER = CONVERT(DATE, GETDATE())         IF OBJECT_ID('tempdb..#max_face', 'U') IS NOT NULL DROP TABLE #max_face         SELECT DISTINCT      ORD_NUM      ,ORD_DETAIL_FUND      ,MAX(ORD_DETAIL_FACE) AS MAX_FACE     INTO #max_face     FROM VISTA_STAGING.dbo.ORDERS_DETAIL     GROUP BY ORD_NUM, ORD_DETAIL_FUND            -- Insert statements for procedure here     IF OBJECT_ID('tempdb..#pre_lev_oi', 'U') IS NOT NULL DROP TABLE #pre_lev_oi          select distinct      oc.PM_ORD AS ORD_NUM,      trd.CLIENT_EXECUTION_NUM,      t.DEALING_DESK,      trd.PORTFOLIOS_PORTFOLIO_NAME,      --(od.ORD_DETAIL_FACE*trd.TRD_PRICE_GBP) AS GROSS_CONSIDERATION,      CASE       WHEN n.NAV_VALUE_GBP = 0 THEN 0 -- Need to guard against divide by zero errors       WHEN ((od.MAX_FACE*trd.TRD_PRICE_GBP)/n.NAV_VALUE_GBP) > 1 THEN 1       ELSE 0      END AS ORDER_INFLATION_EXCEPTION,      CASE       WHEN n.NAV_VALUE_GBP = 0 THEN NULL -- Need to guard against divide by zero errors       WHEN ((od.MAX_FACE*trd.TRD_PRICE_GBP)/n.NAV_VALUE_GBP) > 1 THEN GETDATE()       ELSE NULL      END AS OI_CREATETIME      --od.ORD_DETAIL_FACE AS PROPOSED_QUANTITY,      --(od.ORD_DETAIL_FACE*trd.TRD_PRICE_GBP/100) AS PROPOSED_VALUE,      --((od.ORD_DETAIL_FACE*trd.TRD_PRICE_GBP)/n.NAV_VALUE_GBP) AS PROPOSED_PERCENT,      --trd.TRD_ORIG_FACE / od.ORD_DETAIL_FACE * 100 AS PERCENT_ALLOCATION,      --NAV_VALUE_GBP,      --(trd.TRD_ORIG_FACE*trd.TRD_PRICE_GBP/100) AS EXECUTED_VALUE ,      --((trd.TRD_ORIG_FACE*trd.TRD_PRICE_GBP)/n.NAV_VALUE_GBP) AS EXECUTED_PERCENT      into #pre_lev_oi     from VISTA_REPORTING.dbo.TRADES trd      join VISTA_REPORTING.dbo.TRD_ORDERS t on t.ORD_NUM=trd.ORD_NUM     --LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr on trd.MULTI_FUND_ID=pr.MULTI_FUND_ID     left join VISTA_REPORTING.dbo.ORDERS_CROSS oc ON t.ORD_NUM=oc.TRD_ORD     LEFT JOIN #max_face od ON od.ORD_NUM=oc.PM_ORD AND trd.FUND = od.ORD_DETAIL_FUND     OUTER APPLY (SELECT TOP 1 n.* FROM VISTA_REPORTING.dbo.NAV n WHERE n.FUND=trd.FUND and n.NAV_PORT_DATE<=convert(date, t.AUTH_TIME) ORDER BY n.NAV_PORT_DATE DESC) n     --left join VISTA_STAGING.dbo.FUND_GROUP f on f.BASE_FUND_CODE=n.PORTFOLIO_NAME     left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON trd.MULTI_FUND_ID = pr.MULTI_FUND_ID     where       t.DEALING_DESK = 'Leveraged Finance'      --and pg.PORTFOLIO_GROUP_NAME != 'MG_RET_LL'      AND pr.PRIMARY_MARKET = 1      --and trd.PULL_DATE=@DATE_FILTER      AND trd.FinalFlag = 1      AND od.ORD_DETAIL_FUND IS NOT NULL          UNION         select distinct      oc.PM_ORD AS ORD_NUM,      trd.CLIENT_EXECUTION_NUM,      t.DEALING_DESK,      trd.PORTFOLIOS_PORTFOLIO_NAME,      --(od.ORD_DETAIL_FACE*trd.TRD_PRICE_GBP) AS GROSS_CONSIDERATION,      CASE       WHEN n.NAV_VALUE_GBP = 0 THEN 0 -- Need to guard against divide by zero errors       WHEN ((od.MAX_FACE*trd.TRD_PRICE_GBP)/n.NAV_VALUE_GBP) > 1 THEN 1       ELSE 0      END AS ORDER_INFLATION_EXCEPTION,      CASE       WHEN n.NAV_VALUE_GBP = 0 THEN NULL -- Need to guard against divide by zero errors       WHEN ((od.MAX_FACE*trd.TRD_PRICE_GBP)/n.NAV_VALUE_GBP) > 1 THEN GETDATE()       ELSE NULL      END AS OI_CREATETIME      --od.ORD_DETAIL_FACE AS PROPOSED_QUANTITY,      --(od.ORD_DETAIL_FACE*trd.TRD_PRICE_GBP/100) AS PROPOSED_VALUE,      --((od.ORD_DETAIL_FACE*trd.TRD_PRICE_GBP)/n.NAV_VALUE_GBP) AS PROPOSED_PERCENT,      --trd.TRD_ORIG_FACE / od.ORD_DETAIL_FACE * 100 AS PERCENT_ALLOCATION,      --NAV_VALUE_GBP,      --(trd.TRD_ORIG_FACE*trd.TRD_PRICE_GBP/100) AS EXECUTED_VALUE ,      --((trd.TRD_ORIG_FACE*trd.TRD_PRICE_GBP)/n.NAV_VALUE_GBP) AS EXECUTED_PERCENT      from VISTA_REPORTING.dbo.TRADES trd      join VISTA_REPORTING.dbo.TRD_ORDERS t on t.ORD_NUM=trd.ORD_NUM     --LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr on trd.MULTI_FUND_ID=pr.MULTI_FUND_ID     left join VISTA_REPORTING.dbo.ORDERS_CROSS oc ON t.ORD_NUM=oc.TRD_ORD     LEFT JOIN #max_face od ON od.ORD_NUM=oc.PM_ORD AND trd.FUND = od.ORD_DETAIL_FUND     OUTER APPLY (SELECT TOP 1 n.* FROM VISTA_REPORTING.dbo.NAV n WHERE n.FUND=trd.FUND and n.NAV_PORT_DATE<=convert(date, t.AUTH_TIME) AND NAV_VALUE <> 0 ORDER BY n.NAV_PORT_DATE DESC) n     --left join VISTA_STAGING.dbo.FUND_GROUP f on f.BASE_FUND_CODE=n.PORTFOLIO_NAME     left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON trd.MULTI_FUND_ID = pr.MULTI_FUND_ID     where       t.DEALING_DESK = 'Leveraged Finance'      --and pg.PORTFOLIO_GROUP_NAME = 'MG_RET_LL'      AND pr.PRIMARY_MARKET = 1      AND trd.FinalFlag = 1      AND od.ORD_DETAIL_FUND IS NOT NULL          IF OBJECT_ID('tempdb..#base_lev_oi', 'U') IS NOT NULL DROP TABLE #base_lev_oi         SELECT       ORD_NUM,      CLIENT_EXECUTION_NUM,      DEALING_DESK,      PORTFOLIOS_PORTFOLIO_NAME,      MAX(ORDER_INFLATION_EXCEPTION) AS ORDER_INFLATION_EXCEPTION,      MAX(OI_CREATETIME) AS OI_CREATETIME     INTO #base_lev_oi     FROM #pre_lev_oi     GROUP BY      ORD_NUM,      CLIENT_EXECUTION_NUM,      DEALING_DESK,      PORTFOLIOS_PORTFOLIO_NAME              IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     select distinct      CONCAT(CLIENT_EXECUTION_NUM,'_8') AS ID,      '1A1' AS STATUS,      NULL AS FINAL_UPDATED_TIME     into #temp_status_table     from #base_lev_oi     where ORDER_INFLATION_EXCEPTION != 0          MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET       T.ID=T.ID,       T.STATUS=T.STATUS,       T.DEALING_DESK = 'Leveraged Finance',       T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME,'Leveraged Finance');           --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      t.MULTI_FUND_ID,      t.ORD_NUM AS TRD_ORD,      NULL AS PM_ORD,      'Order Inflation' AS Exception_Type,      CONCAT(ex.CLIENT_EXECUTION_NUM,'_8') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'For Review' AS Status,      ex.CLIENT_EXECUTION_NUM AS ClientExecID,      'Leveraged Finance' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      TRD_TRADER AS DEALER,      '1A1' AS STATUS_ID,      AUTH_TIME AS ORD_AUTH,      EXECUTION_TIME AS TRADE_EXEC     INTO #temp_audit     FROM #base_lev_oi ex     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID,CLIENT_EXECUTION_NUM,  ORD_NUM, EXECUTION_TIME, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t     ON ex.CLIENT_EXECUTION_NUM = t.CLIENT_EXECUTION_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o     ON t.ORD_NUM = trd_o.ORD_NUM     WHERE ORDER_INFLATION_EXCEPTION != 0          MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);            --SELECT * FROM #base_lev_oi where CLIENT_EXECUTION_NUM = '4715-572'     IF OBJECT_ID('VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_LL_TABLE', 'U') IS NULL         SELECT *     INTO VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_LL_TABLE     FROM #base_lev_oi         ELSE         MERGE VISTA_STAGING.dbo.VG_08_ORDER_INFLATION_LL_TABLE AS T     USING #base_lev_oi AS S     ON (T.ORD_NUM = S.ORD_NUM      AND T.CLIENT_EXECUTION_NUM = S.CLIENT_EXECUTION_NUM       AND T.DEALING_DESK = S.DEALING_DESK      AND T.PORTFOLIOS_PORTFOLIO_NAME = S.PORTFOLIOS_PORTFOLIO_NAME)     WHEN MATCHED      THEN       UPDATE SET         T.ORDER_INFLATION_EXCEPTION = CASE WHEN S.ORDER_INFLATION_EXCEPTION > T.ORDER_INFLATION_EXCEPTION THEN S.ORDER_INFLATION_EXCEPTION ELSE T.ORDER_INFLATION_EXCEPTION END,       T.OI_CREATETIME = CASE WHEN S.ORDER_INFLATION_EXCEPTION > T.ORDER_INFLATION_EXCEPTION THEN S.OI_CREATETIME ELSE T.OI_CREATETIME END       --T.PROPOSED_QUANTITY = CASE WHEN S.ORDER_INFLATION_EXCEPTION > T.ORDER_INFLATION_EXCEPTION THEN S.PROPOSED_QUANTITY ELSE T.PROPOSED_QUANTITY END,       --T.PROPOSED_VALUE = CASE WHEN S.ORDER_INFLATION_EXCEPTION > T.ORDER_INFLATION_EXCEPTION THEN S.PROPOSED_VALUE ELSE T.PROPOSED_VALUE END,       --T.PROPOSED_PERCENT = CASE WHEN S.ORDER_INFLATION_EXCEPTION > T.ORDER_INFLATION_EXCEPTION THEN S.PROPOSED_PERCENT ELSE T.PROPOSED_PERCENT END,       --T.PERCENT_ALLOCATION = CASE WHEN S.ORDER_INFLATION_EXCEPTION > T.ORDER_INFLATION_EXCEPTION THEN S.PERCENT_ALLOCATION ELSE T.PERCENT_ALLOCATION END,       --T.NAV_VALUE_GBP = CASE WHEN S.ORDER_INFLATION_EXCEPTION > T.ORDER_INFLATION_EXCEPTION THEN S.NAV_VALUE_GBP ELSE T.NAV_VALUE_GBP END,       --T.EXECUTED_VALUE = CASE WHEN S.ORDER_INFLATION_EXCEPTION > T.ORDER_INFLATION_EXCEPTION THEN S.EXECUTED_VALUE ELSE T.EXECUTED_VALUE END,       --T.EXECUTED_PERCENT = CASE WHEN S.ORDER_INFLATION_EXCEPTION > T.ORDER_INFLATION_EXCEPTION THEN S.EXECUTED_PERCENT ELSE T.EXECUTED_PERCENT END     WHEN NOT MATCHED       THEN INSERT (ORD_NUM, CLIENT_EXECUTION_NUM, DEALING_DESK, PORTFOLIOS_PORTFOLIO_NAME,           ORDER_INFLATION_EXCEPTION, OI_CREATETIME)           --PROPOSED_QUANTITY,          --PROPOSED_VALUE,PROPOSED_PERCENT,PERCENT_ALLOCATION,NAV_VALUE_GBP,          --EXECUTED_VALUE, EXECUTED_PERCENT)         VALUES (S.ORD_NUM, S.CLIENT_EXECUTION_NUM, S.DEALING_DESK, S.PORTFOLIOS_PORTFOLIO_NAME,           S.ORDER_INFLATION_EXCEPTION, S.OI_CREATETIME);          --S.PROPOSED_QUANTITY,          --S.PROPOSED_VALUE,S.PROPOSED_PERCENT,S.PERCENT_ALLOCATION,S.NAV_VALUE_GBP,          --S.EXECUTED_VALUE, S.EXECUTED_PERCENT);         IF OBJECT_ID('tempdb..#base_lev_oi', 'U') IS NOT NULL DROP TABLE #base_lev_oi     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    END            --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_09_TIMELY_EXECUTION_CASH  CreateDate: 2025-06-26 18:18:27.440  ModifyDate: 2025-06-26 18:18:27.440  --- DEFINITION START ---  -- =============================================    -- Author:  <Nasra, Michael AND LIZZIE REYNOLDS>    -- Create date: <07/06/2019>    -- Description:     -- <All trades must be executed within a certain    -- time frame from when the order is placed.>    -- =============================================        -- ***************VERSION CONTROL***************    --    -- *********************************************        CREATE PROCEDURE [dbo].[VG_09_TIMELY_EXECUTION_CASH]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;            IF OBJECT_ID('tempdb..#temp_recent_dealer_al', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_al    select distinct oc.PM_ORD as ORD_NUM,     trd_trader     into #temp_recent_dealer_al     from VISTA_REPORTING.dbo.TRADES t     left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on oc.TRD_ORD = t.ORD_NUM     INNER JOIN (SELECT        OC.PM_ORD AS ORD_NUM,        MAX(EXECUTION_TIME) AS MAX_EXEC,        MAX(TOUCH_COUNT) AS MAX_TOUCH        FROM VISTA_REPORTING.dbo.TRADES T        LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS OC ON OC.TRD_ORD = T.ORD_NUM        GROUP BY OC.PM_ORD) T2 ON T2.ORD_NUM = OC.PM_ORD               AND T2.MAX_EXEC = t.EXECUTION_TIME              AND T2.MAX_TOUCH = t.TOUCH_COUNT            IF OBJECT_ID('tempdb..#temp_recent_dealer_cm', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_cm    SELECT DISTINCT    ct.ORDER_ID,           ct.DEALER_NAME    into #temp_recent_dealer_cm    FROM VISTA_REPORTING.dbo.CASH_TRADES ct    INNER JOIN (SELECT                   ORDER_ID,                  MAX(EXECUTED_DATETIME) AS MAX_EXEC,                  MAX(API_REQUESTED_DATE) AS MAX_API_REQ                  FROM VISTA_REPORTING.dbo.CASH_TRADES                  GROUP BY ORDER_ID) ct2 ON nullif(ct2.ORDER_ID, '0') = ct.ORDER_ID                                             AND ct2.MAX_EXEC = ct.EXECUTED_DATETIME                                            AND ct2.MAX_API_REQ = ct.API_REQUESTED_DATE                 IF OBJECT_ID('tempdb..#temp_max_ORDER_touch', 'U') IS NOT NULL DROP TABLE #temp_max_ORDER_touch    SELECT     ORD_NUM,     MAX(TOUCH_COUNT) AS MAX_TOUCH    INTO #temp_max_ORDER_touch    FROM VISTA_REPORTING.dbo.PM_ORDERS    GROUP BY ORD_NUM            IF OBJECT_ID('tempdb..#temp_max_req_orders', 'U') IS NOT NULL DROP TABLE #temp_max_req_orders    SELECT      ORDER_ID,     MAX(API_REQUESTED_DATE) AS MAX_API_REQ    INTO #temp_max_req_orders    FROM VISTA_REPORTING.dbo.CASH_ORDERS    GROUP BY ORDER_ID            IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades    SELECT      ORDER_ID,     MAX(API_REQUESTED_DATE) AS MAX_API_REQ    INTO #temp_max_req_trades    FROM VISTA_REPORTING.dbo.CASH_TRADES    GROUP BY ORDER_ID            IF OBJECT_ID('tempdb..#temp_max_touch_tr', 'U') IS NOT NULL DROP TABLE #temp_max_touch_tr    SELECT      ORD_NUM,     MAX(TOUCH_COUNT) AS MAX_TOUCH    INTO #temp_max_touch_tr    FROM VISTA_REPORTING.dbo.TRADES pm    GROUP BY ORD_NUM            IF OBJECT_ID('tempdb..#cash_manager_temp', 'U') IS NOT NULL DROP TABLE #cash_manager_temp    select distinct      co.ORDER_ID,      CO.INSTRUCTED_CURRENCY,      co.INSTRUCTION_RECEIVED_DATE,     co.OMQ_DATE_TIME,     co.ACCEPTED_DATETIME,     CASE      WHEN PRODUCT_TYPE = 'Repo / Rev Repo Products' THEN MAX(ct.EXECUTED_DATETIME)      ELSE MAX(ct.CONFIRMED_DATETIME)      END AS MAX_CONFIRMED_DATETIME,     --co.DEALER_NAME,     'CM' as [SOURCE],     PRODUCT_TYPE,     'CASH' as Product,     INSTRUCTION_STATUS_DECODE as [STATUS]    into #cash_manager_temp    from (select distinct o.order_id, o.instructed_currency, o.instruction_received_date, o.omq_date_time, o.accepted_datetime, o.product_type, o.instruction_status_decode,o.PRODUCT        from VISTA_reporting.dbo.CASH_ORDERS o       INNER JOIN #temp_max_req_orders tro ON tro.ORDER_ID=o.ORDER_ID AND tro.MAX_API_REQ=o.API_REQUESTED_DATE) co    left join (select distinct t.order_id, t.dealer_name, t.confirmed_datetime, t.EXECUTED_DATETIME          from VISTA_REPORTING.dbo.CASH_TRADES t         INNER JOIN #temp_max_req_trades mrt ON mrt.ORDER_ID=t.ORDER_ID AND mrt.MAX_API_REQ=t.API_REQUESTED_DATE) ct on co.ORDER_ID = ct.ORDER_ID    --where co.instruction_status_decode = 'Accepted Dealt'    --and co.PRODUCT_GROUP_NAME <> 'Reverse Repo'    --and co.PRODUCT_GROUP_NAME <> 'Repo'    group by      co.ORDER_ID,      co.INSTRUCTION_RECEIVED_DATE,     co.ACCEPTED_DATETIME,      co.INSTRUCTED_CURRENCY,      co.OMQ_DATE_TIME,     --ct.DEALER_NAME,     co.PRODUCT_TYPE,     CO.INSTRUCTION_STATUS_DECODE         IF OBJECT_ID('tempdb..#aladdin_temp', 'U') IS NOT NULL DROP TABLE #aladdin_temp    select distinct      pm.ord_num as ORDER_ID,     pm.CURRENCY as INSTRUCTED_CURRENCY,     pm.AUTH_TIME as INSTRUCTION_RECEIVED_DATE,      pm.AUTH_TIME as OMQ_DATE_TIME,     pm.ACTIVE_TIME as ACCEPTED_DATETIME,      max(tr.EXECUTION_TIME) as MAX_CONFIRMED_DATETIME,     --pm.TRADER_FULL_NAME as DEALER_NAME,     'AL' as [SOURCE],     'Cash Products' as PRODUCT_TYPE,     'ALADDIN' as Product,     PM.STATUS AS STATUS    into #aladdin_temp    from VISTA_REPORTING.dbo.PM_ORDERS pm    inner join #temp_max_ORDER_touch mot on mot.MAX_TOUCH = pm.TOUCH_COUNT and mot.ORD_NUM = pm.ORD_NUM    left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on oc.PM_ORD = pm.ORD_NUM    left join (select distinct t.ord_num, t.execution_time          from VISTA_REPORTING.dbo.TRADES t         INNER JOIN #temp_max_touch_tr mtt ON mtt.ORD_NUM=t.ORD_NUM AND mtt.MAX_TOUCH=t.TOUCH_COUNT) tr on tr.ORD_NUM = oc.TRD_ORD    WHERE pm.[DEALING_DESK] = 'CASH'    --and pm.[STATUS] = 'F' --F is the booked status as mentioned in the overall BRD    group by      pm.ord_num,     pm.ACTIVE_TIME,      pm.CURRENCY,      pm.AUTH_TIME,     --pm.TRADER_FULL_NAME,     pm.[STATUS]            IF OBJECT_ID('tempdb..#exception_table', 'U') IS NOT NULL DROP TABLE #exception_table    select distinct       tmp.*,     DATEDIFF(second,tmp.OMQ_DATE_TIME, tmp.ACCEPTED_DATETIME) as ACKNOWLEDGEMENT_MINS,     CASE WHEN tmp.PRODUCT_TYPE = 'Cash Products' THEN threshold.CASH_MM_TIMELY_ACK_THRESHOLD_MINS      WHEN tmp.PRODUCT_TYPE = 'Repo / Rev Repo Products' THEN threshold.CASH_RR_TIMELY_ACK_THRESHOLD_MINS END AS TIMELY_ACK_THRESHOLD_MINS,     CASE WHEN tmp.[STATUS] IN ('Accepted Dealt', 'F') AND SOURCE = 'CM' AND tmp.PRODUCT_TYPE = 'Cash Products' AND  DATEDIFF(second,tmp.OMQ_DATE_TIME,tmp.ACCEPTED_DATETIME) > threshold.CASH_MM_TIMELY_ACK_THRESHOLD_MINS then 1      WHEN  tmp.[STATUS] IN ('Accepted Dealt', 'F') AND SOURCE = 'CM' AND tmp.PRODUCT_TYPE = 'Repo / Rev Repo Products' AND  DATEDIFF(second,tmp.OMQ_DATE_TIME,tmp.ACCEPTED_DATETIME) > threshold.CASH_RR_TIMELY_ACK_THRESHOLD_MINS THEN 1      ELSE 0     END as VG_09_ACKNOWLEDGEMENT,     CASE WHEN tmp.[STATUS] IN ('Accepted Dealt', 'F') AND SOURCE = 'CM' AND tmp.PRODUCT_TYPE = 'Cash Products' and  DATEDIFF(second,tmp.OMQ_DATE_TIME,tmp.ACCEPTED_DATETIME) > threshold.CASH_MM_TIMELY_ACK_THRESHOLD_MINS then GETDATE()       WHEN tmp.[STATUS] IN ('Accepted Dealt', 'F') AND SOURCE = 'CM' AND tmp.PRODUCT_TYPE = 'Repo / Rev Repo Products' AND  DATEDIFF(second,tmp.OMQ_DATE_TIME,tmp.ACCEPTED_DATETIME) > threshold.CASH_RR_TIMELY_ACK_THRESHOLD_MINS then GETDATE()      ELSE NULL     END as VG_09_ACKNOWLEDGEMENT_CREATETIME,     DATEDIFF(second,tmp.OMQ_DATE_TIME,tmp.MAX_CONFIRMED_DATETIME) as EXECUTION_MINS,     CASE WHEN tmp.PRODUCT_TYPE = 'Cash Products' then threshold.CASH_MM_TIMELY_EXEC_THRESHOLD_MINS      WHEN tmp.PRODUCT_TYPE = 'Repo / Rev Repo Products'  THEN threshold.CASH_RR_TIMELY_EXEC_THRESHOLD_MINS END AS TIMELY_EXEC_THRESHOLD_MINS,     CASE WHEN tmp.[STATUS] IN ('Accepted Dealt', 'F') AND tmp.PRODUCT_TYPE = 'Cash Products' and DATEDIFF(second,tmp.OMQ_DATE_TIME,tmp.MAX_CONFIRMED_DATETIME) > threshold.CASH_MM_TIMELY_EXEC_THRESHOLD_MINS then 1       WHEN tmp.[STATUS] IN ('Accepted Dealt', 'F') AND tmp.PRODUCT_TYPE = 'Repo / Rev Repo Products' and DATEDIFF(second,tmp.OMQ_DATE_TIME,tmp.MAX_CONFIRMED_DATETIME) > threshold.CASH_RR_TIMELY_EXEC_THRESHOLD_MINS then 1      ELSE 0     END as VG_09_EXECUTION,     CASE WHEN tmp.[STATUS] IN ('Accepted Dealt', 'F') AND  tmp.PRODUCT_TYPE = 'Cash Products' and DATEDIFF(second,tmp.OMQ_DATE_TIME,tmp.MAX_CONFIRMED_DATETIME) > threshold.CASH_MM_TIMELY_EXEC_THRESHOLD_MINS then GETDATE()      WHEN tmp.[STATUS] IN ('Accepted Dealt', 'F') AND tmp.PRODUCT_TYPE = 'Repo / Rev Repo Products' and DATEDIFF(second,tmp.OMQ_DATE_TIME,MAX_CONFIRMED_DATETIME) > threshold.CASH_RR_TIMELY_EXEC_THRESHOLD_MINS then GETDATE()      ELSE NULL     END as VG_09_EXECUTION_CREATETIME    into #exception_table    from (    select * from #cash_manager_temp    union    select * from #aladdin_temp) tmp    left join [VISTA_STAGING].dbo.REF_CASH_TIMELY_EX_THRESHOLD threshold     on threshold.CURRENCY_CODE = tmp.INSTRUCTED_CURRENCY and threshold.product = tmp.product     and cast(INSTRUCTION_RECEIVED_DATE as date) between cast(threshold.DATE_FROM as date) and cast(threshold.DATE_TO as date)            IF OBJECT_ID('tempdb..#exception_table_vg_total', 'U') IS NOT NULL DROP TABLE #exception_table_vg_total    select distinct       ORDER_ID              -- ,INSTRUCTION_RECEIVED_DATE           ,OMQ_DATE_TIME              --,ACCEPTED_DATETIME       ,MAX_CONFIRMED_DATETIME            --,ACKNOWLEDGEMENT_MINS            ,TIMELY_ACK_THRESHOLD_MINS           ,VG_09_ACKNOWLEDGEMENT            --,EXECUTION_MINS              ,TIMELY_EXEC_THRESHOLD_MINS               ,VG_09_EXECUTION                          ,[SOURCE]       ,PRODUCT_TYPE                               ,case when VG_09_ACKNOWLEDGEMENT + VG_09_EXECUTION > 0  then 1      else 0     end as VG_09     ,case when VG_09_EXECUTION = 1 or VG_09_ACKNOWLEDGEMENT = 1 then getdate() else null end as vg_09_createtime    into #exception_table_vg_total    from #exception_table            --Add records into FINAL_STATUS_UPDATE_TABLE    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    SELECT DISTINCT     CONCAT(ORDER_ID,'_9_', SOURCE) AS ID,     '1A2' AS STATUS,     NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table    FROM #exception_table_vg_total             MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'CASH',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'CASH');        --Add records into AUDIT_TABLE    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    SELECT DISTINCT     NULL AS TRANSACTION_NUMBER,     OC.TRD_ORD AS TRD_ORD,     et.ORDER_ID AS ORDER_ID,     'Timely Execution' AS Exception_Type,     CONCAT(ET.ORDER_ID,'_9_',[SOURCE]) AS ID,     NULL AS REASON,     NULL AS COMMENT,     'With Reviewer' AS Status,     NULL AS ClientExecID,     'Cash' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME], dd.default_dealer) as DEALER,     '1A2' AS STATUS_ID,     et.OMQ_DATE_TIME AS ORD_AUTH,     et.MAX_CONFIRMED_DATETIME AS TRADE_EXEC    INTO #temp_audit    FROM #exception_table_vg_total et    left join (SELECT DISTINCT PULL_DATE, ORDER_ID, MIN(INSTRUCTION_RECEIVED_DATE) as INSTRUCTION_RECEIVED_DATE, ACCEPTED_BY, INSTRUCTED_BY FROM VISTA_STAGING.dbo.CASH_ORDERS GROUP BY ORDER_ID, ACCEPTED_BY, PULL_DATE, INSTRUCTED_BY) co    on ET.[ORDER_ID] = co.[ORDER_ID] AND ET.SOURCE = 'CM'    --LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER FROM VISTA_REPORTING.DBO.TRADES WHERE FinalFlag = 1) T ON CE.SOURCE = 'AL' AND CE.TRANSACTION_NUMBER = T.MULTI_FUND_ID    LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.TRD_ORD =ET.ORDER_ID AND ET.SOURCE = 'AL'    LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME, PM, PULL_DATE, TRADER FROM VISTA_REPORTING.DBO.PM_ORDERS GROUP BY ORD_NUM, PM, PULL_DATE, TRADER) PM ON PM.ORD_NUM = OC.PM_ORD     LEFT JOIN #temp_recent_dealer_al RAL ON RAL.ORD_NUM  = et.ORDER_ID AND et.SOURCE = 'AL'      LEFT JOIN #temp_recent_dealer_cm RCM ON RCM.ORDER_ID = et.ORDER_ID AND et.SOURCE = 'CM'      LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD ON ((TDD.MG_USER_ID  = RCM.DEALER_NAME AND et.SOURCE = 'CM') OR (TDD.INITIALS = RAL.TRD_TRADER AND et.SOURCE = 'AL'))  AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE) AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE)      LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD2 ON ((TDD2.MG_USER_ID  = COALESCE(CO.ACCEPTED_BY, CO.INSTRUCTED_BY) AND eT.SOURCE = 'CM') OR (TDD2.INITIALS = PM.TRADER AND eT.SOURCE = 'AL')) AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE) AS DATE)   BETWEEN CAST(TDD2.DATE_FROM AS DATE) AND CAST(TDD2.DATE_TO AS DATE)        LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON ((DD.REPORT_NAME = 'Timely Execution MM' and (PRODUCT_TYPE = 'Cash Products' or et.SOURCE = 'al')) or (DD.REPORT_NAME = 'Timely Execution RR' and (PRODUCT_TYPE = 'Repo / Rev Repo Products')))    AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE) AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)        WHERE et.VG_09 != 0        MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_CASH AS T    USING #temp_audit AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);        --Update Exceptions Table        IF OBJECT_ID('tempdb..#MM_FINAL', 'U') IS NOT NULL DROP TABLE #MM_FINAL     SELECT DISTINCT      ORDER_ID,     MAX_CONFIRMED_DATETIME,     TIMELY_ACK_THRESHOLD_MINS,     VG_09_ACKNOWLEDGEMENT,     TIMELY_EXEC_THRESHOLD_MINS,     VG_09_EXECUTION,     VG_09,     [SOURCE],     VG_09_CREATETIME         INTO #MM_FINAL     FROM #exception_table_vg_total     WHERE PRODUCT_TYPE = 'Cash Products'                IF OBJECT_ID('tempdb..#RR_FINAL', 'U') IS NOT NULL DROP TABLE #RR_FINAL     SELECT DISTINCT      ORDER_ID,     MAX_CONFIRMED_DATETIME,     TIMELY_ACK_THRESHOLD_MINS,     VG_09_ACKNOWLEDGEMENT,     TIMELY_EXEC_THRESHOLD_MINS,     VG_09_EXECUTION,     VG_09,     [SOURCE],     VG_09_CREATETIME     INTO #RR_FINAL     FROM #exception_table_vg_total     WHERE PRODUCT_TYPE = 'Repo / Rev Repo Products'            IF      OBJECT_ID('VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_MM_TABLE', 'U') IS NULL     SELECT distinct *      INTO VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_MM_TABLE      FROM #MM_FINAL    ELSE      IF OBJECT_ID('tempdb..#temp_TE_table', 'U') IS NOT NULL      DROP TABLE #temp_TE_table     SELECT distinct *      INTO #TEMP_TE_TABLE     FROM #MM_FINAL         MERGE VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_MM_TABLE AS T     USING #TEMP_TE_TABLE AS S    ON T.ORDER_ID = S.ORDER_ID and t.source = s.source    WHEN MATCHED     THEN UPDATE     SET      ORDER_ID         = CASE WHEN S.VG_09 > T.VG_09 THEN S.ORDER_ID ELSE T.ORDER_ID END,     --INSTRUCTION_RECEIVED_DATE     = CASE WHEN S.VG_09 > T.VG_09 THEN S.INSTRUCTION_RECEIVED_DATE ELSE T.INSTRUCTION_RECEIVED_DATE END,     --OMQ_DATE_TIME        = CASE WHEN S.VG_09 > T.VG_09 THEN S.OMQ_DATE_TIME ELSE T.OMQ_DATE_TIME END,     --ACCEPTED_DATETIME       = CASE WHEN S.VG_09 > T.VG_09 THEN S.ACCEPTED_DATETIME ELSE T.ACCEPTED_DATETIME END,     MAX_CONFIRMED_DATETIME      = CASE WHEN S.VG_09 > T.VG_09 THEN S.MAX_CONFIRMED_DATETIME ELSE T.MAX_CONFIRMED_DATETIME END,     --ACKNOWLEDGEMENT_MINS      = CASE WHEN S.VG_09 > T.VG_09 THEN S.ACKNOWLEDGEMENT_MINS ELSE T.ACKNOWLEDGEMENT_MINS END,     TIMELY_ACK_THRESHOLD_MINS     = CASE WHEN S.VG_09 > T.VG_09 THEN S.TIMELY_ACK_THRESHOLD_MINS ELSE T.TIMELY_ACK_THRESHOLD_MINS END,     VG_09_ACKNOWLEDGEMENT      = CASE WHEN S.VG_09 > T.VG_09 THEN S.VG_09_ACKNOWLEDGEMENT ELSE T.VG_09_ACKNOWLEDGEMENT END,     --VG_09_ACKNOWLEDGEMENT_CREATETIME   = CASE WHEN S.VG_09 > T.VG_09 THEN S.VG_09_ACKNOWLEDGEMENT_CREATETIME ELSE T.VG_09_ACKNOWLEDGEMENT_CREATETIME END,     --EXECUTION_MINS        = CASE WHEN S.VG_09 > T.VG_09 THEN S.EXECUTION_MINS ELSE T.EXECUTION_MINS END,     TIMELY_EXEC_THRESHOLD_MINS         = CASE WHEN S.VG_09 > T.VG_09 THEN S.TIMELY_EXEC_THRESHOLD_MINS ELSE T.TIMELY_EXEC_THRESHOLD_MINS END,     VG_09_EXECUTION        = CASE WHEN S.VG_09 > T.VG_09 THEN S.VG_09_EXECUTION ELSE T.VG_09_EXECUTION END,     --VG_09_EXECUTION_CREATETIME     = CASE WHEN S.VG_09 > T.VG_09 THEN S.VG_09_EXECUTION_CREATETIME ELSE T.VG_09_EXECUTION_CREATETIME END,     --VG_09         = CASE WHEN S.VG_09 > T.VG_09 THEN S.VG_09 ELSE T.VG_09 END,     VG_09          = CASE WHEN S.VG_09 > T.VG_09 THEN S.VG_09 ELSE T.VG_09 END,     [SOURCE]         = CASE WHEN S.VG_09 > T.VG_09 THEN S.[SOURCE] ELSE T.[SOURCE] END,     VG_09_CREATETIME             = CASE WHEN S.VG_09 > T.VG_09 THEN S.VG_09_CREATETIME ELSE T.VG_09_CREATETIME END     --VG_09_MM         = CASE WHEN S.VG_09 > T.VG_09 THEN S.VG_09_MM ELSE T.VG_09_MM END        WHEN NOT MATCHED     THEN     INSERT     (ORDER_ID,     --INSTRUCTION_RECEIVED_DATE,     --OMQ_DATE_TIME,     --ACCEPTED_DATETIME,     MAX_CONFIRMED_DATETIME,     --ACKNOWLEDGEMENT_MINS,     TIMELY_ACK_THRESHOLD_MINS,     VG_09_ACKNOWLEDGEMENT,     --VG_09_ACKNOWLEDGEMENT_CREATETIME,     --EXECUTION_MINS,     TIMELY_EXEC_THRESHOLD_MINS,     VG_09_EXECUTION,     --VG_09_EXECUTION_CREATETIME,     --VG_09,     VG_09,     [SOURCE],     VG_09_CREATETIME     --VG_09_MM     )         VALUES     (S.ORDER_ID,     --S.INSTRUCTION_RECEIVED_DATE,     --S.OMQ_DATE_TIME,     --S.ACCEPTED_DATETIME,     S.MAX_CONFIRMED_DATETIME,     --S.ACKNOWLEDGEMENT_MINS,     S.TIMELY_ACK_THRESHOLD_MINS,     S.VG_09_ACKNOWLEDGEMENT,     --S.VG_09_ACKNOWLEDGEMENT_CREATETIME,     --S.EXECUTION_MINS,     S.TIMELY_EXEC_THRESHOLD_MINS,     S.VG_09_EXECUTION,     --S.VG_09_EXECUTION_CREATETIME,     --S.VG_09,     S.VG_09,     S.[SOURCE],     S.VG_09_CREATETIME     --VG_09_MM     );        IF      OBJECT_ID('VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_RR_TABLE', 'U') IS NULL     SELECT distinct *      INTO VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_RR_TABLE     FROM #RR_FINAL    ELSE      IF OBJECT_ID('tempdb..#temp_TE_table_RR', 'U') IS NOT NULL      DROP TABLE #temp_TE_table_RR     SELECT distinct *      INTO #TEMP_TE_TABLE_RR     FROM #RR_FINAL         MERGE VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_CASH_RR_TABLE AS T     USING #TEMP_TE_TABLE_RR AS S    ON T.ORDER_ID = S.ORDER_ID and t.source = s.source    WHEN MATCHED     THEN UPDATE     SET      ORDER_ID         = CASE WHEN S.VG_09 > T.VG_09 THEN S.ORDER_ID ELSE T.ORDER_ID END,     --INSTRUCTION_RECEIVED_DATE     = CASE WHEN S.VG_09 > T.VG_09 THEN S.INSTRUCTION_RECEIVED_DATE ELSE T.INSTRUCTION_RECEIVED_DATE END,     --OMQ_DATE_TIME        = CASE WHEN S.VG_09 > T.VG_09 THEN S.OMQ_DATE_TIME ELSE T.OMQ_DATE_TIME END,     --ACCEPTED_DATETIME       = CASE WHEN S.VG_09 > T.VG_09 THEN S.ACCEPTED_DATETIME ELSE T.ACCEPTED_DATETIME END,     MAX_CONFIRMED_DATETIME      = CASE WHEN S.VG_09 > T.VG_09 THEN S.MAX_CONFIRMED_DATETIME ELSE T.MAX_CONFIRMED_DATETIME END,     --ACKNOWLEDGEMENT_MINS      = CASE WHEN S.VG_09 > T.VG_09 THEN S.ACKNOWLEDGEMENT_MINS ELSE T.ACKNOWLEDGEMENT_MINS END,     TIMELY_ACK_THRESHOLD_MINS          = CASE WHEN S.VG_09 > T.VG_09 THEN S.TIMELY_ACK_THRESHOLD_MINS ELSE T.TIMELY_ACK_THRESHOLD_MINS END,     VG_09_ACKNOWLEDGEMENT      = CASE WHEN S.VG_09 > T.VG_09 THEN S.VG_09_ACKNOWLEDGEMENT ELSE T.VG_09_ACKNOWLEDGEMENT END,     --VG_09_ACKNOWLEDGEMENT_CREATETIME   = CASE WHEN S.VG_09 > T.VG_09 THEN S.VG_09_ACKNOWLEDGEMENT_CREATETIME ELSE T.VG_09_ACKNOWLEDGEMENT_CREATETIME END,     --EXECUTION_MINS        = CASE WHEN S.VG_09 > T.VG_09 THEN S.EXECUTION_MINS ELSE T.EXECUTION_MINS END,     TIMELY_EXEC_THRESHOLD_MINS         = CASE WHEN S.VG_09 > T.VG_09 THEN S.TIMELY_EXEC_THRESHOLD_MINS ELSE T.TIMELY_EXEC_THRESHOLD_MINS END,     VG_09_EXECUTION        = CASE WHEN S.VG_09 > T.VG_09 THEN S.VG_09_EXECUTION ELSE T.VG_09_EXECUTION END,     --VG_09_EXECUTION_CREATETIME     = CASE WHEN S.VG_09 > T.VG_09 THEN S.VG_09_EXECUTION_CREATETIME ELSE T.VG_09_EXECUTION_CREATETIME END,     --VG_09         = CASE WHEN S.VG_09 > T.VG_09 THEN S.VG_09 ELSE T.VG_09 END,     VG_09          = CASE WHEN S.VG_09 > T.VG_09 THEN S.VG_09 ELSE T.VG_09 END,     [SOURCE]         = CASE WHEN S.VG_09 > T.VG_09 THEN S.[SOURCE] ELSE T.[SOURCE] END,     VG_09_CREATETIME             = CASE WHEN S.VG_09 > T.VG_09 THEN S.VG_09_CREATETIME ELSE T.VG_09_CREATETIME END     --VG_09_RR         = CASE WHEN S.VG_09 > T.VG_09 THEN S.VG_09_RR ELSE T.VG_09_RR END            WHEN NOT MATCHED     THEN     INSERT     (ORDER_ID,     --INSTRUCTION_RECEIVED_DATE,     --OMQ_DATE_TIME,     --ACCEPTED_DATETIME,     MAX_CONFIRMED_DATETIME,     --ACKNOWLEDGEMENT_MINS,     TIMELY_ACK_THRESHOLD_MINS,     VG_09_ACKNOWLEDGEMENT,     --VG_09_ACKNOWLEDGEMENT_CREATETIME,     --EXECUTION_MINS,     TIMELY_EXEC_THRESHOLD_MINS,     VG_09_EXECUTION,     --VG_09_EXECUTION_CREATETIME,     --VG_09,     VG_09,     [SOURCE],     VG_09_CREATETIME     --VG_09_RR     )         VALUES     (S.ORDER_ID,     ---S.INSTRUCTION_RECEIVED_DATE,     --S.OMQ_DATE_TIME,     --S.ACCEPTED_DATETIME,     S.MAX_CONFIRMED_DATETIME,     --S.ACKNOWLEDGEMENT_MINS,     S.TIMELY_ACK_THRESHOLD_MINS,     S.VG_09_ACKNOWLEDGEMENT,     --S.VG_09_ACKNOWLEDGEMENT_CREATETIME,     --S.EXECUTION_MINS,     S.TIMELY_EXEC_THRESHOLD_MINS,     S.VG_09_EXECUTION,     --S.VG_09_EXECUTION_CREATETIME,     --S.VG_09,     S.VG_09,     [SOURCE],     VG_09_CREATETIME     --VG_09_RR     );         IF OBJECT_ID('tempdb..#temp_max_req_orders', 'U') IS NOT NULL DROP TABLE #temp_max_req_orders     IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades     IF OBJECT_ID('tempdb..#temp_max_touch_tr', 'U') IS NOT NULL DROP TABLE #temp_max_touch_tr     IF OBJECT_ID('tempdb..#temp_max_ORDER_touch', 'U') IS NOT NULL DROP TABLE #temp_max_ORDER_touch     IF OBJECT_ID('tempdb..#cash_manager_temp', 'U') IS NOT NULL DROP TABLE #cash_manager_temp     IF OBJECT_ID('tempdb..#aladdin_temp', 'U') IS NOT NULL DROP TABLE #aladdin_temp     IF OBJECT_ID('tempdb..#exception_table', 'U') IS NOT NULL DROP TABLE #exception_table     IF OBJECT_ID('tempdb..#exception_table_vg_total', 'U') IS NOT NULL DROP TABLE #exception_table_vg_total     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     IF OBJECT_ID('tempdb..#MM_FINAL', 'U') IS NOT NULL DROP TABLE #MM_FINAL     IF OBJECT_ID('tempdb..#RR_FINAL', 'U') IS NOT NULL DROP TABLE #RR_FINAL     IF OBJECT_ID('tempdb..#temp_TE_table', 'U') IS NOT NULL DROP TABLE #temp_TE_table        END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_09_TIMELY_EXECUTION_DMG  CreateDate: 2025-06-26 18:18:09.950  ModifyDate: 2025-06-26 18:18:09.950  --- DEFINITION START ---      -------------------New Changes --------------------------------    -- 2024-01-17 Matej Miter: created for Jira number:    -- SURVG-888 - Crated a number counting table to avoid using master table that gives us only dates up to 5 years. New solution looks into the future and will work up to 2999 year        CREATE PROCEDURE [dbo].[VG_09_TIMELY_EXECUTION_DMG]     -- Add the parameters for the stored procedure here     -- @Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;     DECLARE @Date1 DATE, @Date2 DATE--@DATE_FILTER DATE      --SET @DATE_FILTER = CONVERT(DATE, GETDATE()) --Set date filter to only select data from current pull date     SET @Date1 = (select min(AUTH_TIME) from VISTA_REPORTING.dbo.PM_ORDERS) --Set the variables used to create the weekday table     SET @Date2 = DATEADD(day, 160, GETDATE())             IF OBJECT_ID('tempdb..#date_range', 'U') IS NOT NULL DROP TABLE #date_range     SELECT         DATEADD(DAY,Number+1,@Date1) as [DATE],         DATEPART(weekday, DATEADD(DAY,Number,@Date1)) as WEEKDAY --create a table that assigns a day of the week to every date following the sonvention that Monday=1, Tuesday=2, etc...     into #date_range     FROM VISTA_REPORTING.dbo.REF_TIMELY_EX_DATE_HELPER     where DATEADD(DAY,Number+1,@Date1) < @Date2             -- Create a table with row numbers as a pseudo index for each entry to enable refrencing of rows by index     IF OBJECT_ID('tempdb..#temp_row_table', 'U') IS NOT NULL DROP TABLE #temp_row_table     SELECT       ORD_NUM,      DEALING_DESK,      TOUCH_COUNT,      ASSIGNED_TO_STATUS,      TRADER,      ROW_NUMBER() OVER(PARTITION BY ORD_NUM ORDER BY TOUCH_COUNT) AS N_ROW     INTO #temp_row_table     FROM VISTA_REPORTING.dbo.PM_ORDERS         -- Find the first index where ASSIGNED_TO_STATUS = 'RETURNED' AND TRADER IS NULL and the preceeding index     IF OBJECT_ID('tempdb..#temp_returned_table', 'U') IS NOT NULL DROP TABLE #temp_returned_table     SELECT       tr.ORD_NUM,      MIN(tr.N_ROW) AS N_ROW,      MIN(tr2.N_ROW) AS N_ROW_MINUS,      tr2.DEALING_DESK,      tr.ASSIGNED_TO_STATUS AS ATS1,      tr2.ASSIGNED_TO_STATUS AS ATS2     INTO #temp_returned_table     FROM #temp_row_table tr     LEFT JOIN #temp_row_table tr2 ON tr2.ORD_NUM=tr.ORD_NUM AND tr.N_ROW=tr2.N_ROW+1     WHERE (tr.ASSIGNED_TO_STATUS = 'RETURNED' AND ISNULL(tr2.ASSIGNED_TO_STATUS, '') != 'RETURNED')       AND tr.TRADER IS NULL        AND tr2.DEALING_DESK IS NOT NULL     GROUP BY       tr.ORD_NUM,      tr2.DEALING_DESK,      tr.ASSIGNED_TO_STATUS,      tr2.ASSIGNED_TO_STATUS     order by ORD_NUM             -- Create a table that inputs the last valid DEALING_DESK (by created index) for any rows where     -- ASSIGNED_TO_STATUS = 'RETURNED' AND TRADER IS NULL which will be used to filter the data by dealing desk     -- To mitigate cases where there are multiple dealing desks the script now selects the correct dealing desk based     -- on the previously created index.     IF OBJECT_ID('tempdb..#temp_ord_dd_table', 'U') IS NOT NULL DROP TABLE #temp_ord_dd_table     SELECT DISTINCT      po.ORD_NUM,      po.TOUCH_COUNT,      po.ASSIGNED_TO_STATUS,      po.TRADER,      CASE       WHEN po.ASSIGNED_TO_STATUS = 'RETURNED' AND po.TRADER IS NULL THEN b2.DEALING_DESK       ELSE po.DEALING_DESK      END AS DEALING_DESK     INTO #temp_ord_dd_table     FROM #temp_row_table po     OUTER APPLY (SELECT TOP 1 *          FROM #temp_returned_table trt         WHERE trt.ORD_NUM=po.ORD_NUM AND po.N_ROW >N_ROW_MINUS         ORDER BY N_ROW_MINUS DESC) b2         IF OBJECT_ID('tempdb..#cancel_pm', 'U') IS NOT NULL DROP TABLE #cancel_pm     SELECT DISTINCT      ORD_NUM     INTO #cancel_pm     FROM VISTA_REPORTING.dbo.PM_ORDERS     WHERE STATUS = 'C'             --1.a. Create a list of all PM order authorisation times with the largest face value and fill amount (this is used to determine whether the order gets fully filled).      --           Note that we rebase some orders to a 13:00 authorisation time as per business requirements     IF OBJECT_ID('tempdb..#PM_ORD_AUTH_TIMES', 'U') IS NOT NULL DROP TABLE #PM_ORD_AUTH_TIMES     SELECT DISTINCT      pm.ORD_NUM,       first_face.FACE,      pm.FILL_AMT,      pm.AUTH_TIME,      pm.ASSIGNED_TO_STATUS,      pm.STATUS,      pm.MODIFY_TIME,      tod.DEALING_DESK,      case      when p.PRIMARY_MARKET=0        AND CAST(pm.AUTH_TIME AS TIME) < CAST('13:00:00' AS TIME)        AND (p.DEBT_DERIV='DEBT'        AND (tr.TRD_CURRENCY in ('MXN', 'UYU', 'COP', 'ARS', 'PEN', 'BRL', 'CLP', 'BOB'))        OR (tr.TRD_CURRENCY = 'USD' and p.EMERGING_MARKET = 0 and p.DEBT_DERIV = 'DEBT')        OR (tr.TRD_CURRENCY = 'USD' and p.INST_TYPE IN ('SCDS','ICDS')))        then DATEADD(day, DATEDIFF(day, 0, pm.AUTH_TIME), '13:00:00') -- Rebase time to 13:00      else pm.AUTH_TIME      end as REBASED_AUTH_TIME     INTO #PM_ORD_AUTH_TIMES     FROM VISTA_REPORTING.dbo.PM_ORDERS pm         LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON pm.ORD_NUM = oc.PM_ORD         LEFT JOIN (SELECT DISTINCT ORD_NUM, TRD_CURRENCY FROM VISTA_REPORTING.dbo.TRADES) tr on oc.TRD_ORD = tr.ORD_NUM         LEFT JOIN (SELECT DISTINCT ORD_NUM, EMERGING_MARKET, INST_TYPE, DEBT_DERIV, PRIMARY_MARKET FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) p on tr.ORD_NUM = p.ORD_NUM         OUTER APPLY (         SELECT TOP 1 * FROM VISTA_REPORTING.dbo.PM_ORDERS pm2         WHERE pm.ORD_NUM = pm2.ORD_NUM  AND pm.AUTH_TIME = pm2.AUTH_TIME AND STATUS IN ('U','A','F') ORDER BY TOUCH_COUNT ASC) first_face -- We want to look at the first value for FACE where the STATUS IN ('U','A','F') for this PM Ord Auth time.         LEFT JOIN #temp_ord_dd_table tod ON tod.ORD_NUM=pm.ORD_NUM AND tod.TOUCH_COUNT = pm.TOUCH_COUNT     WHERE         (pm.DEALING_DESK = 'DMG' -- filter the data using the last valid dealing desk        AND pm.AUTH_TIME IS NOT NULL)   -- Aladdin provides records where AUTH_TIME is NULL. This happens when a PM has raised an order but not yet authorised it. We do not need to consider these.             --1.a.i. Get trader order details for the PM order for when they cancel an order - this is a reversion event.     IF OBJECT_ID('tempdb..#trd_ord_cancels', 'U') IS NOT NULL DROP TABLE #trd_ord_cancels     SELECT DISTINCT        oc.PM_ORD,         CASE when p.PRIMARY_MARKET=0          AND CAST(trd.AUTH_TIME AS TIME) < CAST('13:00:00' AS TIME)          AND (p.DEBT_DERIV='DEBT'          AND (tr.TRD_CURRENCY in ('MXN', 'UYU', 'COP', 'ARS', 'PEN', 'BRL', 'CLP', 'BOB'))          OR (tr.TRD_CURRENCY = 'USD' and p.EMERGING_MARKET = 0 and p.DEBT_DERIV = 'DEBT'))          OR (tr.TRD_CURRENCY = 'USD' and p.INST_TYPE IN ('SCDS','ICDS'))        then DATEADD(day, DATEDIFF(day, 0, trd.AUTH_TIME), '13:00:00') -- Rebase time to 13:00         else trd.AUTH_TIME         end as REBASED_AUTH_TIME,         (MODIFY_TIME) AS Cancel_Time     INTO #trd_ord_cancels     FROM VISTA_REPORTING.dbo.TRD_ORDERS trd     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc     ON trd.ORD_NUM = oc.TRD_ORD     LEFT JOIN VISTA_REPORTING.dbo.TRADES tr on oc.TRD_ORD = tr.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p on tr.ORD_NUM = p.ORD_NUM     WHERE trd.STATUS = 'C'                --1.b. Rank the Auth times for each ORD_NUM so that we can find the time range between AUTH_TIMEs for each ORD_NUM     IF OBJECT_ID('tempdb..#PM_ORD_AUTH_TIMES_RANKED', 'U') IS NOT NULL DROP TABLE #PM_ORD_AUTH_TIMES_RANKED     SELECT          ORD_NUM,         REBASED_AUTH_TIME,         CONVERT(DECIMAL(21,2),ABS(FACE)) AS FACE, --Take the absolute value as the FACE is negative for a Sell         CONVERT(DECIMAL(21,2),MAX(ABS(FILL_AMT))) AS MAX_FILL,         RANK() OVER(PARTITION BY ORD_NUM ORDER BY REBASED_AUTH_TIME ASC) AS Auth_Index     INTO #PM_ORD_AUTH_TIMES_RANKED     FROM #PM_ORD_AUTH_TIMES     GROUP BY         ORD_NUM,          REBASED_AUTH_TIME,         FACE         /* 1.c. For each PM order authorisation, create a field to identify the next authorisation time      (this is done so that we can tie market executions and reversions back to the correct PM order      authorisation when we have multiple of these).*/     IF OBJECT_ID('tempdb..#PM_ORD_AUTH_TIME_RANGE', 'U') IS NOT NULL DROP TABLE #PM_ORD_AUTH_TIME_RANGE     SELECT DISTINCT         base.ORD_NUM,         base.REBASED_AUTH_TIME,         CASE WHEN base.Face = base.Max_Fill THEN 1 ELSE 0 END AS [Fully_Filled_Flag], --Create a flag to determine whether the order has been fully filled during this authorisation period         ISNULL(nxt.REBASED_AUTH_TIME,'9999-12-31') AS next_Authorisation -- If there are no PM order authorisations after this, set to the largest SQL Server date     INTO #PM_ORD_AUTH_TIME_RANGE     FROM #PM_ORD_AUTH_TIMES_RANKED base     OUTER APPLY (         SELECT TOP 1 * FROM #PM_ORD_AUTH_TIMES_RANKED nxt         WHERE base.ORD_NUM = nxt.ORD_NUM  AND base.Auth_Index < nxt.Auth_Index ORDER BY nxt.Auth_Index ASC) nxt             IF OBJECT_ID('tempdb..#max_filled_table', 'U') IS NOT NULL DROP TABLE #max_filled_table     SELECT      ORD_NUM,      MAX(REBASED_AUTH_TIME) AS REBASED_AUTH_TIME,      MAX([Fully_Filled_Flag]) AS [Fully_Filled_Flag]     INTO #max_filled_table     FROM #PM_ORD_AUTH_TIME_RANGE     GROUP BY ORD_NUM             /* 1.d. For each PM Order authorisation, find the time that the order was reverted back to the fund manager      (have been advised by Chris Nicoll on 2018-03-12 at 15:56 that this occurs when the PM order ASSIGNED_TO_STATUS field      is set to 'RETURNED' and the Status is set to 'U').     Vista will also look at the trader order to determine*/     IF OBJECT_ID('tempdb..#PM_ORD_AUTH_TIME_REVERSION', 'U') IS NOT NULL DROP TABLE #PM_ORD_AUTH_TIME_REVERSION     SELECT DISTINCT         pm.ORD_NUM,         --pm.REBASED_AUTH_TIME,         CASE        WHEN min_return.min_modify < cncl.Cancel_Time THEN min_return.min_modify       WHEN cncl.Cancel_Time <  min_return.min_modify  THEN cncl.Cancel_Time       WHEN cncl.Cancel_Time IS NOT NULL    THEN cncl.Cancel_Time       WHEN min_return.min_modify IS NOT NULL   THEN min_return.min_modify       END AS [Reversion_Time] --We have two approaches to finding the reversion time - a) When the PM order has ASSIGNED_TO_STATUS = 'RETURNED' and STATUS = 'U', and b) When the TRD order for that PM order has STATUS = 'C'     INTO #PM_ORD_AUTH_TIME_REVERSION     FROM #PM_ORD_AUTH_TIMES_RANKED pm     LEFT JOIN         (SELECT          ORD_NUM,         REBASED_AUTH_TIME,         MIN(MODIFY_TIME) as min_modify         FROM #PM_ORD_AUTH_TIMES         WHERE ASSIGNED_TO_STATUS = 'RETURNED' and STATUS IN ('U','F','O')         GROUP BY ORD_NUM, REBASED_AUTH_TIME         ) min_return     ON pm.ORD_NUM = min_return.ORD_NUM AND pm.REBASED_AUTH_TIME = min_return.REBASED_AUTH_TIME      LEFT JOIN         (SELECT           PM_ORD,          REBASED_AUTH_TIME,          MIN(Cancel_Time) as Cancel_Time         FROM #trd_ord_cancels         GROUP BY PM_ORD, REBASED_AUTH_TIME         ) cncl     ON pm.ORD_NUM = cncl.PM_ORD AND pm.REBASED_AUTH_TIME = cncl.REBASED_AUTH_TIME               --1.e. Determine the trades associated with each PM order.     IF OBJECT_ID('tempdb..#PM_ORD_TRADES', 'U') IS NOT NULL DROP TABLE #PM_ORD_TRADES     SELECT          oc.PM_ORD,         t.EXECUTION_TIME     INTO #PM_ORD_TRADES     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc     ON t.ORD_NUM = oc.TRD_ORD         /*1.f. For each PM order authorisation, determine the time of reversion and find the latest execution      for this authorisation (do not include any executions that are associated with prior of future authorisations for this order).*/     IF OBJECT_ID('tempdb..#PM_AUTH_TIMINGS', 'U') IS NOT NULL DROP TABLE #PM_AUTH_TIMINGS     SELECT DISTINCT         pm.*,         rev.Reversion_Time,         trd.EXECUTION_TIME AS [Last_Trade],         CASE WHEN pm.[Fully_Filled_Flag] = 1 THEN trd.EXECUTION_TIME ELSE ISNULL(Reversion_Time,GETDATE()) END AS [Last_Event_Time] --Create a field to consolidate the datetime of interest. If there is no reversion, use the current date.     INTO #PM_AUTH_TIMINGS     FROM #PM_ORD_AUTH_TIME_RANGE pm     INNER JOIN #max_filled_table mft ON mft.ORD_NUM = pm.ORD_NUM AND mft.Fully_Filled_Flag = pm.Fully_Filled_Flag AND pm.REBASED_AUTH_TIME = mft.REBASED_AUTH_TIME     LEFT JOIN (SELECT * FROM #PM_ORD_AUTH_TIME_REVERSION WHERE Reversion_Time IS NOT NULL) rev ON pm.ORD_NUM = rev.ORD_NUM --AND pm.REBASED_AUTH_TIME = rev.REBASED_AUTH_TIME     OUTER APPLY (SELECT TOP 1 t.*         FROM #PM_ORD_TRADES t         WHERE pm.ORD_NUM = t.PM_ORD AND t.EXECUTION_TIME BETWEEN pm.REBASED_AUTH_TIME AND pm.next_Authorisation -- We only want to use the set of trades that are executed after this particular PM Order authorisation and before the next PM Order authorisation           ORDER BY t.EXECUTION_TIME DESC) trd     --SELECT * FROM #PM_AUTH_TIMINGS         --1.g. Find the number of weekends and holidays between the PM Order authorisation time and last event time     IF OBJECT_ID('tempdb..#PM_AUTH_TIMINGS_WEEKEND', 'U') IS NOT NULL DROP TABLE #PM_AUTH_TIMINGS_WEEKEND     SELECT          pm.*,         COUNT(DISTINCT d.[DATE]) AS [Weekend_Count]         INTO #PM_AUTH_TIMINGS_WEEKEND     FROM #PM_AUTH_TIMINGS pm     LEFT JOIN #date_range d     ON d.[DATE] BETWEEN CONVERT(DATE,pm.REBASED_AUTH_TIME) AND CONVERT(DATE,Last_Event_Time) AND WEEKDAY IN (6,7)     GROUP BY         pm.ORD_NUM,         --pm.AUTH_TIME,         pm.REBASED_AUTH_TIME,         pm.Fully_Filled_Flag,         pm.next_Authorisation,         pm.Reversion_Time,         pm.Last_Trade,         pm.Last_Event_Time         IF OBJECT_ID('tempdb..#PM_ORD_AUTH_TIMES_WKND_HOLS', 'U') IS NOT NULL DROP TABLE #PM_ORD_AUTH_TIMES_WKND_HOLS     SELECT          pm.*,         COUNT(DISTINCT h.CLOSURE_DATES) AS [Holiday_Count],         ISNULL(pm.Weekend_Count,0) + ISNULL(COUNT(DISTINCT h.CLOSURE_DATES),0) AS [Weekend_Holiday_Count],         DATEDIFF(minute, pm.REBASED_AUTH_TIME, pm.Last_Event_Time) AS [Time Difference],         DATEDIFF(DAY, pm.REBASED_AUTH_TIME, pm.Last_Event_Time - (ISNULL(pm.Weekend_Count,0) + ISNULL(COUNT(DISTINCT h.CLOSURE_DATES),0))) as [Date_Difference]      INTO #PM_ORD_AUTH_TIMES_WKND_HOLS     FROM #PM_AUTH_TIMINGS_WEEKEND pm     left join VISTA_STAGING.dbo.HOLIDAYS h      on CONVERT(DATE, h.CLOSURE_DATES, 103) BETWEEN CONVERT(DATE,pm.REBASED_AUTH_TIME) AND CONVERT(DATE,Last_Event_Time) and h.COUNTRY_CODE='GB'     GROUP BY         pm.ORD_NUM,        -- pm.AUTH_TIME,         pm.REBASED_AUTH_TIME,         pm.Fully_Filled_Flag,         pm.next_Authorisation,         pm.Reversion_Time,         pm.Last_Trade,         pm.Last_Event_Time,         pm.[Weekend_Count]     --SELECT * FROM #PM_ORD_AUTH_TIMES_WKND_HOLS         --1.h. For each PM Order Authorisation, determine if the TE threshold has been breached     IF OBJECT_ID('tempdb..#execution_exception', 'U') IS NOT NULL DROP TABLE #execution_exception     SELECT DISTINCT         pm.*,          CASE         WHEN cp.ORD_NUM IS NOT NULL THEN 0 -- This is to mitigate cancelled pm_orders which would never be executed         WHEN [Date_Difference] BETWEEN 1 AND 4    THEN 1         WHEN [Date_Difference] BETWEEN 5 AND 9    THEN 5         WHEN [Date_Difference] BETWEEN 10 AND 19  THEN 10         WHEN [Date_Difference] BETWEEN 20 AND 39  THEN 20         WHEN [Date_Difference] BETWEEN 40 AND 79  THEN 40         WHEN [Date_Difference] BETWEEN 80 AND 159 THEN 80         WHEN [Date_Difference] > 159 THEN 160         END AS [Inter_Day_Exception_Value], -- Determine if inter-day exception         CASE         WHEN cp.ORD_NUM IS NOT NULL THEN 0         WHEN [Time Difference] > timex_thr.[TIMELY_THRESHOLD_MINS]          and prim.INST_TYPE in ('GOV', 'IGOV', 'EM GOV')         THEN 1         WHEN [Time Difference] > timex_thr.[TIMELY_THRESHOLD_MINS]          and prim.INST_TYPE in ( 'SCDS', 'ICDS')         THEN 1         WHEN [Time Difference] > timex_thr.[TIMELY_THRESHOLD_MINS]          and prim.INST_TYPE in ('IFS', 'OIS', 'IRS', 'TRS', 'EQOPT', 'FXOPT', 'BASIS', 'ZCS', 'CCS', 'CASWP', 'CDSWAPTION', 'ASWP', 'SWAP')         THEN 1         ELSE 0         END AS [Intra_Day_Exception_Value] -- Determine if intra-day exception     INTO #execution_exception     FROM #PM_ORD_AUTH_TIMES_WKND_HOLS pm     LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc --  distinct this list so we avoid duplications     ON pm.ORD_NUM = oc.PM_ORD     LEFT JOIN (      SELECT        ORD_NUM,        [1615_DEALING],        TWEB_CLOSE_DEALING,       INTERFUND_TRANSFER,        DEALING_DESK,       INST_TYPE        --MAX(CASE WHEN PRIMARY_MARKET = 1 THEN 1 WHEN PRIMARY_MARKET_ORDER_LEVEL = 1 THEN 1 ELSE 0 END) AS PRIMARY_MARKET_ORDER_LEVEL       FROM  VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE       --GROUP BY ORD_NUM, [1615_DEALING], TWEB_CLOSE_DEALING, INTERFUND_TRANSFER, INST_TYPE, DEALING_DESK      ) prim     ON oc.TRD_ORD = prim.ORD_NUM     LEFT JOIN VISTA_STAGING.dbo.REF_DMG_TIMELY_EX_THRESHOLD timex_thr     on timex_thr.ASSET_CLASS = prim.INST_TYPE AND CAST(pm.[REBASED_AUTH_TIME] as DATE) BETWEEN CAST(timex_thr.[DATE_FROM] as date) AND CAST(timex_thr.[DATE_TO] as DATE)     LEFT JOIN #cancel_pm cp ON cp.ORD_NUM=pm.ORD_NUM     --WHERE prim.DEALING_DESK = 'DMG'         IF OBJECT_ID('tempdb..#max_execution_exception', 'U') IS NOT NULL DROP TABLE #max_execution_exception     SELECT       ORD_NUM,       REBASED_AUTH_TIME,      MAX(Reversion_Time) AS Reversion_Time,      MAX(Inter_Day_Exception_Value) AS Inter_Day_Exception_Value,      MAX(Intra_Day_Exception_Value) AS Intra_Day_Exception_Value,      MAX([Time Difference]) AS [Time_Difference],      MAX([Date_Difference]) AS [Date_Difference]     INTO #max_execution_exception     FROM #execution_exception     GROUP BY ORD_NUM, REBASED_AUTH_TIME             --1.i. Add in detail for the type of exception     IF OBJECT_ID('tempdb..#execution_exception_type', 'U') IS NOT NULL DROP TABLE #execution_exception_type     SELECT DISTINCT           *,           CASE                  WHEN [Inter_Day_Exception_Value] >= 1 THEN 'Inter' -- If an exception has been raised and the date is greater than one then it must be an inter-day exception                 WHEN [Intra_Day_Exception_Value] >= 1 THEN 'Intra' --If an exception has been raised and it is not an inter-day exception then it must be an intra-day exception                 ELSE NULL           END AS [Exception_Type],           CASE                  WHEN [Inter_Day_Exception_Value] >= 1 THEN [Inter_Day_Exception_Value] -- If an exception has been raised and the date is greater than one then it must be an inter-day exception                 WHEN [Intra_Day_Exception_Value] >= 1 THEN [Intra_Day_Exception_Value] --If an exception has been raised and it is not an inter-day exception then it must be an intra-day exception                 ELSE 0           END AS [Exception_Value],           CASE                  WHEN [Inter_Day_Exception_Value] >= 1 THEN CONVERT(VARCHAR(5),[Date_Difference]) + ' days' -- If an exception has been raised and the date is greater than one then it must be an inter-day exception                 WHEN [Intra_Day_Exception_Value] >= 1 THEN CONVERT(varchar(5), DATEADD(minute, Time_Difference, 0), 114)  + ' (HH:MM)' --If an exception has been raised and it is not an inter-day exception then it must be an intra-day exception                 ELSE NULL           END AS Timespan     INTO #execution_exception_type     FROM #max_execution_exception                        -- Use #execution_exception_type to populate FINAL_STATUS_UPDATE_TABLE           IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table           select distinct                 CONCAT(ORD_NUM,'_9',[Exception_Type],[Exception_Value]) AS ID,                 '1A1' AS STATUS,                  NULL AS FINAL_UPDATED_TIME           into #temp_status_table           from #execution_exception_type           where [Exception_Type] IS NOT NULL                      MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T           USING #temp_status_table AS S           ON (T.ID = S.ID)           WHEN MATCHED                 THEN                  UPDATE SET                        T.ID=T.ID,                        T.STATUS=T.STATUS,         T.DEALING_DESK = 'DMG',                        T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME           WHEN NOT MATCHED                  THEN                  INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)                 VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'DMG');             --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      NULL AS MULTI_FUND_ID,      NULL AS TRD_ORD,      pm.ORD_NUM AS PM_ORD,      'Timely Execution' AS Exception_Type,      CONCAT(ex.ORD_NUM,'_9',[Exception_Type],[Exception_Value]) AS ID,      NULL AS REASON,      NULL AS COMMENT,      'For Review' AS Status,      NULL AS ClientExecID,      'DMG' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      NULL AS DEALER,      '1A1' AS STATUS_ID,      pm.AUTH_TIME AS ORD_AUTH,      NULL AS TRADE_EXEC     INTO #temp_audit     FROM #execution_exception_type ex     LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.PM_ORDERS GROUP BY ORD_NUM) pm     ON ex.ORD_NUM = pm.ORD_NUM     where [Exception_Type] IS NOT NULL         MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_DMG AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);                                            IF OBJECT_ID('VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_DMG_TABLE') IS NULL               select distinct                 ORD_NUM,                 REBASED_AUTH_TIME,                 'DMG' AS [Dealing_Desk],                 Exception_Type,        Reversion_Time,        ISNULL(Exception_Value,0) AS VG_09,        Timespan,                 CASE                         WHEN Exception_Type IS NOT NULL THEN GETDATE()                         ELSE NULL                  END AS CREATETIME           into VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_DMG_TABLE           from  #execution_exception_type                   ELSE               IF OBJECT_ID('tempdb..#temp_TEE', 'U') IS NOT NULL DROP TABLE #temp_TEE               select distinct                 ORD_NUM,                        REBASED_AUTH_TIME,                 'DMG' AS [Dealing_Desk],                 Exception_Type,        Reversion_Time,                 ISNULL(Exception_Value,0) AS VG_09,        Timespan,                 CASE                         WHEN Exception_Type IS NOT NULL THEN GETDATE()                         ELSE NULL                  END AS CREATETIME           into #temp_tee           from  #execution_exception_type                   MERGE VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_DMG_TABLE AS T           USING #temp_TEE AS S           ON ((T.ORD_NUM = S.ORD_NUM AND        t.REBASED_AUTH_TIME = S.REBASED_AUTH_TIME AND        ISNULL(T.Exception_Type,'-1') = ISNULL(S.Exception_Type,'-1') AND       T.VG_09 = S.VG_09)       OR       (T.ORD_NUM = S.ORD_NUM AND        t.REBASED_AUTH_TIME = S.REBASED_AUTH_TIME AND        T.VG_09 > S.VG_09))           WHEN MATCHED                 THEN                  UPDATE SET                         T.DEALING_DESK = S.DEALING_DESK,                        T.VG_09 = CASE WHEN S.VG_09 > T.VG_09 THEN S.VG_09 ELSE T.VG_09 END,         T.Exception_Type = CASE WHEN S.VG_09 > T.VG_09 THEN S.Exception_Type ELSE T.Exception_Type END,                        T.Reversion_Time = CASE WHEN S.VG_09 > T.VG_09 THEN S.Reversion_Time ELSE T.Reversion_Time END,                        T.CREATETIME = CASE WHEN S.VG_09 > T.VG_09 THEN S.CREATETIME ELSE T.CREATETIME END           WHEN NOT MATCHED                  THEN INSERT (ORD_NUM, REBASED_AUTH_TIME, DEALING_DESK, Exception_Type, Reversion_Time, Timespan, VG_09, CREATETIME)                        VALUES (S.ORD_NUM, S.REBASED_AUTH_TIME, S.DEALING_DESK, S.Exception_Type, S.Reversion_Time, S.Timespan, S.VG_09, S.CREATETIME);         IF OBJECT_ID('tempdb..#date_range', 'U') IS NOT NULL DROP TABLE #date_range     IF OBJECT_ID('tempdb..#temp_row_table', 'U') IS NOT NULL DROP TABLE #temp_row_table     IF OBJECT_ID('tempdb..#temp_returned_table', 'U') IS NOT NULL DROP TABLE #temp_returned_table     IF OBJECT_ID('tempdb..#temp_ord_dd_table', 'U') IS NOT NULL DROP TABLE #temp_ord_dd_table     IF OBJECT_ID('tempdb..#cancel_pm', 'U') IS NOT NULL DROP TABLE #cancel_pm     IF OBJECT_ID('tempdb..#PM_ORD_AUTH_TIMES', 'U') IS NOT NULL DROP TABLE #PM_ORD_AUTH_TIMES     IF OBJECT_ID('tempdb..#trd_ord_cancels', 'U') IS NOT NULL DROP TABLE #trd_ord_cancels     IF OBJECT_ID('tempdb..#PM_ORD_AUTH_TIMES_RANKED', 'U') IS NOT NULL DROP TABLE #PM_ORD_AUTH_TIMES_RANKED     IF OBJECT_ID('tempdb..#PM_ORD_AUTH_TIME_RANGE', 'U') IS NOT NULL DROP TABLE #PM_ORD_AUTH_TIME_RANGE     IF OBJECT_ID('tempdb..#PM_ORD_AUTH_TIME_REVERSION', 'U') IS NOT NULL DROP TABLE #PM_ORD_AUTH_TIME_REVERSION     IF OBJECT_ID('tempdb..#PM_ORD_TRADES', 'U') IS NOT NULL DROP TABLE #PM_ORD_TRADES     IF OBJECT_ID('tempdb..#PM_AUTH_TIMINGS', 'U') IS NOT NULL DROP TABLE #PM_AUTH_TIMINGS     IF OBJECT_ID('tempdb..#PM_AUTH_TIMINGS_WEEKEND', 'U') IS NOT NULL DROP TABLE #PM_AUTH_TIMINGS_WEEKEND     IF OBJECT_ID('tempdb..#PM_ORD_AUTH_TIMES_WKND_HOLS', 'U') IS NOT NULL DROP TABLE #PM_ORD_AUTH_TIMES_WKND_HOLS     IF OBJECT_ID('tempdb..#execution_exception', 'U') IS NOT NULL DROP TABLE #execution_exception     IF OBJECT_ID('tempdb..#max_execution_exception', 'U') IS NOT NULL DROP TABLE #max_execution_exception     IF OBJECT_ID('tempdb..#execution_exception_type', 'U') IS NOT NULL DROP TABLE #execution_exception_type     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     IF OBJECT_ID('tempdb..#temp_TEE', 'U') IS NOT NULL DROP TABLE #temp_TEE        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_09_TIMELY_EXECUTION_EQ  CreateDate: 2025-06-26 18:17:44.497  ModifyDate: 2025-06-26 18:17:44.497  --- DEFINITION START ---  -- =============================================    -- Author:  <da Costa, David>    -- Create date: <20/10/2017>    -- Description:     -- <If difference between todays date and Approved Date    -- for live trades (not cancelled/expired and 100% filled)    -- is > 4 days raise exception. Raise exceptions for each    -- of the following date breaches >4, >9, >19, >39, >79 and    -- >159 days. Trigger dealer comments for Orders not being     -- 100% filled>    -- =============================================            -- ***************VERSION CONTROL***************    -- 11/12/2017 - DDC: Changes made to ensure that script     -- only ever updates existing records always ensuring     -- the highest level exception is reported and     -- inserts new ones if no exception has been raised.        -- 15/12/2017 - DDC Changed script to take the MIN_AUTH     -- value from the #min_auth table and not re-calculate the    -- minimum AUTH_TIME from the PM_ORDERS table as this led     -- to NULL values and seemed unecessary. FACE included in     -- #tee_flag table as it appears that it is possible to    -- have multiple FACE values for the same PM Order number.        -- 15/12/2017 - DDC Script changed to take FACE and FILL_AMT    -- at latest AUTH_TIME to improve the issue surrounding     -- the possibility of changing FACE values. The filled logic has    -- also been changed to replace the SUM(FILL_AMT) with the     -- FILL_AMT at the latest AUTH_TIME        -- 04/01/2018 - DDC: Amendment made to only run  exception    -- calculations on the data for the day the exception is     -- being pulled        -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.        -- 2024-01-17 Matej Miter: created for Jira number:    -- SURVG-888 - Crated a number counting table to avoid using master table that gives us only dates up to 5 years. New solution looks into the future and will work up to 2999 year        -- *********************************************        CREATE PROCEDURE [dbo].[VG_09_TIMELY_EXECUTION_EQ]     -- Add the parameters for the stored procedure here     -- @Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         DECLARE @Date1 DATE, @Date2 DATE--@DATE_FILTER DATE      --SET @DATE_FILTER = CONVERT(DATE, GETDATE()) --Set date filter to only select data from current pull date     SET @Date1 = (select min(AUTH_TIME) from VISTA_REPORTING.dbo.PM_ORDERS) --Set the variables used to create the weekday table     SET @Date2 = DATEADD(day, 160, GETDATE())         --Create a calendar showing for each day what day of the week it is as well as if it is a holiday in GB     IF OBJECT_ID('tempdb..#dates', 'U') IS NOT NULL DROP TABLE #dates     SELECT      DATEADD(DAY,Number + 1,@Date1) as [DATE],      DATENAME(weekday, DATEADD(DAY,Number+ 1,@Date1)) as WEEKDAY, --create a table that assigns a day of the week to every date following the sonvention that Monday=1, Tuesday=2, etc...      CASE        WHEN DATENAME(weekday, DATEADD(DAY,Number + 1,@Date1)) = 'Saturday' THEN 1        WHEN DATENAME(weekday, DATEADD(DAY,Number + 1,@Date1)) = 'Sunday' THEN 1        ELSE 0      END as Weekend_Flag --create a table that assigns a day of the week to every date following the sonvention that Monday=1, Tuesday=2, etc...     into #dates     -- SURVG-888     FROM VISTA_REPORTING.dbo.REF_TIMELY_EX_DATE_HELPER     WHERE DATEADD(DAY,Number+1,@Date1) < @Date2     -- End of SURVG-888          IF OBJECT_ID('tempdb..#calendar', 'U') IS NOT NULL DROP TABLE #calendar     SELECT      d.*,      CASE        WHEN h.CLOSURE_DATES IS NOT NULL THEN 1        ELSE 0       END AS [Holiday_Flag]     into #calendar     FROM #dates d     LEFT JOIN VISTA_STAGING.dbo.HOLIDAYS h     ON d.DATE = CONVERT(DATE,h.CLOSURE_DATES,103) AND h.COUNTRY_CODE = 'GB'         -- 0 Get distinct list of PM_ORDER touch count and modify time - this is to remove duplications caused because this table is at the client execution level     IF OBJECT_ID('tempdb..#pm_ord_times', 'U') IS NOT NULL DROP TABLE #pm_ord_times     SELECT DISTINCT      ORD_NUM,      TOUCH_COUNT,      MODIFY_TIME,      STATUS,--CASE WHEN STATUS IN ('A','U') THEN 1 ELSE 0 END As [Active_Status]      ORDER_REASON_DECODE     INTO #pm_ord_times     FROM VISTA_REPORTING.dbo.PM_ORDERS              -- 1.a. Generate table of statuses with index columns     IF OBJECT_ID('tempdb..#statuses', 'U') IS NOT NULL DROP TABLE #statuses     SELECT      ORD_NUM,      TOUCH_COUNT,      Status,--[Active_Status],      ROW_NUMBER() OVER (PARTITION BY ORD_NUM ORDER BY TOUCH_COUNT) RowNum,      ORDER_REASON_DECODE      --ROW_NUMBER() OVER (PARTITION BY ORD_NUM ORDER BY TOUCH_COUNT) -      --    ROW_NUMBER() OVER (PARTITION BY ORD_NUM, Status /*[Active_Status]*/ ORDER BY TOUCH_COUNT) AS [Group]     INTO #statuses     FROM       #pm_ord_times               -- 1.b. Join statuses table to itself to find the start touch count and the end touch count of the order being in the same status.      --           This is done so that we can determine when an order moves into a status as well as when it moves out of this status        IF OBJECT_ID('tempdb..#status_groups', 'U') IS NOT NULL DROP TABLE #status_groups     SELECT       status1.ORD_NUM      , status1.TOUCH_COUNT [START] --MIN(status1.TOUCH_COUNT) [START]      , status2.TOUCH_COUNT [END]   --MAX(status2.TOUCH_COUNT) [END]      , status1.[Status] --status1.[Active_Status]       , status1.ORDER_REASON_DECODE     INTO #status_groups     FROM       #statuses status1     LEFT JOIN      #statuses status2 ON status1.ORD_NUM = status2.ORD_NUM AND status1.RowNum = status2.RowNum - 1                    -- 1.c. Find the modify times associated with each of these status changes     IF OBJECT_ID('tempdb..#status_times', 'U') IS NOT NULL DROP TABLE #status_times     SELECT       st.* ,      CONVERT(DATE,pm1.MODIFY_TIME) AS [Start_Time],      CONVERT(DATE,ISNULL(pm2.MODIFY_TIME,GETDATE())) AS [End_Time] --ISNULL(pm2.MODIFY_TIME,'9999-12-31') AS [End_Time] --If the order has not moved out of a status then set the end date to be end of time so that we don't do comparisons to NULLs     INTO #status_times     FROM #status_groups st     LEFT JOIN #pm_ord_times pm1     ON st.ORD_NUM = pm1.ORD_NUM AND st.START = pm1.TOUCH_COUNT     LEFT JOIN #pm_ord_times pm2     ON st.ORD_NUM = pm2.ORD_NUM AND st.[END] = pm2.TOUCH_COUNT             --1.e. Find the min auth time for each order.     IF OBJECT_ID('tempdb..#min_auth', 'U') IS NOT NULL DROP TABLE #min_auth     SELECT        ORD_NUM,       MIN(AUTH_TIME) as MIN_AUTH,       CONVERT(DATE, MIN(AUTH_TIME)) as MIN_AUTH_DATE      INTO #min_auth     FROM VISTA_REPORTING.dbo.PM_ORDERS     GROUP BY ORD_NUM         --1.f. For each status_time, get the number of weekends and public holidays between a) authorisation time and start time, and b) start time and end time     IF OBJECT_ID('tempdb..#status_times_weekend_hols', 'U') IS NOT NULL DROP TABLE #status_times_weekend_hols     SELECT       st.*,      auth.MIN_AUTH,       SUM(CASE WHEN c1.DATE BETWEEN auth.MIN_AUTH_DATE AND st.End_Time AND Weekend_Flag = 0 AND Holiday_Flag = 0 THEN 1 ELSE 0 END) - 1 AS [Num_working_days_to_End] -- Count the number of days between authorisation and end time in that status.      --SUM(CASE WHEN c1.DATE BETWEEN auth.MIN_AUTH AND st.Start_Time THEN c1.Holiday_Flag ELSE 0 END) AS [Num_holidays_Start],      --SUM(c1.Weekend_Flag) AS [Num_weekend_days_End],      --SUM(c1.Holiday_Flag) AS [Num_holidays_End]     INTO #status_times_weekend_hols     FROM #status_times st     LEFT JOIN #min_auth auth ON st.ORD_NUM = auth.ORD_NUM     LEFT JOIN #calendar c1 ON c1.DATE BETWEEN auth.MIN_AUTH_DATE AND st.End_Time     --WHERE st.[Status] IN ('U','A') -- Only want to consider these statuses to cut down on execution time.     GROUP BY      st.ORD_NUM,       st.[START],      st.[END],      st.[Status],      st.Start_Time,      st.End_Time,      auth.MIN_AUTH,      auth.MIN_AUTH_DATE,      st.ORDER_REASON_DECODE         --1.g. Determine whether exception is to be raised     IF OBJECT_ID('tempdb..#exception', 'U') IS NOT NULL DROP TABLE #exception     SELECT DISTINCT      *,      CASE        WHEN ORDER_REASON_DECODE = 'MG.GEN 4.Futures Rolling' THEN 0 --Exclude future rolls       WHEN Status IN ('U','A')--[Active_Status] = 1 -- Do we want both status 'U' and 'A'?       THEN CASE         WHEN [Num_working_days_to_End] BETWEEN 5 AND 9         THEN 5         WHEN [Num_working_days_to_End] BETWEEN 10 AND 19         THEN 10         WHEN [Num_working_days_to_End] BETWEEN 20 AND 39         THEN 20         WHEN [Num_working_days_to_End] BETWEEN 40 AND 79         THEN 40         WHEN [Num_working_days_to_End] BETWEEN 80 AND 159         THEN 80         WHEN [Num_working_days_to_End] >=160         THEN 160        ELSE 0        END       ELSE 0      END AS TIMELY_EXECUTION_EXCEPTION     INTO #exception     FROM #status_times_weekend_hols          -- We take the MAX below because we do not backfill on exceptions. I.e. if we see a new exception and it is already 10 days old, we do not raise a 5 day exception as well.     IF OBJECT_ID('tempdb..#exception_final', 'U') IS NOT NULL DROP TABLE #exception_final     SELECT DISTINCT      e.ORD_NUM,      MIN_AUTH,      MAX(TIMELY_EXECUTION_EXCEPTION) AS TIMELY_EXECUTION_EXCEPTION     INTO #exception_final     FROM #exception e     LEFT JOIN VISTA_REPORTING.dbo.PM_ORDERS pm     ON e.ORD_NUM = pm.ORD_NUM     WHERE pm.DEALING_DESK = 'Equity'     GROUP BY      e.ORD_NUM,      MIN_AUTH           -- Use #tee_flag to populate FINAL_STATUS_UPDATE_TABLE     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     select distinct      CONCAT(ORD_NUM,'_9',TIMELY_EXECUTION_EXCEPTION) AS ID,      '1A1' AS STATUS,      NULL AS FINAL_UPDATED_TIME     into #temp_status_table     from #exception_final     where TIMELY_EXECUTION_EXCEPTION != 0          MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET       T.ID=T.ID,       T.STATUS=T.STATUS,       T.DEALING_DESK = 'Equity',       T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'Equity');         --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      NULL AS MULTI_FUND_ID,      NULL AS TRD_ORD,      pm.ORD_NUM AS PM_ORD,      'Timely Execution' AS Exception_Type,      CONCAT(ex.ORD_NUM,'_9',TIMELY_EXECUTION_EXCEPTION) AS ID,      NULL AS REASON,      NULL AS COMMENT,      'For Review' AS Status,      NULL AS ClientExecID,      'Equity' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      NULL AS DEALER,      '1A1' AS STATUS_ID,      AUTH_TIME AS ORD_AUTH,      NULL AS TRADE_EXEC     INTO #temp_audit     FROM #exception_final ex     LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.PM_ORDERS GROUP BY ORD_NUM) pm     ON ex.ORD_NUM = pm.ORD_NUM     WHERE TIMELY_EXECUTION_EXCEPTION != 0          MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);             IF OBJECT_ID('VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_EQ_TABLE', 'U') IS NULL         SELECT DISTINCT     pm.ORD_NUM,     pm.DEALING_DESK,     tee.MIN_AUTH,     ISNULL(tee.TIMELY_EXECUTION_EXCEPTION,0) AS TIMELY_EXECUTION_EXCEPTION,     CASE      WHEN tee.TIMELY_EXECUTION_EXCEPTION in (5, 10, 20, 40, 80, 160)              THEN GETDATE()            END AS CREATETIME     INTO VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_EQ_TABLE --if table does not exist, create it.     --INTO #temp_TEE     FROM VISTA_REPORTING.dbo.PM_ORDERS pm     LEFT JOIN #exception_final tee     ON pm.ORD_NUM = tee.ORD_NUM     WHERE pm.DEALING_DESK = 'EQUITY'         ELSE         IF OBJECT_ID('tempdb..#temp_TEE', 'U') IS NOT NULL DROP TABLE #temp_TEE         SELECT DISTINCT     pm.ORD_NUM,     pm.DEALING_DESK,     tee.MIN_AUTH,     ISNULL(tee.TIMELY_EXECUTION_EXCEPTION,0) AS TIMELY_EXECUTION_EXCEPTION,     CASE      WHEN tee.TIMELY_EXECUTION_EXCEPTION in (5, 10, 20, 40, 80, 160)              THEN GETDATE() --if exception has been raised then mark the datetime of the day it was raised     END AS CREATETIME     INTO #temp_TEE     FROM VISTA_REPORTING.dbo.PM_ORDERS pm     LEFT JOIN #exception_final tee     ON pm.ORD_NUM = tee.ORD_NUM     WHERE pm.DEALING_DESK = 'EQUITY'         MERGE VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_EQ_TABLE AS T     USING #temp_TEE AS S     ON (T.ORD_NUM = S.ORD_NUM       AND (T.TIMELY_EXECUTION_EXCEPTION = S.TIMELY_EXECUTION_EXCEPTION       OR T.TIMELY_EXECUTION_EXCEPTION = 0))     WHEN MATCHED      THEN       UPDATE SET        T.DEALING_DESK = S.DEALING_DESK,       T.MIN_AUTH =  CASE WHEN S.TIMELY_EXECUTION_EXCEPTION > T.TIMELY_EXECUTION_EXCEPTION THEN S.MIN_AUTH ELSE T.MIN_AUTH END,       T.TIMELY_EXECUTION_EXCEPTION = CASE WHEN S.TIMELY_EXECUTION_EXCEPTION > T.TIMELY_EXECUTION_EXCEPTION THEN S.TIMELY_EXECUTION_EXCEPTION ELSE T.TIMELY_EXECUTION_EXCEPTION END,       T.CREATETIME = CASE WHEN S.TIMELY_EXECUTION_EXCEPTION > T.TIMELY_EXECUTION_EXCEPTION THEN S.CREATETIME ELSE T.CREATETIME END     WHEN NOT MATCHED       THEN INSERT (ORD_NUM, DEALING_DESK, MIN_AUTH,  TIMELY_EXECUTION_EXCEPTION, CREATETIME)        VALUES (S.ORD_NUM, S.DEALING_DESK, S.MIN_AUTH,  S.TIMELY_EXECUTION_EXCEPTION, S.CREATETIME);         IF OBJECT_ID('tempdb..#dates', 'U') IS NOT NULL DROP TABLE #dates     IF OBJECT_ID('tempdb..#calendar', 'U') IS NOT NULL DROP TABLE #calendar     IF OBJECT_ID('tempdb..#pm_ord_times', 'U') IS NOT NULL DROP TABLE #pm_ord_times     IF OBJECT_ID('tempdb..#statuses', 'U') IS NOT NULL DROP TABLE #statuses     IF OBJECT_ID('tempdb..#status_groups', 'U') IS NOT NULL DROP TABLE #status_groups     IF OBJECT_ID('tempdb..#status_times', 'U') IS NOT NULL DROP TABLE #status_times     IF OBJECT_ID('tempdb..#min_auth', 'U') IS NOT NULL DROP TABLE #min_auth     IF OBJECT_ID('tempdb..#status_times_weekend_hols', 'U') IS NOT NULL DROP TABLE #status_times_weekend_hols     IF OBJECT_ID('tempdb..#exception', 'U') IS NOT NULL DROP TABLE #exception     IF OBJECT_ID('tempdb..#exception_final', 'U') IS NOT NULL DROP TABLE #exception_final     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     IF OBJECT_ID('tempdb..#temp_TEE', 'U') IS NOT NULL DROP TABLE #temp_TEE        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_09_TIMELY_EXECUTION_FI  CreateDate: 2025-06-26 18:17:05.780  ModifyDate: 2025-06-26 18:17:05.780  --- DEFINITION START ---  -- =============================================    -- Author:  <da Costa, David>    -- Create date: <20/10/2017>    -- Description:     -- <>    -- =============================================        -- ***************VERSION CONTROL***************    -- 05/12/2017 - DDC: #maxe_pd_table added to calculate    -- Post Datetime of Last Execution Time. Rebasing logic    -- also modified to use new additions to PRIMARY_INST_TYPE    -- table (DEBT_DERIV, CDS/IRS/IFS/OPTFUT/BNDFUT).     --    -- 06/12/2017 - DDC: Removed ORDER_EXECUTION_RANKING    -- as it was leading to false positives and replaced    -- it with #maxe_pd_table    --    -- 11/12/2017 - DDC: Changes made to ensure that script     -- only ever updates existing records always ensuring     -- the highest level exception is reported and     -- inserts new ones if no exception has been raised.        -- 04/01/2018 - DDC: Amendment made to only run  exception    -- calculations on the data for the day the exception is     -- being pulled        -- 27/03/2018 - DDC: Methos of calculating whether an order     -- is filled or not updated to be consistent with other     -- exception logics        -- 22/08/2018 - WH: Update to reversion identification logic to include status 'F'     --    this is done because of 15 minute rule limitations     --    where order is returned (status = 'U'), and then closed off by PM within 15 mins.    --    Also, an update to Face and Fill values so they only go to 4 decimal places added    --     (appears to be an Aladdin rounding issue).        -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.        -- 2024-01-17 Matej Miter: created for Jira number:    -- SURVG-888 - Crated a number counting table to avoid using master table that gives us only dates up to 5 years. New solution looks into the future and will work up to 2999 year        -- *********************************************        CREATE PROCEDURE [dbo].[VG_09_TIMELY_EXECUTION_FI]     -- Add the parameters for the stored procedure here     -- @Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;             --DECLARE @DATE_FILTER AS DATE --Declare date filter to only select data from current pull date     --SET @DATE_FILTER = CONVERT(DATE, GETDATE())        --0.Create a calendar table - is used to adjust for weekends    DECLARE @Date1 DATE, @Date2 DATE--@DATE_FILTER DATE     --SET @DATE_FILTER = CONVERT(DATE, GETDATE()) --Set date filter to only select data from current pull date    SET @Date1 = (select min(AUTH_TIME) from VISTA_REPORTING.dbo.PM_ORDERS) --Set the variables used to create the weekday table    SET @Date2 = DATEADD(day, 160, GETDATE())            IF OBJECT_ID('tempdb..#date_range', 'U') IS NOT NULL DROP TABLE #date_range    SELECT           DATEADD(DAY,Number+1,@Date1) as [DATE],           DATEPART(weekday, DATEADD(DAY,Number,@Date1)) as WEEKDAY --create a table that assigns a day of the week to every date following the sonvention that Monday=1, Tuesday=2, etc...    into #date_range    -- SURVG-888    FROM VISTA_REPORTING.dbo.REF_TIMELY_EX_DATE_HELPER    where DATEADD(DAY,Number+1,@Date1) < @Date2    -- End of SURVG-888        -- Create a table with row numbers as a pseudo index for each entry to enable refrencing of rows by index    IF OBJECT_ID('tempdb..#temp_row_table', 'U') IS NOT NULL DROP TABLE #temp_row_table    SELECT      ORD_NUM,     DEALING_DESK,     TOUCH_COUNT,     ASSIGNED_TO_STATUS,     TRADER,     ROW_NUMBER() OVER(PARTITION BY ORD_NUM ORDER BY TOUCH_COUNT) AS N_ROW    INTO #temp_row_table    FROM VISTA_REPORTING.dbo.PM_ORDERS            -- Find the first index where ASSIGNED_TO_STATUS = 'RETURNED' AND TRADER IS NULL and the preceeding index    IF OBJECT_ID('tempdb..#temp_returned_table', 'U') IS NOT NULL DROP TABLE #temp_returned_table    SELECT      tr.ORD_NUM,     MIN(tr.N_ROW) AS N_ROW,     MIN(tr2.N_ROW) AS N_ROW_MINUS,     tr2.DEALING_DESK,     tr.ASSIGNED_TO_STATUS AS ATS1,     tr2.ASSIGNED_TO_STATUS AS ATS2    INTO #temp_returned_table    FROM #temp_row_table tr    LEFT JOIN #temp_row_table tr2 ON tr2.ORD_NUM=tr.ORD_NUM AND tr.N_ROW=tr2.N_ROW+1    WHERE (tr.ASSIGNED_TO_STATUS = 'RETURNED' AND ISNULL(tr2.ASSIGNED_TO_STATUS, '') != 'RETURNED')      AND tr.TRADER IS NULL       AND tr2.DEALING_DESK IS NOT NULL    GROUP BY      tr.ORD_NUM,     tr2.DEALING_DESK,     tr.ASSIGNED_TO_STATUS,     tr2.ASSIGNED_TO_STATUS    order by ORD_NUM            -- Create a table that inputs the last valid DEALING_DESK (by created index) for any rows where    -- ASSIGNED_TO_STATUS = 'RETURNED' AND TRADER IS NULL which will be used to filter the data by dealing desk    -- To mitigate cases where there are multiple dealing desks the script now selects the correct dealing desk based    -- on the previously created index.    IF OBJECT_ID('tempdb..#temp_ord_dd_table', 'U') IS NOT NULL DROP TABLE #temp_ord_dd_table    SELECT DISTINCT     po.ORD_NUM,     po.TOUCH_COUNT,     po.ASSIGNED_TO_STATUS,     po.TRADER,     CASE      WHEN po.ASSIGNED_TO_STATUS = 'RETURNED' AND po.TRADER IS NULL THEN b2.DEALING_DESK      ELSE po.DEALING_DESK     END AS DEALING_DESK    INTO #temp_ord_dd_table    FROM #temp_row_table po    OUTER APPLY (SELECT TOP 1 *         FROM #temp_returned_table trt        WHERE trt.ORD_NUM=po.ORD_NUM AND po.N_ROW >N_ROW_MINUS        ORDER BY N_ROW_MINUS DESC) b2            --1.a. Create a list of all PM order authorisation times with the largest face value and fill amount (this is used to determine whether the order gets fully filled).     --           Note that we rebase some orders to a 13:00 authorisation time as per business requirements    IF OBJECT_ID('tempdb..#PM_ORD_AUTH_TIMES', 'U') IS NOT NULL DROP TABLE #PM_ORD_AUTH_TIMES    SELECT DISTINCT     pm.ORD_NUM,      first_face.FACE,     pm.FILL_AMT,     pm.AUTH_TIME,     pm.ASSIGNED_TO_STATUS,     pm.STATUS,     pm.MODIFY_TIME,     tod.DEALING_DESK,     CASE WHEN pm.COUNTRY = 'US' THEN 'US' ELSE 'GB' END AS COUNTRY,     pm.order_reason_decode,     case     when p.PRIMARY_MARKET=0       AND CAST(pm.AUTH_TIME AS TIME) < CAST('13:00:00' AS TIME)       AND (p.DEBT_DERIV='DEBT'       AND (tr.TRD_CURRENCY in ('MXN', 'UYU', 'COP', 'ARS', 'PEN', 'BRL', 'CLP', 'BOB'))       OR (tr.TRD_CURRENCY = 'USD' and p.EMERGING_MARKET = 0 and p.DEBT_DERIV = 'DEBT')       OR (tr.TRD_CURRENCY = 'USD' and p.INST_TYPE IN ('SCDS','ICDS')))       then DATEADD(day, DATEDIFF(day, 0, pm.AUTH_TIME), '13:00:00') -- Rebase time to 13:00     else pm.AUTH_TIME     end as REBASED_AUTH_TIME    INTO #PM_ORD_AUTH_TIMES    FROM VISTA_REPORTING.dbo.PM_ORDERS pm           LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON pm.ORD_NUM = oc.PM_ORD           LEFT JOIN (SELECT DISTINCT ORD_NUM, TRD_CURRENCY FROM VISTA_REPORTING.dbo.TRADES) tr on oc.TRD_ORD = tr.ORD_NUM           LEFT JOIN (SELECT DISTINCT ORD_NUM, EMERGING_MARKET, INST_TYPE, DEBT_DERIV, PRIMARY_MARKET FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) p on tr.ORD_NUM = p.ORD_NUM              OUTER APPLY (                 SELECT TOP 1 * FROM VISTA_REPORTING.dbo.PM_ORDERS pm2                 WHERE pm.ORD_NUM = pm2.ORD_NUM  AND pm.AUTH_TIME = pm2.AUTH_TIME AND STATUS IN ('U','A','F') ORDER BY TOUCH_COUNT ASC) first_face -- We want to look at the first value for FACE where the STATUS IN ('U','A','F') for this PM Ord Auth time.        LEFT JOIN #temp_ord_dd_table tod ON tod.ORD_NUM=pm.ORD_NUM AND tod.TOUCH_COUNT = pm.TOUCH_COUNT    WHERE        (tod.DEALING_DESK = 'Fixed Income' -- filter the data using the last valid dealing desk          AND pm.AUTH_TIME IS NOT NULL)   -- Aladdin provides records where AUTH_TIME is NULL. This happens when a PM has raised an order but not yet authorised it. We do not need to consider these.            --1.a.i. Get trader order details for the PM order for when they cancel an order - this is a reversion event.    IF OBJECT_ID('tempdb..#trd_ord_cancels', 'U') IS NOT NULL DROP TABLE #trd_ord_cancels    SELECT DISTINCT             oc.PM_ORD,           CASE when p.PRIMARY_MARKET=0                        AND CAST(trd.AUTH_TIME AS TIME) < CAST('13:00:00' AS TIME)                        AND (p.DEBT_DERIV='DEBT'                        AND (tr.TRD_CURRENCY in ('MXN', 'UYU', 'COP', 'ARS', 'PEN', 'BRL', 'CLP', 'BOB'))                        OR (tr.TRD_CURRENCY = 'USD' and p.EMERGING_MARKET = 0 and p.DEBT_DERIV = 'DEBT'))                        OR (tr.TRD_CURRENCY = 'USD' and p.INST_TYPE IN ('SCDS','ICDS'))             then DATEADD(day, DATEDIFF(day, 0, trd.AUTH_TIME), '13:00:00') -- Rebase time to 13:00           else trd.AUTH_TIME           end as REBASED_AUTH_TIME,           (MODIFY_TIME) AS Cancel_Time    INTO #trd_ord_cancels    FROM VISTA_REPORTING.dbo.TRD_ORDERS trd    LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc    ON trd.ORD_NUM = oc.TRD_ORD    LEFT JOIN VISTA_REPORTING.dbo.TRADES tr on oc.TRD_ORD = tr.ORD_NUM    LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p on tr.ORD_NUM = p.ORD_NUM    WHERE trd.STATUS = 'C'               --1.b. Rank the Auth times for each ORD_NUM so that we can find the time range between AUTH_TIMEs for each ORD_NUM    IF OBJECT_ID('tempdb..#PM_ORD_AUTH_TIMES_RANKED', 'U') IS NOT NULL DROP TABLE #PM_ORD_AUTH_TIMES_RANKED    SELECT            ORD_NUM,           REBASED_AUTH_TIME,        COUNTRY,           CONVERT(DECIMAL(21,2),ABS(FACE)) AS FACE, --Take the absolute value as the FACE is negative for a Sell           CONVERT(DECIMAL(21,2),MAX(ABS(FILL_AMT))) AS MAX_FILL,           RANK() OVER(PARTITION BY ORD_NUM ORDER BY REBASED_AUTH_TIME ASC) AS Auth_Index,        ORDER_REASON_DECODE    INTO #PM_ORD_AUTH_TIMES_RANKED    FROM #PM_ORD_AUTH_TIMES    GROUP BY           ORD_NUM,            REBASED_AUTH_TIME,           FACE,        ORDER_REASON_DECODE,        COUNTRY        /* 1.c. For each PM order authorisation, create a field to identify the next authorisation time     (this is done so that we can tie market executions and reversions back to the correct PM order     authorisation when we have multiple of these).*/    IF OBJECT_ID('tempdb..#PM_ORD_AUTH_TIME_RANGE', 'U') IS NOT NULL DROP TABLE #PM_ORD_AUTH_TIME_RANGE    SELECT DISTINCT           base.ORD_NUM,           base.REBASED_AUTH_TIME,        base.COUNTRY,           CASE WHEN base.Face = base.Max_Fill THEN 1 ELSE 0 END AS [Fully_Filled_Flag], --Create a flag to determine whether the order has been fully filled during this authorisation period           ISNULL(nxt.REBASED_AUTH_TIME,'9999-12-31') AS next_Authorisation, -- If there are no PM order authorisations after this, set to the largest SQL Server date        base.order_reason_decode    INTO #PM_ORD_AUTH_TIME_RANGE    FROM #PM_ORD_AUTH_TIMES_RANKED base    OUTER APPLY (           SELECT TOP 1 * FROM #PM_ORD_AUTH_TIMES_RANKED nxt           WHERE base.ORD_NUM = nxt.ORD_NUM  AND base.Auth_Index < nxt.Auth_Index ORDER BY nxt.Auth_Index ASC) nxt            IF OBJECT_ID('tempdb..#max_filled_table', 'U') IS NOT NULL DROP TABLE #max_filled_table    SELECT     ORD_NUM,     MAX(REBASED_AUTH_TIME) AS REBASED_AUTH_TIME,     MAX([Fully_Filled_Flag]) AS [Fully_Filled_Flag]    INTO #max_filled_table    FROM #PM_ORD_AUTH_TIME_RANGE    GROUP BY ORD_NUM            /* 1.d. For each PM Order authorisation, find the time that the order was reverted back to the fund manager     (have been advised by Chris Nicoll on 2018-03-12 at 15:56 that this occurs when the PM order ASSIGNED_TO_STATUS field     is set to 'RETURNED' and the Status is set to 'U').    Vista will also look at the trader order to determine*/    IF OBJECT_ID('tempdb..#PM_ORD_AUTH_TIME_REVERSION', 'U') IS NOT NULL DROP TABLE #PM_ORD_AUTH_TIME_REVERSION    SELECT DISTINCT           pm.ORD_NUM,        pm.COUNTRY,           --pm.REBASED_AUTH_TIME,        CASE       WHEN min_return.min_modify < cncl.Cancel_Time THEN min_return.min_modify      WHEN cncl.Cancel_Time <  min_return.min_modify  THEN cncl.Cancel_Time      WHEN cncl.Cancel_Time IS NOT NULL    THEN cncl.Cancel_Time      WHEN min_return.min_modify IS NOT NULL   THEN min_return.min_modify            END AS [Reversion_Time] --We have two approaches to finding the reversion time - a) When the PM order has ASSIGNED_TO_STATUS = 'RETURNED' and STATUS = 'U', and b) When the TRD order for that PM order has STATUS = 'C'    INTO #PM_ORD_AUTH_TIME_REVERSION    FROM            #PM_ORD_AUTH_TIMES_RANKED pm    LEFT JOIN           (SELECT                  ORD_NUM,                 REBASED_AUTH_TIME,                 MIN(MODIFY_TIME) as min_modify           FROM #PM_ORD_AUTH_TIMES           WHERE ASSIGNED_TO_STATUS = 'RETURNED' and STATUS IN ('U','F','O')           GROUP BY ORD_NUM, REBASED_AUTH_TIME           ) min_return    ON pm.ORD_NUM = min_return.ORD_NUM AND pm.REBASED_AUTH_TIME = min_return.REBASED_AUTH_TIME     LEFT JOIN           (SELECT                         PM_ORD,                        REBASED_AUTH_TIME,                        MIN(Cancel_Time) as Cancel_Time                 FROM #trd_ord_cancels                 GROUP BY PM_ORD, REBASED_AUTH_TIME                 ) cncl    ON pm.ORD_NUM = cncl.PM_ORD AND pm.REBASED_AUTH_TIME = cncl.REBASED_AUTH_TIME              --1.e. Determine the trades associated with each PM order.    IF OBJECT_ID('tempdb..#PM_ORD_TRADES', 'U') IS NOT NULL DROP TABLE #PM_ORD_TRADES    SELECT            oc.PM_ORD,           t.EXECUTION_TIME    INTO #PM_ORD_TRADES    FROM VISTA_REPORTING.dbo.TRADES t    LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc    ON t.ORD_NUM = oc.TRD_ORD        /*1.f. For each PM order authorisation, determine the time of reversion and find the latest execution     for this authorisation (do not include any executions that are associated with prior of future authorisations for this order).*/    IF OBJECT_ID('tempdb..#PM_AUTH_TIMINGS', 'U') IS NOT NULL DROP TABLE #PM_AUTH_TIMINGS    SELECT DISTINCT           pm.*,           rev.Reversion_Time,           trd.EXECUTION_TIME AS [Last_Trade],           CASE WHEN pm.[Fully_Filled_Flag] = 1 THEN trd.EXECUTION_TIME ELSE ISNULL(Reversion_Time,GETDATE()) END AS [Last_Event_Time] --Create a field to consolidate the datetime of interest. If there is no reversion, use the current date.    INTO #PM_AUTH_TIMINGS    FROM #PM_ORD_AUTH_TIME_RANGE pm    LEFT JOIN (SELECT * FROM #PM_ORD_AUTH_TIME_REVERSION WHERE Reversion_Time IS NOT NULL) rev ON pm.ORD_NUM = rev.ORD_NUM    INNER JOIN #max_filled_table mft ON mft.ORD_NUM = pm.ORD_NUM AND mft.Fully_Filled_Flag = pm.Fully_Filled_Flag AND pm.REBASED_AUTH_TIME = mft.REBASED_AUTH_TIME    --LEFT JOIN #PM_ORD_AUTH_TIME_REVERSION rev ON pm.ORD_NUM = rev.ORD_NUM AND pm.REBASED_AUTH_TIME = mft.REBASED_AUTH_TIME    OUTER APPLY (SELECT TOP 1 t.*                 FROM #PM_ORD_TRADES t                 WHERE pm.ORD_NUM = t.PM_ORD                 AND t.EXECUTION_TIME BETWEEN pm.REBASED_AUTH_TIME AND pm.next_Authorisation -- We only want to use the set of trades that are executed after this particular PM Order authorisation and before the next PM Order authorisation                 ORDER BY t.EXECUTION_TIME DESC) trd    --SELECT * FROM #PM_AUTH_TIMINGS        --1.g. Find the number of weekends and holidays between the PM Order authorisation time and last event time    IF OBJECT_ID('tempdb..#PM_AUTH_TIMINGS_WEEKEND', 'U') IS NOT NULL DROP TABLE #PM_AUTH_TIMINGS_WEEKEND    SELECT            pm.*,           COUNT(DISTINCT d.[DATE]) AS [Weekend_Count]        INTO #PM_AUTH_TIMINGS_WEEKEND    FROM #PM_AUTH_TIMINGS pm    LEFT JOIN #date_range d    ON d.[DATE] BETWEEN CONVERT(DATE,pm.REBASED_AUTH_TIME) AND CONVERT(DATE,Last_Event_Time) AND WEEKDAY IN (6,7)    GROUP BY           pm.ORD_NUM,              --pm.AUTH_TIME,           pm.REBASED_AUTH_TIME,           pm.Fully_Filled_Flag,           pm.next_Authorisation,           pm.Reversion_Time,           pm.Last_Trade,           pm.Last_Event_Time,        pm.ORDER_REASON_DECODE,        pm.COUNTRY            IF OBJECT_ID('tempdb..#PM_ORD_AUTH_TIMES_WKND_HOLS', 'U') IS NOT NULL DROP TABLE #PM_ORD_AUTH_TIMES_WKND_HOLS    SELECT            pm.ORD_NUM,           --pm.AUTH_TIME,           pm.REBASED_AUTH_TIME,           pm.Fully_Filled_Flag,           pm.next_Authorisation,           pm.Reversion_Time,           pm.Last_Trade,           pm.Last_Event_Time,           pm.[Weekend_Count],        pm.ORDER_REASON_DECODE,        pm.COUNTRY,           COUNT(DISTINCT h.CLOSURE_DATES) AS [Holiday_Count],           ISNULL(pm.Weekend_Count,0) + ISNULL(COUNT(DISTINCT h.CLOSURE_DATES),0) AS [Weekend_Holiday_Count],           DATEDIFF(minute, pm.REBASED_AUTH_TIME, pm.Last_Event_Time) AS [Time Difference],           DATEDIFF(DAY, pm.REBASED_AUTH_TIME, pm.Last_Event_Time - (ISNULL(pm.Weekend_Count,0) + ISNULL(COUNT(DISTINCT h.CLOSURE_DATES),0))) as [Date_Difference]     INTO #PM_ORD_AUTH_TIMES_WKND_HOLS    FROM #PM_AUTH_TIMINGS_WEEKEND pm    left join VISTA_STAGING.dbo.HOLIDAYS h on CONVERT(DATE, h.CLOSURE_DATES, 103) BETWEEN CONVERT(DATE,pm.REBASED_AUTH_TIME) AND CONVERT(DATE,Last_Event_Time) and h.COUNTRY_CODE=pm.COUNTRY    WHERE pm.REBASED_AUTH_TIME >= '2020-07-31'    GROUP BY           pm.ORD_NUM,             -- pm.AUTH_TIME,           pm.REBASED_AUTH_TIME,           pm.Fully_Filled_Flag,           pm.next_Authorisation,           pm.Reversion_Time,           pm.Last_Trade,           pm.Last_Event_Time,           pm.[Weekend_Count],        pm.ORDER_REASON_DECODE,        pm.COUNTRY        UNION        SELECT            pm.ORD_NUM,           --pm.AUTH_TIME,           pm.REBASED_AUTH_TIME,           pm.Fully_Filled_Flag,           pm.next_Authorisation,           pm.Reversion_Time,           pm.Last_Trade,           pm.Last_Event_Time,           pm.[Weekend_Count],        pm.ORDER_REASON_DECODE,        pm.COUNTRY,           COUNT(DISTINCT h.CLOSURE_DATES) AS [Holiday_Count],           ISNULL(pm.Weekend_Count,0) + ISNULL(COUNT(DISTINCT h.CLOSURE_DATES),0) AS [Weekend_Holiday_Count],           DATEDIFF(minute, pm.REBASED_AUTH_TIME, pm.Last_Event_Time) AS [Time Difference],           DATEDIFF(DAY, pm.REBASED_AUTH_TIME, pm.Last_Event_Time - (ISNULL(pm.Weekend_Count,0) + ISNULL(COUNT(DISTINCT h.CLOSURE_DATES),0))) as [Date_Difference]     FROM #PM_AUTH_TIMINGS_WEEKEND pm    left join VISTA_STAGING.dbo.HOLIDAYS h on CONVERT(DATE, h.CLOSURE_DATES, 103) BETWEEN CONVERT(DATE,pm.REBASED_AUTH_TIME) AND CONVERT(DATE,Last_Event_Time) and h.COUNTRY_CODE='GB'    WHERE pm.REBASED_AUTH_TIME < '2020-07-31'    GROUP BY           pm.ORD_NUM,             -- pm.AUTH_TIME,           pm.REBASED_AUTH_TIME,           pm.Fully_Filled_Flag,           pm.next_Authorisation,           pm.Reversion_Time,           pm.Last_Trade,           pm.Last_Event_Time,           pm.[Weekend_Count],        pm.ORDER_REASON_DECODE,        pm.COUNTRY            --1.h. For each PM Order Authorisation, determine if the TE threshold has been breached    IF OBJECT_ID('tempdb..#execution_exception', 'U') IS NOT NULL DROP TABLE #execution_exception    SELECT DISTINCT           pm.*,            CASE                 WHEN ISNULL(prim.PRIMARY_MARKET_ORDER_LEVEL,0) = 1  OR ISNULL(prim.[1615_DEALING],0) = 1 OR ISNULL(prim.TWEB_CLOSE_DEALING,0) = 1 OR ISNULL(prim.INTERFUND_TRANSFER,0) = 1 or pm.order_reason_decode = 'MG.GEN 4.Futures Rolling'-- Discount Primary Market, 1615, Tweb & Interfund Xfr                 THEN 0                 WHEN [Date_Difference] BETWEEN 1 AND 4    THEN 1                 WHEN [Date_Difference] BETWEEN 5 AND 9    THEN 5                 WHEN [Date_Difference] BETWEEN 10 AND 19  THEN 10                 WHEN [Date_Difference] BETWEEN 20 AND 39  THEN 20                 WHEN [Date_Difference] BETWEEN 40 AND 79  THEN 40                 WHEN [Date_Difference] BETWEEN 80 AND 159 THEN 80                 WHEN [Date_Difference] > 159 THEN 160           END AS [Inter_Day_Exception_Value], -- Determine if inter-day exception           CASE        WHEN ISNULL(prim.PRIMARY_MARKET_ORDER_LEVEL,0) = 1  OR ISNULL(prim.[1615_DEALING],0) = 1 OR ISNULL(prim.TWEB_CLOSE_DEALING,0) = 1 OR ISNULL(prim.INTERFUND_TRANSFER,0) = 1 or pm.order_reason_decode = 'MG.GEN 4.Futures Rolling'-- Discount Primary Market, 1615, Tweb & Interfund Xfr                 THEN 0        WHEN [Time Difference] > 60                        and prim.INST_TYPE in ('GOV', 'IGOV', 'GOVBIL', 'EM GOV', 'EM GOVBIL',                                                         'IRFUT', 'BNDFUT', 'OPTFUT','ETD')                 THEN 1                 WHEN [Time Difference] > 120                        and prim.INST_TYPE in ('IG CORP', 'HY CORP', 'NR CORP', 'EM Corp', 'SCDS', 'ICDS', 'SSA','COV','PFD','CORP')         THEN 1                 WHEN [Time Difference] > 180                        and prim.INST_TYPE in ('RMBS', 'CMBS', 'CDO', 'ABS', 'OIS', 'IRS', 'IFS',                  'BASIS', 'ZCS', 'CCS','SWAP','MBS','ARM','CMO', 'CDSWAPTION', 'TRS', 'FI TRS')                 THEN 1                 WHEN [Time Difference] > 240                        and prim.INST_TYPE in ('ASWP', 'CASWP')                 THEN 1                 ELSE 0           END AS [Intra_Day_Exception_Value] -- Determine if intra-day exception    INTO #execution_exception    FROM #PM_ORD_AUTH_TIMES_WKND_HOLS pm    LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc --  distinct this list so we avoid duplications    ON pm.ORD_NUM = oc.PM_ORD    LEFT JOIN (     SELECT       ORD_NUM,       [1615_DEALING],       TWEB_CLOSE_DEALING,      INTERFUND_TRANSFER,       DEALING_DESK,      INST_TYPE,       MAX(CASE WHEN PRIMARY_MARKET = 1 THEN 1 WHEN PRIMARY_MARKET_ORDER_LEVEL = 1 THEN 1 ELSE 0 END) AS PRIMARY_MARKET_ORDER_LEVEL      FROM  VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE      GROUP BY ORD_NUM, [1615_DEALING], TWEB_CLOSE_DEALING, INTERFUND_TRANSFER, INST_TYPE, DEALING_DESK     ) prim    ON oc.TRD_ORD = prim.ORD_NUM    WHERE prim.DEALING_DESK = 'Fixed Income'        IF OBJECT_ID('tempdb..#max_execution_exception', 'U') IS NOT NULL DROP TABLE #max_execution_exception    SELECT      ORD_NUM,      REBASED_AUTH_TIME,     MAX(Reversion_Time) AS Reversion_Time,     MAX(Inter_Day_Exception_Value) AS Inter_Day_Exception_Value,     MAX(Intra_Day_Exception_Value) AS Intra_Day_Exception_Value,     MAX([Time Difference]) AS [Time_Difference],     MAX([Date_Difference]) AS [Date_Difference]    INTO #max_execution_exception    FROM #execution_exception    GROUP BY ORD_NUM, REBASED_AUTH_TIME            --1.i. Add in detail for the type of exception    IF OBJECT_ID('tempdb..#execution_exception_type', 'U') IS NOT NULL DROP TABLE #execution_exception_type    SELECT DISTINCT           *,           CASE                  WHEN et.[Inter_Day_Exception_Value] >= 1  THEN 'Inter' -- If an exception has been raised and the date is greater than one then it must be an inter-day exception                 WHEN et.[Intra_Day_Exception_Value] >= 1  THEN 'Intra' --If an exception has been raised and it is not an inter-day exception then it must be an intra-day exception                 ELSE NULL           END AS [Exception_Type],           CASE                  WHEN et.[Inter_Day_Exception_Value] >= 1 THEN et.[Inter_Day_Exception_Value] -- If an exception has been raised and the date is greater than one then it must be an inter-day exception                 WHEN et.[Intra_Day_Exception_Value] >= 1 THEN et.[Intra_Day_Exception_Value] --If an exception has been raised and it is not an inter-day exception then it must be an intra-day exception                 ELSE 0           END AS [Exception_Value],           CASE                  WHEN et.[Inter_Day_Exception_Value] >= 1 THEN CONVERT(VARCHAR(5),et.[Date_Difference]) + ' days' -- If an exception has been raised and the date is greater than one then it must be an inter-day exception                 WHEN et.[Intra_Day_Exception_Value] >= 1 THEN CONVERT(varchar(5), DATEADD(minute, et.Time_Difference, 0), 114)  + ' (HH:MM)' --If an exception has been raised and it is not an inter-day exception then it must be an intra-day exception                 ELSE NULL           END AS Timespan    INTO #execution_exception_type     FROM #max_execution_exception et               -- Use #execution_exception_type to populate FINAL_STATUS_UPDATE_TABLE           IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table           select distinct                 CONCAT(ORD_NUM,'_9',[Exception_Type],[Exception_Value]) AS ID,                 '1A2' AS STATUS,                 NULL AS FINAL_UPDATED_TIME           into #temp_status_table           from #execution_exception_type           where [Exception_Type] IS NOT NULL                      MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T           USING #temp_status_table AS S           ON (T.ID = S.ID)      WHEN MATCHED                 THEN                  UPDATE SET                        T.ID=T.ID,                        T.STATUS=T.STATUS,         T.DEALING_DESK = 'Fixed Income',                        T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME           WHEN NOT MATCHED                  THEN                  INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)                 VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'Fixed Income');             --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      NULL AS MULTI_FUND_ID,      NULL AS TRD_ORD,      pm.ORD_NUM AS PM_ORD,      'Timely Execution' AS Exception_Type,      CONCAT(ex.ORD_NUM,'_9',[Exception_Type],[Exception_Value]) AS ID,      NULL AS REASON,      NULL AS COMMENT,      'With Reviewer' AS Status,      NULL AS ClientExecID,      'Fixed Income' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      NULL AS DEALER,      '1A2' AS STATUS_ID,      pm.AUTH_TIME AS ORD_AUTH,      NULL AS TRADE_EXEC     INTO #temp_audit     FROM #execution_exception_type ex     LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.PM_ORDERS GROUP BY ORD_NUM) pm     ON ex.ORD_NUM = pm.ORD_NUM     where [Exception_Type] IS NOT NULL          MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);                                               IF OBJECT_ID('VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE') IS NULL           select distinct                 ORD_NUM,                 REBASED_AUTH_TIME,                 'Fixed Income' AS [Dealing_Desk],                 Exception_Type,        Reversion_Time,        ISNULL(Exception_Value,0) AS TIMELY_EXECUTION_EXCEPTION,        Timespan,                 CASE                         WHEN Exception_Type IS NOT NULL THEN GETDATE()                         ELSE NULL                  END AS CREATETIME           into VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE           from  #execution_exception_type                   ELSE               IF OBJECT_ID('tempdb..#temp_TEE', 'U') IS NOT NULL DROP TABLE #temp_TEE               select distinct                 ORD_NUM,                        REBASED_AUTH_TIME,                 'Fixed Income' AS [Dealing_Desk],                 Exception_Type,        Reversion_Time,                 ISNULL(Exception_Value,0) AS TIMELY_EXECUTION_EXCEPTION,        Timespan,                 CASE                         WHEN Exception_Type IS NOT NULL THEN GETDATE()                         ELSE NULL                  END AS CREATETIME           into #temp_tee           from  #execution_exception_type                   MERGE VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FI_TABLE AS T           USING #temp_TEE AS S           ON ((T.ORD_NUM = S.ORD_NUM AND        t.REBASED_AUTH_TIME = S.REBASED_AUTH_TIME AND        ISNULL(T.Exception_Type,'-1') = ISNULL(S.Exception_Type,'-1') AND       T.TIMELY_EXECUTION_EXCEPTION = S.TIMELY_EXECUTION_EXCEPTION)       OR       (T.ORD_NUM = S.ORD_NUM AND        t.REBASED_AUTH_TIME = S.REBASED_AUTH_TIME AND        T.TIMELY_EXECUTION_EXCEPTION > S.TIMELY_EXECUTION_EXCEPTION))           WHEN MATCHED                 THEN                  UPDATE SET                         T.DEALING_DESK = S.DEALING_DESK,                        T.TIMELY_EXECUTION_EXCEPTION = CASE WHEN S.TIMELY_EXECUTION_EXCEPTION > T.TIMELY_EXECUTION_EXCEPTION THEN S.TIMELY_EXECUTION_EXCEPTION ELSE T.TIMELY_EXECUTION_EXCEPTION END,         T.Exception_Type = CASE WHEN S.TIMELY_EXECUTION_EXCEPTION > T.TIMELY_EXECUTION_EXCEPTION THEN S.Exception_Type ELSE T.Exception_Type END,                        T.Reversion_Time = CASE WHEN S.TIMELY_EXECUTION_EXCEPTION > T.TIMELY_EXECUTION_EXCEPTION THEN S.Reversion_Time ELSE T.Reversion_Time END,                        T.CREATETIME = CASE WHEN S.TIMELY_EXECUTION_EXCEPTION > T.TIMELY_EXECUTION_EXCEPTION THEN S.CREATETIME ELSE T.CREATETIME END           WHEN NOT MATCHED                  THEN INSERT (ORD_NUM, REBASED_AUTH_TIME, DEALING_DESK, Exception_Type, Reversion_Time, Timespan, TIMELY_EXECUTION_EXCEPTION, CREATETIME)                        VALUES (S.ORD_NUM, S.REBASED_AUTH_TIME, S.DEALING_DESK, S.Exception_Type, S.Reversion_Time, S.Timespan, S.TIMELY_EXECUTION_EXCEPTION, S.CREATETIME);        IF OBJECT_ID('tempdb..#date_range', 'U') IS NOT NULL DROP TABLE #date_range    IF OBJECT_ID('tempdb..#PM_ORD_AUTH_TIMES', 'U') IS NOT NULL DROP TABLE #PM_ORD_AUTH_TIMES    IF OBJECT_ID('tempdb..#trd_ord_cancels', 'U') IS NOT NULL DROP TABLE #trd_ord_cancels    IF OBJECT_ID('tempdb..#PM_ORD_AUTH_TIMES_RANKED', 'U') IS NOT NULL DROP TABLE #PM_ORD_AUTH_TIMES_RANKED    IF OBJECT_ID('tempdb..#PM_ORD_AUTH_TIME_RANGE', 'U') IS NOT NULL DROP TABLE #PM_ORD_AUTH_TIME_RANGE    IF OBJECT_ID('tempdb..#PM_ORD_AUTH_TIME_REVERSION', 'U') IS NOT NULL DROP TABLE #PM_ORD_AUTH_TIME_REVERSION    IF OBJECT_ID('tempdb..#PM_ORD_TRADES', 'U') IS NOT NULL DROP TABLE #PM_ORD_TRADES    IF OBJECT_ID('tempdb..#PM_AUTH_TIMINGS_WEEKEND', 'U') IS NOT NULL DROP TABLE #PM_AUTH_TIMINGS_WEEKEND    IF OBJECT_ID('tempdb..#PM_ORD_AUTH_TIMES_WKND_HOLS', 'U') IS NOT NULL DROP TABLE #PM_ORD_AUTH_TIMES_WKND_HOLS    IF OBJECT_ID('tempdb..#execution_exception', 'U') IS NOT NULL DROP TABLE #execution_exception    IF OBJECT_ID('tempdb..#max_execution_exception', 'U') IS NOT NULL DROP TABLE #max_execution_exception    IF OBJECT_ID('tempdb..#execution_exception_type', 'U') IS NOT NULL DROP TABLE #execution_exception_type    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    IF OBJECT_ID('tempdb..#temp_TEE', 'U') IS NOT NULL DROP TABLE #temp_TEE        END                --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_09_TIMELY_EXECUTION_FX  CreateDate: 2025-06-26 18:15:30.530  ModifyDate: 2025-06-26 18:15:30.530  --- DEFINITION START ---  -- =============================================    -- Author:  <da Costa, David>    -- Create date: <27/06/2019>    -- Description:     -- <All trades must be executed within a certain    -- time frame from when the order is placed.>    -- =============================================        -- ***************VERSION CONTROL***************    --    -- *********************************************        CREATE PROCEDURE [dbo].[VG_09_TIMELY_EXECUTION_FX]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;             IF OBJECT_ID('tempdb..#temp_max_ORDER_touch', 'U') IS NOT NULL DROP TABLE #temp_max_ORDER_touch    SELECT     ORD_NUM,     MAX(TOUCH_COUNT) AS MAX_TOUCH    INTO #temp_max_ORDER_touch    FROM VISTA_REPORTING.dbo.PM_ORDERS    GROUP BY ORD_NUM        IF OBJECT_ID('tempdb..#temp_tex', 'U') IS NOT NULL DROP TABLE #temp_tex    SELECT DISTINCT      fxo.FXM_ORDER_ID AS ORDER_ID,      fxo.INSTRUCTION_RECEIVED_DATE_TIME,      MAX(fxt.ACCEPTED_DATE_TIME) AS MAX_ACCEPTED_DATE_TIME,     MAX(fxt.EXECUTED_DATE_TIME) AS MAX_EXECUTED_DATE_TIME,     MAX(fxt.MARKET_ARRIVAL_DATE_TIME) AS MAX_MARKET_ARRIVAL_DATE_TIME,     DATEDIFF(SECOND, fxo.INSTRUCTION_RECEIVED_DATE_TIME, MAX(fxt.ACCEPTED_DATE_TIME)) AS ACHKNOWLEDGED_MINS,     COALESCE(ter.[TIMELY_ACK_THRESHOLD],ter2.[TIMELY_ACK_THRESHOLD]) as TIMELY_ACK_THRESHOLD,     DATEDIFF(SECOND, fxo.INSTRUCTION_RECEIVED_DATE_TIME, MAX(fxt.EXECUTED_DATE_TIME)) AS EXECUTED_MINS,     CASE       WHEN fxo.[INSTRUCTION_TYPE] in ('SPOT')        THEN COALESCE(ter.[SPOT_TIMELY_EX_THRESHOLD],ter2.[SPOT_TIMELY_EX_THRESHOLD])      WHEN fxo.[INSTRUCTION_TYPE] in ('Forward','NDS','NDF','FX Swap') THEN COALESCE(ter.[FWD_TIMELY_EX_THRESHOLD],ter2.[FWD_TIMELY_EX_THRESHOLD])     END AS TIMELY_EX_THRESHOLD,     DATEDIFF(SECOND,fxo.INSTRUCTION_RECEIVED_DATE_TIME, MAX(fxt.MARKET_ARRIVAL_DATE_TIME)) AS MARKET_ARRIVAL_MINS,     CASE       WHEN fxo.[INSTRUCTION_TYPE] in ('SPOT')        THEN COALESCE(ter.[SPOT_TIMELY_MARKET_ARRIVAL_THRESHOLD],ter2.[SPOT_TIMELY_MARKET_ARRIVAL_THRESHOLD])      WHEN fxo.[INSTRUCTION_TYPE] in ('Forward','NDS','NDF','FX Swap') THEN COALESCE(ter.[FWD_TIMELY_MARKET_ARRIVAL_THRESHOLD],ter2.[FWD_TIMELY_MARKET_ARRIVAL_THRESHOLD])     END AS TIMELY_MARKET_THRESHOLD,     'FX' AS [SOURCE],     fxo.INSTRUCTION_TYPE    INTO #temp_tex    FROM VISTA_REPORTING.dbo.FX_ORDERS fxo    LEFT JOIN VISTA_REPORTING.dbo.FX_TRADES fxt ON fxt.ORDER_ID=fxo.FXM_ORDER_ID    LEFT JOIN VISTA_STAGING.dbo.REF_FX_TIMELY_EX_REC_THRESHOLD ter     ON fxo.[BUY_CCY] = ter.[BASE_CCY] and fxo.[SELL_CCY] = ter.[CONTRA_CCY] and fxo.INSTRUCTION_RECEIVED_DATE_TIME BETWEEN ter.DATE_FROM AND ter.DATE_TO    LEFT JOIN VISTA_STAGING.dbo.REF_FX_TIMELY_EX_REC_THRESHOLD ter2    ON fxo.[BUY_CCY] = ter2.[CONTRA_CCY] and fxo.[SELL_CCY] = ter2.[BASE_CCY] and fxo.INSTRUCTION_RECEIVED_DATE_TIME BETWEEN ter2.DATE_FROM AND ter2.DATE_TO    GROUP BY       fxo.FXM_ORDER_ID,      fxo.INSTRUCTION_RECEIVED_DATE_TIME,     ter.TIMELY_ACK_THRESHOLD,     ter2.TIMELY_ACK_THRESHOLD,     fxo.INSTRUCTION_TYPE,     ter.SPOT_TIMELY_EX_THRESHOLD,     ter2.SPOT_TIMELY_EX_THRESHOLD,     ter.FWD_TIMELY_EX_THRESHOLD,     ter2.FWD_TIMELY_EX_THRESHOLD,     ter.SPOT_TIMELY_MARKET_ARRIVAL_THRESHOLD,     ter2.SPOT_TIMELY_MARKET_ARRIVAL_THRESHOLD,     ter.FWD_TIMELY_MARKET_ARRIVAL_THRESHOLD,     ter2.FWD_TIMELY_MARKET_ARRIVAL_THRESHOLD        UNION        SELECT DISTINCT      pm.ord_num,     pm.AUTH_TIME,      MAX(pm.ACTIVE_TIME),      MAX(t.EXECUTION_TIME),     MAX(t.EXECUTION_TIME),     DATEDIFF(SECOND, pm.AUTH_TIME, MAX(pm.ACTIVE_TIME)),     COALESCE(ter.TIMELY_ACK_THRESHOLD,ter2.TIMELY_ACK_THRESHOLD),     DATEDIFF(SECOND, pm.AUTH_TIME,MAX(t.EXECUTION_TIME)),     COALESCE(ter.[FWD_TIMELY_EX_THRESHOLD],ter2.[FWD_TIMELY_EX_THRESHOLD]) AS TIMELY_EX_THRESHOLD,     DATEDIFF(SECOND,pm.AUTH_TIME, MAX(t.EXECUTION_TIME)) AS MARKET_ARRIVAL_MINS,     COALESCE(ter.[FWD_TIMELY_MARKET_ARRIVAL_THRESHOLD],ter2.[FWD_TIMELY_MARKET_ARRIVAL_THRESHOLD]) AS TIMELY_MARKET_THRESHOLD,     'AL' as [SOURCE],     pm.SM_SEC_TYPE    from VISTA_REPORTING.dbo.PM_ORDERS pm    inner join #temp_max_ORDER_touch mot ON mot.MAX_TOUCH = pm.TOUCH_COUNT and mot.ORD_NUM = pm.ORD_NUM    LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD = pm.ORD_NUM    LEFT JOIN (select distinct ord_num, execution_time from VISTA_REPORTING.dbo.TRADES) t ON t.ORD_NUM = oc.TRD_ORD    LEFT JOIN VISTA_STAGING.dbo.REF_FX_TIMELY_EX_REC_THRESHOLD ter    ON SUBSTRING(pm.SEC_DESC1, 1,3) = ter.[BASE_CCY] and SUBSTRING(pm.SEC_DESC1, 7,3) = ter.[CONTRA_CCY] and pm.AUTH_TIME BETWEEN ter.DATE_FROM AND ter.DATE_TO    LEFT JOIN VISTA_STAGING.dbo.REF_FX_TIMELY_EX_REC_THRESHOLD ter2    ON SUBSTRING(pm.SEC_DESC1, 1,3) = ter.[CONTRA_CCY] and SUBSTRING(pm.SEC_DESC1, 7,3) = ter.[BASE_CCY] and pm.AUTH_TIME BETWEEN ter2.DATE_FROM AND ter2.DATE_TO    WHERE pm.[DEALING_DESK] = 'FX' AND pm.SM_SEC_GROUP = 'OPTION'    group by      pm.ord_num,     pm.AUTH_TIME,     ter.[FWD_TIMELY_EX_THRESHOLD],     ter.[FWD_TIMELY_MARKET_ARRIVAL_THRESHOLD],     ter.[TIMELY_ACK_THRESHOLD],     ter2.[FWD_TIMELY_EX_THRESHOLD],     ter2.[FWD_TIMELY_MARKET_ARRIVAL_THRESHOLD],     ter2.[TIMELY_ACK_THRESHOLD],     pm.SM_SEC_TYPE        IF OBJECT_ID('tempdb..#temp_exception_table', 'U') IS NOT NULL DROP TABLE #temp_exception_table    SELECT DISTINCT     tte.*,     CASE       WHEN tte.ACHKNOWLEDGED_MINS > tte.TIMELY_ACK_THRESHOLD THEN 1      ELSE 0     END AS TIMELY_ACHKNOWLEDGEMENT_EXCEPTION,     CASE       WHEN tte.EXECUTED_MINS > tte.TIMELY_EX_THRESHOLD THEN 1      ELSE 0     END AS TIMELY_EXECUTION_EXCEPTION,     CASE       WHEN tte.MARKET_ARRIVAL_MINS > tte.TIMELY_MARKET_THRESHOLD THEN 1      ELSE 0     END AS TIMELY_MARKET_EXCEPTION,     CASE       WHEN tte.ACHKNOWLEDGED_MINS > tte.TIMELY_ACK_THRESHOLD THEN 1      WHEN tte.EXECUTED_MINS > tte.TIMELY_EX_THRESHOLD THEN 1      WHEN tte.MARKET_ARRIVAL_MINS > tte.TIMELY_MARKET_THRESHOLD THEN 1      ELSE 0     END AS VG_09,     CASE       WHEN tte.ACHKNOWLEDGED_MINS > tte.TIMELY_ACK_THRESHOLD THEN GETDATE()      WHEN tte.EXECUTED_MINS > tte.TIMELY_EX_THRESHOLD THEN GETDATE()      WHEN tte.MARKET_ARRIVAL_MINS > tte.TIMELY_MARKET_THRESHOLD THEN GETDATE()      ELSE 0     END AS VG_09_CREATETIME    INTO #temp_exception_table    FROM #temp_tex tte        IF OBJECT_ID('tempdb..#COMBINED_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #COMBINED_EXCEPTIONS    SELECT DISTINCT     ORDER_ID,     VG_09,     VG_09_CREATETIME,     SOURCE    INTO #COMBINED_EXCEPTIONS    FROM #temp_exception_table            --Add records into FINAL_STATUS_UPDATE_TABLE    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    SELECT DISTINCT     CONCAT(ORDER_ID,'_9_', SOURCE) AS ID,     '1A2' AS STATUS,     NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table    FROM #COMBINED_EXCEPTIONS    WHERE VG_09 != 0        MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'FX',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'FX');            --Add records into AUDIT_TABLE    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    SELECT DISTINCT     NULL AS TRANSACTION_NUMBER,     OC.TRD_ORD AS TRD_ORD,     et.ORDER_ID AS ORDER_ID,     'Timely Execution' AS Exception_Type,     CONCAT(et.ORDER_ID,'_9_',[SOURCE]) AS ID,     NULL AS REASON,     NULL AS COMMENT,     'With Reviewer' AS Status,     NULL AS ClientExecID,     'FX' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],tdd3.[FULL_NAME],tdd4.[FULL_NAME],dd.[DEFAULT_DEALER]) AS DEALER,     '1A2' AS STATUS_ID,     MAX(et.INSTRUCTION_RECEIVED_DATE_TIME) AS ORD_AUTH,     et.MAX_EXECUTED_DATE_TIME AS TRADE_EXEC    INTO #temp_audit    FROM #temp_exception_table et    LEFT JOIN (SELECT DISTINCT ORDER_ID, DEALT_BY, ACCEPTED_BY, PULL_DATE FROM VISTA_REPORTING.dbo.FX_TRADES) fxt    on et.ORDER_ID = fxt.ORDER_ID and et.SOURCE = 'FX'    LEFT JOIN (SELECT DISTINCT PULL_DATE, FXM_ORDER_ID, MIN(INSTRUCTION_RECEIVED_DATE_TIME) as INSTRUCTION_RECEIVED_DATE, INSTRUCTED_BY FROM VISTA_REPORTING.dbo.FX_ORDERS GROUP BY FXM_ORDER_ID, INSTRUCTED_BY, PULL_DATE) fxo    ON et.ORDER_ID = fxo.FXM_ORDER_ID AND et.SOURCE = 'FX'    LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.TRD_ORD =et.ORDER_ID AND et.SOURCE = 'AL'    LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME, PM, TRADER, PULL_DATE FROM VISTA_REPORTING.DBO.PM_ORDERS GROUP BY ORD_NUM, PM, TRADER, PULL_DATE) PM ON PM.ORD_NUM = OC.PM_ORD    left join (SELECT DISTINCT t.MULTI_FUND_ID, t.ORD_NUM, t.TRD_TRADER, t.TOUCH_COUNT, t.PULL_DATE from vista_reporting.dbo.TRADES T    INNER JOIN (SELECT MULTI_FUND_ID, MAX(TOUCH_COUNT) AS MAX_TOUCH FROM VISTA_REPORTING.DBO.TRADES GROUP BY MULTI_FUND_ID) mtt on mtt.MAX_TOUCH = T.TOUCH_COUNT) t on oc.TRD_ORD = t.ORD_NUM    left join  VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd    on tdd.[MG_USER_ID] = fxt.[DEALT_BY] AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2    on tdd2.[MG_USER_ID] = fxt.[ACCEPTED_BY] AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)    left join VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd3    on tdd3.[INITIALS]  = t.[TRD_TRADER] AND CAST(t.[PULL_DATE] AS DATE) BETWEEN CAST(tdd3.[DATE_FROM] AS DATE) AND CAST(tdd3.[DATE_TO] AS DATE)    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd4    on tdd4.[INITIALS] = pm.[TRADER] AND CAST(pm.[PULL_DATE] AS DATE) BETWEEN CAST(tdd4.[DATE_FROM] AS DATE) AND CAST(tdd4.[DATE_TO] AS DATE)    left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd     on dd.[REPORT_NAME] = 'Timely Execution' AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE],t.[PULL_DATE],pm.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)    WHERE et.VG_09 != 0    GROUP BY     OC.TRD_ORD,      et.ORDER_ID,     CONCAT(et.ORDER_ID,'_9_',[SOURCE]),     COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],tdd3.[FULL_NAME],tdd4.[FULL_NAME],dd.[DEFAULT_DEALER]),     et.MAX_EXECUTED_DATE_TIME            MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_FX AS T     USING #temp_audit AS S    ON (T.ID = S.ID )    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID, Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID, Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);        IF      OBJECT_ID('VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FX_TABLE', 'U') IS NULL     SELECT distinct *      INTO VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FX_TABLE      FROM #COMBINED_EXCEPTIONS    ELSE      IF OBJECT_ID('tempdb..#temp_TE_table', 'U') IS NOT NULL      DROP TABLE #temp_TE_table     SELECT distinct *      INTO #TEMP_TE_TABLE     FROM #COMBINED_EXCEPTIONS             MERGE VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_FX_TABLE AS T     USING #COMBINED_EXCEPTIONS AS S    ON T.ORDER_ID = S.ORDER_ID and t.source = s.source    WHEN MATCHED     THEN UPDATE     SET ORDER_ID= CASE WHEN S.VG_09 > T.VG_09 THEN S.ORDER_ID ELSE T.ORDER_ID END,     VG_09= CASE WHEN S.VG_09 > T.VG_09 THEN S.VG_09 ELSE T.VG_09 END,     VG_09_CREATETIME = CASE WHEN S.VG_09 > T.VG_09 THEN S.VG_09_CREATETIME ELSE T.VG_09_CREATETIME END,     SOURCE = CASE WHEN S.VG_09 > T.VG_09 THEN S.SOURCE ELSE T.SOURCE END        WHEN NOT MATCHED     THEN     INSERT     (ORDER_ID,     VG_09,     VG_09_CREATETIME,     SOURCE)    VALUES    (S.ORDER_ID,     S.VG_09,     S.VG_09_CREATETIME,     S.SOURCE);        IF OBJECT_ID('tempdb..#temp_max_ORDER_touch', 'U') IS NOT NULL DROP TABLE #temp_max_ORDER_touch    IF OBJECT_ID('tempdb..#temp_tex', 'U') IS NOT NULL DROP TABLE #temp_tex    IF OBJECT_ID('tempdb..#temp_exception_table', 'U') IS NOT NULL DROP TABLE #temp_exception_table    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit            END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_09_TIMELY_EXECUTION_LL  CreateDate: 2025-06-26 18:09:23.383  ModifyDate: 2025-06-26 18:09:23.383  --- DEFINITION START ---  -- =============================================    -- Author:  <Chandarana, Sohini>    -- Create date: <04/23/2018>    -- Description:     -- <Stored procedure as appropriated from VG_09_TIMELY_EXECUTION_FI>    -- =============================================        -- ***************VERSION CONTROL***************    -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.        -- 2024-01-17 Matej Miter: created for Jira number:    -- SURVG-888 - Crated a number counting table to avoid using master table that gives us only dates up to 5 years. New solution looks into the future and will work up to 2999 year        -- *********************************************        CREATE PROCEDURE [dbo].[VG_09_TIMELY_EXECUTION_LL]     -- Add the parameters for the stored procedure here     -- @Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;             --DECLARE @DATE_FILTER AS DATE --Declare date filter to only select data from current pull date     --SET @DATE_FILTER = CONVERT(DATE, GETDATE())        --0.Create a calendar table - is used to adjust for weekends    DECLARE @Date1 DATE, @Date2 DATE--@DATE_FILTER DATE     --SET @DATE_FILTER = CONVERT(DATE, GETDATE()) --Set date filter to only select data from current pull date    SET @Date1 = (select min(AUTH_TIME) from VISTA_REPORTING.dbo.PM_ORDERS) --Set the variables used to create the weekday table    SET @Date2 = DATEADD(day, 160, GETDATE())            IF OBJECT_ID('tempdb..#date_range', 'U') IS NOT NULL DROP TABLE #date_range    SELECT           DATEADD(DAY,Number+1,@Date1) as [DATE],           DATEPART(weekday, DATEADD(DAY,Number,@Date1)) as WEEKDAY --create a table that assigns a day of the week to every date following the sonvention that Monday=1, Tuesday=2, etc...    into #date_range    -- SURVG-888    FROM VISTA_REPORTING.dbo.REF_TIMELY_EX_DATE_HELPER    WHERE DATEADD(DAY,Number+1,@Date1) < @Date2    -- SURVG-888    --1.a. Create a list of all PM order authorisation times with the largest face value and fill amount (this is used to determine whether the order gets fully filled).     --           Note that we rebase some orders to a 13:00 authorisation time as per business requirements    IF OBJECT_ID('tempdb..#PM_ORD_AUTH_TIMES', 'U') IS NOT NULL DROP TABLE #PM_ORD_AUTH_TIMES    SELECT DISTINCT           pm.ORD_NUM,            first_face.FACE,           pm.FILL_AMT,           pm.AUTH_TIME,           pm.ASSIGNED_To,           pm.STATUS,           pm.MODIFY_TIME    INTO #PM_ORD_AUTH_TIMES    FROM VISTA_REPORTING.dbo.PM_ORDERS pm           LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON pm.ORD_NUM = oc.PM_ORD           LEFT JOIN VISTA_REPORTING.dbo.TRADES tr on oc.TRD_ORD = tr.ORD_NUM           LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p on tr.ORD_NUM = p.ORD_NUM              OUTER APPLY (                 SELECT TOP 1 * FROM VISTA_REPORTING.dbo.PM_ORDERS pm2                 WHERE pm.ORD_NUM = pm2.ORD_NUM  AND pm.AUTH_TIME = pm2.AUTH_TIME AND STATUS IN ('U','A','F') ORDER BY TOUCH_COUNT ASC) first_face -- We want to look at the first value for FACE where the STATUS IN ('U','A','F') for this PM Ord Auth time.    WHERE pm.DEALING_DESK='Leveraged Finance'      AND pm.AUTH_TIME IS NOT NULL -- Aladdin provides records where AUTH_TIME is NULL. This happens when a PM has raised an order but not yet authorised it. We do not need to consider these.                 --1.b. Rank the Auth times for each ORD_NUM so that we can find the time range between AUTH_TIMEs for each ORD_NUM    IF OBJECT_ID('tempdb..#PM_ORD_AUTH_TIMES_RANKED', 'U') IS NOT NULL DROP TABLE #PM_ORD_AUTH_TIMES_RANKED    SELECT            ORD_NUM,           auth_time,           ABS(FACE) AS FACE, --Take the absolute value as the FACE is negative for a Sell              MAX(ABS(FILL_AMT)) AS MAX_FILL,           RANK() OVER(PARTITION BY ORD_NUM order by auth_time asc) AS Auth_Index    INTO #PM_ORD_AUTH_TIMES_RANKED    FROM #PM_ORD_AUTH_TIMES    GROUP BY           ORD_NUM,            AUTH_TIME,              FACE        /* 1.c. For each PM order authorisation, create a field to identify the next authorisation time     (this is done so that we can tie market executions and reversions back to the correct PM order     authorisation when we have multiple of these).*/    IF OBJECT_ID('tempdb..#PM_ORD_AUTH_TIME_RANGE', 'U') IS NOT NULL DROP TABLE #PM_ORD_AUTH_TIME_RANGE    SELECT DISTINCT           base.ORD_NUM,           base.auth_time,           CASE WHEN base.Face = base.Max_Fill THEN 1 ELSE 0 END AS [Fully_Filled_Flag], --Create a flag to determine whether the order has been fully filled during this authorisation period           ISNULL(nxt.AUTH_TIME,'9999-12-31') AS next_Authorisation -- If there are no PM order authorisations after this, set to the largest SQL Server date    INTO #PM_ORD_AUTH_TIME_RANGE    FROM #PM_ORD_AUTH_TIMES_RANKED base    OUTER APPLY (           SELECT TOP 1 * FROM #PM_ORD_AUTH_TIMES_RANKED nxt           WHERE base.ORD_NUM = nxt.ORD_NUM  AND base.Auth_Index < nxt.Auth_Index ORDER BY nxt.Auth_Index ASC) nxt            --1.e. Determine the trades associated with each PM order.    IF OBJECT_ID('tempdb..#PM_ORD_TRADES', 'U') IS NOT NULL DROP TABLE #PM_ORD_TRADES    SELECT            oc.PM_ORD,           t.EXECUTION_TIME    INTO #PM_ORD_TRADES    FROM VISTA_REPORTING.dbo.TRADES t    LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc    ON t.ORD_NUM = oc.TRD_ORD        /*1.f. For each PM order authorisation, determine the time of reversion and find the latest execution     for this authorisation (do not include any executions that are associated with prior of future authorisations for this order).*/    IF OBJECT_ID('tempdb..#PM_AUTH_TIMINGS', 'U') IS NOT NULL DROP TABLE #PM_AUTH_TIMINGS    SELECT            pm.*,           trd.EXECUTION_TIME AS [Last_Trade_Time],           trd1.EXECUTION_TIME AS [First_Trade_Time]    INTO #PM_AUTH_TIMINGS    FROM #PM_ORD_AUTH_TIME_RANGE pm    OUTER APPLY (                        SELECT TOP 1 t.*                        FROM #PM_ORD_TRADES t                        WHERE pm.ORD_NUM = t.PM_ORD                        AND t.EXECUTION_TIME BETWEEN pm.AUTH_TIME AND pm.next_Authorisation -- We only want to use the set of trades that are executed after this particular PM Order authorisation and before the next PM Order authorisation                        ORDER BY t.EXECUTION_TIME DESC) trd    OUTER APPLY (                        SELECT TOP 1 t.*                        FROM #PM_ORD_TRADES t                        WHERE pm.ORD_NUM = t.PM_ORD                        AND t.EXECUTION_TIME BETWEEN pm.AUTH_TIME AND pm.next_Authorisation -- We only want to use the set of trades that are executed after this particular PM Order authorisation and before the next PM Order authorisation                        ORDER BY t.EXECUTION_TIME ASC) trd1    --SELECT * FROM #PM_AUTH_TIMINGS        --1.g. Find the number of weekends and holidays between the PM Order authorisation time and last event time    IF OBJECT_ID('tempdb..#PM_AUTH_TIMINGS_WEEKEND', 'U') IS NOT NULL DROP TABLE #PM_AUTH_TIMINGS_WEEKEND    SELECT            pm.*,           COUNT(DISTINCT d.[DATE]) AS [Weekend_Count]        INTO #PM_AUTH_TIMINGS_WEEKEND    FROM #PM_AUTH_TIMINGS pm    LEFT JOIN #date_range d    ON d.[DATE] BETWEEN CONVERT(DATE,pm.AUTH_TIME) AND CONVERT(DATE,Last_Trade_Time) AND WEEKDAY IN (6,7)    GROUP BY           pm.ORD_NUM,           pm.AUTH_TIME,           pm.Fully_Filled_Flag,           pm.next_Authorisation,           pm.Last_Trade_Time,           pm.First_Trade_Time        IF OBJECT_ID('tempdb..#PM_ORD_AUTH_TIMES_WKND_HOLS', 'U') IS NOT NULL DROP TABLE #PM_ORD_AUTH_TIMES_WKND_HOLS    SELECT            pm.*,           COUNT(DISTINCT h.CLOSURE_DATES) AS [Holiday_Count],           ISNULL(pm.Weekend_Count,0) + ISNULL(COUNT(DISTINCT h.CLOSURE_DATES),0) AS [Weekend_Holiday_Count],           DATEDIFF(DAY, pm.AUTH_TIME, pm.Last_Trade_Time - (ISNULL(pm.Weekend_Count,0) + ISNULL(COUNT(DISTINCT h.CLOSURE_DATES),0))) as [Date_Difference]     INTO #PM_ORD_AUTH_TIMES_WKND_HOLS    FROM #PM_AUTH_TIMINGS_WEEKEND pm    left join VISTA_STAGING.dbo.HOLIDAYS h     on CONVERT(DATE, h.CLOSURE_DATES, 103) BETWEEN CONVERT(DATE,pm.AUTH_TIME) AND CONVERT(DATE,Last_Trade_Time) and h.COUNTRY_CODE='GB'    GROUP BY           pm.ORD_NUM,           pm.AUTH_TIME,           pm.Fully_Filled_Flag,           pm.next_Authorisation,           pm.Last_Trade_Time,           pm.First_Trade_Time,           pm.[Weekend_Count]        --1.h. For each PM Order Authorisation, determine if the TE threshold has been breached    IF OBJECT_ID('tempdb..#execution_exception', 'U') IS NOT NULL DROP TABLE #execution_exception    SELECT DISTINCT           pm.*,            CASE                 WHEN ISNULL(prim.PRIMARY_MARKET_ORDER_LEVEL,0) = 1 OR ISNULL(prim.INTERFUND_TRANSFER,0) = 1 -- Discount Primary Market & Interfund Xfr                 THEN 0                 WHEN [Date_Difference] BETWEEN 0 AND 4    THEN 0                 WHEN [Date_Difference] BETWEEN 5 AND 9    THEN 5                 WHEN [Date_Difference] BETWEEN 10 AND 19  THEN 10                 WHEN [Date_Difference] BETWEEN 20 AND 39  THEN 20                 WHEN [Date_Difference] BETWEEN 40 AND 79  THEN 40                 WHEN [Date_Difference] BETWEEN 80 AND 159 THEN 80                 WHEN [Date_Difference] > 159 THEN 160           END AS [Inter_Day_Exception_Value], -- Determine if inter-day exception           CASE       WHEN ISNULL(prim.PRIMARY_MARKET_ORDER_LEVEL,0) = 1 OR ISNULL(prim.INTERFUND_TRANSFER,0) = 1 -- Discount Primary Market& Interfund Xfr            THEN 0      WHEN cast(auth_time As date)=cast(first_trade_time As date) then 0           else 1           end AS [First_Day_Exception_Value]    INTO #execution_exception    FROM #PM_ORD_AUTH_TIMES_WKND_HOLS pm    LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc --  distinct this list so we avoid duplications    ON pm.ORD_NUM = oc.PM_ORD    LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE prim    ON oc.TRD_ORD = prim.ORD_NUM    WHERE prim.DEALING_DESK = 'Leveraged Finance'             IF OBJECT_ID('tempdb..#max_execution_exception', 'U') IS NOT NULL DROP TABLE #max_execution_exception    SELECT      ORD_NUM,      AUTH_TIME,     MAX(Inter_Day_Exception_Value) AS Inter_Day_Exception_Value,     MAX(First_Day_Exception_Value) AS First_Day_Exception_Value,     MAX([Date_Difference]) AS [Date_Difference]    INTO #max_execution_exception    FROM #execution_exception    GROUP BY ORD_NUM, AUTH_TIME            --1.i. Add in detail for the type of exception    IF OBJECT_ID('tempdb..#execution_exception_type', 'U') IS NOT NULL DROP TABLE #execution_exception_type    SELECT DISTINCT           *,           CASE                  WHEN [Inter_Day_Exception_Value] >= 1 THEN 'Inter' -- If an exception has been raised and the date is greater than one then it must be an inter-day exception                 WHEN [First_Day_Exception_Value] >= 1 THEN 'First' --If an exception has been raised and it is not an inter-day exception then it must be an intra-day exception                 ELSE NULL           END AS [Exception_Type],           CASE                  WHEN [Inter_Day_Exception_Value] >= 1 THEN [Inter_Day_Exception_Value] -- If an exception has been raised and the date is greater than one then it must be an inter-day exception                 WHEN [First_Day_Exception_Value] >= 1 THEN [First_Day_Exception_Value] --If an exception has been raised and it is not an inter-day exception then it must be an intra-day exception                 ELSE 0           END AS [Exception_Value],           CASE                  WHEN [Inter_Day_Exception_Value] >= 1 THEN CONVERT(VARCHAR(5),[Date_Difference]) + ' days' -- If an exception has been raised and the date is greater than one then it must be an inter-day exception                 ELSE NULL           END AS Timespan    INTO #execution_exception_type    FROM #max_execution_exception                       -- Use #execution_exception_type to populate FINAL_STATUS_UPDATE_TABLE           IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table           select distinct                 CONCAT(ORD_NUM,'_9',[Exception_Type],[Exception_Value]) AS ID,                 '1A1' AS STATUS,                 NULL AS FINAL_UPDATED_TIME           into #temp_status_table           from #execution_exception_type           where [Exception_Type] IS NOT NULL                      MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T           USING #temp_status_table AS S           ON (T.ID = S.ID)           WHEN MATCHED                 THEN                  UPDATE SET                        T.ID=T.ID,                        T.STATUS=T.STATUS,         T.DEALING_DESK = 'Leveraged Finance',                        T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME           WHEN NOT MATCHED                  THEN                  INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)                 VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'Leveraged Finance');          --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      NULL AS MULTI_FUND_ID,      NULL AS TRD_ORD,      pm.ORD_NUM AS PM_ORD,      'Timely Execution' AS Exception_Type,      CONCAT(ex.ORD_NUM,'_9',[Exception_Type],[Exception_Value]) AS ID,      NULL AS REASON,      NULL AS COMMENT,      'For Review' AS Status,      NULL AS ClientExecID,      'Leveraged Finance' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      NULL AS DEALER,      '1A1' AS STATUS_ID,      pm.AUTH_TIME AS ORD_AUTH,      NULL AS TRADE_EXEC     INTO #temp_audit     FROM #execution_exception_type ex     LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.PM_ORDERS GROUP BY ORD_NUM) pm     ON ex.ORD_NUM = pm.ORD_NUM     where [Exception_Type] IS NOT NULL          MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);                                               IF OBJECT_ID('VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_LL_TABLE') IS NULL               select distinct                 ORD_NUM,                 AUTH_TIME,                 'Leveraged Finance' AS [Dealing_Desk],                 Exception_Type,        Exception_Value AS TIMELY_EXECUTION_EXCEPTION,        Timespan,                 CASE                         WHEN Exception_Type IS NOT NULL THEN GETDATE()                         ELSE NULL                  END AS CREATETIME           into VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_LL_TABLE           from  #execution_exception_type                   ELSE               IF OBJECT_ID('tempdb..#temp_TEE', 'U') IS NOT NULL DROP TABLE #temp_TEE               select distinct                 ORD_NUM,                 AUTH_TIME,                 'Leveraged Finance' AS [Dealing_Desk],                 Exception_Type,                 Exception_Value AS TIMELY_EXECUTION_EXCEPTION,        Timespan,                 CASE                         WHEN Exception_Type IS NOT NULL THEN GETDATE()                         ELSE NULL                  END AS CREATETIME           into #temp_tee           from  #execution_exception_type               MERGE VISTA_STAGING.dbo.VG_09_TIMELY_EXECUTION_LL_TABLE AS T           USING #temp_TEE AS S           ON ((T.ORD_NUM = S.ORD_NUM AND        t.AUTH_TIME = S.AUTH_TIME AND        ISNULL(T.Exception_Type,'') = ISNULL(S.Exception_Type,'') AND       T.TIMELY_EXECUTION_EXCEPTION = S.TIMELY_EXECUTION_EXCEPTION)       OR       (T.ORD_NUM = S.ORD_NUM AND        t.AUTH_TIME = S.AUTH_TIME AND        T.TIMELY_EXECUTION_EXCEPTION > S.TIMELY_EXECUTION_EXCEPTION))           WHEN MATCHED                 THEN                  UPDATE SET                         T.DEALING_DESK = S.DEALING_DESK,                        T.TIMELY_EXECUTION_EXCEPTION = CASE WHEN S.TIMELY_EXECUTION_EXCEPTION > T.TIMELY_EXECUTION_EXCEPTION THEN S.TIMELY_EXECUTION_EXCEPTION ELSE T.TIMELY_EXECUTION_EXCEPTION END,         T.Exception_Type = CASE WHEN S.TIMELY_EXECUTION_EXCEPTION > T.TIMELY_EXECUTION_EXCEPTION THEN S.Exception_Type ELSE T.Exception_Type END,                        T.CREATETIME = CASE WHEN S.TIMELY_EXECUTION_EXCEPTION > T.TIMELY_EXECUTION_EXCEPTION THEN S.CREATETIME ELSE T.CREATETIME END           WHEN NOT MATCHED                  THEN INSERT (ORD_NUM, AUTH_TIME, DEALING_DESK, Exception_Type, Timespan, TIMELY_EXECUTION_EXCEPTION, CREATETIME)                        VALUES (S.ORD_NUM, S.AUTH_TIME, S.DEALING_DESK, S.Exception_Type, S.Timespan, S.TIMELY_EXECUTION_EXCEPTION, S.CREATETIME);        IF OBJECT_ID('tempdb..#date_range', 'U') IS NOT NULL DROP TABLE #date_range    IF OBJECT_ID('tempdb..#PM_ORD_AUTH_TIMES', 'U') IS NOT NULL DROP TABLE #PM_ORD_AUTH_TIMES    IF OBJECT_ID('tempdb..#PM_ORD_AUTH_TIMES_RANKED', 'U') IS NOT NULL DROP TABLE #PM_ORD_AUTH_TIMES_RANKED    IF OBJECT_ID('tempdb..#PM_ORD_AUTH_TIME_RANGE', 'U') IS NOT NULL DROP TABLE #PM_ORD_AUTH_TIME_RANGE    IF OBJECT_ID('tempdb..#PM_ORD_TRADES', 'U') IS NOT NULL DROP TABLE #PM_ORD_TRADES    IF OBJECT_ID('tempdb..#PM_AUTH_TIMINGS', 'U') IS NOT NULL DROP TABLE #PM_AUTH_TIMINGS    IF OBJECT_ID('tempdb..#PM_AUTH_TIMINGS_WEEKEND', 'U') IS NOT NULL DROP TABLE #PM_AUTH_TIMINGS_WEEKEND    IF OBJECT_ID('tempdb..#PM_ORD_AUTH_TIMES_WKND_HOLS', 'U') IS NOT NULL DROP TABLE #PM_ORD_AUTH_TIMES_WKND_HOLS    IF OBJECT_ID('tempdb..#execution_exception', 'U') IS NOT NULL DROP TABLE #execution_exception    IF OBJECT_ID('tempdb..#max_execution_exception', 'U') IS NOT NULL DROP TABLE #max_execution_exception    IF OBJECT_ID('tempdb..#execution_exception_type', 'U') IS NOT NULL DROP TABLE #execution_exception_type    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    END            --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_10_NAV_CUT_OFF_EQ  CreateDate: 2025-06-26 18:09:12.753  ModifyDate: 2025-06-26 18:09:12.753  --- DEFINITION START ---  -- =============================================    -- Author:  <da Costa, David>    -- Create date: <20/10/2017>    -- Description:     -- <Filled trades that are not posted by 11:30 are    -- to be flagged as a NAV cut-off exception>    -- =============================================        -- ***************VERSION CONTROL***************    -- 11/12/2017 - DDC: Changes made to ensure that script     -- only ever updates existing records always ensuring     -- the highest level exception is reported and     -- inserts new ones if no exception has been raised.        -- 10/01/2018 - DDC: Amendment made to only run  exception    -- calculations on the data for the day the exception is     -- being pulled        -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.    -- *********************************************        CREATE PROCEDURE [dbo].[VG_10_NAV_CUT_OFF_EQ]        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         --DECLARE @DATE_FILTER AS DATE --Declare date filter to only select data from current pull date     --SET @DATE_FILTER = CONVERT(DATE, GETDATE())            --Insert statements for procedure here     IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades     SELECT DISTINCT--create a table by MULTI_FUND_ID to account for weekend and holiday offsets to rebased datetimes     t.MULTI_FUND_ID,     t.ORD_NUM,     t.EXECUTION_TIME,     t.TRD_AUTH_TIME     into #trades     FROM VISTA_REPORTING.dbo.TRADES t     WHERE t.FinalFlag = 1         --We only want to look at the last trade per trader order     IF OBJECT_ID('tempdb..#trades1', 'U') IS NOT NULL DROP TABLE #trades1     SELECT DISTINCT      t.MULTI_FUND_ID,      t.EXECUTION_TIME,      t.TRD_AUTH_TIME     INTO #trades1     FROM #trades t     INNER JOIN (      SELECT        ORD_NUM,        MAX(EXECUTION_TIME) AS MAX_EXEC       FROM #trades GROUP BY ORD_NUM     ) o     ON t.ORD_NUM = o.ORD_NUM AND t.EXECUTION_TIME = o.MAX_EXEC     ORDER BY 2                IF OBJECT_ID('tempdb..#max_auth_face', 'U') IS NOT NULL DROP TABLE #max_auth_face        SELECT DISTINCT            o.ORD_NUM,            ABS(o2.FACE) AS FIRST_FILL_FACE,            MAX(ABS(o.FILL_AMT)) AS MAX_FILL_AMT,            MAX(t.EXECUTION_TIME) AS MAX_EXECUTION            --o.OWNER_TYPE,            --o.STATUS        into #max_auth_face        FROM VISTA_REPORTING.dbo.TRD_ORDERS o        INNER JOIN (select distinct                        ORD_NUM,                        MAX(TOUCH_COUNT) AS MAX_TOUCH                    from VISTA_REPORTING.dbo.TRD_ORDERS                    where DEALING_DESK='Equity'                    group by ORD_NUM) ma ON ma.MAX_TOUCH=o.TOUCH_COUNT and ma.ORD_NUM=o.ORD_NUM        LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON o.ORD_NUM = t.ORD_NUM     OUTER APPLY (SELECT TOP 1 tr.FACE FROM VISTA_REPORTING.dbo.TRD_ORDERS tr         WHERE tr.ORD_NUM=o.ORD_NUM AND ISNULL(tr.FILL_AMT, 0) !=0         ORDER BY tr.TOUCH_COUNT) o2        WHERE o.STATUS in ('A', 'F')        GROUP BY o.ORD_NUM, o2.FACE             IF OBJECT_ID('tempdb..#temp_nav', 'U') IS NOT NULL DROP TABLE #temp_nav     SELECT       h.MULTI_FUND_ID,      pr.DEALING_DESK,      DATEDIFF(minute, h.EXECUTION_TIME, MIN(h.TRD_AUTH_TIME)) as time_diff, --find differenece in minutes between EXECUTION_TIME AND TRD_AUTH_TIME      --t.TRD_ORIG_FACE,      h.EXECUTION_TIME,      MIN(h.TRD_AUTH_TIME) as MIN_TRD_AUTH_TIME,      CASE       WHEN ((CAST(MIN(t.TRD_AUTH_TIME) as time) > CAST('12:00:00' as time))--if TRD_AUTH_TIME is later than 11:30 that day then raise an exception          AND (CAST(MAX(t.EXECUTION_TIME) as time) < CAST('12:00:00' as time)))           AND ma.FIRST_FILL_FACE - ma.MAX_FILL_AMT = 0          THEN 1        WHEN DATEDIFF(d,MAX(t.EXECUTION_TIME), MIN(t.TRD_AUTH_TIME))  > 0         AND (CAST(MAX(t.EXECUTION_TIME) as time) < CAST('12:00:00' as time))        AND ma.FIRST_FILL_FACE - ma.MAX_FILL_AMT = 0       THEN 1      ELSE 0 --if the trade is executed after 11:30 we don't care when it's posted.          -- NOTE: There should only be one execution time per MULTI_FUND_ID, unless M&G change it after we've already put a record of the original time in the db. In this case we take the max and flag both as non-breach.      END AS NAV_CUT_OFF_EXCEPTION      INTO #temp_nav     FROM #trades1 h     LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON h.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS o ON o.ORD_NUM=t.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN #max_auth_face ma on ma.ORD_NUM=t.ORD_NUM     WHERE pr.DEALING_DESK = 'Equity'        --and t.PULL_DATE=@DATE_FILTER     GROUP BY      h.MULTI_FUND_ID,      pr.DEALING_DESK,      h.EXECUTION_TIME,      pr.PRIMARY_MARKET,      ma.FIRST_FILL_FACE,      ma.MAX_FILL_AMT         -- Use #temp_nav to populate FINAL_STATUS_UPDATE_TABLE           IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table           select distinct                 CONCAT(MULTI_FUND_ID,'_10_NAV') AS ID,                 '1A1' AS STATUS,                 NULL AS FINAL_UPDATED_TIME           into #temp_status_table           from #temp_nav            where NAV_CUT_OFF_EXCEPTION > 0                      MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T           USING #temp_status_table AS S           ON (T.ID = S.ID)           WHEN MATCHED                 THEN                  UPDATE SET                        T.ID=T.ID,                        T.STATUS=T.STATUS,         T.DEALING_DESK = 'Equity',                        T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME           WHEN NOT MATCHED                  THEN                  INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)                 VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'Equity');         --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      ex.MULTI_FUND_ID AS MULTI_FUND_ID,      t.ORD_NUM AS TRD_ORD,      NULL AS PM_ORD,      'Timely Recording NAV' AS Exception_Type,      CONCAT(ex.MULTI_FUND_ID,'_10_NAV') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'For Review' AS Status,      NULL AS ClientExecID,      'Equity' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      NULL AS DEALER,      '1A1' AS STATUS_ID,      trd_o.AUTH_TIME AS ORD_AUTH,      t.EXECUTION_TIME AS TRADE_EXEC     INTO #temp_audit     FROM #temp_nav ex     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t     ON ex.MULTI_FUND_ID = t.MULTI_FUND_ID     LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o     ON t.ORD_NUM = trd_o.ORD_NUM     where NAV_CUT_OFF_EXCEPTION > 0          MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);              IF OBJECT_ID('VISTA_STAGING.dbo.VG_10_NAV_CUT_OFF_EQ_TABLE', 'U') IS NULL          SELECT DISTINCT     MULTI_FUND_ID,     DEALING_DESK,     NAV_CUT_OFF_EXCEPTION,     CASE      WHEN NAV_CUT_OFF_EXCEPTION=1 THEN GETDATE() ELSE NULL --if an exception is raised get todays Datetime     END AS NAV_CREATETIME     INTO VISTA_STAGING.dbo.VG_10_NAV_CUT_OFF_EQ_TABLE     FROM #temp_nav         ELSE          IF OBJECT_ID('tempdb..#temp_nav_table', 'U') IS NOT NULL DROP TABLE #temp_nav_table         SELECT DISTINCT     MULTI_FUND_ID,     DEALING_DESK,     NAV_CUT_OFF_EXCEPTION,     CASE      WHEN NAV_CUT_OFF_EXCEPTION=1 THEN GETDATE() ELSE NULL --if an exception is raised get todays Datetime     END AS NAV_CREATETIME     INTO #temp_nav_table     FROM #temp_nav         MERGE VISTA_STAGING.dbo.VG_10_NAV_CUT_OFF_EQ_TABLE AS T     USING #temp_nav_table AS S     ON (T.MULTI_FUND_ID = S.MULTI_FUND_ID)     WHEN MATCHED      THEN       UPDATE SET       T.DEALING_DESK = S.DEALING_DESK,       T.NAV_CUT_OFF_EXCEPTION = CASE WHEN S.NAV_CUT_OFF_EXCEPTION > T.NAV_CUT_OFF_EXCEPTION THEN S.NAV_CUT_OFF_EXCEPTION ELSE T.NAV_CUT_OFF_EXCEPTION END,       T.NAV_CREATETIME = CASE WHEN S.NAV_CUT_OFF_EXCEPTION > T.NAV_CUT_OFF_EXCEPTION THEN S.NAV_CREATETIME ELSE T.NAV_CREATETIME END     WHEN NOT MATCHED       THEN INSERT (MULTI_FUND_ID, DEALING_DESK, NAV_CUT_OFF_EXCEPTION, NAV_CREATETIME)        VALUES (S.MULTI_FUND_ID, S.DEALING_DESK, S.NAV_CUT_OFF_EXCEPTION, S.NAV_CREATETIME);     IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades     IF OBJECT_ID('tempdb..#trades1', 'U') IS NOT NULL DROP TABLE #trades1     IF OBJECT_ID('tempdb..#max_auth_face', 'U') IS NOT NULL DROP TABLE #max_auth_face     IF OBJECT_ID('tempdb..#temp_nav', 'U') IS NOT NULL DROP TABLE #temp_nav        IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     IF OBJECT_ID('tempdb..#temp_nav_table', 'U') IS NOT NULL DROP TABLE #temp_nav_table        END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_10_TIMELY_RECORDING_CASH  CreateDate: 2025-06-26 18:08:59.380  ModifyDate: 2025-06-26 18:08:59.380  --- DEFINITION START ---  -- =============================================    -- Author:  <LIZZIE REYNOLDS>    -- Create date: <10/06/2019>    -- Description: <TIMELY RECORDING FOR CASH DESK>    -- =============================================    CREATE PROCEDURE [dbo].[VG_10_TIMELY_RECORDING_CASH]        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades    SELECT      TRANSACTION_NUMBER,     MAX(API_REQUESTED_DATE) AS MAX_API_REQ    INTO #temp_max_req_trades    FROM VISTA_REPORTING.dbo.CASH_TRADES    GROUP BY TRANSACTION_NUMBER         --TAKE THE POPULATIONS FROM BOTH SYSTEMS    IF OBJECT_ID('tempdb..#CM_POP', 'U') IS NOT NULL DROP TABLE #CM_POP     select CT.*      INTO #CM_POP     from VISTA_REPORTING.dbo.CASH_TRADES CT     INNER JOIN #temp_max_req_trades REQ ON REQ.TRANSACTION_NUMBER = CT.TRANSACTION_NUMBER AND REQ.MAX_API_REQ = CT.API_REQUESTED_DATE     --where ISNULL(TRANSACTION_STATUS_DECODE, '') != 'DELETED'            IF OBJECT_ID('tempdb..#temp_max_touch_tr', 'U') IS NOT NULL DROP TABLE #temp_max_touch_tr    SELECT      MULTI_FUND_ID,     MAX(TOUCH_COUNT) AS MAX_TOUCH    INTO #temp_max_touch_tr    FROM VISTA_REPORTING.dbo.TRADES pm    GROUP BY MULTI_FUND_ID        IF OBJECT_ID('tempdb..#ALADDIN_POP', 'U') IS NOT NULL DROP TABLE #ALADDIN_POP     SELECT T.*      INTO #ALADDIN_POP     FROM VISTA_REPORTING.DBO.TRADES T     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, DEALING_DESK FROM VISTA_REPORTING.DBO.PRIMARY_INST_TYPE_TABLE) PRIM ON PRIM.MULTI_FUND_ID = T.MULTI_FUND_ID     INNER JOIN #temp_max_touch_tr MTT ON MTT.MULTI_FUND_ID = T.MULTI_FUND_ID AND MTT.MAX_TOUCH = T.TOUCH_COUNT     WHERE PRIM.DEALING_DESK = 'CASH'             --FIND TR THRESHOLDS FOR CM    IF OBJECT_ID('tempdb..#CM_THRESHOLDS', 'U') IS NOT NULL DROP TABLE #CM_THRESHOLDS    select DISTINCT     TRADE_CURRENCY,      TRANSACTION_NUMBER,      UPLOADED_DATE_TIME,      CONFIRMED_DATETIME, --some of these are null what does this mean?     EXECUTED_DATETIME,     CASE WHEN cm.PRODUCT_TYPE = 'Cash Products' AND CAST(UPLOADED_DATE_TIME AS DATE) != CAST(CONFIRMED_DATETIME AS DATE) THEN DATEDIFF(SECOND, '07:00:00', CAST(UPLOADED_DATE_TIME AS TIME))       WHEN cm.PRODUCT_TYPE = 'Cash Products' AND CAST(UPLOADED_DATE_TIME AS DATE) = CAST(CONFIRMED_DATETIME AS DATE) THEN datediff(SECOND, CONFIRMED_DATETIME, UPLOADED_DATE_TIME)        WHEN cm.PRODUCT_TYPE = 'Repo / Rev Repo Products' AND CAST(UPLOADED_DATE_TIME AS DATE) != CAST(CONFIRMED_DATETIME AS DATE) THEN DATEDIFF(SECOND, '07:00:00', CAST(UPLOADED_DATE_TIME AS TIME))        WHEN cm.PRODUCT_TYPE = 'Repo / Rev Repo Products' AND CAST(UPLOADED_DATE_TIME AS DATE) = CAST(CONFIRMED_DATETIME AS DATE) THEN datediff(SECOND, CONFIRMED_DATETIME, UPLOADED_DATE_TIME)        END as MINSDIFF,     CASE WHEN cm.PRODUCT_TYPE = 'Cash Products' THEN DATEDIFF(DAY, UPLOADED_DATE_TIME, CONFIRMED_DATETIME)      WHEN cm.PRODUCT_TYPE = 'Repo / Rev Repo Products' THEN DATEDIFF(DAY, UPLOADED_DATE_TIME, CONFIRMED_DATETIME)     END AS DAYDIFF,     CASE WHEN cm.PRODUCT_TYPE = 'Cash Products' THEN thresh.cash_tr_threshold WHEN cm.PRODUCT_TYPE = 'Repo / Rev Repo Products' THEN thresh.rr_tr_threshold END AS THRESHOLD,     cm.PRODUCT_TYPE,     --TIMELY_RECORDING_EXCEPTION_REASON, -- WE NEED A DECODE FOR THIS?     --TIMELY_RECORDING_EXCEPTION_NARRATION,     TRANSACTION_STATUS_DECODE,     cm.TA_KNOCKBACK_EXCEPTION_REASON     INTO #CM_THRESHOLDS     from #cm_POP cm     left join  VISTA_STAGING.dbo.REF_CASH_timely_rec_THRESHOLD thresh       on (cm.PRODUCT_TYPE = 'Cash Products' and thresh.currency_code = cm.TRADE_CURRENCY AND CAST(UPLOADED_DATE_TIME AS DATE) BETWEEN CAST(thresh.DATE_FROM AS DATE) AND CAST(thresh.DATE_TO AS DATE))        or (thresh.currency_code = cm.TRADE_CURRENCY and cm.PRODUCT_TYPE = 'Repo / Rev Repo Products' AND CAST(UPLOADED_DATE_TIME AS DATE) BETWEEN CAST(thresh.DATE_FROM AS DATE) AND CAST(thresh.DATE_TO AS DATE))        -- FIND THE EXCEPTIONS FOR CM    IF OBJECT_ID('tempdb..#CM_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #CM_EXCEPTIONS    SELECT DISTINCT     TRANSACTION_NUMBER,     NULL AS MULTI_FUND_ID,     MINSDIFF,     DAYDIFF,     CASE WHEN ISNULL(TRANSACTION_STATUS_DECODE, '') not IN ( 'DELETED', 'Cancelled') and  MINSDIFF > THRESHOLD and NULLIF(t.TA_KNOCKBACK_EXCEPTION_REASON,'') IS NULL THEN 1     WHEN ISNULL(TRANSACTION_STATUS_DECODE, '') not in ('DELETED', 'Cancelled') and MINSDIFF IS NULL and NULLIF(t.TA_KNOCKBACK_EXCEPTION_REASON,'') IS NULL THEN 1      ELSE 0 END AS VG_10,     --TIMELY_RECORDING_EXCEPTION_REASON,     --TIMELY_RECORDING_EXCEPTION_NARRATION,     PRODUCT_TYPE,     'CM' as SOURCE    INTO #CM_EXCEPTIONS    FROM #CM_THRESHOLDS t            --FIND TR THRESHOLDS FOR ALADDIN    IF OBJECT_ID('tempdb..#ALADDIN_THRESHOLDS', 'U') IS NOT NULL DROP TABLE #ALADDIN_THRESHOLDS     SELECT DISTINCT     SM_CURRENCY,     MULTI_FUND_ID,     TRD_AUTH_TIME,     EXECUTION_TIME,     CASE WHEN CAST(TRD_AUTH_TIME AS DATE) != CAST(EXECUTION_TIME AS DATE) THEN DATEDIFF(SECOND, '07:00:00', CAST(EXECUTION_TIME AS TIME))       ELSE datediff(SECOND, TRD_AUTH_TIME, EXECUTION_TIME) END as MINSDIFF,     DATEDIFF(DAY, TRD_AUTH_TIME, EXECUTION_TIME) AS DAYDIFF,     thresh.CASH_TR_THRESHOLD AS THRESHOLD,     TRD_STATUS     --NULL AS TIMELY_RECORDING_EXCEPTION_REASON, --IS THERE A SIMILAR ALADDIN FIELD TO LOOK AT HERE?     --NULL AS TIMELY_RECORDING_EXCEPTION_NARRATION     INTO #ALADDIN_THRESHOLDS     FROM #ALADDIN_POP AP     left join VISTA_STAGING.dbo.REF_CASH_timely_rec_THRESHOLD thresh       on thresh.currency_code = AP.SM_CURRENCY AND CAST(PULL_DATE AS DATE) BETWEEN CAST(thresh.DATE_FROM AS DATE) AND CAST(thresh.DATE_TO AS DATE)        --FIND THE ALADDIN EXCEPTIONS      IF OBJECT_ID('tempdb..#ALADDIN_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #ALADDIN_EXCEPTIONS    SELECT DISTINCT     NULL AS TRANSACTION_NUMBER,     MULTI_FUND_ID,     MINSDIFF,     DAYDIFF,     CASE WHEN isnull(TRD_STATUS, '') != 'C' and MINSDIFF > THRESHOLD THEN 1 WHEN MINSDIFF IS NULL THEN 1 ELSE 0 END AS VG_10,     --TIMELY_RECORDING_EXCEPTION_REASON,     --TIMELY_RECORDING_EXCEPTION_NARRATION,     'Cash Products' as PRODUCT_TYPE,     'AL' as SOURCE    INTO #ALADDIN_EXCEPTIONS    FROM #ALADDIN_THRESHOLDS                    --TOTAL EXCEPTIONS    IF OBJECT_ID('tempdb..#COMBINED_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #COMBINED_EXCEPTIONS    SELECT DISTINCT      CM.* ,     case when cm.VG_10 = 1 then GETDATE() ELSE NULL END AS VG_10_CREATETIME     INTO #COMBINED_EXCEPTIONS     FROM #CM_EXCEPTIONS CM    UNION    SELECT DISTINCT     AL.*,     CASE WHEN AL.VG_10 = 1 THEN GETDATE() ELSE NULL END AS VG_10_CREATETIME     FROM #ALADDIN_EXCEPTIONS AL            --Add records into FINAL_STATUS_UPDATE_TABLE    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    SELECT DISTINCT     CASE WHEN SOURCE = 'AL' THEN CONCAT(MULTI_FUND_ID ,'_10', '_AL')     WHEN SOURCE = 'CM' THEN CONCAT(TRANSACTION_NUMBER, '_10', '_CM') END AS ID,     '1A2' AS STATUS,     NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table    FROM #COMBINED_EXCEPTIONS    WHERE VG_10 = 1        MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'CASH',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'CASH');        --Add records into AUDIT_TABLE_CASH    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    SELECT DISTINCT     CASE WHEN CE.SOURCE = 'AL' THEN CE.MULTI_FUND_ID      WHEN CE.SOURCE = 'CM' THEN CE.TRANSACTION_NUMBER       END AS TRANSACTION_NUMBER,     CASE WHEN CE.SOURCE = 'AL' THEN T.ORD_NUM       ELSE NULL       END AS TRD_ORD,       CASE WHEN CE.SOURCE = 'CM' THEN ct.ORDER_ID         WHEN CE.SOURCE = 'AL' THEN PM.ORD_NUM         END AS ORDER_ID,     'Timely Recording' AS Exception_Type,     CASE WHEN CE.SOURCE = 'AL' THEN CONCAT(CE.MULTI_FUND_ID ,'_10', '_AL')      WHEN CE.SOURCE = 'CM' THEN CONCAT(CE.TRANSACTION_NUMBER, '_10', '_CM')       END AS ID,     NULL AS REASON,     NULL AS COMMENT,     'With Reviewer' AS Status,     NULL AS ClientExecID,     'Cash' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) AS DEALER,     '1A2' AS STATUS_ID,     CASE WHEN CE.SOURCE = 'CM' THEN co.INSTRUCTION_RECEIVED_DATE       WHEN CE.SOURCE = 'AL' THEN PM.AUTH_TIME       END AS ORD_AUTH,     CASE WHEN CE.SOURCE = 'CM' THEN ct.[EXECUTED_DATETIME]       WHEN CE.SOURCE = 'AL' THEN T.EXECUTION_TIME       END AS TRADE_EXEC    INTO #temp_audit    FROM #COMBINED_EXCEPTIONS CE    left join (SELECT DISTINCT TRANSACTION_NUMBER, ORDER_ID, EXECUTED_DATETIME, DEALER_NAME_DECODE, PRODUCT_TYPE, DEALER_NAME, PULL_DATE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct on CE.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]    left join (SELECT DISTINCT ORDER_ID, MIN(INSTRUCTION_RECEIVED_DATE) as INSTRUCTION_RECEIVED_DATE, ACCEPTED_BY, INSTRUCTED_BY, PULL_DATE FROM VISTA_REPORTING.dbo.CASH_ORDERS GROUP BY ORDER_ID, ACCEPTED_BY, INSTRUCTED_BY, PULL_DATE) co    on ct.[ORDER_ID] = co.[ORDER_ID]    LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER, PULL_DATE FROM VISTA_REPORTING.DBO.TRADES WHERE FinalFlag = 1) T ON CE.SOURCE = 'AL' AND CE.MULTI_FUND_ID = T.MULTI_FUND_ID    LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.TRD_ORD = T.ORD_NUM    LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME, TRADER, PULL_DATE FROM VISTA_REPORTING.DBO.PM_ORDERS GROUP BY ord_num, TRADER, PULL_DATE) PM ON PM.ORD_NUM = OC.PM_ORD    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd    on (tdd.[DEALING_DESK] = 'CASH' and tdd.[MG_USER_ID] = ct.[DEALER_NAME] and ce.[SOURCE] = 'CM' AND CAST(ct.PULL_DATE AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE))     or (tdd.[DEALING_DESK] = 'CASH' and tdd.[INITIALS] = t.[TRD_TRADER] and ce.[SOURCE] = 'AL' AND CAST(t.PULL_DATE AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE))     LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD2 ON ((TDD2.MG_USER_ID  = COALESCE(CO.ACCEPTED_BY, CO.INSTRUCTED_BY) AND ce.SOURCE = 'CM') OR (TDD2.INITIALS = PM.TRADER AND ce.SOURCE = 'AL')) AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE) AS DATE) BETWEEN CAST(TDD2.DATE_FROM AS DATE) AND CAST(TDD2.DATE_TO AS DATE)    LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON ((DD.REPORT_NAME = 'Timely Recording MM' and (ct.PRODUCT_TYPE = 'Cash Products' or ce.SOURCE = 'al'))                   or (DD.REPORT_NAME = 'Timely Recording RR' and (ct.PRODUCT_TYPE = 'Repo / Rev Repo Products')))                      AND CAST(COALESCE(ct.PULL_DATE, t.PULL_DATE,co.[PULL_DATE],pm.[PULL_DATE]) AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)        WHERE CE.VG_10 = 1         MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_CASH AS T    USING #temp_audit AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);            -- ==============================================================================    /* Update Exceptions Table */    -- ==============================================================================        IF OBJECT_ID('tempdb..#MM_FINAL', 'U') IS NOT NULL DROP TABLE #MM_FINAL     SELECT DISTINCT      CASE WHEN SOURCE = 'AL' THEN  MULTI_FUND_ID WHEN SOURCE = 'CM' THEN TRANSACTION_NUMBER END AS TRANSACTION_NUMBER,     MINSDIFF,     DAYDIFF,     VG_10,     SOURCE,     VG_10_CREATETIME     INTO #MM_FINAL     FROM #COMBINED_EXCEPTIONS     WHERE PRODUCT_TYPE = 'Cash Products'        IF OBJECT_ID('tempdb..#RR_FINAL', 'U') IS NOT NULL DROP TABLE #RR_FINAL     SELECT DISTINCT      CASE WHEN SOURCE = 'AL' THEN MULTI_FUND_ID WHEN SOURCE = 'CM' THEN TRANSACTION_NUMBER END AS TRANSACTION_NUMBER,     MINSDIFF,     DAYDIFF,     VG_10,     SOURCE,     VG_10_CREATETIME     INTO #RR_FINAL     FROM #COMBINED_EXCEPTIONS     WHERE PRODUCT_TYPE = 'Repo / Rev Repo Products'        --MAKE THE STAGING EXCEPTIONS TABLES        IF OBJECT_ID('VISTA_STAGING.DBO.VG_10_TIMELY_RECORDING_CASH_MM_TABLE' , 'U') IS NULL     SELECT *      INTO VISTA_STAGING.DBO.VG_10_TIMELY_RECORDING_CASH_MM_TABLE     FROM #MM_FINAL    ELSE     IF OBJECT_ID('tempdb..#TEMP_MM_TABLE', 'U') IS NOT NULL DROP TABLE #TEMP_MM_TABLE     SELECT *      INTO #TEMP_MM_TABLE     FROM #MM_FINAL         MERGE VISTA_STAGING.DBO.VG_10_TIMELY_RECORDING_CASH_MM_TABLE AS T      USING #TEMP_MM_TABLE AS S     ON (T.TRANSACTION_NUMBER = S.TRANSACTION_NUMBER and t.source = s.source)    WHEN MATCHED     THEN UPDATE     SET     [TRANSACTION_NUMBER] = CASE WHEN S.VG_10 > T.VG_10 THEN S.[TRANSACTION_NUMBER] ELSE T.[TRANSACTION_NUMBER] END,     MINSDIFF = CASE WHEN S.VG_10 > T.VG_10 THEN S.MINSDIFF ELSE T.MINSDIFF END,     DAYDIFF = CASE WHEN S.VG_10 > T.VG_10 THEN S.DAYDIFF ELSE T.DAYDIFF END,     SOURCE = CASE WHEN S.VG_10 > T.VG_10 THEN S.SOURCE ELSE T.SOURCE END,     [VG_10] = CASE WHEN S.VG_10 > T.VG_10 THEN S.[VG_10] ELSE T.[VG_10] END,     [VG_10_CREATETIME] = CASE WHEN S.VG_10 > T.VG_10 THEN S.[VG_10_CREATETIME] ELSE T.[VG_10_CREATETIME] END        WHEN NOT MATCHED     THEN INSERT     (TRANSACTION_NUMBER,     MINSDIFF,     DAYDIFF,     SOURCE,     VG_10,     VG_10_CREATETIME)         VALUES     (S.TRANSACTION_NUMBER,     S.MINSDIFF,     S.DAYDIFF,     S.SOURCE,     S.VG_10,     S.VG_10_CREATETIME) ;        IF OBJECT_ID('VISTA_STAGING.DBO.VG_10_TIMELY_RECORDING_CASH_RR_TABLE' , 'U') IS NULL     SELECT *      INTO VISTA_STAGING.DBO.VG_10_TIMELY_RECORDING_CASH_RR_TABLE     FROM #RR_FINAL    ELSE     IF OBJECT_ID('tempdb..#TEMP_RR_TABLE', 'U') IS NOT NULL DROP TABLE #TEMP_RR_TABLE     SELECT *      INTO #TEMP_RR_TABLE     FROM #RR_FINAL         MERGE VISTA_STAGING.DBO.VG_10_TIMELY_RECORDING_CASH_RR_TABLE AS T      USING #TEMP_RR_TABLE AS S     ON (T.TRANSACTION_NUMBER = S.TRANSACTION_NUMBER and t.source = s.source)    WHEN MATCHED     THEN UPDATE     SET     [TRANSACTION_NUMBER] = CASE WHEN S.VG_10 > T.VG_10 THEN S.[TRANSACTION_NUMBER] ELSE T.[TRANSACTION_NUMBER] END,     MINSDIFF = CASE WHEN S.VG_10 > T.VG_10 THEN S.MINSDIFF ELSE T.MINSDIFF END,     DAYDIFF = CASE WHEN S.VG_10 > T.VG_10 THEN S.DAYDIFF ELSE T.DAYDIFF END,     SOURCE = CASE WHEN S.VG_10 > T.VG_10 THEN S.SOURCE ELSE T.SOURCE END,     [VG_10] = CASE WHEN S.VG_10 > T.VG_10 THEN S.[VG_10] ELSE T.[VG_10] END,     [VG_10_CREATETIME] = CASE WHEN S.VG_10 > T.VG_10 THEN S.[VG_10_CREATETIME] ELSE T.[VG_10_CREATETIME] END        WHEN NOT MATCHED     THEN INSERT     (TRANSACTION_NUMBER,     MINSDIFF,     DAYDIFF,     SOURCE,     VG_10,     VG_10_CREATETIME)         VALUES     (S.TRANSACTION_NUMBER,     S.MINSDIFF,     S.DAYDIFF,     S.SOURCE,     S.VG_10,     S.VG_10_CREATETIME) ;         IF OBJECT_ID('tempdb..#CM_POP', 'U') IS NOT NULL DROP TABLE #CM_POP     IF OBJECT_ID('tempdb..#ALADDIN_POP', 'U') IS NOT NULL DROP TABLE #ALADDIN_POP     IF OBJECT_ID('tempdb..#CM_THRESHOLDS', 'U') IS NOT NULL DROP TABLE #CM_THRESHOLDS     IF OBJECT_ID('tempdb..#CM_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #CM_EXCEPTIONS     IF OBJECT_ID('tempdb..#ALADDIN_THRESHOLDS', 'U') IS NOT NULL DROP TABLE #ALADDIN_THRESHOLDS     IF OBJECT_ID('tempdb..#ALADDIN_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #ALADDIN_EXCEPTIONS     IF OBJECT_ID('tempdb..#COMBINED_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #COMBINED_EXCEPTIONS     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     IF OBJECT_ID('tempdb..#MM_FINAL', 'U') IS NOT NULL DROP TABLE #MM_FINAL     IF OBJECT_ID('tempdb..#RR_FINAL', 'U') IS NOT NULL DROP TABLE #RR_FINAL     IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades     IF OBJECT_ID('tempdb..#temp_max_touch_tr', 'U') IS NOT NULL DROP TABLE #temp_max_touch_tr            END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_10_TIMELY_RECORDING_DMG  CreateDate: 2025-06-26 18:08:35.877  ModifyDate: 2025-06-26 18:08:35.877  --- DEFINITION START ---  -- =============================================    -- Author: ER    -- Create date;    -- Description:     -- =============================================        -- ***************VERSION CONTROL***************    -- 2019-04-11 - DDC: Inclusion of new HOLIDAY/WEEKEND offset calculation    -- 2019-05-16 - MS: Added in PM Order Number in    --     Audit table.    -- 2019-05-29 - MS: Commented out filter on     --     TRD_STATUS in final exception    --     table.    -- *********************************************            CREATE PROCEDURE [dbo].[VG_10_TIMELY_RECORDING_DMG]     -- Add the parameters for the stored procedure here     -- @Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         --DECLARE @DATE_FILTER AS DATE --Declare date filter to only select data from current pull date     --SET @DATE_FILTER = CONVERT(DATE, GETDATE())     -- Get associated information for Timely Recording exception     IF OBJECT_ID('tempdb..#rebased_time', 'U') IS NOT NULL DROP TABLE #rebased_time     select distinct      pm.ORD_NUM,      --t.ORD_NUM      tr.MULTI_FUND_ID      ,tr.TRD_CURRENCY      ,tr.EXECUTION_TIME      ,tr.TRD_AUTH_TIME      ,tr.TRD_TRADE_DATE      ,tr.TRD_STATUS      --,p.PRIMARY_MARKET      ,p.INST_TYPE      ,p.DEBT_DERIV      ,case        when (pl.VENUE ='MANUAL PL') then pl.VENUE       when (pl.VENUE is NULL) then 'MANUAL'        else 'ELECTRONIC' -- Electronic/Non-Electronic      end as VENUE      ,p.COUNTRY      ,p.DEALING_DESK      ,tr.trd_trader      ,tdd.INITIALS     into #rebased_time     from     -- Fields such as TRD_TRADE_DATE can change over time (and have been observed to do so)     -- We therefore take values from TRADES at most recent point in time.       (       SELECT DISTINCT         tr.ORD_NUM        ,tr.MULTI_FUND_ID        ,tr.TRD_CURRENCY        ,tr.EXECUTION_TIME        ,tr.TRD_AUTH_TIME        ,tr.TRD_TRADE_DATE        ,tr.PULL_DATE        ,tr.TRD_TRADER        , tr.TRD_STATUS       FROM VISTA_REPORTING.dbo.TRADES as tr        INNER JOIN (         SELECT MULTI_FUND_ID, MAX(TOUCH_COUNT) AS MAX_TOUCH         FROM VISTA_REPORTING.dbo.TRADES         GROUP BY MULTI_FUND_ID       ) as t2 on (tr.MULTI_FUND_ID=t2.MULTI_FUND_ID) and (tr.TOUCH_COUNT=t2.MAX_TOUCH)      ) as tr     --left join (select distinct ORD_NUM, DEALING_DESK, CUSIP FROM VISTA_REPORTING.dbo.TRD_ORDERS) as t on tr.ORD_NUM=t.ORD_NUM     --left join VISTA_REPORTING.dbo.INSTRUMENTS i on i.CUSIP=t.CUSIP     left join (select distinct inst_type, multi_fund_id, COUNTRY, DEBT_DERIV, DEALING_DESK from  VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) p on p.MULTI_FUND_ID=tr.MULTI_FUND_ID     left join (select distinct MULTI_FUND_ID, VENUE from VISTA_REPORTING.dbo.PLACEMENTS) pl on pl.MULTI_FUND_ID=tr.MULTI_FUND_ID     left join VISTA_STAGING.dbo.GMT_OFFSET g on g.COUNTRY=p.COUNTRY and g.DATE=CONVERT(date,tr.TRD_AUTH_TIME) -- Get GMT offset by country     --LEFT JOIN (SELECT DISTINCT ORD_NUM, PULL_DATE, TRD_TRADER FROM VISTA_REPORTING.DBO.TRADES) T ON T.ORD_NUM = tr.ORD_NUM     LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.TRD_ORD = tr.ORD_NUM     LEFT JOIN (SELECT distinct ORD_NUM FROM VISTA_REPORTING.DBO.PM_ORDERS) PM ON OC.PM_ORD = PM.ORD_NUM     LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD ON Tr.TRD_TRADER = TDD.INITIALS AND  CAST(Tr.PULL_DATE AS DATE) between CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE) AND TDD.DEALING_DESK = 'DMG'     where p.DEALING_DESK='DMG'              if OBJECT_ID('tempdb..#holiday_list', 'U') IS NOT NULL DROP TABLE #holiday_list     SELECT DISTINCT CLOSURE_DATES      INTO #holiday_list      FROM VISTA_STAGING.dbo.HOLIDAYS WHERE COUNTRY_CODE='GB'          IF OBJECT_ID('tempdb..#holiday_offset', 'U') IS NOT NULL DROP TABLE #holiday_offset     SELECT --create a table by MULTI_FUND_ID to account for weekend and holiday offsets to rebased datetimes     t.MULTI_FUND_ID,     MIN(t.EXECUTION_TIME) AS MIN_EXEC_TIME,     DATEADD(day,1,MIN(t.EXECUTION_TIME)) REBASED_AUTH_TIME,     CASE       WHEN  DATENAME(dw, DATEADD(day,1,MIN(t.EXECUTION_TIME))) = 'Friday' AND         (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,1,MIN(t.EXECUTION_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1          THEN           CASE         WHEN DATENAME(dw, DATEADD(day,1,MIN(t.EXECUTION_TIME))) = 'Friday' THEN 2 --if the EXECUTION_TIME is on a Friday a 2 day offset may be necessary         WHEN DATENAME(dw, DATEADD(day,1,MIN(t.EXECUTION_TIME))) = 'Saturday' THEN 1         WHEN DATENAME(dw, DATEADD(day,1,MIN(t.EXECUTION_TIME))) = 'Sunday' THEN 0          END       ELSE       CASE        WHEN DATENAME(dw, MIN(t.EXECUTION_TIME)) = 'Friday' THEN 2 --if the EXECUTION_TIME is on a Friday a 2 day offset may be necessary        WHEN DATENAME(dw, MIN(t.EXECUTION_TIME)) = 'Saturday' THEN 1        WHEN DATENAME(dw, MIN(t.EXECUTION_TIME)) = 'Sunday' THEN 0        ELSE 0       END      END AS WEEKEND_OFFSET,     CASE       WHEN DATENAME(dw, DATEADD(day,1,MIN(t.EXECUTION_TIME))) = 'Friday'        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,1,MIN(t.EXECUTION_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,4,MIN(t.EXECUTION_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1         THEN 2      WHEN DATENAME(dw, MIN(t.EXECUTION_TIME)) = 'Friday'        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,3,MIN(t.EXECUTION_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1         THEN 1      WHEN (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,1,MIN(t.EXECUTION_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,2,MIN(t.EXECUTION_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1         THEN 2      ELSE (SELECT COUNT(DISTINCT CLOSURE_DATES)          FROM #holiday_list          WHERE CONVERT(DATE, CLOSURE_DATES, 103)          BETWEEN CONVERT(DATE, MIN(t.EXECUTION_TIME), 103)          AND CONVERT(DATE, DATEADD(day,1,MIN(t.EXECUTION_TIME)), 103))      END AS HOLIDAY_OFFSET     INTO #holiday_offset     FROM VISTA_REPORTING.dbo.TRADES t     GROUP BY     t.MULTI_FUND_ID              -- Depending on instrument type/Venue, flag exception if the difference between EXECUTION_TIME and AUTH_TIME     -- is greater than the instrument requirement.     IF OBJECT_ID('tempdb..#timely_rec_table', 'U') IS NOT NULL DROP TABLE #timely_rec_table     select distinct     r.[ORD_NUM],     r.MULTI_FUND_ID     ,r.EXECUTION_TIME     --,r.PRIMARY_MARKET     ,r.DEALING_DESK     ,r.DEBT_DERIV     ,min(r.TRD_AUTH_TIME) AS MIN_POST_DATETIME     ,DATEDIFF(minute, r.EXECUTION_TIME, min(r.TRD_AUTH_TIME)) as DATE_DIFF     ,r.INST_TYPE         ,case      when DATEDIFF(day, r.TRD_TRADE_DATE, CONVERT(DATE, MIN(r.TRD_AUTH_TIME))) = 0 then 'Intra day'      else 'Across days'     end as TRADE_TYPE     ,case      when DATEDIFF(day, r.TRD_TRADE_DATE, CONVERT(DATE, MIN(r.TRD_AUTH_TIME))) = 0        then CONVERT(VARCHAR(5),         DATEDIFF(minute, r.EXECUTION_TIME, min(r.TRD_AUTH_TIME))) + ' mins' -- If it is an Intra day exception then display the time difference in minutes between execution and recording      else CONVERT(VARCHAR(50),       DATEDIFF(day, r.TRD_TRADE_DATE, CONVERT(DATE, MIN(r.TRD_AUTH_TIME)))) + ' days' -- If it is an Inter day exception, display the number of days between execution and recording     end as Timespan      ,case      WHEN R.TRD_STATUS = 'C' THEN 0      WHEN r.TRD_TRADE_DATE < CONVERT(DATE,min(r.TRD_AUTH_TIME)) -- Whenever the trade date is before the auth date       THEN 1      WHEN DATEDIFF(minute, r.EXECUTION_TIME, min(r.TRD_AUTH_TIME)) > TRRT.MAX_THRESHOLD       THEN 1      ELSE 0     end as VG_10     into #timely_rec_table     from #rebased_time r     left join #holiday_offset h on h.MULTI_FUND_ID=r.MULTI_FUND_ID     LEFT JOIN  VISTA_STAGING.DBO.VG_10_TIMELY_RECORDING_REFERENCE_TABLE TRRT ON TRRT.DEALING_DESK = r.DEALING_DESK AND r.EXECUTION_TIME BETWEEN TRRT.DATE_FROM AND TRRT.DATE_TO     group by         r.MULTI_FUND_ID,      r.ORD_NUM,      --r.PRIMARY_MARKET,      r.INST_TYPE,      r.VENUE,      r.EXECUTION_TIME,      r.TRD_TRADE_DATE,      r.DEALING_DESK,      --r.TRD_AUTH_TIME,      r.TRD_CURRENCY,      r.DEBT_DERIV,      h.WEEKEND_OFFSET,      h.HOLIDAY_OFFSET,      trrt.MAX_THRESHOLD,      r.TRD_STATUS           -- Use #timely_recording to populate FINAL_STATUS_UPDATE_TABLE     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     select distinct      CONCAT(MULTI_FUND_ID,'_10') AS ID,      '1A1' AS STATUS,      NULL AS FINAL_UPDATED_TIME     into #temp_status_table     from #timely_rec_table     where vg_10 = 1          MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET       T.ID=T.ID,       T.STATUS=T.STATUS,       T.DEALING_DESK = 'DMG',       T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'DMG');         --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      ex.MULTI_FUND_ID AS MULTI_FUND_ID,      t.ORD_NUM AS TRD_ORD,      ex.ORD_NUM AS PM_ORD,      'Timely Recording' AS Exception_Type,      CONCAT(ex.MULTI_FUND_ID,'_10') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'For Review' AS Status,      NULL AS ClientExecID,      'DMG' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      NULL AS DEALER,      '1A1' AS STATUS_ID,      trd_o.AUTH_TIME AS ORD_AUTH,      t.EXECUTION_TIME AS TRADE_EXEC     INTO #temp_audit     FROM #timely_rec_table ex     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t     ON ex.MULTI_FUND_ID = t.MULTI_FUND_ID     LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o     ON t.ORD_NUM = trd_o.ORD_NUM     where VG_10 = 1          MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_DMG AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);             IF OBJECT_ID('VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_DMG_TABLE', 'U') IS NULL          select distinct     --t.ORD_NUM,     T.MULTI_FUND_ID,     coalesce(n.DEALING_DESK, TRD.DEALING_DESK) AS DEALING_DESK,     n.TRADE_TYPE,     MAX(n.Timespan) AS Timespan,     MAX(coalesce(n.VG_10, 0)) as VG_10,     case      when MAX(VG_10) = 1 then GETDATE() else NULL     end as TREC_CREATETIME     into VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_DMG_TABLE     from VISTA_REPORTING.dbo.TRADES T     left join (select distinct DEALING_DESK, ORD_NUM from VISTA_REPORTING.dbo.TRD_ORDERS) TRD on TRD.ORD_NUM=T.ORD_NUM     left join #timely_rec_table n on T.MULTI_FUND_ID=n.MULTI_FUND_ID -- CHANGED THIS FROM TRD TO T FOR THE JOIN TO INCLUDE THOSE WHICH ARE NOT IN TRD?     LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.TRD_ORD = T.ORD_NUM     LEFT JOIN (SELECT ORD_NUM FROM VISTA_REPORTING.DBO.PM_ORDERS) PM ON OC.PM_ORD = PM.ORD_NUM     LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD ON T.TRD_TRADER = TDD.INITIALS AND  CAST(T.PULL_DATE AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE) AND TDD.DEALING_DESK = 'DMG'     where       --isnull(T.trd_status,0) != 'C' and       coalesce(n.DEALING_DESK, TRD.DEALING_DESK)='DMG' --OR (PM.ORD_NUM IS NULL AND  TDD.INITIALS IS NOT NULL ))     and T.MULTI_FUND_ID IS NOT NULL     GROUP BY T.MULTI_FUND_ID, coalesce(n.DEALING_DESK, TRD.DEALING_DESK), n.TRADE_TYPE     ELSE         IF OBJECT_ID('tempdb..#temp_tr_table', 'U') IS NOT NULL DROP TABLE #temp_tr_table         SELECT DISTINCT     --t.ORD_NUM,     tr.MULTI_FUND_ID,     coalesce(n.DEALING_DESK, T.DEALING_DESK) AS DEALING_DESK,     n.TRADE_TYPE,     MAX(n.Timespan) AS Timespan,     MAX(coalesce(n.VG_10, 0)) as VG_10,     case      when MAX(VG_10) = 1 then GETDATE() else NULL     end as TREC_CREATETIME     into #temp_tr_table     from VISTA_REPORTING.dbo.TRADES tr     left join (select distinct DEALING_DESK, ORD_NUM from VISTA_REPORTING.dbo.TRD_ORDERS) t on tr.ORD_NUM=t.ORD_NUM     left join #timely_rec_table n on tr.MULTI_FUND_ID=n.MULTI_FUND_ID     LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.TRD_ORD = Tr.ORD_NUM     LEFT JOIN (SELECT ORD_NUM FROM VISTA_REPORTING.DBO.PM_ORDERS) PM ON OC.PM_ORD = PM.ORD_NUM     LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD ON Tr.TRD_TRADER = TDD.INITIALS AND  CAST(Tr.PULL_DATE AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE) AND TDD.DEALING_DESK = 'DMG'     where       --isnull(tr.TRD_STATUS,0) != 'C' and       coalesce(n.DEALING_DESK, T.DEALING_DESK)='DMG' -- OR (PM.ORD_NUM IS NULL AND  TDD.INITIALS IS NOT NULL ))     and tr.MULTI_FUND_ID IS NOT NULL     GROUP BY tr.MULTI_FUND_ID, coalesce(n.DEALING_DESK, T.DEALING_DESK), n.TRADE_TYPE         MERGE VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_DMG_TABLE AS T     USING #temp_tr_table AS S     ON T.MULTI_FUND_ID=S.MULTI_FUND_ID      WHEN MATCHED      THEN       UPDATE SET         T.DEALING_DESK = S.DEALING_DESK,       T.TRADE_TYPE = CASE WHEN S.VG_10 > T.VG_10 THEN S.TRADE_TYPE ELSE T.TRADE_TYPE END,       T.Timespan = CASE WHEN S.VG_10 > T.VG_10 THEN S.Timespan ELSE S.Timespan END,       T.VG_10 = CASE WHEN S.VG_10 > T.VG_10 THEN S.VG_10 ELSE T.VG_10 END,       T.TREC_CREATETIME = CASE WHEN S.VG_10 > T.VG_10 THEN S.TREC_CREATETIME ELSE T.TREC_CREATETIME END     WHEN NOT MATCHED       THEN INSERT (MULTI_FUND_ID, DEALING_DESK, TRADE_TYPE, VG_10, TREC_CREATETIME)        VALUES (S.MULTI_FUND_ID, S.DEALING_DESK, S.TRADE_TYPE, S.VG_10, S.TREC_CREATETIME);         IF OBJECT_ID('tempdb..#rebased_time', 'U') IS NOT NULL DROP TABLE #rebased_time     IF OBJECT_ID('tempdb..#holiday_offset', 'U') IS NOT NULL DROP TABLE #holiday_offset     IF OBJECT_ID('tempdb..#timely_rec_table', 'U') IS NOT NULL DROP TABLE #timely_rec_table     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     IF OBJECT_ID('tempdb..#temp_tr_table', 'U') IS NOT NULL DROP TABLE #temp_tr_table        END            --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_10_TIMELY_RECORDING_EQ  CreateDate: 2025-06-26 18:08:24.090  ModifyDate: 2025-06-26 18:08:24.090  --- DEFINITION START ---  -- =============================================    -- Author:  <da Costa, David>    -- Create date: <20/10/2017>    -- Description:     -- <For EQ Subtract Execution_Time from Post_Time and    -- if result < 1 hour: Timely Execution = True     -- if Post_Time is > 16:30:00 then reset Post_Time    -- to 07:00:00 on the following date and apply the     -- 1 hour rule again.    -- =============================================        -- ***************VERSION CONTROL***************    -- 29/11/2017 - DDC: #holiday_offset table changed    -- so that it references VISTA_STAGING.dbo.HOLIDAYS    -- and not the VISTA_TEMP_2.dbo.HOLIDAYS    --    -- 11/12/2017 - DDC: Changes made to ensure that script     -- only ever updates existing records always ensuring     -- the highest level exception is reported and     -- inserts new ones if no exception has been raised.        -- 04/01/2018 - DDC: Amendment made to only run  exception    -- calculations on the data for the day the exception is     -- being pulled        -- 02/02/2018 - WH: Amendment made to logic to calculate the    -- holiday offest number in the #holiday_offset table. A distinct    -- count of the CLOSURE_DATES is required to avoid double counting     -- when there are multiple records for the same MULTI_FUND_ID in     -- the TRADES table that span a holiday.        --06/08/2018 - KR: if EXECUTION_TIME is later than 16:30 then rebase the cut off datetime to     --09:00 the next working day ONLY for PM Orders that have been authorised after the 17/08/2018        -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.        -- 2019-04-11 - DDC: Inclusion of new HOLIDAY/WEEKEND offset calculation    -- *********************************************            CREATE PROCEDURE  [dbo].[VG_10_TIMELY_RECORDING_EQ]     -- Add the parameters for the stored procedure here     -- @Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         --DECLARE @DATE_FILTER AS DATE --Declare date filter to only select data from current pull date     --SET @DATE_FILTER = CONVERT(DATE, GETDATE())            --Insert statements for procedure here     IF OBJECT_ID('tempdb..#holiday_list', 'U') IS NOT NULL DROP TABLE #holiday_list     SELECT DISTINCT CLOSURE_DATES      INTO #holiday_list      FROM VISTA_STAGING.dbo.HOLIDAYS WHERE COUNTRY_CODE='GB'          IF OBJECT_ID('tempdb..#holiday_offset', 'U') IS NOT NULL DROP TABLE #holiday_offset     SELECT --create a table by MULTI_FUND_ID to account for weekend and holiday offsets to rebased datetimes     t.MULTI_FUND_ID,     t.EXECUTION_TIME,     t.TRD_AUTH_TIME,     DATEADD(day,1,MIN(t.EXECUTION_TIME)) REBASED_AUTH_TIME,     CASE       WHEN  DATENAME(dw, DATEADD(day,1,MIN(t.EXECUTION_TIME))) = 'Friday' AND         (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,1,MIN(t.EXECUTION_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1          THEN           CASE         WHEN DATENAME(dw, DATEADD(day,1,MIN(t.EXECUTION_TIME))) = 'Friday' THEN 2 --if the EXECUTION_TIME is on a Friday a 2 day offset may be necessary         WHEN DATENAME(dw, DATEADD(day,1,MIN(t.EXECUTION_TIME))) = 'Saturday' THEN 1         WHEN DATENAME(dw, DATEADD(day,1,MIN(t.EXECUTION_TIME))) = 'Sunday' THEN 0          END       ELSE       CASE        WHEN DATENAME(dw, MIN(t.EXECUTION_TIME)) = 'Friday' THEN 2 --if the EXECUTION_TIME is on a Friday a 2 day offset may be necessary        WHEN DATENAME(dw, MIN(t.EXECUTION_TIME)) = 'Saturday' THEN 1        WHEN DATENAME(dw, MIN(t.EXECUTION_TIME)) = 'Sunday' THEN 0        ELSE 0       END      END AS WEEKEND_OFFSET,     CASE       WHEN DATENAME(dw, DATEADD(day,1,MIN(t.EXECUTION_TIME))) = 'Friday'        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,1,MIN(t.EXECUTION_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,4,MIN(t.EXECUTION_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1         THEN 2      WHEN DATENAME(dw, MIN(t.EXECUTION_TIME)) = 'Friday'        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,3,MIN(t.EXECUTION_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1         THEN 1      WHEN (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,1,MIN(t.EXECUTION_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,2,MIN(t.EXECUTION_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1         THEN 2      ELSE (SELECT COUNT(DISTINCT CLOSURE_DATES)          FROM #holiday_list          WHERE CONVERT(DATE, CLOSURE_DATES, 103)          BETWEEN CONVERT(DATE, MIN(t.EXECUTION_TIME), 103)          AND CONVERT(DATE, DATEADD(day,1,MIN(t.EXECUTION_TIME)), 103))      END AS HOLIDAY_OFFSET     INTO #holiday_offset     FROM VISTA_REPORTING.dbo.TRADES t     GROUP BY      t.MULTI_FUND_ID,      t.EXECUTION_TIME,      t.TRD_AUTH_TIME             IF OBJECT_ID('tempdb..#max_auth_face', 'U') IS NOT NULL DROP TABLE #max_auth_face        SELECT DISTINCT            o.ORD_NUM,            ABS(o2.FACE) AS FIRST_FILL_FACE,            MAX(ABS(o.FILL_AMT)) AS MAX_FILL_AMT,            MAX(t.EXECUTION_TIME) AS MAX_EXECUTION            --o.OWNER_TYPE,            --o.STATUS        into #max_auth_face        FROM VISTA_REPORTING.dbo.TRD_ORDERS o        INNER JOIN (select distinct                        ORD_NUM,                        MAX(TOUCH_COUNT) AS MAX_TOUCH                    from VISTA_REPORTING.dbo.TRD_ORDERS                    where DEALING_DESK='Equity'                    group by ORD_NUM) ma ON ma.MAX_TOUCH=o.TOUCH_COUNT and ma.ORD_NUM=o.ORD_NUM        LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON o.ORD_NUM = t.ORD_NUM     OUTER APPLY (SELECT TOP 1 tr.FACE FROM VISTA_REPORTING.dbo.TRD_ORDERS tr         WHERE tr.ORD_NUM=o.ORD_NUM AND ISNULL(tr.FILL_AMT, 0) !=0         ORDER BY tr.TOUCH_COUNT) o2        WHERE o.STATUS in ('A', 'F')        GROUP BY o.ORD_NUM, o2.FACE             IF OBJECT_ID('tempdb..#max_touch_count', 'U') IS NOT NULL DROP TABLE #max_touch_count     select multi_fund_id,     MAX(touch_count) as max_touch_count     into #max_touch_count     from VISTA_REPORTING.dbo.TRADES     group by multi_fund_id         --select * from #max_auth_face         IF OBJECT_ID('tempdb..#timely_recording', 'U') IS NOT NULL DROP TABLE #timely_recording         SELECT DISTINCT      h.MULTI_FUND_ID,      pr.DEALING_DESK,      DATEDIFF(minute, h.EXECUTION_TIME, MIN(h.TRD_AUTH_TIME)) as time_diff, --find differenece in minutes between EXECUTION_TIME AND TRD_AUTH_TIME      --t.TRD_ORIG_FACE,      h.EXECUTION_TIME,      MIN(h.TRD_AUTH_TIME) as MIN_TRD_AUTH_TIME,      h.WEEKEND_OFFSET,      h.HOLIDAY_OFFSET,      CASE       WHEN pr.FUTURE_ROLLS = 1 THEN 0 --Exclude future rolls       WHEN h.EXECUTION_TIME < '2020-02-01' THEN         CASE         WHEN CAST(h.EXECUTION_TIME AS time) > CAST('16:30:00' AS time) --if EXECUTION_TIME is later than 16:30 then rebase the cut off datetime to 09:00 the next working day           AND min(h.TRD_AUTH_TIME) > DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET), --use weekend and holiday offsets to calculate the correct offset amount           DATEADD(day, DATEDIFF(day, 0, h.EXECUTION_TIME), '09:00:00'))           AND ma.MAX_EXECUTION = t.EXECUTION_TIME           AND pr.PRIMARY_MARKET = 0           AND ma.FIRST_FILL_FACE-ma.MAX_FILL_AMT=0           AND T.TRD_AUTH_TIME >= '2018-08-17 00:00:00.000' -- if EXECUTION_TIME is later than 16:30 then rebase the cut off datetime to 09:00 the next working day ONLY for PM Orders that have been authorised after the 17/08/2018         THEN 1         WHEN CAST(h.EXECUTION_TIME AS time) > CAST('16:30:00' AS time) --if EXECUTION_TIME is later than 16:30 then rebase the cut off datetime to 08:00 the next working day           AND min(h.TRD_AUTH_TIME) > DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET), --use weekend and holiday offsets to calculate the correct offset amount           DATEADD(day, DATEDIFF(day, 0, h.EXECUTION_TIME), '08:00:00'))           AND ma.MAX_EXECUTION = t.EXECUTION_TIME           AND pr.PRIMARY_MARKET = 0           AND ma.FIRST_FILL_FACE-ma.MAX_FILL_AMT=0           AND T.TRD_AUTH_TIME < '2018-08-17 00:00:00.000' -- if EXECUTION_TIME is later than 16:30 then rebase the cut off datetime to 08:00 the next working day ONLY for PM Orders that have been authorised before the 17/08/2018         THEN 1         WHEN CAST(h.EXECUTION_TIME AS time) < CAST('07:00:00' AS time) --if EXECUTION_TIME is later than 16:30 then rebase the cut off datetime to 08:00 the next working day           AND ma.MAX_EXECUTION = t.EXECUTION_TIME           AND min(h.TRD_AUTH_TIME) > DATEADD(day, DATEDIFF(day, 0, h.EXECUTION_TIME), '08:00:00')           AND pr.PRIMARY_MARKET = 0           AND ma.FIRST_FILL_FACE-ma.MAX_FILL_AMT=0           AND T.TRD_AUTH_TIME < '2018-08-17 00:00:00.000' -- if EXECUTION_TIME is later than 16:30 then rebase the cut off datetime to 08:00 the next working day ONLY for PM Orders that have been authorised before the 17/08/2018         THEN 1         WHEN CAST(h.EXECUTION_TIME AS time) < CAST('08:00:00' AS time) --if EXECUTION_TIME is later than 16:30 then rebase the cut off datetime to 09:00 the next working day           AND ma.MAX_EXECUTION = t.EXECUTION_TIME           AND min(h.TRD_AUTH_TIME) > DATEADD(day, DATEDIFF(day, 0, h.EXECUTION_TIME), '09:00:00')           AND pr.PRIMARY_MARKET = 0           AND ma.FIRST_FILL_FACE-ma.MAX_FILL_AMT=0           AND T.TRD_AUTH_TIME >= '2018-08-17 00:00:00.000' -- if EXECUTION_TIME is later than 16:30 then rebase the cut off datetime to 09:00 the next working day ONLY for PM Orders that have been authorised after the 17/08/2018         THEN 1         WHEN CAST(h.EXECUTION_TIME AS time) BETWEEN  CAST('07:00:00' AS time) AND CAST('16:30:00' AS time) --if EXECUTION_TIMEis earlier than 16:30 then check differenece between EXECUTION_TIME AND TRD_AUTH_TIME is less than 60 if not raise exception           AND ma.MAX_EXECUTION = t.EXECUTION_TIME           AND DATEDIFF(minute, h.EXECUTION_TIME, min(h.TRD_AUTH_TIME)) > 60           AND pr.PRIMARY_MARKET = 0           AND ma.FIRST_FILL_FACE-ma.MAX_FILL_AMT=0           AND T.TRD_AUTH_TIME < '2018-08-17 00:00:00.000'          THEN 1         WHEN CAST(h.EXECUTION_TIME AS time) BETWEEN  CAST('08:00:00' AS time) AND CAST('16:30:00' AS time) --if EXECUTION_TIMEis earlier than 16:30 then check differenece between EXECUTION_TIME AND TRD_AUTH_TIME is less than 60 if not raise exception           AND ma.MAX_EXECUTION = t.EXECUTION_TIME           AND DATEDIFF(minute, h.EXECUTION_TIME, min(h.TRD_AUTH_TIME)) > 60           AND pr.PRIMARY_MARKET = 0           AND ma.FIRST_FILL_FACE-ma.MAX_FILL_AMT=0           AND T.TRD_AUTH_TIME >= '2018-08-17 00:00:00.000'         THEN 1         ELSE 0        END       ELSE       CASE        WHEN o.COUNTRY NOT IN ('US', 'BR', 'CA', 'CL', 'CO', 'MX', 'NZ')        THEN         CASE           WHEN ma.MAX_EXECUTION = t.EXECUTION_TIME            AND DATEDIFF(minute, h.EXECUTION_TIME, min(h.TRD_AUTH_TIME)) > 60            AND pr.PRIMARY_MARKET = 0            AND ma.FIRST_FILL_FACE-ma.MAX_FILL_AMT=0          THEN 1          ELSE 0         END        ELSE         CASE          WHEN CAST(h.EXECUTION_TIME AS time) > CAST('16:30:00' AS time) --if EXECUTION_TIME is later than 16:30 then rebase the cut off datetime to 09:00 the next working day            AND min(h.TRD_AUTH_TIME) > DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET), --use weekend and holiday offsets to calculate the correct offset amount            DATEADD(day, DATEDIFF(day, 0, h.EXECUTION_TIME), '09:00:00'))            AND ma.MAX_EXECUTION = t.EXECUTION_TIME            AND pr.PRIMARY_MARKET = 0            AND ma.FIRST_FILL_FACE-ma.MAX_FILL_AMT=0            AND T.TRD_AUTH_TIME >= '2018-08-17 00:00:00.000' -- if EXECUTION_TIME is later than 16:30 then rebase the cut off datetime to 09:00 the next working day ONLY for PM Orders that have been authorised after the 17/08/2018          THEN 1          WHEN CAST(h.EXECUTION_TIME AS time) > CAST('16:30:00' AS time) --if EXECUTION_TIME is later than 16:30 then rebase the cut off datetime to 08:00 the next working day            AND min(h.TRD_AUTH_TIME) > DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET), --use weekend and holiday offsets to calculate the correct offset amount            DATEADD(day, DATEDIFF(day, 0, h.EXECUTION_TIME), '08:00:00'))            AND ma.MAX_EXECUTION = t.EXECUTION_TIME            AND pr.PRIMARY_MARKET = 0            AND ma.FIRST_FILL_FACE-ma.MAX_FILL_AMT=0            AND T.TRD_AUTH_TIME < '2018-08-17 00:00:00.000' -- if EXECUTION_TIME is later than 16:30 then rebase the cut off datetime to 08:00 the next working day ONLY for PM Orders that have been authorised before the 17/08/2018          THEN 1          WHEN CAST(h.EXECUTION_TIME AS time) BETWEEN  CAST('08:00:00' AS time) AND CAST('16:30:00' AS time) --if EXECUTION_TIMEis earlier than 16:30 then check differenece between EXECUTION_TIME AND TRD_AUTH_TIME is less than 60 if not raise exception            AND ma.MAX_EXECUTION = t.EXECUTION_TIME            AND DATEDIFF(minute, h.EXECUTION_TIME, min(h.TRD_AUTH_TIME)) > 60            AND pr.PRIMARY_MARKET = 0            AND ma.FIRST_FILL_FACE-ma.MAX_FILL_AMT=0            AND T.TRD_AUTH_TIME >= '2018-08-17 00:00:00.000'          THEN 1          WHEN CAST(h.EXECUTION_TIME AS time) BETWEEN  CAST('07:00:00' AS time) AND CAST('16:30:00' AS time) --if EXECUTION_TIMEis earlier than 16:30 then check differenece between EXECUTION_TIME AND TRD_AUTH_TIME is less than 60 if not raise exception            AND ma.MAX_EXECUTION = t.EXECUTION_TIME            AND DATEDIFF(minute, h.EXECUTION_TIME, min(h.TRD_AUTH_TIME)) > 60            AND pr.PRIMARY_MARKET = 0            AND ma.FIRST_FILL_FACE-ma.MAX_FILL_AMT=0            AND T.TRD_AUTH_TIME < '2018-08-17 00:00:00.000'           THEN 1         ELSE 0         END       END      END AS TIMELY_RECORDING_FLAG     INTO #timely_recording     FROM #holiday_offset h     LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON h.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS o ON o.ORD_NUM=t.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN #max_auth_face ma on ma.ORD_NUM=t.ORD_NUM     inner join #max_touch_count mtc on mtc.MULTI_FUND_ID = h.MULTI_FUND_ID and mtc.max_touch_count = t.TOUCH_COUNT     WHERE pr.DEALING_DESK = 'Equity'      --AND ma.MAX_EXECUTION = t.EXECUTION_TIME      --and t.PULL_DATE=@DATE_FILTER     GROUP BY      h.MULTI_FUND_ID,      pr.DEALING_DESK,      o.COUNTRY,      h.EXECUTION_TIME,      h.WEEKEND_OFFSET,      h.HOLIDAY_OFFSET,      pr.PRIMARY_MARKET,      ma.FIRST_FILL_FACE,      ma.MAX_FILL_AMT,      ma.MAX_EXECUTION,      t.EXECUTION_TIME,      T.TRD_AUTH_TIME,      pr.FUTURE_ROLLS             -- Use #timely_recording to populate FINAL_STATUS_UPDATE_TABLE     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     select distinct      CONCAT(MULTI_FUND_ID,'_10') AS ID,      '1A1' AS STATUS,      NULL AS FINAL_UPDATED_TIME     into #temp_status_table     from #timely_recording     where TIMELY_RECORDING_FLAG = 1          MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET       T.ID=T.ID,       T.STATUS=T.STATUS,       T.DEALING_DESK = 'Equity',       T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'Equity');         --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      ex.MULTI_FUND_ID AS MULTI_FUND_ID,      t.ORD_NUM AS TRD_ORD,      NULL AS PM_ORD,      'Timely Recording' AS Exception_Type,      CONCAT(ex.MULTI_FUND_ID,'_10') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'For Review' AS Status,      NULL AS ClientExecID,      'Equity' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      NULL AS DEALER,      '1A1' AS STATUS_ID,      trd_o.AUTH_TIME AS ORD_AUTH,      t.EXECUTION_TIME AS TRADE_EXEC     INTO #temp_audit     FROM #timely_recording ex     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t     ON ex.MULTI_FUND_ID = t.MULTI_FUND_ID     LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o     ON t.ORD_NUM = trd_o.ORD_NUM     where TIMELY_RECORDING_FLAG = 1          MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);             IF OBJECT_ID('VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_EQ_TABLE', 'U') IS NULL          SELECT DISTINCT     t.MULTI_FUND_ID,     o.DEALING_DESK,     COALESCE(tr.TIMELY_RECORDING_FLAG,0) AS TIMELY_RECORDING_FLAG,     CASE      WHEN TIMELY_RECORDING_FLAG=1 THEN GETDATE() ELSE NULL --if excpetion has been raised then mark the datetime     END AS TREC_CREATETIME     INTO VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_EQ_TABLE     FROM VISTA_REPORTING.dbo.TRADES t      LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS o ON o.ORD_NUM=t.ORD_NUM     left join #timely_recording tr ON t.MULTI_FUND_ID=tr.MULTI_FUND_ID     WHERE o.DEALING_DESK = 'Equity'         ELSE         IF OBJECT_ID('tempdb..#temp_tr_table', 'U') IS NOT NULL DROP TABLE #temp_tr_table         SELECT DISTINCT     t.MULTI_FUND_ID,     o.DEALING_DESK,     COALESCE(tr.TIMELY_RECORDING_FLAG,0) AS TIMELY_RECORDING_FLAG,     CASE      WHEN TIMELY_RECORDING_FLAG=1 THEN GETDATE() ELSE NULL --if excpetion has been raised then mark the datetime     END AS TREC_CREATETIME     INTO #temp_tr_table     FROM VISTA_REPORTING.dbo.TRADES t      LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS o ON o.ORD_NUM=t.ORD_NUM     left join #timely_recording tr ON t.MULTI_FUND_ID=tr.MULTI_FUND_ID     WHERE o.DEALING_DESK = 'Equity'     --WHERE tr.DEALING_DESK = 'Equity' and t.PULL_DATE=@DATE_FILTER         MERGE VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_EQ_TABLE AS T     USING #temp_tr_table AS S     ON (T.MULTI_FUND_ID = S.MULTI_FUND_ID)     WHEN MATCHED      THEN       UPDATE SET        T.DEALING_DESK = S.DEALING_DESK,       T.TIMELY_RECORDING_FLAG = CASE WHEN S.TIMELY_RECORDING_FLAG > T.TIMELY_RECORDING_FLAG THEN S.TIMELY_RECORDING_FLAG ELSE T.TIMELY_RECORDING_FLAG END,       T.TREC_CREATETIME = CASE WHEN S.TIMELY_RECORDING_FLAG > T.TIMELY_RECORDING_FLAG THEN S.TREC_CREATETIME ELSE T.TREC_CREATETIME END     WHEN NOT MATCHED       THEN INSERT (MULTI_FUND_ID, DEALING_DESK, TIMELY_RECORDING_FLAG, TREC_CREATETIME)        VALUES (S.MULTI_FUND_ID, S.DEALING_DESK, S.TIMELY_RECORDING_FLAG, S.TREC_CREATETIME);          IF OBJECT_ID('tempdb..#GB_holidays', 'U') IS NOT NULL DROP TABLE #GB_holidays     IF OBJECT_ID('tempdb..#holiday_offset', 'U') IS NOT NULL DROP TABLE #holiday_offset     IF OBJECT_ID('tempdb..#max_auth_face', 'U') IS NOT NULL DROP TABLE #max_auth_face     IF OBJECT_ID('tempdb..#timely_recording', 'U') IS NOT NULL DROP TABLE #timely_recording     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     IF OBJECT_ID('tempdb..#temp_tr_table', 'U') IS NOT NULL DROP TABLE #temp_tr_table        END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_10_TIMELY_RECORDING_FI  CreateDate: 2025-06-26 18:08:15.510  ModifyDate: 2025-06-26 18:08:15.510  --- DEFINITION START ---  -- =============================================    -- Author:  <da Costa, David>    -- Create date: <25/10/2017>    -- Description:     -- <If Post_Date != Execution_Date then it is an exception    -- if Post_Date == Execution_Date then:    -- for Electronic_Trades     -- if Post_DateTime - Execution_DateTime > 60 then it is     -- an exception    -- for Non-Electronic_Trades     -- if Post_DateTime - Execution_DateTime > 60/120 (depending    -- on subtype thresholds) then it is an exception    -- For USD base, Primary market and Post_Date>    -- =============================================        -- ***************VERSION CONTROL***************    -- 05/12/2017 - DDC: Changes made to include new    -- additions to PRMARY_INST_TABLE and PRIMARY_MARKET    -- flags.    --    -- 11/12/2017 - DDC: Changes made to ensure that script     -- only ever updates existing records always ensuring     -- the highest level exception is reported and     -- inserts new ones if no exception has been raised.        -- 04/01/2018 - DDC: Amendment made to only run  exception    -- calculations on the data for the day the exception is     -- being pulled        -- 2018-02-09 - WH: a) Amended the logic to so that an exception is     -- raised whenever the trade date (TRD_TRADE_DATE) is before the date     -- of the authorised date TRD_AUTH_TIME for non-primary market    -- trades.    --    -- 26/02/2018 - DDC: i) Added INTER-DAY and INTRA-DAY flag to logic.    --      ii) Amended logic so INTER_DAY trades take     --      TRD_TRADE_DATE and not EXECUTION_TIME as it's    --      comparator.        -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.        -- 2019-04-11 - DDC: Inclusion of new HOLIDAY/WEEKEND offset calculation    -- *********************************************            CREATE PROCEDURE [dbo].[VG_10_TIMELY_RECORDING_FI]     -- Add the parameters for the stored procedure here     -- @Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         --DECLARE @DATE_FILTER AS DATE --Declare date filter to only select data from current pull date     --SET @DATE_FILTER = CONVERT(DATE, GETDATE())         -- Get associated information for Timely Recording exception     IF OBJECT_ID('tempdb..#rebased_time', 'U') IS NOT NULL DROP TABLE #rebased_time     select      --t.ORD_NUM      tr.MULTI_FUND_ID      ,tr.TRD_CURRENCY      ,tr.EXECUTION_TIME      ,tr.TRD_AUTH_TIME      ,tr.TRD_TRADE_DATE      ,p.PRIMARY_MARKET      ,p.INST_TYPE      ,p.DEBT_DERIV      ,p.FUTURE_ROLLS      ,case        when (pl.VENUE ='MANUAL PL') then pl.VENUE       when (pl.VENUE is NULL) then 'MANUAL'        else 'ELECTRONIC' -- Electronic/Non-Electronic      end as VENUE      ,p.COUNTRY      --,pm.order_reason_decode     into #rebased_time     from     -- Fields such as TRD_TRADE_DATE can change over time (and have been observed to do so)     -- We therefore take values from TRADES at most recent point in time.       (       SELECT DISTINCT         tr.ORD_NUM        ,tr.MULTI_FUND_ID        ,tr.TRD_CURRENCY        ,tr.EXECUTION_TIME        ,tr.TRD_AUTH_TIME        ,tr.TRD_TRADE_DATE       FROM VISTA_REPORTING.dbo.TRADES as tr       INNER JOIN (         SELECT MULTI_FUND_ID, MAX(TOUCH_COUNT) AS MAX_TOUCH         FROM VISTA_REPORTING.dbo.TRADES         GROUP BY MULTI_FUND_ID       ) as t2 on (tr.MULTI_FUND_ID=t2.MULTI_FUND_ID) and (tr.TOUCH_COUNT=t2.MAX_TOUCH)      ) as tr     --left join (select distinct ORD_NUM, DEALING_DESK, CUSIP FROM VISTA_REPORTING.dbo.TRD_ORDERS) as t on tr.ORD_NUM=t.ORD_NUM     --left join VISTA_REPORTING.dbo.INSTRUMENTS i on i.CUSIP=t.CUSIP     left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p on p.MULTI_FUND_ID=tr.MULTI_FUND_ID     left join VISTA_REPORTING.dbo.PLACEMENTS pl on pl.MULTI_FUND_ID=tr.MULTI_FUND_ID     left join VISTA_STAGING.dbo.GMT_OFFSET g on g.COUNTRY=p.COUNTRY and g.DATE=CONVERT(date,tr.TRD_AUTH_TIME) -- Get GMT offset by country     --left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on oc.TRD_ORD = tr.ORD_NUM     --left join VISTA_REPORTING.dbo.PM_ORDERS pm on pm.ORD_NUM = oc.PM_ORD     where       p.DEALING_DESK='Fixed Income'       and tr.MULTI_FUND_ID is not NULL -- Only fixed income orders with an availible MULTI_FUND_ID         IF OBJECT_ID('tempdb..#holiday_list', 'U') IS NOT NULL DROP TABLE #holiday_list     SELECT DISTINCT CLOSURE_DATES      INTO #holiday_list      FROM VISTA_STAGING.dbo.HOLIDAYS WHERE COUNTRY_CODE in ('GB', 'US')          IF OBJECT_ID('tempdb..#holiday_offset', 'U') IS NOT NULL DROP TABLE #holiday_offset     SELECT --create a table by MULTI_FUND_ID to account for weekend and holiday offsets to rebased datetimes     t.MULTI_FUND_ID,     t.EXECUTION_TIME,     t.TRD_AUTH_TIME,     DATEADD(day,1,MIN(t.EXECUTION_TIME)) REBASED_AUTH_TIME,     CASE       WHEN  DATENAME(dw, DATEADD(day,1,MIN(t.EXECUTION_TIME))) = 'Friday' AND         (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list           WHERE CONVERT(DATE, DATEADD(day,1,MIN(t.EXECUTION_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)          AND COUNTRY = tr.COUNTRY) = 1          THEN           CASE         WHEN DATENAME(dw, DATEADD(day,1,MIN(t.EXECUTION_TIME))) = 'Friday' THEN 2 --if the EXECUTION_TIME is on a Friday a 2 day offset may be necessary         WHEN DATENAME(dw, DATEADD(day,1,MIN(t.EXECUTION_TIME))) = 'Saturday' THEN 1         WHEN DATENAME(dw, DATEADD(day,1,MIN(t.EXECUTION_TIME))) = 'Sunday' THEN 0          END       ELSE       CASE        WHEN DATENAME(dw, MIN(t.EXECUTION_TIME)) = 'Friday' THEN 2 --if the EXECUTION_TIME is on a Friday a 2 day offset may be necessary        WHEN DATENAME(dw, MIN(t.EXECUTION_TIME)) = 'Saturday' THEN 1        WHEN DATENAME(dw, MIN(t.EXECUTION_TIME)) = 'Sunday' THEN 0        ELSE 0       END      END AS WEEKEND_OFFSET,     CASE       WHEN DATENAME(dw, DATEADD(day,1,MIN(t.EXECUTION_TIME))) = 'Friday'        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list           WHERE CONVERT(DATE, DATEADD(day,1,MIN(t.EXECUTION_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)          AND COUNTRY = tr.COUNTRY) = 1        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list           WHERE CONVERT(DATE, DATEADD(day,4,MIN(t.EXECUTION_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)          AND COUNTRY = tr.COUNTRY) = 1         THEN 2      WHEN DATENAME(dw, MIN(t.EXECUTION_TIME)) = 'Friday'        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list           WHERE CONVERT(DATE, DATEADD(day,3,MIN(t.EXECUTION_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)          AND COUNTRY = tr.COUNTRY) = 1         THEN 1      WHEN (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list           WHERE CONVERT(DATE, DATEADD(day,1,MIN(t.EXECUTION_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)          AND COUNTRY = tr.COUNTRY) = 1        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list           WHERE CONVERT(DATE, DATEADD(day,2,MIN(t.EXECUTION_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)          AND COUNTRY = tr.COUNTRY) = 1         THEN 2      ELSE (SELECT COUNT(DISTINCT CLOSURE_DATES)          FROM #holiday_list          WHERE CONVERT(DATE, CLOSURE_DATES, 103)          BETWEEN CONVERT(DATE, MIN(t.EXECUTION_TIME), 103)          AND CONVERT(DATE, DATEADD(day,1,MIN(t.EXECUTION_TIME)), 103)         AND COUNTRY = tr.COUNTRY)      END AS HOLIDAY_OFFSET     INTO #holiday_offset     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN (SELECT DISTINCT          ORD_NUM,          CASE          WHEN COUNTRY = 'US' THEN 'US'          ELSE 'GB'          END AS COUNTRY         FROM VISTA_REPORTING.dbo.TRD_ORDERS) tr ON tr.ORD_NUM = t.ORD_NUM     GROUP BY      t.MULTI_FUND_ID,      t.EXECUTION_TIME,      t.TRD_AUTH_TIME,      tr.COUNTRY              -- Depending on instrument type/Venue, flag exception if the difference between EXECUTION_TIME and AUTH_TIME     -- is greater than the instrument requirement.     IF OBJECT_ID('tempdb..#timely_rec_table', 'U') IS NOT NULL DROP TABLE #timely_rec_table     select distinct     r.MULTI_FUND_ID     ,r.EXECUTION_TIME     ,r.PRIMARY_MARKET     ,r.DEBT_DERIV     ,min(r.TRD_AUTH_TIME) AS MIN_POST_DATETIME     ,DATEDIFF(minute, r.EXECUTION_TIME, min(r.TRD_AUTH_TIME)) as DATE_DIFF     ,r.INST_TYPE         ,case      when DATEDIFF(day, r.TRD_TRADE_DATE, CONVERT(DATE, MIN(r.TRD_AUTH_TIME))) = 0 then 'Intra day'      else 'Across days'     end as TRADE_TYPE     ,case      when DATEDIFF(day, r.TRD_TRADE_DATE, CONVERT(DATE, MIN(r.TRD_AUTH_TIME))) = 0        then CONVERT(VARCHAR(5),         DATEDIFF(minute, r.EXECUTION_TIME, min(r.TRD_AUTH_TIME))) + ' mins' -- If it is an Intra day exception then display the time difference in minutes between execution and recording      else CONVERT(VARCHAR(50),       DATEDIFF(day, r.TRD_TRADE_DATE, CONVERT(DATE, MIN(r.TRD_AUTH_TIME)))) + ' days' -- If it is an Inter day exception, display the number of days between execution and recording     end as Timespan      ,case      WHEN r.FUTURE_ROLLS = 1 THEN 0      WHEN MIN(r.TRD_AUTH_TIME) < '2020-07-31' THEN 0      when r.TRD_TRADE_DATE < CONVERT(DATE,min(r.TRD_AUTH_TIME)) -- Whenever the trade date is before the auth date        AND NOT (ISNULL(r.PRIMARY_MARKET,0) = 1 and r.TRD_CURRENCY = 'USD' and r.DEBT_DERIV = 'DEBT') -- DO not flag for USD based primary market debt, we do this in the step below.        THEN 1      when r.TRD_CURRENCY = 'USD'       and r.PRIMARY_MARKET = 1       and r.DEBT_DERIV='DEBT'       and min(r.TRD_AUTH_TIME) >= DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET), DATEADD(day, DATEDIFF(day, 0, MIN(r.TRD_TRADE_DATE)), '10:00:00'))      then 1      when CONVERT(date, min(r.TRD_AUTH_TIME)) = CONVERT(date, r.EXECUTION_TIME)       then       case        when DATEDIFF(minute, r.EXECUTION_TIME, min(r.TRD_AUTH_TIME)) > 60        and r.PRIMARY_MARKET = 0        then 1        else 0       end      else 0     end as TIMELY_RECORDING_EXCEPTION     into #timely_rec_table     from #rebased_time r     left join #holiday_offset h on h.MULTI_FUND_ID=r.MULTI_FUND_ID     group by         r.MULTI_FUND_ID,      r.PRIMARY_MARKET,      r.INST_TYPE,      r.VENUE,      r.EXECUTION_TIME,      r.TRD_TRADE_DATE,      --r.TRD_AUTH_TIME,      r.TRD_CURRENCY,      r.DEBT_DERIV,      h.WEEKEND_OFFSET,      h.HOLIDAY_OFFSET,      r.FUTURE_ROLLS      --SELECT * FROM #timely_rec_table WHERE MULTI_FUND_ID = 645312               -- Use #timely_recording to populate FINAL_STATUS_UPDATE_TABLE     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     select distinct      CONCAT(MULTI_FUND_ID,'_10') AS ID,      '1A2' AS STATUS,      NULL AS FINAL_UPDATED_TIME     into #temp_status_table     from #timely_rec_table     where TIMELY_RECORDING_EXCEPTION = 1          MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET       T.ID=T.ID,       T.STATUS=T.STATUS,       T.DEALING_DESK = 'Fixed Income',       T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'Fixed Income');         --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      ex.MULTI_FUND_ID AS MULTI_FUND_ID,      t.ORD_NUM AS TRD_ORD,      NULL AS PM_ORD,      'Timely Recording' AS Exception_Type,      CONCAT(ex.MULTI_FUND_ID,'_10') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'With Reviewer' AS Status,      NULL AS ClientExecID,      'Fixed Income' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      NULL AS DEALER,      '1A2' AS STATUS_ID,      trd_o.AUTH_TIME AS ORD_AUTH,      t.EXECUTION_TIME AS TRADE_EXEC     INTO #temp_audit     FROM #timely_rec_table ex     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t     ON ex.MULTI_FUND_ID = t.MULTI_FUND_ID     LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o     ON t.ORD_NUM = trd_o.ORD_NUM     where TIMELY_RECORDING_EXCEPTION = 1          MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);             IF OBJECT_ID('VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FI_TABLE', 'U') IS NULL          select distinct     --t.ORD_NUM,     tr.MULTI_FUND_ID,     t.DEALING_DESK,     n.TRADE_TYPE,     MAX(n.Timespan) AS Timespan,     MAX(coalesce(n.TIMELY_RECORDING_EXCEPTION, 0)) as TIMELY_RECORDING_EXCEPTION,     case      when MAX(TIMELY_RECORDING_EXCEPTION) = 1 then GETDATE() else NULL     end as TREC_CREATETIME     into VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FI_TABLE     from VISTA_REPORTING.dbo.TRADES tr     left join VISTA_REPORTING.dbo.TRD_ORDERS t on tr.ORD_NUM=t.ORD_NUM     left join #timely_rec_table n on tr.MULTI_FUND_ID=n.MULTI_FUND_ID     where t.DEALING_DESK = 'Fixed Income'      --and t.PULL_DATE=@DATE_FILTER      and tr.MULTI_FUND_ID IS NOT NULL     GROUP BY tr.MULTI_FUND_ID, t.DEALING_DESK, n.TRADE_TYPE         ELSE         IF OBJECT_ID('tempdb..#temp_tr_table', 'U') IS NOT NULL DROP TABLE #temp_tr_table         SELECT DISTINCT     --t.ORD_NUM,     tr.MULTI_FUND_ID,     t.DEALING_DESK,     n.TRADE_TYPE,     MAX(n.Timespan) AS Timespan,     MAX(coalesce(n.TIMELY_RECORDING_EXCEPTION, 0)) as TIMELY_RECORDING_EXCEPTION,     case      when MAX(TIMELY_RECORDING_EXCEPTION) = 1 then GETDATE() else NULL     end as TREC_CREATETIME     into #temp_tr_table     from VISTA_REPORTING.dbo.TRADES tr     left join VISTA_REPORTING.dbo.TRD_ORDERS t on tr.ORD_NUM=t.ORD_NUM     left join #timely_rec_table n on tr.MULTI_FUND_ID=n.MULTI_FUND_ID     where t.DEALING_DESK = 'Fixed Income'      --and t.PULL_DATE=@DATE_FILTER     and tr.MULTI_FUND_ID IS NOT NULL     GROUP BY tr.MULTI_FUND_ID, t.DEALING_DESK, n.TRADE_TYPE              MERGE VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FI_TABLE AS T     USING #temp_tr_table AS S     ON T.MULTI_FUND_ID=S.MULTI_FUND_ID      WHEN MATCHED      THEN       UPDATE SET         T.DEALING_DESK = S.DEALING_DESK,       T.TRADE_TYPE = CASE WHEN S.TIMELY_RECORDING_EXCEPTION > T.TIMELY_RECORDING_EXCEPTION THEN S.TRADE_TYPE ELSE T.TRADE_TYPE END,       T.Timespan = CASE WHEN S.TIMELY_RECORDING_EXCEPTION > T.TIMELY_RECORDING_EXCEPTION THEN S.Timespan ELSE S.Timespan END,       T.TIMELY_RECORDING_EXCEPTION = CASE WHEN S.TIMELY_RECORDING_EXCEPTION > T.TIMELY_RECORDING_EXCEPTION THEN S.TIMELY_RECORDING_EXCEPTION ELSE T.TIMELY_RECORDING_EXCEPTION END,       T.TREC_CREATETIME = CASE WHEN S.TIMELY_RECORDING_EXCEPTION > T.TIMELY_RECORDING_EXCEPTION THEN S.TREC_CREATETIME ELSE T.TREC_CREATETIME END     WHEN NOT MATCHED       THEN INSERT (MULTI_FUND_ID, DEALING_DESK, TRADE_TYPE, TIMELY_RECORDING_EXCEPTION, TREC_CREATETIME)        VALUES (S.MULTI_FUND_ID, S.DEALING_DESK, S.TRADE_TYPE, S.TIMELY_RECORDING_EXCEPTION, S.TREC_CREATETIME);                 --SELECT      -- t.ORD_NUM,     -- CASE     --  WHEN DATEDIFF(day, t.EXECUTION_TIME, t.TRD_ENTRY_TIME) != 0     --  AND ii.ASSET_CLASS in ('Fixed Income', 'Leveraged Finance')     --   THEN 1      --  WHEN DATEDIFF(day, t.EXECUTION_TIME, t.TRD_ENTRY_TIME) = 0      --  AND ii.ASSET_CLASS in ('Fixed Income', 'Leveraged Finance')     --  AND p.VENUE != 'PHONE'     --  AND DATEDIFF(minute, t.EXECUTION_TIME, t.TRD_ENTRY_TIME) > 60     --   THEN 1     --  WHEN DATEDIFF(day, t.EXECUTION_TIME, t.TRD_ENTRY_TIME) = 0      --  AND ii.ASSET_CLASS in ('Fixed Income', 'Leveraged Finance')     --  AND p.VENUE = 'PHONE'     --  AND DATEDIFF(minute, t.EXECUTION_TIME, t.TRD_ENTRY_TIME) > 120 -- need to add asset_sub_type threshold conditions     --   THEN 1     --  ELSE 0     -- END AS TIMELY_RECORDING_FLAG     --FROM VISTA_REPORTING.dbo.TRADES t     --LEFT JOIN VISTA_REPORTING.dbo.ORDERS o ON t.ORD_NUM=o.ORD_NUM     --LEFT JOIN VISTA_REPORTING.dbo.PLACEMENTS p ON p.ORD_NUM=t.ORD_NUM     --LEFT JOIN VISTA_STAGING.dbo.INSTRUMENTS i ON i.CUSIP=o.CUSIP     --LEFT JOIN VISTA_STAGING.dbo.INITIAL_INSTRUMENT ii ON ii.ASSET_TYPE=i.SM_SEC_GROUP      --     AND ii.ASSET_SUB_TYPE=i.SM_SEC_TYPE     --GROUP BY     -- t.ORD_NUM,     -- ii.ASSET_CLASS,     -- p.VENUE,     -- t.EXECUTION_TIME,     -- t.TRD_ENTRY_TIME,     -- t.TRD_ORIG_FACE     IF OBJECT_ID('tempdb..#rebased_time', 'U') IS NOT NULL DROP TABLE #rebased_time     IF OBJECT_ID('tempdb..#holiday_offset', 'U') IS NOT NULL DROP TABLE #holiday_offset     IF OBJECT_ID('tempdb..#timely_rec_table', 'U') IS NOT NULL DROP TABLE #timely_rec_table     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     IF OBJECT_ID('tempdb..#temp_tr_table', 'U') IS NOT NULL DROP TABLE #temp_tr_table        END            --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_10_TIMELY_RECORDING_FX  CreateDate: 2025-06-26 18:07:55.613  ModifyDate: 2025-06-26 18:07:55.613  --- DEFINITION START ---  -- =============================================    -- Author:  <Samad, Mehreen>    -- Create date: <29/07/2019>    -- Description:     -- <All trades must be executed within a certain    -- time frame from when the order is placed.>    -- =============================================        -- ***************VERSION CONTROL***************    --    -- *********************************************        CREATE PROCEDURE [dbo].[VG_10_TIMELY_RECORDING_FX]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;             IF OBJECT_ID('tempdb..#temp_max_trade_touch', 'U') IS NOT NULL DROP TABLE #temp_max_trade_touch    SELECT DISTINCT      MULTI_FUND_ID,      MAX(TOUCH_COUNT) as MAX_TOUCH     INTO #temp_max_trade_touch    FROM VISTA_REPORTING.dbo.TRADES    GROUP BY MULTI_FUND_ID            IF OBJECT_ID('tempdb..#temp_trades_table', 'U') IS NOT NULL DROP TABLE #temp_trades_table    SELECT DISTINCT      t.MULTI_FUND_ID,      t.SM_SEC_TYPE,      t.TRD_AUTH_TIME,      t.EXECUTION_TIME,      t.DESC_INSTMT,      t.ORD_NUM,     pr.DEALING_DESK,     pr.SM_SEC_GROUP    INTO #temp_trades_table    FROM VISTA_REPORTING.dbo.TRADES t    INNER JOIN #temp_max_trade_touch mtt ON mtt.MAX_TOUCH = t.TOUCH_COUNT and mtt.MULTI_FUND_ID = t.MULTI_FUND_ID    INNER JOIN Vista_Reporting.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID=t.MULTI_FUND_ID AND pr.DEALING_DESK = 'FX'            IF OBJECT_ID('tempdb..#temp_tex', 'U') IS NOT NULL DROP TABLE #temp_tex    SELECT DISTINCT      fxt.[TRADE_ID],      fxo.[INSTRUCTION_TYPE],     fxt.EXECUTED_DATE_TIME,     MAX(fxt.UPLOADED_DATE_TIME) AS MAX_EXECUTED_DATE_TIME,     cast(DATEDIFF(SECOND, fxt.EXECUTED_DATE_TIME, MAX(fxt.UPLOADED_DATE_TIME)) as decimal(38,2)) AS RECORDING_MINS,     CASE       WHEN fxo.[INSTRUCTION_TYPE] in ('SPOT')        THEN COALESCE(ter.[SPOT_TIMELY_REC_THRESHOLD],ter2.[SPOT_TIMELY_REC_THRESHOLD])      WHEN fxo.[INSTRUCTION_TYPE] in ('Forward','NDS','NDF','FX Swap') THEN COALESCE(ter.[FWD_TIMELY_REC_THRESHOLD],ter2.[FWD_TIMELY_REC_THRESHOLD])     END AS TIMELY_REC_THRESHOLD,     'FX' AS [SOURCE]    INTO #temp_tex    FROM  VISTA_REPORTING.dbo.FX_TRADES fxt    left join VISTA_REPORTING.dbo.FX_ORDERS fxo    on fxt.[ORDER_ID] = fxo.[FXM_ORDER_ID]    LEFT JOIN VISTA_STAGING.dbo.REF_FX_TIMELY_EX_REC_THRESHOLD ter     ON fxt.[BUY_CCY] = ter.[BASE_CCY] and fxt.[SELL_CCY] = ter.[CONTRA_CCY] and fxt.[UPLOADED_DATE_TIME] BETWEEN ter.DATE_FROM AND ter.DATE_TO    LEFT JOIN VISTA_STAGING.dbo.REF_FX_TIMELY_EX_REC_THRESHOLD ter2    ON fxt.[BUY_CCY] = ter2.[CONTRA_CCY] and fxt.[SELL_CCY] = ter2.[BASE_CCY] and fxt.[UPLOADED_DATE_TIME] BETWEEN ter2.DATE_FROM AND ter2.DATE_TO    GROUP BY       fxt.TRADE_ID,      fxo.INSTRUCTION_TYPE,     fxt.EXECUTED_DATE_TIME,     fxt.UPLOADED_DATE_TIME,     ter.[SPOT_TIMELY_REC_THRESHOLD],     ter.[FWD_TIMELY_REC_THRESHOLD],     ter2.[SPOT_TIMELY_REC_THRESHOLD],     ter2.[FWD_TIMELY_REC_THRESHOLD]        UNION        SELECT DISTINCT      t.MULTI_FUND_ID,     t.SM_SEC_TYPE,     t.TRD_AUTH_TIME,      MAX(t.EXECUTION_TIME),      cast(DATEDIFF(SECOND, t.TRD_AUTH_TIME, MAX(t.EXECUTION_TIME)) as decimal(38,2)) AS RECORDING_MINS,     COALESCE(ter.FWD_TIMELY_REC_THRESHOLD,ter2.FWD_TIMELY_REC_THRESHOLD,ter3.FWD_TIMELY_REC_THRESHOLD,ter4.FWD_TIMELY_REC_THRESHOLD),     'AL' as [SOURCE]    FROM #temp_trades_table t    LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD = t.[ORD_NUM]    LEFT JOIN (select distinct ORD_NUM, SEC_DESC1, DEALING_DESK, SM_SEC_GROUP from VISTA_REPORTING.dbo.PM_ORDERS) pm ON pm.ORD_NUM = oc.PM_ORD    LEFT JOIN VISTA_STAGING.dbo.REF_FX_TIMELY_EX_REC_THRESHOLD ter    ON SUBSTRING(pm.SEC_DESC1, 1,3) = ter.[BASE_CCY] and SUBSTRING(pm.SEC_DESC1, 7,3) = ter.[CONTRA_CCY] and t.TRD_AUTH_TIME BETWEEN ter.DATE_FROM AND ter.DATE_TO    LEFT JOIN VISTA_STAGING.dbo.REF_FX_TIMELY_EX_REC_THRESHOLD ter2    ON SUBSTRING(pm.SEC_DESC1, 1,3) = ter.[CONTRA_CCY] and SUBSTRING(pm.SEC_DESC1, 7,3) = ter.[BASE_CCY] and t.TRD_AUTH_TIME BETWEEN ter2.DATE_FROM AND ter2.DATE_TO    LEFT JOIN VISTA_STAGING.dbo.REF_FX_TIMELY_EX_REC_THRESHOLD ter3    ON SUBSTRING(t.DESC_INSTMT, 1,3) = ter.[BASE_CCY] and SUBSTRING(t.DESC_INSTMT, 7,3) = ter.[CONTRA_CCY] and t.TRD_AUTH_TIME BETWEEN ter3.DATE_FROM AND ter3.DATE_TO    LEFT JOIN VISTA_STAGING.dbo.REF_FX_TIMELY_EX_REC_THRESHOLD ter4    ON SUBSTRING(t.DESC_INSTMT, 1,3) = ter.[CONTRA_CCY] and SUBSTRING(t.DESC_INSTMT, 7,3) = ter.[BASE_CCY] and t.TRD_AUTH_TIME BETWEEN ter4.DATE_FROM AND ter4.DATE_TO    WHERE COALESCE(pm.[DEALING_DESK], t.DEALING_DESK) = 'FX' AND COALESCE(pm.SM_SEC_GROUP, t.SM_SEC_GROUP) = 'OPTION'    group by      t.MULTI_FUND_ID,     t.SM_SEC_TYPE,     t.TRD_AUTH_TIME,     COALESCE(ter.FWD_TIMELY_REC_THRESHOLD,ter2.FWD_TIMELY_REC_THRESHOLD,ter3.FWD_TIMELY_REC_THRESHOLD,ter4.FWD_TIMELY_REC_THRESHOLD)        IF OBJECT_ID('tempdb..#temp_exception_table', 'U') IS NOT NULL DROP TABLE #temp_exception_table    SELECT DISTINCT     tte.*,     CASE       WHEN tte.RECORDING_MINS > tte.TIMELY_REC_THRESHOLD THEN 1      ELSE 0     END AS VG_10,     CASE       WHEN tte.RECORDING_MINS > tte.TIMELY_REC_THRESHOLD THEN GETDATE()      ELSE null     END AS VG_10_CREATETIME    INTO #temp_exception_table    FROM #temp_tex tte        IF OBJECT_ID('tempdb..#COMBINED_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #COMBINED_EXCEPTIONS    SELECT DISTINCT     TRADE_ID,     RECORDING_MINS/60 as RECORDING_MINS,--turn the value from seconds into mins     VG_10,     VG_10_CREATETIME,     SOURCE    INTO #COMBINED_EXCEPTIONS    FROM #temp_exception_table            --Add records into FINAL_STATUS_UPDATE_TABLE    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    SELECT DISTINCT     CONCAT(TRADE_ID,'_10_', SOURCE) AS ID,     '1A2' AS STATUS,     NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table    FROM #COMBINED_EXCEPTIONS    WHERE VG_10 != 0             MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'FX',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'FX');            --Add records into AUDIT_TABLE    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    SELECT DISTINCT     et.TRADE_ID AS TRADE_ID,     OC.TRD_ORD AS TRD_ORD,     fxo.FXM_ORDER_ID AS ORDER_ID,     'Timely Recording' AS Exception_Type,     CONCAT(et.TRADE_ID,'_10_',[SOURCE]) AS ID,     NULL AS REASON,     NULL AS COMMENT,     'With Reviewer' AS Status,     NULL AS ClientExecID,     'FX' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],tdd3.[FULL_NAME],tdd4.[FULL_NAME],dd.[DEFAULT_DEALER]) AS DEALER,     '1A2' AS STATUS_ID,     fxo.INSTRUCTION_RECEIVED_DATE_TIME AS ORD_AUTH,     fxt.EXECUTED_DATE_TIME AS TRADE_EXEC    INTO #temp_audit    FROM #COMBINED_EXCEPTIONS et    left join (SELECT DISTINCT TRADE_ID, ORDER_ID, EXECUTED_DATE_TIME, DEALT_BY, PULL_DATE, ACCEPTED_BY FROM VISTA_REPORTING.dbo.FX_TRADES) fxt    on et.[TRADE_ID] = fxt.[TRADE_ID] and et.[SOURCE] = 'FX'    left join (SELECT DISTINCT FXM_ORDER_ID, MIN(INSTRUCTION_RECEIVED_DATE_TIME) as INSTRUCTION_RECEIVED_DATE_TIME, MIN(PULL_DATE) AS PULL_DATE FROM VISTA_REPORTING.dbo.FX_ORDERS GROUP BY FXM_ORDER_ID) fxo    on fxt.[ORDER_ID] = fxo.[FXM_ORDER_ID] and et.[SOURCE] = 'FX'    left join (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER, PULL_DATE FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t    ON et.[SOURCE] = 'AL' AND et.TRADE_ID = t.[MULTI_FUND_ID]    left join (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o    ON t.[ORD_NUM] = trd_o.[ORD_NUM]     left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc    ON trd_o.[ORD_NUM] = oc.[TRD_ORD]    LEFT JOIN (SELECT DISTINCT ORD_NUM, PULL_DATE, TRADER FROM Vista_Reporting.dbo.PM_ORDERS) pm    ON pm.ORD_NUM = oc.PM_ORD    left join  VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd    on tdd.[MG_USER_ID] = fxt.[DEALT_BY] AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2    on tdd2.[MG_USER_ID] = fxt.[ACCEPTED_BY] AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)    left join VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd3    on tdd3.[INITIALS]  = t.[TRD_TRADER] AND CAST(t.[PULL_DATE] AS DATE) BETWEEN CAST(tdd3.[DATE_FROM] AS DATE) AND CAST(tdd3.[DATE_TO] AS DATE)    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd4    on tdd4.[INITIALS] = pm.[TRADER] AND CAST(pm.[PULL_DATE] AS DATE) BETWEEN CAST(tdd4.[DATE_FROM] AS DATE) AND CAST(tdd4.[DATE_TO] AS DATE)    left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd     on dd.[REPORT_NAME] = 'Timely Recording' AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE],t.[PULL_DATE],pm.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)    WHERE et.VG_10 != 0        MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_FX AS T     USING #temp_audit AS S    ON (T.ID = S.ID )    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID, Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (TRADE_ID, TRD_ORD, ORDER_ID, Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);            IF      OBJECT_ID('VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FX_TABLE', 'U') IS NULL     SELECT distinct *      INTO VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FX_TABLE      FROM #COMBINED_EXCEPTIONS    ELSE      IF OBJECT_ID('tempdb..#temp_TE_table', 'U') IS NOT NULL      DROP TABLE #temp_TE_table     SELECT distinct *      INTO #TEMP_TE_TABLE     FROM #COMBINED_EXCEPTIONS             MERGE VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_FX_TABLE AS T     USING #TEMP_TE_TABLE AS S    ON T.TRADE_ID = S.TRADE_ID and t.SOURCE = s.SOURCE    WHEN MATCHED     THEN UPDATE     SET       TRADE_ID= CASE WHEN S.VG_10 > T.VG_10 THEN S.TRADE_ID ELSE T.TRADE_ID END,      RECORDING_MINS = CASE WHEN S.VG_10 > T.VG_10 THEN S.RECORDING_MINS ELSE T.RECORDING_MINS END,      VG_10= CASE WHEN S.VG_10 > T.VG_10 THEN S.VG_10 ELSE T.VG_10 END,      VG_10_CREATETIME = CASE WHEN S.VG_10 > T.VG_10 THEN S.VG_10_CREATETIME ELSE T.VG_10_CREATETIME END,      SOURCE = CASE WHEN S.VG_10 > T.VG_10 THEN S.SOURCE ELSE T.SOURCE END        WHEN NOT MATCHED     THEN     INSERT     (TRADE_ID,     RECORDING_MINS,     VG_10,     VG_10_CREATETIME,     SOURCE)    VALUES     (S.TRADE_ID,     S.RECORDING_MINS,     S.VG_10,     S.VG_10_CREATETIME,     S.SOURCE);        IF OBJECT_ID('tempdb..#temp_max_trade_touch', 'U') IS NOT NULL DROP TABLE #temp_max_trade_touch    IF OBJECT_ID('tempdb..#temp_tex', 'U') IS NOT NULL DROP TABLE #temp_tex    IF OBJECT_ID('tempdb..#temp_exception_table', 'U') IS NOT NULL DROP TABLE #temp_exception_table    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit            END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_10_TIMELY_RECORDING_LL  CreateDate: 2025-06-26 18:07:41.580  ModifyDate: 2025-06-26 18:07:41.580  --- DEFINITION START ---  -- =============================================    -- Author:  <Chandarana, Sohini>    -- Create date: <04/23/2018>    -- Description:     -- <If Post_Date != Execution_Date then it is an exception    -- if Post_Date == Execution_Date then:    -- for Electronic_Trades     -- if Post_DateTime - Execution_DateTime > 60 then it is     -- an exception    -- for Non-Electronic_Trades     -- if Post_DateTime - Execution_DateTime > 60/120 (depending    -- on subtype thresholds) then it is an exception    -- For USD base, Primary market and Post_Date    -- Stored procedure as appropriated from VG_10_TIMELY_RECORDING_FI>    -- =============================================        -- ***************VERSION CONTROL***************    -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.        -- 2019-04-11 - DDC: Inclusion of new HOLIDAY/WEEKEND offset calculation    -- *********************************************            CREATE PROCEDURE [dbo].[VG_10_TIMELY_RECORDING_LL]     -- Add the parameters for the stored procedure here     -- @Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         --DECLARE @DATE_FILTER AS DATE --Declare date filter to only select data from current pull date     --SET @DATE_FILTER = CONVERT(DATE, GETDATE())         -- Get associated information for Timely Recording exception     IF OBJECT_ID('tempdb..#rebased_time', 'U') IS NOT NULL DROP TABLE #rebased_time     select      --t.ORD_NUM      tr.MULTI_FUND_ID      ,tr.TRD_CURRENCY      ,tr.EXECUTION_TIME      ,tr.TRD_AUTH_TIME      ,tr.TRD_TRADE_DATE      ,p.PRIMARY_MARKET      ,p.INST_TYPE      ,p.DEBT_DERIV      ,case        when (pl.VENUE ='MANUAL PL') then pl.VENUE       when (pl.VENUE is NULL) then 'MANUAL'        else 'ELECTRONIC' -- Electronic/Non-Electronic      end as VENUE      ,p.COUNTRY     into #rebased_time     from     -- Fields such as TRD_TRADE_DATE can change over time (and have been observed to do so)     -- We therefore take values from TRADES at most recent point in time.       (       SELECT DISTINCT         tr.ORD_NUM        ,tr.MULTI_FUND_ID        ,tr.TRD_CURRENCY        ,tr.EXECUTION_TIME        ,tr.TRD_AUTH_TIME        ,tr.TRD_TRADE_DATE       FROM VISTA_REPORTING.dbo.TRADES as tr       INNER JOIN (         SELECT MULTI_FUND_ID, MAX(TOUCH_COUNT) AS MAX_TOUCH         FROM VISTA_REPORTING.dbo.TRADES         GROUP BY MULTI_FUND_ID       ) as t2 on (tr.MULTI_FUND_ID=t2.MULTI_FUND_ID) and (tr.TOUCH_COUNT=t2.MAX_TOUCH)      ) as tr     --left join (select distinct ORD_NUM, DEALING_DESK, CUSIP FROM VISTA_REPORTING.dbo.TRD_ORDERS) as t on tr.ORD_NUM=t.ORD_NUM     --left join VISTA_REPORTING.dbo.INSTRUMENTS i on i.CUSIP=t.CUSIP     left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p on p.MULTI_FUND_ID=tr.MULTI_FUND_ID     left join VISTA_REPORTING.dbo.PLACEMENTS pl on pl.MULTI_FUND_ID=tr.MULTI_FUND_ID     left join VISTA_STAGING.dbo.GMT_OFFSET g on g.COUNTRY=p.COUNTRY and g.DATE=CONVERT(date,tr.TRD_AUTH_TIME) -- Get GMT offset by country     where       p.DEALING_DESK='Leveraged Finance'       and tr.MULTI_FUND_ID is not NULL -- Only leveraged loans orders with an availible MULTI_FUND_ID         IF OBJECT_ID('tempdb..#holiday_list', 'U') IS NOT NULL DROP TABLE #holiday_list     SELECT DISTINCT CLOSURE_DATES      INTO #holiday_list      FROM VISTA_STAGING.dbo.HOLIDAYS WHERE COUNTRY_CODE='GB'          IF OBJECT_ID('tempdb..#holiday_offset', 'U') IS NOT NULL DROP TABLE #holiday_offset     SELECT --create a table by MULTI_FUND_ID to account for weekend and holiday offsets to rebased datetimes     t.MULTI_FUND_ID,     t.EXECUTION_TIME,     t.TRD_AUTH_TIME,     DATEADD(day,1,MIN(t.EXECUTION_TIME)) REBASED_AUTH_TIME,     CASE       WHEN  DATENAME(dw, DATEADD(day,1,MIN(t.EXECUTION_TIME))) = 'Friday' AND         (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,1,MIN(t.EXECUTION_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1          THEN           CASE         WHEN DATENAME(dw, DATEADD(day,1,MIN(t.EXECUTION_TIME))) = 'Friday' THEN 2 --if the EXECUTION_TIME is on a Friday a 2 day offset may be necessary         WHEN DATENAME(dw, DATEADD(day,1,MIN(t.EXECUTION_TIME))) = 'Saturday' THEN 1         WHEN DATENAME(dw, DATEADD(day,1,MIN(t.EXECUTION_TIME))) = 'Sunday' THEN 0          END       ELSE       CASE        WHEN DATENAME(dw, MIN(t.EXECUTION_TIME)) = 'Friday' THEN 2 --if the EXECUTION_TIME is on a Friday a 2 day offset may be necessary        WHEN DATENAME(dw, MIN(t.EXECUTION_TIME)) = 'Saturday' THEN 1        WHEN DATENAME(dw, MIN(t.EXECUTION_TIME)) = 'Sunday' THEN 0        ELSE 0       END      END AS WEEKEND_OFFSET,     CASE       WHEN DATENAME(dw, DATEADD(day,1,MIN(t.EXECUTION_TIME))) = 'Friday'        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,1,MIN(t.EXECUTION_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,4,MIN(t.EXECUTION_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1         THEN 2      WHEN DATENAME(dw, MIN(t.EXECUTION_TIME)) = 'Friday'        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,3,MIN(t.EXECUTION_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1         THEN 1      WHEN (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,1,MIN(t.EXECUTION_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,2,MIN(t.EXECUTION_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1         THEN 2      ELSE (SELECT COUNT(DISTINCT CLOSURE_DATES)          FROM #holiday_list          WHERE CONVERT(DATE, CLOSURE_DATES, 103)          BETWEEN CONVERT(DATE, MIN(t.EXECUTION_TIME), 103)          AND CONVERT(DATE, DATEADD(day,1,MIN(t.EXECUTION_TIME)), 103))      END AS HOLIDAY_OFFSET     INTO #holiday_offset     FROM VISTA_REPORTING.dbo.TRADES t     GROUP BY      t.MULTI_FUND_ID,      t.EXECUTION_TIME,      t.TRD_AUTH_TIME          -- Depending on instrument type/Venue, flag exception if the difference between EXECUTION_TIME and AUTH_TIME     -- is greater than the instrument requirement.     IF OBJECT_ID('tempdb..#timely_rec_table', 'U') IS NOT NULL DROP TABLE #timely_rec_table     select distinct     r.MULTI_FUND_ID     ,r.EXECUTION_TIME     ,r.PRIMARY_MARKET     ,r.DEBT_DERIV     ,min(r.TRD_AUTH_TIME) AS MIN_POST_DATETIME     ,DATEDIFF(minute, r.EXECUTION_TIME, min(r.TRD_AUTH_TIME)) as DATE_DIFF     ,r.INST_TYPE     ,'Across days'  as TRADE_TYPE     ,CONVERT(VARCHAR(50),       DATEDIFF(day, r.TRD_TRADE_DATE, CONVERT(DATE, MIN(r.TRD_AUTH_TIME)))) + ' days' -- If it is an Inter day exception, display the number of days between execution and recording     as Timespan      ,case      when r.TRD_TRADE_DATE < CONVERT(DATE,min(r.TRD_AUTH_TIME)) -- Whenever the trade date is before the auth date        AND NOT (ISNULL(r.PRIMARY_MARKET,0) = 1 and r.TRD_CURRENCY = 'USD') -- DO not flag for USD based primary market debt, we do this in the step below.        THEN 1      when r.TRD_CURRENCY = 'USD'       and r.PRIMARY_MARKET = 1       and min(r.TRD_AUTH_TIME) >= DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET), DATEADD(day, DATEDIFF(day, 0, MIN(r.TRD_TRADE_DATE)), '10:00:00'))       then 1      else 0     end as TIMELY_RECORDING_EXCEPTION     into #timely_rec_table     from #rebased_time r     left join #holiday_offset h on h.MULTI_FUND_ID=r.MULTI_FUND_ID     group by         r.MULTI_FUND_ID,      r.PRIMARY_MARKET,      r.INST_TYPE,      r.VENUE,      r.EXECUTION_TIME,      r.TRD_TRADE_DATE,      --r.TRD_AUTH_TIME,      r.TRD_CURRENCY,      r.DEBT_DERIV,      h.WEEKEND_OFFSET,      h.HOLIDAY_OFFSET      --SELECT * FROM #timely_rec_table WHERE MULTI_FUND_ID = 645312               -- Use #timely_recording to populate FINAL_STATUS_UPDATE_TABLE     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     select distinct      CONCAT(MULTI_FUND_ID,'_10') AS ID,      '1A1' AS STATUS,      NULL AS FINAL_UPDATED_TIME     into #temp_status_table     from #timely_rec_table     where TIMELY_RECORDING_EXCEPTION = 1          MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET       T.ID=T.ID,       T.STATUS=T.STATUS,       T.DEALING_DESK = 'Leveraged Finance',       T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME,'Leveraged Finance');         --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      ex.MULTI_FUND_ID AS MULTI_FUND_ID,      t.ORD_NUM AS TRD_ORD,      NULL AS PM_ORD,      'Timely Recording' AS Exception_Type,      CONCAT(ex.MULTI_FUND_ID,'_10') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'For Review' AS Status,      NULL AS ClientExecID,      'Leveraged Finance' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      NULL AS DEALER,      '1A1' AS STATUS_ID,      trd_o.AUTH_TIME AS ORD_AUTH,      t.EXECUTION_TIME AS TRADE_EXEC     INTO #temp_audit     FROM #timely_rec_table ex     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t     ON ex.MULTI_FUND_ID = t.MULTI_FUND_ID     LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o     ON t.ORD_NUM = trd_o.ORD_NUM     where TIMELY_RECORDING_EXCEPTION = 1          MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);             IF OBJECT_ID('VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_LL_TABLE', 'U') IS NULL          select distinct     --t.ORD_NUM,     tr.MULTI_FUND_ID,     t.DEALING_DESK,     n.TRADE_TYPE,     MAX(n.Timespan) AS Timespan,     MAX(coalesce(n.TIMELY_RECORDING_EXCEPTION, 0)) as TIMELY_RECORDING_EXCEPTION,     case      when MAX(TIMELY_RECORDING_EXCEPTION) = 1 then GETDATE() else NULL     end as TREC_CREATETIME     into VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_LL_TABLE     from VISTA_REPORTING.dbo.TRADES tr     left join VISTA_REPORTING.dbo.TRD_ORDERS t on tr.ORD_NUM=t.ORD_NUM     left join #timely_rec_table n on tr.MULTI_FUND_ID=n.MULTI_FUND_ID     where t.DEALING_DESK = 'Leveraged Finance'      --and t.PULL_DATE=@DATE_FILTER      and tr.MULTI_FUND_ID IS NOT NULL     GROUP BY tr.MULTI_FUND_ID, t.DEALING_DESK, n.TRADE_TYPE             ELSE         IF OBJECT_ID('tempdb..#temp_tr_table', 'U') IS NOT NULL DROP TABLE #temp_tr_table         SELECT DISTINCT     --t.ORD_NUM,     tr.MULTI_FUND_ID,     t.DEALING_DESK,     n.TRADE_TYPE,     MAX(n.Timespan) AS Timespan,     MAX(coalesce(n.TIMELY_RECORDING_EXCEPTION, 0)) as TIMELY_RECORDING_EXCEPTION,     case      when MAX(TIMELY_RECORDING_EXCEPTION) = 1 then GETDATE() else NULL     end as TREC_CREATETIME     into #temp_tr_table     from VISTA_REPORTING.dbo.TRADES tr     left join VISTA_REPORTING.dbo.TRD_ORDERS t on tr.ORD_NUM=t.ORD_NUM     left join #timely_rec_table n on tr.MULTI_FUND_ID=n.MULTI_FUND_ID     where t.DEALING_DESK = 'Leveraged Finance'      --and t.PULL_DATE=@DATE_FILTER     and tr.MULTI_FUND_ID IS NOT NULL     GROUP BY tr.MULTI_FUND_ID, t.DEALING_DESK, n.TRADE_TYPE         MERGE VISTA_STAGING.dbo.VG_10_TIMELY_RECORDING_LL_TABLE AS T     USING #temp_tr_table AS S     ON T.MULTI_FUND_ID=S.MULTI_FUND_ID      WHEN MATCHED      THEN       UPDATE SET         T.DEALING_DESK = S.DEALING_DESK,       T.TRADE_TYPE = CASE WHEN S.TIMELY_RECORDING_EXCEPTION > T.TIMELY_RECORDING_EXCEPTION THEN S.TRADE_TYPE ELSE T.TRADE_TYPE END,       T.Timespan = CASE WHEN S.TIMELY_RECORDING_EXCEPTION > T.TIMELY_RECORDING_EXCEPTION THEN S.Timespan ELSE T.Timespan END,       T.TIMELY_RECORDING_EXCEPTION = CASE WHEN S.TIMELY_RECORDING_EXCEPTION > T.TIMELY_RECORDING_EXCEPTION THEN S.TIMELY_RECORDING_EXCEPTION ELSE T.TIMELY_RECORDING_EXCEPTION END,       T.TREC_CREATETIME = CASE WHEN S.TIMELY_RECORDING_EXCEPTION > T.TIMELY_RECORDING_EXCEPTION THEN S.TREC_CREATETIME ELSE T.TREC_CREATETIME END     WHEN NOT MATCHED       THEN INSERT (MULTI_FUND_ID, DEALING_DESK, TRADE_TYPE, TIMELY_RECORDING_EXCEPTION, TREC_CREATETIME)        VALUES (S.MULTI_FUND_ID, S.DEALING_DESK, S.TRADE_TYPE, S.TIMELY_RECORDING_EXCEPTION, S.TREC_CREATETIME);        IF OBJECT_ID('tempdb..#rebased_time', 'U') IS NOT NULL DROP TABLE #rebased_time    IF OBJECT_ID('tempdb..#holiday_offset', 'U') IS NOT NULL DROP TABLE #holiday_offset    IF OBJECT_ID('tempdb..#timely_rec_table', 'U') IS NOT NULL DROP TABLE #timely_rec_table    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    IF OBJECT_ID('tempdb..#temp_tr_table', 'U') IS NOT NULL DROP TABLE #temp_tr_table    END            --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_11_TIMELY_RELEASE_EQ  CreateDate: 2025-06-26 18:06:59.027  ModifyDate: 2025-06-26 18:06:59.027  --- DEFINITION START ---  -- =============================================    -- Author:  <da Costa, David>    -- Create date: <20/10/2017>    -- Description:     -- <For EQ only. Difference between Release DateTime and     -- Approved DateTime. IF Difference is greater than 23 mins    -- raise as an exception>    -- =============================================            -- ***************VERSION CONTROL***************    -- 29/11/2017 - DDC: MIN() and MAX() of OPENTIME4    -- and CLOSETIME removed. HOLIDAY and WEEKEND     -- offsets added rebasing related to Asian     -- Convertible Bonds.    --    -- 11/12/2017 - DDC: Changes made to ensure that script     -- only ever updates existing records always ensuring     -- the highest level exception is reported and     -- inserts new ones if no exception has been raised.        -- 04/01/2018 - DDC: Amendment made to only run  exception    -- calculations on the data for the day the exception is     -- being pulled        -- 30/01/2018 - DDC: Exception threshold for local market    -- non-ET Options, non-Convertible Bonds and non-OTC changed    -- from 20 minutes to 32 minutes        -- 2018-0713 - WH: Update to use the Route datetime provided in     -- the EMSX files (these come through SFTP). This update is only     -- applied for orders authorised on or after 19 June 2018 (as agreed with EQDD).        -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.        -- 2019-02-13 - DDC: Changed threshold from 32 mins to 20 mins for any order     -- authorised after 2019-13-02        -- 2019-02-21 - DDC: Logic changed to use refrence tables and not hardcoded values,    -- reference table is VISTA_STAGING.dbo.TIMELY_RELEASE_REFERENCE_TABLE        -- 2019-03-12 - DDC: inclusion of comparison threshold on TIMRELY_RELEASE exceptions        -- 2019-04-11 - DDC: Inclusion of new HOLIDAY/WEEKEND offset calculation        -- 2019-12-23 - DDC: Inclusion of changes to consider Asian trading desks in the Timely Release calculation        -- 2020-01-09 - DDC: Bug fix included to remove false positives being raised on Asian Desks        -- 2020-07-15 - DDC: CR to use CREATE_DATE for CONV_BOND        ---------------------------------------New way of commenting-------------------------------------------        --2021-08-02 Matej Miter - created for Jira:    --T-0-17050 - In order to capture weekend offset when there is few days before weekend holiday days created additional logic        --2021-08-13, Matej Miter created for Jira:    --T-0-17253 - Added few more changes to holiday offset table in order to capture properly weekend and holiday offsets.    --Added RU to be captured within holiday offset, created additional ref table Weekend_Calandar in order to capture full set of weekend days for specific country        --2022-02-02, Matej Miter created for Jira:    --SURVG-560 - Enhancements 2022 - Adding new logic for calculating both holidays and weekend offset to improve efficiency, additionally all holidays should be taken into consideration  now and not only Uk one.          --2022-04-05, Matej Miter created for Jira:    --SURVG-670 - removed where clause under temp table #tzs in order to bring GMTOFFSET for GB as well as specific Order country.     --This is so it can later be used to calculate local opening and closing market times agains UK ones with taking into consideration GMT offset from both sides.         --2022-07-26, Matej Miter created for Jira    --SURVG-719 - Added additional check before applying exception to specific record in order to avoid raising an exception when local market is still closed, This happened with Indian Equities          -- *********************************************    CREATE PROCEDURE [dbo].[VG_11_TIMELY_RELEASE_EQ]     -- Add the parameters for the stored procedure here     -- @Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         --DECLARE @DATE_FILTER AS DATE --Declare date filter to only select data from current pull date     --SET @DATE_FILTER = CONVERT(DATE, GETDATE())            --Insert statements for procedure here         DECLARE @START_TIME as datetime     SET @START_TIME = GETDATE()         -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         IF OBJECT_ID('tempdb..#distinct_ids', 'U') IS NOT NULL DROP TABLE #distinct_ids     SELECT DISTINCT       ol.ORD_NUM,      oc.TRD_ORD,      t.MULTI_FUND_ID     INTO #distinct_ids     FROM Vista_Reporting.dbo.ORDER_LEVEL_EXCEPTION_TABLE ol     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD = ol.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM = oc.TRD_ORD                IF OBJECT_ID('VISTA_REPORTING.dbo.MASTER_PM_ORDER', 'U') IS NOT NULL     DELETE FROM #distinct_ids where NOT EXISTS (SELECT DISTINCT od.PM_ORD                FROM Vista_Reporting.dbo.ONE_DAY_PROCESSING_IDS_ALADDIN od WHERE od.PM_ORD=#distinct_ids.ORD_NUM)             IF OBJECT_ID('tempdb..#todays_pm_orders', 'U') IS NOT NULL DROP TABLE #todays_pm_orders                  SELECT *      INTO #todays_pm_orders     FROM Vista_Reporting.dbo.PM_ORDERS pm      WHERE EXISTS (SELECT di.ORD_NUM FROM #distinct_ids di WHERE di.ORD_NUM=pm.ORD_NUM)              IF OBJECT_ID('tempdb..#todays_trades', 'U') IS NOT NULL DROP TABLE #todays_trades                  SELECT *      INTO #todays_trades     FROM Vista_Reporting.dbo.TRADES t     WHERE EXISTS (SELECT di.MULTI_FUND_ID FROM #distinct_ids di WHERE di.MULTI_FUND_ID=t.MULTI_FUND_ID)             IF OBJECT_ID('tempdb..#todays_placements', 'U') IS NOT NULL DROP TABLE #todays_placements                SELECT *      INTO #todays_placements     FROM Vista_Reporting.dbo.PLACEMENTS pl     WHERE EXISTS (SELECT tt.PLACEMENT_NUM FROM #todays_trades tt WHERE tt.PLACEMENT_NUM=pl.PLACEMENT_NUM)             IF OBJECT_ID('tempdb..#todays_instruments', 'U') IS NOT NULL DROP TABLE #todays_instruments     SELECT *      INTO #todays_instruments     FROM Vista_Reporting.dbo.INSTRUMENTS i     WHERE EXISTS (SELECT tt.CUSIP           FROM (SELECT DISTINCT CUSIP FROM #todays_trades          UNION          SELECT DISTINCT CUSIP FROM #todays_pm_orders) tt          WHERE tt.CUSIP=i.CUSIP)             --1. Create a temp table holding the timezones     IF OBJECT_ID('tempdb..#tzs', 'U') IS NOT NULL DROP TABLE #tzs     SELECT DISTINCT        t.COUNTRY,       t.GMTOFFSETMINS,       t.PERIODSTART,       ROW_NUMBER() OVER (PARTITION BY t.COUNTRY ORDER BY t.PERIODSTART) RowNum     INTO #tzs     FROM VISTA_REPORTING.dbo.TIMEZONES t     --SURVG-670     --WHERE EXISTS (SELECT i.COUNTRY FROM #todays_instruments i WHERE i.COUNTRY = t.COUNTRY)     --END of SURVG-670         IF OBJECT_ID('tempdb..#tz_periods', 'U') IS NOT NULL DROP TABLE #tz_periods     SELECT       base.COUNTRY,      base.GMTOFFSETMINS,      base.PERIODSTART,      ISNULL(next.PERIODSTART,'9999-12-31') AS PERIOD_END     INTO #tz_periods     FROM #tzs base     LEFT JOIN #tzs next     ON base.COUNTRY = next.COUNTRY     AND base.RowNum + 1 = next.RowNum         IF OBJECT_ID('tempdb..#temp_release_table', 'U') IS NOT NULL DROP TABLE #temp_release_table     SELECT       oc.PM_ORD AS ORD_NUM,      p.MULTI_FUND_ID,      RELEASE_DATETIME,      ROUTE_DATETIME,      p.CREATE_TIME     INTO #temp_release_table     FROM Vista_Reporting.dbo.PLACEMENTS p     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON p.ORD_NUM = oc.TRD_ORD     UNION     SELECT          oc.PM_ORD AS ORD_NUM,       MULTI_FUND_ID,      EXECUTION_TIME, --Use execution       EXECUTION_TIME,      EXECUTION_TIME     FROM #todays_trades t     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON t.ORD_NUM = oc.TRD_ORD             --2. For each Order, find the first release or execution time.     IF OBJECT_ID('tempdb..#First_release', 'U') IS NOT NULL DROP TABLE #First_release     SELECT       a.ORD_NUM,       MIN(CREATE_TIME) AS First_Create,      MIN(a.RELEASE_DATETIME) AS First_Release,      MIN(a.ROUTE_DATETIME) AS First_Route     INTO #First_release     FROM #temp_release_table a     INNER JOIN (SELECT ORD_NUM, MIN(AUTH_TIME) AS MIN_AUTH         FROM #todays_pm_orders         GROUP BY ORD_NUM) pm ON pm.ORD_NUM=a.ORD_NUM           AND (pm.MIN_AUTH <= COALESCE(a.RELEASE_DATETIME, '9999-11-30 00:00:00.000') AND pm.MIN_AUTH <= COALESCE(a.ROUTE_DATETIME, '9999-11-30 00:00:00.000'))     GROUP BY       a.ORD_NUM             IF OBJECT_ID('tempdb..#order_details', 'U') IS NOT NULL DROP TABLE #order_details     SELECT DISTINCT              --Create table with RELEASE_DATETIMES by PM Order No       po.ORD_NUM,              --and join on TIMEZONES table to get the offset required     po.AUTH_TIME,               --for GMT conyversion     --i2.COUNTRY as countrys,                                                    --i2.MARKET,     CASE       WHEN i2.MARKET = 'EURO' THEN 'DE'      WHEN i2.MARKET = 'YANKEE' THEN 'US'      WHEN i2.MARKET = 'GLBL' THEN 'GB'      ELSE i2.MARKET     END AS COUNTRY,     MIN(pr.INST_TYPE) AS INST_TYPE,     MAX(pr.PRIMARY_MARKET) AS PRIMARY_MARKET,     CASE      WHEN MIN(pr.INST_TYPE) in ('CONV BOND') THEN f_r.First_Create      ELSE f_r.First_Release      END AS RELEASE_DATETIME,     CASE       WHEN MIN(pr.INST_TYPE) in ('CONV BOND') THEN f_r.First_Create      ELSE f_r.First_Route      END AS ROUTE_DATETIME,     po.ORDER_REASON_DECODE     INTO #order_details     FROM #todays_pm_orders po     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD=po.ORD_NUM     LEFT JOIN #todays_trades t ON t.ORD_NUM=oc.TRD_ORD     LEFT JOIN Vista_Reporting.dbo.PLACEMENTS p ON p.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.ORD_NUM=oc.TRD_ORD     LEFT JOIN #First_release f_r ON po.ORD_NUM = f_R.ORD_NUM     OUTER APPLY (SELECT TOP 1 i.* FROM #todays_instruments i         WHERE (i.CUSIP=coalesce(t.CUSIP, po.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(t.EXECUTION_TIME, po.AUTH_TIME)))         ORDER BY i.DATE DESC) as i2     where po.DEALING_DESK = 'Equity'      GROUP BY      po.ORD_NUM,      po.AUTH_TIME,      CASE        WHEN i2.MARKET = 'EURO' THEN 'DE'       WHEN i2.MARKET = 'YANKEE' THEN 'US'       WHEN i2.MARKET = 'GLBL' THEN 'GB'       ELSE i2.MARKET      END,      f_r.First_Release,      f_r.First_Route,      f_r.First_Create,      po.ORDER_REASON_DECODE          IF OBJECT_ID('tempdb..#order_release_datetime_table', 'U') IS NOT NULL DROP TABLE #order_release_datetime_table     SELECT       od.* ,     tz.GMTOFFSETMINS AS GMTOFFSET,     tz2.GMTOFFSETMINS AS UK_GMTOFFSET     INTO #order_release_datetime_table      FROM #order_details od     LEFT JOIN #tz_periods tz ON od.COUNTRY = tz.COUNTRY AND od.RELEASE_DATETIME >=tz.PERIODSTART AND od.RELEASE_DATETIME < tz.PERIOD_END     LEFT JOIN #tz_periods tz2 ON tz2.COUNTRY = 'GB' AND od.RELEASE_DATETIME >=tz2.PERIODSTART AND od.RELEASE_DATETIME < tz2.PERIOD_END -- Find the UK offset from GMT. THis is used for finding the difference between GMT and BST for UK daylight savings times.               --and po.PULL_DATE=@DATE_FILTER         --select * from #order_release_datetime_table where ORD_NUM = 926468             /* 07-11-2019:        Currently we do not take into account the exchange but this may become a requirment in the future        We have been given opening times for two exchanges in China (Shenzhen and Shanghai) however as they        have the same opening time and the GMT offset is the same there will be no impact in the short term.         In future howeverwe may need to consider exchange which will mean finding additional data in Aladdin      */     IF OBJECT_ID('tempdb..#gmt_open_close', 'U') IS NOT NULL DROP TABLE #gmt_open_close         SELECT                                                          --Create temporary table with all the global exchanges'     po.ORD_NUM,              --opening and closing times converted to GMT     rd.GMTOFFSET,     er.min_open as local_open_time,     er.Max_close as local_close_time,     DATEADD(minute,-1*(ISNULL(GMTOFFSET,0)-ISNULL(UK_GMTOFFSET,0)),min_open) AS UK_open_time,     DATEADD(minute,-1*(ISNULL(GMTOFFSET,0)-ISNULL(UK_GMTOFFSET,0)),max_close) AS UK_close_time,     rd.COUNTRY     INTO #gmt_open_close     FROM #todays_pm_orders po     --LEFT JOIN VISTA_REPORTING.dbo.INSTRUMENTS i ON i.CUSIP=po.CUSIP     JOIN #order_release_datetime_table rd ON rd.ORD_NUM=po.ORD_NUM     LEFT JOIN (SELECT COUNTRY, MIN(CONVERT(TIME,OPENTIME)) AS min_open, MAX(CONVERT(TIME,CLOSETIME)) AS Max_close FROM VISTA_REPORTING.dbo.EXCHANGE_REFERENCE WHERE MARKET_TIMES = 1 GROUP BY COUNTRY) er      ON rd.COUNTRY = er.COUNTRY     --WHERE po.PULL_DATE=@DATE_FILTER     GROUP BY      po.ORD_NUM,      po.CUSIP,      rd.COUNTRY,      rd.GMTOFFSET,      rd.UK_GMTOFFSET,      er.min_open,      er.Max_close         IF OBJECT_ID('tempdb..#gmt_open_close_fin', 'U') IS NOT NULL DROP TABLE #gmt_open_close_fin     SELECT      *,      (DATEPART(hour, UK_open_time) * 60) + (DATEPART(minute, UK_open_time) ) AS UK_open_time_minutes     INTO #gmt_open_close_fin     FROM #gmt_open_close     --SELECT * FROM #gmt_open_close_fin WHERE ORD_NUM = 926468             --SURVG-560     --T-0-17253 - Added Russia into holiday list     IF OBJECT_ID('tempdb..#holiday_list', 'U') IS NOT NULL DROP TABLE #holiday_list     SELECT DISTINCT CLOSURE_DATES , COUNTRY_CODE     INTO #holiday_list      FROM VISTA_STAGING.dbo.HOLIDAYS     --Commenting this out as we want to take into consideration holidays from all countries within Holiday table     --WHERE COUNTRY_CODE IN ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW', 'GB','RU','DE','ES')          IF OBJECT_ID('tempdb..#todays_pm_orders_final', 'U') IS NOT NULL DROP TABLE #todays_pm_orders_final     SELECT MIN(po.AUTH_TIME) AS MIN_AUTH_TIME,         po.ORD_NUM,         po.COUNTRY     INTO #todays_pm_orders_final      FROM #todays_pm_orders po     group by          po.ORD_NUM,         po.COUNTRY         IF OBJECT_ID('tempdb..#holiday_offset', 'U') IS NOT NULL DROP TABLE #holiday_offset     SELECT  --create a table by MULTI_FUND_ID to account for weekend and holiday offsets to rebased datetimes     --t.MULTI_FUND_ID,     --t.EXECUTION_TIME,     --t.TRD_AUTH_TIME,     po.ORD_NUM,     po.COUNTRY,     po.MIN_AUTH_TIME,     CASE WHEN po.COUNTRY in (select country_code from VISTA_STAGING.dbo.HOLIDAYS)       THEN (select count(1) from VISTA_STAGING.dbo.WEEKEND_CALENDAR_TABLE       where CONVERT(DATE, Dates, 103)       between CONVERT(DATE,DATEADD(day,1,po.MIN_AUTH_TIME), 103)       AND CONVERT(DATE,CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN MIN(rld.RELEASE_DATETIME) ELSE MIN(rld.ROUTE_DATETIME) END, 103) and Weekend_days in (6,7))      ELSE 0 END AS WEEKEND_OFFSET,     --T-0-17253 - removed TW,JP and Indonesia and added into separate filter     CASE       --T-0-17253 - created additional filter with new logic only for countires that we had false positive exceptions but will need to change for all countires      WHEN po.COUNTRY in (select Country_code from VISTA_STAGING.dbo.HOLIDAYS)       THEN (SELECT COUNT(DISTINCT CLOSURE_DATES)          FROM #holiday_list          WHERE CONVERT(DATE, CLOSURE_DATES, 103)          BETWEEN CONVERT(DATE,po.MIN_AUTH_TIME, 103)          AND CONVERT(DATE,CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN MIN(rld.RELEASE_DATETIME) ELSE MIN(rld.ROUTE_DATETIME) END, 103)         AND po.COUNTRY = COUNTRY_CODE)      ELSE 0 END as HOLIDAY_OFFSET     INTO #holiday_offset      FROM #todays_pm_orders_final po     --T-0-17253 - additional join to take out route datetime from placements and use as end point for holiday and weekend offsets     LEFT JOIN #order_release_datetime_table rld on po.ORD_NUM = rld.ORD_NUM     LEFT JOIN VISTA_STAGING.dbo.TIMELY_RELEASE_REFERENCE_TABLE trr ON po.MIN_AUTH_TIME >= trr.DATE_FROM AND po.MIN_AUTH_TIME < trr.DATE_TO     --End of T-0-17253     GROUP BY      po.ORD_NUM,     po.COUNTRY,     po.MIN_AUTH_TIME,     trr.RELEASE_VAR_USED      --po.AUTH_TIME         --End of --SURVG-560     /*     --T-0-17253 - Added Russia into holiday list     IF OBJECT_ID('tempdb..#holiday_list', 'U') IS NOT NULL DROP TABLE #holiday_list     SELECT DISTINCT CLOSURE_DATES , COUNTRY_CODE     INTO #holiday_list      FROM VISTA_STAGING.dbo.HOLIDAYS      WHERE COUNTRY_CODE IN ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW', 'GB','RU')     --End of T-0-17253          IF OBJECT_ID('tempdb..#holiday_offset', 'U') IS NOT NULL DROP TABLE #holiday_offset     SELECT --create a table by MULTI_FUND_ID to account for weekend and holiday offsets to rebased datetimes     --t.MULTI_FUND_ID,     --t.EXECUTION_TIME,     --t.TRD_AUTH_TIME,     po.ORD_NUM,     po.COUNTRY,     MIN(po.AUTH_TIME) AS MIN_AUTH_TIME,     --DATEADD(day,1,MIN(t.EXECUTION_TIME)) REBASED_AUTH_TIME,     CASE       WHEN  DATENAME(dw, DATEADD(day,1,MIN(po.AUTH_TIME))) = 'Friday' AND         (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,1,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1          THEN           CASE         WHEN DATENAME(dw, DATEADD(day,1,MIN(po.AUTH_TIME))) = 'Friday' THEN 2 --if the EXECUTION_TIME is on a Friday a 2 day offset may be necessary         WHEN DATENAME(dw, DATEADD(day,1,MIN(po.AUTH_TIME))) = 'Saturday' THEN 1         WHEN DATENAME(dw, DATEADD(day,1,MIN(po.AUTH_TIME))) = 'Sunday' THEN 0          END       --T-0-17050 - this check ensures to capture weekend offset properly when we have authorisation time on Wednesday and two days of holiday before weekend        WHEN  DATENAME(dw, DATEADD(day,1,MIN(po.AUTH_TIME))) = 'Thursday' AND         (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,1,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1          AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,2,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1          THEN           CASE         WHEN DATENAME(dw, DATEADD(day,2,MIN(po.AUTH_TIME))) = 'Friday' THEN 2 --if the EXECUTION_TIME is on a Friday a 2 day offset may be necessary         WHEN DATENAME(dw, DATEADD(day,2,MIN(po.AUTH_TIME))) = 'Saturday' THEN 1         WHEN DATENAME(dw, DATEADD(day,2,MIN(po.AUTH_TIME))) = 'Sunday' THEN 0          END       --T-0-17050 - this check ensures to capture weekend offset properly when we have authorisation time on Tuesday and three days of holiday before weekend      WHEN  DATENAME(dw, DATEADD(day,1,MIN(po.AUTH_TIME))) = 'Wednesday' AND         (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,1,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1          AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,2,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1          AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,3,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1          THEN           CASE         WHEN DATENAME(dw, DATEADD(day,3,MIN(po.AUTH_TIME))) = 'Friday' THEN 2 --if the EXECUTION_TIME is on a Friday a 2 day offset may be necessary         WHEN DATENAME(dw, DATEADD(day,3,MIN(po.AUTH_TIME))) = 'Saturday' THEN 1         WHEN DATENAME(dw, DATEADD(day,3,MIN(po.AUTH_TIME))) = 'Sunday' THEN 0          END       --End of T-0-17050      --T-0-17253 adding additional checks when auth is on Monday or Sunday and all other days in week are holiday      WHEN  DATENAME(dw, DATEADD(day,1,MIN(po.AUTH_TIME))) = 'Tuesday' AND         (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,1,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1          AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,2,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1          AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,3,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1          AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,4,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1          THEN           CASE         WHEN DATENAME(dw, DATEADD(day,4,MIN(po.AUTH_TIME))) = 'Friday' THEN 2 --if the EXECUTION_TIME is on a Friday a 2 day offset may be necessary         WHEN DATENAME(dw, DATEADD(day,4,MIN(po.AUTH_TIME))) = 'Saturday' THEN 1         WHEN DATENAME(dw, DATEADD(day,4,MIN(po.AUTH_TIME))) = 'Sunday' THEN 0          END       WHEN  DATENAME(dw, DATEADD(day,1,MIN(po.AUTH_TIME))) = 'Monday' AND         (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,1,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1          AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,2,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1          AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,3,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1          AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,4,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1          AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,5,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1          THEN           CASE         WHEN DATENAME(dw, DATEADD(day,5,MIN(po.AUTH_TIME))) = 'Friday' THEN 2 --if the EXECUTION_TIME is on a Friday a 2 day offset may be necessary         WHEN DATENAME(dw, DATEADD(day,5,MIN(po.AUTH_TIME))) = 'Saturday' THEN 1         WHEN DATENAME(dw, DATEADD(day,5,MIN(po.AUTH_TIME))) = 'Sunday' THEN 0          END       --T-0-17253 -- Added Additional check with new logic to use WEEKEND_CALENDAR_TABLE for few countries where we have raised false exception      --This will need to be integrated for all countries in the future      ELSE       CASE WHEN po.COUNTRY in ('TW','ID','JP','RU')        THEN (select count(1) from VISTA_STAGING.dbo.WEEKEND_CALENDAR_TABLE        where CONVERT(DATE, Dates, 103)        between CONVERT(DATE,DATEADD(day,1,MIN(po.AUTH_TIME)), 103)        AND CONVERT(DATE,MIN(rld.ROUTE_DATETIME), 103) and Weekend_days in (6,7))       ELSE      --End of T-0-17253       CASE        WHEN DATENAME(dw, MIN(po.AUTH_TIME)) = 'Friday' THEN 2 --if the EXECUTION_TIME is on a Friday a 2 day offset may be necessary        WHEN DATENAME(dw, MIN(po.AUTH_TIME)) = 'Saturday' THEN 1        WHEN DATENAME(dw, MIN(po.AUTH_TIME)) = 'Sunday' THEN 0        ELSE 0       END       END      END AS WEEKEND_OFFSET,     --T-0-17253 - removed TW,JP and Indonesia and added into separate filter     CASE       WHEN DATENAME(dw, DATEADD(day,1,MIN(po.AUTH_TIME))) = 'Friday'        AND po.COUNTRY in ('AU', 'CN', 'HK', 'IN', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH')        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list           WHERE CONVERT(DATE, DATEADD(day,1,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)           AND po.COUNTRY = COUNTRY_CODE) = 1        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list           WHERE CONVERT(DATE, DATEADD(day,4,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)           AND po.COUNTRY = COUNTRY_CODE) = 1         THEN 2      WHEN DATENAME(dw, MIN(po.AUTH_TIME)) = 'Friday'        AND po.COUNTRY in ('AU', 'CN', 'HK', 'IN', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH')        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list           WHERE CONVERT(DATE, DATEADD(day,3,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)           AND po.COUNTRY = COUNTRY_CODE) = 1         THEN 1      WHEN po.COUNTRY in ('AU', 'CN', 'HK', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH')        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list           WHERE CONVERT(DATE, DATEADD(day,1,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)           AND po.COUNTRY = COUNTRY_CODE) = 1        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list           WHERE CONVERT(DATE, DATEADD(day,2,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)           AND po.COUNTRY = COUNTRY_CODE) = 1        THEN 2      --T-0-17253 - created additional filter with new logic only for countires that we had false positive exceptions but will need to change for all countires      WHEN po.COUNTRY in ('TW','ID','JP','RU')       THEN (SELECT COUNT(DISTINCT CLOSURE_DATES)          FROM #holiday_list          WHERE CONVERT(DATE, CLOSURE_DATES, 103)          BETWEEN CONVERT(DATE,DATEADD(day,1,MIN(po.AUTH_TIME)), 103)          AND CONVERT(DATE,MIN(rld.ROUTE_DATETIME), 103)         AND po.COUNTRY = COUNTRY_CODE)      --End of T-0-17253      WHEN po.COUNTRY in ('AU', 'CN', 'HK', 'IN', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH')        THEN (SELECT COUNT(DISTINCT CLOSURE_DATES)          FROM #holiday_list          WHERE CONVERT(DATE, CLOSURE_DATES, 103)          BETWEEN CONVERT(DATE, MIN(po.AUTH_TIME), 103)          AND CONVERT(DATE, DATEADD(day,1,MIN(po.AUTH_TIME)), 103)         AND po.COUNTRY = COUNTRY_CODE)          WHEN DATENAME(dw, DATEADD(day,1,MIN(po.AUTH_TIME))) = 'Friday'        AND po.COUNTRY = 'GB'        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list           WHERE CONVERT(DATE, DATEADD(day,1,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)           AND po.COUNTRY = COUNTRY_CODE) = 1        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list           WHERE CONVERT(DATE, DATEADD(day,4,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)           AND po.COUNTRY = COUNTRY_CODE) = 1        THEN 2      WHEN DATENAME(dw, MIN(po.AUTH_TIME)) = 'Friday'        AND po.COUNTRY = 'GB'        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list           WHERE CONVERT(DATE, DATEADD(day,3,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)           AND po.COUNTRY = COUNTRY_CODE) = 1        THEN 1      WHEN po.COUNTRY = 'GB'        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list           WHERE CONVERT(DATE, DATEADD(day,1,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)           AND po.COUNTRY = COUNTRY_CODE) = 1        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list           WHERE CONVERT(DATE, DATEADD(day,2,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)           AND po.COUNTRY = COUNTRY_CODE) = 1         THEN 2      ELSE (SELECT COUNT(DISTINCT CLOSURE_DATES)          FROM #holiday_list          WHERE CONVERT(DATE, CLOSURE_DATES, 103)          BETWEEN CONVERT(DATE, MIN(po.AUTH_TIME), 103)          AND CONVERT(DATE, DATEADD(day,1,MIN(po.AUTH_TIME)), 103)         AND COUNTRY_CODE = 'GB')      END AS HOLIDAY_OFFSET     INTO #holiday_offset     FROM #todays_pm_orders po     --T-0-17253 - additional join to take out route datetime from placements and use as end point for holiday and weekend offsets     LEFT JOIN #order_release_datetime_table rld on po.ORD_NUM = rld.ORD_NUM     --End of T-0-17253     GROUP BY      po.ORD_NUM,      po.COUNTRY      --po.AUTH_TIME     */     --T-0-17253 - added RU to all case when filters to properly calculate exception and relapsed time     IF OBJECT_ID('tempdb..#timely_release_table', 'U') IS NOT NULL DROP TABLE #timely_release_table     SELECT DISTINCT      po.ORD_NUM,      qr.RELEASE_DATETIME,      qr.ROUTE_DATETIME,      po.DEALING_DESK,      h.MIN_AUTH_TIME,      gm.UK_open_time,      gm.UK_close_time,      po.COUNTRY,      DATEDIFF (MINUTE, h.MIN_AUTH_TIME, qr.RELEASE_DATETIME) AS RELEASE_DIFF,      DATEDIFF (MINUTE, h.MIN_AUTH_TIME, qr.ROUTE_DATETIME) AS ROUTE_DIFF,      DATEADD(MINUTE, trr.TR_CB_THREHOLD, DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), CONVERT(NVARCHAR(MAX), gm.UK_open_time, 8)))) new_cut_off,      CASE       -- Use the Aladdin release datetime for all orders on convertible bonds, trs and ET Options as requested by client.       -- Use EMSX Route datetime for all others.       -- We also restrict on AUTH_TIME as EMSX data was only available from a specific date, defined in param at top of script.       --WHEN (MIN_AUTH_TIME < @EMSX_VALID_DATE) OR (qr.INST_TYPE in ('CONV BOND', 'TRS', 'ET Options')) THEN       WHEN qr.ORDER_REASON_DECODE = 'MG.GEN 4.Futures Rolling' THEN 0       WHEN h.MIN_AUTH_TIME > trr.DATE_FROM OR (qr.INST_TYPE in ('CONV BOND', 'TRS', 'ET Options')) THEN        CASE         --1. Convert, TRS and options on an Asian market (need clarification on exactly how to identify): a. Release by T + 1 10:00 UK time.          WHEN ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU')          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(MINUTE, trr.TR_CB_THREHOLD, DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), CONVERT  (NVARCHAR(MAX), gm.UK_open_time, 8))))          THEN 1         --2. If the local market opens between 19:00 and 03:00 UK time:          --a. If the order AUTH_TIME is before 19:00 UK time:         --i. Release before 19:00 UK time on T.         WHEN  NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU')          AND (gm.UK_open_time >= CAST('19:00:00' as TIME) OR gm.UK_open_time <= CAST('03:00:00' as TIME))          AND CAST(h.MIN_AUTH_TIME AS TIME) < CAST('19:00:00' AS TIME)          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END >  DATEADD(day, h.HOLIDAY_OFFSET, DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), '19:00:00'))          THEN 1         --2. If the local market opens between 19:00 and 03:00 UK time:          --b. If the order AUTH_TIME is after 19:00 UK time:         --i. Release by 19:00 UK time on T + 1.         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU')           AND (gm.UK_open_time >= CAST('19:00:00' as TIME) OR gm.UK_open_time <= CAST('03:00:00' as TIME))          AND CAST(h.MIN_AUTH_TIME AS TIME) > CAST('19:00:00' AS TIME)          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END >  DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), '19:00:00'))          THEN 1         --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --a. If the AUTH_TIME is more than 32/180 mins before market close:         --i. Release by order AUTH_TIME plus 32/180 minutes or 07:32/10:00 UK time (whichever is later).         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU')           AND ISNULL(qr.INST_TYPE, '') not in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND CAST(h.MIN_AUTH_TIME AS TIME) >= CAST('07:00:00' AS TIME) -- Order was authorised after 07:00          AND DATEADD(minute,trr.TR_NONCB_THRESHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) <= UK_close_time -- The trader has had at least 32 mins prior to market close to release          AND  CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(minute,trr.TR_NONCB_THRESHOLD,h.MIN_AUTH_TIME )         THEN 1         --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --a. If the AUTH_TIME is more than 32/180 mins before market close:         --i. Release by order AUTH_TIME plus 32/180 minutes or 07:32/10:00 UK time (whichever is later).         WHEN   NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU')           AND ISNULL(qr.INST_TYPE, '') not in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND CAST(h.MIN_AUTH_TIME AS TIME) < CAST('07:00:00' AS TIME) -- Order was authorised before 07:00          AND DATEADD(minute,trr.TR_NONCB_THRESHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) <= UK_close_time -- The trader has had at least 32 mins prior to market close to release          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(day, h.HOLIDAY_OFFSET, DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), trr.TR_NEXT_DAY_RELEASE_NONCB))         THEN 1             --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --b. If the AUTH_TIME is less than 32/180 mins before local market close:         --i. Release by T + 1 07:32/10:00 UK time.         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU')           AND ISNULL(qr.INST_TYPE, '') not in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND DATEADD(minute,trr.TR_NONCB_THRESHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) > UK_close_time -- The trader has not had at least 32 mins prior to market close to release          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), trr.TR_NEXT_DAY_RELEASE_NONCB))          THEN 1             --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --a. If the AUTH_TIME is more than 32/180 mins before market close:         --i. Release by order AUTH_TIME plus 32/180 minutes or 07:32/10:00 UK time (whichever is later).         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU')           AND ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND CAST(h.MIN_AUTH_TIME AS TIME) >= CAST('07:00:00' AS TIME) -- Order was authorised after 07:00          AND DATEADD(minute,TR_CB_THREHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) <= UK_close_time -- The trader has had at least 180 mins prior to market close to release          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(minute,trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME )         THEN 1         --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --a. If the AUTH_TIME is more than 32/180 mins before market close:         --i. Release by order AUTH_TIME plus 32/180 minutes or 07:32/10:00 UK time (whichever is later).         WHEN  NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU')           AND ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND CAST(h.MIN_AUTH_TIME AS TIME) < CAST('07:00:00' AS TIME) -- Order was authorised before 07:00          AND DATEADD(minute,TR_CB_THREHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) <= UK_close_time -- The trader has had at least 180 mins prior to market close to release          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(day, h.HOLIDAY_OFFSET, DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), TR_NEXT_DAY_RELEASE_CB))         THEN 1         --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --b. If the AUTH_TIME is less than 32/180 mins before local market close:         --i. Release by T + 1 07:32/10:00 UK time.         WHEN  NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU')           AND ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND DATEADD(minute,TR_CB_THREHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) > UK_close_time -- The trader has not had at least 180 mins prior to market close to release          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), TR_NEXT_DAY_RELEASE_CB))          THEN 1             --4. If the local market opens between 07:00 and 19:00 UK time:          --a. If the order AUTH_TIME is 32/180 mins before the local market close or 19:00 UK time (whichever is earlier).         --i. Release by local market open plus 32/180 mins or order AUTH_TIME plus 32/180 mins (whichever is later).         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU'))           AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU')          AND ISNULL(qr.INST_TYPE, '') not in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('07:00:00' as TIME)           AND gm.UK_open_time <= CAST('19:00:00' as TIME)          AND CAST(DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME) AS TIME) < CASE                          WHEN UK_close_time >= CAST('19:00:00' AS TIME)                         THEN CAST('19:00:00' AS TIME)                         WHEN UK_close_time < CAST('19:00:00' AS TIME)                         THEN gm.UK_close_time                           END                        AND (CAST(CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END AS TIME) > CASE                     WHEN CONVERT(TIME,h.MIN_AUTH_TIME) > UK_open_time                     THEN CAST(DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME) AS TIME)                     WHEN CONVERT(TIME,MIN_AUTH_TIME) < UK_open_time                     THEN DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, UK_open_time)                      END           OR CAST(CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END AS DATE) > CAST(DATEADD(DAY, h.HOLIDAY_OFFSET, h.MIN_AUTH_TIME) AS DATE))                      THEN 1             -- 4. If the local market opens between 07:00 and 19:00 UK time:          -- b. If the order AUTH_TIME is less than 32/180 mins before the market close or 19:00 UK time (whichever is earlier).         -- i. Release by T +1 local market open time plus 32/180 minutes.         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU'))           AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU')          AND ISNULL(qr.INST_TYPE, '') not in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('07:00:00' as TIME)           AND gm.UK_open_time <= CAST('19:00:00' as TIME)          AND CAST(DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME) AS TIME) > CASE                          WHEN UK_close_time >= CAST('19:00:00' AS TIME)                         THEN CAST('19:00:00' AS TIME)                         WHEN UK_close_time < CAST('19:00:00' AS TIME)                         THEN gm.UK_close_time                           END            AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(MINUTE,UK_open_time_minutes + trr.TR_NONCB_THRESHOLD,DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ),DATEDIFF(day, 0, h.MIN_AUTH_TIME)))          THEN 1             --4. If the local market opens between 07:00 and 19:00 UK time:          --a. If the order AUTH_TIME is 32/180 mins before the local market close or 19:00 UK time (whichever is earlier).         --i. Release by local market open plus 32/180 mins or order AUTH_TIME plus 32/180 mins (whichever is later).         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU')          AND ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('07:00:00' as TIME)           AND gm.UK_open_time <= CAST('19:00:00' as TIME)          AND CAST(DATEADD(MINUTE, TR_CB_THREHOLD, h.MIN_AUTH_TIME) AS TIME) < CASE                          WHEN UK_close_time >= CAST('19:00:00' AS TIME)                         THEN CAST('19:00:00' AS TIME)                         WHEN UK_close_time < CAST('19:00:00' AS TIME)                         THEN gm.UK_close_time                           END                        AND (CAST(CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END AS TIME) > CASE                 WHEN CONVERT(TIME,h.MIN_AUTH_TIME) > UK_open_time                 THEN CAST(DATEADD(MINUTE, TR_CB_THREHOLD, h.MIN_AUTH_TIME) AS TIME)                 WHEN CONVERT(TIME,h.MIN_AUTH_TIME) < UK_open_time                 THEN DATEADD(MINUTE, TR_CB_THREHOLD, UK_open_time)                  END          OR CAST(CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END AS DATE) > CAST(DATEADD(DAY, h.HOLIDAY_OFFSET, h.MIN_AUTH_TIME) AS DATE))          THEN 1             -- 4. If the local market opens between 07:00 and 19:00 UK time:          -- b. If the order AUTH_TIME is less than 32/180 mins before the market close or 19:00 UK time (whichever is earlier).         -- i. Release by T +1 local market open time plus 32/180 minutes.         WHEN  NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU'))           AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU')          AND ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('07:00:00' as TIME)           AND gm.UK_open_time <= CAST('19:00:00' as TIME)          AND CAST(DATEADD(MINUTE, TR_CB_THREHOLD, h.MIN_AUTH_TIME) AS TIME) > CASE                          WHEN UK_close_time >= CAST('19:00:00' AS TIME)                         THEN CAST('19:00:00' AS TIME)                         WHEN UK_close_time < CAST('19:00:00' AS TIME)                         THEN gm.UK_close_time                           END            AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(MINUTE,UK_open_time_minutes + TR_CB_THREHOLD,DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ),DATEDIFF(day, 0, h.MIN_AUTH_TIME)))          THEN 1             WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU'))           AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU')          AND ISNULL(qr.INST_TYPE, '') not in ('ET Options', 'TRS', 'CONV BOND')          AND CAST(DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME) AS TIME) < UK_close_time          --SURVG-719 - Added additional check before applying exception to specific record in order to avoid raising an exception when local market is still closed          AND CAST(DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD,h.MIN_AUTH_TIME) AS TIME) > UK_open_time                               --End of SURVG-719                        AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME)            THEN 1             -- 4. If the local market opens between 07:00 and 19:00 UK time:          -- b. If the order AUTH_TIME is less than 32/180 mins before the market close or 19:00 UK time (whichever is earlier).         -- i. Release by T +1 local market open time plus 32/180 minutes.         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU'))           AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU')          AND ISNULL(qr.INST_TYPE, '') not in ('ET Options', 'TRS', 'CONV BOND')          AND CAST(DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME) AS TIME) > UK_close_time          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(MINUTE,UK_open_time_minutes + trr.TR_NONCB_THRESHOLD,DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ),DATEDIFF(day, 0, h.MIN_AUTH_TIME)))          THEN 1         ELSE 0         END      END AS TIMELY_RELEASE_EXCEPTION,      CASE       WHEN (trr.RELEASE_VAR_USED = 'RELEASE') OR (qr.INST_TYPE in ('CONV BOND', 'TRS', 'ET Options')) THEN 'RELEASE'       ELSE 'ROUTE'      END AS RELEASE_VAR_USED,      -- The following is the calculation of the comparison time thresholds used in the Timely Release logic. It       -- is based off the exiting TR logic with the addition of a DATEDIFF() to show the time comparison to the      -- respective threshold.      CASE       WHEN qr.ORDER_REASON_DECODE = 'MG.GEN 4.Futures Rolling' THEN 0       WHEN h.MIN_AUTH_TIME > trr.DATE_FROM OR (qr.INST_TYPE in ('CONV BOND', 'TRS', 'ET Options')) THEN        CASE         --1. Convert, TRS and options on an Asian market (need clarification on exactly how to identify): a. Release by T + 1 10:00 UK time.          WHEN ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU')          AND CASE             WHEN trr.RELEASE_VAR_USED = 'RELEASE'              THEN qr.RELEASE_DATETIME             ELSE qr.ROUTE_DATETIME END > DATEADD(MINUTE, trr.TR_CB_THREHOLD, DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), CONVERT(NVARCHAR(MAX), gm.UK_open_time, 8))))          THEN DATEDIFF(MINUTE, DATEADD(MINUTE, trr.TR_CB_THREHOLD, DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), CONVERT(NVARCHAR(MAX), gm.UK_open_time, 8)))),CASE                                                  WHEN trr.RELEASE_VAR_USED = 'RELEASE'                                                   THEN qr.RELEASE_DATETIME                                                  ELSE qr.ROUTE_DATETIME END)         --2. If the local market opens between 19:00 and 03:00 UK time:          --a. If the order AUTH_TIME is before 19:00 UK time:         --i. Release before 19:00 UK time on T.         WHEN  NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU')           AND (gm.UK_open_time >= CAST('19:00:00' as TIME) OR gm.UK_open_time <= CAST('03:00:00' as TIME))          AND CAST(h.MIN_AUTH_TIME AS TIME) < CAST('19:00:00' AS TIME)          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END >  DATEADD(day, h.HOLIDAY_OFFSET, DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), '19:00:00'))          THEN DATEDIFF(MINUTE, DATEADD(day, h.HOLIDAY_OFFSET, DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), '19:00:00')),CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)         --2. If the local market opens between 19:00 and 03:00 UK time:          --b. If the order AUTH_TIME is after 19:00 UK time:         --i. Release by 19:00 UK time on T + 1.         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU')           AND (gm.UK_open_time >= CAST('19:00:00' as TIME) OR gm.UK_open_time <= CAST('03:00:00' as TIME))          AND CAST(h.MIN_AUTH_TIME AS TIME) > CAST('19:00:00' AS TIME)          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END >  DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), '19:00:00'))          THEN DATEDIFF(MINUTE, DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), '19:00:00')), CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)         --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --a. If the AUTH_TIME is more than 32/180 mins before market close:         --i. Release by order AUTH_TIME plus 32/180 minutes or 07:32/10:00 UK time (whichever is later).         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU')           AND ISNULL(qr.INST_TYPE, '') not in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND CAST(h.MIN_AUTH_TIME AS TIME) >= CAST('07:00:00' AS TIME) -- Order was authorised after 07:00          AND DATEADD(minute,trr.TR_NONCB_THRESHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) <= UK_close_time -- The trader has had at least 32 mins prior to market close to release          AND  CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(minute,trr.TR_NONCB_THRESHOLD,h.MIN_AUTH_TIME)         THEN DATEDIFF(MINUTE, DATEADD(minute,trr.TR_NONCB_THRESHOLD,h.MIN_AUTH_TIME), CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)         --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --a. If the AUTH_TIME is more than 32/180 mins before market close:         --i. Release by order AUTH_TIME plus 32/180 minutes or 07:32/10:00 UK time (whichever is later).         WHEN  NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU')           AND ISNULL(qr.INST_TYPE, '') not in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND CAST(h.MIN_AUTH_TIME AS TIME) < CAST('07:00:00' AS TIME) -- Order was authorised before 07:00          AND DATEADD(minute,trr.TR_NONCB_THRESHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) <= UK_close_time -- The trader has had at least 32 mins prior to market close to release          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(day, h.HOLIDAY_OFFSET, DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), trr.TR_NEXT_DAY_RELEASE_NONCB))         THEN DATEDIFF(MINUTE, DATEADD(day, h.HOLIDAY_OFFSET, DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), trr.TR_NEXT_DAY_RELEASE_NONCB)), CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)             --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --b. If the AUTH_TIME is less than 32/180 mins before local market close:         --i. Release by T + 1 07:32/10:00 UK time.         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU')           AND ISNULL(qr.INST_TYPE, '') not in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND DATEADD(minute,trr.TR_NONCB_THRESHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) > UK_close_time -- The trader has not had at least 32 mins prior to market close to release          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), trr.TR_NEXT_DAY_RELEASE_NONCB))          THEN DATEDIFF(MINUTE, DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), trr.TR_NEXT_DAY_RELEASE_NONCB)), CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)             --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --a. If the AUTH_TIME is more than 32/180 mins before market close:         --i. Release by order AUTH_TIME plus 32/180 minutes or 07:32/10:00 UK time (whichever is later).         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU')           AND ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND CAST(h.MIN_AUTH_TIME AS TIME) >= CAST('07:00:00' AS TIME) -- Order was authorised after 07:00          AND DATEADD(minute,TR_CB_THREHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) <= UK_close_time -- The trader has had at least 180 mins prior to market close to release          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(minute,trr.TR_CB_THREHOLD, h.MIN_AUTH_TIME)         THEN DATEDIFF(MINUTE, DATEADD(minute,trr.TR_CB_THREHOLD,h.MIN_AUTH_TIME), CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)         --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --a. If the AUTH_TIME is more than 32/180 mins before market close:         --i. Release by order AUTH_TIME plus 32/180 minutes or 07:32/10:00 UK time (whichever is later).         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU')           AND ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND CAST(h.MIN_AUTH_TIME AS TIME) < CAST('07:00:00' AS TIME) -- Order was authorised before 07:00          AND DATEADD(minute,TR_CB_THREHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) <= UK_close_time -- The trader has had at least 180 mins prior to market close to release          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(day, h.HOLIDAY_OFFSET, DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), TR_NEXT_DAY_RELEASE_CB))         THEN DATEDIFF(MINUTE, DATEADD(day, h.HOLIDAY_OFFSET, DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), TR_NEXT_DAY_RELEASE_CB)), CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)         --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --b. If the AUTH_TIME is less than 32/180 mins before local market close:         --i. Release by T + 1 07:32/10:00 UK time.         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU')           AND ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND DATEADD(minute,TR_CB_THREHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) > UK_close_time -- The trader has not had at least 180 mins prior to market close to release          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), TR_NEXT_DAY_RELEASE_CB))          THEN DATEDIFF(MINUTE, DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), TR_NEXT_DAY_RELEASE_CB)), CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)               --4. If the local market opens between 07:00 and 19:00 UK time:          --a. If the order AUTH_TIME is 32/180 mins before the local market close or 19:00 UK time (whichever is earlier).         --i. Release by local market open plus 32/180 mins or order AUTH_TIME plus 32/180 mins (whichever is later).         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU'))           AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU')          AND ISNULL(qr.INST_TYPE, '') not in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('07:00:00' as TIME)           AND gm.UK_open_time <= CAST('19:00:00' as TIME)          THEN            CASE            WHEN CAST(DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME) AS TIME) < CASE                                 WHEN (gm.UK_close_time < CAST('19:00:00' AS TIME)) --AND (CAST(h.MIN_AUTH_TIME AS TIME) < gm.UK_close_time)                                 THEN gm.UK_close_time                                ELSE CAST('19:00:00' AS TIME)                                 END             THEN DATEDIFF(MINUTE,                   CASE                    WHEN CONVERT(TIME,h.MIN_AUTH_TIME) > UK_open_time                    THEN DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME)                   --ELSE DATEADD(MINUTE, UK_open_time_minutes + trr.TR_CB_THREHOLD,DATEADD(day, (h.HOLIDAY_OFFSET+h.WEEKEND_OFFSET),DATEDIFF(day, 0, h.MIN_AUTH_TIME)))                   WHEN CONVERT(TIME,h.MIN_AUTH_TIME) < UK_open_time                    THEN DATEADD(MINUTE, UK_open_time_minutes + trr.TR_NONCB_THRESHOLD, DATEADD(day, 0,DATEDIFF(day, 0, h.MIN_AUTH_TIME)))                   --ELSE DATEADD(MINUTE, UK_open_time_minutes + trr.TR_CB_THREHOLD,DATEADD(day, (h.HOLIDAY_OFFSET+h.WEEKEND_OFFSET),DATEDIFF(day, 0, h.MIN_AUTH_TIME)))                  END,                   CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)                 WHEN CAST(DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME) AS TIME) > CASE                                 WHEN (gm.UK_close_time < CAST('19:00:00' AS TIME)) --AND (CAST(h.MIN_AUTH_TIME AS TIME) < gm.UK_close_time)                                 THEN gm.UK_close_time                                ELSE CAST('19:00:00' AS TIME)                                 END             THEN DATEDIFF(MINUTE, DATEADD(MINUTE, UK_open_time_minutes + TR_NONCB_THRESHOLD,DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET),DATEDIFF(day, 0, h.MIN_AUTH_TIME))), CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)                        ELSE DATEDIFF(MINUTE, DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME), CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)           END         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU'))           AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW','RU')          AND ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('07:00:00' as TIME)           AND gm.UK_open_time <= CAST('19:00:00' as TIME)          THEN            CASE            WHEN CAST(DATEADD(MINUTE, trr.TR_CB_THREHOLD, h.MIN_AUTH_TIME) AS TIME) < CASE                                WHEN (gm.UK_close_time < CAST('19:00:00' AS TIME)) AND (CAST(h.MIN_AUTH_TIME AS TIME) < gm.UK_close_time)                                THEN gm.UK_close_time                               ELSE CAST('19:00:00' AS TIME)                                END             THEN DATEDIFF(MINUTE,                   CASE                  WHEN CONVERT(TIME,h.MIN_AUTH_TIME) > UK_open_time                   THEN DATEADD(MINUTE, trr.TR_CB_THREHOLD, h.MIN_AUTH_TIME)                    WHEN CONVERT(TIME,h.MIN_AUTH_TIME) < UK_open_time                    THEN DATEADD(MINUTE, UK_open_time_minutes + trr.TR_CB_THREHOLD,DATEADD(day, 0,DATEDIFF(day, 0, h.MIN_AUTH_TIME)))                  --ELSE DATEADD(MINUTE, UK_open_time_minutes + trr.TR_CB_THREHOLD,DATEADD(day, (h.HOLIDAY_OFFSET+h.WEEKEND_OFFSET),DATEDIFF(day, 0, h.MIN_AUTH_TIME)))                  END, CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)            WHEN CAST(DATEADD(MINUTE, trr.TR_CB_THREHOLD, h.MIN_AUTH_TIME) AS TIME) > CASE                                WHEN (gm.UK_close_time < CAST('19:00:00' AS TIME)) AND (CAST(h.MIN_AUTH_TIME AS TIME) < gm.UK_close_time)                                THEN gm.UK_close_time                               ELSE CAST('19:00:00' AS TIME)                                END             THEN DATEDIFF(MINUTE, DATEADD(MINUTE, UK_open_time_minutes + trr.TR_CB_THREHOLD,DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET),DATEDIFF(day, 0, h.MIN_AUTH_TIME))), CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)                        ELSE DATEDIFF(MINUTE, DATEADD(MINUTE, trr
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_11_TIMELY_RELEASE_EQ_18122020  CreateDate: 2025-06-26 18:35:24.153  ModifyDate: 2025-06-26 18:35:24.153  --- DEFINITION START ---  -- =============================================    -- Author:  <da Costa, David>    -- Create date: <20/10/2017>    -- Description:     -- <For EQ only. Difference between Release DateTime and     -- Approved DateTime. IF Difference is greater than 23 mins    -- raise as an exception>    -- =============================================            -- ***************VERSION CONTROL***************    -- 29/11/2017 - DDC: MIN() and MAX() of OPENTIME4    -- and CLOSETIME removed. HOLIDAY and WEEKEND     -- offsets added rebasing related to Asian     -- Convertible Bonds.    --    -- 11/12/2017 - DDC: Changes made to ensure that script     -- only ever updates existing records always ensuring     -- the highest level exception is reported and     -- inserts new ones if no exception has been raised.        -- 04/01/2018 - DDC: Amendment made to only run  exception    -- calculations on the data for the day the exception is     -- being pulled        -- 30/01/2018 - DDC: Exception threshold for local market    -- non-ET Options, non-Convertible Bonds and non-OTC changed    -- from 20 minutes to 32 minutes        -- 2018-0713 - WH: Update to use the Route datetime provided in     -- the EMSX files (these come through SFTP). This update is only     -- applied for orders authorised on or after 19 June 2018 (as agreed with EQDD).        -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.        -- 2019-02-13 - DDC: Changed threshold from 32 mins to 20 mins for any order     -- authorised after 2019-13-02        -- 2019-02-21 - DDC: Logic changed to use refrence tables and not hardcoded values,    -- reference table is VISTA_STAGING.dbo.TIMELY_RELEASE_REFERENCE_TABLE        -- 2019-03-12 - DDC: inclusion of comparison threshold on TIMRELY_RELEASE exceptions        -- 2019-04-11 - DDC: Inclusion of new HOLIDAY/WEEKEND offset calculation        -- 2019-12-23 - DDC: Inclusion of changes to consider Asian trading desks in the Timely Release calculation        -- 2020-01-09 - DDC: Bug fix included to remove false positives being raised on Asian Desks        -- 2020-07-15 - DDC: CR to use CREATE_DATE for CONV_BOND    -- *********************************************    CREATE PROCEDURE [dbo].[VG_11_TIMELY_RELEASE_EQ_18122020]     -- Add the parameters for the stored procedure here     -- @Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         --DECLARE @DATE_FILTER AS DATE --Declare date filter to only select data from current pull date     --SET @DATE_FILTER = CONVERT(DATE, GETDATE())            --Insert statements for procedure here         --1. Create a temp table holding the timezones     IF OBJECT_ID('tempdb..#tzs', 'U') IS NOT NULL DROP TABLE #tzs     SELECT DISTINCT        COUNTRY,       GMTOFFSETMINS,       PERIODSTART,       ROW_NUMBER() OVER (PARTITION BY COUNTRY ORDER BY PERIODSTART) RowNum     INTO #tzs     FROM          (SELECT DISTINCT COUNTRY,GMTOFFSETMINS, PERIODSTART FROM VISTA_REPORTING.dbo.TIMEZONES ) a            IF OBJECT_ID('tempdb..#tz_periods', 'U') IS NOT NULL DROP TABLE #tz_periods     SELECT       base.COUNTRY,      base.GMTOFFSETMINS,      base.PERIODSTART,      ISNULL(next.PERIODSTART,'9999-12-31') AS PERIOD_END     INTO #tz_periods     FROM #tzs base     LEFT JOIN #tzs next     ON base.COUNTRY = next.COUNTRY     AND base.RowNum + 1 = next.RowNum         --2. For each Order, find the first release or execution time.     IF OBJECT_ID('tempdb..#First_release', 'U') IS NOT NULL DROP TABLE #First_release     SELECT       a.ORD_NUM,       MIN(CREATE_TIME) AS First_Create,      MIN(a.RELEASE_DATETIME) AS First_Release,      MIN(a.ROUTE_DATETIME) AS First_Route     INTO #First_release     FROM (      SELECT        oc.PM_ORD AS ORD_NUM,       p.MULTI_FUND_ID,       RELEASE_DATETIME,       ROUTE_DATETIME,       p.CREATE_TIME      FROM VISTA_REPORTING.dbo.PLACEMENTS p      LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON p.ORD_NUM = oc.TRD_ORD      UNION      SELECT         oc.PM_ORD AS ORD_NUM,        MULTI_FUND_ID,       EXECUTION_TIME, --Use execution        EXECUTION_TIME,       EXECUTION_TIME      FROM VISTA_REPORTING.dbo.TRADES t      LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON t.ORD_NUM = oc.TRD_ORD) a     INNER JOIN (SELECT ORD_NUM, MIN(AUTH_TIME) AS MIN_AUTH         FROM VISTA_REPORTING.dbo.PM_ORDERS         GROUP BY ORD_NUM) pm ON pm.ORD_NUM=a.ORD_NUM           AND (pm.MIN_AUTH <= COALESCE(a.RELEASE_DATETIME, '9999-11-30 00:00:00.000') AND pm.MIN_AUTH <= COALESCE(a.ROUTE_DATETIME, '9999-11-30 00:00:00.000'))     GROUP BY       a.ORD_NUM             IF OBJECT_ID('tempdb..#order_details', 'U') IS NOT NULL DROP TABLE #order_details     SELECT DISTINCT              --Create table with RELEASE_DATETIMES by PM Order No       po.ORD_NUM,              --and join on TIMEZONES table to get the offset required     po.AUTH_TIME,               --for GMT conyversion     --i2.COUNTRY as countrys,                                                    --i2.MARKET,     CASE       WHEN i2.MARKET = 'EURO' THEN 'DE'      WHEN i2.MARKET = 'YANKEE' THEN 'US'      WHEN i2.MARKET = 'GLBL' THEN 'GB'      ELSE i2.MARKET     END AS COUNTRY,     MIN(pr.INST_TYPE) AS INST_TYPE,     MAX(pr.PRIMARY_MARKET) AS PRIMARY_MARKET,     CASE      WHEN MIN(pr.INST_TYPE) in ('CONV BOND') THEN f_r.First_Create      ELSE f_r.First_Release      END AS RELEASE_DATETIME,     CASE       WHEN MIN(pr.INST_TYPE) in ('CONV BOND') THEN f_r.First_Create      ELSE f_r.First_Route      END AS ROUTE_DATETIME,     po.ORDER_REASON_DECODE     INTO #order_details     FROM VISTA_REPORTING.dbo.PM_ORDERS po     LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON oc.PM_ORD=po.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM=oc.TRD_ORD     LEFT JOIN VISTA_REPORTING.dbo.PLACEMENTS p ON p.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.ORD_NUM=oc.TRD_ORD     LEFT JOIN #First_release f_r ON po.ORD_NUM = f_R.ORD_NUM     OUTER APPLY (SELECT TOP 1 i.* FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=coalesce(t.CUSIP, po.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(t.EXECUTION_TIME, po.AUTH_TIME)))         ORDER BY i.DATE DESC) as i2     where po.DEALING_DESK = 'Equity'      GROUP BY      po.ORD_NUM,      po.AUTH_TIME,      CASE        WHEN i2.MARKET = 'EURO' THEN 'DE'       WHEN i2.MARKET = 'YANKEE' THEN 'US'       WHEN i2.MARKET = 'GLBL' THEN 'GB'       ELSE i2.MARKET      END,      f_r.First_Release,      f_r.First_Route,      f_r.First_Create,      po.ORDER_REASON_DECODE          IF OBJECT_ID('tempdb..#order_release_datetime_table', 'U') IS NOT NULL DROP TABLE #order_release_datetime_table     SELECT       od.* ,     tz.GMTOFFSETMINS AS GMTOFFSET,     tz2.GMTOFFSETMINS AS UK_GMTOFFSET     INTO #order_release_datetime_table      FROM #order_details od     LEFT JOIN #tz_periods tz ON od.COUNTRY = tz.COUNTRY AND od.RELEASE_DATETIME >=tz.PERIODSTART AND od.RELEASE_DATETIME < tz.PERIOD_END     LEFT JOIN #tz_periods tz2 ON tz2.COUNTRY = 'GB' AND od.RELEASE_DATETIME >=tz2.PERIODSTART AND od.RELEASE_DATETIME < tz2.PERIOD_END -- Find the UK offset from GMT. THis is used for finding the difference between GMT and BST for UK daylight savings times.               --and po.PULL_DATE=@DATE_FILTER         --select * from #order_release_datetime_table where ORD_NUM = 926468             /* 07-11-2019:        Cureently we do not take into account the exchange but this may become a requirment in the future        We have been given opening times for two exchanges in China (Shenzhen and Shanghai) however as they        have the same opening time and the GMT offset is the same there will be no impact in the short term.         In future howeverwe may need to consider exchange which will mean finding additional data in Aladdin      */     IF OBJECT_ID('tempdb..#gmt_open_close', 'U') IS NOT NULL DROP TABLE #gmt_open_close         SELECT                                                          --Create temporary table with all the global exchanges'     po.ORD_NUM,              --opening and closing times converted to GMT     rd.GMTOFFSET,     er.min_open as local_open_time,     er.Max_close as local_close_time,     DATEADD(minute,-1*(ISNULL(GMTOFFSET,0)-ISNULL(UK_GMTOFFSET,0)),min_open) AS UK_open_time,     DATEADD(minute,-1*(ISNULL(GMTOFFSET,0)-ISNULL(UK_GMTOFFSET,0)),max_close) AS UK_close_time,     rd.COUNTRY     INTO #gmt_open_close     FROM VISTA_REPORTING.dbo.PM_ORDERS po     --LEFT JOIN VISTA_REPORTING.dbo.INSTRUMENTS i ON i.CUSIP=po.CUSIP     JOIN #order_release_datetime_table rd ON rd.ORD_NUM=po.ORD_NUM     LEFT JOIN (SELECT COUNTRY, MIN(CONVERT(TIME,OPENTIME)) AS min_open, MAX(CONVERT(TIME,CLOSETIME)) AS Max_close FROM VISTA_REPORTING.dbo.EXCHANGE_REFERENCE WHERE MARKET_TIMES = 1 GROUP BY COUNTRY) er      ON rd.COUNTRY = er.COUNTRY     --WHERE po.PULL_DATE=@DATE_FILTER     GROUP BY      po.ORD_NUM,      po.CUSIP,      rd.COUNTRY,      rd.GMTOFFSET,      rd.UK_GMTOFFSET,      er.min_open,      er.Max_close         IF OBJECT_ID('tempdb..#gmt_open_close_fin', 'U') IS NOT NULL DROP TABLE #gmt_open_close_fin     SELECT      *,      (DATEPART(hour, UK_open_time) * 60) + (DATEPART(minute, UK_open_time) ) AS UK_open_time_minutes     INTO #gmt_open_close_fin     FROM #gmt_open_close     --SELECT * FROM #gmt_open_close_fin WHERE ORD_NUM = 926468             IF OBJECT_ID('tempdb..#holiday_list', 'U') IS NOT NULL DROP TABLE #holiday_list     SELECT DISTINCT CLOSURE_DATES , COUNTRY_CODE     INTO #holiday_list      FROM VISTA_STAGING.dbo.HOLIDAYS      WHERE COUNTRY_CODE IN ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW', 'GB')          IF OBJECT_ID('tempdb..#holiday_offset', 'U') IS NOT NULL DROP TABLE #holiday_offset     SELECT --create a table by MULTI_FUND_ID to account for weekend and holiday offsets to rebased datetimes     --t.MULTI_FUND_ID,     --t.EXECUTION_TIME,     --t.TRD_AUTH_TIME,     po.ORD_NUM,     po.COUNTRY,     MIN(po.AUTH_TIME) AS MIN_AUTH_TIME,     --DATEADD(day,1,MIN(t.EXECUTION_TIME)) REBASED_AUTH_TIME,     CASE       WHEN  DATENAME(dw, DATEADD(day,1,MIN(po.AUTH_TIME))) = 'Friday' AND         (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,1,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1          THEN           CASE         WHEN DATENAME(dw, DATEADD(day,1,MIN(po.AUTH_TIME))) = 'Friday' THEN 2 --if the EXECUTION_TIME is on a Friday a 2 day offset may be necessary         WHEN DATENAME(dw, DATEADD(day,1,MIN(po.AUTH_TIME))) = 'Saturday' THEN 1         WHEN DATENAME(dw, DATEADD(day,1,MIN(po.AUTH_TIME))) = 'Sunday' THEN 0          END       ELSE       CASE        WHEN DATENAME(dw, MIN(po.AUTH_TIME)) = 'Friday' THEN 2 --if the EXECUTION_TIME is on a Friday a 2 day offset may be necessary        WHEN DATENAME(dw, MIN(po.AUTH_TIME)) = 'Saturday' THEN 1        WHEN DATENAME(dw, MIN(po.AUTH_TIME)) = 'Sunday' THEN 0        ELSE 0       END      END AS WEEKEND_OFFSET,     CASE       WHEN DATENAME(dw, DATEADD(day,1,MIN(po.AUTH_TIME))) = 'Friday'        AND po.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW')        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list           WHERE CONVERT(DATE, DATEADD(day,1,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)           AND po.COUNTRY = COUNTRY_CODE) = 1        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list           WHERE CONVERT(DATE, DATEADD(day,4,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)           AND po.COUNTRY = COUNTRY_CODE) = 1         THEN 2      WHEN DATENAME(dw, MIN(po.AUTH_TIME)) = 'Friday'        AND po.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW')        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list           WHERE CONVERT(DATE, DATEADD(day,3,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)           AND po.COUNTRY = COUNTRY_CODE) = 1         THEN 1      WHEN po.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW')        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list           WHERE CONVERT(DATE, DATEADD(day,1,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)           AND po.COUNTRY = COUNTRY_CODE) = 1        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list           WHERE CONVERT(DATE, DATEADD(day,2,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)           AND po.COUNTRY = COUNTRY_CODE) = 1        THEN 2      WHEN po.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW')        THEN (SELECT COUNT(DISTINCT CLOSURE_DATES)          FROM #holiday_list          WHERE CONVERT(DATE, CLOSURE_DATES, 103)          BETWEEN CONVERT(DATE, MIN(po.AUTH_TIME), 103)          AND CONVERT(DATE, DATEADD(day,1,MIN(po.AUTH_TIME)), 103)         AND po.COUNTRY = COUNTRY_CODE)      WHEN DATENAME(dw, DATEADD(day,1,MIN(po.AUTH_TIME))) = 'Friday'        AND po.COUNTRY = 'GB'        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list           WHERE CONVERT(DATE, DATEADD(day,1,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)           AND po.COUNTRY = COUNTRY_CODE) = 1        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list           WHERE CONVERT(DATE, DATEADD(day,4,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)           AND po.COUNTRY = COUNTRY_CODE) = 1        THEN 2      WHEN DATENAME(dw, MIN(po.AUTH_TIME)) = 'Friday'        AND po.COUNTRY = 'GB'        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list           WHERE CONVERT(DATE, DATEADD(day,3,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)           AND po.COUNTRY = COUNTRY_CODE) = 1        THEN 1      WHEN po.COUNTRY = 'GB'        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list           WHERE CONVERT(DATE, DATEADD(day,1,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)           AND po.COUNTRY = COUNTRY_CODE) = 1        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list           WHERE CONVERT(DATE, DATEADD(day,2,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)           AND po.COUNTRY = COUNTRY_CODE) = 1         THEN 2      ELSE (SELECT COUNT(DISTINCT CLOSURE_DATES)          FROM #holiday_list          WHERE CONVERT(DATE, CLOSURE_DATES, 103)          BETWEEN CONVERT(DATE, MIN(po.AUTH_TIME), 103)          AND CONVERT(DATE, DATEADD(day,1,MIN(po.AUTH_TIME)), 103)         AND COUNTRY_CODE = 'GB')      END AS HOLIDAY_OFFSET     INTO #holiday_offset     FROM VISTA_REPORTING.dbo.PM_ORDERS po     GROUP BY      po.ORD_NUM,      po.COUNTRY      --po.AUTH_TIME              IF OBJECT_ID('tempdb..#timely_release_table', 'U') IS NOT NULL DROP TABLE #timely_release_table     SELECT DISTINCT      po.ORD_NUM,      qr.RELEASE_DATETIME,      qr.ROUTE_DATETIME,      po.DEALING_DESK,      h.MIN_AUTH_TIME,      gm.UK_open_time,      gm.UK_close_time,      po.COUNTRY,      DATEDIFF (MINUTE, h.MIN_AUTH_TIME, qr.RELEASE_DATETIME) AS RELEASE_DIFF,      DATEDIFF (MINUTE, h.MIN_AUTH_TIME, qr.ROUTE_DATETIME) AS ROUTE_DIFF,      DATEADD(MINUTE, trr.TR_CB_THREHOLD, DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), CONVERT(NVARCHAR(MAX), gm.UK_open_time, 8)))) new_cut_off,      CASE       -- Use the Aladdin release datetime for all orders on convertible bonds, trs and ET Options as requested by client.       -- Use EMSX Route datetime for all others.       -- We also restrict on AUTH_TIME as EMSX data was only available from a specific date, defined in param at top of script.       --WHEN (MIN_AUTH_TIME < @EMSX_VALID_DATE) OR (qr.INST_TYPE in ('CONV BOND', 'TRS', 'ET Options')) THEN       WHEN qr.ORDER_REASON_DECODE = 'MG.GEN 4.Futures Rolling' THEN 0       WHEN h.MIN_AUTH_TIME > trr.DATE_FROM OR (qr.INST_TYPE in ('CONV BOND', 'TRS', 'ET Options')) THEN        CASE         --1. Convert, TRS and options on an Asian market (need clarification on exactly how to identify): a. Release by T + 1 10:00 UK time.          WHEN ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW')          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(MINUTE, trr.TR_CB_THREHOLD, DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), CONVERT  (NVARCHAR(MAX), gm.UK_open_time, 8))))          THEN 1         --2. If the local market opens between 19:00 and 03:00 UK time:          --a. If the order AUTH_TIME is before 19:00 UK time:         --i. Release before 19:00 UK time on T.         WHEN  NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW')          AND (gm.UK_open_time >= CAST('19:00:00' as TIME) OR gm.UK_open_time <= CAST('03:00:00' as TIME))          AND CAST(h.MIN_AUTH_TIME AS TIME) < CAST('19:00:00' AS TIME)          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END >  DATEADD(day, h.HOLIDAY_OFFSET, DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), '19:00:00'))          THEN 1         --2. If the local market opens between 19:00 and 03:00 UK time:          --b. If the order AUTH_TIME is after 19:00 UK time:         --i. Release by 19:00 UK time on T + 1.         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW')           AND (gm.UK_open_time >= CAST('19:00:00' as TIME) OR gm.UK_open_time <= CAST('03:00:00' as TIME))          AND CAST(h.MIN_AUTH_TIME AS TIME) > CAST('19:00:00' AS TIME)          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END >  DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), '19:00:00'))          THEN 1         --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --a. If the AUTH_TIME is more than 32/180 mins before market close:         --i. Release by order AUTH_TIME plus 32/180 minutes or 07:32/10:00 UK time (whichever is later).         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW')           AND ISNULL(qr.INST_TYPE, '') not in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND CAST(h.MIN_AUTH_TIME AS TIME) >= CAST('07:00:00' AS TIME) -- Order was authorised after 07:00          AND DATEADD(minute,trr.TR_NONCB_THRESHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) <= UK_close_time -- The trader has had at least 32 mins prior to market close to release          AND  CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(minute,trr.TR_NONCB_THRESHOLD,h.MIN_AUTH_TIME )         THEN 1         --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --a. If the AUTH_TIME is more than 32/180 mins before market close:         --i. Release by order AUTH_TIME plus 32/180 minutes or 07:32/10:00 UK time (whichever is later).         WHEN   NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW')           AND ISNULL(qr.INST_TYPE, '') not in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND CAST(h.MIN_AUTH_TIME AS TIME) < CAST('07:00:00' AS TIME) -- Order was authorised before 07:00          AND DATEADD(minute,trr.TR_NONCB_THRESHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) <= UK_close_time -- The trader has had at least 32 mins prior to market close to release          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(day, h.HOLIDAY_OFFSET, DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), trr.TR_NEXT_DAY_RELEASE_NONCB))         THEN 1             --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --b. If the AUTH_TIME is less than 32/180 mins before local market close:         --i. Release by T + 1 07:32/10:00 UK time.         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW')           AND ISNULL(qr.INST_TYPE, '') not in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND DATEADD(minute,trr.TR_NONCB_THRESHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) > UK_close_time -- The trader has not had at least 32 mins prior to market close to release          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), trr.TR_NEXT_DAY_RELEASE_NONCB))          THEN 1             --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --a. If the AUTH_TIME is more than 32/180 mins before market close:         --i. Release by order AUTH_TIME plus 32/180 minutes or 07:32/10:00 UK time (whichever is later).         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW')           AND ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND CAST(h.MIN_AUTH_TIME AS TIME) >= CAST('07:00:00' AS TIME) -- Order was authorised after 07:00          AND DATEADD(minute,TR_CB_THREHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) <= UK_close_time -- The trader has had at least 180 mins prior to market close to release          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(minute,trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME )         THEN 1         --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --a. If the AUTH_TIME is more than 32/180 mins before market close:         --i. Release by order AUTH_TIME plus 32/180 minutes or 07:32/10:00 UK time (whichever is later).         WHEN  NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW')           AND ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND CAST(h.MIN_AUTH_TIME AS TIME) < CAST('07:00:00' AS TIME) -- Order was authorised before 07:00          AND DATEADD(minute,TR_CB_THREHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) <= UK_close_time -- The trader has had at least 180 mins prior to market close to release          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(day, h.HOLIDAY_OFFSET, DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), TR_NEXT_DAY_RELEASE_CB))         THEN 1         --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --b. If the AUTH_TIME is less than 32/180 mins before local market close:         --i. Release by T + 1 07:32/10:00 UK time.         WHEN  NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW')           AND ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND DATEADD(minute,TR_CB_THREHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) > UK_close_time -- The trader has not had at least 180 mins prior to market close to release          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), TR_NEXT_DAY_RELEASE_CB))          THEN 1             --4. If the local market opens between 07:00 and 19:00 UK time:          --a. If the order AUTH_TIME is 32/180 mins before the local market close or 19:00 UK time (whichever is earlier).         --i. Release by local market open plus 32/180 mins or order AUTH_TIME plus 32/180 mins (whichever is later).         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))           AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW')          AND ISNULL(qr.INST_TYPE, '') not in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('07:00:00' as TIME)           AND gm.UK_open_time <= CAST('19:00:00' as TIME)          AND CAST(DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME) AS TIME) < CASE                          WHEN UK_close_time >= CAST('19:00:00' AS TIME)                         THEN CAST('19:00:00' AS TIME)                         WHEN UK_close_time < CAST('19:00:00' AS TIME)                         THEN gm.UK_close_time                           END                        AND (CAST(CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END AS TIME) > CASE                     WHEN CONVERT(TIME,h.MIN_AUTH_TIME) > UK_open_time                     THEN CAST(DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME) AS TIME)                     WHEN CONVERT(TIME,MIN_AUTH_TIME) < UK_open_time                     THEN DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, UK_open_time)                      END           OR CAST(CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END AS DATE) > CAST(DATEADD(DAY, h.HOLIDAY_OFFSET, h.MIN_AUTH_TIME) AS DATE))                      THEN 1             -- 4. If the local market opens between 07:00 and 19:00 UK time:          -- b. If the order AUTH_TIME is less than 32/180 mins before the market close or 19:00 UK time (whichever is earlier).         -- i. Release by T +1 local market open time plus 32/180 minutes.         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))           AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW')          AND ISNULL(qr.INST_TYPE, '') not in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('07:00:00' as TIME)           AND gm.UK_open_time <= CAST('19:00:00' as TIME)          AND CAST(DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME) AS TIME) > CASE                          WHEN UK_close_time >= CAST('19:00:00' AS TIME)                         THEN CAST('19:00:00' AS TIME)                         WHEN UK_close_time < CAST('19:00:00' AS TIME)                         THEN gm.UK_close_time                           END            AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(MINUTE,UK_open_time_minutes + trr.TR_NONCB_THRESHOLD,DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ),DATEDIFF(day, 0, h.MIN_AUTH_TIME)))          THEN 1             --4. If the local market opens between 07:00 and 19:00 UK time:          --a. If the order AUTH_TIME is 32/180 mins before the local market close or 19:00 UK time (whichever is earlier).         --i. Release by local market open plus 32/180 mins or order AUTH_TIME plus 32/180 mins (whichever is later).         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW')          AND ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('07:00:00' as TIME)           AND gm.UK_open_time <= CAST('19:00:00' as TIME)          AND CAST(DATEADD(MINUTE, TR_CB_THREHOLD, h.MIN_AUTH_TIME) AS TIME) < CASE                          WHEN UK_close_time >= CAST('19:00:00' AS TIME)                         THEN CAST('19:00:00' AS TIME)                         WHEN UK_close_time < CAST('19:00:00' AS TIME)                         THEN gm.UK_close_time                           END                        AND (CAST(CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END AS TIME) > CASE                 WHEN CONVERT(TIME,h.MIN_AUTH_TIME) > UK_open_time                 THEN CAST(DATEADD(MINUTE, TR_CB_THREHOLD, h.MIN_AUTH_TIME) AS TIME)                 WHEN CONVERT(TIME,h.MIN_AUTH_TIME) < UK_open_time                 THEN DATEADD(MINUTE, TR_CB_THREHOLD, UK_open_time)                  END          OR CAST(CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END AS DATE) > CAST(DATEADD(DAY, h.HOLIDAY_OFFSET, h.MIN_AUTH_TIME) AS DATE))          THEN 1             -- 4. If the local market opens between 07:00 and 19:00 UK time:          -- b. If the order AUTH_TIME is less than 32/180 mins before the market close or 19:00 UK time (whichever is earlier).         -- i. Release by T +1 local market open time plus 32/180 minutes.         WHEN  NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))           AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW')          AND ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('07:00:00' as TIME)           AND gm.UK_open_time <= CAST('19:00:00' as TIME)          AND CAST(DATEADD(MINUTE, TR_CB_THREHOLD, h.MIN_AUTH_TIME) AS TIME) > CASE                          WHEN UK_close_time >= CAST('19:00:00' AS TIME)                         THEN CAST('19:00:00' AS TIME)                         WHEN UK_close_time < CAST('19:00:00' AS TIME)                         THEN gm.UK_close_time                           END            AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(MINUTE,UK_open_time_minutes + TR_CB_THREHOLD,DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ),DATEDIFF(day, 0, h.MIN_AUTH_TIME)))          THEN 1             WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))           AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW')          AND ISNULL(qr.INST_TYPE, '') not in ('ET Options', 'TRS', 'CONV BOND')          AND CAST(DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME) AS TIME) < UK_close_time                        AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME)            THEN 1             -- 4. If the local market opens between 07:00 and 19:00 UK time:          -- b. If the order AUTH_TIME is less than 32/180 mins before the market close or 19:00 UK time (whichever is earlier).         -- i. Release by T +1 local market open time plus 32/180 minutes.         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))           AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW')          AND ISNULL(qr.INST_TYPE, '') not in ('ET Options', 'TRS', 'CONV BOND')          AND CAST(DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME) AS TIME) > UK_close_time          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(MINUTE,UK_open_time_minutes + trr.TR_NONCB_THRESHOLD,DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ),DATEDIFF(day, 0, h.MIN_AUTH_TIME)))          THEN 1         ELSE 0         END      END AS TIMELY_RELEASE_EXCEPTION,      CASE       WHEN (trr.RELEASE_VAR_USED = 'RELEASE') OR (qr.INST_TYPE in ('CONV BOND', 'TRS', 'ET Options')) THEN 'RELEASE'       ELSE 'ROUTE'      END AS RELEASE_VAR_USED,      -- The following is the calculation of the comparison time thresholds used in the Timely Release logic. It       -- is based off the exiting TR logic with the addition of a DATEDIFF() to show the time comparison to the      -- respective threshold.      CASE       WHEN qr.ORDER_REASON_DECODE = 'MG.GEN 4.Futures Rolling' THEN 0       WHEN h.MIN_AUTH_TIME > trr.DATE_FROM OR (qr.INST_TYPE in ('CONV BOND', 'TRS', 'ET Options')) THEN        CASE         --1. Convert, TRS and options on an Asian market (need clarification on exactly how to identify): a. Release by T + 1 10:00 UK time.          WHEN ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW')          AND CASE             WHEN trr.RELEASE_VAR_USED = 'RELEASE'              THEN qr.RELEASE_DATETIME             ELSE qr.ROUTE_DATETIME END > DATEADD(MINUTE, trr.TR_CB_THREHOLD, DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), CONVERT(NVARCHAR(MAX), gm.UK_open_time, 8))))          THEN DATEDIFF(MINUTE, DATEADD(MINUTE, trr.TR_CB_THREHOLD, DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), CONVERT(NVARCHAR(MAX), gm.UK_open_time, 8)))),CASE                                                  WHEN trr.RELEASE_VAR_USED = 'RELEASE'                                                   THEN qr.RELEASE_DATETIME                                                  ELSE qr.ROUTE_DATETIME END)         --2. If the local market opens between 19:00 and 03:00 UK time:          --a. If the order AUTH_TIME is before 19:00 UK time:         --i. Release before 19:00 UK time on T.         WHEN  NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW')           AND (gm.UK_open_time >= CAST('19:00:00' as TIME) OR gm.UK_open_time <= CAST('03:00:00' as TIME))          AND CAST(h.MIN_AUTH_TIME AS TIME) < CAST('19:00:00' AS TIME)          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END >  DATEADD(day, h.HOLIDAY_OFFSET, DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), '19:00:00'))          THEN DATEDIFF(MINUTE, DATEADD(day, h.HOLIDAY_OFFSET, DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), '19:00:00')),CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)         --2. If the local market opens between 19:00 and 03:00 UK time:          --b. If the order AUTH_TIME is after 19:00 UK time:         --i. Release by 19:00 UK time on T + 1.         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW')           AND (gm.UK_open_time >= CAST('19:00:00' as TIME) OR gm.UK_open_time <= CAST('03:00:00' as TIME))          AND CAST(h.MIN_AUTH_TIME AS TIME) > CAST('19:00:00' AS TIME)          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END >  DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), '19:00:00'))          THEN DATEDIFF(MINUTE, DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), '19:00:00')), CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)         --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --a. If the AUTH_TIME is more than 32/180 mins before market close:         --i. Release by order AUTH_TIME plus 32/180 minutes or 07:32/10:00 UK time (whichever is later).         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW')           AND ISNULL(qr.INST_TYPE, '') not in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND CAST(h.MIN_AUTH_TIME AS TIME) >= CAST('07:00:00' AS TIME) -- Order was authorised after 07:00          AND DATEADD(minute,trr.TR_NONCB_THRESHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) <= UK_close_time -- The trader has had at least 32 mins prior to market close to release          AND  CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(minute,trr.TR_NONCB_THRESHOLD,h.MIN_AUTH_TIME)         THEN DATEDIFF(MINUTE, DATEADD(minute,trr.TR_NONCB_THRESHOLD,h.MIN_AUTH_TIME), CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)         --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --a. If the AUTH_TIME is more than 32/180 mins before market close:         --i. Release by order AUTH_TIME plus 32/180 minutes or 07:32/10:00 UK time (whichever is later).         WHEN  NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW')           AND ISNULL(qr.INST_TYPE, '') not in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND CAST(h.MIN_AUTH_TIME AS TIME) < CAST('07:00:00' AS TIME) -- Order was authorised before 07:00          AND DATEADD(minute,trr.TR_NONCB_THRESHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) <= UK_close_time -- The trader has had at least 32 mins prior to market close to release          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(day, h.HOLIDAY_OFFSET, DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), trr.TR_NEXT_DAY_RELEASE_NONCB))         THEN DATEDIFF(MINUTE, DATEADD(day, h.HOLIDAY_OFFSET, DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), trr.TR_NEXT_DAY_RELEASE_NONCB)), CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)             --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --b. If the AUTH_TIME is less than 32/180 mins before local market close:         --i. Release by T + 1 07:32/10:00 UK time.         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW')           AND ISNULL(qr.INST_TYPE, '') not in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND DATEADD(minute,trr.TR_NONCB_THRESHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) > UK_close_time -- The trader has not had at least 32 mins prior to market close to release          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), trr.TR_NEXT_DAY_RELEASE_NONCB))          THEN DATEDIFF(MINUTE, DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), trr.TR_NEXT_DAY_RELEASE_NONCB)), CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)             --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --a. If the AUTH_TIME is more than 32/180 mins before market close:         --i. Release by order AUTH_TIME plus 32/180 minutes or 07:32/10:00 UK time (whichever is later).         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW')           AND ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND CAST(h.MIN_AUTH_TIME AS TIME) >= CAST('07:00:00' AS TIME) -- Order was authorised after 07:00          AND DATEADD(minute,TR_CB_THREHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) <= UK_close_time -- The trader has had at least 180 mins prior to market close to release          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(minute,trr.TR_CB_THREHOLD, h.MIN_AUTH_TIME)         THEN DATEDIFF(MINUTE, DATEADD(minute,trr.TR_CB_THREHOLD,h.MIN_AUTH_TIME), CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)         --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --a. If the AUTH_TIME is more than 32/180 mins before market close:         --i. Release by order AUTH_TIME plus 32/180 minutes or 07:32/10:00 UK time (whichever is later).         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW')           AND ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND CAST(h.MIN_AUTH_TIME AS TIME) < CAST('07:00:00' AS TIME) -- Order was authorised before 07:00          AND DATEADD(minute,TR_CB_THREHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) <= UK_close_time -- The trader has had at least 180 mins prior to market close to release          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(day, h.HOLIDAY_OFFSET, DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), TR_NEXT_DAY_RELEASE_CB))         THEN DATEDIFF(MINUTE, DATEADD(day, h.HOLIDAY_OFFSET, DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), TR_NEXT_DAY_RELEASE_CB)), CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)         --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --b. If the AUTH_TIME is less than 32/180 mins before local market close:         --i. Release by T + 1 07:32/10:00 UK time.         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))          AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW')           AND ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND DATEADD(minute,TR_CB_THREHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) > UK_close_time -- The trader has not had at least 180 mins prior to market close to release          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), TR_NEXT_DAY_RELEASE_CB))          THEN DATEDIFF(MINUTE, DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), TR_NEXT_DAY_RELEASE_CB)), CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)               --4. If the local market opens between 07:00 and 19:00 UK time:          --a. If the order AUTH_TIME is 32/180 mins before the local market close or 19:00 UK time (whichever is earlier).         --i. Release by local market open plus 32/180 mins or order AUTH_TIME plus 32/180 mins (whichever is later).         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))           AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW')          AND ISNULL(qr.INST_TYPE, '') not in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('07:00:00' as TIME)           AND gm.UK_open_time <= CAST('19:00:00' as TIME)          THEN            CASE            WHEN CAST(DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME) AS TIME) < CASE                                 WHEN (gm.UK_close_time < CAST('19:00:00' AS TIME)) --AND (CAST(h.MIN_AUTH_TIME AS TIME) < gm.UK_close_time)                                 THEN gm.UK_close_time                                ELSE CAST('19:00:00' AS TIME)                                 END             THEN DATEDIFF(MINUTE,                   CASE                    WHEN CONVERT(TIME,h.MIN_AUTH_TIME) > UK_open_time                    THEN DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME)                   --ELSE DATEADD(MINUTE, UK_open_time_minutes + trr.TR_CB_THREHOLD,DATEADD(day, (h.HOLIDAY_OFFSET+h.WEEKEND_OFFSET),DATEDIFF(day, 0, h.MIN_AUTH_TIME)))                   WHEN CONVERT(TIME,h.MIN_AUTH_TIME) < UK_open_time                    THEN DATEADD(MINUTE, UK_open_time_minutes + trr.TR_NONCB_THRESHOLD, DATEADD(day, 0,DATEDIFF(day, 0, h.MIN_AUTH_TIME)))                   --ELSE DATEADD(MINUTE, UK_open_time_minutes + trr.TR_CB_THREHOLD,DATEADD(day, (h.HOLIDAY_OFFSET+h.WEEKEND_OFFSET),DATEDIFF(day, 0, h.MIN_AUTH_TIME)))                  END,                   CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)                 WHEN CAST(DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME) AS TIME) > CASE                                 WHEN (gm.UK_close_time < CAST('19:00:00' AS TIME)) --AND (CAST(h.MIN_AUTH_TIME AS TIME) < gm.UK_close_time)                                 THEN gm.UK_close_time                                ELSE CAST('19:00:00' AS TIME)                                 END             THEN DATEDIFF(MINUTE, DATEADD(MINUTE, UK_open_time_minutes + TR_NONCB_THRESHOLD,DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET),DATEDIFF(day, 0, h.MIN_AUTH_TIME))), CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)                        ELSE DATEDIFF(MINUTE, DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME), CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)           END         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))           AND qr.COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW')          AND ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('07:00:00' as TIME)           AND gm.UK_open_time <= CAST('19:00:00' as TIME)          THEN            CASE            WHEN CAST(DATEADD(MINUTE, trr.TR_CB_THREHOLD, h.MIN_AUTH_TIME) AS TIME) < CASE                                WHEN (gm.UK_close_time < CAST('19:00:00' AS TIME)) AND (CAST(h.MIN_AUTH_TIME AS TIME) < gm.UK_close_time)                                THEN gm.UK_close_time                               ELSE CAST('19:00:00' AS TIME)                                END             THEN DATEDIFF(MINUTE,                   CASE                  WHEN CONVERT(TIME,h.MIN_AUTH_TIME) > UK_open_time                   THEN DATEADD(MINUTE, trr.TR_CB_THREHOLD, h.MIN_AUTH_TIME)                    WHEN CONVERT(TIME,h.MIN_AUTH_TIME) < UK_open_time                    THEN DATEADD(MINUTE, UK_open_time_minutes + trr.TR_CB_THREHOLD,DATEADD(day, 0,DATEDIFF(day, 0, h.MIN_AUTH_TIME)))                  --ELSE DATEADD(MINUTE, UK_open_time_minutes + trr.TR_CB_THREHOLD,DATEADD(day, (h.HOLIDAY_OFFSET+h.WEEKEND_OFFSET),DATEDIFF(day, 0, h.MIN_AUTH_TIME)))                  END, CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)            WHEN CAST(DATEADD(MINUTE, trr.TR_CB_THREHOLD, h.MIN_AUTH_TIME) AS TIME) > CASE                                WHEN (gm.UK_close_time < CAST('19:00:00' AS TIME)) AND (CAST(h.MIN_AUTH_TIME AS TIME) < gm.UK_close_time)                                THEN gm.UK_close_time                               ELSE CAST('19:00:00' AS TIME)                                END             THEN DATEDIFF(MINUTE, DATEADD(MINUTE, UK_open_time_minutes + trr.TR_CB_THREHOLD,DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET),DATEDIFF(day, 0, h.MIN_AUTH_TIME))), CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)                        ELSE DATEDIFF(MINUTE, DATEADD(MINUTE, trr.TR_CB_THREHOLD, h.MIN_AUTH_TIME), CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)           END         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW')          AND ISNULL(qr.INST_TYPE, '') not in ('ET Options', 'TRS', 'CONV BOND')          THEN            CASE            WHEN CAST(DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME) AS TIME) < gm.UK_close_time             THEN DATEDIFF(MINUTE, DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME), CASE                                  WHEN trr.RELEASE_VAR_USED = 'RELEASE'                                   THEN qr.RELEASE_DATETIME                                   ELSE qr.ROUTE_DATETIME                                   END)            WHEN CAST(DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME) AS TIME) > gm.UK_close_time             THEN DATEDIFF(MINUTE, DATEADD(MINUTE, UK_open_time_minutes + TR_NONCB_THRESHOLD, DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET),DATEDIFF(day, 0, h.MIN_AUTH_TIME))), CASE                                                          WHEN trr.RELEASE_VAR_USED = 'RELEASE'                                                          THEN qr.RELEASE_DATETIME                                                          ELSE qr.ROUTE_DATETIME                                                          END)            ELSE DATEDIFF(MINUTE, DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME), CASE                                  WHEN trr.RELEASE_VAR_USED = 'RELEASE'                                  THEN qr.RELEASE_DATETIME                                  ELSE qr.ROUTE_DATETIME                                 END)           END         ELSE DATEDIFF(MINUTE, h.MIN_AUTH_TIME, CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)        END       ELSE DATEDIFF(MINUTE, h.MIN_AUTH_TIME, CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)      END AS TR_CRITERIA_ELAPSED     INTO #timely_release_table     FROM VISTA_REPORTING.dbo.PM_ORDERS po     LEFT JOIN #order_release_datetime_table qr ON qr.ORD_NUM=po.ORD_NUM     LEFT JOIN #gmt_open_close_fin gm ON gm.ORD_NUM=po.ORD_NUM     LEFT JOIN #holiday_offset h ON h.ORD_NUM=po.ORD_NUM     LEFT JOIN VISTA_STAGING.dbo.TIMELY_RELEASE_REFERENCE_TABLE trr ON h.MIN_AUTH_TIME >= trr.DATE_FROM AND h.MIN_AUTH_TIME < trr.DATE_TO     WHERE po.DEALING_DESK = 'Equity' and ISNULL(qr.PRIMARY_MARKET,0) = 0             -- Use #timely_release_table to populate FINAL_STATUS_UPDATE_TABLE     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     select distinct      CONCAT(ORD_NUM,'_11') AS ID,      '1A1' AS STATUS,      NULL AS FINAL_UPDATED_TIME     into #temp_status_table     from #timely_release_table     where TIMELY_RELEASE_EXCEPTION = 1 --AND MIN_AUTH_TIME > '2019-12-23')     --   OR (TIMELY_RELEASE_EXCEPTION = 1 AND COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))          MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET       T.ID=T.ID,       T.STATUS=T.STATUS,       T.DEALING_DESK = 'Equity',       T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'Equity');         --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      NULL AS MULTI_FUND_ID,      NULL AS TRD_ORD,      ex.ORD_NUM AS PM_ORD,      'Timely Release' AS Exception_Type,      CONCAT(ex.ORD_NUM,'_11') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'For Review' AS Status,      NULL AS ClientExecID,      'Equity' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      NULL AS DEALER,      '1A1' AS STATUS_ID,      pm.AUTH_TIME AS ORD_AUTH,      NULL AS TRADE_EXEC     INTO #temp_audit     FROM #timely_release_table ex     LEFT JOIN (SELECT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.PM_ORDERS GROUP BY ORD_NUM) pm     ON ex.ORD_NUM = pm.ORD_NUM     where TIMELY_RELEASE_EXCEPTION = 1     --   OR (TIMELY_RELEASE_EXCEPTION = 1 AND COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))          MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);             IF OBJECT_ID('VISTA_STAGING.dbo.VG_11_TIMELY_RELEASE_EQ_TABLE') IS NULL     SELECT DISTINCT     ORD_NUM,     DEALING_DESK,     CASE WHEN MIN(TR_CRITERIA_ELAPSED) < 0 THEN 0 ELSE MIN(TR_CRITERIA_ELAPSED) END AS TR_CRITERIA_ELAPSED,     --CASE      -- WHEN MIN(MIN_AUTH_TIME) >'2019-12-23' AND COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW') THEN MAX(TIMELY_RELEASE_EXCEPTION)     -- WHEN COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW') THEN MAX(TIMELY_RELEASE_EXCEPTION)     -- ELSE 0      --END AS TIMELY_RELEASE_EXCEPTION,     MAX(TIMELY_RELEASE_EXCEPTION) AS TIMELY_RELEASE_EXCEPTION,     CASE      -- WHEN MIN(MIN_AUTH_TIME) >'2019-12-23' AND COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW') AND MAX(TIMELY_RELEASE_EXCEPTION)=1 THEN GETDATE()     -- WHEN COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW') AND MAX(TIMELY_RELEASE_EXCEPTION) = 1 THEN GETDATE()      WHEN MAX(TIMELY_RELEASE_EXCEPTION) = 1 THEN GETDATE()       ELSE NULL      END AS TR_CREATETIME --if exception has been raised then create DATETIME timestamp     INTO VISTA_STAGING.dbo.VG_11_TIMELY_RELEASE_EQ_TABLE     FROM #timely_release_table     GROUP BY ORD_NUM, DEALING_DESK         ELSE          IF OBJECT_ID('tempdb..#temp_tre_table') IS NOT NULL DROP TABLE #temp_tre_table         SELECT DISTINCT     ORD_NUM,     DEALING_DESK,     CASE WHEN MIN(TR_CRITERIA_ELAPSED) < 0 THEN 0 ELSE MIN(TR_CRITERIA_ELAPSED) END AS TR_CRITERIA_ELAPSED,     --CASE      -- WHEN MIN(MIN_AUTH_TIME) >'2019-12-23' AND COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW') THEN MAX(TIMELY_RELEASE_EXCEPTION)      -- WHEN COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW') THEN MAX(TIMELY_RELEASE_EXCEPTION)     -- ELSE 0      --END AS TIMELY_RELEASE_EXCEPTION,     MAX(TIMELY_RELEASE_EXCEPTION) AS TIMELY_RELEASE_EXCEPTION,     CASE       --WHEN MIN(MIN_AUTH_TIME) >'2019-12-23' AND COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW') AND MAX(TIMELY_RELEASE_EXCEPTION) = 1 THEN GETDATE()       --WHEN COUNTRY not in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW') AND MAX(TIMELY_RELEASE_EXCEPTION) = 1 THEN GETDATE()       WHEN MAX(TIMELY_RELEASE_EXCEPTION) = 1 THEN GETDATE()       ELSE NULL      END AS TR_CREATETIME --if exception has been raised then create DATETIME timestamp     INTO #temp_tre_table     FROM #timely_release_table     GROUP BY ORD_NUM, DEALING_DESK         MERGE VISTA_STAGING.dbo.VG_11_TIMELY_RELEASE_EQ_TABLE AS T     USING #temp_tre_table AS S     ON (T.ORD_NUM=S.ORD_NUM)     WHEN MATCHED      THEN       UPDATE SET        T.DEALING_DESK = S.DEALING_DESK,       T.TR_CRITERIA_ELAPSED = S.TR_CRITERIA_ELAPSED,       T.TIMELY_RELEASE_EXCEPTION = CASE WHEN S.TIMELY_RELEASE_EXCEPTION > T.TIMELY_RELEASE_EXCEPTION THEN S.TIMELY_RELEASE_EXCEPTION ELSE T.TIMELY_RELEASE_EXCEPTION END,       T.TR_CREATETIME = CASE WHEN S.TIMELY_RELEASE_EXCEPTION > T.TIMELY_RELEASE_EXCEPTION THEN S.TR_CREATETIME ELSE T.TR_CREATETIME END     WHEN NOT MATCHED       THEN INSERT (ORD_NUM, DEALING_DESK, TR_CRITERIA_ELAPSED, TIMELY_RELEASE_EXCEPTION, TR_CREATETIME)        VALUES (S.ORD_NUM, S.DEALING_DESK, S.TR_CRITERIA_ELAPSED, S.TIMELY_RELEASE_EXCEPTION, S.TR_CREATETIME);         IF OBJECT_ID('tempdb..#tzs', 'U') IS NOT NULL DROP TABLE #tzs     IF OBJECT_ID('tempdb..#tz_periods', 'U') IS NOT NULL DROP TABLE #tz_periods     IF OBJECT_ID('tempdb..#First_release', 'U') IS NOT NULL DROP TABLE #First_release     IF OBJECT_ID('tempdb..#order_details', 'U') IS NOT NULL DROP TABLE #order_details     IF OBJECT_ID('tempdb..#order_release_datetime_table', 'U') IS NOT NULL DROP TABLE #order_release_datetime_table     IF OBJECT_ID('tempdb..#gmt_open_close', 'U') IS NOT NULL DROP TABLE #gmt_open_close     IF OBJECT_ID('tempdb..#gmt_open_close_fin', 'U') IS NOT NULL DROP TABLE #gmt_open_close_fin     IF OBJECT_ID('tempdb..#holiday_offset', 'U') IS NOT NULL DROP TABLE #holiday_offset     IF OBJECT_ID('tempdb..#timely_release_table', 'U') IS NOT NULL DROP TABLE #timely_release_table     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     IF OBJECT_ID('tempdb..#temp_tre_table') IS NOT NULL DROP TABLE #temp_tre_table        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_11_TIMELY_RELEASE_EQ_archive  CreateDate: 2025-06-26 18:04:28.533  ModifyDate: 2025-06-26 18:04:28.533  --- DEFINITION START ---  -- =============================================    -- Author:  <da Costa, David>    -- Create date: <20/10/2017>    -- Description:     -- <For EQ only. Difference between Release DateTime and     -- Approved DateTime. IF Difference is greater than 23 mins    -- raise as an exception>    -- =============================================            -- ***************VERSION CONTROL***************    -- 29/11/2017 - DDC: MIN() and MAX() of OPENTIME4    -- and CLOSETIME removed. HOLIDAY and WEEKEND     -- offsets added rebasing related to Asian     -- Convertible Bonds.    --    -- 11/12/2017 - DDC: Changes made to ensure that script     -- only ever updates existing records always ensuring     -- the highest level exception is reported and     -- inserts new ones if no exception has been raised.        -- 04/01/2018 - DDC: Amendment made to only run  exception    -- calculations on the data for the day the exception is     -- being pulled        -- 30/01/2018 - DDC: Exception threshold for local market    -- non-ET Options, non-Convertible Bonds and non-OTC changed    -- from 20 minutes to 32 minutes        -- 2018-0713 - WH: Update to use the Route datetime provided in     -- the EMSX files (these come through SFTP). This update is only     -- applied for orders authorised on or after 19 June 2018 (as agreed with EQDD).        -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.        -- 2019-02-13 - DDC: Changed threshold from 32 mins to 20 mins for any order     -- authorised after 2019-13-02        -- 2019-02-21 - DDC: Logic changed to use refrence tables and not hardcoded values,    -- reference table is VISTA_STAGING.dbo.TIMELY_RELEASE_REFERENCE_TABLE        -- 2019-03-12 - DDC: inclusion of comparison threshold on TIMRELY_RELEASE exceptions        -- 2019-04-11 - DDC: Inclusion of new HOLIDAY/WEEKEND offset calculation    -- *********************************************    CREATE PROCEDURE [dbo].[VG_11_TIMELY_RELEASE_EQ_archive]     -- Add the parameters for the stored procedure here     -- @Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         --DECLARE @DATE_FILTER AS DATE --Declare date filter to only select data from current pull date     --SET @DATE_FILTER = CONVERT(DATE, GETDATE())            --Insert statements for procedure here         --1. Create a temp table holding the timezones     IF OBJECT_ID('tempdb..#tzs', 'U') IS NOT NULL DROP TABLE #tzs     SELECT DISTINCT        COUNTRY,       GMTOFFSETMINS,       PERIODSTART,       ROW_NUMBER() OVER (PARTITION BY COUNTRY ORDER BY PERIODSTART) RowNum     INTO #tzs     FROM          (SELECT DISTINCT COUNTRY,GMTOFFSETMINS, PERIODSTART FROM VISTA_REPORTING.dbo.TIMEZONES ) a            IF OBJECT_ID('tempdb..#tz_periods', 'U') IS NOT NULL DROP TABLE #tz_periods     SELECT       base.COUNTRY,      base.GMTOFFSETMINS,      base.PERIODSTART,      ISNULL(next.PERIODSTART,'9999-12-31') AS PERIOD_END     INTO #tz_periods     FROM #tzs base     LEFT JOIN #tzs next     ON base.COUNTRY = next.COUNTRY     AND base.RowNum + 1 = next.RowNum         --2. For each Order, find the first release or execution time.     IF OBJECT_ID('tempdb..#First_release', 'U') IS NOT NULL DROP TABLE #First_release     SELECT       a.ORD_NUM,       MIN(a.RELEASE_DATETIME) AS First_Release,      MIN(a.ROUTE_DATETIME) AS First_Route     INTO #First_release     FROM (      SELECT        oc.PM_ORD AS ORD_NUM,        RELEASE_DATETIME,       ROUTE_DATETIME      FROM VISTA_REPORTING.dbo.PLACEMENTS p      LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_STAGING.dbo.ORDERS_CROSS) oc      ON p.ORD_NUM = oc.TRD_ORD       UNION      SELECT           oc.PM_ORD AS ORD_NUM,        EXECUTION_TIME, --Use execution        EXECUTION_TIME      FROM VISTA_REPORTING.dbo.TRADES t      LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_STAGING.dbo.ORDERS_CROSS) oc      ON t.ORD_NUM = oc.TRD_ORD     ) a     INNER JOIN (SELECT ORD_NUM, MIN(AUTH_TIME) AS MIN_AUTH         FROM VISTA_REPORTING.dbo.PM_ORDERS         GROUP BY ORD_NUM) pm ON pm.ORD_NUM=a.ORD_NUM           AND (pm.MIN_AUTH <= COALESCE(a.RELEASE_DATETIME, '9999-11-30 00:00:00.000') AND pm.MIN_AUTH <= COALESCE(a.ROUTE_DATETIME, '9999-11-30 00:00:00.000'))     GROUP BY       a.ORD_NUM             IF OBJECT_ID('tempdb..#order_details', 'U') IS NOT NULL DROP TABLE #order_details         SELECT DISTINCT              --Create table with RELEASE_DATETIMES by PM Order No       po.ORD_NUM,              --and join on TIMEZONES table to get the offset required     po.AUTH_TIME,               --for GMT conyversion     --i2.COUNTRY as countrys,                                                    --i2.MARKET,     CASE       WHEN i2.MARKET = 'EURO' THEN 'DE'      WHEN i2.MARKET = 'YANKEE' THEN 'US'      WHEN i2.MARKET = 'GLBL' THEN 'GB'      ELSE i2.MARKET     END AS COUNTRY,     MIN(pr.INST_TYPE) AS INST_TYPE,     MAX(pr.PRIMARY_MARKET) AS PRIMARY_MARKET,     f_r.First_Release AS RELEASE_DATETIME,     f_r.First_Route AS ROUTE_DATETIME,     po.ORDER_REASON_DECODE     INTO #order_details     FROM VISTA_REPORTING.dbo.PM_ORDERS po     LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_STAGING.dbo.ORDERS_CROSS) oc ON oc.PM_ORD=po.ORD_NUM     LEFT JOIN VISTA_REPORTING.dbo.TRADES t ON t.ORD_NUM=oc.TRD_ORD     LEFT JOIN VISTA_REPORTING.dbo.PLACEMENTS p ON p.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.ORD_NUM=oc.TRD_ORD     LEFT JOIN #First_release f_r ON po.ORD_NUM = f_R.ORD_NUM     OUTER APPLY (SELECT TOP 1 i.* FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=coalesce(t.CUSIP, po.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(t.EXECUTION_TIME, po.AUTH_TIME)))         ORDER BY i.DATE DESC) as i2     where po.DEALING_DESK = 'Equity'      GROUP BY      po.ORD_NUM,      po.AUTH_TIME,      CASE        WHEN i2.MARKET = 'EURO' THEN 'DE'       WHEN i2.MARKET = 'YANKEE' THEN 'US'       WHEN i2.MARKET = 'GLBL' THEN 'GB'       ELSE i2.MARKET      END,      f_r.First_Release,      f_r.First_Route,      po.ORDER_REASON_DECODE          IF OBJECT_ID('tempdb..#order_release_datetime_table', 'U') IS NOT NULL DROP TABLE #order_release_datetime_table     SELECT       od.* ,     tz.GMTOFFSETMINS AS GMTOFFSET,     tz2.GMTOFFSETMINS AS UK_GMTOFFSET     INTO #order_release_datetime_table      FROM #order_details od     LEFT JOIN #tz_periods tz ON od.COUNTRY = tz.COUNTRY AND od.RELEASE_DATETIME >=tz.PERIODSTART AND od.RELEASE_DATETIME < tz.PERIOD_END     LEFT JOIN #tz_periods tz2 ON tz2.COUNTRY = 'GB' AND od.RELEASE_DATETIME >=tz2.PERIODSTART AND od.RELEASE_DATETIME < tz2.PERIOD_END -- Find the UK offset from GMT. THis is used for finding the difference between GMT and BST for UK daylight savings times.               --and po.PULL_DATE=@DATE_FILTER         --select * from #order_release_datetime_table where ORD_NUM = 926468             /* 07-11-2019:        Cureently we do not take into account the exchange but this may become a requirment in the future        We have been given opening times for two exchanges in China (Shenzhen and Shanghai) however as they        have the same opening time and the GMT offset is the same there will be no impact in the short term.         In future howeverwe may need to consider exchange which will mean finding additional data in Aladdin      */     IF OBJECT_ID('tempdb..#gmt_open_close', 'U') IS NOT NULL DROP TABLE #gmt_open_close         SELECT                                                          --Create temporary table with all the global exchanges'     po.ORD_NUM,              --opening and closing times converted to GMT     rd.GMTOFFSET,     er.min_open as local_open_time,     er.Max_close as local_close_time,     DATEADD(minute,-1*(ISNULL(GMTOFFSET,0)-ISNULL(UK_GMTOFFSET,0)),min_open) AS UK_open_time,     DATEADD(minute,-1*(ISNULL(GMTOFFSET,0)-ISNULL(UK_GMTOFFSET,0)),max_close) AS UK_close_time,     rd.COUNTRY     INTO #gmt_open_close     FROM VISTA_REPORTING.dbo.PM_ORDERS po     --LEFT JOIN VISTA_REPORTING.dbo.INSTRUMENTS i ON i.CUSIP=po.CUSIP     JOIN #order_release_datetime_table rd ON rd.ORD_NUM=po.ORD_NUM     LEFT JOIN (SELECT COUNTRY, MIN(CONVERT(TIME,OPENTIME)) AS min_open, MAX(CONVERT(TIME,CLOSETIME)) AS Max_close FROM VISTA_REPORTING.dbo.EXCHANGE_REFERENCE WHERE MARKET_TIMES = 1 GROUP BY COUNTRY) er      ON rd.COUNTRY = er.COUNTRY     --WHERE po.PULL_DATE=@DATE_FILTER     GROUP BY      po.ORD_NUM,      po.CUSIP,      rd.COUNTRY,      rd.GMTOFFSET,      rd.UK_GMTOFFSET,      er.min_open,      er.Max_close         IF OBJECT_ID('tempdb..#gmt_open_close_fin', 'U') IS NOT NULL DROP TABLE #gmt_open_close_fin     SELECT      *,      (DATEPART(hour, UK_open_time) * 60) + (DATEPART(minute, UK_open_time) ) AS UK_open_time_minutes     INTO #gmt_open_close_fin     FROM #gmt_open_close     --SELECT * FROM #gmt_open_close_fin WHERE ORD_NUM = 926468             IF OBJECT_ID('tempdb..#holiday_list', 'U') IS NOT NULL DROP TABLE #holiday_list     SELECT DISTINCT CLOSURE_DATES      INTO #holiday_list      FROM VISTA_STAGING.dbo.HOLIDAYS WHERE COUNTRY_CODE='GB'          IF OBJECT_ID('tempdb..#holiday_offset', 'U') IS NOT NULL DROP TABLE #holiday_offset     SELECT --create a table by MULTI_FUND_ID to account for weekend and holiday offsets to rebased datetimes     --t.MULTI_FUND_ID,     --t.EXECUTION_TIME,     --t.TRD_AUTH_TIME,     po.ORD_NUM,     MIN(po.AUTH_TIME) AS MIN_AUTH_TIME,     --DATEADD(day,1,MIN(t.EXECUTION_TIME)) REBASED_AUTH_TIME,     CASE       WHEN  DATENAME(dw, DATEADD(day,1,MIN(po.AUTH_TIME))) = 'Friday' AND         (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,1,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1          THEN           CASE         WHEN DATENAME(dw, DATEADD(day,1,MIN(po.AUTH_TIME))) = 'Friday' THEN 2 --if the EXECUTION_TIME is on a Friday a 2 day offset may be necessary         WHEN DATENAME(dw, DATEADD(day,1,MIN(po.AUTH_TIME))) = 'Saturday' THEN 1         WHEN DATENAME(dw, DATEADD(day,1,MIN(po.AUTH_TIME))) = 'Sunday' THEN 0          END       ELSE       CASE        WHEN DATENAME(dw, MIN(po.AUTH_TIME)) = 'Friday' THEN 2 --if the EXECUTION_TIME is on a Friday a 2 day offset may be necessary        WHEN DATENAME(dw, MIN(po.AUTH_TIME)) = 'Saturday' THEN 1        WHEN DATENAME(dw, MIN(po.AUTH_TIME)) = 'Sunday' THEN 0        ELSE 0       END      END AS WEEKEND_OFFSET,     CASE       WHEN DATENAME(dw, DATEADD(day,1,MIN(po.AUTH_TIME))) = 'Friday'        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,1,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,4,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1         THEN 2      WHEN DATENAME(dw, MIN(po.AUTH_TIME)) = 'Friday'        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,3,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1         THEN 1      WHEN (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,1,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1        AND (SELECT COUNT(DISTINCT CLOSURE_DATES)           FROM #holiday_list WHERE CONVERT(DATE, DATEADD(day,2,MIN(po.AUTH_TIME)), 103) = CONVERT(DATE, CLOSURE_DATES, 103)) = 1         THEN 2      ELSE (SELECT COUNT(DISTINCT CLOSURE_DATES)          FROM #holiday_list          WHERE CONVERT(DATE, CLOSURE_DATES, 103)          BETWEEN CONVERT(DATE, MIN(po.AUTH_TIME), 103)          AND CONVERT(DATE, DATEADD(day,1,MIN(po.AUTH_TIME)), 103))      END AS HOLIDAY_OFFSET     INTO #holiday_offset     FROM VISTA_REPORTING.dbo.PM_ORDERS po     GROUP BY      po.ORD_NUM      --po.AUTH_TIME              IF OBJECT_ID('tempdb..#timely_release_table', 'U') IS NOT NULL DROP TABLE #timely_release_table     SELECT DISTINCT      po.ORD_NUM,      qr.RELEASE_DATETIME,      qr.ROUTE_DATETIME,      po.DEALING_DESK,      h.MIN_AUTH_TIME,      gm.UK_open_time,      gm.UK_close_time,      DATEDIFF (MINUTE, h.MIN_AUTH_TIME, qr.RELEASE_DATETIME) AS RELEASE_DIFF,      DATEDIFF (MINUTE, h.MIN_AUTH_TIME, qr.ROUTE_DATETIME) AS ROUTE_DIFF,      CASE       -- Use the Aladdin release datetime for all orders on convertible bonds, trs and ET Options as requested by client.       -- Use EMSX Route datetime for all others.       -- We also restrict on AUTH_TIME as EMSX data was only available from a specific date, defined in param at top of script.       --WHEN (MIN_AUTH_TIME < @EMSX_VALID_DATE) OR (qr.INST_TYPE in ('CONV BOND', 'TRS', 'ET Options')) THEN       WHEN qr.ORDER_REASON_DECODE = 'MG.GEN 4.Futures Rolling' THEN 0       WHEN h.MIN_AUTH_TIME > trr.DATE_FROM OR (qr.INST_TYPE in ('CONV BOND', 'TRS', 'ET Options')) THEN        CASE         --1. Convert, TRS and options on an Asian market (need clarification on exactly how to identify): a. Release by T + 1 10:00 UK time.          WHEN ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW')          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), TR_NEXT_DAY_RELEASE_CB))          THEN 1         --2. If the local market opens between 19:00 and 03:00 UK time:          --a. If the order AUTH_TIME is before 19:00 UK time:         --i. Release before 19:00 UK time on T.         WHEN  NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))           AND (gm.UK_open_time >= CAST('19:00:00' as TIME) OR gm.UK_open_time <= CAST('03:00:00' as TIME))          AND CAST(h.MIN_AUTH_TIME AS TIME) < CAST('19:00:00' AS TIME)          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END >  DATEADD(day, h.HOLIDAY_OFFSET, DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), '19:00:00'))          THEN 1         --2. If the local market opens between 19:00 and 03:00 UK time:          --b. If the order AUTH_TIME is after 19:00 UK time:         --i. Release by 19:00 UK time on T + 1.         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))           AND (gm.UK_open_time >= CAST('19:00:00' as TIME) OR gm.UK_open_time <= CAST('03:00:00' as TIME))          AND CAST(h.MIN_AUTH_TIME AS TIME) > CAST('19:00:00' AS TIME)          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END >  DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), '19:00:00'))          THEN 1         --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --a. If the AUTH_TIME is more than 32/180 mins before market close:         --i. Release by order AUTH_TIME plus 32/180 minutes or 07:32/10:00 UK time (whichever is later).         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))           AND ISNULL(qr.INST_TYPE, '') not in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND CAST(h.MIN_AUTH_TIME AS TIME) >= CAST('07:00:00' AS TIME) -- Order was authorised after 07:00          AND DATEADD(minute,trr.TR_NONCB_THRESHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) <= UK_close_time -- The trader has had at least 32 mins prior to market close to release          AND  CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(minute,trr.TR_NONCB_THRESHOLD,h.MIN_AUTH_TIME )         THEN 1         --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --a. If the AUTH_TIME is more than 32/180 mins before market close:         --i. Release by order AUTH_TIME plus 32/180 minutes or 07:32/10:00 UK time (whichever is later).         WHEN   NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))           AND ISNULL(qr.INST_TYPE, '') not in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND CAST(h.MIN_AUTH_TIME AS TIME) < CAST('07:00:00' AS TIME) -- Order was authorised before 07:00          AND DATEADD(minute,trr.TR_NONCB_THRESHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) <= UK_close_time -- The trader has had at least 32 mins prior to market close to release          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(day, h.HOLIDAY_OFFSET, DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), trr.TR_NEXT_DAY_RELEASE_NONCB))         THEN 1             --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --b. If the AUTH_TIME is less than 32/180 mins before local market close:         --i. Release by T + 1 07:32/10:00 UK time.         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))           AND ISNULL(qr.INST_TYPE, '') not in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND DATEADD(minute,trr.TR_NONCB_THRESHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) > UK_close_time -- The trader has not had at least 32 mins prior to market close to release          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), trr.TR_NEXT_DAY_RELEASE_NONCB))          THEN 1             --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --a. If the AUTH_TIME is more than 32/180 mins before market close:         --i. Release by order AUTH_TIME plus 32/180 minutes or 07:32/10:00 UK time (whichever is later).         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))           AND ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND CAST(h.MIN_AUTH_TIME AS TIME) >= CAST('07:00:00' AS TIME) -- Order was authorised after 07:00          AND DATEADD(minute,TR_CB_THREHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) <= UK_close_time -- The trader has had at least 180 mins prior to market close to release          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(minute,trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME )         THEN 1         --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --a. If the AUTH_TIME is more than 32/180 mins before market close:         --i. Release by order AUTH_TIME plus 32/180 minutes or 07:32/10:00 UK time (whichever is later).         WHEN  NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))           AND ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND CAST(h.MIN_AUTH_TIME AS TIME) < CAST('07:00:00' AS TIME) -- Order was authorised before 07:00          AND DATEADD(minute,TR_CB_THREHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) <= UK_close_time -- The trader has had at least 180 mins prior to market close to release          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(day, h.HOLIDAY_OFFSET, DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), TR_NEXT_DAY_RELEASE_CB))         THEN 1         --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --b. If the AUTH_TIME is less than 32/180 mins before local market close:         --i. Release by T + 1 07:32/10:00 UK time.         WHEN  NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))           AND ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND DATEADD(minute,TR_CB_THREHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) > UK_close_time -- The trader has not had at least 180 mins prior to market close to release          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), TR_NEXT_DAY_RELEASE_CB))          THEN 1             --4. If the local market opens between 07:00 and 19:00 UK time:          --a. If the order AUTH_TIME is 32/180 mins before the local market close or 19:00 UK time (whichever is earlier).         --i. Release by local market open plus 32/180 mins or order AUTH_TIME plus 32/180 mins (whichever is later).         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))           AND ISNULL(qr.INST_TYPE, '') not in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('07:00:00' as TIME)           AND gm.UK_open_time <= CAST('19:00:00' as TIME)          AND CAST(DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME) AS TIME) < CASE                          WHEN UK_close_time >= CAST('19:00:00' AS TIME)                         THEN CAST('19:00:00' AS TIME)                         WHEN UK_close_time < CAST('19:00:00' AS TIME)                         THEN gm.UK_close_time                           END                        AND (CAST(CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END AS TIME) > CASE                     WHEN CONVERT(TIME,h.MIN_AUTH_TIME) > UK_open_time                     THEN CAST(DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME) AS TIME)                     WHEN CONVERT(TIME,MIN_AUTH_TIME) < UK_open_time                     THEN DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, UK_open_time)                      END           OR CAST(CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END AS DATE) > CAST(DATEADD(DAY, h.HOLIDAY_OFFSET, h.MIN_AUTH_TIME) AS DATE))                      THEN 1             -- 4. If the local market opens between 07:00 and 19:00 UK time:          -- b. If the order AUTH_TIME is less than 32/180 mins before the market close or 19:00 UK time (whichever is earlier).         -- i. Release by T +1 local market open time plus 32/180 minutes.         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))           AND ISNULL(qr.INST_TYPE, '') not in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('07:00:00' as TIME)           AND gm.UK_open_time <= CAST('19:00:00' as TIME)          AND CAST(DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME) AS TIME) > CASE                          WHEN UK_close_time >= CAST('19:00:00' AS TIME)                         THEN CAST('19:00:00' AS TIME)                         WHEN UK_close_time < CAST('19:00:00' AS TIME)                         THEN gm.UK_close_time                           END            AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(MINUTE,UK_open_time_minutes + trr.TR_NONCB_THRESHOLD,DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ),DATEDIFF(day, 0, h.MIN_AUTH_TIME)))          THEN 1             --4. If the local market opens between 07:00 and 19:00 UK time:          --a. If the order AUTH_TIME is 32/180 mins before the local market close or 19:00 UK time (whichever is earlier).         --i. Release by local market open plus 32/180 mins or order AUTH_TIME plus 32/180 mins (whichever is later).         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))          AND ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('07:00:00' as TIME)           AND gm.UK_open_time <= CAST('19:00:00' as TIME)          AND CAST(DATEADD(MINUTE, TR_CB_THREHOLD, h.MIN_AUTH_TIME) AS TIME) < CASE                          WHEN UK_close_time >= CAST('19:00:00' AS TIME)                         THEN CAST('19:00:00' AS TIME)                         WHEN UK_close_time < CAST('19:00:00' AS TIME)                         THEN gm.UK_close_time                           END                        AND (CAST(CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END AS TIME) > CASE                 WHEN CONVERT(TIME,h.MIN_AUTH_TIME) > UK_open_time                 THEN CAST(DATEADD(MINUTE, TR_CB_THREHOLD, h.MIN_AUTH_TIME) AS TIME)                 WHEN CONVERT(TIME,h.MIN_AUTH_TIME) < UK_open_time                 THEN DATEADD(MINUTE, TR_CB_THREHOLD, UK_open_time)                  END          OR CAST(CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END AS DATE) > CAST(DATEADD(DAY, h.HOLIDAY_OFFSET, h.MIN_AUTH_TIME) AS DATE))          THEN 1             -- 4. If the local market opens between 07:00 and 19:00 UK time:          -- b. If the order AUTH_TIME is less than 32/180 mins before the market close or 19:00 UK time (whichever is earlier).         -- i. Release by T +1 local market open time plus 32/180 minutes.         WHEN  NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))           AND ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('07:00:00' as TIME)           AND gm.UK_open_time <= CAST('19:00:00' as TIME)          AND CAST(DATEADD(MINUTE, TR_CB_THREHOLD, h.MIN_AUTH_TIME) AS TIME) > CASE                          WHEN UK_close_time >= CAST('19:00:00' AS TIME)                         THEN CAST('19:00:00' AS TIME)                         WHEN UK_close_time < CAST('19:00:00' AS TIME)                         THEN gm.UK_close_time                           END            AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(MINUTE,UK_open_time_minutes + TR_CB_THREHOLD,DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ),DATEDIFF(day, 0, h.MIN_AUTH_TIME)))          THEN 1         ELSE 0         END      END AS TIMELY_RELEASE_EXCEPTION,      CASE       WHEN (trr.RELEASE_VAR_USED = 'RELEASE') OR (qr.INST_TYPE in ('CONV BOND', 'TRS', 'ET Options')) THEN 'RELEASE'       ELSE 'ROUTE'      END AS RELEASE_VAR_USED,      -- The following is the calculation of the comparison time thresholds used in the Timely Release logic. It       -- is based off the exiting TR logic with the addition of a DATEDIFF() to show the time comparison to the      -- respective threshold.      CASE       WHEN qr.ORDER_REASON_DECODE = 'MG.GEN 4.Futures Rolling' THEN 0       WHEN h.MIN_AUTH_TIME > trr.DATE_FROM OR (qr.INST_TYPE in ('CONV BOND', 'TRS', 'ET Options')) THEN        CASE         --1. Convert, TRS and options on an Asian market (need clarification on exactly how to identify): a. Release by T + 1 10:00 UK time.          WHEN ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW')          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), TR_NEXT_DAY_RELEASE_CB))          THEN DATEDIFF(MINUTE, DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), TR_NEXT_DAY_RELEASE_CB)),CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)         --2. If the local market opens between 19:00 and 03:00 UK time:          --a. If the order AUTH_TIME is before 19:00 UK time:         --i. Release before 19:00 UK time on T.         WHEN  NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))           AND (gm.UK_open_time >= CAST('19:00:00' as TIME) OR gm.UK_open_time <= CAST('03:00:00' as TIME))          AND CAST(h.MIN_AUTH_TIME AS TIME) < CAST('19:00:00' AS TIME)          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END >  DATEADD(day, h.HOLIDAY_OFFSET, DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), '19:00:00'))          THEN DATEDIFF(MINUTE, DATEADD(day, h.HOLIDAY_OFFSET, DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), '19:00:00')),CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)         --2. If the local market opens between 19:00 and 03:00 UK time:          --b. If the order AUTH_TIME is after 19:00 UK time:         --i. Release by 19:00 UK time on T + 1.         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))           AND (gm.UK_open_time >= CAST('19:00:00' as TIME) OR gm.UK_open_time <= CAST('03:00:00' as TIME))          AND CAST(h.MIN_AUTH_TIME AS TIME) > CAST('19:00:00' AS TIME)          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END >  DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), '19:00:00'))          THEN DATEDIFF(MINUTE, DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), '19:00:00')), CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)         --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --a. If the AUTH_TIME is more than 32/180 mins before market close:         --i. Release by order AUTH_TIME plus 32/180 minutes or 07:32/10:00 UK time (whichever is later).         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))           AND ISNULL(qr.INST_TYPE, '') not in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND CAST(h.MIN_AUTH_TIME AS TIME) >= CAST('07:00:00' AS TIME) -- Order was authorised after 07:00          AND DATEADD(minute,trr.TR_NONCB_THRESHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) <= UK_close_time -- The trader has had at least 32 mins prior to market close to release          AND  CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(minute,trr.TR_NONCB_THRESHOLD,h.MIN_AUTH_TIME)         THEN DATEDIFF(MINUTE, DATEADD(minute,trr.TR_NONCB_THRESHOLD,h.MIN_AUTH_TIME), CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)         --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --a. If the AUTH_TIME is more than 32/180 mins before market close:         --i. Release by order AUTH_TIME plus 32/180 minutes or 07:32/10:00 UK time (whichever is later).         WHEN  NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))           AND ISNULL(qr.INST_TYPE, '') not in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND CAST(h.MIN_AUTH_TIME AS TIME) < CAST('07:00:00' AS TIME) -- Order was authorised before 07:00          AND DATEADD(minute,trr.TR_NONCB_THRESHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) <= UK_close_time -- The trader has had at least 32 mins prior to market close to release          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(day, h.HOLIDAY_OFFSET, DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), trr.TR_NEXT_DAY_RELEASE_NONCB))         THEN DATEDIFF(MINUTE, DATEADD(day, h.HOLIDAY_OFFSET, DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), trr.TR_NEXT_DAY_RELEASE_NONCB)), CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)             --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --b. If the AUTH_TIME is less than 32/180 mins before local market close:         --i. Release by T + 1 07:32/10:00 UK time.         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))           AND ISNULL(qr.INST_TYPE, '') not in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND DATEADD(minute,trr.TR_NONCB_THRESHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) > UK_close_time -- The trader has not had at least 32 mins prior to market close to release          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), trr.TR_NEXT_DAY_RELEASE_NONCB))          THEN DATEDIFF(MINUTE, DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), trr.TR_NEXT_DAY_RELEASE_NONCB)), CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)             --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --a. If the AUTH_TIME is more than 32/180 mins before market close:         --i. Release by order AUTH_TIME plus 32/180 minutes or 07:32/10:00 UK time (whichever is later).         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))           AND ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND CAST(h.MIN_AUTH_TIME AS TIME) >= CAST('07:00:00' AS TIME) -- Order was authorised after 07:00          AND DATEADD(minute,TR_CB_THREHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) <= UK_close_time -- The trader has had at least 180 mins prior to market close to release          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(minute,trr.TR_CB_THREHOLD, h.MIN_AUTH_TIME)         THEN DATEDIFF(MINUTE, DATEADD(minute,trr.TR_CB_THREHOLD,h.MIN_AUTH_TIME), CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)         --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --a. If the AUTH_TIME is more than 32/180 mins before market close:         --i. Release by order AUTH_TIME plus 32/180 minutes or 07:32/10:00 UK time (whichever is later).         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))           AND ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND CAST(h.MIN_AUTH_TIME AS TIME) < CAST('07:00:00' AS TIME) -- Order was authorised before 07:00          AND DATEADD(minute,TR_CB_THREHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) <= UK_close_time -- The trader has had at least 180 mins prior to market close to release          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(day, h.HOLIDAY_OFFSET, DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), TR_NEXT_DAY_RELEASE_CB))         THEN DATEDIFF(MINUTE, DATEADD(day, h.HOLIDAY_OFFSET, DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), TR_NEXT_DAY_RELEASE_CB)), CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)         --3. If the local market opens between 03:00 UK time and 07:00 UK time:          --b. If the AUTH_TIME is less than 32/180 mins before local market close:         --i. Release by T + 1 07:32/10:00 UK time.         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))           AND ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('03:00:00' as TIME)           AND gm.UK_open_time <= CAST('07:00:00' as TIME)          AND DATEADD(minute,TR_CB_THREHOLD,CAST(h.MIN_AUTH_TIME AS TIME)) > UK_close_time -- The trader has not had at least 180 mins prior to market close to release          AND CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END > DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), TR_NEXT_DAY_RELEASE_CB))          THEN DATEDIFF(MINUTE, DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET ), DATEADD(day, DATEDIFF(day, 0, h.MIN_AUTH_TIME), TR_NEXT_DAY_RELEASE_CB)), CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)               --4. If the local market opens between 07:00 and 19:00 UK time:          --a. If the order AUTH_TIME is 32/180 mins before the local market close or 19:00 UK time (whichever is earlier).         --i. Release by local market open plus 32/180 mins or order AUTH_TIME plus 32/180 mins (whichever is later).         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))           AND ISNULL(qr.INST_TYPE, '') not in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('07:00:00' as TIME)           AND gm.UK_open_time <= CAST('19:00:00' as TIME)          THEN            CASE            WHEN CAST(DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME) AS TIME) < CASE                                 WHEN (gm.UK_close_time < CAST('19:00:00' AS TIME)) --AND (CAST(h.MIN_AUTH_TIME AS TIME) < gm.UK_close_time)                                 THEN gm.UK_close_time                                ELSE CAST('19:00:00' AS TIME)                                 END             THEN DATEDIFF(MINUTE,                   CASE                    WHEN CONVERT(TIME,h.MIN_AUTH_TIME) > UK_open_time                    THEN DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME)                   --ELSE DATEADD(MINUTE, UK_open_time_minutes + trr.TR_CB_THREHOLD,DATEADD(day, (h.HOLIDAY_OFFSET+h.WEEKEND_OFFSET),DATEDIFF(day, 0, h.MIN_AUTH_TIME)))                   WHEN CONVERT(TIME,h.MIN_AUTH_TIME) < UK_open_time                    THEN DATEADD(MINUTE, UK_open_time_minutes + trr.TR_NONCB_THRESHOLD, DATEADD(day, 0,DATEDIFF(day, 0, h.MIN_AUTH_TIME)))                   --ELSE DATEADD(MINUTE, UK_open_time_minutes + trr.TR_CB_THREHOLD,DATEADD(day, (h.HOLIDAY_OFFSET+h.WEEKEND_OFFSET),DATEDIFF(day, 0, h.MIN_AUTH_TIME)))                  END,                   CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)                 WHEN CAST(DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME) AS TIME) > CASE                                 WHEN (gm.UK_close_time < CAST('19:00:00' AS TIME)) --AND (CAST(h.MIN_AUTH_TIME AS TIME) < gm.UK_close_time)                                 THEN gm.UK_close_time                                ELSE CAST('19:00:00' AS TIME)                                 END             THEN DATEDIFF(MINUTE, DATEADD(MINUTE, UK_open_time_minutes + TR_NONCB_THRESHOLD,DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET),DATEDIFF(day, 0, h.MIN_AUTH_TIME))), CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)                        ELSE DATEDIFF(MINUTE, DATEADD(MINUTE, trr.TR_NONCB_THRESHOLD, h.MIN_AUTH_TIME), CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)           END         WHEN NOT(ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND qr.COUNTRY in ('AU', 'CN', 'HK', 'ID', 'IN', 'JP', 'KR', 'MY', 'NZ', 'PH', 'SG', 'TH', 'TW'))           AND ISNULL(qr.INST_TYPE, '') in ('ET Options', 'TRS', 'CONV BOND')          AND gm.UK_open_time >= CAST('07:00:00' as TIME)           AND gm.UK_open_time <= CAST('19:00:00' as TIME)          THEN            CASE            WHEN CAST(DATEADD(MINUTE, trr.TR_CB_THREHOLD, h.MIN_AUTH_TIME) AS TIME) < CASE                                WHEN (gm.UK_close_time < CAST('19:00:00' AS TIME)) AND (CAST(h.MIN_AUTH_TIME AS TIME) < gm.UK_close_time)                                THEN gm.UK_close_time                               ELSE CAST('19:00:00' AS TIME)                                END             THEN DATEDIFF(MINUTE,                   CASE                  WHEN CONVERT(TIME,h.MIN_AUTH_TIME) > UK_open_time                   THEN DATEADD(MINUTE, trr.TR_CB_THREHOLD, h.MIN_AUTH_TIME)                    WHEN CONVERT(TIME,h.MIN_AUTH_TIME) < UK_open_time                    THEN DATEADD(MINUTE, UK_open_time_minutes + trr.TR_CB_THREHOLD,DATEADD(day, 0,DATEDIFF(day, 0, h.MIN_AUTH_TIME)))                  --ELSE DATEADD(MINUTE, UK_open_time_minutes + trr.TR_CB_THREHOLD,DATEADD(day, (h.HOLIDAY_OFFSET+h.WEEKEND_OFFSET),DATEDIFF(day, 0, h.MIN_AUTH_TIME)))                  END, CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)            WHEN CAST(DATEADD(MINUTE, trr.TR_CB_THREHOLD, h.MIN_AUTH_TIME) AS TIME) > CASE                                WHEN (gm.UK_close_time < CAST('19:00:00' AS TIME)) AND (CAST(h.MIN_AUTH_TIME AS TIME) < gm.UK_close_time)                                THEN gm.UK_close_time                               ELSE CAST('19:00:00' AS TIME)                                END             THEN DATEDIFF(MINUTE, DATEADD(MINUTE, UK_open_time_minutes + trr.TR_CB_THREHOLD,DATEADD(day, (1 + h.WEEKEND_OFFSET + h.HOLIDAY_OFFSET),DATEDIFF(day, 0, h.MIN_AUTH_TIME))), CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)                        ELSE DATEDIFF(MINUTE, DATEADD(MINUTE, trr.TR_CB_THREHOLD, h.MIN_AUTH_TIME), CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)           END         ELSE DATEDIFF(MINUTE, h.MIN_AUTH_TIME, CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)        END       ELSE DATEDIFF(MINUTE, h.MIN_AUTH_TIME, CASE WHEN trr.RELEASE_VAR_USED = 'RELEASE' THEN qr.RELEASE_DATETIME ELSE qr.ROUTE_DATETIME END)      END AS TR_CRITERIA_ELAPSED     INTO #timely_release_table     FROM VISTA_REPORTING.dbo.PM_ORDERS po     LEFT JOIN #order_release_datetime_table qr ON qr.ORD_NUM=po.ORD_NUM     LEFT JOIN #gmt_open_close_fin gm ON gm.ORD_NUM=po.ORD_NUM     LEFT JOIN #holiday_offset h ON h.ORD_NUM=po.ORD_NUM     LEFT JOIN VISTA_STAGING.dbo.TIMELY_RELEASE_REFERENCE_TABLE trr ON h.MIN_AUTH_TIME >= trr.DATE_FROM AND h.MIN_AUTH_TIME < trr.DATE_TO     WHERE po.DEALING_DESK = 'Equity' and ISNULL(qr.PRIMARY_MARKET,0) = 0         --select distinct * from #timely_release_table             -- Use #timely_release_table to populate FINAL_STATUS_UPDATE_TABLE     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     select distinct      CONCAT(ORD_NUM,'_11') AS ID,      '1A1' AS STATUS,      NULL AS FINAL_UPDATED_TIME     into #temp_status_table     from #timely_release_table     where TIMELY_RELEASE_EXCEPTION = 1          MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET       T.ID=T.ID,       T.STATUS=T.STATUS,       T.DEALING_DESK = 'Equity',       T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'Equity');         --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      NULL AS MULTI_FUND_ID,      NULL AS TRD_ORD,      ex.ORD_NUM AS PM_ORD,      'Timely Release' AS Exception_Type,      CONCAT(ex.ORD_NUM,'_11') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'For Review' AS Status,      NULL AS ClientExecID,      'Equity' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      NULL AS DEALER,      '1A1' AS STATUS_ID,      pm.AUTH_TIME AS ORD_AUTH,      NULL AS TRADE_EXEC     INTO #temp_audit     FROM #timely_release_table ex     LEFT JOIN (SELECT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.PM_ORDERS GROUP BY ORD_NUM) pm     ON ex.ORD_NUM = pm.ORD_NUM     where TIMELY_RELEASE_EXCEPTION = 1          MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);             IF OBJECT_ID('VISTA_STAGING.dbo.VG_11_TIMELY_RELEASE_EQ_TABLE') IS NULL     SELECT DISTINCT     ORD_NUM,     DEALING_DESK,     CASE WHEN MIN(TR_CRITERIA_ELAPSED) < 0 THEN 0 ELSE MIN(TR_CRITERIA_ELAPSED) END AS TR_CRITERIA_ELAPSED,     MAX(TIMELY_RELEASE_EXCEPTION) AS TIMELY_RELEASE_EXCEPTION,     CASE WHEN MAX(TIMELY_RELEASE_EXCEPTION)=1 THEN GETDATE() ELSE NULL END AS TR_CREATETIME --if exception has been raised then create DATETIME timestamp     INTO VISTA_STAGING.dbo.VG_11_TIMELY_RELEASE_EQ_TABLE     FROM #timely_release_table     GROUP BY ORD_NUM, DEALING_DESK         ELSE          IF OBJECT_ID('tempdb..#temp_tre_table') IS NOT NULL DROP TABLE #temp_tre_table         SELECT DISTINCT     ORD_NUM,     DEALING_DESK,     CASE WHEN MIN(TR_CRITERIA_ELAPSED) < 0 THEN 0 ELSE MIN(TR_CRITERIA_ELAPSED) END AS TR_CRITERIA_ELAPSED,     MAX(TIMELY_RELEASE_EXCEPTION) AS TIMELY_RELEASE_EXCEPTION,     CASE WHEN MAX(TIMELY_RELEASE_EXCEPTION)=1 THEN GETDATE() ELSE NULL END AS TR_CREATETIME --if exception has been raised then create DATETIME timestamp     INTO #temp_tre_table     FROM #timely_release_table     GROUP BY ORD_NUM, DEALING_DESK         MERGE VISTA_STAGING.dbo.VG_11_TIMELY_RELEASE_EQ_TABLE AS T     USING #temp_tre_table AS S     ON (T.ORD_NUM=S.ORD_NUM)     WHEN MATCHED      THEN       UPDATE SET        T.DEALING_DESK = S.DEALING_DESK,       T.TR_CRITERIA_ELAPSED = S.TR_CRITERIA_ELAPSED,       T.TIMELY_RELEASE_EXCEPTION = CASE WHEN S.TIMELY_RELEASE_EXCEPTION > T.TIMELY_RELEASE_EXCEPTION THEN S.TIMELY_RELEASE_EXCEPTION ELSE T.TIMELY_RELEASE_EXCEPTION END,       T.TR_CREATETIME = CASE WHEN S.TIMELY_RELEASE_EXCEPTION > T.TIMELY_RELEASE_EXCEPTION THEN S.TR_CREATETIME ELSE T.TR_CREATETIME END     WHEN NOT MATCHED       THEN INSERT (ORD_NUM, DEALING_DESK, TR_CRITERIA_ELAPSED, TIMELY_RELEASE_EXCEPTION, TR_CREATETIME)        VALUES (S.ORD_NUM, S.DEALING_DESK, S.TR_CRITERIA_ELAPSED, S.TIMELY_RELEASE_EXCEPTION, S.TR_CREATETIME);         IF OBJECT_ID('tempdb..#tzs', 'U') IS NOT NULL DROP TABLE #tzs     IF OBJECT_ID('tempdb..#tz_periods', 'U') IS NOT NULL DROP TABLE #tz_periods     IF OBJECT_ID('tempdb..#First_release', 'U') IS NOT NULL DROP TABLE #First_release     IF OBJECT_ID('tempdb..#order_details', 'U') IS NOT NULL DROP TABLE #order_details     IF OBJECT_ID('tempdb..#order_release_datetime_table', 'U') IS NOT NULL DROP TABLE #order_release_datetime_table     IF OBJECT_ID('tempdb..#gmt_open_close', 'U') IS NOT NULL DROP TABLE #gmt_open_close     IF OBJECT_ID('tempdb..#gmt_open_close_fin', 'U') IS NOT NULL DROP TABLE #gmt_open_close_fin     IF OBJECT_ID('tempdb..#holiday_offset', 'U') IS NOT NULL DROP TABLE #holiday_offset     IF OBJECT_ID('tempdb..#timely_release_table', 'U') IS NOT NULL DROP TABLE #timely_release_table     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     IF OBJECT_ID('tempdb..#temp_tre_table') IS NOT NULL DROP TABLE #temp_tre_table        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_13_ORDER_AGGREGATION_DMG  CreateDate: 2025-06-26 18:03:38.177  ModifyDate: 2025-06-26 18:03:38.177  --- DEFINITION START ---  -- =============================================    -- Author:  <Samad, Mehreen>    -- Create date: <03/04/2019>    -- Description:     -- <Identify transactions that have multiple     -- distinct orders with identical Instrument ID,     -- settlement date, approval date and Trade     -- Direction. If there are two distinct Order IDs     -- given the conditions flag exception.>    -- =============================================        -- ***************VERSION CONTROL***************    -- 2019-05-16 - MS: Added in PM Order Number in    --     Audit table.    -- *********************************************        CREATE PROCEDURE [dbo].[VG_13_ORDER_AGGREGATION_DMG]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        --1. For all trades, gather details on the trader order associated with this trade    IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades    SELECT  DISTINCT           t.MULTI_FUND_ID,           t.EXECUTION_TIME,           o.ORD_NUM,           o.TRAN_TYPE,            o.CUSIP,           o.SETTLE_DATE,        o.SEC_DESC1,        o.SM_SEC_GROUP,        o.SM_SEC_TYPE,        i2.STRIKE,        prim.CURRENCY,        prim.ASSET_INST_TYPE,        prim.ORDER_INST_TYPE,        prim.BASKET_CUSIP,        prim.MATURITY,        prim.UNDERLYING_CUSIP,        prim.MIP_SEC_ID,        t.TRD_CURRENCY    INTO #trades    FROM VISTA_REPORTING.dbo.TRADES t    LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS o ON t.ORD_NUM = o.ORD_NUM    LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE prim ON t.MULTI_FUND_ID = prim.MULTI_FUND_ID    OUTER APPLY (SELECT TOP 1 i.STRIKE        FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=coalesce(t.CUSIP, o.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(t.EXECUTION_TIME, o.AUTH_TIME)))         ORDER BY i.DATE DESC) as i2    WHERE prim.[INTERFUND_TRANSFER] <> 1 --Excluding Interfund transer trades       --AND prim.FUTURE_ROLLS <> 1 --Do not consider for future rollovers       --AND prim.[1615_DEALING] <> 1       --AND prim.TWEB_CLOSE_DEALING <> 1       AND prim.DEALING_DESK = 'DMG'         --2. For all trd orders, create a list of the start time and end time that it was in this status    --2.a.i. Add in a dummy record for each Authorisation time for instances where the only     --   records for an order that we have are in status 'F'.    --      This is done because it is assumed that these orders were authorised and then filled within    --   a 15 minute timespan and Vista is blind to these events.    IF OBJECT_ID('tempdb..#ords_only_seen_filled', 'U') IS NOT NULL DROP TABLE #ords_only_seen_filled    SELECT DISTINCT     ORD_NUM     INTO #ords_only_seen_filled    FROM VISTA_REPORTING.dbo.ORDERS    GROUP BY ORD_NUM    HAVING     -- We don't need to filter for orders with AUTH/MODIFY times here, it will be caught in the datediff section of 2.a.iv.     MAX(CASE WHEN STATUS IN ('F','C') THEN 0 ELSE 1 END) = 0  -- We only want to look at orders that we only ever see in a Filled status        --2.a.ii. For orders that we only ever see fully filled, find the min touch count.    IF OBJECT_ID('tempdb..#ords_only_seen_filled_min_tch', 'U') IS NOT NULL DROP TABLE #ords_only_seen_filled_min_tch    SELECT      o.ORD_NUM,     MIN(o.TOUCH_COUNT) AS MIN_TOUCH_COUNT    INTO #ords_only_seen_filled_min_tch    FROM VISTA_REPORTING.dbo.ORDERS o    INNER JOIN #ords_only_seen_filled min_tch    ON o.ORD_NUM = min_tch.ORD_NUM    GROUP BY o.ORD_NUM        --2.a.iii. Get distinct list of TRD_ORDER touch count and modify time - this is to remove duplications caused because this table is at the client execution level    IF OBJECT_ID('tempdb..#trd_ord_times', 'U') IS NOT NULL DROP TABLE #trd_ord_times    SELECT DISTINCT           o.ORD_NUM,           o.TOUCH_COUNT,           o.MODIFY_TIME,           o.[STATUS],           o.TRAN_TYPE,           o.CUSIP,           o.SETTLE_DATE,        o.SEC_DESC1,        o.SM_SEC_GROUP,        o.SM_SEC_TYPE,        i2.STRIKE,        prim.UNDERLYING_CUSIP,        prim.CURRENCY,        prim.ASSET_INST_TYPE,        prim.ORDER_INST_TYPE,        prim.Trade_TRAN_TYPE,        prim.Order_CUSIP,        prim.MIP_SEC_ID,        prim.MATURITY,        prim.BASKET_CUSIP,        prim.DEBT_DERIV    INTO #trd_ord_times    FROM VISTA_REPORTING.dbo.TRD_ORDERS o    LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE prim ON o.ORD_NUM = prim.ORD_NUM    OUTER APPLY (SELECT TOP 1 i.STRIKE        FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=o.CUSIP AND i.DATE<=CONVERT(DATE, o.AUTH_TIME))         ORDER BY i.DATE DESC) as i2        UNION    --2.a.iv. Add in a dummy record for each Authorisation time for instances where the only     --    records for an order that we have are in status 'F'.    --       This is done because it is assumed that these orders were authorised and then filled within    --    a 15 minute timespan and Vista is blind to these events.     SELECT DISTINCT           o.ORD_NUM,           min_tch.MIN_TOUCH_COUNT - 1 AS TOUCH_COUNT, -- Assume that the TOUCH_COUNT when authorised is one less than the touch count when filled           o.AUTH_TIME AS MODIFY_TIME, -- Assume that the modify time is the auth time           'U'  AS [STATUS], -- Assume that at the AUTH_TIME, the Status is set to 'U'           o.TRAN_TYPE,           o.CUSIP,           o.SETTLE_DATE,        o.SEC_DESC1,        o.SM_SEC_GROUP,        o.SM_SEC_TYPE,        i2.STRIKE,        prim.UNDERLYING_CUSIP,        prim.CURRENCY,        prim.ASSET_INST_TYPE,        prim.ORDER_INST_TYPE,        prim.Trade_TRAN_TYPE,        prim.Order_CUSIP,        prim.MIP_SEC_ID,        prim.MATURITY,        prim.BASKET_CUSIP,        prim.DEBT_DERIV    FROM VISTA_REPORTING.dbo.TRD_ORDERS o    LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE prim ON o.ORD_NUM = prim.ORD_NUM    INNER JOIN #ords_only_seen_filled_min_tch min_tch ON o.ORD_NUM = min_tch.ORD_NUM AND o.TOUCH_COUNT = min_tch.MIN_TOUCH_COUNT -- We want to filter out everything except for the  first touch count for the orders.    OUTER APPLY (SELECT TOP 1 i.STRIKE        FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP= o.CUSIP AND i.DATE<=CONVERT(DATE, o.AUTH_TIME))         ORDER BY i.DATE DESC) as i2    WHERE prim.DEALING_DESK = 'DMG' -- Only consider DMG orders - to guard against duplication caused by orders being flagged to multiple desks.       AND DATEDIFF(minute,o.AUTH_TIME, o.MODIFY_TIME) < 15  -- We only want to consider those orders that were authorised and then modified within 15 minutes.        --2.b. Generate table of statuses with index columns    IF OBJECT_ID('tempdb..#statuses', 'U') IS NOT NULL DROP TABLE #statuses    SELECT         *,         ROW_NUMBER() OVER (PARTITION BY ORD_NUM ORDER BY TOUCH_COUNT) RowNum,         ROW_NUMBER() OVER (PARTITION BY ORD_NUM ORDER BY TOUCH_COUNT) - ROW_NUMBER() OVER (PARTITION BY ORD_NUM, [STATUS] ORDER BY TOUCH_COUNT) AS [Group]    INTO #statuses    FROM #trd_ord_times                -- 2.c. Join statuses table to itself to find the start touch count and the end touch count of the order being in the same status.     --      This is done so that we can determine when an order moves into a status as well as when it moves out of this status     IF OBJECT_ID('tempdb..#status_groups', 'U') IS NOT NULL DROP TABLE #status_groups    SELECT      status1.ORD_NUM,     status1.TOUCH_COUNT,     status1.MODIFY_TIME,     status1.STATUS,     status1.TRAN_TYPE,     status1.CUSIP,     status1.SETTLE_DATE,     status1.SEC_DESC1,     status1.SM_SEC_GROUP,     status1.SM_SEC_TYPE,     status1.STRIKE,     status1.CURRENCY,     status1.ASSET_INST_TYPE,     status1.ORDER_INST_TYPE,     status1.Trade_TRAN_TYPE,     status1.Order_CUSIP,     status1.UNDERLYING_CUSIP,     status1.MIP_SEC_ID,     status1.MATURITY,     status1.BASKET_CUSIP,     status1.DEBT_DERIV,        MIN(status1.TOUCH_COUNT) [START],        MAX(status2.TOUCH_COUNT) [END]     INTO #status_groups    FROM #statuses status1    LEFT JOIN #statuses status2     ON status1.ORD_NUM = status2.ORD_NUM AND status1.RowNum = status2.RowNum - 1    GROUP BY       status1.ORD_NUM,     status1.TOUCH_COUNT,     status1.MODIFY_TIME,     status1.STATUS,     status1.TRAN_TYPE,     status1.CUSIP,     status1.SETTLE_DATE,     status1.SEC_DESC1,     status1.SM_SEC_GROUP,     status1.SM_SEC_TYPE,     status1.STRIKE,     status1.CURRENCY,     status1.ASSET_INST_TYPE,     status1.ORDER_INST_TYPE,     status1.Trade_TRAN_TYPE,     status1.Order_CUSIP,     status1.UNDERLYING_CUSIP,     status1.MIP_SEC_ID,     status1.MATURITY,     status1.BASKET_CUSIP,     status1.DEBT_DERIV    --SELECT * FROM #status_groups        --2.d. Find the modify times associated with each of these status changes    IF OBJECT_ID('tempdb..#status_times', 'U') IS NOT NULL DROP TABLE #status_times    SELECT            st.* ,           trd1.MODIFY_TIME AS [Start_Time],           ISNULL(trd2.MODIFY_TIME,'9999-12-31') AS [End_Time] --If the order has not moved out of a status then set the end date to be end of time so that we don't do comparisons to NULLs    INTO #status_times    FROM #status_groups st    LEFT JOIN #trd_ord_times trd1    ON st.ORD_NUM = trd1.ORD_NUM AND st.START = trd1.TOUCH_COUNT    LEFT JOIN #trd_ord_times trd2    ON st.ORD_NUM = trd2.ORD_NUM AND st.[END] = trd2.TOUCH_COUNT    --SELECT * FROM #status_times        --2.e. Determine whether there is an exception.         --DMG: Assuming this will take care of GOV Instrument type    --2.e.i. Debt orders where the asset inst type is known     IF OBJECT_ID('tempdb..#mergeable', 'U') IS NOT NULL DROP TABLE #mergeable    SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS [Trade],        1 AS MERGE_EXCEPTION ,        st.ORD_NUM AS [Missed_Merge]    INTO #mergeable    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM       AND t.CUSIP = st.CUSIP       AND t.TRAN_TYPE = st.TRAN_TYPE       AND st.DEBT_DERIV = 'DEBT'       AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active       AND st.ASSET_INST_TYPE <> 'DMG OTHER'    GROUP BY st.ORD_NUM,        t.ORD_NUM,        t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --2.e.ii. Debt orders where the asset inst type is unknown    SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS [Trade],        1 AS MERGE_EXCEPTION ,        st.ORD_NUM AS [Missed_Merge]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM       AND t.CUSIP = st.CUSIP       AND t.TRAN_TYPE = st.TRAN_TYPE       AND t.ORDER_INST_TYPE = st.ORDER_INST_TYPE       AND st.DEBT_DERIV = 'DEBT'       AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active       AND st.ASSET_INST_TYPE = 'DMG OTHER'    GROUP BY st.ORD_NUM,         t.ORD_NUM,        t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --DMG: Have commented this out as I'm assuming its not relevant to DMG    --2.e.iii. Futures/ETD orders where the asset inst type is known     --SELECT     --       t.ORD_NUM AS [Traded_Order],    --    t.MULTI_FUND_ID AS [Trade],    --    1 AS MERGE_EXCEPTION ,    --    st.ORD_NUM AS [Missed_Merge]    --FROM #trades t    --LEFT JOIN #status_times st    --ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    ----LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    ----ON t.ORD_NUM = oc1.PM_ORD    ----LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    ----ON st.ORD_NUM = oc2.PM_ORD    --WHERE t.ORD_NUM != st.ORD_NUM    --   AND t.CUSIP = st.CUSIP    --   AND t.TRAN_TYPE = st.TRAN_TYPE    --   AND st.ASSET_INST_TYPE IN ('IRFUT','BNDFUT','OPTFUT')    --   AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active    --   AND st.ASSET_INST_TYPE <> 'DMG OTHER'    --GROUP BY st.ORD_NUM,     --   t.ORD_NUM,     --   t.MULTI_FUND_ID    ----HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        --UNION        --DMG: Have commented this out as I'm assuming its not relevant to DMG    ----2.e.iv. Futures/ETD orders where the asset inst type is unknown     --SELECT     --       t.ORD_NUM AS [Traded_Order],    --    t.MULTI_FUND_ID AS [Trade],    --    1 AS MERGE_EXCEPTION ,    --    st.ORD_NUM AS [Missed_Merge]    --FROM #trades t    --LEFT JOIN #status_times st    --ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    ----LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    ----ON t.ORD_NUM = oc1.PM_ORD    ----LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    ----ON st.ORD_NUM = oc2.PM_ORD    --WHERE t.ORD_NUM != st.ORD_NUM    --   AND t.CUSIP = st.CUSIP    --   AND t.TRAN_TYPE = st.TRAN_TYPE    --   AND t.ORDER_INST_TYPE = st.ORDER_INST_TYPE    --   AND st.ORDER_INST_TYPE = 'ETD'    --   AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active    --   AND st.ASSET_INST_TYPE = 'DMG OTHER'    --GROUP BY st.ORD_NUM,     --   t.ORD_NUM,     --   t.MULTI_FUND_ID    ----HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        --UNION        --2.e.v. ICDS orders where the asset inst type is known     SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS [Trade],        1 AS MERGE_EXCEPTION ,        st.ORD_NUM AS [Missed_Merge]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM       AND t.BASKET_CUSIP = st.BASKET_CUSIP       AND t.MATURITY = st.MATURITY          AND t.TRAN_TYPE = st.TRAN_TYPE       AND st.ASSET_INST_TYPE = 'ICDS'       AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active    GROUP BY st.ORD_NUM,        t.ORD_NUM,        t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --2.e.vi. ICDS or SCDS orders where the asset inst type is unknown     SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS [Trade],        1 AS MERGE_EXCEPTION ,        st.ORD_NUM AS [Missed_Merge]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM       AND t.CURRENCY = st.CURRENCY       AND t.MATURITY = st.MATURITY       AND t.SEC_DESC1 = st.SEC_DESC1       AND t.TRAN_TYPE = st.TRAN_TYPE       AND st.ORDER_INST_TYPE in ('ICDS','SCDS')       AND t.ORDER_INST_TYPE = st.ORDER_INST_TYPE       AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active    GROUP BY st.ORD_NUM,        t.ORD_NUM,        t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --DMG: Do we want to match the RED CODE for DMG? As going by the BRD, do they want to it to be same as ICDS or same as FI considering they have grouped them?    --2.e.vii. SCDS orders where the asset inst type is known     SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS [Trade],        1 AS MERGE_EXCEPTION ,        st.ORD_NUM AS [Missed_Merge]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM       AND t.MIP_SEC_ID = st.MIP_SEC_ID -- Red code       AND t.MATURITY = st.MATURITY       AND t.TRAN_TYPE = st.TRAN_TYPE       AND st.ASSET_INST_TYPE = 'SCDS'       AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active    GROUP BY st.ORD_NUM,        t.ORD_NUM,        t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --2.e.ix. SWAPS where the asset inst type is known     SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS [Trade],        1 AS MERGE_EXCEPTION ,        st.ORD_NUM AS [Missed_Merge]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM       AND t.TRAN_TYPE = st.TRAN_TYPE       AND t.ASSET_INST_TYPE = st.ASSET_INST_TYPE       AND t.TRD_CURRENCY = st.CURRENCY       AND t.MATURITY = st.MATURITY       AND ISNULL(t.UNDERLYING_CUSIP,'') = ISNULL(st.UNDERLYING_CUSIP,'')       AND st.ASSET_INST_TYPE IN ('IRS','IFS','ASWP','OIS', 'CCS', 'CASWP', 'BASIS', 'ZCS')       AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active    GROUP BY st.ORD_NUM,        t.ORD_NUM,        t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --2.e.x. SWAPS where the asset inst type is unknown     SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS [Trade],        1 AS MERGE_EXCEPTION ,        st.ORD_NUM AS [Missed_Merge]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM       AND t.TRAN_TYPE = st.TRAN_TYPE       AND t.TRD_CURRENCY = st.CURRENCY       AND t.MATURITY = st.MATURITY       AND t.SM_SEC_GROUP = st.SM_SEC_GROUP       AND t.SM_SEC_TYPE = st.SM_SEC_TYPE       AND t.ORDER_INST_TYPE = st.ORDER_INST_TYPE       AND st.ORDER_INST_TYPE IN ('ASWP','SWAP')       AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active    GROUP BY st.ORD_NUM,        t.ORD_NUM,        t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.            UNION        --2.e.ix. TRS where the asset inst type is known     SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS [Trade],        1 AS MERGE_EXCEPTION ,        st.ORD_NUM AS [Missed_Merge]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM       AND t.TRAN_TYPE = st.TRAN_TYPE       AND t.ASSET_INST_TYPE = st.ASSET_INST_TYPE       --AND t.TRD_CURRENCY = st.CURRENCY       AND t.CUSIP = st.CUSIP       AND t.MATURITY = st.MATURITY       AND t.STRIKE = st.STRIKE       --AND ISNULL(t.UNDERLYING_CUSIP,'') = ISNULL(st.UNDERLYING_CUSIP,'')       AND st.ASSET_INST_TYPE IN ('TRS')       AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active    GROUP BY st.ORD_NUM,        t.ORD_NUM,        t.MULTI_FUND_ID        UNION        --2.e.x. TRS where the asset inst type is unknown     SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS [Trade],        1 AS MERGE_EXCEPTION ,        st.ORD_NUM AS [Missed_Merge]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM       AND t.TRAN_TYPE = st.TRAN_TYPE       AND t.ASSET_INST_TYPE = st.ASSET_INST_TYPE       --AND t.TRD_CURRENCY = st.CURRENCY       AND t.CUSIP = st.CUSIP       AND t.MATURITY = st.MATURITY       AND t.STRIKE = st.STRIKE       AND st.ORDER_INST_TYPE IN ('TRS')       AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active    GROUP BY st.ORD_NUM,        t.ORD_NUM,        t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --DMG: Instrument type = EQOPT or FXOPT    SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS [Trade],        1 AS MERGE_EXCEPTION ,        st.ORD_NUM AS [Missed_Merge]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM       AND t.TRAN_TYPE = st.TRAN_TYPE       AND t.ASSET_INST_TYPE = st.ASSET_INST_TYPE       AND t.MATURITY = st.MATURITY       AND ISNULL(t.UNDERLYING_CUSIP,'') = ISNULL(st.UNDERLYING_CUSIP,'')       AND st.ASSET_INST_TYPE in ('EQOPT','FXOPT')       AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active    GROUP BY st.ORD_NUM,        t.ORD_NUM,        t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --DMG: EQOPT or FXOPT when asset type is unknown    SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS [Trade],        1 AS MERGE_EXCEPTION ,        st.ORD_NUM AS [Missed_Merge]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM       AND t.TRAN_TYPE = st.TRAN_TYPE       AND t.MATURITY = st.MATURITY       AND t.SM_SEC_GROUP = st.SM_SEC_GROUP       AND t.SM_SEC_TYPE = st.SM_SEC_TYPE       AND t.ORDER_INST_TYPE = st.ORDER_INST_TYPE       AND st.ORDER_INST_TYPE in ('EQOPT','FXOPT')       AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active    GROUP BY st.ORD_NUM,        t.ORD_NUM,        t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --2.e.x. CDSWAPTION where the asset inst type is known     SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS [Trade],        1 AS MERGE_EXCEPTION ,        st.ORD_NUM AS [Missed_Merge]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM       AND t.TRAN_TYPE = st.TRAN_TYPE       AND t.CUSIP = st.CUSIP       AND t.MATURITY = st.MATURITY       AND st.ASSET_INST_TYPE in ('CDSWAPTION')       AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active    GROUP BY st.ORD_NUM,        t.ORD_NUM,        t.MULTI_FUND_ID        UNION        --2.e.x. CDSWAPTION where the asset inst type is unknown     SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS [Trade],        1 AS MERGE_EXCEPTION ,        st.ORD_NUM AS [Missed_Merge]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM       AND t.TRAN_TYPE = st.TRAN_TYPE       AND t.CUSIP = st.CUSIP       AND t.MATURITY = st.MATURITY       AND st.ORDER_INST_TYPE in ('CDSWAPTION')       AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active    GROUP BY st.ORD_NUM,        t.ORD_NUM,        t.MULTI_FUND_ID            IF OBJECT_ID('tempdb..#mergeable_concat', 'U') IS NOT NULL DROP TABLE #mergeable_concat    SELECT DISTINCT      pm.ORD_NUM,      Traded_Order,      [Trade],      MERGE_EXCEPTION,      STUFF((     SELECT DISTINCT ', ' + LTRIM(RTRIM([Missed_Merge]))     FROM #mergeable     WHERE (Traded_Order = Results.Traded_Order)      FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')     ,1,2,'') AS Orders_Concat    INTO #mergeable_concat    FROM #mergeable Results    LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.TRD_ORD = Results.Traded_Order    LEFT JOIN (SELECT ORD_NUM FROM VISTA_REPORTING.DBO.PM_ORDERS) PM ON OC.PM_ORD = PM.ORD_NUM    GROUP BY Traded_Order,        Trade,        ORD_NUM,       MERGE_EXCEPTION        --IF OBJECT_ID('tempdb..#order_agg_table', 'U') IS NOT NULL DROP TABLE #order_agg_table    --select distinct    -- t.ORD_NUM,    -- case    --  when mt.PM_ORD_COUNT > 1 then 0    --  when mt.PM_ORD_COUNT is NULL then 0    --  when mt.PM_ORD_COUNT = 1 then 1    --  else NULL end as MERGE_EXCEPTION    --into #order_agg_table    --from VISTA_REPORTING.dbo.TRD_ORDERS t    --left join #mergeable mt on mt.TRD_ORD=t.ORD_NUM    --where t.DEALING_DESK='DMG'        -- Use #mergeable_concat to populate FINAL_STATUS_UPDATE_TABLE    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    SELECT DISTINCT     CONCAT(Traded_Order,'_',Trade,'_13') AS ID,     '1A1' AS STATUS,     NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table    FROM #mergeable_concat     WHERE MERGE_EXCEPTION = 1         MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'DMG',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME,DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'DMG');        --Add record into the AUDIT_TABLE    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    SELECT DISTINCT     Trade AS MULTI_FUND_ID,     Traded_Order AS TRD_ORD,     ex.ORD_NUM AS PM_ORD,     'Order Aggregation' AS Exception_Type,     CONCAT(Traded_Order,'_',Trade,'_13') AS ID,     NULL AS REASON,     NULL AS COMMENT,     'For Review' AS Status,     NULL AS ClientExecID,     'DMG' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     NULL AS DEALER,     '1A1' AS STATUS_ID,     NULL AS ORD_AUTH,     EXECUTION_TIME AS TRADE_EXEC    INTO #temp_audit    FROM #mergeable_concat ex    LEFT JOIN (SELECT MULTI_FUND_ID, EXECUTION_TIME FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t    ON ex.Trade = t.MULTI_FUND_ID    where MERGE_EXCEPTION = 1         MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_DMG AS T    USING #temp_audit AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);            --Appends merge exception to the list of equity TRD orders.    IF      OBJECT_ID('VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_DMG_TABLE', 'U') IS NULL     SELECT DISTINCT      CONCAT(o.ORD_NUM,'_',COALESCE(oa.Trade,o.MULTI_FUND_ID)) AS OA_ID,      o.ORD_NUM,      oa.Trade,      trd_o.DEALING_DESK,      oa.Orders_Concat,      --  ***delete the below script once Order Aggregation has been confirmed***      --0 AS MERGE_EXCEPTION,      --NULL AS CREATETIME      --  ***********************************************************************      CASE        WHEN oa.MERGE_EXCEPTION is NULL THEN 0 ELSE MERGE_EXCEPTION      END AS MERGE_EXCEPTION,      CASE       WHEN MERGE_EXCEPTION = 1 THEN GETDATE() ELSE NULL --if exception is raised then create a datetime stamp       END AS CREATETIME     INTO VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_DMG_TABLE     FROM VISTA_REPORTING.dbo.TRADES o      left join VISTA_REPORTING.dbo.TRD_ORDERS trd_o      on o.ORD_NUM = trd_o.ORD_NUM     left join #mergeable_concat oa      on oa.Traded_Order=o.ORD_NUM AND o.MULTI_FUND_ID = oa.Trade     WHERE trd_o.DEALING_DESK = 'DMG'    ELSE      IF OBJECT_ID('tempdb..#temp_oa_table', 'U') IS NOT NULL DROP TABLE #temp_oa_table     SELECT DISTINCT      CONCAT(o.ORD_NUM,'_',COALESCE(oa.Trade,o.MULTI_FUND_ID)) AS OA_ID,      o.ORD_NUM,      oa.Trade,      trd_o.DEALING_DESK,      oa.Orders_Concat,      CASE       WHEN oa.MERGE_EXCEPTION is NULL THEN 0       ELSE MERGE_EXCEPTION      END AS MERGE_EXCEPTION,      CASE       WHEN MERGE_EXCEPTION = 1 THEN GETDATE()       ELSE NULL --if exception is raised then create a datetime stamp       END AS CREATETIME     INTO #temp_oa_table     FROM VISTA_REPORTING.dbo.TRADES o      left join VISTA_REPORTING.dbo.TRD_ORDERS trd_o      on o.ORD_NUM = trd_o.ORD_NUM     left join #mergeable_concat oa      on oa.Traded_Order=o.ORD_NUM AND o.MULTI_FUND_ID = oa.Trade     WHERE trd_o.DEALING_DESK = 'DMG'          MERGE VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_DMG_TABLE AS T     USING #temp_oa_table AS S     ON (T.OA_ID = S.OA_ID)     WHEN MATCHED      THEN UPDATE       SET        T.OA_ID = S.OA_ID,      T.ORD_NUM =  CASE WHEN S.MERGE_EXCEPTION > T.MERGE_EXCEPTION THEN S.ORD_NUM ELSE T.ORD_NUM END,       T.Trade =  CASE WHEN S.MERGE_EXCEPTION > T.MERGE_EXCEPTION THEN S.Trade ELSE T.Trade END,       T.DEALING_DESK =  CASE WHEN S.MERGE_EXCEPTION > T.MERGE_EXCEPTION THEN S.DEALING_DESK ELSE T.DEALING_DESK END,       T.Orders_Concat =  CASE WHEN S.MERGE_EXCEPTION > T.MERGE_EXCEPTION THEN S.Orders_Concat ELSE T.Orders_Concat END,       T.MERGE_EXCEPTION = CASE WHEN S.MERGE_EXCEPTION > T.MERGE_EXCEPTION THEN S.MERGE_EXCEPTION ELSE T.MERGE_EXCEPTION END,      T.CREATETIME = CASE WHEN S.MERGE_EXCEPTION > T.MERGE_EXCEPTION THEN S.CREATETIME ELSE T.CREATETIME END         WHEN NOT MATCHED       THEN       INSERT       (OA_ID,       ORD_NUM,       Trade,       Orders_Concat,       DEALING_DESK,       MERGE_EXCEPTION,       CREATETIME)                 VALUES       (S.OA_ID,      S.ORD_NUM,       S.Trade,       S.Orders_Concat,        S.DEALING_DESK,       S.MERGE_EXCEPTION,       S.CREATETIME);        IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades    IF OBJECT_ID('tempdb..#ords_only_seen_filled', 'U') IS NOT NULL DROP TABLE #ords_only_seen_filled    IF OBJECT_ID('tempdb..#ords_only_seen_filled_min_tch', 'U') IS NOT NULL DROP TABLE #ords_only_seen_filled_min_tch    IF OBJECT_ID('tempdb..#trd_ord_times', 'U') IS NOT NULL DROP TABLE #trd_ord_times    IF OBJECT_ID('tempdb..#statuses', 'U') IS NOT NULL DROP TABLE #statuses    IF OBJECT_ID('tempdb..#status_groups', 'U') IS NOT NULL DROP TABLE #status_groups    IF OBJECT_ID('tempdb..#status_times', 'U') IS NOT NULL DROP TABLE #status_times    IF OBJECT_ID('tempdb..#mergeable', 'U') IS NOT NULL DROP TABLE #mergeable    IF OBJECT_ID('tempdb..#mergeable_concat', 'U') IS NOT NULL DROP TABLE #mergeable_concat    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    IF OBJECT_ID('tempdb..#temp_oa_table', 'U') IS NOT NULL DROP TABLE #temp_oa_table            END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_13_ORDER_AGGREGATION_EQ  CreateDate: 2025-06-26 18:03:28.043  ModifyDate: 2025-06-26 18:03:28.043  --- DEFINITION START ---  -- =============================================    -- Author:  <Devereux, Alan>    -- Create date: <Create Date,,>    -- Description: <Logic identifies transaction that     -- have multiple distinct order ID for transaction     -- with identical Instrument ID, settlement date,     -- approval date and Trade Direction. If there are     -- two distinct Order IDs given the above four     -- conditions are met, Vista flags associated Order    -- IDs as an Order Aggregation exception>    -- =============================================        -- ***************VERSION CONTROL***************    -- 11/12/2017 - DDC: Changes made to ensure that script     -- only ever updates existing records always ensuring     -- the highest level exception is reported and     -- inserts new ones if no exception has been raised.        -- 2018-03-21 - WH: Removed reference to BUY_SELL_FLAG - used TRAN_TYPE instead    -- 2018-05-16 - WH: Removed reference to SETTLE_DATE. Not required as per business requirements    -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.    -- *********************************************        CREATE PROCEDURE [dbo].[VG_13_ORDER_AGGREGATION_EQ]     -- Add the parameters for the stored procedure here    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;                          --1. For all trades, gather details on the trader order associated with this trade                  IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades                  SELECT  DISTINCT                                    t.MULTI_FUND_ID,                                    t.EXECUTION_TIME,                                    o.ORD_NUM,                                    o.TRAN_TYPE,                                     o.CUSIP,                                    --o.SETTLE_DATE,                                    o.AUTH_TIME,                                    o.SEC_DESC1,                                    o.SM_SEC_GROUP,                                    o.SM_SEC_TYPE,                                    o.LIMIT_TYPE,                                    o.LIMIT_VALUE,                                    prim.CURRENCY,                                    prim.ASSET_INST_TYPE,                                    prim.ORDER_INST_TYPE,                                    prim.BASKET_CUSIP,                                    prim.MATURITY,                                    prim.UNDERLYING_CUSIP,                                    prim.MIP_SEC_ID,                                    t.TRD_CURRENCY                  INTO #trades                  FROM VISTA_REPORTING.dbo.TRADES t                  LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS o                  ON t.ORD_NUM = o.ORD_NUM                  LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE prim                  ON t.MULTI_FUND_ID = prim.MULTI_FUND_ID                  OUTER APPLY (SELECT TOP 1 i.* FROM VISTA_REPORTING.dbo.INSTRUMENTS i                                                                WHERE i.CUSIP=o.CUSIP AND i.DATE<=CONVERT(DATE, o.AUTH_TIME)                                                              ORDER BY i.DATE DESC) as i2                  WHERE prim.DEALING_DESK = 'Equity'  -- Only looking at equities                                 and o.ORD_GROUP is NULL -- Not a program trade                                  and not (                                               (i2.SM_SEC_GROUP = 'EQUITY' and i2.SM_SEC_GROUP = 'EQUITY' and ((i2.RISK_COUNTRY in ('TW',  'EG')) or (i2.RISK_COUNTRY = 'CN' and i2.MARKET = 'CN')))           -- Not an equity in Taiwan, Egypt ('TW', 'EG') or traded over Hong Kong Stock Connect ('CN'\'CN')                                               or (i2.SM_SEC_GROUP = 'FUTURE' and i2.SM_SEC_GROUP is not NULL and i2.RISK_COUNTRY in ('KR', 'TH', 'BR', 'TR', 'PL')) -- Not a future in South Korea, Thailand, Brazil, Turkey, Poland                                               )                      -- LIMIT_TYPE and LIMIT_VALUE must be same for two orders to be mergable                  --select * from VISTA_REPORTING.dbo.TRD_ORDERS                      --2. For all trd orders, create a list of the start time and end time that it was in this status                  -- 2.a.i. Add in a dummy record for each Authorisation time for instances where the only                   --                          records for an order that we have are in status 'F'.                  --            This is done because it is assumed that these orders were authorised and then filled within                  --                          a 15 minute timespan and Vista is blind to these events.                  IF OBJECT_ID('tempdb..#ords_only_seen_filled', 'U') IS NOT NULL DROP TABLE #ords_only_seen_filled                  SELECT DISTINCT                                 ORD_NUM                   INTO #ords_only_seen_filled                  FROM VISTA_REPORTING.dbo.ORDERS                  GROUP BY                                 ORD_NUM                  HAVING                                 -- We don't need to filter for orders with AUTH/MODIFY times here, it will be caught in the datediff section of 2.a.iv.                                 MAX(CASE WHEN STATUS IN ('F','C') THEN 0 ELSE 1 END) = 0  -- We only want to look at orders that we only ever see in a Filled status                      --2.a.ii. For orders that we only ever see fully filled, find the min touch count.                  IF OBJECT_ID('tempdb..#ords_only_seen_filled_min_tch', 'U') IS NOT NULL DROP TABLE #ords_only_seen_filled_min_tch                  SELECT                                  o.ORD_NUM,                                 MIN(o.TOUCH_COUNT) AS MIN_TOUCH_COUNT                  INTO #ords_only_seen_filled_min_tch                  FROM VISTA_REPORTING.dbo.ORDERS o                  INNER JOIN                                 #ords_only_seen_filled min_tch                  ON o.ORD_NUM = min_tch.ORD_NUM                  GROUP BY                                 o.ORD_NUM                      -- 2.a.iii. Get distinct list of TRD_ORDER touch count and modify time - this is to remove duplications caused because this table is at the client execution level                  IF OBJECT_ID('tempdb..#trd_ord_times', 'U') IS NOT NULL DROP TABLE #trd_ord_times                  SELECT DISTINCT                                    o.ORD_NUM,                                    o.TOUCH_COUNT,                                    o.MODIFY_TIME,                                    o.[STATUS],                                    o.TRAN_TYPE,                                    o.CUSIP,                                    --o.SETTLE_DATE,                                    o.AUTH_TIME,                                    o.SEC_DESC1,                                    o.SM_SEC_GROUP,                                    o.SM_SEC_TYPE,                                    o.LIMIT_TYPE,                                    o.LIMIT_VALUE,                                    prim.UNDERLYING_CUSIP,                                    prim.CURRENCY,                                    prim.ASSET_INST_TYPE,                                    prim.ORDER_INST_TYPE,                                    prim.Trade_TRAN_TYPE,                                    prim.Order_CUSIP,                                    prim.MIP_SEC_ID,                                    prim.MATURITY,                                    prim.BASKET_CUSIP,                                    prim.DEBT_DERIV                  INTO #trd_ord_times                  FROM VISTA_REPORTING.dbo.TRD_ORDERS o                  LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE prim                  ON o.ORD_NUM = prim.ORD_NUM         WHERE NOT EXISTS (SELECT ORD_NUM FROM VISTA_REPORTING.dbo.TRD_ORDERS WHERE ORD_NUM=o.ORD_NUM AND ORD_GROUP IS NOT NULL)                      UNION                  -- 2.a.iv. Add in a dummy record for each Authorisation time for instances where the only                   --                          records for an order that we have are in status 'F'.                  --         This is done because it is assumed that these orders were authorised and then filled within                  --                          a 15 minute timespan and Vista is blind to these events.                   SELECT DISTINCT                                    o.ORD_NUM,                                    min_tch.MIN_TOUCH_COUNT - 1 AS TOUCH_COUNT, -- Assume that the TOUCH_COUNT when authorised is one less than the touch count when filled                                    o.AUTH_TIME AS MODIFY_TIME, -- Assume that the modify time is the auth time                                    'U'  AS [STATUS], -- Assume that at the AUTH_TIME, the Status is set to 'U'                                    o.TRAN_TYPE,                                    o.CUSIP,                                    --o.SETTLE_DATE,                                    o.AUTH_TIME,                                    o.SEC_DESC1,                                    o.SM_SEC_GROUP,                                    o.SM_SEC_TYPE,                                    o.LIMIT_TYPE,                                    o.LIMIT_VALUE,                                    prim.UNDERLYING_CUSIP,                                    prim.CURRENCY,                                    prim.ASSET_INST_TYPE,                                    prim.ORDER_INST_TYPE,                                    prim.Trade_TRAN_TYPE,                                    prim.Order_CUSIP,                                    prim.MIP_SEC_ID,                                    prim.MATURITY,                                    prim.BASKET_CUSIP,                                    prim.DEBT_DERIV                  FROM VISTA_REPORTING.dbo.TRD_ORDERS o                  LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE prim                  ON o.ORD_NUM = prim.ORD_NUM                  INNER JOIN #ords_only_seen_filled_min_tch min_tch                  ON o.ORD_NUM = min_tch.ORD_NUM AND o.TOUCH_COUNT = min_tch.MIN_TOUCH_COUNT -- We want to filter out everything except for the  first touch count for the orders.                  WHERE prim.DEALING_DESK = 'Equity' -- Only consider Equity orders - to guard against duplication caused by orders being flagged to multiple desks.                                   AND DATEDIFF(minute,o.AUTH_TIME, o.MODIFY_TIME) < 15  -- We only want to consider those orders that were authorised and then modified within 15 minutes.              AND NOT EXISTS (SELECT ORD_NUM FROM VISTA_REPORTING.dbo.TRD_ORDERS WHERE ORD_NUM=o.ORD_NUM AND ORD_GROUP IS NOT NULL)                      -- 2.b. Generate table of statuses with index columns                  IF OBJECT_ID('tempdb..#statuses', 'U') IS NOT NULL DROP TABLE #statuses                  SELECT                                 *,                                 ROW_NUMBER() OVER (PARTITION BY ORD_NUM ORDER BY TOUCH_COUNT) RowNum,                                 ROW_NUMBER() OVER (PARTITION BY ORD_NUM ORDER BY TOUCH_COUNT) -                                               ROW_NUMBER() OVER (PARTITION BY ORD_NUM, [STATUS] ORDER BY TOUCH_COUNT) AS [Group]                  INTO #statuses                  FROM                                   #trd_ord_times                       -- 2.c. Join statuses table to itself to find the start touch count and the end touch count of the order being in the same status.                   --           This is done so that we can determine when an order moves into a status as well as when it moves out of this status                   IF OBJECT_ID('tempdb..#status_groups', 'U') IS NOT NULL DROP TABLE #status_groups                  SELECT                                  status1.ORD_NUM,                                 status1.TOUCH_COUNT,                                 status1.MODIFY_TIME,                                 status1.STATUS,                                 status1.TRAN_TYPE,                                 status1.CUSIP,                                 --status1.SETTLE_DATE,                                 status1.AUTH_TIME,                                 status1.SEC_DESC1,           status1.SM_SEC_GROUP,                                 status1.SM_SEC_TYPE,                                 status1.LIMIT_TYPE,                                 status1.LIMIT_VALUE,                                 status1.CURRENCY,                                 status1.ASSET_INST_TYPE,                                 status1.ORDER_INST_TYPE,                                 status1.Trade_TRAN_TYPE,                                 status1.Order_CUSIP,                                 status1.UNDERLYING_CUSIP,                                 status1.MIP_SEC_ID,                                 status1.MATURITY,                                 status1.BASKET_CUSIP,                                 status1.DEBT_DERIV,                                 MIN(status1.TOUCH_COUNT) [START],                                 MAX(status2.TOUCH_COUNT) [END]                   INTO #status_groups                  FROM                                  #statuses status1                  LEFT JOIN                                 #statuses status2                                  ON                                  status1.ORD_NUM = status2.ORD_NUM AND                                 status1.RowNum = status2.RowNum - 1                  GROUP BY                                   status1.ORD_NUM,                                 status1.TOUCH_COUNT,                                 status1.MODIFY_TIME,                                 status1.STATUS,                                 status1.TRAN_TYPE,                                 status1.CUSIP,                                --status1.SETTLE_DATE,                                 status1.AUTH_TIME,                                 status1.SEC_DESC1,                                 status1.SM_SEC_GROUP,                                 status1.SM_SEC_TYPE,                                 status1.LIMIT_TYPE,                                 status1.LIMIT_VALUE,                                 status1.CURRENCY,                                 status1.ASSET_INST_TYPE,                                 status1.ORDER_INST_TYPE,                                 status1.Trade_TRAN_TYPE,                                 status1.Order_CUSIP,                                 status1.UNDERLYING_CUSIP,                                 status1.MIP_SEC_ID,                                 status1.MATURITY,                                 status1.BASKET_CUSIP,                                 status1.DEBT_DERIV                      -- 2.d. Find the modify times associated with each of these status changes                  IF OBJECT_ID('tempdb..#status_times', 'U') IS NOT NULL DROP TABLE #status_times                  SELECT                                     st.* ,                                    trd1.MODIFY_TIME AS [Start_Time],                                    ISNULL(trd2.MODIFY_TIME,'9999-12-31') AS [End_Time] --If the order has not moved out of a status then set the end date to be end of time so that we don't do comparisons to NULLs                  INTO #status_times                  FROM #status_groups st                  LEFT JOIN #trd_ord_times trd1                  ON st.ORD_NUM = trd1.ORD_NUM AND st.START = trd1.TOUCH_COUNT                  LEFT JOIN #trd_ord_times trd2                  ON st.ORD_NUM = trd2.ORD_NUM AND st.[END] = trd2.TOUCH_COUNT                      --2.e. Determine whether there is an exception.                   IF OBJECT_ID('tempdb..#mergeable', 'U') IS NOT NULL DROP TABLE #mergeable                  SELECT DISTINCT         t.ORD_NUM AS [Traded_Order],         t.MULTI_FUND_ID AS [Trade],         1 AS MERGE_EXCEPTION ,         st.ORD_NUM AS [Missed_Merge]                  INTO #mergeable                  FROM #trades t                  LEFT JOIN #status_times st                  ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time                  WHERE t.ORD_NUM != st.ORD_NUM                  AND t.CUSIP = st.CUSIP                  AND t.TRAN_TYPE = st.TRAN_TYPE                  --AND t.SETTLE_DATE=st.SETTLE_DATE                  and (t.LIMIT_TYPE=st.LIMIT_TYPE or (t.LIMIT_TYPE is NULL and st.LIMIT_TYPE is NULL))                  and (t.LIMIT_VALUE=st.LIMIT_VALUE or (t.LIMIT_VALUE is NULL and st.LIMIT_VALUE is NULL))                  AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active                          IF OBJECT_ID('tempdb..#mergeable_concat', 'U') IS NOT NULL DROP TABLE #mergeable_concat                  SELECT DISTINCT                    Traded_Order,        [Trade],                    MERGE_EXCEPTION,                    STUFF((                                 SELECT DISTINCT ', ' + LTRIM(RTRIM([Missed_Merge]))                                 FROM #mergeable                                 WHERE (Traded_Order = Results.Traded_Order)                                  FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')                    ,1,2,'') AS Orders_Concat                  INTO #mergeable_concat                  FROM #mergeable Results                  GROUP BY Traded_Order, [Trade], MERGE_EXCEPTION                      -- Use #mergeable_concat to populate FINAL_STATUS_UPDATE_TABLE                  IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table                  select distinct        CONCAT(Traded_Order,'_',Trade,'_13') AS ID,                    '1A1' AS STATUS,                    NULL AS FINAL_UPDATED_TIME                  into #temp_status_table                  from #mergeable_concat                   where MERGE_EXCEPTION = 1                                    MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T                  USING #temp_status_table AS S                  ON (T.ID = S.ID)                  WHEN MATCHED                                 THEN                                  UPDATE SET                                               T.ID=T.ID,                                               T.STATUS=T.STATUS,                 T.DEALING_DESK = 'Equity',                                               T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME                  WHEN NOT MATCHED                                  THEN                                  INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)                                 VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'Equity');             --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      Trade AS MULTI_FUND_ID,      Traded_Order AS TRD_ORD,      NULL AS PM_ORD,      'Order Aggregation' AS Exception_Type,      CONCAT(Traded_Order,'_',Trade,'_13') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'For Review' AS Status,      NULL AS ClientExecID,      'Equity' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      NULL AS DEALER,      '1A1' AS STATUS_ID,      NULL AS ORD_AUTH,      EXECUTION_TIME AS TRADE_EXEC     INTO #temp_audit     FROM #mergeable_concat ex     LEFT JOIN (SELECT MULTI_FUND_ID, EXECUTION_TIME FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t     ON ex.Trade = t.MULTI_FUND_ID     where MERGE_EXCEPTION = 1          MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);                          -- Appends merge exception to the list of equity TRD orders.                  IF OBJECT_ID('VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_EQ_TABLE', 'U') IS NULL                  select distinct                   CONCAT(o.ORD_NUM,'_',COALESCE(oa.Trade,o.MULTI_FUND_ID)) AS OA_ID,         o.ORD_NUM,         oa.Trade,                  trd_o.DEALING_DESK,                  oa.Orders_Concat,    --  ***delete the below script once Order Aggregation has been confirmed***                  --0 AS MERGE_EXCEPTION,                  --NULL AS CREATETIME  --  ***********************************************************************                  case                                  when oa.MERGE_EXCEPTION is NULL then 0 else MERGE_EXCEPTION                  end as MERGE_EXCEPTION,                  case                                 when MERGE_EXCEPTION = 1 then GETDATE() else NULL --if exception is raised then create a datetime stamp                   end as CREATETIME                  into VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_EQ_TABLE         from VISTA_REPORTING.dbo.TRADES o          left join VISTA_REPORTING.dbo.TRD_ORDERS trd_o ON o.ORD_NUM = trd_o.ORD_NUM         left join #mergeable_concat oa on oa.Traded_Order=o.ORD_NUM AND o.MULTI_FUND_ID = oa.Trade         where trd_o.DEALING_DESK = 'Equity'                      ELSE                       IF OBJECT_ID('tempdb..#temp_oa_table', 'U') IS NOT NULL DROP TABLE #temp_oa_table             select distinct         CONCAT(o.ORD_NUM,'_',COALESCE(oa.Trade,o.MULTI_FUND_ID)) AS OA_ID,         o.ORD_NUM,         oa.Trade,         trd_o.DEALING_DESK,         oa.Orders_Concat,         case           when oa.MERGE_EXCEPTION is NULL then 0 else MERGE_EXCEPTION         end as MERGE_EXCEPTION,         case          when MERGE_EXCEPTION = 1 then GETDATE() else NULL --if exception is raised then create a datetime stamp          end as CREATETIME         into #temp_oa_table         from VISTA_REPORTING.dbo.TRADES o          left join VISTA_REPORTING.dbo.TRD_ORDERS trd_o ON o.ORD_NUM = trd_o.ORD_NUM         left join #mergeable_concat oa on oa.Traded_Order=o.ORD_NUM AND o.MULTI_FUND_ID = oa.Trade         where trd_o.DEALING_DESK = 'Equity'                      MERGE VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_EQ_TABLE AS T                  USING #temp_oa_table AS S                  ON (T.OA_ID = S.OA_ID)                  WHEN MATCHED                                 THEN                                  UPDATE SET                                                      T.DEALING_DESK = S.DEALING_DESK,                                               T.MERGE_EXCEPTION = CASE WHEN S.MERGE_EXCEPTION > T.MERGE_EXCEPTION THEN S.MERGE_EXCEPTION ELSE T.MERGE_EXCEPTION END,                                               T.CREATETIME = CASE WHEN S.MERGE_EXCEPTION > T.MERGE_EXCEPTION THEN S.CREATETIME ELSE T.CREATETIME END,                 T.Orders_Concat = CASE WHEN S.MERGE_EXCEPTION > T.MERGE_EXCEPTION THEN S.Orders_Concat ELSE T.Orders_Concat END                   WHEN NOT MATCHED                                  THEN INSERT (OA_ID, ORD_NUM, Trade, Orders_Concat, DEALING_DESK, MERGE_EXCEPTION, CREATETIME)            VALUES (S.OA_ID, S.ORD_NUM, S.Trade, S.Orders_Concat,  S.DEALING_DESK, S.MERGE_EXCEPTION, S.CREATETIME);                      IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades                  IF OBJECT_ID('tempdb..#ords_only_seen_filled', 'U') IS NOT NULL DROP TABLE #ords_only_seen_filled                  IF OBJECT_ID('tempdb..#ords_only_seen_filled_min_tch', 'U') IS NOT NULL DROP TABLE #ords_only_seen_filled_min_tch                  IF OBJECT_ID('tempdb..#trd_ord_times', 'U') IS NOT NULL DROP TABLE #trd_ord_times                  IF OBJECT_ID('tempdb..#statuses', 'U') IS NOT NULL DROP TABLE #statuses                  IF OBJECT_ID('tempdb..#status_groups', 'U') IS NOT NULL DROP TABLE #status_groups                  IF OBJECT_ID('tempdb..#status_times', 'U') IS NOT NULL DROP TABLE #status_times                  IF OBJECT_ID('tempdb..#mergeable', 'U') IS NOT NULL DROP TABLE #mergeable                  IF OBJECT_ID('tempdb..#mergeable_concat', 'U') IS NOT NULL DROP TABLE #mergeable_concat                  IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table                  IF OBJECT_ID('tempdb..#temp_oa_table', 'U') IS NOT NULL DROP TABLE #temp_oa_table            END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_13_ORDER_AGGREGATION_FI  CreateDate: 2025-06-26 18:03:09.440  ModifyDate: 2025-06-26 18:03:09.440  --- DEFINITION START ---  -- =============================================    -- Author:  <Devereux, Alan>    -- Create date: <>    -- Description: <Identify transactions that have multiple     -- distinct orders with identical Instrument ID, settlement date,     -- approval date and Trade Direction. If there are two distinct     -- Order IDs given the conditions flag exception>    -- =============================================        -- ***************VERSION CONTROL***************    -- 11/12/2017 - DDC: Changes made to ensure that script     -- only ever updates existing records always ensuring     -- the highest level exception is reported and     -- inserts new ones if no exception has been raised.        -- 2018-03-21 - WH: Removed reference to BUY_SELL_FLAG - used TRAN_TYPE instead    -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.    -- *********************************************            CREATE PROCEDURE [dbo].[VG_13_ORDER_AGGREGATION_FI]     -- Add the parameters for the stored procedure here    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;            IF OBJECT_ID('tempdb..#tmp_cpty', 'U') IS NOT NULL DROP TABLE #tmp_cpty    SELECT DISTINCT      t.ORD_NUM,      t.MULTI_FUND_ID,      t.TRD_COUNTERPARTY,      COALESCE(NULLIF(t.TRD_YIELD, 0), t.TRD_PRICING_SPREAD, TRD_PRICE) AS TRADE_VALUE     INTO #tmp_cpty    FROM VISTA_REPORTING.dbo.TRADES t    LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID=t.MULTI_FUND_ID     WHERE pr.DEALING_DESK='Fixed Income'                --1. For all trades, gather details on the trader order associated with this trade    IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades    SELECT  DISTINCT        t.MULTI_FUND_ID,        t.EXECUTION_TIME,        o.ORD_NUM,        o.TRAN_TYPE,         o.CUSIP,        o.SETTLE_DATE,     o.SEC_DESC1,     o.SM_SEC_GROUP,     o.SM_SEC_TYPE,     i2.STRIKE,     prim.CURRENCY,     prim.ASSET_INST_TYPE,     prim.ORDER_INST_TYPE,     prim.INST_TYPE,     prim.BASKET_CUSIP,     prim.MATURITY,     prim.UNDERLYING_CUSIP,     prim.MIP_SEC_ID,     t.TRD_CURRENCY,     t.TRD_COUNTERPARTY,     COALESCE(NULLIF(t.TRD_YIELD, 0), t.TRD_PRICING_SPREAD, TRD_PRICE) AS TRADE_VALUE     INTO #trades    FROM (SELECT ORD_NUM, MULTI_FUND_ID, EXECUTION_TIME, TRD_CURRENCY, TRD_COUNTERPARTY, TRD_PRICING_SPREAD, TRD_PRICE, TRD_YIELD, CUSIP FROM VISTA_REPORTING.dbo.TRADES) t    LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS o ON t.ORD_NUM = o.ORD_NUM    LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE prim ON t.MULTI_FUND_ID = prim.MULTI_FUND_ID    OUTER APPLY (SELECT TOP 1 i.STRIKE        FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=coalesce(t.CUSIP, o.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(t.EXECUTION_TIME, o.AUTH_TIME)))         ORDER BY i.DATE DESC) as i2    WHERE prim.FUTURE_ROLLS <> 1 --Do not consider for future rollovers     AND prim.[1615_DEALING] <> 1     AND prim.TWEB_CLOSE_DEALING <> 1     AND prim.DEALING_DESK = 'Fixed Income'         --2. For all trd orders, create a list of the start time and end time that it was in this status    -- 2.a.i. Add in a dummy record for each Authorisation time for instances where the only     --  records for an order that we have are in status 'F'.    -- This is done because it is assumed that these orders were authorised and then filled within    --  a 15 minute timespan and Vista is blind to these events.    IF OBJECT_ID('tempdb..#ords_only_seen_filled', 'U') IS NOT NULL DROP TABLE #ords_only_seen_filled    SELECT DISTINCT     ORD_NUM     INTO #ords_only_seen_filled    FROM VISTA_REPORTING.dbo.ORDERS    GROUP BY     ORD_NUM    HAVING     -- We don't need to filter for orders with AUTH/MODIFY times here, it will be caught in the datediff section of 2.a.iv.     MAX(CASE WHEN STATUS IN ('F','C') THEN 0 ELSE 1 END) = 0  -- We only want to look at orders that we only ever see in a Filled status        --2.a.ii. For orders that we only ever see fully filled, find the min touch count.    IF OBJECT_ID('tempdb..#ords_only_seen_filled_min_tch', 'U') IS NOT NULL DROP TABLE #ords_only_seen_filled_min_tch    SELECT      o.ORD_NUM,     MIN(o.TOUCH_COUNT) AS MIN_TOUCH_COUNT    INTO #ords_only_seen_filled_min_tch    FROM VISTA_REPORTING.dbo.ORDERS o    INNER JOIN #ords_only_seen_filled min_tch ON o.ORD_NUM = min_tch.ORD_NUM    GROUP BY     o.ORD_NUM        -- 2.a.iii. Get distinct list of TRD_ORDER touch count and modify time - this is to remove duplications caused because this table is at the client execution level    IF OBJECT_ID('tempdb..#trd_ord_times', 'U') IS NOT NULL DROP TABLE #trd_ord_times    SELECT DISTINCT           o.ORD_NUM,           o.TOUCH_COUNT,           o.MODIFY_TIME,           o.[STATUS],           o.TRAN_TYPE,           o.CUSIP,           o.SETTLE_DATE,        o.SEC_DESC1,        o.SM_SEC_GROUP,        o.SM_SEC_TYPE,        i2.STRIKE,        prim.UNDERLYING_CUSIP,        prim.CURRENCY,        prim.ASSET_INST_TYPE,        prim.ORDER_INST_TYPE,        prim.INST_TYPE,        prim.Trade_TRAN_TYPE,        prim.Order_CUSIP,        prim.MIP_SEC_ID,        prim.MATURITY,        prim.BASKET_CUSIP,        prim.DEBT_DERIV    INTO #trd_ord_times    FROM VISTA_REPORTING.dbo.TRD_ORDERS o    OUTER APPLY (SELECT TOP 1 i.STRIKE        FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE i.CUSIP=o.CUSIP AND i.DATE<=CONVERT(DATE, o.AUTH_TIME)        ORDER BY i.DATE DESC) as i2    LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE prim    ON o.ORD_NUM = prim.ORD_NUM    WHERE o.DEALING_DESK = 'Fixed Income'        UNION    -- 2.a.iv. Add in a dummy record for each Authorisation time for instances where the only     --  records for an order that we have are in status 'F'.    -- This is done because it is assumed that these orders were authorised and then filled within    --  a 15 minute timespan and Vista is blind to these events.     SELECT DISTINCT           o.ORD_NUM,           min_tch.MIN_TOUCH_COUNT - 1 AS TOUCH_COUNT, -- Assume that the TOUCH_COUNT when authorised is one less than the touch count when filled           o.AUTH_TIME AS MODIFY_TIME, -- Assume that the modify time is the auth time           'U'  AS [STATUS], -- Assume that at the AUTH_TIME, the Status is set to 'U'           o.TRAN_TYPE,           o.CUSIP,           o.SETTLE_DATE,        o.SEC_DESC1,        o.SM_SEC_GROUP,        o.SM_SEC_TYPE,        i2.STRIKE,        prim.UNDERLYING_CUSIP,        prim.CURRENCY,        prim.ASSET_INST_TYPE,        prim.ORDER_INST_TYPE,        prim.INST_TYPE,        prim.Trade_TRAN_TYPE,        prim.Order_CUSIP,        prim.MIP_SEC_ID,        prim.MATURITY,        prim.BASKET_CUSIP,        prim.DEBT_DERIV    FROM VISTA_REPORTING.dbo.TRD_ORDERS o    OUTER APPLY (SELECT TOP 1 i.STRIKE        FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE i.CUSIP=o.CUSIP AND i.DATE<=CONVERT(DATE, o.AUTH_TIME)        ORDER BY i.DATE DESC) as i2    LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE prim    ON o.ORD_NUM = prim.ORD_NUM    INNER JOIN #ords_only_seen_filled_min_tch min_tch    ON o.ORD_NUM = min_tch.ORD_NUM AND o.TOUCH_COUNT = min_tch.MIN_TOUCH_COUNT -- We want to filter out everything except for the  first touch count for the orders.    WHERE prim.DEALING_DESK = 'Fixed Income' -- Only consider Fixed Income orders - to guard against duplication caused by orders being flagged to multiple desks.       AND DATEDIFF(minute,o.AUTH_TIME, o.MODIFY_TIME) < 15  -- We only want to consider those orders that were authorised and then modified within 15 minutes.        -- 2.b. Generate table of statuses with index columns    IF OBJECT_ID('tempdb..#statuses', 'U') IS NOT NULL DROP TABLE #statuses    SELECT         *,         ROW_NUMBER() OVER (PARTITION BY ORD_NUM ORDER BY TOUCH_COUNT) RowNum,         ROW_NUMBER() OVER (PARTITION BY ORD_NUM ORDER BY TOUCH_COUNT) -             ROW_NUMBER() OVER (PARTITION BY ORD_NUM, [STATUS] ORDER BY TOUCH_COUNT) AS [Group]    INTO #statuses    FROM            #trd_ord_times                -- 2.c. Join statuses table to itself to find the start touch count and the end touch count of the order being in the same status.     --           This is done so that we can determine when an order moves into a status as well as when it moves out of this status     IF OBJECT_ID('tempdb..#status_groups', 'U') IS NOT NULL DROP TABLE #status_groups    SELECT      status1.ORD_NUM,     status1.TOUCH_COUNT,     status1.MODIFY_TIME,     status1.STATUS,     status1.TRAN_TYPE,     status1.CUSIP,     status1.SETTLE_DATE,     status1.SEC_DESC1,     status1.SM_SEC_GROUP,     status1.SM_SEC_TYPE,     status1.CURRENCY,     status1.ASSET_INST_TYPE,     status1.ORDER_INST_TYPE,     status1.INST_TYPE,     status1.Trade_TRAN_TYPE,     status1.Order_CUSIP,     status1.UNDERLYING_CUSIP,     status1.MIP_SEC_ID,     status1.MATURITY,     status1.BASKET_CUSIP,     status1.DEBT_DERIV,     status1.STRIKE,        MIN(status1.TOUCH_COUNT) [START],        MAX(status2.TOUCH_COUNT) [END]     INTO #status_groups    FROM         #statuses status1    LEFT JOIN        #statuses status2         ON         status1.ORD_NUM = status2.ORD_NUM AND        status1.RowNum = status2.RowNum - 1    GROUP BY       status1.ORD_NUM,     status1.TOUCH_COUNT,     status1.MODIFY_TIME,     status1.STATUS,     status1.TRAN_TYPE,     status1.CUSIP,     status1.SETTLE_DATE,     status1.SEC_DESC1,     status1.SM_SEC_GROUP,     status1.SM_SEC_TYPE,     status1.CURRENCY,     status1.ASSET_INST_TYPE,     status1.ORDER_INST_TYPE,     status1.INST_TYPE,     status1.Trade_TRAN_TYPE,     status1.Order_CUSIP,     status1.UNDERLYING_CUSIP,     status1.MIP_SEC_ID,     status1.MATURITY,     status1.BASKET_CUSIP,     status1.DEBT_DERIV,     status1.STRIKE    --SELECT * FROM #status_groups            -- 2.d. Find the modify times associated with each of these status changes    IF OBJECT_ID('tempdb..#pre_status_times', 'U') IS NOT NULL DROP TABLE #pre_status_times    SELECT            st.* ,           trd1.MODIFY_TIME AS [Start_Time],           ISNULL(trd2.MODIFY_TIME,'9999-12-31') AS [End_Time] --If the order has not moved out of a status then set the end date to be end of time so that we don't do comparisons to NULLs    INTO #pre_status_times    FROM #status_groups st    LEFT JOIN #trd_ord_times trd1    ON st.ORD_NUM = trd1.ORD_NUM AND st.START = trd1.TOUCH_COUNT    LEFT JOIN #trd_ord_times trd2    ON st.ORD_NUM = trd2.ORD_NUM AND st.[END] = trd2.TOUCH_COUNT    --SELECT * FROM #status_times            IF OBJECT_ID('tempdb..#status_times', 'U') IS NOT NULL DROP TABLE #status_times    SELECT      st.*,     tc.TRADE_VALUE,     tc.TRD_COUNTERPARTY    INTO #status_times    FROM #pre_status_times st    LEFT JOIN #tmp_cpty tc ON tc.ORD_NUM = st.ORD_NUM            --2.e. Determine whether there is an exception.      IF OBJECT_ID('tempdb..#mergeable', 'U') IS NOT NULL DROP TABLE #mergeable    --2.e.i. Debt orders where the asset inst type is known     SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS [Trade],        1 AS MERGE_EXCEPTION ,        st.ORD_NUM AS [Missed_Merge]    INTO #mergeable    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM    AND t.CUSIP = st.CUSIP    AND t.TRAN_TYPE = st.TRAN_TYPE    AND st.DEBT_DERIV = 'DEBT'    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active    AND st.ASSET_INST_TYPE <> 'FIDD OTHER'    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --2.e.ii. Debt orders where the asset inst type is unknown    SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS [Trade],        1 AS MERGE_EXCEPTION ,        st.ORD_NUM AS [Missed_Merge]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM    AND t.CUSIP = st.CUSIP    AND t.TRAN_TYPE = st.TRAN_TYPE    AND t.ORDER_INST_TYPE = st.ORDER_INST_TYPE    AND st.DEBT_DERIV = 'DEBT'    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active    AND st.ASSET_INST_TYPE = 'FIDD OTHER'    GROUP BY st.ORD_NUM,  t.ORD_NUM, t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --2.e.iii. Futures/ETD orders where the asset inst type is known     SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS [Trade],        1 AS MERGE_EXCEPTION ,        st.ORD_NUM AS [Missed_Merge]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM    AND t.CUSIP = st.CUSIP    AND t.TRAN_TYPE = st.TRAN_TYPE    AND st.ASSET_INST_TYPE IN ('IRFUT','OPTFUT')    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active    AND st.ASSET_INST_TYPE <> 'FIDD OTHER'    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --2.e.iii. Futures/ETD orders where the asset inst type is known     SELECT           t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS [Trade],        1 AS MERGE_EXCEPTION ,        st.ORD_NUM AS [Missed_Merge]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM    AND t.CUSIP = st.CUSIP    AND t.TRAN_TYPE = st.TRAN_TYPE    AND st.ASSET_INST_TYPE = 'BNDFUT'    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active    AND st.ASSET_INST_TYPE <> 'FIDD OTHER'    AND (t.TRD_COUNTERPARTY != st.TRD_COUNTERPARTY     OR t.TRADE_VALUE != st.TRADE_VALUE)    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID        UNION        --2.e.iv. Futures/ETD orders where the asset inst type is unknown     SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS [Trade],        1 AS MERGE_EXCEPTION ,        st.ORD_NUM AS [Missed_Merge]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM    AND t.CUSIP = st.CUSIP    AND t.TRAN_TYPE = st.TRAN_TYPE    AND t.ORDER_INST_TYPE = st.ORDER_INST_TYPE    AND st.ORDER_INST_TYPE = 'ETD'    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active    AND st.ASSET_INST_TYPE = 'FIDD OTHER'    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --2.e.v. ICDS orders where the asset inst type is known     SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS [Trade],        1 AS MERGE_EXCEPTION ,        st.ORD_NUM AS [Missed_Merge]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM    AND t.BASKET_CUSIP = st.BASKET_CUSIP    AND t.MATURITY = st.MATURITY    AND t.TRAN_TYPE = st.TRAN_TYPE    AND st.ASSET_INST_TYPE = 'ICDS'    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active    AND (t.TRD_COUNTERPARTY != st.TRD_COUNTERPARTY    OR t.TRADE_VALUE != st.TRADE_VALUE)    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --2.e.vi. ICDS orders where the asset inst type is unknown     SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS [Trade],        1 AS MERGE_EXCEPTION ,        st.ORD_NUM AS [Missed_Merge]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM    AND t.CURRENCY = st.CURRENCY    AND t.MATURITY = st.MATURITY    AND t.SEC_DESC1 = st.SEC_DESC1    AND t.TRAN_TYPE = st.TRAN_TYPE    AND st.ORDER_INST_TYPE = 'ICDS'    AND t.ORDER_INST_TYPE = st.ORDER_INST_TYPE    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active    AND (t.TRD_COUNTERPARTY != st.TRD_COUNTERPARTY    OR t.TRADE_VALUE != st.TRADE_VALUE)    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --2.e.vii. SCDS orders where the asset inst type is known     SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS [Trade],        1 AS MERGE_EXCEPTION ,        st.ORD_NUM AS [Missed_Merge]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM    AND t.MIP_SEC_ID = st.MIP_SEC_ID -- Red code    AND t.MATURITY = st.MATURITY    AND t.TRAN_TYPE = st.TRAN_TYPE    AND st.ASSET_INST_TYPE = 'SCDS'    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active    AND (t.TRD_COUNTERPARTY != st.TRD_COUNTERPARTY    OR t.TRADE_VALUE != st.TRADE_VALUE)    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --2.e.viii. SCDS orders where the asset inst type is unknown     SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS [Trade],        1 AS MERGE_EXCEPTION ,        st.ORD_NUM AS [Missed_Merge]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM    AND t.CURRENCY = st.CURRENCY    AND t.MATURITY = st.MATURITY    AND t.TRAN_TYPE = st.TRAN_TYPE    AND t.SEC_DESC1 = st.SEC_DESC1    AND t.ORDER_INST_TYPE = st.ORDER_INST_TYPE    AND st.ORDER_INST_TYPE = 'SCDS'    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active    AND (t.TRD_COUNTERPARTY != st.TRD_COUNTERPARTY    OR t.TRADE_VALUE != st.TRADE_VALUE)    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --2.e.ix. SWAPS where the asset inst type is known     SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS [Trade],        1 AS MERGE_EXCEPTION ,        st.ORD_NUM AS [Missed_Merge]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM    AND t.TRAN_TYPE = st.TRAN_TYPE    AND t.ASSET_INST_TYPE = st.ASSET_INST_TYPE    AND t.TRD_CURRENCY = st.CURRENCY    AND t.MATURITY = st.MATURITY    AND ISNULL(t.UNDERLYING_CUSIP,'') = ISNULL(st.UNDERLYING_CUSIP,'')    AND st.ASSET_INST_TYPE IN ('OIS', 'IRS', 'BASIS', 'IFS', 'ZCS', 'CCS', 'ASWP', 'CASWP')    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --2.e.x. SWAPS where the asset inst type is unknown     SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS [Trade],        1 AS MERGE_EXCEPTION ,        st.ORD_NUM AS [Missed_Merge]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM    AND t.TRAN_TYPE = st.TRAN_TYPE    AND t.TRD_CURRENCY = st.CURRENCY    AND t.MATURITY = st.MATURITY    AND t.SM_SEC_GROUP = st.SM_SEC_GROUP    AND t.SM_SEC_TYPE = st.SM_SEC_TYPE    AND t.ORDER_INST_TYPE = st.ORDER_INST_TYPE    AND st.ORDER_INST_TYPE IN ('ASWP','SWAP','CCS')    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --2.e.xi. CDSWAPTION Orders    SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS [Trade],        1 AS MERGE_EXCEPTION ,        st.ORD_NUM AS [Missed_Merge]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM    AND t.CUSIP = st.CUSIP    AND t.TRAN_TYPE = st.TRAN_TYPE    AND t.MATURITY = st.MATURITY    AND t.INST_TYPE = st.INST_TYPE    AND st.INST_TYPE = 'CDSWAPTION'    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active    GROUP BY st.ORD_NUM,  t.ORD_NUM, t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --2.e.xii. TRD Orders    SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS [Trade],        1 AS MERGE_EXCEPTION ,        st.ORD_NUM AS [Missed_Merge]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM    AND t.CUSIP = st.CUSIP    AND t.TRAN_TYPE = st.TRAN_TYPE    AND t.MATURITY = st.MATURITY    AND t.INST_TYPE = st.INST_TYPE    AND t.STRIKE = st.STRIKE    AND st.INST_TYPE in ('TRS', 'FI TRS')    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active    GROUP BY st.ORD_NUM,  t.ORD_NUM, t.MULTI_FUND_ID            IF OBJECT_ID('tempdb..#mergeable_concat', 'U') IS NOT NULL DROP TABLE #mergeable_concat    SELECT DISTINCT      Traded_Order,      [Trade],      MERGE_EXCEPTION,      STUFF((     SELECT DISTINCT ', ' + LTRIM(RTRIM([Missed_Merge]))     FROM #mergeable     WHERE (Traded_Order = Results.Traded_Order)      FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS Orders_Concat    INTO #mergeable_concat    FROM #mergeable Results    GROUP BY Traded_Order, Trade, MERGE_EXCEPTION             --IF OBJECT_ID('tempdb..#order_agg_table', 'U') IS NOT NULL DROP TABLE #order_agg_table     --select distinct     -- t.ORD_NUM,     -- case     --  when mt.PM_ORD_COUNT > 1 then 0     --  when mt.PM_ORD_COUNT is NULL then 0     --  when mt.PM_ORD_COUNT = 1 then 1     --  else NULL end as MERGE_EXCEPTION     --into #order_agg_table     --from VISTA_REPORTING.dbo.TRD_ORDERS t     --left join #mergeable mt on mt.TRD_ORD=t.ORD_NUM     --where t.DEALING_DESK='Fixed Income'         -- Use #mergeable_concat to populate FINAL_STATUS_UPDATE_TABLE     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     select distinct      CONCAT(Traded_Order,'_',Trade,'_13') AS ID,      '1A2' AS STATUS,      NULL AS FINAL_UPDATED_TIME     into #temp_status_table     from #mergeable_concat      where MERGE_EXCEPTION = 1          MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET       T.ID=T.ID,       T.STATUS=T.STATUS,       T.DEALING_DESK = 'Fixed Income',       T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME,DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'Fixed Income');        --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      Trade AS MULTI_FUND_ID,      Traded_Order AS TRD_ORD,      NULL AS PM_ORD,      'Order Aggregation' AS Exception_Type,      CONCAT(Traded_Order,'_',Trade,'_13') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'With Reviewer' AS Status,      NULL AS ClientExecID,      'Fixed Income' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      NULL AS DEALER,      '1A2' AS STATUS_ID,      NULL AS ORD_AUTH,      EXECUTION_TIME AS TRADE_EXEC     INTO #temp_audit     FROM #mergeable_concat ex     LEFT JOIN (SELECT MULTI_FUND_ID, EXECUTION_TIME FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t     ON ex.Trade = t.MULTI_FUND_ID     where MERGE_EXCEPTION = 1          MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);             -- Appends merge exception to the list of equity TRD orders.     IF OBJECT_ID('VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_FI_TABLE', 'U') IS NULL     select distinct     CONCAT(o.ORD_NUM,'_',COALESCE(oa.Trade,o.MULTI_FUND_ID)) AS OA_ID,     o.ORD_NUM,     oa.Trade,     trd_o.DEALING_DESK,     oa.Orders_Concat,    --  ***delete the below script once Order Aggregation has been confirmed***     --0 AS MERGE_EXCEPTION,     --NULL AS CREATETIME    --  ***********************************************************************     case       when oa.MERGE_EXCEPTION is NULL then 0 else MERGE_EXCEPTION     end as MERGE_EXCEPTION,     case      when MERGE_EXCEPTION = 1 then GETDATE() else NULL --if exception is raised then create a datetime stamp      end as CREATETIME     into VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_FI_TABLE     from VISTA_REPORTING.dbo.TRADES o      left join VISTA_REPORTING.dbo.TRD_ORDERS trd_o ON o.ORD_NUM = trd_o.ORD_NUM     left join #mergeable_concat oa on oa.Traded_Order=o.ORD_NUM AND o.MULTI_FUND_ID = oa.Trade     where trd_o.DEALING_DESK = 'Fixed Income'         ELSE           IF OBJECT_ID('tempdb..#temp_oa_table', 'U') IS NOT NULL DROP TABLE #temp_oa_table         select distinct     CONCAT(o.ORD_NUM,'_',COALESCE(oa.Trade,o.MULTI_FUND_ID)) AS OA_ID,     o.ORD_NUM,     oa.Trade,     trd_o.DEALING_DESK,     oa.Orders_Concat,     case       when oa.MERGE_EXCEPTION is NULL then 0 else MERGE_EXCEPTION     end as MERGE_EXCEPTION,     case      when MERGE_EXCEPTION = 1 then GETDATE() else NULL --if exception is raised then create a datetime stamp      end as CREATETIME     into #temp_oa_table     from VISTA_REPORTING.dbo.TRADES o      left join VISTA_REPORTING.dbo.TRD_ORDERS trd_o ON o.ORD_NUM = trd_o.ORD_NUM     left join #mergeable_concat oa on oa.Traded_Order=o.ORD_NUM AND o.MULTI_FUND_ID = oa.Trade     where trd_o.DEALING_DESK = 'Fixed Income'              MERGE VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_FI_TABLE AS T     USING #temp_oa_table AS S     ON (T.OA_ID = S.OA_ID)     WHEN MATCHED      THEN       UPDATE SET         T.OA_ID = S.OA_ID,       T.DEALING_DESK = S.DEALING_DESK,       T.MERGE_EXCEPTION = CASE WHEN S.MERGE_EXCEPTION > T.MERGE_EXCEPTION THEN S.MERGE_EXCEPTION ELSE T.MERGE_EXCEPTION END,       T.CREATETIME = CASE WHEN S.MERGE_EXCEPTION > T.MERGE_EXCEPTION THEN S.CREATETIME ELSE T.CREATETIME END,       T.Orders_Concat =  CASE WHEN S.MERGE_EXCEPTION > T.MERGE_EXCEPTION THEN S.Orders_Concat ELSE T.Orders_Concat END      WHEN NOT MATCHED       THEN INSERT (OA_ID, ORD_NUM, Trade, Orders_Concat, DEALING_DESK, MERGE_EXCEPTION, CREATETIME)        VALUES (S.OA_ID, S.ORD_NUM, S.Trade, S.Orders_Concat,  S.DEALING_DESK, S.MERGE_EXCEPTION, S.CREATETIME);        IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades    IF OBJECT_ID('tempdb..#ords_only_seen_filled', 'U') IS NOT NULL DROP TABLE #ords_only_seen_filled    IF OBJECT_ID('tempdb..#ords_only_seen_filled_min_tch', 'U') IS NOT NULL DROP TABLE #ords_only_seen_filled_min_tch    IF OBJECT_ID('tempdb..#trd_ord_times', 'U') IS NOT NULL DROP TABLE #trd_ord_times    IF OBJECT_ID('tempdb..#statuses', 'U') IS NOT NULL DROP TABLE #statuses    IF OBJECT_ID('tempdb..#status_groups', 'U') IS NOT NULL DROP TABLE #status_groups    IF OBJECT_ID('tempdb..#status_times', 'U') IS NOT NULL DROP TABLE #status_times    IF OBJECT_ID('tempdb..#mergeable', 'U') IS NOT NULL DROP TABLE #mergeable    IF OBJECT_ID('tempdb..#mergeable_concat', 'U') IS NOT NULL DROP TABLE #mergeable_concat    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    IF OBJECT_ID('tempdb..#temp_oa_table', 'U') IS NOT NULL DROP TABLE #temp_oa_table                    END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_13_ORDER_AGGREGATION_LL  CreateDate: 2025-06-26 18:02:58.870  ModifyDate: 2025-06-26 18:02:58.870  --- DEFINITION START ---  -- =============================================    -- Author:  <Chandarana, Sohini>    -- Create date: <04/23/2018>    -- Description: <Identify transactions that have multiple     -- distinct orders with identical Instrument ID, settlement date,     -- approval date and Trade Direction. If there are two distinct     -- Order IDs given the conditions flag exception    -- Stored procedure as appropriated from VG_13_ORDER_AGGREGATION_FI>    -- =============================================        -- ***************VERSION CONTROL***************    -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.    -- *********************************************        CREATE PROCEDURE [dbo].[VG_13_ORDER_AGGREGATION_LL]     -- Add the parameters for the stored procedure here    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        --1. For all trades, gather details on the trader order associated with this trade    IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades    SELECT  DISTINCT           t.MULTI_FUND_ID,           t.EXECUTION_TIME,           o.ORD_NUM,           o.TRAN_TYPE,            o.CUSIP    INTO #trades    FROM VISTA_REPORTING.dbo.TRADES t    LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS o    ON t.ORD_NUM = o.ORD_NUM    LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE prim    ON t.MULTI_FUND_ID = prim.MULTI_FUND_ID    WHERE prim.DEALING_DESK = 'Leveraged Finance'      and prim.PRIMARY_MARKET!=1      AND prim.INTERFUND_TRANSFER = 0        --2. For all trd orders, create a list of the start time and end time that it was in this status    -- 2.a. Get distinct list of TRD_ORDER touch count and modify time - this is to remove duplications caused because this table is at the client execution level    IF OBJECT_ID('tempdb..#trd_ord_times', 'U') IS NOT NULL DROP TABLE #trd_ord_times    SELECT DISTINCT           o.ORD_NUM,           o.TOUCH_COUNT,           o.MODIFY_TIME,           o.[STATUS],           o.TRAN_TYPE,           o.CUSIP    INTO #trd_ord_times    FROM VISTA_REPORTING.dbo.TRD_ORDERS o    LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE prim    ON o.ORD_NUM = prim.ORD_NUM        -- 2.b. Generate table of statuses with index columns    IF OBJECT_ID('tempdb..#statuses', 'U') IS NOT NULL DROP TABLE #statuses    SELECT         *,         ROW_NUMBER() OVER (PARTITION BY ORD_NUM ORDER BY TOUCH_COUNT) RowNum,         ROW_NUMBER() OVER (PARTITION BY ORD_NUM ORDER BY TOUCH_COUNT) -             ROW_NUMBER() OVER (PARTITION BY ORD_NUM, [STATUS] ORDER BY TOUCH_COUNT) AS [Group]    INTO #statuses    FROM            #trd_ord_times                    -- 2.c. Join statuses table to itself to find the start touch count and the end touch count of the order being in the same status.     --           This is done so that we can determine when an order moves into a status as well as when it moves out of this status     IF OBJECT_ID('tempdb..#status_groups', 'U') IS NOT NULL DROP TABLE #status_groups    SELECT      status1.ORD_NUM,     status1.TOUCH_COUNT,     status1.MODIFY_TIME,     status1.STATUS,     status1.TRAN_TYPE,     status1.CUSIP,        MIN(status1.TOUCH_COUNT) [START],        MAX(status2.TOUCH_COUNT) [END]     INTO #status_groups    FROM         #statuses status1    LEFT JOIN        #statuses status2         ON         status1.ORD_NUM = status2.ORD_NUM AND        status1.RowNum = status2.RowNum - 1    GROUP BY       status1.ORD_NUM,     status1.TOUCH_COUNT,     status1.MODIFY_TIME,     status1.STATUS,     status1.TRAN_TYPE,     status1.CUSIP    --SELECT * FROM #status_groups        -- 2.d. Find the modify times associated with each of these status changes    IF OBJECT_ID('tempdb..#status_times', 'U') IS NOT NULL DROP TABLE #status_times    SELECT            st.* ,           trd1.MODIFY_TIME AS [Start_Time],           ISNULL(trd2.MODIFY_TIME,'9999-12-31') AS [End_Time] --If the order has not moved out of a status then set the end date to be end of time so that we don't do comparisons to NULLs    INTO #status_times    FROM #status_groups st    LEFT JOIN #trd_ord_times trd1    ON st.ORD_NUM = trd1.ORD_NUM AND st.START = trd1.TOUCH_COUNT    LEFT JOIN #trd_ord_times trd2    ON st.ORD_NUM = trd2.ORD_NUM AND st.[END] = trd2.TOUCH_COUNT        --2.e. Determine whether there is an exception.      IF OBJECT_ID('tempdb..#mergeable', 'U') IS NOT NULL DROP TABLE #mergeable    --2.e.i. Debt orders where the asset inst type is known     SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID aS [Trade],        1 AS MERGE_EXCEPTION ,        st.ORD_NUM AS [Missed_Merge]    INTO #mergeable    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    WHERE t.ORD_NUM != st.ORD_NUM    AND t.CUSIP = st.CUSIP    AND t.TRAN_TYPE = st.TRAN_TYPE    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID        IF OBJECT_ID('tempdb..#mergeable_concat', 'U') IS NOT NULL DROP TABLE #mergeable_concat    SELECT DISTINCT      Traded_Order,      [Trade],      MERGE_EXCEPTION,      STUFF((     SELECT DISTINCT ', ' + LTRIM(RTRIM([Missed_Merge]))     FROM #mergeable     WHERE (Traded_Order = Results.Traded_Order)      FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS Orders_Concat    INTO #mergeable_concat    FROM #mergeable Results    GROUP BY Traded_Order, Trade, MERGE_EXCEPTION             -- Use #mergeable_concat to populate FINAL_STATUS_UPDATE_TABLE     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     select distinct      CONCAT(Traded_Order,'_',Trade,'_13') AS ID,      '1A1' AS STATUS,      NULL AS FINAL_UPDATED_TIME     into #temp_status_table     from #mergeable_concat      where MERGE_EXCEPTION = 1          MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET       T.ID=T.ID,       T.STATUS=T.STATUS,       T.DEALING_DESK = 'Leveraged Finance',       T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME,'Leveraged Finance');        --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      Trade AS MULTI_FUND_ID,      Traded_Order AS TRD_ORD,      NULL AS PM_ORD,      'Order Aggregation' AS Exception_Type,      CONCAT(Traded_Order,'_',Trade,'_13') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'For Review' AS Status,      NULL AS ClientExecID,      'Leveraged Finance' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      NULL AS DEALER,      '1A1' AS STATUS_ID,      NULL AS ORD_AUTH,      EXECUTION_TIME AS TRADE_EXEC     INTO #temp_audit     FROM #mergeable_concat ex     LEFT JOIN (SELECT MULTI_FUND_ID, EXECUTION_TIME FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t     ON ex.Trade = t.MULTI_FUND_ID     where MERGE_EXCEPTION = 1          MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);             -- Appends merge exception to the list of equity TRD orders.     IF OBJECT_ID('VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_LL_TABLE', 'U') IS NULL     select distinct     CONCAT(o.ORD_NUM,'_',COALESCE(oa.Trade,o.MULTI_FUND_ID)) AS OA_ID,     o.ORD_NUM,     oa.Trade,     trd_o.DEALING_DESK,     oa.Orders_Concat,    --  ***delete the below script once Order Aggregation has been confirmed***     --0 AS MERGE_EXCEPTION,     --NULL AS CREATETIME    --  ***********************************************************************              case       when oa.MERGE_EXCEPTION is NULL then 0 else MERGE_EXCEPTION     end as MERGE_EXCEPTION,     case      when MERGE_EXCEPTION = 1 then GETDATE() else NULL --if exception is raised then create a datetime stamp      end as CREATETIME     into VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_LL_TABLE     from VISTA_REPORTING.dbo.TRADES o      left join VISTA_REPORTING.dbo.TRD_ORDERS trd_o ON o.ORD_NUM = trd_o.ORD_NUM     left join #mergeable_concat oa on oa.Traded_Order=o.ORD_NUM AND o.MULTI_FUND_ID = oa.Trade     where trd_o.DEALING_DESK = 'Leveraged Finance'         ELSE          IF OBJECT_ID('tempdb..#temp_oa_table', 'U') IS NOT NULL DROP TABLE #temp_oa_table         select distinct     CONCAT(o.ORD_NUM,'_',COALESCE(oa.Trade,o.MULTI_FUND_ID)) AS OA_ID,     o.ORD_NUM,     oa.Trade,     trd_o.DEALING_DESK,     oa.Orders_Concat,     case       when oa.MERGE_EXCEPTION is NULL then 0 else MERGE_EXCEPTION     end as MERGE_EXCEPTION,     case      when MERGE_EXCEPTION = 1 then GETDATE() else NULL --if exception is raised then create a datetime stamp      end as CREATETIME     into #temp_oa_table     from VISTA_REPORTING.dbo.TRADES o      left join VISTA_REPORTING.dbo.TRD_ORDERS trd_o ON o.ORD_NUM = trd_o.ORD_NUM     left join #mergeable_concat oa on oa.Traded_Order=o.ORD_NUM AND o.MULTI_FUND_ID = oa.Trade     where trd_o.DEALING_DESK = 'Leveraged Finance'             MERGE VISTA_STAGING.dbo.VG_13_ORDER_AGGREGATION_LL_TABLE AS T     USING #temp_oa_table AS S     ON (T.OA_ID = S.OA_ID)     WHEN MATCHED      THEN       UPDATE SET         T.OA_ID = S.OA_ID,       T.DEALING_DESK = S.DEALING_DESK,       T.MERGE_EXCEPTION = CASE WHEN S.MERGE_EXCEPTION > T.MERGE_EXCEPTION THEN S.MERGE_EXCEPTION ELSE T.MERGE_EXCEPTION END,       T.CREATETIME = CASE WHEN S.MERGE_EXCEPTION > T.MERGE_EXCEPTION THEN S.CREATETIME ELSE T.CREATETIME END,       T.Trade = CASE WHEN S.MERGE_EXCEPTION > T.MERGE_EXCEPTION THEN S.Trade ELSE T.Trade END,       T.Orders_Concat =  CASE WHEN S.MERGE_EXCEPTION > T.MERGE_EXCEPTION THEN S.Orders_Concat ELSE T.Orders_Concat END      WHEN NOT MATCHED       THEN INSERT (OA_ID, ORD_NUM, Trade, Orders_Concat, DEALING_DESK, MERGE_EXCEPTION, CREATETIME)        VALUES (S.OA_ID, S.ORD_NUM, S.Trade, S.Orders_Concat,  S.DEALING_DESK, S.MERGE_EXCEPTION, S.CREATETIME);        IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades    IF OBJECT_ID('tempdb..#trd_ord_times', 'U') IS NOT NULL DROP TABLE #trd_ord_times    IF OBJECT_ID('tempdb..#status_groups', 'U') IS NOT NULL DROP TABLE #status_groups    IF OBJECT_ID('tempdb..#status_times', 'U') IS NOT NULL DROP TABLE #status_times    IF OBJECT_ID('tempdb..#mergeable', 'U') IS NOT NULL DROP TABLE #mergeable    IF OBJECT_ID('tempdb..#mergeable_concat', 'U') IS NOT NULL DROP TABLE #mergeable_concat    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    IF OBJECT_ID('tempdb..#temp_oa_table', 'U') IS NOT NULL DROP TABLE #temp_oa_table    END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_14_ORDER_PRIORITY_DMG  CreateDate: 2025-06-26 18:02:22.927  ModifyDate: 2025-06-26 18:02:22.927  --- DEFINITION START ---  -- =============================================    -- Author:  <LIZZIE REYNOLDS>    -- Create date: <02/04/2019>    -- Description:     -- <Compare the order of APPROVED_DATETIME and     -- RELEASED_DATETIME. If sequential order of both     -- rankings do not match raise an exception>    -- =============================================        -- ***************VERSION CONTROL***************    -- 2019-05-16 - MS: Added in PM Order Number in    --     Audit table.    -- *********************************************        CREATE PROCEDURE [dbo].[VG_14_ORDER_PRIORITY_DMG]            AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        --0. Determine the first trade for each order (using the TRD_AUTH_TIME)    IF OBJECT_ID('tempdb..#first_trade', 'U') IS NOT NULL DROP TABLE #first_trade    SELECT      ORD_NUM,     MIN(TRD_AUTH_TIME) AS MIN_AUTH_TIME    INTO #first_trade    FROM VISTA_REPORTING.dbo.TRADES    GROUP BY     ORD_NUM         --1. For all trades, gather details on the trader order associated with this trade    IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades    SELECT  DISTINCT           t.MULTI_FUND_ID,           t.EXECUTION_TIME,        o.AUTH_TIME,           o.ORD_NUM,           o.TRAN_TYPE,            o.CUSIP,           o.SETTLE_DATE,        o.SEC_DESC1,        o.SM_SEC_GROUP,        o.SM_SEC_TYPE,        i2.STRIKE,        prim.CURRENCY,        prim.ASSET_INST_TYPE,        prim.ORDER_INST_TYPE,        prim.BASKET_CUSIP,        prim.MATURITY,        prim.UNDERLYING_CUSIP,        prim.MIP_SEC_ID,        prim.TRD_CURRENCY,        prim.CUSIP_SWAP_AMORT    INTO #trades    FROM VISTA_staging.dbo.TRADES t    INNER JOIN #first_trade f_t ON t.ORD_NUM = f_t.ORD_NUM AND t.TRD_AUTH_TIME = f_t.MIN_AUTH_TIME    LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS o ON t.ORD_NUM = o.ORD_NUM    LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE prim ON t.MULTI_FUND_ID = prim.MULTI_FUND_ID    OUTER APPLY (SELECT TOP 1 i.STRIKE        FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=coalesce(t.CUSIP, o.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(t.EXECUTION_TIME, o.AUTH_TIME)))         ORDER BY i.DATE DESC) as i2    WHERE --prim.FUTURE_ROLLS <> 1 --Do not consider for future rollovers     --AND prim.[1615_DEALING] <> 1     --AND prim.TWEB_CLOSE_DEALING <> 1      prim.INTERFUND_TRANSFER <> 1     --AND prim.PRIMARY_MARKET <> 1     AND prim.DEALING_DESK = 'DMG'     AND ISNULL(t.TRD_STATUS,'') <> 'C' -- Do not consider cancelled trades         --2. For all trd orders, create a list of the start time and end time that it was in this status    -- 2.a.i. Add in a dummy record for each Authorisation time for instances where the only     --  records for an order that we have are in status 'F'.    -- This is done because it is assumed that these orders were authorised and then filled within    --  a 15 minute timespan and Vista is blind to these events.    IF OBJECT_ID('tempdb..#ords_only_seen_filled', 'U') IS NOT NULL DROP TABLE #ords_only_seen_filled    SELECT DISTINCT     ORD_NUM     INTO #ords_only_seen_filled    FROM VISTA_REPORTING.dbo.ORDERS    GROUP BY     ORD_NUM    HAVING     MAX(CASE WHEN STATUS IN ('F','C') THEN 0 ELSE 1 END) = 0  -- We only want to look at orders that we only ever see in a Filled status        --2.a.ii. For orders that we only ever see fully filled, find the min touch count.    IF OBJECT_ID('tempdb..#ords_only_seen_filled_min_tch', 'U') IS NOT NULL DROP TABLE #ords_only_seen_filled_min_tch    SELECT      o.ORD_NUM,     MIN(o.TOUCH_COUNT) AS MIN_TOUCH_COUNT    INTO #ords_only_seen_filled_min_tch    FROM VISTA_REPORTING.dbo.ORDERS o    INNER JOIN     #ords_only_seen_filled min_tch    ON o.ORD_NUM = min_tch.ORD_NUM    GROUP BY     o.ORD_NUM        -- 2.a.iii. Get distinct list of TRD_ORDER touch count and modify time - this is to remove duplications caused because this table is at the client execution level    IF OBJECT_ID('tempdb..#trd_ord_times', 'U') IS NOT NULL DROP TABLE #trd_ord_times    SELECT DISTINCT           o.ORD_NUM,           o.TOUCH_COUNT,           o.MODIFY_TIME,        o.AUTH_TIME,        f_t.MIN_AUTH_TIME,           o.[STATUS],           o.TRAN_TYPE,           o.CUSIP,           o.SETTLE_DATE,        o.SEC_DESC1,        o.SM_SEC_GROUP,        o.SM_SEC_TYPE,        i2.STRIKE,        prim.UNDERLYING_CUSIP,        prim.CURRENCY,        prim.ASSET_INST_TYPE,        prim.ORDER_INST_TYPE,        prim.Trade_TRAN_TYPE,        prim.Order_CUSIP,        prim.MIP_SEC_ID,        prim.MATURITY,        prim.BASKET_CUSIP,        prim.DEBT_DERIV,        prim.CUSIP_SWAP_AMORT    INTO #trd_ord_times    FROM VISTA_REPORTING.dbo.TRD_ORDERS o     --LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc    --ON o.ORD_NUM = oc.PM_ORD    LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE prim ON o.ORD_NUM = prim.ORD_NUM    --AND prim.PRIMARY_MARKET_ORDER_LEVEL <> 1    LEFT JOIN #first_trade f_t ON o.ORD_NUM = f_t.ORD_NUM    OUTER APPLY (SELECT TOP 1 i.STRIKE        FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=o.CUSIP AND i.DATE<=CONVERT(DATE, o.AUTH_TIME))         ORDER BY i.DATE DESC) as i2        UNION    -- 2.a.iv. Add in a dummy record for each Authorisation time for instances where the only     --  records for an order that we have are in status 'F'.    -- This is done because it is assumed that these orders were authorised and then filled within    --  a 15 minute timespan and Vista is blind to these events.     SELECT DISTINCT           o.ORD_NUM,           min_tch.MIN_TOUCH_COUNT - 1 AS TOUCH_COUNT, -- Assume that the TOUCH_COUNT when authorised is one less than the touch count when filled           o.AUTH_TIME AS MODIFY_TIME, -- Assume that the modify time is the auth time        o.AUTH_TIME,        f_t.MIN_AUTH_TIME,           'U'  AS [STATUS], -- Assume that at the AUTH_TIME, the Status is set to 'U'           o.TRAN_TYPE,           o.CUSIP,           o.SETTLE_DATE,        o.SEC_DESC1,        o.SM_SEC_GROUP,        o.SM_SEC_TYPE,        i2.STRIKE,        prim.UNDERLYING_CUSIP,        prim.CURRENCY,        prim.ASSET_INST_TYPE,        prim.ORDER_INST_TYPE,        prim.Trade_TRAN_TYPE,        prim.Order_CUSIP,        prim.MIP_SEC_ID,        prim.MATURITY,        prim.BASKET_CUSIP,        prim.DEBT_DERIV,        prim.CUSIP_SWAP_AMORT    FROM VISTA_REPORTING.dbo.TRD_ORDERS o    --LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc    --ON o.ORD_NUM = oc.PM_ORD    LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE prim ON o.ORD_NUM = prim.ORD_NUM    INNER JOIN #ords_only_seen_filled_min_tch min_tch ON o.ORD_NUM = min_tch.ORD_NUM AND o.TOUCH_COUNT = min_tch.MIN_TOUCH_COUNT -- We want to filter out everything except for the  first touch count for the orders.    LEFT JOIN #first_trade f_t ON o.ORD_NUM = f_t.ORD_NUM    OUTER APPLY (SELECT TOP 1 i.STRIKE        FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=o.CUSIP AND i.DATE<=CONVERT(DATE, o.AUTH_TIME))         ORDER BY i.DATE DESC) as i2    WHERE-- prim.PRIMARY_MARKET_ORDER_LEVEL <> 1    prim.DEALING_DESK = 'DMG' -- Only consider Fixed Income orders - to guard against duplication caused by orders being flagged to multiple desks.    AND DATEDIFF(minute,o.AUTH_TIME, o.MODIFY_TIME) < 15  -- We only want to consider those orders that were authorised and then modified within 15 minutes.    --SELECT * FROM #trd_ord_times WHERE ORD_NUM IN (902775, 902875) ORDER BY ORD_NUM        -- 2.b. Generate table of statuses with index columns    IF OBJECT_ID('tempdb..#statuses', 'U') IS NOT NULL DROP TABLE #statuses    SELECT         *,         ROW_NUMBER() OVER (PARTITION BY ORD_NUM ORDER BY TOUCH_COUNT) RowNum,         ROW_NUMBER() OVER (PARTITION BY ORD_NUM ORDER BY TOUCH_COUNT) -             ROW_NUMBER() OVER (PARTITION BY ORD_NUM, [STATUS] ORDER BY TOUCH_COUNT) AS [Group]    INTO #statuses    FROM            #trd_ord_times     --SELECT * FROM #statuses WHERE ORD_NUM = '1000076     ' ORDER BY TOUCH_COUNT    -- 2.c. Join statuses table to itself to find the start touch count and the end touch count of the order being in the same status.     --           This is done so that we can determine when an order moves into a status as well as when it moves out of this status     IF OBJECT_ID('tempdb..#status_groups', 'U') IS NOT NULL DROP TABLE #status_groups    SELECT      status1.ORD_NUM,     status1.AUTH_TIME,     status1.MIN_AUTH_TIME,     status1.STATUS,     status1.TRAN_TYPE,     status1.CUSIP,     status1.SETTLE_DATE,     status1.SEC_DESC1,     status1.SM_SEC_GROUP,     status1.SM_SEC_TYPE,     status1.STRIKE,     status1.CURRENCY,     status1.ASSET_INST_TYPE,     status1.ORDER_INST_TYPE,     status1.Trade_TRAN_TYPE,     status1.Order_CUSIP,     status1.UNDERLYING_CUSIP,     status1.MIP_SEC_ID,     status1.MATURITY,     status1.BASKET_CUSIP,     status1.DEBT_DERIV,     status1.CUSIP_SWAP_AMORT,        MIN(status1.TOUCH_COUNT) [START],        MAX(status2.TOUCH_COUNT) [END]     INTO #status_groups    FROM         #statuses status1    LEFT JOIN        #statuses status2         ON         status1.ORD_NUM = status2.ORD_NUM AND        status1.RowNum = status2.RowNum - 1    GROUP BY       status1.ORD_NUM,     status1.AUTH_TIME,     status1.MIN_AUTH_TIME,     status1.STATUS,     status1.TRAN_TYPE,     status1.CUSIP,     status1.SETTLE_DATE,     status1.SEC_DESC1,     status1.SM_SEC_GROUP,     status1.SM_SEC_TYPE,     status1.STRIKE,     status1.CURRENCY,     status1.ASSET_INST_TYPE,     status1.ORDER_INST_TYPE,     status1.Trade_TRAN_TYPE,     status1.Order_CUSIP,     status1.UNDERLYING_CUSIP,     status1.MIP_SEC_ID,     status1.MATURITY,     status1.BASKET_CUSIP,     status1.DEBT_DERIV,     status1.CUSIP_SWAP_AMORT,     status1.[Group]    --SELECT * FROM #status_groups        --2.d.i. For the first row of each order, we use the authorisation time as the start point so that we include this time    IF OBJECT_ID('tempdb..#First_Row', 'U') IS NOT NULL DROP TABLE #First_Row    SELECT            ORD_NUM,            MIN(START) AS [First_Row]     INTO #First_Row    FROM #status_groups     GROUP BY ORD_NUM            -- 2.d. Find the modify times associated with each of these status changes    IF OBJECT_ID('tempdb..#status_times', 'U') IS NOT NULL DROP TABLE #status_times    SELECT            st.* ,           CASE                   WHEN fr.First_Row IS NOT NULL THEN st.AUTH_TIME -- For the first record of each order we use the start time as the authorisatio ntime so that we are considering this time period.                  ELSE trd1.MODIFY_TIME               END AS [Start_Time],           ISNULL(trd2.MODIFY_TIME,'9999-12-31') AS [End_Time] --If the order has not moved out of a status then set the end date to be end of time so that we don't do comparisons to NULLs    INTO #status_times    FROM #status_groups st    LEFT JOIN #trd_ord_times trd1    ON st.ORD_NUM = trd1.ORD_NUM AND st.START = trd1.TOUCH_COUNT    LEFT JOIN #trd_ord_times trd2    ON st.ORD_NUM = trd2.ORD_NUM AND st.[END] = trd2.TOUCH_COUNT    LEFT JOIN #First_Row fr    ON st.ORD_NUM = fr.ORD_NUM AND st.START = fr.First_Row    --SELECT * FROM #status_times WHERE ORD_NUM IN (902775, 902875) ORDER BY ORD_NUM, STATUS DESC        --2.e. Determine whether there is an exception.      IF OBJECT_ID('tempdb..#order_priority', 'U') IS NOT NULL DROP TABLE #order_priority    --2.e.i. Debt orders where the asset inst type is known     SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS Trade,        1 AS ORDER_PRIORITY_EXCEPTION ,        st.ORD_NUM AS [Prior_Order]    INTO #order_priority    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM    --AND st.ASSET_INST_TYPE <> 'FIDD OTHER' -- We do not know the asset inst type DO WE NEED THIS FOR DMG?    AND st.DEBT_DERIV = 'DEBT' --DO WE NEED THIS FOR DMG?    AND t.CUSIP = st.CUSIP    AND t.TRAN_TYPE = st.TRAN_TYPE    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active    AND t.AUTH_TIME > st.AUTH_TIME    AND t.EXECUTION_TIME < st.MIN_AUTH_TIME    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID        UNION        --2.e.ii. Debt orders where the asset inst type is unknown    SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS Trade,      1 AS ORDER_PRIORITY_EXCEPTION ,        st.ORD_NUM AS [Prior_Order]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    WHERE t.ORD_NUM != st.ORD_NUM    AND st.ORDER_INST_TYPE in ('GOV', 'IGOV', 'EM GOV')     AND st.ASSET_INST_TYPE = 'DMG OTHER' -- We do not know the asset inst type NEED TO SET A RELEVANT DMG ONE FOR THIS    AND t.CUSIP = st.CUSIP    AND t.TRAN_TYPE = st.TRAN_TYPE    AND t.ORDER_INST_TYPE = st.ORDER_INST_TYPE    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active     AND t.AUTH_TIME > st.AUTH_TIME    AND t.EXECUTION_TIME < st.MIN_AUTH_TIME    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID        UNION        --2.e.iii. Futures/ETD orders where the asset inst type is known     --SELECT     --       t.ORD_NUM AS [Traded_Order],    --    t.MULTI_FUND_ID AS Trade,    --    1 AS ORDER_PRIORITY_EXCEPTION ,    --    st.ORD_NUM AS [Prior_Order]    --FROM #trades t    --LEFT JOIN #status_times st    --ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --WHERE t.ORD_NUM != st.ORD_NUM    --AND st.ASSET_INST_TYPE IN ('IRFUT','BNDFUT','OPTFUT') --UNSURE WHAT THIS IS DOING AND NEED DMG VERSIONS FOR ALL THESE UNIONS    --AND st.ASSET_INST_TYPE <> 'FIDD OTHER'    --AND t.CUSIP = st.CUSIP    --AND t.TRAN_TYPE = st.TRAN_TYPE    --AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active     --AND t.AUTH_TIME > st.AUTH_TIME    --AND t.EXECUTION_TIME < st.MIN_AUTH_TIME    --GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID    ----HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.    --    --UNION    --    ----2.e.iv. Futures/ETD orders where the asset inst type is unknown     --SELECT     --       t.ORD_NUM AS [Traded_Order],    --    t.MULTI_FUND_ID AS Trade,    --    1 AS ORDER_PRIORITY_EXCEPTION ,    --    st.ORD_NUM AS [Prior_Order]    --FROM #trades t    --LEFT JOIN #status_times st    --ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --WHERE t.ORD_NUM != st.ORD_NUM    --AND st.ORDER_INST_TYPE = 'ETD'    --AND st.ASSET_INST_TYPE = 'FIDD OTHER'    --AND t.CUSIP = st.CUSIP    --AND t.TRAN_TYPE = st.TRAN_TYPE    --AND t.ORDER_INST_TYPE = st.ORDER_INST_TYPE    --AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active     --AND t.AUTH_TIME > st.AUTH_TIME    --AND t.EXECUTION_TIME < st.MIN_AUTH_TIME    --GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID    ----HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.                    --2.e.v. ICDS orders where the asset inst type is known     SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS Trade,        1 AS ORDER_PRIORITY_EXCEPTION ,        st.ORD_NUM AS [Prior_Order]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM    AND st.ASSET_INST_TYPE = 'ICDS'    AND st.ASSET_INST_TYPE <> 'DMG OTHER'    AND t.BASKET_CUSIP = st.BASKET_CUSIP    AND t.MATURITY = st.MATURITY    AND t.TRAN_TYPE = st.TRAN_TYPE    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active     AND t.AUTH_TIME > st.AUTH_TIME    AND t.EXECUTION_TIME < st.MIN_AUTH_TIME    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --2.e.vi. ICDS orders where the asset inst type is unknown     SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS Trade,        1 AS ORDER_PRIORITY_EXCEPTION ,        st.ORD_NUM AS [Prior_Order]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM    AND st.ORDER_INST_TYPE = 'ICDS'    AND st.ASSET_INST_TYPE = 'DMG OTHER'    AND t.ORDER_INST_TYPE = st.ORDER_INST_TYPE    AND t.TRAN_TYPE = st.TRAN_TYPE    AND t.CURRENCY = st.CURRENCY    AND t.MATURITY = st.MATURITY    AND t.SEC_DESC1 = st.SEC_DESC1    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active     AND t.AUTH_TIME > st.AUTH_TIME    AND t.EXECUTION_TIME < st.MIN_AUTH_TIME    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --2.e.vii. SCDS orders where the asset inst type is known     SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS Trade,        1 AS ORDER_PRIORITY_EXCEPTION ,        st.ORD_NUM AS [Prior_Order]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM    AND st.ASSET_INST_TYPE = 'SCDS'    AND st.ASSET_INST_TYPE <> 'DMG OTHER'    AND t.TRAN_TYPE = st.TRAN_TYPE    AND t.MIP_SEC_ID = st.MIP_SEC_ID -- Red code    AND t.MATURITY = st.MATURITY    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active     AND t.AUTH_TIME > st.AUTH_TIME    AND t.EXECUTION_TIME < st.MIN_AUTH_TIME    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --2.e.viii. SCDS orders where the asset inst type is unknown     SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS Trade,        1 AS ORDER_PRIORITY_EXCEPTION ,        st.ORD_NUM AS [Prior_Order]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM    AND st.ORDER_INST_TYPE = 'SCDS'    AND st.ASSET_INST_TYPE = 'DMG OTHER'    AND t.ORDER_INST_TYPE = st.ORDER_INST_TYPE    AND t.TRAN_TYPE = st.TRAN_TYPE    AND t.CURRENCY = st.CURRENCY    AND t.MATURITY = st.MATURITY    AND t.SEC_DESC1 = st.SEC_DESC1    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active     AND t.AUTH_TIME > st.AUTH_TIME    AND t.EXECUTION_TIME < st.MIN_AUTH_TIME    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --2.e.ix. SWAPS where the asset inst type is known     SELECT                t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS Trade,        1 AS ORDER_PRIORITY_EXCEPTION ,        st.ORD_NUM AS [Prior_Order]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    WHERE t.ORD_NUM != st.ORD_NUM    AND st.ASSET_INST_TYPE IN ('IRS','IFS', 'OIS', 'ASWP', 'CCS', 'CASWP', 'BASIS', 'ZCS')    AND st.ASSET_INST_TYPE <> 'DMG OTHER'    AND t.TRAN_TYPE = st.TRAN_TYPE    AND t.ASSET_INST_TYPE = st.ASSET_INST_TYPE    AND t.TRD_CURRENCY = st.CURRENCY    AND t.MATURITY = st.MATURITY    AND COALESCE(t.UNDERLYING_CUSIP, t.CUSIP_SWAP_AMORT,'-1')  = COALESCE(st.UNDERLYING_CUSIP, st.CUSIP_SWAP_AMORT,'-1') --NOT SURE WHAT THIS MEANS BUT LEFT IN FOR NOW? SURELY BETTER TO REMOVE CUSIP_SWAP_AMORT    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active     AND t.AUTH_TIME > st.AUTH_TIME    AND t.EXECUTION_TIME < st.MIN_AUTH_TIME    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID        UNION        --2.e.ix. OPTIONS where the asset inst type is known     SELECT                t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS Trade,        1 AS ORDER_PRIORITY_EXCEPTION ,        st.ORD_NUM AS [Prior_Order]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    WHERE t.ORD_NUM != st.ORD_NUM    AND st.ASSET_INST_TYPE IN ('EQOPT', 'FXOPT')    AND st.ASSET_INST_TYPE <> 'DMG OTHER'    AND t.TRAN_TYPE = st.TRAN_TYPE    AND t.ASSET_INST_TYPE = st.ASSET_INST_TYPE        AND t.MATURITY = st.MATURITY    AND COALESCE(t.UNDERLYING_CUSIP, t.CUSIP_SWAP_AMORT,'-1')  = COALESCE(st.UNDERLYING_CUSIP, st.CUSIP_SWAP_AMORT,'-1') --NOT SURE WHAT THIS MEANS BUT LEFT IN FOR NOW? SURELY BETTER TO REMOVE CUSIP_SWAP_AMORT    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active     AND t.AUTH_TIME > st.AUTH_TIME    AND t.EXECUTION_TIME < st.MIN_AUTH_TIME    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID        UNION        --2.e.x. SWAPS where the asset inst type is unknown     SELECT                   t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS Trade,        1 AS ORDER_PRIORITY_EXCEPTION ,        st.ORD_NUM AS [Prior_Order]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    WHERE t.ORD_NUM != st.ORD_NUM    AND st.ORDER_INST_TYPE IN ('IRS','IFS', 'OIS', 'ASWP', 'CCS', 'CASWP', 'BASIS', 'ZCS', 'SWAP')    AND st.ASSET_INST_TYPE = 'DMG OTHER'    AND t.ORDER_INST_TYPE = st.ORDER_INST_TYPE    AND t.TRAN_TYPE = st.TRAN_TYPE    AND t.TRD_CURRENCY = st.CURRENCY    AND t.SM_SEC_GROUP = st.SM_SEC_GROUP -- DO WE NEED THIS?    AND t.SM_SEC_TYPE = st.SM_SEC_TYPE    AND t.MATURITY = st.MATURITY    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active     AND t.AUTH_TIME > st.AUTH_TIME    AND t.EXECUTION_TIME < st.MIN_AUTH_TIME    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID        UNION        --2.e.x. OPTIONS where the asset inst type is unknown     SELECT                   t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS Trade,        1 AS ORDER_PRIORITY_EXCEPTION ,        st.ORD_NUM AS [Prior_Order]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    WHERE t.ORD_NUM != st.ORD_NUM    AND st.ORDER_INST_TYPE IN ('FXOPT', 'EQOPT')    AND st.ASSET_INST_TYPE = 'DMG OTHER'    AND t.ORDER_INST_TYPE = st.ORDER_INST_TYPE    AND t.TRAN_TYPE = st.TRAN_TYPE    AND t.SM_SEC_GROUP = st.SM_SEC_GROUP -- DO WE NEED THIS?    AND t.SM_SEC_TYPE = st.SM_SEC_TYPE    AND t.MATURITY = st.MATURITY    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active     AND t.AUTH_TIME > st.AUTH_TIME    AND t.EXECUTION_TIME < st.MIN_AUTH_TIME    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID        UNION        --2.e.ix. TRS where the asset inst type is known     SELECT                t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS Trade,        1 AS ORDER_PRIORITY_EXCEPTION ,        st.ORD_NUM AS [Prior_Order]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    WHERE t.ORD_NUM != st.ORD_NUM    AND st.ASSET_INST_TYPE IN ('TRS')    AND st.ASSET_INST_TYPE <> 'DMG OTHER'    AND t.TRAN_TYPE = st.TRAN_TYPE    AND t.ASSET_INST_TYPE = st.ASSET_INST_TYPE    AND t.STRIKE = st.STRIKE    AND t.MATURITY = st.MATURITY    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active     AND t.AUTH_TIME > st.AUTH_TIME    AND t.EXECUTION_TIME < st.MIN_AUTH_TIME    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID        UNION        --2.e.x. TRS where the asset inst type is unknown     SELECT                   t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS Trade,        1 AS ORDER_PRIORITY_EXCEPTION ,        st.ORD_NUM AS [Prior_Order]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    WHERE t.ORD_NUM != st.ORD_NUM    AND st.ORDER_INST_TYPE IN ('TRS')    AND st.ASSET_INST_TYPE = 'DMG OTHER'    AND t.ORDER_INST_TYPE = st.ORDER_INST_TYPE    AND t.TRAN_TYPE = st.TRAN_TYPE    AND t.STRIKE = st.STRIKE    AND t.MATURITY = st.MATURITY    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active     AND t.AUTH_TIME > st.AUTH_TIME    AND t.EXECUTION_TIME < st.MIN_AUTH_TIME    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID        UNION        --2.e.ix. CDSWAPTION where the asset inst type is known     SELECT                t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS Trade,        1 AS ORDER_PRIORITY_EXCEPTION ,        st.ORD_NUM AS [Prior_Order]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    WHERE t.ORD_NUM != st.ORD_NUM    AND st.ASSET_INST_TYPE IN ('CDSWAPTION')    AND st.ASSET_INST_TYPE <> 'DMG OTHER'    AND t.TRAN_TYPE = st.TRAN_TYPE    AND t.CUSIP = st.CUSIP    AND t.MATURITY = st.MATURITY    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active     AND t.AUTH_TIME > st.AUTH_TIME    AND t.EXECUTION_TIME < st.MIN_AUTH_TIME    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID        UNION        --2.e.x. CDSWAPTION where the asset inst type is unknown     SELECT                   t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS Trade,        1 AS ORDER_PRIORITY_EXCEPTION ,        st.ORD_NUM AS [Prior_Order]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    WHERE t.ORD_NUM != st.ORD_NUM    AND st.ORDER_INST_TYPE IN ('CDSWAPTION')    AND st.ASSET_INST_TYPE = 'DMG OTHER'    AND t.TRAN_TYPE = st.TRAN_TYPE    AND t.CUSIP = st.CUSIP    AND t.MATURITY = st.MATURITY    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active     AND t.AUTH_TIME > st.AUTH_TIME    AND t.EXECUTION_TIME < st.MIN_AUTH_TIME    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID            IF OBJECT_ID('tempdb..#order_priority_concat', 'U') IS NOT NULL DROP TABLE #order_priority_concat    SELECT DISTINCT      pm.ORD_NUM,      Traded_Order,      Trade,      ORDER_PRIORITY_EXCEPTION,      STUFF((     SELECT DISTINCT ', ' + LTRIM(RTRIM(Prior_Order))     FROM #order_priority     WHERE (Traded_Order = Results.Traded_Order)      FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS Orders_Concat    INTO #order_priority_concat    FROM #order_priority Results    LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.TRD_ORD = Results.Traded_Order    LEFT JOIN (SELECT ORD_NUM FROM VISTA_REPORTING.DBO.PM_ORDERS) PM ON OC.PM_ORD = PM.ORD_NUM    GROUP BY Traded_Order, ORDER_PRIORITY_EXCEPTION, Trade, ORD_NUM              -- Use #order_priority_concat to populate FINAL_STATUS_UPDATE_TABLE     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     select distinct      CONCAT(Traded_Order,'_14') AS ID,      '1A1' AS STATUS, -- AS THIS IS ONLY A REPORT DO WE NEED THIS?      NULL AS FINAL_UPDATED_TIME     into #temp_status_table     from #order_priority_concat     where ORDER_PRIORITY_EXCEPTION = 1          MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET       T.ID=T.ID,       T.STATUS=T.STATUS,       T.DEALING_DESK = 'DMG',       T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME,'DMG');         --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      NULL AS MULTI_FUND_ID,      ex.Traded_Order AS TRD_ORD,      ex.ORD_NUM AS PM_ORD,      'Order Priority' AS Exception_Type,      CONCAT(Traded_Order,'_14') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'For Review' AS Status,      NULL AS ClientExecID,      'DMG' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      NULL AS DEALER,      '1A1' AS STATUS_ID,      trd_o.AUTH_TIME AS ORD_AUTH,      NULL AS TRADE_EXEC     INTO #temp_audit     FROM #order_priority_concat ex     LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o     ON ex.Traded_Order = trd_o.ORD_NUM     where ORDER_PRIORITY_EXCEPTION = 1          MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_DMG AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);               -- Append the exceptions to the list of TRD orders     IF OBJECT_ID('VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_DMG_TABLE', 'U') IS NULL           select distinct     t.ORD_NUM AS OP_ID,     t.ORD_NUM,     o.Trade,     t.DEALING_DESK,     o.Orders_Concat AS Prior_Orders,    --  ***delete the below script once Order Priority has been confirmed***     --0 AS ORDER_PRIORITY_EXCEPTION,     --NULL AS CREATETIME    --  ********************************************************************         case       when ORDER_PRIORITY_EXCEPTION is NULL then 0 else ORDER_PRIORITY_EXCEPTION     end as ORDER_PRIORITY_EXCEPTION,     case      when ORDER_PRIORITY_EXCEPTION = 1 then GETDATE() else NULL --if exception has been raised create TIMESTAMP     end as CREATETIME     into VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_DMG_TABLE     from VISTA_REPORTING.dbo.TRD_ORDERS t     left join #order_priority_concat o on o.Traded_Order=t.ORD_NUM     where t.DEALING_DESK = 'DMG'          ELSE          IF OBJECT_ID('tempdb..#temp_op_table', 'U') IS NOT NULL DROP TABLE #temp_op_table         select distinct     t.ORD_NUM AS OP_ID,     t.ORD_NUM,     MIN(o.Trade) AS Trade,     t.DEALING_DESK,     o.Orders_Concat,         case       when ORDER_PRIORITY_EXCEPTION is NULL then 0 else ORDER_PRIORITY_EXCEPTION     end as ORDER_PRIORITY_EXCEPTION,     case      when ORDER_PRIORITY_EXCEPTION = 1 then GETDATE() else NULL --if exception has been raised create TIMESTAMP     end as CREATETIME     into #temp_op_table     from VISTA_REPORTING.dbo.TRD_ORDERS t     left join #order_priority_concat o on o.Traded_Order=t.ORD_NUM     where t.DEALING_DESK = 'DMG'     GROUP BY      t.ORD_NUM,      t.ORD_NUM,      t.DEALING_DESK,      o.Orders_Concat,      case        when ORDER_PRIORITY_EXCEPTION is NULL then 0 else ORDER_PRIORITY_EXCEPTION      end,      case       when ORDER_PRIORITY_EXCEPTION = 1 then GETDATE() else NULL --if exception has been raised create TIMESTAMP      end         MERGE VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_DMG_TABLE AS T     USING #temp_op_table AS S     ON (T.OP_ID=S.OP_ID )     WHEN MATCHED      THEN       UPDATE SET         T.ORD_NUM = CASE WHEN S.ORDER_PRIORITY_EXCEPTION > T.ORDER_PRIORITY_EXCEPTION THEN S.ORD_NUM ELSE T.ORD_NUM END,       T.Trade = CASE WHEN S.ORDER_PRIORITY_EXCEPTION > T.ORDER_PRIORITY_EXCEPTION THEN S.Trade ELSE T.Trade END,       T.DEALING_DESK = S.DEALING_DESK,       T.Prior_Orders = CASE WHEN S.ORDER_PRIORITY_EXCEPTION > T.ORDER_PRIORITY_EXCEPTION THEN S.Orders_Concat ELSE T.Prior_Orders END,       T.ORDER_PRIORITY_EXCEPTION = CASE WHEN S.ORDER_PRIORITY_EXCEPTION > T.ORDER_PRIORITY_EXCEPTION THEN S.ORDER_PRIORITY_EXCEPTION ELSE T.ORDER_PRIORITY_EXCEPTION END,       T.CREATETIME = CASE WHEN S.ORDER_PRIORITY_EXCEPTION > T.ORDER_PRIORITY_EXCEPTION THEN S.CREATETIME ELSE T.CREATETIME END     WHEN NOT MATCHED       THEN INSERT (OP_ID, Ord_Num, Trade, Prior_Orders, DEALING_DESK, ORDER_PRIORITY_EXCEPTION, CREATETIME)        VALUES (S.OP_ID, S.ORD_NUM, S.Trade, S.Orders_Concat, S.DEALING_DESK, S.ORDER_PRIORITY_EXCEPTION, S.CREATETIME);        IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades    IF OBJECT_ID('tempdb..#ords_only_seen_filled', 'U') IS NOT NULL DROP TABLE #ords_only_seen_filled    IF OBJECT_ID('tempdb..#ords_only_seen_filled_min_tch', 'U') IS NOT NULL DROP TABLE #ords_only_seen_filled_min_tch    IF OBJECT_ID('tempdb..#trd_ord_times', 'U') IS NOT NULL DROP TABLE #trd_ord_times    IF OBJECT_ID('tempdb..#statuses', 'U') IS NOT NULL DROP TABLE #statuses    IF OBJECT_ID('tempdb..#status_groups', 'U') IS NOT NULL DROP TABLE #status_groups    IF OBJECT_ID('tempdb..#status_times', 'U') IS NOT NULL DROP TABLE #status_times    IF OBJECT_ID('tempdb..#order_priority', 'U') IS NOT NULL DROP TABLE #order_priority    IF OBJECT_ID('tempdb..#order_priority_concat', 'U') IS NOT NULL DROP TABLE #order_priority_concat    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    IF OBJECT_ID('tempdb..#temp_op_table', 'U') IS NOT NULL DROP TABLE #temp_op_table        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_14_ORDER_PRIORITY_EQ  CreateDate: 2025-06-26 18:02:13.263  ModifyDate: 2025-06-26 18:02:13.263  --- DEFINITION START ---  -- =============================================    -- Author:  <Devereux, Alan>    -- Create date: <20/10/2017>    -- Description:     -- <Compare the order of APPROVED_DATETIME and     -- RELEASED_DATETIME. If sequential order of both     -- rankings do not match raise an exception>    -- =============================================        -- ***************VERSION CONTROL***************    -- 11/12/2017 - DDC: Changes made to ensure that script     -- only ever updates existing records always ensuring     -- the highest level exception is reported and     -- inserts new ones if no exception has been raised.        -- 2018-03-21 - WH: Removed reference to BUY_SELL_FLAG - used TRAN_TYPE instead    -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.    -- *********************************************        CREATE PROCEDURE [dbo].[VG_14_ORDER_PRIORITY_EQ]            AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        DECLARE @EMSX_VALID_DATE DATE --The date client wants to use EMSX Route Date as release time rather than Aladdin release time.    SET @EMSX_VALID_DATE = '2018-06-19'        --1. Create a temp table holding the timezones    IF OBJECT_ID('tempdb..#tzs', 'U') IS NOT NULL DROP TABLE #tzs    SELECT DISTINCT       COUNTRY,      GMTOFFSETMINS,      PERIODSTART,      ROW_NUMBER() OVER (PARTITION BY COUNTRY ORDER BY PERIODSTART) RowNum    INTO #tzs    FROM       (SELECT DISTINCT COUNTRY,GMTOFFSETMINS, PERIODSTART FROM VISTA_REPORTING.dbo.TIMEZONES ) a         IF OBJECT_ID('tempdb..#tz_periods', 'U') IS NOT NULL DROP TABLE #tz_periods    SELECT      base.COUNTRY,     base.GMTOFFSETMINS,     base.PERIODSTART,     ISNULL(next.PERIODSTART,'9999-12-31') AS PERIOD_END    INTO #tz_periods    FROM #tzs base    LEFT JOIN #tzs next    ON base.COUNTRY = next.COUNTRY    AND base.RowNum + 1 = next.RowNum        IF OBJECT_ID('tempdb..#auth_times', 'U') IS NOT NULL DROP TABLE #auth_times    SELECT ORD_NUM      ,MIN(AUTH_TIME) AS MIN_AUTH    INTO #auth_times    FROM VISTA_REPORTING.dbo.TRD_ORDERS    GROUP BY ORD_NUM        IF OBJECT_ID('tempdb..#first_trade_mfid', 'U') IS NOT NULL DROP TABLE #first_trade_mfid    SELECT DISTINCT     p.ORD_NUM     ,p.MULTI_FUND_ID     ,CASE      -- Use the Aladdin release datetime for all orders on convertible bonds, trs and ET Options as requested by client.      -- Use EMSX Route datetime for all others.      -- We also restrict on AUTH_TIME as EMSX data was only available from a specific date, defined in param at top of script.      WHEN (auth.MIN_AUTH < @EMSX_VALID_DATE) OR (pr.INST_TYPE in ('CONV BOND', 'TRS', 'ET Options')) THEN       MIN(p.RELEASE_DATETIME)       ELSE       MIN(p.ROUTE_DATETIME)      END AS EXECUTION_TIME     ,CASE      WHEN (auth.MIN_AUTH < @EMSX_VALID_DATE) OR (pr.INST_TYPE in ('CONV BOND', 'TRS', 'ET Options')) THEN 'RELEASE'      ELSE 'ROUTE'     END AS RELEASE_VAR_USED    INTO #first_trade_mfid    FROM VISTA_REPORTING.dbo.PLACEMENTS as p    RIGHT JOIN #auth_times as auth on p.ORD_NUM = auth.ORD_NUM    LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.ORD_NUM = p.ORD_NUM    GROUP BY p.ORD_NUM, p.MULTI_FUND_ID, auth.MIN_AUTH, pr.INST_TYPE        IF OBJECT_ID('tempdb..#min_exec', 'U') IS NOT NULL DROP TABLE #min_exec    SELECT DISTINCT     ORD_NUM     ,MIN(EXECUTION_TIME) AS MIN_EXEC    INTO #min_exec    FROM VISTA_REPORTING.dbo.TRADES    GROUP BY ORD_NUM               --1. For all trades, gather details on the trader order associated with this trade    IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades    SELECT DISTINCT           t.MULTI_FUND_ID,           o.TRAN_TYPE,            o.CUSIP,           o.ORD_NUM,           COALESCE(f_t.EXECUTION_TIME, me.MIN_EXEC) as EXECUTION_TIME,        f_t.RELEASE_VAR_USED,           o.AUTH_TIME,        o.ORD_GROUP,        o.LIMIT_TYPE,        o.LIMIT_VALUE    INTO #trades    FROM VISTA_staging.dbo.TRADES t    RIGHT JOIN #first_trade_mfid f_t     ON t.ORD_NUM = f_t.ORD_NUM  AND t.MULTI_FUND_ID = f_t.Multi_Fund_ID    RIGHT JOIN VISTA_REPORTING.dbo.TRD_ORDERS o     ON t.ORD_NUM = o.ORD_NUM    LEFT JOIN #min_exec as me     ON me.ORD_NUM = t.ORD_NUM    LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE prim     ON t.MULTI_FUND_ID = prim.MULTI_FUND_ID    WHERE prim.DEALING_DESK = 'Equity'     AND o.ORD_GROUP IS NULL        --2. For all trd orders, create a list of the start time and end time that it was in this status    -- 2.a.i. Add in a dummy record for each Authorisation time for instances where the only     --            records for an order that we have are in status 'F'.    --     This is done because it is assumed that these orders were authorised and then filled within    --            a 15 minute timespan and Vista is blind to these events.    IF OBJECT_ID('tempdb..#ords_only_seen_filled', 'U') IS NOT NULL DROP TABLE #ords_only_seen_filled    SELECT DISTINCT           ORD_NUM     INTO #ords_only_seen_filled    FROM VISTA_REPORTING.dbo.ORDERS    GROUP BY           ORD_NUM    HAVING           MAX(CASE WHEN STATUS IN ('F','C') THEN 0 ELSE 1 END) = 0  -- We only want to look at orders that we only ever see in a Filled status        --SELECT * FROM #ords_only_seen_filled    --WHERE ORD_NUM IN (950783, 950183, 950283, 950383, 950683)    ---- all present        --2.a.ii. For orders that we only ever see fully filled, find the min touch count.    IF OBJECT_ID('tempdb..#ords_only_seen_filled_min_tch', 'U') IS NOT NULL DROP TABLE #ords_only_seen_filled_min_tch    SELECT            o.ORD_NUM,           MIN(o.TOUCH_COUNT) AS MIN_TOUCH_COUNT    INTO #ords_only_seen_filled_min_tch    FROM VISTA_REPORTING.dbo.ORDERS o    INNER JOIN           #ords_only_seen_filled min_tch    ON o.ORD_NUM = min_tch.ORD_NUM    GROUP BY           o.ORD_NUM        --SELECT * FROM #ords_only_seen_filled_min_tch    --WHERE ORD_NUM IN (950783, 950183, 950283, 950383, 950683)    ---- all present        -- 2.a.iii. Get distinct list of TRD_ORDER touch count and modify time - this is to remove duplications caused because this table is at the client execution level    IF OBJECT_ID('tempdb..#trd_ord_times', 'U') IS NOT NULL DROP TABLE #trd_ord_times    SELECT DISTINCT           o.ORD_NUM,        o.COUNTRY,           o.TOUCH_COUNT,           o.MODIFY_TIME,           o.AUTH_TIME,           o.[STATUS],           o.TRAN_TYPE,           o.CUSIP,        o.LIMIT_TYPE,        o.LIMIT_VALUE,           t.EXECUTION_TIME,        t.RELEASE_VAR_USED    INTO #trd_ord_times    FROM VISTA_REPORTING.dbo.TRD_ORDERS o    LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE prim     ON o.ORD_NUM = prim.ORD_NUM    LEFT JOIN #trades t     ON o.ORD_NUM = t.ORD_NUM    WHERE o.ORD_GROUP IS NULL        UNION    -- 2.a.iv. Add in a dummy record for each Authorisation time for instances where the only     --            records for an order that we have are in status 'F'.    --     This is done because it is assumed that these orders were authorised and then filled within    --            a 15 minute timespan and Vista is blind to these events.     SELECT DISTINCT           o.ORD_NUM,        o.COUNTRY,           min_tch.MIN_TOUCH_COUNT - 1 AS TOUCH_COUNT, -- Assume that the TOUCH_COUNT when authorised is one less than the touch count when filled           o.AUTH_TIME AS MODIFY_TIME, -- Assume that the modify time is the auth time              o.AUTH_TIME,           'U'  AS [STATUS], -- Assume that at the AUTH_TIME, the Status is set to 'U'           o.TRAN_TYPE,           o.CUSIP,        o.LIMIT_TYPE,        o.LIMIT_VALUE,           t.EXECUTION_TIME,        t.RELEASE_VAR_USED    FROM VISTA_REPORTING.dbo.TRD_ORDERS o    --LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc    --ON o.ORD_NUM = oc.PM_ORD    LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE prim     ON o.ORD_NUM = prim.ORD_NUM    INNER JOIN #ords_only_seen_filled_min_tch min_tch     ON o.ORD_NUM = min_tch.ORD_NUM AND o.TOUCH_COUNT = min_tch.MIN_TOUCH_COUNT -- We want to filter out everything except for the  first touch count for the orders.    LEFT JOIN #trades t     ON o.ORD_NUM = t.ORD_NUM    WHERE prim.DEALING_DESK = 'Equity' -- Only consider Fixed Income orders - to guard against duplication caused by orders being flagged to multiple desks.      AND DATEDIFF(minute,o.AUTH_TIME, o.MODIFY_TIME) < 15  -- We only want to consider those orders that were authorised and then modified within 15 minutes.      AND o.ORD_GROUP IS NULL     --SELECT * FROM #trd_ord_times WHERE ORD_NUM IN (902775, 902875) ORDER BY ORD_NUM        -- For orders released outside of market open hours we don't care what order they were released in.    -- So first we create #holiday offset which will tell us if it's released on a weekend, bank holiday etc.    IF OBJECT_ID('tempdb..#holiday_offset', 'U') IS NOT NULL DROP TABLE #holiday_offset    SELECT --create a table by MULTI_FUND_ID to account for weekend and holiday offsets to rebased datetimes     o.ORD_NUM,     case      when o.COUNTRY in ('AE', 'EG', 'TL') then      case       when DATENAME(dw, MIN(t.EXECUTION_TIME)) = 'Thursday' then 3 --if the EXECUTION_TIME is on a Thursday, a 3 day offset may be necessary because the local market has weekends on Friday and Saturday.       when DATENAME(dw, MIN(t.EXECUTION_TIME)) = 'Friday' then 2        when DATENAME(dw, MIN(t.EXECUTION_TIME)) = 'Saturday' then 1       else 0      end      when ISNULL(o.COUNTRY, '') not in ('AE', 'EG', 'TL') then      case       when DATENAME(dw, MIN(t.EXECUTION_TIME)) = 'Friday' then 2 --if the EXECUTION_TIME is on a Friday a 2 day offset may be necessary        when DATENAME(dw, MIN(t.EXECUTION_TIME)) = 'Saturday' then 1        when DATENAME(dw, MIN(t.EXECUTION_TIME)) = 'Sunday' then 0       else 0      end      else 0     end as WEEKEND_OFFSET,     (SELECT COUNT(DISTINCT CLOSURE_DATES) --count number of local market and GB holidays between the EXECUTION_TIME AND TRD_AUTH_TIME        FROM VISTA_STAGING.dbo.HOLIDAYS         WHERE (CONVERT(DATE, CLOSURE_DATES, 103)        BETWEEN CONVERT(DATE, MIN(t.EXECUTION_TIME), 103)        AND CONVERT(DATE, DATEADD(day,1,MIN(t.EXECUTION_TIME)), 103))        AND (COUNTRY_CODE='GB' OR COUNTRY_CODE=o.COUNTRY)) AS HOLIDAY_OFFSET    INTO #holiday_offset    FROM VISTA_REPORTING.dbo.TRD_ORDERS o    LEFT JOIN #trd_ord_times as t on o.ORD_NUM = t.ORD_NUM    GROUP BY     o.ORD_NUM,     o.COUNTRY         -- Now we create (in a few steps) #gmt_open_close_fin which will tell us when the local market is open, rebased to UK time.     -- We can then compare the time part of release time to this to tell if an order was released before market open or after market close     IF OBJECT_ID('tempdb..#order_release_datetime_table', 'U') IS NOT NULL DROP TABLE #order_release_datetime_table     SELECT       t.ORD_NUM,      t.COUNTRY,      tz.GMTOFFSETMINS AS GMTOFFSET,      tz2.GMTOFFSETMINS AS UK_GMTOFFSET     INTO #order_release_datetime_table      FROM #trd_ord_times  as t     LEFT JOIN #tz_periods tz ON t.COUNTRY = tz.COUNTRY AND t.EXECUTION_TIME >= tz.PERIODSTART AND t.EXECUTION_TIME < tz.PERIOD_END     LEFT JOIN #tz_periods tz2 ON tz2.COUNTRY = 'GB' AND t.EXECUTION_TIME >= tz2.PERIODSTART AND t.EXECUTION_TIME < tz2.PERIOD_END -- Find the UK offset from GMT. THis is used for finding the difference between GMT and BST for UK daylight savings times.         IF OBJECT_ID('tempdb..#gmt_open_close', 'U') IS NOT NULL DROP TABLE #gmt_open_close     SELECT                --Create temporary table with all the global exchanges'      rd.ORD_NUM,              --opening and closing times converted to GMT      rd.GMTOFFSET,      er.min_open as local_open_time,      er.Max_close as local_close_time,      DATEADD(minute,-1*(ISNULL(GMTOFFSET,0)-ISNULL(UK_GMTOFFSET,0)),min_open) AS UK_open_time,      DATEADD(minute,-1*(ISNULL(GMTOFFSET,0)-ISNULL(UK_GMTOFFSET,0)),max_close) AS UK_close_time,      rd.COUNTRY     INTO #gmt_open_close     FROM #order_release_datetime_table as rd     LEFT JOIN (        SELECT          COUNTRY,          MIN(CONVERT(TIME,OPENTIME)) AS min_open,          MAX(CONVERT(TIME,CLOSETIME)) AS Max_close        FROM VISTA_REPORTING.dbo.EXCHANGE_REFERENCE         WHERE MARKET_TIMES = 1         GROUP BY COUNTRY       ) as er ON rd.COUNTRY = er.COUNTRY     GROUP BY      rd.ORD_NUM,      rd.COUNTRY,      rd.GMTOFFSET,      rd.UK_GMTOFFSET,      er.min_open,      er.Max_close         IF OBJECT_ID('tempdb..#gmt_open_close_fin', 'U') IS NOT NULL DROP TABLE #gmt_open_close_fin     SELECT      *,      (DATEPART(hour, UK_open_time) * 60) + (DATEPART(minute, UK_open_time) ) AS UK_open_time_minutes     INTO #gmt_open_close_fin     FROM #gmt_open_close        -- select top 100 * from #gmt_open_close_fin where local_open_time != UK_open_time or local_close_time != UK_close_time order by ORD_NUM        -- 2.b. Generate table of statuses with index columns    IF OBJECT_ID('tempdb..#statuses', 'U') IS NOT NULL DROP TABLE #statuses    SELECT         *,         ROW_NUMBER() OVER (PARTITION BY ORD_NUM ORDER BY TOUCH_COUNT) RowNum,         ROW_NUMBER() OVER (PARTITION BY ORD_NUM ORDER BY TOUCH_COUNT) -             ROW_NUMBER() OVER (PARTITION BY ORD_NUM, [STATUS] ORDER BY TOUCH_COUNT) AS [Group]    INTO #statuses    FROM            #trd_ord_times         --SELECT * FROM #statuses WHERE ORD_NUM = '1000076     ' ORDER BY TOUCH_COUNT    -- 2.c. Join statuses table to itself to find the start touch count and the end touch count of the order being in the same status.     --           This is done so that we can determine when an order moves into a status as well as when it moves out of this status     IF OBJECT_ID('tempdb..#status_groups', 'U') IS NOT NULL DROP TABLE #status_groups    SELECT            status1.ORD_NUM,           status1.AUTH_TIME,           status1.EXECUTION_TIME,        status1.RELEASE_VAR_USED,           status1.STATUS,           status1.TRAN_TYPE,           status1.CUSIP,        status1.LIMIT_TYPE,        status1.LIMIT_VALUE,        MIN(status1.TOUCH_COUNT) [START],        MAX(status2.TOUCH_COUNT) [END]     INTO #status_groups    FROM         #statuses status1    LEFT JOIN        #statuses status2         ON         status1.ORD_NUM = status2.ORD_NUM AND        status1.RowNum = status2.RowNum - 1    GROUP BY             status1.ORD_NUM,           status1.AUTH_TIME,           status1.EXECUTION_TIME,        status1.RELEASE_VAR_USED,           status1.STATUS,           status1.TRAN_TYPE,           status1.CUSIP,        status1.LIMIT_TYPE,        status1.LIMIT_VALUE,           status1.[Group]    --SELECT * FROM #status_groups        --2.d.i. For the first row of each order, we use the authorisation time as the start point so that we include this time    IF OBJECT_ID('tempdb..#First_Row', 'U') IS NOT NULL DROP TABLE #First_Row    SELECT            ORD_NUM,            MIN(START) AS [First_Row]     INTO #First_Row    FROM #status_groups     GROUP BY ORD_NUM            -- 2.d.ii. Find the modify times associated with each of these status changes    IF OBJECT_ID('tempdb..#status_times', 'U') IS NOT NULL DROP TABLE #status_times    SELECT DISTINCT           st.* ,           CASE                   WHEN fr.First_Row IS NOT NULL THEN st.AUTH_TIME -- For the first record of each order we use the start time as the authorisatio ntime so that we are considering this time period.                  ELSE trd1.MODIFY_TIME               END AS [Start_Time],           ISNULL(trd2.MODIFY_TIME,'9999-12-31') AS [End_Time] --If the order has not moved out of a status then set the end date to be end of time so that we don't do comparisons to NULLs    INTO #status_times    FROM #status_groups st    LEFT JOIN #trd_ord_times trd1    ON st.ORD_NUM = trd1.ORD_NUM AND st.START = trd1.TOUCH_COUNT    LEFT JOIN #trd_ord_times trd2    ON st.ORD_NUM = trd2.ORD_NUM AND st.[END] = trd2.TOUCH_COUNT    LEFT JOIN #First_Row fr    ON st.ORD_NUM = fr.ORD_NUM AND st.START = fr.First_Row    --SELECT * FROM #status_times WHERE ORD_NUM IN (1026931     , 902875) ORDER BY ORD_NUM, STATUS DESC        --2.e. Determine whether there is an exception.            IF OBJECT_ID('tempdb..#order_priority', 'U') IS NOT NULL DROP TABLE #order_priority    --2.e.i. Debt orders where the asset inst type is known     SELECT DISTINCT           t.ORD_NUM AS [Traded_Order],      t.RELEASE_VAR_USED AS [TRADED_ORDER_RELEASE_VAR_USED],              t.MULTI_FUND_ID AS Trade,              1 AS ORDER_PRIORITY_EXCEPTION ,              st.ORD_NUM AS [Prior_Order],        st.RELEASE_VAR_USED AS [PRIOR_ORDER_RELEASE_VAR_USED]    INTO #order_priority    FROM #trades t    LEFT JOIN #status_times st     ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    LEFT JOIN #holiday_offset as h1     ON h1.ORD_NUM = t.ORD_NUM    LEFT JOIN #holiday_offset as h2     ON h2.ORD_NUM = st.ORD_NUM    LEFT JOIN #gmt_open_close_fin as gmt1     ON gmt1.ORD_NUM = t.ORD_NUM    LEFT JOIN #gmt_open_close_fin as gmt2     ON gmt2.ORD_NUM = st.ORD_NUM    WHERE     -- Check that both trades were released to market within market open hours    -- 1. Not on a weekend, bank holiday etc    h1.HOLIDAY_OFFSET = 0 AND h1.WEEKEND_OFFSET = 0    -- 2. Not before local market open (rebased to UK time) or after market close    AND CAST(t.EXECUTION_TIME AS TIME) BETWEEN gmt1.UK_open_time and gmt1.UK_close_time    -- If they're within market open hours, we can check for release in the correct priority.    AND t.CUSIP = st.CUSIP    AND t.TRAN_TYPE = st.TRAN_TYPE    AND t.ORD_NUM <> st.ORD_NUM -- Do not want to join an order to itself    AND (     (t.AUTH_TIME > st.AUTH_TIME AND t.EXECUTION_TIME < st.EXECUTION_TIME) -- Order was authorised late and executed early     OR     (t.AUTH_TIME < st.AUTH_TIME AND t.EXECUTION_TIME > st.EXECUTION_TIME) -- Order was authorised early and executed late     )     AND t.ORD_GROUP IS  NULL -- Do not consider program trades    AND (t.LIMIT_TYPE=st.LIMIT_TYPE or (t.LIMIT_TYPE is NULL and st.LIMIT_TYPE is NULL))    AND (t.LIMIT_VALUE=st.LIMIT_VALUE or (t.LIMIT_VALUE is NULL and st.LIMIT_VALUE is NULL))    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.            IF OBJECT_ID('tempdb..#order_priority_concat', 'U') IS NOT NULL DROP TABLE #order_priority_concat    SELECT DISTINCT      Traded_Order,      MIN(Trade) AS Trade, -- If there are multiple Trades released/executed at the same time then choose one.      ORDER_PRIORITY_EXCEPTION,      STUFF((           SELECT DISTINCT ', ' + LTRIM(RTRIM(Prior_Order))           FROM #order_priority           WHERE (Traded_Order = Results.Traded_Order)            FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS Orders_Concat    INTO #order_priority_concat    FROM #order_priority Results    GROUP BY Traded_Order, ORDER_PRIORITY_EXCEPTION        --SELECT * FROM #order_priority_concat                          -- Use #order_priority_concat to populate FINAL_STATUS_UPDATE_TABLE           IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table           select distinct                  CONCAT(Traded_Order,'_14') AS ID,                  '1A1' AS STATUS,                  NULL AS FINAL_UPDATED_TIME           into #temp_status_table           from #order_priority_concat           where ORDER_PRIORITY_EXCEPTION = 1                  MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET       T.ID=T.ID,       T.STATUS=T.STATUS,       T.DEALING_DESK = 'Equity',       T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME,'Equity');         --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      NULL AS MULTI_FUND_ID,      ex.Traded_Order AS TRD_ORD,      NULL AS PM_ORD,      'Order Priority' AS Exception_Type,      CONCAT(Traded_Order,'_14') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'For Review' AS Status,      NULL AS ClientExecID,      'Equity' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      NULL AS DEALER,      '1A1' AS STATUS_ID,      trd_o.AUTH_TIME AS ORD_AUTH,      NULL AS TRADE_EXEC     INTO #temp_audit     FROM #order_priority_concat ex     LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o     ON ex.Traded_Order = trd_o.ORD_NUM     where ORDER_PRIORITY_EXCEPTION = 1          MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);             -- Append the exceptions to the list of TRD orders     IF OBJECT_ID('VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_EQ_TABLE', 'U') IS NULL               select distinct           t.ORD_NUM AS OP_ID,           t.ORD_NUM,           o.TRADE,        t.DEALING_DESK,           o.Orders_Concat AS Prior_Orders,    --  ***delete the below script once Order Priority has been confirmed***           --0 AS ORDER_PRIORITY_EXCEPTION,           --NULL AS CREATETIME    --  ********************************************************************               case                   when ORDER_PRIORITY_EXCEPTION is NULL then 0 else ORDER_PRIORITY_EXCEPTION           end as ORDER_PRIORITY_EXCEPTION,           case                  when ORDER_PRIORITY_EXCEPTION = 1 then GETDATE() else NULL --if exception has been raised create TIMESTAMP           end as CREATETIME        into VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_EQ_TABLE        from VISTA_REPORTING.dbo.TRD_ORDERS t           left join #order_priority_concat o on o.Traded_Order=t.ORD_NUM           where t.DEALING_DESK = 'Equity'             ELSE                IF OBJECT_ID('tempdb..#temp_op_table', 'U') IS NOT NULL DROP TABLE #temp_op_table               select distinct           t.ORD_NUM AS OP_ID,           t.ORD_NUM,           o.Trade,           t.DEALING_DESK,           o.Orders_Concat AS Prior_Orders,    --  ***delete the below script once Order Priority has been confirmed***           --0 AS ORDER_PRIORITY_EXCEPTION,           --NULL AS CREATETIME    --  ********************************************************************               case                   when ORDER_PRIORITY_EXCEPTION is NULL then 0 else ORDER_PRIORITY_EXCEPTION           end as ORDER_PRIORITY_EXCEPTION,           case                  when ORDER_PRIORITY_EXCEPTION = 1 then GETDATE() else NULL --if exception has been raised create TIMESTAMP           end as CREATETIME           into #temp_op_table           from VISTA_REPORTING.dbo.TRD_ORDERS t           left join #order_priority_concat o on o.Traded_Order=t.ORD_NUM           where t.DEALING_DESK = 'Equity'                MERGE VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_EQ_TABLE AS T     USING #temp_op_table AS S     ON (T.OP_ID=S.OP_ID )     WHEN MATCHED      THEN       UPDATE SET         T.DEALING_DESK = S.DEALING_DESK,       T.ORDER_PRIORITY_EXCEPTION = CASE WHEN S.ORDER_PRIORITY_EXCEPTION > T.ORDER_PRIORITY_EXCEPTION THEN S.ORDER_PRIORITY_EXCEPTION ELSE T.ORDER_PRIORITY_EXCEPTION END,       T.CREATETIME = CASE WHEN S.ORDER_PRIORITY_EXCEPTION > T.ORDER_PRIORITY_EXCEPTION THEN S.CREATETIME ELSE T.CREATETIME END,       T.Trade = CASE WHEN S.ORDER_PRIORITY_EXCEPTION > T.ORDER_PRIORITY_EXCEPTION THEN S.Trade ELSE T.Trade END,       T.Prior_Orders = CASE WHEN S.ORDER_PRIORITY_EXCEPTION > T.ORDER_PRIORITY_EXCEPTION THEN S.Prior_Orders ELSE T.Prior_Orders END     WHEN NOT MATCHED       THEN INSERT (OP_ID, Ord_Num, Trade, Prior_Orders, DEALING_DESK, ORDER_PRIORITY_EXCEPTION, CREATETIME)        VALUES (S.OP_ID, S.ORD_NUM, S.Trade, S.Prior_Orders, S.DEALING_DESK, S.ORDER_PRIORITY_EXCEPTION, S.CREATETIME);          IF OBJECT_ID('tempdb..#cancelled_time', 'U') IS NOT NULL DROP TABLE #cancelled_time     IF OBJECT_ID('tempdb..#max_auth_time', 'U') IS NOT NULL DROP TABLE #max_auth_time     IF OBJECT_ID('tempdb..#expired_time', 'U') IS NOT NULL DROP TABLE #expired_time     IF OBJECT_ID('tempdb..#orders', 'U') IS NOT NULL DROP TABLE #orders     IF OBJECT_ID('tempdb..#authorised_time', 'U') IS NOT NULL DROP TABLE #authorised_time     IF OBJECT_ID('tempdb..#order_priority', 'U') IS NOT NULL DROP TABLE #order_priority     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     IF OBJECT_ID('tempdb..#temp_op_table', 'U') IS NOT NULL DROP TABLE #temp_op_table        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_14_ORDER_PRIORITY_FI  CreateDate: 2025-06-26 18:02:03.967  ModifyDate: 2025-06-26 18:02:03.967  --- DEFINITION START ---  -- =============================================    -- Author:  <da Costa, David>    -- Create date: <20/10/2017>    -- Description:     -- <Compare the order of APPROVED_DATETIME and     -- RELEASED_DATETIME. If sequential order of both     -- rankings do not match raise an exception>    -- =============================================        -- ***************VERSION CONTROL***************    -- 11/12/2017 - DDC: Changes made to ensure that script     -- only ever updates existing records always ensuring     -- the highest level exception is reported and     -- inserts new ones if no exception has been raised.        -- 2018-03-21 - WH: Removed reference to BUY_SELL_FLAG - used TRAN_TYPE instead    -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.    -- *********************************************        CREATE PROCEDURE [dbo].[VG_14_ORDER_PRIORITY_FI]            AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        --0. Determine the first trade for each order (using the TRD_AUTH_TIME)    IF OBJECT_ID('tempdb..#first_trade', 'U') IS NOT NULL DROP TABLE #first_trade    SELECT      ORD_NUM,     MIN(TRD_AUTH_TIME) AS MIN_AUTH_TIME    INTO #first_trade    FROM VISTA_REPORTING.dbo.TRADES    GROUP BY     ORD_NUM            IF OBJECT_ID('tempdb..#tmp_cpty', 'U') IS NOT NULL DROP TABLE #tmp_cpty    SELECT DISTINCT      t.ORD_NUM,      t.MULTI_FUND_ID,      t.TRD_COUNTERPARTY,      COALESCE(NULLIF(t.TRD_YIELD, 0), t.TRD_PRICING_SPREAD, TRD_PRICE) AS TRADE_VALUE     INTO #tmp_cpty    FROM VISTA_REPORTING.dbo.TRADES t    LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID=t.MULTI_FUND_ID     WHERE pr.DEALING_DESK='Fixed Income'             --1. For all trades, gather details on the trader order associated with this trade    IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades    SELECT  DISTINCT           t.MULTI_FUND_ID,           t.EXECUTION_TIME,        o.AUTH_TIME,           o.ORD_NUM,           o.TRAN_TYPE,            o.CUSIP,           o.SETTLE_DATE,        o.SEC_DESC1,        o.SM_SEC_GROUP,        o.SM_SEC_TYPE,        i2.STRIKE,        prim.CURRENCY,        prim.ASSET_INST_TYPE,        prim.ORDER_INST_TYPE,        prim.INST_TYPE,        prim.BASKET_CUSIP,        prim.MATURITY,        prim.UNDERLYING_CUSIP,        prim.MIP_SEC_ID,        prim.TRD_CURRENCY,        prim.CUSIP_SWAP_AMORT,        t.TRD_COUNTERPARTY,        COALESCE(NULLIF(t.TRD_YIELD, 0), t.TRD_PRICING_SPREAD, TRD_PRICE) AS TRADE_VALUE     INTO #trades    FROM VISTA_staging.dbo.TRADES t    INNER JOIN #first_trade f_t    ON t.ORD_NUM = f_t.ORD_NUM AND t.TRD_AUTH_TIME = f_t.MIN_AUTH_TIME    LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS o    ON t.ORD_NUM = o.ORD_NUM    OUTER APPLY (SELECT TOP 1 i.STRIKE        FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=coalesce(t.CUSIP, o.CUSIP) AND i.DATE<=CONVERT(DATE, coalesce(t.EXECUTION_TIME, o.AUTH_TIME)))         ORDER BY i.DATE DESC) as i2    --LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc    --ON o.ORD_NUM = oc.PM_ORD    LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE prim    ON t.MULTI_FUND_ID = prim.MULTI_FUND_ID    WHERE prim.FUTURE_ROLLS <> 1 --Do not consider for future rollovers     AND prim.[1615_DEALING] <> 1     AND prim.TWEB_CLOSE_DEALING <> 1     AND prim.INTERFUND_TRANSFER <> 1     AND prim.PRIMARY_MARKET <> 1     AND prim.DEALING_DESK = 'Fixed Income'     AND ISNULL(t.TRD_STATUS,'') <> 'C' -- Do not consider cancelled trades         --2. For all trd orders, create a list of the start time and end time that it was in this status    -- 2.a.i. Add in a dummy record for each Authorisation time for instances where the only     --  records for an order that we have are in status 'F'.    -- This is done because it is assumed that these orders were authorised and then filled within    --  a 15 minute timespan and Vista is blind to these events.    IF OBJECT_ID('tempdb..#ords_only_seen_filled', 'U') IS NOT NULL DROP TABLE #ords_only_seen_filled    SELECT DISTINCT     ORD_NUM     INTO #ords_only_seen_filled    FROM VISTA_REPORTING.dbo.ORDERS    GROUP BY     ORD_NUM    HAVING     MAX(CASE WHEN STATUS IN ('F','C') THEN 0 ELSE 1 END) = 0  -- We only want to look at orders that we only ever see in a Filled status        --2.a.ii. For orders that we only ever see fully filled, find the min touch count.    IF OBJECT_ID('tempdb..#ords_only_seen_filled_min_tch', 'U') IS NOT NULL DROP TABLE #ords_only_seen_filled_min_tch    SELECT      o.ORD_NUM,     MIN(o.TOUCH_COUNT) AS MIN_TOUCH_COUNT    INTO #ords_only_seen_filled_min_tch    FROM VISTA_REPORTING.dbo.ORDERS o    INNER JOIN     #ords_only_seen_filled min_tch    ON o.ORD_NUM = min_tch.ORD_NUM    GROUP BY     o.ORD_NUM        -- 2.a.iii. Get distinct list of TRD_ORDER touch count and modify time - this is to remove duplications caused because this table is at the client execution level    IF OBJECT_ID('tempdb..#trd_ord_times', 'U') IS NOT NULL DROP TABLE #trd_ord_times    SELECT DISTINCT           o.ORD_NUM,           o.TOUCH_COUNT,           o.MODIFY_TIME,        o.AUTH_TIME,        f_t.MIN_AUTH_TIME,           o.[STATUS],           o.TRAN_TYPE,           o.CUSIP,           o.SETTLE_DATE,        o.SEC_DESC1,        o.SM_SEC_GROUP,        o.SM_SEC_TYPE,        i2.STRIKE,        prim.UNDERLYING_CUSIP,        prim.CURRENCY,        prim.ASSET_INST_TYPE,        prim.ORDER_INST_TYPE,        prim.INST_TYPE,        prim.Trade_TRAN_TYPE,        prim.Order_CUSIP,        prim.MIP_SEC_ID,        prim.MATURITY,        prim.BASKET_CUSIP,        prim.DEBT_DERIV,        prim.CUSIP_SWAP_AMORT    INTO #trd_ord_times    FROM VISTA_REPORTING.dbo.TRD_ORDERS o    OUTER APPLY (SELECT TOP 1 i.STRIKE        FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE i.CUSIP=o.CUSIP AND i.DATE<=CONVERT(DATE, o.AUTH_TIME)        ORDER BY i.DATE DESC) as i2    LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE prim ON o.ORD_NUM = prim.ORD_NUM    LEFT JOIN #first_trade f_t ON o.ORD_NUM = f_t.ORD_NUM    WHERE prim.PRIMARY_MARKET_ORDER_LEVEL <> 1        UNION    -- 2.a.iv. Add in a dummy record for each Authorisation time for instances where the only     --  records for an order that we have are in status 'F'.    -- This is done because it is assumed that these orders were authorised and then filled within    --  a 15 minute timespan and Vista is blind to these events.     SELECT DISTINCT           o.ORD_NUM,           min_tch.MIN_TOUCH_COUNT - 1 AS TOUCH_COUNT, -- Assume that the TOUCH_COUNT when authorised is one less than the touch count when filled           o.AUTH_TIME AS MODIFY_TIME, -- Assume that the modify time is the auth time        o.AUTH_TIME,        f_t.MIN_AUTH_TIME,           'U'  AS [STATUS], -- Assume that at the AUTH_TIME, the Status is set to 'U'           o.TRAN_TYPE,           o.CUSIP,           o.SETTLE_DATE,        o.SEC_DESC1,        o.SM_SEC_GROUP,        o.SM_SEC_TYPE,        i2.STRIKE,        prim.UNDERLYING_CUSIP,        prim.CURRENCY,        prim.ASSET_INST_TYPE,        prim.ORDER_INST_TYPE,        prim.INST_TYPE,        prim.Trade_TRAN_TYPE,        prim.Order_CUSIP,        prim.MIP_SEC_ID,        prim.MATURITY,        prim.BASKET_CUSIP,        prim.DEBT_DERIV,        prim.CUSIP_SWAP_AMORT    FROM VISTA_REPORTING.dbo.TRD_ORDERS o    OUTER APPLY (SELECT TOP 1 i.STRIKE        FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE i.CUSIP=o.CUSIP AND i.DATE<=CONVERT(DATE, o.AUTH_TIME)        ORDER BY i.DATE DESC) as i2    LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE prim ON o.ORD_NUM = prim.ORD_NUM    INNER JOIN #ords_only_seen_filled_min_tch min_tch ON o.ORD_NUM = min_tch.ORD_NUM AND o.TOUCH_COUNT = min_tch.MIN_TOUCH_COUNT -- We want to filter out everything except for the  first touch count for the orders.    LEFT JOIN #first_trade f_t ON o.ORD_NUM = f_t.ORD_NUM    WHERE prim.PRIMARY_MARKET_ORDER_LEVEL <> 1    AND prim.DEALING_DESK = 'Fixed Income' -- Only consider Fixed Income orders - to guard against duplication caused by orders being flagged to multiple desks.    AND DATEDIFF(minute,o.AUTH_TIME, o.MODIFY_TIME) < 15  -- We only want to consider those orders that were authorised and then modified within 15 minutes.    --SELECT * FROM #trd_ord_times WHERE ORD_NUM IN (902775, 902875) ORDER BY ORD_NUM        -- 2.b. Generate table of statuses with index columns    IF OBJECT_ID('tempdb..#statuses', 'U') IS NOT NULL DROP TABLE #statuses    SELECT         *,         ROW_NUMBER() OVER (PARTITION BY ORD_NUM ORDER BY TOUCH_COUNT) RowNum,         ROW_NUMBER() OVER (PARTITION BY ORD_NUM ORDER BY TOUCH_COUNT) -             ROW_NUMBER() OVER (PARTITION BY ORD_NUM, [STATUS] ORDER BY TOUCH_COUNT) AS [Group]    INTO #statuses    FROM            #trd_ord_times     --SELECT * FROM #statuses WHERE ORD_NUM = '1000076     ' ORDER BY TOUCH_COUNT    -- 2.c. Join statuses table to itself to find the start touch count and the end touch count of the order being in the same status.     --           This is done so that we can determine when an order moves into a status as well as when it moves out of this status     IF OBJECT_ID('tempdb..#status_groups', 'U') IS NOT NULL DROP TABLE #status_groups    SELECT      status1.ORD_NUM,     status1.AUTH_TIME,     status1.MIN_AUTH_TIME,     status1.STATUS,     status1.TRAN_TYPE,     status1.CUSIP,     status1.SETTLE_DATE,     status1.SEC_DESC1,     status1.SM_SEC_GROUP,     status1.SM_SEC_TYPE,     status1.CURRENCY,     status1.ASSET_INST_TYPE,     status1.ORDER_INST_TYPE,     status1.INST_TYPE,     status1.Trade_TRAN_TYPE,     status1.Order_CUSIP,     status1.UNDERLYING_CUSIP,     status1.MIP_SEC_ID,     status1.MATURITY,     status1.BASKET_CUSIP,     status1.DEBT_DERIV,     status1.STRIKE,     status1.CUSIP_SWAP_AMORT,        MIN(status1.TOUCH_COUNT) [START],        MAX(status2.TOUCH_COUNT) [END]     INTO #status_groups    FROM         #statuses status1    LEFT JOIN        #statuses status2         ON         status1.ORD_NUM = status2.ORD_NUM AND        status1.RowNum = status2.RowNum - 1    GROUP BY       status1.ORD_NUM,     status1.AUTH_TIME,     status1.MIN_AUTH_TIME,     status1.STATUS,     status1.TRAN_TYPE,     status1.CUSIP,     status1.SETTLE_DATE,     status1.SEC_DESC1,     status1.SM_SEC_GROUP,     status1.SM_SEC_TYPE,     status1.CURRENCY,     status1.ASSET_INST_TYPE,     status1.ORDER_INST_TYPE,     status1.INST_TYPE,     status1.Trade_TRAN_TYPE,     status1.Order_CUSIP,     status1.UNDERLYING_CUSIP,     status1.MIP_SEC_ID,     status1.MATURITY,     status1.BASKET_CUSIP,     status1.DEBT_DERIV,     status1.STRIKE,     status1.CUSIP_SWAP_AMORT,     status1.[Group]    --SELECT * FROM #status_groups        --2.d.i. For the first row of each order, we use the authorisation time as the start point so that we include this time    IF OBJECT_ID('tempdb..#First_Row', 'U') IS NOT NULL DROP TABLE #First_Row    SELECT            ORD_NUM,            MIN(START) AS [First_Row]     INTO #First_Row    FROM #status_groups     GROUP BY ORD_NUM            -- 2.d. Find the modify times associated with each of these status changes    IF OBJECT_ID('tempdb..#pre_status_times', 'U') IS NOT NULL DROP TABLE #pre_status_times    SELECT            st.* ,           CASE                   WHEN fr.First_Row IS NOT NULL THEN st.AUTH_TIME -- For the first record of each order we use the start time as the authorisatio ntime so that we are considering this time period.                  ELSE trd1.MODIFY_TIME               END AS [Start_Time],           ISNULL(trd2.MODIFY_TIME,'9999-12-31') AS [End_Time] --If the order has not moved out of a status then set the end date to be end of time so that we don't do comparisons to NULLs    INTO #pre_status_times    FROM #status_groups st    LEFT JOIN #trd_ord_times trd1    ON st.ORD_NUM = trd1.ORD_NUM AND st.START = trd1.TOUCH_COUNT    LEFT JOIN #trd_ord_times trd2    ON st.ORD_NUM = trd2.ORD_NUM AND st.[END] = trd2.TOUCH_COUNT    LEFT JOIN #First_Row fr    ON st.ORD_NUM = fr.ORD_NUM AND st.START = fr.First_Row    --SELECT * FROM #status_times WHERE ORD_NUM IN (902775, 902875) ORDER BY ORD_NUM, STATUS DESC            IF OBJECT_ID('tempdb..#status_times', 'U') IS NOT NULL DROP TABLE #status_times    SELECT      st.*,     tc.TRADE_VALUE,     tc.TRD_COUNTERPARTY    INTO #status_times    FROM #pre_status_times st    LEFT JOIN #tmp_cpty tc ON tc.ORD_NUM = st.ORD_NUM            --2.e. Determine whether there is an exception.      IF OBJECT_ID('tempdb..#order_priority', 'U') IS NOT NULL DROP TABLE #order_priority    --2.e.i. Debt orders where the asset inst type is known     SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS Trade,        1 AS ORDER_PRIORITY_EXCEPTION ,        st.ORD_NUM AS [Prior_Order]    INTO #order_priority    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM    AND st.ASSET_INST_TYPE <> 'FIDD OTHER' -- We do not know the asset inst type    AND st.DEBT_DERIV = 'DEBT'    AND t.CUSIP = st.CUSIP    AND t.TRAN_TYPE = st.TRAN_TYPE    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active    AND t.AUTH_TIME > st.AUTH_TIME    AND t.EXECUTION_TIME < st.MIN_AUTH_TIME    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --2.e.ii. Debt orders where the asset inst type is unknown    SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS Trade,        1 AS ORDER_PRIORITY_EXCEPTION ,        st.ORD_NUM AS [Prior_Order]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM    AND st.ORDER_INST_TYPE IN ('CORP','ABS','CMBS','MBS','ARM','CMO','SSA','GOV','IGOV','GOVBIL')    AND st.ASSET_INST_TYPE = 'FIDD OTHER' -- We do not know the asset inst type    AND t.CUSIP = st.CUSIP    AND t.TRAN_TYPE = st.TRAN_TYPE    AND t.ORDER_INST_TYPE = st.ORDER_INST_TYPE    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active     AND t.AUTH_TIME > st.AUTH_TIME    AND t.EXECUTION_TIME < st.MIN_AUTH_TIME    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --2.e.iii. Futures/ETD orders where the asset inst type is known     SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS Trade,        1 AS ORDER_PRIORITY_EXCEPTION ,        st.ORD_NUM AS [Prior_Order]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM    AND st.ASSET_INST_TYPE IN ('IRFUT','OPTFUT')    AND st.ASSET_INST_TYPE <> 'FIDD OTHER'    AND t.CUSIP = st.CUSIP    AND t.TRAN_TYPE = st.TRAN_TYPE    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active     AND t.AUTH_TIME > st.AUTH_TIME    AND t.EXECUTION_TIME < st.MIN_AUTH_TIME    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --2.e.iii. Futures/ETD orders where the asset inst type is known     SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS Trade,        1 AS ORDER_PRIORITY_EXCEPTION ,        st.ORD_NUM AS [Prior_Order]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM    AND st.ASSET_INST_TYPE = 'BNDFUT'    AND st.ASSET_INST_TYPE <> 'FIDD OTHER'    AND t.CUSIP = st.CUSIP    AND t.TRAN_TYPE = st.TRAN_TYPE    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active     AND t.AUTH_TIME > st.AUTH_TIME    AND t.EXECUTION_TIME < st.MIN_AUTH_TIME    AND (t.TRD_COUNTERPARTY != st.TRD_COUNTERPARTY     OR t.TRADE_VALUE != st.TRADE_VALUE)    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --2.e.iv. Futures/ETD orders where the asset inst type is unknown     SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS Trade,        1 AS ORDER_PRIORITY_EXCEPTION ,        st.ORD_NUM AS [Prior_Order]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM    AND st.ORDER_INST_TYPE = 'ETD'    AND st.ASSET_INST_TYPE = 'FIDD OTHER'    AND t.CUSIP = st.CUSIP    AND t.TRAN_TYPE = st.TRAN_TYPE    AND t.ORDER_INST_TYPE = st.ORDER_INST_TYPE    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active     AND t.AUTH_TIME > st.AUTH_TIME    AND t.EXECUTION_TIME < st.MIN_AUTH_TIME    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --2.e.v. ICDS orders where the asset inst type is known     SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS Trade,        1 AS ORDER_PRIORITY_EXCEPTION ,        st.ORD_NUM AS [Prior_Order]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM    AND st.ASSET_INST_TYPE = 'ICDS'    AND st.ASSET_INST_TYPE <> 'FIDD OTHER'    AND t.BASKET_CUSIP = st.BASKET_CUSIP    AND t.MATURITY = st.MATURITY    AND t.TRAN_TYPE = st.TRAN_TYPE    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active     AND t.AUTH_TIME > st.AUTH_TIME    AND t.EXECUTION_TIME < st.MIN_AUTH_TIME    AND (t.TRD_COUNTERPARTY != st.TRD_COUNTERPARTY     OR t.TRADE_VALUE != st.TRADE_VALUE)    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --2.e.vi. ICDS orders where the asset inst type is unknown     SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS Trade,        1 AS ORDER_PRIORITY_EXCEPTION ,        st.ORD_NUM AS [Prior_Order]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM    AND st.ORDER_INST_TYPE = 'ICDS'    AND st.ASSET_INST_TYPE = 'FIDD OTHER'    AND t.ORDER_INST_TYPE = st.ORDER_INST_TYPE    AND t.TRAN_TYPE = st.TRAN_TYPE    AND t.CURRENCY = st.CURRENCY    AND t.MATURITY = st.MATURITY    AND t.SEC_DESC1 = st.SEC_DESC1    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active     AND t.AUTH_TIME > st.AUTH_TIME    AND t.EXECUTION_TIME < st.MIN_AUTH_TIME    AND (t.TRD_COUNTERPARTY != st.TRD_COUNTERPARTY     OR t.TRADE_VALUE != st.TRADE_VALUE)    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --2.e.vii. SCDS orders where the asset inst type is known     SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS Trade,        1 AS ORDER_PRIORITY_EXCEPTION ,        st.ORD_NUM AS [Prior_Order]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM    AND st.ASSET_INST_TYPE = 'SCDS'    AND st.ASSET_INST_TYPE <> 'FIDD OTHER'    AND t.TRAN_TYPE = st.TRAN_TYPE    AND t.MIP_SEC_ID = st.MIP_SEC_ID -- Red code    AND t.MATURITY = st.MATURITY    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active     AND t.AUTH_TIME > st.AUTH_TIME    AND t.EXECUTION_TIME < st.MIN_AUTH_TIME    AND (t.TRD_COUNTERPARTY != st.TRD_COUNTERPARTY     OR t.TRADE_VALUE != st.TRADE_VALUE)    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --2.e.viii. SCDS orders where the asset inst type is unknown     SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS Trade,        1 AS ORDER_PRIORITY_EXCEPTION ,        st.ORD_NUM AS [Prior_Order]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM    AND st.ORDER_INST_TYPE = 'SCDS'    AND st.ASSET_INST_TYPE = 'FIDD OTHER'    AND t.ORDER_INST_TYPE = st.ORDER_INST_TYPE    AND t.TRAN_TYPE = st.TRAN_TYPE    AND t.CURRENCY = st.CURRENCY    AND t.MATURITY = st.MATURITY    AND t.SEC_DESC1 = st.SEC_DESC1    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active     AND t.AUTH_TIME > st.AUTH_TIME    AND t.EXECUTION_TIME < st.MIN_AUTH_TIME    AND (t.TRD_COUNTERPARTY != st.TRD_COUNTERPARTY     OR t.TRADE_VALUE != st.TRADE_VALUE)    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --2.e.ix. SWAPS where the asset inst type is known     SELECT                t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS Trade,        1 AS ORDER_PRIORITY_EXCEPTION ,        st.ORD_NUM AS [Prior_Order]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM    AND st.ASSET_INST_TYPE IN ('OIS', 'IRS', 'BASIS', 'IFS', 'ZCS', 'CCS', 'ASWP', 'CASWP')    AND st.ASSET_INST_TYPE <> 'FIDD OTHER'    AND t.TRAN_TYPE = st.TRAN_TYPE    AND t.ASSET_INST_TYPE = st.ASSET_INST_TYPE    AND t.TRD_CURRENCY = st.CURRENCY    AND t.MATURITY = st.MATURITY    AND COALESCE(t.UNDERLYING_CUSIP, t.CUSIP_SWAP_AMORT,'-1')  = COALESCE(st.UNDERLYING_CUSIP, st.CUSIP_SWAP_AMORT,'-1')    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active     AND t.AUTH_TIME > st.AUTH_TIME    AND t.EXECUTION_TIME < st.MIN_AUTH_TIME    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --2.e.x. SWAPS where the asset inst type is unknown     SELECT                   t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS Trade,        1 AS ORDER_PRIORITY_EXCEPTION ,        st.ORD_NUM AS [Prior_Order]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM    AND st.ORDER_INST_TYPE IN ('ASWP','SWAP','CCS')    AND st.ASSET_INST_TYPE = 'FIDD OTHER'    AND t.ORDER_INST_TYPE = st.ORDER_INST_TYPE    AND t.TRAN_TYPE = st.TRAN_TYPE    AND t.TRD_CURRENCY = st.CURRENCY    AND t.SM_SEC_GROUP = st.SM_SEC_GROUP    AND t.SM_SEC_TYPE = st.SM_SEC_TYPE    AND t.MATURITY = st.MATURITY    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active     AND t.AUTH_TIME > st.AUTH_TIME    AND t.EXECUTION_TIME < st.MIN_AUTH_TIME    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --2.e.xi. SWAPTION Orders    SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS [Trade],        1 AS ORDER_PRIORITY_EXCEPTION ,        st.ORD_NUM AS [Prior_Order]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM    AND t.CUSIP = st.CUSIP    AND t.TRAN_TYPE = st.TRAN_TYPE    AND t.MATURITY = st.MATURITY    AND t.INST_TYPE = st.INST_TYPE    AND st.INST_TYPE = 'CDSWAPTION'    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active    AND t.AUTH_TIME > st.AUTH_TIME    AND t.EXECUTION_TIME < st.MIN_AUTH_TIME    GROUP BY st.ORD_NUM,  t.ORD_NUM, t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        UNION        --2.e.xii. TRS Orders    SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS [Trade],        1 AS ORDER_PRIORITY_EXCEPTION ,        st.ORD_NUM AS [Prior_Order]    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM    AND t.CUSIP = st.CUSIP    AND t.TRAN_TYPE = st.TRAN_TYPE    AND t.MATURITY = st.MATURITY    AND t.INST_TYPE = st.INST_TYPE    AND t.STRIKE = st.STRIKE    AND st.INST_TYPE in ('TRS', 'FI TRS')    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active    AND t.AUTH_TIME > st.AUTH_TIME    AND t.EXECUTION_TIME < st.MIN_AUTH_TIME    GROUP BY st.ORD_NUM,  t.ORD_NUM, t.MULTI_FUND_ID            IF OBJECT_ID('tempdb..#order_priority_concat', 'U') IS NOT NULL DROP TABLE #order_priority_concat    SELECT DISTINCT      Traded_Order,      Trade,      ORDER_PRIORITY_EXCEPTION,      STUFF((     SELECT DISTINCT ', ' + LTRIM(RTRIM(Prior_Order))     FROM #order_priority     WHERE (Traded_Order = Results.Traded_Order)      FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS Orders_Concat    INTO #order_priority_concat    FROM #order_priority Results    GROUP BY Traded_Order, ORDER_PRIORITY_EXCEPTION, Trade            -- Use #order_priority_concat to populate FINAL_STATUS_UPDATE_TABLE    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    select distinct     CONCAT(Traded_Order,'_14') AS ID,     '1A2' AS STATUS,     NULL AS FINAL_UPDATED_TIME    into #temp_status_table    from #order_priority_concat    where ORDER_PRIORITY_EXCEPTION = 1         MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'Fixed Income',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME,'Fixed Income');        --Add record into the AUDIT_TABLE    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    SELECT DISTINCT     NULL AS MULTI_FUND_ID,     ex.Traded_Order AS TRD_ORD,     NULL AS PM_ORD,     'Order Priority' AS Exception_Type,     CONCAT(Traded_Order,'_14') AS ID,     NULL AS REASON,     NULL AS COMMENT,     'With Reviewer' AS Status,     NULL AS ClientExecID,     'Fixed Income' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     NULL AS DEALER,     '1A2' AS STATUS_ID,     trd_o.AUTH_TIME AS ORD_AUTH,     NULL AS TRADE_EXEC    INTO #temp_audit    FROM #order_priority_concat ex    LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o    ON ex.Traded_Order = trd_o.ORD_NUM    where ORDER_PRIORITY_EXCEPTION = 1         MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T    USING #temp_audit AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);              -- Append the exceptions to the list of TRD orders    IF OBJECT_ID('VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_FI_TABLE', 'U') IS NULL          select distinct    t.ORD_NUM AS OP_ID,    t.ORD_NUM,    o.Trade,    t.DEALING_DESK,    o.Orders_Concat AS Prior_Orders,    --  ***delete the below script once Order Priority has been confirmed***    --0 AS ORDER_PRIORITY_EXCEPTION,    --NULL AS CREATETIME    --  ********************************************************************        case      when ORDER_PRIORITY_EXCEPTION is NULL then 0 else ORDER_PRIORITY_EXCEPTION    end as ORDER_PRIORITY_EXCEPTION,    case     when ORDER_PRIORITY_EXCEPTION = 1 then GETDATE() else NULL --if exception has been raised create TIMESTAMP    end as CREATETIME    into VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_FI_TABLE    from VISTA_REPORTING.dbo.TRD_ORDERS t    left join #order_priority_concat o on o.Traded_Order=t.ORD_NUM    where t.DEALING_DESK = 'Fixed Income'         ELSE         IF OBJECT_ID('tempdb..#temp_op_table', 'U') IS NOT NULL DROP TABLE #temp_op_table        select distinct    t.ORD_NUM AS OP_ID,    t.ORD_NUM,    MIN(o.Trade) AS Trade,    t.DEALING_DESK,    o.Orders_Concat,    --  ***delete the below script once Order Priority has been confirmed***    --0 AS ORDER_PRIORITY_EXCEPTION,    --NULL AS CREATETIME    --  ********************************************************************        case      when ORDER_PRIORITY_EXCEPTION is NULL then 0 else ORDER_PRIORITY_EXCEPTION    end as ORDER_PRIORITY_EXCEPTION,    case     when ORDER_PRIORITY_EXCEPTION = 1 then GETDATE() else NULL --if exception has been raised create TIMESTAMP    end as CREATETIME    into #temp_op_table    from VISTA_REPORTING.dbo.TRD_ORDERS t    left join #order_priority_concat o on o.Traded_Order=t.ORD_NUM    where t.DEALING_DESK = 'Fixed Income'    GROUP BY     t.ORD_NUM,     t.ORD_NUM,     t.DEALING_DESK,     o.Orders_Concat,     case       when ORDER_PRIORITY_EXCEPTION is NULL then 0 else ORDER_PRIORITY_EXCEPTION     end,     case      when ORDER_PRIORITY_EXCEPTION = 1 then GETDATE() else NULL --if exception has been raised create TIMESTAMP     end        MERGE VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_FI_TABLE AS T    USING #temp_op_table AS S    ON (T.OP_ID=S.OP_ID )    WHEN MATCHED     THEN      UPDATE SET        T.DEALING_DESK = S.DEALING_DESK,      T.ORDER_PRIORITY_EXCEPTION = CASE WHEN S.ORDER_PRIORITY_EXCEPTION > T.ORDER_PRIORITY_EXCEPTION THEN S.ORDER_PRIORITY_EXCEPTION ELSE T.ORDER_PRIORITY_EXCEPTION END,      T.Trade = CASE WHEN S.ORDER_PRIORITY_EXCEPTION > T.ORDER_PRIORITY_EXCEPTION THEN S.Trade ELSE T.Trade END,      T.Prior_Orders = CASE WHEN S.ORDER_PRIORITY_EXCEPTION > T.ORDER_PRIORITY_EXCEPTION THEN S.Orders_Concat ELSE T.Prior_Orders END,      T.CREATETIME = CASE WHEN S.ORDER_PRIORITY_EXCEPTION > T.ORDER_PRIORITY_EXCEPTION THEN S.CREATETIME ELSE T.CREATETIME END    WHEN NOT MATCHED      THEN INSERT (OP_ID, Ord_Num, Trade, Prior_Orders, DEALING_DESK, ORDER_PRIORITY_EXCEPTION, CREATETIME)       VALUES (S.OP_ID, S.ORD_NUM, S.Trade, S.Orders_Concat, S.DEALING_DESK, S.ORDER_PRIORITY_EXCEPTION, S.CREATETIME);        IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades    IF OBJECT_ID('tempdb..#ords_only_seen_filled', 'U') IS NOT NULL DROP TABLE #ords_only_seen_filled    IF OBJECT_ID('tempdb..#ords_only_seen_filled_min_tch', 'U') IS NOT NULL DROP TABLE #ords_only_seen_filled_min_tch    IF OBJECT_ID('tempdb..#trd_ord_times', 'U') IS NOT NULL DROP TABLE #trd_ord_times    IF OBJECT_ID('tempdb..#statuses', 'U') IS NOT NULL DROP TABLE #statuses    IF OBJECT_ID('tempdb..#status_groups', 'U') IS NOT NULL DROP TABLE #status_groups    IF OBJECT_ID('tempdb..#status_times', 'U') IS NOT NULL DROP TABLE #status_times    IF OBJECT_ID('tempdb..#order_priority', 'U') IS NOT NULL DROP TABLE #order_priority    IF OBJECT_ID('tempdb..#order_priority_concat', 'U') IS NOT NULL DROP TABLE #order_priority_concat    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    IF OBJECT_ID('tempdb..#temp_op_table', 'U') IS NOT NULL DROP TABLE #temp_op_table        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_14_ORDER_PRIORITY_LL  CreateDate: 2025-06-26 18:01:53.597  ModifyDate: 2025-06-26 18:01:53.597  --- DEFINITION START ---  -- =============================================    -- Author:  <Chandarana, Sohini>    -- Create date: <04/23/2018>    -- Description:     -- <Compare the order of APPROVED_DATETIME and     -- RELEASED_DATETIME. If sequential order of both     -- rankings do not match raise an exception    -- Stored procedure as appropriated from VG_14_ORDER_PRIORITY_FI>    -- =============================================        -- ***************VERSION CONTROL***************    -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.            --2023-08-29, Matej Miter -     -- Created an CTE table that can handle duplication on merge caused based on different trade number (This is order level report so we ignoring different trades).    --SG76483 -  Manually created number to follow changes    -- *********************************************        CREATE PROCEDURE [dbo].[VG_14_ORDER_PRIORITY_LL]            AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        --0. Determine the first trade for each order (using the TRD_AUTH_TIME)    IF OBJECT_ID('tempdb..#first_trade', 'U') IS NOT NULL DROP TABLE #first_trade    SELECT      ORD_NUM,     MIN(TRD_AUTH_TIME) AS MIN_AUTH_TIME    INTO #first_trade    FROM VISTA_REPORTING.dbo.TRADES    GROUP BY     ORD_NUM        --1. For all trades, gather details on the trader order associated with this trade    IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades    SELECT  DISTINCT           t.MULTI_FUND_ID,           t.EXECUTION_TIME,        o.AUTH_TIME,           o.ORD_NUM,           o.TRAN_TYPE,            o.CUSIP    INTO #trades    FROM VISTA_staging.dbo.TRADES t    INNER JOIN #first_trade f_t    ON t.ORD_NUM = f_t.ORD_NUM AND t.TRD_AUTH_TIME = f_t.MIN_AUTH_TIME    LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS o    ON t.ORD_NUM = o.ORD_NUM    --LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc    --ON o.ORD_NUM = oc.PM_ORD    LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE prim    ON t.MULTI_FUND_ID = prim.MULTI_FUND_ID    WHERE prim.INTERFUND_TRANSFER <> 1     AND prim.PRIMARY_MARKET <> 1     AND prim.DEALING_DESK = 'Leveraged Finance'        --2. For all trd orders, create a list of the start time and end time that it was in this status    -- 2.a.i. Add in a dummy record for each Authorisation time for instances where the only     --  records for an order that we have are in status 'F'.    -- This is done because it is assumed that these orders were authorised and then filled within    --  a 15 minute timespan and Vista is blind to these events.    IF OBJECT_ID('tempdb..#ords_only_seen_filled', 'U') IS NOT NULL DROP TABLE #ords_only_seen_filled    SELECT DISTINCT     ORD_NUM     INTO #ords_only_seen_filled    FROM VISTA_REPORTING.dbo.ORDERS    GROUP BY     ORD_NUM    HAVING     MAX(CASE WHEN STATUS in('F', 'C') THEN 0 ELSE 1 END) = 0  -- We only want to look at orders that has a Filled or Cancelled status        --2.a.ii. For orders that are not fully filled or cancelled, find the min touch count.    IF OBJECT_ID('tempdb..#ords_only_seen_filled_min_tch', 'U') IS NOT NULL DROP TABLE #ords_only_seen_filled_min_tch    SELECT      o.ORD_NUM,     MIN(o.TOUCH_COUNT) AS MIN_TOUCH_COUNT    INTO #ords_only_seen_filled_min_tch    FROM VISTA_REPORTING.dbo.ORDERS o    INNER JOIN     #ords_only_seen_filled min_tch    ON o.ORD_NUM = min_tch.ORD_NUM    GROUP BY     o.ORD_NUM        -- 2.a.iii. Get distinct list of TRD_ORDER touch count and modify time - this is to remove duplications caused because this table is at the client execution level    IF OBJECT_ID('tempdb..#trd_ord_times', 'U') IS NOT NULL DROP TABLE #trd_ord_times    SELECT DISTINCT           o.ORD_NUM,           o.TOUCH_COUNT,           o.MODIFY_TIME,        o.AUTH_TIME,        f_t.MIN_AUTH_TIME,           o.[STATUS],        o.TRAN_TYPE,           o.CUSIP    INTO #trd_ord_times    FROM VISTA_REPORTING.dbo.TRD_ORDERS o    --LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc    --ON o.ORD_NUM = oc.PM_ORD    LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE prim    ON o.ORD_NUM = prim.ORD_NUM    AND prim.PRIMARY_MARKET_ORDER_LEVEL <> 1    LEFT JOIN #first_trade f_t    ON o.ORD_NUM = f_t.ORD_NUM    WHERE prim.DEALING_DESK = 'Leveraged Finance'    AND prim.INTERFUND_TRANSFER <> 1    AND prim.PRIMARY_MARKET <> 1        UNION    -- 2.a.iv. Add in a dummy record for each Authorisation time for instances where the only     --  records for an order that we have are in status 'F'.    -- This is done because it is assumed that these orders were authorised and then filled within    --  a 15 minute timespan and Vista is blind to these events.     SELECT DISTINCT           o.ORD_NUM,           min_tch.MIN_TOUCH_COUNT - 1 AS TOUCH_COUNT, -- Assume that the TOUCH_COUNT when authorised is one less than the touch count when filled           o.AUTH_TIME AS MODIFY_TIME, -- Assume that the modify time is the auth time        o.AUTH_TIME,           f_t.MIN_AUTH_TIME,        'U'  AS [STATUS],        o.TRAN_TYPE,           o.CUSIP -- Assume that at the AUTH_TIME, the Status is set to 'U'    FROM VISTA_REPORTING.dbo.TRD_ORDERS o    --LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc    --ON o.ORD_NUM = oc.PM_ORD    LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE prim    ON o.ORD_NUM = prim.ORD_NUM    INNER JOIN #ords_only_seen_filled_min_tch min_tch    ON o.ORD_NUM = min_tch.ORD_NUM AND o.TOUCH_COUNT = min_tch.MIN_TOUCH_COUNT -- We want to filter out everything except for the  first touch count for the orders.    LEFT JOIN #first_trade f_t    ON o.ORD_NUM = f_t.ORD_NUM    WHERE prim.PRIMARY_MARKET_ORDER_LEVEL <> 1    AND prim.DEALING_DESK = 'Leveraged Finance' -- Only consider Leveraged Loans orders - to guard against duplication caused by orders being flagged to multiple desks.    AND DATEDIFF(minute,o.AUTH_TIME, o.MODIFY_TIME) < 15  -- We only want to consider those orders that were authorised and then modified within 15 minutes.    --SELECT * FROM #trd_ord_times WHERE ORD_NUM IN (902775, 902875) ORDER BY ORD_NUM        -- 2.b. Generate table of statuses with index columns    IF OBJECT_ID('tempdb..#statuses', 'U') IS NOT NULL DROP TABLE #statuses    SELECT         *,         ROW_NUMBER() OVER (PARTITION BY ORD_NUM ORDER BY TOUCH_COUNT) RowNum,         ROW_NUMBER() OVER (PARTITION BY ORD_NUM ORDER BY TOUCH_COUNT) -             ROW_NUMBER() OVER (PARTITION BY ORD_NUM, [STATUS] ORDER BY TOUCH_COUNT) AS [Group]    INTO #statuses    FROM            #trd_ord_times     --SELECT * FROM #statuses WHERE ORD_NUM = '1000076     ' ORDER BY TOUCH_COUNT    -- 2.c. Join statuses table to itself to find the start touch count and the end touch count of the order being in the same status.     --           This is done so that we can determine when an order moves into a status as well as when it moves out of this status     IF OBJECT_ID('tempdb..#status_groups', 'U') IS NOT NULL DROP TABLE #status_groups    SELECT      status1.ORD_NUM,     status1.AUTH_TIME,     status1.MIN_AUTH_TIME,     status1.STATUS,     status1.TRAN_TYPE,     status1.CUSIP,        MIN(status1.TOUCH_COUNT) [START],        MAX(status2.TOUCH_COUNT) [END]     INTO #status_groups    FROM         #statuses status1    LEFT JOIN        #statuses status2         ON         status1.ORD_NUM = status2.ORD_NUM AND        status1.RowNum = status2.RowNum - 1    GROUP BY       status1.ORD_NUM,     status1.AUTH_TIME,     status1.MIN_AUTH_TIME,     status1.STATUS,     status1.[Group],     status1.TRAN_TYPE,     status1.CUSIP    --SELECT * FROM #status_groups        --2.d.i. For the first row of each order, we use the authorisation time as the start point so that we include this time    IF OBJECT_ID('tempdb..#First_Row', 'U') IS NOT NULL DROP TABLE #First_Row    SELECT            ORD_NUM,            MIN(START) AS [First_Row]     INTO #First_Row    FROM #status_groups     GROUP BY ORD_NUM        -- 2.d. Find the modify times associated with each of these status changes    IF OBJECT_ID('tempdb..#status_times', 'U') IS NOT NULL DROP TABLE #status_times    SELECT            st.* ,           CASE                   WHEN fr.First_Row IS NOT NULL THEN st.AUTH_TIME -- For the first record of each order we use the start time as the authorisatio ntime so that we are considering this time period.                  ELSE trd1.MODIFY_TIME               END AS [Start_Time],           ISNULL(trd2.MODIFY_TIME,'9999-12-31') AS [End_Time] --If the order has not moved out of a status then set the end date to be end of time so that we don't do comparisons to NULLs    INTO #status_times    FROM #status_groups st    LEFT JOIN #trd_ord_times trd1    ON st.ORD_NUM = trd1.ORD_NUM AND st.START = trd1.TOUCH_COUNT    LEFT JOIN #trd_ord_times trd2    ON st.ORD_NUM = trd2.ORD_NUM AND st.[END] = trd2.TOUCH_COUNT    LEFT JOIN #First_Row fr    ON st.ORD_NUM = fr.ORD_NUM AND st.START = fr.First_Row    --SELECT * FROM #status_times WHERE ORD_NUM IN (902775, 902875) ORDER BY ORD_NUM, STATUS DESC        --2.e. Determine whether there is an exception.      IF OBJECT_ID('tempdb..#order_priority', 'U') IS NOT NULL DROP TABLE #order_priority    --2.e.i. Orders where the asset inst type is known     SELECT            t.ORD_NUM AS [Traded_Order],        t.MULTI_FUND_ID AS Trade,        1 AS ORDER_PRIORITY_EXCEPTION ,        st.ORD_NUM AS [Prior_Order]    INTO #order_priority    FROM #trades t    LEFT JOIN #status_times st    ON t.EXECUTION_TIME BETWEEN st.Start_Time AND st.End_Time    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc1    --ON t.ORD_NUM = oc1.PM_ORD    --LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc2    --ON st.ORD_NUM = oc2.PM_ORD    WHERE t.ORD_NUM != st.ORD_NUM    AND st.STATUS IN ('U','A') -- Only want to see if there are orders that are authorised/active    AND t.AUTH_TIME > st.AUTH_TIME    AND t.EXECUTION_TIME < st.MIN_AUTH_TIME    AND t.CUSIP = st.CUSIP    AND t.TRAN_TYPE = st.TRAN_TYPE    GROUP BY st.ORD_NUM, t.ORD_NUM, t.MULTI_FUND_ID    --HAVING MAX(CASE WHEN oc1.TRD_ORD = oc2.TRD_ORD THEN 1 ELSE 0 END) = 0 -- Check to see if any of the TRD_ORDERS for both PM_Orders match, if they do then it means they have been merged.        IF OBJECT_ID('tempdb..#order_priority_concat', 'U') IS NOT NULL DROP TABLE #order_priority_concat    SELECT DISTINCT      Traded_Order,      Trade,      ORDER_PRIORITY_EXCEPTION,      STUFF((     SELECT DISTINCT ', ' + LTRIM(RTRIM(Prior_Order))     FROM #order_priority     WHERE (Traded_Order = Results.Traded_Order)      FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)')      ,1,2,'') AS Orders_Concat    INTO #order_priority_concat    FROM #order_priority Results    GROUP BY Traded_Order, ORDER_PRIORITY_EXCEPTION, Trade        --SELECT * FROM #order_priority_concat         --IF OBJECT_ID('tempdb..#order_agg_table', 'U') IS NOT NULL DROP TABLE #order_agg_table     --select distinct     -- t.ORD_NUM,     -- case     --  when mt.PM_ORD_COUNT > 1 then 0     --  when mt.PM_ORD_COUNT is NULL then 0     --  when mt.PM_ORD_COUNT = 1 then 1     --  else NULL end as MERGE_EXCEPTION     --into #order_agg_table     --from VISTA_REPORTING.dbo.TRD_ORDERS t     --left join #mergeable mt on mt.TRD_ORD=t.ORD_NUM     --where t.DEALING_DESK='Fixed Income'          -- Use #order_priority_concat to populate FINAL_STATUS_UPDATE_TABLE     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     select distinct      CONCAT([Traded_Order],'_14') AS ID,      '1A1' AS STATUS,      NULL AS FINAL_UPDATED_TIME     into #temp_status_table     from #order_priority_concat     where ORDER_PRIORITY_EXCEPTION = 1          MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET       T.ID=T.ID,       T.STATUS=T.STATUS,       T.DEALING_DESK = 'Leveraged Finance',       T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'Leveraged Finance');         --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      NULL AS MULTI_FUND_ID,      ex.Traded_Order AS TRD_ORD,      NULL AS PM_ORD,      'Order Priority' AS Exception_Type,      CONCAT(Traded_Order,'_14') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'For Review' AS Status,      NULL AS ClientExecID,      'Leveraged Finance' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      NULL AS DEALER,      '1A1' AS STATUS_ID,      trd_o.AUTH_TIME AS ORD_AUTH,      NULL AS TRADE_EXEC     INTO #temp_audit     FROM #order_priority_concat ex     LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o     ON ex.Traded_Order = trd_o.ORD_NUM     where ORDER_PRIORITY_EXCEPTION = 1          MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);           -- Append the exceptions to the list of TRD orders     IF OBJECT_ID('VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_LL_TABLE', 'U') IS NULL           select distinct     t.ORD_NUM AS OP_ID,     t.ORD_NUM,     o.Trade,     t.DEALING_DESK,     o.Orders_Concat AS Prior_Orders,    --  ***delete the below script once Order Priority has been confirmed***     --0 AS ORDER_PRIORITY_EXCEPTION,     --NULL AS CREATETIME    --  ********************************************************************         case       when ORDER_PRIORITY_EXCEPTION is NULL then 0 else ORDER_PRIORITY_EXCEPTION     end as ORDER_PRIORITY_EXCEPTION,     case      when ORDER_PRIORITY_EXCEPTION = 1 then GETDATE() else NULL --if exception has been raised create TIMESTAMP     end as CREATETIME     into VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_LL_TABLE     from VISTA_REPORTING.dbo.TRD_ORDERS t     left join #order_priority_concat o on o.Traded_Order=t.ORD_NUM     where t.DEALING_DESK = 'Leveraged Finance'          ELSE          IF OBJECT_ID('tempdb..#temp_op_table', 'U') IS NOT NULL DROP TABLE #temp_op_table         select distinct     t.ORD_NUM AS OP_ID,     t.ORD_NUM,     o.Trade,     t.DEALING_DESK,     o.Orders_Concat,    --  ***delete the below script once Order Priority has been confirmed***     --0 AS ORDER_PRIORITY_EXCEPTION,     --NULL AS CREATETIME    --  ********************************************************************         case       when ORDER_PRIORITY_EXCEPTION is NULL then 0 else ORDER_PRIORITY_EXCEPTION     end as ORDER_PRIORITY_EXCEPTION,     case      when ORDER_PRIORITY_EXCEPTION = 1 then GETDATE() else NULL --if exception has been raised create TIMESTAMP     end as CREATETIME     into #temp_op_table     from VISTA_REPORTING.dbo.TRD_ORDERS t     left join #order_priority_concat o on o.Traded_Order=t.ORD_NUM     where t.DEALING_DESK = 'Leveraged Finance';             --SG76483--------------------------------         with deduplication as     (     select *,ROW_NUMBER() over (partition by ord_num order by ord_num,CREATETIME) as RN     from #temp_op_table     )     delete from deduplication where RN <> 1         --End of SG76483---------------------------------         MERGE VISTA_STAGING.dbo.VG_14_ORDER_PRIORITY_EXCEPTION_LL_TABLE AS T     USING #temp_op_table AS S     ON (T.OP_ID=S.OP_ID )     WHEN MATCHED      THEN       UPDATE SET         T.DEALING_DESK = S.DEALING_DESK,       T.ORDER_PRIORITY_EXCEPTION = CASE WHEN S.ORDER_PRIORITY_EXCEPTION > T.ORDER_PRIORITY_EXCEPTION THEN S.ORDER_PRIORITY_EXCEPTION ELSE T.ORDER_PRIORITY_EXCEPTION END,       T.CREATETIME = CASE WHEN S.ORDER_PRIORITY_EXCEPTION > T.ORDER_PRIORITY_EXCEPTION THEN S.CREATETIME ELSE T.CREATETIME END     WHEN NOT MATCHED       THEN INSERT (OP_ID, Ord_Num, Trade, Prior_Orders, DEALING_DESK, ORDER_PRIORITY_EXCEPTION, CREATETIME)        VALUES (S.OP_ID, S.ORD_NUM, S.Trade, S.Orders_Concat, S.DEALING_DESK, S.ORDER_PRIORITY_EXCEPTION, S.CREATETIME);        IF OBJECT_ID('tempdb..#trades', 'U') IS NOT NULL DROP TABLE #trades    IF OBJECT_ID('tempdb..#ords_only_seen_filled', 'U') IS NOT NULL DROP TABLE #ords_only_seen_filled    IF OBJECT_ID('tempdb..#ords_only_seen_filled_min_tch', 'U') IS NOT NULL DROP TABLE #ords_only_seen_filled_min_tch    IF OBJECT_ID('tempdb..#trd_ord_times', 'U') IS NOT NULL DROP TABLE #trd_ord_times    IF OBJECT_ID('tempdb..#status_groups', 'U') IS NOT NULL DROP TABLE #status_groups    IF OBJECT_ID('tempdb..#status_times', 'U') IS NOT NULL DROP TABLE #status_times    IF OBJECT_ID('tempdb..#order_priority', 'U') IS NOT NULL DROP TABLE #order_priority    IF OBJECT_ID('tempdb..#order_priority_concat', 'U') IS NOT NULL DROP TABLE #order_priority_concat    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    IF OBJECT_ID('tempdb..#temp_op_table', 'U') IS NOT NULL DROP TABLE #temp_op_table    END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_15_AMENDMENT_FLAG_DMG  CreateDate: 2025-06-26 18:01:43.040  ModifyDate: 2025-06-26 18:01:43.040  --- DEFINITION START ---  CREATE PROCEDURE [dbo].[VG_15_AMENDMENT_FLAG_DMG]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;             IF OBJECT_ID('tempdb..#temp_amend', 'U') IS NOT NULL DROP TABLE #temp_amend     SELECT DISTINCT     pm.ORD_NUM,     T.MULTI_FUND_ID,     T.TOUCH_COUNT,     PR.DEALING_DESK,     1 AS AMENDMENT_FLAG,     T.trd_amend_type,     GETDATE() AS AMENDMENT_FLAG_CREATETIME,     --T.TRD_TRADER,     --T.TRD_COUNTERPARTY,     --CONCAT(CONVERT(VARCHAR(50),TRD.SM_SEC_GROUP), CONVERT(VARCHAR(30), TRD.SM_SEC_TYPE)) AS ASSET_TYPE_SUBTYPE,     --T.EXECUTION_TYPE_DECODE,     --CONCAT(CONVERT(VARCHAR(20), YEAR(T.TRD_AUTH_TIME)) , '-', CONVERT(VARCHAR(20), MONTH(T.TRD_AUTH_TIME))) AS MONTH_YEAR,     --PR.INST_TYPE,     --TRD.SM_SEC_GROUP,     --DC1.[VALUE] AS TRD_PURPOSE,     CASE WHEN (AmendmentFlag = 1 OR CancellationFlag = 1) THEN 1 ELSE 0 END AS VG_15,     CASE WHEN (AmendmentFlag = 1 OR CancellationFlag = 1) THEN GETDATE() ELSE NULL END AS EXCEPTION_FLAG_CREATETIME     INTO #temp_amend     FROM VISTA_REPORTING.dbo.TRADES T     LEFT JOIN( SELECT DISTINCT ORD_NUM, DEALING_DESK, SM_SEC_GROUP, SM_SEC_TYPE FROM  VISTA_REPORTING.dbo.TRD_ORDERS) TRD ON TRD.ORD_NUM=T.ORD_NUM     left join (SELECT INST_TYPE, MULTI_FUND_ID, DEALING_DESK FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE ) pr on pr.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.TRD_ORD = TRD.ORD_NUM     LEFT JOIN (SELECT ORD_NUM FROM VISTA_REPORTING.DBO.PM_ORDERS) PM ON OC.PM_ORD = PM.ORD_NUM     --LEFT JOIN (SELECT DISTINCT TAG_NAME, VALUE, CODE FROM VISTA_REPORTING.DBO.DECODES) DC1 ON DC1.TAG_NAME = 'TRDPURPOSE' AND DC1.CODE = T.TRD_PURPOSE     WHERE PR.DEALING_DESK = 'DMG' AND (AmendmentFlag = 1 OR CancellationFlag = 1)             IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     select distinct      CONCAT(MULTI_FUND_ID,'_15',TOUCH_COUNT) AS ID,      '1A1' AS STATUS,      NULL AS FINAL_UPDATED_TIME     into #temp_status_table     from #temp_amend     where VG_15 != 0         MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET       T.ID=T.ID,       T.STATUS=T.STATUS,       T.DEALING_DESK = 'DMG',       T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'DMG');        --Add record into the AUDIT_TABLE    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    SELECT DISTINCT     ex.MULTI_FUND_ID AS MULTI_FUND_ID,     t.ORD_NUM AS TRD_ORD,     NULL AS PM_ORD,     'Amendment Analysis' AS Exception_Type,     CONCAT(ex.MULTI_FUND_ID,'_15',ex.TOUCH_COUNT) AS ID,     NULL AS REASON,     NULL AS COMMENT,     'For Review' AS Status,     NULL AS ClientExecID,     'DMG' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     TRD_TRADER AS DEALER,     '1A1' AS STATUS_ID,     NULL AS ORD_AUTH,     EXECUTION_TIME AS TRADE_EXEC    INTO #temp_audit    FROM #temp_amend ex    LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, TOUCH_COUNT, TRD_TRADER, EXECUTION_TIME FROM VISTA_REPORTING.dbo.TRADES ) t    ON ex.MULTI_FUND_ID = t.MULTI_FUND_ID AND ex.TOUCH_COUNT = t.TOUCH_COUNT    where AMENDMENT_FLAG > 0        MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_DMG AS T    USING #temp_audit AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);            IF OBJECT_ID('VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_DMG_TABLE', 'U') IS NULL    SELECT DISTINCT     MULTI_FUND_ID,     TOUCH_COUNT,     DEALING_DESK,     AMENDMENT_FLAG,     TRD_AMEND_TYPE,     AMENDMENT_FLAG_CREATETIME,     VG_15,     EXCEPTION_FLAG_CREATETIME     INTO VISTA_STAGING.DBO.VG_15_AMENDMENT_FLAG_DMG_TABLE    FROM #temp_amend        else        IF OBJECT_ID('tempdb..#temp_AMENDFLAG_table', 'U') IS NOT NULL DROP TABLE #temp_AMENDFLAG_table    SELECT DISTINCT     MULTI_FUND_ID,     TOUCH_COUNT,     DEALING_DESK,     AMENDMENT_FLAG,     TRD_AMEND_TYPE,     AMENDMENT_FLAG_CREATETIME,     VG_15,     EXCEPTION_FLAG_CREATETIME    INTO #TEMP_AMENDFLAG_TABLE    FROM #temp_amend        MERGE VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_DMG_TABLE AS T     USING #TEMP_AMENDFLAG_TABLE AS S    ON (T.MULTI_FUND_ID = S.MULTI_FUND_ID     AND T.TOUCH_COUNT = S.TOUCH_COUNT)    WHEN MATCHED    THEN UPDATE    SET         MULTI_FUND_ID= CASE WHEN S.VG_15 > T.VG_15 THEN S.MULTI_FUND_ID ELSE T.MULTI_FUND_ID END,    TOUCH_COUNT= CASE WHEN S.VG_15 > T.VG_15 THEN S.TOUCH_COUNT ELSE T.TOUCH_COUNT END,    DEALING_DESK= CASE WHEN S.VG_15 > T.VG_15 THEN S.DEALING_DESK ELSE T.DEALING_DESK END,    AMENDMENT_FLAG= CASE WHEN S.VG_15 > T.VG_15 THEN S.AMENDMENT_FLAG ELSE T.AMENDMENT_FLAG END,    trd_amend_type= CASE WHEN S.VG_15 > T.VG_15 THEN S.trd_amend_type ELSE T.trd_amend_type END,    AMENDMENT_FLAG_CREATETIME= CASE WHEN S.VG_15 > T.VG_15 THEN S.AMENDMENT_FLAG_CREATETIME ELSE T.AMENDMENT_FLAG_CREATETIME END,    --TRD_TRADER= CASE WHEN S.VG_15 > T.VG_15 THEN S.TRD_TRADER ELSE T.TRD_TRADER END,    --TRD_COUNTERPARTY= CASE WHEN S.VG_15 > T.VG_15 THEN S.TRD_COUNTERPARTY ELSE T.TRD_COUNTERPARTY END,    --ASSET_TYPE_SUBTYPE= CASE WHEN S.VG_15 > T.VG_15 THEN S.ASSET_TYPE_SUBTYPE ELSE T.ASSET_TYPE_SUBTYPE END,    --EXECUTION_TYPE_DECODE= CASE WHEN S.VG_15 > T.VG_15 THEN S.EXECUTION_TYPE_DECODE ELSE T.EXECUTION_TYPE_DECODE END,    --MONTH_YEAR= CASE WHEN S.VG_15 > T.VG_15 THEN S.MONTH_YEAR ELSE T.MONTH_YEAR END,    --INST_TYPE= CASE WHEN S.VG_15 > T.VG_15 THEN S.INST_TYPE ELSE T.INST_TYPE END,    --SM_SEC_GROUP= CASE WHEN S.VG_15 > T.VG_15 THEN S.SM_SEC_GROUP ELSE T.SM_SEC_GROUP END,    --TRD_PURPOSE= CASE WHEN S.VG_15 > T.VG_15 THEN S.TRD_PURPOSE ELSE T.TRD_PURPOSE END,    VG_15= CASE WHEN S.VG_15 > T.VG_15 THEN S.VG_15 ELSE T.VG_15 END,    EXCEPTION_FLAG_CREATETIME= CASE WHEN S.VG_15 > T.VG_15 THEN S.EXCEPTION_FLAG_CREATETIME ELSE T.EXCEPTION_FLAG_CREATETIME END        WHEN NOT MATCHED    THEN INSERT    (MULTI_FUND_ID    ,TOUCH_COUNT    ,DEALING_DESK    ,AMENDMENT_FLAG    ,trd_amend_type    ,AMENDMENT_FLAG_CREATETIME    --,TRD_TRADER    --,TRD_COUNTERPARTY    --,ASSET_TYPE_SUBTYPE    --,EXECUTION_TYPE_DECODE    --,MONTH_YEAR    --,INST_TYPE    --,SM_SEC_GROUP    --,TRD_PURPOSE    ,VG_15    ,EXCEPTION_FLAG_CREATETIME)        VALUES     (S.MULTI_FUND_ID    ,S.TOUCH_COUNT    ,S.DEALING_DESK    ,S.AMENDMENT_FLAG    ,S.trd_amend_type    ,S.AMENDMENT_FLAG_CREATETIME    --,S.TRD_TRADER    --,S.TRD_COUNTERPARTY    --,S.ASSET_TYPE_SUBTYPE    --,S.EXECUTION_TYPE_DECODE    --,S.MONTH_YEAR    --,S.INST_TYPE    --,S.SM_SEC_GROUP    --,S.TRD_PURPOSE    ,S.VG_15    ,S.EXCEPTION_FLAG_CREATETIME);             IF OBJECT_ID('tempdb..#temp_amend', 'U') IS NOT NULL DROP TABLE #temp_amend     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     IF OBJECT_ID('tempdb..#temp_AMENDFLAG_table', 'U') IS NOT NULL DROP TABLE #temp_AMENDFLAG_table        END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_15_AMENDMENT_FLAG_EQ  CreateDate: 2025-06-26 18:01:32.617  ModifyDate: 2025-06-26 18:01:32.617  --- DEFINITION START ---  -- =============================================    -- Author:  <da Costa, David>    -- Create date: <29/11/2017>    -- Description:     -- =============================================        -- ***************VERSION CONTROL***************    -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.    -- *********************************************        CREATE PROCEDURE [dbo].[VG_15_AMENDMENT_FLAG_EQ]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         IF OBJECT_ID('tempdb..#temp_amend', 'U') IS NOT NULL DROP TABLE #temp_amend     SELECT DISTINCT     t.MULTI_FUND_ID,     t.TOUCH_COUNT,     tr.DEALING_DESK,     1 AS AMENDMENT_FLAG,     GETDATE() AS AMENDMENT_FLAG_CREATETIME     INTO #temp_amend     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS tr ON tr.ORD_NUM=t.ORD_NUM     WHERE tr.DEALING_DESK = 'Equity'     AND  (AmendmentFlag = 1 OR CancellationFlag = 1)         -- Use #temp_nav to populate FINAL_STATUS_UPDATE_TABLE           IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table           select distinct                 CONCAT(MULTI_FUND_ID,'_15',TOUCH_COUNT) AS ID,                 '1A1' AS STATUS,                 NULL AS FINAL_UPDATED_TIME           into #temp_status_table           from #temp_amend           where AMENDMENT_FLAG > 0                      MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T           USING #temp_status_table AS S           ON (T.ID = S.ID)           WHEN MATCHED                 THEN                  UPDATE SET                        T.ID=T.ID,                        T.STATUS=T.STATUS,         T.DEALING_DESK = 'Equity',                        T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME           WHEN NOT MATCHED                  THEN                  INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)                 VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'Equity');             --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      ex.MULTI_FUND_ID AS MULTI_FUND_ID,      t.ORD_NUM AS TRD_ORD,      NULL AS PM_ORD,      'Amendment Analysis' AS Exception_Type,      CONCAT(ex.MULTI_FUND_ID,'_15',ex.TOUCH_COUNT) AS ID,      NULL AS REASON,      NULL AS COMMENT,      'For Review' AS Status,      NULL AS ClientExecID,      'Equity' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      TRD_TRADER AS DEALER,      '1A1' AS STATUS_ID,      NULL AS ORD_AUTH,      EXECUTION_TIME AS TRADE_EXEC     INTO #temp_audit     FROM #temp_amend ex     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, TOUCH_COUNT, TRD_TRADER, EXECUTION_TIME FROM VISTA_REPORTING.dbo.TRADES ) t     ON ex.MULTI_FUND_ID = t.MULTI_FUND_ID AND ex.TOUCH_COUNT = t.TOUCH_COUNT     where AMENDMENT_FLAG > 0          MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);           IF OBJECT_ID('VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_EQ_TABLE', 'U') IS NULL         SELECT *     INTO VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_EQ_TABLE     FROM #temp_amend         ELSE              IF OBJECT_ID('tempdb..#temp_a_eq_table', 'U') IS NOT NULL DROP TABLE #temp_a_eq_table         SELECT DISTINCT      *     INTO #temp_a_eq_table     FROM #temp_amend         MERGE VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_EQ_TABLE AS T     USING #temp_a_eq_table AS S     ON (T.MULTI_FUND_ID=S.MULTI_FUND_ID      AND T.TOUCH_COUNT = S.TOUCH_COUNT)     WHEN MATCHED      THEN      UPDATE SET       T.DEALING_DESK = S.DEALING_DESK,       T.AMENDMENT_FLAG = CASE WHEN S.AMENDMENT_FLAG > T.AMENDMENT_FLAG THEN S.AMENDMENT_FLAG ELSE T.AMENDMENT_FLAG END,       T.AMENDMENT_FLAG_CREATETIME = CASE WHEN S.AMENDMENT_FLAG > T.AMENDMENT_FLAG THEN S.AMENDMENT_FLAG_CREATETIME ELSE T.AMENDMENT_FLAG_CREATETIME END     WHEN NOT MATCHED      THEN INSERT (MULTI_FUND_ID, TOUCH_COUNT, DEALING_DESK, AMENDMENT_FLAG, AMENDMENT_FLAG_CREATETIME)        VALUES (S.MULTI_FUND_ID, S.TOUCH_COUNT, S.DEALING_DESK, S.AMENDMENT_FLAG, S.AMENDMENT_FLAG_CREATETIME);         IF OBJECT_ID('tempdb..#temp_amend', 'U') IS NOT NULL DROP TABLE #temp_amend        IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     IF OBJECT_ID('tempdb..#temp_a_eq_table', 'U') IS NOT NULL DROP TABLE #temp_a_eq_table           END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_15_AMENDMENT_FLAG_FI  CreateDate: 2025-06-26 17:59:35.427  ModifyDate: 2025-06-26 17:59:35.427  --- DEFINITION START ---  -- =============================================    -- Author:  <da Costa, David>    -- Create date: <29/11/2017>    -- Description:     -- =============================================        -- ***************VERSION CONTROL***************    -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.    -- *********************************************        CREATE PROCEDURE [dbo].[VG_15_AMENDMENT_FLAG_FI]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;          IF OBJECT_ID('tempdb..#temp_amend', 'U') IS NOT NULL DROP TABLE #temp_amend     SELECT DISTINCT     t.MULTI_FUND_ID,     t.TOUCH_COUNT,     tr.DEALING_DESK,     1 AS AMENDMENT_FLAG,     GETDATE() AS AMENDMENT_FLAG_CREATETIME     INTO #temp_amend     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS tr ON tr.ORD_NUM=t.ORD_NUM     WHERE tr.DEALING_DESK = 'Fixed Income'     AND  (AmendmentFlag = 1 OR CancellationFlag = 1)           -- Use #temp_nav to populate FINAL_STATUS_UPDATE_TABLE           IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table           select distinct                 CONCAT(MULTI_FUND_ID,'_15',TOUCH_COUNT) AS ID,                 '1A2' AS STATUS,                 NULL AS FINAL_UPDATED_TIME           into #temp_status_table           from #temp_amend           where AMENDMENT_FLAG > 0                      MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T           USING #temp_status_table AS S           ON (T.ID = S.ID)           WHEN MATCHED                 THEN                  UPDATE SET                        T.ID=T.ID,                        T.STATUS=T.STATUS,         T.DEALING_DESK = 'Fixed Income',                        T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME           WHEN NOT MATCHED                  THEN                  INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)                 VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'Fixed Income');         --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      ex.MULTI_FUND_ID AS MULTI_FUND_ID,      t.ORD_NUM AS TRD_ORD,      NULL AS PM_ORD,      'Amendment Analysis' AS Exception_Type,      CONCAT(ex.MULTI_FUND_ID,'_15',ex.TOUCH_COUNT) AS ID,      NULL AS REASON,      NULL AS COMMENT,      'With Reviewer' AS Status,      NULL AS ClientExecID,      'Fixed Income' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      TRD_TRADER AS DEALER,      '1A2' AS STATUS_ID,      NULL AS ORD_AUTH,      EXECUTION_TIME AS TRADE_EXEC     INTO #temp_audit     FROM #temp_amend ex     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, TOUCH_COUNT, TRD_TRADER, EXECUTION_TIME FROM VISTA_REPORTING.dbo.TRADES ) t     ON ex.MULTI_FUND_ID = t.MULTI_FUND_ID AND ex.TOUCH_COUNT = t.TOUCH_COUNT     where AMENDMENT_FLAG > 0          MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);             IF OBJECT_ID('VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_FI_TABLE', 'U') IS NULL         SELECT *     INTO VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_FI_TABLE     FROM #temp_amend         ELSE          IF OBJECT_ID('tempdb..#temp_a_fi_table', 'U') IS NOT NULL DROP TABLE #temp_a_fi_table         SELECT DISTINCT      *     INTO #temp_a_fi_table     FROM #temp_amend         MERGE VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_FI_TABLE AS T     USING #temp_a_fi_table AS S     ON (T.MULTI_FUND_ID=S.MULTI_FUND_ID      AND T.TOUCH_COUNT = S.TOUCH_COUNT)     WHEN MATCHED      THEN      UPDATE SET       T.DEALING_DESK = S.DEALING_DESK,       T.AMENDMENT_FLAG = CASE WHEN S.AMENDMENT_FLAG > T.AMENDMENT_FLAG THEN S.AMENDMENT_FLAG ELSE T.AMENDMENT_FLAG END,       T.AMENDMENT_FLAG_CREATETIME = CASE WHEN S.AMENDMENT_FLAG > T.AMENDMENT_FLAG THEN S.AMENDMENT_FLAG_CREATETIME ELSE T.AMENDMENT_FLAG_CREATETIME END     WHEN NOT MATCHED      THEN INSERT (MULTI_FUND_ID, TOUCH_COUNT, DEALING_DESK, AMENDMENT_FLAG, AMENDMENT_FLAG_CREATETIME)        VALUES (S.MULTI_FUND_ID, S.TOUCH_COUNT, S.DEALING_DESK, S.AMENDMENT_FLAG, S.AMENDMENT_FLAG_CREATETIME);            IF OBJECT_ID('tempdb..#temp_amend', 'U') IS NOT NULL DROP TABLE #temp_amend           IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     IF OBJECT_ID('tempdb..#temp_a_fi_table', 'U') IS NOT NULL DROP TABLE #temp_a_fi_table        END                --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_15_AMENDMENT_FLAG_LL  CreateDate: 2025-06-26 17:59:14.037  ModifyDate: 2025-06-26 17:59:14.037  --- DEFINITION START ---  -- =============================================    -- Author:  <Chandarana, Sohini>    -- Create date: <04/23/2018>    -- Description:     -- <Stored procedure as appropriated from VG_15_AMENDMENT_FLAG_FI>    -- =============================================        -- ***************VERSION CONTROL***************    -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.    -- *********************************************        CREATE PROCEDURE [dbo].[VG_15_AMENDMENT_FLAG_LL]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;          IF OBJECT_ID('tempdb..#temp_amend', 'U') IS NOT NULL DROP TABLE #temp_amend     SELECT DISTINCT     t.MULTI_FUND_ID,     t.TOUCH_COUNT,     tr.DEALING_DESK,     1 AS AMENDMENT_FLAG,     GETDATE() AS AMENDMENT_FLAG_CREATETIME     INTO #temp_amend     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS tr ON tr.ORD_NUM=t.ORD_NUM     WHERE tr.DEALING_DESK = 'Leveraged Finance'     AND  (AmendmentFlag = 1 OR CancellationFlag = 1)           -- Use #temp_nav to populate FINAL_STATUS_UPDATE_TABLE           IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table           select distinct                 CONCAT(MULTI_FUND_ID,'_15',TOUCH_COUNT) AS ID,                 '1A2' AS STATUS,                 NULL AS FINAL_UPDATED_TIME           into #temp_status_table           from #temp_amend           where AMENDMENT_FLAG > 0                      MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T           USING #temp_status_table AS S           ON (T.ID = S.ID)           WHEN MATCHED                 THEN                  UPDATE SET                        T.ID=T.ID,                        T.STATUS=T.STATUS,         T.DEALING_DESK = 'Leveraged Finance',                        T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME           WHEN NOT MATCHED                  THEN                  INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)                 VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME,'Leveraged Finance');         --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      ex.MULTI_FUND_ID AS MULTI_FUND_ID,      t.ORD_NUM AS TRD_ORD,      NULL AS PM_ORD,      'Amendment Analysis' AS Exception_Type,      CONCAT(ex.MULTI_FUND_ID,'_15',ex.TOUCH_COUNT) AS ID,      NULL AS REASON,      NULL AS COMMENT,      'With Reviewer' AS Status,      NULL AS ClientExecID,      'Leveraged Finance' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      TRD_TRADER AS DEALER,      '1A2' AS STATUS_ID,      NULL AS ORD_AUTH,      EXECUTION_TIME AS TRADE_EXEC     INTO #temp_audit     FROM #temp_amend ex     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, TOUCH_COUNT, TRD_TRADER, EXECUTION_TIME FROM VISTA_REPORTING.dbo.TRADES ) t     ON ex.MULTI_FUND_ID = t.MULTI_FUND_ID AND ex.TOUCH_COUNT = t.TOUCH_COUNT     where AMENDMENT_FLAG > 0          MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);             IF OBJECT_ID('VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_LL_TABLE', 'U') IS NULL         SELECT *     INTO VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_LL_TABLE     FROM #temp_amend         ELSE          IF OBJECT_ID('tempdb..#temp_a_ll_table', 'U') IS NOT NULL DROP TABLE #temp_a_ll_table         SELECT DISTINCT      *     INTO #temp_a_ll_table     FROM #temp_amend         MERGE VISTA_STAGING.dbo.VG_15_AMENDMENT_FLAG_LL_TABLE AS T     USING #temp_a_ll_table AS S     ON (T.MULTI_FUND_ID=S.MULTI_FUND_ID     AND T.TOUCH_COUNT = S.TOUCH_COUNT)     WHEN MATCHED      THEN      UPDATE SET       T.DEALING_DESK = S.DEALING_DESK,       T.AMENDMENT_FLAG = CASE WHEN S.AMENDMENT_FLAG > T.AMENDMENT_FLAG THEN S.AMENDMENT_FLAG ELSE T.AMENDMENT_FLAG END,       T.AMENDMENT_FLAG_CREATETIME = CASE WHEN S.AMENDMENT_FLAG > T.AMENDMENT_FLAG THEN S.AMENDMENT_FLAG_CREATETIME ELSE T.AMENDMENT_FLAG_CREATETIME END     WHEN NOT MATCHED      THEN INSERT (MULTI_FUND_ID, TOUCH_COUNT, DEALING_DESK, AMENDMENT_FLAG, AMENDMENT_FLAG_CREATETIME)        VALUES (S.MULTI_FUND_ID, S.TOUCH_COUNT, S.DEALING_DESK, S.AMENDMENT_FLAG, S.AMENDMENT_FLAG_CREATETIME);        IF OBJECT_ID('tempdb..#temp_amend', 'U') IS NOT NULL DROP TABLE #temp_amend    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    IF OBJECT_ID('tempdb..#temp_a_ll_table', 'U') IS NOT NULL DROP TABLE #temp_a_ll_table    END                --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_16_GIFTS_AND_HOSPITALITY_CASH  CreateDate: 2025-06-26 17:58:56.320  ModifyDate: 2025-06-26 17:58:56.320  --- DEFINITION START ---  -- =============================================    -- Author:  <da Costa, David>    -- Create date: <20/06/2019>    -- Description:     -- <Gifts and Hospitality table for CASH.>    -- =============================================        -- ***************VERSION CONTROL***************    -- 03/07/2019 - MS: Added in DATA_SOURCE column.    -- *********************************************        CREATE PROCEDURE [dbo].[VG_16_GIFTS_AND_HOSPITALITY_CASH]    AS    BEGIN    -- SET NOCOUNT ON added to prevent extra result sets from    -- interfering with SELECT statements.    SET NOCOUNT ON;            IF OBJECT_ID('tempdb..#final_gh', 'U') IS NOT NULL DROP TABLE #final_gh    SELECT DISTINCT     oc.PM_ORD AS ORD_NUM,     t.MULTI_FUND_ID,     pr.[DEALING_DESK],     CASE      WHEN t.[TRD_STATUS] = 'C' THEN 0     ELSE 1      END AS VG_16,     CASE      WHEN t.[TRD_STATUS] = 'C' THEN NULL     ELSE GETDATE()      END AS VG_16_CREATETIME,     'AL' as [DATA_SOURCE]    INTO #final_gh    FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID=t.MULTI_FUND_ID    LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD=t.ORD_NUM    WHERE t.FinalFlag = 1 and pr.DEALING_DESK = 'CASH'        UNION        SELECT DISTINCT      co.ORDER_ID,     ct.TRANSACTION_NUMBER,     'CASH',     CASE      WHEN ct.TRANSACTION_STATUS = 63 THEN 0     ELSE 1      END AS VG_16,     CASE      WHEN ct.TRANSACTION_STATUS = 63 THEN NULL     ELSE GETDATE()      END AS VG_16_CREATETIME,     'CM' as [DATA_SOURCE]    FROM VISTA_REPORTING.dbo.CASH_TRADES ct    LEFT JOIN VISTA_REPORTING.dbo.CASH_ORDERS co ON co.ORDER_ID=ct.ORDER_ID            --Add records into FINAL_STATUS_UPDATE_TABLE    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    SELECT DISTINCT     CONCAT(MULTI_FUND_ID,'_16_',[DATA_SOURCE]) AS ID,     '1B1' AS STATUS,     NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table    FROM #final_gh    WHERE VG_16 != 0        MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'CASH',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'CASH');        --Add records into AUDIT_TABLE    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    SELECT DISTINCT     gh.[MULTI_FUND_ID],     t.[ORD_NUM] AS TRD_ORD,     gh.[ORD_NUM] AS PM_ORD,     'Gifts and Hospitality' AS Exception_Type,     CONCAT(gh.[MULTI_FUND_ID],'_16_',[DATA_SOURCE]) AS ID,     NULL AS REASON,     NULL AS COMMENT,     'With C&A Reviewer' AS Status,     NULL AS ClientExecID,     'CASH' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     tdd.[FULL_NAME] AS DEALER,     '1B1' AS STATUS_ID,     trd_o.[AUTH_TIME] AS ORD_AUTH,     t.[EXECUTION_TIME] AS TRADE_EXEC    INTO #temp_audit    FROM #final_gh gh    left join (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER, PULL_DATE FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t    ON gh.[MULTI_FUND_ID] = t.[MULTI_FUND_ID] and gh.[DATA_SOURCE] = 'AL'    left join (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o    ON t.[ORD_NUM] = trd_o.[ORD_NUM]    left join (SELECT DISTINCT TRANSACTION_NUMBER, PULL_DATE, DEALER_NAME FROM VISTA_REPORTING.dbo.CASH_TRADES) ct    on gh.[MULTI_FUND_ID] = ct.[TRANSACTION_NUMBER] and gh.[DATA_SOURCE] = 'CM'    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd    on (tdd.[DEALING_DESK] = 'CASH' and tdd.[MG_USER_ID] = ct.[DEALER_NAME] and gh.[DATA_SOURCE] = 'CM' AND CAST(ct.PULL_DATE AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE))     or (tdd.[DEALING_DESK] = 'CASH' and tdd.[INITIALS] = t.[TRD_TRADER] and gh.[DATA_SOURCE] = 'AL' AND CAST(t.PULL_DATE AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE))     WHERE gh.[VG_16] = 1         MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_CASH AS T    USING #temp_audit AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID, Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD, Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);            --Update G&H Table    IF      OBJECT_ID('VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE', 'U') IS NULL     SELECT *      INTO VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE      FROM #final_gh    ELSE      IF OBJECT_ID('tempdb..#temp_CP_table', 'U') IS NOT NULL      DROP TABLE #temp_CP_table     SELECT *      INTO #TEMP_CP_TABLE     FROM #final_gh        MERGE VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_CASH_TABLE AS T     USING #TEMP_CP_TABLE AS S    ON (T.MULTI_FUND_ID = S.MULTI_FUND_ID AND T.[DATA_SOURCE] = S.[DATA_SOURCE])    WHEN MATCHED     THEN UPDATE     SET      [ORD_NUM] = CASE WHEN S.VG_16 > T.VG_16 THEN S.[ORD_NUM] ELSE T.[ORD_NUM] END,     [MULTI_FUND_ID] = CASE WHEN S.VG_16 > T.VG_16 THEN S.[MULTI_FUND_ID] ELSE T.[MULTI_FUND_ID] END,     [DEALING_DESK] = CASE WHEN S.VG_16 > T.VG_16 THEN S.[DEALING_DESK] ELSE T.[DEALING_DESK] END,     [VG_16] = CASE WHEN S.VG_16 > T.VG_16 THEN S.[VG_16] ELSE T.[VG_16] END,     [VG_16_CREATETIME] = CASE WHEN S.VG_16 > T.VG_16 THEN S.[VG_16_CREATETIME] ELSE T.[VG_16_CREATETIME] END,     [DATA_SOURCE] = CASE WHEN S.VG_16 > T.VG_16 THEN S.[DATA_SOURCE] ELSE T.[DATA_SOURCE] END        WHEN NOT MATCHED     THEN     INSERT     ([ORD_NUM],     [MULTI_FUND_ID],     [DEALING_DESK],     [VG_16],     [VG_16_CREATETIME],     [DATA_SOURCE])         VALUES     (S.[ORD_NUM],     S.[MULTI_FUND_ID],     S.[DEALING_DESK],     S.[VG_16],     S.[VG_16_CREATETIME],     S.[DATA_SOURCE]) ;             IF OBJECT_ID('tempdb..#final_gh', 'U') IS NOT NULL DROP TABLE #final_gh     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_16_GIFTS_AND_HOSPITALITY_DMG  CreateDate: 2025-06-26 17:58:41.383  ModifyDate: 2025-06-26 17:58:41.383  --- DEFINITION START ---  -- =============================================    -- Author:  <Samad, Mehreen>    -- Create date: <07/05/2019>    -- Description:     -- <Gifts and Hospitality table.>    -- =============================================        -- ***************VERSION CONTROL***************    -- 2019-05-16 - MS: Added in PM Order Number in    --     Audit table.    -- *********************************************        CREATE PROCEDURE [dbo].[VG_16_GIFTS_AND_HOSPITALITY_DMG]    AS    BEGIN    -- SET NOCOUNT ON added to prevent extra result sets from    -- interfering with SELECT statements.    SET NOCOUNT ON;        IF OBJECT_ID('tempdb..#max_touch_pm', 'U') IS NOT NULL DROP TABLE #max_touch_pm    SELECT      ORD_NUM,     MAX(TOUCH_COUNT) AS MAX_TOUCH    INTO #max_touch_pm    FROM VISTA_REPORTING.dbo.PM_ORDERS    GROUP BY     ORD_NUM         IF OBJECT_ID('tempdb..#final_gh', 'U') IS NOT NULL DROP TABLE #final_gh    SELECT DISTINCT     oc.PM_ORD AS ORD_NUM,     t.MULTI_FUND_ID,     pr.[DEALING_DESK],     pm.PM,     t.TRD_COUNTERPARTY,     t.TRD_TRADER,     CONVERT(VARCHAR,t.TRD_TRADE_DATE,103) AS TRD_TRADE_DATE,     CONCAT(CONVERT(VARCHAR,t.EXECUTION_TIME,103),' ',CONVERT(VARCHAR,t.EXECUTION_TIME,108)) AS EXECUTION_TIME,     CONVERT(DECIMAL(15,2),t.TRD_PRICE) AS TRD_PRICE,     CONVERT(DECIMAL(21,2),SUM(ABS(NET_CONSIDERATION))) AS NET_CONSIDERATION,     --pm.COMMENTS_VALUE,     --pm.TRAN_TYPE,     --t.TRAN_TYPE AS TRADE_TRAN_TYPE,     CASE      WHEN t.[TRD_STATUS] = 'C' THEN 0     ELSE 1      END AS VG_16,     GETDATE() as VG_16_CREATETIME    INTO #final_gh    FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID=t.MULTI_FUND_ID    LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD=t.ORD_NUM    LEFT JOIN (SELECT po.ORD_NUM, PM FROM VISTA_REPORTING.dbo.PM_ORDERS po       INNER JOIN #max_touch_pm mt ON mt.ORD_NUM=po.ORD_NUM AND mt.MAX_TOUCH=po.TOUCH_COUNT) pm ON pm.ORD_NUM=oc.PM_ORD    WHERE t.FinalFlag = 1 and pr.DEALING_DESK = 'DMG'    GROUP BY      oc.PM_ORD,     t.TRD_COUNTERPARTY,     t.MULTI_FUND_ID,     pm.PM,     t.TRD_TRADER,     pr.[DEALING_DESK],     CONVERT(VARCHAR,t.TRD_TRADE_DATE,103),     CONCAT(CONVERT(VARCHAR,t.EXECUTION_TIME,103),' ',CONVERT(VARCHAR,t.EXECUTION_TIME,108)),     CONVERT(DECIMAL(15,2),t.TRD_PRICE),     t.[TRD_STATUS]        --Add records into FINAL_STATUS_UPDATE_TABLE    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    SELECT DISTINCT     CONCAT(MULTI_FUND_ID,'_16') AS ID,     '1B1' AS STATUS,     NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table    FROM #final_gh    WHERE VG_16 != 0        MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'DMG',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'DMG');        --Add records into AUDIT_TABLE    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    SELECT DISTINCT     gh.[MULTI_FUND_ID],     t.[ORD_NUM] AS TRD_ORD,     NULL AS PM_ORD,     'Gifts and Hospitality' AS Exception_Type,     CONCAT(gh.[MULTI_FUND_ID],'_16') AS ID,     NULL AS REASON,     NULL AS COMMENT,     'With C&A Reviewer' AS Status,     NULL AS ClientExecID,     'DMG' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     t.[TRD_TRADER] AS DEALER,     '1B1' AS STATUS_ID,     trd_o.[AUTH_TIME] AS ORD_AUTH,     t.[EXECUTION_TIME] AS TRADE_EXEC    INTO #temp_audit    FROM #final_gh gh    left join (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t    ON gh.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]    left join (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o    ON t.[ORD_NUM] = trd_o.[ORD_NUM]    WHERE gh.[VG_16] = 1         MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_DMG AS T    USING #temp_audit AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);            --Update G&H Table    IF OBJECT_ID('VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE', 'U') IS NULL     SELECT       MULTI_FUND_ID,      DEALING_DESK,       MAX(VG_16) AS VG_16,      MIN(VG_16_CREATETIME) AS VG_16_CREATETIME      INTO VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE      FROM #final_gh     GROUP BY       MULTI_FUND_ID,      DEALING_DESK    ELSE IF OBJECT_ID('tempdb..#temp_CP_table', 'U') IS NOT NULL      DROP TABLE #temp_CP_table     SELECT       MULTI_FUND_ID,      DEALING_DESK,       MAX(VG_16) AS VG_16,      MIN(VG_16_CREATETIME) AS VG_16_CREATETIME       INTO #temp_CP_table     FROM #final_gh     GROUP BY       MULTI_FUND_ID,      DEALING_DESK        MERGE VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_DMG_TABLE AS T     USING #temp_CP_table AS S    ON (T.MULTI_FUND_ID = S.MULTI_FUND_ID)    WHEN MATCHED     THEN UPDATE     SET       [MULTI_FUND_ID] = CASE WHEN S.VG_16 > T.VG_16 THEN S.[MULTI_FUND_ID] ELSE T.[MULTI_FUND_ID] END,      [DEALING_DESK] = CASE WHEN S.VG_16 > T.VG_16 THEN S.[DEALING_DESK] ELSE T.[DEALING_DESK] END,      [VG_16] = CASE WHEN S.VG_16 > T.VG_16 THEN S.[VG_16] ELSE T.[VG_16] END,      [VG_16_CREATETIME] = CASE WHEN S.VG_16 > T.VG_16 THEN S.[VG_16_CREATETIME] ELSE T.[VG_16_CREATETIME] END        WHEN NOT MATCHED     THEN     INSERT     ([MULTI_FUND_ID], [DEALING_DESK], [VG_16], [VG_16_CREATETIME])         VALUES     (S.[MULTI_FUND_ID], S.[DEALING_DESK], S.[VG_16], S.[VG_16_CREATETIME]) ;         IF OBJECT_ID('tempdb..#max_touch_pm', 'U') IS NOT NULL DROP TABLE #max_touch_pm     IF OBJECT_ID('tempdb..#final_gh', 'U') IS NOT NULL DROP TABLE #final_gh     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_16_GIFTS_AND_HOSPITALITY_FX  CreateDate: 2025-06-26 17:50:02.400  ModifyDate: 2025-06-26 17:50:02.400  --- DEFINITION START ---  -- =============================================    -- Author:  <Samad, Mehreen>    -- Create date: <04/07/2019>    -- Description:     -- <Gifts & Hospitality table for FX.>    -- =============================================        -- ***************VERSION CONTROL***************    --    -- *********************************************        CREATE PROCEDURE [dbo].[VG_16_GIFTS_AND_HOSPITALITY_FX]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        IF OBJECT_ID('tempdb..#max_touch_t', 'U') IS NOT NULL DROP TABLE #max_touch_t    SELECT DISTINCT      MULTI_FUND_ID,      MAX(TOUCH_COUNT) as MAX_TOUCH     INTO #max_touch_t    FROM VISTA_REPORTING.dbo.TRADES    GROUP BY MULTI_FUND_ID        IF OBJECT_ID('tempdb..#gh_ex', 'U') IS NOT NULL DROP TABLE #gh_ex    SELECT DISTINCT      fxt.[TRADE_ID],     fxo.[FXM_ORDER_ID],      CASE      WHEN fxt.[TRADE_STATUS] = 'Cancelled' THEN 0      ELSE 1      END AS VG_16,     CASE      WHEN fxt.[TRADE_STATUS] = 'Cancelled' THEN NULL      ELSE GETDATE()      END AS VG_16_CREATETIME,     'FX' as [DATA_SOURCE]    INTO #gh_ex    FROM VISTA_REPORTING.dbo.FX_TRADES fxt    left join (SELECT DISTINCT FXM_ORDER_ID FROM VISTA_REPORTING.dbo.FX_ORDERS) fxo    on fxt.[ORDER_ID] = fxo.[FXM_ORDER_ID]        UNION        SELECT DISTINCT     t.[MULTI_FUND_ID],     t.[ORD_NUM],     CASE      WHEN t.[TRD_STATUS] = 'C' THEN 0      ELSE 1      END AS VG_16,     CASE      WHEN t.[TRD_STATUS] = 'C' THEN NULL      ELSE GETDATE()      END AS VG_16_CREATETIME,     'AL' as [DATA_SOURCE]    FROM VISTA_REPORTING.dbo.TRADES t    inner join #max_touch_t mtt    on t.MULTI_FUND_ID = mtt.[MULTI_FUND_ID] and t.[TOUCH_COUNT] = mtt.[MAX_TOUCH]    left join (SELECT DISTINCT MULTI_FUND_ID, DEALING_DESK FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr    on t.[MULTI_FUND_ID] = pr.[MULTI_FUND_ID]    WHERE pr.[DEALING_DESK] = 'FX'        -- ==============================================================================    /* Adding to FINAL_STATUS_UPDATE_TABLE */    -- ==============================================================================        --Add records into FINAL_STATUS_UPDATE_TABLE    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    SELECT DISTINCT     CONCAT(TRADE_ID,'_16_',[DATA_SOURCE]) AS ID,     '1B1' AS STATUS,     NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table    FROM #gh_ex    WHERE VG_16 != 0        MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'FX',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'FX');        -- ==============================================================================    /* Adding to AUDIT_TABLE_FX */    -- ==============================================================================        IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    SELECT DISTINCT     ex.[TRADE_ID] AS TRANSACTION_NUMBER,     CASE       WHEN ex.[DATA_SOURCE] = 'AL' THEN t.[ORD_NUM]       WHEN ex.[DATA_SOURCE] = 'FX' THEN ex.[FXM_ORDER_ID]     ELSE NULL      END AS TRD_ORD,      ex.[FXM_ORDER_ID] AS ORDER_ID,     'Gifts & Hospitality' AS Exception_Type,     CONCAT(ex.[TRADE_ID],'_16_',[DATA_SOURCE]) AS ID,     NULL AS REASON,     NULL AS COMMENT,     'With C&A Reviewer' AS Status,     NULL AS ClientExecID,     'FX' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],tdd3.[FULL_NAME],tdd4.[FULL_NAME],dd.[DEFAULT_DEALER]) AS DEALER,     '1B1' AS STATUS_ID,     CASE       WHEN ex.[DATA_SOURCE] = 'AL' THEN trd_o.[AUTH_TIME]      WHEN ex.[DATA_SOURCE] = 'FX' THEN fxo.[INSTRUCTION_RECEIVED_DATE_TIME]     END AS ORD_AUTH,     CASE       WHEN ex.[DATA_SOURCE] = 'AL' THEN t.[EXECUTION_TIME]       WHEN ex.[DATA_SOURCE] = 'FX' THEN fxt.[EXECUTED_DATE_TIME]     END AS TRADE_EXEC    INTO #temp_audit    FROM #gh_ex ex    left join (SELECT DISTINCT TRADE_ID, ORDER_ID, EXECUTED_DATE_TIME, DEALT_BY, PULL_DATE, ACCEPTED_BY FROM VISTA_REPORTING.dbo.FX_TRADES) fxt    on ex.[TRADE_ID] = fxt.[TRADE_ID] and ex.[DATA_SOURCE] = 'FX'    left join (SELECT DISTINCT FXM_ORDER_ID, MIN(INSTRUCTION_RECEIVED_DATE_TIME) as INSTRUCTION_RECEIVED_DATE_TIME, MIN(PULL_DATE) AS PULL_DATE FROM VISTA_REPORTING.dbo.FX_ORDERS GROUP BY FXM_ORDER_ID) fxo    on ex.[FXM_ORDER_ID] = fxo.[FXM_ORDER_ID] and ex.[DATA_SOURCE] = 'FX'    left join (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER, PULL_DATE FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t    ON ex.[DATA_SOURCE] = 'AL' AND ex.TRADE_ID = t.[MULTI_FUND_ID]    left join (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o    ON t.[ORD_NUM] = trd_o.[ORD_NUM]     left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc    ON trd_o.[ORD_NUM] = oc.[TRD_ORD]    LEFT JOIN (SELECT DISTINCT ORD_NUM, PULL_DATE, TRADER FROM Vista_Reporting.dbo.PM_ORDERS) pm    on pm.ORD_NUM = oc.PM_ORD    left join  VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd    on tdd.[MG_USER_ID] = fxt.[DEALT_BY] AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2    on tdd2.[MG_USER_ID] = fxt.[ACCEPTED_BY] AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)    left join VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd3    on tdd3.[INITIALS]  = t.[TRD_TRADER] AND CAST(t.[PULL_DATE] AS DATE) BETWEEN CAST(tdd3.[DATE_FROM] AS DATE) AND CAST(tdd3.[DATE_TO] AS DATE)    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd4    on tdd4.[INITIALS] = pm.[TRADER] AND CAST(pm.[PULL_DATE] AS DATE) BETWEEN CAST(tdd4.[DATE_FROM] AS DATE) AND CAST(tdd4.[DATE_TO] AS DATE)    left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd     on dd.[REPORT_NAME] = 'Gifts & Hospitality' AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE],t.[PULL_DATE],pm.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)        WHERE ex.[VG_16] = 1        MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_FX AS T    USING #temp_audit AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);         -- ==============================================================================    /* Update Exceptions Table */    -- ==============================================================================        --Update G&H Table    IF      OBJECT_ID('VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE', 'U') IS NULL     SELECT *      INTO VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE      FROM #gh_ex    ELSE      IF OBJECT_ID('tempdb..#temp_CP_table', 'U') IS NOT NULL      DROP TABLE #temp_CP_table     SELECT *      INTO #TEMP_CP_TABLE     FROM #gh_ex        MERGE VISTA_STAGING.dbo.VG_16_GIFTS_AND_HOSPITALITY_FX_TABLE AS T     USING #TEMP_CP_TABLE AS S    ON (T.[TRADE_ID] = S.[TRADE_ID] AND T.[DATA_SOURCE] = S.[DATA_SOURCE])    WHEN MATCHED     THEN UPDATE     SET      [FXM_ORDER_ID] = CASE WHEN S.VG_16 > T.VG_16 THEN S.[FXM_ORDER_ID] ELSE T.[FXM_ORDER_ID] END,     [TRADE_ID] = CASE WHEN S.VG_16 > T.VG_16 THEN S.[TRADE_ID] ELSE T.[TRADE_ID] END,     [VG_16] = CASE WHEN S.VG_16 > T.VG_16 THEN S.[VG_16] ELSE T.[VG_16] END,     [VG_16_CREATETIME] = CASE WHEN S.VG_16 > T.VG_16 THEN S.[VG_16_CREATETIME] ELSE T.[VG_16_CREATETIME] END,     [DATA_SOURCE] = CASE WHEN S.VG_16 > T.VG_16 THEN S.[DATA_SOURCE] ELSE T.[DATA_SOURCE] END        WHEN NOT MATCHED     THEN     INSERT     ([FXM_ORDER_ID],     [TRADE_ID],     [VG_16],     [VG_16_CREATETIME],     [DATA_SOURCE])         VALUES     (S.[FXM_ORDER_ID],     S.[TRADE_ID],     S.[VG_16],     S.[VG_16_CREATETIME],     S.[DATA_SOURCE]) ;        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_17_COUNTERPARTY_DIRECTION_CASH  CreateDate: 2025-06-26 17:49:38.080  ModifyDate: 2025-06-26 17:49:38.080  --- DEFINITION START ---      -- =============================================    -- Author:  <da Costa, David>    -- Create date: <2019-06-12>    -- Description: <Build exceptionfor the Counterparty direction table for CASH     -- for the front end to display.>    -- Adapted from a previous version VG_17_COUNTERPARTY_DIRECTION_DMG    -- =============================================        -- ***************VERSION CONTROL***************    --2022-05-22, Matej Miter - Due to an error when running overnight process from Friday 20th Of May 2022 onward we have realised     --that our logic doesn't takes care of Pm orders with associated trade orders(from order cross table) but without trade executions (no records within trades table) therefore we    -- have implemented additional checks that prevent duplications on PM_ORDERS level and allow merging (This error is probably due to the client data where we receive PM orders and associated trade orders however missing data from trades)    --SG45362 - Manually created number to follow changes        --2022-11-28, Matej Miter - above issue has been persistent, however, previously implemented logic didn't handle removing of duplicated values where two records are identical.     -- We have now created an CTE table that can handle that, therefore, changed the above logic    --SG45363 -  Manually created number to follow changes        --2024-12-03, Matej Miter- Due to error when running overnight process on Mon and Tue (2nd and 3rd of Dec 2024) we implemented deduplication table for audit table     --as well as it seems we don't have control of data quality over M&G side anymore    --SG87372- Manually created to follow changes in the script    -- *********************************************        CREATE PROCEDURE [dbo].[VG_17_COUNTERPARTY_DIRECTION_CASH]     -- Add the parameters for the stored procedure here     -- @Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;             IF OBJECT_ID('tempdb..#temp_recent_dealer_al', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_al    select distinct oc.PM_ORD as ORD_NUM,     trd_trader     into #temp_recent_dealer_al     from VISTA_REPORTING.dbo.TRADES t     left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on oc.TRD_ORD = t.ORD_NUM     INNER JOIN (SELECT        OC.PM_ORD AS ORD_NUM,        MAX(EXECUTION_TIME) AS MAX_EXEC,        MAX(TOUCH_COUNT) AS MAX_TOUCH        FROM VISTA_REPORTING.dbo.TRADES T        LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS OC ON OC.TRD_ORD = T.ORD_NUM        GROUP BY OC.PM_ORD) T2 ON T2.ORD_NUM = OC.PM_ORD               AND T2.MAX_EXEC = t.EXECUTION_TIME              AND T2.MAX_TOUCH = t.TOUCH_COUNT            IF OBJECT_ID('tempdb..#temp_recent_dealer_cm', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_cm    SELECT DISTINCT    ct.ORDER_ID,           ct.DEALER_NAME    into #temp_recent_dealer_cm    FROM VISTA_REPORTING.dbo.CASH_TRADES ct    INNER JOIN (SELECT                   ORDER_ID,                  MAX(EXECUTED_DATETIME) AS MAX_EXEC,                  MAX(API_REQUESTED_DATE) AS MAX_API_REQ                  FROM VISTA_REPORTING.dbo.CASH_TRADES                  GROUP BY ORDER_ID) ct2 ON nullif(ct2.ORDER_ID, '0') = ct.ORDER_ID                                             AND ct2.MAX_EXEC = ct.EXECUTED_DATETIME                                            AND ct2.MAX_API_REQ = ct.API_REQUESTED_DATE        IF OBJECT_ID('tempdb..#cp_exception', 'U') IS NOT NULL DROP TABLE #cp_exception    SELECT DISTINCT     pm.ORD_NUM,     t.MULTI_FUND_ID AS TRANSACTION_NUMBER,     ISNULL(COMMENTS_VALUE,'') AS COMMENTS_VALUE,     CASE      WHEN t.MULTI_FUND_ID IS NULL THEN 0      WHEN pm.COMMENTS_VALUE like '%[a-zA-Z0-9]%' THEN 1 --If it contains any letters or numbers then 1 else 0      ELSE 0     END AS VG_17,        CASE       WHEN t.MULTI_FUND_ID IS NULL THEN 0            WHEN pm.COMMENTS_VALUE like '%[a-zA-Z0-9]%' THEN GETDATE()      ELSE NULL        END AS VG_17_CREATETIME,     'AL' AS [DATA_SOURCE]    INTO #cp_exception    FROM VISTA_REPORTING.dbo.PM_ORDERS pm     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD = pm.ORD_NUM     LEFT JOIN VISTA_STAGING.dbo.TRADES t ON t.ORD_NUM = oc.TRD_ORD    WHERE pm.DEALING_DESK = 'CASH'        UNION        SELECT DISTINCT     co.ORDER_ID,     ct.TRANSACTION_NUMBER,     ISNULL(co.CUSTOM_INSTRUCTION,'') AS COMMENTS_VALUE,     CASE      WHEN ct.TRANSACTION_NUMBER IS NULL THEN 0      WHEN co.CUSTOM_INSTRUCTION like '%[a-zA-Z0-9]%' THEN 1 --If it contains any letters or numbers then 1 else 0      ELSE 0     END AS VG_17,        CASE       WHEN ct.TRANSACTION_NUMBER IS NULL THEN 0            WHEN co.CUSTOM_INSTRUCTION like '%[a-zA-Z0-9]%' THEN GETDATE()      ELSE NULL        END AS VG_17_CREATETIME,     'CM' AS [DATA_SOURCE]    FROM VISTA_REPORTING.dbo.CASH_ORDERS co    LEFT JOIN VISTA_REPORTING.dbo.CASH_TRADES ct ON ct.ORDER_ID=co.ORDER_ID            -- Use #execution_exception_type to populate FINAL_STATUS_UPDATE_TABLE    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    SELECT DISTINCT        CONCAT(ORD_NUM,'_17_', [DATA_SOURCE]) AS ID,        '1B1' AS STATUS,         NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table    FROM #cp_exception    WHERE VG_17 = 1        MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table AS S    ON (T.ID = S.ID)    WHEN MATCHED        THEN UPDATE SET        T.ID=T.ID,        T.STATUS=T.STATUS,     T.DEALING_DESK = 'CASH',        T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED         THEN         INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)        VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'CASH');            --Add record into the AUDIT_TABLE    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    SELECT DISTINCT     ex.TRANSACTION_NUMBER,     NULL AS TRD_ORD,     ex.ORD_NUM AS ORDER_ID,     'Counterparty Direction' AS Exception_Type,     CONCAT(ex.ORD_NUM,'_17_', ex.[DATA_SOURCE]) AS ID,     NULL AS REASON,     NULL AS COMMENT,     'With C&A Reviewer' AS Status,     NULL AS ClientExecID,     'CASH' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME], CO.ACCEPTED_BY, CO.INSTRUCTED_BY) AS DEALER,     '1B1' AS STATUS_ID,     NULL AS ORD_AUTH,     NULL AS TRADE_EXEC    INTO #temp_audit    FROM #cp_exception ex    LEFT JOIN (SELECT DISTINCT ORDER_ID, ACCEPTED_BY, INSTRUCTED_BY, PULL_DATE FROM VISTA_REPORTING.dbo.CASH_ORDERS) co on co.ORDER_ID = ex.ORD_NUM    LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME, COMMENTS_VALUE, TRADER, PULL_DATE FROM VISTA_REPORTING.dbo.PM_ORDERS GROUP BY ORD_NUM,COMMENTS_VALUE, TRADER,PULL_DATE) pm    ON ex.ORD_NUM = pm.ORD_NUM     LEFT JOIN #temp_recent_dealer_al RAL ON RAL.ORD_NUM  = ex.ORD_NUM AND ex.data_SOURCE = 'AL'      LEFT JOIN #temp_recent_dealer_cm RCM ON RCM.ORDER_ID = ex.ORD_NUM AND ex.data_SOURCE = 'CM'      LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD ON ((TDD.MG_USER_ID  = RCM.DEALER_NAME AND ex.data_SOURCE = 'CM') OR (TDD.INITIALS = RAL.TRD_TRADER AND ex.data_SOURCE = 'AL'))  AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE) AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE)      LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD2 ON ((TDD2.MG_USER_ID  = COALESCE(CO.ACCEPTED_BY, CO.INSTRUCTED_BY) AND ex.DATA_SOURCE = 'CM') OR (TDD2.INITIALS = PM.TRADER AND ex.DATA_SOURCE = 'AL')) AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE)   AS DATE) BETWEEN CAST(TDD2.DATE_FROM AS DATE) AND CAST(TDD2.DATE_TO AS DATE)        WHERE VG_17 = 1;        --SG87372    with deduplication as    (    select *,ROW_NUMBER() over (partition by ID,transaction_number  order by ID,transaction_number,CREATE_TIME) as RN    from #temp_audit    )    delete from deduplication where RN <> 1    --End of --SG87372        MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_CASH AS T    USING #temp_audit AS S    ON (T.ID = S.ID AND T.TRANSACTION_NUMBER = S.TRANSACTION_NUMBER)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID, Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID, Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);                                     IF OBJECT_ID('VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE') IS NULL    SELECT DISTINCT        ORD_NUM,        'CASH' as Dealing_Desk,     COMMENTS_VALUE,     VG_17_CREATETIME,     VG_17,     [DATA_SOURCE]    INTO VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE    FROM #cp_exception        ELSE        IF OBJECT_ID('tempdb..#temp_cpe', 'U') IS NOT NULL DROP TABLE #temp_cpe    SELECT DISTINCT        ORD_NUM,        'CASH' as Dealing_Desk,     COMMENTS_VALUE,     VG_17_CREATETIME,     VG_17,     [DATA_SOURCE]        INTO #temp_cpe    FROM  #cp_exception;        --SG45363------------------------------------------------    --SG45362------------------------------------------------        with deduplication as    (    select *,ROW_NUMBER() over (partition by ord_num order by ord_num,VG_17_CREATETIME) as RN    from #temp_cpe    )    delete from deduplication where RN <> 1            --End of SG45362-------------------------------    --end of SG45363-------------------------------        MERGE VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_CASH_TABLE AS T    USING #temp_cpe AS S    ON (T.ORD_NUM = S.ORD_NUM and T.[DATA_SOURCE] = S.[DATA_SOURCE])    WHEN MATCHED        THEN         UPDATE SET             T.DEALING_DESK = S.DEALING_DESK,            T.VG_17 = CASE WHEN S.VG_17 > T.VG_17 THEN S.VG_17 ELSE T.VG_17 END,            T.VG_17_CREATETIME = CASE WHEN S.VG_17 > T.VG_17 THEN S.VG_17_CREATETIME ELSE T.VG_17_CREATETIME END,      T.COMMENTS_VALUE = S.COMMENTS_VALUE,      T.[DATA_SOURCE] = CASE WHEN S.VG_17 > T.VG_17 THEN S.[DATA_SOURCE] ELSE T.[DATA_SOURCE] END    WHEN NOT MATCHED         THEN INSERT (ORD_NUM, DEALING_DESK, VG_17, VG_17_CREATETIME, COMMENTS_VALUE, [DATA_SOURCE])             VALUES (S.ORD_NUM, S.DEALING_DESK, S.VG_17, S.VG_17_CREATETIME, S.COMMENTS_VALUE, S.[DATA_SOURCE]);        IF OBJECT_ID('tempdb..#cp_exception', 'U') IS NOT NULL DROP TABLE #cp_exception    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    IF OBJECT_ID('tempdb..#temp_cpe', 'U') IS NOT NULL DROP TABLE #temp_cpe        END                --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_17_COUNTERPARTY_DIRECTION_DMG  CreateDate: 2025-06-26 17:49:12.053  ModifyDate: 2025-06-26 17:49:12.053  --- DEFINITION START ---  CREATE PROCEDURE [dbo].[VG_17_COUNTERPARTY_DIRECTION_DMG]     -- Add the parameters for the stored procedure here     -- @Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;     IF OBJECT_ID('tempdb..#MAX_TOUCH_PM', 'U') IS NOT NULL DROP TABLE #MAX_TOUCH_PM     SELECT DISTINCT ORD_NUM,       MAX(TOUCH_COUNT) AS MAX_TOUCH       INTO #MAX_TOUCH_PM      FROM VISTA_REPORTING.DBO.PM_ORDERS      GROUP BY ORD_NUM             IF OBJECT_ID('tempdb..#cp_dir_exception', 'U') IS NOT NULL DROP TABLE #cp_dir_exception     SELECT DISTINCT       pm.ORD_NUM,       isnull(COMMENTS_VALUE,'') as COMMENTS_VALUE,       CASE        WHEN tr.MULTI_FUND_ID IS NOT NULL THEN         CASE          WHEN pm.COMMENTS_VALUE like '%[a-zA-Z0-9]%' THEN 1 --If it contains any letters or numbers then 1 else 0          ELSE 0          END         ELSE 0       END AS VG_17       --CASE       -- WHEN tr.MULTI_FUND_ID IS NOT NULL THEN       --  CASE       --   WHEN pm.COMMENTS_VALUE like '%[a-zA-Z0-9]%' THEN GETDATE() --If it contains any letters or numbers then 1 else 0       --   ELSE NULL       --  END        -- ELSE NULL       --      END AS CREATETIME     INTO #cp_dir_exception     FROM VISTA_REPORTING.dbo.PM_ORDERS pm     INNER JOIN #MAX_TOUCH_PM MT ON PM.TOUCH_COUNT = MT.MAX_TOUCH AND PM.ORD_NUM = MT.ORD_NUM     left join  VISTA_REPORTING.dbo.ORDERS_CROSS oc on oc.PM_ORD = pm.ORD_NUM     left join  VISTA_REPORTING.dbo.TRADES tr on tr.ORD_NUM = oc.TRD_ORD and tr.FinalFlag=1     WHERE pm.DEALING_DESK = 'DMG'             IF OBJECT_ID('tempdb..#execution_exception', 'U') IS NOT NULL DROP TABLE #execution_exception     SELECT       ORD_NUM,      COMMENTS_VALUE,      MAX(VG_17) AS VG_17,      CASE       WHEN MAX(VG_17) > 0 THEN GETDATE()       ELSE NULL      END AS CREATETIME     INTO #execution_exception     FROM #cp_dir_exception     GROUP BY ORD_NUM, COMMENTS_VALUE             -- Use #execution_exception_type to populate FINAL_STATUS_UPDATE_TABLE     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     select distinct      CONCAT(ORD_NUM,'_17') AS ID,      '1B1' AS STATUS,       NULL AS FINAL_UPDATED_TIME     into #temp_status_table     from #execution_exception     where VG_17 = 1         MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET        T.ID=T.ID,        T.STATUS=T.STATUS,       T.DEALING_DESK = 'DMG',        T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'DMG');             --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      NULL AS MULTI_FUND_ID,      NULL AS TRD_ORD,      pm.ORD_NUM AS PM_ORD,      'Counterparty Direction' AS Exception_Type,      CONCAT(ex.ORD_NUM,'_17') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'With C&A Reviewer' AS Status,      NULL AS ClientExecID,      'DMG' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      NULL AS DEALER,      '1B1' AS STATUS_ID,      pm.AUTH_TIME AS ORD_AUTH,      NULL AS TRADE_EXEC     INTO #temp_audit     FROM #execution_exception ex     LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.PM_ORDERS GROUP BY ORD_NUM) pm     ON ex.ORD_NUM = pm.ORD_NUM     WHERE VG_17 = 1             MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_DMG AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);                                            IF OBJECT_ID('VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE') IS NULL               select distinct                 ORD_NUM,                 'DMG' as Dealing_Desk,        --COMMENTS_VALUE,        CREATETIME,        VG_17           into VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE           from  #execution_exception               ELSE               IF OBJECT_ID('tempdb..#temp_TEE', 'U') IS NOT NULL DROP TABLE #temp_TEE               select distinct                 ORD_NUM,                 'DMG' as Dealing_Desk,        --COMMENTS_VALUE,        CREATETIME,        VG_17                   into #temp_tee           from  #execution_exception               MERGE VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_DMG_TABLE AS T           USING #temp_TEE AS S           ON (T.ORD_NUM = S.ORD_NUM)           WHEN MATCHED                 THEN                  UPDATE SET                         T.DEALING_DESK = S.DEALING_DESK,                        T.VG_17 = CASE WHEN S.VG_17 > T.VG_17 THEN S.VG_17 ELSE T.VG_17 END,                        T.CREATETIME = CASE WHEN S.VG_17 > T.VG_17 THEN S.CREATETIME ELSE T.CREATETIME END           WHEN NOT MATCHED                  THEN INSERT (ORD_NUM, DEALING_DESK, VG_17, CREATETIME)                      VALUES (S.ORD_NUM, S.DEALING_DESK, S.VG_17, S.CREATETIME);         IF OBJECT_ID('tempdb..#MAX_TOUCH_PM', 'U') IS NOT NULL DROP TABLE #MAX_TOUCH_PM     IF OBJECT_ID('tempdb..#cp_dir_exception', 'U') IS NOT NULL DROP TABLE #cp_dir_exception     IF OBJECT_ID('tempdb..#execution_exception', 'U') IS NOT NULL DROP TABLE #execution_exception     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit        END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_17_COUNTERPARTY_DIRECTION_FX  CreateDate: 2025-06-26 17:49:02.133  ModifyDate: 2025-06-26 17:49:02.133  --- DEFINITION START ---  -- =============================================    -- Author:  <Samad, Mehreen>    -- Create date: <04/07/2019>    -- Description:     -- <Counterparty Direction table for FX.>    -- =============================================        -- ***************VERSION CONTROL***************    --    -- *********************************************        CREATE PROCEDURE [dbo].[VG_17_COUNTERPARTY_DIRECTION_FX]    AS    BEGIN    -- SET NOCOUNT ON added to prevent extra result sets from    -- interfering with SELECT statements.    SET NOCOUNT ON;        IF OBJECT_ID('tempdb..#max_touch_pm', 'U') IS NOT NULL DROP TABLE #max_touch_pm    SELECT DISTINCT      ORD_NUM,      MAX(TOUCH_COUNT) as MAX_TOUCH     INTO #max_touch_pm    FROM VISTA_REPORTING.dbo.PM_ORDERS    GROUP BY ORD_NUM        IF OBJECT_ID('tempdb..#cp_temp', 'U') IS NOT NULL DROP TABLE #cp_temp    SELECT DISTINCT     fxo.[FXM_ORDER_ID] as ORDER_ID,     fxt.[TRADE_ID],     ISNULL(fxo.[FM_COMMENTS],'') AS COMMENTS_VALUE,     CASE      WHEN fxt.[TRADE_ID] IS NULL THEN 0      WHEN fxo.[FM_COMMENTS] like '%[a-zA-Z0-9]%' THEN 1 --If it contains any letters or numbers then 1 else 0     ELSE 0     END AS VG_17,        CASE       WHEN fxt.[TRADE_ID] IS NULL THEN NULL            WHEN fxo.[FM_COMMENTS] like '%[a-zA-Z0-9]%' THEN GETDATE()     ELSE NULL        END AS VG_17_CREATETIME,     'FX' AS [DATA_SOURCE]    INTO #cp_temp    FROM VISTA_REPORTING.dbo.FX_ORDERS fxo    left join (SELECT DISTINCT ORDER_ID, TRADE_ID FROM VISTA_REPORTING.dbo.FX_TRADES) fxt    on fxo.[FXM_ORDER_ID] = fxt.[ORDER_ID]        UNION        SELECT DISTINCT     pm.[ORD_NUM],     t.[MULTI_FUND_ID],     ISNULL(pm.[COMMENTS_VALUE],'') AS COMMENTS_VALUE,     CASE      WHEN t.[MULTI_FUND_ID] IS NULL THEN 0      WHEN pm.[COMMENTS_VALUE] like '%[a-zA-Z0-9]%' THEN 1 --If it contains any letters or numbers then 1 else 0     ELSE 0     END AS VG_17,        CASE       WHEN t.[MULTI_FUND_ID] IS NULL THEN NULL            WHEN pm.[COMMENTS_VALUE] like '%[a-zA-Z0-9]%' THEN GETDATE()     ELSE NULL        END AS VG_17_CREATETIME,     'AL' AS [DATA_SOURCE]    FROM VISTA_REPORTING.dbo.PM_ORDERS pm    inner join #max_touch_pm mtt    on pm.[ORD_NUM] = mtt.[ORD_NUM] and pm.[TOUCH_COUNT] = mtt.[MAX_TOUCH]    left join VISTA_REPORTING.dbo.ORDERS_CROSS oc    on oc.[PM_ORD] = pm.[ORD_NUM]    left join VISTA_STAGING.dbo.TRADES t     on t.[ORD_NUM] = oc.[TRD_ORD]    WHERE pm.DEALING_DESK = 'FX'            IF OBJECT_ID('tempdb..#cp_ex', 'U') IS NOT NULL DROP TABLE #cp_ex    SELECT DISTINCT     ORDER_ID,     VG_17,     VG_17_CREATETIME,     [DATA_SOURCE]    INTO #cp_ex    FROM #cp_temp            -- ==============================================================================    /* Adding to FINAL_STATUS_UPDATE_TABLE */    -- ==============================================================================        --Add records into FINAL_STATUS_UPDATE_TABLE    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    SELECT DISTINCT     CONCAT([ORDER_ID],'_17_',[DATA_SOURCE]) AS ID,     '1B1' AS STATUS,     NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table    FROM #cp_ex    WHERE VG_17 != 0        MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'FX',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'FX');        -- ==============================================================================    /* Adding to AUDIT_TABLE_FX */    -- ==============================================================================        IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    SELECT DISTINCT     null AS TRANSACTION_NUMBER,     null as TRD_ORD,      ex.[ORDER_ID] AS ORDER_ID,     'Counterparty Direction' AS Exception_Type,     CONCAT(ex.[ORDER_ID],'_17_',ex.[DATA_SOURCE]) AS ID,     NULL AS REASON,     NULL AS COMMENT,     'With C&A Reviewer' AS Status,     NULL AS ClientExecID,     'FX' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     COALESCE(tdd.FULL_NAME,dd.DEFAULT_DEALER) as DEALER,     '1B1' AS STATUS_ID,     CASE       WHEN ex.[DATA_SOURCE] = 'AL' THEN trd_o.[AUTH_TIME]      WHEN ex.[DATA_SOURCE] = 'FX' THEN MIN(fxo.[INSTRUCTION_RECEIVED_DATE_TIME])     END AS ORD_AUTH,     null AS TRADE_EXEC    INTO #temp_audit    FROM #cp_ex ex    left join (SELECT DISTINCT TRADE_ID, ORDER_ID, EXECUTED_DATE_TIME, DEALT_BY, PULL_DATE FROM VISTA_REPORTING.dbo.FX_TRADES) fxt    on ex.[ORDER_ID] = fxt.[ORDER_ID] and ex.[DATA_SOURCE] = 'FX'    left join (SELECT DISTINCT FXM_ORDER_ID, MIN(INSTRUCTION_RECEIVED_DATE_TIME) as INSTRUCTION_RECEIVED_DATE_TIME, PULL_DATE FROM VISTA_REPORTING.dbo.FX_ORDERS GROUP BY FXM_ORDER_ID, PULL_DATE) fxo    on ex.[ORDER_ID] = fxo.[FXM_ORDER_ID] and ex.[DATA_SOURCE] = 'FX'    left join (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER, PULL_DATE FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t    ON ex.[DATA_SOURCE] = 'AL' AND ex.[ORDER_ID] = t.[ORD_NUM]    left join (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o    ON t.[ORD_NUM] = trd_o.[ORD_NUM]     left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc    ON trd_o.[ORD_NUM] = oc.[TRD_ORD]    left join (SELECT DISTINCT pm.ORD_NUM, TRADER, TOUCH_COUNT, PULL_DATE FROM VISTA_REPORTING.dbo.PM_ORDERS pm    inner join #max_touch_pm mtp on mtp.ORD_NUM = pm.ORD_NUM AND MTP.MAX_TOUCH = PM.TOUCH_COUNT) pm    on oc.PM_ORD = pm.ORD_NUM    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd     on (tdd.[DEALING_DESK] = 'FX' and tdd.[MG_USER_ID] = fxt.[DEALT_BY] and ex.[DATA_SOURCE] = 'FX' AND CAST(fxt.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE))     or (tdd.[DEALING_DESK] = 'FX' and tdd.[INITIALS] = COALESCE(t.[TRD_TRADER],pm.[TRADER]) and ex.[DATA_SOURCE] = 'AL' AND CAST(COALESCE(t.[PULL_DATE],pm.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE))     left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd     on CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE],t.[PULL_DATE],pm.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)    WHERE ex.[VG_17] = 1    GROUP BY ex.ORDER_ID,       COALESCE(tdd.FULL_NAME,dd.DEFAULT_DEALER),       trd_o.[AUTH_TIME],       ex.DATA_SOURCE            MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_FX AS T    USING #temp_audit AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);         -- ==============================================================================    /* Update Exceptions Table */    -- ==============================================================================        --Update VG Table    IF      OBJECT_ID('VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE', 'U') IS NULL     SELECT *      INTO VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE      FROM #cp_ex    ELSE      IF OBJECT_ID('tempdb..#temp_CP_table', 'U') IS NOT NULL      DROP TABLE #temp_CP_table     SELECT *      INTO #TEMP_CP_TABLE     FROM #cp_ex        MERGE VISTA_STAGING.dbo.VG_17_COUNTERPARTY_DIRECTION_FX_TABLE AS T     USING #TEMP_CP_TABLE AS S    ON (T.[ORDER_ID] = S.[ORDER_ID] AND T.[DATA_SOURCE] = S.[DATA_SOURCE])    WHEN MATCHED     THEN UPDATE     SET      [ORDER_ID] = CASE WHEN S.VG_17 > T.VG_17 THEN S.[ORDER_ID] ELSE T.[ORDER_ID] END,     [VG_17] = CASE WHEN S.VG_17 > T.VG_17 THEN S.[VG_17] ELSE T.[VG_17] END,     [VG_17_CREATETIME] = CASE WHEN S.VG_17 > T.VG_17 THEN S.[VG_17_CREATETIME] ELSE T.[VG_17_CREATETIME] END,     [DATA_SOURCE] = CASE WHEN S.VG_17 > T.VG_17 THEN S.[DATA_SOURCE] ELSE T.[DATA_SOURCE] END        WHEN NOT MATCHED     THEN     INSERT     ([ORDER_ID],     [VG_17],     [VG_17_CREATETIME],     [DATA_SOURCE])         VALUES     (S.[ORDER_ID],     S.[VG_17],     S.[VG_17_CREATETIME],     S.[DATA_SOURCE]) ;        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_19_PT_AMENDMENT_FLAG_DMG  CreateDate: 2025-06-26 17:48:14.563  ModifyDate: 2025-06-26 17:48:14.563  --- DEFINITION START ---  -- =============================================    -- Author:  <Pertsinis, Athanasios>    -- Create date: <01/10/2019>    -- Description: Report to capture all Post Trade amendments     --    These include amendments done by users other     --    than dealers on the desk    -- =============================================        -- ***************VERSION CONTROL***************    --     -- *********************************************        CREATE PROCEDURE [dbo].[VG_19_PT_AMENDMENT_FLAG_DMG]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;             IF OBJECT_ID('tempdb..#temp_amend', 'U') IS NOT NULL DROP TABLE #temp_amend     SELECT DISTINCT     pm.ORD_NUM,     T.MULTI_FUND_ID,     T.TOUCH_COUNT,     PR.DEALING_DESK,     1 AS AMENDMENT_FLAG,     T.trd_amend_type,     GETDATE() AS AMENDMENT_FLAG_CREATETIME,     --T.TRD_TRADER,     --T.TRD_COUNTERPARTY,     --CONCAT(CONVERT(VARCHAR(50),TRD.SM_SEC_GROUP), CONVERT(VARCHAR(30), TRD.SM_SEC_TYPE)) AS ASSET_TYPE_SUBTYPE,     --T.EXECUTION_TYPE_DECODE,     --CONCAT(CONVERT(VARCHAR(20), YEAR(T.TRD_AUTH_TIME)) , '-', CONVERT(VARCHAR(20), MONTH(T.TRD_AUTH_TIME))) AS MONTH_YEAR,     --PR.INST_TYPE,     --TRD.SM_SEC_GROUP,     --DC1.[VALUE] AS TRD_PURPOSE,     CASE WHEN post_trade_amendmentflag = 1 THEN 1 ELSE 0 END AS VG_19,     CASE WHEN post_trade_amendmentflag = 1 THEN GETDATE() ELSE NULL END AS EXCEPTION_FLAG_CREATETIME     INTO #temp_amend     FROM VISTA_REPORTING.dbo.TRADES T     LEFT JOIN( SELECT DISTINCT ORD_NUM, DEALING_DESK, SM_SEC_GROUP, SM_SEC_TYPE FROM  VISTA_REPORTING.dbo.TRD_ORDERS) TRD ON TRD.ORD_NUM=T.ORD_NUM     left join (SELECT INST_TYPE, MULTI_FUND_ID, DEALING_DESK FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE ) pr on pr.MULTI_FUND_ID=t.MULTI_FUND_ID     LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.TRD_ORD = TRD.ORD_NUM     LEFT JOIN (SELECT ORD_NUM FROM VISTA_REPORTING.DBO.PM_ORDERS) PM ON OC.PM_ORD = PM.ORD_NUM     --LEFT JOIN (SELECT DISTINCT TAG_NAME, VALUE, CODE FROM VISTA_REPORTING.DBO.DECODES) DC1 ON DC1.TAG_NAME = 'TRDPURPOSE' AND DC1.CODE = T.TRD_PURPOSE     WHERE PR.DEALING_DESK = 'DMG'      AND  (post_trade_amendmentflag = 1) --flag captures post trade amendments               IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     select distinct      CONCAT(MULTI_FUND_ID,'_19',TOUCH_COUNT) AS ID,      '1B1' AS STATUS,      NULL AS FINAL_UPDATED_TIME     into #temp_status_table     from #temp_amend     where VG_19 != 0         MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET       T.ID=T.ID,       T.STATUS=T.STATUS,       T.DEALING_DESK = 'DMG',       T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'DMG');        --Add record into the AUDIT_TABLE    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    SELECT DISTINCT     ex.MULTI_FUND_ID AS MULTI_FUND_ID,     t.ORD_NUM AS TRD_ORD,     NULL AS PM_ORD,     'Post Trade Amendment Analysis' AS Exception_Type,     CONCAT(ex.MULTI_FUND_ID,'_19',ex.TOUCH_COUNT) AS ID,     NULL AS REASON,     NULL AS COMMENT,     'With C&A Reviewer' AS Status,     NULL AS ClientExecID,     'DMG' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     TRD_TRADER AS DEALER,     '1B1' AS STATUS_ID,     NULL AS ORD_AUTH,     EXECUTION_TIME AS TRADE_EXEC    INTO #temp_audit    FROM #temp_amend ex    LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, TOUCH_COUNT, TRD_TRADER, EXECUTION_TIME FROM VISTA_REPORTING.dbo.TRADES ) t    ON ex.MULTI_FUND_ID = t.MULTI_FUND_ID AND ex.TOUCH_COUNT = t.TOUCH_COUNT    where AMENDMENT_FLAG > 0        MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_DMG AS T    USING #temp_audit AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);                IF OBJECT_ID('VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_DMG_TABLE', 'U') IS NULL        SELECT DISTINCT     MULTI_FUND_ID,     TOUCH_COUNT,     DEALING_DESK,     AMENDMENT_FLAG,     trd_amend_type,     AMENDMENT_FLAG_CREATETIME,     VG_19,     EXCEPTION_FLAG_CREATETIME    INTO VISTA_STAGING.DBO.VG_19_PT_AMENDMENT_FLAG_DMG_TABLE    FROM #temp_amend        else        IF OBJECT_ID('tempdb..#temp_AMENDFLAG_table', 'U') IS NOT NULL DROP TABLE #temp_AMENDFLAG_table    SELECT DISTINCT     MULTI_FUND_ID,     TOUCH_COUNT,     DEALING_DESK,     AMENDMENT_FLAG,     trd_amend_type,     AMENDMENT_FLAG_CREATETIME,     VG_19,     EXCEPTION_FLAG_CREATETIME     INTO #TEMP_AMENDFLAG_TABLE    FROM #temp_amend        MERGE VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_DMG_TABLE AS T     USING #TEMP_AMENDFLAG_TABLE AS S    ON (T.MULTI_FUND_ID = S.MULTI_FUND_ID     AND T.TOUCH_COUNT = S.TOUCH_COUNT)    WHEN MATCHED    THEN UPDATE    SET         MULTI_FUND_ID= CASE WHEN S.VG_19 > T.VG_19 THEN S.MULTI_FUND_ID ELSE T.MULTI_FUND_ID END,    TOUCH_COUNT= CASE WHEN S.VG_19 > T.VG_19 THEN S.TOUCH_COUNT ELSE T.TOUCH_COUNT END,    DEALING_DESK= CASE WHEN S.VG_19 > T.VG_19 THEN S.DEALING_DESK ELSE T.DEALING_DESK END,    AMENDMENT_FLAG= CASE WHEN S.VG_19 > T.VG_19 THEN S.AMENDMENT_FLAG ELSE T.AMENDMENT_FLAG END,    trd_amend_type= CASE WHEN S.VG_19 > T.VG_19 THEN S.trd_amend_type ELSE T.trd_amend_type END,    AMENDMENT_FLAG_CREATETIME= CASE WHEN S.VG_19 > T.VG_19 THEN S.AMENDMENT_FLAG_CREATETIME ELSE T.AMENDMENT_FLAG_CREATETIME END,    --TRD_TRADER= CASE WHEN S.VG_19 > T.VG_19 THEN S.TRD_TRADER ELSE T.TRD_TRADER END,    --TRD_COUNTERPARTY= CASE WHEN S.VG_19 > T.VG_19 THEN S.TRD_COUNTERPARTY ELSE T.TRD_COUNTERPARTY END,    --ASSET_TYPE_SUBTYPE= CASE WHEN S.VG_19 > T.VG_19 THEN S.ASSET_TYPE_SUBTYPE ELSE T.ASSET_TYPE_SUBTYPE END,    --EXECUTION_TYPE_DECODE= CASE WHEN S.VG_19 > T.VG_19 THEN S.EXECUTION_TYPE_DECODE ELSE T.EXECUTION_TYPE_DECODE END,    --MONTH_YEAR= CASE WHEN S.VG_19 > T.VG_19 THEN S.MONTH_YEAR ELSE T.MONTH_YEAR END,    --INST_TYPE= CASE WHEN S.VG_19 > T.VG_19 THEN S.INST_TYPE ELSE T.INST_TYPE END,    --SM_SEC_GROUP= CASE WHEN S.VG_19 > T.VG_19 THEN S.SM_SEC_GROUP ELSE T.SM_SEC_GROUP END,    --TRD_PURPOSE= CASE WHEN S.VG_19 > T.VG_19 THEN S.TRD_PURPOSE ELSE T.TRD_PURPOSE END,    VG_19= CASE WHEN S.VG_19 > T.VG_19 THEN S.VG_19 ELSE T.VG_19 END,    EXCEPTION_FLAG_CREATETIME= CASE WHEN S.VG_19 > T.VG_19 THEN S.EXCEPTION_FLAG_CREATETIME ELSE T.EXCEPTION_FLAG_CREATETIME END        WHEN NOT MATCHED    THEN INSERT    (MULTI_FUND_ID    ,TOUCH_COUNT    ,DEALING_DESK    ,AMENDMENT_FLAG    ,trd_amend_type    ,AMENDMENT_FLAG_CREATETIME    --,TRD_TRADER    --,TRD_COUNTERPARTY    --,ASSET_TYPE_SUBTYPE    --,EXECUTION_TYPE_DECODE    --,MONTH_YEAR    --,INST_TYPE    --,SM_SEC_GROUP    --,TRD_PURPOSE    ,VG_19    ,EXCEPTION_FLAG_CREATETIME)        VALUES     (S.MULTI_FUND_ID    ,S.TOUCH_COUNT    ,S.DEALING_DESK    ,S.AMENDMENT_FLAG    ,S.trd_amend_type    ,S.AMENDMENT_FLAG_CREATETIME    --,S.TRD_TRADER    --,S.TRD_COUNTERPARTY    --,S.ASSET_TYPE_SUBTYPE    --,S.EXECUTION_TYPE_DECODE    --,S.MONTH_YEAR    --,S.INST_TYPE    --,S.SM_SEC_GROUP    --,S.TRD_PURPOSE    ,S.VG_19    ,S.EXCEPTION_FLAG_CREATETIME);             IF OBJECT_ID('tempdb..#temp_amend', 'U') IS NOT NULL DROP TABLE #temp_amend     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     IF OBJECT_ID('tempdb..#temp_AMENDFLAG_table', 'U') IS NOT NULL DROP TABLE #temp_AMENDFLAG_table        END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_19_PT_AMENDMENT_FLAG_EQ  CreateDate: 2025-06-26 17:48:03.177  ModifyDate: 2025-06-26 17:48:03.177  --- DEFINITION START ---  -- =============================================    -- Author:  <Pertsinis, Athanasios>    -- Create date: <01/10/2019>    -- Description: Report to capture all Post Trade amendments     --    These include amendments done by users other     --    than dealers on the desk    -- =============================================        -- ***************VERSION CONTROL***************    --     -- *********************************************        CREATE PROCEDURE [dbo].[VG_19_PT_AMENDMENT_FLAG_EQ]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         IF OBJECT_ID('tempdb..#temp_amend', 'U') IS NOT NULL DROP TABLE #temp_amend     SELECT DISTINCT     t.MULTI_FUND_ID,     t.TOUCH_COUNT,     tr.DEALING_DESK,     1 AS AMENDMENT_FLAG,     GETDATE() AS AMENDMENT_FLAG_CREATETIME     INTO #temp_amend     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS tr ON tr.ORD_NUM=t.ORD_NUM     WHERE tr.DEALING_DESK = 'Equity'     AND  (post_trade_amendmentflag = 1) --flag captures post trade amendments           -- Use #temp_nav to populate FINAL_STATUS_UPDATE_TABLE           IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table           select distinct                 CONCAT(MULTI_FUND_ID,'_19',TOUCH_COUNT) AS ID,                 '1B1' AS STATUS,                 NULL AS FINAL_UPDATED_TIME           into #temp_status_table           from #temp_amend           where AMENDMENT_FLAG > 0                      MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T           USING #temp_status_table AS S           ON (T.ID = S.ID)           WHEN MATCHED                 THEN                  UPDATE SET                        T.ID=T.ID,                        T.STATUS=T.STATUS,         T.DEALING_DESK = 'Equity',                        T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME           WHEN NOT MATCHED                  THEN                  INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)                 VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'Equity');             --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      ex.MULTI_FUND_ID AS MULTI_FUND_ID,      t.ORD_NUM AS TRD_ORD,      NULL AS PM_ORD,      'Post Trade Amendment Analysis' AS Exception_Type,      CONCAT(ex.MULTI_FUND_ID,'_19',ex.TOUCH_COUNT) AS ID,      NULL AS REASON,      NULL AS COMMENT,      'With C&A Reviewer' AS Status,      NULL AS ClientExecID,      'Equity' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      TRD_TRADER AS DEALER,      '1B1' AS STATUS_ID,      NULL AS ORD_AUTH,      EXECUTION_TIME AS TRADE_EXEC     INTO #temp_audit     FROM #temp_amend ex     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, TOUCH_COUNT, TRD_TRADER, EXECUTION_TIME FROM VISTA_REPORTING.dbo.TRADES ) t     ON ex.MULTI_FUND_ID = t.MULTI_FUND_ID AND ex.TOUCH_COUNT = t.TOUCH_COUNT     where AMENDMENT_FLAG > 0          MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);           IF OBJECT_ID('VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_EQ_TABLE', 'U') IS NULL         SELECT *     INTO VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_EQ_TABLE     FROM #temp_amend         ELSE              IF OBJECT_ID('tempdb..#temp_a_eq_table', 'U') IS NOT NULL DROP TABLE #temp_a_eq_table         SELECT DISTINCT      *     INTO #temp_a_eq_table     FROM #temp_amend         MERGE VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_EQ_TABLE AS T     USING #temp_a_eq_table AS S     ON (T.MULTI_FUND_ID=S.MULTI_FUND_ID      AND T.TOUCH_COUNT = S.TOUCH_COUNT)     WHEN MATCHED      THEN      UPDATE SET       T.DEALING_DESK = S.DEALING_DESK,       T.AMENDMENT_FLAG = CASE WHEN S.AMENDMENT_FLAG > T.AMENDMENT_FLAG THEN S.AMENDMENT_FLAG ELSE T.AMENDMENT_FLAG END,       T.AMENDMENT_FLAG_CREATETIME = CASE WHEN S.AMENDMENT_FLAG > T.AMENDMENT_FLAG THEN S.AMENDMENT_FLAG_CREATETIME ELSE T.AMENDMENT_FLAG_CREATETIME END     WHEN NOT MATCHED      THEN INSERT (MULTI_FUND_ID, TOUCH_COUNT, DEALING_DESK, AMENDMENT_FLAG, AMENDMENT_FLAG_CREATETIME)        VALUES (S.MULTI_FUND_ID, S.TOUCH_COUNT, S.DEALING_DESK, S.AMENDMENT_FLAG, S.AMENDMENT_FLAG_CREATETIME);         IF OBJECT_ID('tempdb..#temp_amend', 'U') IS NOT NULL DROP TABLE #temp_amend        IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     IF OBJECT_ID('tempdb..#temp_a_eq_table', 'U') IS NOT NULL DROP TABLE #temp_a_eq_table           END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_19_PT_AMENDMENT_FLAG_FI  CreateDate: 2025-06-26 17:47:51.670  ModifyDate: 2025-06-26 17:47:51.670  --- DEFINITION START ---  -- =============================================    -- Author:  <da Costa, David>    -- Create date: <29/11/2017>    -- Description:     -- =============================================        -- ***************VERSION CONTROL***************    -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.    -- *********************************************        CREATE PROCEDURE [dbo].[VG_19_PT_AMENDMENT_FLAG_FI]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;          IF OBJECT_ID('tempdb..#temp_amend', 'U') IS NOT NULL DROP TABLE #temp_amend     SELECT DISTINCT     t.MULTI_FUND_ID,     t.TOUCH_COUNT,     tr.DEALING_DESK,     1 AS AMENDMENT_FLAG,     GETDATE() AS AMENDMENT_FLAG_CREATETIME     INTO #temp_amend     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS tr ON tr.ORD_NUM=t.ORD_NUM     WHERE tr.DEALING_DESK = 'Fixed Income'     AND  (Post_trade_AmendmentFlag = 1)          -- Use #temp_nav to populate FINAL_STATUS_UPDATE_TABLE           IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table           select distinct                 CONCAT(MULTI_FUND_ID,'_19',TOUCH_COUNT) AS ID,                 '1B1' AS STATUS,                 NULL AS FINAL_UPDATED_TIME           into #temp_status_table           from #temp_amend           where AMENDMENT_FLAG > 0                      MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T           USING #temp_status_table AS S           ON (T.ID = S.ID)           WHEN MATCHED                 THEN                  UPDATE SET                        T.ID=T.ID,                        T.STATUS=T.STATUS,         T.DEALING_DESK = 'Fixed Income',                        T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME           WHEN NOT MATCHED                  THEN                  INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)                 VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'Fixed Income');         --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      ex.MULTI_FUND_ID AS MULTI_FUND_ID,      t.ORD_NUM AS TRD_ORD,      NULL AS PM_ORD,      'Post Trade Amendment Analysis' AS Exception_Type,      CONCAT(ex.MULTI_FUND_ID,'_19',ex.TOUCH_COUNT) AS ID,      NULL AS REASON,      NULL AS COMMENT,      'With C&A Reviewer' AS Status,      NULL AS ClientExecID,      'Fixed Income' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      TRD_TRADER AS DEALER,      '1B1' AS STATUS_ID,      NULL AS ORD_AUTH,      EXECUTION_TIME AS TRADE_EXEC     INTO #temp_audit     FROM #temp_amend ex     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, TOUCH_COUNT, TRD_TRADER, EXECUTION_TIME FROM VISTA_REPORTING.dbo.TRADES ) t     ON ex.MULTI_FUND_ID = t.MULTI_FUND_ID AND ex.TOUCH_COUNT = t.TOUCH_COUNT     where AMENDMENT_FLAG > 0          MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);             IF OBJECT_ID('VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_FI_TABLE', 'U') IS NULL         SELECT *     INTO VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_FI_TABLE     FROM #temp_amend         ELSE          IF OBJECT_ID('tempdb..#temp_a_fi_table', 'U') IS NOT NULL DROP TABLE #temp_a_fi_table         SELECT DISTINCT      *     INTO #temp_a_fi_table     FROM #temp_amend         MERGE VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_FI_TABLE AS T     USING #temp_a_fi_table AS S     ON (T.MULTI_FUND_ID=S.MULTI_FUND_ID      AND T.TOUCH_COUNT = S.TOUCH_COUNT)     WHEN MATCHED      THEN      UPDATE SET       T.DEALING_DESK = S.DEALING_DESK,       T.AMENDMENT_FLAG = CASE WHEN S.AMENDMENT_FLAG > T.AMENDMENT_FLAG THEN S.AMENDMENT_FLAG ELSE T.AMENDMENT_FLAG END,       T.AMENDMENT_FLAG_CREATETIME = CASE WHEN S.AMENDMENT_FLAG > T.AMENDMENT_FLAG THEN S.AMENDMENT_FLAG_CREATETIME ELSE T.AMENDMENT_FLAG_CREATETIME END     WHEN NOT MATCHED      THEN INSERT (MULTI_FUND_ID, TOUCH_COUNT, DEALING_DESK, AMENDMENT_FLAG, AMENDMENT_FLAG_CREATETIME)        VALUES (S.MULTI_FUND_ID, S.TOUCH_COUNT, S.DEALING_DESK, S.AMENDMENT_FLAG, S.AMENDMENT_FLAG_CREATETIME);            IF OBJECT_ID('tempdb..#temp_amend', 'U') IS NOT NULL DROP TABLE #temp_amend           IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     IF OBJECT_ID('tempdb..#temp_a_fi_table', 'U') IS NOT NULL DROP TABLE #temp_a_fi_table        END                --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_19_PT_AMENDMENT_FLAG_LL  CreateDate: 2025-06-26 17:47:14.960  ModifyDate: 2025-06-26 17:47:14.960  --- DEFINITION START ---  -- =============================================    -- Author:  <Pertsinis, Athanasios>    -- Create date: <01/10/2019>    -- Description: Report to capture all Post Trade amendments     --    These include amendments done by users other     --    than dealers on the desk    -- =============================================        -- ***************VERSION CONTROL***************    --     -- *********************************************        CREATE PROCEDURE [dbo].[VG_19_PT_AMENDMENT_FLAG_LL]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;          IF OBJECT_ID('tempdb..#temp_amend', 'U') IS NOT NULL DROP TABLE #temp_amend     SELECT DISTINCT     t.MULTI_FUND_ID,     t.TOUCH_COUNT,     tr.DEALING_DESK,     1 AS AMENDMENT_FLAG,     GETDATE() AS AMENDMENT_FLAG_CREATETIME     INTO #temp_amend     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS tr ON tr.ORD_NUM=t.ORD_NUM     WHERE tr.DEALING_DESK = 'Leveraged Finance'     AND  (Post_trade_AmendmentFlag = 1)           -- Use #temp_nav to populate FINAL_STATUS_UPDATE_TABLE           IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table           select distinct                 CONCAT(MULTI_FUND_ID,'_19',TOUCH_COUNT) AS ID,                 '1B1' AS STATUS,                 NULL AS FINAL_UPDATED_TIME           into #temp_status_table           from #temp_amend           where AMENDMENT_FLAG > 0                      MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T           USING #temp_status_table AS S           ON (T.ID = S.ID)           WHEN MATCHED                 THEN                  UPDATE SET                        T.ID=T.ID,                        T.STATUS=T.STATUS,         T.DEALING_DESK = 'Leveraged Finance',                        T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME           WHEN NOT MATCHED                  THEN                  INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)                 VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME,'Leveraged Finance');         --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      ex.MULTI_FUND_ID AS MULTI_FUND_ID,      t.ORD_NUM AS TRD_ORD,      NULL AS PM_ORD,      'Post Trade Amendment Analysis' AS Exception_Type,      CONCAT(ex.MULTI_FUND_ID,'_19',ex.TOUCH_COUNT) AS ID,      NULL AS REASON,      NULL AS COMMENT,      'With C&A Reviewer' AS Status,      NULL AS ClientExecID,      'Leveraged Finance' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      TRD_TRADER AS DEALER,      '1B1' AS STATUS_ID,      NULL AS ORD_AUTH,      EXECUTION_TIME AS TRADE_EXEC     INTO #temp_audit     FROM #temp_amend ex     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, TOUCH_COUNT, TRD_TRADER, EXECUTION_TIME FROM VISTA_REPORTING.dbo.TRADES ) t     ON ex.MULTI_FUND_ID = t.MULTI_FUND_ID AND ex.TOUCH_COUNT = t.TOUCH_COUNT     where AMENDMENT_FLAG > 0          MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);             IF OBJECT_ID('VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_LL_TABLE', 'U') IS NULL         SELECT *     INTO VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_LL_TABLE     FROM #temp_amend         ELSE          IF OBJECT_ID('tempdb..#temp_a_ll_table', 'U') IS NOT NULL DROP TABLE #temp_a_ll_table         SELECT DISTINCT      *     INTO #temp_a_ll_table     FROM #temp_amend         MERGE VISTA_STAGING.dbo.VG_19_PT_AMENDMENT_FLAG_LL_TABLE AS T     USING #temp_a_ll_table AS S     ON (T.MULTI_FUND_ID=S.MULTI_FUND_ID     AND T.TOUCH_COUNT = S.TOUCH_COUNT)     WHEN MATCHED      THEN      UPDATE SET       T.DEALING_DESK = S.DEALING_DESK,       T.AMENDMENT_FLAG = CASE WHEN S.AMENDMENT_FLAG > T.AMENDMENT_FLAG THEN S.AMENDMENT_FLAG ELSE T.AMENDMENT_FLAG END,       T.AMENDMENT_FLAG_CREATETIME = CASE WHEN S.AMENDMENT_FLAG > T.AMENDMENT_FLAG THEN S.AMENDMENT_FLAG_CREATETIME ELSE T.AMENDMENT_FLAG_CREATETIME END     WHEN NOT MATCHED      THEN INSERT (MULTI_FUND_ID, TOUCH_COUNT, DEALING_DESK, AMENDMENT_FLAG, AMENDMENT_FLAG_CREATETIME)        VALUES (S.MULTI_FUND_ID, S.TOUCH_COUNT, S.DEALING_DESK, S.AMENDMENT_FLAG, S.AMENDMENT_FLAG_CREATETIME);        IF OBJECT_ID('tempdb..#temp_amend', 'U') IS NOT NULL DROP TABLE #temp_amend    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    IF OBJECT_ID('tempdb..#temp_a_ll_table', 'U') IS NOT NULL DROP TABLE #temp_a_ll_table    END                --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_19_PT_TBILLS_CP_CD_CASH  CreateDate: 2025-06-26 17:47:04.423  ModifyDate: 2025-06-26 17:47:04.423  --- DEFINITION START ---  -- =============================================    -- Author:  <Pertsinis, Athanasios>    -- Create date: <01/10/2019>    -- Description: Report to capture all Post Trade amendments     --    These include amendments done by users other     --    than dealers on the desk    -- =============================================        -- ***************VERSION CONTROL***************    --     -- *********************************************        CREATE PROCEDURE [dbo].[VG_19_PT_TBILLS_CP_CD_CASH]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        --Create Exceptions Table    IF OBJECT_ID('tempdb..#temp_ac', 'U') IS NOT NULL DROP TABLE #temp_ac    SELECT DISTINCT     pm.[ORD_NUM],     t.[MULTI_FUND_ID],     t.[TOUCH_COUNT],     pr.[DEALING_DESK],     t.[TRD_AMEND_TYPE],     t.[TRD_STATUS],     1 as [AMENDMENT_FLAG],     GETDATE() AS AMENDMENT_FLAG_CREATETIME,     CASE       WHEN t.[post_trade_AmendmentFlag] = 1 THEN 1      ELSE 0      END AS VG_19,     CASE      WHEN t.[post_trade_AmendmentFlag] = 1 THEN GETDATE()      ELSE NULL      END AS VG_19_CREATETIME,     'AL' as [DATA_SOURCE]    INTO #temp_ac    FROM VISTA_REPORTING.dbo.TRADES t    left join (SELECT        MULTI_FUND_ID,        DEALING_DESK          FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE ) pr     on pr.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]    left join VISTA_REPORTING.DBO.ORDERS_CROSS OC     on oc.[TRD_ORD] = t.[ORD_NUM]    left join (SELECT        ORD_NUM          FROM VISTA_REPORTING.DBO.PM_ORDERS) pm    on oc.[PM_ORD] = pm.[ORD_NUM]    WHERE pr.[DEALING_DESK] = 'CASH'       AND t.[post_trade_AmendmentFlag] = 1                --Add records into FINAL_STATUS_UPDATE_TABLE    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    SELECT DISTINCT     CONCAT(MULTI_FUND_ID,'_19',TOUCH_COUNT) AS ID,     '1B1' AS STATUS,     NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table    FROM #temp_ac    WHERE VG_19 != 0        MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'CASH',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'CASH');        --Add records into AUDIT_TABLE    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    SELECT DISTINCT     ac.[MULTI_FUND_ID] AS TRANSACTION_NUMBER,     t.[ORD_NUM] AS TRD_ORD,     ac.[ORD_NUM] AS ORDER_ID,     'Post Trade Amendment Analysis' AS Exception_Type,     CONCAT(ac.[MULTI_FUND_ID],'_19', ac.[TOUCH_COUNT]) AS ID,     NULL AS REASON,     NULL AS COMMENT,     'With C&A Reviewer' AS Status,     NULL AS ClientExecID,     'Cash' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) AS DEALER,     '1B1' AS STATUS_ID,     trd_o.[AUTH_TIME] AS ORD_AUTH,     t.[EXECUTION_TIME] AS TRADE_EXEC    INTO #temp_audit    FROM #temp_ac ac    left join (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER, PULL_DATE FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t    ON ac.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]    left join (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o    ON t.[ORD_NUM] = trd_o.[ORD_NUM]    LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.TRD_ORD = T.ORD_NUM    LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME, TRADER, PULL_DATE FROM VISTA_REPORTING.DBO.PM_ORDERS GROUP BY ord_num, TRADER, PULL_DATE) PM ON PM.ORD_NUM = OC.PM_ORD    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd     on  (tdd.[DEALING_DESK] = 'CASH' and tdd.[INITIALS] = t.[TRD_TRADER] and ac.[DATA_SOURCE] = 'AL' AND CAST(t.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE))     LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD2 ON TDD2.INITIALS = PM.TRADER AND ac.[DATA_SOURCE] = 'AL' AND CAST(PM.PULL_DATE AS DATE) BETWEEN CAST(TDD2.DATE_FROM AS DATE) AND CAST(TDD2.DATE_TO AS DATE)    LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'CD CP TBills Cancel Amend'                      AND CAST(COALESCE(t.PULL_DATE,pm.[PULL_DATE]) AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)        WHERE ac.[VG_19] = 1         MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_CASH AS T    USING #temp_audit AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);        --Update Exceptions Table    IF      OBJECT_ID('VISTA_STAGING.dbo.VG_19_PT_TBILLS_CP_CD_CASH_TABLE', 'U') IS NULL     SELECT *      INTO VISTA_STAGING.dbo.VG_19_PT_TBILLS_CP_CD_CASH_TABLE      FROM #temp_ac    ELSE      IF OBJECT_ID('tempdb..#temp_CP_table', 'U') IS NOT NULL      DROP TABLE #temp_CP_table     SELECT *      INTO #TEMP_CP_TABLE     FROM #temp_ac        MERGE VISTA_STAGING.dbo.VG_19_PT_TBILLS_CP_CD_CASH_TABLE AS T     USING #TEMP_CP_TABLE AS S    ON (T.MULTI_FUND_ID = S.MULTI_FUND_ID     AND T.TOUCH_COUNT = S.TOUCH_COUNT     AND T.[DATA_SOURCE] = S.[DATA_SOURCE])    WHEN MATCHED     THEN UPDATE     SET      [ORD_NUM] = CASE WHEN S.VG_19 > T.VG_19 THEN S.[ORD_NUM] ELSE T.[ORD_NUM] END,     [MULTI_FUND_ID] = CASE WHEN S.VG_19 > T.VG_19 THEN S.[MULTI_FUND_ID] ELSE T.[MULTI_FUND_ID] END,     [TOUCH_COUNT] = CASE WHEN S.VG_19 > T.VG_19 THEN S.[TOUCH_COUNT] ELSE T.[TOUCH_COUNT] END,     [DEALING_DESK] = CASE WHEN S.VG_19 > T.VG_19 THEN S.[DEALING_DESK] ELSE T.[DEALING_DESK] END,     [TRD_AMEND_TYPE] = CASE WHEN S.VG_19 > T.VG_19 THEN S.[TRD_AMEND_TYPE] ELSE T.[TRD_AMEND_TYPE] END,     [TRD_STATUS] = CASE WHEN S.VG_19 > T.VG_19 THEN S.[TRD_STATUS] ELSE T.[TRD_STATUS] END,     [AMENDMENT_FLAG] = CASE WHEN S.VG_19 > T.VG_19 THEN S.[AMENDMENT_FLAG] ELSE T.[AMENDMENT_FLAG] END,     [AMENDMENT_FLAG_CREATETIME] = CASE WHEN S.VG_19 > T.VG_19 THEN S.[AMENDMENT_FLAG_CREATETIME] ELSE T.[AMENDMENT_FLAG_CREATETIME] END,     [VG_19] = CASE WHEN S.VG_19 > T.VG_19 THEN S.[VG_19] ELSE T.[VG_19] END,     [VG_19_CREATETIME] = CASE WHEN S.VG_19 > T.VG_19 THEN S.[VG_19_CREATETIME] ELSE T.[VG_19_CREATETIME] END,     [DATA_SOURCE] = CASE WHEN S.VG_19 > T.VG_19 THEN S.[DATA_SOURCE] ELSE T.[DATA_SOURCE] END        WHEN NOT MATCHED     THEN     INSERT     ([ORD_NUM],     [MULTI_FUND_ID],     [TOUCH_COUNT],     [DEALING_DESK],     [TRD_AMEND_TYPE],     [TRD_STATUS],     [AMENDMENT_FLAG],     [AMENDMENT_FLAG_CREATETIME],     [VG_19],     [VG_19_CREATETIME],     [DATA_SOURCE])         VALUES     (S.[ORD_NUM],     S.[MULTI_FUND_ID],     S.[TOUCH_COUNT],     S.[DEALING_DESK],     S.[TRD_AMEND_TYPE],     S.[TRD_STATUS],     S.[AMENDMENT_FLAG],     S.[AMENDMENT_FLAG_CREATETIME],     S.[VG_19],     S.[VG_19_CREATETIME],     S.[DATA_SOURCE]) ;        IF OBJECT_ID('tempdb..#temp_ac', 'U') IS NOT NULL DROP TABLE #temp_ac    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit            END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_25_INTERFUND_TRANSFER_DMG  CreateDate: 2025-06-26 17:46:36.810  ModifyDate: 2025-06-26 17:46:36.810  --- DEFINITION START ---  -- =============================================    -- Author:  <Samad, Mehreen>    -- Create date: <04/04/2019>    -- Description:     -- <Highlights any assets that are being     -- transferred between funds by the DMG desk.     -- They will be on the same security on the same     -- day in equal and opposite directions across     -- funds.>     -- =============================================        -- ***************VERSION CONTROL***************    -- 2019-05-16 - MS: Added in PM Order Number in    --     Audit table.    -- *********************************************        CREATE PROCEDURE [dbo].[VG_25_INTERFUND_TRANSFER_DMG]     AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        IF OBJECT_ID('tempdb..#temp_if_dmg_table', 'U') IS NOT NULL DROP TABLE #temp_if_dmg_table    SELECT DISTINCT     pm.[ORD_NUM],     t.[MULTI_FUND_ID],     pr.[DEALING_DESK],     MAX(CASE       WHEN ISNULL(pr.[INTERFUND_TRANSFER], 0) = 0 THEN 0       ELSE pr.[INTERFUND_TRANSFER]      END) as IT_FLAG,     MAX(CASE       WHEN ISNULL(pr.[INTERFUND_TRANSFER], 0) = 0 THEN NULL       ELSE GETDATE()      END) as IT_FLAG_CREATETIME    INTO #temp_if_dmg_table    FROM VISTA_REPORTING.dbo.TRADES t    left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr     on pr.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]    LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.TRD_ORD = t.ORD_NUM    LEFT JOIN (SELECT ORD_NUM FROM VISTA_REPORTING.DBO.PM_ORDERS) PM ON OC.PM_ORD = PM.ORD_NUM    WHERE pr.[DEALING_DESK] = 'DMG'    GROUP BY t.[MULTI_FUND_ID],       pm.[ORD_NUM],       pr.[DEALING_DESK]        --Use temp table to populate FINAL_STATUS_UPDATE_TABLE    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    SELECT DISTINCT     CONCAT(MULTI_FUND_ID,'_25') AS ID,        '1A1' AS STATUS,        NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table    FROM #temp_if_dmg_table    WHERE IT_FLAG > 0               MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table AS S    ON (T.ID = S.ID)    WHEN MATCHED            THEN             UPDATE SET                T.ID=T.ID,                T.STATUS=T.STATUS,       T.DEALING_DESK = 'DMG',                T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED             THEN             INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)            VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME,'DMG');            --Add record into AUDIT_TABLE    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    SELECT DISTINCT     ex.MULTI_FUND_ID AS MULTI_FUND_ID,     t.ORD_NUM AS TRD_ORD,     ex.ORD_NUM AS PM_ORD,     'Interfund Transfer' AS Exception_Type,     CONCAT(ex.MULTI_FUND_ID,'_25') AS ID,     NULL AS REASON,     NULL AS COMMENT,     'For Review' AS Status,     NULL AS ClientExecID,     'DMG' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     TRD_TRADER AS DEALER,     '1A1' AS STATUS_ID,     NULL AS ORD_AUTH,     EXECUTION_TIME AS TRADE_EXEC    INTO #temp_audit    FROM #temp_if_dmg_table ex    LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM,  TRD_TRADER, EXECUTION_TIME FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t    ON ex.MULTI_FUND_ID = t.MULTI_FUND_ID    WHERE IT_FLAG > 0        MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_DMG AS T    USING #temp_audit AS S    ON (T.ID = S.ID AND T.PM_ORD = S.PM_ORD)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);            IF OBJECT_ID('tempdb..#temp_if_dmg_table_final', 'U') IS NOT NULL DROP TABLE #temp_if_dmg_table_final    SELECT DISTINCT      MULTI_FUND_ID,     DEALING_DESK,     IT_FLAG,     IT_FLAG_CREATETIME    INTO #temp_if_dmg_table_final    FROM #temp_if_dmg_table                    IF      OBJECT_ID('VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_DMG_TABLE', 'U') IS NULL     SELECT *     INTO VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_DMG_TABLE     FROM #temp_if_dmg_table_final    ELSE      MERGE VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_DMG_TABLE AS T     USING #temp_if_dmg_table_final AS S     ON (T.MULTI_FUND_ID=S.MULTI_FUND_ID)     WHEN MATCHED      THEN UPDATE       SET       T.DEALING_DESK = S.DEALING_DESK,       T.IT_FLAG = CASE WHEN S.IT_FLAG > T.IT_FLAG THEN S.IT_FLAG ELSE T.IT_FLAG END,       T.IT_FLAG_CREATETIME = CASE WHEN S.IT_FLAG > T.IT_FLAG THEN S.IT_FLAG_CREATETIME ELSE T.IT_FLAG_CREATETIME END         WHEN NOT MATCHED      THEN       INSERT       (MULTI_FUND_ID,       DEALING_DESK,       IT_FLAG,       IT_FLAG_CREATETIME)          VALUES       (S.MULTI_FUND_ID,       S.DEALING_DESK,       S.IT_FLAG,       S.IT_FLAG_CREATETIME) ;           IF OBJECT_ID('tempdb..#temp_if_fi_table', 'U') IS NOT NULL DROP TABLE #temp_if_fi_table    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table        END                --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_25_INTERFUND_TRANSFER_EQ  CreateDate: 2025-06-26 17:46:19.520  ModifyDate: 2025-06-26 17:46:19.520  --- DEFINITION START ---  -- =============================================    -- Author:  <da Costa, David>    -- Create date: <29/11/2017>    -- Description:     -- =============================================        -- ***************VERSION CONTROL***************    -- 04/01/2018 - DDC: Amendment made to only run  exception    -- calculations on the data for the day the exception is     -- being pulled        -- 2018-03-21 - WH: Removed reference to BUY_SELL_FLAG - used TRAN_TYPE instead    -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.    -- *********************************************        CREATE PROCEDURE [dbo].[VG_25_INTERFUND_TRANSFER_EQ]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         --DECLARE @DATE_FILTER AS DATE --Declare date filter to only select data from current pull date     --SET @DATE_FILTER = CONVERT(DATE, GETDATE())              --IF OBJECT_ID('tempdb..#deriv_table', 'U') IS NOT NULL DROP TABLE #deriv_table          --SELECT     -- t.ORD_NUM,     -- t.MULTI_FUND_ID,     -- t.COUNTERPARTY_CODE,     -- o.SEC_DESC1,     -- i.SM_SEC_TYPE,     -- i.SM_SEC_GROUP,     -- i.TICKER,     -- i.INSTRUMENT_GRADE,     -- p.INST_TYPE,     -- p.PRIMARY_MARKET,     -- o.CUSIP,     -- t.TRD_ENTRY_TIME,     -- t.EXECUTION_TIME,     -- t.TRD_AUTH_TIME,     -- o.TRAN_TYPE,--o.BUY_SELL_FLAG,     -- o.FILL_AMT,     -- t.TRD_PRICE,     -- t.FUND,     -- po.PORTFOLIOS_PORTFOLIO_NAME,     --CASE     -- WHEN pl.VENUE is NULL or pl.VENUE in ('Manual', 'Manual PL') THEN 'Manual' ELSE 'Electronic'     --END AS VENUE     --INTO #deriv_table     --FROM VISTA_REPORTING.dbo.TRADES t     --LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS o ON o.ORD_NUM=t.ORD_NUM     --LEFT JOIN VISTA_REPORTING.dbo.INSTRUMENTS i ON i.CUSIP=o.CUSIP     --LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p ON p.ORD_NUM=t.ORD_NUM     --LEFT JOIN VISTA_REPORTING.dbo.PLACEMENTS pl ON pl.MULTI_FUND_ID=t.MULTI_FUND_ID     --LEFT JOIN VISTA_REPORTING.dbo.PORTFOLIO po ON po.FUND=t.FUND     --WHERE o.DEALING_DESK='Equity'             --IF OBJECT_ID('tempdb..#it_exception', 'U') IS NOT NULL DROP TABLE #it_exception         --SELECT      --dt1.MULTI_FUND_ID,     --dt2.CUSIP,     ----dt2.MIN_TRD_ENTRY_TIME,     ----dt2.MIN_TRD_AUTH_TIME,     --dt2.TRAN_TYPE,--dt2.BUY_SELL_FLAG,     --dt2.PORTFOLIOS_PORTFOLIO_NAME,     ----dt2.FILL_AMT,     ----dt2.FUND,     ----dt2.ORD_NUM,     ----dt2.COUNTERPARTY_CODE,     --dt2.VENUE,     --1 AS IT_FLAG     --INTO #it_exception     --FROM #deriv_table dt1     --INNER JOIN #deriv_table dt2 ON dt2.CUSIP=dt1.CUSIP      --      AND DATEDIFF(DAY, dt2.EXECUTION_TIME, dt1.EXECUTION_TIME) = 0     --      AND dt2.TRAN_TYPE!=dt1.TRAN_TYPE     --      AND dt2.TRD_PRICE=dt1.TRD_PRICE     --WHERE dt2.PORTFOLIOS_PORTFOLIO_NAME IN ('FDGM', 'SBAF', 'VGEM', 'VANG')     --GROUP BY      -- dt1.MULTI_FUND_ID,     -- dt2.CUSIP,     -- --dt2.MIN_TRD_ENTRY_TIME,     -- --dt2.MIN_TRD_AUTH_TIME,     -- dt2.TRAN_TYPE,--dt2.BUY_SELL_FLAG,     -- --dt2.FILL_AMT,     -- --dt2.FUND,     -- dt2.PORTFOLIOS_PORTFOLIO_NAME,     -- dt2.ORD_NUM,     -- --dt2.COUNTERPARTY_CODE,     -- dt2.VENUE     --HAVING COUNT(CAST(dt2.EXECUTION_TIME AS DATE)) < 2     IF OBJECT_ID('tempdb..#temp_if_eq_table', 'U') IS NOT NULL DROP TABLE #temp_if_eq_table     SELECT DISTINCT     t.MULTI_FUND_ID,     pr.DEALING_DESK,     MAX(CASE      WHEN ISNULL(pr.INTERFUND_TRANSFER, 0) = 0 THEN 0 ELSE pr.INTERFUND_TRANSFER     END) AS IT_FLAG,     MAX(CASE      WHEN ISNULL(pr.INTERFUND_TRANSFER, 0) = 0 THEN NULL ELSE GETDATE()     END) AS IT_FLAG_CREATETIME     INTO #temp_if_eq_table     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr on pr.MULTI_FUND_ID=t.MULTI_FUND_ID     WHERE pr.DEALING_DESK = 'Equity'     GROUP BY     t.MULTI_FUND_ID,     pr.DEALING_DESK             -- Use temp table to populate FINAL_STATUS_UPDATE_TABLE           IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table           select distinct                 CONCAT(MULTI_FUND_ID,'_25') AS ID,                 '1A1' AS STATUS,                 NULL AS FINAL_UPDATED_TIME           into #temp_status_table           from #temp_if_eq_table           where IT_FLAG > 0                      MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T           USING #temp_status_table AS S           ON (T.ID = S.ID)           WHEN MATCHED                 THEN                  UPDATE SET                        T.ID=T.ID,                        T.STATUS=T.STATUS,         T.DEALING_DESK = 'Equity',                        T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME           WHEN NOT MATCHED                  THEN                  INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)                 VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME,'Equity');         --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      ex.MULTI_FUND_ID AS MULTI_FUND_ID,      t.ORD_NUM AS TRD_ORD,      NULL AS PM_ORD,      'Interfund Transfer' AS Exception_Type,      CONCAT(ex.MULTI_FUND_ID,'_25') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'For Review' AS Status,      NULL AS ClientExecID,      'Equity' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      TRD_TRADER AS DEALER,      '1A1' AS STATUS_ID,      NULL AS ORD_AUTH,      EXECUTION_TIME AS TRADE_EXEC     INTO #temp_audit     FROM #temp_if_eq_table ex     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM,  TRD_TRADER, EXECUTION_TIME FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t     ON ex.MULTI_FUND_ID = t.MULTI_FUND_ID     where IT_FLAG > 0         MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);               IF OBJECT_ID('VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_EQ_TABLE', 'U') IS NULL         SELECT *      INTO VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_EQ_TABLE     FROM #temp_if_eq_table         ELSE              MERGE VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_EQ_TABLE AS T     USING #temp_if_eq_table AS S     ON (T.MULTI_FUND_ID=S.MULTI_FUND_ID)     WHEN MATCHED      THEN      UPDATE SET       T.DEALING_DESK = S.DEALING_DESK,       T.IT_FLAG = CASE WHEN S.IT_FLAG > T.IT_FLAG THEN S.IT_FLAG ELSE T.IT_FLAG END,       T.IT_FLAG_CREATETIME = CASE WHEN S.IT_FLAG > T.IT_FLAG THEN S.IT_FLAG_CREATETIME ELSE T.IT_FLAG_CREATETIME END     WHEN NOT MATCHED      THEN INSERT (MULTI_FUND_ID, DEALING_DESK, IT_FLAG, IT_FLAG_CREATETIME)        VALUES (S.MULTI_FUND_ID, S.DEALING_DESK, S.IT_FLAG, S.IT_FLAG_CREATETIME);          IF OBJECT_ID('tempdb..#temp_if_eq_table', 'U') IS NOT NULL DROP TABLE #temp_if_eq_table        IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table               END                --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_25_INTERFUND_TRANSFER_FI  CreateDate: 2025-06-26 17:46:08.543  ModifyDate: 2025-06-26 17:46:08.543  --- DEFINITION START ---  -- =============================================    -- Author:  <da Costa, David>    -- Create date: <29/11/2017>    -- Description:     -- =============================================        -- ***************VERSION CONTROL***************    -- 04/01/2018 - DDC: Amendment made to only run  exception    -- calculations on the data for the day the exception is     -- being pulled        -- 2018-03-21 - WH: Removed reference to BUY_SELL_FLAG - used TRAN_TYPE instead    -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.    -- *********************************************        CREATE PROCEDURE [dbo].[VG_25_INTERFUND_TRANSFER_FI]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         --DECLARE @DATE_FILTER AS DATE --Declare date filter to only select data from current pull date     --SET @DATE_FILTER = CONVERT(DATE, GETDATE())              --IF OBJECT_ID('tempdb..#deriv_table', 'U') IS NOT NULL DROP TABLE #deriv_table          --SELECT     -- t.ORD_NUM,     -- t.MULTI_FUND_ID,     -- t.COUNTERPARTY_CODE,     -- o.SEC_DESC1,     -- i.SM_SEC_TYPE,     -- i.SM_SEC_GROUP,     -- i.TICKER,     -- i.INSTRUMENT_GRADE,     -- p.INST_TYPE,     -- p.PRIMARY_MARKET,     -- o.CUSIP,     -- t.TRD_ENTRY_TIME,     -- t.EXECUTION_TIME,     -- t.TRD_AUTH_TIME,     -- o.TRAN_TYPE,--o.BUY_SELL_FLAG,     -- o.FILL_AMT,     -- t.TRD_PRICE,     -- t.FUND,     -- po.PORTFOLIOS_PORTFOLIO_NAME,     --CASE     -- WHEN pl.VENUE is NULL or pl.VENUE in ('Manual', 'Manual PL') THEN 'Manual' ELSE 'Electronic'     --END AS VENUE     --INTO #deriv_table     --FROM VISTA_REPORTING.dbo.TRADES t     --LEFT JOIN VISTA_REPORTING.dbo.TRD_ORDERS o ON o.ORD_NUM=t.ORD_NUM     --LEFT JOIN VISTA_REPORTING.dbo.INSTRUMENTS i ON i.CUSIP=o.CUSIP     --LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE p ON p.ORD_NUM=t.ORD_NUM     --LEFT JOIN VISTA_REPORTING.dbo.PLACEMENTS pl ON pl.MULTI_FUND_ID=t.MULTI_FUND_ID     --LEFT JOIN VISTA_REPORTING.dbo.PORTFOLIO po ON po.FUND=t.FUND     --WHERE o.DEALING_DESK='Fixed Income'             --IF OBJECT_ID('tempdb..#it_exception', 'U') IS NOT NULL DROP TABLE #it_exception         --SELECT      --dt1.MULTI_FUND_ID,     --dt2.CUSIP,     ----dt2.MIN_TRD_ENTRY_TIME,     ----dt2.MIN_TRD_AUTH_TIME,     --dt2.TRAN_TYPE,--dt2.BUY_SELL_FLAG,     --dt2.PORTFOLIOS_PORTFOLIO_NAME,     ----dt2.FILL_AMT,     ----dt2.FUND,     ----dt2.ORD_NUM,     ----dt2.COUNTERPARTY_CODE,     --dt2.VENUE,     --1 AS IT_FLAG     --INTO #it_exception     --FROM #deriv_table dt1     --INNER JOIN #deriv_table dt2 ON dt2.CUSIP=dt1.CUSIP      --      AND DATEDIFF(DAY, dt2.EXECUTION_TIME, dt1.EXECUTION_TIME) = 0     --      AND dt2.TRAN_TYPE!=dt1.TRAN_TYPE     --      AND dt2.TRD_PRICE=dt1.TRD_PRICE     --WHERE dt2.PORTFOLIOS_PORTFOLIO_NAME IN ('FDGM', 'SBAF', 'VGEM', 'VANG')     --GROUP BY      -- dt1.MULTI_FUND_ID,     -- dt2.CUSIP,     -- --dt2.MIN_TRD_ENTRY_TIME,     -- --dt2.MIN_TRD_AUTH_TIME,     -- dt2.TRAN_TYPE,--dt2.BUY_SELL_FLAG,     -- --dt2.FILL_AMT,     -- --dt2.FUND,     -- dt2.PORTFOLIOS_PORTFOLIO_NAME,     -- dt2.ORD_NUM,     -- --dt2.COUNTERPARTY_CODE,     -- dt2.VENUE     --HAVING COUNT(CAST(dt2.EXECUTION_TIME AS DATE)) < 2         IF OBJECT_ID('tempdb..#temp_if_fi_table', 'U') IS NOT NULL DROP TABLE #temp_if_fi_table         SELECT DISTINCT     t.MULTI_FUND_ID,     pr.DEALING_DESK,     MAX(CASE      WHEN ISNULL(pr.INTERFUND_TRANSFER, 0) = 0 THEN 0 ELSE pr.INTERFUND_TRANSFER     END) AS IT_FLAG,     MAX(CASE      WHEN ISNULL(pr.INTERFUND_TRANSFER, 0) = 0 THEN NULL ELSE GETDATE()     END) AS IT_FLAG_CREATETIME     INTO #temp_if_fi_table     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr on pr.MULTI_FUND_ID=t.MULTI_FUND_ID     WHERE pr.DEALING_DESK = 'Fixed Income'     GROUP BY     t.MULTI_FUND_ID,     pr.DEALING_DESK         -- Use temp table to populate FINAL_STATUS_UPDATE_TABLE           IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table           select distinct                 CONCAT(MULTI_FUND_ID,'_25') AS ID,                 '1A2' AS STATUS,                 NULL AS FINAL_UPDATED_TIME           into #temp_status_table           from #temp_if_fi_table           where IT_FLAG > 0                      MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T           USING #temp_status_table AS S           ON (T.ID = S.ID)           WHEN MATCHED                 THEN                  UPDATE SET                        T.ID=T.ID,                        T.STATUS=T.STATUS,         T.DEALING_DESK = 'Fixed Income',                        T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME           WHEN NOT MATCHED                  THEN                  INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)                 VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME,'Fixed Income');             --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      ex.MULTI_FUND_ID AS MULTI_FUND_ID,      t.ORD_NUM AS TRD_ORD,      NULL AS PM_ORD,      'Interfund Transfer' AS Exception_Type,      CONCAT(ex.MULTI_FUND_ID,'_25') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'With Reviewer' AS Status,      NULL AS ClientExecID,      'Fixed Income' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      TRD_TRADER AS DEALER,      '1A2' AS STATUS_ID,      NULL AS ORD_AUTH,      EXECUTION_TIME AS TRADE_EXEC     INTO #temp_audit     FROM #temp_if_fi_table ex     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM,  TRD_TRADER, EXECUTION_TIME FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t     ON ex.MULTI_FUND_ID = t.MULTI_FUND_ID     where IT_FLAG > 0         MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);                     IF OBJECT_ID('VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_FI_TABLE', 'U') IS NULL         SELECT *     INTO VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_FI_TABLE     FROM #temp_if_fi_table         ELSE               MERGE VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_FI_TABLE AS T     USING #temp_if_fi_table AS S     ON (T.MULTI_FUND_ID=S.MULTI_FUND_ID)     WHEN MATCHED      THEN      UPDATE SET       T.DEALING_DESK = S.DEALING_DESK,       T.IT_FLAG = CASE WHEN S.IT_FLAG > T.IT_FLAG THEN S.IT_FLAG ELSE T.IT_FLAG END,       T.IT_FLAG_CREATETIME = CASE WHEN S.IT_FLAG > T.IT_FLAG THEN S.IT_FLAG_CREATETIME ELSE T.IT_FLAG_CREATETIME END     WHEN NOT MATCHED      THEN INSERT (MULTI_FUND_ID, DEALING_DESK, IT_FLAG, IT_FLAG_CREATETIME)        VALUES (S.MULTI_FUND_ID, S.DEALING_DESK, S.IT_FLAG, S.IT_FLAG_CREATETIME);            IF OBJECT_ID('tempdb..#temp_if_fi_table', 'U') IS NOT NULL DROP TABLE #temp_if_fi_table           IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table        END                --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_25_INTERFUND_TRANSFER_LL  CreateDate: 2025-06-26 17:45:01.943  ModifyDate: 2025-06-26 17:45:01.943  --- DEFINITION START ---  -- =============================================    -- Author:  <Chandarana, Sohini>    -- Create date: <04/23/2018>    -- Description:     -- <Stored procedure as appropriated from VG_25_INTERFUND_TRANSFER_FI>    -- =============================================        -- ***************VERSION CONTROL***************    -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.    -- *********************************************        CREATE PROCEDURE [dbo].[VG_25_INTERFUND_TRANSFER_LL]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;             IF OBJECT_ID('tempdb..#temp_if_ll_table', 'U') IS NOT NULL DROP TABLE #temp_if_ll_table         SELECT DISTINCT     t.MULTI_FUND_ID,     pr.DEALING_DESK,     MAX(CASE      WHEN ISNULL(pr.INTERFUND_TRANSFER, 0) = 0 THEN 0 ELSE pr.INTERFUND_TRANSFER     END) AS IT_FLAG,     MAX(CASE      WHEN ISNULL(pr.INTERFUND_TRANSFER, 0) = 0 THEN NULL ELSE GETDATE()     END) AS IT_FLAG_CREATETIME     INTO #temp_if_ll_table     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr on pr.MULTI_FUND_ID=t.MULTI_FUND_ID     WHERE pr.DEALING_DESK = 'Leveraged Finance'     GROUP BY     t.MULTI_FUND_ID,     pr.DEALING_DESK         -- Use temp table to populate FINAL_STATUS_UPDATE_TABLE           IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table           select distinct                 CONCAT(MULTI_FUND_ID,'_25') AS ID,                 '1A2' AS STATUS,                 NULL AS FINAL_UPDATED_TIME           into #temp_status_table           from #temp_if_ll_table           where IT_FLAG > 0                      MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T           USING #temp_status_table AS S           ON (T.ID = S.ID)           WHEN MATCHED                 THEN                  UPDATE SET                        T.ID=T.ID,                        T.STATUS=T.STATUS,         T.DEALING_DESK = 'Leveraged Finance',                        T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME           WHEN NOT MATCHED                  THEN                  INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)                 VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME,'Leveraged Finance');         --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      ex.MULTI_FUND_ID AS MULTI_FUND_ID,      t.ORD_NUM AS TRD_ORD,      NULL AS PM_ORD,      'Interfund Transfer' AS Exception_Type,      CONCAT(ex.MULTI_FUND_ID,'_25') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'With Reviewer' AS Status,      NULL AS ClientExecID,      'Leveraged Finance' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      TRD_TRADER AS DEALER,      '1A2' AS STATUS_ID,      NULL AS ORD_AUTH,      EXECUTION_TIME AS TRADE_EXEC     INTO #temp_audit     FROM #temp_if_ll_table ex     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM,  TRD_TRADER, EXECUTION_TIME FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t     ON ex.MULTI_FUND_ID = t.MULTI_FUND_ID     where IT_FLAG > 0         MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);             IF OBJECT_ID('VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_LL_TABLE', 'U') IS NULL         SELECT *     INTO VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_LL_TABLE     FROM #temp_if_ll_table         ELSE              MERGE VISTA_STAGING.dbo.VG_25_INTERFUND_TRANSFER_LL_TABLE AS T     USING #temp_if_ll_table AS S     ON (T.MULTI_FUND_ID=S.MULTI_FUND_ID)     WHEN MATCHED      THEN      UPDATE SET       T.DEALING_DESK = S.DEALING_DESK,       T.IT_FLAG = CASE WHEN S.IT_FLAG > T.IT_FLAG THEN S.IT_FLAG ELSE T.IT_FLAG END,       T.IT_FLAG_CREATETIME = CASE WHEN S.IT_FLAG > T.IT_FLAG THEN S.IT_FLAG_CREATETIME ELSE T.IT_FLAG_CREATETIME END     WHEN NOT MATCHED      THEN INSERT (MULTI_FUND_ID, DEALING_DESK, IT_FLAG, IT_FLAG_CREATETIME)        VALUES (S.MULTI_FUND_ID, S.DEALING_DESK, S.IT_FLAG, S.IT_FLAG_CREATETIME);           IF OBJECT_ID('tempdb..#temp_if_ll_table', 'U') IS NOT NULL DROP TABLE #temp_if_ll_table    END                --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_40_EXTENDED_SETTLEMENT_EXCEPTION  CreateDate: 2025-06-26 17:44:47.580  ModifyDate: 2025-06-26 17:44:47.580  --- DEFINITION START ---  -- =============================================    -- Author:  <RAGI, KEERTI>    -- Create date: <02/08/2018>    -- Description:     -- =============================================        -- ***************VERSION CONTROL***************    -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.        -- 2022-02-03; Matej Miter created for Jira:    --SURVG-641 - Enhancemens 2022 - removed filter to take only GB from Holiday table so we can follow holidays from all countries where trades are happening    -- *********************************************        CREATE PROCEDURE [dbo].[VG_40_EXTENDED_SETTLEMENT_EXCEPTION]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN          SET NOCOUNT ON;        IF OBJECT_ID('tempdb..#Calendar', 'U') IS NOT NULL DROP TABLE #Calendar        DECLARE @First_TRD_AUTH_TIME DATETIME    DECLARE @Max_TRD_SETTLE_DATE DATETIME        SET @First_TRD_AUTH_TIME = (SELECT MIN(CAST(TRD_AUTH_TIME AS DATE)) FROM  VISTA_REPORTING.dbo.TRADES)    SET @Max_TRD_SETTLE_DATE = (SELECT MAX(CAST(TRD_SETTLE_DATE AS DATE)) FROM VISTA_REPORTING.dbo.TRADES)        ; WITH cte_date_base_table AS       (         SELECT         @First_TRD_AUTH_TIME  AS Calendar_Date          UNION ALL          SELECT          DATEADD (Day, 1, CTE.Calendar_Date)           FROM          cte_date_base_table CTE           WHERE           DATEADD (Day, 1, CTE.Calendar_Date) <= @Max_TRD_SETTLE_DATE       )        SELECT * INTO #Calendar FROM cte_date_base_table    OPTION (MAXRECURSION 0)         IF OBJECT_ID('tempdb..#Calendar2', 'U') IS NOT NULL DROP TABLE #Calendar2        SELECT c.*,            CASE WHEN DATEPART(weekday,calendar_date) IN (1,7) THEN 1 ELSE 0 END  as [Weekend_Flag],           CASE WHEN closure_date IS NOT NULL THEN 1 ELSE 0 END AS [Closed_Date]    INTO #calendar2    FROM #calendar c    LEFT JOIN (SELECT DISTINCT CONVERT(DATE,CLOSURE_DATES,103) AS closure_date FROM VISTA_STAGING.dbo.HOLIDAYS --SURVG-641 --WHERE COUNTRY_CODE = 'GB' End of --SURVG-641    ) h    ON c.Calendar_Date = h.closure_date        IF OBJECT_ID('tempdb..#TEMP', 'U') IS NOT NULL DROP TABLE #TEMP        SELECT DISTINCT            T.ORD_NUM AS ORD_NUM,           T.MULTI_FUND_ID,           DEALING_DESK,           COUNT(DISTINCT             CASE WHEN Weekend_Flag = 0 AND Closed_Date = 0 THEN Calendar_Date             ELSE NULL           END) as NUM_DAYS    INTO #TEMP    FROM #Calendar2 c    LEFT JOIN VISTA_REPORTING.dbo.TRADES t    ON c.Calendar_Date > CONVERT(DATE,t.TRD_AUTH_TIME) AND c.Calendar_Date <= CONVERT(DATE,t.TRD_SETTLE_DATE) --Join on dates between auth time and settle, do not count the first day though.    JOIN VISTA_REPORTING.dbo.TRD_ORDERS o ON o.ORD_NUM=t.ORD_NUM    --where DEALING_DESK='Equity'     GROUP BY            T.ORD_NUM,           T.MULTI_FUND_ID,           DEALING_DESK            IF OBJECT_ID('tempdb..#TEMP_1', 'U') IS NOT NULL DROP TABLE #TEMP_1    SELECT DISTINCT A.MULTI_FUND_ID, A.DEALING_DESK,    MAX(NUM_DAYS) AS NUMDAYS,    CASE WHEN MAX(NUM_DAYS) > 5 AND PRIMARY_MARKET = 0 THEN 1 ELSE 0 END AS SETTLEMENT_EXCEPTION,    CASE WHEN MAX(NUM_DAYS) > 5 AND PRIMARY_MARKET = 0 THEN GETDATE() ELSE NULL END AS SETTLEMENT_CREATEDATE    INTO #TEMP_1    FROM #TEMP A    JOIN VISTA_REPORTING.DBO.PRIMARY_INST_TYPE_TABLE B ON A.MULTI_FUND_ID=B.MULTI_FUND_ID    where A.DEALING_DESK='Equity'     group by A.MULTI_FUND_ID, A.DEALING_DESK, PRIMARY_MARKET                IF OBJECT_ID('VISTA_STAGING.dbo.VG_40_EXTENDED_SETTLEMENT_EXCEPTION_TABLE', 'U') IS NULL     SELECT DISTINCT MULTI_FUND_ID,    DEALING_DESK,    NUMDAYS,    SETTLEMENT_EXCEPTION,    SETTLEMENT_CREATEDATE    INTO VISTA_STAGING.dbo.VG_40_EXTENDED_SETTLEMENT_EXCEPTION_TABLE    FROM #TEMP_1        MERGE VISTA_STAGING.dbo.VG_40_EXTENDED_SETTLEMENT_EXCEPTION_TABLE AS T    USING #TEMP_1 AS S    ON T.MULTI_FUND_ID = S.MULTI_FUND_ID    WHEN MATCHED     THEN      UPDATE SET      T.DEALING_DESK = S.DEALING_DESK,      T.NUMDAYS=S.NUMDAYS,      T.SETTLEMENT_EXCEPTION =  CASE WHEN S.SETTLEMENT_EXCEPTION > T.SETTLEMENT_EXCEPTION                 THEN S.SETTLEMENT_EXCEPTION ELSE T.SETTLEMENT_EXCEPTION END,      T.SETTLEMENT_CREATEDATE = CASE WHEN S.SETTLEMENT_EXCEPTION > T.SETTLEMENT_EXCEPTION             THEN S.SETTLEMENT_CREATEDATE ELSE T.SETTLEMENT_CREATEDATE END    WHEN NOT MATCHED      THEN INSERT (MULTI_FUND_ID, DEALING_DESK, NUMDAYS, SETTLEMENT_EXCEPTION, SETTLEMENT_CREATEDATE)        VALUES (S.MULTI_FUND_ID, S.DEALING_DESK,S.NUMDAYS,S.SETTLEMENT_EXCEPTION, S.SETTLEMENT_CREATEDATE);            IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table        select distinct    CONCAT(MULTI_FUND_ID,'_40') AS ID,    '1A1' AS STATUS,    NULL AS FINAL_UPDATED_TIME    into #temp_status_table    from #TEMP_1    WHERE SETTLEMENT_EXCEPTION=1            MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table AS S    ON (T.ID = S.ID)    WHEN MATCHED        THEN         UPDATE SET            T.ID=T.ID,            T.STATUS=T.STATUS,            T.DEALING_DESK = 'Equity',            T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED         THEN         INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)        VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME,'Equity');         --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      ex.MULTI_FUND_ID AS MULTI_FUND_ID,      t.ORD_NUM AS TRD_ORD,      NULL AS PM_ORD,      'Extended Settlement' AS Exception_Type,      CONCAT(ex.MULTI_FUND_ID,'_40') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'For Review' AS Status,      NULL AS ClientExecID,      'Equity' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      TRD_TRADER AS DEALER,      '1A1' AS STATUS_ID,      NULL AS ORD_AUTH,      EXECUTION_TIME AS TRADE_EXEC     INTO #temp_audit     FROM #TEMP_1 ex     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM,  TRD_TRADER, EXECUTION_TIME FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t     ON ex.MULTI_FUND_ID = t.MULTI_FUND_ID     where SETTLEMENT_EXCEPTION=1         MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);         IF OBJECT_ID('tempdb..#Calendar', 'U') IS NOT NULL DROP TABLE #Calendar     IF OBJECT_ID('tempdb..#Calendar2', 'U') IS NOT NULL DROP TABLE #Calendar2     IF OBJECT_ID('tempdb..#TEMP', 'U') IS NOT NULL DROP TABLE #TEMP     IF OBJECT_ID('tempdb..#TEMP_1', 'U') IS NOT NULL DROP TABLE #TEMP_1     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit             END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_41_TRADES_WITHOUT_ORDERS_DMG  CreateDate: 2025-06-26 17:44:35.140  ModifyDate: 2025-06-26 17:44:35.140  --- DEFINITION START ---  -- =============================================    -- Author:  <Samad, Mehreen>    -- Create date: <27/03/2019>    -- Description:     -- <Looking at all trades where there was no PM     -- order was associated, detailed for all trades     -- with Entry Time = TODAY.>    -- =============================================        -- ***************VERSION CONTROL***************    -- 05/04/2019 - DDC: Amended AUDIT_TABLE script to     --      update AUDIT_TABLE_DMG    -- 18/04/2019 - MS:  Filtering on Dealer Initials    --      instead of Dealing Desk.    -- 24/04/2019 - ER:  Removed reference to WHERE cast(EXECUTION_TIME as DATE) = cast (GETDATE() as DATE)  in #trwo_final    --      as this removes all trades in the table and we want to see them, this is filtered in the frontend instead.    -- 21/05/2019 - MN:  Changed the logic to reflect new business requirements. They would now like all cases within TRADES    --      where the MFID field is present but the order number is not present.    --                   I am leaving old joins and logic incase they change their minds and just changing a couple lines. (in #trwo_final)    -- *********************************************        CREATE PROCEDURE [dbo].[VG_41_TRADES_WITHOUT_ORDERS_DMG]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        --Taking max touch count to reduced duplicates    IF OBJECT_ID('tempdb..#maxtouchcount', 'U') IS NOT NULL DROP TABLE #maxtouchcount    SELECT DISTINCT      MULTI_FUND_ID,     MAX(TOUCH_COUNT) as MAX_TOUCH_COUNT    INTO #maxtouchcount    FROM VISTA_REPORTING.dbo.TRADES    GROUP BY MULTI_FUND_ID        --Getting Trades without Orders and filtering on Dealer Initials for DMG    IF OBJECT_ID('tempdb..#trwo_exceptions', 'U') IS NOT NULL DROP TABLE #trwo_exceptions    SELECT DISTINCT     t.MULTI_FUND_ID,     CASE -- Only doing this becuase otherwise it is giving me duplicates      WHEN t.[ORD_NUM] = '' THEN NULL      WHEN t.[ORD_NUM] = 0  THEN NULL      ELSE t.[ORD_NUM]     END AS TR_ORD_NUM,      t.EXECUTION_TIME     --trd.DEALING_DESK,     --CASE     -- WHEN trim(oc.PM_ORD) = '' THEN NULL     -- WHEN trim(oc.PM_ORD) = 0  THEN NULL     -- ELSE oc.PM_ORD     --END as PM_ORD_NUM    INTO #trwo_exceptions    FROM VISTA_REPORTING.dbo.TRADES t    inner join #maxtouchcount mt on mt.MULTI_FUND_ID=t.MULTI_FUND_ID AND mt.MAX_TOUCH_COUNT=t.TOUCH_COUNT    LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID = t.MULTI_FUND_ID    WHERE pr.DEALING_DESK = 'DMG'    --left join VISTA_REPORTING.dbo.TRD_ORDERS trd     --on trd.ORD_NUM = t.ORD_NUM    --left join VISTA_REPORTING.dbo.ORDERS_CROSS oc     --on oc.TRD_ORD=t.ORD_NUM    --WHERE (t.[ORD_NUM] = '' or t.[ORD_NUM] = 0)        --WHERE NOT EXISTS (SELECT     --     ORD_NUM     --      FROM VISTA_REPORTING.dbo.PM_ORDERS     --      WHERE ORD_NUM = oc.PM_ORD)     --WHERE t.[TRD_TRADER] in (SELECT DISTINCT INITIALS     -- FROM VISTA_REPORTING.dbo.TREASURY_DEALER_DESK     -- WHERE CAST(T.PULL_DATE AS DATE) BETWEEN CAST(DATE_FROM AS DATE) AND CAST(DATE_TO AS DATE)    --   AND DEALING_DESK = 'DMG')       --AND DEALING_DESK = 'DMG'       --select * from #trwo_exceptions    --Final exceptions table with neccessary columns    IF OBJECT_ID('tempdb..#trwo_final', 'U') IS NOT NULL DROP TABLE #trwo_final    SELECT DISTINCT     MULTI_FUND_ID,     TR_ORD_NUM,     EXECUTION_TIME,     'DMG' AS DEALING_DESK,    -- CASE     --  WHEN PM_ORD_NUM is null THEN 1     -- ELSE 0     -- END AS VG_41,    -- CASE     --  WHEN PM_ORD_NUM is null THEN GETDATE()     -- ELSE NULL     -- END AS VG_41_CREATETIME         CASE      WHEN TR_ORD_NUM is NULL then 1      ELSE 0     END as VG_41,     CASE      WHEN TR_ORD_NUM is NULL then GETDATE()       ELSE NULL     END as VG_41_CREATETIME        INTO #trwo_final    FROM #trwo_exceptions            --Add to final status update table    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     SELECT DISTINCT      CONCAT(MULTI_FUND_ID,'_41') AS ID,      '1A1' AS STATUS,      NULL AS FINAL_UPDATED_TIME     INTO #temp_status_table     FROM #trwo_final     WHERE VG_41 != 0         MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET       T.ID=T.ID,       T.STATUS=T.STATUS,       T.DEALING_DESK = 'DMG',       T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'DMG');        --Add record into AUDIT_TABLE    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    SELECT DISTINCT     trwo.[MULTI_FUND_ID],     t.[ORD_NUM] AS TRD_ORD,     NULL AS PM_ORD,     'Trades Without Orders' AS Exception_Type,     CONCAT(trwo.[MULTI_FUND_ID],'_41') AS ID,     NULL AS REASON,     NULL AS COMMENT,     'For Review' AS Status,     NULL AS ClientExecID,     'DMG' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     t.[TRD_TRADER] AS DEALER,     '1A1' AS STATUS_ID,     trd_o.[AUTH_TIME] AS ORD_AUTH,     t.[EXECUTION_TIME] AS TRADE_EXEC    INTO #temp_audit    FROM #trwo_final trwo    left join (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t    ON trwo.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]    left join (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o    ON t.[ORD_NUM] = trd_o.[ORD_NUM]    WHERE trwo.[VG_41] = 1         MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_DMG AS T    USING #temp_audit AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);          IF      OBJECT_ID('VISTA_STAGING.dbo.VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE', 'U') IS NULL     SELECT *      INTO VISTA_STAGING.dbo.VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE      FROM #trwo_final    ELSE      IF OBJECT_ID('tempdb..#temp_CP_table', 'U') IS NOT NULL      DROP TABLE #temp_CP_table     SELECT *      INTO #TEMP_CP_TABLE     FROM #trwo_final        MERGE VISTA_STAGING.dbo.VG_41_TRADES_WITHOUT_ORDERS_DMG_TABLE AS T     USING #TEMP_CP_TABLE AS S    ON (T.MULTI_FUND_ID = S.MULTI_FUND_ID)    WHEN MATCHED     THEN UPDATE     SET      [MULTI_FUND_ID] = CASE WHEN S.VG_41 > T.VG_41 THEN S.[MULTI_FUND_ID] ELSE T.[MULTI_FUND_ID] END,     [TR_ORD_NUM] = CASE WHEN S.VG_41 > T.VG_41 THEN S.[TR_ORD_NUM] ELSE T.[TR_ORD_NUM] END,     [EXECUTION_TIME] = CASE WHEN S.VG_41 > T.VG_41 THEN S.[EXECUTION_TIME] ELSE T.[EXECUTION_TIME] END,     [DEALING_DESK] = CASE WHEN S.VG_41 > T.VG_41 THEN S.[DEALING_DESK] ELSE T.[DEALING_DESK] END,     [VG_41] = CASE WHEN S.VG_41 > T.VG_41 THEN S.[VG_41] ELSE T.[VG_41] END,     [VG_41_CREATETIME] = CASE WHEN S.VG_41 > T.VG_41 THEN S.[VG_41_CREATETIME] ELSE T.[VG_41_CREATETIME] END        WHEN NOT MATCHED     THEN     INSERT     ([MULTI_FUND_ID],     [TR_ORD_NUM],     [EXECUTION_TIME],     [DEALING_DESK],     [VG_41],     [VG_41_CREATETIME])         VALUES     (S.[MULTI_FUND_ID],     S.[TR_ORD_NUM],     S.[EXECUTION_TIME],     S.[DEALING_DESK],     S.[VG_41],     S.[VG_41_CREATETIME]) ;         IF OBJECT_ID('tempdb..#maxtouchcount', 'U') IS NOT NULL DROP TABLE #maxtouchcount     IF OBJECT_ID('tempdb..#trwo_exceptions', 'U') IS NOT NULL DROP TABLE #trwo_exceptions     IF OBJECT_ID('tempdb..#trwo_final', 'U') IS NOT NULL DROP TABLE #trwo_final     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit            END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_500_DEALER_LIMIT_FX  CreateDate: 2025-06-26 17:43:55.370  ModifyDate: 2025-06-26 17:43:55.370  --- DEFINITION START ---  -- =============================================    -- Author:  <LIZZIE REYNOLDS>    -- Create date: <28/06/2019>    -- Description: <DEALER LIMIT USING FX MANAGER DATA ONLY- NEEDS ALADDIN DATA ADDING>    -- =============================================    CREATE PROCEDURE [dbo].[VG_500_DEALER_LIMIT_FX]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;                IF OBJECT_ID('tempdb..#MAX_TOUCH_PM', 'U') IS NOT NULL DROP TABLE #MAX_TOUCH_PM    SELECT DISTINCT      ORD_NUM,     MAX(TOUCH_COUNT) AS MAX_TCH      INTO #MAX_TOUCH_PM     FROM VISTA_REPORTING.DBO.PM_ORDERS      GROUP BY ORD_NUM               --ALADDIN POP    IF OBJECT_ID('tempdb..#AL_POP', 'U') IS NOT NULL DROP TABLE #AL_POP    SELECT DISTINCT PM.*    INTO #AL_POP    FROM VISTA_REPORTING.DBO.PM_ORDERS PM    LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD ON TDD.INITIALS = PM.TRADER AND CAST(PM.PULL_DATE AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE) AND TDD.DEALING_DESK = 'FX'    INNER JOIN #MAX_TOUCH_PM MTP ON MTP.MAX_TCH = PM.TOUCH_COUNT AND MTP.ORD_NUM = PM.ORD_NUM    WHERE PM.DEALING_DESK  = 'FX'                --FX POP    IF OBJECT_ID('tempdb..#FX_POP', 'U') IS NOT NULL DROP TABLE #FX_POP    SELECT DISTINCT      FX.FXM_ORDER_ID     , FX.INSTRUCTION_TYPE     ,FX.NOTIONAL_AMOUNT_GBP     ,NOTIONAL_AMOUNT_GBP_FAR     , FX.NR_LEG_PRODUCT     , FX.FR_LEG_PRODUCT     , FXT.DEALT_BY     , TDD.FULL_NAME     ,FXT.DEALER_FORWARD_LIMIT AS FORWARD_LIMIT     ,FXT.DEALER_NDF_LIMIT AS NDF_LIMIT     ,FXT.DEALER_SPOT_LIMIT AS SPOT_LIMIT     ,FXT.TRADE_ID    INTO #FX_POP    FROM VISTA_REPORTING.DBO.FX_ORDERS FX    LEFT JOIN VISTA_REPORTING.DBO.FX_TRADES FXT ON FX.FXM_ORDER_ID = FXT.ORDER_ID    LEFT JOIN VISTA_REPORTING.dbo.TREASURY_DEALER_DESK TDD ON  TDD.MG_USER_ID = FXT.DEALT_BY AND CAST(FXT.PULL_DATE AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE)                IF OBJECT_ID('tempdb..#FX_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #FX_EXCEPTIONS    SELECT DISTINCT     FX.*,     CASE WHEN fx.INSTRUCTION_TYPE = 'SPOT'  AND  fx.NOTIONAL_AMOUNT_GBP > ISNULL(fx.SPOT_LIMIT,0) THEN 1 ELSE 0 END AS SPOT_EXCEPTION_FLAG,         CASE WHEN fx.INSTRUCTION_TYPE in ('FORWARD', 'NDF')  AND   fx.NOTIONAL_AMOUNT_GBP > ISNULL(FX.SPOT_LIMIT,0) THEN 1       WHEN fx.INSTRUCTION_TYPE =  'FORWARD' AND   fx.NOTIONAL_AMOUNT_GBP > ISNULL(FX.FORWARD_LIMIT,0) THEN 1       WHEN fx.INSTRUCTION_TYPE = 'NDF'      AND  fx.NOTIONAL_AMOUNT_GBP  > ISNULL(FX.NDF_LIMIT,0) THEN 1       ELSE 0 END AS FORWARD_NDF_EXCEPTION_FLAG,         --CASE WHEN fx.INSTRUCTION_TYPE = 'SWAP'  AND T1.SM_SEC_TYPE = 'SPOT' AND TEST.SM_SEC_TYPE = 'FWRD' AND 1.0*(ABS(INSTRUCTED_AMOUNT - INSTRUCTED_AMOUNT_FAR)) /NULLIF(GBP_INDEX_RATE,0) > ISNULL(T1.SPOT_LIMIT,0) THEN 1     --  WHEN fx.INSTRUCTION_TYPE = 'SWAP' AND  T1.SM_SEC_TYPE = 'SPOT' AND TEST.SM_SEC_TYPE = 'FWRD' AND 1.0*(ABS(INSTRUCTED_AMOUNT_FAR)) /NULLIF(GBP_INDEX_RATE,0) > ISNULL(T1.FORWARD_LIMIT,0) THEN 1     --  ELSE 0 END AS SWAP_SPOT_FWD_FLAG,         CASE WHEN FX.INSTRUCTION_TYPE = 'FX SWAP' AND NR_LEG_PRODUCT = 'SPOT' AND FR_LEG_PRODUCT = 'FWD' AND ABS(NOTIONAL_AMOUNT_GBP  -  NOTIONAL_AMOUNT_GBP_FAR) >ISNULL(FX.SPOT_LIMIT,0) THEN 1      WHEN  FX.INSTRUCTION_TYPE = 'FX SWAP' AND NR_LEG_PRODUCT = 'SPOT' AND FR_LEG_PRODUCT = 'FWD' AND NOTIONAL_AMOUNT_GBP_FAR > ISNULL(FX.FORWARD_LIMIT,0) THEN 1      ELSE 0 END AS SWAP_SPOT_FWD_FLAG,         CASE WHEN FX.INSTRUCTION_TYPE IN( 'FX SWAP', 'NDS')  AND NR_LEG_PRODUCT = 'FWD' AND FR_LEG_PRODUCT = 'FWD' AND ABS(NOTIONAL_AMOUNT_GBP  -  NOTIONAL_AMOUNT_GBP_FAR) > ISNULL(FX.SPOT_LIMIT,0) THEN 1      WHEN  FX.INSTRUCTION_TYPE  = 'FX SWAP' AND NR_LEG_PRODUCT = 'FWD' AND FR_LEG_PRODUCT = 'FWD' AND (NOTIONAL_AMOUNT_GBP_FAR > ISNULL(FX.FORWARD_LIMIT,0) OR NOTIONAL_AMOUNT_GBP > ISNULL(FX.FORWARD_LIMIT,0)) THEN 1      WHEN  FX.INSTRUCTION_TYPE  = 'NDS' AND NR_LEG_PRODUCT = 'FWD' AND FR_LEG_PRODUCT = 'FWD' AND (NOTIONAL_AMOUNT_GBP_FAR > ISNULL(FX.NDF_LIMIT,0) OR NOTIONAL_AMOUNT_GBP > ISNULL(FX.NDF_LIMIT,0)) THEN 1          ELSE 0 END AS SWAP_FWD_FWD_FLAG         ---CASE WHEN fx.INSTRUCTION_TYPE IN ( 'SWAP', 'NDS') AND T1.SM_SEC_TYPE = 'FWRD' AND TEST.SM_SEC_TYPE = 'FWRD' AND 1.0*(ABS(INSTRUCTED_AMOUNT - INSTRUCTED_AMOUNT_FAR)) /NULLIF(GBP_INDEX_RATE,0) > ISNULL(T1.SPOT_LIMIT,0) THEN 1     --  WHEN fx.INSTRUCTION_TYPE IN ( 'SWAP' ,'NDS') AND T1.SM_SEC_TYPE = 'FWRD' AND TEST.SM_SEC_TYPE = 'FWRD' AND 1.0*(ABS(INSTRUCTED_AMOUNT_FAR)) /NULLIF(GBP_INDEX_RATE,0) > ISNULL(T1.FORWARD_LIMIT,0) THEN 1     --  WHEN fx.INSTRUCTION_TYPE IN ( 'SWAP', 'NDS') AND T1.SM_SEC_TYPE = 'FWRD' AND TEST.SM_SEC_TYPE = 'FWRD' AND 1.0*(ABS(INSTRUCTED_AMOUNT)) /NULLIF(GBP_INDEX_RATE,0) > ISNULL(T1.FORWARD_LIMIT,0) THEN 1     --  ELSE 0 END AS SWAP_FWD_FWD_FLAG           INTO #FX_EXCEPTIONS     FROM #FX_POP FX     WHERE TRADE_ID IS NOT NULL         UNION     SELECT DISTINCT     FX.*,     0 AS SPOT_EXCEPTION_FLAG,     0 AS FORWARD_NDF_EXCEPTION_FLAG,     0 AS SWAP_SPOT_FWD_FLAG,     0 AS SWAP_FWD_FWD_FLAG     FROM #FX_POP FX     WHERE TRADE_ID IS NULL            IF OBJECT_ID('tempdb..#fx_vg', 'U') IS NOT NULL DROP TABLE #fx_vg    SELECT T.FXM_ORDER_ID as ORDER_ID,     CASE WHEN T.SPOT_EXCEPTION_FLAG = 1 THEN 1 WHEN T.FORWARD_NDF_EXCEPTION_FLAG =1 THEN 1 WHEN T.SWAP_SPOT_FWD_FLAG = 1 THEN 1 WHEN T.SWAP_FWD_FWD_FLAG = 1 THEN 1 ELSE 0      END AS VG_500,     CASE WHEN T.SPOT_EXCEPTION_FLAG = 1 THEN GETDATE() WHEN T.FORWARD_NDF_EXCEPTION_FLAG =1 THEN GETDATE() WHEN T.SWAP_SPOT_FWD_FLAG = 1 THEN GETDATE() WHEN T.SWAP_FWD_FWD_FLAG = 1 THEN GETDATE() ELSE NULL      END AS EXCEPTION_FLAG_CREATETIME,     'FX' AS SOURCE     INTO #fx_vg    FROM #FX_EXCEPTIONS t        IF OBJECT_ID('tempdb..#vg_combined', 'U') IS NOT NULL DROP TABLE #vg_combined    select distinct *    into #vg_combined    from #fx_vg    UNION    SELECT DISTINCT     AL.ORD_NUM,    0 AS VG_500,    NULL AS EXCEPTION_FLAG_CREATETIME,    'AL' AS SOURCE    FROM #AL_POP AL                    --Add records into FINAL_STATUS_UPDATE_TABLE    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    SELECT DISTINCT     CASE WHEN SOURCE = 'AL' THEN CONCAT(ORDER_ID, '_500', '_AL')     WHEN SOURCE = 'FX' THEN CONCAT(ORDER_ID, '_500', '_FX') END AS ID,     '1A2' AS STATUS,     NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table    FROM #vg_combined    WHERE VG_500 = 1        MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'FX',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'FX');        --Add records into AUDIT_TABLE_CASH    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    SELECT DISTINCT      NULL AS TRADE_ID,     CASE WHEN CE.SOURCE = 'AL' THEN OC.TRD_ORD      ELSE NULL       END AS TRD_ORD,       CASE WHEN CE.SOURCE = 'FX' THEN CE.ORDER_ID         WHEN CE.SOURCE = 'AL' THEN PM.ORD_NUM         END AS ORDER_ID,     'Dealer Limit' AS Exception_Type,     CASE WHEN CE.SOURCE = 'AL' THEN CONCAT(CE.ORDER_ID , '_500', '_AL')      WHEN CE.SOURCE = 'FX' THEN CONCAT(CE.ORDER_ID , '_500', '_FX')       END AS ID,     NULL AS REASON,     NULL AS COMMENT,     'With Reviewer' AS Status,     NULL AS ClientExecID,     'FX' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],tdd4.[FULL_NAME],tdd3.[FULL_NAME],dd.[DEFAULT_DEALER]) AS DEALER, --tdd2,tdd,tdd4,tdd3 for order level reports to prioritise order level trader field     '1A2' AS STATUS_ID,     CASE WHEN CE.SOURCE = 'FX' THEN FXO.INSTRUCTION_RECEIVED_DATE_TIME      WHEN CE.SOURCE = 'AL' THEN PM.AUTH_TIME       END AS ORD_AUTH,      null AS TRADE_EXEC    INTO #temp_audit    FROM #vg_combined CE    left join (SELECT DISTINCT TRADE_ID, ORDER_ID, EXECUTED_DATE_TIME, DEALT_BY, PULL_DATE, [ACCEPTED_BY] FROM VISTA_STAGING.dbo.fx_TRADES) FXT on CE.SOURCE = 'FX' AND CE.order_id= FXT.ORDER_ID    left join (SELECT DISTINCT FXM_ORDER_ID, MIN(INSTRUCTION_RECEIVED_DATE_TIME) as INSTRUCTION_RECEIVED_DATE_TIME, MIN(PULL_DATE) as PULL_DATE FROM VISTA_STAGING.dbo.FX_ORDERS GROUP BY FXM_ORDER_ID) FXO    on FXO.[FXM_ORDER_ID] = CE.[ORDER_ID] AND CE.SOURCE = 'FX'    LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.TRD_ORD = CE.ORDER_ID AND CE.SOURCE = 'AL'    LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER, PULL_DATE FROM VISTA_REPORTING.DBO.TRADES WHERE FinalFlag = 1) T ON CE.SOURCE = 'AL' AND oc.TRD_ORD = T.ORD_NUM    LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME, MIN(PULL_DATE) as PULL_DATE FROM VISTA_REPORTING.DBO.PM_ORDERS GROUP BY ORD_NUM) PM ON PM.ORD_NUM = OC.PM_ORD    LEFT JOIN (SELECT DISTINCT pmo.TRADER, pmo.TOUCH_COUNT, pmo.ORD_NUM FROM Vista_Reporting.dbo.PM_ORDERS pmo        INNER JOIN (SELECT MIN(TOUCH_COUNT) as TOUCH_COUNT, ORD_NUM FROM Vista_Reporting.dbo.PM_ORDERS WHERE TRADER IS NOT NULL GROUP BY ORD_NUM) pmo_min        on pmo.ORD_NUM = pmo_min.ORD_NUM and pmo.TOUCH_COUNT = pmo_min.TOUCH_COUNT) pmo_min on pmo_min.ORD_NUM = CE.ORDER_ID    left join  VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd    on tdd.[MG_USER_ID] = fxt.[DEALT_BY] AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2    on tdd2.[MG_USER_ID] = fxt.[ACCEPTED_BY] AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)    left join VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd3    on tdd3.[INITIALS]  = t.[TRD_TRADER] AND CAST(t.[PULL_DATE] AS DATE) BETWEEN CAST(tdd3.[DATE_FROM] AS DATE) AND CAST(tdd3.[DATE_TO] AS DATE)    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd4    on tdd4.[INITIALS] = pmo_min.[TRADER] AND CAST(pm.[PULL_DATE] AS DATE) BETWEEN CAST(tdd4.[DATE_FROM] AS DATE) AND CAST(tdd4.[DATE_TO] AS DATE)    left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd     on dd.[REPORT_NAME] = 'Dealer Limit' AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE],t.[PULL_DATE],pm.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)    WHERE CE.VG_500 = 1         MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_FX AS T    USING #temp_audit AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (TRADE_ID, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);            -- ==============================================================================    /* Update Exceptions Table */    -- ==============================================================================        IF OBJECT_ID('VISTA_STAGING.DBO.VG_500_DEALER_LIMIT_FX_TABLE' , 'U') IS NULL     SELECT DISTINCT *      INTO VISTA_STAGING.DBO.VG_500_DEALER_LIMIT_FX_TABLE      FROM #vg_combined    ELSE     IF OBJECT_ID('tempdb..#TEMP_DL_TABLE', 'U') IS NOT NULL DROP TABLE #TEMP_DL_TABLE     SELECT DISTINCT *      INTO #TEMP_DL_TABLE     FROM #vg_combined         MERGE VISTA_STAGING.DBO.VG_500_DEALER_LIMIT_FX_TABLE AS T      USING #TEMP_DL_TABLE AS S     ON (T.ORDER_ID = S.ORDER_ID AND T.SOURCE = S.SOURCE)     WHEN MATCHED     THEN UPDATE     SET     ORDER_ID = CASE WHEN S.VG_500 > T.VG_500 THEN S.ORDER_ID ELSE T.ORDER_ID END,     VG_500 = CASE WHEN S.VG_500 > T.VG_500 THEN S.VG_500 ELSE T.VG_500 END,     EXCEPTION_FLAG_CREATETIME = CASE WHEN S.VG_500 >T.VG_500 THEN S.EXCEPTION_FLAG_CREATETIME ELSE T.EXCEPTION_FLAG_CREATETIME END,     SOURCE = CASE WHEN S.VG_500 > T.VG_500 THEN S.SOURCE ELSE T.SOURCE END        WHEN NOT MATCHED     THEN INSERT     (ORDER_ID     ,VG_500     ,EXCEPTION_FLAG_CREATETIME      ,SOURCE )         VALUES     (S.ORDER_ID     ,S.VG_500     ,EXCEPTION_FLAG_CREATETIME     ,S.SOURCE );         IF OBJECT_ID('tempdb..#AL_POP', 'U') IS NOT NULL DROP TABLE #AL_POP     IF OBJECT_ID('tempdb..#FX_POP', 'U') IS NOT NULL DROP TABLE #FX_POP     IF OBJECT_ID('tempdb..#FX_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #FX_EXCEPTIONS     IF OBJECT_ID('tempdb..#fx_vg', 'U') IS NOT NULL DROP TABLE #fx_vg     IF OBJECT_ID('tempdb..#vg_combined', 'U') IS NOT NULL DROP TABLE #vg_combined     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit            END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_501_SPOT_REFERENCE_RATE_FX  CreateDate: 2025-06-26 17:43:26.413  ModifyDate: 2025-06-26 17:43:26.413  --- DEFINITION START ---  -- =============================================    -- Author:  <LIZZIE REYNOLDS>    -- Create date: <28/06/2019>    -- Description: <Spot reference rate logic for FX- NEEDS FINISHING>    -- =============================================    CREATE PROCEDURE [dbo].[VG_501_SPOT_REFERENCE_RATE_FX]     -- Add the parameters for the stored procedure here        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;             --THIS IS NOW IN THE BEST EXECUTION STAGING SCRIPT SO PLEASE MAKE ANY UPDATES TO SRR LOGIC THERE.     --LIZZIE REYNOLDS 14/08/2019              ----THIS CALCULATES THE SPOT DIFFERENCE    --    --IF OBJECT_ID('tempdb..#fx_thresholds', 'U') IS NOT NULL DROP TABLE #FX_THRESHOLDS    --SELECT DISTINCT TRADE_ID,    -- NOTIONAL_CCY AS INSTRUCTED_CCY,    -- SPOT_RATE,    -- SPOT_RATE_FAR,    -- MARKET_ARRIVAL_INDICATIVE_SPOT_FAR_PRICE,    -- MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE,    -- ACTION1,    -- ACTION2,    -- FXT.BASE_CCY,    -- FXT.CONTRA_CCY,    -- SPOT.SPOT_TOLERANCE_THRESHOLD,    -- SPOTFAR.SPOT_TOLERANCE_THRESHOLD AS SPOT_TOLERANCE_THRESHOLD_LEG2,    -- case when NOTIONAL_CCY = fxt.BASE_CCY and NOTIONAL_AMOUNT_FAR is not null and NOTIONAL_AMOUNT > NOTIONAL_AMOUNT_FAR then ACTION1     --  when NOTIONAL_CCY = FXT.BASE_CCY AND NOTIONAL_AMOUNT_FAR IS NOT NULL AND NOTIONAL_AMOUNT <= NOTIONAL_AMOUNT_FAR THEN ACTION2    --  WHEN NOTIONAL_CCY != FXT.BASE_CCY AND NOTIONAL_AMOUNT_FAR IS NOT NULL AND NOTIONAL_AMOUNT < NOTIONAL_AMOUNT_FAR THEN ACTION1    --  WHEN NOTIONAL_CCY != FXT.BASE_CCY AND NOTIONAL_AMOUNT_FAR IS NOT NULL AND NOTIONAL_AMOUNT >= NOTIONAL_AMOUNT_FAR THEN ACTION2    --  else null    --  END AS DEALT_SIDE_SWAP,    -- 100.0*(MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE- SPOT_RATE)/NULLIF(MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE,0) AS SPOT_DIFFERENCE_NEAR,    -- 100.0*(MARKET_ARRIVAL_INDICATIVE_SPOT_FAR_PRICE- SPOT_RATE_FAR)/NULLIF(MARKET_ARRIVAL_INDICATIVE_SPOT_FAR_PRICE,0) AS SPOT_DIFFERENCE_FAR    --into #fx_thresholds    --from VISTA_REPORTING.dbo.FX_TRADES FXT    --LEFT JOIN VISTA_STAGING.DBO.REF_FX_SPOT_TOLERANCE_THRESHOLD SPOT ON FXT.BUY_CCY = SPOT.BASE_CCY AND FXT.SELL_CCY = SPOT.CONTRA_CCY AND CAST(FXT.PULL_DATE AS DATE) BETWEEN CAST(SPOT.DATE_FROM AS DATE) AND CAST(SPOT.DATE_TO AS DATE)    --LEFT JOIN VISTA_STAGING.DBO.REF_FX_SPOT_TOLERANCE_THRESHOLD SPOTFAR ON FXT.BUY_CCY_LEG2 = SPOTFAR.BASE_CCY AND FXT.SELL_CCY_LEG2 = SPOTFAR.CONTRA_CCY AND CAST(FXT.PULL_DATE AS DATE) BETWEEN CAST(SPOTFAR.DATE_FROM AS DATE) AND CAST(SPOTFAR.DATE_TO AS DATE)    --    --    --    --IF OBJECT_ID('tempdb..#DEALT_SIDE', 'U') IS NOT NULL DROP TABLE #DEALT_SIDE    --SELECT DISTINCT    -- *,    -- CASE WHEN SPOT_DIFFERENCE_NEAR > SPOT_TOLERANCE_THRESHOLD THEN 1 ELSE 0 END AS THRESHOLD_EXCEPTION,    -- CASE WHEN SPOT_DIFFERENCE_FAR > SPOT_TOLERANCE_THRESHOLD_LEG2 THEN 1 ELSE 0 END AS THRESHOLD_FAR_EXCEPTION,    -- CASE WHEN DEALT_SIDE_SWAP is null then ACTION1 else DEALT_SIDE_SWAP end as DEALT_SIDE    -- INTO #DEALT_SIDE    --FROM #fx_thresholds    --    --IF OBJECT_ID('tempdb..#SECONDARY_TEST', 'U') IS NOT NULL DROP TABLE #SECONDARY_TEST    --SELECT DISTINCT     -- TRADE_ID,    -- THRESHOLD_EXCEPTION,    -- THRESHOLD_FAR_EXCEPTION,    -- CASE WHEN BASE_CCY = INSTRUCTED_CCY AND DEALT_SIDE = 'BUY' AND MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE > SPOT_RATE THEN 1    -- WHEN BASE_CCY != INSTRUCTED_CCY AND DEALT_SIDE = 'SELL' AND MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE > SPOT_RATE THEN 1    -- WHEN BASE_CCY = INSTRUCTED_CCY AND DEALT_SIDE = 'SELL' AND MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE < SPOT_RATE THEN 1    -- WHEN BASE_CCY != INSTRUCTED_CCY AND DEALT_SIDE = 'BUY' AND MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE < SPOT_RATE THEN 1    -- ELSE 0 END AS DEALT_SIDE_EXCEPTIONS    -- INTO #SECONDARY_TEST    --FROM #DEALT_SIDE    --    --    --IF OBJECT_ID('tempdb..#exceptions_fx', 'U') IS NOT NULL DROP TABLE #exceptions_fx    --SELECT DISTINCT    -- TRADE_ID,    -- 'FX' AS SOURCE,    -- CASE WHEN (THRESHOLD_EXCEPTION = 1 OR THRESHOLD_FAR_EXCEPTION = 1) AND DEALT_SIDE_EXCEPTIONS = 0 THEN 1 ELSE 0 END AS VG_501,    -- CASE WHEN (THRESHOLD_EXCEPTION = 1 OR THRESHOLD_FAR_EXCEPTION = 1) AND DEALT_SIDE_EXCEPTIONS = 0  THEN GETDATE() ELSE NULL END AS VG_501_CREATETIME    -- INTO #exceptions_fx    -- FROM #SECONDARY_TEST    --    --    --    ----Add records into FINAL_STATUS_UPDATE_TABLE    --IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    --SELECT DISTINCT    -- CASE WHEN SOURCE = 'AL' THEN CONCAT(TRADE_ID, '_501', '_AL')    -- WHEN SOURCE = 'FX' THEN CONCAT(TRADE_ID, '_501', '_FX') END AS ID,    -- '1A2' AS STATUS,    -- NULL AS FINAL_UPDATED_TIME    --INTO #temp_status_table    --FROM #exceptions_fx    --WHERE VG_501 = 1    --    --MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    --USING #temp_status_table AS S    --ON (T.ID = S.ID)    --WHEN MATCHED    -- THEN     -- UPDATE SET    --  T.ID=T.ID,    --  T.STATUS=T.STATUS,    --  T.DEALING_DESK = 'FX',    --  T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    --WHEN NOT MATCHED     -- THEN     -- INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)    -- VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'FX');    --    ---- ==============================================================================    --/* Adding to AUDIT_TABLE_FX */    ---- ==============================================================================    --IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    --SELECT DISTINCT    -- CASE     --  WHEN ex.[SOURCE] = 'AL' THEN t.[MULTI_FUND_ID]    --  WHEN ex.[SOURCE] = 'FX' THEN fxt.[TRADE_ID]    -- END AS TRANSACTION_NUMBER,    -- CASE     --  WHEN ex.[SOURCE] = 'AL' THEN t.[ORD_NUM]     --  WHEN ex.[SOURCE] = 'FX' THEN FXT.[ORDER_ID]    -- ELSE NULL     -- END AS TRD_ORD,     -- CASE     --  WHEN ex.[SOURCE] = 'AL' THEN oc.[PM_ORD]    --  WHEN ex.[SOURCE] = 'FX' THEN FXT.[ORDER_ID]    -- END AS ORDER_ID,    -- 'SPOT Reference Rate' AS Exception_Type,    -- CONCAT(ex.[TRADE_ID],'_501_',ex.[SOURCE]) AS ID,    -- NULL AS REASON,    -- NULL AS COMMENT,    -- 'With Reviewer' AS Status,    -- NULL AS ClientExecID,    -- 'FX' AS DEALER_DESK,    -- GETDATE() AS CREATE_TIME,    -- NULL AS UPDATE_TIME,    -- tdd.[FULL_NAME] AS DEALER,    -- '1A2' AS STATUS_ID,    -- CASE     --  WHEN ex.[SOURCE] = 'AL' THEN trd_o.[AUTH_TIME]    --  WHEN ex.[SOURCE] = 'FX' THEN fxo.[INSTRUCTION_RECEIVED_DATE_TIME]    -- END AS ORD_AUTH,    -- CASE     --  WHEN ex.[SOURCE] = 'AL' THEN t.[EXECUTION_TIME]     --  WHEN ex.[SOURCE] = 'FX' THEN fxt.[EXECUTED_DATE_TIME]    -- END AS TRADE_EXEC    --INTO #temp_audit    --FROM #exceptions_fx ex    --left join (SELECT DISTINCT TRADE_ID, ORDER_ID, EXECUTED_DATE_TIME, DEALT_BY, PULL_DATE FROM VISTA_REPORTING.dbo.FX_TRADES) fxt    --on ex.[TRADE_ID] = fxt.[TRADE_ID] and ex.[SOURCE] = 'FX'    --left join (SELECT DISTINCT FXM_ORDER_ID, MIN(INSTRUCTION_RECEIVED_DATE_TIME) as INSTRUCTION_RECEIVED_DATE_TIME FROM VISTA_REPORTING.dbo.FX_ORDERS GROUP BY FXM_ORDER_ID) fxo    --on FXT.[ORDER_ID] = fxo.[FXM_ORDER_ID] and ex.[SOURCE] = 'FX'    --left join (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER, PULL_DATE FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t    --ON ex.[SOURCE] = 'AL' AND ex.[TRADE_ID] = t.[MULTI_FUND_ID]    --left join (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o    --ON t.[ORD_NUM] = trd_o.[ORD_NUM]     --left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc    --ON trd_o.[ORD_NUM] = oc.[TRD_ORD]    --left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd     --on (tdd.[DEALING_DESK] = 'FX' and tdd.[360T_USER_ID] = fxt.[DEALT_BY] and ex.[SOURCE] = 'FX' AND CAST(fxt.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE))     --or (tdd.[DEALING_DESK] = 'FX' and tdd.[INITIALS] = t.[TRD_TRADER] and ex.[SOURCE] = 'AL' AND CAST(t.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE))     --    --WHERE ex.[VG_501] = 1    --    --MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_FX AS T    --USING #temp_audit AS S    --ON (T.ID = S.ID)    --WHEN MATCHED    -- THEN --Do nothing    -- UPDATE SET    -- T.ID = T.ID    --WHEN NOT MATCHED     -- THEN     -- INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)    -- VALUES (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);    --    --    ---- ==============================================================================    --/* Update Exceptions Table */    ---- ==============================================================================    --    --    --    --IF OBJECT_ID('VISTA_STAGING.DBO.VG_501_SPOT_REFERENCE_RATE_FX_TABLE' , 'U') IS NULL    -- SELECT DISTINCT *     -- INTO VISTA_STAGING.DBO.VG_501_SPOT_REFERENCE_RATE_FX_TABLE     -- FROM #exceptions_fx    --ELSE    -- IF OBJECT_ID('tempdb..#TEMP_SRR_TABLE', 'U') IS NOT NULL DROP TABLE #TEMP_SRR_TABLE    -- SELECT DISTINCT *     -- INTO #TEMP_SRR_TABLE    -- FROM #exceptions_fx    --    -- MERGE VISTA_STAGING.DBO.VG_501_SPOT_REFERENCE_RATE_FX_TABLE AS T     -- USING #TEMP_SRR_TABLE AS S    -- ON (T.TRADE_ID = S.TRADE_ID AND T.SOURCE = S.SOURCE)     --WHEN MATCHED    -- THEN UPDATE    -- SET    -- TRADE_ID = CASE WHEN S.VG_501 > T.VG_501 THEN S.TRADE_ID ELSE T.TRADE_ID END,    -- VG_501 = CASE WHEN S.VG_501 > T.VG_501 THEN S.VG_501 ELSE T.VG_501 END,    -- VG_501_CREATETIME = CASE WHEN S.VG_501 >T.VG_501 THEN S.VG_501_CREATETIME ELSE T.VG_501_CREATETIME END,    -- SOURCE = CASE WHEN S.VG_501 > T.VG_501 THEN S.SOURCE ELSE T.SOURCE END    --    --WHEN NOT MATCHED    -- THEN INSERT    -- (TRADE_ID    -- ,VG_501    -- ,VG_501_CREATETIME     -- ,SOURCE )    --    -- VALUES    -- (S.TRADE_ID    -- ,S.VG_501    -- ,VG_501_CREATETIME    -- ,S.SOURCE );    --    --    --    --IF OBJECT_ID('tempdb..#fx_thresholds', 'U') IS NOT NULL DROP TABLE #FX_THRESHOLDS    --    END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_601_OUT_OF_HOURS_CASH  CreateDate: 2025-06-26 17:42:47.233  ModifyDate: 2025-06-26 17:42:47.233  --- DEFINITION START ---  -- =============================================    -- Author:  <LIZZIE REYNOLDS>    -- Create date: <19/06/2019>    -- Description: <OUT OF HOURS ORDERS EXCEPTIONS FOR THE CASH DESK,,>    --updates    --12/07/2019 ER I have changed the script to exclude orders/trades without execution/instructed time from exceptions after point made in testing.            --28/03/2023 - created for Jira number :    --SG87463 - This number has not been raised by client but we had a problem with Cash Script because of duplication    -- =============================================    CREATE PROCEDURE [dbo].[VG_601_OUT_OF_HOURS_CASH]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        IF OBJECT_ID('tempdb..#MAX_TOUCH_PM', 'U') IS NOT NULL DROP TABLE #MAX_TOUCH_PM    SELECT DISTINCT      ORD_NUM,      MAX(TOUCH_COUNT) AS MAX_TOUCH     INTO #MAX_TOUCH_PM    FROM VISTA_REPORTING.DBO.PM_ORDERS    GROUP BY ORD_NUM            IF OBJECT_ID('tempdb..#temp_recent_dealer_al', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_al    select distinct oc.PM_ORD as ORD_NUM,     trd_trader     into #temp_recent_dealer_al     from VISTA_REPORTING.dbo.TRADES t     left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on oc.TRD_ORD = t.ORD_NUM     INNER JOIN (SELECT        OC.PM_ORD AS ORD_NUM,        MAX(EXECUTION_TIME) AS MAX_EXEC,        MAX(TOUCH_COUNT) AS MAX_TOUCH        FROM VISTA_REPORTING.dbo.TRADES T        LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS OC ON OC.TRD_ORD = T.ORD_NUM        GROUP BY OC.PM_ORD) T2 ON T2.ORD_NUM = OC.PM_ORD               AND T2.MAX_EXEC = t.EXECUTION_TIME              AND T2.MAX_TOUCH = t.TOUCH_COUNT            IF OBJECT_ID('tempdb..#temp_recent_dealer_cm', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_cm    SELECT DISTINCT    ct.ORDER_ID,           ct.DEALER_NAME    into #temp_recent_dealer_cm    FROM VISTA_REPORTING.dbo.CASH_TRADES ct    INNER JOIN (SELECT                   ORDER_ID,                  MAX(EXECUTED_DATETIME) AS MAX_EXEC,                  MAX(API_REQUESTED_DATE) AS MAX_API_REQ                  FROM VISTA_REPORTING.dbo.CASH_TRADES                  GROUP BY ORDER_ID) ct2 ON nullif(ct2.ORDER_ID, '0') = ct.ORDER_ID                                             AND ct2.MAX_EXEC = ct.EXECUTED_DATETIME                                            AND ct2.MAX_API_REQ = ct.API_REQUESTED_DATE                --ALADDIN POP    IF OBJECT_ID('tempdb..#ALADDIN_ORDERS', 'U') IS NOT NULL DROP TABLE #ALADDIN_ORDERS     SELECT DISTINCT       pm.PULL_DATE,      pm.ORD_NUM,       pm.AUTH_TIME,      pm.TOUCH_COUNT     INTO #ALADDIN_ORDERS     FROM VISTA_REPORTING.DBO.PM_ORDERS PM     INNER JOIN #MAX_TOUCH_PM MT ON PM.TOUCH_COUNT = MT.MAX_TOUCH AND PM.ORD_NUM = MT.ORD_NUM     WHERE DEALING_DESK = 'CASH'        IF OBJECT_ID('tempdb..#MAX_TOUCH_T', 'U') IS NOT NULL DROP TABLE #MAX_TOUCH_T    SELECT DISTINCT      ORD_NUM,      MAX(TOUCH_COUNT) AS MAX_TOUCH     INTO #MAX_TOUCH_T    FROM VISTA_REPORTING.DBO.TRADES    GROUP BY ORD_NUM        IF OBJECT_ID('tempdb..#ALADDIN_TRADES', 'U') IS NOT NULL DROP TABLE #ALADDIN_TRADES     SELECT DISTINCT       T.PULL_DATE,      T.ORD_NUM,      T.MULTI_FUND_ID,      T.EXECUTION_TIME,      T.TOUCH_COUNT     INTO #ALADDIN_TRADES     FROM VISTA_REPORTING.DBO.TRADES T     INNER JOIN #MAX_TOUCH_T MT ON T.TOUCH_COUNT = MT.MAX_TOUCH AND T.ORD_NUM = MT.ORD_NUM     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, DEALING_DESK FROM VISTA_REPORTING.DBO.PRIMARY_INST_TYPE_TABLE) PRIM ON PRIM.MULTI_FUND_ID = T.MULTI_FUND_ID     WHERE PRIM.DEALING_DESK = 'CASH'            --CASH MANAGER POP        IF OBJECT_ID('tempdb..#temp_max_req_orders', 'U') IS NOT NULL DROP TABLE #temp_max_req_orders    SELECT      ORDER_ID,     MAX(API_REQUESTED_DATE) AS MAX_API_REQ    INTO #temp_max_req_orders    FROM VISTA_REPORTING.dbo.CASH_ORDERS    GROUP BY ORDER_ID            IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades    SELECT      TRANSACTION_NUMBER,     MAX(API_REQUESTED_DATE) AS MAX_API_REQ    INTO #temp_max_req_trades    FROM VISTA_REPORTING.dbo.CASH_TRADES    GROUP BY TRANSACTION_NUMBER            IF OBJECT_ID('tempdb..#CM_ORDERS', 'U') IS NOT NULL DROP TABLE #CM_ORDERS     select DISTINCT       PULL_DATE,      co.ORDER_ID,       INSTRUCTION_RECEIVED_DATE     INTO #CM_ORDERS     from VISTA_REPORTING.dbo.CASH_ORDERS co     inner join #temp_max_req_orders req on req.MAX_API_REQ = co.API_REQUESTED_DATE and req.ORDER_ID = co.ORDER_ID        IF OBJECT_ID('tempdb..#CM_TRADES', 'U') IS NOT NULL DROP TABLE #CM_TRADES     select DISTINCT  ct.*      INTO #CM_TRADES     from VISTA_REPORTING.dbo.CASH_TRADES ct     inner join #temp_max_req_trades req on req.MAX_API_REQ = ct.API_REQUESTED_DATE and req.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER            IF OBJECT_ID('tempdb..#AL_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #AL_EXCEPTIONS    SELECT DISTINCT     AO.ORD_NUM,     T.MULTI_FUND_ID,     CONVERT(DATETIME, CONVERT(VARCHAR(19),AUTH_TIME, 120)) as AUTH_TIME, --DONE THIS AS MILLISECOND DIFFERENCES WERE CAUSING DUPLICATION, THIS REMOVES THEM AND SETS THEM TO 0      T.EXECUTION_TIME,     CASE WHEN CAST(AUTH_TIME AS TIME) BETWEEN CAST(BH.OPEN_TIME AS TIME) AND CAST(BH.CLOSE_TIME AS TIME) THEN 0 WHEN AUTH_TIME IS NULL THEN 0  ELSE 1 END AS ORDER_EXCEPTION,     CASE WHEN CAST(EXECUTION_TIME AS TIME) BETWEEN CAST(BH.OPEN_TIME AS TIME) AND CAST(BH.CLOSE_TIME AS TIME) THEN 0 WHEN EXECUTION_TIME IS NULL THEN 0 ELSE 1 END AS TRADE_EXCEPTION,     'AL' AS SOURCE     INTO #AL_EXCEPTIONS     FROM #ALADDIN_ORDERS AO    LEFT JOIN VISTA_STAGING.DBO.BUSINESS_HOURS BH ON CAST(AO.PULL_DATE AS DATE) BETWEEN CAST(BH.DATE_FROM AS DATE) AND CAST(BH.DATE_TO AS DATE) and BH.DEALING_DESK = 'CASH'    LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.PM_ORD = AO.ORD_NUM    LEFT JOIN VISTA_REPORTING.DBO.TRADES T ON T.ORD_NUM = OC.TRD_ORD            IF OBJECT_ID('tempdb..#AL_TRADES_WO_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #AL_TRADES_WO_EXCEPTIONS    SELECT DISTINCT     OC.PM_ORD AS ORD_NUM,     MULTI_FUND_ID,     NULL AS AUTH_TIME,     EXECUTION_TIME,     0 AS ORDER_EXCEPTION,     CASE WHEN CAST(EXECUTION_TIME AS TIME) BETWEEN CAST(BH.OPEN_TIME AS TIME) AND CAST(BH.CLOSE_TIME AS TIME) THEN 0 WHEN EXECUTION_TIME IS NULL THEN 0 ELSE 1 END AS TRADE_EXCEPTION,     'AL' AS SOURCE     INTO #AL_TRADES_WO_EXCEPTIONS     FROM #ALADDIN_TRADES ATR    LEFT JOIN VISTA_STAGING.DBO.BUSINESS_HOURS BH ON CAST(ATR.PULL_DATE AS DATE) BETWEEN CAST(BH.DATE_FROM AS DATE) AND CAST(BH.DATE_TO AS DATE)    LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.TRD_ORD = ATR.ORD_NUM    WHERE OC.PM_ORD IS NULL        IF OBJECT_ID('tempdb..#CM_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #CM_EXCEPTIONS    SELECT DISTINCT     CMO.ORDER_ID,     T.TRANSACTION_NUMBER,     INSTRUCTION_RECEIVED_DATE, --CHOOSING THIS OVER INSTRUCTION_RECEIVED_TIME      EXECUTED_DATETIME,      CASE WHEN CAST(INSTRUCTION_RECEIVED_DATE AS TIME) BETWEEN CAST(BH.OPEN_TIME AS TIME) AND CAST(BH.CLOSE_TIME AS TIME) THEN 0 WHEN INSTRUCTION_RECEIVED_DATE IS NULL THEN 0 ELSE 1 END AS ORDER_EXCEPTION,     CASE WHEN CAST(EXECUTED_DATETIME AS TIME) BETWEEN CAST(BH.OPEN_TIME AS TIME) AND CAST(BH.CLOSE_TIME AS TIME) THEN 0  WHEN EXECUTED_DATETIME IS NULL THEN 0 ELSE 1 END AS TRADE_EXCEPTION,     'CM' AS SOURCE     INTO #CM_EXCEPTIONS     FROM #CM_ORDERS CMO     LEFT JOIN VISTA_STAGING.DBO.BUSINESS_HOURS BH ON CAST(CMO.PULL_DATE AS DATE) BETWEEN CAST(BH.DATE_FROM AS DATE) AND CAST(BH.DATE_TO AS DATE) AND BH.DEALING_DESK='CASH'     LEFT JOIN #CM_TRADES T ON NULLIF(CMO.ORDER_ID, 0) = NULLIF(T.ORDER_ID, 0)        IF OBJECT_ID('tempdb..#CM_TRADES_WO_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #CM_TRADES_WO_EXCEPTIONS    SELECT DISTINCT     CMO.ORDER_ID AS ORDER_ID,     TRANSACTION_NUMBER,     INSTRUCTION_RECEIVED_DATE,     EXECUTED_DATETIME,      0 AS ORDER_EXCEPTION,     CASE WHEN CAST(EXECUTED_DATETIME AS TIME) BETWEEN CAST(BH.OPEN_TIME AS TIME) AND CAST(BH.CLOSE_TIME AS TIME) THEN 0 WHEN EXECUTED_DATETIME IS NULL THEN 0 ELSE 1 END AS TRADE_EXCEPTION,     'CM' AS SOURCE     INTO #CM_TRADES_WO_EXCEPTIONS     FROM #CM_TRADES CMT    LEFT JOIN VISTA_STAGING.DBO.BUSINESS_HOURS BH ON CAST(CMT.PULL_DATE AS DATE) BETWEEN CAST(BH.DATE_FROM AS DATE) AND CAST(BH.DATE_TO AS DATE) AND BH.DEALING_DESK='CASH'    LEFT JOIN #CM_ORDERS CMO ON NULLIF(CMO.ORDER_ID, 0) = NULLIF(CMT.ORDER_ID, 0)    WHERE CMO.ORDER_ID IS NULL         IF OBJECT_ID('tempdb..#COMBINED_AL_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #COMBINED_AL_EXCEPTIONS     SELECT DISTINCT *,     CASE WHEN TRADE_EXCEPTION = 1 OR ORDER_EXCEPTION = 1 THEN 1 ELSE 0 END AS VG_601      INTO #COMBINED_AL_EXCEPTIONS     FROM #AL_EXCEPTIONS    UNION    SELECT DISTINCT *,     CASE WHEN TRADE_EXCEPTION = 1 OR ORDER_EXCEPTION = 1 THEN 1 ELSE 0 END AS VG_601     FROM #AL_TRADES_WO_EXCEPTIONS         IF OBJECT_ID('tempdb..#COMBINED_CM_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #COMBINED_CM_EXCEPTIONS     SELECT DISTINCT * ,     CASE WHEN TRADE_EXCEPTION = 1 OR ORDER_EXCEPTION = 1 THEN 1 ELSE 0 END AS VG_601      INTO #COMBINED_CM_EXCEPTIONS     FROM #CM_EXCEPTIONS    UNION    SELECT DISTINCT *,     CASE WHEN TRADE_EXCEPTION = 1 OR ORDER_EXCEPTION = 1 THEN 1 ELSE 0 END AS VG_601     FROM #CM_TRADES_WO_EXCEPTIONS                IF OBJECT_ID('tempdb..#COMBINED_CM_AL', 'U') IS NOT NULL DROP TABLE #COMBINED_CM_AL    SELECT DISTINCT * ,     CASE WHEN VG_601 = 1 THEN GETDATE() ELSE NULL END AS VG_601_CREATETIME     INTO #COMBINED_CM_AL     FROM #COMBINED_CM_EXCEPTIONS    UNION    SELECT DISTINCT * ,     CASE WHEN VG_601 = 1 THEN GETDATE() ELSE NULL END AS VG_601_CREATETIME     FROM #COMBINED_AL_EXCEPTIONS        --Add records into FINAL_STATUS_UPDATE_TABLE    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    SELECT DISTINCT     CASE WHEN SOURCE = 'AL' THEN CONCAT(isnull(ORDER_ID,0),'_',isnull(TRANSACTION_NUMBER,0), '_601', '_AL')     WHEN SOURCE = 'CM' THEN CONCAT(isnull(ORDER_ID,0),'_',isnull(TRANSACTION_NUMBER,0), '_601', '_CM') END AS ID,     '1A2' AS STATUS,     NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table    FROM #COMBINED_CM_AL    WHERE VG_601 = 1        MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'CASH',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'CASH');        --Add records into AUDIT_TABLE_CASH    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    SELECT DISTINCT      CE.TRANSACTION_NUMBER,     CASE WHEN CE.SOURCE = 'AL' THEN OC.TRD_ORD      ELSE NULL       END AS TRD_ORD,       CE.ORDER_ID          AS ORDER_ID,     'Out Of Hours' AS Exception_Type,     CASE WHEN CE.SOURCE = 'AL' THEN CONCAT(isnull(CE.ORDER_ID,0) ,'_', isnull(CE.TRANSACTION_NUMBER,0), '_601', '_AL')      WHEN CE.SOURCE = 'CM' THEN CONCAT(isnull(CE.ORDER_ID,0) ,'_', isnull(CE.TRANSACTION_NUMBER,0), '_601', '_CM')       END AS ID,     NULL AS REASON,     NULL AS COMMENT,     'With Reviewer' AS Status,     NULL AS ClientExecID,     'Cash' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME], dd.default_dealer) as DEALER,     '1A2' AS STATUS_ID,     CASE WHEN CE.SOURCE = 'CM' THEN co.INSTRUCTION_RECEIVED_DATE       WHEN CE.SOURCE = 'AL' THEN PM.AUTH_TIME       END AS ORD_AUTH,     CASE WHEN CE.SOURCE = 'CM' THEN ct.[EXECUTED_DATETIME]       WHEN CE.SOURCE = 'AL' THEN T.EXECUTION_TIME       END AS TRADE_EXEC    INTO #temp_audit    FROM #COMBINED_CM_AL CE    left join (SELECT DISTINCT TRANSACTION_NUMBER, ORDER_ID, EXECUTED_DATETIME, DEALER_NAME_DECODE, PULL_DATE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct on CE.SOURCE = 'CM' AND CE.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]    left join (SELECT DISTINCT ORDER_ID, MIN(INSTRUCTION_RECEIVED_DATE) as INSTRUCTION_RECEIVED_DATE, PULL_DATE, ACCEPTED_BY, INSTRUCTED_BY FROM VISTA_REPORTING.dbo.CASH_ORDERS GROUP BY ORDER_ID, PULL_DATE, ACCEPTED_BY, INSTRUCTED_BY) co    on ce.[ORDER_ID] = co.[ORDER_ID] AND CE.SOURCE = 'CM'    LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER, PULL_DATE FROM VISTA_REPORTING.DBO.TRADES WHERE FinalFlag = 1) T ON CE.SOURCE = 'AL' AND CE.TRANSACTION_NUMBER = T.MULTI_FUND_ID    LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.TRD_ORD = CE.ORDER_ID AND CE.SOURCE = 'AL'    LEFT JOIN (SELECT DISTINCT pm.ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME, TRADER, PM, PULL_DATE FROM VISTA_REPORTING.DBO.PM_ORDERS pm    inner join #MAX_TOUCH_PM mtp on mtp.ORD_NUM = pm.ORD_NUM and mtp.MAX_TOUCH = pm.TOUCH_COUNT  GROUP BY pm.ORD_NUM, TRADER, PM, PULL_DATE ) PM ON PM.ORD_NUM = CE.ORDER_ID and CE.SOURCE = 'al'    LEFT JOIN #temp_recent_dealer_al RAL ON RAL.ORD_NUM  = CE.ORDER_ID AND CE.SOURCE = 'AL'      LEFT JOIN #temp_recent_dealer_cm RCM ON RCM.ORDER_ID = CE.ORDER_ID AND CE.SOURCE = 'CM'      LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD ON ((TDD.MG_USER_ID  = RCM.DEALER_NAME AND CE.SOURCE = 'CM') OR (TDD.INITIALS = RAL.TRD_TRADER AND CE.SOURCE = 'AL'))  AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE, CT.PULL_DATE, T.PULL_DATE) AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE)      LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD2 ON ((TDD2.MG_USER_ID  = COALESCE(CO.ACCEPTED_BY, CO.INSTRUCTED_BY) AND CE.SOURCE = 'CM') OR (TDD2.INITIALS = coalesce(PM.TRADER, pm.pm) AND CE.SOURCE = 'AL')) AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE, CT.PULL_DATE, T.PULL_DATE) AS DATE) BETWEEN CAST(TDD2.DATE_FROM AS DATE) AND CAST(TDD2.DATE_TO AS DATE)        LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'Out Of Hours' AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE, ct.pull_date, t.pull_date) AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)        WHERE CE.VG_601 = 1         MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_CASH AS T    USING #temp_audit AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);        -- ==============================================================================    /* Update Exceptions Table */    -- ==============================================================================        IF OBJECT_ID('VISTA_STAGING.DBO.VG_601_OUT_OF_HOURS_CASH_TABLE' , 'U') IS NULL     SELECT DISTINCT *      INTO VISTA_STAGING.DBO.VG_601_OUT_OF_HOURS_CASH_TABLE     FROM #COMBINED_CM_AL    ELSE     IF OBJECT_ID('tempdb..#TEMP_OOH_TABLE', 'U') IS NOT NULL DROP TABLE #TEMP_OOH_TABLE     SELECT DISTINCT *      INTO #TEMP_OOH_TABLE     FROM #COMBINED_CM_AL;        --SG87463------------------------------------------------         with deduplication as     (     select *,ROW_NUMBER() over (partition by transaction_number,order_id order by transaction_number,order_id,VG_601_CREATETIME) as RN     from #TEMP_OOH_TABLE     )     delete from deduplication where RN <> 1        --End of SG87463-------------------------------         MERGE VISTA_STAGING.DBO.VG_601_OUT_OF_HOURS_CASH_TABLE AS T      USING #TEMP_OOH_TABLE AS S     ON (ISNULL(T.TRANSACTION_NUMBER,0) = ISNULL(S.TRANSACTION_NUMBER,0) AND ISNULL(T.ORDER_ID,0) = ISNULL(S.ORDER_ID, 0) AND T.SOURCE = S.SOURCE)     WHEN MATCHED     THEN UPDATE     SET     ORDER_ID = CASE WHEN S.VG_601 > T.VG_601 THEN S.ORDER_ID ELSE T.ORDER_ID END,     TRANSACTION_NUMBER = CASE WHEN S.VG_601 > T.VG_601 THEN S.TRANSACTION_NUMBER ELSE T.TRANSACTION_NUMBER END,     INSTRUCTION_RECEIVED_DATE = CASE WHEN S.VG_601 > T.VG_601 THEN S.INSTRUCTION_RECEIVED_DATE ELSE T.INSTRUCTION_RECEIVED_DATE END,     EXECUTED_DATETIME = CASE WHEN S.VG_601 > T.VG_601 THEN S.EXECUTED_DATETIME ELSE T.EXECUTED_DATETIME END,     ORDER_EXCEPTION = CASE WHEN S.VG_601 > T.VG_601 THEN S.ORDER_EXCEPTION ELSE T.ORDER_EXCEPTION END,     TRADE_EXCEPTION = CASE WHEN S.VG_601 > T.VG_601 THEN S.TRADE_EXCEPTION ELSE T.TRADE_EXCEPTION END,     SOURCE = CASE WHEN S.VG_601 > T.VG_601 THEN S.SOURCE ELSE T.SOURCE END,     VG_601 = CASE WHEN S.VG_601 > T.VG_601 THEN S.VG_601 ELSE T.VG_601 END,     VG_601_CREATETIME = CASE WHEN S.VG_601 >T.VG_601 THEN S.VG_601_CREATETIME ELSE T.VG_601_CREATETIME END        WHEN NOT MATCHED     THEN INSERT     (ORDER_ID     ,TRANSACTION_NUMBER      ,INSTRUCTION_RECEIVED_DATE     ,EXECUTED_DATETIME      ,ORDER_EXCEPTION     ,TRADE_EXCEPTION     ,SOURCE      ,VG_601     ,VG_601_CREATETIME )         VALUES     (S.ORDER_ID     ,S.TRANSACTION_NUMBER      ,S.INSTRUCTION_RECEIVED_DATE     ,S.EXECUTED_DATETIME      ,S.ORDER_EXCEPTION     ,S.TRADE_EXCEPTION     ,S.SOURCE      ,S.VG_601     ,VG_601_CREATETIME ) ;         IF OBJECT_ID('tempdb..#MAX_TOUCH_PM', 'U') IS NOT NULL DROP TABLE #MAX_TOUCH_PM    IF OBJECT_ID('tempdb..#ALADDIN_ORDERS', 'U') IS NOT NULL DROP TABLE #ALADDIN_ORDERS    IF OBJECT_ID('tempdb..#MAX_TOUCH_T', 'U') IS NOT NULL DROP TABLE #MAX_TOUCH_T    IF OBJECT_ID('tempdb..#ALADDIN_TRADES', 'U') IS NOT NULL DROP TABLE #ALADDIN_TRADES    IF OBJECT_ID('tempdb..#CM_ORDERS', 'U') IS NOT NULL DROP TABLE #CM_ORDERS    IF OBJECT_ID('tempdb..#CM_TRADES', 'U') IS NOT NULL DROP TABLE #CM_TRADES    IF OBJECT_ID('tempdb..#AL_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #AL_EXCEPTIONS    IF OBJECT_ID('tempdb..#AL_TRADES_WO_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #AL_TRADES_WO_EXCEPTIONS    IF OBJECT_ID('tempdb..#CM_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #CM_EXCEPTIONS    IF OBJECT_ID('tempdb..#CM_TRADES_WO_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #CM_TRADES_WO_EXCEPTIONS    IF OBJECT_ID('tempdb..#COMBINED_AL_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #COMBINED_AL_EXCEPTIONS    IF OBJECT_ID('tempdb..#COMBINED_CM_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #COMBINED_CM_EXCEPTIONS    IF OBJECT_ID('tempdb..#COMBINED_CM_AL', 'U') IS NOT NULL DROP TABLE #COMBINED_CM_AL    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    IF OBJECT_ID('tempdb..#temp_max_req_orders', 'U') IS NOT NULL DROP TABLE #temp_max_req_orders    IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades    IF OBJECT_ID('tempdb..#temp_recent_dealer_al', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_al    IF OBJECT_ID('tempdb..#temp_recent_dealer_cm', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_cm            END        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_601_OUT_OF_HOURS_FX  CreateDate: 2025-06-26 17:41:49.300  ModifyDate: 2025-06-26 17:41:49.300  --- DEFINITION START ---  -- =============================================    -- Author:  <LIZZIE REYNOLDS>    -- Create date: <19/06/2019>    -- Description: <OUT OF HOURS ORDERS EXCEPTIONS FOR THE FX DESK,,>    -- =============================================    CREATE PROCEDURE [dbo].[VG_601_OUT_OF_HOURS_FX]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        --ALADDIN POP this needs updating to account only for orders in aladdin    IF OBJECT_ID('tempdb..#MAX_TOUCH_ORDERS', 'U') IS NOT NULL DROP TABLE #MAX_TOUCH_ORDERS     SELECT DISTINCT     ORD_NUM,     MAX(TOUCH_COUNT) AS MAX_TCH    INTO #MAX_TOUCH_ORDERS    FROM VISTA_REPORTING.DBO.PM_ORDERS     GROUP BY ORD_NUM        IF OBJECT_ID('tempdb..#MAX_TOUCH_TRADES', 'U') IS NOT NULL DROP TABLE #MAX_TOUCH_TRADES     SELECT DISTINCT     MULTI_FUND_ID,     MAX(TOUCH_COUNT) AS MAX_TCH    INTO #MAX_TOUCH_TRADES    FROM VISTA_REPORTING.DBO.TRADES     GROUP BY MULTI_FUND_ID        IF OBJECT_ID('tempdb..#ALADDIN_ORDERS', 'U') IS NOT NULL DROP TABLE #ALADDIN_ORDERS     SELECT DISTINCT       PM.ORD_NUM,      AUTH_TIME,       PULL_DATE,      TRADER,      STATUS     INTO #ALADDIN_ORDERS     FROM VISTA_REPORTING.DBO.PM_ORDERS PM     INNER JOIN #MAX_TOUCH_ORDERS MTO ON MTO.MAX_TCH = PM.TOUCH_COUNT AND MTO.ORD_NUM = PM.ORD_NUM     WHERE DEALING_DESK = 'FX'        IF OBJECT_ID('tempdb..#ALADDIN_TRADES', 'U') IS NOT NULL DROP TABLE #ALADDIN_TRADES     SELECT DISTINCT        ORD_NUM,      T.MULTI_FUND_ID,      EXECUTION_TIME,      PULL_DATE,      TRD_STATUS,      TRD_TRADER     INTO #ALADDIN_TRADES     FROM VISTA_REPORTING.DBO.TRADES T     INNER JOIN #MAX_TOUCH_TRADES MTT ON MTT.MAX_TCH = T.TOUCH_COUNT AND MTT.MULTI_FUND_ID = T.MULTI_FUND_ID    LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, DEALING_DESK FROM VISTA_REPORTING.DBO.PRIMARY_INST_TYPE_TABLE) PRIM ON PRIM.MULTI_FUND_ID = T.MULTI_FUND_ID     WHERE PRIM.DEALING_DESK = 'FX'        --FX MANAGER POP    IF OBJECT_ID('tempdb..#FX_ORDERS', 'U') IS NOT NULL DROP TABLE #FX_ORDERS     select DISTINCT       FXM_ORDER_ID,      PULL_DATE,      INSTRUCTION_RECEIVED_DATE_TIME,      INSTRUCTION_STATUS     INTO #FX_ORDERS     from VISTA_REPORTING.dbo.FX_ORDERS        IF OBJECT_ID('tempdb..#FX_TRADES', 'U') IS NOT NULL DROP TABLE #FX_TRADES     select DISTINCT       ORDER_ID,     TRADE_ID,     PULL_DATE,     EXECUTED_DATE_TIME,     TRADE_STATUS      INTO #FX_TRADES     from VISTA_REPORTING.dbo.FX_TRADES        IF OBJECT_ID('tempdb..#AL_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #AL_EXCEPTIONS    SELECT DISTINCT     AO.ORD_NUM,     T.MULTI_FUND_ID,     --CONVERT(DATETIME, CONVERT(VARCHAR(19),AUTH_TIME, 120)) as AUTH_TIME, --DONE THIS AS MILLISECOND DIFFERENCES WERE CAUSING DUPLICATION, THIS REMOVES THEM AND SETS THEM TO 0      --T.EXECUTION_TIME,     CASE       WHEN AO.TRADER = 'rm_mat' THEN 0      WHEN CAST(AUTH_TIME AS TIME) BETWEEN CAST(BH.OPEN_TIME AS TIME) AND CAST(BH.CLOSE_TIME AS TIME) THEN 0        WHEN auth_time is null then 0 WHEN STATUS = 'c' THEN 0       ELSE 1      END AS ORDER_EXCEPTION,     CASE       WHEN T.TRD_TRADER = 'rm_mat' THEN 0      WHEN CAST(EXECUTION_TIME AS TIME) BETWEEN CAST(BH.OPEN_TIME AS TIME) AND CAST(BH.CLOSE_TIME AS TIME) THEN 0       WHEN execution_time is null then 0 WHEN TRD_STATUS = 'C' THEN 0       ELSE 1      END AS TRADE_EXCEPTION,     'AL' AS SOURCE     INTO #AL_EXCEPTIONS    FROM #ALADDIN_ORDERS AO    LEFT JOIN VISTA_STAGING.DBO.BUSINESS_HOURS BH ON CAST(AO.PULL_DATE AS DATE) BETWEEN CAST(BH.DATE_FROM AS DATE) AND CAST(BH.DATE_TO AS DATE) AND BH.DEALING_DESK = 'FX'    LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.PM_ORD = AO.ORD_NUM    LEFT JOIN (select distinct ord_num, T.multi_fund_id, execution_time, TRD_STATUS, TRD_TRADER from VISTA_REPORTING.DBO.TRADES T     INNER JOIN #MAX_TOUCH_TRADES MTT ON MTT.MAX_TCH = T.TOUCH_COUNT AND MTT.MULTI_FUND_ID = T.MULTI_FUND_ID    ) T ON T.ORD_NUM = OC.TRD_ORD            IF OBJECT_ID('tempdb..#AL_TRADES_WO_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #AL_TRADES_WO_EXCEPTIONS    SELECT DISTINCT     OC.PM_ORD AS ORD_NUM,     MULTI_FUND_ID,     --NULL AS AUTH_TIME,     --EXECUTION_TIME,     0 AS ORDER_EXCEPTION,     CASE       WHEN ATR.TRD_TRADER = 'rm_mat' THEN 0      WHEN CAST(EXECUTION_TIME AS TIME) BETWEEN CAST(BH.OPEN_TIME AS TIME) AND CAST(BH.CLOSE_TIME AS TIME) THEN 0       WHEN EXECUTION_TIME is null then 0 WHEN TRD_STATUS = 'C' THEN 0       ELSE 1      END AS TRADE_EXCEPTION,     'AL' AS SOURCE     INTO #AL_TRADES_WO_EXCEPTIONS     FROM #ALADDIN_TRADES ATR    LEFT JOIN VISTA_STAGING.DBO.BUSINESS_HOURS BH ON CAST(ATR.PULL_DATE AS DATE) BETWEEN CAST(BH.DATE_FROM AS DATE) AND CAST(BH.DATE_TO AS DATE) AND BH.DEALING_DESK = 'FX'    LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.TRD_ORD = ATR.ORD_NUM    WHERE OC.PM_ORD IS NULL        IF OBJECT_ID('tempdb..#FX_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #FX_EXCEPTIONS    SELECT DISTINCT     CONVERT(VARCHAR(50),FXO.FXM_ORDER_ID) AS ORDER_ID,     CONVERT(VARCHAR(50),FXT.TRADE_ID) AS TRADE_ID,     --FXO.INSTRUCTION_RECEIVED_DATE_TIME, --CHOOSING THIS OVER INSTRUCTION_RECEIVED_TIME      --FXT.EXECUTED_DATE_TIME,      CASE WHEN CAST(FXO.INSTRUCTION_RECEIVED_DATE_TIME AS TIME) BETWEEN CAST(BH.OPEN_TIME AS TIME) AND CAST(BH.CLOSE_TIME AS TIME) and isnull(INSTRUCTION_STATUS,'') IN ('Executed', 'New') THEN 0 WHEN FXO.INSTRUCTION_RECEIVED_DATE_TIME IS NULL THEN 0 when isnull(INSTRUCTION_STATUS,'') not IN ('Executed', 'New') then 0 ELSE 1 END AS ORDER_EXCEPTION, --NEED TO ASK ABOUT IF TRADE IS NULL WHAT TO DO     CASE WHEN CAST(FXT.EXECUTED_DATE_TIME AS TIME) BETWEEN CAST(BH.OPEN_TIME AS TIME) AND CAST(BH.CLOSE_TIME AS TIME) and ISNULL(trade_status, '') IN ('Uploaded-Web Service', 'Uploaded-Manually') THEN 0 WHEN FXT.EXECUTED_DATE_TIME IS NULL THEN 0 when isnull(  TRADE_STATUS, '') not IN ('Uploaded-Web Service', 'Uploaded-Manually') then 0 ELSE 1 END AS TRADE_EXCEPTION,     'FX' AS SOURCE     INTO #FX_EXCEPTIONS     FROM #FX_ORDERS FXO     LEFT JOIN VISTA_STAGING.DBO.BUSINESS_HOURS BH ON CAST(FXO.PULL_DATE AS DATE) BETWEEN CAST(BH.DATE_FROM AS DATE) AND CAST(BH.DATE_TO AS DATE) AND BH.DEALING_DESK = 'FX'     LEFT JOIN #FX_TRADES FXT ON NULLIF(CONVERT( VARCHAR(50),FXO.FXM_ORDER_ID), '0') = NULLIF(CONVERT(VARCHAR(50), FXT.ORDER_ID), '0')        IF OBJECT_ID('tempdb..#FX_TRADES_WO_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #FX_TRADES_WO_EXCEPTIONS    SELECT DISTINCT     FXO.FXM_ORDER_ID AS ORDER_ID,     FXT.TRADE_ID,     --FXO.INSTRUCTION_RECEIVED_DATE_TIME,     --FXT.EXECUTED_DATE_TIME,      0 AS ORDER_EXCEPTION,     CASE WHEN CAST(FXT.EXECUTED_DATE_TIME AS TIME) BETWEEN CAST(BH.OPEN_TIME AS TIME) AND CAST(BH.CLOSE_TIME AS TIME) THEN 0 WHEN FXT.EXECUTED_DATE_TIME IS NULL THEN 0 ELSE 1 END AS TRADE_EXCEPTION,     'FX' AS SOURCE     INTO #FX_TRADES_WO_EXCEPTIONS     FROM #FX_TRADES FXT    LEFT JOIN VISTA_STAGING.DBO.BUSINESS_HOURS BH ON CAST(FXT.PULL_DATE AS DATE) BETWEEN CAST(BH.DATE_FROM AS DATE) AND CAST(BH.DATE_TO AS DATE) AND BH.DEALING_DESK = 'FX'    LEFT JOIN #FX_ORDERS FXO ON  NULLIF(CONVERT( VARCHAR(50),FXO.FXM_ORDER_ID), '0') = NULLIF(CONVERT(VARCHAR(50), FXT.ORDER_ID), '0')    WHERE FXO.FXM_ORDER_ID IS NULL             IF OBJECT_ID('tempdb..#COMBINED_AL_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #COMBINED_AL_EXCEPTIONS     SELECT DISTINCT *,     CASE WHEN TRADE_EXCEPTION = 1 OR ORDER_EXCEPTION = 1 THEN 1 ELSE 0 END AS VG_601      INTO #COMBINED_AL_EXCEPTIONS     FROM #AL_EXCEPTIONS    UNION    SELECT DISTINCT *,     CASE WHEN TRADE_EXCEPTION = 1 OR ORDER_EXCEPTION = 1 THEN 1 ELSE 0 END AS VG_601     FROM #AL_TRADES_WO_EXCEPTIONS         IF OBJECT_ID('tempdb..#COMBINED_FX_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #COMBINED_FX_EXCEPTIONS     SELECT DISTINCT * ,     CASE WHEN TRADE_EXCEPTION = 1 OR ORDER_EXCEPTION = 1 THEN 1 ELSE 0 END AS VG_601      INTO #COMBINED_FX_EXCEPTIONS     FROM #FX_EXCEPTIONS    UNION    SELECT DISTINCT *,     CASE WHEN TRADE_EXCEPTION = 1 OR ORDER_EXCEPTION = 1 THEN 1 ELSE 0 END AS VG_601     FROM #FX_TRADES_WO_EXCEPTIONS            IF OBJECT_ID('tempdb..#COMBINED_FX_AL', 'U') IS NOT NULL DROP TABLE #COMBINED_FX_AL    SELECT DISTINCT      ORDER_ID,     TRADE_ID,     MAX(ORDER_EXCEPTION) AS ORDER_EXCEPTION,     MAX(TRADE_EXCEPTION) AS TRADE_EXCEPTION,     SOURCE,     MAX(VG_601) AS VG_601,     CASE WHEN MAX(VG_601) = 1 THEN GETDATE() ELSE NULL END AS VG_601_CREATETIME    INTO #COMBINED_FX_AL    FROM #COMBINED_FX_EXCEPTIONS    GROUP BY      ORDER_ID,     TRADE_ID,     SOURCE    UNION    SELECT DISTINCT      ORD_NUM,     MULTI_FUND_ID,     MAX(ORDER_EXCEPTION) AS ORDER_EXCEPTION,     MAX(TRADE_EXCEPTION) AS TRADE_EXCEPTION,     SOURCE,     MAX(VG_601) AS VG_601,     CASE WHEN MAX(VG_601) = 1 THEN GETDATE() ELSE NULL END AS VG_601_CREATETIME    FROM #COMBINED_AL_EXCEPTIONS    GROUP BY      ORD_NUM,     MULTI_FUND_ID,     SOURCE            --Add records into FINAL_STATUS_UPDATE_TABLE    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    SELECT DISTINCT     CASE WHEN SOURCE = 'AL' THEN CONCAT(ISNULL(ORDER_ID,0),'_',ISNULL(TRADE_ID,0), '_601', '_AL')     WHEN SOURCE = 'FX' THEN CONCAT(ISNULL(ORDER_ID,0),'_',ISNULL(TRADE_ID,0), '_601', '_FX') END AS ID,     '1A2' AS STATUS,     NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table    FROM #COMBINED_FX_AL    WHERE VG_601 = 1            MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'FX',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'FX');        --Add records into AUDIT_TABLE_CASH    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    SELECT DISTINCT     CE.TRADE_ID AS TRANSACTION_NUMBER,     CASE WHEN CE.SOURCE = 'AL' THEN OC.TRD_ORD      ELSE NULL       END AS TRD_ORD,       CASE WHEN CE.SOURCE = 'FX' THEN CE.ORDER_ID         WHEN CE.SOURCE = 'AL' THEN PM.ORD_NUM         END AS ORDER_ID,     'Out Of Hours' AS Exception_Type,     CASE WHEN CE.SOURCE = 'AL' THEN CONCAT(ISNULL(CE.ORDER_ID, 0) ,'_', ISNULL(CE.TRADE_ID,0), '_601', '_AL')      WHEN CE.SOURCE = 'FX' THEN CONCAT(ISNULL(CE.ORDER_ID,0) ,'_', ISNULL(CE.TRADE_ID,0), '_601', '_FX')       END AS ID,     NULL AS REASON,     NULL AS COMMENT,     'With Reviewer' AS Status,     NULL AS ClientExecID,     'FX' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],tdd3.[FULL_NAME],tdd4.[FULL_NAME],dd.[DEFAULT_DEALER]) AS DEALER,     '1A2' AS STATUS_ID,     CASE WHEN CE.SOURCE = 'FX' THEN MIN(FXO.INSTRUCTION_RECEIVED_DATE_TIME)      WHEN CE.SOURCE = 'AL' THEN MIN(PM.AUTH_TIME)      END AS ORD_AUTH,     CASE WHEN CE.SOURCE = 'FX' THEN FXT.[EXECUTED_DATE_TIME]       WHEN CE.SOURCE = 'AL' THEN T.EXECUTION_TIME       END AS TRADE_EXEC    INTO #temp_audit    FROM #COMBINED_FX_AL CE    left join (SELECT DISTINCT TRADE_ID, ORDER_ID, EXECUTED_DATE_TIME, DEALT_BY, ACCEPTED_BY, PULL_DATE FROM VISTA_STAGING.dbo.fx_TRADES) FXT on CE.SOURCE = 'FX' AND CE.TRADE_ID = FXT.TRADE_ID    left join (SELECT DISTINCT FXM_ORDER_ID, MIN(INSTRUCTION_RECEIVED_DATE_TIME) as INSTRUCTION_RECEIVED_DATE_TIME, PULL_DATE FROM VISTA_STAGING.dbo.FX_ORDERS GROUP BY FXM_ORDER_ID, PULL_DATE) FXO    on FXO.[FXM_ORDER_ID] = CE.[ORDER_ID] AND CE.SOURCE = 'FX'    LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER, PULL_DATE FROM VISTA_REPORTING.DBO.TRADES WHERE FinalFlag = 1) T ON CE.SOURCE = 'AL' AND CE.TRADE_ID = T.MULTI_FUND_ID    LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.PM_ORD = CE.ORDER_ID AND CE.SOURCE = 'AL'    LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME, TRADER, PULL_DATE FROM VISTA_REPORTING.DBO.PM_ORDERS GROUP BY ORD_NUM, TRADER, PULL_DATE) PM ON PM.ORD_NUM = OC.PM_ORD    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd    on tdd.[MG_USER_ID] = fxt.[DEALT_BY] AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2    on tdd2.[MG_USER_ID] = fxt.[ACCEPTED_BY] AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)    left join VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd3    on tdd3.[INITIALS]  = t.[TRD_TRADER] AND CAST(t.[PULL_DATE] AS DATE) BETWEEN CAST(tdd3.[DATE_FROM] AS DATE) AND CAST(tdd3.[DATE_TO] AS DATE)    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd4    on tdd4.[INITIALS] = pm.[TRADER] AND CAST(pm.[PULL_DATE] AS DATE) BETWEEN CAST(tdd4.[DATE_FROM] AS DATE) AND CAST(tdd4.[DATE_TO] AS DATE)    left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd     on dd.[REPORT_NAME] = 'Out of Hours' AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE],t.[PULL_DATE],pm.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)    WHERE CE.VG_601 = 1    GROUP BY     ce.TRADE_ID,     oc.TRD_ORD,     pm.ORD_NUM,     ce.SOURCE,     ce.ORDER_ID,     COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],tdd3.[FULL_NAME],tdd4.[FULL_NAME],dd.[DEFAULT_DEALER]),     FXT.[EXECUTED_DATE_TIME] ,     T.EXECUTION_TIME             MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_FX AS T    USING #temp_audit AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);        -- ==============================================================================    /* Update Exceptions Table */    -- ==============================================================================            IF OBJECT_ID('VISTA_STAGING.DBO.VG_601_OUT_OF_HOURS_FX_TABLE' , 'U') IS NULL     SELECT DISTINCT *      INTO VISTA_STAGING.DBO.VG_601_OUT_OF_HOURS_FX_TABLE      FROM #COMBINED_FX_AL    ELSE     IF OBJECT_ID('tempdb..#TEMP_OOH_TABLE', 'U') IS NOT NULL DROP TABLE #TEMP_OOH_TABLE     SELECT DISTINCT *      INTO #TEMP_OOH_TABLE     FROM #COMBINED_FX_AL         MERGE VISTA_STAGING.DBO.VG_601_OUT_OF_HOURS_FX_TABLE AS T      USING #TEMP_OOH_TABLE AS S     ON (ISNULL(T.TRADE_ID, 0) = ISNULL(S.TRADE_ID,0) AND ISNULL(T.ORDER_ID,0) = ISNULL(S.ORDER_ID,0) AND T.SOURCE = S.SOURCE)     WHEN MATCHED     THEN UPDATE     SET     ORDER_ID = CASE WHEN S.VG_601 > T.VG_601 THEN S.ORDER_ID ELSE T.ORDER_ID END,     TRADE_ID = CASE WHEN S.VG_601 > T.VG_601 THEN S.TRADE_ID ELSE T.TRADE_ID END,     --INSTRUCTION_RECEIVED_DATE_TIME = CASE WHEN S.VG_601 > T.VG_601 THEN S.INSTRUCTION_RECEIVED_DATE_TIME ELSE T.INSTRUCTION_RECEIVED_DATE_TIME END,     --EXECUTED_DATE_TIME = CASE WHEN S.VG_601 > T.VG_601 THEN S.EXECUTED_DATE_TIME ELSE T.EXECUTED_DATE_TIME END,     ORDER_EXCEPTION = CASE WHEN S.VG_601 > T.VG_601 THEN S.ORDER_EXCEPTION ELSE T.ORDER_EXCEPTION END,     TRADE_EXCEPTION = CASE WHEN S.VG_601 > T.VG_601 THEN S.TRADE_EXCEPTION ELSE T.TRADE_EXCEPTION END,     SOURCE = CASE WHEN S.VG_601 > T.VG_601 THEN S.SOURCE ELSE T.SOURCE END,     VG_601 = CASE WHEN S.VG_601 > T.VG_601 THEN S.VG_601 ELSE T.VG_601 END,     VG_601_CREATETIME = CASE WHEN S.VG_601 >T.VG_601 THEN S.VG_601_CREATETIME ELSE T.VG_601_CREATETIME END        WHEN NOT MATCHED     THEN INSERT     (ORDER_ID     ,TRADE_ID      --,INSTRUCTION_RECEIVED_DATE_TIME     --,EXECUTED_DATE_TIME      ,ORDER_EXCEPTION     ,TRADE_EXCEPTION     ,SOURCE      ,VG_601     ,VG_601_CREATETIME )         VALUES     (S.ORDER_ID     ,S.TRADE_ID      --,S.INSTRUCTION_RECEIVED_DATE_TIME     --,S.EXECUTED_DATE_TIME      ,S.ORDER_EXCEPTION     ,S.TRADE_EXCEPTION     ,S.SOURCE      ,S.VG_601     ,VG_601_CREATETIME ) ;             IF OBJECT_ID('tempdb..#ALADDIN_ORDERS', 'U') IS NOT NULL DROP TABLE #ALADDIN_ORDERS    IF OBJECT_ID('tempdb..#ALADDIN_TRADES', 'U') IS NOT NULL DROP TABLE #ALADDIN_TRADES    IF OBJECT_ID('tempdb..#FX_ORDERS', 'U') IS NOT NULL DROP TABLE #FX_ORDERS    IF OBJECT_ID('tempdb..#FX_TRADES', 'U') IS NOT NULL DROP TABLE #FX_TRADES    IF OBJECT_ID('tempdb..#AL_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #AL_EXCEPTIONS    IF OBJECT_ID('tempdb..#AL_TRADES_WO_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #AL_TRADES_WO_EXCEPTIONS    IF OBJECT_ID('tempdb..#FX_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #FX_EXCEPTIONS    IF OBJECT_ID('tempdb..#FX_TRADES_WO_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #FX_TRADES_WO_EXCEPTIONS    IF OBJECT_ID('tempdb..#COMBINED_AL_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #COMBINED_AL_EXCEPTIONS    IF OBJECT_ID('tempdb..#COMBINED_FX_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #COMBINED_FX_EXCEPTIONS    IF OBJECT_ID('tempdb..#COMBINED_FX_AL', 'U') IS NOT NULL DROP TABLE #COMBINED_FX_AL    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit            END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_602_EOD_HOLDOVERS_CASH  CreateDate: 2025-06-26 17:41:23.667  ModifyDate: 2025-06-26 17:41:23.667  --- DEFINITION START ---  -- =============================================    -- Author:  <Nasra, Michael>    -- Create date: <07/06/2019>    -- Description:     -- <All orders that have at least one trade that    -- is exectued on a different day to the    -- instruction date.>    -- =============================================        -- ***************VERSION CONTROL***************    -- MN 18/07/2019: Changed the logic to reflect new    -- requirements. Exceptions are now raised when    -- the status provided by the API is within a     -- specified list of holdover statuses.    -- *********************************************        CREATE PROCEDURE [dbo].[VG_602_EOD_HOLDOVERS_CASH]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;            IF OBJECT_ID('tempdb..#max_touch_co', 'U') IS NOT NULL DROP TABLE #max_touch_co    SELECT DISTINCT      ORDER_ID,      MAX(API_REQUESTED_DATE) as MAX_API_REQUESTED_DATE    INTO #max_touch_co    FROM VISTA_REPORTING.dbo.CASH_ORDERS    GROUP BY ORDER_ID        IF OBJECT_ID('tempdb..#max_touch_pmo', 'U') IS NOT NULL DROP TABLE #max_touch_pmo    SELECT DISTINCT      ORD_NUM,      MAX(TOUCH_COUNT) as MAX_TOUCH_COUNT    INTO #max_touch_pmo    FROM VISTA_REPORTING.dbo.PM_ORDERS    GROUP BY ORD_NUM            IF OBJECT_ID('tempdb..#temp_recent_dealer_al', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_al    select distinct oc.PM_ORD as ORD_NUM,     trd_trader     into #temp_recent_dealer_al     from VISTA_REPORTING.dbo.TRADES t     left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on oc.TRD_ORD = t.ORD_NUM     INNER JOIN (SELECT        OC.PM_ORD AS ORD_NUM,        MAX(EXECUTION_TIME) AS MAX_EXEC,        MAX(TOUCH_COUNT) AS MAX_TOUCH        FROM VISTA_REPORTING.dbo.TRADES T        LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS OC ON OC.TRD_ORD = T.ORD_NUM        GROUP BY OC.PM_ORD) T2 ON T2.ORD_NUM = OC.PM_ORD               AND T2.MAX_EXEC = t.EXECUTION_TIME              AND T2.MAX_TOUCH = t.TOUCH_COUNT            IF OBJECT_ID('tempdb..#temp_recent_dealer_cm', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_cm    SELECT DISTINCT    ct.ORDER_ID,           ct.DEALER_NAME    into #temp_recent_dealer_cm    FROM VISTA_REPORTING.dbo.CASH_TRADES ct    INNER JOIN (SELECT                   ORDER_ID,                  MAX(EXECUTED_DATETIME) AS MAX_EXEC,                  MAX(API_REQUESTED_DATE) AS MAX_API_REQ                  FROM VISTA_REPORTING.dbo.CASH_TRADES                  GROUP BY ORDER_ID) ct2 ON nullif(ct2.ORDER_ID, '0') = ct.ORDER_ID                                             AND ct2.MAX_EXEC = ct.EXECUTED_DATETIME                                            AND ct2.MAX_API_REQ = ct.API_REQUESTED_DATE            IF OBJECT_ID('tempdb..#cash_manager_temp', 'U') IS NOT NULL DROP TABLE #cash_manager_temp    select distinct     co.ORDER_ID,     co.INSTRUCTION_STATUS_DECODE as ORDER_STATUS,     'CM' as [DATA_SOURCE],     CO.INSTRUCTION_RECEIVED_DATE as ORD_AUTH,     max(ct.EXECUTED_DATETIME) as TRADE_EXEC         into #cash_manager_temp        FROM (SELECT co.ORDER_ID,       co.INSTRUCTION_STATUS_DECODE,       co.INSTRUCTION_RECEIVED_DATE        FROM VISTA_REPORTING.dbo.CASH_ORDERS co     INNER JOIN #max_touch_co mco      on co.ORDER_ID = mco.ORDER_ID      and co.API_REQUESTED_DATE = mco.MAX_API_REQUESTED_DATE) co        left join VISTA_REPORTING.dbo.CASH_TRADES ct      on co.ORDER_ID = ct.ORDER_ID        group by       co.ORDER_ID,     INSTRUCTION_STATUS_DECODE,     INSTRUCTION_RECEIVED_DATE        IF OBJECT_ID('tempdb..#aladdin_temp', 'U') IS NOT NULL DROP TABLE #aladdin_temp    select distinct      pm.ord_num as ORDER_ID,     STATUS as ORDER_STATUS,      'AL' as [DATA_SOURCE],     pm.AUTH_TIME as ORD_AUTH,     max(tr.EXECUTION_TIME) as TRADE_EXEC    into #aladdin_temp    from (SELECT pm.ORD_NUM,       pm.STATUS,       pm.DEALING_DESK,       pm.AUTH_TIME        FROM VISTA_REPORTING.dbo.PM_ORDERS pm     INNER JOIN #max_touch_pmo mpmo      on pm.ORD_NUM = mpmo.ORD_NUM      and pm.TOUCH_COUNT = mpmo.MAX_TOUCH_COUNT) pm        left join VISTA_REPORTING.dbo.ORDERS_CROSS oc      on oc.PM_ORD = pm.ORD_NUM        left join VISTA_REPORTING.dbo.TRADES tr      on tr.ORD_NUM = oc.TRD_ORD        WHERE pm.[DEALING_DESK] = 'CASH'        group by      pm.ord_num,      pm.STATUS,      pm.AUTH_TIME        IF OBJECT_ID('tempdb..#exception_table', 'U') IS NOT NULL DROP TABLE #exception_table    select distinct       * ,      case         when ORDER_STATUS in ('Holdover till NBD', 'Pending', 'New', 'Accepted Not Dealt', 'Accepted Partially Dealt', 'A', 'U')  then 1       else 0       end as VG_602,      case         when ORDER_STATUS in ('Holdover till NBD', 'Pending', 'New', 'Accepted Not Dealt', 'Accepted Partially Dealt', 'A', 'U')  then GETDATE()       else NULL       end as VG_602_CREATETIME    into #exception_table    from ( select * from #cash_manager_temp       union        select * from #aladdin_temp) tmp        --Add records into FINAL_STATUS_UPDATE_TABLE    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    SELECT DISTINCT     CONCAT(ORDER_ID,'_602_', [DATA_SOURCE]) AS ID,     '1A2' AS STATUS,     NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table    FROM #exception_table    WHERE VG_602 != 0        MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'CASH',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'CASH');        --Add records into AUDIT_TABLE    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    SELECT DISTINCT     NULL AS TRANSACTION_NUMBER,     NULL AS TRD_ORD,     et.ORDER_ID AS ORDER_ID,     'EOD Holdovers' AS Exception_Type,     CONCAT(et.ORDER_ID,'_602_',et.[DATA_SOURCE]) AS ID,     NULL AS REASON,     NULL AS COMMENT,     'With Reviewer' AS Status,     NULL AS ClientExecID,     'Cash' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME], dd.default_dealer) as DEALER,     '1A2' AS STATUS_ID,      et.ORD_AUTH,      et.TRADE_EXEC    INTO #temp_audit    FROM #exception_table et    left join (SELECT DISTINCT co.ORDER_ID, ACCEPTED_BY,INSTRUCTED_BY, INSTRUCTION_RECEIVED_DATE, PULL_DATE FROM VISTA_STAGING.dbo.CASH_ORDERS co     INNER JOIN #max_touch_co mco      on co.ORDER_ID = mco.ORDER_ID      and co.API_REQUESTED_DATE = mco.MAX_API_REQUESTED_DATE ) CO on ET.DATA_SOURCE = 'CM' AND CO.[ORDER_ID] = ET.[ORDER_ID]        LEFT JOIN (SELECT DISTINCT pm.ORD_NUM, TRADER,AUTH_TIME, PULL_DATE FROM VISTA_REPORTING.DBO.PM_ORDERS pm INNER JOIN #max_touch_pmo mpmo      on pm.ORD_NUM = mpmo.ORD_NUM      and pm.TOUCH_COUNT = mpmo.MAX_TOUCH_COUNT where TRADER IS NOT NULL) PM ON ET.DATA_SOURCE = 'AL' AND ET.ORDER_ID = PM.ORD_NUM      LEFT JOIN #temp_recent_dealer_al RAL ON RAL.ORD_NUM  = et.ORDER_ID AND et.data_SOURCE = 'AL'      LEFT JOIN #temp_recent_dealer_cm RCM ON RCM.ORDER_ID = et.ORDER_ID AND et.data_SOURCE = 'CM'      LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD ON ((TDD.MG_USER_ID  = RCM.DEALER_NAME AND et.data_SOURCE = 'CM') OR (TDD.INITIALS = RAL.TRD_TRADER AND et.data_SOURCE = 'AL'))  AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE) AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE)      LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD2 ON ((TDD2.MG_USER_ID  = COALESCE(CO.ACCEPTED_BY, CO.INSTRUCTED_BY) AND eT.DATA_SOURCE = 'CM') OR (TDD2.INITIALS = PM.TRADER AND eT.DATA_SOURCE = 'AL')) AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE)   AS DATE) BETWEEN CAST(TDD2.DATE_FROM AS DATE) AND CAST(TDD2.DATE_TO AS DATE)      LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'EOD Holdovers' AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE) AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)        WHERE  et.[VG_602] = 1        MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_CASH AS T    USING #temp_audit AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);             --Update Exceptions Table    IF      OBJECT_ID('VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_CASH_TABLE', 'U') IS NULL     SELECT ORDER_ID, DATA_SOURCE, VG_602, VG_602_CREATETIME     INTO  VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_CASH_TABLE     FROM #exception_table    ELSE      IF OBJECT_ID('tempdb..#temp_CP_table', 'U') IS NOT NULL      DROP TABLE #temp_CP_table     SELECT ORDER_ID, DATA_SOURCE, VG_602, VG_602_CREATETIME     INTO #TEMP_CP_TABLE     FROM #exception_table        MERGE VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_CASH_TABLE AS T     USING #TEMP_CP_TABLE AS S    ON (T.ORDER_ID = S.ORDER_ID AND T.[DATA_SOURCE] = S.[DATA_SOURCE])    WHEN MATCHED     THEN UPDATE     SET      ORDER_ID = CASE WHEN S.VG_602 > T.VG_602 THEN S.ORDER_ID ELSE T.ORDER_ID END,     VG_602 = CASE WHEN S.VG_602 > T.VG_602 THEN S.VG_602 ELSE T.VG_602 END,     VG_602_CREATETIME = CASE WHEN S.VG_602 > T.VG_602 THEN S.VG_602_CREATETIME ELSE T.VG_602_CREATETIME END,     [DATA_SOURCE] = CASE WHEN S.VG_602 > T.VG_602 THEN S.[DATA_SOURCE] ELSE T.[DATA_SOURCE] END        WHEN NOT MATCHED     THEN     INSERT     (ORDER_ID,     VG_602,     VG_602_CREATETIME,     [DATA_SOURCE])         VALUES     (S.ORDER_ID,     S.VG_602,     S.VG_602_CREATETIME,     S.[DATA_SOURCE]);         IF OBJECT_ID('tempdb..#cash_manager_temp', 'U') IS NOT NULL DROP TABLE #cash_manager_temp     IF OBJECT_ID('tempdb..#aladdin_temp', 'U') IS NOT NULL DROP TABLE #aladdin_temp     IF OBJECT_ID('tempdb..#exception_table', 'U') IS NOT NULL DROP TABLE #exception_table     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     IF OBJECT_ID('tempdb..#temp_recent_dealer_al', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_al     IF OBJECT_ID('tempdb..#temp_recent_dealer_cm', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_cm        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_602_EOD_HOLDOVERS_FX  CreateDate: 2025-06-26 17:41:05.213  ModifyDate: 2025-06-26 17:41:05.213  --- DEFINITION START ---  -- =============================================    -- Author:  <Samad, Mehreen>    -- Create date: <03/07/2019>    -- Description:     -- <Details all orders and highlights exceptions    -- where Executed Date Time is not on the Order     -- Trade Date.>    -- =============================================        -- ***************VERSION CONTROL***************    --    -- *********************************************        CREATE PROCEDURE [dbo].[VG_602_EOD_HOLDOVERS_FX]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        IF OBJECT_ID('tempdb..#max_touch_pm', 'U') IS NOT NULL DROP TABLE #max_touch_pm    SELECT DISTINCT      ORD_NUM,      MAX(TOUCH_COUNT) as MAX_TOUCH     INTO #max_touch_pm    FROM VISTA_REPORTING.dbo.PM_ORDERS    GROUP BY ORD_NUM        IF OBJECT_ID('tempdb..#max_touch_t', 'U') IS NOT NULL DROP TABLE #max_touch_t    SELECT DISTINCT      MULTI_FUND_ID,      MAX(TOUCH_COUNT) as MAX_TOUCH     INTO #max_touch_t    FROM VISTA_REPORTING.dbo.TRADES    GROUP BY MULTI_FUND_ID        IF OBJECT_ID('tempdb..#max_touch_fxo', 'U') IS NOT NULL DROP TABLE #max_touch_fxo    SELECT DISTINCT      FXM_ORDER_ID,      MAX(API_REQUESTED_DATE) as MAX_API_REQUESTED_DATE    INTO #max_touch_fxo    FROM VISTA_REPORTING.dbo.FX_ORDERS    GROUP BY FXM_ORDER_ID        IF OBJECT_ID('tempdb..#max_touch_fxT', 'U') IS NOT NULL DROP TABLE #max_touch_fxT    SELECT DISTINCT      TRADE_ID,      MAX(API_REQUESTED_DATE) as MAX_API_REQUESTED_DATE    INTO #max_touch_fxT    FROM VISTA_REPORTING.dbo.FX_TRADES    GROUP BY TRADE_ID            --Calculating EOD Holdovers exceptions    IF OBJECT_ID('tempdb..#eod_ex', 'U') IS NOT NULL DROP TABLE #eod_ex    SELECT DISTINCT     fxo.[FXM_ORDER_ID],     fxo.[ORDER_TRADE_DATE],      fxo.[INSTRUCTION_STATUS],     fxt.[EXECUTED_DATE_TIME],     CASE      WHEN fxt.[EXECUTED_DATE_TIME] IS NULL AND NULLIF(fxo.[INSTRUCTION_STATUS],'') not in ('Cancelled','Executed') THEN 1 --Flagging when there is no execution time      WHEN CAST(fxo.[ORDER_TRADE_DATE] as DATE) != CAST(fxt.[EXECUTED_DATE_TIME] as DATE) AND NULLIF(fxo.[INSTRUCTION_STATUS],'') not in ('Cancelled','Executed') THEN 1     ELSE 0     END AS EOD_EXCEPTION,     'FX' as [DATA_SOURCE]    INTO #eod_ex    FROM VISTA_REPORTING.dbo.FX_ORDERS fxo    inner join #max_touch_fxo mtf    on mtf.[FXM_ORDER_ID] = fxo.[FXM_ORDER_ID] and mtf.[MAX_API_REQUESTED_DATE] = fxo.[API_REQUESTED_DATE]    left join (SELECT DISTINCT ORDER_ID, EXECUTED_DATE_TIME FROM VISTA_REPORTING.dbo.FX_TRADES) fxt    on fxo.[FXM_ORDER_ID] = fxt.[ORDER_ID]        UNION        SELECT DISTINCT     pm.[ORD_NUM],     pm.[OPEN_DATE],     pm.[STATUS],     t.[EXECUTION_TIME],     CASE      WHEN t.[EXECUTION_TIME] IS NULL AND NULLIF(pm.[STATUS],'') != 'C' THEN 1 --Flagging when there is no execution time      WHEN CAST(pm.[OPEN_DATE] as DATE) != CAST(t.[EXECUTION_TIME] as DATE) AND NULLIF(pm.[STATUS],'') != 'C' THEN 1     ELSE 0     END AS EOD_EXCEPTION,     'AL' as [DATA_SOURCE]    FROM VISTA_REPORTING.dbo.PM_ORDERS pm    inner join #max_touch_pm mtt    on pm.[ORD_NUM] = mtt.[ORD_NUM] and pm.[TOUCH_COUNT] = mtt.[MAX_TOUCH]    left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc    on pm.[ORD_NUM] = oc.[PM_ORD]    left join (SELECT DISTINCT ORD_NUM, EXECUTION_TIME, MULTI_FUND_ID FROM VISTA_REPORTING.dbo.TRADES) t    on oc.[TRD_ORD] = t.[ORD_NUM]    WHERE pm.[DEALING_DESK] = 'FX'        --Final exceptions table    IF OBJECT_ID('tempdb..#eod_ex_final', 'U') IS NOT NULL DROP TABLE #eod_ex_final    SELECT DISTINCT     ex.[FXM_ORDER_ID],     MAX(ex.[EOD_EXCEPTION]) as VG_602,     CASE      WHEN MAX(ex.[EOD_EXCEPTION]) = 1 THEN GETDATE()     ELSE NULL     END AS VG_602_CREATETIME,     ex.[DATA_SOURCE]    INTO #eod_ex_final    FROM #eod_ex ex    GROUP BY ex.[FXM_ORDER_ID],       ex.[DATA_SOURCE]        -- ==============================================================================    /* Adding to FINAL_STATUS_UPDATE_TABLE */    -- ==============================================================================        --Add EOD Holdovers exceptions records into FINAL_STATUS_UPDATE_TABLE    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    SELECT DISTINCT     CONCAT(FXM_ORDER_ID,'_602_',[DATA_SOURCE]) as ID,     '1A2' AS STATUS,     NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table    FROM #eod_ex_final    WHERE VG_602 != 0        MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'FX',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'FX');        -- ==============================================================================    /* Adding to AUDIT_TABLE_FX */    -- ==============================================================================        IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    SELECT DISTINCT     NULL AS TRANSACTION_NUMBER,     CASE       WHEN ex.[DATA_SOURCE] = 'AL' THEN t.[ORD_NUM]       WHEN ex.[DATA_SOURCE] = 'FX' THEN ex.[FXM_ORDER_ID]     ELSE NULL      END AS TRD_ORD,      ex.[FXM_ORDER_ID] as ORDER_ID,     'EOD Holdovers' AS Exception_Type,     CONCAT(ex.[FXM_ORDER_ID],'_602_',ex.[DATA_SOURCE]) AS ID,     NULL AS REASON,     NULL AS COMMENT,     'With Reviewer' AS Status,     NULL AS ClientExecID,     'FX' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],tdd3.[FULL_NAME],tdd4.[FULL_NAME],dd.[DEFAULT_DEALER]) AS DEALER,     '1A2' AS STATUS_ID,     CASE       WHEN ex.[DATA_SOURCE] = 'AL' THEN trd_o.[AUTH_TIME]      WHEN ex.[DATA_SOURCE] = 'FX' THEN fxo.[INSTRUCTION_RECEIVED_DATE_TIME]     END AS ORD_AUTH,     null AS TRADE_EXEC    INTO  #temp_audit    FROM #eod_ex_final ex    left join (SELECT DISTINCT fxt.TRADE_ID, ORDER_ID, EXECUTED_DATE_TIME, DEALT_BY, ACCEPTED_BY, PULL_DATE FROM VISTA_REPORTING.dbo.FX_TRADES FXT    INNER JOIN #max_touch_fxT MTT ON MTT.MAX_API_REQUESTED_DATE = FXT.API_REQUESTED_DATE and MTT.TRADE_ID = FXT.TRADE_ID) fxt    on ex.[FXM_ORDER_ID] = fxt.[ORDER_ID] and ex.[DATA_SOURCE] = 'FX'    left join (SELECT DISTINCT fxo.FXM_ORDER_ID, MIN(INSTRUCTION_RECEIVED_DATE_TIME) as INSTRUCTION_RECEIVED_DATE_TIME, PULL_DATE FROM VISTA_REPORTING.dbo.FX_ORDERS fxo     inner join #max_touch_fxo mfxo on mfxo.FXM_ORDER_ID = fxo.FXM_ORDER_ID and mfxo.MAX_API_REQUESTED_DATE = fxo.API_REQUESTED_DATE GROUP BY fxo.FXM_ORDER_ID, PULL_DATE) fxo    on ex.[FXM_ORDER_ID] = fxo.[FXM_ORDER_ID] and ex.[DATA_SOURCE] = 'FX'    left join (SELECT DISTINCT t.MULTI_FUND_ID, t.ORD_NUM, t.EXECUTION_TIME, t.TRD_TRADER, t.TOUCH_COUNT, t.PULL_DATE FROM VISTA_REPORTING.dbo.TRADES t    inner join #max_touch_t mtt on mtt.MULTI_FUND_ID = t.MULTI_FUND_ID and mtt.MAX_TOUCH = t.TOUCH_COUNT WHERE t.FinalFlag = 1) t    ON ex.[DATA_SOURCE] = 'AL' AND ex.[FXM_ORDER_ID] = t.[ORD_NUM]    left join (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o    ON t.[ORD_NUM] = trd_o.[ORD_NUM]     left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc    ON trd_o.[ORD_NUM] = oc.[TRD_ORD]    left join (SELECT DISTINCT pm.ORD_NUM, pm.TRADER, pm.TOUCH_COUNT, pm.PULL_DATE FROM VISTA_REPORTING.dbo.PM_ORDERS pm    inner join #max_touch_pm mtp on mtp.ORD_NUM = pm.ORD_NUM and mtp.MAX_TOUCH = pm.TOUCH_COUNT) pm    on ex.[FXM_ORDER_ID] = pm.[ORD_NUM] and ex.[DATA_SOURCE] = 'AL'    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd    on tdd.[MG_USER_ID] = fxt.[DEALT_BY] AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2    on tdd2.[MG_USER_ID] = fxt.[ACCEPTED_BY] AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)    left join VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd3    on tdd3.[INITIALS]  = t.[TRD_TRADER] AND CAST(t.[PULL_DATE] AS DATE) BETWEEN CAST(tdd3.[DATE_FROM] AS DATE) AND CAST(tdd3.[DATE_TO] AS DATE)    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd4    on tdd4.[INITIALS] = pm.[TRADER] AND CAST(pm.[PULL_DATE] AS DATE) BETWEEN CAST(tdd4.[DATE_FROM] AS DATE) AND CAST(tdd4.[DATE_TO] AS DATE)    left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd     on dd.[REPORT_NAME] = 'EOD Holdovers' AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE],t.[PULL_DATE],pm.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)        WHERE ex.[VG_602] = 1        MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_FX AS T    USING #temp_audit AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);        -- ==============================================================================    /* Update Exceptions Table */    -- ==============================================================================        --Update EOD Holdovers Exceptions Table    IF      OBJECT_ID('VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_FX_TABLE', 'U') IS NULL     SELECT *      INTO VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_FX_TABLE      FROM #eod_ex_final    ELSE      IF OBJECT_ID('tempdb..#temp_CP_table', 'U') IS NOT NULL      DROP TABLE #temp_CP_table     SELECT *      INTO #temp_CP_table     FROM #eod_ex_final        MERGE VISTA_STAGING.dbo.VG_602_EOD_HOLDOVERS_FX_TABLE AS T     USING #temp_CP_table AS S    ON (T.FXM_ORDER_ID = S.FXM_ORDER_ID AND T.[DATA_SOURCE] = S.[DATA_SOURCE])    WHEN MATCHED     THEN UPDATE     SET      [FXM_ORDER_ID] = CASE WHEN S.VG_602 > T.VG_602 THEN S.[FXM_ORDER_ID] ELSE T.[FXM_ORDER_ID] END,     [VG_602] = CASE WHEN S.VG_602 > T.VG_602 THEN S.[VG_602] ELSE T.[VG_602] END,     [VG_602_CREATETIME] = CASE WHEN S.VG_602 > T.VG_602 THEN S.[VG_602_CREATETIME] ELSE T.[VG_602_CREATETIME] END,     [DATA_SOURCE] = CASE WHEN S.VG_602 > T.VG_602 THEN S.[DATA_SOURCE] ELSE T.[DATA_SOURCE] END        WHEN NOT MATCHED     THEN     INSERT     ([FXM_ORDER_ID],     [VG_602],     [VG_602_CREATETIME],     [DATA_SOURCE])         VALUES     (S.[FXM_ORDER_ID],     S.[VG_602],     S.[VG_602_CREATETIME],     S.[DATA_SOURCE]) ;         IF OBJECT_ID('tempdb..#eod_ex', 'U') IS NOT NULL DROP TABLE #eod_ex     IF OBJECT_ID('tempdb..#eod_ex_final', 'U') IS NOT NULL DROP TABLE #eod_ex_final     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_603_LARGE_TRADES_CASH  CreateDate: 2025-06-26 17:40:50.437  ModifyDate: 2025-06-26 17:40:50.437  --- DEFINITION START ---  -- =============================================    -- Author:  <Author,,Name>    -- Create date: <Create Date,,>    -- Description: <Description,,>    -- =============================================    CREATE PROCEDURE [dbo].[VG_603_LARGE_TRADES_CASH]         AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        IF OBJECT_ID('tempdb..#temp_recent_dealer_al', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_al    select distinct      oc.PM_ORD as ORD_NUM,     trd_trader    into #temp_recent_dealer_al    from VISTA_REPORTING.dbo.TRADES t    left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on oc.TRD_ORD = t.ORD_NUM    INNER JOIN (SELECT       OC.PM_ORD AS ORD_NUM,       MAX(EXECUTION_TIME) AS MAX_EXEC,       MAX(TOUCH_COUNT) AS MAX_TOUCH       FROM VISTA_REPORTING.dbo.TRADES T       LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS OC ON OC.TRD_ORD = T.ORD_NUM       GROUP BY OC.PM_ORD) T2 ON T2.ORD_NUM = OC.PM_ORD              AND T2.MAX_EXEC = t.EXECUTION_TIME             AND T2.MAX_TOUCH = t.TOUCH_COUNT            IF OBJECT_ID('tempdb..#temp_recent_dealer_cm', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_cm    SELECT DISTINCT     ct.ORDER_ID,        ct.DEALER_NAME,     ct.API_REQUESTED_DATE    into #temp_recent_dealer_cm    FROM VISTA_REPORTING.dbo.CASH_TRADES ct    INNER JOIN (SELECT                   ORDER_ID,                  MAX(EXECUTED_DATETIME) AS MAX_EXEC,                  MAX(API_REQUESTED_DATE) AS MAX_API_REQ                  FROM VISTA_REPORTING.dbo.CASH_TRADES                  GROUP BY ORDER_ID) ct2 ON nullif(ct2.ORDER_ID, '0') = ct.ORDER_ID                                             AND ct2.MAX_EXEC = ct.EXECUTED_DATETIME                                            AND ct2.MAX_API_REQ = ct.API_REQUESTED_DATE         --CM POPULATION    IF OBJECT_ID('tempdb..#CM_POP', 'U') IS NOT NULL DROP TABLE #CM_POP    SELECT co.*     INTO #CM_POP    FROM VISTA_REPORTING.dbo.CASH_ORDERS co    INNER JOIN #temp_recent_dealer_cm trd ON trd.ORDER_ID=co.ORDER_ID AND trd.API_REQUESTED_DATE=co.API_REQUESTED_DATE    --WHERE ISNULL(INSTRUCTION_STATUS_DECODE, '') != 'CANCELLED'            --ALADDIN    IF OBJECT_ID('tempdb..#AL_POP', 'U') IS NOT NULL DROP TABLE #AL_POP    SELECT      PM.*    INTO #AL_POP    FROM VISTA_REPORTING.DBO.PM_ORDERS PM    INNER JOIN (SELECT ORD_NUM, MAX(TOUCH_COUNT) as MAX_TOUCH FROM VISTA_REPORTING.dbo.PM_ORDERS GROUP BY ORD_NUM) trd ON trd.ORD_NUM=PM.ORD_NUM AND trd.MAX_TOUCH=PM.TOUCH_COUNT    WHERE PM.DEALING_DESK = 'CASH'            DECLARE @LEFTOVER INT    SET @LEFTOVER = (SELECT LIMIT_GBP FROM VISTA_STAGING.DBO.REF_CASH_LARGE_TRADE_THRESHOLD  WHERE PRODUCT = 'OTHER' AND GETDATE() BETWEEN CAST(DATE_FROM AS DATE) AND CAST(DATE_TO AS DATE))            IF OBJECT_ID('tempdb..#CM_LIMITS', 'U') IS NOT NULL DROP TABLE #CM_LIMITS    SELECT DISTINCT     CO.ORDER_ID,     --CT.TRANSACTION_NUMBER,     CO.INSTRUCTION_STATUS_DECODE,     CO.PRODUCT,     CO.INSTRUCTED_AMOUNT,     CO.INSTRUCTED_AMOUNT_GBP,     COALESCE(LT.LIMIT_GBP, @LEFTOVER) AS LIMIT_GBP,     --CO.PRODUCT_GROUP_NAME,     --CO.instructed_by,     CO.INSTRUCTED_CURRENCY,     CT.EXECUTED_DATETIME     INTO #CM_LIMITS    FROM #CM_POP CO    LEFT JOIN VISTA_REPORTING.DBO.CASH_TRADES CT ON CT.ORDER_ID = CO.ORDER_ID    LEFT JOIN VISTA_STAGING.DBO.REF_CASH_LARGE_TRADE_THRESHOLD LT ON LT.PRODUCT = CO.PRODUCT  AND CAST(CO.PULL_DATE AS DATE) BETWEEN CAST(LT.DATE_FROM AS DATE) AND CAST(LT.DATE_TO AS DATE)    --WHERE CT.EXECUTED_DATETIME IS NOT NULL            IF OBJECT_ID('tempdb..#temp_pop_table', 'U') IS NOT NULL DROP TABLE #temp_pop_table    SELECT DISTINCT      ORDER_ID,     'CM' AS SOURCE    INTO #temp_pop_table     FROM Vista_Reporting.dbo.CASH_ORDERS    UNION     SELECT DISTINCT      ORD_NUM,      'AL' AS SOURCE    FROM Vista_Reporting.dbo.PM_ORDERS WHERE DEALING_DESK = 'CASH'            IF OBJECT_ID('tempdb..#CM_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #CM_EXCEPTIONS    SELECT DISTINCT     co.ORDER_ID,     CL.INSTRUCTED_AMOUNT,     CL.PRODUCT,     CL.INSTRUCTED_CURRENCY,     CL.INSTRUCTION_STATUS_DECODE,     --CL.GBP_INDEX_RATE,     CL.INSTRUCTED_AMOUNT_GBP,     CL.LIMIT_GBP,     CASE       WHEN CL.INSTRUCTED_AMOUNT_GBP > CL.LIMIT_GBP         and ISNULL(CL.INSTRUCTION_STATUS_DECODE, '') = 'Accepted Dealt' -- Excludes any cancelled orders        and CL.EXECUTED_DATETIME IS NOT NULL         THEN 1       ELSE 0      END AS EXCEPTION_FLAG,     co.SOURCE    INTO #CM_EXCEPTIONS    FROM #temp_pop_table co    LEFT JOIN #CM_LIMITS CL ON CL.ORDER_ID = co.ORDER_ID AND SOURCE = 'CM'    WHERE co.SOURCE = 'CM'            IF OBJECT_ID('tempdb..#AL_LIMITS', 'U') IS NOT NULL DROP TABLE #AL_LIMITS    SELECT DISTINCT     ORD_NUM,     FACE,     SM_SEC_TYPE,     AL.CURRENCY,     STATUS,     e.GBP_INDEX_RATE,     CASE WHEN e.GBP_INDEX_RATE IS NOT NULL THEN FACE/e.GBP_INDEX_RATE      WHEN e.GBP_INDEX_RATE IS NULL AND AL.CURRENCY = 'GBP' THEN FACE -- HAD TO DO THIS AS TBILL DIDNT SEEM TO WORK ON THE JOIN       ELSE NULL END  AS INSTRUCTED_AMOUNT_GBP,     COALESCE(LT.LIMIT_GBP, @LEFTOVER) AS LIMIT_GBP    INTO #AL_LIMITS    FROM #AL_POP AL    OUTER APPLY (SELECT TOP 1 e.GBP_INDEX_RATE FROM VISTA_REPORTING.dbo.FX_RATES e        WHERE e.CURRENCY = AL.CURRENCY and CONVERT(date, e.MARKDATE) <= CONVERT(date, AL.AUTH_TIME)       ORDER BY e.MARKDATE DESC) e    LEFT JOIN VISTA_STAGING.DBO.REF_CASH_LARGE_TRADE_THRESHOLD LT ON LT.PRODUCT = AL.SM_SEC_TYPE  AND CAST(AL.PULL_DATE AS DATE) BETWEEN CAST(LT.DATE_FROM AS DATE) AND CAST(LT.DATE_TO AS DATE)            IF OBJECT_ID('tempdb..#AL_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #AL_EXCEPTIONS    SELECT DISTINCT     co.ORDER_ID,     AL.FACE,     AL.SM_SEC_TYPE,     AL.CURRENCY,     AL.STATUS,     AL.GBP_INDEX_RATE,     AL.INSTRUCTED_AMOUNT_GBP,     AL.LIMIT_GBP,     CASE       WHEN AL.INSTRUCTED_AMOUNT_GBP > AL.LIMIT_GBP         AND AL.STATUS != 'C'      THEN 1       ELSE 0      END AS EXCEPTION_FLAG,     co.SOURCE    INTO #AL_EXCEPTIONS    FROM #temp_pop_table co    LEFT JOIN #AL_LIMITS AL ON AL.ORD_NUM = co.ORDER_ID AND SOURCE = 'AL'    WHERE co.SOURCE = 'AL'            --COMBINED EXCEPTIONS    IF OBJECT_ID('tempdb..#COMBINED_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #COMBINED_EXCEPTIONS    SELECT DISTINCT     ORDER_ID,      PRODUCT,     EXCEPTION_FLAG,     CASE WHEN EXCEPTION_FLAG = 1 THEN GETDATE() ELSE NULL END AS EXCEPTION_CREATETIME,     SOURCE    INTO #COMBINED_EXCEPTIONS    FROM #CM_EXCEPTIONS        UNION        SELECT DISTINCT      ORDER_ID,     SM_SEC_TYPE,     EXCEPTION_FLAG,     CASE WHEN EXCEPTION_FLAG = 1 THEN GETDATE() ELSE NULL END AS EXCEPTION_CREATETIME,     SOURCE    FROM #AL_EXCEPTIONS                  --Add records into FINAL_STATUS_UPDATE_TABLE    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    SELECT DISTINCT     CASE WHEN SOURCE = 'AL' THEN CONCAT(ORDER_ID , '_603', '_AL')     WHEN SOURCE = 'CM' THEN CONCAT(ORDER_ID, '_603', '_CM') END AS ID,     '1A2' AS STATUS,     NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table    FROM #COMBINED_EXCEPTIONS    WHERE EXCEPTION_FLAG = 1        MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'CASH',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'CASH');            --Add records into AUDIT_TABLE_CASH    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    SELECT DISTINCT      null as TRANSACTION_NUMBER,     CASE WHEN CE.SOURCE = 'AL' THEN OC.TRD_ORD      ELSE NULL       END AS TRD_ORD,       CASE WHEN CE.SOURCE = 'CM' THEN CE.ORDER_ID         WHEN CE.SOURCE = 'AL' THEN CE.ORDER_ID        END AS ORDER_ID,     'Large Trades' AS Exception_Type,     CASE WHEN CE.SOURCE = 'AL' THEN CONCAT(CE.ORDER_ID, '_603', '_AL')      WHEN CE.SOURCE = 'CM' THEN CONCAT(CE.ORDER_ID , '_603', '_CM')       END AS ID,     NULL AS REASON,     NULL AS COMMENT,     'With Reviewer' AS Status,     NULL AS ClientExecID,     'Cash' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME], DD.DEFAULT_DEALER) AS DEALER,     '1A2' AS STATUS_ID,     CASE WHEN CE.SOURCE = 'CM' THEN co.INSTRUCTION_RECEIVED_DATE       WHEN CE.SOURCE = 'AL' THEN PM.AUTH_TIME       END AS ORD_AUTH,     --CASE WHEN CE.SOURCE = 'CM' THEN ct.[EXECUTED_DATETIME]       --WHEN CE.SOURCE = 'ALADDIN' THEN T.EXECUTION_TIME       NULL AS TRADE_EXEC    INTO #temp_audit    FROM #COMBINED_EXCEPTIONS CE    --left join (SELECT DISTINCT TRANSACTION_NUMBER, ORDER_ID, EXECUTED_DATETIME, DEALER_NAME FROM VISTA_STAGING.dbo.CASH_TRADES) ct on CE.SOURCE = 'CM' AND CE.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]    left join (SELECT DISTINCT PULL_DATE, ORDER_ID, MIN(INSTRUCTION_RECEIVED_DATE) as INSTRUCTION_RECEIVED_DATE, ACCEPTED_BY, INSTRUCTED_BY FROM VISTA_STAGING.dbo.CASH_ORDERS GROUP BY ORDER_ID, ACCEPTED_BY, PULL_DATE, INSTRUCTED_BY) co    on cE.[ORDER_ID] = co.[ORDER_ID] AND CE.SOURCE = 'CM'    --LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER FROM VISTA_REPORTING.DBO.TRADES WHERE FinalFlag = 1) T ON CE.SOURCE = 'AL' AND CE.TRANSACTION_NUMBER = T.MULTI_FUND_ID    LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.TRD_ORD = CE.ORDER_ID AND CE.SOURCE = 'AL'    LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME, PM, PULL_DATE, TRADER FROM VISTA_REPORTING.DBO.PM_ORDERS GROUP BY ORD_NUM, PM, TRADER, PULL_DATE) PM ON PM.ORD_NUM = OC.PM_ORD    LEFT JOIN #temp_recent_dealer_al RAL ON RAL.ORD_NUM  = ce.ORDER_ID AND ce.SOURCE = 'AL'    LEFT JOIN #temp_recent_dealer_cm RCM ON RCM.ORDER_ID = ce.ORDER_ID AND ce.SOURCE = 'CM'    LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD ON ((TDD.MG_USER_ID  = RCM.DEALER_NAME AND ce.SOURCE = 'CM') OR (TDD.INITIALS = RAL.TRD_TRADER AND ce.SOURCE = 'AL'))  AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE) AS DATE) BETWEEN CAST(TDD.DATE_FROM   AS DATE) AND CAST(TDD.DATE_TO AS DATE)    LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD2 ON ((TDD2.MG_USER_ID  = COALESCE(CO.ACCEPTED_BY, CO.INSTRUCTED_BY) AND ce.SOURCE = 'CM') OR (TDD2.INITIALS = PM.TRADER AND ce.SOURCE = 'AL')) AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE) AS DATE) BETWEEN CAST(TDD2.DATE_FROM AS DATE) AND CAST(TDD2.DATE_TO AS DATE)    LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'Large Trades' AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE) AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)    WHERE CE.EXCEPTION_FLAG = 1 AND COALESCE(co.INSTRUCTION_RECEIVED_DATE,PM.AUTH_TIME) is NOT NULL            MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_CASH AS T    USING #temp_audit AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);             -- ==============================================================================    /* Update Exceptions Table */    -- ==============================================================================        IF OBJECT_ID('VISTA_STAGING.DBO.VG_603_LARGE_TRADES_CASH_TABLE' , 'U') IS NULL     SELECT DISTINCT *      INTO VISTA_STAGING.DBO.VG_603_LARGE_TRADES_CASH_TABLE     FROM #COMBINED_EXCEPTIONS    ELSE     IF OBJECT_ID('tempdb..#TEMP_LT_TABLE', 'U') IS NOT NULL DROP TABLE #TEMP_LT_TABLE     SELECT DISTINCT *      INTO #TEMP_LT_TABLE     FROM #COMBINED_EXCEPTIONS         MERGE VISTA_STAGING.DBO.VG_603_LARGE_TRADES_CASH_TABLE AS T      USING #TEMP_LT_TABLE AS S     ON (ISNULL(T.ORDER_ID,0) = ISNULL(S.ORDER_ID,0) AND T.SOURCE = S.SOURCE)     WHEN MATCHED     THEN UPDATE     SET     ORDER_ID = CASE WHEN S.EXCEPTION_FLAG > T.EXCEPTION_FLAG THEN S.ORDER_ID ELSE T.ORDER_ID END,     PRODUCT = CASE WHEN S.EXCEPTION_FLAG > T.EXCEPTION_FLAG THEN S.PRODUCT ELSE T.PRODUCT END,     EXCEPTION_FLAG = CASE WHEN S.EXCEPTION_FLAG > T.EXCEPTION_FLAG THEN S.EXCEPTION_FLAG ELSE T.EXCEPTION_FLAG END,     EXCEPTION_CREATETIME = CASE WHEN S.EXCEPTION_FLAG > T.EXCEPTION_FLAG THEN S.EXCEPTION_CREATETIME ELSE T.EXCEPTION_CREATETIME END,     SOURCE = CASE WHEN S.EXCEPTION_FLAG > T.EXCEPTION_FLAG THEN S.SOURCE ELSE T.SOURCE END        WHEN NOT MATCHED     THEN INSERT     (ORDER_ID     ,PRODUCT      ,EXCEPTION_FLAG     ,EXCEPTION_CREATETIME     ,SOURCE      )     VALUES     (S.ORDER_ID     ,S.PRODUCT      ,S.EXCEPTION_FLAG     ,S.EXCEPTION_CREATETIME      ,S.SOURCE ) ;           IF OBJECT_ID('tempdb..#CM_POP', 'U') IS NOT NULL DROP TABLE #CM_POP     IF OBJECT_ID('tempdb..#CM_LIMITS', 'U') IS NOT NULL DROP TABLE #CM_LIMITS     IF OBJECT_ID('tempdb..#CM_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #CM_EXCEPTIONS     IF OBJECT_ID('tempdb..#AL_POP', 'U') IS NOT NULL DROP TABLE #AL_POP     IF OBJECT_ID('tempdb..#AL_LIMITS', 'U') IS NOT NULL DROP TABLE #AL_LIMITS     IF OBJECT_ID('tempdb..#AL_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #AL_EXCEPTIONS     IF OBJECT_ID('tempdb..#COMBINED_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #COMBINED_EXCEPTIONS     IF OBJECT_ID('tempdb..#temp_recent_dealer_al', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_al        IF OBJECT_ID('tempdb..#temp_recent_dealer_cm', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_cm        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_603_LARGE_TRADES_FX  CreateDate: 2025-06-26 17:40:12.863  ModifyDate: 2025-06-26 17:40:12.863  --- DEFINITION START ---  -- =============================================    -- Author:  <LIZZIE REYNOLDS>    -- Create date: <10/07/2019>    -- Description: <LARGE TRADES,>    -- =============================================    CREATE PROCEDURE [dbo].[VG_603_LARGE_TRADES_FX]     -- Add the parameters for the stored procedure here        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        if OBJECT_ID('tempdb..#API_REQ_ORDERS', 'U') IS NOT NULL DROP TABLE #API_REQ_ORDERS    SELECT DISTINCT fxm_ORDER_ID,     MAX(API_REQUESTED_DATE) AS MAX_DATE     into #api_req_orders     FROM VISTA_REPORTING.dbo.FX_ORDERS      group by FXM_ORDER_ID        IF OBJECT_ID('tempdb..#FX_POP', 'U') IS NOT NULL DROP TABLE #FX_POP    select DISTINCT      fx.FXM_ORDER_ID,     INSTRUCTION_STATUS,     INSTRUCTION_TYPE,     NOTIONAL_AMOUNT_GBP,     NOTIONAL_AMOUNT_GBP_FAR,     NR_LEG_PRODUCT,     FR_LEG_PRODUCT,     PULL_DATE    INTO #FX_POP    from VISTA_REPORTING.dbo.FX_ORDERS fx    inner join #api_req_orders api on api.FXM_ORDER_ID = fx.FXM_ORDER_ID and api.MAX_DATE = fx.API_REQUESTED_DATE        IF OBJECT_ID('tempdb..#MAX_TOUCH_ORDERS', 'U') IS NOT NULL DROP TABLE #MAX_TOUCH_ORDERS    SELECT DISTINCT      ORD_NUM,     MAX(TOUCH_COUNT) AS MAX_TCH     INTO #MAX_TOUCH_ORDERS    FROM VISTA_REPORTING.DBO.PM_ORDERS    GROUP BY ORD_NUM            IF OBJECT_ID('tempdb..#AL_POP', 'U') IS NOT NULL DROP TABLE #AL_POP    SELECT DISTINCT      PM.ORD_NUM,     STATUS,     SM_SEC_GROUP,     SM_SEC_TYPE,     FACE,     e.GBP_INDEX_RATE,     PM.PULL_DATE    INTO #AL_POP    FROM VISTA_REPORTING.DBO.PM_ORDERS PM    INNER JOIN #MAX_TOUCH_ORDERS MTO ON MTO.MAX_TCH = PM.TOUCH_COUNT AND MTO.ORD_NUM = PM.ORD_NUM    outer apply (SELECT TOP 1         e.*         FROM VISTA_REPORTING.dbo.FX_RATES e         WHERE e.CURRENCY = PM.CURRENCY and CONVERT(date, e.MARKDATE) <= CONVERT(date, PM.AUTH_TIME)        ORDER BY e.MARKDATE DESC) e     WHERE DEALING_DESK = 'FX'            IF OBJECT_ID('tempdb..#FX_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #FX_EXCEPTIONS    SELECT DISTINCT     FXM_ORDER_ID,     INSTRUCTION_TYPE,     NR_LEG_PRODUCT,     FR_LEG_PRODUCT,     NOTIONAL_AMOUNT_GBP,     NOTIONAL_AMOUNT_GBP_FAR,     ABS(NOTIONAL_AMOUNT_GBP- NOTIONAL_AMOUNT_GBP_FAR) AS NET_EXPOSURE,         CASE WHEN INSTRUCTION_STATUS != 'Executed' THEN 0       WHEN INSTRUCTION_TYPE =  'SPOT' AND NOTIONAL_AMOUNT_GBP >= REF.LIMIT_1 THEN 1        WHEN INSTRUCTION_TYPE =  'Forward' AND NOTIONAL_AMOUNT_GBP >= REF.LIMIT_2 THEN 1        WHEN INSTRUCTION_TYPE = 'NDF' AND NOTIONAL_AMOUNT_GBP >= REF.LIMIT_3 THEN 1       WHEN INSTRUCTION_TYPE =  'NDS' AND NOTIONAL_AMOUNT_GBP_FAR >= REF.LIMIT_4 THEN 1        WHEN INSTRUCTION_TYPE = 'FX Swap' AND ABS(NOTIONAL_AMOUNT_GBP- NOTIONAL_AMOUNT_GBP_FAR) >= REF.LIMIT_5 THEN   1       WHEN INSTRUCTION_TYPE = 'FX Swap' AND NOTIONAL_AMOUNT_GBP_FAR >= REF.LIMIT_6 THEN 1      ELSE 0 END AS VG_603    INTO #FX_EXCEPTIONS    FROM #FX_POP FP    LEFT JOIN VISTA_STAGING.dbo.REF_FX_LARGE_TRADE_THRESHOLDS REF ON CAST(FP.PULL_DATE AS DATE) BETWEEN CAST(REF.DATE_FROM AS DATE) AND CAST(REF.DATE_TO AS DATE)            IF OBJECT_ID('tempdb..#AL_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #AL_EXCEPTIONS    SELECT DISTINCT      ORD_NUM,     CONCAT(SM_SEC_GROUP, '/', SM_SEC_TYPE) AS INSTRUCTION_TYPE,     CASE WHEN ABS(1.0*FACE/GBP_INDEX_RATE) >= REF.LIMIT_7 THEN 1 ELSE 0 END AS VG_603    INTO #AL_EXCEPTIONS    FROM #AL_POP AL    LEFT JOIN VISTA_STAGING.dbo.REF_FX_LARGE_TRADE_THRESHOLDS REF ON CAST(AL.PULL_DATE AS DATE) BETWEEN CAST(REF.DATE_FROM AS DATE) AND CAST(REF.DATE_TO AS DATE)            IF OBJECT_ID('tempdb..#EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #EXCEPTIONS    SELECT DISTINCT      FXM_ORDER_ID AS ORDER_ID,     VG_603,     CASE WHEN VG_603 = 1 THEN GETDATE() ELSE NULL END AS VG_603_CREATETIME,     'FX' AS SOURCE    INTO #EXCEPTIONS    FROM #FX_EXCEPTIONS    UNION    SELECT DISTINCT      ORD_NUM,     VG_603,     CASE WHEN VG_603 = 1 THEN GETDATE() ELSE NULL END AS VG_603_CREATETIME,     'AL' AS SOURCE    FROM #AL_EXCEPTIONS        --Add records into FINAL_STATUS_UPDATE_TABLE    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    SELECT DISTINCT     CASE WHEN SOURCE = 'AL' THEN CONCAT(ORDER_ID , '_603', '_AL')     WHEN SOURCE = 'FX' THEN CONCAT(ORDER_ID, '_603', '_FX') END AS ID,     '1A2' AS STATUS,     NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table    FROM #EXCEPTIONS    WHERE VG_603 = 1        MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'FX',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'FX');            --Add records into AUDIT_TABLE_FX    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    SELECT DISTINCT      null AS TRANSACTION_NUMBER,     CASE WHEN CE.SOURCE = 'AL' THEN OC.TRD_ORD      ELSE NULL       END AS TRD_ORD,       CASE WHEN CE.SOURCE = 'FX' THEN CE.ORDER_ID         WHEN CE.SOURCE = 'AL' THEN PM.ORD_NUM         END AS ORDER_ID,     'Large Trades' AS Exception_Type,     CASE WHEN CE.SOURCE = 'AL' THEN CONCAT(CE.ORDER_ID , '_603', '_AL')      WHEN CE.SOURCE = 'FX' THEN CONCAT(CE.ORDER_ID , '_603', '_FX')       END AS ID,     NULL AS REASON,     NULL AS COMMENT,     'With Reviewer' AS Status,     NULL AS ClientExecID,     'FX' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],tdd4.[FULL_NAME],tdd3.[FULL_NAME],dd.[DEFAULT_DEALER]) AS DEALER, --tdd,tdd2,tdd4,tdd3 for order level reports to prioritise order level trader field     '1A2' AS STATUS_ID,     CASE WHEN CE.SOURCE = 'FX' THEN FXO.INSTRUCTION_RECEIVED_DATE_TIME      WHEN CE.SOURCE = 'AL' THEN PM.AUTH_TIME       END AS ORD_AUTH,     null as TRADE_EXEC    INTO #temp_audit    FROM #EXCEPTIONS CE    left join (SELECT DISTINCT TRADE_ID, ORDER_ID, EXECUTED_DATE_TIME, DEALT_BY, PULL_DATE,ACCEPTED_BY FROM VISTA_STAGING.dbo.fx_TRADES) FXT on CE.SOURCE = 'FX' AND CE.order_id= FXT.ORDER_ID    left join (SELECT DISTINCT FXM_ORDER_ID, MIN(INSTRUCTION_RECEIVED_DATE_TIME) as INSTRUCTION_RECEIVED_DATE_TIME, MIN(PULL_DATE) as PULL_DATE FROM VISTA_STAGING.dbo.FX_ORDERS GROUP BY FXM_ORDER_ID) FXO    on FXO.[FXM_ORDER_ID] = CE.[ORDER_ID] AND CE.SOURCE = 'FX'    LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.TRD_ORD = CE.ORDER_ID AND CE.SOURCE = 'AL'    LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER, PULL_DATE FROM VISTA_REPORTING.DBO.TRADES WHERE FinalFlag = 1) T ON CE.SOURCE = 'AL' AND oc.TRD_ORD = T.ORD_NUM    LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME, MIN(PULL_DATE) as PULL_DATE FROM VISTA_REPORTING.DBO.PM_ORDERS GROUP BY ORD_NUM) PM ON PM.ORD_NUM = OC.PM_ORD    LEFT JOIN (SELECT DISTINCT pmo.TRADER, pmo.TOUCH_COUNT, pmo.ORD_NUM FROM Vista_Reporting.dbo.PM_ORDERS pmo        INNER JOIN (SELECT MIN(TOUCH_COUNT) as TOUCH_COUNT, ORD_NUM FROM Vista_Reporting.dbo.PM_ORDERS WHERE TRADER IS NOT NULL GROUP BY ORD_NUM) pmo_min        on pmo.ORD_NUM = pmo_min.ORD_NUM and pmo.TOUCH_COUNT = pmo_min.TOUCH_COUNT) pmo_min on pmo_min.ORD_NUM = CE.ORDER_ID    left join  VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd    on tdd.[MG_USER_ID] = fxt.[DEALT_BY] AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2    on tdd2.[MG_USER_ID] = fxt.[ACCEPTED_BY] AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)    left join VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd3    on tdd3.[INITIALS]  = t.[TRD_TRADER] AND CAST(t.[PULL_DATE] AS DATE) BETWEEN CAST(tdd3.[DATE_FROM] AS DATE) AND CAST(tdd3.[DATE_TO] AS DATE)    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd4    on tdd4.[INITIALS] = pmo_min.[TRADER] AND CAST(pm.[PULL_DATE] AS DATE) BETWEEN CAST(tdd4.[DATE_FROM] AS DATE) AND CAST(tdd4.[DATE_TO] AS DATE)    left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd     on dd.[REPORT_NAME] = 'Large Trades' AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE],t.[PULL_DATE],pm.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)    WHERE CE.VG_603 = 1             MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_FX AS T    USING #temp_audit AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);        IF OBJECT_ID('VISTA_STAGING.DBO.VG_603_LARGE_TRADES_FX_TABLE' , 'U') IS NULL     SELECT DISTINCT *      INTO VISTA_STAGING.DBO.VG_603_LARGE_TRADES_FX_TABLE     FROM #EXCEPTIONS    ELSE     IF OBJECT_ID('tempdb..#TEMP_LT_TABLE', 'U') IS NOT NULL DROP TABLE #TEMP_LT_TABLE     SELECT DISTINCT *      INTO #TEMP_LT_TABLE     FROM #EXCEPTIONS         MERGE VISTA_STAGING.DBO.VG_603_LARGE_TRADES_FX_TABLE AS T      USING #TEMP_LT_TABLE AS S     ON (ISNULL(T.ORDER_ID,0) = ISNULL(S.ORDER_ID,0) AND T.SOURCE = S.SOURCE)     WHEN MATCHED     THEN UPDATE     SET     ORDER_ID = CASE WHEN S.VG_603 > T.VG_603 THEN S.ORDER_ID ELSE T.ORDER_ID END,     VG_603 = CASE WHEN S.VG_603 > T.VG_603 THEN S.VG_603 ELSE T.VG_603 END,     VG_603_CREATETIME = CASE WHEN S.VG_603 > T.VG_603 THEN S.VG_603_CREATETIME ELSE T.VG_603_CREATETIME END,     SOURCE = CASE WHEN S.VG_603 > T.VG_603 THEN S.SOURCE ELSE T.SOURCE END        WHEN NOT MATCHED     THEN INSERT     (ORDER_ID     ,VG_603     ,VG_603_CREATETIME     ,SOURCE      )     VALUES     (S.ORDER_ID     ,S.VG_603     ,S.VG_603_CREATETIME      ,S.SOURCE ) ;                 END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_603T_LARGE_TRADES_CASH  CreateDate: 2025-06-26 17:39:57.470  ModifyDate: 2025-06-26 17:39:57.470  --- DEFINITION START ---  -- =============================================    -- Author:  <Samad, Mehreen>    -- Create date: <15/08/2019>    -- Description: <This calculates the Large Trade    -- exceptions on a trade level. This does not     -- have a workflow, and is only used for MI    -- purposes in the CASH_AGGREGATOR Report.>    -- =============================================        CREATE PROCEDURE [dbo].[VG_603T_LARGE_TRADES_CASH]         AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;            IF OBJECT_ID('tempdb..#temp_recent_dealer_al', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_al    select distinct oc.PM_ORD as ORD_NUM,     trd_trader     into #temp_recent_dealer_al     from VISTA_REPORTING.dbo.TRADES t     left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on oc.TRD_ORD = t.ORD_NUM     INNER JOIN (SELECT        OC.PM_ORD AS ORD_NUM,        MAX(EXECUTION_TIME) AS MAX_EXEC,        MAX(TOUCH_COUNT) AS MAX_TOUCH        FROM VISTA_REPORTING.dbo.TRADES T        LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS OC ON OC.TRD_ORD = T.ORD_NUM        GROUP BY OC.PM_ORD) T2 ON T2.ORD_NUM = OC.PM_ORD               AND T2.MAX_EXEC = t.EXECUTION_TIME              AND T2.MAX_TOUCH = t.TOUCH_COUNT            IF OBJECT_ID('tempdb..#temp_recent_dealer_cm', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_cm    SELECT DISTINCT    ct.ORDER_ID,           ct.DEALER_NAME    into #temp_recent_dealer_cm    FROM VISTA_REPORTING.dbo.CASH_TRADES ct    INNER JOIN (SELECT                   ORDER_ID,                  MAX(EXECUTED_DATETIME) AS MAX_EXEC,                  MAX(API_REQUESTED_DATE) AS MAX_API_REQ                  FROM VISTA_REPORTING.dbo.CASH_TRADES                  GROUP BY ORDER_ID) ct2 ON nullif(ct2.ORDER_ID, '0') = ct.ORDER_ID                                             AND ct2.MAX_EXEC = ct.EXECUTED_DATETIME                                            AND ct2.MAX_API_REQ = ct.API_REQUESTED_DATE                DECLARE @LEFTOVER INT    SET @LEFTOVER = (SELECT LIMIT_GBP FROM VISTA_STAGING.DBO.REF_CASH_LARGE_TRADE_THRESHOLD  WHERE PRODUCT = 'OTHER' AND GETDATE() BETWEEN CAST(DATE_FROM AS DATE) AND CAST(DATE_TO AS DATE))            IF OBJECT_ID('tempdb..#CM_LIMITS', 'U') IS NOT NULL DROP TABLE #CM_LIMITS    SELECT DISTINCT     CT.TRANSACTION_NUMBER,     CT.TRANSACTION_STATUS_DECODE,     CT.PRODUCT,     CT.DEALT_AMOUNT,     CT.DEALT_AMOUNT_GBP,     COALESCE(LT.LIMIT_GBP, @LEFTOVER) AS LIMIT_GBP,     CT.EXECUTED_DATETIME,     CT.PULL_DATE    INTO #CM_LIMITS    FROM VISTA_REPORTING.dbo.CASH_TRADES CT    LEFT JOIN VISTA_STAGING.DBO.REF_CASH_LARGE_TRADE_THRESHOLD LT ON LT.PRODUCT = CT.PRODUCT  AND CAST(CT.PULL_DATE AS DATE) BETWEEN CAST(LT.DATE_FROM AS DATE) AND CAST(LT.DATE_TO AS DATE)        IF OBJECT_ID('tempdb..#CM_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #CM_EXCEPTIONS    SELECT DISTINCT     CL.*,     CASE       WHEN CL.DEALT_AMOUNT_GBP > CL.LIMIT_GBP and ISNULL(CL.TRANSACTION_STATUS_DECODE, '') != 'CANCELLED' and CL.EXECUTED_DATETIME IS NOT NULL THEN 1      ELSE 0      END AS EXCEPTION_FLAG,     'CM' AS SOURCE    INTO #CM_EXCEPTIONS    FROM #CM_LIMITS CL            --ALADDIN    IF OBJECT_ID('tempdb..#AL_POP', 'U') IS NOT NULL DROP TABLE #AL_POP    SELECT DISTINCT     t.MULTI_FUND_ID,     t.TRD_ORIG_FACE,     t.TRD_CURRENCY,     t.SM_SEC_TYPE,     t.TRD_AUTH_TIME,     t.PULL_DATE    INTO #AL_POP    FROM VISTA_REPORTING.dbo.TRADES t    left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr    on pr.MULTI_FUND_ID = t.MULTI_FUND_ID    WHERE pr.DEALING_DESK = 'CASH' and t.[SM_SEC_TYPE] in ('CP','CD','TBILL')        IF OBJECT_ID('tempdb..#AL_LIMITS', 'U') IS NOT NULL DROP TABLE #AL_LIMITS    SELECT DISTINCT     AL.MULTI_FUND_ID,     AL.TRD_ORIG_FACE,     AL.SM_SEC_TYPE,     AL.TRD_CURRENCY,     e.GBP_INDEX_RATE,     CASE       WHEN e.GBP_INDEX_RATE IS NOT NULL       THEN AL.TRD_ORIG_FACE/e.GBP_INDEX_RATE      WHEN e.GBP_INDEX_RATE IS NULL AND AL.TRD_CURRENCY = 'GBP' THEN AL.TRD_ORIG_FACE -- HAD TO DO THIS AS TBILL DIDNT SEEM TO WORK ON THE JOIN      ELSE NULL      END AS DEALT_AMOUNT_GBP,     COALESCE(LT.LIMIT_GBP, @LEFTOVER) AS LIMIT_GBP    INTO #AL_LIMITS    FROM #AL_POP AL    OUTER APPLY (SELECT TOP 1 e.* FROM VISTA_REPORTING.dbo.FX_RATES e         WHERE e.CURRENCY = AL.TRD_CURRENCY and CONVERT(date, e.MARKDATE) <= CONVERT(date, AL.TRD_AUTH_TIME)        ORDER BY e.MARKDATE DESC) e    LEFT JOIN VISTA_STAGING.DBO.REF_CASH_LARGE_TRADE_THRESHOLD LT ON LT.PRODUCT = AL.SM_SEC_TYPE  AND CAST(AL.PULL_DATE AS DATE) BETWEEN CAST(LT.DATE_FROM AS DATE) AND CAST(LT.DATE_TO AS DATE)            IF OBJECT_ID('tempdb..#AL_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #AL_EXCEPTIONS    SELECT DISTINCT     AL.*,     CASE       WHEN AL.DEALT_AMOUNT_GBP > AL.LIMIT_GBP THEN 1      ELSE 0      END AS EXCEPTION_FLAG,     'AL' AS SOURCE    INTO #AL_EXCEPTIONS    FROM #AL_LIMITS AL            --COMBINED EXCEPTIONS    IF OBJECT_ID('tempdb..#COMBINED_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #COMBINED_EXCEPTIONS    SELECT DISTINCT     TRANSACTION_NUMBER,      PRODUCT,     EXCEPTION_FLAG,     CASE WHEN EXCEPTION_FLAG = 1 THEN GETDATE() ELSE NULL END AS EXCEPTION_CREATETIME,     SOURCE    INTO #COMBINED_EXCEPTIONS    FROM #CM_EXCEPTIONS    UNION    SELECT DISTINCT      MULTI_FUND_ID,     SM_SEC_TYPE,     EXCEPTION_FLAG,     CASE WHEN EXCEPTION_FLAG = 1 THEN GETDATE() ELSE NULL END AS EXCEPTION_CREATETIME,     SOURCE    FROM #AL_EXCEPTIONS        -- ==============================================================================    /* Update Exceptions Table */    -- ==============================================================================        IF OBJECT_ID('VISTA_STAGING.DBO.VG_603T_LARGE_TRADES_CASH_TABLE' , 'U') IS NULL     SELECT DISTINCT *      INTO VISTA_STAGING.DBO.VG_603T_LARGE_TRADES_CASH_TABLE     FROM #COMBINED_EXCEPTIONS    ELSE     IF OBJECT_ID('tempdb..#TEMP_LT_TABLE', 'U') IS NOT NULL DROP TABLE #TEMP_LT_TABLE     SELECT DISTINCT *      INTO #TEMP_LT_TABLE     FROM #COMBINED_EXCEPTIONS         MERGE VISTA_STAGING.DBO.VG_603T_LARGE_TRADES_CASH_TABLE AS T      USING #TEMP_LT_TABLE AS S     ON (ISNULL(T.TRANSACTION_NUMBER,0) = ISNULL(S.TRANSACTION_NUMBER,0) AND T.SOURCE = S.SOURCE)     WHEN MATCHED     THEN UPDATE     SET     TRANSACTION_NUMBER = CASE WHEN S.EXCEPTION_FLAG > T.EXCEPTION_FLAG THEN S.TRANSACTION_NUMBER ELSE T.TRANSACTION_NUMBER END,     PRODUCT = CASE WHEN S.EXCEPTION_FLAG > T.EXCEPTION_FLAG THEN S.PRODUCT ELSE T.PRODUCT END,     EXCEPTION_FLAG = CASE WHEN S.EXCEPTION_FLAG > T.EXCEPTION_FLAG THEN S.EXCEPTION_FLAG ELSE T.EXCEPTION_FLAG END,     EXCEPTION_CREATETIME = CASE WHEN S.EXCEPTION_FLAG > T.EXCEPTION_FLAG THEN S.EXCEPTION_CREATETIME ELSE T.EXCEPTION_CREATETIME END,     SOURCE = CASE WHEN S.EXCEPTION_FLAG > T.EXCEPTION_FLAG THEN S.SOURCE ELSE T.SOURCE END        WHEN NOT MATCHED     THEN INSERT     (TRANSACTION_NUMBER     ,PRODUCT      ,EXCEPTION_FLAG     ,EXCEPTION_CREATETIME     ,SOURCE      )     VALUES     (S.TRANSACTION_NUMBER     ,S.PRODUCT      ,S.EXCEPTION_FLAG     ,S.EXCEPTION_CREATETIME      ,S.SOURCE ) ;           IF OBJECT_ID('tempdb..#CM_LIMITS', 'U') IS NOT NULL DROP TABLE #CM_LIMITS     IF OBJECT_ID('tempdb..#CM_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #CM_EXCEPTIONS     IF OBJECT_ID('tempdb..#AL_LIMITS', 'U') IS NOT NULL DROP TABLE #AL_LIMITS     IF OBJECT_ID('tempdb..#AL_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #AL_EXCEPTIONS     IF OBJECT_ID('tempdb..#COMBINED_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #COMBINED_EXCEPTIONS     IF OBJECT_ID('tempdb..#temp_recent_dealer_al', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_al        IF OBJECT_ID('tempdb..#temp_recent_dealer_cm', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_cm        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_603T_LARGE_TRADES_FX  CreateDate: 2025-06-26 17:39:44.530  ModifyDate: 2025-06-26 17:39:44.530  --- DEFINITION START ---  -- =============================================    -- Author:  <Samad, Mehreen>    -- Create date: <15/08/2019>    -- Description: <This calculates the Large Trade    -- exceptions on a trade level. This does not     -- have a workflow, and is only used for MI    -- purposes in the FX_AGGREGATOR Report.>    -- =============================================        CREATE PROCEDURE [dbo].[VG_603T_LARGE_TRADES_FX]     -- Add the parameters for the stored procedure here        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;             IF OBJECT_ID('tempdb..#FX_POP', 'U') IS NOT NULL DROP TABLE #FX_POP    SELECT DISTINCT      TRADE_ID,     TRADE_STATUS,     INSTRUCTION_TYPE,     TRADE_AMOUNT_GBP,     TRADE_AMOUNT_GBP_FAR,     NR_LEG_PRODUCT,     FR_LEG_PRODUCT,     PULL_DATE    INTO #FX_POP    FROM VISTA_REPORTING.dbo.FX_TRADES         IF OBJECT_ID('tempdb..#MAX_TOUCH_TRADE', 'U') IS NOT NULL DROP TABLE #MAX_TOUCH_TRADE    SELECT DISTINCT      MULTI_FUND_ID,     MAX(TOUCH_COUNT) AS MAX_TCH     INTO #MAX_TOUCH_TRADE    FROM VISTA_REPORTING.dbo.TRADES    GROUP BY MULTI_FUND_ID        IF OBJECT_ID('tempdb..#AL_POP', 'U') IS NOT NULL DROP TABLE #AL_POP    SELECT DISTINCT      T.MULTI_FUND_ID,     T.TRD_STATUS,     T.SM_SEC_GROUP,     T.SM_SEC_TYPE,     T.TRD_ORIG_FACE,     T.TRD_CURRENCY,     T.TRD_AUTH_TIME,     e.GBP_INDEX_RATE,     T.PULL_DATE    INTO #AL_POP    FROM VISTA_REPORTING.DBO.TRADES T    INNER JOIN #MAX_TOUCH_TRADE MTT ON MTT.MAX_TCH = T.TOUCH_COUNT AND MTT.MULTI_FUND_ID = T.MULTI_FUND_ID    outer apply (SELECT TOP 1         e.*         FROM VISTA_REPORTING.dbo.FX_RATES e         WHERE e.CURRENCY = T.TRD_CURRENCY and CONVERT(date, e.MARKDATE) <= CONVERT(date, T.TRD_AUTH_TIME)        ORDER BY e.MARKDATE DESC) e     LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr    on pr.MULTI_FUND_ID = T.MULTI_FUND_ID    WHERE pr.DEALING_DESK = 'FX'            IF OBJECT_ID('tempdb..#FX_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #FX_EXCEPTIONS    SELECT DISTINCT     TRADE_ID,     INSTRUCTION_TYPE,     NR_LEG_PRODUCT,     FR_LEG_PRODUCT,     TRADE_AMOUNT_GBP,     TRADE_AMOUNT_GBP_FAR,     ABS(TRADE_AMOUNT_GBP- TRADE_AMOUNT_GBP_FAR) AS NET_EXPOSURE,     CASE       WHEN INSTRUCTION_TYPE = 'SPOT'  AND TRADE_AMOUNT_GBP >= REF.LIMIT_1 THEN 1        WHEN INSTRUCTION_TYPE = 'Forward' AND TRADE_AMOUNT_GBP >= REF.LIMIT_2 THEN 1        WHEN INSTRUCTION_TYPE = 'NDF'  AND TRADE_AMOUNT_GBP >= REF.LIMIT_3 THEN 1       WHEN INSTRUCTION_TYPE = 'NDS'  AND TRADE_AMOUNT_GBP_FAR >= REF.LIMIT_4 THEN 1        WHEN INSTRUCTION_TYPE = 'FX Swap' AND ABS(TRADE_AMOUNT_GBP - TRADE_AMOUNT_GBP_FAR) >= REF.LIMIT_5 THEN   1       WHEN INSTRUCTION_TYPE = 'FX Swap' AND TRADE_AMOUNT_GBP_FAR >= REF.LIMIT_6 THEN 1      ELSE 0 END AS VG_603    INTO #FX_EXCEPTIONS    FROM #FX_POP FP    LEFT JOIN VISTA_STAGING.dbo.REF_FX_LARGE_TRADE_THRESHOLDS REF ON CAST(FP.PULL_DATE AS DATE) BETWEEN CAST(REF.DATE_FROM AS DATE) AND CAST(REF.DATE_TO AS DATE)            IF OBJECT_ID('tempdb..#AL_EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #AL_EXCEPTIONS    SELECT DISTINCT      MULTI_FUND_ID,     CONCAT(SM_SEC_GROUP, '/', SM_SEC_TYPE) AS INSTRUCTION_TYPE,     CASE       WHEN ABS(1.0*TRD_ORIG_FACE/GBP_INDEX_RATE) >= REF.LIMIT_7 THEN 1      ELSE 0      END AS VG_603    INTO #AL_EXCEPTIONS    FROM #AL_POP AL    LEFT JOIN VISTA_STAGING.dbo.REF_FX_LARGE_TRADE_THRESHOLDS REF ON CAST(AL.PULL_DATE AS DATE) BETWEEN CAST(REF.DATE_FROM AS DATE) AND CAST(REF.DATE_TO AS DATE)            IF OBJECT_ID('tempdb..#EXCEPTIONS', 'U') IS NOT NULL DROP TABLE #EXCEPTIONS    SELECT DISTINCT      TRADE_ID as TRANSACTION_NUMBER,     VG_603 as EXCEPTION_FLAG,     CASE WHEN VG_603 = 1 THEN GETDATE() ELSE NULL END AS EXCEPTION_FLAG_CREATETIME,     'FX' AS SOURCE    INTO #EXCEPTIONS    FROM #FX_EXCEPTIONS    UNION    SELECT DISTINCT      MULTI_FUND_ID,     VG_603 as EXCEPTION_FLAG,     CASE WHEN VG_603 = 1 THEN GETDATE() ELSE NULL END AS EXCEPTION_FLAG_CREATETIME,     'AL' AS SOURCE    FROM #AL_EXCEPTIONS        IF OBJECT_ID('VISTA_STAGING.DBO.VG_603T_LARGE_TRADES_FX_TABLE' , 'U') IS NULL     SELECT DISTINCT *      INTO VISTA_STAGING.DBO.VG_603T_LARGE_TRADES_FX_TABLE     FROM #EXCEPTIONS    ELSE     IF OBJECT_ID('tempdb..#TEMP_LT_TABLE', 'U') IS NOT NULL DROP TABLE #TEMP_LT_TABLE     SELECT DISTINCT *      INTO #TEMP_LT_TABLE     FROM #EXCEPTIONS         MERGE VISTA_STAGING.DBO.VG_603T_LARGE_TRADES_FX_TABLE AS T      USING #TEMP_LT_TABLE AS S     ON (ISNULL(T.TRANSACTION_NUMBER,0) = ISNULL(S.TRANSACTION_NUMBER,0) AND T.SOURCE = S.SOURCE)     WHEN MATCHED     THEN UPDATE     SET     TRANSACTION_NUMBER = CASE WHEN S.EXCEPTION_FLAG > T.EXCEPTION_FLAG THEN S.TRANSACTION_NUMBER ELSE T.TRANSACTION_NUMBER END,     EXCEPTION_FLAG = CASE WHEN S.EXCEPTION_FLAG > T.EXCEPTION_FLAG THEN S.EXCEPTION_FLAG ELSE T.EXCEPTION_FLAG END,     EXCEPTION_FLAG_CREATETIME = CASE WHEN S.EXCEPTION_FLAG > T.EXCEPTION_FLAG THEN S.EXCEPTION_FLAG_CREATETIME ELSE T.EXCEPTION_FLAG_CREATETIME END,     SOURCE = CASE WHEN S.EXCEPTION_FLAG > T.EXCEPTION_FLAG THEN S.SOURCE ELSE T.SOURCE END        WHEN NOT MATCHED     THEN INSERT     (TRANSACTION_NUMBER     ,EXCEPTION_FLAG     ,EXCEPTION_FLAG_CREATETIME     ,SOURCE      )     VALUES     (S.TRANSACTION_NUMBER     ,S.EXCEPTION_FLAG     ,S.EXCEPTION_FLAG_CREATETIME      ,S.SOURCE ) ;                     END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_604_CLIENT_ORDER_HANDLING_CASH  CreateDate: 2025-06-26 17:39:13.647  ModifyDate: 2025-06-26 17:39:13.647  --- DEFINITION START ---      -- =============================================    -- Author:  <da Costa, David>    -- Create date: <2019-07-17>    -- Description: <Build exception for the Client ORder Handling table for CASH     -- for the front end to display.>    -- =============================================        -- ***************VERSION CONTROL***************    --2023-08-08, Matej Miter     --Added CTE deduplication code that resolves problem with merging duplicated rows into the ST table if we receive wrong data from the source    --SG56442 - Manually created number to follow changes            --2025-01-24, Matej Miter     --Added CTE deduplication code that resolves problem with merge statement for Audit table    --SG87372 - Manually created number to follow changes    -- *********************************************        CREATE PROCEDURE [dbo].[VG_604_CLIENT_ORDER_HANDLING_CASH]        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;                 IF OBJECT_ID('tempdb..#temp_recent_dealer_al', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_al    select distinct oc.PM_ORD as ORD_NUM,     trd_trader     into #temp_recent_dealer_al     from VISTA_REPORTING.dbo.TRADES t     left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on oc.TRD_ORD = t.ORD_NUM     INNER JOIN (SELECT        OC.PM_ORD AS ORD_NUM,        MAX(EXECUTION_TIME) AS MAX_EXEC,        MAX(TOUCH_COUNT) AS MAX_TOUCH        FROM VISTA_REPORTING.dbo.TRADES T        LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS OC ON OC.TRD_ORD = T.ORD_NUM        GROUP BY OC.PM_ORD) T2 ON T2.ORD_NUM = OC.PM_ORD               AND T2.MAX_EXEC = t.EXECUTION_TIME              AND T2.MAX_TOUCH = t.TOUCH_COUNT            IF OBJECT_ID('tempdb..#temp_recent_dealer_cm', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_cm    SELECT DISTINCT    ct.ORDER_ID,           ct.DEALER_NAME    into #temp_recent_dealer_cm    FROM VISTA_REPORTING.dbo.CASH_TRADES ct    INNER JOIN (SELECT                   ORDER_ID,                  MAX(EXECUTED_DATETIME) AS MAX_EXEC,                  MAX(API_REQUESTED_DATE) AS MAX_API_REQ                  FROM VISTA_REPORTING.dbo.CASH_TRADES                  GROUP BY ORDER_ID) ct2 ON nullif(ct2.ORDER_ID, '0') = ct.ORDER_ID                                             AND ct2.MAX_EXEC = ct.EXECUTED_DATETIME                                            AND ct2.MAX_API_REQ = ct.API_REQUESTED_DATE             IF OBJECT_ID('tempdb..#temp_max_req_orders', 'U') IS NOT NULL DROP TABLE #temp_max_req_orders     SELECT       ORDER_ID,      MAX(API_REQUESTED_DATE) AS MAX_API_REQ     INTO #temp_max_req_orders     FROM VISTA_REPORTING.dbo.CASH_ORDERS     GROUP BY ORDER_ID         IF OBJECT_ID('tempdb..#temp_max_touch_pm', 'U') IS NOT NULL DROP TABLE #temp_max_touch_pm     SELECT       ORD_NUM,      MAX(TOUCH_COUNT) AS MAX_TOUCH     INTO #temp_max_touch_pm     FROM VISTA_REPORTING.dbo.PM_ORDERS pm     GROUP BY ORD_NUM         IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades     SELECT       ORDER_ID,      MAX(API_REQUESTED_DATE) AS MAX_API_REQ     INTO #temp_max_req_trades     FROM VISTA_REPORTING.dbo.CASH_TRADES     GROUP BY ORDER_ID         IF OBJECT_ID('tempdb..#temp_max_touch_tr', 'U') IS NOT NULL DROP TABLE #temp_max_touch_tr     SELECT       ORD_NUM,      MAX(TOUCH_COUNT) AS MAX_TOUCH     INTO #temp_max_touch_tr     FROM VISTA_REPORTING.dbo.TRADES pm     GROUP BY ORD_NUM             -- Create table with both CM and Aladdin data     IF OBJECT_ID('tempdb..#temp_CM_AL_table', 'U') IS NOT NULL DROP TABLE #temp_CM_AL_table     SELECT DISTINCT      co.ORDER_ID,      co.INSTRUCTED_BY,      co.INSTRUCTED_CURRENCY,      co.ACCEPTED_DATETIME,      CONVERT(VARCHAR, co.INSTRUCTION_STATUS) AS INSTRUCTION_STATUS,      --ref.ROUNDING_GRANULARITY,      --DATEADD(MINUTE, DATEDIFF(MINUTE, 0, DATEADD(SECOND, 30, co.INSTRUCTION_RECEIVED_DATE)), 0) AS INSTRUCTION_RECEIVED_DATE,      co.INSTRUCTION_RECEIVED_DATE,      --INSTRUCTION_RECEIVED_DATE,      co.PRODUCT_TYPE,      co.BUSINESS_GROUP,      co.CLIENT_FUND_OR_POOL_CODE,      'CM' AS [DATA_SOURCE],      co.SEQUENCE_EXCEPTION_REASON     INTO #temp_CM_AL_table     FROM VISTA_REPORTING.dbo.CASH_ORDERS co     INNER JOIN #temp_max_req_orders tro ON tro.ORDER_ID=co.ORDER_ID AND tro.MAX_API_REQ=co.API_REQUESTED_DATE     WHERE INSTRUCTION_RECEIVED_DATE IS NOT NULL         UNION         SELECT DISTINCT      pm.ORD_NUM AS ORDER_ID,      pm.PM,      pm.CURRENCY,      NULL,      pm.STATUS,      --DATEADD(MINUTE, DATEDIFF(MINUTE, 0, DATEADD(SECOND, 30, pm.AUTH_TIME)), 0) AS AUTH_TIME,      pm.AUTH_TIME,      pr.INST_TYPE,      pgt.PORTFOLIO_GROUP_NAME,      NULL,      'AL' AS [DATA_SOURCE],      NULL     FROM VISTA_REPORTING.dbo.PM_ORDERS pm     INNER JOIN #temp_max_touch_pm mtp ON mtp.ORD_NUM=pm.ORD_NUM AND mtp.MAX_TOUCH=pm.TOUCH_COUNT     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD=pm.ORD_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM, INST_TYPE, DEALING_DESK FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr ON pr.ORD_NUM=oc.TRD_ORD     LEFT JOIN (SELECT DISTINCT ORD_NUM, FUND FROM VISTA_REPORTING.dbo.TRADES) t ON t.ORD_NUM=oc.TRD_ORD     LEFT JOIN VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY pgt ON pgt.FUND_ID=t.FUND     WHERE pm.DEALING_DESK = 'CASH' AND pm.AUTH_TIME IS NOT NULL             -- Combine trades data from CM and AL and calculate MAX() executed time     IF OBJECT_ID('tempdb..#temp_min_max_exec', 'U') IS NOT NULL DROP TABLE #temp_min_max_exec     SELECT DISTINCT      ct.ORDER_ID,      CONVERT(DATE, ct.VALUE_DATE) AS VALUE_DATE,      --CASE      -- WHEN ct.PRODUCT_TYPE = 'Repo / Rev Repo Products' THEN MIN(DATEADD(MINUTE, DATEDIFF(MINUTE, 0, DATEADD(SECOND, 30, ct.EXECUTED_DATETIME)), 0))      -- ELSE MIN(DATEADD(MINUTE, DATEDIFF(MINUTE, 0, DATEADD(SECOND, 30, CONFIRMED_DATETIME)), 0))       --END AS MIN_EXEC,      CASE       WHEN ct.PRODUCT_TYPE = 'Repo / Rev Repo Products' THEN MIN(ct.EXECUTED_DATETIME)       ELSE MIN(ct.CONFIRMED_DATETIME)      END AS MIN_EXEC,      --CASE      -- WHEN ct.PRODUCT_TYPE = 'Repo / Rev Repo Products' THEN MAX(DATEADD(MINUTE, DATEDIFF(MINUTE, 0, DATEADD(SECOND, 30, ct.EXECUTED_DATETIME)), 0))      -- ELSE MAX(DATEADD(MINUTE, DATEDIFF(MINUTE, 0, DATEADD(SECOND, 30, ct.CONFIRMED_DATETIME)), 0))       --END AS MAX_EXEC,      CASE       WHEN ct.PRODUCT_TYPE = 'Repo / Rev Repo Products' THEN MAX(ct.EXECUTED_DATETIME)       ELSE MAX(ct.CONFIRMED_DATETIME)      END AS MAX_EXEC,      --MIN(DATEADD(MINUTE, DATEDIFF(MINUTE, 0, DATEADD(SECOND, 30, CONFIRMED_DATETIME)), 0)) AS MIN_EXEC,      --MAX(DATEADD(MINUTE, DATEDIFF(MINUTE, 0, DATEADD(SECOND, 30, CONFIRMED_DATETIME)), 0)) AS MAX_EXEC,      CASE       WHEN PRODUCT_TYPE = 'Repo / Rev Repo Products' THEN DATEDIFF(SECOND, MIN(ct.EXECUTED_DATETIME), MAX(ct.EXECUTED_DATETIME))       ELSE DATEDIFF(SECOND, MIN(ct.CONFIRMED_DATETIME), MAX(ct.CONFIRMED_DATETIME))       END AS MIN_MAX_DIFF_SECS     INTO #temp_min_max_exec     FROM VISTA_REPORTING.dbo.CASH_TRADES ct     INNER JOIN #temp_max_req_trades mrt ON mrt.ORDER_ID=ct.ORDER_ID AND mrt.MAX_API_REQ=ct.API_REQUESTED_DATE     WHERE CONFIRMED_DATETIME IS NOT NULL     GROUP BY ct.ORDER_ID, CONVERT(DATE, ct.VALUE_DATE), ct.PRODUCT_TYPE         UNION         SELECT DISTINCT      oc.PM_ORD,      CONVERT(DATE, t.TRD_TRADE_DATE),      --MIN(DATEADD(MINUTE, DATEDIFF(MINUTE, 0, DATEADD(SECOND, 30, t.EXECUTION_TIME)), 0)),      --MAX(DATEADD(MINUTE, DATEDIFF(MINUTE, 0, DATEADD(SECOND, 30, t.EXECUTION_TIME)), 0)),      MIN(t.EXECUTION_TIME),      MAX(t.EXECUTION_TIME),      DATEDIFF(SECOND, MIN(t.EXECUTION_TIME), MAX(EXECUTION_TIME))     FROM  VISTA_REPORTING.dbo.TRADES t     INNER JOIN #temp_max_touch_tr mtt ON mtt.ORD_NUM=t.ORD_NUM AND mtt.MAX_TOUCH=t.TOUCH_COUNT     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD=t.ORD_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM, INST_TYPE, DEALING_DESK FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr ON pr.ORD_NUM=t.ORD_NUM     WHERE pr.INST_TYPE in ('TBILL', 'CD', 'CP') and pr.DEALING_DESK = 'CASH' AND EXECUTION_TIME IS NOT NULL     GROUP BY oc.PM_ORD, CONVERT(DATE, t.TRD_TRADE_DATE)             IF OBJECT_ID('tempdb..#temp_combined', 'U') IS NOT NULL DROP TABLE #temp_combined     SELECT DISTINCT      trec.ORDER_ID,       trec.INSTRUCTED_BY,       trec.BUSINESS_GROUP,       trec.PRODUCT_TYPE,       trec.[DATA_SOURCE],      trec.INSTRUCTION_RECEIVED_DATE,      trec.ACCEPTED_DATETIME,      trec.INSTRUCTION_STATUS,      tconf.MAX_EXEC,       tconf.MIN_EXEC,      tconf.VALUE_DATE,      trec.INSTRUCTED_CURRENCY,      trec.SEQUENCE_EXCEPTION_REASON,      CASE       WHEN cl.FIRM_FUND IS NULL THEN 1       ELSE 0      END AS CLIENT_FLAG     INTO #temp_combined     FROM #temp_CM_AL_table trec     LEFT JOIN #temp_min_max_exec tconf ON tconf.ORDER_ID=trec.ORDER_ID     LEFT JOIN VISTA_STAGING.dbo.REF_COH_FIRM_FUND_LIST cl ON cl.FIRM_FUND=trec.CLIENT_FUND_OR_POOL_CODE                     AND trec.INSTRUCTION_RECEIVED_DATE BETWEEN cl.DATE_FROM AND cl.DATE_TO         IF OBJECT_ID('tempdb..#temp_init_coh', 'U') IS NOT NULL DROP TABLE #temp_init_coh     SELECT DISTINCT      w1.ORDER_ID,       w1.INSTRUCTED_BY,      w1.BUSINESS_GROUP,      w1.PRODUCT_TYPE,      w1.INSTRUCTION_RECEIVED_DATE,      w1.MIN_EXEC AS FIRST_EXECUTION,      w1.MAX_EXEC AS CONFIRMED_DATETIME,      w1.VALUE_DATE AS VALUE_DATE_IMPACT,      w1.ACCEPTED_DATETIME,      COALESCE(w2.VALUE_DATE, w3.VALUE_DATE, w4.VALUE_DATE) AS VALUE_DATE_TRIGGER,      w1.INSTRUCTED_CURRENCY AS CCY_IMPACT,      COALESCE(w2.INSTRUCTED_CURRENCY, w3.INSTRUCTED_CURRENCY, w4.INSTRUCTED_CURRENCY) AS CCY_TRIGGER,      w1.CLIENT_FLAG,      cpt.SECONDS_THRESHOLD,      CASE        WHEN COALESCE(w2.ORDER_ID, w3.ORDER_ID, w4.ORDER_ID) IS NULL THEN NULL        ELSE w1.ORDER_ID       END AS IMPACTED_ORDER,      COALESCE(w2.ORDER_ID, w3.ORDER_ID, w4.ORDER_ID) AS EXCEPTION_TRIGGER,       CASE        WHEN COALESCE(w2.ORDER_ID, w3.ORDER_ID, w4.ORDER_ID) IS NULL THEN 0       WHEN CONVERT(VARCHAR, w1.INSTRUCTION_STATUS) != '55' AND w1.[DATA_SOURCE] = 'CM' THEN 0       WHEN CONVERT(VARCHAR, w2.INSTRUCTION_STATUS) != '55' AND w2.[DATA_SOURCE] = 'CM' THEN 0       WHEN CONVERT(VARCHAR, w3.INSTRUCTION_STATUS) != '55' AND w3.[DATA_SOURCE] = 'CM' THEN 0       WHEN CONVERT(VARCHAR, w4.INSTRUCTION_STATUS) != '55' AND w4.[DATA_SOURCE] = 'CM' THEN 0       WHEN CONVERT(VARCHAR, w1.INSTRUCTION_STATUS) = 'C' AND w1.[DATA_SOURCE] = 'AL' THEN 0 -- As there is no 'Accepted Dealt' status in Aladdin we are excluding all cancelled trades       WHEN CONVERT(VARCHAR, w2.INSTRUCTION_STATUS) = 'C' AND w2.[DATA_SOURCE] = 'AL' THEN 0       WHEN CONVERT(VARCHAR, w3.INSTRUCTION_STATUS) = 'C' AND w3.[DATA_SOURCE] = 'AL' THEN 0       WHEN CONVERT(VARCHAR, w4.INSTRUCTION_STATUS) = 'C' AND w4.[DATA_SOURCE] = 'AL' THEN 0       ELSE 1       END AS INIT_VG_FLAG,      DATEDIFF(SECOND, w1.INSTRUCTION_RECEIVED_DATE, COALESCE(w2.INSTRUCTION_RECEIVED_DATE, w3.INSTRUCTION_RECEIVED_DATE, w4.INSTRUCTION_RECEIVED_DATE)) AS REC_DIFF,      w1.[DATA_SOURCE],      w1.SEQUENCE_EXCEPTION_REASON     INTO #temp_init_coh     FROM #temp_combined w1     LEFT JOIN VISTA_STAGING.dbo.REF_CASH_COH_CLIENT_PRIORITY_THRESHOLD cpt ON cpt.PRODUCT_TYPE = w1.PRODUCT_TYPE AND w1.INSTRUCTION_RECEIVED_DATE BETWEEN cpt.DATE_FROM AND cpt.DATE_TO     LEFT JOIN #temp_combined w2 ON w2.ORDER_ID!=w1.ORDER_ID               AND w2.INSTRUCTION_RECEIVED_DATE > w1.INSTRUCTION_RECEIVED_DATE                AND w2.MAX_EXEC < w1.MAX_EXEC               --AND w2.INSTRUCTED_BY = w1.INSTRUCTED_BY               AND w2.PRODUCT_TYPE = w1.PRODUCT_TYPE               AND CONVERT(DATE, w2.MAX_EXEC) = CONVERT(DATE, w1.MAX_EXEC)     LEFT JOIN #temp_combined w3 ON w3.ORDER_ID!=w1.ORDER_ID               AND w3.INSTRUCTION_RECEIVED_DATE > w1.INSTRUCTION_RECEIVED_DATE                AND DATEDIFF(SECOND, w1.INSTRUCTION_RECEIVED_DATE, w3.INSTRUCTION_RECEIVED_DATE) <= cpt.SECONDS_THRESHOLD               AND w3.MIN_EXEC < w1.MAX_EXEC                AND w3.MAX_EXEC > w1.MAX_EXEC               AND w3.PRODUCT_TYPE = w1.PRODUCT_TYPE               AND w1.CLIENT_FLAG !=  w3.CLIENT_FLAG               AND w3.CLIENT_FLAG = 1               AND CONVERT(DATE, w3.MAX_EXEC) = CONVERT(DATE, w1.MAX_EXEC)     LEFT JOIN #temp_combined w4 ON w4.ORDER_ID!=w1.ORDER_ID               AND w4.INSTRUCTION_RECEIVED_DATE > w1.INSTRUCTION_RECEIVED_DATE                AND w4.MIN_EXEC < w1.MAX_EXEC               --AND w2.INSTRUCTED_BY = w1.INSTRUCTED_BY               AND w4.PRODUCT_TYPE = w1.PRODUCT_TYPE               AND CONVERT(DATE, w4.MAX_EXEC) = CONVERT(DATE, w1.MAX_EXEC)             IF OBJECT_ID('tempdb..#temp_vg_table', 'U') IS NOT NULL DROP TABLE #temp_vg_table     SELECT DISTINCT      tc1.EXCEPTION_TRIGGER,      STUFF((         SELECT DISTINCT ' | ' +  CAST(tc3.IMPACTED_ORDER AS VARCHAR(50))        FROM #temp_init_coh tc3        WHERE tc3.INIT_VG_FLAG =1        AND tc3.EXCEPTION_TRIGGER=tc1.EXCEPTION_TRIGGER        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, '') AS IMPACTED,      tc1.SEQUENCE_EXCEPTION_REASON,      tc1.INSTRUCTED_BY,      tc1.PRODUCT_TYPE,      tc1.INSTRUCTION_RECEIVED_DATE,      tc2.INSTRUCTION_RECEIVED_DATE AS INSTRUCTION_RECEIVED_DATE_TRIGGER,      tc1.CONFIRMED_DATETIME,      tc2.CONFIRMED_DATETIME AS CONFIRMED_DATETIME_TRIGGER,      tc1.INIT_VG_FLAG,      tc1.VALUE_DATE_TRIGGER,      tc1.VALUE_DATE_IMPACT,      tc1.CCY_TRIGGER,      tc1.CCY_IMPACT,      tc1.CLIENT_FLAG,      tc2.CLIENT_FLAG AS CLIENT_FLAG_TRIGGER,      tc1.REC_DIFF,      cpt.SECONDS_THRESHOLD,      CASE        WHEN tc1.INIT_VG_FLAG = 1          AND tc1.CLIENT_FLAG = 0          AND tc2.CLIENT_FLAG = 0          AND tc1.INSTRUCTION_RECEIVED_DATE != tc2.INSTRUCTION_RECEIVED_DATE          AND tc1.CONFIRMED_DATETIME != tc2.CONFIRMED_DATETIME THEN 1       WHEN tc1.INIT_VG_FLAG = 1          AND tc2.CLIENT_FLAG = 1          AND tc1.CLIENT_FLAG = 1         AND tc1.INSTRUCTION_RECEIVED_DATE != tc2.INSTRUCTION_RECEIVED_DATE          AND tc1.CONFIRMED_DATETIME != tc2.CONFIRMED_DATETIME THEN 1       WHEN tc1.INIT_VG_FLAG = 1          AND tc2.CLIENT_FLAG = 1          AND tc1.CLIENT_FLAG = 0         AND tc1.INSTRUCTION_RECEIVED_DATE < tc2.INSTRUCTION_RECEIVED_DATE          AND tc1.CONFIRMED_DATETIME < tc2.CONFIRMED_DATETIME         AND tc1.VALUE_DATE_TRIGGER=tc1.VALUE_DATE_IMPACT         AND tc1.ACCEPTED_DATETIME > tc2.INSTRUCTION_RECEIVED_DATE         AND tc1.CCY_TRIGGER=tc1.CCY_IMPACT          AND tc1.REC_DIFF < cpt.SECONDS_THRESHOLD THEN 1       WHEN tc1.INIT_VG_FLAG = 1          AND tc2.CLIENT_FLAG = 1          AND (tc1.INSTRUCTION_RECEIVED_DATE != tc2.INSTRUCTION_RECEIVED_DATE          OR tc1.CONFIRMED_DATETIME != tc2.CONFIRMED_DATETIME)         AND tc1.VALUE_DATE_TRIGGER=tc1.VALUE_DATE_IMPACT          AND tc1.CCY_TRIGGER=tc1.CCY_IMPACT          AND tc1.REC_DIFF > cpt.SECONDS_THRESHOLD THEN 1       WHEN tc1.INIT_VG_FLAG = 1          AND tc1.CLIENT_FLAG = tc2.CLIENT_FLAG         AND tc1.FIRST_EXECUTION != tc2.CONFIRMED_DATETIME         AND tc1.FIRST_EXECUTION > tc2.CONFIRMED_DATETIME THEN 1       ELSE 0      END AS VG_604     INTO #temp_vg_table     FROM #temp_init_coh tc1     LEFT JOIN VISTA_STAGING.dbo.REF_CASH_COH_CLIENT_PRIORITY_THRESHOLD cpt ON cpt.PRODUCT_TYPE = tc1.PRODUCT_TYPE AND tc1.INSTRUCTION_RECEIVED_DATE BETWEEN cpt.DATE_FROM AND cpt.DATE_TO     LEFT JOIN #temp_init_coh tc2 ON tc2.ORDER_ID=tc1.EXCEPTION_TRIGGER     WHERE tc1.EXCEPTION_TRIGGER IS NOT NULL             IF OBJECT_ID('tempdb..#temp_coh_table', 'U') IS NOT NULL DROP TABLE #temp_coh_table     SELECT DISTINCT      tc.ORDER_ID,      tc.[DATA_SOURCE],      tc.INSTRUCTED_BY,      tc.PRODUCT_TYPE,      tc.SEQUENCE_EXCEPTION_REASON,      tc.INSTRUCTION_RECEIVED_DATE,      tc.CONFIRMED_DATETIME,      CASE WHEN tv.VG_604 IS NOT NULL THEN tv.IMPACTED ELSE NULL END AS IMPACTED,      CASE WHEN tv.VG_604 IS NOT NULL THEN tv.VG_604 ELSE 0 END AS VG_604,      CASE WHEN tv.VG_604 IS NOT NULL THEN GETDATE() ELSE NULL END AS VG_604_CREATETIME     INTO #temp_coh_table     FROM #temp_init_coh tc     LEFT JOIN #temp_vg_table tv ON tv.EXCEPTION_TRIGGER=tc.ORDER_ID AND tv.VG_604=1         -- Use #execution_exception_type to populate FINAL_STATUS_UPDATE_TABLE     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     SELECT DISTINCT      CONCAT(ORDER_ID,'_604_', [DATA_SOURCE]) AS ID,      '1A2' AS STATUS,       NULL AS FINAL_UPDATED_TIME     INTO #temp_status_table     FROM #temp_coh_table     WHERE VG_604 = 1         MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'CASH',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'CASH');             --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      NULL AS TRANSACTION_NUMBER,      NULL AS TRD_ORD,      ex.ORDER_ID AS ORDER_ID,      'Client Order Handling' AS Exception_Type,      CONCAT(ex.ORDER_ID,'_604_', ex.[DATA_SOURCE]) AS ID,      ex.SEQUENCE_EXCEPTION_REASON AS REASON,      NULL AS COMMENT,      'With Reviewer' AS Status,      NULL AS ClientExecID,      'CASH' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,         COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME], DD.DEFAULT_DEALER) AS DEALER,      '1A2' AS STATUS_ID,      ex.INSTRUCTION_RECEIVED_DATE AS ORD_AUTH,      ex.CONFIRMED_DATETIME AS TRADE_EXEC     INTO #temp_audit     FROM #temp_coh_table ex     left join (SELECT DISTINCT ORDER_ID, PULL_DATE, ACCEPTED_BY, INSTRUCTED_BY FROM VISTA_REPORTING.dbo.CASH_ORDERS) co     on ex.[ORDER_ID] = co.[ORDER_ID] and ex.[DATA_SOURCE] = 'CM'     left join (SELECT DISTINCT ORD_NUM, PULL_DATE, trader FROM VISTA_REPORTING.dbo.PM_ORDERS) pm     on ex.[ORDER_ID] = pm.[ORD_NUM] and ex.[DATA_SOURCE] = 'AL'     LEFT JOIN #temp_recent_dealer_al RAL ON RAL.ORD_NUM  = ex.ORDER_ID AND ex.data_SOURCE = 'AL'      LEFT JOIN #temp_recent_dealer_cm RCM ON RCM.ORDER_ID = ex.ORDER_ID AND ex.data_SOURCE = 'CM'      LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD ON ((TDD.MG_USER_ID  = RCM.DEALER_NAME AND ex.data_SOURCE = 'CM') OR (TDD.INITIALS = RAL.TRD_TRADER AND ex.data_SOURCE = 'AL'))  AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE) AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE)      LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD2 ON ((TDD2.MG_USER_ID  = COALESCE(CO.ACCEPTED_BY, CO.INSTRUCTED_BY) AND ex.data_SOURCE = 'CM') OR (TDD2.INITIALS = PM.TRADER AND ex.DATA_SOURCE = 'AL')) AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE)   AS DATE) BETWEEN CAST(TDD2.DATE_FROM AS DATE) AND CAST(TDD2.DATE_TO AS DATE)      LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON ((DD.REPORT_NAME = 'Timely Execution MM' and (PRODUCT_TYPE = 'Cash Products' or ex.DATA_SOURCE = 'al')) or (DD.REPORT_NAME = 'Timely Execution RR' and (PRODUCT_TYPE = 'Repo / Rev Repo Products'))  )  AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE) AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)    WHERE VG_604 = 1;            --SG87372    with deduplication as    (    select *,ROW_NUMBER() over (partition by ID,order_id  order by ID,order_id,CREATE_TIME) as RN    from #temp_audit    )    delete from deduplication where RN <> 1    --End of --SG87372             MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_CASH AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);              MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET       T.ID=T.ID,       T.STATUS=T.STATUS,       T.DEALING_DESK = 'CASH',       T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'CASH');             IF OBJECT_ID('VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE', 'U') IS NULL      SELECT        ORDER_ID,       [DATA_SOURCE],       CASE        WHEN VG_604 = 1 THEN IMPACTED        ELSE NULL       END AS IMPACTED,       VG_604,       VG_604_CREATETIME      INTO VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE       FROM #temp_coh_table      WHERE PRODUCT_TYPE = 'Cash Products' OR [DATA_SOURCE] = 'AL'          ELSE          IF OBJECT_ID('tempdb..#temp_coh_table_mm', 'U') IS NOT NULL DROP TABLE #temp_coh_table_mm      SELECT        ORDER_ID,       [DATA_SOURCE],       CASE        WHEN VG_604 = 1 THEN IMPACTED        ELSE NULL       END AS IMPACTED,       VG_604,       VG_604_CREATETIME      INTO #temp_coh_table_mm      FROM #temp_coh_table      WHERE PRODUCT_TYPE = 'Cash Products' OR [DATA_SOURCE] = 'AL';              --SG56442------------------------------------------------          with deduplication as      (      select *,ROW_NUMBER() over (partition by order_id order by Order_id,VG_604_CREATETIME) as RN      from #temp_coh_table_mm      )      delete from deduplication where RN <> 1              --End of SG56442-------------------------------         IF OBJECT_ID('VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE', 'U') IS NULL      SELECT        ORDER_ID,       [DATA_SOURCE],       CASE        WHEN VG_604 = 1 THEN IMPACTED        ELSE NULL       END AS IMPACTED,       VG_604,       VG_604_CREATETIME      INTO VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE       FROM #temp_coh_table      WHERE PRODUCT_TYPE = 'Repo / Rev Repo Products'          ELSE          IF OBJECT_ID('tempdb..#temp_coh_table_rr', 'U') IS NOT NULL DROP TABLE #temp_coh_table_rr      SELECT        ORDER_ID,       [DATA_SOURCE],       CASE        WHEN VG_604 = 1 THEN IMPACTED        ELSE NULL       END AS IMPACTED,       VG_604,       VG_604_CREATETIME      INTO #temp_coh_table_rr      FROM #temp_coh_table      WHERE PRODUCT_TYPE = 'Repo / Rev Repo Products'             MERGE VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_MM_TABLE AS T      USING #temp_coh_table_mm AS S     ON (T.ORDER_ID = S.ORDER_ID AND T.[DATA_SOURCE] = S.[DATA_SOURCE])     WHEN MATCHED      THEN UPDATE      SET       ORDER_ID = CASE WHEN S.VG_604 > T.VG_604 THEN S.ORDER_ID ELSE T.ORDER_ID END,      VG_604 = CASE WHEN S.VG_604 > T.VG_604 THEN S.VG_604 ELSE T.VG_604 END,      VG_604_CREATETIME = CASE WHEN S.VG_604 > T.VG_604 THEN S.VG_604_CREATETIME ELSE T.VG_604_CREATETIME END,      IMPACTED = CASE WHEN S.VG_604 > T.VG_604 THEN S.IMPACTED ELSE T.IMPACTED END,      [DATA_SOURCE] = CASE WHEN S.VG_604 > T.VG_604 THEN S.[DATA_SOURCE] ELSE T.[DATA_SOURCE] END         WHEN NOT MATCHED      THEN      INSERT      (ORDER_ID,      IMPACTED,      VG_604,      VG_604_CREATETIME,      [DATA_SOURCE])          VALUES       (S.ORDER_ID,      S.IMPACTED,      S.VG_604,      S.VG_604_CREATETIME,      S.[DATA_SOURCE]);             MERGE VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_CASH_RR_TABLE AS T      USING #temp_coh_table_rr AS S     ON (T.ORDER_ID = S.ORDER_ID AND T.[DATA_SOURCE] = S.[DATA_SOURCE])     WHEN MATCHED      THEN UPDATE      SET       ORDER_ID = CASE WHEN S.VG_604 > T.VG_604 THEN S.ORDER_ID ELSE T.ORDER_ID END,      VG_604 = CASE WHEN S.VG_604 > T.VG_604 THEN S.VG_604 ELSE T.VG_604 END,      VG_604_CREATETIME = CASE WHEN S.VG_604 > T.VG_604 THEN S.VG_604_CREATETIME ELSE T.VG_604_CREATETIME END,      IMPACTED = CASE WHEN S.VG_604 > T.VG_604 THEN S.IMPACTED ELSE T.IMPACTED END,      [DATA_SOURCE] = CASE WHEN S.VG_604 > T.VG_604 THEN S.[DATA_SOURCE] ELSE T.[DATA_SOURCE] END         WHEN NOT MATCHED      THEN      INSERT      (ORDER_ID,      IMPACTED,      VG_604,      VG_604_CREATETIME,      [DATA_SOURCE])          VALUES      (S.ORDER_ID,      S.IMPACTED,      S.VG_604,      S.VG_604_CREATETIME,      S.[DATA_SOURCE]) ;              IF OBJECT_ID('tempdb..#temp_max_req_orders', 'U') IS NOT NULL DROP TABLE #temp_max_req_orders     IF OBJECT_ID('tempdb..#temp_max_touch_pm', 'U') IS NOT NULL DROP TABLE #temp_max_touch_pm     IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades     IF OBJECT_ID('tempdb..#temp_max_touch_tr', 'U') IS NOT NULL DROP TABLE #temp_max_touch_tr     IF OBJECT_ID('tempdb..#temp_CM_AL_table', 'U') IS NOT NULL DROP TABLE #temp_CM_AL_table     IF OBJECT_ID('tempdb..#temp_min_max_exec', 'U') IS NOT NULL DROP TABLE #temp_min_max_exec     IF OBJECT_ID('tempdb..#temp_combined', 'U') IS NOT NULL DROP TABLE #temp_combined     IF OBJECT_ID('tempdb..#temp_init_coh', 'U') IS NOT NULL DROP TABLE #temp_init_coh     IF OBJECT_ID('tempdb..#temp_vg_table', 'U') IS NOT NULL DROP TABLE #temp_vg_table     IF OBJECT_ID('tempdb..#temp_coh_table', 'U') IS NOT NULL DROP TABLE #temp_coh_table     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     IF OBJECT_ID('tempdb..#temp_coh_table_mm', 'U') IS NOT NULL DROP TABLE #temp_coh_table_mm     IF OBJECT_ID('tempdb..#temp_coh_table_rr', 'U') IS NOT NULL DROP TABLE #temp_coh_table_rr     IF OBJECT_ID('tempdb..#temp_recent_dealer_al', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_al     IF OBJECT_ID('tempdb..#temp_recent_dealer_cm', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_cm            END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_604_CLIENT_ORDER_HANDLING_FX  CreateDate: 2025-06-26 17:37:35.993  ModifyDate: 2025-06-26 17:37:35.993  --- DEFINITION START ---      -- =============================================    -- Author:  <da Costa, David>    -- Create date: <2019-07-17>    -- Description: <Build exception for the Client ORder Handling table for FX    -- for the front end to display.>    -- =============================================        -- ***************VERSION CONTROL***************    --2022-08-08; Matej Miter: Created Logic for Jira:    --SURVG-726 - Added logic to take into consideration not to report Cancelled orders even when they come with Freeze Marker as 1 from the source    -- *********************************************        CREATE PROCEDURE [dbo].[VG_604_CLIENT_ORDER_HANDLING_FX]        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;                  IF OBJECT_ID('tempdb..#temp_recent_dealer_al', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_al     select distinct oc.PM_ORD as ORD_NUM,      trd_trader      into #temp_recent_dealer_al      from VISTA_REPORTING.dbo.TRADES t      left join VISTA_REPORTING.dbo.ORDERS_CROSS oc on oc.TRD_ORD = t.ORD_NUM      INNER JOIN (SELECT         OC.PM_ORD AS ORD_NUM,         MAX(EXECUTION_TIME) AS MAX_EXEC,         MAX(TOUCH_COUNT) AS MAX_TOUCH         FROM VISTA_REPORTING.dbo.TRADES T         LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS OC ON OC.TRD_ORD = T.ORD_NUM         GROUP BY OC.PM_ORD) T2 ON T2.ORD_NUM = OC.PM_ORD                AND T2.MAX_EXEC = t.EXECUTION_TIME               AND T2.MAX_TOUCH = t.TOUCH_COUNT             IF OBJECT_ID('tempdb..#temp_recent_dealer_cm', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_cm     SELECT DISTINCT      ct.ORDER_ID,      ct.DEALT_BY     into #temp_recent_dealer_cm     FROM VISTA_REPORTING.dbo.FX_TRADES ct     INNER JOIN (SELECT           ORDER_ID,          MAX(EXECUTED_DATE_TIME) AS MAX_EXEC,          MAX(API_REQUESTED_DATE) AS MAX_API_REQ          FROM VISTA_REPORTING.dbo.FX_TRADES          GROUP BY ORDER_ID) ct2 ON nullif(ct2.ORDER_ID, '0') = ct.ORDER_ID                AND ct2.MAX_EXEC = ct.EXECUTED_DATE_TIME               AND ct2.MAX_API_REQ = ct.API_REQUESTED_DATE             IF OBJECT_ID('tempdb..#temp_max_req_orders', 'U') IS NOT NULL DROP TABLE #temp_max_req_orders     SELECT       FXM_ORDER_ID,      MAX(API_REQUESTED_DATE) AS MAX_API_REQ     INTO #temp_max_req_orders     FROM VISTA_REPORTING.dbo.FX_ORDERS     GROUP BY FXM_ORDER_ID         IF OBJECT_ID('tempdb..#temp_max_touch_pm', 'U') IS NOT NULL DROP TABLE #temp_max_touch_pm     SELECT       ORD_NUM,      MAX(TOUCH_COUNT) AS MAX_TOUCH     INTO #temp_max_touch_pm     FROM VISTA_REPORTING.dbo.PM_ORDERS pm     WHERE pm.DEALING_DESK = 'FX'     GROUP BY ORD_NUM         IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades     SELECT       ORDER_ID,      MAX(API_REQUESTED_DATE) AS MAX_API_REQ     INTO #temp_max_req_trades     FROM VISTA_REPORTING.dbo.FX_TRADES     GROUP BY ORDER_ID         IF OBJECT_ID('tempdb..#temp_max_touch_tr', 'U') IS NOT NULL DROP TABLE #temp_max_touch_tr     SELECT       t.ORD_NUM,      MAX(t.TOUCH_COUNT) AS MAX_TOUCH     INTO #temp_max_touch_tr     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN (SELECT DISTINCT ORD_NUM, INST_TYPE, DEALING_DESK, SM_SEC_GROUP FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr ON pr.ORD_NUM=t.ORD_NUM     WHERE pr.SM_SEC_GROUP = 'OPTION' and pr.DEALING_DESK = 'FX' AND EXECUTION_TIME IS NOT NULL     GROUP BY t.ORD_NUM             -- Create table with both CM and Aladdin data     IF OBJECT_ID('tempdb..#temp_CM_AL_table', 'U') IS NOT NULL DROP TABLE #temp_CM_AL_table     SELECT DISTINCT      fxo.FXM_ORDER_ID AS ORDER_ID,      fxo.INSTRUCTED_BY,      fxo.BUY_CCY,      fxo.SELL_CCY,      fxo.INSTRUCTION_RECEIVED_DATE_TIME AS INSTRUCTION_RECEIVED_DATE,      fxo.INSTRUCTION_TYPE,      fxo.BUSINESS_GROUP,      fxo.CLIENT_FUND,      'FX' AS [DATA_SOURCE],      fxo.SEQUENCE_EXCEPTION_REASON,      CONVERT(VARCHAR, fxo.INSTRUCTION_STATUS) AS INSTRUCTION_STATUS,      fxo.FREEZE_MARKER,      fxo.FREEZE_BY,      ISNULL(fxo.FREEZE_DATE_TIME, '1900-01-01') AS FREEZE_DATE_TIME,       ISNULL(fxo.RELEASE_DATE_TIME, '1900-01-01') AS RELEASE_DATE_TIME,      CONVERT(varchar(5),DATEDIFF(s, fxo.FREEZE_DATE_TIME, fxo.RELEASE_DATE_TIME)/3600)+':'        +CONVERT(varchar(5),DATEDIFF(s, fxo.FREEZE_DATE_TIME, fxo.RELEASE_DATE_TIME)%3600/60)+':'        +CONVERT(varchar(5),(DATEDIFF(s, fxo.FREEZE_DATE_TIME, fxo.RELEASE_DATE_TIME)%60)) AS FREEZE_RELEASE_TIMESPAN     INTO #temp_CM_AL_table     FROM VISTA_REPORTING.dbo.FX_ORDERS fxo     INNER JOIN #temp_max_req_orders tro ON tro.FXM_ORDER_ID=fxo.FXM_ORDER_ID AND tro.MAX_API_REQ=fxo.API_REQUESTED_DATE     WHERE fxo.INSTRUCTION_RECEIVED_DATE_TIME IS NOT NULL         UNION         SELECT DISTINCT      pm.ORD_NUM AS ORDER_ID,      pm.PM,      CASE        WHEN pm.TRAN_TYPE = 'BUY' THEN LEFT(pm.SEC_DESC1,CHARINDEX(' P ', pm.SEC_DESC1)-1)       ELSE RIGHT(LEFT(pm.SEC_DESC1,CHARINDEX(' C ', pm.SEC_DESC1)-1), 3)      END AS BUY_CCY,      CASE        WHEN pm.TRAN_TYPE != 'BUY' THEN LEFT(pm.SEC_DESC1,CHARINDEX(' P ', pm.SEC_DESC1)-1)       ELSE RIGHT(LEFT(pm.SEC_DESC1,CHARINDEX(' C ', pm.SEC_DESC1)-1), 3)      END AS SELL_CCY,      pm.AUTH_TIME,      pr.INST_TYPE,      pgt.PORTFOLIO_GROUP_NAME,      NULL,      'AL' AS [DATA_SOURCE],      NULL,      pm.STATUS,      NULL,      NULL,      NULL,      NULL,      NULL     FROM VISTA_REPORTING.dbo.PM_ORDERS pm     INNER JOIN #temp_max_touch_pm mtp ON mtp.ORD_NUM=pm.ORD_NUM AND mtp.MAX_TOUCH=pm.TOUCH_COUNT     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD=pm.ORD_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM, INST_TYPE, DEALING_DESK FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr ON pr.ORD_NUM=oc.TRD_ORD     LEFT JOIN (SELECT DISTINCT ORD_NUM, FUND FROM VISTA_REPORTING.dbo.TRADES) t ON t.ORD_NUM=oc.TRD_ORD     LEFT JOIN VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY pgt ON pgt.FUND_ID=t.FUND     WHERE pm.[DEALING_DESK] = 'FX' AND pm.SM_SEC_GROUP = 'OPTION' AND pm.AUTH_TIME IS NOT NULL             --SELECT * FROM #temp_CM_AL_table         -- Combine trades data from CM and AL and calculate MAX() executed time     IF OBJECT_ID('tempdb..#temp_min_max_exec', 'U') IS NOT NULL DROP TABLE #temp_min_max_exec     SELECT DISTINCT      ORDER_ID,      ACCEPTED_DATE_TIME,      QUOTE_PAIR,      CONVERT(DATE, VALUE_DATE_NEAR) AS VALUE_DATE,      MIN(EXECUTED_DATE_TIME) AS MIN_EXEC,      MAX(EXECUTED_DATE_TIME) AS MAX_EXEC,      MAX(MARKET_ARRIVAL_DATE_TIME) AS MARKET_ARRIVAL_DATE_TIME,      DATEDIFF(SECOND, MIN(EXECUTED_DATE_TIME), MAX(EXECUTED_DATE_TIME)) AS MIN_MAX_DIFF_SECS     INTO #temp_min_max_exec     FROM VISTA_REPORTING.dbo.FX_TRADES     WHERE EXECUTED_DATE_TIME IS NOT NULL     GROUP BY ORDER_ID, CONVERT(DATE, VALUE_DATE_NEAR), ACCEPTED_DATE_TIME, QUOTE_PAIR         UNION ALL         SELECT DISTINCT      oc.PM_ORD,      NULL,      t.DESC_INSTMT,      CONVERT(DATE, t.TRD_TRADE_DATE),      MIN(t.EXECUTION_TIME),      MAX(t.EXECUTION_TIME),      MAX(t.EXECUTION_TIME),      DATEDIFF(SECOND, MIN(t.EXECUTION_TIME), MAX(EXECUTION_TIME))     FROM  VISTA_REPORTING.dbo.TRADES t     INNER JOIN #temp_max_touch_tr mtt ON mtt.ORD_NUM=t.ORD_NUM AND mtt.MAX_TOUCH=t.TOUCH_COUNT     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD=t.ORD_NUM     GROUP BY oc.PM_ORD, CONVERT(DATE, t.TRD_TRADE_DATE), DESC_INSTMT             IF OBJECT_ID('tempdb..#temp_combined', 'U') IS NOT NULL DROP TABLE #temp_combined     SELECT DISTINCT      trec.ORDER_ID,       trec.INSTRUCTED_BY,       trec.BUSINESS_GROUP,       trec.INSTRUCTION_TYPE,       trec.[DATA_SOURCE],      trec.INSTRUCTION_RECEIVED_DATE,      trec.INSTRUCTION_STATUS,      trec.FREEZE_MARKER,      trec.FREEZE_BY,      trec.FREEZE_DATE_TIME,      trec.RELEASE_DATE_TIME,      trec.FREEZE_RELEASE_TIMESPAN,      tconf.ACCEPTED_DATE_TIME,      tconf.MIN_EXEC,      tconf.MAX_EXEC,       tconf.VALUE_DATE,      tconf.QUOTE_PAIR,      tconf.MARKET_ARRIVAL_DATE_TIME,      CONCAT(trec.BUY_CCY,'/', trec.SELL_CCY) AS CCY_PAIR,      trec.SEQUENCE_EXCEPTION_REASON,      CASE       WHEN cl.FIRM_FUND IS NOT NULL THEN 1       ELSE 0      END AS CLIENT_FLAG     INTO #temp_combined     FROM #temp_CM_AL_table trec     LEFT JOIN #temp_min_max_exec tconf ON tconf.ORDER_ID=trec.ORDER_ID     LEFT JOIN VISTA_STAGING.dbo.REF_COH_FIRM_FUND_LIST cl ON cl.FIRM_FUND=trec.CLIENT_FUND AND trec.INSTRUCTION_RECEIVED_DATE BETWEEN cl.DATE_FROM AND cl.DATE_TO             IF OBJECT_ID('tempdb..#temp_init_coh_imp_unfrozen', 'U') IS NOT NULL DROP TABLE #temp_init_coh_imp_unfrozen     SELECT DISTINCT      w1.ORDER_ID,       w1.INSTRUCTED_BY,      w1.BUSINESS_GROUP,      w1.INSTRUCTION_TYPE,      w1.INSTRUCTION_RECEIVED_DATE,      w1.MIN_EXEC AS FIRST_EXECUTION,      w1.MAX_EXEC AS CONFIRMED_DATETIME,      w1.VALUE_DATE AS VALUE_DATE_IMPACT,      w1.ACCEPTED_DATE_TIME,      w1.FREEZE_MARKER,      w1.FREEZE_BY,      w1.FREEZE_RELEASE_TIMESPAN,      COALESCE(w2.VALUE_DATE, w3.VALUE_DATE, w4.VALUE_DATE) AS VALUE_DATE_TRIGGER,      w1.CCY_PAIR AS CCY_IMPACT,      COALESCE(w2.CCY_PAIR, w3.CCY_PAIR, w4.CCY_PAIR) AS CCY_TRIGGER,      w1.CLIENT_FLAG,      CASE        WHEN COALESCE(w2.ORDER_ID, w3.ORDER_ID, w4.ORDER_ID) IS NULL THEN NULL        ELSE w1.ORDER_ID       END AS IMPACTED_ORDER,      w2.ORDER_ID AS EXCEPTION_TRIGGER,       CASE        WHEN CONVERT(VARCHAR, w1.INSTRUCTION_STATUS) = '59' AND w1.[DATA_SOURCE] = 'CM' THEN 0        WHEN CONVERT(VARCHAR, w2.INSTRUCTION_STATUS) = '59' AND w2.[DATA_SOURCE] = 'CM' THEN 0       WHEN CONVERT(VARCHAR, w3.INSTRUCTION_STATUS) = '59' AND w3.[DATA_SOURCE] = 'CM' THEN 0        WHEN CONVERT(VARCHAR, w4.INSTRUCTION_STATUS) = '59' AND w4.[DATA_SOURCE] = 'CM' THEN 0        WHEN CONVERT(VARCHAR, w1.INSTRUCTION_STATUS) = 'C' AND w1.[DATA_SOURCE] = 'AL' THEN 0        WHEN CONVERT(VARCHAR, w2.INSTRUCTION_STATUS) = 'C' AND w2.[DATA_SOURCE] = 'AL' THEN 0       WHEN CONVERT(VARCHAR, w3.INSTRUCTION_STATUS) = 'C' AND w3.[DATA_SOURCE] = 'AL' THEN 0        WHEN CONVERT(VARCHAR, w4.INSTRUCTION_STATUS) = 'C' AND w4.[DATA_SOURCE] = 'AL' THEN 0        WHEN COALESCE(w2.ORDER_ID, w3.ORDER_ID, w4.ORDER_ID) IS NULL THEN 0        ELSE 1       END AS INIT_VG_FLAG,      CASE        WHEN CONVERT(VARCHAR, w1.INSTRUCTION_STATUS) = '59' AND w1.[DATA_SOURCE] = 'CM' THEN 0        WHEN CONVERT(VARCHAR, w2.INSTRUCTION_STATUS) = '59' AND w2.[DATA_SOURCE] = 'CM' THEN 0       WHEN CONVERT(VARCHAR, w3.INSTRUCTION_STATUS) = '59' AND w3.[DATA_SOURCE] = 'CM' THEN 0        WHEN CONVERT(VARCHAR, w4.INSTRUCTION_STATUS) = '59' AND w4.[DATA_SOURCE] = 'CM' THEN 0        WHEN CONVERT(VARCHAR, w1.INSTRUCTION_STATUS) = 'C' AND w1.[DATA_SOURCE] = 'AL' THEN 0        WHEN CONVERT(VARCHAR, w2.INSTRUCTION_STATUS) = 'C' AND w2.[DATA_SOURCE] = 'AL' THEN 0       WHEN CONVERT(VARCHAR, w3.INSTRUCTION_STATUS) = 'C' AND w3.[DATA_SOURCE] = 'AL' THEN 0        WHEN CONVERT(VARCHAR, w4.INSTRUCTION_STATUS) = 'C' AND w4.[DATA_SOURCE] = 'AL' THEN 0        WHEN COALESCE(w2.ORDER_ID, w3.ORDER_ID, w4.ORDER_ID) IS NULL THEN 0        ELSE 1       END AS INIT_VG_FLAG_IMPACT,      DATEDIFF(SECOND, w1.INSTRUCTION_RECEIVED_DATE, w2.INSTRUCTION_RECEIVED_DATE) AS REC_DIFF,      w1.[DATA_SOURCE],      w1.SEQUENCE_EXCEPTION_REASON,      COALESCE(w2.INSTRUCTION_RECEIVED_DATE, w3.INSTRUCTION_RECEIVED_DATE, w4.INSTRUCTION_RECEIVED_DATE) AS BATCH_INSTRUCTION_RECEIVED_DATETIME     INTO #temp_init_coh_imp_unfrozen     FROM #temp_combined w1     LEFT JOIN VISTA_STAGING.dbo.REF_FX_COH_CLIENT_PRIORITY_THRESHOLD cpt ON cpt.INSTRUCTION_TYPE = w1.INSTRUCTION_TYPE AND w1.INSTRUCTION_RECEIVED_DATE BETWEEN cpt.DATE_FROM AND cpt.DATE_TO     LEFT JOIN #temp_combined w2 ON w2.ORDER_ID!=w1.ORDER_ID             AND w2.INSTRUCTION_RECEIVED_DATE > w1.INSTRUCTION_RECEIVED_DATE              AND w2.MAX_EXEC < w1.MAX_EXEC             AND CONVERT(DATE, w2.MAX_EXEC) = CONVERT(DATE, w1.MAX_EXEC)             AND ISNULL(w2.FREEZE_MARKER, 0) = 0             AND (w2.MARKET_ARRIVAL_DATE_TIME < w1.FREEZE_DATE_TIME OR w2.MARKET_ARRIVAL_DATE_TIME > w1.RELEASE_DATE_TIME)     LEFT JOIN #temp_combined w3 ON w3.ORDER_ID!=w1.ORDER_ID             AND w3.INSTRUCTION_RECEIVED_DATE > w1.INSTRUCTION_RECEIVED_DATE              AND DATEDIFF(SECOND, w1.INSTRUCTION_RECEIVED_DATE, w3.INSTRUCTION_RECEIVED_DATE) <= 600             AND w3.MAX_EXEC > w1.MAX_EXEC             AND w3.INSTRUCTION_TYPE = w1.INSTRUCTION_TYPE             AND w1.CLIENT_FLAG !=  w3.CLIENT_FLAG             AND w3.CLIENT_FLAG = 1             AND w3.QUOTE_PAIR = w1.QUOTE_PAIR             AND w3.VALUE_DATE = w1.VALUE_DATE             AND CONVERT(DATE, w3.MAX_EXEC) = CONVERT(DATE, w1.MAX_EXEC)             AND (w3.MARKET_ARRIVAL_DATE_TIME < w1.FREEZE_DATE_TIME OR w3.MARKET_ARRIVAL_DATE_TIME > w1.RELEASE_DATE_TIME)     LEFT JOIN #temp_combined w4 ON w4.ORDER_ID!=w1.ORDER_ID             AND w4.INSTRUCTION_RECEIVED_DATE > w1.INSTRUCTION_RECEIVED_DATE              AND w4.MIN_EXEC < w1.MAX_EXEC             --AND w2.INSTRUCTION_TYPE = w1.INSTRUCTION_TYPE             AND CONVERT(DATE, w4.MAX_EXEC) = CONVERT(DATE, w1.MAX_EXEC)             AND (w4.MARKET_ARRIVAL_DATE_TIME < w1.FREEZE_DATE_TIME OR w4.MARKET_ARRIVAL_DATE_TIME > w1.RELEASE_DATE_TIME)              IF OBJECT_ID('tempdb..#temp_init_coh_imp_frozen', 'U') IS NOT NULL DROP TABLE #temp_init_coh_imp_frozen     SELECT DISTINCT      w1.ORDER_ID,       w1.INSTRUCTED_BY,      w1.BUSINESS_GROUP,      w1.INSTRUCTION_TYPE,      w1.INSTRUCTION_RECEIVED_DATE,      w1.MIN_EXEC AS FIRST_EXECUTION,      w1.MAX_EXEC AS CONFIRMED_DATETIME,      w1.VALUE_DATE AS VALUE_DATE_IMPACT,      w1.ACCEPTED_DATE_TIME,      w1.FREEZE_MARKER,      w1.FREEZE_BY,      w1.FREEZE_RELEASE_TIMESPAN,      COALESCE(w2.VALUE_DATE, w3.VALUE_DATE, w4.VALUE_DATE) AS VALUE_DATE_TRIGGER,      w1.CCY_PAIR AS CCY_IMPACT,      COALESCE(w2.CCY_PAIR, w3.CCY_PAIR, w4.CCY_PAIR) AS CCY_TRIGGER,      w1.CLIENT_FLAG,      CASE        WHEN COALESCE(w2.ORDER_ID, w3.ORDER_ID, w4.ORDER_ID) IS NULL THEN NULL        ELSE w1.ORDER_ID       END AS IMPACTED_ORDER,      w2.ORDER_ID AS EXCEPTION_TRIGGER,       CASE        WHEN COALESCE(w2.ORDER_ID, w3.ORDER_ID, w4.ORDER_ID) IS NULL THEN NULL        ELSE w1.QUOTE_PAIR      END AS IMPACTED_QUOTE_PAIR,      w2.QUOTE_PAIR AS EXCEPTION_QUOTE_PAIR,       CASE        WHEN CONVERT(VARCHAR, w1.INSTRUCTION_STATUS) = '59' AND w1.[DATA_SOURCE] = 'CM' THEN 0        WHEN CONVERT(VARCHAR, w2.INSTRUCTION_STATUS) = '59' AND w2.[DATA_SOURCE] = 'CM' THEN 0       WHEN CONVERT(VARCHAR, w3.INSTRUCTION_STATUS) = '59' AND w3.[DATA_SOURCE] = 'CM' THEN 0        WHEN CONVERT(VARCHAR, w4.INSTRUCTION_STATUS) = '59' AND w4.[DATA_SOURCE] = 'CM' THEN 0        WHEN CONVERT(VARCHAR, w1.INSTRUCTION_STATUS) = 'C' AND w1.[DATA_SOURCE] = 'AL' THEN 0        WHEN CONVERT(VARCHAR, w2.INSTRUCTION_STATUS) = 'C' AND w2.[DATA_SOURCE] = 'AL' THEN 0       WHEN CONVERT(VARCHAR, w3.INSTRUCTION_STATUS) = 'C' AND w3.[DATA_SOURCE] = 'AL' THEN 0        WHEN CONVERT(VARCHAR, w4.INSTRUCTION_STATUS) = 'C' AND w4.[DATA_SOURCE] = 'AL' THEN 0        WHEN COALESCE(w2.ORDER_ID, w3.ORDER_ID, w4.ORDER_ID) IS NULL THEN 0        ELSE 1       END AS INIT_VG_FLAG,      CASE        WHEN CONVERT(VARCHAR, w1.INSTRUCTION_STATUS) = '59' AND w1.[DATA_SOURCE] = 'CM' THEN 0        WHEN CONVERT(VARCHAR, w2.INSTRUCTION_STATUS) = '59' AND w2.[DATA_SOURCE] = 'CM' THEN 0       WHEN CONVERT(VARCHAR, w3.INSTRUCTION_STATUS) = '59' AND w3.[DATA_SOURCE] = 'CM' THEN 0        WHEN CONVERT(VARCHAR, w4.INSTRUCTION_STATUS) = '59' AND w4.[DATA_SOURCE] = 'CM' THEN 0        WHEN CONVERT(VARCHAR, w1.INSTRUCTION_STATUS) = 'C' AND w1.[DATA_SOURCE] = 'AL' THEN 0        WHEN CONVERT(VARCHAR, w2.INSTRUCTION_STATUS) = 'C' AND w2.[DATA_SOURCE] = 'AL' THEN 0       WHEN CONVERT(VARCHAR, w3.INSTRUCTION_STATUS) = 'C' AND w3.[DATA_SOURCE] = 'AL' THEN 0        WHEN CONVERT(VARCHAR, w4.INSTRUCTION_STATUS) = 'C' AND w4.[DATA_SOURCE] = 'AL' THEN 0        WHEN COALESCE(w2.ORDER_ID, w3.ORDER_ID, w4.ORDER_ID) IS NULL THEN 0        ELSE 1       END AS INIT_VG_FLAG_IMPACT,      DATEDIFF(SECOND, w1.INSTRUCTION_RECEIVED_DATE, w2.INSTRUCTION_RECEIVED_DATE) AS REC_DIFF,      w1.[DATA_SOURCE],      w1.SEQUENCE_EXCEPTION_REASON,      COALESCE(w2.INSTRUCTION_RECEIVED_DATE, w3.INSTRUCTION_RECEIVED_DATE, w4.INSTRUCTION_RECEIVED_DATE) AS BATCH_INSTRUCTION_RECEIVED_DATETIME     INTO #temp_init_coh_imp_frozen     FROM #temp_combined w1     LEFT JOIN VISTA_STAGING.dbo.REF_FX_COH_CLIENT_PRIORITY_THRESHOLD cpt ON cpt.INSTRUCTION_TYPE = w1.INSTRUCTION_TYPE AND w1.INSTRUCTION_RECEIVED_DATE BETWEEN cpt.DATE_FROM AND cpt.DATE_TO     LEFT JOIN #temp_combined w2 ON w2.ORDER_ID!=w1.ORDER_ID             AND w2.INSTRUCTION_RECEIVED_DATE > w1.INSTRUCTION_RECEIVED_DATE              AND w2.MAX_EXEC < w1.MAX_EXEC             AND CONVERT(DATE, w2.MAX_EXEC) = CONVERT(DATE, w1.MAX_EXEC)             --AND w2.INSTRUCTION_TYPE = w1.INSTRUCTION_TYPE     LEFT JOIN #temp_combined w3 ON w3.ORDER_ID!=w1.ORDER_ID             AND w3.INSTRUCTION_RECEIVED_DATE > w1.INSTRUCTION_RECEIVED_DATE              AND DATEDIFF(SECOND, w1.INSTRUCTION_RECEIVED_DATE, w3.INSTRUCTION_RECEIVED_DATE) <= 600             AND w3.MAX_EXEC > w1.MAX_EXEC             AND w3.INSTRUCTION_TYPE = w1.INSTRUCTION_TYPE             AND w1.CLIENT_FLAG !=  w3.CLIENT_FLAG             AND w3.CLIENT_FLAG = 1             AND w3.QUOTE_PAIR = w1.QUOTE_PAIR             AND w3.VALUE_DATE = w1.VALUE_DATE             AND CONVERT(DATE, w3.MAX_EXEC) = CONVERT(DATE, w1.MAX_EXEC)     LEFT JOIN #temp_combined w4 ON w4.ORDER_ID!=w1.ORDER_ID             AND w4.INSTRUCTION_RECEIVED_DATE > w1.INSTRUCTION_RECEIVED_DATE              AND w4.MIN_EXEC < w1.MAX_EXEC             --AND w2.INSTRUCTION_TYPE = w1.INSTRUCTION_TYPE             AND CONVERT(DATE, w4.MAX_EXEC) = CONVERT(DATE, w1.MAX_EXEC)             --IF OBJECT_ID('tempdb..#temp_init_coh_imp_final', 'U') IS NOT NULL DROP TABLE #temp_init_coh_imp_final     --SELECT DISTINCT     -- tic_f.ORDER_ID,      -- tic_f.INSTRUCTED_BY,     -- tic_f.BUSINESS_GROUP,     -- tic_f.INSTRUCTION_TYPE,     -- tic_un.INSTRUCTION_RECEIVED_DATE,     -- tic_f.FIRST_EXECUTION,     -- tic_un.CONFIRMED_DATETIME,     -- tic_un.VALUE_DATE_IMPACT,     -- tic_un.ACCEPTED_DATE_TIME,     -- tic_f.FREEZE_MARKER,     -- tic_f.FREEZE_BY,     -- tic_f.FREEZE_RELEASE_TIMESPAN,     -- tic_un.VALUE_DATE_TRIGGER,     -- tic_f.CCY_IMPACT,     -- tic_un.CCY_TRIGGER,     -- tic_un.CLIENT_FLAG,     -- tic_f.IMPACTED_ORDER,     -- tic_f.EXCEPTION_TRIGGER,     -- tic_un.INIT_VG_FLAG,     -- tic_f.INIT_VG_FLAG_IMPACT,     -- tic_un.REC_DIFF,     -- tic_f.[DATA_SOURCE],     -- COALESCE(tic_f.SEQUENCE_EXCEPTION_REASON, tic_un.SEQUENCE_EXCEPTION_REASON) AS SEQUENCE_EXCEPTION_REASON,     -- tic_f.BATCH_INSTRUCTION_RECEIVED_DATETIME,     -- tic_f.VALUE_DATE_TRIGGER AS VALUE_DATE_TRIGGER_pf,     -- tic_f.CCY_TRIGGER AS CCY_TRIGGER_pf,     -- tic_f.CLIENT_FLAG AS CLIENT_FLAG_pf,     -- tic_f.INIT_VG_FLAG AS INIT_VG_FLAG_pf,     -- tic_f.REC_DIFF AS REC_DIFF_pf,     -- tic_f.INSTRUCTION_RECEIVED_DATE AS INSTRUCTION_RECEIVED_DATE_pf,     -- tic_f.CONFIRMED_DATETIME AS CONFIRMED_DATETIME_pf,     -- tic_f.ACCEPTED_DATE_TIME AS ACCEPTED_DATE_TIME_pf,     -- tic_un.VALUE_DATE_IMPACT AS VALUE_DATE_IMPACT_pf,     -- tic_un.FIRST_EXECUTION AS FIRST_EXECUTION_pf     --INTO #temp_init_coh_imp_final     --FROM #temp_init_coh_imp_frozen tic_f     --LEFT JOIN #temp_init_coh_imp_unfrozen tic_un ON tic_f.ORDER_ID = tic_un.ORDER_ID AND tic_f.EXCEPTION_TRIGGER = tic_un.EXCEPTION_TRIGGER             IF OBJECT_ID('tempdb..#temp_batch_orders', 'U') IS NOT NULL DROP TABLE #temp_batch_orders     SELECT DISTINCT       w1.ORDER_ID,       --w1.INSTRUCTION_RECEIVED_DATE,       --w1.BATCH_INSTRUCTION_RECEIVED_DATETIME,       --w2.INSTRUCTION_RECEIVED_DATE,      CASE       WHEN DATEDIFF(SECOND, w1.INSTRUCTION_RECEIVED_DATE, COALESCE(w1.BATCH_INSTRUCTION_RECEIVED_DATETIME, w2.INSTRUCTION_RECEIVED_DATE)) <= 30        THEN w1.IMPACTED_ORDER      END AS IMPACTED_DUE_TO_BATCH,      w1.IMPACTED_ORDER     INTO #temp_batch_orders     FROM #temp_init_coh_imp_frozen w1     LEFT JOIN #temp_combined w2 ON w2.ORDER_ID = w1.IMPACTED_ORDER             IF OBJECT_ID('tempdb..#temp_init_coh', 'U') IS NOT NULL DROP TABLE #temp_init_coh     SELECT DISTINCT      tic.*,      tbo.IMPACTED_DUE_TO_BATCH     INTO #temp_init_coh     FROM #temp_init_coh_imp_frozen tic     LEFT JOIN #temp_batch_orders tbo ON tbo.ORDER_ID=tic.ORDER_ID             IF OBJECT_ID('tempdb..#temp_auto_val', 'U') IS NOT NULL DROP TABLE #temp_auto_val     SELECT DISTINCT      tic.EXCEPTION_TRIGGER,      'YES' AS AUTO_VALIDATED     INTO #temp_auto_val     FROM #temp_init_coh tic     WHERE EXISTS (SELECT EXCEPTION_TRIGGER FROM #temp_init_coh WHERE EXCEPTION_TRIGGER = tic.EXCEPTION_TRIGGER         AND IMPACTED_ORDER = tic.IMPACTED_DUE_TO_BATCH)     GROUP BY tic.EXCEPTION_TRIGGER     HAVING COUNT(DISTINCT tic.IMPACTED_DUE_TO_BATCH) = COUNT(DISTINCT tic.IMPACTED_ORDER)             IF OBJECT_ID('tempdb..#temp_vg_table', 'U') IS NOT NULL DROP TABLE #temp_vg_table     SELECT DISTINCT      tc1.EXCEPTION_TRIGGER,      STUFF((         SELECT DISTINCT CONCAT(' | ' ,  CAST(tc3.IMPACTED_ORDER AS VARCHAR(50)))        FROM #temp_init_coh tc3        WHERE tc3.INIT_VG_FLAG_IMPACT =1        AND tc3.EXCEPTION_TRIGGER=tc1.EXCEPTION_TRIGGER        ORDER BY CONCAT(' | ' ,  CAST(tc3.IMPACTED_ORDER AS VARCHAR(50)))        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, '') AS IMPACTED,                STUFF((         SELECT DISTINCT CONCAT(' | ' ,  CAST(tc3.IMPACTED_QUOTE_PAIR AS VARCHAR(50)))        FROM #temp_init_coh tc3        WHERE tc3.INIT_VG_FLAG_IMPACT =1        AND tc3.EXCEPTION_TRIGGER=tc1.EXCEPTION_TRIGGER        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, '') AS QUOTE_PAIR_IMPACTED,          STUFF((         SELECT DISTINCT CONCAT(' | ' ,  CAST(tc3.IMPACTED_DUE_TO_BATCH AS VARCHAR(50)))        FROM #temp_init_coh tc3        WHERE tc3.INIT_VG_FLAG_IMPACT =1        AND tc3.EXCEPTION_TRIGGER=tc1.EXCEPTION_TRIGGER        AND tc3.IMPACTED_ORDER IS NOT NULL        AND tc3.IMPACTED_DUE_TO_BATCH IS NOT NULL        ORDER BY CONCAT(' | ' ,  CAST(tc3.IMPACTED_DUE_TO_BATCH AS VARCHAR(50)))        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, '') AS IMPACTED_DUE_TO_BATCH,      tav.AUTO_VALIDATED,      tc1.SEQUENCE_EXCEPTION_REASON,      tc1.INSTRUCTED_BY,      tc1.INSTRUCTION_TYPE,      tc1.INSTRUCTION_RECEIVED_DATE,      tc2.INSTRUCTION_RECEIVED_DATE AS INSTRUCTION_RECEIVED_DATE_TRIGGER,      tc1.CONFIRMED_DATETIME,      tc2.CONFIRMED_DATETIME AS CONFIRMED_DATETIME_TRIGGER,      tc1.INIT_VG_FLAG,      tc1.VALUE_DATE_TRIGGER,      tc1.VALUE_DATE_IMPACT,      tc1.CCY_TRIGGER,      tc1.CCY_IMPACT,            tc1.EXCEPTION_QUOTE_PAIR,      CASE       WHEN CHARINDEX(tc1.EXCEPTION_QUOTE_PAIR, STUFF((         SELECT DISTINCT CONCAT(' | ' ,  CAST(tc3.IMPACTED_QUOTE_PAIR AS VARCHAR(50)))        FROM #temp_init_coh tc3        WHERE tc3.INIT_VG_FLAG_IMPACT =1        AND tc3.EXCEPTION_TRIGGER=tc1.EXCEPTION_TRIGGER        FOR XML PATH(''), TYPE).value('(./text())[1]','VARCHAR(MAX)'), 1, 2, '')) > 0 THEN 'Yes' ELSE 'No'      END AS 'SAME_QUOTE_PAIR',      --tc2.CCY_TRIGGER,      tc1.CLIENT_FLAG,      tc2.CLIENT_FLAG AS CLIENT_FLAG_TRIGGER,      tc1.REC_DIFF,      cpt.SECONDS_THRESHOLD,      CASE        WHEN tc1.INIT_VG_FLAG = 1          AND tc2.CLIENT_FLAG = tc1.CLIENT_FLAG         --AND tc1.CCY_IMPACT = tc1.CCY_TRIGGER          AND tc1.INSTRUCTION_RECEIVED_DATE != tc2.INSTRUCTION_RECEIVED_DATE          AND tc1.CONFIRMED_DATETIME != tc2.CONFIRMED_DATETIME THEN 1       WHEN tc1.INIT_VG_FLAG = 1          AND tc2.CLIENT_FLAG = 1          AND tc1.CLIENT_FLAG = 0         AND tc1.INSTRUCTION_RECEIVED_DATE < tc2.INSTRUCTION_RECEIVED_DATE          AND tc1.CONFIRMED_DATETIME < tc2.CONFIRMED_DATETIME         AND tc1.VALUE_DATE_TRIGGER=tc1.VALUE_DATE_IMPACT          AND tc1.ACCEPTED_DATE_TIME > tc2.INSTRUCTION_RECEIVED_DATE         --AND tc1.CCY_TRIGGER=tc1.CCY_IMPACT          AND tc1.REC_DIFF < cpt.SECONDS_THRESHOLD THEN 1       WHEN tc1.INIT_VG_FLAG = 1          AND tc2.CLIENT_FLAG = 0          AND tc1.CLIENT_FLAG = 1         AND tc1.INSTRUCTION_RECEIVED_DATE < tc2.INSTRUCTION_RECEIVED_DATE          AND tc1.CONFIRMED_DATETIME > tc2.CONFIRMED_DATETIME         AND tc1.VALUE_DATE_TRIGGER=tc1.VALUE_DATE_IMPACT          AND tc1.ACCEPTED_DATE_TIME > tc2.INSTRUCTION_RECEIVED_DATE         --AND tc1.CCY_TRIGGER=tc1.CCY_IMPACT          AND tc1.REC_DIFF < cpt.SECONDS_THRESHOLD          THEN 1       WHEN tc1.INIT_VG_FLAG = 1          AND tc2.CLIENT_FLAG = 1          AND (tc1.INSTRUCTION_RECEIVED_DATE != tc2.INSTRUCTION_RECEIVED_DATE          OR tc1.CONFIRMED_DATETIME != tc2.CONFIRMED_DATETIME)         AND tc1.VALUE_DATE_TRIGGER=tc1.VALUE_DATE_IMPACT          --AND tc1.CCY_TRIGGER=tc1.CCY_IMPACT          AND tc1.REC_DIFF > cpt.SECONDS_THRESHOLD THEN 1       WHEN tc1.INIT_VG_FLAG = 1          AND tc1.CLIENT_FLAG = tc2.CLIENT_FLAG         --AND tc1.FIRST_EXECUTION != tc2.CONFIRMED_DATETIME         AND tc1.FIRST_EXECUTION > tc2.CONFIRMED_DATETIME THEN 1     --WHEN tc1.FREEZE_MARKER = 1 THEN 1       ELSE 0      END AS VG_604     INTO #temp_vg_table     FROM #temp_init_coh tc1     LEFT JOIN VISTA_STAGING.dbo.REF_FX_COH_CLIENT_PRIORITY_THRESHOLD cpt ON cpt.INSTRUCTION_TYPE = tc1.INSTRUCTION_TYPE AND tc1.INSTRUCTION_RECEIVED_DATE BETWEEN cpt.DATE_FROM AND cpt.DATE_TO     LEFT JOIN #temp_init_coh tc2 ON tc2.ORDER_ID=tc1.EXCEPTION_TRIGGER     LEFT JOIN #temp_auto_val tav ON tav.EXCEPTION_TRIGGER = tc1.EXCEPTION_TRIGGER     WHERE tc1.EXCEPTION_TRIGGER IS NOT NULL     --ORDER BY tc1.INSTRUCTED_BY, tc1.PRODUCT_TYPE, tc1.INSTRUCTION_RECEIVED_DATE              IF OBJECT_ID('tempdb..#temp_vg_table_unfrozen', 'U') IS NOT NULL DROP TABLE #temp_vg_table_unfrozen     SELECT DISTINCT      tc1.EXCEPTION_TRIGGER,      tc1.SEQUENCE_EXCEPTION_REASON,      tc1.INSTRUCTED_BY,      tc1.INSTRUCTION_TYPE,      tc1.INSTRUCTION_RECEIVED_DATE,      tc2.INSTRUCTION_RECEIVED_DATE AS INSTRUCTION_RECEIVED_DATE_TRIGGER,      tc1.CONFIRMED_DATETIME,      tc2.CONFIRMED_DATETIME AS CONFIRMED_DATETIME_TRIGGER,      tc1.INIT_VG_FLAG,      tc1.VALUE_DATE_TRIGGER,      tc1.VALUE_DATE_IMPACT,      tc1.CCY_TRIGGER,      tc1.CCY_IMPACT,      --tc2.CCY_TRIGGER,      tc1.CLIENT_FLAG,      tc2.CLIENT_FLAG AS CLIENT_FLAG_TRIGGER,      tc1.REC_DIFF,      cpt.SECONDS_THRESHOLD,      CASE        WHEN tc1.INIT_VG_FLAG = 1          AND tc2.CLIENT_FLAG = tc1.CLIENT_FLAG         --AND tc1.CCY_IMPACT = tc1.CCY_TRIGGER          AND tc1.INSTRUCTION_RECEIVED_DATE != tc2.INSTRUCTION_RECEIVED_DATE          AND tc1.CONFIRMED_DATETIME != tc2.CONFIRMED_DATETIME THEN 1       WHEN tc1.INIT_VG_FLAG = 1          AND tc2.CLIENT_FLAG = 1          AND tc1.CLIENT_FLAG = 0         AND tc1.INSTRUCTION_RECEIVED_DATE < tc2.INSTRUCTION_RECEIVED_DATE          AND tc1.CONFIRMED_DATETIME < tc2.CONFIRMED_DATETIME         AND tc1.VALUE_DATE_TRIGGER=tc1.VALUE_DATE_IMPACT          AND tc1.ACCEPTED_DATE_TIME > tc2.INSTRUCTION_RECEIVED_DATE         --AND tc1.CCY_TRIGGER=tc1.CCY_IMPACT          AND tc1.REC_DIFF < cpt.SECONDS_THRESHOLD THEN 1       WHEN tc1.INIT_VG_FLAG = 1          AND tc2.CLIENT_FLAG = 0          AND tc1.CLIENT_FLAG = 1         AND tc1.INSTRUCTION_RECEIVED_DATE < tc2.INSTRUCTION_RECEIVED_DATE          AND tc1.CONFIRMED_DATETIME > tc2.CONFIRMED_DATETIME         AND tc1.VALUE_DATE_TRIGGER=tc1.VALUE_DATE_IMPACT          AND tc1.ACCEPTED_DATE_TIME > tc2.INSTRUCTION_RECEIVED_DATE         --AND tc1.CCY_TRIGGER=tc1.CCY_IMPACT          AND tc1.REC_DIFF < cpt.SECONDS_THRESHOLD          THEN 1       WHEN tc1.INIT_VG_FLAG = 1          AND tc2.CLIENT_FLAG = 1          AND (tc1.INSTRUCTION_RECEIVED_DATE != tc2.INSTRUCTION_RECEIVED_DATE          OR tc1.CONFIRMED_DATETIME != tc2.CONFIRMED_DATETIME)         AND tc1.VALUE_DATE_TRIGGER=tc1.VALUE_DATE_IMPACT          --AND tc1.CCY_TRIGGER=tc1.CCY_IMPACT          AND tc1.REC_DIFF > cpt.SECONDS_THRESHOLD THEN 1       WHEN tc1.INIT_VG_FLAG = 1          AND tc1.CLIENT_FLAG = tc2.CLIENT_FLAG         --AND tc1.FIRST_EXECUTION != tc2.CONFIRMED_DATETIME         AND tc1.FIRST_EXECUTION > tc2.CONFIRMED_DATETIME THEN 1       --WHEN tc1.FREEZE_MARKER = 1 THEN 1       ELSE 0      END AS VG_604_uf     INTO #temp_vg_table_unfrozen     FROM #temp_init_coh_imp_unfrozen tc1     LEFT JOIN VISTA_STAGING.dbo.REF_FX_COH_CLIENT_PRIORITY_THRESHOLD cpt ON cpt.INSTRUCTION_TYPE = tc1.INSTRUCTION_TYPE AND tc1.INSTRUCTION_RECEIVED_DATE BETWEEN cpt.DATE_FROM AND cpt.DATE_TO     LEFT JOIN #temp_init_coh_imp_unfrozen tc2 ON tc2.ORDER_ID=tc1.EXCEPTION_TRIGGER     LEFT JOIN #temp_auto_val tav ON tav.EXCEPTION_TRIGGER = tc1.EXCEPTION_TRIGGER     WHERE tc1.EXCEPTION_TRIGGER IS NOT NULL             IF OBJECT_ID('tempdb..#temp_coh_table', 'U') IS NOT NULL DROP TABLE #temp_coh_table     SELECT DISTINCT      tc.ORDER_ID,      tc.[DATA_SOURCE],      tc.INSTRUCTED_BY,      tc.INSTRUCTION_TYPE,      tc.SEQUENCE_EXCEPTION_REASON,      tc.INSTRUCTION_RECEIVED_DATE,      tc.CONFIRMED_DATETIME,      CASE        WHEN tv.VG_604 IS NOT NULL          AND tv.INSTRUCTION_RECEIVED_DATE > '2020-07-17'               AND tv.IMPACTED IS NOT NULL          THEN tv.IMPACTED_DUE_TO_BATCH        ELSE NULL       END AS IMPACTED_DUE_TO_BATCH,      CASE        WHEN tv.VG_604 IS NOT NULL          AND tv.INSTRUCTION_RECEIVED_DATE > '2020-07-17'          AND tv.IMPACTED = tv.IMPACTED_DUE_TO_BATCH          THEN tv.AUTO_VALIDATED        WHEN tv.VG_604 IS NOT NULL          AND tv.INSTRUCTION_RECEIVED_DATE > '2020-07-17'          AND ISNULL(tv.IMPACTED, '') != ISNULL(tv.IMPACTED_DUE_TO_BATCH, '')          THEN 'NO'       ELSE NULL       END AS AUTO_VALIDATED,      CASE        WHEN tv.VG_604 IS NOT NULL         AND tv.INSTRUCTION_RECEIVED_DATE > '2020-07-17'          THEN tv.IMPACTED        WHEN tc.FREEZE_MARKER = 1          AND tc.INSTRUCTION_RECEIVED_DATE > '2020-07-17'         THEN tv.IMPACTED       ELSE NULL       END AS IMPACTED,      CASE        WHEN tv.VG_604 IS NOT NULL THEN tv.SAME_QUOTE_PAIR        WHEN tc.FREEZE_MARKER = 1 THEN tv.SAME_QUOTE_PAIR       ELSE NULL        END AS SAME_QUOTE_PAIR,      CASE        WHEN tvu.VG_604_uf IS NOT NULL          AND tvu.INSTRUCTION_RECEIVED_DATE > '2020-07-17'         THEN tvu.VG_604_uf        WHEN tc.FREEZE_MARKER = 1          AND tc.INSTRUCTION_RECEIVED_DATE > '2020-07-17'         --SURVG-726         AND sr.INSTRUCTION_STATUS != 'Cancelled'         --End of SURVG-726         THEN 1       ELSE 0       END AS VG_604,      CASE        WHEN tvu.VG_604_uf IS NOT NULL          AND tvu.INSTRUCTION_RECEIVED_DATE > '2020-07-17'         THEN GETDATE()        WHEN tc.FREEZE_MARKER = 1          AND tc.INSTRUCTION_RECEIVED_DATE > '2020-07-17'         --SURVG-726         AND sr.INSTRUCTION_STATUS != 'Cancelled'         --End of SURVG-726         THEN GETDATE()        ELSE NULL       END AS VG_604_CREATETIME,      CASE        WHEN tc.INSTRUCTION_RECEIVED_DATE > '2020-07-17'        THEN tc.FREEZE_BY        ELSE NULL      END AS FROZEN_BY,      CASE        WHEN tc.INSTRUCTION_RECEIVED_DATE > '2020-07-17'        THEN tc.FREEZE_RELEASE_TIMESPAN       ELSE NULL      END AS FREEZE_RELEASE_TIMESPAN     INTO #temp_coh_table     FROM #temp_init_coh_imp_frozen tc     LEFT JOIN #temp_vg_table tv ON tv.EXCEPTION_TRIGGER=tc.ORDER_ID AND tv.VG_604=1     LEFT JOIN #temp_vg_table_unfrozen tvu ON tvu.EXCEPTION_TRIGGER=tc.ORDER_ID AND tvu.VG_604_uf=1     --SURVG-726     LEFT JOIN VISTA_REPORTING.DBO.FX_ORDERS sr on sr.FXM_ORDER_ID = tc.ORDER_ID     --End of SURVG-726         -- Use #execution_exception_type to populate FINAL_STATUS_UPDATE_TABLE     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     SELECT DISTINCT      CONCAT(ORDER_ID,'_604_', [DATA_SOURCE]) AS ID,      '1A2' AS STATUS,       NULL AS FINAL_UPDATED_TIME     INTO #temp_status_table     FROM #temp_coh_table     WHERE VG_604 = 1         MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'FX',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'FX');             --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      NULL AS TRANSACTION_NUMBER,      NULL AS TRD_ORD,      ex.ORDER_ID AS ORDER_ID,      'Client Order Handling' AS Exception_Type,      CONCAT(ex.ORDER_ID,'_604_', ex.[DATA_SOURCE]) AS ID,      NULL AS REASON,      NULL AS COMMENT,      'With Reviewer' AS Status,      NULL AS ClientExecID,      'FX' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],tdd3.[FULL_NAME],tdd4.[FULL_NAME],dd.[DEFAULT_DEALER]) AS DEALER,      '1A2' AS STATUS_ID,      ex.INSTRUCTION_RECEIVED_DATE AS ORD_AUTH,      ex.CONFIRMED_DATETIME AS TRADE_EXEC     INTO #temp_audit     FROM #temp_coh_table ex     left join (SELECT DISTINCT ORDER_ID, DEALT_BY, ACCEPTED_BY, PULL_DATE FROM VISTA_REPORTING.dbo.FX_TRADES) fxt     on fxt.[ORDER_ID] = ex.[ORDER_ID] and ex.[DATA_SOURCE] = 'FX'     left join (SELECT DISTINCT FXM_ORDER_ID, PULL_DATE FROM VISTA_REPORTING.dbo.FX_ORDERS) co     on ex.[ORDER_ID] = co.FXM_ORDER_ID and ex.[DATA_SOURCE] = 'FX'     left join (SELECT DISTINCT pm.ORD_NUM, TRADER, PULL_DATE FROM VISTA_REPORTING.dbo.PM_ORDERS pm     inner join (SELECT DISTINCT ORD_NUM, MAX(TOUCH_COUNT) AS MAX_TOUCH FROM VISTA_REPORTING.dbo.PM_ORDERS GROUP BY ORD_NUM) mtt on mtt.ORD_NUM = pm.ORD_NUM and mtt.MAX_TOUCH = pm.TOUCH_COUNT) pm     on ex.[ORDER_ID] = pm.[ORD_NUM] and ex.[DATA_SOURCE] = 'AL'     left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc     on pm.[ORD_NUM] = oc.[PM_ORD]     left join (SELECT DISTINCT t.ORD_NUM, t.MULTI_FUND_ID, TRD_TRADER, TOUCH_COUNT, PULL_DATE FROM VISTA_REPORTING.dbo.TRADES t     inner join (SELECT DISTINCT MULTI_FUND_ID, MAX(TOUCH_COUNT) AS MAX_TOUCH FROM VISTA_REPORTING.dbo.TRADES GROUP BY MULTI_FUND_ID) mtt on mtt.MULTI_FUND_ID = t.MULTI_FUND_ID and mtt.MAX_TOUCH = T.TOUCH_COUNT) t     on t.[ORD_NUM] = oc.[TRD_ORD]     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd     on tdd.[MG_USER_ID] = fxt.[DEALT_BY] AND CAST(COALESCE(fxt.[PULL_DATE],co.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)     left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2     on tdd2.[MG_USER_ID] = fxt.[ACCEPTED_BY] AND CAST(COALESCE(fxt.[PULL_DATE],co.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)     left join VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd3     on tdd3.[INITIALS]  = t.[TRD_TRADER] AND CAST(t.[PULL_DATE] AS DATE) BETWEEN CAST(tdd3.[DATE_FROM] AS DATE) AND CAST(tdd3.[DATE_TO] AS DATE)     left join VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd4     on tdd4.[INITIALS]  = pm.[TRADER] AND CAST(pm.[PULL_DATE] AS DATE) BETWEEN CAST(tdd4.[DATE_FROM] AS DATE) AND CAST(tdd4.[DATE_TO] AS DATE)     left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd      on dd.[REPORT_NAME] = 'Client Order Handling' AND CAST(COALESCE(fxt.[PULL_DATE],co.[PULL_DATE],t.[PULL_DATE],pm.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)     WHERE VG_604 = 1              MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_FX AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);              MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET       T.ID=T.ID,       T.STATUS=T.STATUS,       T.DEALING_DESK = 'FX',       T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'FX');             IF OBJECT_ID('VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_FX_TABLE', 'U') IS NULL      SELECT DISTINCT       ORDER_ID,       [DATA_SOURCE],       --CASE       -- WHEN VG_604 = 1 THEN IMPACTED_DUE_TO_BATCH       -- ELSE NULL       --END AS IMPACTED_DUE_TO_BATCH,       -- CASE       -- WHEN VG_604 = 1 THEN AUTO_VALIDATED       -- ELSE NULL       --END AS AUTO_VALIDATED,       --CASE       -- WHEN VG_604 = 1 THEN IMPACTED       -- ELSE NULL       --END AS IMPACTED,       IMPACTED_DUE_TO_BATCH,       AUTO_VALIDATED,       IMPACTED,       SAME_QUOTE_PAIR,       VG_604,       VG_604_CREATETIME      INTO VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_FX_TABLE       FROM #temp_coh_table          ELSE              IF OBJECT_ID('tempdb..#temp_coh_table_staging', 'U') IS NOT NULL DROP TABLE #temp_coh_table_staging      SELECT DISTINCT       ORDER_ID,       [DATA_SOURCE],       --CASE       -- WHEN VG_604 = 1 THEN IMPACTED_DUE_TO_BATCH       -- ELSE NULL       --END AS IMPACTED_DUE_TO_BATCH,       -- CASE       -- WHEN VG_604 = 1 THEN AUTO_VALIDATED       -- ELSE NULL       --END AS AUTO_VALIDATED,       --CASE       -- WHEN VG_604 = 1 THEN IMPACTED     -- ELSE NULL       --END AS IMPACTED,       IMPACTED_DUE_TO_BATCH,       AUTO_VALIDATED,       IMPACTED,       SAME_QUOTE_PAIR,       VG_604,       VG_604_CREATETIME,       FROZEN_BY,       FREEZE_RELEASE_TIMESPAN      INTO #temp_coh_table_staging      FROM #temp_coh_table             MERGE VISTA_STAGING.dbo.VG_604_CLIENT_ORDER_HANDLING_FX_TABLE AS T      USING #temp_coh_table_staging AS S     ON (T.ORDER_ID = S.ORDER_ID AND T.[DATA_SOURCE] = S.[DATA_SOURCE])     WHEN MATCHED      THEN UPDATE      SET       ORDER_ID = CASE WHEN S.VG_604 > T.VG_604 THEN S.ORDER_ID ELSE T.ORDER_ID END,      VG_604 = CASE WHEN S.VG_604 > T.VG_604 THEN S.VG_604 ELSE T.VG_604 END,      VG_604_CREATETIME = CASE WHEN S.VG_604 > T.VG_604 THEN S.VG_604_CREATETIME ELSE T.VG_604_CREATETIME END,      IMPACTED_DUE_TO_BATCH = CASE WHEN S.VG_604 > T.VG_604 THEN S.IMPACTED_DUE_TO_BATCH ELSE T.IMPACTED_DUE_TO_BATCH END,      AUTO_VALIDATED = CASE WHEN S.VG_604 > T.VG_604 THEN S.AUTO_VALIDATED ELSE T.AUTO_VALIDATED END,      SAME_QUOTE_PAIR = CASE WHEN S.VG_604 > T.VG_604 THEN S.SAME_QUOTE_PAIR ELSE T.SAME_QUOTE_PAIR END,      IMPACTED = CASE WHEN S.VG_604 > T.VG_604 THEN S.IMPACTED ELSE T.IMPACTED END,      [DATA_SOURCE] = CASE WHEN S.VG_604 > T.VG_604 THEN S.[DATA_SOURCE] ELSE T.[DATA_SOURCE] END,      FROZEN_BY = CASE WHEN S.VG_604 > T.VG_604 THEN S.FROZEN_BY ELSE T.FROZEN_BY END,      FREEZE_RELEASE_TIMESPAN = CASE WHEN S.VG_604 > T.VG_604 THEN S.FREEZE_RELEASE_TIMESPAN ELSE T.FREEZE_RELEASE_TIMESPAN END             WHEN NOT MATCHED      THEN      INSERT      (ORDER_ID,      IMPACTED_DUE_TO_BATCH,      AUTO_VALIDATED,      IMPACTED,        SAME_QUOTE_PAIR,       VG_604,      VG_604_CREATETIME,      [DATA_SOURCE],      FROZEN_BY,      FREEZE_RELEASE_TIMESPAN)          VALUES      (S.ORDER_ID,      S.IMPACTED_DUE_TO_BATCH,      AUTO_VALIDATED,      S.IMPACTED,      S.SAME_QUOTE_PAIR,      S.VG_604,      S.VG_604_CREATETIME,      S.[DATA_SOURCE],      FROZEN_BY,      FREEZE_RELEASE_TIMESPAN);         IF OBJECT_ID('tempdb..#temp_recent_dealer_al', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_al     IF OBJECT_ID('tempdb..#temp_recent_dealer_cm', 'U') IS NOT NULL DROP TABLE #temp_recent_dealer_cm     IF OBJECT_ID('tempdb..#temp_max_req_orders', 'U') IS NOT NULL DROP TABLE #temp_max_req_orders     IF OBJECT_ID('tempdb..#temp_max_touch_pm', 'U') IS NOT NULL DROP TABLE #temp_max_touch_pm     IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades     IF OBJECT_ID('tempdb..#temp_max_touch_tr', 'U') IS NOT NULL DROP TABLE #temp_max_touch_tr     IF OBJECT_ID('tempdb..#temp_CM_AL_table', 'U') IS NOT NULL DROP TABLE #temp_CM_AL_table     IF OBJECT_ID('tempdb..#temp_min_max_exec', 'U') IS NOT NULL DROP TABLE #temp_min_max_exec     IF OBJECT_ID('tempdb..#temp_combined', 'U') IS NOT NULL DROP TABLE #temp_combined     IF OBJECT_ID('tempdb..#temp_init_coh', 'U') IS NOT NULL DROP TABLE #temp_init_coh     IF OBJECT_ID('tempdb..#temp_vg_table', 'U') IS NOT NULL DROP TABLE #temp_vg_table     IF OBJECT_ID('tempdb..#temp_coh_table', 'U') IS NOT NULL DROP TABLE #temp_coh_table     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     IF OBJECT_ID('tempdb..#temp_coh_table_staging', 'U') IS NOT NULL DROP TABLE #temp_coh_table_staging     IF OBJECT_ID('tempdb..#temp_auto_val', 'U') IS NOT NULL DROP TABLE #temp_auto_val        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_607_BEST_EXECUTION_CASH  CreateDate: 2025-06-26 17:37:13.070  ModifyDate: 2025-06-26 17:37:13.070  --- DEFINITION START ---  -- =============================================    -- Author:  <Samad, Mehreen>    -- Create date: <05/06/2019>    -- Description:     -- <Details all trades highlighting exceptions    -- breaching the best execution policy NWQ &     -- B3Q exception tests. CRR is view only for MI     -- for Best Execution (MM).>    -- =============================================        -- ***************VERSION CONTROL***************    --    -- *********************************************        CREATE PROCEDURE [dbo].[VG_607_BEST_EXECUTION_CASH]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        --Client has confirmed we can used NOOF_QUOTES from table instead of calculating it. Have just left it in so I can use for testing, but will delete once happy with it    ----Count No. of Quotes    --IF OBJECT_ID('tempdb..#quotecount', 'U') IS NOT NULL DROP TABLE #quotecount    --SELECT DISTINCT    -- cbt.[TRANSACTION_NUMBER],    -- COUNT(cbt.[RATE]) as NUM_QUOTES    --INTO #quotecount    --FROM VISTA_REPORTING.dbo.CASH_BANK_RATES cbt    --GROUP BY cbt.[TRANSACTION_NUMBER]        --Calculate the max quote value in Cash Manager    IF OBJECT_ID('tempdb..#max_quote_c', 'U') IS NOT NULL DROP TABLE #max_quote_c    SELECT DISTINCT     cbt.[TRANSACTION_NUMBER],     MAX(cbt.[RATE]) AS MAX_QUOTE    INTO #max_quote_c    FROM VISTA_REPORTING.dbo.CASH_BANK_RATES cbt    GROUP BY cbt.[TRANSACTION_NUMBER]        --Calculate the max quote value in Aladdin    IF OBJECT_ID('tempdb..#max_quote_a', 'U') IS NOT NULL DROP TABLE #max_quote_a    SELECT DISTINCT     q.[MULTI_FUND_ID],     MAX([QUOTE_VALUE]) AS MAX_QUOTE    INTO #max_quote_a    FROM VISTA_REPORTING.dbo.QUOTES q    GROUP BY [MULTI_FUND_ID]        --Calculate the quote counterparties associated to the min(abs(quote value))    IF OBJECT_ID('tempdb..#min_abs_broker', 'U') IS NOT NULL DROP TABLE #min_abs_broker    SELECT      q.[MULTI_FUND_ID],     q.[QUOTE_VALUE],     cp.[BROKER_TICKER] AS MIN_ABS_BROKER,     cp.[COUNTERPARTY_CODE],     q2.[MIN_QUOTE]    INTO #min_abs_broker    FROM VISTA_REPORTING.dbo.QUOTES q    LEFT JOIN (SELECT DISTINCT         [BROKER_TICKER],         [COUNTERPARTY_CODE]          FROM VISTA_REPORTING.dbo.COUNTERPARTIES) cp    on q.[BROKER] = cp.[COUNTERPARTY_CODE]    inner join (SELECT         [MULTI_FUND_ID],                     MIN(NULLIF([QUOTE_VALUE],0)) AS MIN_QUOTE                FROM VISTA_REPORTING.dbo.QUOTES       WHERE QUOTE_ORIGIN = 'QUOTE'                GROUP BY [MULTI_FUND_ID]) q2    on q.[MULTI_FUND_ID] = q2.[MULTI_FUND_ID] AND ABS(q.[QUOTE_VALUE]) = q2.[MIN_QUOTE]    where q.QUOTE_ORIGIN = 'QUOTE'        --Calculate the quote counterparties associated to the max(abs(quote value))    IF OBJECT_ID('tempdb..#max_abs_broker', 'U') IS NOT NULL DROP TABLE #max_abs_broker    SELECT      q.[MULTI_FUND_ID],     q.[QUOTE_VALUE],     cp.[BROKER_TICKER] AS MAX_ABS_BROKER,     cp.[COUNTERPARTY_CODE],     q2.[MAX_QUOTE]    INTO #max_abs_broker    FROM VISTA_REPORTING.dbo.QUOTES q    LEFT JOIN (SELECT DISTINCT         [BROKER_TICKER],         [COUNTERPARTY_CODE]          FROM VISTA_REPORTING.dbo.COUNTERPARTIES) cp    on q.[BROKER] = cp.[COUNTERPARTY_CODE]    inner join (SELECT         [MULTI_FUND_ID],                     MAX(NULLIF([QUOTE_VALUE],0)) AS MAX_QUOTE                FROM VISTA_REPORTING.dbo.QUOTES       WHERE QUOTE_ORIGIN = 'QUOTE'                GROUP BY [MULTI_FUND_ID]) q2    on q.[MULTI_FUND_ID] = q2.[MULTI_FUND_ID] AND ABS(q.[QUOTE_VALUE]) = q2.[MAX_QUOTE]    where q.QUOTE_ORIGIN = 'QUOTE'        --Obtain Quotes Requested and Quotes Obtained    IF OBJECT_ID('tempdb..#quotes_calc', 'U') IS NOT NULL DROP TABLE #quotes_calc    SELECT DISTINCT      q.[MULTI_FUND_ID],     (SELECT       COUNT(DISTINCT [BROKER])       FROM VISTA_REPORTING.dbo.QUOTES      WHERE ISNULL(QUOTE_VALUE, 0) != 0         AND MULTI_FUND_ID = q.[MULTI_FUND_ID]) as QUOTES_OBTAINED, --Count distinct BROKER where QUOTE_VALUE is NOT NULL or 0     COUNT(DISTINCT [BROKER]) as QUOTES_REQUESTED --A quote is required for every MULTI_FUND_ID    INTO #quotes_calc    FROM VISTA_REPORTING.dbo.QUOTES q    GROUP BY q.[MULTI_FUND_ID]        IF OBJECT_ID('tempdb..#max_touch_trades', 'U') IS NOT NULL DROP TABLE #max_touch_trades    SELECT DISTINCT      MULTI_FUND_ID,     MAX(TOUCH_COUNT) AS MAX_TCH    INTO #max_touch_trades    FROM VISTA_REPORTING.DBO.TRADES    GROUP BY MULTI_FUND_ID        IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades    SELECT      TRANSACTION_NUMBER,     MAX(API_REQUESTED_DATE) AS MAX_API_REQ    INTO #temp_max_req_trades    FROM VISTA_REPORTING.dbo.CASH_TRADES    GROUP BY TRANSACTION_NUMBER            --Create Exceptions table for RR    IF OBJECT_ID('tempdb..#bestexrr_temp', 'U') IS NOT NULL DROP TABLE #bestexrr_temp    SELECT DISTINCT     ct.[TRANSACTION_NUMBER],     ct.[PRODUCT_GROUP_NAME],     ct.[EXECUTED_RATE],     ct.[AVERAGE_RATE],     ct.[NOOF_QUOTES] as [NUM_QUOTES],     --q_c.[NUM_QUOTES],     CASE       WHEN ct.[PRODUCT_GROUP_NAME]  = 'Repo' AND ct.[EXECUTED_RATE] > ct.[AVERAGE_RATE] AND ct.[TRANSACTION_STATUS_DECODE] NOT in ('Deleted','Cancelled') THEN 1      WHEN ct.[PRODUCT_GROUP_NAME] != 'Repo' AND ct.[EXECUTED_RATE] < ct.[AVERAGE_RATE] AND ct.[TRANSACTION_STATUS_DECODE] NOT in ('Deleted','Cancelled') THEN 1      WHEN ct.[NOOF_QUOTES] = ref_q.[NO_OF_QUOTES_THRESHOLD] AND ct.[TRANSACTION_STATUS_DECODE] NOT in ('Deleted','Cancelled') THEN 1      ELSE 0     END AS EXCEPTION_FLAG,     'CM' as [DATA_SOURCE]    INTO #bestexrr_temp     FROM VISTA_REPORTING.dbo.CASH_TRADES ct    inner join #temp_max_req_trades req on req.MAX_API_REQ = ct.API_REQUESTED_DATE and req.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER    --left join #quotecount q_c     --on q_c.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]    left join VISTA_STAGING.dbo.REF_CASH_BESTEXC_QUOTES_THRESHOLD ref_q    on ct.[PRODUCT] = ref_q.[PRODUCT] AND CAST(ct.[PULL_DATE] as DATE) BETWEEN CAST(ref_q.[DATE_FROM] as date) AND CAST(ref_q.[DATE_TO] as DATE)    WHERE ct.[PRODUCT_TYPE] = 'Repo / Rev Repo Products'        --Create Exceptions table for MM & CRR MM    IF OBJECT_ID('tempdb..#bestexmm_temp', 'U') IS NOT NULL DROP TABLE #bestexmm_temp    SELECT DISTINCT      ct.[TRANSACTION_NUMBER],     ct.[PRODUCT],     (ct.[EXECUTED_RATE] - crts.[INDICATIVE_REF_RATE]) as DIFFERENCE_BPS,     ct.[EXECUTED_RATE],     crts.[INDICATIVE_REF_RATE],     ref_crr.[TOLERANCE],     max_qc.[MAX_QUOTE],     ct.[NOOF_QUOTES] as [NUM_QUOTES],     --q_c.[NUM_QUOTES],     ref_q.[NO_OF_QUOTES_THRESHOLD],     CASE       WHEN ct.[PRODUCT] NOT IN ('CP','CD','UKTB')      THEN        CASE         WHEN crts.[INDICATIVE_REF_RATE] is null or crts.[INDICATIVE_REF_RATE] = 0 or ct.EXECUTED_RATE > crts.[INDICATIVE_REF_RATE] THEN 0 --last condition is around the 'in favour' trades        WHEN abs((ct.[EXECUTED_RATE] - crts.[INDICATIVE_REF_RATE])) > ref_crr.[TOLERANCE] and ct.[TRANSACTION_STATUS_DECODE] not in ('Deleted','Cancelled') THEN 1        ELSE 0       END     ELSE 0     END AS CRR_EXCEPTION,     CASE      WHEN ct.NOOF_QUOTES = 1 THEN 0 --condition for noof_quotes was added to account for an extreme scenario                 --where the quote did not match the executed rate. By default, if there is                 --only one quote there should not be a NWQ       WHEN ct.[EXECUTED_RATE] != max_qc.[MAX_QUOTE] and ct.[TRANSACTION_STATUS_DECODE] not in ('Deleted','Cancelled') THEN 1      ELSE 0     END AS NWQ_EXCEPTION,     CASE       WHEN (ct.[NOOF_QUOTES] < ref_q.[NO_OF_QUOTES_THRESHOLD] OR NULLIF(ct.[NOOF_QUOTES],'') IS NULL)       and ct.[TRANSACTION_STATUS_DECODE] not in ('Deleted','Cancelled') THEN 1      ELSE 0     END AS B3Q_EXCEPTION,     'CM' as [DATA_SOURCE]    INTO #bestexmm_temp     FROM VISTA_REPORTING.dbo.CASH_TRADES ct    inner join #temp_max_req_trades req on req.MAX_API_REQ = ct.API_REQUESTED_DATE and req.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER    left join VISTA_REPORTING.dbo.CASH_REFERENCE_RATES crts    on crts.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]     left join VISTA_STAGING.dbo.REF_CASH_CRR_THRESHOLD ref_crr    on ref_crr.[CURRENCY] = ct.[TRADE_CURRENCY] AND ref_crr.[PRODUCT] = ct.[PRODUCT] AND CAST(ct.[PULL_DATE] as DATE) BETWEEN CAST(ref_crr.[DATE_FROM] as date) AND CAST(ref_crr.[DATE_TO] as DATE)    left join #max_quote_c max_qc    on max_qc.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]    --left join #quotecount q_c     --on q_c.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]    left join VISTA_STAGING.dbo.REF_CASH_BESTEXC_QUOTES_THRESHOLD ref_q    on ct.[PRODUCT] = ref_q.[PRODUCT] AND CAST(ct.[PULL_DATE] as DATE) BETWEEN CAST(ref_q.[DATE_FROM] as date) AND CAST(ref_q.[DATE_TO] as DATE)    WHERE ct.[PRODUCT_TYPE] = 'Cash Products'        UNION        SELECT DISTINCT     t.[MULTI_FUND_ID] as TRANSACTION_NUMBER,     t.[SM_SEC_TYPE] as PRODUCT,    -- ref_q.[PRODUCT] as PRODUCT_REF, --Using for testing, will delete once happy with logic     NULL as DIFFERENCE_BPS,     t.[TRD_PRICE] as EXECUTED_RATE,     NULL as INDICATIVE_REF_RATE,     NULL as TOLERANCE,     max_qa.[MAX_QUOTE],     quotes_c.[QUOTES_OBTAINED] as NUM_QUOTES,     ref_q.[NO_OF_QUOTES_THRESHOLD],     0 as CRR_EXCEPTION, --No CRR Value for CP, CD and TBills as there is no Reuters Rate in Aladdin     CASE      WHEN pr.[Trade_TRAN_TYPE] like '%Buy%'         AND MAX(CASE WHEN COALESCE(t.TRD_EX_BROKER_CODE, t.[TRD_COUNTERPARTY]) != min_brk.[MIN_ABS_BROKER] THEN 1 ELSE 0 END) = 1        AND t.[TRD_STATUS] != 'C'        THEN 1      WHEN pr.[Trade_TRAN_TYPE] like '%Sell%'           AND MAX(CASE WHEN COALESCE(t.TRD_EX_BROKER_CODE, t.[TRD_COUNTERPARTY]) != max_brk.[MAX_ABS_BROKER] THEN 1 ELSE 0 END) = 1        AND t.[TRD_STATUS] != 'C'        THEN 1     ELSE 0     END AS NWQ_EXCEPTION,     CASE       WHEN quotes_c.[QUOTES_OBTAINED] < ref_q.[NO_OF_QUOTES_THRESHOLD]        AND t.[TRD_STATUS] != 'C'         THEN 1      ELSE 0     END AS B3Q_EXCEPTION,     'AL' as [DATA_SOURCE]    FROM VISTA_REPORTING.dbo.TRADES t    INNER JOIN #max_touch_trades MTT ON MTT.MAX_TCH = T.TOUCH_COUNT AND MTT.MULTI_FUND_ID = T.MULTI_FUND_ID    left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr    on pr.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]    left join #min_abs_broker min_brk    on t.[MULTI_FUND_ID] = min_brk.[MULTI_FUND_ID]    left join #max_abs_broker max_brk    on t.[MULTI_FUND_ID] = max_brk.[MULTI_FUND_ID]    left join #max_quote_a max_qa    on max_qa.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]    left join #quotes_calc quotes_c    on quotes_c.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]    left join VISTA_STAGING.dbo.REF_CASH_BESTEXC_QUOTES_THRESHOLD ref_q    on t.[SM_SEC_TYPE] = ref_q.[PRODUCT] AND CAST(t.[PULL_DATE] as DATE) BETWEEN CAST(ref_q.[DATE_FROM] as date) AND CAST(ref_q.[DATE_TO] as DATE)    WHERE pr.[DEALING_DESK] = 'CASH' AND t.[SM_SEC_TYPE] in ('CP','CD','TBILL') --Having to add this due to SM_SEC_TYPE error, need to discuss this    GROUP BY t.[MULTI_FUND_ID],       t.[SM_SEC_TYPE],       t.[TRD_STATUS],       pr.[Trade_TRAN_TYPE],       -- ref_q.[PRODUCT], --Using for testing, will delete once happy with logic       t.[TRD_PRICE],       max_qa.[MAX_QUOTE],       quotes_c.[QUOTES_OBTAINED],       ref_q.[NO_OF_QUOTES_THRESHOLD]        --Final Exceptions table for RR    IF OBJECT_ID('tempdb..#bestexrr_final', 'U') IS NOT NULL DROP TABLE #bestexrr_final    SELECT DISTINCT     rr.[TRANSACTION_NUMBER],     rr.[PRODUCT_GROUP_NAME],     rr.[EXECUTED_RATE],     rr.[AVERAGE_RATE],     rr.[NUM_QUOTES],     rr.[EXCEPTION_FLAG] as VG_607_RR,     CASE      WHEN rr.[EXCEPTION_FLAG] = 1 THEN GETDATE()     ELSE NULL     END AS VG_607_CREATETIME_RR,     rr.[DATA_SOURCE]    INTO #bestexrr_final    FROM #bestexrr_temp rr        --Final Exceptions table for MM    IF OBJECT_ID('tempdb..#bestexmm_final', 'U') IS NOT NULL DROP TABLE #bestexmm_final    SELECT DISTINCT     mm.[TRANSACTION_NUMBER],     mm.[PRODUCT],     mm.[DIFFERENCE_BPS],     mm.[EXECUTED_RATE],     mm.[INDICATIVE_REF_RATE],     mm.[MAX_QUOTE],     mm.[NUM_QUOTES],     mm.[NO_OF_QUOTES_THRESHOLD],     mm.[TOLERANCE],     mm.[CRR_EXCEPTION],     mm.[NWQ_EXCEPTION],     mm.[B3Q_EXCEPTION],     CASE      WHEN (mm.[NWQ_EXCEPTION] = 1 OR mm.[B3Q_EXCEPTION] = 1) THEN 1     ELSE 0     END AS VG_607_MM,     CASE      WHEN (mm.[NWQ_EXCEPTION] = 1 OR mm.[B3Q_EXCEPTION] = 1) THEN GETDATE()     ELSE NULL     END AS VG_607_CREATETIME_MM,     [DATA_SOURCE]    INTO #bestexmm_final    FROM #bestexmm_temp mm        -- ==============================================================================    /* Adding to FINAL_STATUS_UPDATE_TABLE */    -- ==============================================================================        --Add RR records into FINAL_STATUS_UPDATE_TABLE    IF OBJECT_ID('tempdb..#temp_status_table_rr', 'U') IS NOT NULL DROP TABLE #temp_status_table_rr    SELECT DISTINCT     CONCAT(TRANSACTION_NUMBER,'_607','_CM') AS ID,     '1A2' AS STATUS,     NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table_rr    FROM #bestexrr_final    WHERE VG_607_RR != 0        MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table_rr AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'CASH',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'CASH');        --Add MM records into FINAL_STATUS_UPDATE_TABLE    IF OBJECT_ID('tempdb..#temp_status_table_mm', 'U') IS NOT NULL DROP TABLE #temp_status_table_mm    SELECT DISTINCT     CASE       WHEN [DATA_SOURCE] = 'AL' THEN CONCAT(TRANSACTION_NUMBER,'_607','_AL')      WHEN [DATA_SOURCE] = 'CM' THEN CONCAT(TRANSACTION_NUMBER,'_607','_CM')      END AS ID,     '1A3' AS STATUS,     NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table_mm    FROM #bestexmm_final    WHERE VG_607_MM != 0        MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table_mm AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'CASH',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'CASH');        -- ==============================================================================    /* Adding to AUDIT_TABLE_CASH */    -- ==============================================================================        --Add RR records into AUDIT_TABLE_CASH    IF OBJECT_ID('tempdb..#temp_audit_rr', 'U') IS NOT NULL DROP TABLE #temp_audit_rr    SELECT DISTINCT     rrf.[TRANSACTION_NUMBER] AS TRANSACTION_NUMBER,     NULL AS TRD_ORD,     ct.[ORDER_ID] AS ORDER_ID,     'Best Execution' AS Exception_Type,     CONCAT(rrf.[TRANSACTION_NUMBER],'_607','_CM') AS ID,     NULL AS REASON,     NULL AS COMMENT,     'With Reviewer' AS Status,     NULL AS ClientExecID,     'Cash' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     COALESCE(ct.[DEALER_NAME_DECODE],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) AS DEALER,     '1A2' AS STATUS_ID,     co.[INSTRUCTION_RECEIVED_DATE] AS ORD_AUTH,     ct.[EXECUTED_DATETIME] AS TRADE_EXEC    INTO #temp_audit_rr    FROM #bestexrr_final rrf    left join (SELECT DISTINCT TRANSACTION_NUMBER, ORDER_ID, EXECUTED_DATETIME, PRODUCT_TYPE, DEALER_NAME_DECODE, PULL_DATE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct    on rrf.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]    left join (SELECT DISTINCT ORDER_ID, MIN(INSTRUCTION_RECEIVED_DATE) as INSTRUCTION_RECEIVED_DATE, ACCEPTED_BY, INSTRUCTED_BY, PULL_DATE FROM VISTA_REPORTING.dbo.CASH_ORDERS GROUP BY ORDER_ID, PULL_DATE, ACCEPTED_BY, INSTRUCTED_BY) co    on ct.[ORDER_ID] = co.[ORDER_ID]    LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD2 ON (TDD2.MG_USER_ID  = COALESCE(CO.ACCEPTED_BY, CO.INSTRUCTED_BY) AND rrf.DATA_SOURCE = 'CM') AND CAST(CO.PULL_DATE AS DATE) BETWEEN CAST(TDD2.DATE_FROM AS DATE) AND CAST(TDD2.DATE_TO AS DATE)    LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'Best Execution RR' and ct.PRODUCT_TYPE = 'Repo / Rev Repo Products'                    AND CAST(COALESCE(ct.PULL_DATE,co.[PULL_DATE]) AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)    WHERE rrf.[VG_607_RR] = 1         MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_CASH AS T    USING #temp_audit_rr AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);        --------------------------------------    --Add MM records into AUDIT_TABLE_CASH    IF OBJECT_ID('tempdb..#temp_audit_mm', 'U') IS NOT NULL DROP TABLE #temp_audit_mm    SELECT DISTINCT     CASE       WHEN mmf.[DATA_SOURCE] = 'AL' THEN mmf.[TRANSACTION_NUMBER]      WHEN mmf.[DATA_SOURCE] = 'CM' THEN mmf.[TRANSACTION_NUMBER]     END AS TRANSACTION_NUMBER,     CASE       WHEN mmf.[DATA_SOURCE] = 'AL' THEN t.[ORD_NUM]      ELSE NULL      END AS TRD_ORD,      CASE       WHEN mmf.[DATA_SOURCE] = 'AL' THEN oc.[PM_ORD]      WHEN mmf.[DATA_SOURCE] = 'CM' THEN ct.[ORDER_ID]     END AS ORDER_ID,     'Best Execution' AS Exception_Type,     CASE       WHEN mmf.[DATA_SOURCE] = 'AL' THEN CONCAT(mmf.[TRANSACTION_NUMBER],'_607','_AL')      WHEN mmf.[DATA_SOURCE] = 'CM' THEN CONCAT(mmf.[TRANSACTION_NUMBER],'_607','_CM')      END AS ID,     NULL AS REASON,     NULL AS COMMENT,     'With Dealer' AS Status,     NULL AS ClientExecID,     'Cash' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) AS DEALER,     '1A3' AS STATUS_ID,     CASE       WHEN mmf.[DATA_SOURCE] = 'AL' THEN trd_o.[AUTH_TIME]      WHEN mmf.[DATA_SOURCE] = 'CM' THEN co.[INSTRUCTION_RECEIVED_DATE]      END AS ORD_AUTH,     CASE       WHEN mmf.[DATA_SOURCE] = 'AL' THEN t.[EXECUTION_TIME]       WHEN mmf.[DATA_SOURCE] = 'CM' THEN ct.[EXECUTED_DATETIME]      END AS TRADE_EXEC    INTO #temp_audit_mm    FROM #bestexmm_final mmf    left join (SELECT DISTINCT TRANSACTION_NUMBER, ORDER_ID, EXECUTED_DATETIME, DEALER_NAME_DECODE, DEALER_NAME, PULL_DATE, PRODUCT_TYPE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct    on mmf.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]    left join (SELECT DISTINCT ORDER_ID, MIN(INSTRUCTION_RECEIVED_DATE) as INSTRUCTION_RECEIVED_DATE, ACCEPTED_BY, INSTRUCTED_BY, PULL_DATE FROM VISTA_REPORTING.dbo.CASH_ORDERS GROUP BY ORDER_ID, ACCEPTED_BY, INSTRUCTED_BY, PULL_DATE) co    on ct.[ORDER_ID] = co.[ORDER_ID]    left join (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER, PULL_DATE FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t    ON mmf.[DATA_SOURCE] = 'AL' AND mmf.[TRANSACTION_NUMBER] = t.[MULTI_FUND_ID]    left join (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o    ON t.[ORD_NUM] = trd_o.[ORD_NUM]     left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc    ON trd_o.[ORD_NUM] = oc.[TRD_ORD]    left join (SELECT DISTINCT ORD_NUM, TRADER, PULL_DATE FROM VISTA_REPORTING.dbo.PM_ORDERS) pm    on oc.[PM_ORD] = pm.[ORD_NUM]    LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD     ON (TDD.DEALING_DESK = 'CASH' AND TDD.[MG_USER_ID] = ct.[DEALER_NAME] AND mmf.[DATA_SOURCE] = 'CM' AND CAST(ct.PULL_DATE AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE))     OR (TDD.DEALING_DESK = 'CASH' AND TDD.[INITIALS] = t.TRD_TRADER AND mmf.[DATA_SOURCE] = 'AL' AND  CAST(T.PULL_DATE AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE))     LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD2 ON ((TDD2.MG_USER_ID  = COALESCE(CO.ACCEPTED_BY, CO.INSTRUCTED_BY) AND mmf.[DATA_SOURCE] = 'CM') OR (TDD2.INITIALS = PM.TRADER AND mmf.[DATA_SOURCE] = 'AL')) AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE) AS DATE) BETWEEN CAST(TDD2.DATE_FROM AS DATE) AND CAST(TDD2.DATE_TO AS DATE)    LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'Best Execution MM' and (ct.PRODUCT_TYPE = 'Cash Products' or mmf.[DATA_SOURCE]= 'al')                    AND CAST(COALESCE(ct.PULL_DATE, t.PULL_DATE,co.[PULL_DATE],pm.[PULL_DATE]) AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)        WHERE mmf.[VG_607_MM] = 1        MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_CASH AS T    USING #temp_audit_mm AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);        -- ==============================================================================    /* Update Exceptions Table */    -- ==============================================================================        --Update RR Exceptions Table    IF      OBJECT_ID('VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_RR_TABLE', 'U') IS NULL     SELECT *      INTO VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_RR_TABLE      FROM #bestexrr_final    ELSE      IF OBJECT_ID('tempdb..#temp_CP_table_rr', 'U') IS NOT NULL      DROP TABLE #temp_CP_table_rr     SELECT *      INTO #temp_CP_table_rr     FROM #bestexrr_final        MERGE VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_RR_TABLE AS T     USING #temp_CP_table_rr AS S    ON (T.TRANSACTION_NUMBER = S.TRANSACTION_NUMBER AND T.[DATA_SOURCE] = S.[DATA_SOURCE])    WHEN MATCHED     THEN UPDATE     SET      [TRANSACTION_NUMBER] = CASE WHEN S.VG_607_RR > T.VG_607_RR THEN S.[TRANSACTION_NUMBER] ELSE T.[TRANSACTION_NUMBER] END,     [PRODUCT_GROUP_NAME] = CASE WHEN S.VG_607_RR > T.VG_607_RR THEN S.[PRODUCT_GROUP_NAME] ELSE T.[PRODUCT_GROUP_NAME] END,     [EXECUTED_RATE] = CASE WHEN S.VG_607_RR > T.VG_607_RR THEN S.[EXECUTED_RATE] ELSE T.[EXECUTED_RATE] END,     [AVERAGE_RATE] = CASE WHEN S.VG_607_RR > T.VG_607_RR THEN S.[AVERAGE_RATE] ELSE T.[AVERAGE_RATE] END,     [NUM_QUOTES] = CASE WHEN S.VG_607_RR > T.VG_607_RR THEN S.[NUM_QUOTES] ELSE T.[NUM_QUOTES] END,     [VG_607_RR] = CASE WHEN S.VG_607_RR > T.VG_607_RR THEN S.[VG_607_RR] ELSE T.[VG_607_RR] END,     [VG_607_CREATETIME_RR] = CASE WHEN S.VG_607_RR > T.VG_607_RR THEN S.[VG_607_CREATETIME_RR] ELSE T.[VG_607_CREATETIME_RR] END,     [DATA_SOURCE] = CASE WHEN S.VG_607_RR > T.VG_607_RR THEN S.[DATA_SOURCE] ELSE T.[DATA_SOURCE] END        WHEN NOT MATCHED     THEN     INSERT     ([TRANSACTION_NUMBER],     [PRODUCT_GROUP_NAME],     [EXECUTED_RATE],     [AVERAGE_RATE],     [NUM_QUOTES],     [VG_607_RR],     [VG_607_CREATETIME_RR],     [DATA_SOURCE])         VALUES     (S.[TRANSACTION_NUMBER],     S.[PRODUCT_GROUP_NAME],     S.[EXECUTED_RATE],     S.[AVERAGE_RATE],     S.[NUM_QUOTES],     S.[VG_607_RR],     S.[VG_607_CREATETIME_RR],     S.[DATA_SOURCE]) ;        -----------------------------    --Update MM Exceptions Table    IF      OBJECT_ID('VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE', 'U') IS NULL     SELECT *      INTO VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE      FROM #bestexmm_final    ELSE      IF OBJECT_ID('tempdb..#temp_CP_table_mm', 'U') IS NOT NULL      DROP TABLE #temp_CP_table_mm     SELECT *      INTO #temp_CP_table_mm     FROM #bestexmm_final            MERGE VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_CASH_MM_TABLE AS T     USING #temp_CP_table_mm AS S    ON (T.TRANSACTION_NUMBER = S.TRANSACTION_NUMBER AND T.[DATA_SOURCE] = S.[DATA_SOURCE])    WHEN MATCHED     THEN UPDATE     SET      [TRANSACTION_NUMBER] = CASE WHEN S.VG_607_MM > T.VG_607_MM THEN S.[TRANSACTION_NUMBER] ELSE T.[TRANSACTION_NUMBER] END,     [PRODUCT] = CASE WHEN S.VG_607_MM > T.VG_607_MM THEN S.[PRODUCT] ELSE T.[PRODUCT] END,     [DIFFERENCE_BPS] = CASE WHEN S.VG_607_MM > T.VG_607_MM THEN S.[DIFFERENCE_BPS] ELSE T.[DIFFERENCE_BPS] END,     [EXECUTED_RATE] = CASE WHEN S.VG_607_MM > T.VG_607_MM THEN S.[EXECUTED_RATE] ELSE T.[EXECUTED_RATE] END,     [INDICATIVE_REF_RATE] = CASE WHEN S.VG_607_MM > T.VG_607_MM THEN S.[INDICATIVE_REF_RATE] ELSE T.[INDICATIVE_REF_RATE] END,     [MAX_QUOTE] = CASE WHEN S.VG_607_MM > T.VG_607_MM THEN S.[MAX_QUOTE] ELSE T.[MAX_QUOTE] END,     [NUM_QUOTES] = CASE WHEN S.VG_607_MM > T.VG_607_MM THEN S.[NUM_QUOTES] ELSE T.[NUM_QUOTES] END,     [TOLERANCE] = CASE WHEN S.VG_607_MM > T.VG_607_MM THEN S.[TOLERANCE] ELSE T.[TOLERANCE] END,     [NO_OF_QUOTES_THRESHOLD] = CASE WHEN S.VG_607_MM > T.VG_607_MM THEN S.[NO_OF_QUOTES_THRESHOLD] ELSE T.[NO_OF_QUOTES_THRESHOLD] END,     [CRR_EXCEPTION] = CASE WHEN S.[CRR_EXCEPTION] > T.[CRR_EXCEPTION] THEN S.[CRR_EXCEPTION] ELSE T.[CRR_EXCEPTION] END,     [NWQ_EXCEPTION] = CASE WHEN S.[NWQ_EXCEPTION] > T.[NWQ_EXCEPTION] THEN S.[NWQ_EXCEPTION] ELSE T.[NWQ_EXCEPTION] END,     [B3Q_EXCEPTION] = CASE WHEN S.[B3Q_EXCEPTION] > T.[B3Q_EXCEPTION] THEN S.[B3Q_EXCEPTION] ELSE T.[B3Q_EXCEPTION] END,     [VG_607_MM] = CASE WHEN S.VG_607_MM > T.VG_607_MM THEN S.[VG_607_MM] ELSE T.[VG_607_MM] END,     [VG_607_CREATETIME_MM] = CASE WHEN S.VG_607_MM > T.VG_607_MM THEN S.[VG_607_CREATETIME_MM] ELSE T.[VG_607_CREATETIME_MM] END,     [DATA_SOURCE] = CASE WHEN S.VG_607_MM > T.VG_607_MM THEN S.[DATA_SOURCE] ELSE T.[DATA_SOURCE] END        WHEN NOT MATCHED     THEN     INSERT     ([TRANSACTION_NUMBER],     [PRODUCT],     [DIFFERENCE_BPS],     [EXECUTED_RATE],     [INDICATIVE_REF_RATE],     [MAX_QUOTE],     [NUM_QUOTES],     [NO_OF_QUOTES_THRESHOLD],     [TOLERANCE],     [CRR_EXCEPTION],     [NWQ_EXCEPTION],     [B3Q_EXCEPTION],     [VG_607_MM],     [VG_607_CREATETIME_MM],     [DATA_SOURCE])         VALUES     (S.[TRANSACTION_NUMBER],     S.[PRODUCT],     S.[DIFFERENCE_BPS],     S.[EXECUTED_RATE],     S.[INDICATIVE_REF_RATE],     S.[MAX_QUOTE],     S.[NUM_QUOTES],     S.[NO_OF_QUOTES_THRESHOLD],     S.[TOLERANCE],     S.[CRR_EXCEPTION],     S.[NWQ_EXCEPTION],     S.[B3Q_EXCEPTION],     S.[VG_607_MM],     S.[VG_607_CREATETIME_MM],     S.[DATA_SOURCE]) ;        IF OBJECT_ID('tempdb..#max_quote_c', 'U') IS NOT NULL DROP TABLE #max_quote_c    IF OBJECT_ID('tempdb..#max_quote_a', 'U') IS NOT NULL DROP TABLE #max_quote_a    IF OBJECT_ID('tempdb..#quotes_calc', 'U') IS NOT NULL DROP TABLE #quotes_calc    IF OBJECT_ID('tempdb..#bestexrr_temp', 'U') IS NOT NULL DROP TABLE #bestexrr_temp    IF OBJECT_ID('tempdb..#bestexmm_temp', 'U') IS NOT NULL DROP TABLE #bestexmm_temp    IF OBJECT_ID('tempdb..#bestexrr_final', 'U') IS NOT NULL DROP TABLE #bestexrr_final    IF OBJECT_ID('tempdb..#bestexmm_final', 'U') IS NOT NULL DROP TABLE #bestexmm_final    IF OBJECT_ID('tempdb..#temp_status_table_rr', 'U') IS NOT NULL DROP TABLE #temp_status_table_rr    IF OBJECT_ID('tempdb..#temp_status_table_mm', 'U') IS NOT NULL DROP TABLE #temp_status_table_mm    IF OBJECT_ID('tempdb..#temp_audit_rr', 'U') IS NOT NULL DROP TABLE #temp_audit_rr    IF OBJECT_ID('tempdb..#temp_audit_mm', 'U') IS NOT NULL DROP TABLE #temp_audit_mm    IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades            END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_607_BEST_EXECUTION_FX  CreateDate: 2025-06-26 17:36:53.213  ModifyDate: 2025-06-26 17:36:53.213  --- DEFINITION START ---  -- =============================================    -- Author:  <Samad, Mehreen>    -- Create date: <01/07/2019>    -- Description:     -- <Details all trades highlighting exceptions    -- breaching the best execution policy NWQ &     -- B3Q exception tests. SRR exceptions are     -- view only for MI. SRR EXCEPTION LOGIC ALSO INCLUDED HERE>    -- =============================================        -- ***************VERSION CONTROL***************    --2021-10-20, Matej Miter created for Jira:    --T-0-18074 - Added additionasl join to losing bank in order to capture Profit or loss from losing banks into NWQ calculations    -- *********************************************        CREATE PROCEDURE [dbo].[VG_607_BEST_EXECUTION_FX]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        --Counting No of Quotes for FX    IF OBJECT_ID('tempdb..#countquotes_fx', 'U') IS NOT NULL DROP TABLE #countquotes_fx    SELECT DISTINCT     fxt.[TRADE_ID],     fxt.[LOSING_BANK_COUNT],     fxt.[EXECUTED_BANK],     ([LOSING_BANK_COUNT] + COUNT(DISTINCT EXECUTED_BANK) ) as NO_OF_QUOTES    INTO #countquotes_fx    FROM VISTA_REPORTING.dbo.FX_TRADES fxt    GROUP BY fxt.[TRADE_ID],       fxt.[LOSING_BANK_COUNT],       fxt.[EXECUTED_BANK]        --Calculate the quote counterparties associated to the min(abs(quote value))    IF OBJECT_ID('tempdb..#min_abs_broker', 'U') IS NOT NULL DROP TABLE #min_abs_broker    SELECT      q.[MULTI_FUND_ID],     q.[QUOTE_VALUE],     cp.[BROKER_TICKER] AS MIN_ABS_BROKER,     cp.[COUNTERPARTY_CODE],     q2.[MIN_QUOTE]    INTO #min_abs_broker    FROM VISTA_REPORTING.dbo.QUOTES q    LEFT JOIN (SELECT DISTINCT         [BROKER_TICKER],         [COUNTERPARTY_CODE]          FROM VISTA_REPORTING.dbo.COUNTERPARTIES) cp    on q.[BROKER] = cp.[COUNTERPARTY_CODE]    inner join (SELECT         [MULTI_FUND_ID],                     MIN(NULLIF([QUOTE_VALUE],0)) AS MIN_QUOTE                FROM VISTA_REPORTING.dbo.QUOTES       WHERE QUOTE_ORIGIN = 'QUOTE'                GROUP BY [MULTI_FUND_ID]) q2    on q.[MULTI_FUND_ID] = q2.[MULTI_FUND_ID] AND ABS(q.[QUOTE_VALUE]) = q2.[MIN_QUOTE]    where q.QUOTE_ORIGIN = 'QUOTE'        --Calculate the quote counterparties associated to the max(abs(quote value))    IF OBJECT_ID('tempdb..#max_abs_broker', 'U') IS NOT NULL DROP TABLE #max_abs_broker    SELECT      q.[MULTI_FUND_ID],     q.[QUOTE_VALUE],     cp.[BROKER_TICKER] AS MAX_ABS_BROKER,     cp.[COUNTERPARTY_CODE],     q2.[MAX_QUOTE]    INTO #max_abs_broker    FROM VISTA_REPORTING.dbo.QUOTES q    LEFT JOIN (SELECT DISTINCT         [BROKER_TICKER],         [COUNTERPARTY_CODE]          FROM VISTA_REPORTING.dbo.COUNTERPARTIES) cp    on q.[BROKER] = cp.[COUNTERPARTY_CODE]    inner join (SELECT         [MULTI_FUND_ID],                     MAX(NULLIF([QUOTE_VALUE],0)) AS MAX_QUOTE                FROM VISTA_REPORTING.dbo.QUOTES       WHERE QUOTE_ORIGIN = 'QUOTE'                GROUP BY [MULTI_FUND_ID]) q2    on q.[MULTI_FUND_ID] = q2.[MULTI_FUND_ID] AND ABS(q.[QUOTE_VALUE]) = q2.[MAX_QUOTE]    where q.QUOTE_ORIGIN = 'QUOTE'        --Obtain Quotes Requested and Quotes Obtained for Aladdin    IF OBJECT_ID('tempdb..#quotes_calc_al', 'U') IS NOT NULL DROP TABLE #quotes_calc_al    SELECT DISTINCT      q.[MULTI_FUND_ID],     (SELECT       COUNT(DISTINCT [BROKER])       FROM VISTA_REPORTING.dbo.QUOTES      WHERE ISNULL(QUOTE_VALUE, 0) != 0         AND MULTI_FUND_ID = q.[MULTI_FUND_ID]) as QUOTES_OBTAINED, --Count distinct BROKER where QUOTE_VALUE is NOT NULL or 0     COUNT(DISTINCT [BROKER]) as QUOTES_REQUESTED --A quote is required for every MULTI_FUND_ID    INTO #quotes_calc_al    FROM VISTA_REPORTING.dbo.QUOTES q    GROUP BY q.[MULTI_FUND_ID]        --Calculating Spot difference and threshold exceptions    IF OBJECT_ID('tempdb..#spot_diff', 'U') IS NOT NULL DROP TABLE #spot_diff    SELECT DISTINCT      fxt.[TRADE_ID],     fxt.[SPOT_RATE],     fxt.[SPOT_RATE_FAR],     fxt.[MARKET_ARRIVAL_INDICATIVE_SPOT_FAR_PRICE],     fxt.[MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE],     fxt.[BUY_CCY],     fxt.[BUY_CCY_LEG2],     fxt.[SELL_CCY],     fxt.[SELL_CCY_LEG2],     fxt.[BASE_CCY],     fxt.[CONTRA_CCY],     fxt.[NOTIONAL_CCY] as INSTRUCTED_CCY,     fxt.[ACTION1],     fxt.[ACTION2],     ref_spotn.[SPOT_TOLERANCE_THRESHOLD],     ref_spotf.[SPOT_TOLERANCE_THRESHOLD] as SPOT_TOLERANCE_THRESHOLD_LEG2,     CASE      WHEN fxt.[NOTIONAL_CCY]  = fxt.[BASE_CCY] AND fxt.[NOTIONAL_AMOUNT_FAR] IS NOT NULL AND fxt.[NOTIONAL_AMOUNT]  > fxt.[NOTIONAL_AMOUNT_FAR] THEN ACTION1       WHEN fxt.[NOTIONAL_CCY]  = fxt.[BASE_CCY] AND fxt.[NOTIONAL_AMOUNT_FAR] IS NOT NULL AND fxt.[NOTIONAL_AMOUNT]  = fxt.[NOTIONAL_AMOUNT_FAR] THEN 'SELL' --Change request received on 20082019 (prior to go-live)      WHEN fxt.[NOTIONAL_CCY]  = fxt.[BASE_CCY] AND fxt.[NOTIONAL_AMOUNT_FAR] IS NOT NULL AND fxt.[NOTIONAL_AMOUNT]  < fxt.[NOTIONAL_AMOUNT_FAR] THEN ACTION2      WHEN fxt.[NOTIONAL_CCY] != fxt.[BASE_CCY] AND fxt.[NOTIONAL_AMOUNT_FAR] IS NOT NULL AND fxt.[NOTIONAL_AMOUNT]  < fxt.[NOTIONAL_AMOUNT_FAR] THEN ACTION1      WHEN fxt.[NOTIONAL_CCY] != fxt.[BASE_CCY] AND fxt.[NOTIONAL_AMOUNT_FAR] IS NOT NULL AND fxt.[NOTIONAL_AMOUNT]  = fxt.[NOTIONAL_AMOUNT_FAR] THEN 'BUY'--Change request received on 20082019 (prior to go-live)      WHEN fxt.[NOTIONAL_CCY] != fxt.[BASE_CCY] AND fxt.[NOTIONAL_AMOUNT_FAR] IS NOT NULL AND fxt.[NOTIONAL_AMOUNT]  > fxt.[NOTIONAL_AMOUNT_FAR] THEN ACTION2     ELSE NULL     END AS DEALT_SIDE_SWAP,     100.0*(fxt.[MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE] - fxt.[SPOT_RATE])/NULLIF(fxt.[MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE],0) as SPOT_DIFFERENCE_NEAR,     100.0*(fxt.[MARKET_ARRIVAL_INDICATIVE_SPOT_FAR_PRICE]  - fxt.[SPOT_RATE_FAR])/NULLIF(fxt.[MARKET_ARRIVAL_INDICATIVE_SPOT_FAR_PRICE],0) as SPOT_DIFFERENCE_FAR    INTO #spot_diff    FROM VISTA_REPORTING.dbo.FX_TRADES fxt    left join VISTA_STAGING.DBO.REF_FX_SPOT_TOLERANCE_THRESHOLD ref_spotn    on fxt.[BUY_CCY] = ref_spotn.[BASE_CCY] and fxt.[SELL_CCY] = ref_spotn.[CONTRA_CCY]     AND CAST(fxt.[PULL_DATE] AS DATE) BETWEEN CAST(ref_spotn.[DATE_FROM] AS DATE) AND CAST(ref_spotn.[DATE_TO] AS DATE)    left join VISTA_STAGING.DBO.REF_FX_SPOT_TOLERANCE_THRESHOLD ref_spotf     on fxt.[BUY_CCY_LEG2] = ref_spotf.[BASE_CCY] AND fxt.[SELL_CCY_LEG2] = ref_spotf.[CONTRA_CCY]     AND CAST(fxt.[PULL_DATE] AS DATE) BETWEEN CAST(ref_spotf.[DATE_FROM] AS DATE) AND CAST(ref_spotf.[DATE_TO] AS DATE)        IF OBJECT_ID('tempdb..#dealt_side', 'U') IS NOT NULL DROP TABLE #dealt_side    SELECT DISTINCT     TRADE_ID,     BASE_CCY,     INSTRUCTED_CCY,     SPOT_RATE,     SPOT_DIFFERENCE_NEAR,     SPOT_DIFFERENCE_FAR,     SPOT_TOLERANCE_THRESHOLD,     SPOT_TOLERANCE_THRESHOLD_LEG2,     MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE,     MARKET_ARRIVAL_INDICATIVE_SPOT_FAR_PRICE,     CASE       WHEN ABS(SPOT_DIFFERENCE_NEAR) > SPOT_TOLERANCE_THRESHOLD THEN 1      ELSE 0      END AS THRESHOLD_EXCEPTION,     CASE       WHEN ABS(SPOT_DIFFERENCE_FAR) > SPOT_TOLERANCE_THRESHOLD_LEG2 THEN 1      ELSE 0      END AS THRESHOLD_FAR_EXCEPTION,     CASE       WHEN DEALT_SIDE_SWAP IS NULL THEN ACTION1      ELSE DEALT_SIDE_SWAP      END AS DEALT_SIDE    INTO #dealt_side    FROM #spot_diff         IF OBJECT_ID('tempdb..#spot_wdealt', 'U') IS NOT NULL DROP TABLE #spot_wdealt    SELECT DISTINCT      TRADE_ID,     THRESHOLD_EXCEPTION,     THRESHOLD_FAR_EXCEPTION,     SPOT_DIFFERENCE_NEAR,     SPOT_DIFFERENCE_FAR,     SPOT_TOLERANCE_THRESHOLD,     SPOT_TOLERANCE_THRESHOLD_LEG2,     CASE       WHEN BASE_CCY  = INSTRUCTED_CCY AND DEALT_SIDE = 'BUY'  AND MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE > SPOT_RATE THEN 1      WHEN BASE_CCY != INSTRUCTED_CCY AND DEALT_SIDE = 'SELL' AND MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE > SPOT_RATE THEN 1      WHEN BASE_CCY  = INSTRUCTED_CCY AND DEALT_SIDE = 'SELL' AND MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE < SPOT_RATE THEN 1      WHEN BASE_CCY != INSTRUCTED_CCY AND DEALT_SIDE = 'BUY'  AND MARKET_ARRIVAL_INDICATIVE_SPOT_NEAR_PRICE < SPOT_RATE THEN 1     ELSE 0      END AS DEALT_SIDE_EXCEPTIONS    INTO #spot_wdealt    FROM #dealt_side        --SRR Exceptions final table    IF OBJECT_ID('tempdb..#spot_ex', 'U') IS NOT NULL DROP TABLE #spot_ex    SELECT DISTINCT     TRADE_ID,     SPOT_DIFFERENCE_NEAR,     SPOT_DIFFERENCE_FAR,     SPOT_TOLERANCE_THRESHOLD,     SPOT_TOLERANCE_THRESHOLD_LEG2,     THRESHOLD_EXCEPTION,     THRESHOLD_FAR_EXCEPTION,     DEALT_SIDE_EXCEPTIONS,     CASE       WHEN (THRESHOLD_EXCEPTION = 1 OR THRESHOLD_FAR_EXCEPTION = 1) AND DEALT_SIDE_EXCEPTIONS = 0 THEN 1      ELSE 0      END AS SRR_EXCEPTION    INTO #spot_ex    FROM #spot_wdealt        --Calculating NWQ & B3Q Exceptions for FXM    IF OBJECT_ID('tempdb..#best_ex_fx', 'U') IS NOT NULL DROP TABLE #best_ex_fx    SELECT DISTINCT     fxt.[TRADE_ID],     fxo.[FXM_ORDER_ID],     fxt.[PROFIT_OR_LOSS], --Field also called PROFIT_OR_LOSS2 (?)     fxt.[PRICE_REASON],     fxo.[MARKER],     fxt.[EXC_SESSION_TYPE],     fxt.[FR_LEG_PRODUCT],     fxt.[NR_LEG_PRODUCT],     fxo.[INSTRUCTION_TYPE],     ISNULL(ref_q.[NO_QUOTES_THRESHOLD], 3) as [NO_QUOTES_THRESHOLD],     q_fx.[NO_OF_QUOTES],     CASE      WHEN fxo.TRADE_VENUE in ('FX Manager','FX Connect') and (fxt.PRICE_REASON IS NOT NULL OR fxt.price_reason != '') THEN 1      --T-0-18074      WHEN fxo.TRADE_VENUE not in ('FX Manager','FX Connect') and lb.PL IS NOT NULL AND lb.PL < 0 THEN 1      WHEN fxo.TRADE_VENUE not in ('FX Manager','FX Connect') and fxt.[PROFIT_OR_LOSS] IS NULL AND CAST(NULLIF(fxt.[PRICE_REASON],'') AS VARCHAR(50)) IS NOT NULL THEN 1 --Price Reason field is currently showing numbers     ELSE 0     END AS NWQ_EXCEPTION,     CASE       WHEN q_fx.[NO_OF_QUOTES] < ISNULL(ref_q.[NO_QUOTES_THRESHOLD],3) THEN 1     ELSE 0     END AS B3Q_EXCEPTION,     spot_ex.[SRR_EXCEPTION],     'FX' as [DATA_SOURCE]    INTO #best_ex_fx    FROM VISTA_REPORTING.dbo.FX_TRADES fxt    left join VISTA_REPORTING.dbo.FX_ORDERS fxo    on fxo.[FXM_ORDER_ID] = fxt.[ORDER_ID]    left join (select min(PROFIT_OR_LOSS) as PL,Trade_ID from VISTA_REPORTING.dbo.FX_LOSING_BANKS group by Trade_id) lb    on fxt.Trade_id = lb.Trade_id    --End of T-0-18074    left join #countquotes_fx q_fx    on fxt.[TRADE_ID] = q_fx.[TRADE_ID]    left join #spot_ex spot_ex    on fxt.[TRADE_ID] = spot_ex.[TRADE_ID]    left join VISTA_STAGING.dbo.REF_FX_BESTEXC_QUOTES_THRESHOLD ref_q     on ref_q.[PRODUCT] = fxo.[INSTRUCTION_TYPE]     and ISNULL(ref_q.[MARKER], '') = ISNULL(fxo.[MARKER], '')    and ISNULL(ref_q.[SESSION_TYPE], '') = ISNULL(fxt.[EXC_SESSION_TYPE], '')    AND fxo.[PULL_DATE] BETWEEN ref_q.[DATE_FROM] AND ref_q.[DATE_TO]        --Calculating NWQ & B3Q Exceptions for Aladdin    IF OBJECT_ID('tempdb..#best_ex_al', 'U') IS NOT NULL DROP TABLE #best_ex_al    SELECT DISTINCT     t.[MULTI_FUND_ID],     t.[ORD_NUM],     t.[SM_SEC_TYPE] as INSTRUCTION_TYPE,     pr.[Trade_TRAN_TYPE],     t.[TRD_EX_BROKER_CODE],     t.[TRD_COUNTERPARTY],     min_brk.[MIN_ABS_BROKER],     max_brk.[MAX_ABS_BROKER],     q_al.[QUOTES_OBTAINED],     ref_q.[NO_QUOTES_THRESHOLD],     CASE      WHEN pr.[Trade_TRAN_TYPE] like '%Buy%'  AND COALESCE(t.TRD_EX_BROKER_CODE, t.[TRD_COUNTERPARTY]) != min_brk.[MIN_ABS_BROKER] AND t.TRD_STATUS != 'C' THEN 1      WHEN pr.[Trade_TRAN_TYPE] like '%Sell%' AND COALESCE(t.TRD_EX_BROKER_CODE, t.[TRD_COUNTERPARTY]) != max_brk.[MAX_ABS_BROKER] AND t.TRD_STATUS != 'C' THEN 1     ELSE 0     END AS NWQ_EXCEPTION,     CASE      WHEN q_al.[QUOTES_OBTAINED] < ref_q.[NO_QUOTES_THRESHOLD] AND t.TRD_STATUS != 'C' THEN 1     ELSE 0     END AS B3Q_EXCEPTION,     0 as [SRR_EXCEPTION], --No SRR for Aladdin      'AL' as [DATA_SOURCE]    INTO #best_ex_al    FROM VISTA_REPORTING.dbo.TRADES t    left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr    on t.[MULTI_FUND_ID] = pr.[MULTI_FUND_ID]    left join #min_abs_broker min_brk    on t.[MULTI_FUND_ID] = min_brk.[MULTI_FUND_ID]    left join #max_abs_broker max_brk    on t.[MULTI_FUND_ID] = max_brk.[MULTI_FUND_ID]    left join #quotes_calc_al q_al    on t.[MULTI_FUND_ID] = q_al.[MULTI_FUND_ID]    left join VISTA_STAGING.dbo.REF_FX_BESTEXC_QUOTES_THRESHOLD ref_q     on ref_q.[PRODUCT] = t.[SM_SEC_TYPE]     AND t.[PULL_DATE] BETWEEN ref_q.[DATE_FROM] AND ref_q.[DATE_TO]    WHERE pr.[DEALING_DESK] = 'FX'            --Calculating final exceptions table    IF OBJECT_ID('tempdb..#final_ex', 'U') IS NOT NULL DROP TABLE #final_ex    SELECT DISTINCT     ex.[TRADE_ID],     ex.[NO_OF_QUOTES],     ex.[NO_QUOTES_THRESHOLD],     ex.[NWQ_EXCEPTION],     ex.[B3Q_EXCEPTION],     ex.[SRR_EXCEPTION],     CASE      WHEN ex.[NWQ_EXCEPTION] = 1 OR ex.[B3Q_EXCEPTION] = 1 THEN 1     ELSE 0     END AS VG_607,     CASE      WHEN ex.[NWQ_EXCEPTION] = 1 OR ex.[B3Q_EXCEPTION] = 1 THEN GETDATE()     ELSE NULL     END AS VG_607_CREATETIME,     ex.[DATA_SOURCE]    INTO #final_ex    FROM #best_ex_fx ex    UNION    SELECT DISTINCT     al.[MULTI_FUND_ID],     al.[QUOTES_OBTAINED],     al.[NO_QUOTES_THRESHOLD],     al.[NWQ_EXCEPTION],     al.[B3Q_EXCEPTION],     al.[SRR_EXCEPTION],     CASE      WHEN al.[NWQ_EXCEPTION] = 1 OR al.[B3Q_EXCEPTION] = 1 THEN 1     ELSE 0     END AS VG_607,     CASE      WHEN al.[NWQ_EXCEPTION] = 1 OR al.[B3Q_EXCEPTION] = 1 THEN GETDATE()     ELSE NULL     END AS VG_607_CREATETIME,     al.[DATA_SOURCE]    FROM #best_ex_al al        -- ==============================================================================    /* Adding to FINAL_STATUS_UPDATE_TABLE */    -- ==============================================================================        --Add records into FINAL_STATUS_UPDATE_TABLE    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    SELECT DISTINCT     CONCAT(TRADE_ID,'_607_',[DATA_SOURCE]) AS ID,     '1A2' AS STATUS,     NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table    FROM #final_ex    WHERE VG_607 != 0        MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'FX',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'FX');        -- ==============================================================================    /* Adding to AUDIT_TABLE_CASH */    -- ==============================================================================            IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    SELECT DISTINCT     ex.[TRADE_ID] AS TRANSACTION_NUMBER,     CASE       WHEN ex.[DATA_SOURCE] = 'AL' THEN t.[ORD_NUM]       WHEN ex.[DATA_SOURCE] = 'FX' THEN fxo.[FXM_ORDER_ID]     ELSE NULL      END AS TRD_ORD,      CASE       WHEN ex.[DATA_SOURCE] = 'AL' THEN oc.[PM_ORD]      WHEN ex.[DATA_SOURCE] = 'FX' THEN fxo.[FXM_ORDER_ID]     END AS ORDER_ID,     'Best Execution' AS Exception_Type,     CONCAT(ex.[TRADE_ID],'_607_',[DATA_SOURCE]) AS ID,     NULL AS REASON,     NULL AS COMMENT,     'With Reviewer' AS Status,     NULL AS ClientExecID,     'FX' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],tdd3.[FULL_NAME],tdd4.[FULL_NAME],dd.[DEFAULT_DEALER]) AS DEALER,     '1A2' AS STATUS_ID,     CASE       WHEN ex.[DATA_SOURCE] = 'AL' THEN trd_o.[AUTH_TIME]      WHEN ex.[DATA_SOURCE] = 'FX' THEN fxo.[INSTRUCTION_RECEIVED_DATE_TIME]     END AS ORD_AUTH,     CASE       WHEN ex.[DATA_SOURCE] = 'AL' THEN t.[EXECUTION_TIME]       WHEN ex.[DATA_SOURCE] = 'FX' THEN fxt.[EXECUTED_DATE_TIME]     END AS TRADE_EXEC    INTO #temp_audit    FROM #final_ex ex    left join (SELECT DISTINCT TRADE_ID, ORDER_ID, EXECUTED_DATE_TIME, DEALT_BY, PULL_DATE,ACCEPTED_BY FROM VISTA_REPORTING.dbo.FX_TRADES) fxt    on ex.[TRADE_ID] = fxt.[TRADE_ID] and ex.[DATA_SOURCE] = 'FX'    left join (SELECT DISTINCT FXM_ORDER_ID, MIN(INSTRUCTION_RECEIVED_DATE_TIME) as INSTRUCTION_RECEIVED_DATE_TIME, MIN(PULL_DATE) AS PULL_DATE FROM VISTA_REPORTING.dbo.FX_ORDERS GROUP BY FXM_ORDER_ID) fxo    on fxt.[ORDER_ID] = fxo.[FXM_ORDER_ID] and ex.[DATA_SOURCE] = 'FX'    left join (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER, PULL_DATE FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t    ON ex.[DATA_SOURCE] = 'AL' AND ex.TRADE_ID = t.[MULTI_FUND_ID]    left join (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o    ON t.[ORD_NUM] = trd_o.[ORD_NUM]     left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc    ON trd_o.[ORD_NUM] = oc.[TRD_ORD]    LEFT JOIN (SELECT DISTINCT ORD_NUM, PULL_DATE, TRADER FROM Vista_Reporting.dbo.PM_ORDERS) pm    on pm.ORD_NUM = oc.PM_ORD    left join  VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd    on tdd.[MG_USER_ID] = fxt.[DEALT_BY] AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2    on tdd2.[MG_USER_ID] = fxt.[ACCEPTED_BY] AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)    left join VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd3    on tdd3.[INITIALS]  = t.[TRD_TRADER] AND CAST(t.[PULL_DATE] AS DATE) BETWEEN CAST(tdd3.[DATE_FROM] AS DATE) AND CAST(tdd3.[DATE_TO] AS DATE)    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd4    on tdd4.[INITIALS] = pm.[TRADER] AND CAST(pm.[PULL_DATE] AS DATE) BETWEEN CAST(tdd4.[DATE_FROM] AS DATE) AND CAST(tdd4.[DATE_TO] AS DATE)    left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd     on dd.[REPORT_NAME] = 'Best Execution' AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE],t.[PULL_DATE],pm.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)        WHERE ex.[VG_607] = 1        MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_FX AS T    USING #temp_audit AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);         -- ==============================================================================    /* Update Exceptions Table */    -- ==============================================================================        -----------------------------    --Update Exceptions Table    IF      OBJECT_ID('VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE', 'U') IS NULL     SELECT *      INTO VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE      FROM #final_ex    ELSE      IF OBJECT_ID('tempdb..#temp_CP_table', 'U') IS NOT NULL      DROP TABLE #temp_CP_table     SELECT *      INTO #temp_CP_table     FROM #final_ex        MERGE VISTA_STAGING.dbo.VG_607_BEST_EXECUTION_FX_TABLE AS T     USING #temp_CP_table AS S    ON (T.TRADE_ID = S.TRADE_ID AND T.[DATA_SOURCE] = S.[DATA_SOURCE])    WHEN MATCHED     THEN UPDATE     SET      [TRADE_ID] = CASE WHEN S.VG_607 > T.VG_607 THEN S.[TRADE_ID] ELSE T.[TRADE_ID] END,     [NO_OF_QUOTES] = CASE WHEN S.VG_607 > T.VG_607 THEN S.[NO_OF_QUOTES] ELSE T.[NO_OF_QUOTES] END,     [NO_QUOTES_THRESHOLD] = CASE WHEN S.VG_607 > T.VG_607 THEN S.[NO_QUOTES_THRESHOLD] ELSE T.[NO_QUOTES_THRESHOLD] END,     [NWQ_EXCEPTION] = CASE WHEN S.[NWQ_EXCEPTION] > T.[NWQ_EXCEPTION] THEN S.[NWQ_EXCEPTION] ELSE T.[NWQ_EXCEPTION] END,     [B3Q_EXCEPTION] = CASE WHEN S.[B3Q_EXCEPTION] > T.[B3Q_EXCEPTION] THEN S.[B3Q_EXCEPTION] ELSE T.[B3Q_EXCEPTION] END,     [SRR_EXCEPTION] = CASE WHEN S.[SRR_EXCEPTION] > T.[SRR_EXCEPTION] THEN S.[SRR_EXCEPTION] ELSE T.[SRR_EXCEPTION] END,     [VG_607] = CASE WHEN S.VG_607 > T.VG_607 THEN S.[VG_607] ELSE T.[VG_607] END,     [VG_607_CREATETIME] = CASE WHEN S.VG_607 > T.VG_607 THEN S.[VG_607_CREATETIME] ELSE T.[VG_607_CREATETIME] END,     [DATA_SOURCE] = CASE WHEN S.VG_607 > T.VG_607 THEN S.[DATA_SOURCE] ELSE T.[DATA_SOURCE] END        WHEN NOT MATCHED     THEN     INSERT     ([TRADE_ID],     [NO_OF_QUOTES],     [NO_QUOTES_THRESHOLD],     [NWQ_EXCEPTION],     [B3Q_EXCEPTION],     [SRR_EXCEPTION],     [VG_607],     [VG_607_CREATETIME],     [DATA_SOURCE])         VALUES     (S.[TRADE_ID],     S.[NO_OF_QUOTES],     S.[NO_QUOTES_THRESHOLD],     S.[NWQ_EXCEPTION],     S.[B3Q_EXCEPTION],     S.[SRR_EXCEPTION],     S.[VG_607],     S.[VG_607_CREATETIME],     S.[DATA_SOURCE]) ;                --SRR UPDATES AND STAGING TABLES        --Calculating final exceptions table    IF OBJECT_ID('tempdb..#final_ex_SRR', 'U') IS NOT NULL DROP TABLE #final_ex_SRR    SELECT DISTINCT     ex.[TRADE_ID],     ex.[DATA_SOURCE] AS SOURCE,     CASE      WHEN ex.[SRR_EXCEPTION] = 1 AND ex.[B3Q_EXCEPTION] = 0 AND ex.NWQ_EXCEPTION = 0 THEN 1     ELSE 0     END AS VG_501,     CASE      WHEN ex.[SRR_EXCEPTION] = 1 AND ex.[B3Q_EXCEPTION] = 0 AND ex.NWQ_EXCEPTION = 0 THEN GETDATE()     ELSE NULL     END AS VG_501_CREATETIME    INTO #final_ex_SRR    FROM #best_ex_fx ex    UNION    SELECT DISTINCT     al.[MULTI_FUND_ID],     al.[DATA_SOURCE] AS SOURCE,     CASE      WHEN al.[SRR_EXCEPTION] = 1 AND al.[B3Q_EXCEPTION] = 0 AND al.NWQ_EXCEPTION = 0 THEN 1     ELSE 0     END AS VG_501,     CASE      WHEN al.[SRR_EXCEPTION] = 1 AND al.[B3Q_EXCEPTION] = 0 AND al.NWQ_EXCEPTION = 0  THEN GETDATE()     ELSE NULL     END AS VG_501_CREATETIME    FROM #best_ex_al al            --Add records into FINAL_STATUS_UPDATE_TABLE    IF OBJECT_ID('tempdb..#temp_status_table_SRR', 'U') IS NOT NULL DROP TABLE #temp_status_table_SRR    SELECT DISTINCT     CASE WHEN SOURCE = 'AL' THEN CONCAT(TRADE_ID, '_501', '_AL')     WHEN SOURCE = 'FX' THEN CONCAT(TRADE_ID, '_501', '_FX') END AS ID,     '1A2' AS STATUS,     NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table_SRR    FROM #final_ex_SRR    WHERE VG_501 = 1        MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table_SRR AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'FX',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'FX');        -- ==============================================================================    /* Adding to AUDIT_TABLE_FX */    -- ==============================================================================    IF OBJECT_ID('tempdb..#temp_audit_SRR', 'U') IS NOT NULL DROP TABLE #temp_audit_SRR    SELECT DISTINCT     CASE       WHEN ex.[SOURCE] = 'AL' THEN t.[MULTI_FUND_ID]      WHEN ex.[SOURCE] = 'FX' THEN fxt.[TRADE_ID]     END AS TRANSACTION_NUMBER,     CASE       WHEN ex.[SOURCE] = 'AL' THEN t.[ORD_NUM]       WHEN ex.[SOURCE] = 'FX' THEN FXT.[ORDER_ID]     ELSE NULL      END AS TRD_ORD,      CASE       WHEN ex.[SOURCE] = 'AL' THEN oc.[PM_ORD]      WHEN ex.[SOURCE] = 'FX' THEN FXT.[ORDER_ID]     END AS ORDER_ID,     'SPOT Reference Rate' AS Exception_Type,     CONCAT(ex.[TRADE_ID],'_501_',ex.[SOURCE]) AS ID,     NULL AS REASON,     NULL AS COMMENT,     'With Reviewer' AS Status,     NULL AS ClientExecID,     'FX' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     tdd.[FULL_NAME] AS DEALER,     '1A2' AS STATUS_ID,     CASE       WHEN ex.[SOURCE] = 'AL' THEN trd_o.[AUTH_TIME]      WHEN ex.[SOURCE] = 'FX' THEN fxo.[INSTRUCTION_RECEIVED_DATE_TIME]     END AS ORD_AUTH,     CASE       WHEN ex.[SOURCE] = 'AL' THEN t.[EXECUTION_TIME]       WHEN ex.[SOURCE] = 'FX' THEN fxt.[EXECUTED_DATE_TIME]     END AS TRADE_EXEC    INTO #temp_audit_SRR    FROM #final_ex_SRR ex    left join (SELECT DISTINCT TRADE_ID, ORDER_ID, EXECUTED_DATE_TIME, DEALT_BY, ACCEPTED_BY, PULL_DATE FROM VISTA_REPORTING.dbo.FX_TRADES) fxt    on ex.[TRADE_ID] = fxt.[TRADE_ID] and ex.[SOURCE] = 'FX'    left join (SELECT DISTINCT FXM_ORDER_ID, MIN(INSTRUCTION_RECEIVED_DATE_TIME) as INSTRUCTION_RECEIVED_DATE_TIME, MIN(PULL_DATE) AS PULL_DATE FROM VISTA_REPORTING.dbo.FX_ORDERS GROUP BY FXM_ORDER_ID) fxo    on FXT.[ORDER_ID] = fxo.[FXM_ORDER_ID] and ex.[SOURCE] = 'FX'    left join (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER, PULL_DATE FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t    ON ex.[SOURCE] = 'AL' AND ex.[TRADE_ID] = t.[MULTI_FUND_ID]    left join (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o    ON t.[ORD_NUM] = trd_o.[ORD_NUM]     left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc    ON trd_o.[ORD_NUM] = oc.[TRD_ORD]    LEFT JOIN (SELECT DISTINCT ORD_NUM, PULL_DATE, TRADER FROM Vista_Reporting.dbo.PM_ORDERS) pm    on pm.ORD_NUM = oc.PM_ORD    left join  VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd    on tdd.[MG_USER_ID] = fxt.[DEALT_BY] AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2    on tdd2.[MG_USER_ID] = fxt.[ACCEPTED_BY] AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)    left join VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd3    on tdd3.[INITIALS]  = t.[TRD_TRADER] AND CAST(t.[PULL_DATE] AS DATE) BETWEEN CAST(tdd3.[DATE_FROM] AS DATE) AND CAST(tdd3.[DATE_TO] AS DATE)    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd4    on tdd4.[INITIALS] = pm.[TRADER] AND CAST(pm.[PULL_DATE] AS DATE) BETWEEN CAST(tdd4.[DATE_FROM] AS DATE) AND CAST(tdd4.[DATE_TO] AS DATE)    left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd     on dd.[REPORT_NAME] = 'Spot Reference Rate' AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE],t.[PULL_DATE],pm.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)    WHERE ex.[VG_501] = 1        MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_FX AS T    USING #temp_audit_SRR AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);            -- ==============================================================================    /* Update Exceptions Table */    -- ==============================================================================                IF OBJECT_ID('VISTA_STAGING.DBO.VG_501_SPOT_REFERENCE_RATE_FX_TABLE' , 'U') IS NULL     SELECT DISTINCT *      INTO VISTA_STAGING.DBO.VG_501_SPOT_REFERENCE_RATE_FX_TABLE      FROM #final_ex_SRR    ELSE     IF OBJECT_ID('tempdb..#TEMP_SRR_TABLE', 'U') IS NOT NULL DROP TABLE #TEMP_SRR_TABLE     SELECT DISTINCT *      INTO #TEMP_SRR_TABLE     FROM #final_ex_SRR         MERGE VISTA_STAGING.DBO.VG_501_SPOT_REFERENCE_RATE_FX_TABLE AS T      USING #TEMP_SRR_TABLE AS S     ON (T.TRADE_ID = S.TRADE_ID AND T.SOURCE = S.SOURCE)     WHEN MATCHED     THEN UPDATE     SET     TRADE_ID = CASE WHEN S.VG_501 > T.VG_501 THEN S.TRADE_ID ELSE T.TRADE_ID END,     VG_501 = CASE WHEN S.VG_501 > T.VG_501 THEN S.VG_501 ELSE T.VG_501 END,     VG_501_CREATETIME = CASE WHEN S.VG_501 >T.VG_501 THEN S.VG_501_CREATETIME ELSE T.VG_501_CREATETIME END,     SOURCE = CASE WHEN S.VG_501 > T.VG_501 THEN S.SOURCE ELSE T.SOURCE END        WHEN NOT MATCHED     THEN INSERT     (TRADE_ID     ,VG_501     ,VG_501_CREATETIME      ,SOURCE )         VALUES     (S.TRADE_ID     ,S.VG_501     ,VG_501_CREATETIME     ,S.SOURCE );            IF OBJECT_ID('tempdb..#countquotes', 'U') IS NOT NULL DROP TABLE #countquotes    IF OBJECT_ID('tempdb..#spot_diff', 'U') IS NOT NULL DROP TABLE #spot_diff    IF OBJECT_ID('tempdb..#spot_ex', 'U') IS NOT NULL DROP TABLE #spot_ex        END            --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_608_TA_KNOCKBACK_CASH  CreateDate: 2025-06-26 17:36:39.930  ModifyDate: 2025-06-26 17:36:39.930  --- DEFINITION START ---  -- =============================================    -- Author:  <da Costa, David>    -- Create date: <05/06/2019>    -- Description:     -- <The report details the TA Knockback trades >    -- =============================================        -- ***************VERSION CONTROL***************    --    -- *********************************************        CREATE PROCEDURE [dbo].[VG_608_TA_KNOCKBACK_CASH]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;            IF OBJECT_ID('tempdb..#taknock_temp', 'U') IS NOT NULL DROP TABLE #taknock_temp    SELECT DISTINCT     TRANSACTION_NUMBER,     ORDER_ID,     CASE      WHEN TA_KNOCKBACK_EXCEPTION_REASON IS NOT NULL THEN 1      ELSE 0     END AS VG_608,     CASE      WHEN TA_KNOCKBACK_EXCEPTION_REASON IS NOT NULL THEN GETDATE()      ELSE NULL     END AS VG_608_CREATETIME,     'CM' as [DATA_SOURCE]    INTO #taknock_temp    FROM VISTA_REPORTING.dbo.CASH_TRADES            --Add records into FINAL_STATUS_UPDATE_TABLE    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    SELECT DISTINCT     CONCAT(TRANSACTION_NUMBER,'_608_CM') AS ID,     '1A3' AS STATUS,     NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table    FROM #taknock_temp    WHERE VG_608 = 1        MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'CASH',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'CASH');            --Add records into AUDIT_TABLE_CASH    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    SELECT DISTINCT     rrf.[TRANSACTION_NUMBER] AS TRANSACTION_NUMBER,     NULL AS TRD_ORD,     ct.ORDER_ID AS ORDER_ID,     'TA Knockback' AS Exception_Type,     CONCAT(rrf.[TRANSACTION_NUMBER],'_608_CM') AS ID,     NULL AS REASON,     NULL AS COMMENT,     'With Dealer' AS Status,     NULL AS ClientExecID,     'Cash' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) AS DEALER,     '1A3' AS STATUS_ID,     co.INSTRUCTION_RECEIVED_DATE AS ORD_AUTH,     ct.[EXECUTED_DATETIME] AS TRADE_EXEC    INTO #temp_audit    FROM #taknock_temp rrf    left join (SELECT DISTINCT TRANSACTION_NUMBER, ORDER_ID, EXECUTED_DATETIME, DEALER_NAME_DECODE, DEALER_NAME, PULL_DATE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct     on rrf.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]    left join (SELECT DISTINCT ORDER_ID, MIN(INSTRUCTION_RECEIVED_DATE) as INSTRUCTION_RECEIVED_DATE, PULL_DATE, ACCEPTED_BY, INSTRUCTED_BY FROM VISTA_REPORTING.dbo.CASH_ORDERS GROUP BY ORDER_ID, PULL_DATE, ACCEPTED_BY, INSTRUCTED_BY) co    on ct.[ORDER_ID] = co.[ORDER_ID]    LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER, PULL_DATE FROM VISTA_REPORTING.DBO.TRADES WHERE FinalFlag = 1) T     ON rrf.DATA_SOURCE = 'AL' AND rrf.TRANSACTION_NUMBER = T.MULTI_FUND_ID    LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.TRD_ORD = T.ORD_NUM    LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME, TRADER, PULL_DATE FROM VISTA_REPORTING.DBO.PM_ORDERS GROUP BY ord_num, TRADER, PULL_DATE) PM ON PM.ORD_NUM = OC.PM_ORD    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd    on (tdd.[DEALING_DESK] = 'CASH' and tdd.[MG_USER_ID] = ct.[DEALER_NAME] and rrf.[DATA_SOURCE] = 'CM' AND CAST(ct.PULL_DATE AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE))     or (tdd.[DEALING_DESK] = 'CASH' and tdd.[INITIALS] = t.[TRD_TRADER] and rrf.[DATA_SOURCE] = 'AL' AND CAST(t.PULL_DATE AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE))     LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD2 ON ((TDD2.MG_USER_ID  = COALESCE(CO.ACCEPTED_BY, CO.INSTRUCTED_BY) AND rrf.[DATA_SOURCE] = 'CM') OR (TDD2.INITIALS = PM.TRADER AND rrf.[DATA_SOURCE] = 'AL')) AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE) AS DATE) BETWEEN CAST(TDD2.DATE_FROM AS DATE) AND CAST(TDD2.DATE_TO AS DATE)    LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'TA Knockback' AND CAST(COALESCE(ct.PULL_DATE, t.PULL_DATE,co.[PULL_DATE],pm.[PULL_DATE]) AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)        WHERE rrf.[VG_608] = 1         MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_CASH AS T    USING #temp_audit AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (S.TRANSACTION_NUMBER, S.TRD_ORD, ORDER_ID, S.Exception_Type, S.ID, S.REASON, S.COMMENT, S.Status, S.ClientExecID, S.DEALER_DESK, S.CREATE_TIME, S.UPDATE_TIME, S.DEALER, S.STATUS_ID, S.ORD_AUTH, S.TRADE_EXEC);            --Update VG Exceptions Table    IF OBJECT_ID('VISTA_STAGING.dbo.VG_608_TA_KNOCKBACK_CASH_TABLE', 'U') IS NULL     SELECT *      INTO VISTA_STAGING.dbo.VG_608_TA_KNOCKBACK_CASH_TABLE      FROM #taknock_temp    ELSE      MERGE VISTA_STAGING.dbo.VG_608_TA_KNOCKBACK_CASH_TABLE AS T      USING #taknock_temp AS S     ON (T.TRANSACTION_NUMBER = S.TRANSACTION_NUMBER)     WHEN MATCHED      THEN UPDATE      SET       [TRANSACTION_NUMBER] = CASE WHEN S.VG_608 > T.VG_608 THEN S.[TRANSACTION_NUMBER] ELSE T.[TRANSACTION_NUMBER] END,      [VG_608] = CASE WHEN S.VG_608 > T.VG_608 THEN S.[VG_608] ELSE T.[VG_608] END,      [VG_608_CREATETIME] = CASE WHEN S.VG_608 > T.VG_608 THEN S.[VG_608_CREATETIME] ELSE T.[VG_608_CREATETIME] END,      [DATA_SOURCE] = CASE WHEN S.VG_608 > T.VG_608 THEN S.[DATA_SOURCE] ELSE T.[DATA_SOURCE] END         WHEN NOT MATCHED      THEN      INSERT      ([TRANSACTION_NUMBER],      [VG_608],      [VG_608_CREATETIME],      [DATA_SOURCE])          VALUES      (S.[TRANSACTION_NUMBER],      S.[VG_608],      S.[VG_608_CREATETIME],      S.[DATA_SOURCE]) ;            IF OBJECT_ID('tempdb..#taknock_temp', 'U') IS NOT NULL DROP TABLE #taknock_temp    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit            END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_608_TA_KNOCKBACK_FX  CreateDate: 2025-06-26 17:36:12.700  ModifyDate: 2025-06-26 17:36:12.700  --- DEFINITION START ---  -- =============================================    -- Author:  <Samad, Mehreen>    -- Create date: <03/07/2019>    -- Description:     -- <Details all orders that were knocked back     -- from FXM to Aladdin, identified by     -- INSTRUCTION_STATUS = 'Cancelled'.>    -- =============================================        -- ***************VERSION CONTROL***************    --    -- *********************************************        CREATE PROCEDURE [dbo].[VG_608_TA_KNOCKBACK_FX]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        IF OBJECT_ID('tempdb..#max_api_o', 'U') IS NOT NULL DROP TABLE #max_api_o    SELECT DISTINCT     fxo.[FXM_ORDER_ID],      MAX(fxo.[API_REQUESTED_DATE]) as MAX_API_DATE    INTO #max_api_o     FROM VISTA_REPORTING.dbo.FX_ORDERS fxo    GROUP BY fxo.[FXM_ORDER_ID]        --TA Knockback Exceptions    IF OBJECT_ID('tempdb..#taknock_ex', 'U') IS NOT NULL DROP TABLE #taknock_ex    SELECT DISTINCT     fxo.[FXM_ORDER_ID],     --fxo.[INSTRUCTION_STATUS], --left in if needed for testing     CASE      WHEN fxo.[INSTRUCTION_STATUS] = 'Cancelled' THEN 1     ELSE 0     END AS VG_608,     CASE      WHEN fxo.[INSTRUCTION_STATUS] = 'Cancelled' THEN GETDATE()     ELSE NULL     END AS VG_608_CREATETIME,     'FX' as [DATA_SOURCE]    INTO #taknock_ex    FROM VISTA_REPORTING.dbo.FX_ORDERS fxo     inner join #max_api_o mao    on fxo.[FXM_ORDER_ID] = mao.[FXM_ORDER_ID] and fxo.[API_REQUESTED_DATE] = mao.[MAX_API_DATE]        -- ==============================================================================    /* Adding to FINAL_STATUS_UPDATE_TABLE */    -- ==============================================================================        --Add records into FINAL_STATUS_UPDATE_TABLE    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    SELECT DISTINCT     CONCAT(FXM_ORDER_ID,'_608_',[DATA_SOURCE]) as ID,     '1A2' AS STATUS,     NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table    FROM #taknock_ex    WHERE VG_608 != 0        MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'FX',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'FX');        -- ==============================================================================    /* Adding to AUDIT_TABLE_FX */    -- ==============================================================================        --Add records into AUDIT_TABLE_FX    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    SELECT DISTINCT     NULL as TRANSACTION_NUMBER,     NULL as TRD_ORD,      ex.[FXM_ORDER_ID] as ORDER_ID,     'Order Request Return' AS Exception_Type,     CONCAT(ex.[FXM_ORDER_ID] , '_608_',ex.[DATA_SOURCE]) as ID,     NULL AS REASON,     NULL AS COMMENT,     'With Reviewer' AS Status,     NULL AS ClientExecID,     'FX' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) as DEALER,     '1A2' AS STATUS_ID,     MIN(fxo.[INSTRUCTION_RECEIVED_DATE_TIME]) as ORD_AUTH,     fxt.[EXECUTED_DATE_TIME] as TRADE_EXEC    INTO #temp_audit    FROM #taknock_ex ex    left join (SELECT DISTINCT TRADE_ID, ORDER_ID, EXECUTED_DATE_TIME, DEALT_BY, ACCEPTED_BY, PULL_DATE FROM VISTA_STAGING.dbo.fx_TRADES) fxt on  ex.[FXM_ORDER_ID] =  fxt.[ORDER_ID] and ex.[DATA_SOURCE] = 'FX'    left join (SELECT DISTINCT FXM_ORDER_ID, INSTRUCTION_RECEIVED_DATE_TIME, PULL_DATE FROM VISTA_STAGING.dbo.FX_ORDERS) fxo on fxo.[FXM_ORDER_ID] = ex.[FXM_ORDER_ID] and ex.[DATA_SOURCE] = 'FX'    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd on tdd.[MG_USER_ID] = fxt.[DEALT_BY] AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2 on tdd2.[MG_USER_ID] = fxt.[ACCEPTED_BY] AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)    left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd on dd.[REPORT_NAME] = 'Order Request Return' AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)     WHERE ex.[VG_608] = 1    GROUP BY      ex.FXM_ORDER_ID,     CONCAT(ex.[FXM_ORDER_ID] , '_608_',ex.[DATA_SOURCE]),     COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]),     fxt.[EXECUTED_DATE_TIME]             MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_FX AS T    USING #temp_audit AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);            -- ==============================================================================    /* Update Exceptions Table */    -- ==============================================================================        --Update TA Knockback Exceptions Table    IF      OBJECT_ID('VISTA_STAGING.dbo.VG_608_TA_KNOCKBACK_FX_TABLE', 'U') IS NULL     SELECT *      INTO VISTA_STAGING.dbo.VG_608_TA_KNOCKBACK_FX_TABLE      FROM #taknock_ex    ELSE      IF OBJECT_ID('tempdb..#temp_CP_table_rr', 'U') IS NOT NULL      DROP TABLE #temp_CP_table_rr     SELECT *      INTO #temp_CP_table_rr     FROM #taknock_ex        MERGE VISTA_STAGING.dbo.VG_608_TA_KNOCKBACK_FX_TABLE AS T     USING #temp_CP_table_rr AS S    ON (T.FXM_ORDER_ID = S.FXM_ORDER_ID AND T.[DATA_SOURCE] = S.[DATA_SOURCE])    WHEN MATCHED     THEN UPDATE     SET      [FXM_ORDER_ID] = CASE WHEN S.VG_608 > T.VG_608 THEN S.[FXM_ORDER_ID] ELSE T.[FXM_ORDER_ID] END,     [VG_608] = CASE WHEN S.VG_608 > T.VG_608 THEN S.[VG_608] ELSE T.[VG_608] END,     [VG_608_CREATETIME] = CASE WHEN S.VG_608 > T.VG_608 THEN S.[VG_608_CREATETIME] ELSE T.[VG_608_CREATETIME] END,     [DATA_SOURCE] = CASE WHEN S.VG_608 > T.VG_608 THEN S.[DATA_SOURCE] ELSE T.[DATA_SOURCE] END        WHEN NOT MATCHED     THEN     INSERT     ([FXM_ORDER_ID],     [VG_608],     [VG_608_CREATETIME],     [DATA_SOURCE])         VALUES     (S.[FXM_ORDER_ID],     S.[VG_608],     S.[VG_608_CREATETIME],     S.[DATA_SOURCE]) ;        IF OBJECT_ID('tempdb..#taknock_ex', 'U') IS NOT NULL DROP TABLE #taknock_ex    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit            END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_609_DEPOSITS_REFERENCE_RATE_CASH  CreateDate: 2025-06-26 17:35:58.787  ModifyDate: 2025-06-26 17:35:58.787  --- DEFINITION START ---  -- =============================================    -- Author:  <Samad, Mehreen>    -- Create date: <05/06/2019>    -- Description:     -- <Details all trades highlighting exceptions    -- breaching the best execution policy for CRR     -- (Cash Rate Reporting). NWQ & B3Q exception    -- is view only for MI.>    -- =============================================        -- ***************VERSION CONTROL***************    --    -- *********************************************    CREATE PROCEDURE [dbo].[VG_609_DEPOSITS_REFERENCE_RATE_CASH]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        --Client has confirmed we can used NOOF_QUOTES from table instead of calculating it. Have just left it in so I can use for testing, but will delete once happy with it    ----Count No. of Quotes    --IF OBJECT_ID('tempdb..#quotecount', 'U') IS NOT NULL DROP TABLE #quotecount    --SELECT DISTINCT    -- cbt.[TRANSACTION_NUMBER],    -- COUNT(cbt.[RATE]) as NUM_QUOTES    --INTO #quotecount    --FROM VISTA_REPORTING.dbo.CASH_BANK_RATES cbt    --GROUP BY cbt.[TRANSACTION_NUMBER]        --Calculate the max quote value in Cash Manager    IF OBJECT_ID('tempdb..#max_quote_c', 'U') IS NOT NULL DROP TABLE #max_quote_c    SELECT DISTINCT     cbt.[TRANSACTION_NUMBER],     MAX(cbt.[RATE]) AS MAX_QUOTE    INTO #max_quote_c    FROM VISTA_REPORTING.dbo.CASH_BANK_RATES cbt    GROUP BY cbt.[TRANSACTION_NUMBER]        --Calculate the max quote value in Aladdin    IF OBJECT_ID('tempdb..#max_quote_a', 'U') IS NOT NULL DROP TABLE #max_quote_a    SELECT DISTINCT     q.[MULTI_FUND_ID],     MAX([QUOTE_VALUE]) AS MAX_QUOTE    INTO #max_quote_a    FROM VISTA_REPORTING.dbo.QUOTES q    GROUP BY [MULTI_FUND_ID]        --Obtain Quotes Requested and Quotes Obtained    IF OBJECT_ID('tempdb..#quotes_calc', 'U') IS NOT NULL DROP TABLE #quotes_calc    SELECT DISTINCT      q.[MULTI_FUND_ID],     (SELECT       COUNT(DISTINCT [BROKER])       FROM VISTA_REPORTING.dbo.QUOTES      WHERE ISNULL(QUOTE_VALUE, 0) != 0         AND MULTI_FUND_ID = q.[MULTI_FUND_ID]) as QUOTES_OBTAINED, --Count distinct BROKER where QUOTE_VALUE is NOT NULL or 0     COUNT(DISTINCT [BROKER]) as QUOTES_REQUESTED --A quote is required for every MULTI_FUND_ID    INTO #quotes_calc    FROM VISTA_REPORTING.dbo.QUOTES q    GROUP BY q.[MULTI_FUND_ID]            --Create Exceptions table for CRR MM    IF OBJECT_ID('tempdb..#bestexcrr_temp', 'U') IS NOT NULL DROP TABLE #bestexcrr_temp    SELECT DISTINCT      ct.[TRANSACTION_NUMBER],     ct.[PRODUCT],     (ct.[EXECUTED_RATE] - crts.[INDICATIVE_REF_RATE]) as DIFFERENCE_BPS,     ct.[EXECUTED_RATE],     crts.[INDICATIVE_REF_RATE],     ref_crr.[TOLERANCE],     max_qc.[MAX_QUOTE],     ct.[NOOF_QUOTES] as [NUM_QUOTES],     --q_c.[NUM_QUOTES],     ref_q.[NO_OF_QUOTES_THRESHOLD],     CASE       WHEN ct.[PRODUCT] NOT IN ('CP','CD','UKTB')      THEN       CASE         WHEN crts.[INDICATIVE_REF_RATE] is null or crts.[INDICATIVE_REF_RATE] = 0 or ct.EXECUTED_RATE > crts.[INDICATIVE_REF_RATE] THEN 0 --last condition is around the 'in favour' trades        WHEN abs((ct.[EXECUTED_RATE] - crts.[INDICATIVE_REF_RATE])) > ref_crr.[TOLERANCE] and ct.[TRANSACTION_STATUS_DECODE] not in ('Deleted','Cancelled') THEN 1        ELSE 0       END     ELSE 0     END AS CRR_EXCEPTION,     CASE      WHEN ct.NOOF_QUOTES = 1 THEN 0 --condition for noof_quotes was added to account for an extreme scenario                 --where the quote did not match the executed rate. By default, if there is                 --only one quote there should not be a NWQ       WHEN ct.[EXECUTED_RATE] != max_qc.[MAX_QUOTE] and ct.[TRANSACTION_STATUS_DECODE] not in ('Deleted','Cancelled') THEN 1      ELSE 0     END AS NWQ_EXCEPTION,     CASE      WHEN (ct.[NOOF_QUOTES] < ref_q.[NO_OF_QUOTES_THRESHOLD] OR NULLIF(ct.[NOOF_QUOTES],'') IS NULL)       and ct.[TRANSACTION_STATUS_DECODE] not in ('Deleted','Cancelled') THEN 1      ELSE 0     END AS B3Q_EXCEPTION,     'CM' as [DATA_SOURCE]    INTO #bestexcrr_temp     FROM VISTA_REPORTING.dbo.CASH_TRADES ct    left join VISTA_REPORTING.dbo.CASH_REFERENCE_RATES crts    on crts.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]     left join VISTA_STAGING.dbo.REF_CASH_CRR_THRESHOLD ref_crr    on ref_crr.[CURRENCY] = ct.[TRADE_CURRENCY] AND ref_crr.[PRODUCT] = ct.[PRODUCT] AND CAST(ct.[PULL_DATE] as DATE) BETWEEN CAST(ref_crr.[DATE_FROM] as date) AND CAST(ref_crr.[DATE_TO] as DATE)    left join #max_quote_c max_qc    on max_qc.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]    --left join #quotecount q_c     --on q_c.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]    left join VISTA_STAGING.dbo.REF_CASH_BESTEXC_QUOTES_THRESHOLD ref_q    on ct.[PRODUCT] = ref_q.[PRODUCT] AND CAST(ct.[PULL_DATE] as DATE) BETWEEN CAST(ref_q.[DATE_FROM] as date) AND CAST(ref_q.[DATE_TO] as DATE)    WHERE ct.[PRODUCT_TYPE] = 'Cash Products'            --Final Exceptions table for CRR MM    IF OBJECT_ID('tempdb..#bestexcrr_final', 'U') IS NOT NULL DROP TABLE #bestexcrr_final    SELECT DISTINCT     crr.[TRANSACTION_NUMBER],     crr.[PRODUCT],     crr.[DIFFERENCE_BPS],     crr.[EXECUTED_RATE],     crr.[INDICATIVE_REF_RATE],     crr.[NO_OF_QUOTES_THRESHOLD],     crr.[TOLERANCE],     crr.[CRR_EXCEPTION],     crr.[NWQ_EXCEPTION],     crr.[B3Q_EXCEPTION],     CASE      WHEN (crr.[NWQ_EXCEPTION] = 0 AND crr.[B3Q_EXCEPTION] = 0 AND crr.[CRR_EXCEPTION] = 1) THEN 1     ELSE 0     END AS VG_609_CRR,     CASE      WHEN (crr.[NWQ_EXCEPTION] = 0 AND crr.[B3Q_EXCEPTION] = 0 AND crr.[CRR_EXCEPTION] = 1) THEN GETDATE()     ELSE NULL     END AS VG_609_CREATETIME_CRR,     [DATA_SOURCE]    INTO #bestexcrr_final    FROM #bestexcrr_temp crr        -- ==============================================================================    /* Adding to FINAL_STATUS_UPDATE_TABLE */    -- ==============================================================================        --Add CRR records into FINAL_STATUS_UPDATE_TABLE    IF OBJECT_ID('tempdb..#temp_status_table_crr', 'U') IS NOT NULL DROP TABLE #temp_status_table_crr    SELECT DISTINCT     CONCAT(TRANSACTION_NUMBER,'_609','_CM') AS ID,     '1A2' AS STATUS,     NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table_crr    FROM #bestexcrr_final    WHERE VG_609_CRR != 0        MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table_crr AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'CASH',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'CASH');        -- ==============================================================================    /* Adding to AUDIT_TABLE_CASH */    -- ==============================================================================        ---------------------------------------    --Add CRR records into AUDIT_TABLE_CASH    IF OBJECT_ID('tempdb..#temp_audit_crr', 'U') IS NOT NULL DROP TABLE #temp_audit_crr    SELECT DISTINCT     crrf.[TRANSACTION_NUMBER] AS TRANSACTION_NUMBER,     NULL AS TRD_ORD,     ct.[ORDER_ID] AS ORDER_ID,     'Best Execution' AS Exception_Type,     CONCAT(crrf.[TRANSACTION_NUMBER],'_609','_CM') AS ID,     NULL AS REASON,     NULL AS COMMENT,     'With Reviewer' AS Status,     NULL AS ClientExecID,     'Cash' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) AS DEALER,     '1A2' AS STATUS_ID,     co.[INSTRUCTION_RECEIVED_DATE] AS ORD_AUTH,     ct.[EXECUTED_DATETIME] AS TRADE_EXEC    INTO #temp_audit_crr    FROM #bestexcrr_final crrf    left join (SELECT DISTINCT TRANSACTION_NUMBER, ORDER_ID, EXECUTED_DATETIME, DEALER_NAME_DECODE, DEALER_NAME, PULL_DATE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct    on crrf.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]    left join (SELECT DISTINCT ORDER_ID, MIN(INSTRUCTION_RECEIVED_DATE) as INSTRUCTION_RECEIVED_DATE, ACCEPTED_BY, INSTRUCTED_BY, PULL_DATE FROM VISTA_REPORTING.dbo.CASH_ORDERS GROUP BY ORDER_ID, ACCEPTED_BY, INSTRUCTED_BY, PULL_DATE) co    on ct.[ORDER_ID] = co.[ORDER_ID]    LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD     ON (TDD.DEALING_DESK = 'CASH' AND TDD.[MG_USER_ID] = ct.[DEALER_NAME] AND crrf.[DATA_SOURCE] = 'CM' AND CAST(ct.PULL_DATE AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE))     LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD2 ON TDD2.MG_USER_ID  = COALESCE(CO.ACCEPTED_BY, CO.INSTRUCTED_BY) AND crrf.[DATA_SOURCE] = 'CM' AND CAST(CO.PULL_DATE AS DATE) BETWEEN CAST(TDD2.DATE_FROM AS DATE) AND CAST(TDD2.DATE_TO AS DATE)    LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'Reference Rate'                     AND CAST(COALESCE(ct.PULL_DATE,co.[PULL_DATE]) AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)            WHERE crrf.[VG_609_CRR] = 1         MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_CASH AS T    USING #temp_audit_crr AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);        -- ==============================================================================    /* Update Exceptions Table */    -- ==============================================================================        -----------------------------    --Update CRR Exceptions Table    IF      OBJECT_ID('VISTA_STAGING.dbo.VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE', 'U') IS NULL     SELECT *      INTO VISTA_STAGING.dbo.VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE      FROM #bestexcrr_final    ELSE      IF OBJECT_ID('tempdb..#temp_CP_table_crr', 'U') IS NOT NULL      DROP TABLE #temp_CP_table_crr     SELECT *      INTO #temp_CP_table_crr     FROM #bestexcrr_final        MERGE VISTA_STAGING.dbo.VG_609_DEPOSITS_REFERENCE_RATE_CASH_TABLE AS T     USING #temp_CP_table_crr AS S    ON (T.TRANSACTION_NUMBER = S.TRANSACTION_NUMBER AND T.[DATA_SOURCE] = S.[DATA_SOURCE])    WHEN MATCHED     THEN UPDATE     SET      [TRANSACTION_NUMBER] = CASE WHEN S.VG_609_CRR > T.VG_609_CRR THEN S.[TRANSACTION_NUMBER] ELSE T.[TRANSACTION_NUMBER] END,     [PRODUCT] = CASE WHEN S.VG_609_CRR > T.VG_609_CRR THEN S.[PRODUCT] ELSE T.[PRODUCT] END,     [DIFFERENCE_BPS] = CASE WHEN S.VG_609_CRR > T.VG_609_CRR THEN S.[DIFFERENCE_BPS] ELSE T.[DIFFERENCE_BPS] END,     [EXECUTED_RATE] = CASE WHEN S.VG_609_CRR > T.VG_609_CRR THEN S.[EXECUTED_RATE] ELSE T.[EXECUTED_RATE] END,     [INDICATIVE_REF_RATE] = CASE WHEN S.VG_609_CRR > T.VG_609_CRR THEN S.[INDICATIVE_REF_RATE] ELSE T.[INDICATIVE_REF_RATE] END,     [NO_OF_QUOTES_THRESHOLD] = CASE WHEN S.VG_609_CRR > T.VG_609_CRR THEN S.[NO_OF_QUOTES_THRESHOLD] ELSE T.[NO_OF_QUOTES_THRESHOLD] END,     [TOLERANCE] = CASE WHEN S.VG_609_CRR > T.VG_609_CRR THEN S.[TOLERANCE] ELSE T.[TOLERANCE] END,     [CRR_EXCEPTION] = CASE WHEN S.[CRR_EXCEPTION] > T.[CRR_EXCEPTION] THEN S.[CRR_EXCEPTION] ELSE T.[CRR_EXCEPTION] END,     [NWQ_EXCEPTION] = CASE WHEN S.[NWQ_EXCEPTION] > T.[NWQ_EXCEPTION] THEN S.[NWQ_EXCEPTION] ELSE T.[NWQ_EXCEPTION] END,     [B3Q_EXCEPTION] = CASE WHEN S.[B3Q_EXCEPTION] > T.[B3Q_EXCEPTION] THEN S.[B3Q_EXCEPTION] ELSE T.[B3Q_EXCEPTION] END,     [VG_609_CRR] = CASE WHEN S.VG_609_CRR > T.VG_609_CRR THEN S.[VG_609_CRR] ELSE T.[VG_609_CRR] END,     [VG_609_CREATETIME_CRR] = CASE WHEN S.VG_609_CRR > T.VG_609_CRR THEN S.[VG_609_CREATETIME_CRR] ELSE T.[VG_609_CREATETIME_CRR] END,     [DATA_SOURCE] = CASE WHEN S.VG_609_CRR > T.VG_609_CRR THEN S.[DATA_SOURCE] ELSE T.[DATA_SOURCE] END        WHEN NOT MATCHED     THEN     INSERT     ([TRANSACTION_NUMBER],     [PRODUCT],     [DIFFERENCE_BPS],     [EXECUTED_RATE],     [INDICATIVE_REF_RATE],     [NO_OF_QUOTES_THRESHOLD],     [TOLERANCE],     [CRR_EXCEPTION],     [NWQ_EXCEPTION],     [B3Q_EXCEPTION],     [VG_609_CRR],     [VG_609_CREATETIME_CRR],     [DATA_SOURCE])         VALUES     (S.[TRANSACTION_NUMBER],     S.[PRODUCT],     S.[DIFFERENCE_BPS],     S.[EXECUTED_RATE],     S.[INDICATIVE_REF_RATE],     S.[NO_OF_QUOTES_THRESHOLD],     S.[TOLERANCE],     S.[CRR_EXCEPTION],     S.[NWQ_EXCEPTION],     S.[B3Q_EXCEPTION],     S.[VG_609_CRR],     S.[VG_609_CREATETIME_CRR],     S.[DATA_SOURCE]) ;        IF OBJECT_ID('tempdb..#max_quote_c', 'U') IS NOT NULL DROP TABLE #max_quote_c    IF OBJECT_ID('tempdb..#max_quote_a', 'U') IS NOT NULL DROP TABLE #max_quote_a    IF OBJECT_ID('tempdb..#quotes_calc', 'U') IS NOT NULL DROP TABLE #quotes_calc    IF OBJECT_ID('tempdb..#bestexcrr_temp', 'U') IS NOT NULL DROP TABLE #bestexcrr_temp    IF OBJECT_ID('tempdb..#bestexcrr_final', 'U') IS NOT NULL DROP TABLE #bestexcrr_final    IF OBJECT_ID('tempdb..#temp_status_table_crr', 'U') IS NOT NULL DROP TABLE #temp_status_table_crr    IF OBJECT_ID('tempdb..#temp_audit_crr', 'U') IS NOT NULL DROP TABLE #temp_audit_crr                END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_610_TBILLS_CP_CD_CASH  CreateDate: 2025-06-26 17:35:46.820  ModifyDate: 2025-06-26 17:35:46.820  --- DEFINITION START ---  -- =============================================    -- Author:  <Samad, Mehreen>    -- Create date: <29/05/2019>    -- Description:     -- <All trades amended or cancelled on T,    -- identified by TRADE_STATUS = 'C' or where     -- TRD_AMEND_TYPE is not null.>    -- =============================================        -- ***************VERSION CONTROL***************    --    -- *********************************************        CREATE PROCEDURE [dbo].[VG_610_TBILLS_CP_CD_CASH]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        --Create Exceptions Table    IF OBJECT_ID('tempdb..#temp_ac', 'U') IS NOT NULL DROP TABLE #temp_ac    SELECT DISTINCT     pm.[ORD_NUM],     t.[MULTI_FUND_ID],     t.[TOUCH_COUNT],     pr.[DEALING_DESK],     t.[TRD_AMEND_TYPE],     t.[TRD_STATUS],     1 as [AMENDMENT_FLAG],     GETDATE() AS AMENDMENT_FLAG_CREATETIME,     CASE       WHEN (t.[AmendmentFlag] = 1 OR t.[CancellationFlag] = 1) THEN 1      ELSE 0      END AS VG_610,     CASE      WHEN (t.[AmendmentFlag] = 1 OR t.[CancellationFlag] = 1) THEN GETDATE()      ELSE NULL      END AS VG_610_CREATETIME,     'AL' as [DATA_SOURCE]    INTO #temp_ac    FROM VISTA_REPORTING.dbo.TRADES t    left join (SELECT        MULTI_FUND_ID,        DEALING_DESK          FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE ) pr     on pr.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]    left join VISTA_REPORTING.DBO.ORDERS_CROSS OC     on oc.[TRD_ORD] = t.[ORD_NUM]    left join (SELECT        ORD_NUM          FROM VISTA_REPORTING.DBO.PM_ORDERS) pm    on oc.[PM_ORD] = pm.[ORD_NUM]    WHERE pr.[DEALING_DESK] = 'CASH'       AND (t.[AmendmentFlag] = 1 OR t.CancellationFlag = 1)                --Add records into FINAL_STATUS_UPDATE_TABLE    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    SELECT DISTINCT     CONCAT(MULTI_FUND_ID,'_610',TOUCH_COUNT) AS ID,     '1A2' AS STATUS,     NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table    FROM #temp_ac    WHERE VG_610 != 0        MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'CASH',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'CASH');        --Add records into AUDIT_TABLE    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    SELECT DISTINCT     ac.[MULTI_FUND_ID] AS TRANSACTION_NUMBER,     t.[ORD_NUM] AS TRD_ORD,     ac.[ORD_NUM] AS ORDER_ID,     'TBills, CPs, CDs Cancellations and Amendments' AS Exception_Type,     CONCAT(ac.[MULTI_FUND_ID],'_610', ac.[TOUCH_COUNT]) AS ID,     NULL AS REASON,     NULL AS COMMENT,     'With Reviewer' AS Status,     NULL AS ClientExecID,     'Cash' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) AS DEALER,     '1A2' AS STATUS_ID,     trd_o.[AUTH_TIME] AS ORD_AUTH,     t.[EXECUTION_TIME] AS TRADE_EXEC    INTO #temp_audit    FROM #temp_ac ac    left join (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER, PULL_DATE FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t    ON ac.[MULTI_FUND_ID] = t.[MULTI_FUND_ID]    left join (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o    ON t.[ORD_NUM] = trd_o.[ORD_NUM]    LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.TRD_ORD = T.ORD_NUM    LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME, TRADER, PULL_DATE FROM VISTA_REPORTING.DBO.PM_ORDERS GROUP BY ord_num, TRADER, PULL_DATE) PM ON PM.ORD_NUM = OC.PM_ORD    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd     on  (tdd.[DEALING_DESK] = 'CASH' and tdd.[INITIALS] = t.[TRD_TRADER] and ac.[DATA_SOURCE] = 'AL' AND CAST(t.[PULL_DATE] AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE))     LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD2 ON TDD2.INITIALS = PM.TRADER AND ac.[DATA_SOURCE] = 'AL' AND CAST(PM.PULL_DATE AS DATE) BETWEEN CAST(TDD2.DATE_FROM AS DATE) AND CAST(TDD2.DATE_TO AS DATE)    LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'CD CP TBills Cancel Amend'                      AND CAST(COALESCE(t.PULL_DATE,pm.[PULL_DATE]) AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)        WHERE ac.[VG_610] = 1         MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_CASH AS T    USING #temp_audit AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);        --Update Exceptions Table    IF      OBJECT_ID('VISTA_STAGING.dbo.VG_610_TBILLS_CP_CD_CASH_TABLE', 'U') IS NULL     SELECT *      INTO VISTA_STAGING.dbo.VG_610_TBILLS_CP_CD_CASH_TABLE      FROM #temp_ac    ELSE      IF OBJECT_ID('tempdb..#temp_CP_table', 'U') IS NOT NULL      DROP TABLE #temp_CP_table     SELECT *      INTO #TEMP_CP_TABLE     FROM #temp_ac        MERGE VISTA_STAGING.dbo.VG_610_TBILLS_CP_CD_CASH_TABLE AS T     USING #TEMP_CP_TABLE AS S    ON (T.MULTI_FUND_ID = S.MULTI_FUND_ID     AND T.TOUCH_COUNT = S.TOUCH_COUNT     AND T.[DATA_SOURCE] = S.[DATA_SOURCE])    WHEN MATCHED     THEN UPDATE     SET      [ORD_NUM] = CASE WHEN S.VG_610 > T.VG_610 THEN S.[ORD_NUM] ELSE T.[ORD_NUM] END,     [MULTI_FUND_ID] = CASE WHEN S.VG_610 > T.VG_610 THEN S.[MULTI_FUND_ID] ELSE T.[MULTI_FUND_ID] END,     [TOUCH_COUNT] = CASE WHEN S.VG_610 > T.VG_610 THEN S.[TOUCH_COUNT] ELSE T.[TOUCH_COUNT] END,     [DEALING_DESK] = CASE WHEN S.VG_610 > T.VG_610 THEN S.[DEALING_DESK] ELSE T.[DEALING_DESK] END,     [TRD_AMEND_TYPE] = CASE WHEN S.VG_610 > T.VG_610 THEN S.[TRD_AMEND_TYPE] ELSE T.[TRD_AMEND_TYPE] END,     [TRD_STATUS] = CASE WHEN S.VG_610 > T.VG_610 THEN S.[TRD_STATUS] ELSE T.[TRD_STATUS] END,     [AMENDMENT_FLAG] = CASE WHEN S.VG_610 > T.VG_610 THEN S.[AMENDMENT_FLAG] ELSE T.[AMENDMENT_FLAG] END,     [AMENDMENT_FLAG_CREATETIME] = CASE WHEN S.VG_610 > T.VG_610 THEN S.[AMENDMENT_FLAG_CREATETIME] ELSE T.[AMENDMENT_FLAG_CREATETIME] END,     [VG_610] = CASE WHEN S.VG_610 > T.VG_610 THEN S.[VG_610] ELSE T.[VG_610] END,     [VG_610_CREATETIME] = CASE WHEN S.VG_610 > T.VG_610 THEN S.[VG_610_CREATETIME] ELSE T.[VG_610_CREATETIME] END,     [DATA_SOURCE] = CASE WHEN S.VG_610 > T.VG_610 THEN S.[DATA_SOURCE] ELSE T.[DATA_SOURCE] END        WHEN NOT MATCHED     THEN     INSERT     ([ORD_NUM],     [MULTI_FUND_ID],     [TOUCH_COUNT],     [DEALING_DESK],     [TRD_AMEND_TYPE],     [TRD_STATUS],     [AMENDMENT_FLAG],     [AMENDMENT_FLAG_CREATETIME],     [VG_610],     [VG_610_CREATETIME],     [DATA_SOURCE])         VALUES     (S.[ORD_NUM],     S.[MULTI_FUND_ID],     S.[TOUCH_COUNT],     S.[DEALING_DESK],     S.[TRD_AMEND_TYPE],     S.[TRD_STATUS],     S.[AMENDMENT_FLAG],     S.[AMENDMENT_FLAG_CREATETIME],     S.[VG_610],     S.[VG_610_CREATETIME],     S.[DATA_SOURCE]) ;        IF OBJECT_ID('tempdb..#temp_ac', 'U') IS NOT NULL DROP TABLE #temp_ac    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit            END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_611_ORDER_AGGREGATION_CASH  CreateDate: 2025-06-26 17:35:35.230  ModifyDate: 2025-06-26 17:35:35.230  --- DEFINITION START ---      CREATE PROCEDURE [dbo].[VG_611_ORDER_AGGREGATION_CASH]         AS    BEGIN    -- =============================================    -- Author:  <Nadia Liebenberg>    -- Create date: <25/06/2020>    -- Description: < Cash order aggregation report >    -- =============================================        --21/04/2023 - created for Jira:    --SURVG-797 - Added Meturity date compability check within #temp5b_1_rr table in order to avoid scenraio where we raise false exception although orders don't have same maturity date (not comparable)        --Unioning data for requirement 6    IF OBJECT_ID('tempdb..#pre_mm_data', 'U') IS NOT NULL DROP TABLE #pre_mm_data;    SELECT DISTINCT co.ORDER_ID,        ct.TRANSACTION_NUMBER AS TRADE_ID,        co.INSTRUCTION_RECEIVED_DATE,         CAST(co.VALUE_DATE AS DATE) AS VALUE_DATE,        co.INSTRUCTED_CURRENCY,        co.PRODUCT,        CAST(co.MATURITY_DATE AS DATE) AS MATURITY_DATE,        ct.EXECUTED_DATETIME,        ct.CONFIRMED_DATETIME,        ct.BANK AS EXECUTED_BANK,        cbr.BANK_NAME AS QUOTED_BANK,        'CM' AS SOURCE    INTO #pre_mm_data    FROM Vista_REPORTING.dbo.CASH_ORDERS co     LEFT JOIN Vista_REPORTING.dbo.CASH_TRADES ct ON ct.ORDER_ID = co.ORDER_ID    LEFT JOIN VISTA_REPORTING.dbo.CASH_MAPPED_BANKS cbr ON cbr.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER    WHERE co.PRODUCT_TYPE = 'Cash Products'        UNION        --Aladdin data    SELECT DISTINCT pm.ORD_NUM,        t.MULTI_FUND_ID AS TRADE_ID,        pm.AUTH_TIME,         CAST(t.TRD_TRADE_DATE AS DATE),        pm.CURRENCY,        pm.SM_SEC_TYPE,        pm.MATURITY,        t.EXECUTION_TIME,        t.EXECUTION_TIME,        t.TRD_COUNTERPARTY AS EXECUTED_BANK,        CAST(cp.TRD_COUNTERPARTY AS VARCHAR),        'AL' AS SOURCE    FROM Vista_REPORTING.dbo.PM_ORDERS pm    LEFT JOIN Vista_Reporting.dbo.ORDERS_CROSS oc ON oc.PM_ORD = pm.ORD_NUM    LEFT JOIN Vista_REPORTING.dbo.TRADES t ON t.ORD_NUM = oc.TRD_ORD    LEFT JOIN VISTA_REPORTING.dbo.QUOTES q ON q.MULTI_FUND_ID = t.MULTI_FUND_ID    LEFT JOIN VISTA_REPORTING.dbo.COUNTERPARTIES cp ON cp.COUNTERPARTY_CODE = q.BROKER    --LEFT JOIN Vista_Reporting.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID = t.MULTI_FUND_ID    WHERE pm.DEALING_DESK = 'CASH';            IF OBJECT_ID('tempdb..#pre_rr_data', 'U') IS NOT NULL DROP TABLE #pre_rr_data;    SELECT DISTINCT co.ORDER_ID,        ct.TRANSACTION_NUMBER AS TRADE_ID,        co.INSTRUCTION_RECEIVED_DATE,         CAST(co.VALUE_DATE AS DATE) AS VALUE_DATE,        co.INSTRUCTED_CURRENCY,        co.PRODUCT,        CAST(co.MATURITY_DATE AS DATE) AS MATURITY_DATE,        ct.EXECUTED_DATETIME,        ct.CONFIRMED_DATETIME,        ct.BANK AS EXECUTED_BANK,        cbr.BANK_NAME AS QUOTED_BANK,        'CM' AS SOURCE    INTO #pre_rr_data    FROM Vista_REPORTING.dbo.CASH_ORDERS co     LEFT JOIN Vista_REPORTING.dbo.CASH_TRADES ct    LEFT JOIN VISTA_REPORTING.dbo.CASH_MAPPED_BANKS cbr ON cbr.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER    ON ct.ORDER_ID = co.ORDER_ID    WHERE co.PRODUCT_TYPE = 'Repo / Rev Repo Products'            --Removing the order IDs that only appear once as they then cannot be of the same batch or comparable and therefore cannot become an exception    IF OBJECT_ID('tempdb..#pot_exceptions_mm', 'U') IS NOT NULL DROP TABLE #pot_exceptions_mm;    SELECT DISTINCT co.ORDER_ID,        co.TRADE_ID,        co.INSTRUCTION_RECEIVED_DATE,         CAST(co.VALUE_DATE AS DATE) AS VALUE_DATE,        co.INSTRUCTED_CURRENCY,        co.PRODUCT,        CAST(co.MATURITY_DATE AS DATE) AS MATURITY_DATE,        co.EXECUTED_DATETIME,        co.CONFIRMED_DATETIME,        co.EXECUTED_BANK,        co.QUOTED_BANK,        CO.SOURCE    INTO #pot_exceptions_mm    FROM #pre_mm_data co     INNER JOIN (SELECT         INSTRUCTION_RECEIVED_DATE,         COUNT(DISTINCT ORDER_ID) AS o_count        FROM #pre_mm_data        GROUP BY INSTRUCTION_RECEIVED_DATE) co2 ON co2.INSTRUCTION_RECEIVED_DATE = co.INSTRUCTION_RECEIVED_DATE            IF OBJECT_ID('tempdb..#pot_exceptions_rr', 'U') IS NOT NULL DROP TABLE #pot_exceptions_rr;    SELECT DISTINCT co.ORDER_ID,        co.TRADE_ID,        co.INSTRUCTION_RECEIVED_DATE,         CAST(co.VALUE_DATE AS DATE) AS VALUE_DATE,        co.INSTRUCTED_CURRENCY,        co.PRODUCT,        CAST(co.MATURITY_DATE AS DATE) AS MATURITY_DATE,        co.EXECUTED_DATETIME,        co.CONFIRMED_DATETIME,        co.EXECUTED_BANK,        co.QUOTED_BANK,        CO.SOURCE    INTO #pot_exceptions_rr    FROM #pre_rr_data co     INNER JOIN (SELECT         INSTRUCTION_RECEIVED_DATE,         COUNT(DISTINCT ORDER_ID) AS o_count        FROM #pre_rr_data        GROUP BY INSTRUCTION_RECEIVED_DATE) co2 ON co2.INSTRUCTION_RECEIVED_DATE = co.INSTRUCTION_RECEIVED_DATE            --Requirement 3, orders that meet the comparable criteria      IF OBJECT_ID('tempdb..#comparable_mm', 'U') IS NOT NULL DROP TABLE #comparable_mm;    SELECT DISTINCT p1.*    INTO #comparable_mm    FROM #pot_exceptions_mm p1    INNER JOIN #pot_exceptions_mm p2 ON  p1.INSTRUCTION_RECEIVED_DATE = p2.INSTRUCTION_RECEIVED_DATE             AND p1.VALUE_DATE = p2.VALUE_DATE             AND p1.MATURITY_DATE = p2.MATURITY_DATE             AND p1.INSTRUCTED_CURRENCY = p2.INSTRUCTED_CURRENCY             AND p1.PRODUCT = p2.PRODUCT             AND p1.ORDER_ID != p2.ORDER_ID;                IF OBJECT_ID('tempdb..#comparable_rr', 'U') IS NOT NULL DROP TABLE #comparable_rr;    SELECT DISTINCT p1.*    INTO #comparable_rr    FROM #pot_exceptions_rr p1    INNER JOIN #pot_exceptions_rr p2 ON  p1.INSTRUCTION_RECEIVED_DATE = p2.INSTRUCTION_RECEIVED_DATE             AND p1.VALUE_DATE = p2.VALUE_DATE             AND p1.MATURITY_DATE = p2.MATURITY_DATE             AND p1.INSTRUCTED_CURRENCY = p2.INSTRUCTED_CURRENCY             AND p1.PRODUCT = p2.PRODUCT              AND p1.ORDER_ID != p2.ORDER_ID;                /* Requirement 1 is no longer needed as requirement 5b will handle any comparable orders that are not aggregated together.        --Requirement 1a rr, comparable orders from the same batch not aggregated together (aggregated = same executed date time)    IF OBJECT_ID('tempdb..#req1a_rr', 'U') IS NOT NULL DROP TABLE #req1a_rr;    SELECT DISTINCT p1.*,        CASE WHEN p1.EXECUTED_DATETIME != p2.EXECUTED_DATETIME        THEN '1'         ELSE '0'        END AS AGGREGATION_EXCEPTION    INTO #req1a_rr    FROM #comparable_rr p1    LEFT JOIN #comparable_rr P2 ON  p1.INSTRUCTION_RECEIVED_DATE = p2.INSTRUCTION_RECEIVED_DATE              AND p1.VALUE_DATE = p2.VALUE_DATE              AND p1.MATURITY_DATE = p2.MATURITY_DATE              AND p1.INSTRUCTED_CURRENCY = p2.INSTRUCTED_CURRENCY           AND p1.PRODUCT = p2.PRODUCT           AND NULLIF(p1.EXECUTED_DATETIME, '') != NULLIF(p2.EXECUTED_DATETIME, '')    WHERE p1.EXECUTED_DATETIME != p2.EXECUTED_DATETIME;                    --Requirement 1a mm, comparable orders from the same batch not aggregated together (aggregated = same confirmed date time)    IF OBJECT_ID('tempdb..#req1a_mm', 'U') IS NOT NULL DROP TABLE #req1a_mm;    SELECT DISTINCT p1.*,        CASE WHEN p1.CONFIRMED_DATETIME != p2.CONFIRMED_DATETIME        THEN '1'         ELSE '0'        END AS AGGREGATION_EXCEPTION    INTO #req1a_mm    FROM #comparable_mm p1    LEFT JOIN #comparable_mm P2 ON p1.INSTRUCTION_RECEIVED_DATE = p2.INSTRUCTION_RECEIVED_DATE              AND p1.VALUE_DATE = p2.VALUE_DATE              AND p1.MATURITY_DATE = p2.MATURITY_DATE              AND p1.INSTRUCTED_CURRENCY = p2.INSTRUCTED_CURRENCY           AND p1.PRODUCT = p2.PRODUCT           AND NULLIF(p1.CONFIRMED_DATETIME, '') != NULLIF(p2.CONFIRMED_DATETIME, '')    WHERE p1.CONFIRMED_DATETIME != p2.CONFIRMED_DATETIME; */                --Requirement 4, bank panel consideration     --Step 1: Due to the Bank Panel condition we can remove any orders that have less than three banks in    --    their bank panel thus reducing the size of the population for consideration    IF OBJECT_ID('tempdb..#req4_init_cut_mm', 'U') IS NOT NULL DROP TABLE #req4_init_cut_mm;    SELECT      ORDER_ID    INTO #req4_init_cut_mm    FROM #comparable_mm     GROUP BY ORDER_ID    HAVING COUNT(DISTINCT QUOTED_BANK) >= 3;            IF OBJECT_ID('tempdb..#req4_init_cut_rr', 'U') IS NOT NULL DROP TABLE #req4_init_cut_rr;    SELECT      ORDER_ID    INTO #req4_init_cut_rr    FROM #comparable_rr    GROUP BY ORDER_ID    HAVING COUNT(DISTINCT QUOTED_BANK) >= 3;            --Step 2: Get all the EXECUTED_BANKS related to the IDs in Step 1    IF OBJECT_ID('tempdb..#req4_exec_bank_mm', 'U') IS NOT NULL DROP TABLE #req4_exec_bank_mm;    SELECT      cmm.*    INTO #req4_exec_bank_mm    FROM #comparable_mm cmm    WHERE EXISTS (SELECT rmm.ORDER_ID FROM #req4_init_cut_mm rmm WHERE rmm.ORDER_ID = cmm.ORDER_ID)            IF OBJECT_ID('tempdb..#req4_exec_bank_rr', 'U') IS NOT NULL DROP TABLE #req4_exec_bank_rr;    SELECT      crr.*    INTO #req4_exec_bank_rr    FROM #comparable_rr crr    WHERE EXISTS (SELECT rmm.ORDER_ID FROM #req4_init_cut_rr rmm WHERE rmm.ORDER_ID = crr.ORDER_ID)            --Step 3: Join the table made in Step 2 and join it onto itself to find all the IDs where the ORDER_IDs are     --    different yet the EXECUTED_BANK matches and only keep cases where for each pair or ORDER_IDs the     --    number of distinct EXECUTED_BANKs is greater than 3. This table will be used to set exception values    --    later on in the script.    --IF OBJECT_ID('tempdb..#req4_mm', 'U') IS NOT NULL DROP TABLE #req4_mm;    --SELECT DISTINCT    -- brr1.ORDER_ID    --INTO #req4_mm    --FROM #req4_exec_bank_mm brr1    --LEFT JOIN #req4_exec_bank_mm brr2 ON brr2.ORDER_ID != brr1.ORDER_ID    --         AND brr2.QUOTED_BANK = brr1.QUOTED_BANK    --         AND brr2.INSTRUCTION_RECEIVED_DATE = brr1.INSTRUCTION_RECEIVED_DATE    --         AND brr2.VALUE_DATE = brr1.VALUE_DATE    --         AND brr2.MATURITY_DATE = brr1.MATURITY_DATE    --         AND brr2.INSTRUCTED_CURRENCY = brr1.INSTRUCTED_CURRENCY    --         AND brr2.PRODUCT = brr1.PRODUCT    --GROUP BY brr1.ORDER_ID    --HAVING COUNT(DISTINCT brr2.QUOTED_BANK) >= 3             --IF OBJECT_ID('tempdb..#req4_rr', 'U') IS NOT NULL DROP TABLE #req4_rr;    --SELECT DISTINCT    -- brr1.ORDER_ID    --INTO #req4_rr    --FROM #req4_exec_bank_rr brr1    --LEFT JOIN #req4_exec_bank_rr brr2 ON brr2.ORDER_ID != brr1.ORDER_ID -- Here we are joining     --         AND brr2.QUOTED_BANK = brr1.QUOTED_BANK    --         AND brr2.INSTRUCTION_RECEIVED_DATE = brr1.INSTRUCTION_RECEIVED_DATE    --         AND brr2.VALUE_DATE = brr1.VALUE_DATE    --         AND brr2.MATURITY_DATE = brr1.MATURITY_DATE    --         AND brr2.INSTRUCTED_CURRENCY = brr1.INSTRUCTED_CURRENCY    --         AND brr2.PRODUCT = brr1.PRODUCT     --GROUP BY brr1.ORDER_ID, brr2.ORDER_ID    --HAVING COUNT(DISTINCT brr2.QUOTED_BANK) >= 3             IF OBJECT_ID('tempdb..#invalid_bank_p_mm', 'U') IS NOT NULL DROP TABLE #invalid_bank_p_mm;    SELECT pe.ORDER_ID     INTO #invalid_bank_p_mm    FROM #comparable_mm pe    LEFT JOIN #comparable_mm pe2 ON pe2.ORDER_ID != pe.ORDER_ID -- Here we are joining              AND pe2.QUOTED_BANK = pe.QUOTED_BANK             AND pe2.INSTRUCTION_RECEIVED_DATE = pe.INSTRUCTION_RECEIVED_DATE             AND pe2.VALUE_DATE = pe.VALUE_DATE             AND pe2.MATURITY_DATE = pe.MATURITY_DATE             AND pe2.INSTRUCTED_CURRENCY = pe.INSTRUCTED_CURRENCY             AND pe2.PRODUCT = pe.PRODUCT      WHERE pe2.ORDER_ID IS NOT NULL    GROUP BY pe.ORDER_ID    HAVING COUNT(distinct pe2.QUOTED_BANK) < 3        UNION        SELECT pe.ORDER_ID     FROM #comparable_mm pe    LEFT JOIN #comparable_mm pe2 ON pe2.ORDER_ID != pe.ORDER_ID -- Here we are joining              AND pe2.QUOTED_BANK = pe.QUOTED_BANK             AND pe2.INSTRUCTION_RECEIVED_DATE = pe.INSTRUCTION_RECEIVED_DATE             AND pe2.VALUE_DATE = pe.VALUE_DATE             AND pe2.MATURITY_DATE = pe.MATURITY_DATE             AND pe2.INSTRUCTED_CURRENCY = pe.INSTRUCTED_CURRENCY             AND pe2.PRODUCT = pe.PRODUCT      GROUP BY pe.ORDER_ID    HAVING COUNT(distinct pe2.QUOTED_BANK) = 0            IF OBJECT_ID('tempdb..#invalid_bank_p_rr', 'U') IS NOT NULL DROP TABLE #invalid_bank_p_rr;    SELECT pe.ORDER_ID     INTO #invalid_bank_p_rr    FROM #comparable_rr pe    LEFT JOIN #comparable_rr pe2 ON pe2.ORDER_ID != pe.ORDER_ID -- Here we are joining              AND pe2.QUOTED_BANK = pe.QUOTED_BANK             AND pe2.INSTRUCTION_RECEIVED_DATE = pe.INSTRUCTION_RECEIVED_DATE             AND pe2.VALUE_DATE = pe.VALUE_DATE             AND pe2.MATURITY_DATE = pe.MATURITY_DATE             AND pe2.INSTRUCTED_CURRENCY = pe.INSTRUCTED_CURRENCY             AND pe2.PRODUCT = pe.PRODUCT      WHERE pe2.ORDER_ID IS NOT NULL    GROUP BY pe.ORDER_ID    HAVING COUNT(distinct pe2.QUOTED_BANK) < 3        UNION        SELECT pe.ORDER_ID     FROM #comparable_rr pe    LEFT JOIN #comparable_rr pe2 ON pe2.ORDER_ID != pe.ORDER_ID -- Here we are joining              AND pe2.QUOTED_BANK = pe.QUOTED_BANK             AND pe2.INSTRUCTION_RECEIVED_DATE = pe.INSTRUCTION_RECEIVED_DATE             AND pe2.VALUE_DATE = pe.VALUE_DATE             AND pe2.MATURITY_DATE = pe.MATURITY_DATE             AND pe2.INSTRUCTED_CURRENCY = pe.INSTRUCTED_CURRENCY             AND pe2.PRODUCT = pe.PRODUCT      GROUP BY pe.ORDER_ID    HAVING COUNT(distinct pe2.QUOTED_BANK) = 0            IF OBJECT_ID('tempdb..#failed_bank_panel_crit_mm') IS NOT NULL DROP TABLE #failed_bank_panel_crit_mm;    SELECT DISTINCT     vb.INSTRUCTION_RECEIVED_DATE,     vb.VALUE_DATE,     vb.MATURITY_DATE,     vb.INSTRUCTED_CURRENCY,     vb.PRODUCT    INTO #failed_bank_panel_crit_mm    FROM #comparable_mm vb    INNER JOIN #invalid_bank_p_mm r on r.ORDER_ID = vb.ORDER_ID            IF OBJECT_ID('tempdb..#failed_bank_panel_crit_rr') IS NOT NULL DROP TABLE #failed_bank_panel_crit_rr;    SELECT DISTINCT     vb.INSTRUCTION_RECEIVED_DATE,     vb.VALUE_DATE,     vb.MATURITY_DATE,     vb.INSTRUCTED_CURRENCY,     vb.PRODUCT    INTO #failed_bank_panel_crit_rr    FROM #comparable_rr vb    INNER JOIN #invalid_bank_p_rr r on r.ORDER_ID = vb.ORDER_ID            IF OBJECT_ID('tempdb..#bank_panel_exclusions_mm') IS NOT NULL DROP TABLE #bank_panel_exclusions_mm;    SELECT DISTINCT      c.ORDER_ID    INTO #bank_panel_exclusions_mm    FROM #comparable_mm c    INNER JOIN #failed_bank_panel_crit_mm fbp ON fbp.INSTRUCTION_RECEIVED_DATE = c.INSTRUCTION_RECEIVED_DATE                AND fbp.VALUE_DATE = c.VALUE_DATE                AND fbp.INSTRUCTED_CURRENCY = c.INSTRUCTED_CURRENCY                AND fbp.MATURITY_DATE = c.MATURITY_DATE                AND fbp.PRODUCT = c.PRODUCT            IF OBJECT_ID('tempdb..#bank_panel_exclusions_rr') IS NOT NULL DROP TABLE #bank_panel_exclusions_rr;    SELECT DISTINCT      c.ORDER_ID    INTO #bank_panel_exclusions_rr    FROM #comparable_rr c    INNER JOIN #failed_bank_panel_crit_rr fbp ON fbp.INSTRUCTION_RECEIVED_DATE = c.INSTRUCTION_RECEIVED_DATE                AND fbp.VALUE_DATE = c.VALUE_DATE                AND fbp.INSTRUCTED_CURRENCY = c.INSTRUCTED_CURRENCY                AND fbp.MATURITY_DATE = c.MATURITY_DATE                AND fbp.PRODUCT = c.PRODUCT            --Requirement 5a, finding batches of uneven splits     --Step 1: finding all orders with more than 1 trade associated, and a count of how many trades    IF OBJECT_ID('tempdb..#temp5a_1_mm', 'U') IS NOT NULL DROP TABLE #temp5a_1_mm;    SELECT ORDER_ID, INSTRUCTION_RECEIVED_DATE, COUNT(DISTINCT TRADE_ID) AS T_COUNT    INTO #temp5a_1_mm    FROM #pot_exceptions_mm     GROUP BY ORDER_ID, INSTRUCTION_RECEIVED_DATE    HAVING COUNT(DISTINCT TRADE_ID) > 1;            IF OBJECT_ID('tempdb..#temp5a_1_rr', 'U') IS NOT NULL DROP TABLE #temp5a_1_rr;    SELECT ORDER_ID, INSTRUCTION_RECEIVED_DATE, COUNT(DISTINCT TRADE_ID) AS T_COUNT    INTO #temp5a_1_rr    FROM #pot_exceptions_rr     GROUP BY ORDER_ID, INSTRUCTION_RECEIVED_DATE    HAVING COUNT(DISTINCT TRADE_ID) > 1;            --Step 2:      IF OBJECT_ID('tempdb..#temp5a_2_mm', 'U') IS NOT NULL DROP TABLE #temp5a_2_mm;    DECLARE @split_count_mm INT    SET @split_count_mm = (SELECT COUNT(DISTINCT T_COUNT) FROM #temp5a_1_mm)        SELECT pe2.ORDER_ID    INTO #temp5a_2_mm    FROM (SELECT pe.ORDER_ID, INSTRUCTION_RECEIVED_DATE, COUNT(DISTINCT pe.TRADE_ID) AS T_COUNT    FROM #pot_exceptions_mm pe    GROUP BY pe.ORDER_ID, INSTRUCTION_RECEIVED_DATE) pe2    WHERE pe2.T_COUNT > 1 AND @split_count_mm > 1       AND EXISTS (SELECT #temp5a_1_mm.ORDER_ID           FROM #temp5a_1_mm           WHERE #temp5a_1_mm.ORDER_ID != pe2.ORDER_ID          AND #temp5a_1_mm.INSTRUCTION_RECEIVED_DATE = pe2.INSTRUCTION_RECEIVED_DATE          AND #temp5a_1_mm.T_COUNT != pe2.T_COUNT);            IF OBJECT_ID('tempdb..#temp5a_2_rr', 'U') IS NOT NULL DROP TABLE #temp5a_2_rr;    DECLARE @split_count_rr INT    SET @split_count_rr = (SELECT COUNT(DISTINCT T_COUNT) FROM #temp5a_1_rr)        SELECT pe2.ORDER_ID    INTO #temp5a_2_rr    FROM (SELECT pe.ORDER_ID, INSTRUCTION_RECEIVED_DATE, COUNT(DISTINCT pe.TRADE_ID) AS T_COUNT    FROM #pot_exceptions_rr pe    GROUP BY pe.ORDER_ID, INSTRUCTION_RECEIVED_DATE) pe2    WHERE pe2.T_COUNT > 1 AND @split_count_rr > 1       AND EXISTS (SELECT #temp5a_1_rr.ORDER_ID           FROM #temp5a_1_rr           WHERE #temp5a_1_rr.ORDER_ID != pe2.ORDER_ID          AND #temp5a_1_rr.INSTRUCTION_RECEIVED_DATE = pe2.INSTRUCTION_RECEIVED_DATE          AND #temp5a_1_rr.T_COUNT != pe2.T_COUNT);                --Step 3: getting all the columns for all of the exceptions    IF OBJECT_ID('tempdb..#req5a_mm', 'U') IS NOT NULL DROP TABLE #req5a_mm;    SELECT *,      1 AS AGGREGATION_EXCEPTION    INTO #req5a_mm    FROM #pot_exceptions_mm    WHERE EXISTS (SELECT ORDER_ID         FROM #temp5a_2_mm          WHERE #temp5a_2_mm.ORDER_ID = #pot_exceptions_mm.ORDER_ID);            IF OBJECT_ID('tempdb..#req5a_rr', 'U') IS NOT NULL DROP TABLE #req5a_rr;    SELECT *,      1 AS AGGREGATION_EXCEPTION    INTO #req5a_rr    FROM #pot_exceptions_rr    WHERE EXISTS ( SELECT ORDER_ID        FROM #temp5a_2_rr         WHERE #temp5a_2_rr.ORDER_ID = #pot_exceptions_rr.ORDER_ID);                --Requirement 5b, finding trade splits with different market arrival times     --Step 1: ranking the trades per order by market arrival date time     IF OBJECT_ID('tempdb..#initial_ranked_trades_mm', 'U') IS NOT NULL DROP TABLE #initial_ranked_trades_mm;    SELECT DISTINCT     ORDER_ID,     TRADE_ID,     INSTRUCTION_RECEIVED_DATE,      VALUE_DATE,     INSTRUCTED_CURRENCY,     PRODUCT,     MATURITY_DATE,     CONFIRMED_DATETIME,     EXECUTED_BANK,     DENSE_RANK () OVER (PARTITION BY ORDER_ID ORDER BY CONFIRMED_DATETIME DESC) NO_OF_TRADES    INTO #initial_ranked_trades_mm    FROM #comparable_mm;            IF OBJECT_ID('tempdb..#initial_ranked_trades_rr', 'U') IS NOT NULL DROP TABLE #initial_ranked_trades_rr;    SELECT      ORDER_ID,     TRADE_ID,     INSTRUCTION_RECEIVED_DATE,      VALUE_DATE,     INSTRUCTED_CURRENCY,     PRODUCT,     MATURITY_DATE,     EXECUTED_DATETIME,     EXECUTED_BANK,     DENSE_RANK () OVER (PARTITION BY ORDER_ID ORDER BY EXECUTED_DATETIME DESC) AS NO_OF_TRADES    INTO #initial_ranked_trades_rr    FROM #comparable_rr;            IF OBJECT_ID('tempdb..#max_rank_mm', 'U') IS NOT NULL DROP TABLE #max_rank_mm;    SELECT      ORDER_ID,      MAX(NO_OF_TRADES) AS MAX_RANK    INTO #max_rank_mm    FROM #initial_ranked_trades_mm    GROUP BY ORDER_ID            IF OBJECT_ID('tempdb..#max_rank_rr', 'U') IS NOT NULL DROP TABLE #max_rank_rr;    SELECT      ORDER_ID,      MAX(NO_OF_TRADES) AS MAX_RANK    INTO #max_rank_rr    FROM #initial_ranked_trades_rr    GROUP BY ORDER_ID        IF OBJECT_ID('tempdb..#ranked_trades_mm', 'U') IS NOT NULL DROP TABLE #ranked_trades_mm;    SELECT DISTINCT     rtm.*,     mrm.MAX_RANK    INTO #ranked_trades_mm    FROM #initial_ranked_trades_mm rtm    LEFT JOIN #max_rank_mm mrm ON mrm.ORDER_ID=rtm.ORDER_ID            IF OBJECT_ID('tempdb..#ranked_trades_rr', 'U') IS NOT NULL DROP TABLE #ranked_trades_rr;    SELECT DISTINCT     rtm.*,     mrm.MAX_RANK    INTO #ranked_trades_rr    FROM #initial_ranked_trades_rr rtm    LEFT JOIN #max_rank_rr mrm ON mrm.ORDER_ID=rtm.ORDER_ID            --Step 2: finding all of the exceptions where the market arrival date time does not match     IF OBJECT_ID('tempdb..#temp5b_1_mm', 'U') IS NOT NULL DROP TABLE #temp5b_1_mm;    SELECT DISTINCT rt.*     INTO #temp5b_1_mm    FROM #ranked_trades_mm rt    INNER JOIN #ranked_trades_mm rt2 ON rt2.ORDER_ID != rt.ORDER_ID               AND rt2.NO_OF_TRADES = rt.NO_OF_TRADES               AND rt2.INSTRUCTION_RECEIVED_DATE = rt.INSTRUCTION_RECEIVED_DATE               AND (ISNULL(rt2.CONFIRMED_DATETIME, '') != ISNULL(rt.CONFIRMED_DATETIME, '')              OR rt2.MAX_RANK != rt.MAX_RANK)    WHERE rt.CONFIRMED_DATETIME IS NOT NULL    ORDER BY ORDER_ID         --SURVG-797    IF OBJECT_ID('tempdb..#temp5b_1_rr', 'U') IS NOT NULL DROP TABLE #temp5b_1_rr;    SELECT DISTINCT rt.*     INTO #temp5b_1_rr    FROM #ranked_trades_rr rt    INNER JOIN #ranked_trades_rr rt2 ON rt2.ORDER_ID != rt.ORDER_ID               AND rt2.NO_OF_TRADES = rt.NO_OF_TRADES               AND rt2.INSTRUCTION_RECEIVED_DATE = rt.INSTRUCTION_RECEIVED_DATE               and rt2.MATURITY_DATE = rt.MATURITY_DATE               AND (ISNULL(rt2.EXECUTED_DATETIME, '') != ISNULL(rt.EXECUTED_DATETIME, '')                 OR rt2.MAX_RANK != rt.MAX_RANK)    WHERE rt.EXECUTED_DATETIME IS NOT NULL    ORDER BY ORDER_ID     --End of SURVG-797            --Step 3: getting all the columns for all of the exceptions    IF OBJECT_ID('tempdb..#req5b_mm', 'U') IS NOT NULL DROP TABLE #req5b_mm;    SELECT *,      1 AS AGGREGATION_EXCEPTION    INTO #req5b_mm    FROM #pot_exceptions_mm    WHERE EXISTS ( SELECT ORDER_ID        FROM #temp5b_1_mm         WHERE #temp5b_1_mm.ORDER_ID = #pot_exceptions_mm.ORDER_ID);            IF OBJECT_ID('tempdb..#req5b_rr', 'U') IS NOT NULL DROP TABLE #req5b_rr;    SELECT *,      1 AS AGGREGATION_EXCEPTION    INTO #req5b_rr    FROM #pot_exceptions_rr    WHERE EXISTS ( SELECT ORDER_ID        FROM #temp5b_1_rr         WHERE #temp5b_1_rr.ORDER_ID = #pot_exceptions_rr.ORDER_ID);            --Requirement 6 mm, same CDT, value date, maturity date, ccy and product but different IRDT    IF OBJECT_ID('tempdb..#req6_mm', 'U') IS NOT NULL DROP TABLE #req6_mm;    SELECT p1.*,      CASE WHEN p1.INSTRUCTION_RECEIVED_DATE != p2.INSTRUCTION_RECEIVED_DATE      THEN '1'       ELSE '0'      END AS AGGREGATION_EXCEPTION    INTO #req6_mm    FROM #pre_mm_data p1    INNER JOIN #pre_mm_data p2    ON p1.CONFIRMED_DATETIME != p2.CONFIRMED_DATETIME     AND p1.VALUE_DATE = p2.VALUE_DATE     AND p1.MATURITY_DATE = p2.MATURITY_DATE     AND p1.INSTRUCTED_CURRENCY = p2.INSTRUCTED_CURRENCY     AND p1.PRODUCT = p2.PRODUCT     AND p1.INSTRUCTION_RECEIVED_DATE = p2.INSTRUCTION_RECEIVED_DATE            --Requirement 6 rr, same executed date time, value date, maturity date, ccy and product but different IRDT    IF OBJECT_ID('tempdb..#req6_rr', 'U') IS NOT NULL DROP TABLE #req6_rr;    SELECT p1.*,      CASE WHEN p1.INSTRUCTION_RECEIVED_DATE != p2.INSTRUCTION_RECEIVED_DATE      THEN '1'       ELSE '0'      END AS AGGREGATION_EXCEPTION    INTO #req6_rr    FROM #pre_rr_data p1    INNER JOIN #pre_rr_data p2    ON p1.EXECUTED_DATETIME != p2.EXECUTED_DATETIME     AND p1.VALUE_DATE = p2.VALUE_DATE     AND p1.MATURITY_DATE = p2.MATURITY_DATE     AND p1.INSTRUCTED_CURRENCY = p2.INSTRUCTED_CURRENCY     AND p1.PRODUCT = p2.PRODUCT     AND p1.INSTRUCTION_RECEIVED_DATE = p2.INSTRUCTION_RECEIVED_DATE            --------STEP 1 OF UPDATING THE EXCEPTIONS TABLES--------        --Final ids for mm    IF OBJECT_ID('tempdb..#final_ids_mm') IS NOT NULL DROP TABLE #final_ids_mm;    SELECT DISTINCT co.ORDER_ID,         'CM' AS SOURCE    INTO #final_ids_mm    FROM VISTA_REPORTING.dbo.CASH_ORDERS co    WHERE PRODUCT_TYPE = 'Cash Products'    UNION     SELECT DISTINCT ORD_NUM,         'AL' AS SOURCE    FROM VISTA_REPORTING.dbo.PM_ORDERS pm    WHERE pm.DEALING_DESK = 'CASH';            --Final ids for rr    IF OBJECT_ID('tempdb..#final_ids_rr') IS NOT NULL DROP TABLE #final_ids_rr;    SELECT DISTINCT co.ORDER_ID,         'CM' AS SOURCE    INTO #final_ids_rr    FROM VISTA_REPORTING.DBO.CASH_ORDERS co    WHERE PRODUCT_TYPE = 'Repo / Rev Repo Products'                --------STEP 2 OF UPDATING THE EXCEPTIONS TABLES--------        IF OBJECT_ID('tempdb..#temp_final_1_mm') IS NOT NULL DROP TABLE #temp_final_1_mm;    SELECT ORDER_ID,       TRADE_ID,      INSTRUCTION_RECEIVED_DATE,      VALUE_DATE,      INSTRUCTED_CURRENCY,      PRODUCT,      MATURITY_DATE,      EXECUTED_DATETIME,      CONFIRMED_DATETIME,      EXECUTED_BANK,      SOURCE,      CASE        WHEN INSTRUCTION_RECEIVED_DATE < '2020-08-28' THEN 0       WHEN EXISTS (SELECT #bank_panel_exclusions_mm.ORDER_ID FROM #bank_panel_exclusions_mm WHERE #req5a_mm.ORDER_ID = #bank_panel_exclusions_mm.ORDER_ID) THEN 0        ELSE AGGREGATION_EXCEPTION      END AS VG_611_1,      0 AS VG_611_2,      0 AS VG_611_3,      'Orders with uneven trade splits' AS REASON    INTO #temp_final_1_mm    FROM #req5a_mm      UNION     SELECT ORDER_ID,       TRADE_ID,      INSTRUCTION_RECEIVED_DATE,      VALUE_DATE,      INSTRUCTED_CURRENCY,      PRODUCT,      MATURITY_DATE,      EXECUTED_DATETIME,      CONFIRMED_DATETIME,      EXECUTED_BANK,      SOURCE,      0 AS VG_611_1,      CASE        WHEN INSTRUCTION_RECEIVED_DATE < '2020-08-28' THEN 0       WHEN EXISTS (SELECT #bank_panel_exclusions_mm.ORDER_ID FROM #bank_panel_exclusions_mm WHERE #req5b_mm.ORDER_ID = #bank_panel_exclusions_mm.ORDER_ID) THEN 0        ELSE AGGREGATION_EXCEPTION      END AS VG_611_2,      0 AS VG_611_3,      'Trade splits with different market arrival times' AS REASON     FROM #req5b_mm     UNION     SELECT ORDER_ID,       TRADE_ID,      INSTRUCTION_RECEIVED_DATE,      VALUE_DATE,      INSTRUCTED_CURRENCY,      PRODUCT,      MATURITY_DATE,      EXECUTED_DATETIME,      CONFIRMED_DATETIME,      EXECUTED_BANK,      SOURCE,      0 AS VG_611_1,      0 AS VG_611_2,      CASE        WHEN INSTRUCTION_RECEIVED_DATE < '2020-08-28' THEN 0       WHEN EXISTS (SELECT #bank_panel_exclusions_mm.ORDER_ID FROM #bank_panel_exclusions_mm WHERE #req6_mm.ORDER_ID = #bank_panel_exclusions_mm.ORDER_ID) THEN 0        ELSE AGGREGATION_EXCEPTION       END AS VG_611_3,      'Different instruction received date' AS REASON     FROM #req6_mm     ORDER BY INSTRUCTION_RECEIVED_DATE;            IF OBJECT_ID('tempdb..#temp_final_1_rr') IS NOT NULL DROP TABLE #temp_final_1_rr;    SELECT ORDER_ID,       TRADE_ID,      INSTRUCTION_RECEIVED_DATE,      VALUE_DATE,      INSTRUCTED_CURRENCY,      PRODUCT,      MATURITY_DATE,      EXECUTED_DATETIME,      CONFIRMED_DATETIME,      EXECUTED_BANK,      SOURCE,      CASE        WHEN INSTRUCTION_RECEIVED_DATE < '2020-08-28' THEN 0       WHEN EXISTS (SELECT #bank_panel_exclusions_rr.ORDER_ID FROM #bank_panel_exclusions_rr WHERE #req5a_rr.ORDER_ID = #bank_panel_exclusions_rr.ORDER_ID) THEN 0        ELSE AGGREGATION_EXCEPTION      END AS VG_611_1,      0 AS VG_611_2,      0 AS VG_611_3,      'Orders with uneven trade splits' AS REASON    INTO #temp_final_1_rr    FROM #req5a_rr      UNION     SELECT ORDER_ID,       TRADE_ID,      INSTRUCTION_RECEIVED_DATE,      VALUE_DATE,      INSTRUCTED_CURRENCY,      PRODUCT,      MATURITY_DATE,      EXECUTED_DATETIME,      CONFIRMED_DATETIME,      EXECUTED_BANK,      SOURCE,      0 AS VG_611_1,      CASE       WHEN INSTRUCTION_RECEIVED_DATE < '2020-08-28' THEN 0        WHEN EXISTS (SELECT #bank_panel_exclusions_rr.ORDER_ID FROM #bank_panel_exclusions_rr WHERE #req5b_rr.ORDER_ID = #bank_panel_exclusions_rr.ORDER_ID) THEN 0        ELSE AGGREGATION_EXCEPTION      END AS VG_611_2,      0 AS VG_611_3,      'Trade splits with different market arrival times' AS REASON     FROM #req5b_rr     UNION     SELECT ORDER_ID,       TRADE_ID,      INSTRUCTION_RECEIVED_DATE,      VALUE_DATE,      INSTRUCTED_CURRENCY,      PRODUCT,      MATURITY_DATE,      EXECUTED_DATETIME,      CONFIRMED_DATETIME,      EXECUTED_BANK,      SOURCE,      0 AS VG_611_1,      0 AS VG_611_2,      CASE        WHEN INSTRUCTION_RECEIVED_DATE < '2020-08-28' THEN 0       WHEN EXISTS (SELECT #bank_panel_exclusions_rr.ORDER_ID FROM #bank_panel_exclusions_rr WHERE #req6_rr.ORDER_ID = #bank_panel_exclusions_rr.ORDER_ID) THEN 0        ELSE AGGREGATION_EXCEPTION       END AS VG_611_3,      'Different instruction received date' AS REASON     FROM #req6_rr     ORDER BY INSTRUCTION_RECEIVED_DATE;            --------STEP 3 OF UPDATING THE EXCEPTIONS TABLES--------        IF OBJECT_ID('tempdb..#unique_mm') IS NOT NULL DROP TABLE #unique_mm;    SELECT CO.ORDER_ID,      TRADE_ID,       MAX(VG_611_1) AS VG_611_1,      MAX(VG_611_2) AS VG_611_2,      MAX(VG_611_3) AS VG_611_3,      co.SOURCE    INTO #unique_mm    FROM #final_ids_mm co    LEFT JOIN #temp_final_1_mm tf ON co.ORDER_ID = tf.ORDER_ID    GROUP BY CO.ORDER_ID,    TRADE_ID,    co.SOURCE        IF OBJECT_ID('tempdb..#temp_final_2_mm') IS NOT NULL DROP TABLE #temp_final_2_mm;    SELECT CO.ORDER_ID,      TRADE_ID,     CASE WHEN TF.VG_611_1 = 1 AND TF.VG_611_2 = 0 AND TF.VG_611_3 = 0 THEN 1      WHEN TF.VG_611_1 = 0 AND TF.VG_611_2 = 1 AND TF.VG_611_3 = 0 THEN 1      WHEN TF.VG_611_1 = 0 AND TF.VG_611_2 = 0 AND TF.VG_611_3 = 1 THEN 1      WHEN TF.VG_611_1 = 1 AND TF.VG_611_2 = 1 AND TF.VG_611_3 = 0 THEN 1      WHEN TF.VG_611_1 = 0 AND TF.VG_611_2 = 1 AND TF.VG_611_3 = 1 THEN 1      WHEN TF.VG_611_1 = 1 AND TF.VG_611_2 = 0 AND TF.VG_611_3 = 1 THEN 1      WHEN TF.VG_611_1 = 1 AND TF.VG_611_2 = 1 AND TF.VG_611_3 = 1 THEN 1      WHEN TF.VG_611_1 = 0 AND TF.VG_611_2 = 0 AND TF.VG_611_3 = 0 THEN 0      ELSE 0       END AS VG_611,    CASE WHEN TF.VG_611_1 = 1 AND TF.VG_611_2 = 0 AND TF.VG_611_3 = 0 THEN GETDATE()      WHEN TF.VG_611_1 = 0 AND TF.VG_611_2 = 1 AND TF.VG_611_3 = 0 THEN GETDATE()      WHEN TF.VG_611_1 = 0 AND TF.VG_611_2 = 0 AND TF.VG_611_3 = 1 THEN GETDATE()      WHEN TF.VG_611_1 = 1 AND TF.VG_611_2 = 1 AND TF.VG_611_3 = 0 THEN GETDATE()      WHEN TF.VG_611_1 = 0 AND TF.VG_611_2 = 1 AND TF.VG_611_3 = 1 THEN GETDATE()      WHEN TF.VG_611_1 = 1 AND TF.VG_611_2 = 0 AND TF.VG_611_3 = 1 THEN GETDATE()      WHEN TF.VG_611_1 = 1 AND TF.VG_611_2 = 1 AND TF.VG_611_3 = 1 THEN GETDATE()      WHEN TF.VG_611_1 = 0 AND TF.VG_611_2 = 0 AND TF.VG_611_3 = 0 THEN NULL      END AS VG_611_CREATETIME,      co.SOURCE    INTO #temp_final_2_mm    FROM #final_ids_mm co    LEFT JOIN #temp_final_1_mm tf ON co.ORDER_ID = tf.ORDER_ID            IF OBJECT_ID('tempdb..#unique_rr') IS NOT NULL DROP TABLE #unique_rr;    SELECT CO.ORDER_ID,      TRADE_ID,       MAX(VG_611_1) AS VG_611_1,      MAX(VG_611_2) AS VG_611_2,      MAX(VG_611_3) AS VG_611_3,      co.SOURCE    INTO #unique_rr    FROM #final_ids_rr co    LEFT JOIN #temp_final_1_rr tf ON co.ORDER_ID = tf.ORDER_ID    GROUP BY CO.ORDER_ID,    TRADE_ID,    co.SOURCE            IF OBJECT_ID('tempdb..#temp_final_2_rr') IS NOT NULL DROP TABLE #temp_final_2_rr;    SELECT co.ORDER_ID,      TRADE_ID,     CASE WHEN TF.VG_611_1 = 1 AND TF.VG_611_2 = 0 AND TF.VG_611_3 = 0 THEN 1      WHEN TF.VG_611_1 = 0 AND TF.VG_611_2 = 1 AND TF.VG_611_3 = 0 THEN 1      WHEN TF.VG_611_1 = 0 AND TF.VG_611_2 = 0 AND TF.VG_611_3 = 1 THEN 1      WHEN TF.VG_611_1 = 1 AND TF.VG_611_2 = 1 AND TF.VG_611_3 = 0 THEN 1      WHEN TF.VG_611_1 = 0 AND TF.VG_611_2 = 1 AND TF.VG_611_3 = 1 THEN 1      WHEN TF.VG_611_1 = 1 AND TF.VG_611_2 = 0 AND TF.VG_611_3 = 1 THEN 1      WHEN TF.VG_611_1 = 1 AND TF.VG_611_2 = 1 AND TF.VG_611_3 = 1 THEN 1      WHEN TF.VG_611_1 = 0 AND TF.VG_611_2 = 0 AND TF.VG_611_3 = 0 THEN 0      ELSE 0      END AS VG_611,    CASE WHEN TF.VG_611_1 = 1 AND TF.VG_611_2 = 0 AND TF.VG_611_3 = 0 THEN GETDATE()      WHEN TF.VG_611_1 = 0 AND TF.VG_611_2 = 1 AND TF.VG_611_3 = 0 THEN GETDATE()      WHEN TF.VG_611_1 = 0 AND TF.VG_611_2 = 0 AND TF.VG_611_3 = 1 THEN GETDATE()      WHEN TF.VG_611_1 = 1 AND TF.VG_611_2 = 1 AND TF.VG_611_3 = 0 THEN GETDATE()      WHEN TF.VG_611_1 = 0 AND TF.VG_611_2 = 1 AND TF.VG_611_3 = 1 THEN GETDATE()      WHEN TF.VG_611_1 = 1 AND TF.VG_611_2 = 0 AND TF.VG_611_3 = 1 THEN GETDATE()      WHEN TF.VG_611_1 = 1 AND TF.VG_611_2 = 1 AND TF.VG_611_3 = 1 THEN GETDATE()      WHEN TF.VG_611_1 = 0 AND TF.VG_611_2 = 0 AND TF.VG_611_3 = 0 THEN NULL      END AS VG_611_CREATETIME,      co.SOURCE    INTO #temp_final_2_rr    FROM #final_ids_rr co    LEFT JOIN #unique_rr tf ON co.ORDER_ID = tf.ORDER_ID;                --------STEP 4 OF UPDATING THE EXCEPTIONS TABLES--------        --Updating the rr exceptions table     IF OBJECT_ID('VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_RR_TABLE', 'U') IS NULL     SELECT DISTINCT       ORDER_ID,      MAX(VG_611) AS VG_611,      MAX(VG_611_CREATETIME) AS VG_611_CREATETIME,      SOURCE AS [DATA_SOURCE]    INTO VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_RR_TABLE       FROM #temp_final_2_rr     GROUP BY ORDER_ID, SOURCE        ELSE     IF OBJECT_ID('tempdb..#final_temp_vg_rr', 'U') IS NOT NULL DROP TABLE #final_temp_vg_rr     SELECT DISTINCT       ORDER_ID,      MAX(VG_611) AS VG_611,      MAX(VG_611_CREATETIME) AS VG_611_CREATETIME,      SOURCE AS [DATA_SOURCE]     INTO #final_temp_vg_rr     FROM #temp_final_2_rr     GROUP BY ORDER_ID, SOURCE         MERGE VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_RR_TABLE AS T      USING #final_temp_vg_rr AS S     ON (T.ORDER_ID = S.ORDER_ID AND T.[DATA_SOURCE] = S.[DATA_SOURCE])     WHEN MATCHED      THEN UPDATE       SET       ORDER_ID = CASE WHEN S.VG_611 > T.VG_611 THEN S.ORDER_ID ELSE T.ORDER_ID END,      VG_611 = CASE WHEN S.VG_611 > T.VG_611 THEN S.VG_611 ELSE T.VG_611 END,      VG_611_CREATETIME = CASE WHEN S.VG_611 > T.VG_611 THEN S.VG_611_CREATETIME ELSE T.VG_611_CREATETIME END,      [DATA_SOURCE] = CASE WHEN S.VG_611 > T.VG_611 THEN S.[DATA_SOURCE] ELSE T.[DATA_SOURCE] END         WHEN NOT MATCHED       THEN INSERT       (ORDER_ID,      VG_611,      VG_611_CREATETIME,      [DATA_SOURCE])         VALUES      (S.ORDER_ID,      S.VG_611,      S.VG_611_CREATETIME,      S.[DATA_SOURCE]);            --Updating the mm exceptions table     IF OBJECT_ID('VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_MM_TABLE', 'U') IS NULL     SELECT DISTINCT       ORDER_ID,      MAX(VG_611) AS VG_611,      MAX(VG_611_CREATETIME) AS VG_611_CREATETIME,      SOURCE AS [DATA_SOURCE]    INTO VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_MM_TABLE       FROM #temp_final_2_mm     GROUP BY ORDER_ID, SOURCE        ELSE     IF OBJECT_ID('tempdb..#final_temp_vg_mm', 'U') IS NOT NULL DROP TABLE #final_temp_vg_mm     SELECT DISTINCT       ORDER_ID,      MAX(VG_611) AS VG_611,      MAX(VG_611_CREATETIME) AS VG_611_CREATETIME,      SOURCE AS [DATA_SOURCE]     INTO #final_temp_vg_mm     FROM #temp_final_2_mm     GROUP BY ORDER_ID, SOURCE         MERGE VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_CASH_MM_TABLE AS T      USING #final_temp_vg_mm AS S     ON (T.ORDER_ID = S.ORDER_ID AND T.[DATA_SOURCE] = S.[DATA_SOURCE])     WHEN MATCHED      THEN UPDATE       SET       ORDER_ID = CASE WHEN S.VG_611 > T.VG_611 THEN S.ORDER_ID ELSE T.ORDER_ID END,      VG_611 = CASE WHEN S.VG_611 > T.VG_611 THEN S.VG_611 ELSE T.VG_611 END,      VG_611_CREATETIME = CASE WHEN S.VG_611 > T.VG_611 THEN S.VG_611_CREATETIME ELSE T.VG_611_CREATETIME END,      [DATA_SOURCE] = CASE WHEN S.VG_611 > T.VG_611 THEN S.[DATA_SOURCE] ELSE T.[DATA_SOURCE] END         WHEN NOT MATCHED       THEN INSERT       (ORDER_ID,      VG_611,      VG_611_CREATETIME,      [DATA_SOURCE])         VALUES      (S.ORDER_ID,      S.VG_611,      S.VG_611_CREATETIME,      S.[DATA_SOURCE]);            --------UPDATING THE AUDIT TABLES--------        --RR audit table    IF OBJECT_ID('tempdb..#temp_audit_rr', 'U') IS NOT NULL DROP TABLE #temp_audit_rr    SELECT DISTINCT NULL AS TRANSACTION_NUMBER,        NULL AS TRD_ORD,        tfr.ORDER_ID,        'Order Aggregation' AS EXCEPTION_TYPE,        CONCAT(tfr.ORDER_ID,'_611_',tfr.SOURCE) AS ID,         NULL AS REASON, --this is null on all other scripts - confirm this is correct ***DDC: This is correct as i think it gets populated by the workflow***        NULL AS COMMENT, --this is null on all other scripts - confirm this is correct ***DDC: This is correct as i think it gets populated by the workflow***        'With dealer' AS STATUS,        NULL AS ClientExecID, --this is null on all other scripts - confirm this is correct ***DDC: This is correct as i think it gets populated by the workflow***        'Cash' AS DEALER_DESK,        GETDATE() AS CREATE_TIME,         NULL AS UPDATE_TIME, --this is null on all other scripts - confirm this is correct ***DDC: This is correct as i think it gets populated by the workflow***        COALESCE(MAX(tdd2.FULL_NAME), MAX(DD.DEFAULT_DEALER)) AS DEALER,        '1A3' AS STATUS_ID,          tfr.INSTRUCTION_RECEIVED_DATE AS ORD_AUTH,         MIN(tfr.EXECUTED_DATETIME) AS TRADE_EXEC --one script used confirmed and one used executed, please confirm which is correct ***DDC: This is correct we have now included TRADE_ID***    INTO #temp_audit_rr    FROM #temp_final_1_rr tfr    LEFT JOIN #temp_final_2_rr tfr2 ON tfr2.ORDER_ID = tfr.ORDER_ID    LEFT JOIN (SELECT DISTINCT TRANSACTION_NUMBER, ORDER_ID, EXECUTED_DATETIME, PRODUCT_TYPE, DEALER_NAME_DECODE, PULL_DATE        FROM VISTA_REPORTING.dbo.CASH_TRADES) ct ON tfr.TRADE_ID = ct.TRANSACTION_NUMBER    LEFT JOIN (SELECT DISTINCT ORDER_ID, MIN(INSTRUCTION_RECEIVED_DATE) as INSTRUCTION_RECEIVED_DATE, ACCEPTED_BY, INSTRUCTED_BY, PULL_DATE        FROM VISTA_REPORTING.dbo.CASH_ORDERS        GROUP BY ORDER_ID, PULL_DATE, ACCEPTED_BY, INSTRUCTED_BY) co ON tfr.[ORDER_ID] = co.[ORDER_ID]    LEFT JOIN (select distinct FULL_NAME, MG_USER_ID, DATE_FROM, DATE_TO  from VISTA_REPORTING.DBO.TREASURY_DEALER_DESK) TDD2 ON (TDD2.MG_USER_ID  = COALESCE(CO.ACCEPTED_BY, CO.INSTRUCTED_BY)                    AND tfr.SOURCE = 'CM')                     AND CAST(CO.PULL_DATE AS DATE) BETWEEN CAST(TDD2.DATE_FROM AS DATE) AND CAST(TDD2.DATE_TO AS DATE)    LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'Order Aggregation RR'                  AND ct.PRODUCT_TYPE = 'Repo / Rev Repo Products'                  AND CAST(COALESCE(ct.PULL_DATE,co.[PULL_DATE]) AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)    WHERE tfr2.VG_611 = 1    GROUP BY      tfr.ORDER_ID,     CONCAT(tfr.ORDER_ID,'_611_',tfr.SOURCE),       tfr.INSTRUCTION_RECEIVED_DATE            MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_CASH AS T    USING #temp_audit_rr AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);             --MM audit table    IF OBJECT_ID('tempdb..#temp_audit_mm', 'U') IS NOT NULL DROP TABLE #temp_audit_mm    SELECT DISTINCT NULL AS TRANSACTION_NUMBER,        NULL AS TRD_ORD,        tfm.ORDER_ID,        'Order Aggregation' AS EXCEPTION_TYPE,        CONCAT(tfm.ORDER_ID, '_611_',tfm.SOURCE) AS ID,         NULL AS REASON, --this is null on all other scripts - confirm this is correct  ***DDC: This is correct as i think it gets populated by the workflow***        NULL AS COMMENT, --this is null on all other scripts - confirm this is correct ***DDC: This is correct as i think it gets populated by the workflow***        'With Dealer' AS STATUS, -- TO BE CHANGED, unsure whether this is to be 'with reviewer' or 'with dealer'        NULL AS ClientExecID, --this is null on all other scripts - confirm this is correct ***DDC: This is correct as i think it gets populated by the workflow***        'Cash' AS DEALER_DESK,        GETDATE() AS CREATE_TIME,         NULL AS UPDATE_TIME, --this is null on all other scripts - confirm this is correct ***DDC: This is correct as i think it gets populated by the workflow***        MAX(COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME], DD.DEFAULT_DEALER)) AS DEALER,        '1A3' AS STATUS_ID, --TO BE CHANGED TO either '1A2' or '1A3'         CASE WHEN tfm.SOURCE = 'AL' THEN trd_o.[AUTH_TIME]          WHEN tfm.SOURCE = 'CM' THEN co.[INSTRUCTION_RECEIVED_DATE]           END AS ORD_AUTH, --logic taken from best execution         CASE WHEN tfm.SOURCE = 'AL' THEN MIN(t.[EXECUTION_TIME])           WHEN tfm.SOURCE = 'CM' THEN MIN(ct.[EXECUTED_DATETIME])          END AS TRADE_EXEC --logic taken from best execution    INTO #temp_audit_mm    FROM #temp_final_1_mm tfm    LEFT JOIN #temp_final_2_mm tfm2 ON tfm2.ORDER_ID = tfm.ORDER_ID    LEFT JOIN (SELECT DISTINCT TRANSACTION_NUMBER, ORDER_ID, EXECUTED_DATETIME, DEALER_NAME_DECODE, DEALER_NAME, PULL_DATE, PRODUCT_TYPE        FROM VISTA_REPORTING.dbo.CASH_TRADES) ct ON tfm.TRADE_ID = ct.[TRANSACTION_NUMBER]    LEFT JOIN (SELECT DISTINCT ORDER_ID, MIN(INSTRUCTION_RECEIVED_DATE) AS INSTRUCTION_RECEIVED_DATE, ACCEPTED_BY, INSTRUCTED_BY, PULL_DATE        FROM VISTA_REPORTING.dbo.CASH_ORDERS        GROUP BY ORDER_ID, ACCEPTED_BY, INSTRUCTED_BY, PULL_DATE) co ON ct.[ORDER_ID] = co.[ORDER_ID]    LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER, PULL_DATE        FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t ON tfm.SOURCE = 'AL'                        AND tfm.TRADE_ID = t.[MULTI_FUND_ID]    LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME        FROM VISTA_REPORTING.dbo.TRD_ORDERS        GROUP BY ORD_NUM) trd_o ON t.[ORD_NUM] = trd_o.[ORD_NUM]     LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD        FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc ON trd_o.[ORD_NUM] = oc.[TRD_ORD]    LEFT JOIN (SELECT DISTINCT ORD_NUM, TRADER, PULL_DATE        FROM VISTA_REPORTING.dbo.PM_ORDERS) pm ON oc.[PM_ORD] = pm.[ORD_NUM]    LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'Order Aggregation MM'                   AND (ct.PRODUCT_TYPE = 'Cash Products' or tfm.SOURCE = 'AL') --this was the old join, should this not contain something about CM too? ***DDC: CM gets handled by the TREASURY_DEALER_DESK***                  AND CAST(COALESCE(ct.PULL_DATE, t.PULL_DATE,co.[PULL_DATE],pm.[PULL_DATE]) AS DATE)                   BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)    LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD2 ON ((TDD2.MG_USER_ID  = COALESCE(CO.ACCEPTED_BY, CO.INSTRUCTED_BY) AND tfm.SOURCE = 'CM')                     OR (TDD2.INITIALS = PM.TRADER AND tfm.SOURCE = 'AL'))                    AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE) AS DATE) BETWEEN CAST(TDD2.DATE_FROM AS DATE) AND CAST(TDD2.DATE_TO AS DATE)    LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD  ON (TDD.DEALING_DESK = 'CASH'                    AND TDD.[MG_USER_ID] = ct.[DEALER_NAME]                    AND tfm.SOURCE = 'CM'                    AND CAST(ct.PULL_DATE AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE)) --this was the old join, should this not contain something about AL too? ***DDC: AL gets handled by the REF_CASH_DEFAULT_DEALER***    WHERE tfm2.VG_611 = 1    GROUP BY       tfm.ORDER_ID,      CONCAT(tfm.ORDER_ID, '_611_',tfm.SOURCE),       --COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME], DD.DEFAULT_DEALER),      tfm.SOURCE,      trd_o.[AUTH_TIME],      co.[INSTRUCTION_RECEIVED_DATE]         MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_CASH AS T    USING #temp_audit_mm AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);             --------UPDATING THE FINAL STATUS TABLES--------        --RR final status table    IF OBJECT_ID('tempdb..#temp_status_table_rr', 'U') IS NOT NULL DROP TABLE #temp_status_table_rr    SELECT DISTINCT     CONCAT(ORDER_ID,'_611_', SOURCE) AS ID,     '1A3' AS STATUS,       NULL AS FINAL_UPDATED_TIME --confirm    INTO #temp_status_table_rr    FROM #temp_final_2_rr    WHERE VG_611 != 0        MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table_rr AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'CASH',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'CASH');            --MM final status table     IF OBJECT_ID('tempdb..#temp_status_table_mm', 'U') IS NOT NULL DROP TABLE #temp_status_table_mm    SELECT DISTINCT     CONCAT(ORDER_ID,'_611_', SOURCE) AS ID,     '1A3' AS STATUS,      NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table_mm    FROM #temp_final_2_mm    WHERE VG_611 != 0        MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table_mm AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'CASH',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'CASH');                --Dropping temp tables     IF OBJECT_ID('tempdb..#pot_exceptions', 'U') IS NOT NULL DROP TABLE #pot_exceptions_rr;    IF OBJECT_ID('tempdb..#pot_exceptions', 'U') IS NOT NULL DROP TABLE #pot_exceptions_mm;    IF OBJECT_ID('tempdb..#comparable', 'U') IS NOT NULL DROP TABLE #comparable_rr;    IF OBJECT_ID('tempdb..#comparable', 'U') IS NOT NULL DROP TABLE #comparable_mm;    IF OBJECT_ID('tempdb..#req1a_rr', 'U') IS NOT NULL DROP TABLE #req1a_rr;    IF OBJECT_ID('tempdb..#req1a_mm', 'U') IS NOT NULL DROP TABLE #req1a_mm;    IF OBJECT_ID('tempdb..#req4', 'U') IS NOT NULL DROP TABLE #req4_rr;    IF OBJECT_ID('tempdb..#req4', 'U') IS NOT NULL DROP TABLE #req4_mm;    IF OBJECT_ID('tempdb..#temp5a_1', 'U') IS NOT NULL DROP TABLE #temp5a_1_rr;    IF OBJECT_ID('tempdb..#temp5a_1', 'U') IS NOT NULL DROP TABLE #temp5a_1_mm;    IF OBJECT_ID('tempdb..#temp5a_2', 'U') IS NOT NULL DROP TABLE #temp5a_2;    IF OBJECT_ID('tempdb..#req5a', 'U') IS NOT NULL DROP TABLE #req5a_rr;    IF OBJECT_ID('tempdb..#req5a', 'U') IS NOT NULL DROP TABLE #req5a_mm;    IF OBJECT_ID('tempdb..#ranked_trades', 'U') IS NOT NULL DROP TABLE #ranked_trades_rr;    IF OBJECT_ID('tempdb..#ranked_trades', 'U') IS NOT NULL DROP TABLE #ranked_trades_mm;    IF OBJECT_ID('tempdb..#temp5b_1', 'U') IS NOT NULL DROP TABLE #temp5b_1_rr;    IF OBJECT_ID('tempdb..#temp5b_1', 'U') IS NOT NULL DROP TABLE #temp5b_1_mm;    IF OBJECT_ID('tempdb..#req5b', 'U') IS NOT NULL DROP TABLE #req5b_rr;    IF OBJECT_ID('tempdb..#req5b', 'U') IS NOT NULL DROP TABLE #req5b_mm;    IF OBJECT_ID('tempdb..#req6_rr', 'U') IS NOT NULL DROP TABLE #req6_rr;    IF OBJECT_ID('tempdb..#req6_mm', 'U') IS NOT NULL DROP TABLE #req6_mm;    IF OBJECT_ID('tempdb..#final_ids_rr') IS NOT NULL DROP TABLE #final_ids_rr;    IF OBJECT_ID('tempdb..#final_ids_rr') IS NOT NULL DROP TABLE #final_ids_mm;    IF OBJECT_ID('tempdb..#final_temp_vg_mm', 'U') IS NOT NULL DROP TABLE #final_temp_vg_mm;    IF OBJECT_ID('tempdb..#final_temp_vg_mm', 'U') IS NOT NULL DROP TABLE #final_temp_vg_rr;    IF OBJECT_ID('tempdb..#temp_status_table_rr', 'U') IS NOT NULL DROP TABLE #temp_status_table_rr;    IF OBJECT_ID('tempdb..#temp_status_table_mm', 'U') IS NOT NULL DROP TABLE #temp_status_table_mm;    IF OBJECT_ID('tempdb..#req4_init_cut_mm', 'U') IS NOT NULL DROP TABLE #req4_init_cut_mm;    IF OBJECT_ID('tempdb..#req4_init_cut_rr', 'U') IS NOT NULL DROP TABLE #req4_init_cut_rr;    IF OBJECT_ID('tempdb..#req4_exec_bank_mm', 'U') IS NOT NULL DROP TABLE #req4_exec_bank_mm;    IF OBJECT_ID('tempdb..#req4_exec_bank_rr', 'U') IS NOT NULL DROP TABLE #req4_exec_bank_rr;            END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_611_ORDER_AGGREGATION_FX  CreateDate: 2025-06-26 17:35:23.703  ModifyDate: 2025-06-26 17:35:23.703  --- DEFINITION START ---      CREATE PROCEDURE [dbo].[VG_611_ORDER_AGGREGATION_FX]        AS        -- =============================================    -- Author:  <Nadia Liebenberg>    -- Create date: <25/06/2020>    -- Description: < FX order Aggregation report >    -- =============================================        --Pre unioning the data    IF OBJECT_ID('tempdb..#pre_data', 'U') IS NOT NULL DROP TABLE #pre_data;    SELECT DISTINCT co.FXM_ORDER_ID,         fxt.TRADE_ID,        co.INSTRUCTION_RECEIVED_DATE_TIME,        CAST(co.VALUE_DATE_FAR AS DATE) AS VALUE_DATE_FAR,        CAST(co.VALUE_DATE_NEAR AS DATE) AS VALUE_DATE_NEAR,        fxt.QUOTE_PAIR,         co.FR_LEG_PRODUCT,         co.NR_LEG_PRODUCT,         fxt.MARKET_ARRIVAL_DATE_TIME,        fxt.EXECUTED_RATE,        fxt.EXECUTED_BANK,        CONVERT(VARCHAR(20),mb.BANK_NAME) AS QUOTED_BANK,        'FX' AS SOURCE    INTO #pre_data    FROM Vista_REPORTING.dbo.FX_ORDERS co     LEFT JOIN Vista_REPORTING.dbo.FX_TRADES fxt ON fxt.ORDER_ID = co.FXM_ORDER_ID    LEFT JOIN VISTA_REPORTING.dbo.FX_MAPPED_BANKS mb ON mb.TRADE_ID = fxt.TRADE_ID        UNION        --Aladdin data    SELECT DISTINCT pm.ORD_NUM,        t.MULTI_FUND_ID AS TRADE_ID,        pm.AUTH_TIME,         CAST(pm.SETTLE_DATE AS DATE) AS SETTLE_DATE,        CAST(pm.SETTLE_DATE AS DATE) AS SETTLE_DATE,        NULL AS QUOTE_PAIR,         NULL AS FR_LEG_PRODUCT,         NULL AS NR_LEG_PRODUCT,        pm.AUTH_TIME,        p.AVG_PRICE,        t.TRD_COUNTERPARTY,        cp.TRD_COUNTERPARTY,        'AL' AS SOURCE    FROM Vista_REPORTING.dbo.PM_ORDERS pm    LEFT JOIN Vista_Reporting.dbo.ORDERS_CROSS oc ON oc.PM_ORD = pm.ORD_NUM    LEFT JOIN Vista_REPORTING.dbo.TRADES t ON t.ORD_NUM = oc.TRD_ORD    LEFT JOIN VISTA_REPORTING.dbo.QUOTES q ON q.MULTI_FUND_ID = t.MULTI_FUND_ID    LEFT JOIN VISTA_REPORTING.dbo.COUNTERPARTIES cp ON cp.COUNTERPARTY_CODE = q.BROKER    LEFT JOIN Vista_Reporting.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.ORD_NUM = t.ORD_NUM    LEFT JOIN Vista_Reporting.dbo.PLACEMENTS p ON p.ORD_NUM = pm.ORD_NUM    WHERE pr.DEALING_DESK = 'FX'            --Removing the order IDs that only appear once as they then cannot be of the same batch or comparable and therefore cannot become an exception    IF OBJECT_ID('tempdb..#pot_exceptions', 'U') IS NOT NULL DROP TABLE #pot_exceptions;    SELECT DISTINCT co.FXM_ORDER_ID,         co.TRADE_ID,        co.INSTRUCTION_RECEIVED_DATE_TIME,        ISNULL(CAST(co.VALUE_DATE_FAR AS DATE), '') AS VALUE_DATE_FAR,        ISNULL(CAST(co.VALUE_DATE_NEAR AS DATE), '') AS VALUE_DATE_NEAR,        ISNULL(co.QUOTE_PAIR, '') AS QUOTE_PAIR,        ISNULL(co.FR_LEG_PRODUCT, '') AS FR_LEG_PRODUCT,         ISNULL(co.NR_LEG_PRODUCT, '') AS NR_LEG_PRODUCT,         co.MARKET_ARRIVAL_DATE_TIME,        co.EXECUTED_RATE,        co.EXECUTED_BANK,        co.QUOTED_BANK,        co.SOURCE    INTO #pot_exceptions    FROM #pre_data co     INNER JOIN (SELECT        INSTRUCTION_RECEIVED_DATE_TIME,         COUNT(DISTINCT FXM_ORDER_ID) AS o_count        FROM #pre_data        GROUP BY INSTRUCTION_RECEIVED_DATE_TIME) co2 ON co2.INSTRUCTION_RECEIVED_DATE_TIME = co.INSTRUCTION_RECEIVED_DATE_TIME            --Requirement 3, orders that meet the comparable criteria      IF OBJECT_ID('tempdb..#comparable', 'U') IS NOT NULL DROP TABLE #comparable;    SELECT DISTINCT p1.*    INTO #comparable    FROM #pot_exceptions p1    INNER JOIN #pot_exceptions p2 ON p1.INSTRUCTION_RECEIVED_DATE_TIME = p2.INSTRUCTION_RECEIVED_DATE_TIME                                     AND p1.VALUE_DATE_FAR = p2.VALUE_DATE_FAR                                     AND p1.VALUE_DATE_NEAR = p2.VALUE_DATE_NEAR             AND p1.QUOTE_PAIR = p2.QUOTE_PAIR                                     AND p1.FR_LEG_PRODUCT = p2.FR_LEG_PRODUCT                                     AND p1.NR_LEG_PRODUCT = p2.NR_LEG_PRODUCT;        --Requirement 4, bank panel consideration     --Step 1: Due to the Bank Panel condition we can remove any orders that have less than three banks in    --    their bank panel thus reducing the size of the population for consideration    IF OBJECT_ID('tempdb..#req4_init_cut', 'U') IS NOT NULL DROP TABLE #req4_init_cut;    SELECT      FXM_ORDER_ID    INTO #req4_init_cut    FROM #comparable    GROUP BY FXM_ORDER_ID    HAVING COUNT(DISTINCT QUOTED_BANK) >= 1        --UNION     --SELECT     -- FXM_ORDER_ID, QUOTED_BANK    --FROM #comparable    --GROUP BY FXM_ORDER_ID    --HAVING COUNT(DISTINCT QUOTED_BANK) = 0;            --Step 2: Get all the EXECUTED_BANKS related to the IDs in Step 1    IF OBJECT_ID('tempdb..#pre_req4', 'U') IS NOT NULL DROP TABLE #pre_req4;    SELECT DISTINCT     cmm.FXM_ORDER_ID,      cmm.QUOTED_BANK,     cmm.INSTRUCTION_RECEIVED_DATE_TIME    INTO #pre_req4    FROM #comparable cmm    WHERE EXISTS (SELECT rmm.FXM_ORDER_ID FROM #req4_init_cut rmm WHERE rmm.FXM_ORDER_ID = cmm.FXM_ORDER_ID)            --IF OBJECT_ID('tempdb..#pre_req4', 'U') IS NOT NULL DROP TABLE #pre_req4;    --SELECT DISTINCT    -- brr1.FXM_ORDER_ID    --INTO #pre_req4    --FROM #req4_exec_bank brr1    --GROUP BY brr1.FXM_ORDER_ID     --HAVING COUNT(DISTINCT brr1.QUOTED_BANK) >= 3             IF OBJECT_ID('tempdb..#valid_exec_banks', 'U') IS NOT NULL DROP TABLE #valid_exec_banks;    SELECT DISTINCT eb.*     INTO #valid_exec_banks    FROM #comparable eb    WHERE EXISTS (SELECT pr.FXM_ORDER_ID FROM #pre_req4 pr WHERE pr.FXM_ORDER_ID = eb.FXM_ORDER_ID)            --Step 3: Join the table made in Step 2 and join it onto itself to find all the IDs where the ORDER_IDs are     --    different yet the EXECUTED_BANK matches and only keep cases where for each pair or ORDER_IDs the     --    number of distinct EXECUTED_BANKs is greater than 3. This table will be used to set exception values    --    later on in the script.    --IF OBJECT_ID('tempdb..#req4', 'U') IS NOT NULL DROP TABLE #req4;    --SELECT DISTINCT    -- brr1.FXM_ORDER_ID    -- --brr2.FXM_ORDER_ID as FXM_ORDER_ID_2,    -- --brr2.QUOTED_BANK    --INTO #req4    --FROM #valid_exec_banks brr1    --LEFT JOIN #valid_exec_banks brr2 ON brr2.FXM_ORDER_ID != brr1.FXM_ORDER_ID    --          AND brr2.QUOTED_BANK = brr1.QUOTED_BANK    --          AND brr2.INSTRUCTION_RECEIVED_DATE_TIME = brr1.INSTRUCTION_RECEIVED_DATE_TIME    --          AND brr2.VALUE_DATE_FAR = brr1.VALUE_DATE_FAR    --          AND brr2.VALUE_DATE_NEAR = brr1.VALUE_DATE_NEAR    --          AND brr2.QUOTE_PAIR = brr1.QUOTE_PAIR    --          AND brr2.FR_LEG_PRODUCT = brr1.FR_LEG_PRODUCT    --          AND brr2.NR_LEG_PRODUCT = brr1.NR_LEG_PRODUCT    --GROUP BY brr1.FXM_ORDER_ID    --HAVING COUNT(DISTINCT brr2.QUOTED_BANK) >= 3             IF OBJECT_ID('tempdb..#bank_panel_fails', 'U') IS NOT NULL DROP TABLE #bank_panel_fails;    SELECT DISTINCT     brr1.FXM_ORDER_ID     --brr1.QUOTED_BANK,     --brr2.FXM_ORDER_ID,     --COUNT(DISTINCT brr2.QUOTED_BANK)    INTO #bank_panel_fails    FROM #valid_exec_banks brr1    LEFT JOIN #valid_exec_banks brr2 ON brr2.FXM_ORDER_ID != brr1.FXM_ORDER_ID              AND brr2.QUOTED_BANK = brr1.QUOTED_BANK              AND brr2.INSTRUCTION_RECEIVED_DATE_TIME = brr1.INSTRUCTION_RECEIVED_DATE_TIME              AND brr2.VALUE_DATE_FAR = brr1.VALUE_DATE_FAR              AND brr2.VALUE_DATE_NEAR = brr1.VALUE_DATE_NEAR              AND brr2.QUOTE_PAIR = brr1.QUOTE_PAIR              AND brr2.FR_LEG_PRODUCT = brr1.FR_LEG_PRODUCT              AND brr2.NR_LEG_PRODUCT = brr1.NR_LEG_PRODUCT    WHERE brr2.FXM_ORDER_ID IS NOT NULL     GROUP BY brr1.FXM_ORDER_ID, brr2.FXM_ORDER_ID    HAVING COUNT(distinct brr2.QUOTED_BANK) < 3        UNION        SELECT DISTINCT     brr1.FXM_ORDER_ID     --COUNT(DISTINCT brr2.QUOTED_BANK)    FROM #valid_exec_banks brr1    LEFT JOIN #valid_exec_banks brr2 ON brr2.FXM_ORDER_ID != brr1.FXM_ORDER_ID              AND brr2.QUOTED_BANK = brr1.QUOTED_BANK              AND brr2.INSTRUCTION_RECEIVED_DATE_TIME = brr1.INSTRUCTION_RECEIVED_DATE_TIME              AND brr2.VALUE_DATE_FAR = brr1.VALUE_DATE_FAR              AND brr2.VALUE_DATE_NEAR = brr1.VALUE_DATE_NEAR              AND brr2.QUOTE_PAIR = brr1.QUOTE_PAIR              AND brr2.FR_LEG_PRODUCT = brr1.FR_LEG_PRODUCT              AND brr2.NR_LEG_PRODUCT = brr1.NR_LEG_PRODUCT    --WHERE brr2.FXM_ORDER_ID IS NULL     --where brr1.FXM_ORDER_ID in ('286551'    --       ,'286564'    --       ,'286552'    --       ,'286616')    GROUP BY brr1.FXM_ORDER_ID--, brr2.FXM_ORDER_ID    HAVING COUNT(distinct brr2.QUOTED_BANK) = 0            IF OBJECT_ID('tempdb..#failed_bank_panel_crit') IS NOT NULL DROP TABLE #failed_bank_panel_crit;    SELECT DISTINCT     vb.INSTRUCTION_RECEIVED_DATE_TIME,      vb.VALUE_DATE_FAR,     vb.VALUE_DATE_NEAR,     vb.QUOTE_PAIR,     vb.FR_LEG_PRODUCT,      vb.NR_LEG_PRODUCT    INTO #failed_bank_panel_crit    FROM #valid_exec_banks vb    WHERE EXISTS (SELECT r.FXM_ORDER_ID FROM #bank_panel_fails r WHERE r.FXM_ORDER_ID = vb.FXM_ORDER_ID)            IF OBJECT_ID('tempdb..#bank_panel_exclusions') IS NOT NULL DROP TABLE #bank_panel_exclusions;    SELECT DISTINCT      c.FXM_ORDER_ID    INTO #bank_panel_exclusions    FROM #comparable c    WHERE EXISTS (SELECT fbp.INSTRUCTION_RECEIVED_DATE_TIME FROM #failed_bank_panel_crit fbp WHERE fbp.INSTRUCTION_RECEIVED_DATE_TIME = c.INSTRUCTION_RECEIVED_DATE_TIME                           AND fbp.VALUE_DATE_FAR = c.VALUE_DATE_FAR                           AND fbp.VALUE_DATE_NEAR = c.VALUE_DATE_NEAR                           AND fbp.QUOTE_PAIR = c.QUOTE_PAIR                           AND fbp.FR_LEG_PRODUCT = c.FR_LEG_PRODUCT                           AND fbp.NR_LEG_PRODUCT = c.NR_LEG_PRODUCT)            --Requirement 1a, comparable orders from the same batch not aggregated together (aggregated = same market arrival date time)    IF OBJECT_ID('tempdb..#req1a', 'U') IS NOT NULL DROP TABLE #req1a;    SELECT DISTINCT p1.*,        CASE WHEN p1.MARKET_ARRIVAL_DATE_TIME != p2.MARKET_ARRIVAL_DATE_TIME        THEN '1'         ELSE '0'        END AS AGGREGATION_EXCEPTION    INTO #req1a    FROM #comparable p1    INNER JOIN #comparable P2 ON  p1.INSTRUCTION_RECEIVED_DATE_TIME = p2.INSTRUCTION_RECEIVED_DATE_TIME              AND p1.VALUE_DATE_FAR = p2.VALUE_DATE_FAR           AND p1.VALUE_DATE_NEAR = p2.VALUE_DATE_NEAR           AND p1.QUOTE_PAIR = p2.QUOTE_PAIR           AND p1.FR_LEG_PRODUCT = p2.FR_LEG_PRODUCT           AND p1.NR_LEG_PRODUCT = p2.NR_LEG_PRODUCT           AND p1.MARKET_ARRIVAL_DATE_TIME != p2.MARKET_ARRIVAL_DATE_TIME           AND p1.FXM_ORDER_ID != p2.FXM_ORDER_ID            --Requirement 5a, finding batches of uneven splits     --Step 1: finding all orders with more than 1 trade associated, and a count of how many trades    IF OBJECT_ID('tempdb..#temp5a_1', 'U') IS NOT NULL DROP TABLE #temp5a_1;    SELECT C.FXM_ORDER_ID, C.INSTRUCTION_RECEIVED_DATE_TIME, COUNT(DISTINCT TRADE_ID) AS T_COUNT    INTO #temp5a_1    FROM #pot_exceptions C    GROUP BY FXM_ORDER_ID, INSTRUCTION_RECEIVED_DATE_TIME    HAVING COUNT(DISTINCT TRADE_ID) > 1;            --Step 2:      IF OBJECT_ID('tempdb..#temp5a_2', 'U') IS NOT NULL DROP TABLE #temp5a_2;    DECLARE @split_count INT    SET @split_count = (SELECT COUNT(DISTINCT T_COUNT) FROM #temp5a_1)        SELECT pe2.FXM_ORDER_ID    INTO #temp5a_2    FROM (SELECT pe.FXM_ORDER_ID, INSTRUCTION_RECEIVED_DATE_TIME, COUNT(DISTINCT pe.TRADE_ID) AS T_COUNT    FROM #pot_exceptions pe    GROUP BY pe.FXM_ORDER_ID, INSTRUCTION_RECEIVED_DATE_TIME) pe2    WHERE pe2.T_COUNT > 1 AND @split_count > 1       AND EXISTS (SELECT #temp5a_1.FXM_ORDER_ID           FROM #temp5a_1           WHERE #temp5a_1.FXM_ORDER_ID != pe2.FXM_ORDER_ID          AND #temp5a_1.INSTRUCTION_RECEIVED_DATE_TIME = pe2.INSTRUCTION_RECEIVED_DATE_TIME          AND #temp5a_1.T_COUNT != pe2.T_COUNT);            --Step 3: getting all the columns for all of the exceptions    IF OBJECT_ID('tempdb..#req5a', 'U') IS NOT NULL DROP TABLE #req5a;    SELECT *,      1 AS AGGREGATION_EXCEPTION    INTO #req5a    FROM #pot_exceptions    WHERE EXISTS ( SELECT FXM_ORDER_ID        FROM #temp5a_2         WHERE #temp5a_2.FXM_ORDER_ID = #pot_exceptions.FXM_ORDER_ID);                --------STEP 1 OF UPDATING THE EXCEPTIONS TABLE--------        IF OBJECT_ID('tempdb..#final_ids') IS NOT NULL DROP TABLE #final_ids;    SELECT DISTINCT co.FXM_ORDER_ID AS ORDER_ID,         'FX' AS SOURCE    INTO #final_ids    FROM VISTA_REPORTING.DBO.FX_ORDERS co    UNION     SELECT DISTINCT ORD_NUM,         'AL' AS SOURCE    FROM VISTA_REPORTING.DBO.PM_ORDERS pm    WHERE pm.DEALING_DESK = 'FX';                --------STEP 2 OF UPDATING THE EXCEPTIONS TABLE--------        IF OBJECT_ID('tempdb..#TEMP_FINAL_1') IS NOT NULL DROP TABLE #TEMP_FINAL_1;    SELECT FXM_ORDER_ID,       TRADE_ID,      INSTRUCTION_RECEIVED_DATE_TIME,      VALUE_DATE_FAR,      VALUE_DATE_NEAR,      QUOTE_PAIR,      FR_LEG_PRODUCT,       NR_LEG_PRODUCT,       MARKET_ARRIVAL_DATE_TIME,      EXECUTED_RATE,      EXECUTED_BANK,      SOURCE,      CASE        WHEN INSTRUCTION_RECEIVED_DATE_TIME < '2020-08-28' THEN 0       WHEN EXISTS (SELECT #bank_panel_exclusions.FXM_ORDER_ID FROM #bank_panel_exclusions WHERE #req5A.FXM_ORDER_ID = #bank_panel_exclusions.FXM_ORDER_ID) THEN 0        ELSE AGGREGATION_EXCEPTION      END AS VG_611,      'Orders with uneven trade splits' AS REASON    INTO #TEMP_FINAL_1    FROM #req5A    UNION     SELECT FXM_ORDER_ID,       TRADE_ID,      INSTRUCTION_RECEIVED_DATE_TIME,      VALUE_DATE_FAR,      VALUE_DATE_NEAR,      QUOTE_PAIR,      FR_LEG_PRODUCT,       NR_LEG_PRODUCT,       MARKET_ARRIVAL_DATE_TIME,      EXECUTED_RATE,      EXECUTED_BANK,      SOURCE,      CASE        WHEN INSTRUCTION_RECEIVED_DATE_TIME < '2020-08-28' THEN 0       WHEN EXISTS (SELECT #bank_panel_exclusions.FXM_ORDER_ID FROM #bank_panel_exclusions WHERE #req1A.FXM_ORDER_ID = #bank_panel_exclusions.FXM_ORDER_ID) THEN 0        ELSE AGGREGATION_EXCEPTION      END AS VG_611,      'Comparable orders not aggregated together' AS REASON    FROM #req1a    ORDER BY INSTRUCTION_RECEIVED_DATE_TIME;            --------STEP 3 OF UPDATING THE EXCEPTIONS TABLE--------        IF OBJECT_ID('tempdb..#temp_final_2') IS NOT NULL DROP TABLE #temp_final_2;    SELECT CO.ORDER_ID,       tf.TRADE_ID,      CASE WHEN tf.VG_611 = 1 THEN 1 ELSE 0 END AS VG_611,       CASE WHEN tf.VG_611 = 1 THEN GETDATE() ELSE NULL END AS VG_611_CREATETIME,      co.SOURCE    INTO #temp_final_2    FROM #final_ids co    LEFT JOIN #temp_final_1 tf ON co.ORDER_ID = tf.FXM_ORDER_ID    GROUP BY CO.ORDER_ID, co.SOURCE, tf.VG_611, tf.TRADE_ID;            --------STEP 4 OF UPDATING THE EXCEPTIONS TABLES--------        IF OBJECT_ID('VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_FX_TABLE', 'U') IS NULL     SELECT DISTINCT       ORDER_ID,      VG_611,      VG_611_CREATETIME,      SOURCE AS [DATA_SOURCE]     INTO VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_FX_TABLE      FROM #temp_final_2        ELSE     IF OBJECT_ID('tempdb..#final_temp_vg', 'U') IS NOT NULL DROP TABLE #final_temp_vg     SELECT DISTINCT       ORDER_ID,      VG_611,      VG_611_CREATETIME,      SOURCE AS [DATA_SOURCE]     INTO #final_temp_vg     FROM #temp_final_2         MERGE VISTA_STAGING.dbo.VG_611_ORDER_AGGREGATION_FX_TABLE AS T      USING #final_temp_vg AS S     ON (T.ORDER_ID = S.ORDER_ID AND T.[DATA_SOURCE] = S.[DATA_SOURCE])     WHEN MATCHED      THEN UPDATE       SET       ORDER_ID = CASE WHEN S.VG_611 > T.VG_611 THEN S.ORDER_ID ELSE T.ORDER_ID END,      VG_611 = CASE WHEN S.VG_611 > T.VG_611 THEN S.VG_611 ELSE T.VG_611 END,      VG_611_CREATETIME = CASE WHEN S.VG_611 > T.VG_611 THEN S.VG_611_CREATETIME ELSE T.VG_611_CREATETIME END,      [DATA_SOURCE] = CASE WHEN S.VG_611 > T.VG_611 THEN S.[DATA_SOURCE] ELSE T.[DATA_SOURCE] END         WHEN NOT MATCHED       THEN INSERT       (ORDER_ID,      VG_611,      VG_611_CREATETIME,      [DATA_SOURCE])         VALUES      (S.ORDER_ID,      S.VG_611,      S.VG_611_CREATETIME,      S.[DATA_SOURCE]);            --------UPDATING THE AUDIT TABLE--------        --For one of the joins    IF OBJECT_ID('tempdb..#max_touch_pm', 'U') IS NOT NULL DROP TABLE #max_touch_pm    SELECT DISTINCT      ORD_NUM,      MAX(TOUCH_COUNT) as MAX_TOUCH     INTO #max_touch_pm    FROM VISTA_REPORTING.dbo.PM_ORDERS    GROUP BY ORD_NUM            --Updating audit table    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    SELECT DISTINCT NULL AS TRANSACTION_NUMBER,         --CASE WHEN tfr.SOURCE = 'AL' THEN t.ORD_NUM         --  WHEN tfr.SOURCE = 'FX' THEN fxo.FXM_ORDER_ID        --  ELSE NULL         --  END AS TRD_ORD,        NULL AS TRD_ORD,         --CASE WHEN tfr.SOURCE = 'AL' THEN oc.PM_ORD        --  WHEN tfr.SOURCE = 'FX' THEN fxo.FXM_ORDER_ID        -- END AS ORDER_ID,        tfr.FXM_ORDER_ID AS ORDER_ID,        'Order Aggregation' AS EXCEPTION_TYPE,        CONCAT(tfr.FXM_ORDER_ID,'_611_',tfr.SOURCE) AS ID,        NULL AS REASON, --think it gets populated by the workflow        NULL AS COMMENT, --think it gets populated by the workflow        'With dealer' AS STATUS,         NULL AS CLIENTEXECID, --think it gets populated by the workflow        'FX' AS DEALER_DESK,        GETDATE() AS CREATE_TIME,         NULL AS UPDATE_TIME,        COALESCE(Max(tdd2.FULL_NAME), Max(DD.DEFAULT_DEALER)) AS DEALER,        '1A3' AS STATUS_ID,          CASE WHEN tfr.SOURCE = 'AL' THEN MIN(trd_o.AUTH_TIME)          WHEN tfr.SOURCE = 'FX' THEN MIN(fxo.INSTRUCTION_RECEIVED_DATE_TIME)          END AS ORD_AUTH,        CASE WHEN tfr.SOURCE = 'AL' THEN MIN(t.EXECUTION_TIME)          WHEN tfr.SOURCE = 'FX' THEN MIN(fxt.EXECUTED_DATE_TIME)          END AS TRADE_EXEC    INTO #temp_audit    FROM #temp_final_1 tfr    LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER, PULL_DATE FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t     ON tfr.SOURCE = 'AL'      AND tfr.TRADE_ID = t.MULTI_FUND_ID    LEFT JOIN (SELECT DISTINCT TRADE_ID, ORDER_ID, EXECUTED_DATE_TIME, DEALT_BY, PULL_DATE,ACCEPTED_BY FROM VISTA_REPORTING.dbo.FX_TRADES) fxt     ON tfr.TRADE_ID = fxt.TRADE_ID      AND tfr.SOURCE = 'FX'    LEFT JOIN (SELECT DISTINCT FXM_ORDER_ID, MIN(INSTRUCTION_RECEIVED_DATE_TIME) as INSTRUCTION_RECEIVED_DATE_TIME, MIN(PULL_DATE) AS PULL_DATE FROM VISTA_REPORTING.dbo.FX_ORDERS GROUP BY FXM_ORDER_ID) fxo     ON fxt.ORDER_ID = fxo.FXM_ORDER_ID      AND tfr.SOURCE = 'FX'    LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o     ON t.ORD_NUM = trd_o.ORD_NUM     LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc     ON trd_o.ORD_NUM = oc.TRD_ORD    LEFT JOIN VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2     ON tdd2.MG_USER_ID = fxt.ACCEPTED_BY      AND CAST(COALESCE(fxt.PULL_DATE,fxo.PULL_DATE) AS DATE)      BETWEEN CAST(tdd2.DATE_FROM AS DATE) AND CAST(tdd2.DATE_TO AS DATE)    LEFT JOIN (SELECT DISTINCT pm.ORD_NUM, pm.TRADER, pm.TOUCH_COUNT, pm.PULL_DATE FROM VISTA_REPORTING.dbo.PM_ORDERS pm    inner join #max_touch_pm mtp on mtp.ORD_NUM = pm.ORD_NUM and mtp.MAX_TOUCH = pm.TOUCH_COUNT) pm    on tfr.FXM_ORDER_ID = pm.ORD_NUM and tfr.SOURCE = 'AL'    LEFT JOIN VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd      ON dd.REPORT_NAME = 'Order Aggregation'      AND CAST(COALESCE(fxt.PULL_DATE,fxo.PULL_DATE,t.PULL_DATE,pm.PULL_DATE) AS DATE)      BETWEEN CAST(dd.DATE_FROM AS DATE) AND CAST(dd.DATE_TO AS DATE)    WHERE tfr.VG_611 = 1    GROUP BY      tfr.FXM_ORDER_ID,     --COALESCE(tdd2.FULL_NAME, DD.DEFAULT_DEALER),     tfr.SOURCE     --trd_o.AUTH_TIME,     --fxo.INSTRUCTION_RECEIVED_DATE_TIME            MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_FX AS T    USING #temp_audit AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);            --------UPDATING THE FINAL STATUS TABLES--------        IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    SELECT DISTINCT     CONCAT(ORDER_ID, '_611_', SOURCE) AS ID,     '1A3' AS STATUS,     NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table    FROM #temp_final_2    WHERE VG_611 != 0        MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'FX',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'FX');            --Dropping temp tables    IF OBJECT_ID('tempdb..#pot_exceptions', 'U') IS NOT NULL DROP TABLE #pot_exceptions;    IF OBJECT_ID('tempdb..#comparable', 'U') IS NOT NULL DROP TABLE #comparable;    IF OBJECT_ID('tempdb..#final_ids') IS NOT NULL DROP TABLE #final_ids;    IF OBJECT_ID('tempdb..#temp_final_1') IS NOT NULL DROP TABLE #temp_final_1;    IF OBJECT_ID('tempdb..#temp_final_2') IS NOT NULL DROP TABLE #temp_final_2;    IF OBJECT_ID('tempdb..#final_temp_vg', 'U') IS NOT NULL DROP TABLE #final_temp_vg;    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit;    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_612_ORDER_ALLOCATION_CASH  CreateDate: 2025-06-26 17:35:10.207  ModifyDate: 2025-06-26 17:35:10.207  --- DEFINITION START ---      CREATE PROCEDURE [dbo].[VG_612_ORDER_ALLOCATION_CASH]        AS        -- =============================================    -- Author:  <Nadia Liebenberg>    -- Create date: <25/06/2020>    -- Description: < Cash order allocation report >    -- =============================================        --Removing the order IDs that only appear once as they then cannot be of the same batch or comparable and therefore     --cannot become an exception    IF OBJECT_ID('tempdb..#pot_exceptions_mm', 'U') IS NOT NULL DROP TABLE #pot_exceptions_mm;    SELECT DISTINCT co.ORDER_ID,        ct.TRANSACTION_NUMBER,        co.INSTRUCTION_RECEIVED_DATE,         CAST(co.VALUE_DATE AS DATE) AS VALUE_DATE,        co.INSTRUCTED_CURRENCY,        co.PRODUCT,        CAST(co.MATURITY_DATE AS DATE) AS MATURITY_DATE,        ct.EXECUTED_RATE,        ct.EXECUTED_DATETIME,        ct.CONFIRMED_DATETIME,        'CM' AS SOURCE    INTO #pot_exceptions_mm    FROM Vista_REPORTING.dbo.CASH_TRADES ct    INNER JOIN (SELECT TRADE_DATE,  --potentially change as this used to be INSTRUCTION_RECEIVED_DATE_TIME from ORDERS         COUNT(DISTINCT ORDER_ID) AS o_count         FROM Vista_REPORTING.dbo.CASH_trades           GROUP BY TRADE_DATE) ct2     ON ct.TRADE_DATE = ct2.TRADE_DATE    LEFT JOIN Vista_REPORTING.dbo.CASH_ORDERS co ON co.ORDER_ID = ct.ORDER_ID    WHERE o_count > 1 AND ct.PRODUCT_TYPE = 'Cash Products'            UNION            --Aladdin data    SELECT DISTINCT pm.ORD_NUM,        t.MULTI_FUND_ID AS TRANSACTION_NUMBER,         pm.AUTH_TIME,         CAST(t.TRD_TRADE_DATE AS DATE),        pm.CURRENCY,        pm.SM_SEC_TYPE,        CAST(PM.MATURITY AS DATE) AS MATURITY_DATE,        t.FX_PRICE,        t.EXECUTION_TIME,        t.EXECUTION_TIME,        'AL' AS SOURCE    FROM Vista_REPORTING.dbo.TRADES t    INNER JOIN (SELECT TRD_TRADE_DATE,          COUNT(DISTINCT ORD_NUM) AS o_count        FROM Vista_REPORTING.dbo.TRADES        GROUP BY TRD_TRADE_DATE) pt2 ON pt2.TRD_TRADE_DATE = t.TRD_TRADE_DATE    LEFT JOIN Vista_Reporting.dbo.ORDERS_CROSS oc ON oc.PM_ORD = t.ORD_NUM    LEFT JOIN Vista_REPORTING.dbo.PM_ORDERS pm ON pm.ORD_NUM = oc.PM_ORD    LEFT JOIN Vista_Reporting.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.ORD_NUM = t.ORD_NUM    WHERE o_count > 1 AND pm.DEALING_DESK = 'CASH';                IF OBJECT_ID('tempdb..#pot_exceptions_rr', 'U') IS NOT NULL DROP TABLE #pot_exceptions_rr;    SELECT DISTINCT co.ORDER_ID,        ct.TRANSACTION_NUMBER,        co.INSTRUCTION_RECEIVED_DATE,         CAST(co.VALUE_DATE AS DATE) AS VALUE_DATE,        co.INSTRUCTED_CURRENCY,        co.PRODUCT,        CAST(co.MATURITY_DATE AS DATE) AS MATURITY_DATE,        ct.EXECUTED_RATE,        ct.EXECUTED_DATETIME,        ct.CONFIRMED_DATETIME,        'CM' AS SOURCE    INTO #pot_exceptions_rr    FROM Vista_REPORTING.dbo.CASH_TRADES ct    INNER JOIN (SELECT CONFIRMED_DATETIME,          COUNT(DISTINCT ORDER_ID) AS o_count         FROM Vista_REPORTING.dbo.CASH_trades           GROUP BY CONFIRMED_DATETIME) ct2     ON ct.CONFIRMED_DATETIME = ct2.CONFIRMED_DATETIME    LEFT JOIN Vista_REPORTING.dbo.CASH_ORDERS co ON co.ORDER_ID = ct.ORDER_ID    WHERE o_count > 1 AND ct.PRODUCT_TYPE = 'Repo / Rev Repo Products'            --Requirement 3, orders that meet the comparable criteria      IF OBJECT_ID('tempdb..#comparable_mm', 'U') IS NOT NULL DROP TABLE #comparable_mm;    SELECT DISTINCT p1.*    INTO #comparable_mm    FROM #pot_exceptions_mm p1    INNER JOIN #pot_exceptions_mm p2 ON  p1.INSTRUCTION_RECEIVED_DATE = p2.INSTRUCTION_RECEIVED_DATE             AND p1.VALUE_DATE = p2.VALUE_DATE             AND p1.MATURITY_DATE = p2.MATURITY_DATE             AND p1.INSTRUCTED_CURRENCY = p2.INSTRUCTED_CURRENCY             AND p1.PRODUCT = p2.PRODUCT;             IF OBJECT_ID('tempdb..#comparable_rr', 'U') IS NOT NULL DROP TABLE #comparable_rr;    SELECT DISTINCT p1.*    INTO #comparable_rr    FROM #pot_exceptions_rr p1    INNER JOIN #pot_exceptions_rr p2 ON  p1.INSTRUCTION_RECEIVED_DATE = p2.INSTRUCTION_RECEIVED_DATE             AND p1.VALUE_DATE = p2.VALUE_DATE             AND p1.MATURITY_DATE = p2.MATURITY_DATE             AND p1.INSTRUCTED_CURRENCY = p2.INSTRUCTED_CURRENCY             AND p1.PRODUCT = p2.PRODUCT;            --------STEP 1 OF UPDATING THE EXCEPTIONS TABLES--------        --Final ids for mm    IF OBJECT_ID('tempdb..#final_ids_mm') IS NOT NULL DROP TABLE #final_ids_mm;    SELECT DISTINCT ct.TRANSACTION_NUMBER,          'CM' AS SOURCE    INTO #final_ids_mm    FROM VISTA_REPORTING.DBO.CASH_TRADES ct    WHERE ct.PRODUCT_TYPE = 'Cash Products'    UNION     SELECT DISTINCT t.MULTI_FUND_ID,         'AL' AS SOURCE    FROM VISTA_REPORTING.dbo.TRADES t    LEFT JOIN VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.MULTI_FUND_ID = t.MULTI_FUND_ID    WHERE pr.DEALING_DESK = 'CASH';            --Final ids for rr    IF OBJECT_ID('tempdb..#final_ids_rr') IS NOT NULL DROP TABLE #final_ids_rr;    SELECT DISTINCT co.TRANSACTION_NUMBER,          'CM' AS SOURCE    INTO #final_ids_rr    FROM VISTA_REPORTING.DBO.CASH_TRADES co    WHERE co.PRODUCT_TYPE = 'Repo / Rev Repo Products';            --------STEP 2 OF UPDATING THE EXCEPTIONS TABLES--------        --Requirement 1 MM, comparable orders from the same batch not aggregated together    --Aggregated = same executed date time    IF OBJECT_ID('tempdb..#temp_final_1_mm', 'U') IS NOT NULL DROP TABLE #temp_final_1_mm;    SELECT DISTINCT p1.*,        CASE         WHEN p1.INSTRUCTION_RECEIVED_DATE < '2020-08-28' THEN '0'          WHEN p1.EXECUTED_RATE != p2.EXECUTED_RATE THEN '1'          ELSE '0'        END AS VG_612    INTO #temp_final_1_mm    FROM #comparable_mm p1    LEFT JOIN #comparable_mm P2 ON  p1.CONFIRMED_DATETIME = p2.CONFIRMED_DATETIME           AND p1.INSTRUCTION_RECEIVED_DATE = p2.INSTRUCTION_RECEIVED_DATE              AND p1.VALUE_DATE = p2.VALUE_DATE              AND p1.MATURITY_DATE = p2.MATURITY_DATE              AND p1.INSTRUCTED_CURRENCY = p2.INSTRUCTED_CURRENCY           AND p1.PRODUCT = p2.PRODUCT           AND p1.EXECUTED_RATE != p2.EXECUTED_RATE    WHERE p1.EXECUTED_RATE != p2.EXECUTED_RATE;            --Requirement 1 RR, comparable orders from the same batch not aggregated together    --Aggregated = same executed date time    IF OBJECT_ID('tempdb..#temp_final_1_rr', 'U') IS NOT NULL DROP TABLE #temp_final_1_rr;    SELECT DISTINCT p1.*,        CASE          WHEN p1.INSTRUCTION_RECEIVED_DATE < '2020-08-28' THEN '0'         WHEN p1.EXECUTED_RATE != p2.EXECUTED_RATE THEN '1'          ELSE '0'        END AS VG_612    INTO #temp_final_1_rr    FROM #comparable_rr p1    LEFT JOIN #comparable_rr P2 ON  p1.EXECUTED_DATETIME = p2.EXECUTED_DATETIME           AND p1.INSTRUCTION_RECEIVED_DATE = p2.INSTRUCTION_RECEIVED_DATE              AND p1.VALUE_DATE = p2.VALUE_DATE              AND p1.MATURITY_DATE = p2.MATURITY_DATE              AND p1.INSTRUCTED_CURRENCY = p2.INSTRUCTED_CURRENCY           AND p1.PRODUCT = p2.PRODUCT           AND p1.EXECUTED_RATE != p2.EXECUTED_RATE    WHERE p1.EXECUTED_RATE != p2.EXECUTED_RATE;            --------STEP 3 OF UPDATING THE EXCEPTIONS TABLES--------        IF OBJECT_ID('tempdb..#temp_final_2_rr') IS NOT NULL DROP TABLE #temp_final_2_rr;    SELECT co.TRANSACTION_NUMBER,       tf.ORDER_ID,      ISNULL(MAX(tf.VG_612),0) AS VG_612,       CASE WHEN tf.VG_612 = 1 THEN GETDATE() ELSE NULL END AS VG_612_CREATETIME,      co.SOURCE    INTO #temp_final_2_rr    FROM #final_ids_rr co    LEFT JOIN #temp_final_1_rr tf ON co.TRANSACTION_NUMBER = tf.TRANSACTION_NUMBER    GROUP BY co.TRANSACTION_NUMBER, tf.VG_612, co.SOURCE, tf.ORDER_ID;            IF OBJECT_ID('tempdb..#temp_final_2_mm') IS NOT NULL DROP TABLE #temp_final_2_mm;    SELECT co.TRANSACTION_NUMBER,       tf.ORDER_ID,      ISNULL(MAX(tf.VG_612),0) AS VG_612,       CASE WHEN tf.VG_612 = 1 THEN GETDATE() ELSE NULL END AS VG_612_CREATETIME,      co.SOURCE    INTO #temp_final_2_mm    FROM #final_ids_mm co    LEFT JOIN #temp_final_1_mm tf ON tf.TRANSACTION_NUMBER = co.TRANSACTION_NUMBER    GROUP BY co.TRANSACTION_NUMBER, tf.VG_612, co.SOURCE, tf.ORDER_ID;            --------STEP 4 OF UPDATING THE EXCEPTIONS TABLES--------        --Updating the rr exceptions table     IF OBJECT_ID('VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_RR_TABLE', 'U') IS NULL     SELECT DISTINCT TRANSACTION_NUMBER,         VG_612,         VG_612_CREATETIME,         SOURCE AS DATA_SOURCE     INTO VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_RR_TABLE      FROM #temp_final_2_rr    ELSE      IF OBJECT_ID('tempdb..#final_temp_vg_rr', 'U') IS NOT NULL DROP TABLE #final_temp_vg_rr     SELECT DISTINCT TRANSACTION_NUMBER,         VG_612,         VG_612_CREATETIME,         SOURCE AS DATA_SOURCE      INTO #final_temp_vg_rr     FROM #temp_final_2_rr            MERGE VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_RR_TABLE AS T     USING #final_temp_vg_rr AS S    ON (T.TRANSACTION_NUMBER = S.TRANSACTION_NUMBER AND T.[DATA_SOURCE] = S.[DATA_SOURCE])     WHEN MATCHED      THEN UPDATE       SET       TRANSACTION_NUMBER = CASE WHEN S.VG_612 > T.VG_612 THEN S.TRANSACTION_NUMBER ELSE T.TRANSACTION_NUMBER END,      VG_612 = CASE WHEN S.VG_612 > T.VG_612 THEN S.VG_612 ELSE T.VG_612 END,      VG_612_CREATETIME = CASE WHEN S.VG_612 > T.VG_612 THEN S.VG_612_CREATETIME ELSE T.VG_612_CREATETIME END,      [DATA_SOURCE] = CASE WHEN S.VG_612 > T.VG_612 THEN S.[DATA_SOURCE] ELSE T.[DATA_SOURCE] END         WHEN NOT MATCHED       THEN INSERT       (TRANSACTION_NUMBER,      VG_612,      VG_612_CREATETIME,      [DATA_SOURCE])         VALUES      (S.TRANSACTION_NUMBER,      S.VG_612,      S.VG_612_CREATETIME,      S.[DATA_SOURCE]);                 --Updating the mm exceptions table     IF OBJECT_ID('VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_MM_TABLE', 'U') IS NULL     SELECT DISTINCT TRANSACTION_NUMBER,         VG_612,         VG_612_CREATETIME,         SOURCE AS DATA_SOURCE     INTO VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_MM_TABLE      FROM #temp_final_2_mm    ELSE      IF OBJECT_ID('tempdb..#final_temp_vg_mm', 'U') IS NOT NULL DROP TABLE #final_temp_vg_mm     SELECT DISTINCT TRANSACTION_NUMBER,         VG_612,         VG_612_CREATETIME,         SOURCE AS DATA_SOURCE      INTO #final_temp_vg_mm     FROM #temp_final_2_mm        MERGE VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_CASH_MM_TABLE AS T     USING #final_temp_vg_mm AS S    ON (T.TRANSACTION_NUMBER = S.TRANSACTION_NUMBER AND T.[DATA_SOURCE] = S.[DATA_SOURCE])     WHEN MATCHED      THEN UPDATE       SET       TRANSACTION_NUMBER = CASE WHEN S.VG_612 > T.VG_612 THEN S.TRANSACTION_NUMBER ELSE T.TRANSACTION_NUMBER END,      VG_612 = CASE WHEN S.VG_612 > T.VG_612 THEN S.VG_612 ELSE T.VG_612 END,      VG_612_CREATETIME = CASE WHEN S.VG_612 > T.VG_612 THEN S.VG_612_CREATETIME ELSE T.VG_612_CREATETIME END,      [DATA_SOURCE] = CASE WHEN S.VG_612 > T.VG_612 THEN S.[DATA_SOURCE] ELSE T.[DATA_SOURCE] END         WHEN NOT MATCHED       THEN INSERT       (TRANSACTION_NUMBER,      VG_612,      VG_612_CREATETIME,      [DATA_SOURCE])         VALUES      (S.TRANSACTION_NUMBER,      S.VG_612,      S.VG_612_CREATETIME,      S.[DATA_SOURCE]);            --------UPDATING THE AUDIT TABLES--------        --RR audit table     IF OBJECT_ID('tempdb..#temp_audit_rr', 'U') IS NOT NULL DROP TABLE #temp_audit_rr    SELECT DISTINCT tfr.TRANSACTION_NUMBER,        NULL AS TRD_ORD,        tfr.ORDER_ID,        'Order Allocation' AS EXCEPTION_TYPE,        CONCAT(tfr.ORDER_ID, '_',tfr.TRANSACTION_NUMBER,'_612_',tfr.SOURCE) AS ID,         NULL AS REASON, --think it gets populated by the workflow        NULL AS COMMENT, --think it gets populated by the workflow        'With dealer' AS STATUS,        NULL AS ClientExecID, --think it gets populated by the workflow        'Cash' AS DEALER_DESK,        GETDATE() AS CREATE_TIME,         NULL AS UPDATE_TIME, --think it gets populated by the workflow        COALESCE(tdd2.FULL_NAME, DD.DEFAULT_DEALER) AS DEALER,        '1A3' AS STATUS_ID,          tfr.INSTRUCTION_RECEIVED_DATE AS ORD_AUTH,         tfr.EXECUTED_DATETIME AS TRADE_EXEC     INTO #temp_audit_rr    FROM #temp_final_1_rr tfr    LEFT JOIN (SELECT DISTINCT TRANSACTION_NUMBER, ORDER_ID, EXECUTED_DATETIME, PRODUCT_TYPE, DEALER_NAME_DECODE, PULL_DATE        FROM VISTA_REPORTING.dbo.CASH_TRADES) ct ON tfr.TRANSACTION_NUMBER = ct.TRANSACTION_NUMBER    LEFT JOIN (SELECT DISTINCT ORDER_ID, MIN(INSTRUCTION_RECEIVED_DATE) as INSTRUCTION_RECEIVED_DATE, ACCEPTED_BY, INSTRUCTED_BY, PULL_DATE        FROM VISTA_REPORTING.dbo.CASH_ORDERS        GROUP BY ORDER_ID, PULL_DATE, ACCEPTED_BY, INSTRUCTED_BY) co ON tfr.[ORDER_ID] = co.[ORDER_ID]    LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD2 ON (TDD2.MG_USER_ID  = COALESCE(CO.ACCEPTED_BY, CO.INSTRUCTED_BY)      AND tfr.SOURCE = 'CM')       AND CAST(CO.PULL_DATE AS DATE) BETWEEN CAST(TDD2.DATE_FROM AS DATE) AND CAST(TDD2.DATE_TO AS DATE)    LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON DD.REPORT_NAME = 'Order Allocation RR'     AND ct.PRODUCT_TYPE = 'Repo / Rev Repo Products'     AND CAST(COALESCE(ct.PULL_DATE,co.[PULL_DATE]) AS DATE)      BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)        WHERE tfr.VG_612 = 1            MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_CASH AS T    USING #temp_audit_rr AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);            --MM audit table    IF OBJECT_ID('tempdb..#temp_audit_mm', 'U') IS NOT NULL DROP TABLE #temp_audit_mm    SELECT DISTINCT tfm.TRANSACTION_NUMBER,        NULL AS TRD_ORD,        tfm.ORDER_ID,        'Order Allocation' AS EXCEPTION_TYPE,        CONCAT(tfm.ORDER_ID, '_',tfm.TRANSACTION_NUMBER,'_612_',tfm.SOURCE) AS ID,         NULL AS REASON,         NULL AS COMMENT,         'With dealer' AS STATUS,         NULL AS CLIENTEXECID,         'Cash' AS DEALER_DESK,        GETDATE() AS CREATE_TIME,         NULL AS UPDATE_TIME,         COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME], DD.DEFAULT_DEALER) AS DEALER,        '1A3' AS STATUS_ID,          CASE WHEN tfm.SOURCE = 'AL' THEN trd_o.[AUTH_TIME]          WHEN tfm.SOURCE = 'CM' THEN co.[INSTRUCTION_RECEIVED_DATE]           END AS ORD_AUTH,          CASE WHEN tfm.SOURCE = 'AL' THEN t.[EXECUTION_TIME]           WHEN tfm.SOURCE = 'CM' THEN ct.[EXECUTED_DATETIME]           END AS TRADE_EXEC     INTO #temp_audit_mm    FROM #temp_final_1_mm tfm    LEFT JOIN (SELECT DISTINCT TRANSACTION_NUMBER, ORDER_ID, EXECUTED_DATETIME, DEALER_NAME_DECODE, DEALER_NAME, PULL_DATE, PRODUCT_TYPE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct     ON tfm.[TRANSACTION_NUMBER] = ct.[TRANSACTION_NUMBER]    LEFT JOIN (SELECT DISTINCT ORDER_ID, MIN(INSTRUCTION_RECEIVED_DATE) AS INSTRUCTION_RECEIVED_DATE, ACCEPTED_BY, INSTRUCTED_BY, PULL_DATE FROM VISTA_REPORTING.dbo.CASH_ORDERS GROUP BY ORDER_ID, ACCEPTED_BY, INSTRUCTED_BY, PULL_DATE) co     ON ct.[ORDER_ID] = co.[ORDER_ID]    LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER, PULL_DATE FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t     ON tfm.SOURCE = 'AL'      AND tfm.TRANSACTION_NUMBER = t.[MULTI_FUND_ID]    LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o     ON t.[ORD_NUM] = trd_o.[ORD_NUM]     LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc     ON trd_o.[ORD_NUM] = oc.[TRD_ORD]    LEFT JOIN (SELECT DISTINCT ORD_NUM, TRADER, PULL_DATE FROM VISTA_REPORTING.dbo.PM_ORDERS) pm     ON oc.[PM_ORD] = pm.[ORD_NUM]    LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD      ON DD.REPORT_NAME = 'Order Allocation MM'      AND (ct.PRODUCT_TYPE = 'Cash Products' or tfm.SOURCE = 'AL') --this was the old join, should this not contain something about CM too?     AND CAST(COALESCE(ct.PULL_DATE, t.PULL_DATE,co.[PULL_DATE],pm.[PULL_DATE]) AS DATE)      BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)    LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD2      ON ((TDD2.MG_USER_ID  = COALESCE(CO.ACCEPTED_BY, CO.INSTRUCTED_BY)      AND tfm.SOURCE = 'CM')      OR (TDD2.INITIALS = PM.TRADER      AND tfm.SOURCE = 'AL'))      AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE) AS DATE)      BETWEEN CAST(TDD2.DATE_FROM AS DATE)      AND CAST(TDD2.DATE_TO AS DATE)    LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD      ON (TDD.DEALING_DESK = 'CASH'      AND TDD.[MG_USER_ID] = ct.[DEALER_NAME]      AND tfm.SOURCE = 'CM'      AND CAST(ct.PULL_DATE AS DATE)      BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE)) --this was the old join, should this not contain something about AL too?    WHERE tfm.VG_612 = 1        MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_CASH AS T    USING #temp_audit_mm AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);            --------UPDATING THE FINAL STATUS TABLES--------        --RR final status table    IF OBJECT_ID('tempdb..#temp_status_table_rr', 'U') IS NOT NULL DROP TABLE #temp_status_table_rr    SELECT DISTINCT     CONCAT(ORDER_ID, '_', TRANSACTION_NUMBER,'_612_CM') AS ID,     '1A3' AS STATUS,       NULL AS FINAL_UPDATED_TIME --confirm    INTO #temp_status_table_rr    FROM #temp_final_2_rr    WHERE VG_612 != 0        MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table_rr AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'CASH',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'CASH');            --MM final status table     IF OBJECT_ID('tempdb..#temp_status_table_mm', 'U') IS NOT NULL DROP TABLE #temp_status_table_mm    SELECT DISTINCT     CONCAT(ORDER_ID, '_', TRANSACTION_NUMBER,'_612_CM') AS ID,     '1A3' AS STATUS,      NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table_mm    FROM #temp_final_2_mm    WHERE VG_612 != 0        MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table_mm AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'CASH',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'CASH');             --Dropping temp tables     IF OBJECT_ID('tempdb..#pot_exceptions_rr', 'U') IS NOT NULL DROP TABLE #pot_exceptions_rr;    IF OBJECT_ID('tempdb..#pot_exceptions_mm', 'U') IS NOT NULL DROP TABLE #pot_exceptions_mm;    IF OBJECT_ID('tempdb..#comparable_rr', 'U') IS NOT NULL DROP TABLE #comparable_rr;    IF OBJECT_ID('tempdb..#comparable_mm', 'U') IS NOT NULL DROP TABLE #comparable_mm;    IF OBJECT_ID('tempdb..#final_ids_rr') IS NOT NULL DROP TABLE #final_ids_rr;    IF OBJECT_ID('tempdb..#final_ids_mm') IS NOT NULL DROP TABLE #final_ids_mm;    IF OBJECT_ID('tempdb..#temp_final_1_rr', 'U') IS NOT NULL DROP TABLE #temp_final_1_rr;    IF OBJECT_ID('tempdb..#temp_final_1_mm', 'U') IS NOT NULL DROP TABLE #temp_final_1_mm;    IF OBJECT_ID('tempdb..#temp_final_2_rr', 'U') IS NOT NULL DROP TABLE #temp_final_2_rr;    IF OBJECT_ID('tempdb..#temp_final_2_mm', 'U') IS NOT NULL DROP TABLE #temp_final_2_mm;    IF OBJECT_ID('tempdb..#final_temp_vg_rr', 'U') IS NOT NULL DROP TABLE #final_temp_vg_rr;    IF OBJECT_ID('tempdb..#final_temp_vg_rr', 'U') IS NOT NULL DROP TABLE #final_temp_vg_mm;    IF OBJECT_ID('tempdb..#temp_audit_rr', 'U') IS NOT NULL DROP TABLE #temp_audit_rr;    IF OBJECT_ID('tempdb..#temp_audit_mm', 'U') IS NOT NULL DROP TABLE #temp_audit_mm;    IF OBJECT_ID('tempdb..#temp_status_table_rr', 'U') IS NOT NULL DROP TABLE #temp_status_table_rr;    IF OBJECT_ID('tempdb..#temp_status_table_rr', 'U') IS NOT NULL DROP TABLE #temp_status_table_mm        --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_612_ORDER_ALLOCATION_FX  CreateDate: 2025-06-26 17:34:54.730  ModifyDate: 2025-06-26 17:34:54.730  --- DEFINITION START ---      CREATE PROCEDURE [dbo].[VG_612_ORDER_ALLOCATION_FX]        AS        -- =============================================    -- Author:  <Nadia Liebenberg>    -- Create date: <25/06/2020>    -- Description: < FX order allocation report >    -- =============================================        --Removing the order IDs that only appear once as they then cannot be of the same batch or comparable and therefore cannot become an exception    IF OBJECT_ID('tempdb..#pot_exceptions', 'U') IS NOT NULL DROP TABLE #pot_exceptions;    SELECT DISTINCT fxo.FXM_ORDER_ID,        fxt.TRADE_ID AS TRANSACTION_NUMBER,        fxo.INSTRUCTION_RECEIVED_DATE_TIME,        CAST(fxo.VALUE_DATE_FAR AS DATE) AS VALUE_DATE_FAR,        CAST(fxo.VALUE_DATE_NEAR AS DATE) AS VALUE_DATE_NEAR,        --fxo.BUY_CCY,        --fxo.SELL_CCY,         --fxo.BUY_CCY_LEG2,         --fxo.SELL_CCY_LEG2,        fxt.QUOTE_PAIR,         fxo.FR_LEG_PRODUCT,         fxo.NR_LEG_PRODUCT,         fxt.MARKET_ARRIVAL_DATE_TIME,        fxt.EXECUTED_RATE,        'FX' AS SOURCE    INTO #pot_exceptions    FROM Vista_REPORTING.dbo.FX_TRADES fxt    INNER JOIN (SELECT TRADE_DATE, --potentially change. used to be instruction received date time when this came from orders       COUNT(DISTINCT ORDER_ID) as o_count       FROM Vista_REPORTING.dbo.FX_TRADES       GROUP BY TRADE_DATE) ct2 ON ct2.TRADE_DATE = fxt.TRADE_DATE    LEFT JOIN Vista_reporting.dbo.FX_ORDERS fxo ON fxo.ORD_NUM = fxt.ORDER_ID    WHERE o_count > 1        UNION        --Aladdin data    SELECT DISTINCT pm.ORD_NUM,          t.MULTI_FUND_ID,        pm.AUTH_TIME,         pm.SETTLE_DATE,        pm.SETTLE_DATE,        --NULL AS BUY_CCY,        --NULL AS SELL_CCY,         --NULL AS BUY_CCY_LEG2,         --NULL AS SELL_CCY_LEG2,        NULL AS QUOTE_PAIR,         NULL AS FR_LEG_PRODUCT,         NULL AS NR_LEG_PRODUCT,        pm.AUTH_TIME,        p.AVG_PRICE,        'AL' AS SOURCE    FROM Vista_REPORTING.dbo.TRADES t    INNER JOIN (SELECT  TRD_TRADE_DATE,       COUNT(DISTINCT ORD_NUM) AS o_count       FROM Vista_REPORTING.dbo.TRADES       GROUP BY TRD_TRADE_DATE) t2    ON t2.TRD_TRADE_DATE = t.TRD_TRADE_DATE    LEFT JOIN Vista_REPORTING.dbo.PM_ORDERS pm ON pm.ORD_NUM = t.ORD_NUM    LEFT JOIN Vista_Reporting.dbo.PRIMARY_INST_TYPE_TABLE pr ON pr.ORD_NUM = t.ORD_NUM    LEFT JOIN Vista_Reporting.dbo.ORDERS_CROSS oc ON oc.PM_ORD = pm.ORD_NUM    LEFT JOIN Vista_Reporting.dbo.PLACEMENTS p ON p.ORD_NUM = pm.ORD_NUM    WHERE o_count > 1 AND pm.DEALING_DESK = 'FX';                --Requirement 3, orders that meet the comparable criteria      IF OBJECT_ID('tempdb..#comparable', 'U') IS NOT NULL DROP TABLE #comparable;    SELECT DISTINCT p1.*    INTO #comparable    FROM #pot_exceptions p1    INNER JOIN #pot_exceptions p2 ON p1.INSTRUCTION_RECEIVED_DATE_TIME = p2.INSTRUCTION_RECEIVED_DATE_TIME                                     AND p1.VALUE_DATE_FAR = p2.VALUE_DATE_FAR                                     AND p1.VALUE_DATE_NEAR = p2.VALUE_DATE_NEAR                                     --AND p1.BUY_CCY = p2.BUY_CCY                                     --AND p1.SELL_CCY = p2.SELL_CCY                                     --AND p1.BUY_CCY_LEG2 = p2.BUY_CCY_LEG2                                     --AND p1.SELL_CCY_LEG2 = p2.SELL_CCY_LEG2             AND p1.QUOTE_PAIR=p2.QUOTE_PAIR                                     AND p1.FR_LEG_PRODUCT = p2.FR_LEG_PRODUCT                                     AND p1.NR_LEG_PRODUCT = p2.NR_LEG_PRODUCT;            --------STEP 1 OF UPDATING THE EXCEPTIONS TABLE--------        IF OBJECT_ID('tempdb..#final_ids') IS NOT NULL DROP TABLE #final_ids;    SELECT DISTINCT FXT.TRADE_ID AS TRANSACTION_NUMBER,        FXT.ORDER_ID,        'FX' AS SOURCE    INTO #final_ids    FROM VISTA_REPORTING.DBO.FX_TRADES FXT    UNION     SELECT DISTINCT T.MULTI_FUND_ID,         T.ORD_NUM,        'AL' AS SOURCE    FROM VISTA_REPORTING.DBO.TRADES T    LEFT JOIN VISTA_REPORTING.DBO.TRD_ORDERS td ON td.ORD_NUM = t.ORD_NUM    WHERE td.DEALING_DESK = 'FX';            --------STEP 2 OF UPDATING THE EXCEPTIONS TABLE--------        --Requirement 1, comparable orders from the same batch not aggregated together (aggregated = same market arrival date time)    IF OBJECT_ID('tempdb..#temp_final_1') IS NOT NULL DROP TABLE #temp_final_1;    SELECT c1.*,      CASE       WHEN c1.INSTRUCTION_RECEIVED_DATE_TIME < '2020-08-28' THEN '0'        WHEN c1.EXECUTED_RATE != c2.EXECUTED_RATE THEN '1'        ELSE '0'      END AS VG_612    INTO #temp_final_1    FROM #comparable c1    LEFT JOIN #comparable c2 ON c1.INSTRUCTION_RECEIVED_DATE_TIME = c2.INSTRUCTION_RECEIVED_DATE_TIME                                     AND c1.VALUE_DATE_FAR = c2.VALUE_DATE_FAR                                     AND c1.VALUE_DATE_NEAR = c2.VALUE_DATE_NEAR                                     --AND c1.BUY_CCY = c2.BUY_CCY                                     --AND c1.SELL_CCY = c2.SELL_CCY                                     --AND c1.BUY_CCY_LEG2 = c2.BUY_CCY_LEG2                                     --AND c1.SELL_CCY_LEG2 = c2.SELL_CCY_LEG2             AND c1.QUOTE_PAIR = c2.QUOTE_PAIR                                     AND c1.FR_LEG_PRODUCT = c2.FR_LEG_PRODUCT                                     AND c1.NR_LEG_PRODUCT = c2.NR_LEG_PRODUCT             AND c1.MARKET_ARRIVAL_DATE_TIME = c2.MARKET_ARRIVAL_DATE_TIME              AND c1.EXECUTED_RATE != c2.EXECUTED_RATE    WHERE c1.EXECUTED_RATE != c2.EXECUTED_RATE;            --------STEP 3 OF UPDATING THE EXCEPTIONS TABLE--------        IF OBJECT_ID('tempdb..#temp_final_2') IS NOT NULL DROP TABLE #temp_final_2;    SELECT CO.TRANSACTION_NUMBER,       co.ORDER_ID,      CASE WHEN tf.VG_612 = 1 THEN 1 ELSE 0 END AS VG_612,       CASE WHEN tf.VG_612 = 1 THEN GETDATE() ELSE NULL END AS VG_612_CREATETIME,      co.SOURCE    INTO #temp_final_2    FROM #final_ids co    LEFT JOIN #temp_final_1 tf ON co.TRANSACTION_NUMBER = tf.TRANSACTION_NUMBER    GROUP BY CO.TRANSACTION_NUMBER, co.SOURCE, tf.VG_612, co.ORDER_ID;            --------STEP 4 OF UPDATING THE EXCEPTIONS TABLES--------        IF OBJECT_ID('VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_FX_TABLE', 'U') IS NULL     SELECT DISTINCT       TRANSACTION_NUMBER,      VG_612,      VG_612_CREATETIME,      SOURCE AS [DATA_SOURCE]     INTO VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_FX_TABLE      FROM #temp_final_2        ELSE     IF OBJECT_ID('tempdb..#final_temp_vg', 'U') IS NOT NULL DROP TABLE #final_temp_vg     SELECT DISTINCT       TRANSACTION_NUMBER,      VG_612,      VG_612_CREATETIME,      SOURCE AS [DATA_SOURCE]     INTO #final_temp_vg     FROM #temp_final_2         MERGE VISTA_STAGING.dbo.VG_612_ORDER_ALLOCATION_FX_TABLE AS T      USING #final_temp_vg AS S     ON (T.TRANSACTION_NUMBER = S.TRANSACTION_NUMBER AND T.[DATA_SOURCE] = S.[DATA_SOURCE])     WHEN MATCHED      THEN UPDATE       SET       TRANSACTION_NUMBER = CASE WHEN S.VG_612 > T.VG_612 THEN S.TRANSACTION_NUMBER ELSE T.TRANSACTION_NUMBER END,      VG_612 = CASE WHEN S.VG_612 > T.VG_612 THEN S.VG_612 ELSE T.VG_612 END,      VG_612_CREATETIME = CASE WHEN S.VG_612 > T.VG_612 THEN S.VG_612_CREATETIME ELSE T.VG_612_CREATETIME END,      [DATA_SOURCE] = CASE WHEN S.VG_612 > T.VG_612 THEN S.[DATA_SOURCE] ELSE T.[DATA_SOURCE] END         WHEN NOT MATCHED       THEN INSERT       (TRANSACTION_NUMBER,      VG_612,      VG_612_CREATETIME,      [DATA_SOURCE])         VALUES      (S.TRANSACTION_NUMBER,      S.VG_612,      S.VG_612_CREATETIME,      S.[DATA_SOURCE]);            --------UPDATING THE AUDIT TABLE--------        --For one of the joins    IF OBJECT_ID('tempdb..#max_touch_pm', 'U') IS NOT NULL DROP TABLE #max_touch_pm;    SELECT DISTINCT      ORD_NUM,      MAX(TOUCH_COUNT) as MAX_TOUCH     INTO #max_touch_pm    FROM VISTA_REPORTING.dbo.PM_ORDERS    GROUP BY ORD_NUM;            IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit;    SELECT DISTINCT tfr.TRANSACTION_NUMBER,         CASE WHEN tfr.SOURCE = 'AL' THEN t.ORD_NUM           WHEN tfr.SOURCE = 'FX' THEN fxo.FXM_ORDER_ID          ELSE NULL           END AS TRD_ORD,         CASE WHEN tfr.SOURCE = 'AL' THEN oc.PM_ORD          WHEN tfr.SOURCE = 'FX' THEN fxo.FXM_ORDER_ID         END AS ORDER_ID,        'Order Allocation' AS EXCEPTION_TYPE,        tfr.FXM_ORDER_ID,        CONCAT(tfr.FXM_ORDER_ID, '_',tfr.TRANSACTION_NUMBER,'_612_',tfr.SOURCE) AS ID,         NULL AS REASON, --this is null on all other scripts - confirm this is correct        NULL AS COMMENT, --this is null on all other scripts - confirm this is correct        'With dealer' AS STATUS,         NULL AS CLIENTEXECID, --this is null on all other scripts - confirm this is correct        'FX' AS DEALER_DESK,        GETDATE() AS CREATE_TIME,         NULL AS UPDATE_TIME, --this is null on all other scripts - confirm this is correct        COALESCE(tdd2.FULL_NAME, DD.DEFAULT_DEALER) AS DEALER,        '1A3' AS STATUS_ID,         CASE WHEN tfr.SOURCE = 'AL' THEN trd_o.AUTH_TIME          WHEN tfr.SOURCE = 'FX' THEN fxo.INSTRUCTION_RECEIVED_DATE_TIME          END AS ORD_AUTH,        CASE WHEN tfr.SOURCE = 'AL' THEN t.EXECUTION_TIME          WHEN tfr.SOURCE = 'FX' THEN fxt.EXECUTED_DATE_TIME          END AS TRADE_EXEC    INTO #temp_audit    FROM #temp_final_1 tfr    LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER, PULL_DATE FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t     ON tfr.SOURCE = 'AL'      AND tfr.TRANSACTION_NUMBER = t.MULTI_FUND_ID    LEFT JOIN (SELECT DISTINCT TRADE_ID, ORDER_ID, EXECUTED_DATE_TIME, DEALT_BY, PULL_DATE,ACCEPTED_BY FROM VISTA_REPORTING.dbo.FX_TRADES) fxt     ON tfr.TRANSACTION_NUMBER = fxt.TRADE_ID      AND tfr.SOURCE = 'FX'    LEFT JOIN (SELECT DISTINCT FXM_ORDER_ID, MIN(INSTRUCTION_RECEIVED_DATE_TIME) as INSTRUCTION_RECEIVED_DATE_TIME, MIN(PULL_DATE) AS PULL_DATE FROM VISTA_REPORTING.dbo.FX_ORDERS GROUP BY FXM_ORDER_ID) fxo     ON fxt.ORDER_ID = fxo.FXM_ORDER_ID      AND tfr.SOURCE = 'FX'    LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o     ON t.ORD_NUM = trd_o.ORD_NUM     LEFT JOIN (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc     ON trd_o.ORD_NUM = oc.TRD_ORD    LEFT JOIN VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2     ON tdd2.MG_USER_ID = fxt.ACCEPTED_BY      AND CAST(COALESCE(fxt.PULL_DATE,fxo.PULL_DATE) AS DATE)      BETWEEN CAST(tdd2.DATE_FROM AS DATE) AND CAST(tdd2.DATE_TO AS DATE)    LEFT JOIN (SELECT DISTINCT pm.ORD_NUM, pm.TRADER, pm.TOUCH_COUNT, pm.PULL_DATE FROM VISTA_REPORTING.dbo.PM_ORDERS pm    inner join #max_touch_pm mtp on mtp.ORD_NUM = pm.ORD_NUM and mtp.MAX_TOUCH = pm.TOUCH_COUNT) pm    on tfr.TRANSACTION_NUMBER = pm.ORD_NUM and tfr.SOURCE = 'AL'    LEFT JOIN VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd      ON dd.REPORT_NAME = 'Order Allocation'      AND CAST(COALESCE(fxt.PULL_DATE,fxo.PULL_DATE,t.PULL_DATE,pm.PULL_DATE) AS DATE)      BETWEEN CAST(dd.DATE_FROM AS DATE) AND CAST(dd.DATE_TO AS DATE)    WHERE tfr.VG_612 = 1        MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_FX AS T    USING #temp_audit AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);            --------UPDATING THE FINAL STATUS TABLES--------        IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    SELECT DISTINCT     CONCAT(ORDER_ID, '_', TRANSACTION_NUMBER,'_612_', SOURCE) AS ID,     '1A3' AS STATUS,      NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table    FROM #temp_final_2    WHERE VG_612 != 0        MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'FX',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'FX');            --Dropping temp tables    IF OBJECT_ID('tempdb..#pot_exceptions', 'U') IS NOT NULL DROP TABLE #pot_exceptions;    IF OBJECT_ID('tempdb..#comparable', 'U') IS NOT NULL DROP TABLE #comparable;    IF OBJECT_ID('tempdb..#final_ids') IS NOT NULL DROP TABLE #final_ids;    IF OBJECT_ID('tempdb..#temp_final_1') IS NOT NULL DROP TABLE #temp_final_1;    IF OBJECT_ID('tempdb..#temp_final_2') IS NOT NULL DROP TABLE #temp_final_2;    IF OBJECT_ID('tempdb..#temp_exceptions', 'U') IS NOT NULL DROP TABLE #temp_exceptions;    IF OBJECT_ID('tempdb..#max_touch_pm', 'U') IS NOT NULL DROP TABLE #max_touch_pm;    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit;    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table;    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_613_INSTRUCTOR_TO_DEALER_CASH  CreateDate: 2025-06-26 17:34:41.107  ModifyDate: 2025-06-26 17:34:41.107  --- DEFINITION START ---  -- =============================================    -- Author:  <Miter, Matej>    -- Create date: <11/10/2021>    -- Description:     -- <INSTRUCTOR that orders trade must be different than dealer     -- otherwise exception will be raised>    -- =============================================        -- ***************VERSION CONTROL***************    --    -- *********************************************        CREATE PROCEDURE [dbo].[VG_613_INSTRUCTOR_TO_DEALER_CASH]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;            IF OBJECT_ID('tempdb..#max_touch_t', 'U') IS NOT NULL DROP TABLE #max_touch_t     SELECT DISTINCT       MULTI_FUND_ID,       MAX(TOUCH_COUNT) as MAX_TOUCH      INTO #max_touch_t     FROM VISTA_REPORTING.dbo.TRADES     GROUP BY MULTI_FUND_ID        IF OBJECT_ID('tempdb..#temp_max_touch_pm', 'U') IS NOT NULL DROP TABLE #temp_max_touch_pm     SELECT       ORD_NUM as Order_Id,      pull_date as date_pull,      MAX(TOUCH_COUNT) AS MAX_TOUCH     INTO #temp_max_touch_pm     FROM Vista_STAGING.dbo.ORDERS pm     where PULL_DATE >= '2019-08-23 00:00:00.000' and not exists (SELECT ORD_NUM FROM VISTA_STAGING.dbo.ORDERS WHERE ORD_NUM = pm.ORD_NUM AND PULL_DATE < '2019-08-23 00:00:00.000')     GROUP BY ORD_NUM,PULL_DATE    /*-------------not now---------------------    IF OBJECT_ID('tempdb..#temp_ORD_max_touch_pm_s', 'U') IS NOT NULL DROP TABLE #temp_ORD_max_touch_pm_s     SELECT       pm.ORD_NUM,      pm.PULL_DATE,      pm.PM     INTO #temp_ORD_max_touch_pm_s     FROM Vista_STAGING.dbo.ORDERS pm     inner join #temp_max_touch_pm pms on pms.ORD_NUM=pm.ORD_NUM and pms.MAX_TOUCH = pm.TOUCH_COUNT     where pm.[STATUS] != 'C'     */-------------------------------------          IF OBJECT_ID('tempdb..#temp_max_req_orders', 'U') IS NOT NULL DROP TABLE #temp_max_req_orders     SELECT       ORDER_ID as [Order],      MAX(API_REQUESTED_DATE) AS MAX_API_REQ     INTO #temp_max_req_orders     FROM VISTA_REPORTING.dbo.CASH_ORDERS     GROUP BY ORDER_ID                IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades     SELECT       TRANSACTION_NUMBER,      MAX(API_REQUESTED_DATE) AS MAX_API_REQ     INTO #temp_max_req_trades     FROM VISTA_REPORTING.dbo.CASH_TRADES     GROUP BY TRANSACTION_NUMBER              IF OBJECT_ID('tempdb..#temp_max_pms_pr', 'U') IS NOT NULL DROP TABLE #temp_max_pms_pr     select pms.ORD_NUM,pms.PM,pr.MULTI_FUND_ID,pr.DEALING_DESK     INTO #temp_max_pms_pr     FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr      left join (select * from VISTA_REPORTING.dbo.PM_ORDERS ord      inner join #temp_max_touch_pm ord1 on ord1.Order_Id = ord.ORD_num and ord1.MAX_TOUCH = ord.TOUCH_COUNT) pms  on pms.ORD_num = pr.Ord_num          --We will need to uncomment logic in green below once we push to prod as we want exceptions to be raised only from date when we first push code into prod and not recursive    IF OBJECT_ID('tempdb..#pre_final_ex', 'U') IS NOT NULL DROP TABLE #pre_final_ex    SELECT DISTINCT      cxt.[TRANSACTION_NUMBER] as Transaction_Number,     pm_ord_max.ORDER_ID,      cxt.DEALER_NAME,     pm_ord_max.INSTRUCTED_BY as Instructed_by,     CASE WHEN pm_ord_max.INSTRUCTED_BY = cxt.DEALER_NAME  AND cxt.[TRANSACTION_STATUS_DECODE] NOT in ('Deleted','Cancelled') AND TRY_CAST(cxt.TRADE_DATE as date) >= '2022-03-01'  THEN 1 ELSE 0 END AS EXCEPTION_FLAG, --Additional Filter as when to start look at the trades to raise exceptions fro this report     CASE WHEN pm_ord_max.INSTRUCTED_BY = cxt.DEALER_NAME AND cxt.[TRANSACTION_STATUS_DECODE] NOT in ('Deleted','Cancelled') AND TRY_CAST(cxt.TRADE_DATE as date) >= '2022-03-01' THEN GETDATE() ELSE NULL END AS VG_613_CREATETIME, --Additional Filter as when tostart look at the trades to raise exceptions fro this report     'CM' as [DATA_SOURCE],     cxt.PRODUCT_TYPE,     COALESCE(cxt.[PRODUCT_GROUP_NAME],cxt.[PRODUCT]) as PRODUCT    INTO #pre_final_ex    FROM VISTA_REPORTING.dbo.CASH_TRADES cxt    inner join #temp_max_req_trades cxt1 on cxt1.MAX_API_REQ = cxt.API_REQUESTED_DATE and cxt1.TRANSACTION_NUMBER = cxt.TRANSACTION_NUMBER    left join (select * from VISTA_REPORTING.dbo.CASH_ORDERS cxo     inner join #temp_max_req_orders cxo1 on cxo1.MAX_API_REQ = cxo.API_REQUESTED_DATE and cxo1.[Order] = cxo.ORDER_ID) pm_ord_max on pm_ord_max.order_id = cxt.order_id        UNION        SELECT DISTINCT     t.[MULTI_FUND_ID],     t.[ORD_NUM],     t.TRD_TRADER,     pr.PM,     CASE WHEN pr.PM = t.TRD_TRADER AND isnull(t.TRD_STATUS, '') != 'C' AND TRY_CAST(t.TRD_TRADE_DATE as date) >= '2022-03-01'  THEN 1 ELSE 0 END AS EXCEPTION_FLAG,     CASE WHEN pr.PM = t.TRD_TRADER AND isnull(t.TRD_STATUS, '') != 'C' AND TRY_CAST(t.TRD_TRADE_DATE as date) >= '2022-03-01' THEN GETDATE() ELSE NULL END AS VG_613_CREATETIME,     'AL' as [DATA_SOURCE],     'Cash Products' as Product_Type,     t.[SM_SEC_TYPE] as PRODUCT    FROM VISTA_REPORTING.dbo.TRADES t    inner join #max_touch_t mtt on mtt.MULTI_FUND_ID = t.[MULTI_FUND_ID] and mtt.[MAX_TOUCH] = t.[TOUCH_COUNT]    left join #temp_max_pms_pr pr on t.[MULTI_FUND_ID] = pr.[MULTI_FUND_ID]    WHERE pr.[DEALING_DESK] = 'CASH'            IF OBJECT_ID('tempdb..#temp_exception_table', 'U') IS NOT NULL DROP TABLE #temp_exception_table    select      Transaction_Number,     Instructed_by AS Instructor,     DEALER_NAME as Dealer,     EXCEPTION_FLAG AS VG_613,     VG_613_CREATETIME,     [DATA_SOURCE] as [SOURCE],     PRODUCT_TYPE,     PRODUCT    into #temp_exception_table    from #pre_final_ex        --Add records into FINAL_STATUS_UPDATE_TABLE    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    SELECT DISTINCT     CONCAT(Transaction_Number,'_613_', SOURCE) AS ID,     '1A3' AS STATUS,     NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table    FROM #temp_exception_table    WHERE VG_613 != 0             MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'CASH',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'CASH');            --Add records into AUDIT_TABLE    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    SELECT DISTINCT     et.Transaction_Number AS Transaction_Number,     OC.TRD_ORD AS TRD_ORD,     co.ORDER_ID AS ORDER_ID,     'Instructor_to_Dealer' AS Exception_Type,     CONCAT(et.Transaction_Number,'_613_',[SOURCE]) AS ID,     NULL AS REASON,     NULL AS COMMENT,     'With Dealer' AS Status,     NULL AS ClientExecID,     'CASH' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],dd.[DEFAULT_DEALER]) AS DEALER,     '1A3' AS STATUS_ID,     co.INSTRUCTION_RECEIVED_DATE AS ORD_AUTH,     ct.EXECUTED_DATETIME AS TRADE_EXEC    INTO #temp_audit    FROM #temp_exception_table et    left join (SELECT DISTINCT TRANSACTION_NUMBER, ORDER_ID, EXECUTED_DATETIME, DEALER_NAME_DECODE, PRODUCT_TYPE, DEALER_NAME, PULL_DATE FROM VISTA_REPORTING.dbo.CASH_TRADES) ct on et.Transaction_Number = ct.[TRANSACTION_NUMBER]    left join (SELECT DISTINCT ORDER_ID, MIN(INSTRUCTION_RECEIVED_DATE) as INSTRUCTION_RECEIVED_DATE, ACCEPTED_BY, INSTRUCTED_BY, PULL_DATE FROM VISTA_REPORTING.dbo.CASH_ORDERS GROUP BY ORDER_ID, ACCEPTED_BY, INSTRUCTED_BY, PULL_DATE) co    on ct.[ORDER_ID] = co.[ORDER_ID]    LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER, PULL_DATE FROM VISTA_REPORTING.DBO.TRADES WHERE FinalFlag = 1) T ON et.SOURCE = 'AL' AND et.Transaction_Number = T.MULTI_FUND_ID    LEFT JOIN VISTA_REPORTING.DBO.ORDERS_CROSS OC ON OC.TRD_ORD = T.ORD_NUM    LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME, TRADER, PULL_DATE FROM VISTA_REPORTING.DBO.PM_ORDERS GROUP BY ord_num, TRADER, PULL_DATE) PM ON PM.ORD_NUM = OC.PM_ORD    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd    on (tdd.[DEALING_DESK] = 'CASH' and tdd.[MG_USER_ID] = ct.[DEALER_NAME] and et.[SOURCE] = 'CM' AND CAST(ct.PULL_DATE AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE))     or (tdd.[DEALING_DESK] = 'CASH' and tdd.[INITIALS] = t.[TRD_TRADER] and et.[SOURCE] = 'AL' AND CAST(t.PULL_DATE AS DATE) BETWEEN CAST(TDD.DATE_FROM AS DATE) AND CAST(TDD.DATE_TO AS DATE))     LEFT JOIN VISTA_REPORTING.DBO.TREASURY_DEALER_DESK TDD2 ON ((TDD2.MG_USER_ID  = COALESCE(CO.ACCEPTED_BY, CO.INSTRUCTED_BY) AND [SOURCE] = 'CM') OR (TDD2.INITIALS = PM.TRADER AND [SOURCE] = 'AL')) AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE) AS DATE) BETWEEN CAST(TDD2.DATE_FROM AS DATE) AND CAST(TDD2.DATE_TO AS DATE)    LEFT JOIN VISTA_STAGING.dbo.REF_CASH_DEFAULT_DEALER DD ON ((DD.REPORT_NAME = 'Instructor to Dealer MM' and (et.PRODUCT_TYPE = 'Cash Products' or et.[SOURCE] = 'al')) or (DD.REPORT_NAME = 'Instructor to Dealer RR' and (et.PRODUCT_TYPE = 'Repo / Rev Repo Products')))  AND CAST(COALESCE(CO.PULL_DATE, PM.PULL_DATE) AS DATE) BETWEEN CAST(DD.DATE_FROM AS DATE) AND CAST(DD.DATE_TO AS DATE)    where et.VG_613 = 1            MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_CASH AS T     USING #temp_audit AS S    ON (T.ID = S.ID )    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID, Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (Transaction_Number, TRD_ORD, ORDER_ID, Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);                -- ==============================================================================    /* Update Exceptions Table */    -- ==============================================================================        IF OBJECT_ID('tempdb..#MM_FINAL', 'U') IS NOT NULL DROP TABLE #MM_FINAL     SELECT DISTINCT      Transaction_Number,     Instructor,     Dealer,     VG_613,     SOURCE,     VG_613_CREATETIME,     PRODUCT     INTO #MM_FINAL     FROM #temp_exception_table     WHERE PRODUCT_TYPE = 'Cash Products'        IF OBJECT_ID('tempdb..#RR_FINAL', 'U') IS NOT NULL DROP TABLE #RR_FINAL     SELECT DISTINCT      Transaction_Number,     Instructor,     Dealer,     VG_613,     SOURCE,     VG_613_CREATETIME,     PRODUCT     INTO #RR_FINAL     FROM #temp_exception_table     WHERE PRODUCT_TYPE = 'Repo / Rev Repo Products'        IF      OBJECT_ID('VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE', 'U') IS NULL     SELECT distinct *      INTO VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE      FROM #MM_FINAL    ELSE      IF OBJECT_ID('tempdb..#temp_MM_table', 'U') IS NOT NULL      DROP TABLE #temp_MM_table     SELECT distinct *      INTO #temp_MM_table     FROM #MM_FINAL            MERGE VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_MM_TABLE AS T     USING #temp_MM_table AS S    ON (T.Transaction_Number = S.Transaction_Number and t.[SOURCE] = s.[SOURCE])    WHEN MATCHED     THEN UPDATE     SET       Transaction_Number = CASE WHEN S.VG_613 > T.VG_613 THEN S.Transaction_Number ELSE T.Transaction_Number END,      Instructor = CASE WHEN S.VG_613 > T.VG_613 THEN s.INSTRUCTOR ELSE T.Instructor END,      Dealer = CASE WHEN S.VG_613 > T.VG_613 THEN s.Dealer ELSE T.Dealer END,      VG_613 = CASE WHEN S.VG_613 > T.VG_613 THEN S.VG_613 ELSE T.VG_613 END,      VG_613_CREATETIME = CASE WHEN S.VG_613 > T.VG_613 THEN S.VG_613_CREATETIME ELSE T.VG_613_CREATETIME END,      [SOURCE] = CASE WHEN S.VG_613 > T.VG_613 THEN S.[SOURCE] ELSE T.[SOURCE] END,      PRODUCT = CASE WHEN S.VG_613 > T.VG_613 THEN S.[PRODUCT] ELSE T.[PRODUCT] END        WHEN NOT MATCHED     THEN     INSERT     (Transaction_Number,     Instructor,     Dealer,     VG_613,     VG_613_CREATETIME,     [SOURCE],     PRODUCT)    VALUES     (S.Transaction_Number,     S.Instructor,     S.Dealer,     S.VG_613,     S.VG_613_CREATETIME,     S.[SOURCE],     S.PRODUCT);            IF      OBJECT_ID('VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE', 'U') IS NULL     SELECT distinct *      INTO VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE      FROM #RR_FINAL    ELSE      IF OBJECT_ID('tempdb..#temp_RR_table', 'U') IS NOT NULL     DROP TABLE #temp_RR_table     SELECT distinct *      INTO #temp_RR_table     FROM #RR_FINAL         MERGE VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_CASH_RR_TABLE AS T     USING #temp_RR_table AS S    ON (T.Transaction_Number = S.Transaction_Number and t.[SOURCE] = s.[SOURCE])    WHEN MATCHED     THEN UPDATE     SET       Transaction_Number = CASE WHEN S.VG_613 > T.VG_613 THEN S.Transaction_Number ELSE T.Transaction_Number END,      Instructor = CASE WHEN S.VG_613 > T.VG_613 THEN s.INSTRUCTOR ELSE T.Instructor END,      Dealer = CASE WHEN S.VG_613 > T.VG_613 THEN s.Dealer ELSE T.Dealer END,      VG_613 = CASE WHEN S.VG_613 > T.VG_613 THEN S.VG_613 ELSE T.VG_613 END,      VG_613_CREATETIME = CASE WHEN S.VG_613 > T.VG_613 THEN S.VG_613_CREATETIME ELSE T.VG_613_CREATETIME END,      [SOURCE] = CASE WHEN S.VG_613 > T.VG_613 THEN S.[SOURCE] ELSE T.[SOURCE] END,      PRODUCT = CASE WHEN S.VG_613 > T.VG_613 THEN S.[PRODUCT] ELSE T.[PRODUCT] END        WHEN NOT MATCHED     THEN     INSERT     (Transaction_Number,     Instructor,     Dealer,     VG_613,     VG_613_CREATETIME,     [SOURCE],     PRODUCT)    VALUES     (S.Transaction_Number,     S.Instructor,     S.Dealer,     S.VG_613,     S.VG_613_CREATETIME,     S.[SOURCE],     S.PRODUCT);            IF OBJECT_ID('tempdb..#max_touch_t', 'U') IS NOT NULL DROP TABLE #max_touch_t    IF OBJECT_ID('tempdb..#temp_max_touch_pm', 'U') IS NOT NULL DROP TABLE #temp_max_touch_pm    IF OBJECT_ID('tempdb..#temp_ORD_max_touch_pm_s', 'U') IS NOT NULL DROP TABLE #temp_ORD_max_touch_pm_s    IF OBJECT_ID('tempdb..#temp_max_req_orders', 'U') IS NOT NULL DROP TABLE #temp_max_req_orders    IF OBJECT_ID('tempdb..#temp_max_req_orders_final', 'U') IS NOT NULL DROP TABLE #temp_max_req_orders_final    IF OBJECT_ID('tempdb..#pre_final_ex', 'U') IS NOT NULL DROP TABLE #pre_final_ex    IF OBJECT_ID('tempdb..#MM_FINAL', 'U') IS NOT NULL DROP TABLE #MM_FINAL    IF OBJECT_ID('tempdb..#RR_FINAL', 'U') IS NOT NULL DROP TABLE #RR_FINAL    IF OBJECT_ID('tempdb..#temp_RR_table', 'U') IS NOT NULL DROP TABLE #temp_RR_table    IF OBJECT_ID('tempdb..#temp_MM_table', 'U') IS NOT NULL DROP TABLE #temp_MM_table    IF OBJECT_ID('tempdb..temp_exception_table', 'U') IS NOT NULL DROP TABLE temp_exception_table    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit        END                --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_613_INSTRUCTOR_TO_DEALER_FX  CreateDate: 2025-06-26 17:33:46.307  ModifyDate: 2025-06-26 17:33:46.307  --- DEFINITION START ---  -- =============================================    -- Author:  <Miter, Matej>    -- Create date: <11/10/2021>    -- Description:     -- <INSTRUCTOR that orders trade must be different than dealer     -- otherwise exception will be raised>    -- =============================================        -- ***************VERSION CONTROL***************    --    -- *********************************************        CREATE PROCEDURE [dbo].[VG_613_INSTRUCTOR_TO_DEALER_FX]    AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;                IF OBJECT_ID('tempdb..#max_touch_t', 'U') IS NOT NULL DROP TABLE #max_touch_t     SELECT DISTINCT       MULTI_FUND_ID,       MAX(TOUCH_COUNT) as MAX_TOUCH      INTO #max_touch_t     FROM VISTA_REPORTING.dbo.TRADES     GROUP BY MULTI_FUND_ID        IF OBJECT_ID('tempdb..#temp_max_touch_pm', 'U') IS NOT NULL DROP TABLE #temp_max_touch_pm     SELECT       ORD_NUM as Order_id,      pull_date as date_pull,      MAX(TOUCH_COUNT) AS MAX_TOUCH     INTO #temp_max_touch_pm     FROM Vista_STAGING.dbo.ORDERS pm     where PULL_DATE >= '2019-08-23 00:00:00.000' and not exists (SELECT ORD_NUM FROM VISTA_STAGING.dbo.ORDERS WHERE ORD_NUM = pm.ORD_NUM AND PULL_DATE < '2019-08-23 00:00:00.000')     GROUP BY ORD_NUM,PULL_DATE         /*-------------not now---------------------    IF OBJECT_ID('tempdb..#temp_ORD_max_touch_pm_s', 'U') IS NOT NULL DROP TABLE #temp_ORD_max_touch_pm_s     SELECT       pm.ORD_NUM,      pm.PULL_DATE,      pm.PM     INTO #temp_ORD_max_touch_pm_s     FROM Vista_STAGING.dbo.ORDERS pm     inner join #temp_max_touch_pm pms on pms.ORD_NUM=pm.ORD_NUM and pms.MAX_TOUCH = pm.TOUCH_COUNT     where pm.[STATUS] != 'C'     */-------------------------------------         IF OBJECT_ID('tempdb..#temp_max_req_orders', 'U') IS NOT NULL DROP TABLE #temp_max_req_orders     SELECT       FXM_ORDER_ID as FXM_Order,      MAX(API_REQUESTED_DATE) AS MAX_API_REQ     INTO #temp_max_req_orders     FROM VISTA_REPORTING.dbo.FX_ORDERS     GROUP BY FXM_ORDER_ID              IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades     SELECT       trade_id,      MAX(API_REQUESTED_DATE) AS MAX_API_REQ     INTO #temp_max_req_trades     FROM VISTA_REPORTING.dbo.FX_TRADES     GROUP BY TRADE_ID         IF OBJECT_ID('tempdb..#temp_max_pms', 'U') IS NOT NULL DROP TABLE #temp_max_pms     select ord.ORD_NUM,ord.PM     INTO #temp_max_pms     FROM VISTA_STAGING.dbo.ORDERS ord      inner join #temp_max_touch_pm ord1 on ord1.Order_Id = ord.ORD_num and ord1.MAX_TOUCH = ord.TOUCH_COUNT             IF OBJECT_ID('tempdb..#pre_final_ex', 'U') IS NOT NULL DROP TABLE #pre_final_ex    SELECT DISTINCT      fxt.[TRADE_ID],     pm_ord_max.ORD_NUM,      CASE WHEN pm_ord_max.PM is not null then tdd.INITIALS else tdd.MG_USER_ID end as Dealt_by,     COALESCE(pm_ord_max.PM,CASE WHEN LEFT(pm_ord_max.INSTRUCTED_BY,3) in ('MGD','COR') THEN SUBSTRING(pm_ord_max.INSTRUCTED_BY,PATINDEX('%\%',pm_ord_max.INSTRUCTED_BY) + 1,LEN(INSTRUCTED_BY)) ELSE pm_ord_max.INSTRUCTED_BY END) as Instructed_By,     case when pm_ord_max.PM is not null and pm_ord_max.PM = tdd.INITIALS AND fxt.[TRADE_STATUS] NOT in ('Deleted','Cancelled') AND TRY_CAST(fxt.TRADE_DATE as date) >= '2022-03-01'  then 1 --Additional filter as when to start look at the trades to raise exceptions for this report          when pm_ord_max.INSTRUCTED_BY is not null and LEFT(pm_ord_max.INSTRUCTED_BY,3) not in ('MGD','COR') and pm_ord_max.INSTRUCTED_BY = tdd.MG_USER_ID AND fxt.[TRADE_STATUS] NOT in ('Deleted','Cancelled') AND TRY_CAST(fxt.TRADE_DATE as date) >= '2022-03-  01'  then 1       when pm_ord_max.INSTRUCTED_BY is not null and LEFT(pm_ord_max.INSTRUCTED_BY,3) in ('MGD','COR') and SUBSTRING(pm_ord_max.INSTRUCTED_BY,PATINDEX('%\%',pm_ord_max.INSTRUCTED_BY) + 1,LEN(INSTRUCTED_BY)) = tdd.MG_USER_ID  AND fxt.[TRADE_STATUS] NOT in ('De  leted','Cancelled') AND TRY_CAST(fxt.TRADE_DATE as date) >= '2022-03-01' then 1       else 0 end as VG_613,     case when pm_ord_max.PM is not null and pm_ord_max.PM = tdd.INITIALS AND fxt.[TRADE_STATUS] NOT in ('Deleted','Cancelled') AND TRY_CAST(fxt.TRADE_DATE as date) >= '2022-03-01'  then GETDATE()           when pm_ord_max.INSTRUCTED_BY is not null and LEFT(pm_ord_max.INSTRUCTED_BY,3) not in ('MGD','COR') and pm_ord_max.INSTRUCTED_BY = tdd.MG_USER_ID  AND fxt.[TRADE_STATUS] NOT in ('Deleted','Cancelled') AND TRY_CAST(fxt.TRADE_DATE as date) >= '2022-03  -01' then GETDATE()       when pm_ord_max.INSTRUCTED_BY is not null and LEFT(pm_ord_max.INSTRUCTED_BY,3) in ('MGD','COR') and SUBSTRING(pm_ord_max.INSTRUCTED_BY,PATINDEX('%\%',pm_ord_max.INSTRUCTED_BY) + 1,LEN(INSTRUCTED_BY)) = tdd.MG_USER_ID  AND fxt.[TRADE_STATUS] NOT in ('De  leted','Cancelled') AND TRY_CAST(fxt.TRADE_DATE as date) >= '2022-03-01' then GETDATE()       else NULL end AS VG_613_CREATETIME,     'FX' as [DATA_SOURCE]    INTO #pre_final_ex    FROM VISTA_REPORTING.dbo.FX_TRADES fxt    inner join #temp_max_req_trades fxt1 on fxt1.trade_id = fxt.trade_id and fxt1.MAX_API_REQ = fxt.API_REQUESTED_DATE    left join (select * from VISTA_REPORTING.dbo.FX_ORDERS fxo    inner join #temp_max_req_orders fxo1 on fxo1.FXM_Order = fxo.FXM_Order_Id and fxo1.MAX_API_REQ = fxo.API_REQUESTED_DATE) pm_ord_max on pm_ord_max.FXM_ORDER_ID = fxt.Order_id    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd on tdd.MG_USER_ID = fxt.DEALT_BY and fxt.PULL_DATE between tdd.DATE_FROM and tdd.DATE_TO                UNION        SELECT DISTINCT     t.[MULTI_FUND_ID],     t.[ORD_NUM],     t.TRD_TRADER,     ord.PM,     CASE WHEN ord.PM = t.TRD_TRADER AND isnull(t.TRD_STATUS, '') != 'C' AND TRY_CAST(t.TRD_TRADE_DATE as date) >= '2022-03-01' THEN 1 ELSE 0 END AS VG_613,     CASE WHEN ord.PM = t.TRD_TRADER AND isnull(t.TRD_STATUS, '') != 'C' AND TRY_CAST(t.TRD_TRADE_DATE as date) >= '2022-03-01' THEN GETDATE() ELSE NULL END AS VG_613_CREATETIME,     'AL' as [DATA_SOURCE]    FROM VISTA_REPORTING.dbo.TRADES t    inner join #max_touch_t mtt on t.MULTI_FUND_ID = mtt.[MULTI_FUND_ID] and t.[TOUCH_COUNT] = mtt.[MAX_TOUCH]    left join VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE pr on t.[MULTI_FUND_ID] = pr.[MULTI_FUND_ID]    left join #temp_max_pms ord on pr.ORD_NUM = ord.ORD_NUM     WHERE pr.[DEALING_DESK] = 'FX'             IF OBJECT_ID('tempdb..#temp_exception_table', 'U') IS NOT NULL DROP TABLE #temp_exception_table    select      TRADE_ID,     Instructed_by AS Instructor,     DEALT_BY as Dealer,     VG_613,     VG_613_CREATETIME,     [DATA_SOURCE] as [SOURCE]    into #temp_exception_table    from #pre_final_ex        --Add records into FINAL_STATUS_UPDATE_TABLE    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    SELECT DISTINCT     CONCAT(TRADE_ID,'_613_', SOURCE) AS ID,     '1A3' AS STATUS,     NULL AS FINAL_UPDATED_TIME    INTO #temp_status_table    FROM #temp_exception_table    WHERE VG_613 != 0             MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table AS S    ON (T.ID = S.ID)    WHEN MATCHED     THEN      UPDATE SET      T.ID=T.ID,      T.STATUS=T.STATUS,      T.DEALING_DESK = 'FX',      T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED      THEN      INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)     VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME, 'FX');            --Add records into AUDIT_TABLE    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit    SELECT DISTINCT     et.TRADE_ID AS TRADE_ID,     OC.TRD_ORD AS TRD_ORD,     fxo.FXM_ORDER_ID AS ORDER_ID,     'Instructor to Dealer' AS Exception_Type,     CONCAT(et.TRADE_ID,'_613_',[SOURCE]) AS ID,     NULL AS REASON,     NULL AS COMMENT,     'With Dealer' AS Status,     NULL AS ClientExecID,     'FX' AS DEALER_DESK,     GETDATE() AS CREATE_TIME,     NULL AS UPDATE_TIME,     COALESCE(tdd.[FULL_NAME],tdd2.[FULL_NAME],tdd3.[FULL_NAME],tdd4.[FULL_NAME],dd.[DEFAULT_DEALER]) AS DEALER,     '1A3' AS STATUS_ID,     fxo.INSTRUCTION_RECEIVED_DATE_TIME AS ORD_AUTH,     fxt.EXECUTED_DATE_TIME AS TRADE_EXEC    INTO #temp_audit    FROM #temp_exception_table et    left join (SELECT DISTINCT TRADE_ID, ORDER_ID, EXECUTED_DATE_TIME, DEALT_BY, PULL_DATE, ACCEPTED_BY FROM VISTA_REPORTING.dbo.FX_TRADES) fxt    on et.[TRADE_ID] = fxt.[TRADE_ID] and et.[SOURCE] = 'FX'    left join (SELECT DISTINCT FXM_ORDER_ID, MIN(INSTRUCTION_RECEIVED_DATE_TIME) as INSTRUCTION_RECEIVED_DATE_TIME, MIN(PULL_DATE) AS PULL_DATE FROM VISTA_REPORTING.dbo.FX_ORDERS GROUP BY FXM_ORDER_ID) fxo    on fxt.[ORDER_ID] = fxo.[FXM_ORDER_ID] and et.[SOURCE] = 'FX'    left join (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM, EXECUTION_TIME, TRD_TRADER, PULL_DATE FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t    ON et.[SOURCE] = 'AL' AND et.TRADE_ID = t.[MULTI_FUND_ID]    left join (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) trd_o    ON t.[ORD_NUM] = trd_o.[ORD_NUM]     left join (SELECT DISTINCT PM_ORD, TRD_ORD FROM VISTA_REPORTING.dbo.ORDERS_CROSS) oc    ON trd_o.[ORD_NUM] = oc.[TRD_ORD]    LEFT JOIN (SELECT DISTINCT ORD_NUM, PULL_DATE, TRADER FROM Vista_Reporting.dbo.PM_ORDERS) pm    ON pm.ORD_NUM = oc.PM_ORD    left join  VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd    on tdd.[MG_USER_ID] = fxt.[DEALT_BY] AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd.[DATE_FROM] AS DATE) AND CAST(tdd.[DATE_TO] AS DATE)    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd2    on tdd2.[MG_USER_ID] = fxt.[ACCEPTED_BY] AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE]) AS DATE) BETWEEN CAST(tdd2.[DATE_FROM] AS DATE) AND CAST(tdd2.[DATE_TO] AS DATE)    left join VISTA_REPORTING.DBO.TREASURY_DEALER_DESK tdd3    on tdd3.[INITIALS]  = t.[TRD_TRADER] AND CAST(t.[PULL_DATE] AS DATE) BETWEEN CAST(tdd3.[DATE_FROM] AS DATE) AND CAST(tdd3.[DATE_TO] AS DATE)    left join VISTA_REPORTING.dbo.TREASURY_DEALER_DESK tdd4    on tdd4.[INITIALS] = pm.[TRADER] AND CAST(pm.[PULL_DATE] AS DATE) BETWEEN CAST(tdd4.[DATE_FROM] AS DATE) AND CAST(tdd4.[DATE_TO] AS DATE)    left join VISTA_STAGING.dbo.REF_FX_DEFAULT_DEALER dd     on dd.[REPORT_NAME] = 'Instructor to Dealer Fx' AND CAST(COALESCE(fxt.[PULL_DATE],fxo.[PULL_DATE],t.[PULL_DATE],pm.[PULL_DATE]) AS DATE) BETWEEN CAST(dd.[DATE_FROM] AS DATE) AND CAST(dd.[DATE_TO] AS DATE)    WHERE et.VG_613 = 1        MERGE VISTA_REPORTING.dbo.AUDIT_TABLE_FX AS T     USING #temp_audit AS S    ON (T.ID = S.ID )    WHEN MATCHED     THEN --Do nothing     UPDATE SET     T.ID = T.ID    WHEN NOT MATCHED      THEN      INSERT (TRANSACTION_NUMBER, TRD_ORD, ORDER_ID, Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)     VALUES (TRADE_ID, TRD_ORD, ORDER_ID, Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);        IF      OBJECT_ID('VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE', 'U') IS NULL     SELECT distinct *      INTO VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE      FROM #temp_exception_table    ELSE      IF OBJECT_ID('tempdb..#temp_ID_table', 'U') IS NOT NULL DROP TABLE #temp_ID_table     SELECT distinct *      INTO #TEMP_ID_TABLE     FROM #temp_exception_table         MERGE VISTA_STAGING.dbo.VG_613_INSTRUCTOR_TO_DEALER_FX_TABLE AS T     USING #TEMP_ID_TABLE AS S    ON (T.TRADE_ID = S.TRADE_ID and t.[SOURCE] = s.[SOURCE])    WHEN MATCHED     THEN UPDATE     SET       TRADE_ID = CASE WHEN S.VG_613 > T.VG_613 THEN S.TRADE_ID ELSE T.TRADE_ID END,      Instructor = CASE WHEN S.VG_613 > T.VG_613 THEN s.INSTRUCTOR ELSE T.Instructor END,      Dealer = CASE WHEN S.VG_613 > T.VG_613 THEN s.Dealer ELSE T.Dealer END,      VG_613 = CASE WHEN S.VG_613 > T.VG_613 THEN S.VG_613 ELSE T.VG_613 END,      VG_613_CREATETIME = CASE WHEN S.VG_613 > T.VG_613 THEN S.VG_613_CREATETIME ELSE T.VG_613_CREATETIME END,      [SOURCE] = CASE WHEN S.VG_613 > T.VG_613 THEN S.[SOURCE] ELSE T.[SOURCE] END        WHEN NOT MATCHED     THEN     INSERT     (TRADE_ID,     Instructor,     Dealer,     VG_613,     VG_613_CREATETIME,     [SOURCE])    VALUES     (S.TRADE_ID,     S.Instructor,     S.Dealer,     S.VG_613,     S.VG_613_CREATETIME,     S.[SOURCE]);        IF OBJECT_ID('tempdb..#max_touch_t', 'U') IS NOT NULL DROP TABLE #max_touch_t    IF OBJECT_ID('tempdb..#temp_max_touch_pm', 'U') IS NOT NULL DROP TABLE #temp_max_touch_pm    IF OBJECT_ID('tempdb..#temp_ORD_max_touch_pm_s', 'U') IS NOT NULL DROP TABLE #temp_ORD_max_touch_pm_s    IF OBJECT_ID('tempdb..#temp_max_req_orders', 'U') IS NOT NULL DROP TABLE #temp_max_req_orders    IF OBJECT_ID('tempdb..#temp_max_req_orders_final', 'U') IS NOT NULL DROP TABLE #temp_max_req_orders_final    IF OBJECT_ID('tempdb..#pre_final_ex', 'U') IS NOT NULL DROP TABLE #pre_final_ex    IF OBJECT_ID('tempdb..temp_exception_table', 'U') IS NOT NULL DROP TABLE temp_exception_table    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_613_TRADER_INSTRUCTOR_FX  CreateDate: 2025-06-26 17:33:09.320  ModifyDate: 2025-06-26 17:33:09.320  --- DEFINITION START ---      -- =============================================    -- Author:  <Miter, Matej>    -- Create date: <2021-10-04>    -- Description: <Build exception for the TRADER_INSTRUCTOR table for FX    -- for the front end to display.>    -- =============================================        -- ***************VERSION CONTROL***************        -- *********************************************        CREATE PROCEDURE [dbo].[VG_613_TRADER_INSTRUCTOR_FX]        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         select o.INSTRUCTED_BY from     (select * from VISTA_REPORTING.dbo.FX_TRADES) t     inner join     (select * from VISTA_REPORTING.dbo.FX_ORDERS) o     on     t.ORDER_ID = o.FXM_ORDER_ID         ------------------------------------------------------     IF OBJECT_ID('tempdb..#temp_max_req_orders', 'U') IS NOT NULL DROP TABLE #temp_max_req_orders     SELECT       FXM_ORDER_ID,      MAX(API_REQUESTED_DATE) AS MAX_API_REQ     INTO #temp_max_req_orders     FROM VISTA_REPORTING.dbo.FX_ORDERS     GROUP BY FXM_ORDER_ID         IF OBJECT_ID('tempdb..#temp_max_touch_pm', 'U') IS NOT NULL DROP TABLE #temp_max_touch_pm     SELECT       ORD_NUM,      MAX(TOUCH_COUNT) AS MAX_TOUCH     --INTO #temp_max_touch_pm     FROM VISTA_REPORTING.dbo.PM_ORDERS pm     WHERE pm.DEALING_DESK = 'FX'     GROUP BY ORD_NUM             select * from VISTA_REPORTING.dbo.PM_ORDERS where DEALING_DESK = 'FX'     IF OBJECT_ID('tempdb..#temp_max_req_trades', 'U') IS NOT NULL DROP TABLE #temp_max_req_trades     SELECT       ORDER_ID,      MAX(API_REQUESTED_DATE) AS MAX_API_REQ     INTO #temp_max_req_trades     FROM VISTA_REPORTING.dbo.FX_TRADES     GROUP BY ORDER_ID         IF OBJECT_ID('tempdb..#temp_max_touch_tr', 'U') IS NOT NULL DROP TABLE #temp_max_touch_tr     SELECT       t.ORD_NUM,      MAX(t.TOUCH_COUNT) AS MAX_TOUCH     INTO #temp_max_touch_tr     FROM VISTA_REPORTING.dbo.TRADES t     LEFT JOIN (SELECT DISTINCT ORD_NUM, INST_TYPE, DEALING_DESK, SM_SEC_GROUP FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr ON pr.ORD_NUM=t.ORD_NUM     WHERE pr.SM_SEC_GROUP = 'OPTION' and pr.DEALING_DESK = 'FX' AND EXECUTION_TIME IS NOT NULL     GROUP BY t.ORD_NUM             -- Create table with both CM and Aladdin data     IF OBJECT_ID('tempdb..#temp_CM_AL_table', 'U') IS NOT NULL DROP TABLE #temp_CM_AL_table     SELECT DISTINCT      fxo.FXM_ORDER_ID AS ORDER_ID,      fxo.INSTRUCTED_BY,      fxo.BUY_CCY,      fxo.SELL_CCY,      fxo.INSTRUCTION_RECEIVED_DATE_TIME AS INSTRUCTION_RECEIVED_DATE,      fxo.INSTRUCTION_TYPE,      fxo.BUSINESS_GROUP,      fxo.CLIENT_FUND,      'FX' AS [DATA_SOURCE],      fxo.SEQUENCE_EXCEPTION_REASON,      CONVERT(VARCHAR, fxo.INSTRUCTION_STATUS) AS INSTRUCTION_STATUS,      fxo.FREEZE_MARKER,      fxo.FREEZE_BY,      ISNULL(fxo.FREEZE_DATE_TIME, '1900-01-01') AS FREEZE_DATE_TIME,       ISNULL(fxo.RELEASE_DATE_TIME, '1900-01-01') AS RELEASE_DATE_TIME,      CONVERT(varchar(5),DATEDIFF(s, fxo.FREEZE_DATE_TIME, fxo.RELEASE_DATE_TIME)/3600)+':'        +CONVERT(varchar(5),DATEDIFF(s, fxo.FREEZE_DATE_TIME, fxo.RELEASE_DATE_TIME)%3600/60)+':'        +CONVERT(varchar(5),(DATEDIFF(s, fxo.FREEZE_DATE_TIME, fxo.RELEASE_DATE_TIME)%60)) AS FREEZE_RELEASE_TIMESPAN     INTO #temp_CM_AL_table     FROM VISTA_REPORTING.dbo.FX_ORDERS fxo     INNER JOIN #temp_max_req_orders tro ON tro.FXM_ORDER_ID=fxo.FXM_ORDER_ID AND tro.MAX_API_REQ=fxo.API_REQUESTED_DATE     WHERE fxo.INSTRUCTION_RECEIVED_DATE_TIME IS NOT NULL         UNION         SELECT DISTINCT      pm.ORD_NUM AS ORDER_ID,      pm.PM,      CASE        WHEN pm.TRAN_TYPE = 'BUY' THEN LEFT(pm.SEC_DESC1,CHARINDEX(' P ', pm.SEC_DESC1)-1)       ELSE RIGHT(LEFT(pm.SEC_DESC1,CHARINDEX(' C ', pm.SEC_DESC1)-1), 3)      END AS BUY_CCY,      CASE        WHEN pm.TRAN_TYPE != 'BUY' THEN LEFT(pm.SEC_DESC1,CHARINDEX(' P ', pm.SEC_DESC1)-1)       ELSE RIGHT(LEFT(pm.SEC_DESC1,CHARINDEX(' C ', pm.SEC_DESC1)-1), 3)      END AS SELL_CCY,      pm.AUTH_TIME,      pr.INST_TYPE,      pgt.PORTFOLIO_GROUP_NAME,      NULL,      'AL' AS [DATA_SOURCE],      NULL,      pm.STATUS,      NULL,      NULL,      NULL,      NULL,      NULL     FROM VISTA_REPORTING.dbo.PM_ORDERS pm     INNER JOIN #temp_max_touch_pm mtp ON mtp.ORD_NUM=pm.ORD_NUM AND mtp.MAX_TOUCH=pm.TOUCH_COUNT     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.PM_ORD=pm.ORD_NUM     LEFT JOIN (SELECT DISTINCT ORD_NUM, INST_TYPE, DEALING_DESK FROM VISTA_REPORTING.dbo.PRIMARY_INST_TYPE_TABLE) pr ON pr.ORD_NUM=oc.TRD_ORD     LEFT JOIN (SELECT DISTINCT ORD_NUM, FUND FROM VISTA_REPORTING.dbo.TRADES) t ON t.ORD_NUM=oc.TRD_ORD     LEFT JOIN VISTA_REPORTING.dbo.PORTFOLIO_GROUPS_TREASURY pgt ON pgt.FUND_ID=t.FUND     WHERE pm.[DEALING_DESK] = 'FX' AND pm.SM_SEC_GROUP = 'OPTION' AND pm.AUTH_TIME IS NOT NULL             --SELECT * FROM #temp_CM_AL_table         -- Combine trades data from CM and AL and calculate MAX() executed time     IF OBJECT_ID('tempdb..#temp_min_max_exec', 'U') IS NOT NULL DROP TABLE #temp_min_max_exec     SELECT DISTINCT      ORDER_ID,      ACCEPTED_DATE_TIME,      QUOTE_PAIR,      CONVERT(DATE, VALUE_DATE_NEAR) AS VALUE_DATE,      MIN(EXECUTED_DATE_TIME) AS MIN_EXEC,      MAX(EXECUTED_DATE_TIME) AS MAX_EXEC,      MAX(MARKET_ARRIVAL_DATE_TIME) AS MARKET_ARRIVAL_DATE_TIME,      DATEDIFF(SECOND, MIN(EXECUTED_DATE_TIME), MAX(EXECUTED_DATE_TIME)) AS MIN_MAX_DIFF_SECS     INTO #temp_min_max_exec     FROM VISTA_REPORTING.dbo.FX_TRADES     WHERE EXECUTED_DATE_TIME IS NOT NULL     GROUP BY ORDER_ID, CONVERT(DATE, VALUE_DATE_NEAR), ACCEPTED_DATE_TIME, QUOTE_PAIR         UNION ALL         SELECT DISTINCT      oc.PM_ORD,      NULL,      t.DESC_INSTMT,      CONVERT(DATE, t.TRD_TRADE_DATE),      MIN(t.EXECUTION_TIME),      MAX(t.EXECUTION_TIME),      MAX(t.EXECUTION_TIME),      DATEDIFF(SECOND, MIN(t.EXECUTION_TIME), MAX(EXECUTION_TIME))     FROM  VISTA_REPORTING.dbo.TRADES t     INNER JOIN #temp_max_touch_tr mtt ON mtt.ORD_NUM=t.ORD_NUM AND mtt.MAX_TOUCH=t.TOUCH_COUNT     LEFT JOIN VISTA_REPORTING.dbo.ORDERS_CROSS oc ON oc.TRD_ORD=t.ORD_NUM     GROUP BY oc.PM_ORD, CONVERT(DATE, t.TRD_TRADE_DATE), DESC_INSTMT                     IF OBJECT_ID('tempdb..#temp_combined', 'U') IS NOT NULL DROP TABLE #temp_combined     SELECT DISTINCT      trec.ORDER_ID,       trec.INSTRUCTED_BY,       trec.BUSINESS_GROUP,       trec.INSTRUCTION_TYPE,       trec.[DATA_SOURCE],      trec.INSTRUCTION_RECEIVED_DATE,      trec.INSTRUCTION_STATUS,      trec.FREEZE_MARKER,      trec.FREEZE_BY,      trec.FREEZE_DATE_TIME,      trec.RELEASE_DATE_TIME,      trec.FREEZE_RELEASE_TIMESPAN,      tconf.ACCEPTED_DATE_TIME,      tconf.MIN_EXEC,      tconf.MAX_EXEC,       tconf.VALUE_DATE,      tconf.QUOTE_PAIR,      tconf.MARKET_ARRIVAL_DATE_TIME,      CONCAT(trec.BUY_CCY,'/', trec.SELL_CCY) AS CCY_PAIR,      trec.SEQUENCE_EXCEPTION_REASON,      CASE       WHEN cl.FIRM_FUND IS NOT NULL THEN 1       ELSE 0      END AS CLIENT_FLAG     INTO #temp_combined     FROM #temp_CM_AL_table trec     LEFT JOIN #temp_min_max_exec tconf ON tconf.ORDER_ID=trec.ORDER_ID     LEFT JOIN VISTA_STAGING.dbo.REF_COH_FIRM_FUND_LIST cl ON cl.FIRM_FUND=trec.CLIENT_FUND AND trec.INSTRUCTION_RECEIVED_DATE BETWEEN cl.DATE_FROM AND cl.DATE_TO        END  --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_CL1_DIRECTED_COUNTERPARTY_FI  CreateDate: 2025-06-26 17:32:38.777  ModifyDate: 2025-06-26 17:32:38.777  --- DEFINITION START ---  -- =============================================    -- Author:  <Henderson, Will>    -- Create date: <2018-06-11>    -- Description:     -- <Run exception analysis for Compliance on whether an Order had a directed counterparty.>    -- =============================================        -- ***************VERSION CONTROL***************    -- 11/12/2017 - DDC: Changes made to ensure that script     -- only ever updates existing records always ensuring     -- the highest level exception is reported and     -- inserts new ones if no exception has been raised.        -- 04/01/2018 - DDC: Amendment made to only run  exception    -- calculations on the data for the day the exception is     -- being pulled        -- 2018-02-22 - WH: Added in ASSET_TYPE: 'EQUITY' and     --   ASSET_SUB_TYPE = 'PFD' for consideration     --  (using same conditions as for CORP BND)        -- 2018-03-20 - WH: Changed from BUY_SELL_FLAG to TRAN_TYPE    -- when looking at indicative quotes.        -- 04/04/2018 - DDC: Changed the logic to count quotes requested     -- as COUNT(DISTINCT BROKER) WHERE QUOTE_VALUE IS NOT NULL OR 0        -- *********************************************            CREATE PROCEDURE [dbo].[VG_CL1_DIRECTED_COUNTERPARTY_FI]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,         AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;             IF OBJECT_ID('tempdb..#CP_Direction', 'U') IS NOT NULL DROP TABLE #CP_Direction     select distinct      pm.ORD_NUM,      comp.DEALING_DESK,      BROKER_CODE,      COMMENTS_VALUE,        CASE        WHEN BROKER_CODE IS NOT NULL THEN 1       WHEN (CHARINDEX('axe',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('run',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('bid',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('ask',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('offer', COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('buying', COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('selling', COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('with',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('JP',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('JPM',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('Morgan', COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('Gold',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('Sachs', COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('Barclays', COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('BRC',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('BARC',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('BC',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('SG',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('Societe', COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('Credit', COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('Suisse', COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('Stanley', COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('RBC',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('Royal', COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('Bank',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('WF',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('Wells', COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('Fargo', COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('HSBC',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('HSBK',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('RBS',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('Citi',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('CG',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('DB',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('Deutsche', COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('ML',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('Merril', COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('Lynch', COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('BNP',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('Paribas', COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('BP',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('Commerz', COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('JS',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('Jeff',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('Natixis', COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('NX',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('Nomura', COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('SAN',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('Danske', COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('Cantor', COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('ALLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('BALB',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('BAMP',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('BANC',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('BARP',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('BBLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('BBV',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('BCM',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('BILL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('BOLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('BPLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('BVLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('CALC',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('CALL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('CANA',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('CFLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('CGML',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('CHAL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('CILB',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('CIWM',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('COLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('COMM',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('CSFE',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('CSLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('DENL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('DEUP',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('DMGN',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('DMLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('DNBN',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('DNLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('DZBK',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('EULL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('EURC',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('EXA',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('FITZ',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('GARB',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('GLAS',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('GOLD',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('GOLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('GRDA',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('HENC',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('HSBK',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('HSBP',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('HSLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('HYLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('HYPO',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('ICIL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('ICLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('IKLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('ING',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('INGL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('JPLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('JPMS',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('KKLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('LIEL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('LLOP',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('LTLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('LTSB',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('LWLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('MADV',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('MAX',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('MELT',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('MITS',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('MIZ',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('MLSB',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('MSLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('MSTC',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('MTLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('MZLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('NATE',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('NDEA',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('NDLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('NMLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('NMRA',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('NTLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('PBS',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('RABN',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('RALL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('RBDS',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('RBLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('RBS',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('RBSP',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('RCLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('SALL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('SANT',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('SBP',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('SCB',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('SCLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('SCTB',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('SEAE',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('SFLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('SGLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('SGSA',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('SKAN',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('SKLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('SMLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('SOCP',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('STIF',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('STLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('STOR',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('TDS',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('TLC',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('TOR',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('TRAL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('UBLL',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('UBSA',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('USBT',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('WBC',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('WELF',  COMMENTS_VALUE) > 0) THEN 1       WHEN (CHARINDEX('WELL',  COMMENTS_VALUE) > 0) THEN 1       ELSE 0      END AS DIRECTED_CP     into #CP_Direction     from VISTA_REPORTING.dbo.PM_ORDERS pm     INNER JOIN VISTA_REPORTING.dbo.COMPLIANCE_FINAL_STATUS_UPDATE_TABLE comp -- We only want to bring through orders that have been sampled by Compliance.     ON pm.ORD_NUM = comp.ORD_NUM     WHERE comp.DEALING_DESK = 'Fixed Income'     --where PULL_DATE=@DATE_FILTER             IF OBJECT_ID('tempdb..#CP_Direction_Final', 'U') IS NOT NULL DROP TABLE #CP_Direction_Final     SELECT       ORD_NUM,      DEALING_DESK,      MAX(DIRECTED_CP) AS DIRECTED_CP     INTO #CP_Direction_Final      FROM #CP_Direction     GROUP BY ORD_NUM, DEALING_DESK         -- Use #CP_Direction_Final to populate FINAL_STATUS_UPDATE_TABLE     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     select distinct      ORD_NUM,      DEALING_DESK,      COALESCE(DIRECTED_CP,0) AS Exception_Value,      CONVERT(VARCHAR(10),'Dir CPTY') AS [Exception_Type],      CASE        WHEN COALESCE(DIRECTED_CP,0) = 0 THEN '2C3' -- If Directed Counterparty is 0 then no need to review       ELSE '2C1'       END AS STATUS,      NULL AS FINAL_UPDATED_TIME     into #temp_status_table     from #CP_Direction_Final          --      MERGE VISTA_REPORTING.dbo.COMPLIANCE_EXCEPTIONS_FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ORD_NUM = S.ORD_NUM      AND T.Exception_Type = S.Exception_Type)     WHEN MATCHED      THEN --Do nothing      UPDATE SET       T.ORD_NUM=T.ORD_NUM     WHEN NOT MATCHED       THEN       INSERT (MULTI_FUND_ID,  ORD_NUM, DEALING_DESK, Exception_value, Exception_type,  Status,   FINAL_UPDATED_TIME)      VALUES (NULL,   S.ORD_NUM, S.DEALING_DESK, S.Exception_value, S.Exception_type, S.Status, S.FINAL_UPDATED_TIME);         IF OBJECT_ID('VISTA_STAGING.dbo.VG_CL1_DIRECTED_COUNTERPARTY_FI_TABLE', 'U') IS NULL         select distinct       ORD_NUM,      DEALING_DESK,      coalesce(DIRECTED_CP, 0) as DIRECTED_CP_EXECPTION,      case        when DIRECTED_CP=1 then GETDATE() else NULL end as CP_CREATE_TIME --If an excpetion has been raised create a Timestamp for that exception     into VISTA_STAGING.dbo.VG_CL1_DIRECTED_COUNTERPARTY_FI_TABLE     from #CP_Direction_Final ex         ELSE          IF OBJECT_ID('tempdb..#temp_cp_table', 'U') IS NOT NULL DROP TABLE #temp_cp_table         select distinct       'Fixed Income' as DEALING_DESK,      ORD_NUM,      coalesce(DIRECTED_CP, 0) as DIRECTED_CP_EXECPTION,      case        when DIRECTED_CP=1 then GETDATE() else NULL end as CP_CREATE_TIME --If an excpetion has been raised create a Timestamp for that exception     into #temp_cp_table     FROM #CP_Direction_Final               MERGE VISTA_STAGING.dbo.VG_CL1_DIRECTED_COUNTERPARTY_FI_TABLE AS T     USING #temp_cp_table AS S     ON (T.ORD_NUM = S.ORD_NUM)     WHEN MATCHED      THEN --Do nothing      UPDATE SET         T.ORD_NUM = T.ORD_NUM     WHEN NOT MATCHED       THEN INSERT (DEALING_DESK, ORD_NUM, DIRECTED_CP_EXECPTION, CP_CREATE_TIME)         VALUES (S.DEALING_DESK, S.ORD_NUM, S.DIRECTED_CP_EXECPTION, S.CP_CREATE_TIME);        END    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_COMMISSION_EXCEPTION_EQ  CreateDate: 2025-06-26 17:32:27.773  ModifyDate: 2025-06-26 17:32:27.773  --- DEFINITION START ---      -- =============================================    -- Author:  <RAGI, KEERTI>    -- Create date: <08/14/2018>    -- =============================================        -- ***************VERSION CONTROL***************    -- 09-10-2018 - KR - Modified the code to round the Actual rate (bps) to the second decimal place before comparing to the defaul rate.    -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.    -- 2018-11-12 - WH: Added in a consideration for changing commission rates across time    -- 2019-02-04 ER updated the commission rates table to include Russia as a request from Mike Garcia    --2023-09-08 Matej Miter created for Jira:    --SURVG-858 - Due to the adding new execution for USA market, discovered there is a problem in our code that was overlapping new and old dates so fixed that by reducing the day as end date of previous execution    --SURVG-988 - Matej Miter created for Jira --SURVG-988    --Changed from 0.03 to 0.02 per Dan's request on 1st of April for non algo ETFs    -- *********************************************            CREATE PROCEDURE [dbo].[VG_COMMISSION_EXCEPTION_EQ]          AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        IF OBJECT_ID('tempdb..#Cleaned_settlements', 'U') IS NOT NULL DROP TABLE #Cleaned_settlements        --This is done to clean the data so that all the countries can join to the commissions table        SELECT       CASE        WHEN [M&G] = 'Korea' THEN 'South Korea'       WHEN [M&G] = 'US' THEN 'USA'          WHEN [M&G] ='Phillippines' THEN 'Philippines'       WHEN [M&G]='United Kingdom' THEN 'UK'      ELSE [M&G]      END AS [M&G],      [Settlement],      [Code],      [Decode],      [Trimmed],      [Names]    INTO #Cleaned_settlements      FROM VISTA_STAGING.[dbo].[EXTENDED_SETTLEMENT_CYCLE]         IF OBJECT_ID('tempdb..#COMMISSION_RATE', 'U') IS NOT NULL DROP TABLE #COMMISSION_RATE           SELECT DISTINCT                 T.MULTI_FUND_ID,        T.TRD_TRADE_DATE,        O.DEALING_DESK,        t.TRD_COUNTERPARTY,                 CASE                         WHEN SUM(T.TRD_PRINCIPAL) = 0 THEN NULL                        ELSE CONVERT(DECIMAL(9,2),((SUM(T.TRD_COMMISSION)/SUM(T.TRD_PRINCIPAL))*100.0))                 END AS COMMISSION_RATE_FROM_CALCULATION,                 MAX(i2.MARKET) AS MARKET,                 MAX(CASE WHEN T.TRD_EX_DESK_TYPE IN ('ALGO', 'ALGO-EU', 'ALGO-US') THEN 1 ELSE 0 END) AS Algo_Flag,                 MAX(CASE WHEN O.ORD_GROUP IS NOT NULL THEN 1 ELSE 0 END) AS Program_Flag,                 MAX(CASE WHEN P.INST_TYPE = 'ETF' THEN 1 ELSE 0 END) AS ETF_Flag                        INTO #COMMISSION_RATE           from VISTA_REPORTING.dbo.TRADES T           LEFT JOIN VISTA_REPORTING.dbo.ORDERS O           ON T.ORD_NUM = O.ORD_NUM           --LEFT JOIN VISTA_REPORTING.dbo.INSTRUMENTS I           --ON I.CUSIP=T.CUSIP         OUTER APPLY (SELECT TOP 1 i.* FROM VISTA_REPORTING.dbo.INSTRUMENTS i         WHERE (i.CUSIP=COALESCE(T.CUSIP, O.CUSIP) AND i.DATE<=CONVERT(DATE, COALESCE(T.EXECUTION_TIME, O.AUTH_TIME)))         ORDER BY i.DATE DESC) as i2            LEFT JOIN VISTA_REPORTING.DBO.PRIMARY_INST_TYPE_TABLE P           ON P.MULTI_FUND_ID=T.MULTI_FUND_ID           WHERE p.DEALING_DESK = 'Equity' AND O.DEALING_DESK='Equity' AND t.FinalFlag = '1'        AND P.INST_TYPE IN ('EQUITIES','ETF')        GROUP BY        T.MULTI_FUND_ID,       T.TRD_TRADE_DATE,       O.DEALING_DESK,       t.TRD_COUNTERPARTY        IF OBJECT_ID('tempdb..#cmsn', 'U') IS NOT NULL DROP TABLE #cmsn    SELECT      *,     DENSE_RANK() OVER(PARTITION BY Country, Type ORDER BY Effective_From) AS [Rnk]    INTO #cmsn    FROM VISTA_STAGING.DBO.COMMISSION_RATES            IF OBJECT_ID('tempdb..#HISTORICAL_COMMISSIONS', 'U') IS NOT NULL DROP TABLE #HISTORICAL_COMMISSIONS    SELECT DISTINCT     a.Country,     a.Execution,     a.TYPE,     a.execution_value,     a.Effective_From AS [Start],     --SURVG-858     ISNULL(DATEADD(day,-1,b.Effective_From),GETDATE()) AS [End]     --End of SURVG-858    INTO #HISTORICAL_COMMISSIONS    FROM #cmsn a    LEFT JOIN #cmsn b    ON a.Country = b.Country     AND a.TYPE = b.TYPE     AND a.Rnk + 1 = b.Rnk        --SURVG-988    IF OBJECT_ID('tempdb..#DEFAULT_COMMISSION', 'U') IS NOT NULL DROP TABLE #DEFAULT_COMMISSION           SELECT                  C.*,                 CASE                         WHEN C.TRD_COUNTERPARTY = 'LIEL' AND C.Market = 'CA' THEN 0.07 -- For Canada Liquidnet, default rate is 7 bps (MARKET = 'CA' and COUNTERPARTY = 'LIEL'                        WHEN C.TRD_COUNTERPARTY = 'ATLA' AND C.Market = 'US' THEN 0.03 -- For US Atlantic, default rate is 3 bps (MARKET = 'US' and COUNTERPARTY = 'ATLA'                        WHEN C.Algo_Flag = 1  AND C.ETF_Flag = 1           THEN 0.02 -- All Algo ETF trades are default 2 bps                        WHEN C.Algo_Flag = 1                             THEN algo.execution_value -- All Algo non-ETF trades are split by country                        WHEN C.ETF_Flag = 1        THEN           CASE           WHEN C.TRD_TRADE_DATE < '2025-04-01' THEN 0.03  -- Not Algo and ETF trades are 3 bps default           ELSE 0.02  --SURVG-988 - 0.02 per new request from 1st of April 2025          END                           WHEN C.Program_Flag = 1                           THEN 0.05 -- Not Algo and Program trades are 5 bps default                        ELSE ISNULL(Cash_PT.execution_value,0) -- For all other trades, use the market value                 END AS [Default_Rate]           INTO #DEFAULT_COMMISSION        FROM #COMMISSION_RATE C        LEFT JOIN (                 SELECT * FROM #HISTORICAL_COMMISSIONS CR                 LEFT JOIN #Cleaned_settlements CS                 ON CR.COUNTRY=CS.[M&G]         OR (CR.COUNTRY = 'USA' AND CS.[M&G] = 'US') -- Manual fix for America         OR (CR.COUNTRY IN ('UK (FTSE 100)', 'UK (FTSE 250)', 'UK (Small Cap)') AND CS.[M&G]='UK') -- Manual fix for UK                 WHERE CR.TYPE='ALGO'           ) Algo           ON Algo.CODE=C.MARKET AND C.TRD_TRADE_DATE BETWEEN Algo.[Start] AND algo.[End]           LEFT JOIN (                 SELECT * FROM #HISTORICAL_COMMISSIONS CO                 LEFT JOIN #Cleaned_settlements CL                 ON CO.COUNTRY=CL.[M&G]         OR (CO.COUNTRY = 'USA' AND CL.[M&G] = 'US') -- Manual fix for America        OR (CO.COUNTRY IN ('United Kingdom FTSE 100', 'United Kingdom FTSE 250', 'United Kingdom SmallCap') AND CL.[M&G]='UK') -- Manual fix for UK                 WHERE CO.TYPE='Cash&PT'           ) Cash_PT           ON Cash_PT.CODE=C.MARKET  AND C.TRD_TRADE_DATE BETWEEN Cash_PT.[Start] AND Cash_PT.[End]    --END of SURVG-988        IF OBJECT_ID('tempdb..#commission_exception_final_1', 'U') IS NOT NULL DROP TABLE #commission_exception_final_1     SELECT DISTINCT            MULTI_FUND_ID,       DEALING_DESK,      [Default_Rate],      COMMISSION_RATE_FROM_CALCULATION,         CASE             WHEN COMMISSION_RATE_FROM_CALCULATION > ISNULL(Default_Rate,0) AND Program_Flag = 0 THEN 1             ELSE 0          END AS COMMISSION_EXCEPTION     INTO #COMMISSION_exception_final_1     FROM #DEFAULT_COMMISSION               IF OBJECT_ID('tempdb..#commission_exception_final', 'U') IS NOT NULL DROP TABLE #commission_exception_final     SELECT DISTINCT            MULTI_FUND_ID,          DEALING_DESK,      [Default_Rate],      COMMISSION_RATE_FROM_CALCULATION,      COMMISSION_EXCEPTION,     case            when COMMISSION_EXCEPTION=1 then GETDATE() else NULL end as CE_CREATE_TIME --If an excpetion has been raised create a Timestamp for that exception     INTO #COMMISSION_exception_final     FROM #COMMISSION_exception_final_1                  -- Use #COMMISSION_exception_final to populate FINAL_STATUS_UPDATE_TABLE    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table      select distinct           CONCAT(MULTI_FUND_ID,'_CI') AS ID,           '1A1' AS STATUS,            NULL AS FINAL_UPDATED_TIME       into #temp_status_table       from #COMMISSION_exception_final       where COMMISSION_EXCEPTION = 1               MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T    USING #temp_status_table AS S    ON (T.ID = S.ID)    WHEN MATCHED           THEN              UPDATE SET                    T.ID=T.ID,                    T.STATUS=T.STATUS,                    T.DEALING_DESK = 'Equity',                    T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME    WHEN NOT MATCHED            THEN              INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)             VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME,'Equity');         --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      ex.MULTI_FUND_ID AS MULTI_FUND_ID,      t.ORD_NUM AS TRD_ORD,      NULL AS PM_ORD,      'Commissions Increase' AS Exception_Type,      CONCAT(ex.MULTI_FUND_ID,'_CI') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'For Review' AS Status,      NULL AS ClientExecID,      'Equity' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      TRD_TRADER AS DEALER,      '1A1' AS STATUS_ID,      NULL AS ORD_AUTH,      EXECUTION_TIME AS TRADE_EXEC     INTO #temp_audit     FROM #COMMISSION_exception_final ex     LEFT JOIN (SELECT DISTINCT MULTI_FUND_ID, ORD_NUM,  TRD_TRADER, EXECUTION_TIME FROM VISTA_REPORTING.dbo.TRADES WHERE FinalFlag = 1) t     ON ex.MULTI_FUND_ID = t.MULTI_FUND_ID     where COMMISSION_EXCEPTION = 1         MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);            IF OBJECT_ID('VISTA_STAGING.dbo.VG_COMMISSION_EXCEPTION_EQ_TABLE', 'U') IS NULL     SELECT DISTINCT             tr.DEALING_DESK,            t.MULTI_FUND_ID,         C.[Default_Rate],      C.COMMISSION_RATE_FROM_CALCULATION,            coalesce(C.COMMISSION_EXCEPTION, 0) as COMMISSION_EXCEPTION,            case                 when C.COMMISSION_EXCEPTION=1 then GETDATE() else NULL end as CE_CREATE_TIME --If an excpetion has been raised create a Timestamp for that exception    into VISTA_STAGING.dbo.VG_COMMISSION_EXCEPTION_EQ_TABLE    from VISTA_REPORTING.dbo.TRADES t    left join #COMMISSION_exception_final C on C.MULTI_FUND_ID=t.MULTI_FUND_ID    left join VISTA_REPORTING.dbo.TRD_ORDERS tr on tr.ORD_NUM=t.ORD_NUM    where tr.DEALING_DESK = 'Equity'            MERGE VISTA_STAGING.dbo.VG_COMMISSION_EXCEPTION_EQ_TABLE AS T    USING #COMMISSION_exception_final AS S    ON (T.MULTI_FUND_ID = S.MULTI_FUND_ID)-- AND T.[Default_Rate]=S.[Default_Rate])    WHEN MATCHED            THEN             UPDATE SET           T.MULTI_FUND_ID=S.MULTI_FUND_ID,                T.DEALING_DESK = S.DEALING_DESK,       T.[Default_Rate]=S.[Default_Rate],       T.COMMISSION_RATE_FROM_CALCULATION=S.COMMISSION_RATE_FROM_CALCULATION,                T.COMMISSION_EXCEPTION = CASE WHEN S.COMMISSION_EXCEPTION > T.COMMISSION_EXCEPTION THEN S.COMMISSION_EXCEPTION ELSE T.COMMISSION_EXCEPTION END,                T.CE_CREATE_TIME = CASE WHEN S.COMMISSION_EXCEPTION > T.COMMISSION_EXCEPTION THEN S.CE_CREATE_TIME ELSE T.CE_CREATE_TIME END    WHEN NOT MATCHED              THEN INSERT (DEALING_DESK, MULTI_FUND_ID, [Default_Rate], COMMISSION_RATE_FROM_CALCULATION,                          COMMISSION_EXCEPTION, CE_CREATE_TIME)              VALUES (S.DEALING_DESK, S.MULTI_FUND_ID, S.[Default_Rate], S.COMMISSION_RATE_FROM_CALCULATION,                     S.COMMISSION_EXCEPTION, S.CE_CREATE_TIME);        IF OBJECT_ID('tempdb..#Cleaned_settlements', 'U') IS NOT NULL DROP TABLE #Cleaned_settlements    IF OBJECT_ID('tempdb..#COMMISSION_RATE', 'U') IS NOT NULL DROP TABLE #COMMISSION_RATE    IF OBJECT_ID('tempdb..#cmsn', 'U') IS NOT NULL DROP TABLE #cmsn    IF OBJECT_ID('tempdb..#HISTORICAL_COMMISSIONS', 'U') IS NOT NULL DROP TABLE #HISTORICAL_COMMISSIONS    IF OBJECT_ID('tempdb..#DEFAULT_COMMISSION', 'U') IS NOT NULL DROP TABLE #DEFAULT_COMMISSION    IF OBJECT_ID('tempdb..#commission_exception_final_1', 'U') IS NOT NULL DROP TABLE #commission_exception_final_1    IF OBJECT_ID('tempdb..#commission_exception_final', 'U') IS NOT NULL DROP TABLE #commission_exception_final    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit            END                --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_IMPLEMENTATION_SHORTFALL_EXCEPTION_EQ  CreateDate: 2025-06-26 17:32:02.263  ModifyDate: 2025-06-26 17:32:02.263  --- DEFINITION START ---      -- =============================================    -- Author:  <RAGI,KEERTI>    -- Create date: <31/07/2018>    -- Description:     -- =============================================        -- ***************VERSION CONTROL***************    -- KR - 8/3/2018 - Added the logic FOR FINAL_STATUS_UPDATE_TABLE    -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.    -- *********************************************        CREATE PROCEDURE [dbo].[VG_IMPLEMENTATION_SHORTFALL_EXCEPTION_EQ]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;         IF OBJECT_ID('tempdb..#im_exception', 'U') IS NOT NULL DROP TABLE #im_exception         SELECT DISTINCT      [ORDER ID] AS ORD_NUM,      CONVERT(BIGINT,ID) AS ID,      [VS ORDER ARRIVAL],          CASE       WHEN ABS([VS ORDER ARRIVAL]) >100 THEN 1 ELSE 0      END AS IM_EXCEPTION,      'Equity' AS DEALING_DESK,     CASE WHEN ABS([VS ORDER ARRIVAL]) >100 THEN GETDATE() ELSE NULL END AS IM_CREATEDATE      INTO #im_exception     FROM [VISTA_STAGING].[dbo].[Markit_ISReport]      GROUP BY [ORDER ID], ID, [VS ORDER ARRIVAL]             --IF OBJECT_ID('tempdb..#im_exception1', 'U') IS NOT NULL DROP TABLE #im_exception1         --SELECT DISTINCT *     --INTO #im_exception1 FROM #im_exception     --WHERE IM_EXCEPTION =1             IF OBJECT_ID('VISTA_STAGING.dbo.VG_IMPLEMENTATION_SHORTFALL_EQ_TABLE', 'U') IS NULL          SELECT DISTINCT       ORD_NUM,      ID,      DEALING_DESK,      IM_EXCEPTION,      IM_CREATEDATE       INTO VISTA_STAGING.dbo.VG_IMPLEMENTATION_SHORTFALL_EQ_TABLE     FROM #im_exception         ELSE         MERGE VISTA_STAGING.dbo.VG_IMPLEMENTATION_SHORTFALL_EQ_TABLE AS T     USING #im_exception AS S     ON (T.ORD_NUM = S.ORD_NUM AND T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET       T.DEALING_DESK = S.DEALING_DESK,       T.IM_EXCEPTION =  CASE WHEN S.IM_EXCEPTION > T.IM_EXCEPTION                  THEN S.IM_EXCEPTION ELSE T.IM_EXCEPTION END,       T.IM_CREATEDATE = CASE WHEN S.IM_EXCEPTION > T.IM_EXCEPTION              THEN S.IM_CREATEDATE ELSE T.IM_CREATEDATE END            WHEN NOT MATCHED       THEN INSERT (ORD_NUM, ID, DEALING_DESK, IM_EXCEPTION, IM_CREATEDATE)      VALUES (S.ORD_NUM, S.ID, S.DEALING_DESK,S.IM_EXCEPTION, S.IM_CREATEDATE);             IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     select distinct     CONCAT(ORD_NUM, '_', ID, '_IS') AS ID,     '1A1' AS STATUS,     NULL AS FINAL_UPDATED_TIME     into #temp_status_table     from #im_exception     WHERE IM_EXCEPTION =1             MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET       T.ID=T.ID,       T.STATUS=T.STATUS,       T.DEALING_DESK = 'Equity',       T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME,'Equity');         --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      NULL AS MULTI_FUND_ID,      t.ORD_NUM AS TRD_ORD,      NULL AS PM_ORD,      'Implementation Shortfall' AS Exception_Type,      CONCAT(ex.ORD_NUM, '_', ID, '_IS') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'For Review' AS Status,      NULL AS ClientExecID,      'Equity' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      NULL AS DEALER,      '1A1' AS STATUS_ID,      AUTH_TIME AS ORD_AUTH,      NULL AS TRADE_EXEC     INTO #temp_audit     FROM #im_exception ex     LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) t     ON ex.ORD_NUM = t.ORD_NUM     WHERE ex.IM_EXCEPTION =1              MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);         IF OBJECT_ID('tempdb..#im_exception', 'U') IS NOT NULL DROP TABLE #im_exception     IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit        END                    --- DEFINITION END ---  === STORED PROCEDURE END ===    
=== STORED PROCEDURE START ===  Database: Vista_Staging  Schema: dbo  Name: VG_MARKET_HIGH_LOW_EXCEPTION_EQ  CreateDate: 2025-06-26 17:31:50.593  ModifyDate: 2025-06-26 17:31:50.593  --- DEFINITION START ---          -- =============================================    -- Author:  <RAGI,KEERTI>    -- Create date: <27/08/2018>    -- Description:     -- =============================================        -- ***************VERSION CONTROL***************    -- 2018-13-09 - WH: Added in an insert for new exceptions into     --  VISTA_REPORTING.dbo.AUDIT_TABLE. This table is used for front    --  end purposes.    -- *********************************************        CREATE PROCEDURE [dbo].[VG_MARKET_HIGH_LOW_EXCEPTION_EQ]      -- Add the parameters for the stored procedure here     --@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0,        AS    BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.     SET NOCOUNT ON;        IF OBJECT_ID('tempdb..#hl_exception', 'U') IS NOT NULL DROP TABLE #hl_exception         SELECT DISTINCT      [ORDER ID] AS ORD_NUM,      ID,      CASE                WHEN [Avg Trade Price (local)] < [Daily Low Price (local)] THEN 1                 WHEN [Avg Trade Price (local)] > [Daily High Price (local)] THEN 1                ELSE 0            END AS HL_EXCEPTION,      CASE                WHEN [Avg Trade Price (local)] < [Daily Low Price (local)] THEN GETDATE()                WHEN [Avg Trade Price (local)] > [Daily High Price (local)] THEN GETDATE()                ELSE NULL            END AS HL_CREATEDATE      INTO #hl_exception     FROM [VISTA_STAGING].[dbo].[Markit_OutsideHighLow]     GROUP BY [ORDER ID],      ID,     [Daily Low Price (local)],     [Daily High Price (local)],     [Avg Trade Price (local)]         --IF OBJECT_ID('tempdb..#hl_exception1', 'U') IS NOT NULL DROP TABLE #hl_exception1         --SELECT DISTINCT *     --INTO #hl_exception1 FROM #hl_exception     --WHERE HL_EXCEPTION =1         IF OBJECT_ID('VISTA_STAGING.dbo.VG_MARKET_HIGH_LOW_TABLE', 'U') IS NULL            SELECT DISTINCT *      INTO VISTA_STAGING.dbo.VG_MARKET_HIGH_LOW_TABLE     FROM #hl_exception         ELSE          SET IDENTITY_INSERT VISTA_STAGING.dbo.VG_MARKET_HIGH_LOW_TABLE ON         MERGE VISTA_STAGING.dbo.VG_MARKET_HIGH_LOW_TABLE AS T     USING #hl_exception AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET          T.ORD_NUM = S.ORD_NUM,       T.HL_EXCEPTION =  CASE WHEN S.HL_EXCEPTION > T.HL_EXCEPTION                THEN S.HL_EXCEPTION ELSE T.HL_EXCEPTION END,       T.HL_CREATEDATE = CASE WHEN S.HL_EXCEPTION > T.HL_EXCEPTION              THEN S.HL_CREATEDATE ELSE T.HL_CREATEDATE END            WHEN NOT MATCHED       THEN INSERT (ORD_NUM, ID, HL_EXCEPTION, HL_CREATEDATE)      VALUES (S.ORD_NUM, S.ID, S.HL_EXCEPTION, S.HL_CREATEDATE);        IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    select distinct    CONCAT(ORD_NUM, '_', ID, '_HL') AS ID,    '1A1' AS STATUS,    'Equity' AS DEALING_DESK,    NULL AS FINAL_UPDATED_TIME    into #temp_status_table    from VISTA_STAGING.dbo.VG_MARKET_HIGH_LOW_TABLE    WHERE HL_EXCEPTION =1             MERGE VISTA_REPORTING.dbo.FINAL_STATUS_UPDATE_TABLE AS T     USING #temp_status_table AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN       UPDATE SET       T.ID=T.ID,       T.STATUS=T.STATUS,       T.DEALING_DESK = 'Equity',       T.FINAL_UPDATED_TIME=T.FINAL_UPDATED_TIME     WHEN NOT MATCHED       THEN       INSERT (ID, STATUS, FINAL_UPDATED_TIME, DEALING_DESK)      VALUES (S.ID, S.STATUS, S.FINAL_UPDATED_TIME,'Equity');         --Add record into the AUDIT_TABLE     IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit     SELECT DISTINCT      NULL AS MULTI_FUND_ID,      t.ORD_NUM AS TRD_ORD,      NULL AS PM_ORD,      'High Low Report' AS Exception_Type,      CONCAT(ex.ORD_NUM, '_', ID, '_HL') AS ID,      NULL AS REASON,      NULL AS COMMENT,      'For Review' AS Status,      NULL AS ClientExecID,      'Equity' AS DEALER_DESK,      GETDATE() AS CREATE_TIME,      NULL AS UPDATE_TIME,      NULL AS DEALER,      '1A1' AS STATUS_ID,      AUTH_TIME AS ORD_AUTH,      NULL AS TRADE_EXEC     INTO #temp_audit     FROM #hl_exception ex     LEFT JOIN (SELECT DISTINCT ORD_NUM, MIN(AUTH_TIME) AS AUTH_TIME FROM VISTA_REPORTING.dbo.TRD_ORDERS GROUP BY ORD_NUM) t     ON ex.ORD_NUM = t.ORD_NUM     WHERE ex.HL_EXCEPTION = 1              MERGE VISTA_REPORTING.dbo.AUDIT_TABLE AS T     USING #temp_audit AS S     ON (T.ID = S.ID)     WHEN MATCHED      THEN --Do nothing      UPDATE SET      T.ID = T.ID     WHEN NOT MATCHED       THEN       INSERT (MULTIFUND,    TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, STATUS, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC)      VALUES (MULTI_FUND_ID, TRD_ORD, PM_ORD,   Exception_Type, ID, REASON, COMMENT, Status, ClientExecID, DEALER_DESK, CREATE_TIME, UPDATE_TIME, DEALER, STATUS_ID, ORD_AUTH, TRADE_EXEC);            IF OBJECT_ID('tempdb..#hl_exception', 'U') IS NOT NULL DROP TABLE #hl_exception    IF OBJECT_ID('tempdb..#temp_status_table', 'U') IS NOT NULL DROP TABLE #temp_status_table    IF OBJECT_ID('tempdb..#temp_audit', 'U') IS NOT NULL DROP TABLE #temp_audit        END        --- DEFINITION END ---  === STORED PROCEDURE END ===    